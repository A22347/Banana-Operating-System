
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 d8 fb 00 00       	call   c000fbf8 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 a3 86 02 00       	call   c00286c8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 72 92 02 c0       	mov    ebx,0xc0029272
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 80 92 02 c0    	cmp    ebx,0xc0029280
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 d8 db 02 c0       	mov    eax,0xc002dbd8
c0000049:	3d d8 db 02 c0       	cmp    eax,0xc002dbd8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 d8 db 02 c0       	push   0xc002dbd8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 d8 db 02 c0       	mov    eax,0xc002dbd8
c0000075:	2d d8 db 02 c0       	sub    eax,0xc002dbd8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 d8 db 02 c0       	push   0xc002dbd8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 08 e2 02 c0 00 	cmp    BYTE PTR ds:0xc002e208,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 88 92 02 c0       	mov    ebx,0xc0029288
c00000bb:	81 eb 84 92 02 c0    	sub    ebx,0xc0029284
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 84 92 02 c0       	mov    esi,0xc0029284
c00000ca:	a1 0c e2 02 c0       	mov    eax,ds:0xc002e20c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 0c e2 02 c0       	mov    ds:0xc002e20c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 0c e2 02 c0       	mov    eax,ds:0xc002e20c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 d8 db 02 c0       	push   0xc002dbd8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 08 e2 02 c0 01 	mov    BYTE PTR ds:0xc002e208,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 10 e2 02 c0       	push   0xc002e210
c000012c:	68 d8 db 02 c0       	push   0xc002dbd8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	85 d2                	test   edx,edx
c0000391:	75 11                	jne    c00003a4 <commonThreadSwitch.firstTime>
c0000393:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000396:	e8 73 d6 01 00       	call   c001da0e <changeTSS>
c000039b:	5d                   	pop    ebp
c000039c:	5f                   	pop    edi
c000039d:	5e                   	pop    esi
c000039e:	5a                   	pop    edx
c000039f:	59                   	pop    ecx
c00003a0:	5b                   	pop    ebx
c00003a1:	58                   	pop    eax
c00003a2:	9d                   	popf   
c00003a3:	c3                   	ret    

c00003a4 <commonThreadSwitch.firstTime>:
c00003a4:	fa                   	cli    
c00003a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003a8:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003ad:	60                   	pusha  
c00003ae:	e8 9c 29 01 00       	call   c0012d4f <mapVASFirstTime>
c00003b3:	61                   	popa   
c00003b4:	89 c4                	mov    esp,eax
c00003b6:	56                   	push   esi
c00003b7:	52                   	push   edx
c00003b8:	e8 51 d6 01 00       	call   c001da0e <changeTSS>
c00003bd:	5a                   	pop    edx
c00003be:	5e                   	pop    esi
c00003bf:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003c6:	5d                   	pop    ebp
c00003c7:	5f                   	pop    edi
c00003c8:	5e                   	pop    esi
c00003c9:	59                   	pop    ecx
c00003ca:	59                   	pop    ecx
c00003cb:	5b                   	pop    ebx
c00003cc:	58                   	pop    eax
c00003cd:	81 c4 04 00 00 00    	add    esp,0x4
c00003d3:	6a 02                	push   0x2
c00003d5:	9d                   	popf   
c00003d6:	52                   	push   edx
c00003d7:	e8 9f da 01 00       	call   c001de7b <taskStartupFunction>
c00003dc:	5a                   	pop    edx
c00003dd:	50                   	push   eax
c00003de:	ff d2                	call   edx
c00003e0:	e8 4d e0 01 00       	call   c001e432 <taskReturned>
c00003e5:	e9 fb ff ff ff       	jmp    c00003e5 <commonThreadSwitch.firstTime+0x41>

c00003ea <asmQuickAcquireLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f0 <asmQuickAcquireLock.retry>:
c00003f0:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003f5:	72 02                	jb     c00003f9 <asmQuickAcquireLock.spin_with_pause>
c00003f7:	fa                   	cli    
c00003f8:	c3                   	ret    

c00003f9 <asmQuickAcquireLock.spin_with_pause>:
c00003f9:	f3 90                	pause  
c00003fb:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000401:	75 f6                	jne    c00003f9 <asmQuickAcquireLock.spin_with_pause>
c0000403:	e9 e8 ff ff ff       	jmp    c00003f0 <asmQuickAcquireLock.retry>

c0000408 <asmQuickReleaseLock>:
c0000408:	55                   	push   ebp
c0000409:	89 e5                	mov    ebp,esp
c000040b:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000412:	5d                   	pop    ebp
c0000413:	c3                   	ret    

c0000414 <asmAcquireLock>:
c0000414:	55                   	push   ebp
c0000415:	89 e5                	mov    ebp,esp
c0000417:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000041a <asmAcquireLock.retry>:
c000041a:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000041f:	72 05                	jb     c0000426 <asmAcquireLock.spin_with_pause>
c0000421:	9c                   	pushf  
c0000422:	58                   	pop    eax
c0000423:	fa                   	cli    
c0000424:	5d                   	pop    ebp
c0000425:	c3                   	ret    

c0000426 <asmAcquireLock.spin_with_pause>:
c0000426:	f3 90                	pause  
c0000428:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000042e:	75 f6                	jne    c0000426 <asmAcquireLock.spin_with_pause>
c0000430:	e9 e5 ff ff ff       	jmp    c000041a <asmAcquireLock.retry>

c0000435 <asmReleaseLock>:
c0000435:	55                   	push   ebp
c0000436:	89 e5                	mov    ebp,esp
c0000438:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000043b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000043e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000444:	52                   	push   edx
c0000445:	9d                   	popf   
c0000446:	5d                   	pop    ebp
c0000447:	c3                   	ret    

c0000448 <loadGDT>:
c0000448:	0f 01 15 50 e6 02 c0 	lgdtd  ds:0xc002e650
c000044f:	66 b8 10 00          	mov    ax,0x10
c0000453:	66 8e d8             	mov    ds,ax
c0000456:	66 8e c0             	mov    es,ax
c0000459:	66 8e e0             	mov    fs,ax
c000045c:	66 8e e8             	mov    gs,ax
c000045f:	66 8e d0             	mov    ss,ax
c0000462:	e9 00 00 00 00       	jmp    c0000467 <flush2>

c0000467 <flush2>:
c0000467:	c3                   	ret    

c0000468 <isr0>:
c0000468:	fa                   	cli    
c0000469:	68 00 00 00 00       	push   0x0
c000046e:	68 00 00 00 00       	push   0x0
c0000473:	e9 44 01 00 00       	jmp    c00005bc <int_common_stub>

c0000478 <isr1>:
c0000478:	fa                   	cli    
c0000479:	6a 00                	push   0x0
c000047b:	6a 01                	push   0x1
c000047d:	e9 3a 01 00 00       	jmp    c00005bc <int_common_stub>

c0000482 <isr2>:
c0000482:	fa                   	cli    
c0000483:	6a 00                	push   0x0
c0000485:	6a 02                	push   0x2
c0000487:	e9 30 01 00 00       	jmp    c00005bc <int_common_stub>

c000048c <isr3>:
c000048c:	fa                   	cli    
c000048d:	6a 00                	push   0x0
c000048f:	6a 03                	push   0x3
c0000491:	e9 26 01 00 00       	jmp    c00005bc <int_common_stub>

c0000496 <isr4>:
c0000496:	fa                   	cli    
c0000497:	6a 00                	push   0x0
c0000499:	6a 04                	push   0x4
c000049b:	e9 1c 01 00 00       	jmp    c00005bc <int_common_stub>

c00004a0 <isr5>:
c00004a0:	fa                   	cli    
c00004a1:	6a 00                	push   0x0
c00004a3:	6a 05                	push   0x5
c00004a5:	e9 12 01 00 00       	jmp    c00005bc <int_common_stub>

c00004aa <isr6>:
c00004aa:	fa                   	cli    
c00004ab:	6a 00                	push   0x0
c00004ad:	6a 06                	push   0x6
c00004af:	e9 08 01 00 00       	jmp    c00005bc <int_common_stub>

c00004b4 <isr7>:
c00004b4:	fa                   	cli    
c00004b5:	6a 00                	push   0x0
c00004b7:	6a 07                	push   0x7
c00004b9:	e9 fe 00 00 00       	jmp    c00005bc <int_common_stub>

c00004be <isr8>:
c00004be:	fa                   	cli    
c00004bf:	6a 08                	push   0x8
c00004c1:	e9 f6 00 00 00       	jmp    c00005bc <int_common_stub>

c00004c6 <isr9>:
c00004c6:	fa                   	cli    
c00004c7:	6a 00                	push   0x0
c00004c9:	6a 09                	push   0x9
c00004cb:	e9 ec 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d0 <isr10>:
c00004d0:	fa                   	cli    
c00004d1:	6a 0a                	push   0xa
c00004d3:	e9 e4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d8 <isr11>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0b                	push   0xb
c00004db:	e9 dc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e0 <isr12>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0c                	push   0xc
c00004e3:	e9 d4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e8 <isr13>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0d                	push   0xd
c00004eb:	e9 cc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f0 <isr14>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0e                	push   0xe
c00004f3:	e9 c4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f8 <isr15>:
c00004f8:	fa                   	cli    
c00004f9:	6a 00                	push   0x0
c00004fb:	6a 0f                	push   0xf
c00004fd:	e9 ba 00 00 00       	jmp    c00005bc <int_common_stub>

c0000502 <isr16>:
c0000502:	fa                   	cli    
c0000503:	6a 00                	push   0x0
c0000505:	6a 10                	push   0x10
c0000507:	e9 b0 00 00 00       	jmp    c00005bc <int_common_stub>

c000050c <isr17>:
c000050c:	fa                   	cli    
c000050d:	6a 00                	push   0x0
c000050f:	6a 11                	push   0x11
c0000511:	e9 a6 00 00 00       	jmp    c00005bc <int_common_stub>

c0000516 <isr18>:
c0000516:	fa                   	cli    
c0000517:	6a 00                	push   0x0
c0000519:	6a 12                	push   0x12
c000051b:	e9 9c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000520 <irq3>:
c0000520:	fa                   	cli    
c0000521:	6a 00                	push   0x0
c0000523:	6a 23                	push   0x23
c0000525:	e9 92 00 00 00       	jmp    c00005bc <int_common_stub>

c000052a <irq4>:
c000052a:	fa                   	cli    
c000052b:	6a 00                	push   0x0
c000052d:	6a 24                	push   0x24
c000052f:	e9 88 00 00 00       	jmp    c00005bc <int_common_stub>

c0000534 <irq5>:
c0000534:	fa                   	cli    
c0000535:	6a 00                	push   0x0
c0000537:	6a 25                	push   0x25
c0000539:	e9 7e 00 00 00       	jmp    c00005bc <int_common_stub>

c000053e <irq6>:
c000053e:	fa                   	cli    
c000053f:	6a 00                	push   0x0
c0000541:	6a 26                	push   0x26
c0000543:	e9 74 00 00 00       	jmp    c00005bc <int_common_stub>

c0000548 <irq7>:
c0000548:	fa                   	cli    
c0000549:	6a 00                	push   0x0
c000054b:	6a 27                	push   0x27
c000054d:	e9 6a 00 00 00       	jmp    c00005bc <int_common_stub>

c0000552 <irq8>:
c0000552:	fa                   	cli    
c0000553:	6a 00                	push   0x0
c0000555:	6a 28                	push   0x28
c0000557:	e9 60 00 00 00       	jmp    c00005bc <int_common_stub>

c000055c <irq9>:
c000055c:	fa                   	cli    
c000055d:	6a 00                	push   0x0
c000055f:	6a 29                	push   0x29
c0000561:	e9 56 00 00 00       	jmp    c00005bc <int_common_stub>

c0000566 <irq10>:
c0000566:	fa                   	cli    
c0000567:	6a 00                	push   0x0
c0000569:	6a 2a                	push   0x2a
c000056b:	e9 4c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000570 <irq11>:
c0000570:	fa                   	cli    
c0000571:	6a 00                	push   0x0
c0000573:	6a 2b                	push   0x2b
c0000575:	e9 42 00 00 00       	jmp    c00005bc <int_common_stub>

c000057a <irq12>:
c000057a:	fa                   	cli    
c000057b:	6a 00                	push   0x0
c000057d:	6a 2c                	push   0x2c
c000057f:	e9 38 00 00 00       	jmp    c00005bc <int_common_stub>

c0000584 <irq13>:
c0000584:	fa                   	cli    
c0000585:	6a 00                	push   0x0
c0000587:	6a 2d                	push   0x2d
c0000589:	e9 2e 00 00 00       	jmp    c00005bc <int_common_stub>

c000058e <irq14>:
c000058e:	fa                   	cli    
c000058f:	6a 00                	push   0x0
c0000591:	6a 2e                	push   0x2e
c0000593:	e9 24 00 00 00       	jmp    c00005bc <int_common_stub>

c0000598 <irq15>:
c0000598:	fa                   	cli    
c0000599:	6a 00                	push   0x0
c000059b:	6a 2f                	push   0x2f
c000059d:	e9 1a 00 00 00       	jmp    c00005bc <int_common_stub>

c00005a2 <irq1>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 21                	push   0x21
c00005a7:	eb 13                	jmp    c00005bc <int_common_stub>

c00005a9 <irq2>:
c00005a9:	fa                   	cli    
c00005aa:	6a 00                	push   0x0
c00005ac:	6a 22                	push   0x22
c00005ae:	eb 0c                	jmp    c00005bc <int_common_stub>

c00005b0 <isr96>:
c00005b0:	6a 00                	push   0x0
c00005b2:	6a 60                	push   0x60
c00005b4:	fb                   	sti    
c00005b5:	eb 05                	jmp    c00005bc <int_common_stub>

c00005b7 <irq0>:
c00005b7:	fa                   	cli    
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 20                	push   0x20

c00005bc <int_common_stub>:
c00005bc:	60                   	pusha  
c00005bd:	1e                   	push   ds
c00005be:	06                   	push   es
c00005bf:	0f a0                	push   fs
c00005c1:	0f a8                	push   gs
c00005c3:	66 b8 10 00          	mov    ax,0x10
c00005c7:	66 8e d8             	mov    ds,ax
c00005ca:	66 8e c0             	mov    es,ax
c00005cd:	66 8e e0             	mov    fs,ax
c00005d0:	66 8e e8             	mov    gs,ax
c00005d3:	54                   	push   esp
c00005d4:	e8 7a 46 01 00       	call   c0014c53 <int_handler>
c00005d9:	81 c4 04 00 00 00    	add    esp,0x4
c00005df:	0f a9                	pop    gs
c00005e1:	0f a1                	pop    fs
c00005e3:	07                   	pop    es
c00005e4:	1f                   	pop    ds
c00005e5:	61                   	popa   
c00005e6:	81 c4 08 00 00 00    	add    esp,0x8
c00005ec:	cf                   	iret   

c00005ed <irq16>:
c00005ed:	fa                   	cli    
c00005ee:	6a 00                	push   0x0
c00005f0:	6a 30                	push   0x30
c00005f2:	e9 c5 ff ff ff       	jmp    c00005bc <int_common_stub>

c00005f7 <irq17>:
c00005f7:	fa                   	cli    
c00005f8:	6a 00                	push   0x0
c00005fa:	6a 31                	push   0x31
c00005fc:	e9 bb ff ff ff       	jmp    c00005bc <int_common_stub>

c0000601 <irq18>:
c0000601:	fa                   	cli    
c0000602:	6a 00                	push   0x0
c0000604:	6a 32                	push   0x32
c0000606:	e9 b1 ff ff ff       	jmp    c00005bc <int_common_stub>

c000060b <irq19>:
c000060b:	fa                   	cli    
c000060c:	6a 00                	push   0x0
c000060e:	6a 33                	push   0x33
c0000610:	e9 a7 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000615 <irq20>:
c0000615:	fa                   	cli    
c0000616:	6a 00                	push   0x0
c0000618:	6a 34                	push   0x34
c000061a:	e9 9d ff ff ff       	jmp    c00005bc <int_common_stub>

c000061f <irq21>:
c000061f:	fa                   	cli    
c0000620:	6a 00                	push   0x0
c0000622:	6a 35                	push   0x35
c0000624:	e9 93 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000629 <irq22>:
c0000629:	fa                   	cli    
c000062a:	6a 00                	push   0x0
c000062c:	6a 36                	push   0x36
c000062e:	e9 89 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000633 <irq23>:
c0000633:	fa                   	cli    
c0000634:	6a 00                	push   0x0
c0000636:	6a 37                	push   0x37
c0000638:	e9 7f ff ff ff       	jmp    c00005bc <int_common_stub>
c000063d:	66 90                	xchg   ax,ax
c000063f:	90                   	nop

c0000640 <memcmp>:
c0000640:	56                   	push   esi
c0000641:	53                   	push   ebx
c0000642:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000646:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000064a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000064e:	85 f6                	test   esi,esi
c0000650:	74 1d                	je     c000066f <memcmp+0x2f>
c0000652:	8a 08                	mov    cl,BYTE PTR [eax]
c0000654:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000657:	38 cb                	cmp    bl,cl
c0000659:	75 19                	jne    c0000674 <memcmp+0x34>
c000065b:	01 c6                	add    esi,eax
c000065d:	eb 0a                	jmp    c0000669 <memcmp+0x29>
c000065f:	90                   	nop
c0000660:	8a 08                	mov    cl,BYTE PTR [eax]
c0000662:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000665:	38 d9                	cmp    cl,bl
c0000667:	75 0b                	jne    c0000674 <memcmp+0x34>
c0000669:	40                   	inc    eax
c000066a:	42                   	inc    edx
c000066b:	39 f0                	cmp    eax,esi
c000066d:	75 f1                	jne    c0000660 <memcmp+0x20>
c000066f:	31 c0                	xor    eax,eax
c0000671:	5b                   	pop    ebx
c0000672:	5e                   	pop    esi
c0000673:	c3                   	ret    
c0000674:	0f b6 c1             	movzx  eax,cl
c0000677:	29 d8                	sub    eax,ebx
c0000679:	5b                   	pop    ebx
c000067a:	5e                   	pop    esi
c000067b:	c3                   	ret    

c000067c <memmove>:
c000067c:	55                   	push   ebp
c000067d:	57                   	push   edi
c000067e:	56                   	push   esi
c000067f:	53                   	push   ebx
c0000680:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000684:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000688:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000068c:	39 dd                	cmp    ebp,ebx
c000068e:	0f 83 80 00 00 00    	jae    c0000714 <memmove+0x98>
c0000694:	85 d2                	test   edx,edx
c0000696:	74 74                	je     c000070c <memmove+0x90>
c0000698:	8d 4b 04             	lea    ecx,[ebx+0x4]
c000069b:	8d 75 04             	lea    esi,[ebp+0x4]
c000069e:	39 cd                	cmp    ebp,ecx
c00006a0:	0f 93 c1             	setae  cl
c00006a3:	39 f3                	cmp    ebx,esi
c00006a5:	0f 93 c0             	setae  al
c00006a8:	89 c6                	mov    esi,eax
c00006aa:	09 ce                	or     esi,ecx
c00006ac:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006af:	89 f0                	mov    eax,esi
c00006b1:	83 f9 0c             	cmp    ecx,0xc
c00006b4:	0f 97 c1             	seta   cl
c00006b7:	84 c8                	test   al,cl
c00006b9:	74 75                	je     c0000730 <memmove+0xb4>
c00006bb:	89 e9                	mov    ecx,ebp
c00006bd:	09 d9                	or     ecx,ebx
c00006bf:	83 e1 03             	and    ecx,0x3
c00006c2:	75 6c                	jne    c0000730 <memmove+0xb4>
c00006c4:	89 d7                	mov    edi,edx
c00006c6:	89 d9                	mov    ecx,ebx
c00006c8:	83 e7 fc             	and    edi,0xfffffffc
c00006cb:	89 ee                	mov    esi,ebp
c00006cd:	01 df                	add    edi,ebx
c00006cf:	90                   	nop
c00006d0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006d2:	83 c6 04             	add    esi,0x4
c00006d5:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006d8:	83 c1 04             	add    ecx,0x4
c00006db:	39 f9                	cmp    ecx,edi
c00006dd:	75 f1                	jne    c00006d0 <memmove+0x54>
c00006df:	89 d1                	mov    ecx,edx
c00006e1:	89 d7                	mov    edi,edx
c00006e3:	83 e1 fc             	and    ecx,0xfffffffc
c00006e6:	29 cf                	sub    edi,ecx
c00006e8:	01 cb                	add    ebx,ecx
c00006ea:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006ee:	39 ca                	cmp    edx,ecx
c00006f0:	74 1a                	je     c000070c <memmove+0x90>
c00006f2:	8a 03                	mov    al,BYTE PTR [ebx]
c00006f4:	83 ff 01             	cmp    edi,0x1
c00006f7:	88 06                	mov    BYTE PTR [esi],al
c00006f9:	74 11                	je     c000070c <memmove+0x90>
c00006fb:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00006fe:	83 ff 02             	cmp    edi,0x2
c0000701:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000704:	74 06                	je     c000070c <memmove+0x90>
c0000706:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000709:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000070c:	5b                   	pop    ebx
c000070d:	89 e8                	mov    eax,ebp
c000070f:	5e                   	pop    esi
c0000710:	5f                   	pop    edi
c0000711:	5d                   	pop    ebp
c0000712:	c3                   	ret    
c0000713:	90                   	nop
c0000714:	76 f6                	jbe    c000070c <memmove+0x90>
c0000716:	85 d2                	test   edx,edx
c0000718:	74 f2                	je     c000070c <memmove+0x90>
c000071a:	4b                   	dec    ebx
c000071b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000071e:	66 90                	xchg   ax,ax
c0000720:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000723:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000726:	4a                   	dec    edx
c0000727:	75 f7                	jne    c0000720 <memmove+0xa4>
c0000729:	5b                   	pop    ebx
c000072a:	89 e8                	mov    eax,ebp
c000072c:	5e                   	pop    esi
c000072d:	5f                   	pop    edi
c000072e:	5d                   	pop    ebp
c000072f:	c3                   	ret    
c0000730:	01 ea                	add    edx,ebp
c0000732:	89 e9                	mov    ecx,ebp
c0000734:	8a 03                	mov    al,BYTE PTR [ebx]
c0000736:	41                   	inc    ecx
c0000737:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000073a:	43                   	inc    ebx
c000073b:	39 d1                	cmp    ecx,edx
c000073d:	75 f5                	jne    c0000734 <memmove+0xb8>
c000073f:	eb cb                	jmp    c000070c <memmove+0x90>
c0000741:	8d 76 00             	lea    esi,[esi+0x0]

c0000744 <memcpy>:
c0000744:	57                   	push   edi
c0000745:	56                   	push   esi
c0000746:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000074a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000074e:	a8 03                	test   al,0x3
c0000750:	74 12                	je     c0000764 <memcpy+0x20>
c0000752:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000756:	89 c1                	mov    ecx,eax
c0000758:	fc                   	cld    
c0000759:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000075b:	29 c7                	sub    edi,eax
c000075d:	5e                   	pop    esi
c000075e:	89 f8                	mov    eax,edi
c0000760:	5f                   	pop    edi
c0000761:	c3                   	ret    
c0000762:	66 90                	xchg   ax,ax
c0000764:	89 c1                	mov    ecx,eax
c0000766:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076a:	c1 e9 02             	shr    ecx,0x2
c000076d:	fc                   	cld    
c000076e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000770:	29 c7                	sub    edi,eax
c0000772:	5e                   	pop    esi
c0000773:	89 f8                	mov    eax,edi
c0000775:	5f                   	pop    edi
c0000776:	c3                   	ret    
c0000777:	90                   	nop

c0000778 <memset>:
c0000778:	57                   	push   edi
c0000779:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000077d:	85 c9                	test   ecx,ecx
c000077f:	74 0b                	je     c000078c <memset+0x14>
c0000781:	fc                   	cld    
c0000782:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000786:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000078a:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000078c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000790:	5f                   	pop    edi
c0000791:	c3                   	ret    
c0000792:	66 90                	xchg   ax,ax

c0000794 <strlen>:
c0000794:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000798:	31 c0                	xor    eax,eax
c000079a:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c000079d:	74 09                	je     c00007a8 <strlen+0x14>
c000079f:	90                   	nop
c00007a0:	40                   	inc    eax
c00007a1:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00007a5:	75 f9                	jne    c00007a0 <strlen+0xc>
c00007a7:	c3                   	ret    
c00007a8:	c3                   	ret    
c00007a9:	8d 76 00             	lea    esi,[esi+0x0]

c00007ac <strpbrk>:
c00007ac:	57                   	push   edi
c00007ad:	56                   	push   esi
c00007ae:	53                   	push   ebx
c00007af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007b3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007b7:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b9:	84 db                	test   bl,bl
c00007bb:	74 21                	je     c00007de <strpbrk+0x32>
c00007bd:	8a 07                	mov    al,BYTE PTR [edi]
c00007bf:	84 c0                	test   al,al
c00007c1:	74 14                	je     c00007d7 <strpbrk+0x2b>
c00007c3:	38 d8                	cmp    al,bl
c00007c5:	74 19                	je     c00007e0 <strpbrk+0x34>
c00007c7:	89 fa                	mov    edx,edi
c00007c9:	eb 05                	jmp    c00007d0 <strpbrk+0x24>
c00007cb:	90                   	nop
c00007cc:	38 d9                	cmp    cl,bl
c00007ce:	74 10                	je     c00007e0 <strpbrk+0x34>
c00007d0:	42                   	inc    edx
c00007d1:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007d3:	84 c9                	test   cl,cl
c00007d5:	75 f5                	jne    c00007cc <strpbrk+0x20>
c00007d7:	46                   	inc    esi
c00007d8:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007da:	84 db                	test   bl,bl
c00007dc:	75 e1                	jne    c00007bf <strpbrk+0x13>
c00007de:	31 f6                	xor    esi,esi
c00007e0:	89 f0                	mov    eax,esi
c00007e2:	5b                   	pop    ebx
c00007e3:	5e                   	pop    esi
c00007e4:	5f                   	pop    edi
c00007e5:	c3                   	ret    
c00007e6:	66 90                	xchg   ax,ax

c00007e8 <strtok>:
c00007e8:	56                   	push   esi
c00007e9:	53                   	push   ebx
c00007ea:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007ee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007f2:	85 db                	test   ebx,ebx
c00007f4:	75 07                	jne    c00007fd <strtok+0x15>
c00007f6:	eb 2c                	jmp    c0000824 <strtok+0x3c>
c00007f8:	43                   	inc    ebx
c00007f9:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007fd:	56                   	push   esi
c00007fe:	53                   	push   ebx
c00007ff:	e8 a8 ff ff ff       	call   c00007ac <strpbrk>
c0000804:	5a                   	pop    edx
c0000805:	a3 28 e2 02 c0       	mov    ds:0xc002e228,eax
c000080a:	59                   	pop    ecx
c000080b:	39 d8                	cmp    eax,ebx
c000080d:	74 e9                	je     c00007f8 <strtok+0x10>
c000080f:	85 c0                	test   eax,eax
c0000811:	74 1b                	je     c000082e <strtok+0x46>
c0000813:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000816:	8d 50 01             	lea    edx,[eax+0x1]
c0000819:	89 d8                	mov    eax,ebx
c000081b:	89 15 28 e2 02 c0    	mov    DWORD PTR ds:0xc002e228,edx
c0000821:	5b                   	pop    ebx
c0000822:	5e                   	pop    esi
c0000823:	c3                   	ret    
c0000824:	8b 1d 28 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e228
c000082a:	85 db                	test   ebx,ebx
c000082c:	75 cf                	jne    c00007fd <strtok+0x15>
c000082e:	31 c0                	xor    eax,eax
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	90                   	nop

c0000834 <strcpy>:
c0000834:	53                   	push   ebx
c0000835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000839:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000083d:	89 c3                	mov    ebx,eax
c000083f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000841:	84 d2                	test   dl,dl
c0000843:	74 0d                	je     c0000852 <strcpy+0x1e>
c0000845:	8d 76 00             	lea    esi,[esi+0x0]
c0000848:	88 13                	mov    BYTE PTR [ebx],dl
c000084a:	41                   	inc    ecx
c000084b:	43                   	inc    ebx
c000084c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000084e:	84 d2                	test   dl,dl
c0000850:	75 f6                	jne    c0000848 <strcpy+0x14>
c0000852:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000855:	5b                   	pop    ebx
c0000856:	c3                   	ret    
c0000857:	90                   	nop

c0000858 <strncpy>:
c0000858:	55                   	push   ebp
c0000859:	57                   	push   edi
c000085a:	56                   	push   esi
c000085b:	53                   	push   ebx
c000085c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000860:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000864:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000868:	85 c0                	test   eax,eax
c000086a:	74 39                	je     c00008a5 <strncpy+0x4d>
c000086c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000086e:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000871:	8d 55 01             	lea    edx,[ebp+0x1]
c0000874:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000877:	84 db                	test   bl,bl
c0000879:	74 31                	je     c00008ac <strncpy+0x54>
c000087b:	85 c9                	test   ecx,ecx
c000087d:	74 26                	je     c00008a5 <strncpy+0x4d>
c000087f:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000882:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000885:	8d 55 02             	lea    edx,[ebp+0x2]
c0000888:	8d 46 02             	lea    eax,[esi+0x2]
c000088b:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000088e:	84 db                	test   bl,bl
c0000890:	75 0f                	jne    c00008a1 <strncpy+0x49>
c0000892:	eb 18                	jmp    c00008ac <strncpy+0x54>
c0000894:	40                   	inc    eax
c0000895:	42                   	inc    edx
c0000896:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000899:	49                   	dec    ecx
c000089a:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000089d:	84 db                	test   bl,bl
c000089f:	74 0b                	je     c00008ac <strncpy+0x54>
c00008a1:	85 c9                	test   ecx,ecx
c00008a3:	75 ef                	jne    c0000894 <strncpy+0x3c>
c00008a5:	5b                   	pop    ebx
c00008a6:	89 e8                	mov    eax,ebp
c00008a8:	5e                   	pop    esi
c00008a9:	5f                   	pop    edi
c00008aa:	5d                   	pop    ebp
c00008ab:	c3                   	ret    
c00008ac:	85 c9                	test   ecx,ecx
c00008ae:	74 f5                	je     c00008a5 <strncpy+0x4d>
c00008b0:	fc                   	cld    
c00008b1:	31 c0                	xor    eax,eax
c00008b3:	89 d7                	mov    edi,edx
c00008b5:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008b7:	89 e8                	mov    eax,ebp
c00008b9:	5b                   	pop    ebx
c00008ba:	5e                   	pop    esi
c00008bb:	5f                   	pop    edi
c00008bc:	5d                   	pop    ebp
c00008bd:	c3                   	ret    
c00008be:	66 90                	xchg   ax,ax

c00008c0 <strcmp>:
c00008c0:	56                   	push   esi
c00008c1:	53                   	push   ebx
c00008c2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008ca:	8a 16                	mov    dl,BYTE PTR [esi]
c00008cc:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008cf:	38 d1                	cmp    cl,dl
c00008d1:	75 1d                	jne    c00008f0 <strcmp+0x30>
c00008d3:	84 c9                	test   cl,cl
c00008d5:	74 21                	je     c00008f8 <strcmp+0x38>
c00008d7:	b8 01 00 00 00       	mov    eax,0x1
c00008dc:	eb 07                	jmp    c00008e5 <strcmp+0x25>
c00008de:	66 90                	xchg   ax,ax
c00008e0:	40                   	inc    eax
c00008e1:	84 d2                	test   dl,dl
c00008e3:	74 13                	je     c00008f8 <strcmp+0x38>
c00008e5:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008e8:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 f0                	je     c00008e0 <strcmp+0x20>
c00008f0:	0f b6 c2             	movzx  eax,dl
c00008f3:	5b                   	pop    ebx
c00008f4:	29 c8                	sub    eax,ecx
c00008f6:	5e                   	pop    esi
c00008f7:	c3                   	ret    
c00008f8:	31 c0                	xor    eax,eax
c00008fa:	5b                   	pop    ebx
c00008fb:	5e                   	pop    esi
c00008fc:	c3                   	ret    
c00008fd:	8d 76 00             	lea    esi,[esi+0x0]

c0000900 <strchr>:
c0000900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000904:	8a 10                	mov    dl,BYTE PTR [eax]
c0000906:	84 d2                	test   dl,dl
c0000908:	74 15                	je     c000091f <strchr+0x1f>
c000090a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000090e:	38 ca                	cmp    dl,cl
c0000910:	75 06                	jne    c0000918 <strchr+0x18>
c0000912:	eb 0e                	jmp    c0000922 <strchr+0x22>
c0000914:	38 ca                	cmp    dl,cl
c0000916:	74 09                	je     c0000921 <strchr+0x21>
c0000918:	40                   	inc    eax
c0000919:	8a 10                	mov    dl,BYTE PTR [eax]
c000091b:	84 d2                	test   dl,dl
c000091d:	75 f5                	jne    c0000914 <strchr+0x14>
c000091f:	31 c0                	xor    eax,eax
c0000921:	c3                   	ret    
c0000922:	c3                   	ret    
c0000923:	90                   	nop

c0000924 <strncmp>:
c0000924:	57                   	push   edi
c0000925:	56                   	push   esi
c0000926:	53                   	push   ebx
c0000927:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000092b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000092f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000933:	85 ff                	test   edi,edi
c0000935:	74 28                	je     c000095f <strncmp+0x3b>
c0000937:	8a 16                	mov    dl,BYTE PTR [esi]
c0000939:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000093c:	38 d1                	cmp    cl,dl
c000093e:	75 28                	jne    c0000968 <strncmp+0x44>
c0000940:	8d 46 01             	lea    eax,[esi+0x1]
c0000943:	84 c9                	test   cl,cl
c0000945:	74 18                	je     c000095f <strncmp+0x3b>
c0000947:	01 fe                	add    esi,edi
c0000949:	eb 0f                	jmp    c000095a <strncmp+0x36>
c000094b:	90                   	nop
c000094c:	8a 10                	mov    dl,BYTE PTR [eax]
c000094e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000951:	38 ca                	cmp    dl,cl
c0000953:	75 13                	jne    c0000968 <strncmp+0x44>
c0000955:	40                   	inc    eax
c0000956:	84 d2                	test   dl,dl
c0000958:	74 05                	je     c000095f <strncmp+0x3b>
c000095a:	43                   	inc    ebx
c000095b:	39 c6                	cmp    esi,eax
c000095d:	75 ed                	jne    c000094c <strncmp+0x28>
c000095f:	5b                   	pop    ebx
c0000960:	31 c0                	xor    eax,eax
c0000962:	5e                   	pop    esi
c0000963:	5f                   	pop    edi
c0000964:	c3                   	ret    
c0000965:	8d 76 00             	lea    esi,[esi+0x0]
c0000968:	5b                   	pop    ebx
c0000969:	0f b6 c2             	movzx  eax,dl
c000096c:	5e                   	pop    esi
c000096d:	29 c8                	sub    eax,ecx
c000096f:	5f                   	pop    edi
c0000970:	c3                   	ret    
c0000971:	8d 76 00             	lea    esi,[esi+0x0]

c0000974 <strcat>:
c0000974:	56                   	push   esi
c0000975:	53                   	push   ebx
c0000976:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000097a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000097e:	89 c3                	mov    ebx,eax
c0000980:	eb 04                	jmp    c0000986 <strcat+0x12>
c0000982:	66 90                	xchg   ax,ax
c0000984:	89 d3                	mov    ebx,edx
c0000986:	8d 53 01             	lea    edx,[ebx+0x1]
c0000989:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000098d:	75 f5                	jne    c0000984 <strcat+0x10>
c000098f:	31 d2                	xor    edx,edx
c0000991:	8d 76 00             	lea    esi,[esi+0x0]
c0000994:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000997:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c000099a:	42                   	inc    edx
c000099b:	84 c9                	test   cl,cl
c000099d:	75 f5                	jne    c0000994 <strcat+0x20>
c000099f:	5b                   	pop    ebx
c00009a0:	5e                   	pop    esi
c00009a1:	c3                   	ret    
c00009a2:	66 90                	xchg   ax,ax

c00009a4 <strncat>:
c00009a4:	56                   	push   esi
c00009a5:	53                   	push   ebx
c00009a6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00009aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009b2:	85 f6                	test   esi,esi
c00009b4:	74 1e                	je     c00009d4 <strncat+0x30>
c00009b6:	89 c2                	mov    edx,eax
c00009b8:	42                   	inc    edx
c00009b9:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009bd:	75 f9                	jne    c00009b8 <strncat+0x14>
c00009bf:	01 ce                	add    esi,ecx
c00009c1:	eb 06                	jmp    c00009c9 <strncat+0x25>
c00009c3:	90                   	nop
c00009c4:	39 f1                	cmp    ecx,esi
c00009c6:	74 10                	je     c00009d8 <strncat+0x34>
c00009c8:	42                   	inc    edx
c00009c9:	41                   	inc    ecx
c00009ca:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009cd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009d0:	84 db                	test   bl,bl
c00009d2:	75 f0                	jne    c00009c4 <strncat+0x20>
c00009d4:	5b                   	pop    ebx
c00009d5:	5e                   	pop    esi
c00009d6:	c3                   	ret    
c00009d7:	90                   	nop
c00009d8:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009db:	5b                   	pop    ebx
c00009dc:	5e                   	pop    esi
c00009dd:	c3                   	ret    
c00009de:	66 90                	xchg   ax,ax

c00009e0 <strstr>:
c00009e0:	57                   	push   edi
c00009e1:	56                   	push   esi
c00009e2:	53                   	push   ebx
c00009e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009e7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009eb:	57                   	push   edi
c00009ec:	e8 a3 fd ff ff       	call   c0000794 <strlen>
c00009f1:	59                   	pop    ecx
c00009f2:	85 c0                	test   eax,eax
c00009f4:	74 2a                	je     c0000a20 <strstr+0x40>
c00009f6:	89 c6                	mov    esi,eax
c00009f8:	eb 12                	jmp    c0000a0c <strstr+0x2c>
c00009fa:	66 90                	xchg   ax,ax
c00009fc:	56                   	push   esi
c00009fd:	57                   	push   edi
c00009fe:	53                   	push   ebx
c00009ff:	e8 3c fc ff ff       	call   c0000640 <memcmp>
c0000a04:	83 c4 0c             	add    esp,0xc
c0000a07:	85 c0                	test   eax,eax
c0000a09:	74 15                	je     c0000a20 <strstr+0x40>
c0000a0b:	43                   	inc    ebx
c0000a0c:	53                   	push   ebx
c0000a0d:	e8 82 fd ff ff       	call   c0000794 <strlen>
c0000a12:	5a                   	pop    edx
c0000a13:	39 f0                	cmp    eax,esi
c0000a15:	73 e5                	jae    c00009fc <strstr+0x1c>
c0000a17:	5b                   	pop    ebx
c0000a18:	31 c0                	xor    eax,eax
c0000a1a:	5e                   	pop    esi
c0000a1b:	5f                   	pop    edi
c0000a1c:	c3                   	ret    
c0000a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a20:	89 d8                	mov    eax,ebx
c0000a22:	5b                   	pop    ebx
c0000a23:	5e                   	pop    esi
c0000a24:	5f                   	pop    edi
c0000a25:	c3                   	ret    
c0000a26:	66 90                	xchg   ax,ax

c0000a28 <toupper>:
c0000a28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a2c:	0f b6 d0             	movzx  edx,al
c0000a2f:	f6 82 a0 92 02 c0 02 	test   BYTE PTR [edx-0x3ffd6d60],0x2
c0000a36:	74 03                	je     c0000a3b <toupper+0x13>
c0000a38:	83 e8 20             	sub    eax,0x20
c0000a3b:	c3                   	ret    

c0000a3c <tolower>:
c0000a3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a40:	0f b6 d0             	movzx  edx,al
c0000a43:	f6 82 a0 92 02 c0 01 	test   BYTE PTR [edx-0x3ffd6d60],0x1
c0000a4a:	74 03                	je     c0000a4f <tolower+0x13>
c0000a4c:	83 c0 20             	add    eax,0x20
c0000a4f:	c3                   	ret    

c0000a50 <simple_strtoul>:
c0000a50:	55                   	push   ebp
c0000a51:	57                   	push   edi
c0000a52:	56                   	push   esi
c0000a53:	53                   	push   ebx
c0000a54:	83 ec 08             	sub    esp,0x8
c0000a57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a5f:	90                   	nop
c0000a60:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a63:	f6 82 a0 92 02 c0 08 	test   BYTE PTR [edx-0x3ffd6d60],0x8
c0000a6a:	75 05                	jne    c0000a71 <simple_strtoul+0x21>
c0000a6c:	80 fa 09             	cmp    dl,0x9
c0000a6f:	75 03                	jne    c0000a74 <simple_strtoul+0x24>
c0000a71:	41                   	inc    ecx
c0000a72:	eb ec                	jmp    c0000a60 <simple_strtoul+0x10>
c0000a74:	80 fa 2d             	cmp    dl,0x2d
c0000a77:	0f 84 1b 01 00 00    	je     c0000b98 <simple_strtoul+0x148>
c0000a7d:	80 fa 2b             	cmp    dl,0x2b
c0000a80:	0f 84 c2 00 00 00    	je     c0000b48 <simple_strtoul+0xf8>
c0000a86:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a8e:	85 f6                	test   esi,esi
c0000a90:	0f 85 c3 00 00 00    	jne    c0000b59 <simple_strtoul+0x109>
c0000a96:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a98:	80 fa 30             	cmp    dl,0x30
c0000a9b:	0f 84 47 01 00 00    	je     c0000be8 <simple_strtoul+0x198>
c0000aa1:	be 0a 00 00 00       	mov    esi,0xa
c0000aa6:	84 d2                	test   dl,dl
c0000aa8:	0f 84 6f 01 00 00    	je     c0000c1d <simple_strtoul+0x1cd>
c0000aae:	31 ed                	xor    ebp,ebp
c0000ab0:	31 ff                	xor    edi,edi
c0000ab2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000ab9:	eb 2b                	jmp    c0000ae6 <simple_strtoul+0x96>
c0000abb:	90                   	nop
c0000abc:	83 eb 30             	sub    ebx,0x30
c0000abf:	39 f3                	cmp    ebx,esi
c0000ac1:	73 4d                	jae    c0000b10 <simple_strtoul+0xc0>
c0000ac3:	31 d2                	xor    edx,edx
c0000ac5:	89 d8                	mov    eax,ebx
c0000ac7:	f7 d0                	not    eax
c0000ac9:	f7 f6                	div    esi
c0000acb:	39 f8                	cmp    eax,edi
c0000acd:	0f 82 b1 00 00 00    	jb     c0000b84 <simple_strtoul+0x134>
c0000ad3:	0f af fe             	imul   edi,esi
c0000ad6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000add:	01 df                	add    edi,ebx
c0000adf:	41                   	inc    ecx
c0000ae0:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000ae2:	84 d2                	test   dl,dl
c0000ae4:	74 2a                	je     c0000b10 <simple_strtoul+0xc0>
c0000ae6:	0f b6 da             	movzx  ebx,dl
c0000ae9:	f6 83 a0 92 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6d60],0x4
c0000af0:	75 ca                	jne    c0000abc <simple_strtoul+0x6c>
c0000af2:	0f be d2             	movsx  edx,dl
c0000af5:	52                   	push   edx
c0000af6:	e8 2d ff ff ff       	call   c0000a28 <toupper>
c0000afb:	5b                   	pop    ebx
c0000afc:	0f b6 d0             	movzx  edx,al
c0000aff:	f6 82 a0 92 02 c0 01 	test   BYTE PTR [edx-0x3ffd6d60],0x1
c0000b06:	74 08                	je     c0000b10 <simple_strtoul+0xc0>
c0000b08:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000b0b:	39 f3                	cmp    ebx,esi
c0000b0d:	72 b4                	jb     c0000ac3 <simple_strtoul+0x73>
c0000b0f:	90                   	nop
c0000b10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b14:	85 c0                	test   eax,eax
c0000b16:	74 14                	je     c0000b2c <simple_strtoul+0xdc>
c0000b18:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b1b:	09 f8                	or     eax,edi
c0000b1d:	75 71                	jne    c0000b90 <simple_strtoul+0x140>
c0000b1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b23:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b27:	31 ff                	xor    edi,edi
c0000b29:	89 30                	mov    DWORD PTR [eax],esi
c0000b2b:	90                   	nop
c0000b2c:	4d                   	dec    ebp
c0000b2d:	75 05                	jne    c0000b34 <simple_strtoul+0xe4>
c0000b2f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b34:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b39:	75 02                	jne    c0000b3d <simple_strtoul+0xed>
c0000b3b:	f7 df                	neg    edi
c0000b3d:	83 c4 08             	add    esp,0x8
c0000b40:	89 f8                	mov    eax,edi
c0000b42:	5b                   	pop    ebx
c0000b43:	5e                   	pop    esi
c0000b44:	5f                   	pop    edi
c0000b45:	5d                   	pop    ebp
c0000b46:	c3                   	ret    
c0000b47:	90                   	nop
c0000b48:	41                   	inc    ecx
c0000b49:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b51:	85 f6                	test   esi,esi
c0000b53:	0f 84 3d ff ff ff    	je     c0000a96 <simple_strtoul+0x46>
c0000b59:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b5c:	83 f8 22             	cmp    eax,0x22
c0000b5f:	77 6a                	ja     c0000bcb <simple_strtoul+0x17b>
c0000b61:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b63:	83 fe 08             	cmp    esi,0x8
c0000b66:	0f 84 a2 00 00 00    	je     c0000c0e <simple_strtoul+0x1be>
c0000b6c:	83 fe 10             	cmp    esi,0x10
c0000b6f:	0f 85 31 ff ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000b75:	80 fa 30             	cmp    dl,0x30
c0000b78:	74 2c                	je     c0000ba6 <simple_strtoul+0x156>
c0000b7a:	be 10 00 00 00       	mov    esi,0x10
c0000b7f:	e9 22 ff ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000b84:	bd 01 00 00 00       	mov    ebp,0x1
c0000b89:	31 ff                	xor    edi,edi
c0000b8b:	e9 4f ff ff ff       	jmp    c0000adf <simple_strtoul+0x8f>
c0000b90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b94:	89 08                	mov    DWORD PTR [eax],ecx
c0000b96:	eb 94                	jmp    c0000b2c <simple_strtoul+0xdc>
c0000b98:	41                   	inc    ecx
c0000b99:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000ba1:	e9 e8 fe ff ff       	jmp    c0000a8e <simple_strtoul+0x3e>
c0000ba6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000baa:	88 04 24             	mov    BYTE PTR [esp],al
c0000bad:	50                   	push   eax
c0000bae:	e8 89 fe ff ff       	call   c0000a3c <tolower>
c0000bb3:	5e                   	pop    esi
c0000bb4:	83 f8 78             	cmp    eax,0x78
c0000bb7:	0f 84 84 00 00 00    	je     c0000c41 <simple_strtoul+0x1f1>
c0000bbd:	41                   	inc    ecx
c0000bbe:	be 10 00 00 00       	mov    esi,0x10
c0000bc3:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bc6:	e9 db fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000bcb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bcf:	85 ff                	test   edi,edi
c0000bd1:	74 5c                	je     c0000c2f <simple_strtoul+0x1df>
c0000bd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bd7:	85 c9                	test   ecx,ecx
c0000bd9:	75 4e                	jne    c0000c29 <simple_strtoul+0x1d9>
c0000bdb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000be1:	31 ff                	xor    edi,edi
c0000be3:	e9 4c ff ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000be8:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bec:	88 04 24             	mov    BYTE PTR [esp],al
c0000bef:	50                   	push   eax
c0000bf0:	e8 47 fe ff ff       	call   c0000a3c <tolower>
c0000bf5:	5d                   	pop    ebp
c0000bf6:	83 f8 78             	cmp    eax,0x78
c0000bf9:	74 3b                	je     c0000c36 <simple_strtoul+0x1e6>
c0000bfb:	41                   	inc    ecx
c0000bfc:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bff:	80 fa 30             	cmp    dl,0x30
c0000c02:	74 13                	je     c0000c17 <simple_strtoul+0x1c7>
c0000c04:	be 08 00 00 00       	mov    esi,0x8
c0000c09:	e9 98 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000c0e:	80 fa 30             	cmp    dl,0x30
c0000c11:	0f 85 8f fe ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000c17:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c1a:	41                   	inc    ecx
c0000c1b:	eb e7                	jmp    c0000c04 <simple_strtoul+0x1b4>
c0000c1d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c21:	85 d2                	test   edx,edx
c0000c23:	74 0a                	je     c0000c2f <simple_strtoul+0x1df>
c0000c25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c29:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c2d:	89 30                	mov    DWORD PTR [eax],esi
c0000c2f:	31 ff                	xor    edi,edi
c0000c31:	e9 fe fe ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000c36:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c39:	83 c1 02             	add    ecx,0x2
c0000c3c:	e9 34 ff ff ff       	jmp    c0000b75 <simple_strtoul+0x125>
c0000c41:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c44:	be 10 00 00 00       	mov    esi,0x10
c0000c49:	83 c1 02             	add    ecx,0x2
c0000c4c:	e9 55 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>

c0000c51 <largebin_index>:
c0000c51:	89 c2                	mov    edx,eax
c0000c53:	c1 ea 08             	shr    edx,0x8
c0000c56:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c5c:	77 10                	ja     c0000c6e <largebin_index+0x1d>
c0000c5e:	0f bd d2             	bsr    edx,edx
c0000c61:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c64:	d3 e8                	shr    eax,cl
c0000c66:	83 e0 03             	and    eax,0x3
c0000c69:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c6d:	c3                   	ret    
c0000c6e:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c73:	c3                   	ret    

c0000c74 <malloc_init_state>:
c0000c74:	53                   	push   ebx
c0000c75:	8d 50 34             	lea    edx,[eax+0x34]
c0000c78:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c7e:	89 d1                	mov    ecx,edx
c0000c80:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c83:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c86:	83 c2 08             	add    edx,0x8
c0000c89:	39 da                	cmp    edx,ebx
c0000c8b:	75 f3                	jne    c0000c80 <malloc_init_state+0xc>
c0000c8d:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c8f:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c99:	83 e2 03             	and    edx,0x3
c0000c9c:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ca6:	83 ca 48             	or     edx,0x48
c0000ca9:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cb3:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000cbd:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000cc4:	89 10                	mov    DWORD PTR [eax],edx
c0000cc6:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000cc9:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cd3:	5b                   	pop    ebx
c0000cd4:	c3                   	ret    

c0000cd5 <malloc_consolidate>:
c0000cd5:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cd7:	85 d2                	test   edx,edx
c0000cd9:	0f 84 d8 00 00 00    	je     c0000db7 <malloc_consolidate+0xe2>
c0000cdf:	55                   	push   ebp
c0000ce0:	83 e2 fd             	and    edx,0xfffffffd
c0000ce3:	57                   	push   edi
c0000ce4:	89 c5                	mov    ebp,eax
c0000ce6:	56                   	push   esi
c0000ce7:	8d 78 34             	lea    edi,[eax+0x34]
c0000cea:	53                   	push   ebx
c0000ceb:	83 ec 10             	sub    esp,0x10
c0000cee:	89 10                	mov    DWORD PTR [eax],edx
c0000cf0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cf4:	c1 ea 03             	shr    edx,0x3
c0000cf7:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cfb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cff:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d02:	85 d2                	test   edx,edx
c0000d04:	0f 84 98 00 00 00    	je     c0000da2 <malloc_consolidate+0xcd>
c0000d0a:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d11:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d14:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d17:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d1b:	89 f9                	mov    ecx,edi
c0000d1d:	83 e1 fe             	and    ecx,0xfffffffe
c0000d20:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d23:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d26:	83 e3 fc             	and    ebx,0xfffffffc
c0000d29:	83 e7 01             	and    edi,0x1
c0000d2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d2f:	75 14                	jne    c0000d45 <malloc_consolidate+0x70>
c0000d31:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d33:	29 fa                	sub    edx,edi
c0000d35:	01 f9                	add    ecx,edi
c0000d37:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3a:	89 fb                	mov    ebx,edi
c0000d3c:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d3f:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d42:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d45:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d48:	74 40                	je     c0000d8a <malloc_consolidate+0xb5>
c0000d4a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d4d:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d50:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d54:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d57:	83 e7 01             	and    edi,0x1
c0000d5a:	75 0e                	jne    c0000d6a <malloc_consolidate+0x95>
c0000d5c:	01 d9                	add    ecx,ebx
c0000d5e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d61:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d64:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d67:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d6a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d6d:	89 ce                	mov    esi,ecx
c0000d6f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d72:	83 ce 01             	or     esi,0x1
c0000d75:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d78:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d7b:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d7e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d82:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d85:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d88:	eb 0c                	jmp    c0000d96 <malloc_consolidate+0xc1>
c0000d8a:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d8d:	83 c9 01             	or     ecx,0x1
c0000d90:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d93:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d9a:	85 d2                	test   edx,edx
c0000d9c:	0f 85 6f ff ff ff    	jne    c0000d11 <malloc_consolidate+0x3c>
c0000da2:	83 c5 04             	add    ebp,0x4
c0000da5:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000da9:	0f 85 50 ff ff ff    	jne    c0000cff <malloc_consolidate+0x2a>
c0000daf:	83 c4 10             	add    esp,0x10
c0000db2:	5b                   	pop    ebx
c0000db3:	5e                   	pop    esi
c0000db4:	5f                   	pop    edi
c0000db5:	5d                   	pop    ebp
c0000db6:	c3                   	ret    
c0000db7:	e9 b8 fe ff ff       	jmp    c0000c74 <malloc_init_state>

c0000dbc <dlfree>:
c0000dbc:	57                   	push   edi
c0000dbd:	56                   	push   esi
c0000dbe:	53                   	push   ebx
c0000dbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000dc3:	85 db                	test   ebx,ebx
c0000dc5:	0f 84 e2 00 00 00    	je     c0000ead <dlfree+0xf1>
c0000dcb:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000dce:	8b 0d 40 e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e240
c0000dd4:	89 f0                	mov    eax,esi
c0000dd6:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000dd9:	83 e0 fc             	and    eax,0xfffffffc
c0000ddc:	39 c1                	cmp    ecx,eax
c0000dde:	72 24                	jb     c0000e04 <dlfree+0x48>
c0000de0:	83 c9 03             	or     ecx,0x3
c0000de3:	c1 e8 03             	shr    eax,0x3
c0000de6:	89 0d 40 e2 02 c0    	mov    DWORD PTR ds:0xc002e240,ecx
c0000dec:	83 e8 02             	sub    eax,0x2
c0000def:	8b 0c 85 44 e2 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1dbc]
c0000df6:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000df8:	89 14 85 44 e2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1dbc],edx
c0000dff:	e9 a9 00 00 00       	jmp    c0000ead <dlfree+0xf1>
c0000e04:	83 e6 02             	and    esi,0x2
c0000e07:	0f 85 a0 00 00 00    	jne    c0000ead <dlfree+0xf1>
c0000e0d:	83 c9 01             	or     ecx,0x1
c0000e10:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e13:	89 0d 40 e2 02 c0    	mov    DWORD PTR ds:0xc002e240,ecx
c0000e19:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e1c:	83 e1 fc             	and    ecx,0xfffffffc
c0000e1f:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e23:	75 13                	jne    c0000e38 <dlfree+0x7c>
c0000e25:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e28:	29 da                	sub    edx,ebx
c0000e2a:	01 d8                	add    eax,ebx
c0000e2c:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e2f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e32:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e35:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e38:	39 35 6c e2 02 c0    	cmp    DWORD PTR ds:0xc002e26c,esi
c0000e3e:	74 40                	je     c0000e80 <dlfree+0xc4>
c0000e40:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e44:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e47:	80 e3 01             	and    bl,0x1
c0000e4a:	75 0e                	jne    c0000e5a <dlfree+0x9e>
c0000e4c:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e4f:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e52:	01 c8                	add    eax,ecx
c0000e54:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e57:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e5a:	8b 0d 7c e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e27c
c0000e60:	c7 42 0c 74 e2 02 c0 	mov    DWORD PTR [edx+0xc],0xc002e274
c0000e67:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e6a:	89 15 7c e2 02 c0    	mov    DWORD PTR ds:0xc002e27c,edx
c0000e70:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e73:	89 c1                	mov    ecx,eax
c0000e75:	83 c9 01             	or     ecx,0x1
c0000e78:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e7b:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e7e:	eb 10                	jmp    c0000e90 <dlfree+0xd4>
c0000e80:	01 c8                	add    eax,ecx
c0000e82:	89 c1                	mov    ecx,eax
c0000e84:	83 c9 01             	or     ecx,0x1
c0000e87:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e8a:	89 15 6c e2 02 c0    	mov    DWORD PTR ds:0xc002e26c,edx
c0000e90:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e95:	76 16                	jbe    c0000ead <dlfree+0xf1>
c0000e97:	f6 05 40 e2 02 c0 02 	test   BYTE PTR ds:0xc002e240,0x2
c0000e9e:	74 0d                	je     c0000ead <dlfree+0xf1>
c0000ea0:	5b                   	pop    ebx
c0000ea1:	b8 40 e2 02 c0       	mov    eax,0xc002e240
c0000ea6:	5e                   	pop    esi
c0000ea7:	5f                   	pop    edi
c0000ea8:	e9 28 fe ff ff       	jmp    c0000cd5 <malloc_consolidate>
c0000ead:	5b                   	pop    ebx
c0000eae:	5e                   	pop    esi
c0000eaf:	5f                   	pop    edi
c0000eb0:	c3                   	ret    

c0000eb1 <sYSMALLOc>:
c0000eb1:	55                   	push   ebp
c0000eb2:	57                   	push   edi
c0000eb3:	56                   	push   esi
c0000eb4:	53                   	push   ebx
c0000eb5:	89 d3                	mov    ebx,edx
c0000eb7:	83 ec 2c             	sub    esp,0x2c
c0000eba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ebe:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ec4:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ec7:	8d 42 ff             	lea    eax,[edx-0x1]
c0000eca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ece:	74 1f                	je     c0000eef <sYSMALLOc+0x3e>
c0000ed0:	89 d8                	mov    eax,ebx
c0000ed2:	e8 fe fd ff ff       	call   c0000cd5 <malloc_consolidate>
c0000ed7:	83 ec 0c             	sub    esp,0xc
c0000eda:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ede:	83 e8 07             	sub    eax,0x7
c0000ee1:	50                   	push   eax
c0000ee2:	e8 30 02 00 00       	call   c0001117 <dlmalloc>
c0000ee7:	83 c4 10             	add    esp,0x10
c0000eea:	e9 20 02 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000eef:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ef2:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ef8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000efb:	83 e0 fc             	and    eax,0xfffffffc
c0000efe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f06:	83 c0 10             	add    eax,0x10
c0000f09:	01 c1                	add    ecx,eax
c0000f0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f0f:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f16:	74 04                	je     c0000f1c <sYSMALLOc+0x6b>
c0000f18:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f1c:	f7 da                	neg    edx
c0000f1e:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f22:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f26:	21 d1                	and    ecx,edx
c0000f28:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f2c:	7f 07                	jg     c0000f35 <sYSMALLOc+0x84>
c0000f2e:	31 c0                	xor    eax,eax
c0000f30:	e9 da 01 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000f35:	83 ec 0c             	sub    esp,0xc
c0000f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f3c:	e8 56 e7 00 00       	call   c000f697 <sbrk>
c0000f41:	83 c4 10             	add    esp,0x10
c0000f44:	89 c6                	mov    esi,eax
c0000f46:	83 f8 ff             	cmp    eax,0xffffffff
c0000f49:	74 e3                	je     c0000f2e <sYSMALLOc+0x7d>
c0000f4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4f:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f53:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f56:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f5c:	39 f1                	cmp    ecx,esi
c0000f5e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f64:	75 13                	jne    c0000f79 <sYSMALLOc+0xc8>
c0000f66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f6a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f6e:	83 c8 01             	or     eax,0x1
c0000f71:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f74:	e9 3e 01 00 00       	jmp    c00010b7 <sYSMALLOc+0x206>
c0000f79:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f7f:	88 d0                	mov    al,dl
c0000f81:	83 e0 01             	and    eax,0x1
c0000f84:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f89:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f8d:	0f 95 c0             	setne  al
c0000f90:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f94:	39 f1                	cmp    ecx,esi
c0000f96:	76 12                	jbe    c0000faa <sYSMALLOc+0xf9>
c0000f98:	84 c0                	test   al,al
c0000f9a:	74 0e                	je     c0000faa <sYSMALLOc+0xf9>
c0000f9c:	83 e2 fe             	and    edx,0xfffffffe
c0000f9f:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000fa5:	e9 83 00 00 00       	jmp    c000102d <sYSMALLOc+0x17c>
c0000faa:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000faf:	74 7c                	je     c000102d <sYSMALLOc+0x17c>
c0000fb1:	84 c0                	test   al,al
c0000fb3:	74 0c                	je     c0000fc1 <sYSMALLOc+0x110>
c0000fb5:	89 f0                	mov    eax,esi
c0000fb7:	29 c8                	sub    eax,ecx
c0000fb9:	01 e8                	add    eax,ebp
c0000fbb:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fc1:	89 f2                	mov    edx,esi
c0000fc3:	83 e2 07             	and    edx,0x7
c0000fc6:	74 0c                	je     c0000fd4 <sYSMALLOc+0x123>
c0000fc8:	b8 08 00 00 00       	mov    eax,0x8
c0000fcd:	29 d0                	sub    eax,edx
c0000fcf:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000fd2:	eb 04                	jmp    c0000fd8 <sYSMALLOc+0x127>
c0000fd4:	89 f5                	mov    ebp,esi
c0000fd6:	31 c0                	xor    eax,eax
c0000fd8:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fdc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fe0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe4:	01 c1                	add    ecx,eax
c0000fe6:	83 ec 0c             	sub    esp,0xc
c0000fe9:	01 f1                	add    ecx,esi
c0000feb:	01 ca                	add    edx,ecx
c0000fed:	29 c8                	sub    eax,ecx
c0000fef:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ff3:	01 c2                	add    edx,eax
c0000ff5:	52                   	push   edx
c0000ff6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ffa:	e8 98 e6 00 00       	call   c000f697 <sbrk>
c0000fff:	83 c4 10             	add    esp,0x10
c0001002:	83 f8 ff             	cmp    eax,0xffffffff
c0001005:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001009:	75 0f                	jne    c000101a <sYSMALLOc+0x169>
c000100b:	83 ec 0c             	sub    esp,0xc
c000100e:	6a 00                	push   0x0
c0001010:	e8 82 e6 00 00       	call   c000f697 <sbrk>
c0001015:	83 c4 10             	add    esp,0x10
c0001018:	eb 30                	jmp    c000104a <sYSMALLOc+0x199>
c000101a:	39 c6                	cmp    esi,eax
c000101c:	76 33                	jbe    c0001051 <sYSMALLOc+0x1a0>
c000101e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001022:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001029:	01 f0                	add    eax,esi
c000102b:	eb 1d                	jmp    c000104a <sYSMALLOc+0x199>
c000102d:	83 ec 0c             	sub    esp,0xc
c0001030:	89 f5                	mov    ebp,esi
c0001032:	6a 00                	push   0x0
c0001034:	e8 5e e6 00 00       	call   c000f697 <sbrk>
c0001039:	89 c2                	mov    edx,eax
c000103b:	29 f2                	sub    edx,esi
c000103d:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001041:	83 c4 10             	add    esp,0x10
c0001044:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000104a:	31 d2                	xor    edx,edx
c000104c:	83 f8 ff             	cmp    eax,0xffffffff
c000104f:	74 66                	je     c00010b7 <sYSMALLOc+0x206>
c0001051:	29 e8                	sub    eax,ebp
c0001053:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001056:	01 d0                	add    eax,edx
c0001058:	83 c8 01             	or     eax,0x1
c000105b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000105e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001064:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001069:	74 4c                	je     c00010b7 <sYSMALLOc+0x206>
c000106b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000106f:	83 e8 0c             	sub    eax,0xc
c0001072:	83 e0 f8             	and    eax,0xfffffff8
c0001075:	89 c2                	mov    edx,eax
c0001077:	83 ca 01             	or     edx,0x1
c000107a:	83 f8 0f             	cmp    eax,0xf
c000107d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001080:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001088:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001090:	76 25                	jbe    c00010b7 <sYSMALLOc+0x206>
c0001092:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001098:	83 ec 0c             	sub    esp,0xc
c000109b:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a5:	83 c7 08             	add    edi,0x8
c00010a8:	57                   	push   edi
c00010a9:	e8 0e fd ff ff       	call   c0000dbc <dlfree>
c00010ae:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b4:	83 c4 10             	add    esp,0x10
c00010b7:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010bd:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010c3:	73 06                	jae    c00010cb <sYSMALLOc+0x21a>
c00010c5:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010cb:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010d1:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010d7:	73 06                	jae    c00010df <sYSMALLOc+0x22e>
c00010d9:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010df:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010e2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010e5:	83 e2 fc             	and    edx,0xfffffffc
c00010e8:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010ec:	0f 82 3c fe ff ff    	jb     c0000f2e <sYSMALLOc+0x7d>
c00010f2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010f6:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010f9:	29 fa                	sub    edx,edi
c00010fb:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010fe:	83 ca 01             	or     edx,0x1
c0001101:	89 fb                	mov    ebx,edi
c0001103:	83 c0 08             	add    eax,0x8
c0001106:	83 cb 01             	or     ebx,0x1
c0001109:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000110c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000110f:	83 c4 2c             	add    esp,0x2c
c0001112:	5b                   	pop    ebx
c0001113:	5e                   	pop    esi
c0001114:	5f                   	pop    edi
c0001115:	5d                   	pop    ebp
c0001116:	c3                   	ret    

c0001117 <dlmalloc>:
c0001117:	55                   	push   ebp
c0001118:	57                   	push   edi
c0001119:	56                   	push   esi
c000111a:	53                   	push   ebx
c000111b:	83 ec 1c             	sub    esp,0x1c
c000111e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001122:	83 f8 df             	cmp    eax,0xffffffdf
c0001125:	0f 87 70 03 00 00    	ja     c000149b <dlmalloc+0x384>
c000112b:	83 c0 0b             	add    eax,0xb
c000112e:	be 10 00 00 00       	mov    esi,0x10
c0001133:	83 f8 0f             	cmp    eax,0xf
c0001136:	76 05                	jbe    c000113d <dlmalloc+0x26>
c0001138:	83 e0 f8             	and    eax,0xfffffff8
c000113b:	89 c6                	mov    esi,eax
c000113d:	8b 3d 40 e2 02 c0    	mov    edi,DWORD PTR ds:0xc002e240
c0001143:	f7 c7 01 00 00 00    	test   edi,0x1
c0001149:	75 17                	jne    c0001162 <dlmalloc+0x4b>
c000114b:	85 ff                	test   edi,edi
c000114d:	0f 85 05 03 00 00    	jne    c0001458 <dlmalloc+0x341>
c0001153:	b8 40 e2 02 c0       	mov    eax,0xc002e240
c0001158:	e8 78 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c000115d:	e9 f6 02 00 00       	jmp    c0001458 <dlmalloc+0x341>
c0001162:	39 f7                	cmp    edi,esi
c0001164:	72 1f                	jb     c0001185 <dlmalloc+0x6e>
c0001166:	89 f2                	mov    edx,esi
c0001168:	c1 ea 03             	shr    edx,0x3
c000116b:	83 ea 02             	sub    edx,0x2
c000116e:	8b 04 95 44 e2 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1dbc]
c0001175:	85 c0                	test   eax,eax
c0001177:	74 0c                	je     c0001185 <dlmalloc+0x6e>
c0001179:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000117c:	89 0c 95 44 e2 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1dbc],ecx
c0001183:	eb 30                	jmp    c00011b5 <dlmalloc+0x9e>
c0001185:	89 f0                	mov    eax,esi
c0001187:	81 fe ff 00 00 00    	cmp    esi,0xff
c000118d:	77 2e                	ja     c00011bd <dlmalloc+0xa6>
c000118f:	c1 e8 03             	shr    eax,0x3
c0001192:	8d 14 c5 74 e2 02 c0 	lea    edx,[eax*8-0x3ffd1d8c]
c0001199:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000119d:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011a0:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011a3:	39 c3                	cmp    ebx,eax
c00011a5:	74 2e                	je     c00011d5 <dlmalloc+0xbe>
c00011a7:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011aa:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011af:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011b2:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011b5:	83 c0 08             	add    eax,0x8
c00011b8:	e9 e0 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c00011bd:	e8 8f fa ff ff       	call   c0000c51 <largebin_index>
c00011c2:	83 e7 02             	and    edi,0x2
c00011c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011c9:	74 0a                	je     c00011d5 <dlmalloc+0xbe>
c00011cb:	b8 40 e2 02 c0       	mov    eax,0xc002e240
c00011d0:	e8 00 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c00011d5:	8d 46 10             	lea    eax,[esi+0x10]
c00011d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011dc:	8b 1d 80 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e280
c00011e2:	81 fb 74 e2 02 c0    	cmp    ebx,0xc002e274
c00011e8:	0f 84 13 01 00 00    	je     c0001301 <dlmalloc+0x1ea>
c00011ee:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011f1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011f4:	83 e7 fc             	and    edi,0xfffffffc
c00011f7:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011fd:	77 4c                	ja     c000124b <dlmalloc+0x134>
c00011ff:	3d 74 e2 02 c0       	cmp    eax,0xc002e274
c0001204:	75 45                	jne    c000124b <dlmalloc+0x134>
c0001206:	39 1d 70 e2 02 c0    	cmp    DWORD PTR ds:0xc002e270,ebx
c000120c:	75 3d                	jne    c000124b <dlmalloc+0x134>
c000120e:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001212:	73 37                	jae    c000124b <dlmalloc+0x134>
c0001214:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001217:	89 fa                	mov    edx,edi
c0001219:	a3 7c e2 02 c0       	mov    ds:0xc002e27c,eax
c000121e:	a3 80 e2 02 c0       	mov    ds:0xc002e280,eax
c0001223:	a3 70 e2 02 c0       	mov    ds:0xc002e270,eax
c0001228:	29 f2                	sub    edx,esi
c000122a:	c7 40 08 74 e2 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e274
c0001231:	c7 40 0c 74 e2 02 c0 	mov    DWORD PTR [eax+0xc],0xc002e274
c0001238:	83 ce 01             	or     esi,0x1
c000123b:	89 d1                	mov    ecx,edx
c000123d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001240:	83 c9 01             	or     ecx,0x1
c0001243:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001246:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001249:	eb 15                	jmp    c0001260 <dlmalloc+0x149>
c000124b:	a3 80 e2 02 c0       	mov    ds:0xc002e280,eax
c0001250:	39 fe                	cmp    esi,edi
c0001252:	c7 40 08 74 e2 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e274
c0001259:	75 0d                	jne    c0001268 <dlmalloc+0x151>
c000125b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001260:	8d 43 08             	lea    eax,[ebx+0x8]
c0001263:	e9 35 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c0001268:	89 f8                	mov    eax,edi
c000126a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001270:	77 19                	ja     c000128b <dlmalloc+0x174>
c0001272:	c1 e8 03             	shr    eax,0x3
c0001275:	8d 14 00             	lea    edx,[eax+eax*1]
c0001278:	83 c2 0d             	add    edx,0xd
c000127b:	8d 2c 95 38 e2 02 c0 	lea    ebp,[edx*4-0x3ffd1dc8]
c0001282:	8b 14 95 40 e2 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1dc0]
c0001289:	eb 46                	jmp    c00012d1 <dlmalloc+0x1ba>
c000128b:	e8 c1 f9 ff ff       	call   c0000c51 <largebin_index>
c0001290:	8d 14 00             	lea    edx,[eax+eax*1]
c0001293:	83 c2 0d             	add    edx,0xd
c0001296:	8d 0c 95 40 e2 02 c0 	lea    ecx,[edx*4-0x3ffd1dc0]
c000129d:	8b 14 95 40 e2 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1dc0]
c00012a4:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012a7:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012ab:	89 d5                	mov    ebp,edx
c00012ad:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012b1:	74 1e                	je     c00012d1 <dlmalloc+0x1ba>
c00012b3:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012b6:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012b9:	77 12                	ja     c00012cd <dlmalloc+0x1b6>
c00012bb:	83 cf 01             	or     edi,0x1
c00012be:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012c1:	76 05                	jbe    c00012c8 <dlmalloc+0x1b1>
c00012c3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012c6:	eb f6                	jmp    c00012be <dlmalloc+0x1a7>
c00012c8:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012cb:	eb 04                	jmp    c00012d1 <dlmalloc+0x1ba>
c00012cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012d1:	89 c7                	mov    edi,eax
c00012d3:	88 c1                	mov    cl,al
c00012d5:	c1 ff 05             	sar    edi,0x5
c00012d8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012dc:	bf 01 00 00 00       	mov    edi,0x1
c00012e1:	d3 e7                	shl    edi,cl
c00012e3:	89 f8                	mov    eax,edi
c00012e5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012e9:	09 04 bd 74 e5 02 c0 	or     DWORD PTR [edi*4-0x3ffd1a8c],eax
c00012f0:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012f3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012f6:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012f9:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012fc:	e9 db fe ff ff       	jmp    c00011dc <dlmalloc+0xc5>
c0001301:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001307:	76 78                	jbe    c0001381 <dlmalloc+0x26a>
c0001309:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000130d:	8d 04 c5 74 e2 02 c0 	lea    eax,[eax*8-0x3ffd1d8c]
c0001314:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001317:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000131a:	39 ca                	cmp    edx,ecx
c000131c:	74 63                	je     c0001381 <dlmalloc+0x26a>
c000131e:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001321:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001324:	83 e3 fc             	and    ebx,0xfffffffc
c0001327:	39 de                	cmp    esi,ebx
c0001329:	77 52                	ja     c000137d <dlmalloc+0x266>
c000132b:	89 df                	mov    edi,ebx
c000132d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001330:	29 f7                	sub    edi,esi
c0001332:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001335:	01 d3                	add    ebx,edx
c0001337:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000133a:	83 ff 0f             	cmp    edi,0xf
c000133d:	8d 42 08             	lea    eax,[edx+0x8]
c0001340:	77 09                	ja     c000134b <dlmalloc+0x234>
c0001342:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001346:	e9 52 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000134b:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000134e:	83 ce 01             	or     esi,0x1
c0001351:	89 0d 7c e2 02 c0    	mov    DWORD PTR ds:0xc002e27c,ecx
c0001357:	89 0d 80 e2 02 c0    	mov    DWORD PTR ds:0xc002e280,ecx
c000135d:	c7 41 08 74 e2 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002e274
c0001364:	c7 41 0c 74 e2 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002e274
c000136b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000136e:	89 fa                	mov    edx,edi
c0001370:	83 ca 01             	or     edx,0x1
c0001373:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001376:	89 3b                	mov    DWORD PTR [ebx],edi
c0001378:	e9 20 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000137d:	89 c2                	mov    edx,eax
c000137f:	eb 99                	jmp    c000131a <dlmalloc+0x203>
c0001381:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001385:	b8 01 00 00 00       	mov    eax,0x1
c000138a:	41                   	inc    ecx
c000138b:	89 cb                	mov    ebx,ecx
c000138d:	8d 14 cd 6c e2 02 c0 	lea    edx,[ecx*8-0x3ffd1d94]
c0001394:	c1 eb 05             	shr    ebx,0x5
c0001397:	d3 e0                	shl    eax,cl
c0001399:	8b 3c 9d 74 e5 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1a8c]
c00013a0:	39 f8                	cmp    eax,edi
c00013a2:	77 04                	ja     c00013a8 <dlmalloc+0x291>
c00013a4:	85 c0                	test   eax,eax
c00013a6:	75 26                	jne    c00013ce <dlmalloc+0x2b7>
c00013a8:	43                   	inc    ebx
c00013a9:	83 fb 02             	cmp    ebx,0x2
c00013ac:	0f 87 a6 00 00 00    	ja     c0001458 <dlmalloc+0x341>
c00013b2:	8b 3c 9d 74 e5 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1a8c]
c00013b9:	85 ff                	test   edi,edi
c00013bb:	74 eb                	je     c00013a8 <dlmalloc+0x291>
c00013bd:	89 d8                	mov    eax,ebx
c00013bf:	c1 e0 06             	shl    eax,0x6
c00013c2:	8d 14 85 6c e2 02 c0 	lea    edx,[eax*4-0x3ffd1d94]
c00013c9:	b8 01 00 00 00       	mov    eax,0x1
c00013ce:	85 f8                	test   eax,edi
c00013d0:	75 07                	jne    c00013d9 <dlmalloc+0x2c2>
c00013d2:	83 c2 08             	add    edx,0x8
c00013d5:	01 c0                	add    eax,eax
c00013d7:	eb f5                	jmp    c00013ce <dlmalloc+0x2b7>
c00013d9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013dc:	39 ca                	cmp    edx,ecx
c00013de:	75 14                	jne    c00013f4 <dlmalloc+0x2dd>
c00013e0:	89 c1                	mov    ecx,eax
c00013e2:	83 c2 08             	add    edx,0x8
c00013e5:	f7 d1                	not    ecx
c00013e7:	01 c0                	add    eax,eax
c00013e9:	21 cf                	and    edi,ecx
c00013eb:	89 3c 9d 74 e5 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd1a8c],edi
c00013f2:	eb ac                	jmp    c00013a0 <dlmalloc+0x289>
c00013f4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013f7:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013fa:	83 e0 fc             	and    eax,0xfffffffc
c00013fd:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001400:	89 c3                	mov    ebx,eax
c0001402:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001405:	29 f3                	sub    ebx,esi
c0001407:	8d 14 01             	lea    edx,[ecx+eax*1]
c000140a:	83 fb 0f             	cmp    ebx,0xf
c000140d:	8d 41 08             	lea    eax,[ecx+0x8]
c0001410:	77 09                	ja     c000141b <dlmalloc+0x304>
c0001412:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001416:	e9 82 00 00 00       	jmp    c000149d <dlmalloc+0x386>
c000141b:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000141e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001424:	89 3d 7c e2 02 c0    	mov    DWORD PTR ds:0xc002e27c,edi
c000142a:	89 3d 80 e2 02 c0    	mov    DWORD PTR ds:0xc002e280,edi
c0001430:	c7 47 08 74 e2 02 c0 	mov    DWORD PTR [edi+0x8],0xc002e274
c0001437:	c7 47 0c 74 e2 02 c0 	mov    DWORD PTR [edi+0xc],0xc002e274
c000143e:	77 06                	ja     c0001446 <dlmalloc+0x32f>
c0001440:	89 3d 70 e2 02 c0    	mov    DWORD PTR ds:0xc002e270,edi
c0001446:	83 ce 01             	or     esi,0x1
c0001449:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000144c:	89 d9                	mov    ecx,ebx
c000144e:	83 c9 01             	or     ecx,0x1
c0001451:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001454:	89 1a                	mov    DWORD PTR [edx],ebx
c0001456:	eb 45                	jmp    c000149d <dlmalloc+0x386>
c0001458:	a1 6c e2 02 c0       	mov    eax,ds:0xc002e26c
c000145d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001460:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001463:	83 e2 fc             	and    edx,0xfffffffc
c0001466:	39 d1                	cmp    ecx,edx
c0001468:	77 1e                	ja     c0001488 <dlmalloc+0x371>
c000146a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000146d:	89 f3                	mov    ebx,esi
c000146f:	89 0d 6c e2 02 c0    	mov    DWORD PTR ds:0xc002e26c,ecx
c0001475:	83 cb 01             	or     ebx,0x1
c0001478:	29 f2                	sub    edx,esi
c000147a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000147d:	83 ca 01             	or     edx,0x1
c0001480:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001483:	e9 2d fd ff ff       	jmp    c00011b5 <dlmalloc+0x9e>
c0001488:	83 c4 1c             	add    esp,0x1c
c000148b:	89 f0                	mov    eax,esi
c000148d:	5b                   	pop    ebx
c000148e:	ba 40 e2 02 c0       	mov    edx,0xc002e240
c0001493:	5e                   	pop    esi
c0001494:	5f                   	pop    edi
c0001495:	5d                   	pop    ebp
c0001496:	e9 16 fa ff ff       	jmp    c0000eb1 <sYSMALLOc>
c000149b:	31 c0                	xor    eax,eax
c000149d:	83 c4 1c             	add    esp,0x1c
c00014a0:	5b                   	pop    ebx
c00014a1:	5e                   	pop    esi
c00014a2:	5f                   	pop    edi
c00014a3:	5d                   	pop    ebp
c00014a4:	c3                   	ret    

c00014a5 <iALLOc>:
c00014a5:	55                   	push   ebp
c00014a6:	89 c5                	mov    ebp,eax
c00014a8:	57                   	push   edi
c00014a9:	56                   	push   esi
c00014aa:	53                   	push   ebx
c00014ab:	83 ec 2c             	sub    esp,0x2c
c00014ae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014b2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014ba:	83 3d 40 e2 02 c0 00 	cmp    DWORD PTR ds:0xc002e240,0x0
c00014c1:	75 12                	jne    c00014d5 <iALLOc+0x30>
c00014c3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014c7:	b8 40 e2 02 c0       	mov    eax,0xc002e240
c00014cc:	e8 04 f8 ff ff       	call   c0000cd5 <malloc_consolidate>
c00014d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014d5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014da:	74 12                	je     c00014ee <iALLOc+0x49>
c00014dc:	85 ed                	test   ebp,ebp
c00014de:	0f 84 64 01 00 00    	je     c0001648 <iALLOc+0x1a3>
c00014e4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014ec:	eb 33                	jmp    c0001521 <iALLOc+0x7c>
c00014ee:	85 ed                	test   ebp,ebp
c00014f0:	75 14                	jne    c0001506 <iALLOc+0x61>
c00014f2:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014fa:	83 c4 2c             	add    esp,0x2c
c00014fd:	5b                   	pop    ebx
c00014fe:	5e                   	pop    esi
c00014ff:	5f                   	pop    edi
c0001500:	5d                   	pop    ebp
c0001501:	e9 11 fc ff ff       	jmp    c0001117 <dlmalloc>
c0001506:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000150d:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001515:	83 f8 0f             	cmp    eax,0xf
c0001518:	76 07                	jbe    c0001521 <iALLOc+0x7c>
c000151a:	83 e0 f8             	and    eax,0xfffffff8
c000151d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001521:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001526:	75 09                	jne    c0001531 <iALLOc+0x8c>
c0001528:	89 d0                	mov    eax,edx
c000152a:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000152d:	31 f6                	xor    esi,esi
c000152f:	eb 3b                	jmp    c000156c <iALLOc+0xc7>
c0001531:	8b 02                	mov    eax,DWORD PTR [edx]
c0001533:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000153b:	83 c0 0b             	add    eax,0xb
c000153e:	83 f8 0f             	cmp    eax,0xf
c0001541:	76 07                	jbe    c000154a <iALLOc+0xa5>
c0001543:	83 e0 f8             	and    eax,0xfffffff8
c0001546:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000154a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000154e:	0f af f5             	imul   esi,ebp
c0001551:	eb 25                	jmp    c0001578 <iALLOc+0xd3>
c0001553:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001555:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001558:	bb 10 00 00 00       	mov    ebx,0x10
c000155d:	83 f9 0f             	cmp    ecx,0xf
c0001560:	76 05                	jbe    c0001567 <iALLOc+0xc2>
c0001562:	83 e1 f8             	and    ecx,0xfffffff8
c0001565:	89 cb                	mov    ebx,ecx
c0001567:	01 de                	add    esi,ebx
c0001569:	83 c0 04             	add    eax,0x4
c000156c:	39 c7                	cmp    edi,eax
c000156e:	75 e3                	jne    c0001553 <iALLOc+0xae>
c0001570:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001578:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000157c:	8b 1d 94 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e594
c0001582:	83 ec 0c             	sub    esp,0xc
c0001585:	c7 05 94 e5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e594,0x0
c000158f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001593:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001597:	50                   	push   eax
c0001598:	e8 7a fb ff ff       	call   c0001117 <dlmalloc>
c000159d:	83 c4 10             	add    esp,0x10
c00015a0:	89 1d 94 e5 02 c0    	mov    DWORD PTR ds:0xc002e594,ebx
c00015a6:	85 c0                	test   eax,eax
c00015a8:	0f 84 92 00 00 00    	je     c0001640 <iALLOc+0x19b>
c00015ae:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015b1:	8d 78 f8             	lea    edi,[eax-0x8]
c00015b4:	83 e3 fc             	and    ebx,0xfffffffc
c00015b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015bb:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015c0:	74 1e                	je     c00015e0 <iALLOc+0x13b>
c00015c2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015c6:	89 d9                	mov    ecx,ebx
c00015c8:	52                   	push   edx
c00015c9:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015cd:	83 e9 04             	sub    ecx,0x4
c00015d0:	51                   	push   ecx
c00015d1:	6a 00                	push   0x0
c00015d3:	50                   	push   eax
c00015d4:	e8 9f f1 ff ff       	call   c0000778 <memset>
c00015d9:	83 c4 10             	add    esp,0x10
c00015dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015e5:	75 14                	jne    c00015fb <iALLOc+0x156>
c00015e7:	8d 04 37             	lea    eax,[edi+esi*1]
c00015ea:	29 f3                	sub    ebx,esi
c00015ec:	8d 48 08             	lea    ecx,[eax+0x8]
c00015ef:	83 cb 01             	or     ebx,0x1
c00015f2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015f6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015f9:	89 f3                	mov    ebx,esi
c00015fb:	31 c0                	xor    eax,eax
c00015fd:	4d                   	dec    ebp
c00015fe:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001601:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001605:	39 c5                	cmp    ebp,eax
c0001607:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000160a:	74 2c                	je     c0001638 <iALLOc+0x193>
c000160c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001610:	85 c9                	test   ecx,ecx
c0001612:	75 15                	jne    c0001629 <iALLOc+0x184>
c0001614:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001617:	8d 71 0b             	lea    esi,[ecx+0xb]
c000161a:	b9 10 00 00 00       	mov    ecx,0x10
c000161f:	83 fe 0f             	cmp    esi,0xf
c0001622:	76 05                	jbe    c0001629 <iALLOc+0x184>
c0001624:	83 e6 f8             	and    esi,0xfffffff8
c0001627:	89 f1                	mov    ecx,esi
c0001629:	89 ce                	mov    esi,ecx
c000162b:	29 cb                	sub    ebx,ecx
c000162d:	83 ce 01             	or     esi,0x1
c0001630:	40                   	inc    eax
c0001631:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001634:	01 cf                	add    edi,ecx
c0001636:	eb c6                	jmp    c00015fe <iALLOc+0x159>
c0001638:	83 cb 01             	or     ebx,0x1
c000163b:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000163e:	eb 08                	jmp    c0001648 <iALLOc+0x1a3>
c0001640:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001648:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000164c:	83 c4 2c             	add    esp,0x2c
c000164f:	5b                   	pop    ebx
c0001650:	5e                   	pop    esi
c0001651:	5f                   	pop    edi
c0001652:	5d                   	pop    ebp
c0001653:	c3                   	ret    

c0001654 <dlrealloc>:
c0001654:	55                   	push   ebp
c0001655:	57                   	push   edi
c0001656:	56                   	push   esi
c0001657:	53                   	push   ebx
c0001658:	83 ec 1c             	sub    esp,0x1c
c000165b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000165f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001663:	85 db                	test   ebx,ebx
c0001665:	75 10                	jne    c0001677 <dlrealloc+0x23>
c0001667:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000166b:	83 c4 1c             	add    esp,0x1c
c000166e:	5b                   	pop    ebx
c000166f:	5e                   	pop    esi
c0001670:	5f                   	pop    edi
c0001671:	5d                   	pop    ebp
c0001672:	e9 a0 fa ff ff       	jmp    c0001117 <dlmalloc>
c0001677:	83 f8 df             	cmp    eax,0xffffffdf
c000167a:	76 07                	jbe    c0001683 <dlrealloc+0x2f>
c000167c:	31 db                	xor    ebx,ebx
c000167e:	e9 7c 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c0001683:	83 c0 0b             	add    eax,0xb
c0001686:	bf 10 00 00 00       	mov    edi,0x10
c000168b:	83 f8 0f             	cmp    eax,0xf
c000168e:	76 05                	jbe    c0001695 <dlrealloc+0x41>
c0001690:	83 e0 f8             	and    eax,0xfffffff8
c0001693:	89 c7                	mov    edi,eax
c0001695:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001698:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000169b:	89 c6                	mov    esi,eax
c000169d:	83 e6 fc             	and    esi,0xfffffffc
c00016a0:	a8 02                	test   al,0x2
c00016a2:	75 d8                	jne    c000167c <dlrealloc+0x28>
c00016a4:	39 f7                	cmp    edi,esi
c00016a6:	0f 86 15 01 00 00    	jbe    c00017c1 <dlrealloc+0x16d>
c00016ac:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00016b0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016b3:	39 15 6c e2 02 c0    	cmp    DWORD PTR ds:0xc002e26c,edx
c00016b9:	75 33                	jne    c00016ee <dlrealloc+0x9a>
c00016bb:	83 e1 fc             	and    ecx,0xfffffffc
c00016be:	01 f1                	add    ecx,esi
c00016c0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016c4:	8d 4f 10             	lea    ecx,[edi+0x10]
c00016c7:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016cb:	77 49                	ja     c0001716 <dlrealloc+0xc2>
c00016cd:	01 fd                	add    ebp,edi
c00016cf:	83 e0 01             	and    eax,0x1
c00016d2:	09 f8                	or     eax,edi
c00016d4:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016d7:	89 2d 6c e2 02 c0    	mov    DWORD PTR ds:0xc002e26c,ebp
c00016dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016e1:	29 f8                	sub    eax,edi
c00016e3:	83 c8 01             	or     eax,0x1
c00016e6:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00016e9:	e9 11 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c00016ee:	89 c8                	mov    eax,ecx
c00016f0:	83 e0 fe             	and    eax,0xfffffffe
c00016f3:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016f8:	75 1c                	jne    c0001716 <dlrealloc+0xc2>
c00016fa:	83 e1 fc             	and    ecx,0xfffffffc
c00016fd:	01 f1                	add    ecx,esi
c00016ff:	39 cf                	cmp    edi,ecx
c0001701:	77 13                	ja     c0001716 <dlrealloc+0xc2>
c0001703:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001706:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001709:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000170c:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000170f:	89 ce                	mov    esi,ecx
c0001711:	e9 ab 00 00 00       	jmp    c00017c1 <dlrealloc+0x16d>
c0001716:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000171a:	8d 47 f9             	lea    eax,[edi-0x7]
c000171d:	83 ec 0c             	sub    esp,0xc
c0001720:	50                   	push   eax
c0001721:	e8 f1 f9 ff ff       	call   c0001117 <dlmalloc>
c0001726:	83 c4 10             	add    esp,0x10
c0001729:	89 c1                	mov    ecx,eax
c000172b:	85 c0                	test   eax,eax
c000172d:	0f 84 49 ff ff ff    	je     c000167c <dlrealloc+0x28>
c0001733:	8d 40 f8             	lea    eax,[eax-0x8]
c0001736:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000173a:	39 c2                	cmp    edx,eax
c000173c:	75 0a                	jne    c0001748 <dlrealloc+0xf4>
c000173e:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001741:	83 e0 fc             	and    eax,0xfffffffc
c0001744:	01 c6                	add    esi,eax
c0001746:	eb 79                	jmp    c00017c1 <dlrealloc+0x16d>
c0001748:	83 ee 04             	sub    esi,0x4
c000174b:	83 fe 27             	cmp    esi,0x27
c000174e:	76 16                	jbe    c0001766 <dlrealloc+0x112>
c0001750:	50                   	push   eax
c0001751:	56                   	push   esi
c0001752:	53                   	push   ebx
c0001753:	51                   	push   ecx
c0001754:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001758:	e8 e7 ef ff ff       	call   c0000744 <memcpy>
c000175d:	83 c4 10             	add    esp,0x10
c0001760:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001764:	eb 43                	jmp    c00017a9 <dlrealloc+0x155>
c0001766:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001768:	83 fe 13             	cmp    esi,0x13
c000176b:	89 01                	mov    DWORD PTR [ecx],eax
c000176d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001770:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001773:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001776:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001779:	76 2e                	jbe    c00017a9 <dlrealloc+0x155>
c000177b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000177e:	83 fe 1b             	cmp    esi,0x1b
c0001781:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001784:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001787:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000178a:	76 1d                	jbe    c00017a9 <dlrealloc+0x155>
c000178c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000178f:	83 fe 23             	cmp    esi,0x23
c0001792:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001795:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001798:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000179b:	76 0c                	jbe    c00017a9 <dlrealloc+0x155>
c000179d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00017a0:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00017a3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00017a6:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00017a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017ad:	83 ec 0c             	sub    esp,0xc
c00017b0:	53                   	push   ebx
c00017b1:	e8 06 f6 ff ff       	call   c0000dbc <dlfree>
c00017b6:	83 c4 10             	add    esp,0x10
c00017b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00017bd:	89 cb                	mov    ebx,ecx
c00017bf:	eb 3e                	jmp    c00017ff <dlrealloc+0x1ab>
c00017c1:	89 f2                	mov    edx,esi
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	29 fa                	sub    edx,edi
c00017c8:	83 e1 01             	and    ecx,0x1
c00017cb:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00017cf:	83 fa 0f             	cmp    edx,0xf
c00017d2:	77 0b                	ja     c00017df <dlrealloc+0x18b>
c00017d4:	09 ce                	or     esi,ecx
c00017d6:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00017d9:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017dd:	eb 20                	jmp    c00017ff <dlrealloc+0x1ab>
c00017df:	01 fd                	add    ebp,edi
c00017e1:	83 ec 0c             	sub    esp,0xc
c00017e4:	09 cf                	or     edi,ecx
c00017e6:	83 ca 01             	or     edx,0x1
c00017e9:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00017ec:	83 c5 08             	add    ebp,0x8
c00017ef:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00017f2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017f6:	55                   	push   ebp
c00017f7:	e8 c0 f5 ff ff       	call   c0000dbc <dlfree>
c00017fc:	83 c4 10             	add    esp,0x10
c00017ff:	83 c4 1c             	add    esp,0x1c
c0001802:	89 d8                	mov    eax,ebx
c0001804:	5b                   	pop    ebx
c0001805:	5e                   	pop    esi
c0001806:	5f                   	pop    edi
c0001807:	5d                   	pop    ebp
c0001808:	c3                   	ret    

c0001809 <dlmemalign>:
c0001809:	55                   	push   ebp
c000180a:	57                   	push   edi
c000180b:	56                   	push   esi
c000180c:	53                   	push   ebx
c000180d:	83 ec 0c             	sub    esp,0xc
c0001810:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001814:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001818:	83 fa 08             	cmp    edx,0x8
c000181b:	77 10                	ja     c000182d <dlmemalign+0x24>
c000181d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001821:	83 c4 0c             	add    esp,0xc
c0001824:	5b                   	pop    ebx
c0001825:	5e                   	pop    esi
c0001826:	5f                   	pop    edi
c0001827:	5d                   	pop    ebp
c0001828:	e9 ea f8 ff ff       	jmp    c0001117 <dlmalloc>
c000182d:	bf 10 00 00 00       	mov    edi,0x10
c0001832:	83 fa 0f             	cmp    edx,0xf
c0001835:	76 13                	jbe    c000184a <dlmemalign+0x41>
c0001837:	8d 4a ff             	lea    ecx,[edx-0x1]
c000183a:	85 d1                	test   ecx,edx
c000183c:	75 04                	jne    c0001842 <dlmemalign+0x39>
c000183e:	89 d7                	mov    edi,edx
c0001840:	eb 08                	jmp    c000184a <dlmemalign+0x41>
c0001842:	39 d7                	cmp    edi,edx
c0001844:	73 04                	jae    c000184a <dlmemalign+0x41>
c0001846:	01 ff                	add    edi,edi
c0001848:	eb f8                	jmp    c0001842 <dlmemalign+0x39>
c000184a:	83 f8 df             	cmp    eax,0xffffffdf
c000184d:	76 07                	jbe    c0001856 <dlmemalign+0x4d>
c000184f:	31 c0                	xor    eax,eax
c0001851:	e9 ce 00 00 00       	jmp    c0001924 <dlmemalign+0x11b>
c0001856:	83 c0 0b             	add    eax,0xb
c0001859:	bd 10 00 00 00       	mov    ebp,0x10
c000185e:	83 f8 0f             	cmp    eax,0xf
c0001861:	76 05                	jbe    c0001868 <dlmemalign+0x5f>
c0001863:	83 e0 f8             	and    eax,0xfffffff8
c0001866:	89 c5                	mov    ebp,eax
c0001868:	83 ec 0c             	sub    esp,0xc
c000186b:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000186f:	50                   	push   eax
c0001870:	e8 a2 f8 ff ff       	call   c0001117 <dlmalloc>
c0001875:	83 c4 10             	add    esp,0x10
c0001878:	89 c1                	mov    ecx,eax
c000187a:	85 c0                	test   eax,eax
c000187c:	74 d1                	je     c000184f <dlmemalign+0x46>
c000187e:	31 d2                	xor    edx,edx
c0001880:	8d 70 f8             	lea    esi,[eax-0x8]
c0001883:	f7 f7                	div    edi
c0001885:	85 d2                	test   edx,edx
c0001887:	74 62                	je     c00018eb <dlmemalign+0xe2>
c0001889:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000188d:	89 f8                	mov    eax,edi
c000188f:	f7 d8                	neg    eax
c0001891:	21 c3                	and    ebx,eax
c0001893:	83 eb 08             	sub    ebx,0x8
c0001896:	89 d8                	mov    eax,ebx
c0001898:	29 f0                	sub    eax,esi
c000189a:	83 f8 0f             	cmp    eax,0xf
c000189d:	77 02                	ja     c00018a1 <dlmemalign+0x98>
c000189f:	01 fb                	add    ebx,edi
c00018a1:	89 d8                	mov    eax,ebx
c00018a3:	29 f0                	sub    eax,esi
c00018a5:	89 c6                	mov    esi,eax
c00018a7:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018aa:	89 c2                	mov    edx,eax
c00018ac:	83 e2 fc             	and    edx,0xfffffffc
c00018af:	29 f2                	sub    edx,esi
c00018b1:	a8 02                	test   al,0x2
c00018b3:	74 10                	je     c00018c5 <dlmemalign+0xbc>
c00018b5:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018b8:	83 ca 02             	or     edx,0x2
c00018bb:	8d 43 08             	lea    eax,[ebx+0x8]
c00018be:	89 33                	mov    DWORD PTR [ebx],esi
c00018c0:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018c3:	eb 5f                	jmp    c0001924 <dlmemalign+0x11b>
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	89 d0                	mov    eax,edx
c00018ca:	83 c8 01             	or     eax,0x1
c00018cd:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018d0:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018d5:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018d8:	83 e0 01             	and    eax,0x1
c00018db:	09 f0                	or     eax,esi
c00018dd:	89 de                	mov    esi,ebx
c00018df:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018e2:	51                   	push   ecx
c00018e3:	e8 d4 f4 ff ff       	call   c0000dbc <dlfree>
c00018e8:	83 c4 10             	add    esp,0x10
c00018eb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018ee:	a8 02                	test   al,0x2
c00018f0:	75 2f                	jne    c0001921 <dlmemalign+0x118>
c00018f2:	83 e0 fc             	and    eax,0xfffffffc
c00018f5:	8d 55 10             	lea    edx,[ebp+0x10]
c00018f8:	39 c2                	cmp    edx,eax
c00018fa:	73 25                	jae    c0001921 <dlmemalign+0x118>
c00018fc:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018ff:	83 ec 0c             	sub    esp,0xc
c0001902:	29 e8                	sub    eax,ebp
c0001904:	83 c2 08             	add    edx,0x8
c0001907:	83 c8 01             	or     eax,0x1
c000190a:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000190d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001910:	83 e0 01             	and    eax,0x1
c0001913:	09 c5                	or     ebp,eax
c0001915:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001918:	52                   	push   edx
c0001919:	e8 9e f4 ff ff       	call   c0000dbc <dlfree>
c000191e:	83 c4 10             	add    esp,0x10
c0001921:	8d 46 08             	lea    eax,[esi+0x8]
c0001924:	83 c4 0c             	add    esp,0xc
c0001927:	5b                   	pop    ebx
c0001928:	5e                   	pop    esi
c0001929:	5f                   	pop    edi
c000192a:	5d                   	pop    ebp
c000192b:	c3                   	ret    

c000192c <dlcalloc>:
c000192c:	53                   	push   ebx
c000192d:	83 ec 14             	sub    esp,0x14
c0001930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001934:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001939:	50                   	push   eax
c000193a:	e8 d8 f7 ff ff       	call   c0001117 <dlmalloc>
c000193f:	83 c4 10             	add    esp,0x10
c0001942:	89 c3                	mov    ebx,eax
c0001944:	85 c0                	test   eax,eax
c0001946:	74 77                	je     c00019bf <dlcalloc+0x93>
c0001948:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000194b:	89 d0                	mov    eax,edx
c000194d:	83 e0 fc             	and    eax,0xfffffffc
c0001950:	80 e2 02             	and    dl,0x2
c0001953:	75 5a                	jne    c00019af <dlcalloc+0x83>
c0001955:	83 e8 04             	sub    eax,0x4
c0001958:	83 f8 27             	cmp    eax,0x27
c000195b:	76 03                	jbe    c0001960 <dlcalloc+0x34>
c000195d:	51                   	push   ecx
c000195e:	eb 53                	jmp    c00019b3 <dlcalloc+0x87>
c0001960:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001966:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000196d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001974:	83 f8 13             	cmp    eax,0x13
c0001977:	76 46                	jbe    c00019bf <dlcalloc+0x93>
c0001979:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001980:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001987:	83 f8 1b             	cmp    eax,0x1b
c000198a:	76 33                	jbe    c00019bf <dlcalloc+0x93>
c000198c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001993:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000199a:	83 f8 23             	cmp    eax,0x23
c000199d:	76 20                	jbe    c00019bf <dlcalloc+0x93>
c000199f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019a6:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019ad:	eb 10                	jmp    c00019bf <dlcalloc+0x93>
c00019af:	83 e8 08             	sub    eax,0x8
c00019b2:	52                   	push   edx
c00019b3:	50                   	push   eax
c00019b4:	6a 00                	push   0x0
c00019b6:	53                   	push   ebx
c00019b7:	e8 bc ed ff ff       	call   c0000778 <memset>
c00019bc:	83 c4 10             	add    esp,0x10
c00019bf:	89 d8                	mov    eax,ebx
c00019c1:	83 c4 08             	add    esp,0x8
c00019c4:	5b                   	pop    ebx
c00019c5:	c3                   	ret    

c00019c6 <dlcfree>:
c00019c6:	e9 f1 f3 ff ff       	jmp    c0000dbc <dlfree>

c00019cb <dlindependent_calloc>:
c00019cb:	83 ec 28             	sub    esp,0x28
c00019ce:	b9 03 00 00 00       	mov    ecx,0x3
c00019d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019df:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019e7:	e8 b9 fa ff ff       	call   c00014a5 <iALLOc>
c00019ec:	83 c4 2c             	add    esp,0x2c
c00019ef:	c3                   	ret    

c00019f0 <dlindependent_comalloc>:
c00019f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f8:	31 c9                	xor    ecx,ecx
c00019fa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a02:	e9 9e fa ff ff       	jmp    c00014a5 <iALLOc>

c0001a07 <dlvalloc>:
c0001a07:	83 ec 0c             	sub    esp,0xc
c0001a0a:	83 3d 40 e2 02 c0 00 	cmp    DWORD PTR ds:0xc002e240,0x0
c0001a11:	75 0a                	jne    c0001a1d <dlvalloc+0x16>
c0001a13:	b8 40 e2 02 c0       	mov    eax,0xc002e240
c0001a18:	e8 b8 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a1d:	50                   	push   eax
c0001a1e:	50                   	push   eax
c0001a1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a23:	ff 35 9c e5 02 c0    	push   DWORD PTR ds:0xc002e59c
c0001a29:	e8 db fd ff ff       	call   c0001809 <dlmemalign>
c0001a2e:	83 c4 1c             	add    esp,0x1c
c0001a31:	c3                   	ret    

c0001a32 <dlpvalloc>:
c0001a32:	83 ec 0c             	sub    esp,0xc
c0001a35:	83 3d 40 e2 02 c0 00 	cmp    DWORD PTR ds:0xc002e240,0x0
c0001a3c:	75 0a                	jne    c0001a48 <dlpvalloc+0x16>
c0001a3e:	b8 40 e2 02 c0       	mov    eax,0xc002e240
c0001a43:	e8 8d f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a48:	a1 9c e5 02 c0       	mov    eax,ds:0xc002e59c
c0001a4d:	89 c1                	mov    ecx,eax
c0001a4f:	52                   	push   edx
c0001a50:	f7 d9                	neg    ecx
c0001a52:	52                   	push   edx
c0001a53:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a57:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a5b:	21 ca                	and    edx,ecx
c0001a5d:	52                   	push   edx
c0001a5e:	50                   	push   eax
c0001a5f:	e8 a5 fd ff ff       	call   c0001809 <dlmemalign>
c0001a64:	83 c4 1c             	add    esp,0x1c
c0001a67:	c3                   	ret    

c0001a68 <dlmalloc_trim>:
c0001a68:	b8 40 e2 02 c0       	mov    eax,0xc002e240
c0001a6d:	e8 63 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a72:	31 c0                	xor    eax,eax
c0001a74:	c3                   	ret    

c0001a75 <dlmalloc_usable_size>:
c0001a75:	53                   	push   ebx
c0001a76:	31 c0                	xor    eax,eax
c0001a78:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a7c:	85 c9                	test   ecx,ecx
c0001a7e:	74 24                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a80:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a83:	f6 c2 02             	test   dl,0x2
c0001a86:	74 08                	je     c0001a90 <dlmalloc_usable_size+0x1b>
c0001a88:	83 e2 fc             	and    edx,0xfffffffc
c0001a8b:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a8e:	eb 14                	jmp    c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a90:	89 d3                	mov    ebx,edx
c0001a92:	31 c0                	xor    eax,eax
c0001a94:	83 e3 fe             	and    ebx,0xfffffffe
c0001a97:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a9c:	74 06                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a9e:	83 e2 fc             	and    edx,0xfffffffc
c0001aa1:	8d 42 fc             	lea    eax,[edx-0x4]
c0001aa4:	5b                   	pop    ebx
c0001aa5:	c3                   	ret    

c0001aa6 <dlmallinfo>:
c0001aa6:	55                   	push   ebp
c0001aa7:	57                   	push   edi
c0001aa8:	56                   	push   esi
c0001aa9:	53                   	push   ebx
c0001aaa:	83 ec 08             	sub    esp,0x8
c0001aad:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001ab1:	83 3d 6c e2 02 c0 00 	cmp    DWORD PTR ds:0xc002e26c,0x0
c0001ab8:	75 0a                	jne    c0001ac4 <dlmallinfo+0x1e>
c0001aba:	b8 40 e2 02 c0       	mov    eax,0xc002e240
c0001abf:	e8 11 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001ac4:	a1 6c e2 02 c0       	mov    eax,ds:0xc002e26c
c0001ac9:	31 ed                	xor    ebp,ebp
c0001acb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001ace:	31 c9                	xor    ecx,ecx
c0001ad0:	83 e0 fc             	and    eax,0xfffffffc
c0001ad3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ad7:	31 c0                	xor    eax,eax
c0001ad9:	8b 14 85 44 e2 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1dbc]
c0001ae0:	85 d2                	test   edx,edx
c0001ae2:	74 0e                	je     c0001af2 <dlmallinfo+0x4c>
c0001ae4:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001ae7:	45                   	inc    ebp
c0001ae8:	83 e6 fc             	and    esi,0xfffffffc
c0001aeb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aee:	01 f1                	add    ecx,esi
c0001af0:	eb ee                	jmp    c0001ae0 <dlmallinfo+0x3a>
c0001af2:	40                   	inc    eax
c0001af3:	83 f8 0a             	cmp    eax,0xa
c0001af6:	75 e1                	jne    c0001ad9 <dlmallinfo+0x33>
c0001af8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001afc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b03:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b06:	b8 74 e2 02 c0       	mov    eax,0xc002e274
c0001b0b:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b0e:	39 f0                	cmp    eax,esi
c0001b10:	74 10                	je     c0001b22 <dlmallinfo+0x7c>
c0001b12:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b15:	ff 04 24             	inc    DWORD PTR [esp]
c0001b18:	83 e7 fc             	and    edi,0xfffffffc
c0001b1b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b1e:	01 fa                	add    edx,edi
c0001b20:	eb ec                	jmp    c0001b0e <dlmallinfo+0x68>
c0001b22:	83 c0 08             	add    eax,0x8
c0001b25:	3d 6c e5 02 c0       	cmp    eax,0xc002e56c
c0001b2a:	75 df                	jne    c0001b0b <dlmallinfo+0x65>
c0001b2c:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b2f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b32:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b35:	a1 a8 e5 02 c0       	mov    eax,ds:0xc002e5a8
c0001b3a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b3d:	89 03                	mov    DWORD PTR [ebx],eax
c0001b3f:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b42:	8b 35 90 e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e590
c0001b48:	29 d0                	sub    eax,edx
c0001b4a:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b4d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b50:	8b 35 a4 e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e5a4
c0001b56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b5a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b5d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b60:	8b 35 b4 e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e5b4
c0001b66:	89 d8                	mov    eax,ebx
c0001b68:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b6b:	83 c4 08             	add    esp,0x8
c0001b6e:	5b                   	pop    ebx
c0001b6f:	5e                   	pop    esi
c0001b70:	5f                   	pop    edi
c0001b71:	5d                   	pop    ebp
c0001b72:	c2 04 00             	ret    0x4

c0001b75 <dlmalloc_stats>:
c0001b75:	83 ec 30             	sub    esp,0x30
c0001b78:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b7c:	50                   	push   eax
c0001b7d:	e8 24 ff ff ff       	call   c0001aa6 <dlmallinfo>
c0001b82:	83 c4 30             	add    esp,0x30
c0001b85:	c3                   	ret    

c0001b86 <dlmallopt>:
c0001b86:	56                   	push   esi
c0001b87:	b8 40 e2 02 c0       	mov    eax,0xc002e240
c0001b8c:	53                   	push   ebx
c0001b8d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b95:	e8 3b f1 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001b9a:	8d 46 04             	lea    eax,[esi+0x4]
c0001b9d:	83 f8 05             	cmp    eax,0x5
c0001ba0:	77 67                	ja     c0001c09 <dlmallopt+0x83>
c0001ba2:	ff 24 85 a4 93 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6c5c]
c0001ba9:	83 fb 50             	cmp    ebx,0x50
c0001bac:	77 5b                	ja     c0001c09 <dlmallopt+0x83>
c0001bae:	ba 08 00 00 00       	mov    edx,0x8
c0001bb3:	85 db                	test   ebx,ebx
c0001bb5:	74 12                	je     c0001bc9 <dlmallopt+0x43>
c0001bb7:	83 c3 0b             	add    ebx,0xb
c0001bba:	ba 10 00 00 00       	mov    edx,0x10
c0001bbf:	83 fb 0f             	cmp    ebx,0xf
c0001bc2:	76 05                	jbe    c0001bc9 <dlmallopt+0x43>
c0001bc4:	89 da                	mov    edx,ebx
c0001bc6:	83 e2 f8             	and    edx,0xfffffff8
c0001bc9:	a1 40 e2 02 c0       	mov    eax,ds:0xc002e240
c0001bce:	83 e0 03             	and    eax,0x3
c0001bd1:	09 d0                	or     eax,edx
c0001bd3:	a3 40 e2 02 c0       	mov    ds:0xc002e240,eax
c0001bd8:	eb 31                	jmp    c0001c0b <dlmallopt+0x85>
c0001bda:	89 1d 84 e5 02 c0    	mov    DWORD PTR ds:0xc002e584,ebx
c0001be0:	eb 06                	jmp    c0001be8 <dlmallopt+0x62>
c0001be2:	89 1d 88 e5 02 c0    	mov    DWORD PTR ds:0xc002e588,ebx
c0001be8:	be 01 00 00 00       	mov    esi,0x1
c0001bed:	eb 1c                	jmp    c0001c0b <dlmallopt+0x85>
c0001bef:	89 1d 8c e5 02 c0    	mov    DWORD PTR ds:0xc002e58c,ebx
c0001bf5:	eb f1                	jmp    c0001be8 <dlmallopt+0x62>
c0001bf7:	31 f6                	xor    esi,esi
c0001bf9:	85 db                	test   ebx,ebx
c0001bfb:	75 0e                	jne    c0001c0b <dlmallopt+0x85>
c0001bfd:	c7 05 94 e5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e594,0x0
c0001c07:	eb df                	jmp    c0001be8 <dlmallopt+0x62>
c0001c09:	31 f6                	xor    esi,esi
c0001c0b:	89 f0                	mov    eax,esi
c0001c0d:	5b                   	pop    ebx
c0001c0e:	5e                   	pop    esi
c0001c0f:	c3                   	ret    

c0001c10 <disk_status>:
c0001c10:	31 c0                	xor    eax,eax
c0001c12:	c3                   	ret    

c0001c13 <disk_initialize>:
c0001c13:	31 c0                	xor    eax,eax
c0001c15:	c3                   	ret    

c0001c16 <disk_read>:
c0001c16:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c1b:	0f b6 04 85 20 1d 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce2e0]
c0001c23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c27:	e9 fe f1 01 00       	jmp    c0020e2a <fatWrapperReadDisk>

c0001c2c <disk_write>:
c0001c2c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c31:	0f b6 04 85 20 1d 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce2e0]
c0001c39:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c3d:	e9 2f f2 01 00       	jmp    c0020e71 <fatWrapperWriteDisk>

c0001c42 <disk_ioctl>:
c0001c42:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c4b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c50:	0f b6 04 85 20 1d 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce2e0]
c0001c58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c5c:	e9 57 f2 01 00       	jmp    c0020eb8 <fatWrapperIoctl>

c0001c61 <ld_word>:
c0001c61:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c65:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c68:	c1 e2 08             	shl    edx,0x8
c0001c6b:	09 d0                	or     eax,edx
c0001c6d:	c3                   	ret    

c0001c6e <ld_dword>:
c0001c6e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c72:	89 d1                	mov    ecx,edx
c0001c74:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c78:	c1 e1 08             	shl    ecx,0x8
c0001c7b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c7e:	09 ca                	or     edx,ecx
c0001c80:	c1 e2 08             	shl    edx,0x8
c0001c83:	09 d0                	or     eax,edx
c0001c85:	c3                   	ret    

c0001c86 <ld_qword>:
c0001c86:	57                   	push   edi
c0001c87:	56                   	push   esi
c0001c88:	53                   	push   ebx
c0001c89:	31 db                	xor    ebx,ebx
c0001c8b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c8e:	89 df                	mov    edi,ebx
c0001c90:	89 ce                	mov    esi,ecx
c0001c92:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c96:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c9a:	c1 e6 08             	shl    esi,0x8
c0001c9d:	09 f2                	or     edx,esi
c0001c9f:	89 d6                	mov    esi,edx
c0001ca1:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001ca5:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ca9:	c1 e6 08             	shl    esi,0x8
c0001cac:	09 f2                	or     edx,esi
c0001cae:	89 d6                	mov    esi,edx
c0001cb0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cb4:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cb8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cbb:	c1 e6 08             	shl    esi,0x8
c0001cbe:	89 fb                	mov    ebx,edi
c0001cc0:	09 f2                	or     edx,esi
c0001cc2:	89 d1                	mov    ecx,edx
c0001cc4:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001cc8:	c1 e1 08             	shl    ecx,0x8
c0001ccb:	89 da                	mov    edx,ebx
c0001ccd:	09 c8                	or     eax,ecx
c0001ccf:	5b                   	pop    ebx
c0001cd0:	5e                   	pop    esi
c0001cd1:	5f                   	pop    edi
c0001cd2:	c3                   	ret    

c0001cd3 <st_word>:
c0001cd3:	66 89 10             	mov    WORD PTR [eax],dx
c0001cd6:	c3                   	ret    

c0001cd7 <st_dword>:
c0001cd7:	89 10                	mov    DWORD PTR [eax],edx
c0001cd9:	c3                   	ret    

c0001cda <st_qword>:
c0001cda:	89 10                	mov    DWORD PTR [eax],edx
c0001cdc:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001cdf:	c3                   	ret    

c0001ce0 <mem_cpy>:
c0001ce0:	85 c9                	test   ecx,ecx
c0001ce2:	74 10                	je     c0001cf4 <mem_cpy+0x14>
c0001ce4:	57                   	push   edi
c0001ce5:	01 c1                	add    ecx,eax
c0001ce7:	56                   	push   esi
c0001ce8:	89 c7                	mov    edi,eax
c0001cea:	89 d6                	mov    esi,edx
c0001cec:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ced:	39 f9                	cmp    ecx,edi
c0001cef:	75 fb                	jne    c0001cec <mem_cpy+0xc>
c0001cf1:	5e                   	pop    esi
c0001cf2:	5f                   	pop    edi
c0001cf3:	c3                   	ret    
c0001cf4:	c3                   	ret    

c0001cf5 <mem_set>:
c0001cf5:	01 c1                	add    ecx,eax
c0001cf7:	40                   	inc    eax
c0001cf8:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cfb:	39 c8                	cmp    eax,ecx
c0001cfd:	75 f8                	jne    c0001cf7 <mem_set+0x2>
c0001cff:	c3                   	ret    

c0001d00 <mem_cmp>:
c0001d00:	57                   	push   edi
c0001d01:	56                   	push   esi
c0001d02:	89 c6                	mov    esi,eax
c0001d04:	53                   	push   ebx
c0001d05:	46                   	inc    esi
c0001d06:	42                   	inc    edx
c0001d07:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d0b:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d0f:	29 fb                	sub    ebx,edi
c0001d11:	89 cf                	mov    edi,ecx
c0001d13:	29 f7                	sub    edi,esi
c0001d15:	01 c7                	add    edi,eax
c0001d17:	74 04                	je     c0001d1d <mem_cmp+0x1d>
c0001d19:	85 db                	test   ebx,ebx
c0001d1b:	74 e8                	je     c0001d05 <mem_cmp+0x5>
c0001d1d:	89 d8                	mov    eax,ebx
c0001d1f:	5b                   	pop    ebx
c0001d20:	5e                   	pop    esi
c0001d21:	5f                   	pop    edi
c0001d22:	c3                   	ret    

c0001d23 <chk_chr>:
c0001d23:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d26:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d29:	74 07                	je     c0001d32 <chk_chr+0xf>
c0001d2b:	39 d1                	cmp    ecx,edx
c0001d2d:	74 03                	je     c0001d32 <chk_chr+0xf>
c0001d2f:	40                   	inc    eax
c0001d30:	eb f1                	jmp    c0001d23 <chk_chr>
c0001d32:	89 c8                	mov    eax,ecx
c0001d34:	c3                   	ret    

c0001d35 <dbc_1st>:
c0001d35:	31 c0                	xor    eax,eax
c0001d37:	c3                   	ret    

c0001d38 <dbc_2nd>:
c0001d38:	31 c0                	xor    eax,eax
c0001d3a:	c3                   	ret    

c0001d3b <tchar2uni>:
c0001d3b:	57                   	push   edi
c0001d3c:	89 c7                	mov    edi,eax
c0001d3e:	56                   	push   esi
c0001d3f:	53                   	push   ebx
c0001d40:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d42:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d44:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d47:	84 c9                	test   cl,cl
c0001d49:	78 0a                	js     c0001d55 <tchar2uni+0x1a>
c0001d4b:	0f b6 d1             	movzx  edx,cl
c0001d4e:	89 f3                	mov    ebx,esi
c0001d50:	e9 9f 00 00 00       	jmp    c0001df4 <tchar2uni+0xb9>
c0001d55:	88 ca                	mov    dl,cl
c0001d57:	83 e2 e0             	and    edx,0xffffffe0
c0001d5a:	80 fa c0             	cmp    dl,0xc0
c0001d5d:	75 0c                	jne    c0001d6b <tchar2uni+0x30>
c0001d5f:	89 ca                	mov    edx,ecx
c0001d61:	b9 01 00 00 00       	mov    ecx,0x1
c0001d66:	83 e2 1f             	and    edx,0x1f
c0001d69:	eb 2e                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d6b:	88 ca                	mov    dl,cl
c0001d6d:	83 e2 f0             	and    edx,0xfffffff0
c0001d70:	80 fa e0             	cmp    dl,0xe0
c0001d73:	75 0c                	jne    c0001d81 <tchar2uni+0x46>
c0001d75:	89 ca                	mov    edx,ecx
c0001d77:	b9 02 00 00 00       	mov    ecx,0x2
c0001d7c:	83 e2 0f             	and    edx,0xf
c0001d7f:	eb 18                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d81:	88 ca                	mov    dl,cl
c0001d83:	83 e2 f8             	and    edx,0xfffffff8
c0001d86:	88 d0                	mov    al,dl
c0001d88:	83 ca ff             	or     edx,0xffffffff
c0001d8b:	3c f0                	cmp    al,0xf0
c0001d8d:	75 6c                	jne    c0001dfb <tchar2uni+0xc0>
c0001d8f:	89 ca                	mov    edx,ecx
c0001d91:	b9 03 00 00 00       	mov    ecx,0x3
c0001d96:	83 e2 07             	and    edx,0x7
c0001d99:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d9d:	46                   	inc    esi
c0001d9e:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001da1:	88 c8                	mov    al,cl
c0001da3:	83 e0 c0             	and    eax,0xffffffc0
c0001da6:	3c 80                	cmp    al,0x80
c0001da8:	75 4e                	jne    c0001df8 <tchar2uni+0xbd>
c0001daa:	c1 e2 06             	shl    edx,0x6
c0001dad:	83 e1 3f             	and    ecx,0x3f
c0001db0:	09 ca                	or     edx,ecx
c0001db2:	39 de                	cmp    esi,ebx
c0001db4:	75 e7                	jne    c0001d9d <tchar2uni+0x62>
c0001db6:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001db9:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001dbf:	77 37                	ja     c0001df8 <tchar2uni+0xbd>
c0001dc1:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001dc7:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001dcd:	76 29                	jbe    c0001df8 <tchar2uni+0xbd>
c0001dcf:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001dd5:	76 1d                	jbe    c0001df4 <tchar2uni+0xb9>
c0001dd7:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001ddd:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001de3:	c1 e1 06             	shl    ecx,0x6
c0001de6:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001dec:	09 ca                	or     edx,ecx
c0001dee:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001df4:	89 1f                	mov    DWORD PTR [edi],ebx
c0001df6:	eb 03                	jmp    c0001dfb <tchar2uni+0xc0>
c0001df8:	83 ca ff             	or     edx,0xffffffff
c0001dfb:	5b                   	pop    ebx
c0001dfc:	89 d0                	mov    eax,edx
c0001dfe:	5e                   	pop    esi
c0001dff:	5f                   	pop    edi
c0001e00:	c3                   	ret    

c0001e01 <put_utf>:
c0001e01:	53                   	push   ebx
c0001e02:	83 f8 7f             	cmp    eax,0x7f
c0001e05:	89 c3                	mov    ebx,eax
c0001e07:	b0 00                	mov    al,0x0
c0001e09:	77 11                	ja     c0001e1c <put_utf+0x1b>
c0001e0b:	85 c9                	test   ecx,ecx
c0001e0d:	0f 84 e5 00 00 00    	je     c0001ef8 <put_utf+0xf7>
c0001e13:	88 1a                	mov    BYTE PTR [edx],bl
c0001e15:	b0 01                	mov    al,0x1
c0001e17:	e9 dc 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e1c:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e22:	77 23                	ja     c0001e47 <put_utf+0x46>
c0001e24:	83 f9 01             	cmp    ecx,0x1
c0001e27:	0f 86 cb 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e2d:	89 d8                	mov    eax,ebx
c0001e2f:	83 e3 3f             	and    ebx,0x3f
c0001e32:	c1 e8 06             	shr    eax,0x6
c0001e35:	83 cb 80             	or     ebx,0xffffff80
c0001e38:	83 c8 c0             	or     eax,0xffffffc0
c0001e3b:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e3e:	88 02                	mov    BYTE PTR [edx],al
c0001e40:	b0 02                	mov    al,0x2
c0001e42:	e9 b1 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e47:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e4d:	77 40                	ja     c0001e8f <put_utf+0x8e>
c0001e4f:	83 f9 02             	cmp    ecx,0x2
c0001e52:	0f 86 a0 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e58:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e5e:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e64:	0f 86 8e 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e6a:	89 d8                	mov    eax,ebx
c0001e6c:	c1 e8 0c             	shr    eax,0xc
c0001e6f:	83 c8 e0             	or     eax,0xffffffe0
c0001e72:	88 02                	mov    BYTE PTR [edx],al
c0001e74:	89 d8                	mov    eax,ebx
c0001e76:	83 e3 3f             	and    ebx,0x3f
c0001e79:	c1 e8 06             	shr    eax,0x6
c0001e7c:	83 cb 80             	or     ebx,0xffffff80
c0001e7f:	83 e0 3f             	and    eax,0x3f
c0001e82:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e85:	83 c8 80             	or     eax,0xffffff80
c0001e88:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e8b:	b0 03                	mov    al,0x3
c0001e8d:	eb 69                	jmp    c0001ef8 <put_utf+0xf7>
c0001e8f:	83 f9 03             	cmp    ecx,0x3
c0001e92:	76 64                	jbe    c0001ef8 <put_utf+0xf7>
c0001e94:	89 d9                	mov    ecx,ebx
c0001e96:	0f b7 c3             	movzx  eax,bx
c0001e99:	66 31 c9             	xor    cx,cx
c0001e9c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001ea2:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001ea8:	c1 e9 06             	shr    ecx,0x6
c0001eab:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001eb1:	77 43                	ja     c0001ef6 <put_utf+0xf5>
c0001eb3:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001eb9:	77 3b                	ja     c0001ef6 <put_utf+0xf5>
c0001ebb:	09 cb                	or     ebx,ecx
c0001ebd:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ec3:	89 d8                	mov    eax,ebx
c0001ec5:	c1 e8 12             	shr    eax,0x12
c0001ec8:	83 c8 f0             	or     eax,0xfffffff0
c0001ecb:	88 02                	mov    BYTE PTR [edx],al
c0001ecd:	89 d8                	mov    eax,ebx
c0001ecf:	c1 e8 0c             	shr    eax,0xc
c0001ed2:	83 e0 3f             	and    eax,0x3f
c0001ed5:	83 c8 80             	or     eax,0xffffff80
c0001ed8:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001edb:	89 d8                	mov    eax,ebx
c0001edd:	83 e3 3f             	and    ebx,0x3f
c0001ee0:	c1 e8 06             	shr    eax,0x6
c0001ee3:	83 cb 80             	or     ebx,0xffffff80
c0001ee6:	83 e0 3f             	and    eax,0x3f
c0001ee9:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eec:	83 c8 80             	or     eax,0xffffff80
c0001eef:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ef2:	b0 04                	mov    al,0x4
c0001ef4:	eb 02                	jmp    c0001ef8 <put_utf+0xf7>
c0001ef6:	31 c0                	xor    eax,eax
c0001ef8:	5b                   	pop    ebx
c0001ef9:	c3                   	ret    

c0001efa <clst2sect>:
c0001efa:	89 c1                	mov    ecx,eax
c0001efc:	83 ea 02             	sub    edx,0x2
c0001eff:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001f02:	83 e8 02             	sub    eax,0x2
c0001f05:	39 d0                	cmp    eax,edx
c0001f07:	76 0d                	jbe    c0001f16 <clst2sect+0x1c>
c0001f09:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001f0d:	f7 e2                	mul    edx
c0001f0f:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001f12:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f15:	c3                   	ret    
c0001f16:	31 c0                	xor    eax,eax
c0001f18:	31 d2                	xor    edx,edx
c0001f1a:	c3                   	ret    

c0001f1b <clmt_clust>:
c0001f1b:	57                   	push   edi
c0001f1c:	89 cf                	mov    edi,ecx
c0001f1e:	56                   	push   esi
c0001f1f:	89 d6                	mov    esi,edx
c0001f21:	53                   	push   ebx
c0001f22:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f26:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f29:	89 f2                	mov    edx,esi
c0001f2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f2d:	c1 ef 09             	shr    edi,0x9
c0001f30:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f34:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f37:	89 f9                	mov    ecx,edi
c0001f39:	31 ff                	xor    edi,edi
c0001f3b:	57                   	push   edi
c0001f3c:	56                   	push   esi
c0001f3d:	51                   	push   ecx
c0001f3e:	52                   	push   edx
c0001f3f:	e8 e8 4a 02 00       	call   c0026a2c <__udivdi3>
c0001f44:	83 c4 10             	add    esp,0x10
c0001f47:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f49:	85 d2                	test   edx,edx
c0001f4b:	74 10                	je     c0001f5d <clmt_clust+0x42>
c0001f4d:	39 d0                	cmp    eax,edx
c0001f4f:	72 07                	jb     c0001f58 <clmt_clust+0x3d>
c0001f51:	29 d0                	sub    eax,edx
c0001f53:	83 c3 08             	add    ebx,0x8
c0001f56:	eb ef                	jmp    c0001f47 <clmt_clust+0x2c>
c0001f58:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f5b:	89 c2                	mov    edx,eax
c0001f5d:	5b                   	pop    ebx
c0001f5e:	89 d0                	mov    eax,edx
c0001f60:	5e                   	pop    esi
c0001f61:	5f                   	pop    edi
c0001f62:	c3                   	ret    

c0001f63 <pick_lfn>:
c0001f63:	55                   	push   ebp
c0001f64:	57                   	push   edi
c0001f65:	56                   	push   esi
c0001f66:	89 d6                	mov    esi,edx
c0001f68:	53                   	push   ebx
c0001f69:	89 c3                	mov    ebx,eax
c0001f6b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f6e:	e8 ee fc ff ff       	call   c0001c61 <ld_word>
c0001f73:	66 85 c0             	test   ax,ax
c0001f76:	74 04                	je     c0001f7c <pick_lfn+0x19>
c0001f78:	31 c0                	xor    eax,eax
c0001f7a:	eb 5c                	jmp    c0001fd8 <pick_lfn+0x75>
c0001f7c:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f7f:	bd 01 00 00 00       	mov    ebp,0x1
c0001f84:	83 e1 bf             	and    ecx,0xffffffbf
c0001f87:	31 ff                	xor    edi,edi
c0001f89:	49                   	dec    ecx
c0001f8a:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f8d:	0f b6 87 c0 94 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6b40]
c0001f94:	01 f0                	add    eax,esi
c0001f96:	e8 c6 fc ff ff       	call   c0001c61 <ld_word>
c0001f9b:	66 85 ed             	test   bp,bp
c0001f9e:	74 11                	je     c0001fb1 <pick_lfn+0x4e>
c0001fa0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fa6:	77 d0                	ja     c0001f78 <pick_lfn+0x15>
c0001fa8:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fac:	89 c5                	mov    ebp,eax
c0001fae:	41                   	inc    ecx
c0001faf:	eb 04                	jmp    c0001fb5 <pick_lfn+0x52>
c0001fb1:	66 40                	inc    ax
c0001fb3:	75 c3                	jne    c0001f78 <pick_lfn+0x15>
c0001fb5:	47                   	inc    edi
c0001fb6:	83 ff 0d             	cmp    edi,0xd
c0001fb9:	75 d2                	jne    c0001f8d <pick_lfn+0x2a>
c0001fbb:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fbe:	74 13                	je     c0001fd3 <pick_lfn+0x70>
c0001fc0:	66 85 ed             	test   bp,bp
c0001fc3:	74 0e                	je     c0001fd3 <pick_lfn+0x70>
c0001fc5:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fcb:	77 ab                	ja     c0001f78 <pick_lfn+0x15>
c0001fcd:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fd3:	b8 01 00 00 00       	mov    eax,0x1
c0001fd8:	5b                   	pop    ebx
c0001fd9:	5e                   	pop    esi
c0001fda:	5f                   	pop    edi
c0001fdb:	5d                   	pop    ebp
c0001fdc:	c3                   	ret    

c0001fdd <put_lfn>:
c0001fdd:	55                   	push   ebp
c0001fde:	31 ed                	xor    ebp,ebp
c0001fe0:	57                   	push   edi
c0001fe1:	89 d7                	mov    edi,edx
c0001fe3:	56                   	push   esi
c0001fe4:	31 f6                	xor    esi,esi
c0001fe6:	53                   	push   ebx
c0001fe7:	83 ec 08             	sub    esp,0x8
c0001fea:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fed:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ff1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ff5:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ffb:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ffe:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002001:	31 d2                	xor    edx,edx
c0002003:	e8 cb fc ff ff       	call   c0001cd3 <st_word>
c0002008:	0f b6 d9             	movzx  ebx,cl
c000200b:	4b                   	dec    ebx
c000200c:	6b db 0d             	imul   ebx,ebx,0xd
c000200f:	66 83 fe ff          	cmp    si,0xffff
c0002013:	74 08                	je     c000201d <put_lfn+0x40>
c0002015:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002018:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000201c:	43                   	inc    ebx
c000201d:	0f b6 85 c0 94 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6b40]
c0002024:	0f b7 d6             	movzx  edx,si
c0002027:	01 f8                	add    eax,edi
c0002029:	e8 a5 fc ff ff       	call   c0001cd3 <st_word>
c000202e:	66 85 f6             	test   si,si
c0002031:	75 03                	jne    c0002036 <put_lfn+0x59>
c0002033:	83 ce ff             	or     esi,0xffffffff
c0002036:	45                   	inc    ebp
c0002037:	83 fd 0d             	cmp    ebp,0xd
c000203a:	75 d3                	jne    c000200f <put_lfn+0x32>
c000203c:	66 46                	inc    si
c000203e:	74 0a                	je     c000204a <put_lfn+0x6d>
c0002040:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002043:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002048:	75 09                	jne    c0002053 <put_lfn+0x76>
c000204a:	88 c8                	mov    al,cl
c000204c:	83 c8 40             	or     eax,0x40
c000204f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002053:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002057:	88 07                	mov    BYTE PTR [edi],al
c0002059:	83 c4 08             	add    esp,0x8
c000205c:	5b                   	pop    ebx
c000205d:	5e                   	pop    esi
c000205e:	5f                   	pop    edi
c000205f:	5d                   	pop    ebp
c0002060:	c3                   	ret    

c0002061 <gen_numname>:
c0002061:	57                   	push   edi
c0002062:	89 cf                	mov    edi,ecx
c0002064:	56                   	push   esi
c0002065:	b9 0b 00 00 00       	mov    ecx,0xb
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 10             	sub    esp,0x10
c0002070:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002074:	e8 67 fc ff ff       	call   c0001ce0 <mem_cpy>
c0002079:	83 fb 05             	cmp    ebx,0x5
c000207c:	76 2d                	jbe    c00020ab <gen_numname+0x4a>
c000207e:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002081:	66 85 c0             	test   ax,ax
c0002084:	74 25                	je     c00020ab <gen_numname+0x4a>
c0002086:	83 c7 02             	add    edi,0x2
c0002089:	ba 10 00 00 00       	mov    edx,0x10
c000208e:	01 db                	add    ebx,ebx
c0002090:	89 c1                	mov    ecx,eax
c0002092:	66 d1 e8             	shr    ax,1
c0002095:	83 e1 01             	and    ecx,0x1
c0002098:	01 cb                	add    ebx,ecx
c000209a:	0f ba e3 10          	bt     ebx,0x10
c000209e:	73 06                	jae    c00020a6 <gen_numname+0x45>
c00020a0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020a6:	4a                   	dec    edx
c00020a7:	75 e5                	jne    c000208e <gen_numname+0x2d>
c00020a9:	eb d3                	jmp    c000207e <gen_numname+0x1d>
c00020ab:	b8 07 00 00 00       	mov    eax,0x7
c00020b0:	88 d9                	mov    cl,bl
c00020b2:	83 e1 0f             	and    ecx,0xf
c00020b5:	8d 51 30             	lea    edx,[ecx+0x30]
c00020b8:	80 fa 39             	cmp    dl,0x39
c00020bb:	76 03                	jbe    c00020c0 <gen_numname+0x5f>
c00020bd:	8d 51 37             	lea    edx,[ecx+0x37]
c00020c0:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020c3:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020c7:	89 da                	mov    edx,ebx
c00020c9:	c1 ea 04             	shr    edx,0x4
c00020cc:	83 fb 0f             	cmp    ebx,0xf
c00020cf:	76 06                	jbe    c00020d7 <gen_numname+0x76>
c00020d1:	89 c8                	mov    eax,ecx
c00020d3:	89 d3                	mov    ebx,edx
c00020d5:	eb d9                	jmp    c00020b0 <gen_numname+0x4f>
c00020d7:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020dc:	31 d2                	xor    edx,edx
c00020de:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020e1:	8d 04 16             	lea    eax,[esi+edx*1]
c00020e4:	39 ca                	cmp    edx,ecx
c00020e6:	73 18                	jae    c0002100 <gen_numname+0x9f>
c00020e8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020eb:	3c 20                	cmp    al,0x20
c00020ed:	74 11                	je     c0002100 <gen_numname+0x9f>
c00020ef:	e8 41 fc ff ff       	call   c0001d35 <dbc_1st>
c00020f4:	85 c0                	test   eax,eax
c00020f6:	74 05                	je     c00020fd <gen_numname+0x9c>
c00020f8:	39 d3                	cmp    ebx,edx
c00020fa:	74 04                	je     c0002100 <gen_numname+0x9f>
c00020fc:	42                   	inc    edx
c00020fd:	42                   	inc    edx
c00020fe:	eb e1                	jmp    c00020e1 <gen_numname+0x80>
c0002100:	b0 20                	mov    al,0x20
c0002102:	83 f9 07             	cmp    ecx,0x7
c0002105:	77 05                	ja     c000210c <gen_numname+0xab>
c0002107:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000210b:	41                   	inc    ecx
c000210c:	42                   	inc    edx
c000210d:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002111:	83 fa 07             	cmp    edx,0x7
c0002114:	76 ea                	jbe    c0002100 <gen_numname+0x9f>
c0002116:	83 c4 10             	add    esp,0x10
c0002119:	5b                   	pop    ebx
c000211a:	5e                   	pop    esi
c000211b:	5f                   	pop    edi
c000211c:	c3                   	ret    

c000211d <sum_sfn>:
c000211d:	31 c9                	xor    ecx,ecx
c000211f:	31 d2                	xor    edx,edx
c0002121:	d0 ca                	ror    dl,1
c0002123:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002126:	41                   	inc    ecx
c0002127:	83 f9 0b             	cmp    ecx,0xb
c000212a:	75 f5                	jne    c0002121 <sum_sfn+0x4>
c000212c:	88 d0                	mov    al,dl
c000212e:	c3                   	ret    

c000212f <xdir_sum>:
c000212f:	56                   	push   esi
c0002130:	31 c9                	xor    ecx,ecx
c0002132:	53                   	push   ebx
c0002133:	31 d2                	xor    edx,edx
c0002135:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002139:	43                   	inc    ebx
c000213a:	c1 e3 05             	shl    ebx,0x5
c000213d:	83 fa 02             	cmp    edx,0x2
c0002140:	74 0b                	je     c000214d <xdir_sum+0x1e>
c0002142:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002146:	66 d1 c9             	ror    cx,1
c0002149:	01 f1                	add    ecx,esi
c000214b:	eb 05                	jmp    c0002152 <xdir_sum+0x23>
c000214d:	ba 03 00 00 00       	mov    edx,0x3
c0002152:	42                   	inc    edx
c0002153:	39 d3                	cmp    ebx,edx
c0002155:	77 e6                	ja     c000213d <xdir_sum+0xe>
c0002157:	89 c8                	mov    eax,ecx
c0002159:	5b                   	pop    ebx
c000215a:	5e                   	pop    esi
c000215b:	c3                   	ret    

c000215c <xsum32>:
c000215c:	d1 ca                	ror    edx,1
c000215e:	0f b6 c0             	movzx  eax,al
c0002161:	01 d0                	add    eax,edx
c0002163:	c3                   	ret    

c0002164 <get_xfileinfo>:
c0002164:	55                   	push   ebp
c0002165:	31 c9                	xor    ecx,ecx
c0002167:	57                   	push   edi
c0002168:	bd 40 00 00 00       	mov    ebp,0x40
c000216d:	56                   	push   esi
c000216e:	31 ff                	xor    edi,edi
c0002170:	53                   	push   ebx
c0002171:	89 c6                	mov    esi,eax
c0002173:	83 ec 0c             	sub    esp,0xc
c0002176:	89 d3                	mov    ebx,edx
c0002178:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000217f:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002183:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002186:	76 6d                	jbe    c00021f5 <get_xfileinfo+0x91>
c0002188:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000218e:	76 0b                	jbe    c000219b <get_xfileinfo+0x37>
c0002190:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0002194:	bf 01 00 00 00       	mov    edi,0x1
c0002199:	eb 63                	jmp    c00021fe <get_xfileinfo+0x9a>
c000219b:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00021a1:	75 03                	jne    c00021a6 <get_xfileinfo+0x42>
c00021a3:	83 c5 02             	add    ebp,0x2
c00021a6:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00021a9:	83 c5 02             	add    ebp,0x2
c00021ac:	e8 b0 fa ff ff       	call   c0001c61 <ld_word>
c00021b1:	ff 04 24             	inc    DWORD PTR [esp]
c00021b4:	66 85 c9             	test   cx,cx
c00021b7:	75 0d                	jne    c00021c6 <get_xfileinfo+0x62>
c00021b9:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021bf:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021c4:	76 2b                	jbe    c00021f1 <get_xfileinfo+0x8d>
c00021c6:	c1 e1 10             	shl    ecx,0x10
c00021c9:	ba ff 00 00 00       	mov    edx,0xff
c00021ce:	0f b7 c0             	movzx  eax,ax
c00021d1:	29 fa                	sub    edx,edi
c00021d3:	09 c8                	or     eax,ecx
c00021d5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021d9:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021dd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021e1:	e8 1b fc ff ff       	call   c0001e01 <put_utf>
c00021e6:	84 c0                	test   al,al
c00021e8:	74 a6                	je     c0002190 <get_xfileinfo+0x2c>
c00021ea:	0f b6 c0             	movzx  eax,al
c00021ed:	01 c7                	add    edi,eax
c00021ef:	31 c0                	xor    eax,eax
c00021f1:	89 c1                	mov    ecx,eax
c00021f3:	eb 8a                	jmp    c000217f <get_xfileinfo+0x1b>
c00021f5:	85 ff                	test   edi,edi
c00021f7:	74 97                	je     c0002190 <get_xfileinfo+0x2c>
c00021f9:	66 85 c9             	test   cx,cx
c00021fc:	75 92                	jne    c0002190 <get_xfileinfo+0x2c>
c00021fe:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0002203:	31 c0                	xor    eax,eax
c0002205:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002209:	31 d2                	xor    edx,edx
c000220b:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c000220e:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002211:	80 e1 10             	and    cl,0x10
c0002214:	75 08                	jne    c000221e <get_xfileinfo+0xba>
c0002216:	8d 46 38             	lea    eax,[esi+0x38]
c0002219:	e8 68 fa ff ff       	call   c0001c86 <ld_qword>
c000221e:	89 03                	mov    DWORD PTR [ebx],eax
c0002220:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002223:	8d 46 0c             	lea    eax,[esi+0xc]
c0002226:	e8 36 fa ff ff       	call   c0001c61 <ld_word>
c000222b:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c000222f:	8d 46 0e             	lea    eax,[esi+0xe]
c0002232:	e8 2a fa ff ff       	call   c0001c61 <ld_word>
c0002237:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000223b:	83 c4 0c             	add    esp,0xc
c000223e:	5b                   	pop    ebx
c000223f:	5e                   	pop    esi
c0002240:	5f                   	pop    edi
c0002241:	5d                   	pop    ebp
c0002242:	c3                   	ret    

c0002243 <get_ldnumber>:
c0002243:	8b 10                	mov    edx,DWORD PTR [eax]
c0002245:	85 d2                	test   edx,edx
c0002247:	74 14                	je     c000225d <get_ldnumber+0x1a>
c0002249:	56                   	push   esi
c000224a:	53                   	push   ebx
c000224b:	89 d3                	mov    ebx,edx
c000224d:	43                   	inc    ebx
c000224e:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002251:	80 f9 1f             	cmp    cl,0x1f
c0002254:	76 0d                	jbe    c0002263 <get_ldnumber+0x20>
c0002256:	80 f9 3a             	cmp    cl,0x3a
c0002259:	75 f2                	jne    c000224d <get_ldnumber+0xa>
c000225b:	eb 0a                	jmp    c0002267 <get_ldnumber+0x24>
c000225d:	83 c9 ff             	or     ecx,0xffffffff
c0002260:	89 c8                	mov    eax,ecx
c0002262:	c3                   	ret    
c0002263:	31 c9                	xor    ecx,ecx
c0002265:	eb 24                	jmp    c000228b <get_ldnumber+0x48>
c0002267:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226a:	8d 4e d0             	lea    ecx,[esi-0x30]
c000226d:	80 f9 09             	cmp    cl,0x9
c0002270:	77 16                	ja     c0002288 <get_ldnumber+0x45>
c0002272:	83 c2 02             	add    edx,0x2
c0002275:	83 c9 ff             	or     ecx,0xffffffff
c0002278:	39 d3                	cmp    ebx,edx
c000227a:	75 0f                	jne    c000228b <get_ldnumber+0x48>
c000227c:	89 f2                	mov    edx,esi
c000227e:	89 18                	mov    DWORD PTR [eax],ebx
c0002280:	0f be ca             	movsx  ecx,dl
c0002283:	83 e9 30             	sub    ecx,0x30
c0002286:	eb 03                	jmp    c000228b <get_ldnumber+0x48>
c0002288:	83 c9 ff             	or     ecx,0xffffffff
c000228b:	89 c8                	mov    eax,ecx
c000228d:	5b                   	pop    ebx
c000228e:	5e                   	pop    esi
c000228f:	c3                   	ret    

c0002290 <crc32>:
c0002290:	56                   	push   esi
c0002291:	89 d6                	mov    esi,edx
c0002293:	53                   	push   ebx
c0002294:	b2 01                	mov    dl,0x1
c0002296:	bb 08 00 00 00       	mov    ebx,0x8
c000229b:	89 f1                	mov    ecx,esi
c000229d:	84 d1                	test   cl,dl
c000229f:	0f 95 c1             	setne  cl
c00022a2:	0f b6 c9             	movzx  ecx,cl
c00022a5:	31 c1                	xor    ecx,eax
c00022a7:	89 c8                	mov    eax,ecx
c00022a9:	d1 e8                	shr    eax,1
c00022ab:	80 e1 01             	and    cl,0x1
c00022ae:	74 05                	je     c00022b5 <crc32+0x25>
c00022b0:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022b5:	d1 e2                	shl    edx,1
c00022b7:	4b                   	dec    ebx
c00022b8:	75 e1                	jne    c000229b <crc32+0xb>
c00022ba:	5b                   	pop    ebx
c00022bb:	5e                   	pop    esi
c00022bc:	c3                   	ret    

c00022bd <test_gpt_header>:
c00022bd:	55                   	push   ebp
c00022be:	b9 10 00 00 00       	mov    ecx,0x10
c00022c3:	57                   	push   edi
c00022c4:	ba c0 93 02 c0       	mov    edx,0xc00293c0
c00022c9:	56                   	push   esi
c00022ca:	31 ff                	xor    edi,edi
c00022cc:	53                   	push   ebx
c00022cd:	89 c3                	mov    ebx,eax
c00022cf:	e8 2c fa ff ff       	call   c0001d00 <mem_cmp>
c00022d4:	85 c0                	test   eax,eax
c00022d6:	75 55                	jne    c000232d <test_gpt_header+0x70>
c00022d8:	89 c7                	mov    edi,eax
c00022da:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022df:	83 ce ff             	or     esi,0xffffffff
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	83 fd 03             	cmp    ebp,0x3
c00022e7:	76 05                	jbe    c00022ee <test_gpt_header+0x31>
c00022e9:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022ee:	89 f0                	mov    eax,esi
c00022f0:	45                   	inc    ebp
c00022f1:	e8 9a ff ff ff       	call   c0002290 <crc32>
c00022f6:	83 fd 4c             	cmp    ebp,0x4c
c00022f9:	89 c6                	mov    esi,eax
c00022fb:	75 e5                	jne    c00022e2 <test_gpt_header+0x25>
c00022fd:	8d 43 10             	lea    eax,[ebx+0x10]
c0002300:	f7 d6                	not    esi
c0002302:	e8 67 f9 ff ff       	call   c0001c6e <ld_dword>
c0002307:	39 c6                	cmp    esi,eax
c0002309:	75 22                	jne    c000232d <test_gpt_header+0x70>
c000230b:	8d 43 54             	lea    eax,[ebx+0x54]
c000230e:	e8 5b f9 ff ff       	call   c0001c6e <ld_dword>
c0002313:	83 c0 80             	add    eax,0xffffff80
c0002316:	75 15                	jne    c000232d <test_gpt_header+0x70>
c0002318:	8d 43 50             	lea    eax,[ebx+0x50]
c000231b:	e8 4e f9 ff ff       	call   c0001c6e <ld_dword>
c0002320:	3d 80 00 00 00       	cmp    eax,0x80
c0002325:	0f 96 c0             	setbe  al
c0002328:	0f b6 c0             	movzx  eax,al
c000232b:	89 c7                	mov    edi,eax
c000232d:	5b                   	pop    ebx
c000232e:	89 f8                	mov    eax,edi
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    

c0002334 <make_rand>:
c0002334:	56                   	push   esi
c0002335:	85 c0                	test   eax,eax
c0002337:	53                   	push   ebx
c0002338:	75 05                	jne    c000233f <make_rand+0xb>
c000233a:	b8 01 00 00 00       	mov    eax,0x1
c000233f:	01 d1                	add    ecx,edx
c0002341:	bb 08 00 00 00       	mov    ebx,0x8
c0002346:	89 c6                	mov    esi,eax
c0002348:	d1 e8                	shr    eax,1
c000234a:	83 e6 01             	and    esi,0x1
c000234d:	85 f6                	test   esi,esi
c000234f:	74 05                	je     c0002356 <make_rand+0x22>
c0002351:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002356:	4b                   	dec    ebx
c0002357:	75 ed                	jne    c0002346 <make_rand+0x12>
c0002359:	42                   	inc    edx
c000235a:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000235d:	39 ca                	cmp    edx,ecx
c000235f:	75 e0                	jne    c0002341 <make_rand+0xd>
c0002361:	5b                   	pop    ebx
c0002362:	5e                   	pop    esi
c0002363:	c3                   	ret    

c0002364 <validate>:
c0002364:	56                   	push   esi
c0002365:	53                   	push   ebx
c0002366:	89 d6                	mov    esi,edx
c0002368:	51                   	push   ecx
c0002369:	85 c0                	test   eax,eax
c000236b:	75 09                	jne    c0002376 <validate+0x12>
c000236d:	b8 09 00 00 00       	mov    eax,0x9
c0002372:	31 c9                	xor    ecx,ecx
c0002374:	eb 2f                	jmp    c00023a5 <validate+0x41>
c0002376:	89 c3                	mov    ebx,eax
c0002378:	8b 00                	mov    eax,DWORD PTR [eax]
c000237a:	85 c0                	test   eax,eax
c000237c:	74 ef                	je     c000236d <validate+0x9>
c000237e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002381:	74 ea                	je     c000236d <validate+0x9>
c0002383:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002387:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000238b:	75 e0                	jne    c000236d <validate+0x9>
c000238d:	83 ec 0c             	sub    esp,0xc
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 76 f8 ff ff       	call   c0001c10 <disk_status>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	a8 01                	test   al,0x1
c000239f:	75 cc                	jne    c000236d <validate+0x9>
c00023a1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023a3:	31 c0                	xor    eax,eax
c00023a5:	89 0e                	mov    DWORD PTR [esi],ecx
c00023a7:	5a                   	pop    edx
c00023a8:	5b                   	pop    ebx
c00023a9:	5e                   	pop    esi
c00023aa:	c3                   	ret    

c00023ab <sync_window>:
c00023ab:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023af:	0f 84 85 00 00 00    	je     c000243a <sync_window+0x8f>
c00023b5:	55                   	push   ebp
c00023b6:	8d 68 54             	lea    ebp,[eax+0x54]
c00023b9:	57                   	push   edi
c00023ba:	56                   	push   esi
c00023bb:	53                   	push   ebx
c00023bc:	89 c3                	mov    ebx,eax
c00023be:	83 ec 28             	sub    esp,0x28
c00023c1:	6a 01                	push   0x1
c00023c3:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023c6:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023c9:	55                   	push   ebp
c00023ca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023ce:	50                   	push   eax
c00023cf:	e8 58 f8 ff ff       	call   c0001c2c <disk_write>
c00023d4:	83 c4 20             	add    esp,0x20
c00023d7:	ba 01 00 00 00       	mov    edx,0x1
c00023dc:	85 c0                	test   eax,eax
c00023de:	75 50                	jne    c0002430 <sync_window+0x85>
c00023e0:	31 ff                	xor    edi,edi
c00023e2:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023e5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023e9:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023ed:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023f0:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023f3:	89 c6                	mov    esi,eax
c00023f5:	89 d7                	mov    edi,edx
c00023f7:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023fa:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023fe:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c0002401:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002405:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002409:	73 23                	jae    c000242e <sync_window+0x83>
c000240b:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000240f:	75 1d                	jne    c000242e <sync_window+0x83>
c0002411:	83 ec 0c             	sub    esp,0xc
c0002414:	6a 01                	push   0x1
c0002416:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000241a:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000241e:	52                   	push   edx
c000241f:	50                   	push   eax
c0002420:	55                   	push   ebp
c0002421:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002425:	50                   	push   eax
c0002426:	e8 01 f8 ff ff       	call   c0001c2c <disk_write>
c000242b:	83 c4 20             	add    esp,0x20
c000242e:	31 d2                	xor    edx,edx
c0002430:	83 c4 1c             	add    esp,0x1c
c0002433:	89 d0                	mov    eax,edx
c0002435:	5b                   	pop    ebx
c0002436:	5e                   	pop    esi
c0002437:	5f                   	pop    edi
c0002438:	5d                   	pop    ebp
c0002439:	c3                   	ret    
c000243a:	31 d2                	xor    edx,edx
c000243c:	89 d0                	mov    eax,edx
c000243e:	c3                   	ret    

c000243f <move_window>:
c000243f:	56                   	push   esi
c0002440:	53                   	push   ebx
c0002441:	89 c3                	mov    ebx,eax
c0002443:	83 ec 14             	sub    esp,0x14
c0002446:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002449:	75 07                	jne    c0002452 <move_window+0x13>
c000244b:	31 f6                	xor    esi,esi
c000244d:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002450:	74 59                	je     c00024ab <move_window+0x6c>
c0002452:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002456:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000245a:	89 d8                	mov    eax,ebx
c000245c:	e8 4a ff ff ff       	call   c00023ab <sync_window>
c0002461:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002465:	89 c6                	mov    esi,eax
c0002467:	85 c0                	test   eax,eax
c0002469:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000246d:	75 3c                	jne    c00024ab <move_window+0x6c>
c000246f:	83 ec 0c             	sub    esp,0xc
c0002472:	8d 43 54             	lea    eax,[ebx+0x54]
c0002475:	6a 01                	push   0x1
c0002477:	51                   	push   ecx
c0002478:	52                   	push   edx
c0002479:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000247d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002481:	50                   	push   eax
c0002482:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002486:	50                   	push   eax
c0002487:	e8 8a f7 ff ff       	call   c0001c16 <disk_read>
c000248c:	83 c4 20             	add    esp,0x20
c000248f:	85 c0                	test   eax,eax
c0002491:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002495:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002499:	74 0a                	je     c00024a5 <move_window+0x66>
c000249b:	83 ca ff             	or     edx,0xffffffff
c000249e:	be 01 00 00 00       	mov    esi,0x1
c00024a3:	89 d1                	mov    ecx,edx
c00024a5:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00024a8:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00024ab:	89 f0                	mov    eax,esi
c00024ad:	83 c4 14             	add    esp,0x14
c00024b0:	5b                   	pop    ebx
c00024b1:	5e                   	pop    esi
c00024b2:	c3                   	ret    

c00024b3 <check_fs>:
c00024b3:	53                   	push   ebx
c00024b4:	89 c3                	mov    ebx,eax
c00024b6:	83 ec 08             	sub    esp,0x8
c00024b9:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00024bd:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024c4:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024cb:	e8 6f ff ff ff       	call   c000243f <move_window>
c00024d0:	ba 04 00 00 00       	mov    edx,0x4
c00024d5:	85 c0                	test   eax,eax
c00024d7:	0f 85 89 00 00 00    	jne    c0002566 <check_fs+0xb3>
c00024dd:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024e3:	e8 79 f7 ff ff       	call   c0001c61 <ld_word>
c00024e8:	ba 03 00 00 00       	mov    edx,0x3
c00024ed:	66 3d 55 aa          	cmp    ax,0xaa55
c00024f1:	75 73                	jne    c0002566 <check_fs+0xb3>
c00024f3:	ba e0 94 02 c0       	mov    edx,0xc00294e0
c00024f8:	8d 43 54             	lea    eax,[ebx+0x54]
c00024fb:	b9 0b 00 00 00       	mov    ecx,0xb
c0002500:	e8 fb f7 ff ff       	call   c0001d00 <mem_cmp>
c0002505:	ba 01 00 00 00       	mov    edx,0x1
c000250a:	85 c0                	test   eax,eax
c000250c:	74 58                	je     c0002566 <check_fs+0xb3>
c000250e:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002511:	8d 50 18             	lea    edx,[eax+0x18]
c0002514:	80 fa 01             	cmp    dl,0x1
c0002517:	76 09                	jbe    c0002522 <check_fs+0x6f>
c0002519:	ba 02 00 00 00       	mov    edx,0x2
c000251e:	3c eb                	cmp    al,0xeb
c0002520:	75 44                	jne    c0002566 <check_fs+0xb3>
c0002522:	ba 58 ca 02 c0       	mov    edx,0xc002ca58
c0002527:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000252d:	b9 03 00 00 00       	mov    ecx,0x3
c0002532:	e8 c9 f7 ff ff       	call   c0001d00 <mem_cmp>
c0002537:	31 d2                	xor    edx,edx
c0002539:	85 c0                	test   eax,eax
c000253b:	74 29                	je     c0002566 <check_fs+0xb3>
c000253d:	ba ec 94 02 c0       	mov    edx,0xc00294ec
c0002542:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002548:	b9 05 00 00 00       	mov    ecx,0x5
c000254d:	e8 ae f7 ff ff       	call   c0001d00 <mem_cmp>
c0002552:	31 d2                	xor    edx,edx
c0002554:	85 c0                	test   eax,eax
c0002556:	74 0e                	je     c0002566 <check_fs+0xb3>
c0002558:	31 d2                	xor    edx,edx
c000255a:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002561:	0f 95 c2             	setne  dl
c0002564:	01 d2                	add    edx,edx
c0002566:	89 d0                	mov    eax,edx
c0002568:	83 c4 08             	add    esp,0x8
c000256b:	5b                   	pop    ebx
c000256c:	c3                   	ret    

c000256d <find_volume>:
c000256d:	55                   	push   ebp
c000256e:	31 c9                	xor    ecx,ecx
c0002570:	57                   	push   edi
c0002571:	56                   	push   esi
c0002572:	89 d6                	mov    esi,edx
c0002574:	53                   	push   ebx
c0002575:	31 d2                	xor    edx,edx
c0002577:	83 ec 3c             	sub    esp,0x3c
c000257a:	89 c3                	mov    ebx,eax
c000257c:	e8 32 ff ff ff       	call   c00024b3 <check_fs>
c0002581:	83 f8 02             	cmp    eax,0x2
c0002584:	74 0e                	je     c0002594 <find_volume+0x27>
c0002586:	0f 87 5d 01 00 00    	ja     c00026e9 <find_volume+0x17c>
c000258c:	85 f6                	test   esi,esi
c000258e:	0f 84 55 01 00 00    	je     c00026e9 <find_volume+0x17c>
c0002594:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000259b:	0f 85 dd 00 00 00    	jne    c000267e <find_volume+0x111>
c00025a1:	31 c9                	xor    ecx,ecx
c00025a3:	ba 01 00 00 00       	mov    edx,0x1
c00025a8:	89 d8                	mov    eax,ebx
c00025aa:	e8 90 fe ff ff       	call   c000243f <move_window>
c00025af:	85 c0                	test   eax,eax
c00025b1:	74 0a                	je     c00025bd <find_volume+0x50>
c00025b3:	b8 04 00 00 00       	mov    eax,0x4
c00025b8:	e9 2c 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025bd:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025c0:	89 e8                	mov    eax,ebp
c00025c2:	e8 f6 fc ff ff       	call   c00022bd <test_gpt_header>
c00025c7:	85 c0                	test   eax,eax
c00025c9:	75 0a                	jne    c00025d5 <find_volume+0x68>
c00025cb:	b8 03 00 00 00       	mov    eax,0x3
c00025d0:	e9 14 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025d5:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025db:	e8 8e f6 ff ff       	call   c0001c6e <ld_dword>
c00025e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025e4:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025ea:	e8 97 f6 ff ff       	call   c0001c86 <ld_qword>
c00025ef:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025fb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025ff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002607:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000260b:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000260f:	74 ba                	je     c00025cb <find_volume+0x5e>
c0002611:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002615:	31 c9                	xor    ecx,ecx
c0002617:	c1 e7 07             	shl    edi,0x7
c000261a:	89 d8                	mov    eax,ebx
c000261c:	89 fa                	mov    edx,edi
c000261e:	c1 ea 09             	shr    edx,0x9
c0002621:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002625:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002629:	e8 11 fe ff ff       	call   c000243f <move_window>
c000262e:	85 c0                	test   eax,eax
c0002630:	75 81                	jne    c00025b3 <find_volume+0x46>
c0002632:	81 e7 80 01 00 00    	and    edi,0x180
c0002638:	b9 10 00 00 00       	mov    ecx,0x10
c000263d:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002641:	ba d0 94 02 c0       	mov    edx,0xc00294d0
c0002646:	e8 b5 f6 ff ff       	call   c0001d00 <mem_cmp>
c000264b:	85 c0                	test   eax,eax
c000264d:	75 29                	jne    c0002678 <find_volume+0x10b>
c000264f:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002653:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002657:	e8 2a f6 ff ff       	call   c0001c86 <ld_qword>
c000265c:	89 d1                	mov    ecx,edx
c000265e:	89 c2                	mov    edx,eax
c0002660:	89 d8                	mov    eax,ebx
c0002662:	e8 4c fe ff ff       	call   c00024b3 <check_fs>
c0002667:	85 f6                	test   esi,esi
c0002669:	75 07                	jne    c0002672 <find_volume+0x105>
c000266b:	83 f8 01             	cmp    eax,0x1
c000266e:	77 08                	ja     c0002678 <find_volume+0x10b>
c0002670:	eb 77                	jmp    c00026e9 <find_volume+0x17c>
c0002672:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002676:	74 71                	je     c00026e9 <find_volume+0x17c>
c0002678:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000267c:	eb 89                	jmp    c0002607 <find_volume+0x9a>
c000267e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002682:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002688:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000268e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002692:	89 cd                	mov    ebp,ecx
c0002694:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002698:	89 f8                	mov    eax,edi
c000269a:	83 c7 10             	add    edi,0x10
c000269d:	e8 cc f5 ff ff       	call   c0001c6e <ld_dword>
c00026a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00026a6:	89 01                	mov    DWORD PTR [ecx],eax
c00026a8:	83 c1 04             	add    ecx,0x4
c00026ab:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00026af:	75 e3                	jne    c0002694 <find_volume+0x127>
c00026b1:	31 ff                	xor    edi,edi
c00026b3:	85 f6                	test   esi,esi
c00026b5:	74 03                	je     c00026ba <find_volume+0x14d>
c00026b7:	8d 7e ff             	lea    edi,[esi-0x1]
c00026ba:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00026be:	85 d2                	test   edx,edx
c00026c0:	74 14                	je     c00026d6 <find_volume+0x169>
c00026c2:	31 c9                	xor    ecx,ecx
c00026c4:	89 d8                	mov    eax,ebx
c00026c6:	e8 e8 fd ff ff       	call   c00024b3 <check_fs>
c00026cb:	83 f8 01             	cmp    eax,0x1
c00026ce:	76 19                	jbe    c00026e9 <find_volume+0x17c>
c00026d0:	85 f6                	test   esi,esi
c00026d2:	74 0f                	je     c00026e3 <find_volume+0x176>
c00026d4:	eb 13                	jmp    c00026e9 <find_volume+0x17c>
c00026d6:	85 f6                	test   esi,esi
c00026d8:	0f 85 ed fe ff ff    	jne    c00025cb <find_volume+0x5e>
c00026de:	b8 03 00 00 00       	mov    eax,0x3
c00026e3:	47                   	inc    edi
c00026e4:	83 ff 03             	cmp    edi,0x3
c00026e7:	76 d1                	jbe    c00026ba <find_volume+0x14d>
c00026e9:	83 c4 3c             	add    esp,0x3c
c00026ec:	5b                   	pop    ebx
c00026ed:	5e                   	pop    esi
c00026ee:	5f                   	pop    edi
c00026ef:	5d                   	pop    ebp
c00026f0:	c3                   	ret    

c00026f1 <mount_volume>:
c00026f1:	55                   	push   ebp
c00026f2:	57                   	push   edi
c00026f3:	89 cf                	mov    edi,ecx
c00026f5:	56                   	push   esi
c00026f6:	53                   	push   ebx
c00026f7:	bb 0b 00 00 00       	mov    ebx,0xb
c00026fc:	83 ec 3c             	sub    esp,0x3c
c00026ff:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002705:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002709:	e8 35 fb ff ff       	call   c0002243 <get_ldnumber>
c000270e:	85 c0                	test   eax,eax
c0002710:	0f 88 3a 05 00 00    	js     c0002c50 <mount_volume+0x55f>
c0002716:	8b 2c 85 e0 e5 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1a20]
c000271d:	89 c6                	mov    esi,eax
c000271f:	bb 0c 00 00 00       	mov    ebx,0xc
c0002724:	85 ed                	test   ebp,ebp
c0002726:	0f 84 24 05 00 00    	je     c0002c50 <mount_volume+0x55f>
c000272c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002730:	83 e7 fe             	and    edi,0xfffffffe
c0002733:	89 2a                	mov    DWORD PTR [edx],ebp
c0002735:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002739:	74 32                	je     c000276d <mount_volume+0x7c>
c000273b:	83 ec 0c             	sub    esp,0xc
c000273e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002742:	50                   	push   eax
c0002743:	e8 c8 f4 ff ff       	call   c0001c10 <disk_status>
c0002748:	83 c4 10             	add    esp,0x10
c000274b:	a8 01                	test   al,0x1
c000274d:	75 1e                	jne    c000276d <mount_volume+0x7c>
c000274f:	31 db                	xor    ebx,ebx
c0002751:	89 f9                	mov    ecx,edi
c0002753:	84 c9                	test   cl,cl
c0002755:	0f 84 f5 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c000275b:	a8 04                	test   al,0x4
c000275d:	0f 84 ed 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c0002763:	bb 0a 00 00 00       	mov    ebx,0xa
c0002768:	e9 e3 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c000276d:	83 ec 0c             	sub    esp,0xc
c0002770:	89 f0                	mov    eax,esi
c0002772:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002776:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002779:	0f b6 f0             	movzx  esi,al
c000277c:	bb 03 00 00 00       	mov    ebx,0x3
c0002781:	56                   	push   esi
c0002782:	e8 8c f4 ff ff       	call   c0001c13 <disk_initialize>
c0002787:	83 c4 10             	add    esp,0x10
c000278a:	a8 01                	test   al,0x1
c000278c:	0f 85 be 04 00 00    	jne    c0002c50 <mount_volume+0x55f>
c0002792:	89 f9                	mov    ecx,edi
c0002794:	84 c9                	test   cl,cl
c0002796:	74 04                	je     c000279c <mount_volume+0xab>
c0002798:	a8 04                	test   al,0x4
c000279a:	75 c7                	jne    c0002763 <mount_volume+0x72>
c000279c:	31 d2                	xor    edx,edx
c000279e:	89 e8                	mov    eax,ebp
c00027a0:	e8 c8 fd ff ff       	call   c000256d <find_volume>
c00027a5:	83 f8 04             	cmp    eax,0x4
c00027a8:	75 0a                	jne    c00027b4 <mount_volume+0xc3>
c00027aa:	bb 01 00 00 00       	mov    ebx,0x1
c00027af:	e9 9c 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027b4:	83 f8 01             	cmp    eax,0x1
c00027b7:	76 0a                	jbe    c00027c3 <mount_volume+0xd2>
c00027b9:	bb 0d 00 00 00       	mov    ebx,0xd
c00027be:	e9 8d 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027c3:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027c6:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027d1:	75 17                	jne    c00027ea <mount_volume+0xf9>
c00027d3:	b8 0b 00 00 00       	mov    eax,0xb
c00027d8:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027dd:	75 da                	jne    c00027b9 <mount_volume+0xc8>
c00027df:	40                   	inc    eax
c00027e0:	83 f8 40             	cmp    eax,0x40
c00027e3:	75 f3                	jne    c00027d8 <mount_volume+0xe7>
c00027e5:	e9 5a 02 00 00       	jmp    c0002a44 <mount_volume+0x353>
c00027ea:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027ed:	e8 6f f4 ff ff       	call   c0001c61 <ld_word>
c00027f2:	66 3d 00 02          	cmp    ax,0x200
c00027f6:	75 c1                	jne    c00027b9 <mount_volume+0xc8>
c00027f8:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027fb:	e8 61 f4 ff ff       	call   c0001c61 <ld_word>
c0002800:	0f b7 c0             	movzx  eax,ax
c0002803:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002807:	85 c0                	test   eax,eax
c0002809:	75 0c                	jne    c0002817 <mount_volume+0x126>
c000280b:	8d 45 78             	lea    eax,[ebp+0x78]
c000280e:	e8 5b f4 ff ff       	call   c0001c6e <ld_dword>
c0002813:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000281b:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000281e:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002821:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002825:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002828:	48                   	dec    eax
c0002829:	3c 01                	cmp    al,0x1
c000282b:	77 8c                	ja     c00027b9 <mount_volume+0xc8>
c000282d:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002831:	89 c3                	mov    ebx,eax
c0002833:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002837:	66 85 c0             	test   ax,ax
c000283a:	0f 84 79 ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002840:	8d 40 ff             	lea    eax,[eax-0x1]
c0002843:	85 d8                	test   eax,ebx
c0002845:	0f 85 6e ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000284b:	8d 45 65             	lea    eax,[ebp+0x65]
c000284e:	e8 0e f4 ff ff       	call   c0001c61 <ld_word>
c0002853:	89 c7                	mov    edi,eax
c0002855:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002859:	a8 0f                	test   al,0xf
c000285b:	0f 85 58 ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002861:	8d 45 67             	lea    eax,[ebp+0x67]
c0002864:	e8 f8 f3 ff ff       	call   c0001c61 <ld_word>
c0002869:	0f b7 f0             	movzx  esi,ax
c000286c:	85 f6                	test   esi,esi
c000286e:	75 0a                	jne    c000287a <mount_volume+0x189>
c0002870:	8d 45 74             	lea    eax,[ebp+0x74]
c0002873:	e8 f6 f3 ff ff       	call   c0001c6e <ld_dword>
c0002878:	89 c6                	mov    esi,eax
c000287a:	8d 45 62             	lea    eax,[ebp+0x62]
c000287d:	e8 df f3 ff ff       	call   c0001c61 <ld_word>
c0002882:	66 85 c0             	test   ax,ax
c0002885:	0f 84 2e ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c000288b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002890:	0f b7 c8             	movzx  ecx,ax
c0002893:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002898:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000289c:	89 fa                	mov    edx,edi
c000289e:	66 c1 ea 04          	shr    dx,0x4
c00028a2:	0f b7 d2             	movzx  edx,dx
c00028a5:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00028a9:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00028ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00028b0:	39 c6                	cmp    esi,eax
c00028b2:	0f 82 01 ff ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028b8:	29 c6                	sub    esi,eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 f0                	mov    eax,esi
c00028be:	f7 f3                	div    ebx
c00028c0:	39 de                	cmp    esi,ebx
c00028c2:	0f 82 f1 fe ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028c8:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028cd:	0f 87 e6 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c00028d3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028d8:	0f 86 63 03 00 00    	jbe    c0002c41 <mount_volume+0x550>
c00028de:	bb 03 00 00 00       	mov    ebx,0x3
c00028e3:	8d 70 02             	lea    esi,[eax+0x2]
c00028e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028ee:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028f1:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028f4:	31 d2                	xor    edx,edx
c00028f6:	89 c8                	mov    eax,ecx
c00028f8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028fb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028ff:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002903:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002907:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000290b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000290e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002911:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002915:	31 d2                	xor    edx,edx
c0002917:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000291b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000291f:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002922:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002925:	83 fb 03             	cmp    ebx,0x3
c0002928:	75 2b                	jne    c0002955 <mount_volume+0x264>
c000292a:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000292d:	e8 2f f3 ff ff       	call   c0001c61 <ld_word>
c0002932:	66 09 c7             	or     di,ax
c0002935:	0f 85 7e fe ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000293b:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002941:	c1 e6 02             	shl    esi,0x2
c0002944:	e8 25 f3 ff ff       	call   c0001c6e <ld_dword>
c0002949:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002950:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002953:	eb 30                	jmp    c0002985 <mount_volume+0x294>
c0002955:	66 85 ff             	test   di,di
c0002958:	0f 84 5b fe ff ff    	je     c00027b9 <mount_volume+0xc8>
c000295e:	31 d2                	xor    edx,edx
c0002960:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002964:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002968:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000296c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000296f:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002972:	83 fb 02             	cmp    ebx,0x2
c0002975:	75 04                	jne    c000297b <mount_volume+0x28a>
c0002977:	01 f6                	add    esi,esi
c0002979:	eb 0a                	jmp    c0002985 <mount_volume+0x294>
c000297b:	8d 04 76             	lea    eax,[esi+esi*2]
c000297e:	83 e6 01             	and    esi,0x1
c0002981:	d1 e8                	shr    eax,1
c0002983:	01 c6                	add    esi,eax
c0002985:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000298b:	c1 ee 09             	shr    esi,0x9
c000298e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002992:	0f 87 21 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002998:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000299f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029a6:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00029aa:	83 fb 03             	cmp    ebx,0x3
c00029ad:	75 7a                	jne    c0002a29 <mount_volume+0x338>
c00029af:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029b5:	e8 a7 f2 ff ff       	call   c0001c61 <ld_word>
c00029ba:	66 48                	dec    ax
c00029bc:	75 6b                	jne    c0002a29 <mount_volume+0x338>
c00029be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029c6:	83 c2 01             	add    edx,0x1
c00029c9:	89 e8                	mov    eax,ebp
c00029cb:	83 d1 00             	adc    ecx,0x0
c00029ce:	e8 6c fa ff ff       	call   c000243f <move_window>
c00029d3:	85 c0                	test   eax,eax
c00029d5:	75 52                	jne    c0002a29 <mount_volume+0x338>
c00029d7:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029db:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029e1:	e8 7b f2 ff ff       	call   c0001c61 <ld_word>
c00029e6:	66 3d 55 aa          	cmp    ax,0xaa55
c00029ea:	75 3d                	jne    c0002a29 <mount_volume+0x338>
c00029ec:	8d 45 54             	lea    eax,[ebp+0x54]
c00029ef:	e8 7a f2 ff ff       	call   c0001c6e <ld_dword>
c00029f4:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029f9:	75 2e                	jne    c0002a29 <mount_volume+0x338>
c00029fb:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002a01:	e8 68 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a06:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a0b:	75 1c                	jne    c0002a29 <mount_volume+0x338>
c0002a0d:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002a13:	e8 56 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a18:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a1b:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a21:	e8 48 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a26:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a29:	66 a1 c0 e5 02 c0    	mov    ax,ds:0xc002e5c0
c0002a2f:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a32:	40                   	inc    eax
c0002a33:	31 db                	xor    ebx,ebx
c0002a35:	66 a3 c0 e5 02 c0    	mov    ds:0xc002e5c0,ax
c0002a3b:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a3f:	e9 0c 02 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c0002a44:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a4a:	e8 12 f2 ff ff       	call   c0001c61 <ld_word>
c0002a4f:	66 3d 00 01          	cmp    ax,0x100
c0002a53:	0f 85 60 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a59:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a60:	0f 85 53 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a66:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a6c:	e8 15 f2 ff ff       	call   c0001c86 <ld_qword>
c0002a71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a79:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a7f:	e8 ea f1 ff ff       	call   c0001c6e <ld_dword>
c0002a84:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a87:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a8d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a90:	fe c8                	dec    al
c0002a92:	0f 85 21 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a98:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a9f:	bb 01 00 00 00       	mov    ebx,0x1
c0002aa4:	d3 e3                	shl    ebx,cl
c0002aa6:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002aaa:	66 85 db             	test   bx,bx
c0002aad:	0f 84 06 fd ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002ab3:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002ab9:	e8 b0 f1 ff ff       	call   c0001c6e <ld_dword>
c0002abe:	89 c6                	mov    esi,eax
c0002ac0:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002ac5:	0f 87 ee fc ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002acb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002acf:	8d 40 02             	lea    eax,[eax+0x2]
c0002ad2:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002ad5:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002ad8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002adc:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002adf:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002ae5:	e8 84 f1 ff ff       	call   c0001c6e <ld_dword>
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002af0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002af4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002af8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002afc:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002aff:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002b02:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002b08:	e8 61 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b0d:	31 d2                	xor    edx,edx
c0002b0f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b13:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b17:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b1b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b1e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b21:	0f b7 c3             	movzx  eax,bx
c0002b24:	31 d2                	xor    edx,edx
c0002b26:	0f af f0             	imul   esi,eax
c0002b29:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b2d:	89 f0                	mov    eax,esi
c0002b2f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b33:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b37:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b3b:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b3f:	39 c1                	cmp    ecx,eax
c0002b41:	89 df                	mov    edi,ebx
c0002b43:	19 d7                	sbb    edi,edx
c0002b45:	0f 82 6e fc ff ff    	jb     c00027b9 <mount_volume+0xc8>
c0002b4b:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b51:	31 db                	xor    ebx,ebx
c0002b53:	e8 16 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b58:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b5f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b62:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b6a:	85 db                	test   ebx,ebx
c0002b6c:	75 39                	jne    c0002ba7 <mount_volume+0x4b6>
c0002b6e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b72:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b76:	0f 86 3d fc ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002b7c:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b7f:	31 ff                	xor    edi,edi
c0002b81:	89 e8                	mov    eax,ebp
c0002b83:	e8 72 f3 ff ff       	call   c0001efa <clst2sect>
c0002b88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b8c:	01 c6                	add    esi,eax
c0002b8e:	89 e8                	mov    eax,ebp
c0002b90:	11 d7                	adc    edi,edx
c0002b92:	89 f2                	mov    edx,esi
c0002b94:	89 f9                	mov    ecx,edi
c0002b96:	e8 a4 f8 ff ff       	call   c000243f <move_window>
c0002b9b:	85 c0                	test   eax,eax
c0002b9d:	0f 85 07 fc ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002ba3:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002ba7:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002bac:	74 0b                	je     c0002bb9 <mount_volume+0x4c8>
c0002bae:	83 c3 20             	add    ebx,0x20
c0002bb1:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002bb7:	eb b1                	jmp    c0002b6a <mount_volume+0x479>
c0002bb9:	8d 75 54             	lea    esi,[ebp+0x54]
c0002bbc:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002bc0:	e8 a9 f0 ff ff       	call   c0001c6e <ld_dword>
c0002bc5:	89 c3                	mov    ebx,eax
c0002bc7:	83 f8 01             	cmp    eax,0x1
c0002bca:	0f 86 e9 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd0:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bd3:	0f 86 e0 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd9:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002bdc:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002be0:	0f af c2             	imul   eax,edx
c0002be3:	31 d2                	xor    edx,edx
c0002be5:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002be8:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002beb:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bee:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bf1:	31 c9                	xor    ecx,ecx
c0002bf3:	89 da                	mov    edx,ebx
c0002bf5:	89 e8                	mov    eax,ebp
c0002bf7:	c1 ea 07             	shr    edx,0x7
c0002bfa:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bfd:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002c00:	e8 3a f8 ff ff       	call   c000243f <move_window>
c0002c05:	85 c0                	test   eax,eax
c0002c07:	0f 85 9d fb ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002c0d:	89 d8                	mov    eax,ebx
c0002c0f:	83 e0 7f             	and    eax,0x7f
c0002c12:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c15:	e8 54 f0 ff ff       	call   c0001c6e <ld_dword>
c0002c1a:	83 f8 ff             	cmp    eax,0xffffffff
c0002c1d:	74 0a                	je     c0002c29 <mount_volume+0x538>
c0002c1f:	43                   	inc    ebx
c0002c20:	39 d8                	cmp    eax,ebx
c0002c22:	74 cd                	je     c0002bf1 <mount_volume+0x500>
c0002c24:	e9 90 fb ff ff       	jmp    c00027b9 <mount_volume+0xc8>
c0002c29:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c30:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c37:	bb 04 00 00 00       	mov    ebx,0x4
c0002c3c:	e9 e8 fd ff ff       	jmp    c0002a29 <mount_volume+0x338>
c0002c41:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c46:	19 db                	sbb    ebx,ebx
c0002c48:	83 c3 02             	add    ebx,0x2
c0002c4b:	e9 93 fc ff ff       	jmp    c00028e3 <mount_volume+0x1f2>
c0002c50:	83 c4 3c             	add    esp,0x3c
c0002c53:	89 d8                	mov    eax,ebx
c0002c55:	5b                   	pop    ebx
c0002c56:	5e                   	pop    esi
c0002c57:	5f                   	pop    edi
c0002c58:	5d                   	pop    ebp
c0002c59:	c3                   	ret    

c0002c5a <find_bitmap>:
c0002c5a:	55                   	push   ebp
c0002c5b:	57                   	push   edi
c0002c5c:	89 c7                	mov    edi,eax
c0002c5e:	56                   	push   esi
c0002c5f:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c62:	53                   	push   ebx
c0002c63:	83 ec 1c             	sub    esp,0x1c
c0002c66:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c69:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c6d:	83 e8 02             	sub    eax,0x2
c0002c70:	39 f0                	cmp    eax,esi
c0002c72:	77 02                	ja     c0002c76 <find_bitmap+0x1c>
c0002c74:	31 f6                	xor    esi,esi
c0002c76:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c7a:	89 f3                	mov    ebx,esi
c0002c7c:	31 ed                	xor    ebp,ebp
c0002c7e:	31 c9                	xor    ecx,ecx
c0002c80:	89 da                	mov    edx,ebx
c0002c82:	89 f8                	mov    eax,edi
c0002c84:	c1 ea 0c             	shr    edx,0xc
c0002c87:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c8a:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c8d:	e8 ad f7 ff ff       	call   c000243f <move_window>
c0002c92:	85 c0                	test   eax,eax
c0002c94:	75 68                	jne    c0002cfe <find_bitmap+0xa4>
c0002c96:	89 da                	mov    edx,ebx
c0002c98:	89 d9                	mov    ecx,ebx
c0002c9a:	c1 ea 03             	shr    edx,0x3
c0002c9d:	83 e1 07             	and    ecx,0x7
c0002ca0:	b8 01 00 00 00       	mov    eax,0x1
c0002ca5:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002cab:	d3 e0                	shl    eax,cl
c0002cad:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002cb0:	83 e9 02             	sub    ecx,0x2
c0002cb3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cb7:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002cbb:	43                   	inc    ebx
c0002cbc:	21 c1                	and    ecx,eax
c0002cbe:	d1 e0                	shl    eax,1
c0002cc0:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002cc4:	77 09                	ja     c0002ccf <find_bitmap+0x75>
c0002cc6:	31 db                	xor    ebx,ebx
c0002cc8:	ba 00 02 00 00       	mov    edx,0x200
c0002ccd:	31 c0                	xor    eax,eax
c0002ccf:	84 c9                	test   cl,cl
c0002cd1:	75 10                	jne    c0002ce3 <find_bitmap+0x89>
c0002cd3:	45                   	inc    ebp
c0002cd4:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002cd8:	75 0f                	jne    c0002ce9 <find_bitmap+0x8f>
c0002cda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002cde:	83 c0 02             	add    eax,0x2
c0002ce1:	eb 22                	jmp    c0002d05 <find_bitmap+0xab>
c0002ce3:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ce7:	31 ed                	xor    ebp,ebp
c0002ce9:	39 de                	cmp    esi,ebx
c0002ceb:	74 16                	je     c0002d03 <find_bitmap+0xa9>
c0002ced:	84 c0                	test   al,al
c0002cef:	75 c6                	jne    c0002cb7 <find_bitmap+0x5d>
c0002cf1:	42                   	inc    edx
c0002cf2:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cf8:	77 84                	ja     c0002c7e <find_bitmap+0x24>
c0002cfa:	b0 01                	mov    al,0x1
c0002cfc:	eb b9                	jmp    c0002cb7 <find_bitmap+0x5d>
c0002cfe:	83 c8 ff             	or     eax,0xffffffff
c0002d01:	eb 02                	jmp    c0002d05 <find_bitmap+0xab>
c0002d03:	31 c0                	xor    eax,eax
c0002d05:	83 c4 1c             	add    esp,0x1c
c0002d08:	5b                   	pop    ebx
c0002d09:	5e                   	pop    esi
c0002d0a:	5f                   	pop    edi
c0002d0b:	5d                   	pop    ebp
c0002d0c:	c3                   	ret    

c0002d0d <change_bitmap>:
c0002d0d:	55                   	push   ebp
c0002d0e:	89 cd                	mov    ebp,ecx
c0002d10:	57                   	push   edi
c0002d11:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002d14:	56                   	push   esi
c0002d15:	89 c7                	mov    edi,eax
c0002d17:	53                   	push   ebx
c0002d18:	89 c8                	mov    eax,ecx
c0002d1a:	83 ec 1c             	sub    esp,0x1c
c0002d1d:	31 d2                	xor    edx,edx
c0002d1f:	89 ce                	mov    esi,ecx
c0002d21:	c1 e8 0c             	shr    eax,0xc
c0002d24:	bb 01 00 00 00       	mov    ebx,0x1
c0002d29:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d2c:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d2f:	c1 ee 03             	shr    esi,0x3
c0002d32:	83 e1 07             	and    ecx,0x7
c0002d35:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d3b:	d3 e3                	shl    ebx,cl
c0002d3d:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d41:	89 c1                	mov    ecx,eax
c0002d43:	89 d3                	mov    ebx,edx
c0002d45:	83 c1 01             	add    ecx,0x1
c0002d48:	83 d3 00             	adc    ebx,0x0
c0002d4b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d4f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d53:	89 d1                	mov    ecx,edx
c0002d55:	89 c2                	mov    edx,eax
c0002d57:	89 f8                	mov    eax,edi
c0002d59:	e8 e1 f6 ff ff       	call   c000243f <move_window>
c0002d5e:	89 c1                	mov    ecx,eax
c0002d60:	85 c0                	test   eax,eax
c0002d62:	75 48                	jne    c0002dac <change_bitmap+0x9f>
c0002d64:	31 d2                	xor    edx,edx
c0002d66:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d6a:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d6e:	0f 95 c2             	setne  dl
c0002d71:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d75:	74 3c                	je     c0002db3 <change_bitmap+0xa6>
c0002d77:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d7b:	4d                   	dec    ebp
c0002d7c:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d80:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d84:	74 32                	je     c0002db8 <change_bitmap+0xab>
c0002d86:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d8a:	75 d8                	jne    c0002d64 <change_bitmap+0x57>
c0002d8c:	8d 46 01             	lea    eax,[esi+0x1]
c0002d8f:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d94:	89 c3                	mov    ebx,eax
c0002d96:	31 f6                	xor    esi,esi
c0002d98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d9c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002da0:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002da6:	74 99                	je     c0002d41 <change_bitmap+0x34>
c0002da8:	89 de                	mov    esi,ebx
c0002daa:	eb b8                	jmp    c0002d64 <change_bitmap+0x57>
c0002dac:	b9 01 00 00 00       	mov    ecx,0x1
c0002db1:	eb 05                	jmp    c0002db8 <change_bitmap+0xab>
c0002db3:	b9 02 00 00 00       	mov    ecx,0x2
c0002db8:	83 c4 1c             	add    esp,0x1c
c0002dbb:	89 c8                	mov    eax,ecx
c0002dbd:	5b                   	pop    ebx
c0002dbe:	5e                   	pop    esi
c0002dbf:	5f                   	pop    edi
c0002dc0:	5d                   	pop    ebp
c0002dc1:	c3                   	ret    

c0002dc2 <put_fat>:
c0002dc2:	83 fa 01             	cmp    edx,0x1
c0002dc5:	0f 86 7b 01 00 00    	jbe    c0002f46 <put_fat+0x184>
c0002dcb:	55                   	push   ebp
c0002dcc:	57                   	push   edi
c0002dcd:	89 cf                	mov    edi,ecx
c0002dcf:	56                   	push   esi
c0002dd0:	b9 02 00 00 00       	mov    ecx,0x2
c0002dd5:	53                   	push   ebx
c0002dd6:	89 c6                	mov    esi,eax
c0002dd8:	83 ec 1c             	sub    esp,0x1c
c0002ddb:	89 d3                	mov    ebx,edx
c0002ddd:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002de0:	0f 86 68 01 00 00    	jbe    c0002f4e <put_fat+0x18c>
c0002de6:	8a 00                	mov    al,BYTE PTR [eax]
c0002de8:	3c 02                	cmp    al,0x2
c0002dea:	0f 84 c7 00 00 00    	je     c0002eb7 <put_fat+0xf5>
c0002df0:	77 09                	ja     c0002dfb <put_fat+0x39>
c0002df2:	fe c8                	dec    al
c0002df4:	74 17                	je     c0002e0d <put_fat+0x4b>
c0002df6:	e9 53 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002dfb:	b9 02 00 00 00       	mov    ecx,0x2
c0002e00:	3c 04                	cmp    al,0x4
c0002e02:	0f 86 e1 00 00 00    	jbe    c0002ee9 <put_fat+0x127>
c0002e08:	e9 41 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002e0d:	89 d5                	mov    ebp,edx
c0002e0f:	31 c9                	xor    ecx,ecx
c0002e11:	d1 ed                	shr    ebp,1
c0002e13:	89 f0                	mov    eax,esi
c0002e15:	01 d5                	add    ebp,edx
c0002e17:	89 ea                	mov    edx,ebp
c0002e19:	c1 ea 09             	shr    edx,0x9
c0002e1c:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e1f:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e22:	e8 18 f6 ff ff       	call   c000243f <move_window>
c0002e27:	89 c1                	mov    ecx,eax
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	0f 85 1d 01 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e31:	8d 46 54             	lea    eax,[esi+0x54]
c0002e34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e38:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e3b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e45:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e49:	89 f8                	mov    eax,edi
c0002e4b:	83 e3 01             	and    ebx,0x1
c0002e4e:	74 0d                	je     c0002e5d <put_fat+0x9b>
c0002e50:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e53:	89 fa                	mov    edx,edi
c0002e55:	83 e0 0f             	and    eax,0xf
c0002e58:	c1 e2 04             	shl    edx,0x4
c0002e5b:	09 d0                	or     eax,edx
c0002e5d:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e64:	31 c9                	xor    ecx,ecx
c0002e66:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e6a:	c1 ea 09             	shr    edx,0x9
c0002e6d:	89 f0                	mov    eax,esi
c0002e6f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e72:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e75:	e8 c5 f5 ff ff       	call   c000243f <move_window>
c0002e7a:	89 c1                	mov    ecx,eax
c0002e7c:	85 c0                	test   eax,eax
c0002e7e:	0f 85 ca 00 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e84:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e88:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e8e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e92:	85 db                	test   ebx,ebx
c0002e94:	74 07                	je     c0002e9d <put_fat+0xdb>
c0002e96:	c1 ef 04             	shr    edi,0x4
c0002e99:	89 fa                	mov    edx,edi
c0002e9b:	eb 0e                	jmp    c0002eab <put_fat+0xe9>
c0002e9d:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002ea0:	c1 ef 08             	shr    edi,0x8
c0002ea3:	83 e2 f0             	and    edx,0xfffffff0
c0002ea6:	83 e7 0f             	and    edi,0xf
c0002ea9:	09 fa                	or     edx,edi
c0002eab:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002eae:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002eb2:	e9 97 00 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002eb7:	31 c9                	xor    ecx,ecx
c0002eb9:	c1 ea 08             	shr    edx,0x8
c0002ebc:	89 f0                	mov    eax,esi
c0002ebe:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ec1:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ec4:	e8 76 f5 ff ff       	call   c000243f <move_window>
c0002ec9:	89 c1                	mov    ecx,eax
c0002ecb:	85 c0                	test   eax,eax
c0002ecd:	75 7f                	jne    c0002f4e <put_fat+0x18c>
c0002ecf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ed3:	01 db                	add    ebx,ebx
c0002ed5:	0f b7 d7             	movzx  edx,di
c0002ed8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ede:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ee2:	e8 ec ed ff ff       	call   c0001cd3 <st_word>
c0002ee7:	eb 53                	jmp    c0002f3c <put_fat+0x17a>
c0002ee9:	31 c9                	xor    ecx,ecx
c0002eeb:	c1 ea 07             	shr    edx,0x7
c0002eee:	89 f0                	mov    eax,esi
c0002ef0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ef3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ef6:	e8 44 f5 ff ff       	call   c000243f <move_window>
c0002efb:	89 c1                	mov    ecx,eax
c0002efd:	85 c0                	test   eax,eax
c0002eff:	75 4d                	jne    c0002f4e <put_fat+0x18c>
c0002f01:	c1 e3 02             	shl    ebx,0x2
c0002f04:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002f0a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002f0d:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002f11:	74 1c                	je     c0002f2f <put_fat+0x16d>
c0002f13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f17:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f1d:	89 d8                	mov    eax,ebx
c0002f1f:	e8 4a ed ff ff       	call   c0001c6e <ld_dword>
c0002f24:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f28:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f2d:	09 c7                	or     edi,eax
c0002f2f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f33:	89 fa                	mov    edx,edi
c0002f35:	89 d8                	mov    eax,ebx
c0002f37:	e8 9b ed ff ff       	call   c0001cd7 <st_dword>
c0002f3c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f40:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f44:	eb 08                	jmp    c0002f4e <put_fat+0x18c>
c0002f46:	b9 02 00 00 00       	mov    ecx,0x2
c0002f4b:	89 c8                	mov    eax,ecx
c0002f4d:	c3                   	ret    
c0002f4e:	83 c4 1c             	add    esp,0x1c
c0002f51:	89 c8                	mov    eax,ecx
c0002f53:	5b                   	pop    ebx
c0002f54:	5e                   	pop    esi
c0002f55:	5f                   	pop    edi
c0002f56:	5d                   	pop    ebp
c0002f57:	c3                   	ret    

c0002f58 <fill_last_frag>:
c0002f58:	57                   	push   edi
c0002f59:	89 cf                	mov    edi,ecx
c0002f5b:	56                   	push   esi
c0002f5c:	89 d6                	mov    esi,edx
c0002f5e:	53                   	push   ebx
c0002f5f:	89 c3                	mov    ebx,eax
c0002f61:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f64:	85 c0                	test   eax,eax
c0002f66:	74 21                	je     c0002f89 <fill_last_frag+0x31>
c0002f68:	89 f9                	mov    ecx,edi
c0002f6a:	83 f8 01             	cmp    eax,0x1
c0002f6d:	76 05                	jbe    c0002f74 <fill_last_frag+0x1c>
c0002f6f:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f72:	29 c1                	sub    ecx,eax
c0002f74:	8d 56 01             	lea    edx,[esi+0x1]
c0002f77:	29 c2                	sub    edx,eax
c0002f79:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f7b:	e8 42 fe ff ff       	call   c0002dc2 <put_fat>
c0002f80:	85 c0                	test   eax,eax
c0002f82:	75 05                	jne    c0002f89 <fill_last_frag+0x31>
c0002f84:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f87:	eb d8                	jmp    c0002f61 <fill_last_frag+0x9>
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <fill_first_frag>:
c0002f8d:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f91:	75 2d                	jne    c0002fc0 <fill_first_frag+0x33>
c0002f93:	57                   	push   edi
c0002f94:	56                   	push   esi
c0002f95:	53                   	push   ebx
c0002f96:	89 c3                	mov    ebx,eax
c0002f98:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f9b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f9e:	01 d7                	add    edi,edx
c0002fa0:	39 fa                	cmp    edx,edi
c0002fa2:	74 14                	je     c0002fb8 <fill_first_frag+0x2b>
c0002fa4:	8d 72 01             	lea    esi,[edx+0x1]
c0002fa7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002fa9:	89 f1                	mov    ecx,esi
c0002fab:	e8 12 fe ff ff       	call   c0002dc2 <put_fat>
c0002fb0:	89 f2                	mov    edx,esi
c0002fb2:	85 c0                	test   eax,eax
c0002fb4:	74 ea                	je     c0002fa0 <fill_first_frag+0x13>
c0002fb6:	eb 0b                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fb8:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fbc:	31 c0                	xor    eax,eax
c0002fbe:	eb 03                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fc0:	31 c0                	xor    eax,eax
c0002fc2:	c3                   	ret    
c0002fc3:	5b                   	pop    ebx
c0002fc4:	5e                   	pop    esi
c0002fc5:	5f                   	pop    edi
c0002fc6:	c3                   	ret    

c0002fc7 <get_fat>:
c0002fc7:	83 fa 01             	cmp    edx,0x1
c0002fca:	0f 86 db 01 00 00    	jbe    c00031ab <get_fat+0x1e4>
c0002fd0:	55                   	push   ebp
c0002fd1:	b9 01 00 00 00       	mov    ecx,0x1
c0002fd6:	57                   	push   edi
c0002fd7:	56                   	push   esi
c0002fd8:	53                   	push   ebx
c0002fd9:	83 ec 1c             	sub    esp,0x1c
c0002fdc:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fde:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fe1:	0f 86 cc 01 00 00    	jbe    c00031b3 <get_fat+0x1ec>
c0002fe7:	89 c3                	mov    ebx,eax
c0002fe9:	89 d6                	mov    esi,edx
c0002feb:	8a 07                	mov    al,BYTE PTR [edi]
c0002fed:	3c 02                	cmp    al,0x2
c0002fef:	0f 84 99 00 00 00    	je     c000308e <get_fat+0xc7>
c0002ff5:	77 09                	ja     c0003000 <get_fat+0x39>
c0002ff7:	fe c8                	dec    al
c0002ff9:	74 1a                	je     c0003015 <get_fat+0x4e>
c0002ffb:	e9 b3 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003000:	3c 03                	cmp    al,0x3
c0003002:	0f 84 b5 00 00 00    	je     c00030bd <get_fat+0xf6>
c0003008:	3c 04                	cmp    al,0x4
c000300a:	0f 84 e3 00 00 00    	je     c00030f3 <get_fat+0x12c>
c0003010:	e9 9e 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003015:	89 d3                	mov    ebx,edx
c0003017:	31 c9                	xor    ecx,ecx
c0003019:	d1 eb                	shr    ebx,1
c000301b:	89 f8                	mov    eax,edi
c000301d:	01 d3                	add    ebx,edx
c000301f:	89 da                	mov    edx,ebx
c0003021:	c1 ea 09             	shr    edx,0x9
c0003024:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003027:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000302a:	e8 10 f4 ff ff       	call   c000243f <move_window>
c000302f:	85 c0                	test   eax,eax
c0003031:	74 08                	je     c000303b <get_fat+0x74>
c0003033:	83 c9 ff             	or     ecx,0xffffffff
c0003036:	e9 78 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000303b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000303e:	31 c9                	xor    ecx,ecx
c0003040:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003046:	89 ea                	mov    edx,ebp
c0003048:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c000304c:	c1 ea 09             	shr    edx,0x9
c000304f:	89 f8                	mov    eax,edi
c0003051:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003054:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003057:	e8 e3 f3 ff ff       	call   c000243f <move_window>
c000305c:	85 c0                	test   eax,eax
c000305e:	75 d3                	jne    c0003033 <get_fat+0x6c>
c0003060:	0f b6 c3             	movzx  eax,bl
c0003063:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003069:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c000306e:	c1 e3 08             	shl    ebx,0x8
c0003071:	09 c3                	or     ebx,eax
c0003073:	89 d9                	mov    ecx,ebx
c0003075:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000307b:	83 e6 01             	and    esi,0x1
c000307e:	0f 84 2f 01 00 00    	je     c00031b3 <get_fat+0x1ec>
c0003084:	89 d9                	mov    ecx,ebx
c0003086:	c1 e9 04             	shr    ecx,0x4
c0003089:	e9 25 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000308e:	31 c9                	xor    ecx,ecx
c0003090:	c1 ea 08             	shr    edx,0x8
c0003093:	89 f8                	mov    eax,edi
c0003095:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003098:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000309b:	e8 9f f3 ff ff       	call   c000243f <move_window>
c00030a0:	85 c0                	test   eax,eax
c00030a2:	75 8f                	jne    c0003033 <get_fat+0x6c>
c00030a4:	01 f6                	add    esi,esi
c00030a6:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00030ac:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030b0:	e8 ac eb ff ff       	call   c0001c61 <ld_word>
c00030b5:	0f b7 c8             	movzx  ecx,ax
c00030b8:	e9 f6 00 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c00030bd:	31 c9                	xor    ecx,ecx
c00030bf:	c1 ea 07             	shr    edx,0x7
c00030c2:	89 f8                	mov    eax,edi
c00030c4:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030c7:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030ca:	e8 70 f3 ff ff       	call   c000243f <move_window>
c00030cf:	85 c0                	test   eax,eax
c00030d1:	0f 85 5c ff ff ff    	jne    c0003033 <get_fat+0x6c>
c00030d7:	c1 e6 02             	shl    esi,0x2
c00030da:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030e0:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030e4:	e8 85 eb ff ff       	call   c0001c6e <ld_dword>
c00030e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030ee:	e9 b4 00 00 00       	jmp    c00031a7 <get_fat+0x1e0>
c00030f3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030f6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030f9:	89 d1                	mov    ecx,edx
c00030fb:	09 c1                	or     ecx,eax
c00030fd:	74 06                	je     c0003105 <get_fat+0x13e>
c00030ff:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0003103:	75 0f                	jne    c0003114 <get_fat+0x14d>
c0003105:	b9 01 00 00 00       	mov    ecx,0x1
c000310a:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c000310e:	0f 85 9f 00 00 00    	jne    c00031b3 <get_fat+0x1ec>
c0003114:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003118:	89 f5                	mov    ebp,esi
c000311a:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c000311f:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0003122:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003125:	80 f9 02             	cmp    cl,0x2
c0003128:	75 35                	jne    c000315f <get_fat+0x198>
c000312a:	83 c0 ff             	add    eax,0xffffffff
c000312d:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0003132:	83 d2 ff             	adc    edx,0xffffffff
c0003135:	31 db                	xor    ebx,ebx
c0003137:	0f ac d0 09          	shrd   eax,edx,0x9
c000313b:	53                   	push   ebx
c000313c:	c1 ea 09             	shr    edx,0x9
c000313f:	51                   	push   ecx
c0003140:	52                   	push   edx
c0003141:	50                   	push   eax
c0003142:	e8 e5 38 02 00       	call   c0026a2c <__udivdi3>
c0003147:	83 c4 10             	add    esp,0x10
c000314a:	b9 01 00 00 00       	mov    ecx,0x1
c000314f:	39 c5                	cmp    ebp,eax
c0003151:	77 60                	ja     c00031b3 <get_fat+0x1ec>
c0003153:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003158:	74 59                	je     c00031b3 <get_fat+0x1ec>
c000315a:	8d 4e 01             	lea    ecx,[esi+0x1]
c000315d:	eb 54                	jmp    c00031b3 <get_fat+0x1ec>
c000315f:	80 f9 03             	cmp    cl,0x3
c0003162:	75 05                	jne    c0003169 <get_fat+0x1a2>
c0003164:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003167:	77 f1                	ja     c000315a <get_fat+0x193>
c0003169:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000316e:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003172:	75 3f                	jne    c00031b3 <get_fat+0x1ec>
c0003174:	31 c9                	xor    ecx,ecx
c0003176:	89 f2                	mov    edx,esi
c0003178:	89 f8                	mov    eax,edi
c000317a:	c1 ea 07             	shr    edx,0x7
c000317d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003180:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003183:	e8 b7 f2 ff ff       	call   c000243f <move_window>
c0003188:	85 c0                	test   eax,eax
c000318a:	0f 85 a3 fe ff ff    	jne    c0003033 <get_fat+0x6c>
c0003190:	c1 e6 02             	shl    esi,0x2
c0003193:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003199:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319d:	e8 cc ea ff ff       	call   c0001c6e <ld_dword>
c00031a2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00031a7:	89 c1                	mov    ecx,eax
c00031a9:	eb 08                	jmp    c00031b3 <get_fat+0x1ec>
c00031ab:	b9 01 00 00 00       	mov    ecx,0x1
c00031b0:	89 c8                	mov    eax,ecx
c00031b2:	c3                   	ret    
c00031b3:	83 c4 1c             	add    esp,0x1c
c00031b6:	89 c8                	mov    eax,ecx
c00031b8:	5b                   	pop    ebx
c00031b9:	5e                   	pop    esi
c00031ba:	5f                   	pop    edi
c00031bb:	5d                   	pop    ebp
c00031bc:	c3                   	ret    

c00031bd <dir_sdi>:
c00031bd:	55                   	push   ebp
c00031be:	57                   	push   edi
c00031bf:	56                   	push   esi
c00031c0:	53                   	push   ebx
c00031c1:	89 c3                	mov    ebx,eax
c00031c3:	83 ec 1c             	sub    esp,0x1c
c00031c6:	8b 38                	mov    edi,DWORD PTR [eax]
c00031c8:	31 c0                	xor    eax,eax
c00031ca:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031cd:	0f 94 c0             	sete   al
c00031d0:	48                   	dec    eax
c00031d1:	25 00 00 20 f0       	and    eax,0xf0200000
c00031d6:	05 00 00 00 10       	add    eax,0x10000000
c00031db:	39 d0                	cmp    eax,edx
c00031dd:	77 0a                	ja     c00031e9 <dir_sdi+0x2c>
c00031df:	b8 02 00 00 00       	mov    eax,0x2
c00031e4:	e9 c4 00 00 00       	jmp    c00032ad <dir_sdi+0xf0>
c00031e9:	89 d6                	mov    esi,edx
c00031eb:	f6 c2 1f             	test   dl,0x1f
c00031ee:	75 ef                	jne    c00031df <dir_sdi+0x22>
c00031f0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031f3:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031f6:	85 c9                	test   ecx,ecx
c00031f8:	75 2d                	jne    c0003227 <dir_sdi+0x6a>
c00031fa:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031fd:	77 1b                	ja     c000321a <dir_sdi+0x5d>
c00031ff:	89 f2                	mov    edx,esi
c0003201:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003205:	c1 ea 05             	shr    edx,0x5
c0003208:	39 c2                	cmp    edx,eax
c000320a:	73 d3                	jae    c00031df <dir_sdi+0x22>
c000320c:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000320f:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0003212:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003215:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003218:	eb 4b                	jmp    c0003265 <dir_sdi+0xa8>
c000321a:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000321d:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003221:	85 c0                	test   eax,eax
c0003223:	74 da                	je     c00031ff <dir_sdi+0x42>
c0003225:	89 c1                	mov    ecx,eax
c0003227:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000322b:	c1 e5 09             	shl    ebp,0x9
c000322e:	89 ca                	mov    edx,ecx
c0003230:	39 ee                	cmp    esi,ebp
c0003232:	72 1c                	jb     c0003250 <dir_sdi+0x93>
c0003234:	89 d8                	mov    eax,ebx
c0003236:	e8 8c fd ff ff       	call   c0002fc7 <get_fat>
c000323b:	89 c1                	mov    ecx,eax
c000323d:	83 f8 ff             	cmp    eax,0xffffffff
c0003240:	74 66                	je     c00032a8 <dir_sdi+0xeb>
c0003242:	83 f8 01             	cmp    eax,0x1
c0003245:	76 98                	jbe    c00031df <dir_sdi+0x22>
c0003247:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000324a:	76 93                	jbe    c00031df <dir_sdi+0x22>
c000324c:	29 ee                	sub    esi,ebp
c000324e:	eb de                	jmp    c000322e <dir_sdi+0x71>
c0003250:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003254:	89 f8                	mov    eax,edi
c0003256:	e8 9f ec ff ff       	call   c0001efa <clst2sect>
c000325b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000325f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003262:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003265:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003268:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000326b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000326e:	89 d1                	mov    ecx,edx
c0003270:	09 c1                	or     ecx,eax
c0003272:	0f 84 67 ff ff ff    	je     c00031df <dir_sdi+0x22>
c0003278:	89 f1                	mov    ecx,esi
c000327a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003282:	c1 e9 09             	shr    ecx,0x9
c0003285:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003289:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000328d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003291:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003294:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000329a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000329d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00032a1:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00032a4:	31 c0                	xor    eax,eax
c00032a6:	eb 05                	jmp    c00032ad <dir_sdi+0xf0>
c00032a8:	b8 01 00 00 00       	mov    eax,0x1
c00032ad:	83 c4 1c             	add    esp,0x1c
c00032b0:	5b                   	pop    ebx
c00032b1:	5e                   	pop    esi
c00032b2:	5f                   	pop    edi
c00032b3:	5d                   	pop    ebp
c00032b4:	c3                   	ret    

c00032b5 <create_chain>:
c00032b5:	55                   	push   ebp
c00032b6:	89 c5                	mov    ebp,eax
c00032b8:	57                   	push   edi
c00032b9:	56                   	push   esi
c00032ba:	53                   	push   ebx
c00032bb:	83 ec 1c             	sub    esp,0x1c
c00032be:	85 d2                	test   edx,edx
c00032c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032c4:	8b 30                	mov    esi,DWORD PTR [eax]
c00032c6:	75 0e                	jne    c00032d6 <create_chain+0x21>
c00032c8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032cb:	85 ff                	test   edi,edi
c00032cd:	74 39                	je     c0003308 <create_chain+0x53>
c00032cf:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032d2:	77 39                	ja     c000330d <create_chain+0x58>
c00032d4:	eb 32                	jmp    c0003308 <create_chain+0x53>
c00032d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032da:	e8 e8 fc ff ff       	call   c0002fc7 <get_fat>
c00032df:	89 c3                	mov    ebx,eax
c00032e1:	83 f8 01             	cmp    eax,0x1
c00032e4:	77 0a                	ja     c00032f0 <create_chain+0x3b>
c00032e6:	bb 01 00 00 00       	mov    ebx,0x1
c00032eb:	e9 ba 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c00032f0:	83 f8 ff             	cmp    eax,0xffffffff
c00032f3:	0f 84 62 01 00 00    	je     c000345b <create_chain+0x1a6>
c00032f9:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032fc:	0f 87 a8 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c0003302:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003306:	eb 05                	jmp    c000330d <create_chain+0x58>
c0003308:	bf 01 00 00 00       	mov    edi,0x1
c000330d:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003311:	75 07                	jne    c000331a <create_chain+0x65>
c0003313:	31 db                	xor    ebx,ebx
c0003315:	e9 90 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c000331a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000331d:	75 74                	jne    c0003393 <create_chain+0xde>
c000331f:	b9 01 00 00 00       	mov    ecx,0x1
c0003324:	89 fa                	mov    edx,edi
c0003326:	89 f0                	mov    eax,esi
c0003328:	e8 2d f9 ff ff       	call   c0002c5a <find_bitmap>
c000332d:	89 c3                	mov    ebx,eax
c000332f:	8d 40 ff             	lea    eax,[eax-0x1]
c0003332:	83 f8 fd             	cmp    eax,0xfffffffd
c0003335:	0f 87 6f 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c000333b:	83 ec 0c             	sub    esp,0xc
c000333e:	b9 01 00 00 00       	mov    ecx,0x1
c0003343:	6a 01                	push   0x1
c0003345:	89 da                	mov    edx,ebx
c0003347:	89 f0                	mov    eax,esi
c0003349:	e8 bf f9 ff ff       	call   c0002d0d <change_bitmap>
c000334e:	83 c4 10             	add    esp,0x10
c0003351:	83 f8 02             	cmp    eax,0x2
c0003354:	74 90                	je     c00032e6 <create_chain+0x31>
c0003356:	83 f8 01             	cmp    eax,0x1
c0003359:	0f 84 fc 00 00 00    	je     c000345b <create_chain+0x1a6>
c000335f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003364:	75 09                	jne    c000336f <create_chain+0xba>
c0003366:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000336a:	e9 0c 01 00 00       	jmp    c000347b <create_chain+0x1c6>
c000336f:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003373:	0f 85 e7 00 00 00    	jne    c0003460 <create_chain+0x1ab>
c0003379:	8d 57 01             	lea    edx,[edi+0x1]
c000337c:	39 da                	cmp    edx,ebx
c000337e:	0f 84 f7 00 00 00    	je     c000347b <create_chain+0x1c6>
c0003384:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003387:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000338b:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000338e:	e9 cd 00 00 00       	jmp    c0003460 <create_chain+0x1ab>
c0003393:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003397:	75 41                	jne    c00033da <create_chain+0x125>
c0003399:	8d 5f 01             	lea    ebx,[edi+0x1]
c000339c:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000339f:	77 05                	ja     c00033a6 <create_chain+0xf1>
c00033a1:	bb 02 00 00 00       	mov    ebx,0x2
c00033a6:	89 da                	mov    edx,ebx
c00033a8:	89 e8                	mov    eax,ebp
c00033aa:	e8 18 fc ff ff       	call   c0002fc7 <get_fat>
c00033af:	83 f8 01             	cmp    eax,0x1
c00033b2:	0f 84 2e ff ff ff    	je     c00032e6 <create_chain+0x31>
c00033b8:	83 f8 ff             	cmp    eax,0xffffffff
c00033bb:	0f 84 9a 00 00 00    	je     c000345b <create_chain+0x1a6>
c00033c1:	85 c0                	test   eax,eax
c00033c3:	74 11                	je     c00033d6 <create_chain+0x121>
c00033c5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 0d                	jbe    c00033da <create_chain+0x125>
c00033cd:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033d0:	76 08                	jbe    c00033da <create_chain+0x125>
c00033d2:	89 c7                	mov    edi,eax
c00033d4:	eb 04                	jmp    c00033da <create_chain+0x125>
c00033d6:	85 db                	test   ebx,ebx
c00033d8:	75 38                	jne    c0003412 <create_chain+0x15d>
c00033da:	89 fb                	mov    ebx,edi
c00033dc:	43                   	inc    ebx
c00033dd:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033e0:	77 0e                	ja     c00033f0 <create_chain+0x13b>
c00033e2:	83 ff 01             	cmp    edi,0x1
c00033e5:	0f 86 28 ff ff ff    	jbe    c0003313 <create_chain+0x5e>
c00033eb:	bb 02 00 00 00       	mov    ebx,0x2
c00033f0:	89 da                	mov    edx,ebx
c00033f2:	89 e8                	mov    eax,ebp
c00033f4:	e8 ce fb ff ff       	call   c0002fc7 <get_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 15                	je     c0003412 <create_chain+0x15d>
c00033fd:	83 f8 01             	cmp    eax,0x1
c0003400:	0f 84 e0 fe ff ff    	je     c00032e6 <create_chain+0x31>
c0003406:	40                   	inc    eax
c0003407:	74 52                	je     c000345b <create_chain+0x1a6>
c0003409:	39 fb                	cmp    ebx,edi
c000340b:	75 cf                	jne    c00033dc <create_chain+0x127>
c000340d:	e9 01 ff ff ff       	jmp    c0003313 <create_chain+0x5e>
c0003412:	83 c9 ff             	or     ecx,0xffffffff
c0003415:	89 da                	mov    edx,ebx
c0003417:	89 f0                	mov    eax,esi
c0003419:	e8 a4 f9 ff ff       	call   c0002dc2 <put_fat>
c000341e:	85 c0                	test   eax,eax
c0003420:	75 32                	jne    c0003454 <create_chain+0x19f>
c0003422:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003427:	74 11                	je     c000343a <create_chain+0x185>
c0003429:	89 d9                	mov    ecx,ebx
c000342b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000342f:	89 f0                	mov    eax,esi
c0003431:	e8 8c f9 ff ff       	call   c0002dc2 <put_fat>
c0003436:	85 c0                	test   eax,eax
c0003438:	75 1a                	jne    c0003454 <create_chain+0x19f>
c000343a:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000343d:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003440:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003443:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003446:	39 d0                	cmp    eax,edx
c0003448:	77 04                	ja     c000344e <create_chain+0x199>
c000344a:	48                   	dec    eax
c000344b:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000344e:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003452:	eb 56                	jmp    c00034aa <create_chain+0x1f5>
c0003454:	48                   	dec    eax
c0003455:	0f 85 8b fe ff ff    	jne    c00032e6 <create_chain+0x31>
c000345b:	83 cb ff             	or     ebx,0xffffffff
c000345e:	eb 4a                	jmp    c00034aa <create_chain+0x1f5>
c0003460:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003464:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003467:	41                   	inc    ecx
c0003468:	39 d9                	cmp    ecx,ebx
c000346a:	75 19                	jne    c0003485 <create_chain+0x1d0>
c000346c:	b9 02 00 00 00       	mov    ecx,0x2
c0003471:	85 d2                	test   edx,edx
c0003473:	74 03                	je     c0003478 <create_chain+0x1c3>
c0003475:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003478:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000347b:	85 c0                	test   eax,eax
c000347d:	0f 85 63 fe ff ff    	jne    c00032e6 <create_chain+0x31>
c0003483:	eb b5                	jmp    c000343a <create_chain+0x185>
c0003485:	85 d2                	test   edx,edx
c0003487:	75 07                	jne    c0003490 <create_chain+0x1db>
c0003489:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003490:	89 d9                	mov    ecx,ebx
c0003492:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003496:	89 e8                	mov    eax,ebp
c0003498:	e8 bb fa ff ff       	call   c0002f58 <fill_last_frag>
c000349d:	85 c0                	test   eax,eax
c000349f:	75 b3                	jne    c0003454 <create_chain+0x19f>
c00034a1:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034a8:	eb 90                	jmp    c000343a <create_chain+0x185>
c00034aa:	83 c4 1c             	add    esp,0x1c
c00034ad:	89 d8                	mov    eax,ebx
c00034af:	5b                   	pop    ebx
c00034b0:	5e                   	pop    esi
c00034b1:	5f                   	pop    edi
c00034b2:	5d                   	pop    ebp
c00034b3:	c3                   	ret    

c00034b4 <remove_chain>:
c00034b4:	55                   	push   ebp
c00034b5:	57                   	push   edi
c00034b6:	56                   	push   esi
c00034b7:	53                   	push   ebx
c00034b8:	83 ec 1c             	sub    esp,0x1c
c00034bb:	83 fa 01             	cmp    edx,0x1
c00034be:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034c2:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034c4:	77 0a                	ja     c00034d0 <remove_chain+0x1c>
c00034c6:	b8 02 00 00 00       	mov    eax,0x2
c00034cb:	e9 24 01 00 00       	jmp    c00035f4 <remove_chain+0x140>
c00034d0:	89 d6                	mov    esi,edx
c00034d2:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034d5:	76 ef                	jbe    c00034c6 <remove_chain+0x12>
c00034d7:	89 c7                	mov    edi,eax
c00034d9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034de:	75 06                	jne    c00034e6 <remove_chain+0x32>
c00034e0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034e4:	eb 54                	jmp    c000353a <remove_chain+0x86>
c00034e6:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034e9:	75 06                	jne    c00034f1 <remove_chain+0x3d>
c00034eb:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034ef:	74 ef                	je     c00034e0 <remove_chain+0x2c>
c00034f1:	83 c9 ff             	or     ecx,0xffffffff
c00034f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034f8:	89 d8                	mov    eax,ebx
c00034fa:	e8 c3 f8 ff ff       	call   c0002dc2 <put_fat>
c00034ff:	85 c0                	test   eax,eax
c0003501:	74 dd                	je     c00034e0 <remove_chain+0x2c>
c0003503:	e9 ec 00 00 00       	jmp    c00035f4 <remove_chain+0x140>
c0003508:	83 f8 01             	cmp    eax,0x1
c000350b:	74 b9                	je     c00034c6 <remove_chain+0x12>
c000350d:	83 f8 ff             	cmp    eax,0xffffffff
c0003510:	74 6d                	je     c000357f <remove_chain+0xcb>
c0003512:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003515:	75 6f                	jne    c0003586 <remove_chain+0xd2>
c0003517:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000351a:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000351d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003520:	39 d0                	cmp    eax,edx
c0003522:	73 08                	jae    c000352c <remove_chain+0x78>
c0003524:	40                   	inc    eax
c0003525:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003529:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000352c:	8d 4e 01             	lea    ecx,[esi+0x1]
c000352f:	39 e9                	cmp    ecx,ebp
c0003531:	75 64                	jne    c0003597 <remove_chain+0xe3>
c0003533:	89 ee                	mov    esi,ebp
c0003535:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003538:	76 0f                	jbe    c0003549 <remove_chain+0x95>
c000353a:	89 f2                	mov    edx,esi
c000353c:	89 f8                	mov    eax,edi
c000353e:	e8 84 fa ff ff       	call   c0002fc7 <get_fat>
c0003543:	89 c5                	mov    ebp,eax
c0003545:	85 c0                	test   eax,eax
c0003547:	75 bf                	jne    c0003508 <remove_chain+0x54>
c0003549:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000354c:	0f 85 a0 00 00 00    	jne    c00035f2 <remove_chain+0x13e>
c0003552:	eb 6c                	jmp    c00035c0 <remove_chain+0x10c>
c0003554:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003557:	84 c0                	test   al,al
c0003559:	75 7d                	jne    c00035d8 <remove_chain+0x124>
c000355b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000355e:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003562:	0f 84 86 00 00 00    	je     c00035ee <remove_chain+0x13a>
c0003568:	89 da                	mov    edx,ebx
c000356a:	89 f8                	mov    eax,edi
c000356c:	e8 56 fa ff ff       	call   c0002fc7 <get_fat>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	0f 86 4c ff ff ff    	jbe    c00034c6 <remove_chain+0x12>
c000357a:	83 f8 ff             	cmp    eax,0xffffffff
c000357d:	75 4e                	jne    c00035cd <remove_chain+0x119>
c000357f:	b8 01 00 00 00       	mov    eax,0x1
c0003584:	eb 6e                	jmp    c00035f4 <remove_chain+0x140>
c0003586:	31 c9                	xor    ecx,ecx
c0003588:	89 f2                	mov    edx,esi
c000358a:	89 d8                	mov    eax,ebx
c000358c:	e8 31 f8 ff ff       	call   c0002dc2 <put_fat>
c0003591:	85 c0                	test   eax,eax
c0003593:	74 82                	je     c0003517 <remove_chain+0x63>
c0003595:	eb 5d                	jmp    c00035f4 <remove_chain+0x140>
c0003597:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000359a:	75 1b                	jne    c00035b7 <remove_chain+0x103>
c000359c:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00035a0:	89 d8                	mov    eax,ebx
c00035a2:	83 ec 0c             	sub    esp,0xc
c00035a5:	6a 00                	push   0x0
c00035a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00035ab:	e8 5d f7 ff ff       	call   c0002d0d <change_bitmap>
c00035b0:	83 c4 10             	add    esp,0x10
c00035b3:	85 c0                	test   eax,eax
c00035b5:	75 3d                	jne    c00035f4 <remove_chain+0x140>
c00035b7:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00035bb:	e9 73 ff ff ff       	jmp    c0003533 <remove_chain+0x7f>
c00035c0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035c5:	75 8d                	jne    c0003554 <remove_chain+0xa0>
c00035c7:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035cb:	eb 25                	jmp    c00035f2 <remove_chain+0x13e>
c00035cd:	8d 53 01             	lea    edx,[ebx+0x1]
c00035d0:	89 c3                	mov    ebx,eax
c00035d2:	39 c2                	cmp    edx,eax
c00035d4:	74 88                	je     c000355e <remove_chain+0xaa>
c00035d6:	eb 1a                	jmp    c00035f2 <remove_chain+0x13e>
c00035d8:	3c 03                	cmp    al,0x3
c00035da:	75 16                	jne    c00035f2 <remove_chain+0x13e>
c00035dc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035df:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035e3:	77 0d                	ja     c00035f2 <remove_chain+0x13e>
c00035e5:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035e8:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035ec:	72 04                	jb     c00035f2 <remove_chain+0x13e>
c00035ee:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035f2:	31 c0                	xor    eax,eax
c00035f4:	83 c4 1c             	add    esp,0x1c
c00035f7:	5b                   	pop    ebx
c00035f8:	5e                   	pop    esi
c00035f9:	5f                   	pop    edi
c00035fa:	5d                   	pop    ebp
c00035fb:	c3                   	ret    

c00035fc <dir_clear>:
c00035fc:	55                   	push   ebp
c00035fd:	57                   	push   edi
c00035fe:	56                   	push   esi
c00035ff:	89 c6                	mov    esi,eax
c0003601:	53                   	push   ebx
c0003602:	83 ec 1c             	sub    esp,0x1c
c0003605:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003609:	e8 9d ed ff ff       	call   c00023ab <sync_window>
c000360e:	85 c0                	test   eax,eax
c0003610:	0f 85 de 00 00 00    	jne    c00036f4 <dir_clear+0xf8>
c0003616:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000361a:	89 f0                	mov    eax,esi
c000361c:	8d 6e 54             	lea    ebp,[esi+0x54]
c000361f:	e8 d6 e8 ff ff       	call   c0001efa <clst2sect>
c0003624:	b9 00 02 00 00       	mov    ecx,0x200
c0003629:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000362d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003631:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003634:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003637:	89 e8                	mov    eax,ebp
c0003639:	31 d2                	xor    edx,edx
c000363b:	e8 b5 e6 ff ff       	call   c0001cf5 <mem_set>
c0003640:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003644:	c1 e3 09             	shl    ebx,0x9
c0003647:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000364d:	76 1f                	jbe    c000366e <dir_clear+0x72>
c000364f:	bb 00 80 00 00       	mov    ebx,0x8000
c0003654:	eb 18                	jmp    c000366e <dir_clear+0x72>
c0003656:	83 ec 0c             	sub    esp,0xc
c0003659:	53                   	push   ebx
c000365a:	e8 35 4e 00 00       	call   c0008494 <ff_memalloc>
c000365f:	83 c4 10             	add    esp,0x10
c0003662:	89 c7                	mov    edi,eax
c0003664:	85 c0                	test   eax,eax
c0003666:	0f 85 8f 00 00 00    	jne    c00036fb <dir_clear+0xff>
c000366c:	d1 eb                	shr    ebx,1
c000366e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003674:	77 e0                	ja     c0003656 <dir_clear+0x5a>
c0003676:	31 db                	xor    ebx,ebx
c0003678:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000367c:	39 d8                	cmp    eax,ebx
c000367e:	76 66                	jbe    c00036e6 <dir_clear+0xea>
c0003680:	83 ec 0c             	sub    esp,0xc
c0003683:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003687:	6a 01                	push   0x1
c0003689:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000368d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003691:	55                   	push   ebp
c0003692:	50                   	push   eax
c0003693:	e8 94 e5 ff ff       	call   c0001c2c <disk_write>
c0003698:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000369d:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00036a2:	83 c4 20             	add    esp,0x20
c00036a5:	85 c0                	test   eax,eax
c00036a7:	75 3d                	jne    c00036e6 <dir_clear+0xea>
c00036a9:	43                   	inc    ebx
c00036aa:	eb cc                	jmp    c0003678 <dir_clear+0x7c>
c00036ac:	83 ec 0c             	sub    esp,0xc
c00036af:	31 d2                	xor    edx,edx
c00036b1:	55                   	push   ebp
c00036b2:	89 d8                	mov    eax,ebx
c00036b4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00036b8:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00036bc:	52                   	push   edx
c00036bd:	50                   	push   eax
c00036be:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036c2:	57                   	push   edi
c00036c3:	50                   	push   eax
c00036c4:	e8 63 e5 ff ff       	call   c0001c2c <disk_write>
c00036c9:	83 c4 20             	add    esp,0x20
c00036cc:	85 c0                	test   eax,eax
c00036ce:	75 0a                	jne    c00036da <dir_clear+0xde>
c00036d0:	01 eb                	add    ebx,ebp
c00036d2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036d6:	39 d8                	cmp    eax,ebx
c00036d8:	77 d2                	ja     c00036ac <dir_clear+0xb0>
c00036da:	83 ec 0c             	sub    esp,0xc
c00036dd:	57                   	push   edi
c00036de:	e8 c7 4d 00 00       	call   c00084aa <ff_memfree>
c00036e3:	83 c4 10             	add    esp,0x10
c00036e6:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036ea:	39 d8                	cmp    eax,ebx
c00036ec:	0f 95 c0             	setne  al
c00036ef:	0f b6 c0             	movzx  eax,al
c00036f2:	eb 19                	jmp    c000370d <dir_clear+0x111>
c00036f4:	b8 01 00 00 00       	mov    eax,0x1
c00036f9:	eb 12                	jmp    c000370d <dir_clear+0x111>
c00036fb:	89 d9                	mov    ecx,ebx
c00036fd:	31 d2                	xor    edx,edx
c00036ff:	c1 eb 09             	shr    ebx,0x9
c0003702:	e8 ee e5 ff ff       	call   c0001cf5 <mem_set>
c0003707:	89 dd                	mov    ebp,ebx
c0003709:	31 db                	xor    ebx,ebx
c000370b:	eb c5                	jmp    c00036d2 <dir_clear+0xd6>
c000370d:	83 c4 1c             	add    esp,0x1c
c0003710:	5b                   	pop    ebx
c0003711:	5e                   	pop    esi
c0003712:	5f                   	pop    edi
c0003713:	5d                   	pop    ebp
c0003714:	c3                   	ret    

c0003715 <dir_next>:
c0003715:	55                   	push   ebp
c0003716:	57                   	push   edi
c0003717:	56                   	push   esi
c0003718:	53                   	push   ebx
c0003719:	89 c3                	mov    ebx,eax
c000371b:	83 ec 1c             	sub    esp,0x1c
c000371e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003720:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003724:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003727:	8d 78 20             	lea    edi,[eax+0x20]
c000372a:	31 c0                	xor    eax,eax
c000372c:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003730:	0f 94 c0             	sete   al
c0003733:	48                   	dec    eax
c0003734:	25 00 00 20 f0       	and    eax,0xf0200000
c0003739:	05 00 00 00 10       	add    eax,0x10000000
c000373e:	39 f8                	cmp    eax,edi
c0003740:	77 0e                	ja     c0003750 <dir_next+0x3b>
c0003742:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003749:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003750:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003753:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003756:	b8 04 00 00 00       	mov    eax,0x4
c000375b:	89 ce                	mov    esi,ecx
c000375d:	09 d6                	or     esi,edx
c000375f:	0f 84 da 00 00 00    	je     c000383f <dir_next+0x12a>
c0003765:	89 f8                	mov    eax,edi
c0003767:	25 ff 01 00 00       	and    eax,0x1ff
c000376c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003770:	0f 85 b9 00 00 00    	jne    c000382f <dir_next+0x11a>
c0003776:	83 c2 01             	add    edx,0x1
c0003779:	83 d1 00             	adc    ecx,0x0
c000377c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000377f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003782:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003785:	85 d2                	test   edx,edx
c0003787:	75 29                	jne    c00037b2 <dir_next+0x9d>
c0003789:	89 fa                	mov    edx,edi
c000378b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000378f:	c1 ea 05             	shr    edx,0x5
c0003792:	39 c2                	cmp    edx,eax
c0003794:	0f 82 95 00 00 00    	jb     c000382f <dir_next+0x11a>
c000379a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00037a1:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00037a8:	b8 04 00 00 00       	mov    eax,0x4
c00037ad:	e9 8d 00 00 00       	jmp    c000383f <dir_next+0x12a>
c00037b2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00037b6:	89 f9                	mov    ecx,edi
c00037b8:	48                   	dec    eax
c00037b9:	c1 e9 09             	shr    ecx,0x9
c00037bc:	85 c8                	test   eax,ecx
c00037be:	75 6f                	jne    c000382f <dir_next+0x11a>
c00037c0:	89 d8                	mov    eax,ebx
c00037c2:	e8 00 f8 ff ff       	call   c0002fc7 <get_fat>
c00037c7:	89 c6                	mov    esi,eax
c00037c9:	83 f8 01             	cmp    eax,0x1
c00037cc:	77 07                	ja     c00037d5 <dir_next+0xc0>
c00037ce:	b8 02 00 00 00       	mov    eax,0x2
c00037d3:	eb 6a                	jmp    c000383f <dir_next+0x12a>
c00037d5:	83 f8 ff             	cmp    eax,0xffffffff
c00037d8:	75 07                	jne    c00037e1 <dir_next+0xcc>
c00037da:	b8 01 00 00 00       	mov    eax,0x1
c00037df:	eb 5e                	jmp    c000383f <dir_next+0x12a>
c00037e1:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037e4:	77 37                	ja     c000381d <dir_next+0x108>
c00037e6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037eb:	74 ad                	je     c000379a <dir_next+0x85>
c00037ed:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037f0:	89 d8                	mov    eax,ebx
c00037f2:	e8 be fa ff ff       	call   c00032b5 <create_chain>
c00037f7:	89 c6                	mov    esi,eax
c00037f9:	b8 07 00 00 00       	mov    eax,0x7
c00037fe:	85 f6                	test   esi,esi
c0003800:	74 3d                	je     c000383f <dir_next+0x12a>
c0003802:	83 fe 01             	cmp    esi,0x1
c0003805:	74 c7                	je     c00037ce <dir_next+0xb9>
c0003807:	83 fe ff             	cmp    esi,0xffffffff
c000380a:	74 ce                	je     c00037da <dir_next+0xc5>
c000380c:	89 f2                	mov    edx,esi
c000380e:	89 e8                	mov    eax,ebp
c0003810:	e8 e7 fd ff ff       	call   c00035fc <dir_clear>
c0003815:	85 c0                	test   eax,eax
c0003817:	75 c1                	jne    c00037da <dir_next+0xc5>
c0003819:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000381d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003820:	89 f2                	mov    edx,esi
c0003822:	89 e8                	mov    eax,ebp
c0003824:	e8 d1 e6 ff ff       	call   c0001efa <clst2sect>
c0003829:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000382c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000382f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003833:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003836:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000383a:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000383d:	31 c0                	xor    eax,eax
c000383f:	83 c4 1c             	add    esp,0x1c
c0003842:	5b                   	pop    ebx
c0003843:	5e                   	pop    esi
c0003844:	5f                   	pop    edi
c0003845:	5d                   	pop    ebp
c0003846:	c3                   	ret    

c0003847 <load_xdir>:
c0003847:	55                   	push   ebp
c0003848:	57                   	push   edi
c0003849:	56                   	push   esi
c000384a:	89 c6                	mov    esi,eax
c000384c:	53                   	push   ebx
c000384d:	83 ec 1c             	sub    esp,0x1c
c0003850:	8b 00                	mov    eax,DWORD PTR [eax]
c0003852:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003855:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003858:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000385b:	e8 df eb ff ff       	call   c000243f <move_window>
c0003860:	89 c3                	mov    ebx,eax
c0003862:	85 c0                	test   eax,eax
c0003864:	0f 85 0c 01 00 00    	jne    c0003976 <load_xdir+0x12f>
c000386a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000386d:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003870:	0f 85 fb 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c0003876:	89 f8                	mov    eax,edi
c0003878:	b9 20 00 00 00       	mov    ecx,0x20
c000387d:	e8 5e e4 ff ff       	call   c0001ce0 <mem_cpy>
c0003882:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003886:	40                   	inc    eax
c0003887:	c1 e0 05             	shl    eax,0x5
c000388a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000388e:	83 e8 60             	sub    eax,0x60
c0003891:	3d 00 02 00 00       	cmp    eax,0x200
c0003896:	0f 87 d5 00 00 00    	ja     c0003971 <load_xdir+0x12a>
c000389c:	31 d2                	xor    edx,edx
c000389e:	89 f0                	mov    eax,esi
c00038a0:	e8 70 fe ff ff       	call   c0003715 <dir_next>
c00038a5:	89 c3                	mov    ebx,eax
c00038a7:	83 f8 04             	cmp    eax,0x4
c00038aa:	0f 84 c1 00 00 00    	je     c0003971 <load_xdir+0x12a>
c00038b0:	85 c0                	test   eax,eax
c00038b2:	0f 85 be 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038b8:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038bb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038be:	8b 06                	mov    eax,DWORD PTR [esi]
c00038c0:	e8 7a eb ff ff       	call   c000243f <move_window>
c00038c5:	89 c3                	mov    ebx,eax
c00038c7:	85 c0                	test   eax,eax
c00038c9:	0f 85 a7 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038cf:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038d2:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038d5:	0f 85 96 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c00038db:	8d 47 20             	lea    eax,[edi+0x20]
c00038de:	b9 20 00 00 00       	mov    ecx,0x20
c00038e3:	e8 f8 e3 ff ff       	call   c0001ce0 <mem_cpy>
c00038e8:	31 d2                	xor    edx,edx
c00038ea:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038ee:	b9 0f 00 00 00       	mov    ecx,0xf
c00038f3:	83 c0 2c             	add    eax,0x2c
c00038f6:	f7 f1                	div    ecx
c00038f8:	c1 e0 05             	shl    eax,0x5
c00038fb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038ff:	77 70                	ja     c0003971 <load_xdir+0x12a>
c0003901:	bd 40 00 00 00       	mov    ebp,0x40
c0003906:	31 d2                	xor    edx,edx
c0003908:	89 f0                	mov    eax,esi
c000390a:	e8 06 fe ff ff       	call   c0003715 <dir_next>
c000390f:	89 c3                	mov    ebx,eax
c0003911:	83 f8 04             	cmp    eax,0x4
c0003914:	74 5b                	je     c0003971 <load_xdir+0x12a>
c0003916:	85 c0                	test   eax,eax
c0003918:	75 5c                	jne    c0003976 <load_xdir+0x12f>
c000391a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000391d:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003920:	8b 06                	mov    eax,DWORD PTR [esi]
c0003922:	e8 18 eb ff ff       	call   c000243f <move_window>
c0003927:	89 c3                	mov    ebx,eax
c0003929:	85 c0                	test   eax,eax
c000392b:	75 49                	jne    c0003976 <load_xdir+0x12f>
c000392d:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003930:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003933:	75 3c                	jne    c0003971 <load_xdir+0x12a>
c0003935:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000393b:	77 0d                	ja     c000394a <load_xdir+0x103>
c000393d:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003940:	b9 20 00 00 00       	mov    ecx,0x20
c0003945:	e8 96 e3 ff ff       	call   c0001ce0 <mem_cpy>
c000394a:	83 c5 20             	add    ebp,0x20
c000394d:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003951:	77 b3                	ja     c0003906 <load_xdir+0xbf>
c0003953:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003959:	77 1b                	ja     c0003976 <load_xdir+0x12f>
c000395b:	89 f8                	mov    eax,edi
c000395d:	e8 cd e7 ff ff       	call   c000212f <xdir_sum>
c0003962:	89 c1                	mov    ecx,eax
c0003964:	8d 47 02             	lea    eax,[edi+0x2]
c0003967:	e8 f5 e2 ff ff       	call   c0001c61 <ld_word>
c000396c:	66 39 c1             	cmp    cx,ax
c000396f:	74 05                	je     c0003976 <load_xdir+0x12f>
c0003971:	bb 02 00 00 00       	mov    ebx,0x2
c0003976:	83 c4 1c             	add    esp,0x1c
c0003979:	89 d8                	mov    eax,ebx
c000397b:	5b                   	pop    ebx
c000397c:	5e                   	pop    esi
c000397d:	5f                   	pop    edi
c000397e:	5d                   	pop    ebp
c000397f:	c3                   	ret    

c0003980 <load_obj_xdir>:
c0003980:	53                   	push   ebx
c0003981:	89 c3                	mov    ebx,eax
c0003983:	83 ec 08             	sub    esp,0x8
c0003986:	8b 02                	mov    eax,DWORD PTR [edx]
c0003988:	89 03                	mov    DWORD PTR [ebx],eax
c000398a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000398d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003990:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003993:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003996:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003999:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00039a0:	30 c0                	xor    al,al
c00039a2:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039a9:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00039ac:	89 d8                	mov    eax,ebx
c00039ae:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00039b1:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00039b4:	e8 04 f8 ff ff       	call   c00031bd <dir_sdi>
c00039b9:	85 c0                	test   eax,eax
c00039bb:	75 0b                	jne    c00039c8 <load_obj_xdir+0x48>
c00039bd:	89 d8                	mov    eax,ebx
c00039bf:	83 c4 08             	add    esp,0x8
c00039c2:	5b                   	pop    ebx
c00039c3:	e9 7f fe ff ff       	jmp    c0003847 <load_xdir>
c00039c8:	83 c4 08             	add    esp,0x8
c00039cb:	5b                   	pop    ebx
c00039cc:	c3                   	ret    

c00039cd <dir_read>:
c00039cd:	55                   	push   ebp
c00039ce:	bd 04 00 00 00       	mov    ebp,0x4
c00039d3:	57                   	push   edi
c00039d4:	56                   	push   esi
c00039d5:	be ff ff ff ff       	mov    esi,0xffffffff
c00039da:	53                   	push   ebx
c00039db:	89 c3                	mov    ebx,eax
c00039dd:	83 ec 1c             	sub    esp,0x1c
c00039e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e4:	8b 38                	mov    edi,DWORD PTR [eax]
c00039e6:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039eb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039ee:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039f1:	89 c8                	mov    eax,ecx
c00039f3:	09 d0                	or     eax,edx
c00039f5:	0f 84 25 01 00 00    	je     c0003b20 <dir_read+0x153>
c00039fb:	89 f8                	mov    eax,edi
c00039fd:	e8 3d ea ff ff       	call   c000243f <move_window>
c0003a02:	89 c5                	mov    ebp,eax
c0003a04:	85 c0                	test   eax,eax
c0003a06:	0f 85 23 01 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a0c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a0f:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003a11:	84 c9                	test   cl,cl
c0003a13:	0f 84 11 01 00 00    	je     c0003b2a <dir_read+0x15d>
c0003a19:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a1c:	75 48                	jne    c0003a66 <dir_read+0x99>
c0003a1e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a23:	74 10                	je     c0003a35 <dir_read+0x68>
c0003a25:	80 f9 83             	cmp    cl,0x83
c0003a28:	0f 85 dd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a2e:	31 ed                	xor    ebp,ebp
c0003a30:	e9 08 01 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a35:	80 f9 85             	cmp    cl,0x85
c0003a38:	0f 85 cd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a3e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a41:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a44:	89 d8                	mov    eax,ebx
c0003a46:	e8 fc fd ff ff       	call   c0003847 <load_xdir>
c0003a4b:	89 c5                	mov    ebp,eax
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	0f 85 da 00 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a55:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a58:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a5b:	83 e0 3f             	and    eax,0x3f
c0003a5e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a61:	e9 d7 00 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a66:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a69:	83 e0 3f             	and    eax,0x3f
c0003a6c:	80 f9 2e             	cmp    cl,0x2e
c0003a6f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a73:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a76:	0f 84 8a 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a7c:	80 f9 e5             	cmp    cl,0xe5
c0003a7f:	0f 84 81 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a89:	83 e0 1f             	and    eax,0x1f
c0003a8c:	83 f8 08             	cmp    eax,0x8
c0003a8f:	0f 94 c0             	sete   al
c0003a92:	0f b6 c0             	movzx  eax,al
c0003a95:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a99:	75 6b                	jne    c0003b06 <dir_read+0x139>
c0003a9b:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003aa0:	75 44                	jne    c0003ae6 <dir_read+0x119>
c0003aa2:	f6 c1 40             	test   cl,0x40
c0003aa5:	74 12                	je     c0003ab9 <dir_read+0xec>
c0003aa7:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003aaa:	83 e1 bf             	and    ecx,0xffffffbf
c0003aad:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003ab1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003ab4:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003ab7:	eb 06                	jmp    c0003abf <dir_read+0xf2>
c0003ab9:	89 f0                	mov    eax,esi
c0003abb:	38 c8                	cmp    al,cl
c0003abd:	75 47                	jne    c0003b06 <dir_read+0x139>
c0003abf:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003ac3:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ac8:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003acb:	75 3e                	jne    c0003b0b <dir_read+0x13e>
c0003acd:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003ad1:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003ad4:	e8 8a e4 ff ff       	call   c0001f63 <pick_lfn>
c0003ad9:	85 c0                	test   eax,eax
c0003adb:	74 2e                	je     c0003b0b <dir_read+0x13e>
c0003add:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003ae1:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003ae4:	eb 25                	jmp    c0003b0b <dir_read+0x13e>
c0003ae6:	89 f0                	mov    eax,esi
c0003ae8:	84 c0                	test   al,al
c0003aea:	75 11                	jne    c0003afd <dir_read+0x130>
c0003aec:	89 d0                	mov    eax,edx
c0003aee:	e8 2a e6 ff ff       	call   c000211d <sum_sfn>
c0003af3:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003af7:	0f 84 31 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003afd:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003b04:	eb 37                	jmp    c0003b3d <dir_read+0x170>
c0003b06:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b0b:	31 d2                	xor    edx,edx
c0003b0d:	89 d8                	mov    eax,ebx
c0003b0f:	e8 01 fc ff ff       	call   c0003715 <dir_next>
c0003b14:	89 c5                	mov    ebp,eax
c0003b16:	85 c0                	test   eax,eax
c0003b18:	0f 84 cd fe ff ff    	je     c00039eb <dir_read+0x1e>
c0003b1e:	eb 0f                	jmp    c0003b2f <dir_read+0x162>
c0003b20:	85 ed                	test   ebp,ebp
c0003b22:	0f 84 06 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003b28:	eb 05                	jmp    c0003b2f <dir_read+0x162>
c0003b2a:	bd 04 00 00 00       	mov    ebp,0x4
c0003b2f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b36:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b3d:	83 c4 1c             	add    esp,0x1c
c0003b40:	89 e8                	mov    eax,ebp
c0003b42:	5b                   	pop    ebx
c0003b43:	5e                   	pop    esi
c0003b44:	5f                   	pop    edi
c0003b45:	5d                   	pop    ebp
c0003b46:	c3                   	ret    

c0003b47 <dir_alloc>:
c0003b47:	55                   	push   ebp
c0003b48:	89 d5                	mov    ebp,edx
c0003b4a:	57                   	push   edi
c0003b4b:	31 d2                	xor    edx,edx
c0003b4d:	56                   	push   esi
c0003b4e:	53                   	push   ebx
c0003b4f:	89 c3                	mov    ebx,eax
c0003b51:	83 ec 0c             	sub    esp,0xc
c0003b54:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b56:	e8 62 f6 ff ff       	call   c00031bd <dir_sdi>
c0003b5b:	85 c0                	test   eax,eax
c0003b5d:	75 4e                	jne    c0003bad <dir_alloc+0x66>
c0003b5f:	31 f6                	xor    esi,esi
c0003b61:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b64:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b67:	89 f8                	mov    eax,edi
c0003b69:	e8 d1 e8 ff ff       	call   c000243f <move_window>
c0003b6e:	85 c0                	test   eax,eax
c0003b70:	75 3b                	jne    c0003bad <dir_alloc+0x66>
c0003b72:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b75:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b78:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b7a:	75 07                	jne    c0003b83 <dir_alloc+0x3c>
c0003b7c:	f7 d2                	not    edx
c0003b7e:	c0 ea 07             	shr    dl,0x7
c0003b81:	eb 0d                	jmp    c0003b90 <dir_alloc+0x49>
c0003b83:	84 d2                	test   dl,dl
c0003b85:	0f 94 c1             	sete   cl
c0003b88:	80 fa e5             	cmp    dl,0xe5
c0003b8b:	0f 94 c2             	sete   dl
c0003b8e:	09 ca                	or     edx,ecx
c0003b90:	84 d2                	test   dl,dl
c0003b92:	74 07                	je     c0003b9b <dir_alloc+0x54>
c0003b94:	46                   	inc    esi
c0003b95:	39 ee                	cmp    esi,ebp
c0003b97:	75 04                	jne    c0003b9d <dir_alloc+0x56>
c0003b99:	eb 1c                	jmp    c0003bb7 <dir_alloc+0x70>
c0003b9b:	31 f6                	xor    esi,esi
c0003b9d:	ba 01 00 00 00       	mov    edx,0x1
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 6c fb ff ff       	call   c0003715 <dir_next>
c0003ba9:	85 c0                	test   eax,eax
c0003bab:	74 b4                	je     c0003b61 <dir_alloc+0x1a>
c0003bad:	83 f8 04             	cmp    eax,0x4
c0003bb0:	75 05                	jne    c0003bb7 <dir_alloc+0x70>
c0003bb2:	b8 07 00 00 00       	mov    eax,0x7
c0003bb7:	83 c4 0c             	add    esp,0xc
c0003bba:	5b                   	pop    ebx
c0003bbb:	5e                   	pop    esi
c0003bbc:	5f                   	pop    edi
c0003bbd:	5d                   	pop    ebp
c0003bbe:	c3                   	ret    

c0003bbf <store_xdir>:
c0003bbf:	55                   	push   ebp
c0003bc0:	57                   	push   edi
c0003bc1:	89 c7                	mov    edi,eax
c0003bc3:	56                   	push   esi
c0003bc4:	53                   	push   ebx
c0003bc5:	83 ec 0c             	sub    esp,0xc
c0003bc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bca:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003bcd:	89 e8                	mov    eax,ebp
c0003bcf:	e8 5b e5 ff ff       	call   c000212f <xdir_sum>
c0003bd4:	0f b7 d0             	movzx  edx,ax
c0003bd7:	8d 45 02             	lea    eax,[ebp+0x2]
c0003bda:	e8 f4 e0 ff ff       	call   c0001cd3 <st_word>
c0003bdf:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003be3:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003be6:	89 f8                	mov    eax,edi
c0003be8:	e8 d0 f5 ff ff       	call   c00031bd <dir_sdi>
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	85 f6                	test   esi,esi
c0003bf1:	75 3d                	jne    c0003c30 <store_xdir+0x71>
c0003bf3:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bf6:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bf9:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bfb:	e8 3f e8 ff ff       	call   c000243f <move_window>
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	85 c0                	test   eax,eax
c0003c04:	75 2a                	jne    c0003c30 <store_xdir+0x71>
c0003c06:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003c09:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0e:	89 ea                	mov    edx,ebp
c0003c10:	e8 cb e0 ff ff       	call   c0001ce0 <mem_cpy>
c0003c15:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c17:	85 db                	test   ebx,ebx
c0003c19:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c1d:	74 11                	je     c0003c30 <store_xdir+0x71>
c0003c1f:	31 d2                	xor    edx,edx
c0003c21:	89 f8                	mov    eax,edi
c0003c23:	83 c5 20             	add    ebp,0x20
c0003c26:	e8 ea fa ff ff       	call   c0003715 <dir_next>
c0003c2b:	4b                   	dec    ebx
c0003c2c:	89 c6                	mov    esi,eax
c0003c2e:	eb bf                	jmp    c0003bef <store_xdir+0x30>
c0003c30:	89 f0                	mov    eax,esi
c0003c32:	83 fe 02             	cmp    esi,0x2
c0003c35:	76 05                	jbe    c0003c3c <store_xdir+0x7d>
c0003c37:	b8 02 00 00 00       	mov    eax,0x2
c0003c3c:	83 c4 0c             	add    esp,0xc
c0003c3f:	5b                   	pop    ebx
c0003c40:	5e                   	pop    esi
c0003c41:	5f                   	pop    edi
c0003c42:	5d                   	pop    ebp
c0003c43:	c3                   	ret    

c0003c44 <dir_remove>:
c0003c44:	57                   	push   edi
c0003c45:	56                   	push   esi
c0003c46:	53                   	push   ebx
c0003c47:	89 c3                	mov    ebx,eax
c0003c49:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c4c:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c4e:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c51:	83 fa ff             	cmp    edx,0xffffffff
c0003c54:	74 09                	je     c0003c5f <dir_remove+0x1b>
c0003c56:	e8 62 f5 ff ff       	call   c00031bd <dir_sdi>
c0003c5b:	85 c0                	test   eax,eax
c0003c5d:	75 41                	jne    c0003ca0 <dir_remove+0x5c>
c0003c5f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c62:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c65:	89 f0                	mov    eax,esi
c0003c67:	e8 d3 e7 ff ff       	call   c000243f <move_window>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	75 26                	jne    c0003c96 <dir_remove+0x52>
c0003c70:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c73:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c76:	75 05                	jne    c0003c7d <dir_remove+0x39>
c0003c78:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c7b:	eb 03                	jmp    c0003c80 <dir_remove+0x3c>
c0003c7d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c80:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c84:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c87:	73 17                	jae    c0003ca0 <dir_remove+0x5c>
c0003c89:	31 d2                	xor    edx,edx
c0003c8b:	89 d8                	mov    eax,ebx
c0003c8d:	e8 83 fa ff ff       	call   c0003715 <dir_next>
c0003c92:	85 c0                	test   eax,eax
c0003c94:	74 c9                	je     c0003c5f <dir_remove+0x1b>
c0003c96:	83 f8 04             	cmp    eax,0x4
c0003c99:	75 05                	jne    c0003ca0 <dir_remove+0x5c>
c0003c9b:	b8 02 00 00 00       	mov    eax,0x2
c0003ca0:	5b                   	pop    ebx
c0003ca1:	5e                   	pop    esi
c0003ca2:	5f                   	pop    edi
c0003ca3:	c3                   	ret    

c0003ca4 <create_name>:
c0003ca4:	55                   	push   ebp
c0003ca5:	89 d5                	mov    ebp,edx
c0003ca7:	57                   	push   edi
c0003ca8:	89 c7                	mov    edi,eax
c0003caa:	56                   	push   esi
c0003cab:	31 f6                	xor    esi,esi
c0003cad:	53                   	push   ebx
c0003cae:	83 ec 3c             	sub    esp,0x3c
c0003cb1:	8b 02                	mov    eax,DWORD PTR [edx]
c0003cb3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cb7:	8b 07                	mov    eax,DWORD PTR [edi]
c0003cb9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003cbc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003cc0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003cc4:	e8 72 e0 ff ff       	call   c0001d3b <tchar2uni>
c0003cc9:	89 c3                	mov    ebx,eax
c0003ccb:	83 f8 ff             	cmp    eax,0xffffffff
c0003cce:	75 0a                	jne    c0003cda <create_name+0x36>
c0003cd0:	b8 06 00 00 00       	mov    eax,0x6
c0003cd5:	e9 9e 02 00 00       	jmp    c0003f78 <create_name+0x2d4>
c0003cda:	3d ff ff 00 00       	cmp    eax,0xffff
c0003cdf:	76 0c                	jbe    c0003ced <create_name+0x49>
c0003ce1:	c1 e8 10             	shr    eax,0x10
c0003ce4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003ce8:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cec:	46                   	inc    esi
c0003ced:	66 83 fb 1f          	cmp    bx,0x1f
c0003cf1:	76 4f                	jbe    c0003d42 <create_name+0x9e>
c0003cf3:	66 83 fb 5c          	cmp    bx,0x5c
c0003cf7:	74 35                	je     c0003d2e <create_name+0x8a>
c0003cf9:	66 83 fb 2f          	cmp    bx,0x2f
c0003cfd:	74 2f                	je     c0003d2e <create_name+0x8a>
c0003cff:	66 83 fb 7f          	cmp    bx,0x7f
c0003d03:	77 11                	ja     c0003d16 <create_name+0x72>
c0003d05:	0f b7 d3             	movzx  edx,bx
c0003d08:	b8 f2 94 02 c0       	mov    eax,0xc00294f2
c0003d0d:	e8 11 e0 ff ff       	call   c0001d23 <chk_chr>
c0003d12:	85 c0                	test   eax,eax
c0003d14:	75 ba                	jne    c0003cd0 <create_name+0x2c>
c0003d16:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d1c:	77 b2                	ja     c0003cd0 <create_name+0x2c>
c0003d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d22:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d26:	46                   	inc    esi
c0003d27:	eb 97                	jmp    c0003cc0 <create_name+0x1c>
c0003d29:	40                   	inc    eax
c0003d2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d32:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d34:	80 fa 2f             	cmp    dl,0x2f
c0003d37:	74 f0                	je     c0003d29 <create_name+0x85>
c0003d39:	80 fa 5c             	cmp    dl,0x5c
c0003d3c:	74 eb                	je     c0003d29 <create_name+0x85>
c0003d3e:	31 db                	xor    ebx,ebx
c0003d40:	eb 02                	jmp    c0003d44 <create_name+0xa0>
c0003d42:	b3 04                	mov    bl,0x4
c0003d44:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d48:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d4b:	85 f6                	test   esi,esi
c0003d4d:	74 18                	je     c0003d67 <create_name+0xc3>
c0003d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d53:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d58:	66 83 f8 20          	cmp    ax,0x20
c0003d5c:	74 06                	je     c0003d64 <create_name+0xc0>
c0003d5e:	66 83 f8 2e          	cmp    ax,0x2e
c0003d62:	75 03                	jne    c0003d67 <create_name+0xc3>
c0003d64:	4e                   	dec    esi
c0003d65:	eb e4                	jmp    c0003d4b <create_name+0xa7>
c0003d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6b:	31 ed                	xor    ebp,ebp
c0003d6d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d73:	85 f6                	test   esi,esi
c0003d75:	0f 84 55 ff ff ff    	je     c0003cd0 <create_name+0x2c>
c0003d7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d7f:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d82:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d86:	66 83 f8 20          	cmp    ax,0x20
c0003d8a:	75 04                	jne    c0003d90 <create_name+0xec>
c0003d8c:	89 d5                	mov    ebp,edx
c0003d8e:	eb eb                	jmp    c0003d7b <create_name+0xd7>
c0003d90:	85 ed                	test   ebp,ebp
c0003d92:	75 06                	jne    c0003d9a <create_name+0xf6>
c0003d94:	66 83 f8 2e          	cmp    ax,0x2e
c0003d98:	75 08                	jne    c0003da2 <create_name+0xfe>
c0003d9a:	83 cb 03             	or     ebx,0x3
c0003d9d:	eb 03                	jmp    c0003da2 <create_name+0xfe>
c0003d9f:	4e                   	dec    esi
c0003da0:	74 0c                	je     c0003dae <create_name+0x10a>
c0003da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da6:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003dac:	75 f1                	jne    c0003d9f <create_name+0xfb>
c0003dae:	b9 0b 00 00 00       	mov    ecx,0xb
c0003db3:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003db6:	ba 20 00 00 00       	mov    edx,0x20
c0003dbb:	e8 35 df ff ff       	call   c0001cf5 <mem_set>
c0003dc0:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003dc8:	31 c9                	xor    ecx,ecx
c0003dca:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003dcf:	8d 45 01             	lea    eax,[ebp+0x1]
c0003dd2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dda:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003dde:	66 85 ed             	test   bp,bp
c0003de1:	0f 84 30 01 00 00    	je     c0003f17 <create_name+0x273>
c0003de7:	66 83 fd 20          	cmp    bp,0x20
c0003deb:	74 10                	je     c0003dfd <create_name+0x159>
c0003ded:	66 83 fd 2e          	cmp    bp,0x2e
c0003df1:	75 13                	jne    c0003e06 <create_name+0x162>
c0003df3:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df7:	0f 84 6b 01 00 00    	je     c0003f68 <create_name+0x2c4>
c0003dfd:	83 cb 03             	or     ebx,0x3
c0003e00:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003e04:	eb c9                	jmp    c0003dcf <create_name+0x12b>
c0003e06:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003e0a:	73 0b                	jae    c0003e17 <create_name+0x173>
c0003e0c:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e10:	75 47                	jne    c0003e59 <create_name+0x1b5>
c0003e12:	e9 51 01 00 00       	jmp    c0003f68 <create_name+0x2c4>
c0003e17:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e1c:	75 10                	jne    c0003e2e <create_name+0x18a>
c0003e1e:	83 cb 03             	or     ebx,0x3
c0003e21:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e29:	e9 e9 00 00 00       	jmp    c0003f17 <create_name+0x273>
c0003e2e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e32:	74 0d                	je     c0003e41 <create_name+0x19d>
c0003e34:	83 cb 03             	or     ebx,0x3
c0003e37:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e3b:	0f 87 d6 00 00 00    	ja     c0003f17 <create_name+0x273>
c0003e41:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e46:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e4a:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e52:	b9 08 00 00 00       	mov    ecx,0x8
c0003e57:	eb a7                	jmp    c0003e00 <create_name+0x15c>
c0003e59:	66 83 fd 7f          	cmp    bp,0x7f
c0003e5d:	76 68                	jbe    c0003ec7 <create_name+0x223>
c0003e5f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e63:	88 da                	mov    dl,bl
c0003e65:	83 ca 02             	or     edx,0x2
c0003e68:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e6c:	50                   	push   eax
c0003e6d:	50                   	push   eax
c0003e6e:	68 b5 01 00 00       	push   0x1b5
c0003e73:	55                   	push   ebp
c0003e74:	e8 48 46 00 00       	call   c00084c1 <ff_uni2oem>
c0003e79:	83 c4 10             	add    esp,0x10
c0003e7c:	89 c5                	mov    ebp,eax
c0003e7e:	a8 80                	test   al,0x80
c0003e80:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e84:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e88:	74 0c                	je     c0003e96 <create_name+0x1f2>
c0003e8a:	83 e5 7f             	and    ebp,0x7f
c0003e8d:	0f b6 ad 40 94 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6bc0]
c0003e94:	eb 2a                	jmp    c0003ec0 <create_name+0x21c>
c0003e96:	66 3d ff 00          	cmp    ax,0xff
c0003e9a:	76 24                	jbe    c0003ec0 <create_name+0x21c>
c0003e9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ea0:	48                   	dec    eax
c0003ea1:	39 c8                	cmp    eax,ecx
c0003ea3:	77 0c                	ja     c0003eb1 <create_name+0x20d>
c0003ea5:	83 cb 03             	or     ebx,0x3
c0003ea8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eac:	e9 4f ff ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003eb1:	89 e8                	mov    eax,ebp
c0003eb3:	88 d3                	mov    bl,dl
c0003eb5:	66 c1 e8 08          	shr    ax,0x8
c0003eb9:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ebd:	41                   	inc    ecx
c0003ebe:	eb 4b                	jmp    c0003f0b <create_name+0x267>
c0003ec0:	88 d3                	mov    bl,dl
c0003ec2:	66 85 ed             	test   bp,bp
c0003ec5:	74 19                	je     c0003ee0 <create_name+0x23c>
c0003ec7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ecb:	0f b7 d5             	movzx  edx,bp
c0003ece:	b8 fb 94 02 c0       	mov    eax,0xc00294fb
c0003ed3:	e8 4b de ff ff       	call   c0001d23 <chk_chr>
c0003ed8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003edc:	85 c0                	test   eax,eax
c0003ede:	74 0a                	je     c0003eea <create_name+0x246>
c0003ee0:	83 cb 03             	or     ebx,0x3
c0003ee3:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003ee8:	eb 21                	jmp    c0003f0b <create_name+0x267>
c0003eea:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eed:	66 83 f8 19          	cmp    ax,0x19
c0003ef1:	77 07                	ja     c0003efa <create_name+0x256>
c0003ef3:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ef8:	eb 11                	jmp    c0003f0b <create_name+0x267>
c0003efa:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003efd:	66 83 f8 19          	cmp    ax,0x19
c0003f01:	77 08                	ja     c0003f0b <create_name+0x267>
c0003f03:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003f08:	83 ed 20             	sub    ebp,0x20
c0003f0b:	89 e8                	mov    eax,ebp
c0003f0d:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f11:	41                   	inc    ecx
c0003f12:	e9 e9 fe ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003f17:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f1b:	75 04                	jne    c0003f21 <create_name+0x27d>
c0003f1d:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f21:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f26:	75 05                	jne    c0003f2d <create_name+0x289>
c0003f28:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f2d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f31:	83 e0 0c             	and    eax,0xc
c0003f34:	3c 0c                	cmp    al,0xc
c0003f36:	74 0b                	je     c0003f43 <create_name+0x29f>
c0003f38:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f3c:	83 e0 03             	and    eax,0x3
c0003f3f:	3c 03                	cmp    al,0x3
c0003f41:	75 05                	jne    c0003f48 <create_name+0x2a4>
c0003f43:	83 cb 02             	or     ebx,0x2
c0003f46:	eb 19                	jmp    c0003f61 <create_name+0x2bd>
c0003f48:	f6 c3 02             	test   bl,0x2
c0003f4b:	75 14                	jne    c0003f61 <create_name+0x2bd>
c0003f4d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f52:	74 03                	je     c0003f57 <create_name+0x2b3>
c0003f54:	83 cb 10             	or     ebx,0x10
c0003f57:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f5c:	74 03                	je     c0003f61 <create_name+0x2bd>
c0003f5e:	83 cb 08             	or     ebx,0x8
c0003f61:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f64:	31 c0                	xor    eax,eax
c0003f66:	eb 10                	jmp    c0003f78 <create_name+0x2d4>
c0003f68:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f6d:	0f 85 ce fe ff ff    	jne    c0003e41 <create_name+0x19d>
c0003f73:	e9 a6 fe ff ff       	jmp    c0003e1e <create_name+0x17a>
c0003f78:	83 c4 3c             	add    esp,0x3c
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	5f                   	pop    edi
c0003f7e:	5d                   	pop    ebp
c0003f7f:	c3                   	ret    

c0003f80 <xname_sum>:
c0003f80:	56                   	push   esi
c0003f81:	53                   	push   ebx
c0003f82:	89 c6                	mov    esi,eax
c0003f84:	51                   	push   ecx
c0003f85:	31 db                	xor    ebx,ebx
c0003f87:	83 c6 02             	add    esi,0x2
c0003f8a:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f8e:	66 85 c0             	test   ax,ax
c0003f91:	74 1f                	je     c0003fb2 <xname_sum+0x32>
c0003f93:	83 ec 0c             	sub    esp,0xc
c0003f96:	66 d1 cb             	ror    bx,1
c0003f99:	50                   	push   eax
c0003f9a:	e8 1e 46 00 00       	call   c00085bd <ff_wtoupper>
c0003f9f:	83 c4 10             	add    esp,0x10
c0003fa2:	0f b6 d0             	movzx  edx,al
c0003fa5:	66 c1 e8 08          	shr    ax,0x8
c0003fa9:	01 d3                	add    ebx,edx
c0003fab:	66 d1 cb             	ror    bx,1
c0003fae:	01 c3                	add    ebx,eax
c0003fb0:	eb d5                	jmp    c0003f87 <xname_sum+0x7>
c0003fb2:	89 d8                	mov    eax,ebx
c0003fb4:	5a                   	pop    edx
c0003fb5:	5b                   	pop    ebx
c0003fb6:	5e                   	pop    esi
c0003fb7:	c3                   	ret    

c0003fb8 <create_xdir>:
c0003fb8:	55                   	push   ebp
c0003fb9:	b9 40 00 00 00       	mov    ecx,0x40
c0003fbe:	57                   	push   edi
c0003fbf:	bd 01 00 00 00       	mov    ebp,0x1
c0003fc4:	56                   	push   esi
c0003fc5:	31 ff                	xor    edi,edi
c0003fc7:	53                   	push   ebx
c0003fc8:	be 40 00 00 00       	mov    esi,0x40
c0003fcd:	89 c3                	mov    ebx,eax
c0003fcf:	83 ec 1c             	sub    esp,0x1c
c0003fd2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003fd6:	31 d2                	xor    edx,edx
c0003fd8:	e8 18 dd ff ff       	call   c0001cf5 <mem_set>
c0003fdd:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fe0:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003fe4:	31 c9                	xor    ecx,ecx
c0003fe6:	8d 46 01             	lea    eax,[esi+0x1]
c0003fe9:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fed:	83 c6 02             	add    esi,0x2
c0003ff0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ff4:	66 85 ed             	test   bp,bp
c0003ff7:	74 12                	je     c000400b <create_xdir+0x53>
c0003ff9:	0f b6 c1             	movzx  eax,cl
c0003ffc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004000:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0004004:	66 83 fd 01          	cmp    bp,0x1
c0004008:	80 d9 ff             	sbb    cl,0xff
c000400b:	8d 04 33             	lea    eax,[ebx+esi*1]
c000400e:	0f b7 d5             	movzx  edx,bp
c0004011:	83 c6 02             	add    esi,0x2
c0004014:	e8 ba dc ff ff       	call   c0001cd3 <st_word>
c0004019:	f7 c6 1f 00 00 00    	test   esi,0x1f
c000401f:	75 d3                	jne    c0003ff4 <create_xdir+0x3c>
c0004021:	8d 47 01             	lea    eax,[edi+0x1]
c0004024:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004028:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000402c:	0f b6 c1             	movzx  eax,cl
c000402f:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0004034:	74 07                	je     c000403d <create_xdir+0x85>
c0004036:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c000403b:	eb a9                	jmp    c0003fe6 <create_xdir+0x2e>
c000403d:	8d 47 02             	lea    eax,[edi+0x2]
c0004040:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004043:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0004046:	89 d0                	mov    eax,edx
c0004048:	e8 33 ff ff ff       	call   c0003f80 <xname_sum>
c000404d:	83 c4 1c             	add    esp,0x1c
c0004050:	0f b7 d0             	movzx  edx,ax
c0004053:	8d 43 24             	lea    eax,[ebx+0x24]
c0004056:	5b                   	pop    ebx
c0004057:	5e                   	pop    esi
c0004058:	5f                   	pop    edi
c0004059:	5d                   	pop    ebp
c000405a:	e9 74 dc ff ff       	jmp    c0001cd3 <st_word>

c000405f <cmp_lfn>:
c000405f:	55                   	push   ebp
c0004060:	57                   	push   edi
c0004061:	89 d7                	mov    edi,edx
c0004063:	56                   	push   esi
c0004064:	53                   	push   ebx
c0004065:	83 ec 1c             	sub    esp,0x1c
c0004068:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000406c:	8d 42 1a             	lea    eax,[edx+0x1a]
c000406f:	e8 ed db ff ff       	call   c0001c61 <ld_word>
c0004074:	66 85 c0             	test   ax,ax
c0004077:	74 07                	je     c0004080 <cmp_lfn+0x21>
c0004079:	31 c0                	xor    eax,eax
c000407b:	e9 9a 00 00 00       	jmp    c000411a <cmp_lfn+0xbb>
c0004080:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004082:	bd 01 00 00 00       	mov    ebp,0x1
c0004087:	83 e3 3f             	and    ebx,0x3f
c000408a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004092:	4b                   	dec    ebx
c0004093:	6b db 0d             	imul   ebx,ebx,0xd
c0004096:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000409a:	0f b6 80 c0 94 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6b40]
c00040a1:	01 f8                	add    eax,edi
c00040a3:	e8 b9 db ff ff       	call   c0001c61 <ld_word>
c00040a8:	66 85 ed             	test   bp,bp
c00040ab:	89 c6                	mov    esi,eax
c00040ad:	74 3c                	je     c00040eb <cmp_lfn+0x8c>
c00040af:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040b5:	77 c2                	ja     c0004079 <cmp_lfn+0x1a>
c00040b7:	83 ec 0c             	sub    esp,0xc
c00040ba:	0f b7 c0             	movzx  eax,ax
c00040bd:	50                   	push   eax
c00040be:	e8 fa 44 00 00       	call   c00085bd <ff_wtoupper>
c00040c3:	89 c5                	mov    ebp,eax
c00040c5:	8d 43 01             	lea    eax,[ebx+0x1]
c00040c8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040d0:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040d7:	e8 e1 44 00 00       	call   c00085bd <ff_wtoupper>
c00040dc:	83 c4 10             	add    esp,0x10
c00040df:	39 c5                	cmp    ebp,eax
c00040e1:	75 96                	jne    c0004079 <cmp_lfn+0x1a>
c00040e3:	89 f5                	mov    ebp,esi
c00040e5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040e9:	eb 04                	jmp    c00040ef <cmp_lfn+0x90>
c00040eb:	66 46                	inc    si
c00040ed:	75 8a                	jne    c0004079 <cmp_lfn+0x1a>
c00040ef:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040f3:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040f8:	75 9c                	jne    c0004096 <cmp_lfn+0x37>
c00040fa:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040fd:	74 16                	je     c0004115 <cmp_lfn+0xb6>
c00040ff:	66 85 ed             	test   bp,bp
c0004102:	74 11                	je     c0004115 <cmp_lfn+0xb6>
c0004104:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004108:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000410d:	0f 94 c0             	sete   al
c0004110:	0f b6 c0             	movzx  eax,al
c0004113:	eb 05                	jmp    c000411a <cmp_lfn+0xbb>
c0004115:	b8 01 00 00 00       	mov    eax,0x1
c000411a:	83 c4 1c             	add    esp,0x1c
c000411d:	5b                   	pop    ebx
c000411e:	5e                   	pop    esi
c000411f:	5f                   	pop    edi
c0004120:	5d                   	pop    ebp
c0004121:	c3                   	ret    

c0004122 <dir_find>:
c0004122:	55                   	push   ebp
c0004123:	31 d2                	xor    edx,edx
c0004125:	57                   	push   edi
c0004126:	56                   	push   esi
c0004127:	53                   	push   ebx
c0004128:	89 c3                	mov    ebx,eax
c000412a:	83 ec 1c             	sub    esp,0x1c
c000412d:	8b 30                	mov    esi,DWORD PTR [eax]
c000412f:	e8 89 f0 ff ff       	call   c00031bd <dir_sdi>
c0004134:	89 04 24             	mov    DWORD PTR [esp],eax
c0004137:	85 c0                	test   eax,eax
c0004139:	0f 85 9e 01 00 00    	jne    c00042dd <dir_find+0x1bb>
c000413f:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004142:	0f 85 8d 00 00 00    	jne    c00041d5 <dir_find+0xb3>
c0004148:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000414b:	e8 30 fe ff ff       	call   c0003f80 <xname_sum>
c0004150:	89 c7                	mov    edi,eax
c0004152:	31 d2                	xor    edx,edx
c0004154:	89 d8                	mov    eax,ebx
c0004156:	e8 72 f8 ff ff       	call   c00039cd <dir_read>
c000415b:	85 c0                	test   eax,eax
c000415d:	0f 85 5e 01 00 00    	jne    c00042c1 <dir_find+0x19f>
c0004163:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004166:	8d 41 24             	lea    eax,[ecx+0x24]
c0004169:	e8 f3 da ff ff       	call   c0001c61 <ld_word>
c000416e:	66 39 f8             	cmp    ax,di
c0004171:	75 df                	jne    c0004152 <dir_find+0x30>
c0004173:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004176:	31 ed                	xor    ebp,ebp
c0004178:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000417c:	ba 40 00 00 00       	mov    edx,0x40
c0004181:	89 e9                	mov    ecx,ebp
c0004183:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004187:	0f 84 42 01 00 00    	je     c00042cf <dir_find+0x1ad>
c000418d:	f6 c2 1f             	test   dl,0x1f
c0004190:	75 03                	jne    c0004195 <dir_find+0x73>
c0004192:	83 c2 02             	add    edx,0x2
c0004195:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004199:	89 d0                	mov    eax,edx
c000419b:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c000419e:	e8 be da ff ff       	call   c0001c61 <ld_word>
c00041a3:	83 ec 0c             	sub    esp,0xc
c00041a6:	0f b7 c0             	movzx  eax,ax
c00041a9:	50                   	push   eax
c00041aa:	e8 0e 44 00 00       	call   c00085bd <ff_wtoupper>
c00041af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00041b3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041b6:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00041ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00041bd:	e8 fb 43 00 00       	call   c00085bd <ff_wtoupper>
c00041c2:	83 c4 10             	add    esp,0x10
c00041c5:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041c9:	75 87                	jne    c0004152 <dir_find+0x30>
c00041cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041cf:	45                   	inc    ebp
c00041d0:	83 c2 02             	add    edx,0x2
c00041d3:	eb ac                	jmp    c0004181 <dir_find+0x5f>
c00041d5:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041dc:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041e1:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041e6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041e9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041ec:	89 f0                	mov    eax,esi
c00041ee:	e8 4c e2 ff ff       	call   c000243f <move_window>
c00041f3:	85 c0                	test   eax,eax
c00041f5:	0f 85 c6 00 00 00    	jne    c00042c1 <dir_find+0x19f>
c00041fb:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041fe:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0004201:	84 c9                	test   cl,cl
c0004203:	0f 84 bd 00 00 00    	je     c00042c6 <dir_find+0x1a4>
c0004209:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c000420c:	88 d0                	mov    al,dl
c000420e:	83 e0 3f             	and    eax,0x3f
c0004211:	80 f9 e5             	cmp    cl,0xe5
c0004214:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004217:	0f 84 87 00 00 00    	je     c00042a4 <dir_find+0x182>
c000421d:	80 e2 08             	and    dl,0x8
c0004220:	74 06                	je     c0004228 <dir_find+0x106>
c0004222:	3c 0f                	cmp    al,0xf
c0004224:	75 7e                	jne    c00042a4 <dir_find+0x182>
c0004226:	eb 04                	jmp    c000422c <dir_find+0x10a>
c0004228:	3c 0f                	cmp    al,0xf
c000422a:	75 4c                	jne    c0004278 <dir_find+0x156>
c000422c:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004230:	75 7e                	jne    c00042b0 <dir_find+0x18e>
c0004232:	f6 c1 40             	test   cl,0x40
c0004235:	74 12                	je     c0004249 <dir_find+0x127>
c0004237:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000423a:	83 e1 bf             	and    ecx,0xffffffbf
c000423d:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004241:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004244:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004247:	eb 06                	jmp    c000424f <dir_find+0x12d>
c0004249:	89 f8                	mov    eax,edi
c000424b:	38 c8                	cmp    al,cl
c000424d:	75 5c                	jne    c00042ab <dir_find+0x189>
c000424f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004253:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004258:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000425b:	75 53                	jne    c00042b0 <dir_find+0x18e>
c000425d:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004261:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004264:	89 ea                	mov    edx,ebp
c0004266:	e8 f4 fd ff ff       	call   c000405f <cmp_lfn>
c000426b:	85 c0                	test   eax,eax
c000426d:	74 41                	je     c00042b0 <dir_find+0x18e>
c000426f:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004273:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004276:	eb 38                	jmp    c00042b0 <dir_find+0x18e>
c0004278:	89 f8                	mov    eax,edi
c000427a:	84 c0                	test   al,al
c000427c:	75 0d                	jne    c000428b <dir_find+0x169>
c000427e:	89 e8                	mov    eax,ebp
c0004280:	e8 98 de ff ff       	call   c000211d <sum_sfn>
c0004285:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004289:	74 52                	je     c00042dd <dir_find+0x1bb>
c000428b:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000428f:	75 13                	jne    c00042a4 <dir_find+0x182>
c0004291:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004294:	b9 0b 00 00 00       	mov    ecx,0xb
c0004299:	89 e8                	mov    eax,ebp
c000429b:	e8 60 da ff ff       	call   c0001d00 <mem_cmp>
c00042a0:	85 c0                	test   eax,eax
c00042a2:	74 39                	je     c00042dd <dir_find+0x1bb>
c00042a4:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00042ab:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042b0:	31 d2                	xor    edx,edx
c00042b2:	89 d8                	mov    eax,ebx
c00042b4:	e8 5c f4 ff ff       	call   c0003715 <dir_next>
c00042b9:	85 c0                	test   eax,eax
c00042bb:	0f 84 25 ff ff ff    	je     c00041e6 <dir_find+0xc4>
c00042c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00042c4:	eb 17                	jmp    c00042dd <dir_find+0x1bb>
c00042c6:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042cd:	eb 0e                	jmp    c00042dd <dir_find+0x1bb>
c00042cf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042d2:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042d7:	0f 85 75 fe ff ff    	jne    c0004152 <dir_find+0x30>
c00042dd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042e0:	83 c4 1c             	add    esp,0x1c
c00042e3:	5b                   	pop    ebx
c00042e4:	5e                   	pop    esi
c00042e5:	5f                   	pop    edi
c00042e6:	5d                   	pop    ebp
c00042e7:	c3                   	ret    

c00042e8 <dir_register>:
c00042e8:	55                   	push   ebp
c00042e9:	57                   	push   edi
c00042ea:	56                   	push   esi
c00042eb:	be 06 00 00 00       	mov    esi,0x6
c00042f0:	53                   	push   ebx
c00042f1:	83 ec 6c             	sub    esp,0x6c
c00042f4:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042f8:	0f 85 62 02 00 00    	jne    c0004560 <dir_register+0x278>
c00042fe:	8b 28                	mov    ebp,DWORD PTR [eax]
c0004300:	31 ff                	xor    edi,edi
c0004302:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004305:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c000430a:	74 03                	je     c000430f <dir_register+0x27>
c000430c:	47                   	inc    edi
c000430d:	eb f6                	jmp    c0004305 <dir_register+0x1d>
c000430f:	89 c3                	mov    ebx,eax
c0004311:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004315:	0f 85 e1 00 00 00    	jne    c00043fc <dir_register+0x114>
c000431b:	83 c7 0e             	add    edi,0xe
c000431e:	b9 0f 00 00 00       	mov    ecx,0xf
c0004323:	89 f8                	mov    eax,edi
c0004325:	31 d2                	xor    edx,edx
c0004327:	f7 f1                	div    ecx
c0004329:	8d 50 02             	lea    edx,[eax+0x2]
c000432c:	89 c7                	mov    edi,eax
c000432e:	89 d8                	mov    eax,ebx
c0004330:	e8 12 f8 ff ff       	call   c0003b47 <dir_alloc>
c0004335:	89 c6                	mov    esi,eax
c0004337:	85 c0                	test   eax,eax
c0004339:	0f 85 21 02 00 00    	jne    c0004560 <dir_register+0x278>
c000433f:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004345:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004348:	c1 e7 05             	shl    edi,0x5
c000434b:	29 f8                	sub    eax,edi
c000434d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004350:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004353:	a8 04                	test   al,0x4
c0004355:	0f 84 91 00 00 00    	je     c00043ec <dir_register+0x104>
c000435b:	83 e0 fb             	and    eax,0xfffffffb
c000435e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004361:	89 d8                	mov    eax,ebx
c0004363:	e8 25 ec ff ff       	call   c0002f8d <fill_first_frag>
c0004368:	85 c0                	test   eax,eax
c000436a:	0f 85 ee 01 00 00    	jne    c000455e <dir_register+0x276>
c0004370:	83 c9 ff             	or     ecx,0xffffffff
c0004373:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004376:	89 d8                	mov    eax,ebx
c0004378:	e8 db eb ff ff       	call   c0002f58 <fill_last_frag>
c000437d:	85 c0                	test   eax,eax
c000437f:	0f 85 d9 01 00 00    	jne    c000455e <dir_register+0x276>
c0004385:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004389:	74 61                	je     c00043ec <dir_register+0x104>
c000438b:	89 da                	mov    edx,ebx
c000438d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004391:	e8 ea f5 ff ff       	call   c0003980 <load_obj_xdir>
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 c0 01 00 00    	jne    c000455e <dir_register+0x276>
c000439e:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00043a2:	31 c9                	xor    ecx,ecx
c00043a4:	c1 e2 09             	shl    edx,0x9
c00043a7:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00043aa:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00043ad:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00043b0:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00043b3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b6:	83 c0 38             	add    eax,0x38
c00043b9:	e8 1c d9 ff ff       	call   c0001cda <st_qword>
c00043be:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043c1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043c4:	83 c0 28             	add    eax,0x28
c00043c7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043ca:	e8 0b d9 ff ff       	call   c0001cda <st_qword>
c00043cf:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043d2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043d5:	83 c8 01             	or     eax,0x1
c00043d8:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043db:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043df:	e8 db f7 ff ff       	call   c0003bbf <store_xdir>
c00043e4:	85 c0                	test   eax,eax
c00043e6:	0f 85 72 01 00 00    	jne    c000455e <dir_register+0x276>
c00043ec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043ef:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043f2:	e8 c1 fb ff ff       	call   c0003fb8 <create_xdir>
c00043f7:	e9 64 01 00 00       	jmp    c0004560 <dir_register+0x278>
c00043fc:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043ff:	b9 0c 00 00 00       	mov    ecx,0xc
c0004404:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004408:	89 c2                	mov    edx,eax
c000440a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000440e:	e8 cd d8 ff ff       	call   c0001ce0 <mem_cpy>
c0004413:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004418:	74 58                	je     c0004472 <dir_register+0x18a>
c000441a:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000441e:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004426:	83 ec 0c             	sub    esp,0xc
c0004429:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000442c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004430:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004434:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004438:	e8 24 dc ff ff       	call   c0002061 <gen_numname>
c000443d:	89 d8                	mov    eax,ebx
c000443f:	e8 de fc ff ff       	call   c0004122 <dir_find>
c0004444:	83 c4 10             	add    esp,0x10
c0004447:	89 c6                	mov    esi,eax
c0004449:	85 c0                	test   eax,eax
c000444b:	75 15                	jne    c0004462 <dir_register+0x17a>
c000444d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004451:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004456:	75 ce                	jne    c0004426 <dir_register+0x13e>
c0004458:	be 07 00 00 00       	mov    esi,0x7
c000445d:	e9 fe 00 00 00       	jmp    c0004560 <dir_register+0x278>
c0004462:	83 f8 04             	cmp    eax,0x4
c0004465:	0f 85 f5 00 00 00    	jne    c0004560 <dir_register+0x278>
c000446b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000446f:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004472:	b9 01 00 00 00       	mov    ecx,0x1
c0004477:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000447c:	74 0f                	je     c000448d <dir_register+0x1a5>
c000447e:	b9 0d 00 00 00       	mov    ecx,0xd
c0004483:	8d 47 0c             	lea    eax,[edi+0xc]
c0004486:	31 d2                	xor    edx,edx
c0004488:	f7 f1                	div    ecx
c000448a:	8d 48 01             	lea    ecx,[eax+0x1]
c000448d:	89 ca                	mov    edx,ecx
c000448f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004493:	89 d8                	mov    eax,ebx
c0004495:	e8 ad f6 ff ff       	call   c0003b47 <dir_alloc>
c000449a:	89 c6                	mov    esi,eax
c000449c:	85 c0                	test   eax,eax
c000449e:	0f 85 bc 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00044a8:	49                   	dec    ecx
c00044a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044ad:	74 6a                	je     c0004519 <dir_register+0x231>
c00044af:	89 c8                	mov    eax,ecx
c00044b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044b4:	c1 e0 05             	shl    eax,0x5
c00044b7:	29 c2                	sub    edx,eax
c00044b9:	89 d8                	mov    eax,ebx
c00044bb:	e8 fd ec ff ff       	call   c00031bd <dir_sdi>
c00044c0:	89 c6                	mov    esi,eax
c00044c2:	85 c0                	test   eax,eax
c00044c4:	0f 85 96 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044ce:	e8 4a dc ff ff       	call   c000211d <sum_sfn>
c00044d3:	0f b6 f8             	movzx  edi,al
c00044d6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044d9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044dc:	89 e8                	mov    eax,ebp
c00044de:	e8 5c df ff ff       	call   c000243f <move_window>
c00044e3:	89 c6                	mov    esi,eax
c00044e5:	85 c0                	test   eax,eax
c00044e7:	75 77                	jne    c0004560 <dir_register+0x278>
c00044e9:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044ee:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044f7:	57                   	push   edi
c00044f8:	e8 e0 da ff ff       	call   c0001fdd <put_lfn>
c00044fd:	31 d2                	xor    edx,edx
c00044ff:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004503:	89 d8                	mov    eax,ebx
c0004505:	e8 0b f2 ff ff       	call   c0003715 <dir_next>
c000450a:	83 c4 10             	add    esp,0x10
c000450d:	89 c6                	mov    esi,eax
c000450f:	85 c0                	test   eax,eax
c0004511:	75 4d                	jne    c0004560 <dir_register+0x278>
c0004513:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004517:	75 bd                	jne    c00044d6 <dir_register+0x1ee>
c0004519:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000451c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000451f:	89 e8                	mov    eax,ebp
c0004521:	e8 19 df ff ff       	call   c000243f <move_window>
c0004526:	89 c6                	mov    esi,eax
c0004528:	85 c0                	test   eax,eax
c000452a:	75 34                	jne    c0004560 <dir_register+0x278>
c000452c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000452f:	b9 20 00 00 00       	mov    ecx,0x20
c0004534:	31 d2                	xor    edx,edx
c0004536:	e8 ba d7 ff ff       	call   c0001cf5 <mem_set>
c000453b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000453e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004542:	b9 0b 00 00 00       	mov    ecx,0xb
c0004547:	e8 94 d7 ff ff       	call   c0001ce0 <mem_cpy>
c000454c:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000454f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004552:	83 e0 18             	and    eax,0x18
c0004555:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004558:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000455c:	eb 02                	jmp    c0004560 <dir_register+0x278>
c000455e:	89 c6                	mov    esi,eax
c0004560:	83 c4 6c             	add    esp,0x6c
c0004563:	89 f0                	mov    eax,esi
c0004565:	5b                   	pop    ebx
c0004566:	5e                   	pop    esi
c0004567:	5f                   	pop    edi
c0004568:	5d                   	pop    ebp
c0004569:	c3                   	ret    

c000456a <sync_fs>:
c000456a:	56                   	push   esi
c000456b:	53                   	push   ebx
c000456c:	53                   	push   ebx
c000456d:	89 c3                	mov    ebx,eax
c000456f:	e8 37 de ff ff       	call   c00023ab <sync_window>
c0004574:	85 c0                	test   eax,eax
c0004576:	0f 85 b1 00 00 00    	jne    c000462d <sync_fs+0xc3>
c000457c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000457f:	0f 85 8e 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c0004585:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004589:	0f 85 84 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c000458f:	b9 00 02 00 00       	mov    ecx,0x200
c0004594:	8d 73 54             	lea    esi,[ebx+0x54]
c0004597:	31 d2                	xor    edx,edx
c0004599:	89 f0                	mov    eax,esi
c000459b:	e8 55 d7 ff ff       	call   c0001cf5 <mem_set>
c00045a0:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00045a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00045ab:	e8 23 d7 ff ff       	call   c0001cd3 <st_word>
c00045b0:	ba 52 52 61 41       	mov    edx,0x41615252
c00045b5:	89 f0                	mov    eax,esi
c00045b7:	e8 1b d7 ff ff       	call   c0001cd7 <st_dword>
c00045bc:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045c2:	ba 72 72 41 61       	mov    edx,0x61417272
c00045c7:	e8 0b d7 ff ff       	call   c0001cd7 <st_dword>
c00045cc:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045cf:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045d5:	e8 fd d6 ff ff       	call   c0001cd7 <st_dword>
c00045da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045dd:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045e3:	e8 ef d6 ff ff       	call   c0001cd7 <st_dword>
c00045e8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045eb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045ee:	83 c0 01             	add    eax,0x1
c00045f1:	83 d2 00             	adc    edx,0x0
c00045f4:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045f7:	83 ec 0c             	sub    esp,0xc
c00045fa:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045fd:	6a 01                	push   0x1
c00045ff:	52                   	push   edx
c0004600:	50                   	push   eax
c0004601:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004605:	56                   	push   esi
c0004606:	50                   	push   eax
c0004607:	e8 20 d6 ff ff       	call   c0001c2c <disk_write>
c000460c:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004610:	83 c4 20             	add    esp,0x20
c0004613:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004617:	51                   	push   ecx
c0004618:	6a 00                	push   0x0
c000461a:	6a 00                	push   0x0
c000461c:	50                   	push   eax
c000461d:	e8 20 d6 ff ff       	call   c0001c42 <disk_ioctl>
c0004622:	83 c4 10             	add    esp,0x10
c0004625:	85 c0                	test   eax,eax
c0004627:	0f 95 c0             	setne  al
c000462a:	0f b6 c0             	movzx  eax,al
c000462d:	5a                   	pop    edx
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <create_partition>:
c0004631:	55                   	push   ebp
c0004632:	0f b6 c0             	movzx  eax,al
c0004635:	57                   	push   edi
c0004636:	56                   	push   esi
c0004637:	53                   	push   ebx
c0004638:	83 ec 60             	sub    esp,0x60
c000463b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000463f:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004643:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004647:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000464b:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000464f:	50                   	push   eax
c0004650:	6a 01                	push   0x1
c0004652:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004656:	e8 e7 d5 ff ff       	call   c0001c42 <disk_ioctl>
c000465b:	83 c4 10             	add    esp,0x10
c000465e:	85 c0                	test   eax,eax
c0004660:	74 0a                	je     c000466c <create_partition+0x3b>
c0004662:	b8 01 00 00 00       	mov    eax,0x1
c0004667:	e9 67 05 00 00       	jmp    c0004bd3 <create_partition+0x5a2>
c000466c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004670:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004674:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004678:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000467c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004681:	0f 86 ed 03 00 00    	jbe    c0004a74 <create_partition+0x443>
c0004687:	83 c0 df             	add    eax,0xffffffdf
c000468a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004692:	83 d2 ff             	adc    edx,0xffffffff
c0004695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000469d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00046a5:	83 c0 bd             	add    eax,0xffffffbd
c00046a8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00046af:	83 d2 ff             	adc    edx,0xffffffff
c00046b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00046b6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00046ba:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c2:	be 22 00 00 00       	mov    esi,0x22
c00046c7:	31 ff                	xor    edi,edi
c00046c9:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046d1:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046d9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046e1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046e5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046eb:	75 0e                	jne    c00046fb <create_partition+0xca>
c00046ed:	b9 00 02 00 00       	mov    ecx,0x200
c00046f2:	31 d2                	xor    edx,edx
c00046f4:	89 d8                	mov    eax,ebx
c00046f6:	e8 fa d5 ff ff       	call   c0001cf5 <mem_set>
c00046fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046ff:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004703:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004707:	0b 04 24             	or     eax,DWORD PTR [esp]
c000470a:	0f 84 23 01 00 00    	je     c0004833 <create_partition+0x202>
c0004710:	89 f0                	mov    eax,esi
c0004712:	89 fa                	mov    edx,edi
c0004714:	05 ff 07 00 00       	add    eax,0x7ff
c0004719:	83 d2 00             	adc    edx,0x0
c000471c:	89 c1                	mov    ecx,eax
c000471e:	89 d7                	mov    edi,edx
c0004720:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004726:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000472a:	89 ce                	mov    esi,ecx
c000472c:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004730:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004734:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004738:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000473b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000473f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004742:	b8 64 00 00 00       	mov    eax,0x64
c0004747:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000474a:	b8 00 00 00 00       	mov    eax,0x0
c000474f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004753:	72 41                	jb     c0004796 <create_partition+0x165>
c0004755:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004759:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000475d:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004761:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004766:	01 c1                	add    ecx,eax
c0004768:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000476c:	f7 24 24             	mul    DWORD PTR [esp]
c000476f:	6a 00                	push   0x0
c0004771:	01 ca                	add    edx,ecx
c0004773:	6a 64                	push   0x64
c0004775:	52                   	push   edx
c0004776:	50                   	push   eax
c0004777:	e8 b0 22 02 00       	call   c0026a2c <__udivdi3>
c000477c:	83 c4 10             	add    esp,0x10
c000477f:	05 ff 07 00 00       	add    eax,0x7ff
c0004784:	83 d2 00             	adc    edx,0x0
c0004787:	89 c1                	mov    ecx,eax
c0004789:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000478d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004793:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004796:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004799:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000479d:	01 f0                	add    eax,esi
c000479f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047a3:	11 fa                	adc    edx,edi
c00047a5:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00047a9:	19 d1                	sbb    ecx,edx
c00047ab:	73 2e                	jae    c00047db <create_partition+0x1aa>
c00047ad:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00047b1:	89 f8                	mov    eax,edi
c00047b3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00047ba:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00047be:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047c6:	73 6b                	jae    c0004833 <create_partition+0x202>
c00047c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047d0:	29 f0                	sub    eax,esi
c00047d2:	19 fa                	sbb    edx,edi
c00047d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00047d7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047df:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047e2:	74 4f                	je     c0004833 <create_partition+0x202>
c00047e4:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047e7:	b9 10 00 00 00       	mov    ecx,0x10
c00047ec:	ba d0 94 02 c0       	mov    edx,0xc00294d0
c00047f1:	e8 ea d4 ff ff       	call   c0001ce0 <mem_cpy>
c00047f6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047fa:	b9 10 00 00 00       	mov    ecx,0x10
c00047ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004803:	e8 2c db ff ff       	call   c0002334 <make_rand>
c0004808:	89 f2                	mov    edx,esi
c000480a:	89 f9                	mov    ecx,edi
c000480c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004810:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004814:	e8 c1 d4 ff ff       	call   c0001cda <st_qword>
c0004819:	03 34 24             	add    esi,DWORD PTR [esp]
c000481c:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004820:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004824:	89 f2                	mov    edx,esi
c0004826:	89 f9                	mov    ecx,edi
c0004828:	83 c2 ff             	add    edx,0xffffffff
c000482b:	83 d1 ff             	adc    ecx,0xffffffff
c000482e:	e8 a7 d4 ff ff       	call   c0001cda <st_qword>
c0004833:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004837:	83 e8 80             	sub    eax,0xffffff80
c000483a:	89 c5                	mov    ebp,eax
c000483c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004840:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004846:	75 6b                	jne    c00048b3 <create_partition+0x282>
c0004848:	45                   	inc    ebp
c0004849:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000484d:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004852:	e8 39 da ff ff       	call   c0002290 <crc32>
c0004857:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000485d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004861:	75 e5                	jne    c0004848 <create_partition+0x217>
c0004863:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004867:	31 d2                	xor    edx,edx
c0004869:	83 ec 0c             	sub    esp,0xc
c000486c:	c1 ed 09             	shr    ebp,0x9
c000486f:	6a 01                	push   0x1
c0004871:	8d 45 02             	lea    eax,[ebp+0x2]
c0004874:	52                   	push   edx
c0004875:	50                   	push   eax
c0004876:	53                   	push   ebx
c0004877:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000487b:	e8 ac d3 ff ff       	call   c0001c2c <disk_write>
c0004880:	83 c4 20             	add    esp,0x20
c0004883:	85 c0                	test   eax,eax
c0004885:	0f 85 d7 fd ff ff    	jne    c0004662 <create_partition+0x31>
c000488b:	83 ec 0c             	sub    esp,0xc
c000488e:	31 d2                	xor    edx,edx
c0004890:	6a 01                	push   0x1
c0004892:	89 e8                	mov    eax,ebp
c0004894:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004898:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000489c:	52                   	push   edx
c000489d:	50                   	push   eax
c000489e:	53                   	push   ebx
c000489f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048a3:	e8 84 d3 ff ff       	call   c0001c2c <disk_write>
c00048a8:	83 c4 20             	add    esp,0x20
c00048ab:	85 c0                	test   eax,eax
c00048ad:	0f 85 af fd ff ff    	jne    c0004662 <create_partition+0x31>
c00048b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00048b7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00048bb:	3d 00 40 00 00       	cmp    eax,0x4000
c00048c0:	74 0d                	je     c00048cf <create_partition+0x29e>
c00048c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048c6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048ca:	e9 12 fe ff ff       	jmp    c00046e1 <create_partition+0xb0>
c00048cf:	31 d2                	xor    edx,edx
c00048d1:	b9 00 02 00 00       	mov    ecx,0x200
c00048d6:	89 d8                	mov    eax,ebx
c00048d8:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048db:	e8 15 d4 ff ff       	call   c0001cf5 <mem_set>
c00048e0:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048e3:	b9 10 00 00 00       	mov    ecx,0x10
c00048e8:	ba c0 93 02 c0       	mov    edx,0xc00293c0
c00048ed:	89 d8                	mov    eax,ebx
c00048ef:	e8 ec d3 ff ff       	call   c0001ce0 <mem_cpy>
c00048f4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048f8:	8d 43 58             	lea    eax,[ebx+0x58]
c00048fb:	f7 d2                	not    edx
c00048fd:	e8 d5 d3 ff ff       	call   c0001cd7 <st_dword>
c0004902:	8d 43 18             	lea    eax,[ebx+0x18]
c0004905:	31 c9                	xor    ecx,ecx
c0004907:	89 04 24             	mov    DWORD PTR [esp],eax
c000490a:	ba 01 00 00 00       	mov    edx,0x1
c000490f:	e8 c6 d3 ff ff       	call   c0001cda <st_qword>
c0004914:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004918:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000491c:	83 c2 ff             	add    edx,0xffffffff
c000491f:	89 e8                	mov    eax,ebp
c0004921:	83 d1 ff             	adc    ecx,0xffffffff
c0004924:	e8 b1 d3 ff ff       	call   c0001cda <st_qword>
c0004929:	31 c9                	xor    ecx,ecx
c000492b:	8d 43 28             	lea    eax,[ebx+0x28]
c000492e:	ba 22 00 00 00       	mov    edx,0x22
c0004933:	e8 a2 d3 ff ff       	call   c0001cda <st_qword>
c0004938:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000493c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004940:	83 c2 de             	add    edx,0xffffffde
c0004943:	8d 43 30             	lea    eax,[ebx+0x30]
c0004946:	83 d1 ff             	adc    ecx,0xffffffff
c0004949:	31 f6                	xor    esi,esi
c000494b:	e8 8a d3 ff ff       	call   c0001cda <st_qword>
c0004950:	8d 43 54             	lea    eax,[ebx+0x54]
c0004953:	ba 80 00 00 00       	mov    edx,0x80
c0004958:	e8 7a d3 ff ff       	call   c0001cd7 <st_dword>
c000495d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004960:	ba 80 00 00 00       	mov    edx,0x80
c0004965:	e8 6d d3 ff ff       	call   c0001cd7 <st_dword>
c000496a:	ba 02 00 00 00       	mov    edx,0x2
c000496f:	89 f8                	mov    eax,edi
c0004971:	e8 61 d3 ff ff       	call   c0001cd7 <st_dword>
c0004976:	8d 53 38             	lea    edx,[ebx+0x38]
c0004979:	b9 10 00 00 00       	mov    ecx,0x10
c000497e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004982:	e8 ad d9 ff ff       	call   c0002334 <make_rand>
c0004987:	83 c8 ff             	or     eax,0xffffffff
c000498a:	46                   	inc    esi
c000498b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004990:	e8 fb d8 ff ff       	call   c0002290 <crc32>
c0004995:	83 fe 5c             	cmp    esi,0x5c
c0004998:	75 f0                	jne    c000498a <create_partition+0x359>
c000499a:	f7 d0                	not    eax
c000499c:	8d 73 10             	lea    esi,[ebx+0x10]
c000499f:	89 c2                	mov    edx,eax
c00049a1:	89 f0                	mov    eax,esi
c00049a3:	e8 2f d3 ff ff       	call   c0001cd7 <st_dword>
c00049a8:	83 ec 0c             	sub    esp,0xc
c00049ab:	6a 01                	push   0x1
c00049ad:	6a 00                	push   0x0
c00049af:	6a 01                	push   0x1
c00049b1:	53                   	push   ebx
c00049b2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049b6:	e8 71 d2 ff ff       	call   c0001c2c <disk_write>
c00049bb:	83 c4 20             	add    esp,0x20
c00049be:	85 c0                	test   eax,eax
c00049c0:	0f 85 9c fc ff ff    	jne    c0004662 <create_partition+0x31>
c00049c6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049ca:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049ce:	83 c2 ff             	add    edx,0xffffffff
c00049d1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049d4:	83 d1 ff             	adc    ecx,0xffffffff
c00049d7:	e8 fe d2 ff ff       	call   c0001cda <st_qword>
c00049dc:	ba 01 00 00 00       	mov    edx,0x1
c00049e1:	31 c9                	xor    ecx,ecx
c00049e3:	89 e8                	mov    eax,ebp
c00049e5:	e8 f0 d2 ff ff       	call   c0001cda <st_qword>
c00049ea:	89 f8                	mov    eax,edi
c00049ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049f0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049f4:	31 ff                	xor    edi,edi
c00049f6:	e8 df d2 ff ff       	call   c0001cda <st_qword>
c00049fb:	89 f0                	mov    eax,esi
c00049fd:	31 d2                	xor    edx,edx
c00049ff:	e8 d3 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a04:	83 c8 ff             	or     eax,0xffffffff
c0004a07:	47                   	inc    edi
c0004a08:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004a0d:	e8 7e d8 ff ff       	call   c0002290 <crc32>
c0004a12:	83 ff 5c             	cmp    edi,0x5c
c0004a15:	75 f0                	jne    c0004a07 <create_partition+0x3d6>
c0004a17:	f7 d0                	not    eax
c0004a19:	89 c2                	mov    edx,eax
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	e8 b5 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a22:	83 ec 0c             	sub    esp,0xc
c0004a25:	6a 01                	push   0x1
c0004a27:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a2b:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a2f:	83 c0 ff             	add    eax,0xffffffff
c0004a32:	83 d2 ff             	adc    edx,0xffffffff
c0004a35:	52                   	push   edx
c0004a36:	50                   	push   eax
c0004a37:	53                   	push   ebx
c0004a38:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a3c:	e8 eb d1 ff ff       	call   c0001c2c <disk_write>
c0004a41:	83 c4 20             	add    esp,0x20
c0004a44:	85 c0                	test   eax,eax
c0004a46:	0f 85 16 fc ff ff    	jne    c0004662 <create_partition+0x31>
c0004a4c:	31 d2                	xor    edx,edx
c0004a4e:	89 d8                	mov    eax,ebx
c0004a50:	b9 00 02 00 00       	mov    ecx,0x200
c0004a55:	e8 9b d2 ff ff       	call   c0001cf5 <mem_set>
c0004a5a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a60:	b9 10 00 00 00       	mov    ecx,0x10
c0004a65:	ba d0 93 02 c0       	mov    edx,0xc00293d0
c0004a6a:	e8 71 d2 ff ff       	call   c0001ce0 <mem_cpy>
c0004a6f:	e9 21 01 00 00       	jmp    c0004b95 <create_partition+0x564>
c0004a74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a78:	b9 05 00 00 00       	mov    ecx,0x5
c0004a7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a80:	bf 08 00 00 00       	mov    edi,0x8
c0004a85:	89 f8                	mov    eax,edi
c0004a87:	31 d2                	xor    edx,edx
c0004a89:	0f b6 f0             	movzx  esi,al
c0004a8c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a8f:	f7 f6                	div    esi
c0004a91:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a96:	76 0a                	jbe    c0004aa2 <create_partition+0x471>
c0004a98:	d1 e7                	shl    edi,1
c0004a9a:	49                   	dec    ecx
c0004a9b:	75 e8                	jne    c0004a85 <create_partition+0x454>
c0004a9d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004aa2:	b9 00 02 00 00       	mov    ecx,0x200
c0004aa7:	31 d2                	xor    edx,edx
c0004aa9:	89 d8                	mov    eax,ebx
c0004aab:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004ab1:	e8 3f d2 ff ff       	call   c0001cf5 <mem_set>
c0004ab6:	b9 64 00 00 00       	mov    ecx,0x64
c0004abb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004abe:	31 d2                	xor    edx,edx
c0004ac0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004ac8:	f7 f1                	div    ecx
c0004aca:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004acf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ad3:	89 f8                	mov    eax,edi
c0004ad5:	0f b6 c0             	movzx  eax,al
c0004ad8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004adc:	e9 80 00 00 00       	jmp    c0004b61 <create_partition+0x530>
c0004ae1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004ae4:	29 cf                	sub    edi,ecx
c0004ae6:	89 ca                	mov    edx,ecx
c0004ae8:	89 f0                	mov    eax,esi
c0004aea:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004aef:	e8 e3 d1 ff ff       	call   c0001cd7 <st_dword>
c0004af4:	8d 46 04             	lea    eax,[esi+0x4]
c0004af7:	89 fa                	mov    edx,edi
c0004af9:	83 c6 10             	add    esi,0x10
c0004afc:	e8 d6 d1 ff ff       	call   c0001cd7 <st_dword>
c0004b01:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004b05:	31 d2                	xor    edx,edx
c0004b07:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004b0a:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004b0e:	89 c8                	mov    eax,ecx
c0004b10:	01 f9                	add    ecx,edi
c0004b12:	f7 f5                	div    ebp
c0004b14:	89 d5                	mov    ebp,edx
c0004b16:	31 d2                	xor    edx,edx
c0004b18:	45                   	inc    ebp
c0004b19:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b1d:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b20:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b23:	89 c2                	mov    edx,eax
c0004b25:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b28:	c1 ea 02             	shr    edx,0x2
c0004b2b:	83 e2 c0             	and    edx,0xffffffc0
c0004b2e:	09 ea                	or     edx,ebp
c0004b30:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b35:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b38:	31 d2                	xor    edx,edx
c0004b3a:	f7 f5                	div    ebp
c0004b3c:	89 d7                	mov    edi,edx
c0004b3e:	31 d2                	xor    edx,edx
c0004b40:	47                   	inc    edi
c0004b41:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b45:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b48:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b4b:	89 c5                	mov    ebp,eax
c0004b4d:	c1 ed 02             	shr    ebp,0x2
c0004b50:	83 e5 c0             	and    ebp,0xffffffc0
c0004b53:	09 ef                	or     edi,ebp
c0004b55:	89 fa                	mov    edx,edi
c0004b57:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b5a:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b5f:	74 34                	je     c0004b95 <create_partition+0x564>
c0004b61:	85 c9                	test   ecx,ecx
c0004b63:	74 30                	je     c0004b95 <create_partition+0x564>
c0004b65:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b68:	76 2b                	jbe    c0004b95 <create_partition+0x564>
c0004b6a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b6e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b72:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b75:	83 ff 64             	cmp    edi,0x64
c0004b78:	76 4b                	jbe    c0004bc5 <create_partition+0x594>
c0004b7a:	89 f8                	mov    eax,edi
c0004b7c:	01 c8                	add    eax,ecx
c0004b7e:	0f 82 5d ff ff ff    	jb     c0004ae1 <create_partition+0x4b0>
c0004b84:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b87:	0f 87 54 ff ff ff    	ja     c0004ae1 <create_partition+0x4b0>
c0004b8d:	85 ff                	test   edi,edi
c0004b8f:	0f 85 51 ff ff ff    	jne    c0004ae6 <create_partition+0x4b5>
c0004b95:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b9b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004ba0:	e8 2e d1 ff ff       	call   c0001cd3 <st_word>
c0004ba5:	83 ec 0c             	sub    esp,0xc
c0004ba8:	6a 01                	push   0x1
c0004baa:	6a 00                	push   0x0
c0004bac:	6a 00                	push   0x0
c0004bae:	53                   	push   ebx
c0004baf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004bb3:	e8 74 d0 ff ff       	call   c0001c2c <disk_write>
c0004bb8:	83 c4 20             	add    esp,0x20
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	0f 95 c0             	setne  al
c0004bc0:	0f b6 c0             	movzx  eax,al
c0004bc3:	eb 0e                	jmp    c0004bd3 <create_partition+0x5a2>
c0004bc5:	74 07                	je     c0004bce <create_partition+0x59d>
c0004bc7:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bcc:	eb ac                	jmp    c0004b7a <create_partition+0x549>
c0004bce:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bd1:	eb a7                	jmp    c0004b7a <create_partition+0x549>
c0004bd3:	83 c4 5c             	add    esp,0x5c
c0004bd6:	5b                   	pop    ebx
c0004bd7:	5e                   	pop    esi
c0004bd8:	5f                   	pop    edi
c0004bd9:	5d                   	pop    ebp
c0004bda:	c3                   	ret    

c0004bdb <get_fileinfo>:
c0004bdb:	55                   	push   ebp
c0004bdc:	57                   	push   edi
c0004bdd:	56                   	push   esi
c0004bde:	53                   	push   ebx
c0004bdf:	83 ec 1c             	sub    esp,0x1c
c0004be2:	8b 30                	mov    esi,DWORD PTR [eax]
c0004be4:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004be8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bec:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bef:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bf2:	0f 84 dc 01 00 00    	je     c0004dd4 <get_fileinfo+0x1f9>
c0004bf8:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bfb:	75 0f                	jne    c0004c0c <get_fileinfo+0x31>
c0004bfd:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004c00:	83 c4 1c             	add    esp,0x1c
c0004c03:	5b                   	pop    ebx
c0004c04:	5e                   	pop    esi
c0004c05:	5f                   	pop    edi
c0004c06:	5d                   	pop    ebp
c0004c07:	e9 58 d5 ff ff       	jmp    c0002164 <get_xfileinfo>
c0004c0c:	89 d3                	mov    ebx,edx
c0004c0e:	89 c6                	mov    esi,eax
c0004c10:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004c14:	74 6a                	je     c0004c80 <get_fileinfo+0xa5>
c0004c16:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c1e:	31 ed                	xor    ebp,ebp
c0004c20:	31 ff                	xor    edi,edi
c0004c22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c26:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c2a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c2d:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c31:	66 85 d2             	test   dx,dx
c0004c34:	74 3e                	je     c0004c74 <get_fileinfo+0x99>
c0004c36:	66 85 ed             	test   bp,bp
c0004c39:	75 0c                	jne    c0004c47 <get_fileinfo+0x6c>
c0004c3b:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c41:	66 3d ff 07          	cmp    ax,0x7ff
c0004c45:	76 22                	jbe    c0004c69 <get_fileinfo+0x8e>
c0004c47:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c4c:	89 e8                	mov    eax,ebp
c0004c4e:	29 f9                	sub    ecx,edi
c0004c50:	c1 e0 10             	shl    eax,0x10
c0004c53:	09 d0                	or     eax,edx
c0004c55:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c59:	e8 a3 d1 ff ff       	call   c0001e01 <put_utf>
c0004c5e:	84 c0                	test   al,al
c0004c60:	74 10                	je     c0004c72 <get_fileinfo+0x97>
c0004c62:	0f b6 c0             	movzx  eax,al
c0004c65:	31 d2                	xor    edx,edx
c0004c67:	01 c7                	add    edi,eax
c0004c69:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c6e:	89 d5                	mov    ebp,edx
c0004c70:	eb b0                	jmp    c0004c22 <get_fileinfo+0x47>
c0004c72:	31 ff                	xor    edi,edi
c0004c74:	66 85 ed             	test   bp,bp
c0004c77:	74 02                	je     c0004c7b <get_fileinfo+0xa0>
c0004c79:	31 ff                	xor    edi,edi
c0004c7b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c80:	31 ff                	xor    edi,edi
c0004c82:	31 c9                	xor    ecx,ecx
c0004c84:	83 f9 0a             	cmp    ecx,0xa
c0004c87:	0f 87 ad 00 00 00    	ja     c0004d3a <get_fileinfo+0x15f>
c0004c8d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c90:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c93:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c97:	66 83 fa 20          	cmp    dx,0x20
c0004c9b:	0f 84 92 00 00 00    	je     c0004d33 <get_fileinfo+0x158>
c0004ca1:	66 83 fa 05          	cmp    dx,0x5
c0004ca5:	75 05                	jne    c0004cac <get_fileinfo+0xd1>
c0004ca7:	ba e5 00 00 00       	mov    edx,0xe5
c0004cac:	83 ff 0b             	cmp    edi,0xb
c0004caf:	77 0b                	ja     c0004cbc <get_fileinfo+0xe1>
c0004cb1:	83 fd 09             	cmp    ebp,0x9
c0004cb4:	75 06                	jne    c0004cbc <get_fileinfo+0xe1>
c0004cb6:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004cbb:	47                   	inc    edi
c0004cbc:	0f b7 c2             	movzx  eax,dx
c0004cbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cc3:	e8 6d d0 ff ff       	call   c0001d35 <dbc_1st>
c0004cc8:	85 c0                	test   eax,eax
c0004cca:	74 2f                	je     c0004cfb <get_fileinfo+0x120>
c0004ccc:	83 fd 08             	cmp    ebp,0x8
c0004ccf:	74 2a                	je     c0004cfb <get_fileinfo+0x120>
c0004cd1:	83 fd 0b             	cmp    ebp,0xb
c0004cd4:	74 25                	je     c0004cfb <get_fileinfo+0x120>
c0004cd6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cd9:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004cdd:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ce1:	e8 52 d0 ff ff       	call   c0001d38 <dbc_2nd>
c0004ce6:	85 c0                	test   eax,eax
c0004ce8:	74 11                	je     c0004cfb <get_fileinfo+0x120>
c0004cea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cee:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cf3:	c1 e2 08             	shl    edx,0x8
c0004cf6:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cf9:	09 c2                	or     edx,eax
c0004cfb:	0f b7 d2             	movzx  edx,dx
c0004cfe:	50                   	push   eax
c0004cff:	50                   	push   eax
c0004d00:	68 b5 01 00 00       	push   0x1b5
c0004d05:	52                   	push   edx
c0004d06:	e8 46 38 00 00       	call   c0008551 <ff_oem2uni>
c0004d0b:	83 c4 10             	add    esp,0x10
c0004d0e:	66 85 c0             	test   ax,ax
c0004d11:	75 04                	jne    c0004d17 <get_fileinfo+0x13c>
c0004d13:	31 ff                	xor    edi,edi
c0004d15:	eb 23                	jmp    c0004d3a <get_fileinfo+0x15f>
c0004d17:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d1c:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d20:	29 f9                	sub    ecx,edi
c0004d22:	0f b7 c0             	movzx  eax,ax
c0004d25:	e8 d7 d0 ff ff       	call   c0001e01 <put_utf>
c0004d2a:	84 c0                	test   al,al
c0004d2c:	74 e5                	je     c0004d13 <get_fileinfo+0x138>
c0004d2e:	0f b6 c0             	movzx  eax,al
c0004d31:	01 c7                	add    edi,eax
c0004d33:	89 e9                	mov    ecx,ebp
c0004d35:	e9 4a ff ff ff       	jmp    c0004c84 <get_fileinfo+0xa9>
c0004d3a:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d3f:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d43:	75 54                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d45:	85 ff                	test   edi,edi
c0004d47:	75 0b                	jne    c0004d54 <get_fileinfo+0x179>
c0004d49:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d4d:	ba 01 00 00 00       	mov    edx,0x1
c0004d52:	eb 33                	jmp    c0004d87 <get_fileinfo+0x1ac>
c0004d54:	b1 08                	mov    cl,0x8
c0004d56:	31 d2                	xor    edx,edx
c0004d58:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d5e:	84 c0                	test   al,al
c0004d60:	74 25                	je     c0004d87 <get_fileinfo+0x1ac>
c0004d62:	66 83 f8 2e          	cmp    ax,0x2e
c0004d66:	74 16                	je     c0004d7e <get_fileinfo+0x1a3>
c0004d68:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d6b:	66 83 ff 19          	cmp    di,0x19
c0004d6f:	77 0f                	ja     c0004d80 <get_fileinfo+0x1a5>
c0004d71:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d74:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d77:	74 07                	je     c0004d80 <get_fileinfo+0x1a5>
c0004d79:	83 c0 20             	add    eax,0x20
c0004d7c:	eb 02                	jmp    c0004d80 <get_fileinfo+0x1a5>
c0004d7e:	b1 10                	mov    cl,0x10
c0004d80:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d84:	42                   	inc    edx
c0004d85:	eb d1                	jmp    c0004d58 <get_fileinfo+0x17d>
c0004d87:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d8c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8f:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d93:	75 04                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d95:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d99:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d9c:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d9f:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004da2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004da5:	83 c0 1c             	add    eax,0x1c
c0004da8:	e8 c1 ce ff ff       	call   c0001c6e <ld_dword>
c0004dad:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004db4:	89 03                	mov    DWORD PTR [ebx],eax
c0004db6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004db9:	83 c0 16             	add    eax,0x16
c0004dbc:	e8 a0 ce ff ff       	call   c0001c61 <ld_word>
c0004dc1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004dc5:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dc8:	83 c0 18             	add    eax,0x18
c0004dcb:	e8 91 ce ff ff       	call   c0001c61 <ld_word>
c0004dd0:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004dd4:	83 c4 1c             	add    esp,0x1c
c0004dd7:	5b                   	pop    ebx
c0004dd8:	5e                   	pop    esi
c0004dd9:	5f                   	pop    edi
c0004dda:	5d                   	pop    ebp
c0004ddb:	c3                   	ret    

c0004ddc <ld_clust.isra.0>:
c0004ddc:	56                   	push   esi
c0004ddd:	89 c6                	mov    esi,eax
c0004ddf:	53                   	push   ebx
c0004de0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004de3:	89 d3                	mov    ebx,edx
c0004de5:	e8 77 ce ff ff       	call   c0001c61 <ld_word>
c0004dea:	0f b7 c8             	movzx  ecx,ax
c0004ded:	89 f0                	mov    eax,esi
c0004def:	3c 03                	cmp    al,0x3
c0004df1:	75 0d                	jne    c0004e00 <ld_clust.isra.0+0x24>
c0004df3:	8d 43 14             	lea    eax,[ebx+0x14]
c0004df6:	e8 66 ce ff ff       	call   c0001c61 <ld_word>
c0004dfb:	c1 e0 10             	shl    eax,0x10
c0004dfe:	09 c1                	or     ecx,eax
c0004e00:	89 c8                	mov    eax,ecx
c0004e02:	5b                   	pop    ebx
c0004e03:	5e                   	pop    esi
c0004e04:	c3                   	ret    

c0004e05 <st_clust.isra.1>:
c0004e05:	56                   	push   esi
c0004e06:	89 c6                	mov    esi,eax
c0004e08:	53                   	push   ebx
c0004e09:	89 d3                	mov    ebx,edx
c0004e0b:	0f b7 d1             	movzx  edx,cx
c0004e0e:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004e11:	e8 bd ce ff ff       	call   c0001cd3 <st_word>
c0004e16:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e19:	75 0f                	jne    c0004e2a <st_clust.isra.1+0x25>
c0004e1b:	c1 e9 10             	shr    ecx,0x10
c0004e1e:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e21:	89 ca                	mov    edx,ecx
c0004e23:	5b                   	pop    ebx
c0004e24:	5e                   	pop    esi
c0004e25:	e9 a9 ce ff ff       	jmp    c0001cd3 <st_word>
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <init_alloc_info.isra.2>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c6                	mov    esi,eax
c0004e31:	89 d3                	mov    ebx,edx
c0004e33:	51                   	push   ecx
c0004e34:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e36:	83 c0 34             	add    eax,0x34
c0004e39:	e8 30 ce ff ff       	call   c0001c6e <ld_dword>
c0004e3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e41:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e43:	83 c0 38             	add    eax,0x38
c0004e46:	e8 3b ce ff ff       	call   c0001c86 <ld_qword>
c0004e4b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e4e:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e51:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e53:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e56:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5d:	83 e0 02             	and    eax,0x2
c0004e60:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e63:	5b                   	pop    ebx
c0004e64:	5b                   	pop    ebx
c0004e65:	5e                   	pop    esi
c0004e66:	c3                   	ret    

c0004e67 <follow_path>:
c0004e67:	56                   	push   esi
c0004e68:	53                   	push   ebx
c0004e69:	89 c3                	mov    ebx,eax
c0004e6b:	83 ec 14             	sub    esp,0x14
c0004e6e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e72:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e78:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e7a:	80 fa 5c             	cmp    dl,0x5c
c0004e7d:	75 07                	jne    c0004e86 <follow_path+0x1f>
c0004e7f:	40                   	inc    eax
c0004e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e84:	eb ee                	jmp    c0004e74 <follow_path+0xd>
c0004e86:	80 fa 2f             	cmp    dl,0x2f
c0004e89:	74 f4                	je     c0004e7f <follow_path+0x18>
c0004e8b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e92:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e99:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e9c:	77 52                	ja     c0004ef0 <follow_path+0x89>
c0004e9e:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004ea2:	31 d2                	xor    edx,edx
c0004ea4:	89 d8                	mov    eax,ebx
c0004ea6:	e8 12 e3 ff ff       	call   c00031bd <dir_sdi>
c0004eab:	eb 7c                	jmp    c0004f29 <follow_path+0xc2>
c0004ead:	89 d8                	mov    eax,ebx
c0004eaf:	e8 6e f2 ff ff       	call   c0004122 <dir_find>
c0004eb4:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004eb7:	85 c0                	test   eax,eax
c0004eb9:	75 46                	jne    c0004f01 <follow_path+0x9a>
c0004ebb:	80 e2 04             	and    dl,0x4
c0004ebe:	75 69                	jne    c0004f29 <follow_path+0xc2>
c0004ec0:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ec4:	74 5e                	je     c0004f24 <follow_path+0xbd>
c0004ec6:	8a 06                	mov    al,BYTE PTR [esi]
c0004ec8:	3c 04                	cmp    al,0x4
c0004eca:	75 41                	jne    c0004f0d <follow_path+0xa6>
c0004ecc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ecf:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004ed3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ed6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ed9:	30 c0                	xor    al,al
c0004edb:	09 d0                	or     eax,edx
c0004edd:	89 da                	mov    edx,ebx
c0004edf:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ee2:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ee5:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004ee8:	8d 46 10             	lea    eax,[esi+0x10]
c0004eeb:	e8 3d ff ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0004ef0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ef4:	89 d8                	mov    eax,ebx
c0004ef6:	e8 a9 ed ff ff       	call   c0003ca4 <create_name>
c0004efb:	85 c0                	test   eax,eax
c0004efd:	74 ae                	je     c0004ead <follow_path+0x46>
c0004eff:	eb 28                	jmp    c0004f29 <follow_path+0xc2>
c0004f01:	83 f8 04             	cmp    eax,0x4
c0004f04:	75 23                	jne    c0004f29 <follow_path+0xc2>
c0004f06:	80 e2 04             	and    dl,0x4
c0004f09:	74 19                	je     c0004f24 <follow_path+0xbd>
c0004f0b:	eb 1c                	jmp    c0004f29 <follow_path+0xc2>
c0004f0d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004f10:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f16:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f1a:	e8 bd fe ff ff       	call   c0004ddc <ld_clust.isra.0>
c0004f1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f22:	eb cc                	jmp    c0004ef0 <follow_path+0x89>
c0004f24:	b8 05 00 00 00       	mov    eax,0x5
c0004f29:	83 c4 14             	add    esp,0x14
c0004f2c:	5b                   	pop    ebx
c0004f2d:	5e                   	pop    esi
c0004f2e:	c3                   	ret    

c0004f2f <f_mount>:
c0004f2f:	53                   	push   ebx
c0004f30:	83 ec 18             	sub    esp,0x18
c0004f33:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f37:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f3f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f43:	e8 fb d2 ff ff       	call   c0002243 <get_ldnumber>
c0004f48:	89 c2                	mov    edx,eax
c0004f4a:	b8 0b 00 00 00       	mov    eax,0xb
c0004f4f:	85 d2                	test   edx,edx
c0004f51:	78 39                	js     c0004f8c <f_mount+0x5d>
c0004f53:	8b 04 95 e0 e5 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1a20]
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 03                	je     c0004f61 <f_mount+0x32>
c0004f5e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f65:	85 c0                	test   eax,eax
c0004f67:	74 03                	je     c0004f6c <f_mount+0x3d>
c0004f69:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f70:	89 04 95 e0 e5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1a20],eax
c0004f77:	31 c0                	xor    eax,eax
c0004f79:	84 db                	test   bl,bl
c0004f7b:	74 0f                	je     c0004f8c <f_mount+0x5d>
c0004f7d:	31 c9                	xor    ecx,ecx
c0004f7f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f83:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f87:	e8 65 d7 ff ff       	call   c00026f1 <mount_volume>
c0004f8c:	83 c4 18             	add    esp,0x18
c0004f8f:	5b                   	pop    ebx
c0004f90:	c3                   	ret    

c0004f91 <f_open>:
c0004f91:	55                   	push   ebp
c0004f92:	bd 09 00 00 00       	mov    ebp,0x9
c0004f97:	57                   	push   edi
c0004f98:	56                   	push   esi
c0004f99:	53                   	push   ebx
c0004f9a:	83 ec 7c             	sub    esp,0x7c
c0004f9d:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004fa4:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004fab:	85 db                	test   ebx,ebx
c0004fad:	0f 84 10 04 00 00    	je     c00053c3 <f_open+0x432>
c0004fb3:	89 fe                	mov    esi,edi
c0004fb5:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fb9:	83 e6 3f             	and    esi,0x3f
c0004fbc:	89 f0                	mov    eax,esi
c0004fbe:	0f b6 c8             	movzx  ecx,al
c0004fc1:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004fc8:	e8 24 d7 ff ff       	call   c00026f1 <mount_volume>
c0004fcd:	89 c5                	mov    ebp,eax
c0004fcf:	85 c0                	test   eax,eax
c0004fd1:	0f 85 e6 03 00 00    	jne    c00053bd <f_open+0x42c>
c0004fd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fdb:	bd 11 00 00 00       	mov    ebp,0x11
c0004fe0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fe4:	83 ec 0c             	sub    esp,0xc
c0004fe7:	68 60 04 00 00       	push   0x460
c0004fec:	e8 a3 34 00 00       	call   c0008494 <ff_memalloc>
c0004ff1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ff5:	83 c4 10             	add    esp,0x10
c0004ff8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ffd:	0f 84 c0 03 00 00    	je     c00053c3 <f_open+0x432>
c0005003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005007:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000500b:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0005011:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0005014:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005017:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c000501e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005022:	e8 40 fe ff ff       	call   c0004e67 <follow_path>
c0005027:	89 c5                	mov    ebp,eax
c0005029:	85 c0                	test   eax,eax
c000502b:	75 0c                	jne    c0005039 <f_open+0xa8>
c000502d:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0005032:	79 05                	jns    c0005039 <f_open+0xa8>
c0005034:	bd 06 00 00 00       	mov    ebp,0x6
c0005039:	f7 c7 1c 00 00 00    	test   edi,0x1c
c000503f:	0f 84 84 01 00 00    	je     c00051c9 <f_open+0x238>
c0005045:	85 ed                	test   ebp,ebp
c0005047:	74 20                	je     c0005069 <f_open+0xd8>
c0005049:	83 fd 04             	cmp    ebp,0x4
c000504c:	0f 85 58 03 00 00    	jne    c00053aa <f_open+0x419>
c0005052:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005056:	83 ce 08             	or     esi,0x8
c0005059:	e8 8a f2 ff ff       	call   c00042e8 <dir_register>
c000505e:	89 c5                	mov    ebp,eax
c0005060:	85 c0                	test   eax,eax
c0005062:	74 2f                	je     c0005093 <f_open+0x102>
c0005064:	e9 41 03 00 00       	jmp    c00053aa <f_open+0x419>
c0005069:	bd 07 00 00 00       	mov    ebp,0x7
c000506e:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005073:	0f 85 31 03 00 00    	jne    c00053aa <f_open+0x419>
c0005079:	bd 08 00 00 00       	mov    ebp,0x8
c000507e:	f7 c7 04 00 00 00    	test   edi,0x4
c0005084:	0f 85 20 03 00 00    	jne    c00053aa <f_open+0x419>
c000508a:	83 e7 08             	and    edi,0x8
c000508d:	0f 84 65 01 00 00    	je     c00051f8 <f_open+0x267>
c0005093:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005097:	8a 02                	mov    al,BYTE PTR [edx]
c0005099:	3c 04                	cmp    al,0x4
c000509b:	0f 85 97 00 00 00    	jne    c0005138 <f_open+0x1a7>
c00050a1:	8d 42 10             	lea    eax,[edx+0x10]
c00050a4:	89 13                	mov    DWORD PTR [ebx],edx
c00050a6:	89 da                	mov    edx,ebx
c00050a8:	e8 80 fd ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c00050ad:	31 d2                	xor    edx,edx
c00050af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b3:	b9 1e 00 00 00       	mov    ecx,0x1e
c00050b8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050bb:	83 c0 02             	add    eax,0x2
c00050be:	e8 32 cc ff ff       	call   c0001cf5 <mem_set>
c00050c3:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050c8:	31 d2                	xor    edx,edx
c00050ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050d1:	83 c0 26             	add    eax,0x26
c00050d4:	e8 1c cc ff ff       	call   c0001cf5 <mem_set>
c00050d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050e0:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050e4:	ba 00 00 21 50       	mov    edx,0x50210000
c00050e9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050ec:	83 c0 08             	add    eax,0x8
c00050ef:	e8 e3 cb ff ff       	call   c0001cd7 <st_dword>
c00050f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050fb:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050ff:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005103:	e8 b7 ea ff ff       	call   c0003bbf <store_xdir>
c0005108:	89 c5                	mov    ebp,eax
c000510a:	85 c0                	test   eax,eax
c000510c:	0f 85 98 02 00 00    	jne    c00053aa <f_open+0x419>
c0005112:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005115:	85 d2                	test   edx,edx
c0005117:	0f 84 db 00 00 00    	je     c00051f8 <f_open+0x267>
c000511d:	31 c9                	xor    ecx,ecx
c000511f:	89 d8                	mov    eax,ebx
c0005121:	e8 8e e3 ff ff       	call   c00034b4 <remove_chain>
c0005126:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000512a:	89 c5                	mov    ebp,eax
c000512c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000512f:	48                   	dec    eax
c0005130:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005133:	e9 b8 00 00 00       	jmp    c00051f0 <f_open+0x25f>
c0005138:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000513c:	89 ea                	mov    edx,ebp
c000513e:	e8 99 fc ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005143:	ba 00 00 21 50       	mov    edx,0x50210000
c0005148:	89 c7                	mov    edi,eax
c000514a:	8d 45 0e             	lea    eax,[ebp+0xe]
c000514d:	e8 85 cb ff ff       	call   c0001cd7 <st_dword>
c0005152:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005156:	31 c9                	xor    ecx,ecx
c0005158:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c000515c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005160:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005164:	e8 9c fc ff ff       	call   c0004e05 <st_clust.isra.1>
c0005169:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000516d:	31 d2                	xor    edx,edx
c000516f:	83 c0 1c             	add    eax,0x1c
c0005172:	e8 60 cb ff ff       	call   c0001cd7 <st_dword>
c0005177:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517b:	85 ff                	test   edi,edi
c000517d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005181:	74 75                	je     c00051f8 <f_open+0x267>
c0005183:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005187:	31 c9                	xor    ecx,ecx
c0005189:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000518c:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000518f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005193:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005197:	89 fa                	mov    edx,edi
c0005199:	8d 44 24 24          	lea    eax,[esp+0x24]
c000519d:	e8 12 e3 ff ff       	call   c00034b4 <remove_chain>
c00051a2:	89 c5                	mov    ebp,eax
c00051a4:	85 c0                	test   eax,eax
c00051a6:	0f 85 fe 01 00 00    	jne    c00053aa <f_open+0x419>
c00051ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00051b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051b8:	4f                   	dec    edi
c00051b9:	e8 81 d2 ff ff       	call   c000243f <move_window>
c00051be:	89 c5                	mov    ebp,eax
c00051c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051c4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051c7:	eb 27                	jmp    c00051f0 <f_open+0x25f>
c00051c9:	85 ed                	test   ebp,ebp
c00051cb:	0f 85 d9 01 00 00    	jne    c00053aa <f_open+0x419>
c00051d1:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051d5:	bd 04 00 00 00       	mov    ebp,0x4
c00051da:	a8 10                	test   al,0x10
c00051dc:	0f 85 c8 01 00 00    	jne    c00053aa <f_open+0x419>
c00051e2:	83 e7 02             	and    edi,0x2
c00051e5:	74 11                	je     c00051f8 <f_open+0x267>
c00051e7:	bd 07 00 00 00       	mov    ebp,0x7
c00051ec:	a8 01                	test   al,0x1
c00051ee:	eb 02                	jmp    c00051f2 <f_open+0x261>
c00051f0:	85 ed                	test   ebp,ebp
c00051f2:	0f 85 b2 01 00 00    	jne    c00053aa <f_open+0x419>
c00051f8:	f7 c6 08 00 00 00    	test   esi,0x8
c00051fe:	74 03                	je     c0005203 <f_open+0x272>
c0005200:	83 ce 40             	or     esi,0x40
c0005203:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005207:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c000520a:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c000520d:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005210:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0005213:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005217:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c000521a:	8a 02                	mov    al,BYTE PTR [edx]
c000521c:	3c 04                	cmp    al,0x4
c000521e:	75 2a                	jne    c000524a <f_open+0x2b9>
c0005220:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005224:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005229:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000522c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005230:	30 c0                	xor    al,al
c0005232:	09 c8                	or     eax,ecx
c0005234:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005237:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000523b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000523e:	8d 42 10             	lea    eax,[edx+0x10]
c0005241:	89 da                	mov    edx,ebx
c0005243:	e8 e5 fb ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0005248:	eb 1c                	jmp    c0005266 <f_open+0x2d5>
c000524a:	89 fa                	mov    edx,edi
c000524c:	e8 8b fb ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005251:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005254:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005257:	e8 12 ca ff ff       	call   c0001c6e <ld_dword>
c000525c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005263:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005266:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000526a:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005271:	89 03                	mov    DWORD PTR [ebx],eax
c0005273:	31 d2                	xor    edx,edx
c0005275:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005279:	b9 00 02 00 00       	mov    ecx,0x200
c000527e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005282:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005286:	89 f0                	mov    eax,esi
c0005288:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000528f:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005292:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005299:	8d 43 50             	lea    eax,[ebx+0x50]
c000529c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00052a3:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00052aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00052ae:	e8 42 ca ff ff       	call   c0001cf5 <mem_set>
c00052b3:	83 e6 20             	and    esi,0x20
c00052b6:	75 07                	jne    c00052bf <f_open+0x32e>
c00052b8:	31 ed                	xor    ebp,ebp
c00052ba:	e9 eb 00 00 00       	jmp    c00053aa <f_open+0x419>
c00052bf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052c2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052d1:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052d5:	74 e1                	je     c00052b8 <f_open+0x327>
c00052d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052df:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052e2:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052e9:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052ec:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052f0:	31 ff                	xor    edi,edi
c00052f2:	c1 e5 09             	shl    ebp,0x9
c00052f5:	89 ee                	mov    esi,ebp
c00052f7:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052fb:	89 f8                	mov    eax,edi
c00052fd:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005301:	73 22                	jae    c0005325 <f_open+0x394>
c0005303:	89 d8                	mov    eax,ebx
c0005305:	e8 bd dc ff ff       	call   c0002fc7 <get_fat>
c000530a:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000530e:	89 c2                	mov    edx,eax
c0005310:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005314:	83 f8 01             	cmp    eax,0x1
c0005317:	76 10                	jbe    c0005329 <f_open+0x398>
c0005319:	83 f8 ff             	cmp    eax,0xffffffff
c000531c:	75 d9                	jne    c00052f7 <f_open+0x366>
c000531e:	bd 01 00 00 00       	mov    ebp,0x1
c0005323:	eb 09                	jmp    c000532e <f_open+0x39d>
c0005325:	31 ed                	xor    ebp,ebp
c0005327:	eb 05                	jmp    c000532e <f_open+0x39d>
c0005329:	bd 02 00 00 00       	mov    ebp,0x2
c000532e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005331:	85 ed                	test   ebp,ebp
c0005333:	75 75                	jne    c00053aa <f_open+0x419>
c0005335:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005339:	25 ff 01 00 00       	and    eax,0x1ff
c000533e:	0f 84 74 ff ff ff    	je     c00052b8 <f_open+0x327>
c0005344:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005348:	bd 02 00 00 00       	mov    ebp,0x2
c000534d:	89 c8                	mov    eax,ecx
c000534f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005353:	e8 a2 cb ff ff       	call   c0001efa <clst2sect>
c0005358:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000535c:	89 d7                	mov    edi,edx
c000535e:	09 c7                	or     edi,eax
c0005360:	74 48                	je     c00053aa <f_open+0x419>
c0005362:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005366:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000536a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005372:	0f ac fe 09          	shrd   esi,edi,0x9
c0005376:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000537a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000537e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005381:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005385:	83 ec 0c             	sub    esp,0xc
c0005388:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000538b:	6a 01                	push   0x1
c000538d:	52                   	push   edx
c000538e:	50                   	push   eax
c000538f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005393:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005397:	50                   	push   eax
c0005398:	e8 79 c8 ff ff       	call   c0001c16 <disk_read>
c000539d:	83 c4 20             	add    esp,0x20
c00053a0:	85 c0                	test   eax,eax
c00053a2:	0f 95 c0             	setne  al
c00053a5:	0f b6 c0             	movzx  eax,al
c00053a8:	89 c5                	mov    ebp,eax
c00053aa:	83 ec 0c             	sub    esp,0xc
c00053ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00053b1:	e8 f4 30 00 00       	call   c00084aa <ff_memfree>
c00053b6:	83 c4 10             	add    esp,0x10
c00053b9:	85 ed                	test   ebp,ebp
c00053bb:	74 06                	je     c00053c3 <f_open+0x432>
c00053bd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053c3:	83 c4 7c             	add    esp,0x7c
c00053c6:	89 e8                	mov    eax,ebp
c00053c8:	5b                   	pop    ebx
c00053c9:	5e                   	pop    esi
c00053ca:	5f                   	pop    edi
c00053cb:	5d                   	pop    ebp
c00053cc:	c3                   	ret    

c00053cd <f_read>:
c00053cd:	55                   	push   ebp
c00053ce:	57                   	push   edi
c00053cf:	56                   	push   esi
c00053d0:	53                   	push   ebx
c00053d1:	83 ec 2c             	sub    esp,0x2c
c00053d4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053d8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053dc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053e6:	89 d8                	mov    eax,ebx
c00053e8:	e8 77 cf ff ff       	call   c0002364 <validate>
c00053ed:	89 c5                	mov    ebp,eax
c00053ef:	85 c0                	test   eax,eax
c00053f1:	0f 85 4c 02 00 00    	jne    c0005643 <f_read+0x276>
c00053f7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053fb:	85 ed                	test   ebp,ebp
c00053fd:	0f 85 40 02 00 00    	jne    c0005643 <f_read+0x276>
c0005403:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005407:	0f 84 31 02 00 00    	je     c000563e <f_read+0x271>
c000540d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005410:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005413:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005416:	bf 00 00 00 00       	mov    edi,0x0
c000541b:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000541e:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005422:	89 d1                	mov    ecx,edx
c0005424:	19 f9                	sbb    ecx,edi
c0005426:	0f 83 cf 00 00 00    	jae    c00054fb <f_read+0x12e>
c000542c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005430:	e9 c6 00 00 00       	jmp    c00054fb <f_read+0x12e>
c0005435:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005438:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000543b:	89 d0                	mov    eax,edx
c000543d:	25 ff 01 00 00       	and    eax,0x1ff
c0005442:	0f 85 c9 01 00 00    	jne    c0005611 <f_read+0x244>
c0005448:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000544c:	89 d6                	mov    esi,edx
c000544e:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005452:	89 cf                	mov    edi,ecx
c0005454:	48                   	dec    eax
c0005455:	0f ac fe 09          	shrd   esi,edi,0x9
c0005459:	21 f0                	and    eax,esi
c000545b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000545f:	0f 84 a6 00 00 00    	je     c000550b <f_read+0x13e>
c0005465:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005469:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000546c:	89 c8                	mov    eax,ecx
c000546e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005471:	e8 84 ca ff ff       	call   c0001efa <clst2sect>
c0005476:	89 d7                	mov    edi,edx
c0005478:	09 c7                	or     edi,eax
c000547a:	0f 84 b4 00 00 00    	je     c0005534 <f_read+0x167>
c0005480:	31 ff                	xor    edi,edi
c0005482:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005486:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005489:	01 c6                	add    esi,eax
c000548b:	11 d7                	adc    edi,edx
c000548d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005495:	0f 86 fd 00 00 00    	jbe    c0005598 <f_read+0x1cb>
c000549b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000549f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054a3:	c1 e8 09             	shr    eax,0x9
c00054a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00054a9:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054ad:	03 14 24             	add    edx,DWORD PTR [esp]
c00054b0:	39 c2                	cmp    edx,eax
c00054b2:	76 07                	jbe    c00054bb <f_read+0xee>
c00054b4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00054bb:	83 ec 0c             	sub    esp,0xc
c00054be:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054c2:	57                   	push   edi
c00054c3:	56                   	push   esi
c00054c4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 44 c7 ff ff       	call   c0001c16 <disk_read>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	75 6e                	jne    c0005547 <f_read+0x17a>
c00054d9:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054dd:	78 7e                	js     c000555d <f_read+0x190>
c00054df:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054e2:	c1 e6 09             	shl    esi,0x9
c00054e5:	31 ff                	xor    edi,edi
c00054e7:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054eb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054ef:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054f3:	01 30                	add    DWORD PTR [eax],esi
c00054f5:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054f8:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054fb:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005500:	0f 85 2f ff ff ff    	jne    c0005435 <f_read+0x68>
c0005506:	e9 38 01 00 00       	jmp    c0005643 <f_read+0x276>
c000550b:	89 c8                	mov    eax,ecx
c000550d:	09 d0                	or     eax,edx
c000550f:	75 05                	jne    c0005516 <f_read+0x149>
c0005511:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005514:	eb 19                	jmp    c000552f <f_read+0x162>
c0005516:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000551a:	74 09                	je     c0005525 <f_read+0x158>
c000551c:	89 d8                	mov    eax,ebx
c000551e:	e8 f8 c9 ff ff       	call   c0001f1b <clmt_clust>
c0005523:	eb 0a                	jmp    c000552f <f_read+0x162>
c0005525:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005528:	89 d8                	mov    eax,ebx
c000552a:	e8 98 da ff ff       	call   c0002fc7 <get_fat>
c000552f:	83 f8 01             	cmp    eax,0x1
c0005532:	77 0e                	ja     c0005542 <f_read+0x175>
c0005534:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005538:	bd 02 00 00 00       	mov    ebp,0x2
c000553d:	e9 01 01 00 00       	jmp    c0005643 <f_read+0x276>
c0005542:	83 f8 ff             	cmp    eax,0xffffffff
c0005545:	75 0e                	jne    c0005555 <f_read+0x188>
c0005547:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000554b:	bd 01 00 00 00       	mov    ebp,0x1
c0005550:	e9 ee 00 00 00       	jmp    c0005643 <f_read+0x276>
c0005555:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005558:	e9 08 ff ff ff       	jmp    c0005465 <f_read+0x98>
c000555d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005560:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005563:	29 f0                	sub    eax,esi
c0005565:	19 fa                	sbb    edx,edi
c0005567:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000556a:	89 d7                	mov    edi,edx
c000556c:	ba 00 00 00 00       	mov    edx,0x0
c0005571:	89 f9                	mov    ecx,edi
c0005573:	19 d1                	sbb    ecx,edx
c0005575:	0f 83 64 ff ff ff    	jae    c00054df <f_read+0x112>
c000557b:	89 c7                	mov    edi,eax
c000557d:	8d 53 50             	lea    edx,[ebx+0x50]
c0005580:	c1 e7 09             	shl    edi,0x9
c0005583:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005587:	b9 00 02 00 00       	mov    ecx,0x200
c000558c:	01 f8                	add    eax,edi
c000558e:	e8 4d c7 ff ff       	call   c0001ce0 <mem_cpy>
c0005593:	e9 47 ff ff ff       	jmp    c00054df <f_read+0x112>
c0005598:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000559b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000559e:	89 04 24             	mov    DWORD PTR [esp],eax
c00055a1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00055a5:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00055a9:	75 05                	jne    c00055b0 <f_read+0x1e3>
c00055ab:	39 34 24             	cmp    DWORD PTR [esp],esi
c00055ae:	74 5b                	je     c000560b <f_read+0x23e>
c00055b0:	8d 43 50             	lea    eax,[ebx+0x50]
c00055b3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055bb:	79 2a                	jns    c00055e7 <f_read+0x21a>
c00055bd:	83 ec 0c             	sub    esp,0xc
c00055c0:	6a 01                	push   0x1
c00055c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055ce:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055d2:	50                   	push   eax
c00055d3:	e8 54 c6 ff ff       	call   c0001c2c <disk_write>
c00055d8:	83 c4 20             	add    esp,0x20
c00055db:	85 c0                	test   eax,eax
c00055dd:	0f 85 64 ff ff ff    	jne    c0005547 <f_read+0x17a>
c00055e3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055e7:	83 ec 0c             	sub    esp,0xc
c00055ea:	6a 01                	push   0x1
c00055ec:	57                   	push   edi
c00055ed:	56                   	push   esi
c00055ee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055f2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055fa:	50                   	push   eax
c00055fb:	e8 16 c6 ff ff       	call   c0001c16 <disk_read>
c0005600:	83 c4 20             	add    esp,0x20
c0005603:	85 c0                	test   eax,eax
c0005605:	0f 85 3c ff ff ff    	jne    c0005547 <f_read+0x17a>
c000560b:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000560e:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005611:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005614:	ba 00 02 00 00       	mov    edx,0x200
c0005619:	25 ff 01 00 00       	and    eax,0x1ff
c000561e:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005622:	29 c2                	sub    edx,eax
c0005624:	39 d6                	cmp    esi,edx
c0005626:	76 02                	jbe    c000562a <f_read+0x25d>
c0005628:	89 d6                	mov    esi,edx
c000562a:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000562e:	89 f1                	mov    ecx,esi
c0005630:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005634:	e8 a7 c6 ff ff       	call   c0001ce0 <mem_cpy>
c0005639:	e9 a7 fe ff ff       	jmp    c00054e5 <f_read+0x118>
c000563e:	bd 07 00 00 00       	mov    ebp,0x7
c0005643:	83 c4 2c             	add    esp,0x2c
c0005646:	89 e8                	mov    eax,ebp
c0005648:	5b                   	pop    ebx
c0005649:	5e                   	pop    esi
c000564a:	5f                   	pop    edi
c000564b:	5d                   	pop    ebp
c000564c:	c3                   	ret    

c000564d <f_write>:
c000564d:	55                   	push   ebp
c000564e:	57                   	push   edi
c000564f:	56                   	push   esi
c0005650:	53                   	push   ebx
c0005651:	83 ec 2c             	sub    esp,0x2c
c0005654:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005658:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000565c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005662:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005666:	89 d8                	mov    eax,ebx
c0005668:	e8 f7 cc ff ff       	call   c0002364 <validate>
c000566d:	89 c5                	mov    ebp,eax
c000566f:	85 c0                	test   eax,eax
c0005671:	0f 85 86 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005677:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000567b:	85 ed                	test   ebp,ebp
c000567d:	0f 85 7a 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005683:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005687:	0f 84 6b 02 00 00    	je     c00058f8 <f_write+0x2ab>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005694:	0f 84 43 01 00 00    	je     c00057dd <f_write+0x190>
c000569a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000569d:	89 c1                	mov    ecx,eax
c000569f:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00056a3:	0f 83 34 01 00 00    	jae    c00057dd <f_write+0x190>
c00056a9:	f7 d0                	not    eax
c00056ab:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00056af:	e9 29 01 00 00       	jmp    c00057dd <f_write+0x190>
c00056b4:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00056b7:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00056ba:	89 d0                	mov    eax,edx
c00056bc:	25 ff 01 00 00       	and    eax,0x1ff
c00056c1:	0f 85 00 02 00 00    	jne    c00058c7 <f_write+0x27a>
c00056c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056cb:	89 d6                	mov    esi,edx
c00056cd:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056d1:	89 cf                	mov    edi,ecx
c00056d3:	48                   	dec    eax
c00056d4:	0f ac fe 09          	shrd   esi,edi,0x9
c00056d8:	21 f0                	and    eax,esi
c00056da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056de:	0f 84 06 01 00 00    	je     c00057ea <f_write+0x19d>
c00056e4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056e8:	0f 88 6e 01 00 00    	js     c000585c <f_write+0x20f>
c00056ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056f2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056f5:	89 c8                	mov    eax,ecx
c00056f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056fb:	e8 fa c7 ff ff       	call   c0001efa <clst2sect>
c0005700:	89 d1                	mov    ecx,edx
c0005702:	09 c1                	or     ecx,eax
c0005704:	0f 84 1c 01 00 00    	je     c0005826 <f_write+0x1d9>
c000570a:	31 ff                	xor    edi,edi
c000570c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005710:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005714:	01 c6                	add    esi,eax
c0005716:	11 d7                	adc    edi,edx
c0005718:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005720:	0f 86 63 01 00 00    	jbe    c0005889 <f_write+0x23c>
c0005726:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000572a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000572e:	c1 e8 09             	shr    eax,0x9
c0005731:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005735:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005739:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000573d:	39 c2                	cmp    edx,eax
c000573f:	76 08                	jbe    c0005749 <f_write+0xfc>
c0005741:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005745:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005749:	83 ec 0c             	sub    esp,0xc
c000574c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005750:	57                   	push   edi
c0005751:	56                   	push   esi
c0005752:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005756:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000575a:	50                   	push   eax
c000575b:	e8 cc c4 ff ff       	call   c0001c2c <disk_write>
c0005760:	83 c4 20             	add    esp,0x20
c0005763:	85 c0                	test   eax,eax
c0005765:	0f 85 ce 00 00 00    	jne    c0005839 <f_write+0x1ec>
c000576b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000576e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005771:	29 f0                	sub    eax,esi
c0005773:	19 fa                	sbb    edx,edi
c0005775:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005779:	89 d7                	mov    edi,edx
c000577b:	ba 00 00 00 00       	mov    edx,0x0
c0005780:	89 f9                	mov    ecx,edi
c0005782:	19 d1                	sbb    ecx,edx
c0005784:	73 1c                	jae    c00057a2 <f_write+0x155>
c0005786:	89 c7                	mov    edi,eax
c0005788:	b9 00 02 00 00       	mov    ecx,0x200
c000578d:	c1 e7 09             	shl    edi,0x9
c0005790:	8d 43 50             	lea    eax,[ebx+0x50]
c0005793:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005797:	89 fa                	mov    edx,edi
c0005799:	e8 42 c5 ff ff       	call   c0001ce0 <mem_cpy>
c000579e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00057a2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00057a6:	c1 e6 09             	shl    esi,0x9
c00057a9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00057ad:	31 ff                	xor    edi,edi
c00057af:	01 30                	add    DWORD PTR [eax],esi
c00057b1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00057b9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057bc:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057bf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057c2:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057c5:	89 c1                	mov    ecx,eax
c00057c7:	39 f2                	cmp    edx,esi
c00057c9:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057cc:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057cf:	19 f9                	sbb    ecx,edi
c00057d1:	73 04                	jae    c00057d7 <f_write+0x18a>
c00057d3:	89 f2                	mov    edx,esi
c00057d5:	89 f8                	mov    eax,edi
c00057d7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057da:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057dd:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057e2:	0f 85 cc fe ff ff    	jne    c00056b4 <f_write+0x67>
c00057e8:	eb 2e                	jmp    c0005818 <f_write+0x1cb>
c00057ea:	89 c8                	mov    eax,ecx
c00057ec:	09 d0                	or     eax,edx
c00057ee:	75 0b                	jne    c00057fb <f_write+0x1ae>
c00057f0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057f3:	31 d2                	xor    edx,edx
c00057f5:	85 c0                	test   eax,eax
c00057f7:	75 28                	jne    c0005821 <f_write+0x1d4>
c00057f9:	eb 12                	jmp    c000580d <f_write+0x1c0>
c00057fb:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057ff:	74 09                	je     c000580a <f_write+0x1bd>
c0005801:	89 d8                	mov    eax,ebx
c0005803:	e8 13 c7 ff ff       	call   c0001f1b <clmt_clust>
c0005808:	eb 0a                	jmp    c0005814 <f_write+0x1c7>
c000580a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000580d:	89 d8                	mov    eax,ebx
c000580f:	e8 a1 da ff ff       	call   c00032b5 <create_chain>
c0005814:	85 c0                	test   eax,eax
c0005816:	75 09                	jne    c0005821 <f_write+0x1d4>
c0005818:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000581c:	e9 dc 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005821:	83 f8 01             	cmp    eax,0x1
c0005824:	75 0e                	jne    c0005834 <f_write+0x1e7>
c0005826:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000582a:	bd 02 00 00 00       	mov    ebp,0x2
c000582f:	e9 c9 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005834:	83 f8 ff             	cmp    eax,0xffffffff
c0005837:	75 0e                	jne    c0005847 <f_write+0x1fa>
c0005839:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000583d:	bd 01 00 00 00       	mov    ebp,0x1
c0005842:	e9 b6 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005847:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000584a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000584e:	0f 85 90 fe ff ff    	jne    c00056e4 <f_write+0x97>
c0005854:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005857:	e9 88 fe ff ff       	jmp    c00056e4 <f_write+0x97>
c000585c:	83 ec 0c             	sub    esp,0xc
c000585f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005862:	6a 01                	push   0x1
c0005864:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005867:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000586a:	50                   	push   eax
c000586b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000586f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005873:	50                   	push   eax
c0005874:	e8 b3 c3 ff ff       	call   c0001c2c <disk_write>
c0005879:	83 c4 20             	add    esp,0x20
c000587c:	85 c0                	test   eax,eax
c000587e:	75 b9                	jne    c0005839 <f_write+0x1ec>
c0005880:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005884:	e9 65 fe ff ff       	jmp    c00056ee <f_write+0xa1>
c0005889:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000588c:	75 05                	jne    c0005893 <f_write+0x246>
c000588e:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005891:	74 2e                	je     c00058c1 <f_write+0x274>
c0005893:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005896:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005899:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000589c:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000589f:	73 20                	jae    c00058c1 <f_write+0x274>
c00058a1:	83 ec 0c             	sub    esp,0xc
c00058a4:	8d 43 50             	lea    eax,[ebx+0x50]
c00058a7:	6a 01                	push   0x1
c00058a9:	57                   	push   edi
c00058aa:	56                   	push   esi
c00058ab:	50                   	push   eax
c00058ac:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00058b0:	50                   	push   eax
c00058b1:	e8 60 c3 ff ff       	call   c0001c16 <disk_read>
c00058b6:	83 c4 20             	add    esp,0x20
c00058b9:	85 c0                	test   eax,eax
c00058bb:	0f 85 78 ff ff ff    	jne    c0005839 <f_write+0x1ec>
c00058c1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058c4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058ca:	ba 00 02 00 00       	mov    edx,0x200
c00058cf:	25 ff 01 00 00       	and    eax,0x1ff
c00058d4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058d8:	29 c2                	sub    edx,eax
c00058da:	39 d6                	cmp    esi,edx
c00058dc:	76 02                	jbe    c00058e0 <f_write+0x293>
c00058de:	89 d6                	mov    esi,edx
c00058e0:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058e4:	89 f1                	mov    ecx,esi
c00058e6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058ea:	e8 f1 c3 ff ff       	call   c0001ce0 <mem_cpy>
c00058ef:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058f3:	e9 b1 fe ff ff       	jmp    c00057a9 <f_write+0x15c>
c00058f8:	bd 07 00 00 00       	mov    ebp,0x7
c00058fd:	83 c4 2c             	add    esp,0x2c
c0005900:	89 e8                	mov    eax,ebp
c0005902:	5b                   	pop    ebx
c0005903:	5e                   	pop    esi
c0005904:	5f                   	pop    edi
c0005905:	5d                   	pop    ebp
c0005906:	c3                   	ret    

c0005907 <f_sync>:
c0005907:	56                   	push   esi
c0005908:	53                   	push   ebx
c0005909:	83 ec 64             	sub    esp,0x64
c000590c:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005910:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005914:	89 d8                	mov    eax,ebx
c0005916:	e8 49 ca ff ff       	call   c0002364 <validate>
c000591b:	85 c0                	test   eax,eax
c000591d:	0f 85 ba 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005923:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005926:	f6 c2 40             	test   dl,0x40
c0005929:	0f 84 ae 01 00 00    	je     c0005add <f_sync+0x1d6>
c000592f:	84 d2                	test   dl,dl
c0005931:	79 33                	jns    c0005966 <f_sync+0x5f>
c0005933:	83 ec 0c             	sub    esp,0xc
c0005936:	8d 43 50             	lea    eax,[ebx+0x50]
c0005939:	6a 01                	push   0x1
c000593b:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000593e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005941:	50                   	push   eax
c0005942:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005946:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000594a:	50                   	push   eax
c000594b:	e8 dc c2 ff ff       	call   c0001c2c <disk_write>
c0005950:	83 c4 20             	add    esp,0x20
c0005953:	89 c2                	mov    edx,eax
c0005955:	b8 01 00 00 00       	mov    eax,0x1
c000595a:	85 d2                	test   edx,edx
c000595c:	0f 85 7b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005962:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000596a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000596d:	0f 85 11 01 00 00    	jne    c0005a84 <f_sync+0x17d>
c0005973:	89 d8                	mov    eax,ebx
c0005975:	e8 13 d6 ff ff       	call   c0002f8d <fill_first_frag>
c000597a:	85 c0                	test   eax,eax
c000597c:	0f 85 5b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005982:	83 c9 ff             	or     ecx,0xffffffff
c0005985:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005988:	89 d8                	mov    eax,ebx
c000598a:	e8 c9 d5 ff ff       	call   c0002f58 <fill_last_frag>
c000598f:	85 c0                	test   eax,eax
c0005991:	0f 85 46 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005997:	83 ec 0c             	sub    esp,0xc
c000599a:	68 60 04 00 00       	push   0x460
c000599f:	e8 f0 2a 00 00       	call   c0008494 <ff_memalloc>
c00059a4:	83 c4 10             	add    esp,0x10
c00059a7:	89 c6                	mov    esi,eax
c00059a9:	b8 11 00 00 00       	mov    eax,0x11
c00059ae:	85 f6                	test   esi,esi
c00059b0:	0f 84 27 01 00 00    	je     c0005add <f_sync+0x1d6>
c00059b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ba:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059c0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059c3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059c6:	89 da                	mov    edx,ebx
c00059c8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059cc:	e8 af df ff ff       	call   c0003980 <load_obj_xdir>
c00059d1:	85 c0                	test   eax,eax
c00059d3:	0f 85 95 00 00 00    	jne    c0005a6e <f_sync+0x167>
c00059d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059e0:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059e4:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059e7:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059ea:	83 ca 01             	or     edx,0x1
c00059ed:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059f0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059f3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059f6:	83 c0 34             	add    eax,0x34
c00059f9:	e8 d9 c2 ff ff       	call   c0001cd7 <st_dword>
c00059fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a05:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a08:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a0b:	83 c0 38             	add    eax,0x38
c0005a0e:	e8 c7 c2 ff ff       	call   c0001cda <st_qword>
c0005a13:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a1a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a1d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a20:	83 c0 28             	add    eax,0x28
c0005a23:	e8 b2 c2 ff ff       	call   c0001cda <st_qword>
c0005a28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a31:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a34:	83 c0 0c             	add    eax,0xc
c0005a37:	e8 9b c2 ff ff       	call   c0001cd7 <st_dword>
c0005a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a40:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a43:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a47:	31 d2                	xor    edx,edx
c0005a49:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a4c:	83 c0 10             	add    eax,0x10
c0005a4f:	e8 83 c2 ff ff       	call   c0001cd7 <st_dword>
c0005a54:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a58:	e8 62 e1 ff ff       	call   c0003bbf <store_xdir>
c0005a5d:	85 c0                	test   eax,eax
c0005a5f:	75 0d                	jne    c0005a6e <f_sync+0x167>
c0005a61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a65:	e8 00 eb ff ff       	call   c000456a <sync_fs>
c0005a6a:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a72:	83 ec 0c             	sub    esp,0xc
c0005a75:	56                   	push   esi
c0005a76:	e8 2f 2a 00 00       	call   c00084aa <ff_memfree>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a82:	eb 59                	jmp    c0005add <f_sync+0x1d6>
c0005a84:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a87:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a8a:	e8 b0 c9 ff ff       	call   c000243f <move_window>
c0005a8f:	85 c0                	test   eax,eax
c0005a91:	75 4a                	jne    c0005add <f_sync+0x1d6>
c0005a93:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a96:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a9a:	89 f2                	mov    edx,esi
c0005a9c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005aa1:	e8 5f f3 ff ff       	call   c0004e05 <st_clust.isra.1>
c0005aa6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005aa9:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005aac:	e8 26 c2 ff ff       	call   c0001cd7 <st_dword>
c0005ab1:	8d 46 16             	lea    eax,[esi+0x16]
c0005ab4:	ba 00 00 21 50       	mov    edx,0x50210000
c0005ab9:	e8 19 c2 ff ff       	call   c0001cd7 <st_dword>
c0005abe:	8d 46 12             	lea    eax,[esi+0x12]
c0005ac1:	31 d2                	xor    edx,edx
c0005ac3:	e8 0b c2 ff ff       	call   c0001cd3 <st_word>
c0005ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005acc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ad4:	e8 91 ea ff ff       	call   c000456a <sync_fs>
c0005ad9:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005add:	83 c4 64             	add    esp,0x64
c0005ae0:	5b                   	pop    ebx
c0005ae1:	5e                   	pop    esi
c0005ae2:	c3                   	ret    

c0005ae3 <f_close>:
c0005ae3:	53                   	push   ebx
c0005ae4:	83 ec 24             	sub    esp,0x24
c0005ae7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005aeb:	53                   	push   ebx
c0005aec:	e8 16 fe ff ff       	call   c0005907 <f_sync>
c0005af1:	83 c4 10             	add    esp,0x10
c0005af4:	85 c0                	test   eax,eax
c0005af6:	75 15                	jne    c0005b0d <f_close+0x2a>
c0005af8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005afc:	89 d8                	mov    eax,ebx
c0005afe:	e8 61 c8 ff ff       	call   c0002364 <validate>
c0005b03:	85 c0                	test   eax,eax
c0005b05:	75 06                	jne    c0005b0d <f_close+0x2a>
c0005b07:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005b0d:	83 c4 18             	add    esp,0x18
c0005b10:	5b                   	pop    ebx
c0005b11:	c3                   	ret    

c0005b12 <f_lseek>:
c0005b12:	55                   	push   ebp
c0005b13:	57                   	push   edi
c0005b14:	56                   	push   esi
c0005b15:	53                   	push   ebx
c0005b16:	83 ec 3c             	sub    esp,0x3c
c0005b19:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b1d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b21:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b25:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b28:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b2c:	89 d8                	mov    eax,ebx
c0005b2e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b32:	e8 2d c8 ff ff       	call   c0002364 <validate>
c0005b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	0f 85 7a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b43:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b47:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b4b:	85 c0                	test   eax,eax
c0005b4d:	0f 85 6a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b53:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b57:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b5a:	74 0c                	je     c0005b68 <f_lseek+0x56>
c0005b5c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b5f:	85 c0                	test   eax,eax
c0005b61:	75 1f                	jne    c0005b82 <f_lseek+0x70>
c0005b63:	e9 b5 01 00 00       	jmp    c0005d1d <f_lseek+0x20b>
c0005b68:	83 c9 ff             	or     ecx,0xffffffff
c0005b6b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b6e:	89 d8                	mov    eax,ebx
c0005b70:	e8 e3 d3 ff ff       	call   c0002f58 <fill_last_frag>
c0005b75:	85 c0                	test   eax,eax
c0005b77:	74 e3                	je     c0005b5c <f_lseek+0x4a>
c0005b79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b7d:	e9 3b 04 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005b82:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b87:	0f 85 ac 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b8d:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b91:	0f 85 a2 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b97:	8d 78 04             	lea    edi,[eax+0x4]
c0005b9a:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b9f:	be 02 00 00 00       	mov    esi,0x2
c0005ba4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ba8:	85 ed                	test   ebp,ebp
c0005baa:	74 73                	je     c0005c1f <f_lseek+0x10d>
c0005bac:	89 e9                	mov    ecx,ebp
c0005bae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bb5:	ff 04 24             	inc    DWORD PTR [esp]
c0005bb8:	89 ca                	mov    edx,ecx
c0005bba:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005bbe:	89 d8                	mov    eax,ebx
c0005bc0:	e8 02 d4 ff ff       	call   c0002fc7 <get_fat>
c0005bc5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bc9:	83 f8 01             	cmp    eax,0x1
c0005bcc:	77 11                	ja     c0005bdf <f_lseek+0xcd>
c0005bce:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bd2:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005bda:	e9 de 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bdf:	83 f8 ff             	cmp    eax,0xffffffff
c0005be2:	75 11                	jne    c0005bf5 <f_lseek+0xe3>
c0005be4:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005be8:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bf0:	e9 c8 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bf5:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bf8:	89 c1                	mov    ecx,eax
c0005bfa:	39 c2                	cmp    edx,eax
c0005bfc:	74 b7                	je     c0005bb5 <f_lseek+0xa3>
c0005bfe:	83 c6 02             	add    esi,0x2
c0005c01:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005c05:	72 0b                	jb     c0005c12 <f_lseek+0x100>
c0005c07:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005c0a:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005c0d:	89 0f                	mov    DWORD PTR [edi],ecx
c0005c0f:	83 c7 08             	add    edi,0x8
c0005c12:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c16:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c19:	76 04                	jbe    c0005c1f <f_lseek+0x10d>
c0005c1b:	89 c5                	mov    ebp,eax
c0005c1d:	eb 8d                	jmp    c0005bac <f_lseek+0x9a>
c0005c1f:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c22:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c26:	89 30                	mov    DWORD PTR [eax],esi
c0005c28:	0f 87 87 03 00 00    	ja     c0005fb5 <f_lseek+0x4a3>
c0005c2e:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c34:	e9 84 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005c39:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c3c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c4b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c52:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c56:	73 0f                	jae    c0005c67 <f_lseek+0x155>
c0005c58:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c5b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c6f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c72:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c79:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c7d:	0f 84 3a 03 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005c83:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c87:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c8b:	83 c6 ff             	add    esi,0xffffffff
c0005c8e:	89 d8                	mov    eax,ebx
c0005c90:	83 d7 ff             	adc    edi,0xffffffff
c0005c93:	89 f2                	mov    edx,esi
c0005c95:	89 f9                	mov    ecx,edi
c0005c97:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c9b:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c9e:	e8 78 c2 ff ff       	call   c0001f1b <clmt_clust>
c0005ca3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ca7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005caa:	89 c2                	mov    edx,eax
c0005cac:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005cb0:	89 c8                	mov    eax,ecx
c0005cb2:	e8 43 c2 ff ff       	call   c0001efa <clst2sect>
c0005cb7:	89 d7                	mov    edi,edx
c0005cb9:	09 c7                	or     edi,eax
c0005cbb:	0f 84 0d ff ff ff    	je     c0005bce <f_lseek+0xbc>
c0005cc1:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005cc5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005ccb:	0f 84 ec 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cd1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cd5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005cd9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cdc:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ce0:	0f ac fe 09          	shrd   esi,edi,0x9
c0005ce4:	4d                   	dec    ebp
c0005ce5:	31 ff                	xor    edi,edi
c0005ce7:	21 ee                	and    esi,ebp
c0005ce9:	01 c6                	add    esi,eax
c0005ceb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cee:	11 d7                	adc    edi,edx
c0005cf0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cf3:	39 fa                	cmp    edx,edi
c0005cf5:	75 08                	jne    c0005cff <f_lseek+0x1ed>
c0005cf7:	39 f0                	cmp    eax,esi
c0005cf9:	0f 84 be 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cff:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d02:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d06:	0f 89 80 02 00 00    	jns    c0005f8c <f_lseek+0x47a>
c0005d0c:	83 ec 0c             	sub    esp,0xc
c0005d0f:	6a 01                	push   0x1
c0005d11:	52                   	push   edx
c0005d12:	50                   	push   eax
c0005d13:	55                   	push   ebp
c0005d14:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d18:	e9 5a 02 00 00       	jmp    c0005f77 <f_lseek+0x465>
c0005d1d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d21:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d24:	74 16                	je     c0005d3c <f_lseek+0x22a>
c0005d26:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d2b:	76 0f                	jbe    c0005d3c <f_lseek+0x22a>
c0005d2d:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d34:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d3c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d3f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d42:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d45:	89 c7                	mov    edi,eax
c0005d47:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d4b:	73 0d                	jae    c0005d5a <f_lseek+0x248>
c0005d4d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d51:	75 07                	jne    c0005d5a <f_lseek+0x248>
c0005d53:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d5a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d5d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d60:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d64:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d6b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d72:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d75:	75 09                	jne    c0005d80 <f_lseek+0x26e>
c0005d77:	31 f6                	xor    esi,esi
c0005d79:	31 ff                	xor    edi,edi
c0005d7b:	e9 af 01 00 00       	jmp    c0005f2f <f_lseek+0x41d>
c0005d80:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d84:	89 d7                	mov    edi,edx
c0005d86:	c1 e1 09             	shl    ecx,0x9
c0005d89:	09 c7                	or     edi,eax
c0005d8b:	89 cd                	mov    ebp,ecx
c0005d8d:	74 6d                	je     c0005dfc <f_lseek+0x2ea>
c0005d8f:	83 c0 ff             	add    eax,0xffffffff
c0005d92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d96:	83 d2 ff             	adc    edx,0xffffffff
c0005d99:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d9c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005da0:	83 c0 ff             	add    eax,0xffffffff
c0005da3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005da7:	83 d2 ff             	adc    edx,0xffffffff
c0005daa:	31 ff                	xor    edi,edi
c0005dac:	57                   	push   edi
c0005dad:	51                   	push   ecx
c0005dae:	52                   	push   edx
c0005daf:	50                   	push   eax
c0005db0:	e8 77 0c 02 00       	call   c0026a2c <__udivdi3>
c0005db5:	83 c4 10             	add    esp,0x10
c0005db8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005dbc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005dc0:	57                   	push   edi
c0005dc1:	55                   	push   ebp
c0005dc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dca:	e8 5d 0c 02 00       	call   c0026a2c <__udivdi3>
c0005dcf:	83 c4 10             	add    esp,0x10
c0005dd2:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005dd6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dda:	19 d1                	sbb    ecx,edx
c0005ddc:	72 1e                	jb     c0005dfc <f_lseek+0x2ea>
c0005dde:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005de2:	89 e9                	mov    ecx,ebp
c0005de4:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005de7:	f7 d9                	neg    ecx
c0005de9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005dec:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005df0:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005df3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005df6:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dfa:	eb 28                	jmp    c0005e24 <f_lseek+0x312>
c0005dfc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dff:	85 c0                	test   eax,eax
c0005e01:	75 1e                	jne    c0005e21 <f_lseek+0x30f>
c0005e03:	31 d2                	xor    edx,edx
c0005e05:	89 d8                	mov    eax,ebx
c0005e07:	e8 a9 d4 ff ff       	call   c00032b5 <create_chain>
c0005e0c:	83 f8 01             	cmp    eax,0x1
c0005e0f:	0f 84 b9 fd ff ff    	je     c0005bce <f_lseek+0xbc>
c0005e15:	83 f8 ff             	cmp    eax,0xffffffff
c0005e18:	0f 84 c6 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005e1e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e21:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e24:	85 c0                	test   eax,eax
c0005e26:	0f 84 4b ff ff ff    	je     c0005d77 <f_lseek+0x265>
c0005e2c:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e30:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e38:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e3b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e3f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e42:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e45:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e49:	0f 83 9d 00 00 00    	jae    c0005eec <f_lseek+0x3da>
c0005e4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e53:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e57:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e5a:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e5e:	01 f2                	add    edx,esi
c0005e60:	11 f9                	adc    ecx,edi
c0005e62:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e66:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e6a:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e6d:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e70:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e73:	f6 c1 02             	test   cl,0x2
c0005e76:	74 35                	je     c0005ead <f_lseek+0x39b>
c0005e78:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e7c:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e7f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e82:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e86:	73 16                	jae    c0005e9e <f_lseek+0x38c>
c0005e88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e8c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e90:	88 ca                	mov    dl,cl
c0005e92:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e95:	83 ca 40             	or     edx,0x40
c0005e98:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e9b:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e9e:	89 c2                	mov    edx,eax
c0005ea0:	89 d8                	mov    eax,ebx
c0005ea2:	e8 0e d4 ff ff       	call   c00032b5 <create_chain>
c0005ea7:	85 c0                	test   eax,eax
c0005ea9:	75 0b                	jne    c0005eb6 <f_lseek+0x3a4>
c0005eab:	eb 30                	jmp    c0005edd <f_lseek+0x3cb>
c0005ead:	89 c2                	mov    edx,eax
c0005eaf:	89 d8                	mov    eax,ebx
c0005eb1:	e8 11 d1 ff ff       	call   c0002fc7 <get_fat>
c0005eb6:	83 f8 ff             	cmp    eax,0xffffffff
c0005eb9:	0f 84 25 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005ebf:	83 f8 01             	cmp    eax,0x1
c0005ec2:	0f 86 06 fd ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ec8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005ecc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005ecf:	0f 86 f9 fc ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ed5:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ed8:	e9 5b ff ff ff       	jmp    c0005e38 <f_lseek+0x326>
c0005edd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005ee4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eec:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eef:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ef3:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ef6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ef9:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005efc:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005f02:	0f 84 6f fe ff ff    	je     c0005d77 <f_lseek+0x265>
c0005f08:	89 c2                	mov    edx,eax
c0005f0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005f0e:	e8 e7 bf ff ff       	call   c0001efa <clst2sect>
c0005f13:	89 d7                	mov    edi,edx
c0005f15:	09 c7                	or     edi,eax
c0005f17:	0f 84 b1 fc ff ff    	je     c0005bce <f_lseek+0xbc>
c0005f1d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f21:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f24:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f28:	c1 ef 09             	shr    edi,0x9
c0005f2b:	01 c6                	add    esi,eax
c0005f2d:	11 d7                	adc    edi,edx
c0005f2f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f32:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f35:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f38:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f3b:	19 d1                	sbb    ecx,edx
c0005f3d:	73 0a                	jae    c0005f49 <f_lseek+0x437>
c0005f3f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f42:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f45:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f49:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f4e:	74 6d                	je     c0005fbd <f_lseek+0x4ab>
c0005f50:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f53:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f56:	39 fa                	cmp    edx,edi
c0005f58:	75 04                	jne    c0005f5e <f_lseek+0x44c>
c0005f5a:	39 f0                	cmp    eax,esi
c0005f5c:	74 5f                	je     c0005fbd <f_lseek+0x4ab>
c0005f5e:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f61:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f65:	79 25                	jns    c0005f8c <f_lseek+0x47a>
c0005f67:	83 ec 0c             	sub    esp,0xc
c0005f6a:	6a 01                	push   0x1
c0005f6c:	52                   	push   edx
c0005f6d:	50                   	push   eax
c0005f6e:	55                   	push   ebp
c0005f6f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f73:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f77:	50                   	push   eax
c0005f78:	e8 af bc ff ff       	call   c0001c2c <disk_write>
c0005f7d:	83 c4 20             	add    esp,0x20
c0005f80:	85 c0                	test   eax,eax
c0005f82:	0f 85 5c fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005f88:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f8c:	83 ec 0c             	sub    esp,0xc
c0005f8f:	6a 01                	push   0x1
c0005f91:	57                   	push   edi
c0005f92:	56                   	push   esi
c0005f93:	55                   	push   ebp
c0005f94:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f98:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f9c:	50                   	push   eax
c0005f9d:	e8 74 bc ff ff       	call   c0001c16 <disk_read>
c0005fa2:	83 c4 20             	add    esp,0x20
c0005fa5:	85 c0                	test   eax,eax
c0005fa7:	0f 85 37 fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005fad:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005fb0:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005fb3:	eb 08                	jmp    c0005fbd <f_lseek+0x4ab>
c0005fb5:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005fbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fc1:	83 c4 3c             	add    esp,0x3c
c0005fc4:	5b                   	pop    ebx
c0005fc5:	5e                   	pop    esi
c0005fc6:	5f                   	pop    edi
c0005fc7:	5d                   	pop    ebp
c0005fc8:	c3                   	ret    

c0005fc9 <f_opendir>:
c0005fc9:	56                   	push   esi
c0005fca:	b8 09 00 00 00       	mov    eax,0x9
c0005fcf:	53                   	push   ebx
c0005fd0:	83 ec 24             	sub    esp,0x24
c0005fd3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fd7:	85 db                	test   ebx,ebx
c0005fd9:	0f 84 e6 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c0005fdf:	31 c9                	xor    ecx,ecx
c0005fe1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fe5:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005fe9:	e8 03 c7 ff ff       	call   c00026f1 <mount_volume>
c0005fee:	85 c0                	test   eax,eax
c0005ff0:	0f 85 c9 00 00 00    	jne    c00060bf <f_opendir+0xf6>
c0005ff6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ffa:	83 ec 0c             	sub    esp,0xc
c0005ffd:	89 03                	mov    DWORD PTR [ebx],eax
c0005fff:	68 60 04 00 00       	push   0x460
c0006004:	e8 8b 24 00 00       	call   c0008494 <ff_memalloc>
c0006009:	83 c4 10             	add    esp,0x10
c000600c:	89 c6                	mov    esi,eax
c000600e:	b8 11 00 00 00       	mov    eax,0x11
c0006013:	85 f6                	test   esi,esi
c0006015:	0f 84 aa 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c000601b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000601f:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006025:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006028:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000602b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000602f:	89 d8                	mov    eax,ebx
c0006031:	e8 31 ee ff ff       	call   c0004e67 <follow_path>
c0006036:	85 c0                	test   eax,eax
c0006038:	75 61                	jne    c000609b <f_opendir+0xd2>
c000603a:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c000603e:	78 46                	js     c0006086 <f_opendir+0xbd>
c0006040:	b8 05 00 00 00       	mov    eax,0x5
c0006045:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0006049:	74 50                	je     c000609b <f_opendir+0xd2>
c000604b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000604f:	8a 01                	mov    al,BYTE PTR [ecx]
c0006051:	3c 04                	cmp    al,0x4
c0006053:	75 26                	jne    c000607b <f_opendir+0xb2>
c0006055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0006058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000605b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000605e:	30 d2                	xor    dl,dl
c0006060:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0006064:	09 c2                	or     edx,eax
c0006066:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0006069:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000606c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000606f:	89 da                	mov    edx,ebx
c0006071:	8d 41 10             	lea    eax,[ecx+0x10]
c0006074:	e8 b4 ed ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0006079:	eb 0b                	jmp    c0006086 <f_opendir+0xbd>
c000607b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000607e:	e8 59 ed ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006083:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0006086:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000608a:	31 d2                	xor    edx,edx
c000608c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006090:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0006094:	89 d8                	mov    eax,ebx
c0006096:	e8 22 d1 ff ff       	call   c00031bd <dir_sdi>
c000609b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000609f:	83 ec 0c             	sub    esp,0xc
c00060a2:	56                   	push   esi
c00060a3:	e8 02 24 00 00       	call   c00084aa <ff_memfree>
c00060a8:	83 c4 10             	add    esp,0x10
c00060ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060af:	83 f8 04             	cmp    eax,0x4
c00060b2:	74 06                	je     c00060ba <f_opendir+0xf1>
c00060b4:	85 c0                	test   eax,eax
c00060b6:	74 0d                	je     c00060c5 <f_opendir+0xfc>
c00060b8:	eb 05                	jmp    c00060bf <f_opendir+0xf6>
c00060ba:	b8 05 00 00 00       	mov    eax,0x5
c00060bf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060c5:	83 c4 24             	add    esp,0x24
c00060c8:	5b                   	pop    ebx
c00060c9:	5e                   	pop    esi
c00060ca:	c3                   	ret    

c00060cb <f_closedir>:
c00060cb:	53                   	push   ebx
c00060cc:	83 ec 18             	sub    esp,0x18
c00060cf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060d3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060d7:	89 d8                	mov    eax,ebx
c00060d9:	e8 86 c2 ff ff       	call   c0002364 <validate>
c00060de:	85 c0                	test   eax,eax
c00060e0:	75 06                	jne    c00060e8 <f_closedir+0x1d>
c00060e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060e8:	83 c4 18             	add    esp,0x18
c00060eb:	5b                   	pop    ebx
c00060ec:	c3                   	ret    

c00060ed <f_readdir>:
c00060ed:	57                   	push   edi
c00060ee:	56                   	push   esi
c00060ef:	53                   	push   ebx
c00060f0:	83 ec 20             	sub    esp,0x20
c00060f3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060f7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060fb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060ff:	89 d8                	mov    eax,ebx
c0006101:	e8 5e c2 ff ff       	call   c0002364 <validate>
c0006106:	85 c0                	test   eax,eax
c0006108:	75 77                	jne    c0006181 <f_readdir+0x94>
c000610a:	85 ff                	test   edi,edi
c000610c:	75 0b                	jne    c0006119 <f_readdir+0x2c>
c000610e:	31 d2                	xor    edx,edx
c0006110:	89 d8                	mov    eax,ebx
c0006112:	e8 a6 d0 ff ff       	call   c00031bd <dir_sdi>
c0006117:	eb 68                	jmp    c0006181 <f_readdir+0x94>
c0006119:	83 ec 0c             	sub    esp,0xc
c000611c:	68 60 04 00 00       	push   0x460
c0006121:	e8 6e 23 00 00       	call   c0008494 <ff_memalloc>
c0006126:	83 c4 10             	add    esp,0x10
c0006129:	89 c6                	mov    esi,eax
c000612b:	b8 11 00 00 00       	mov    eax,0x11
c0006130:	85 f6                	test   esi,esi
c0006132:	74 4d                	je     c0006181 <f_readdir+0x94>
c0006134:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006138:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000613e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006141:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006144:	31 d2                	xor    edx,edx
c0006146:	89 d8                	mov    eax,ebx
c0006148:	e8 80 d8 ff ff       	call   c00039cd <dir_read>
c000614d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006152:	75 19                	jne    c000616d <f_readdir+0x80>
c0006154:	89 fa                	mov    edx,edi
c0006156:	89 d8                	mov    eax,ebx
c0006158:	e8 7e ea ff ff       	call   c0004bdb <get_fileinfo>
c000615d:	31 d2                	xor    edx,edx
c000615f:	89 d8                	mov    eax,ebx
c0006161:	e8 af d5 ff ff       	call   c0003715 <dir_next>
c0006166:	83 f8 04             	cmp    eax,0x4
c0006169:	75 02                	jne    c000616d <f_readdir+0x80>
c000616b:	31 c0                	xor    eax,eax
c000616d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006171:	83 ec 0c             	sub    esp,0xc
c0006174:	56                   	push   esi
c0006175:	e8 30 23 00 00       	call   c00084aa <ff_memfree>
c000617a:	83 c4 10             	add    esp,0x10
c000617d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006181:	83 c4 20             	add    esp,0x20
c0006184:	5b                   	pop    ebx
c0006185:	5e                   	pop    esi
c0006186:	5f                   	pop    edi
c0006187:	c3                   	ret    

c0006188 <f_stat>:
c0006188:	57                   	push   edi
c0006189:	31 c9                	xor    ecx,ecx
c000618b:	56                   	push   esi
c000618c:	53                   	push   ebx
c000618d:	83 ec 50             	sub    esp,0x50
c0006190:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0006194:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006198:	8d 44 24 60          	lea    eax,[esp+0x60]
c000619c:	e8 50 c5 ff ff       	call   c00026f1 <mount_volume>
c00061a1:	89 c3                	mov    ebx,eax
c00061a3:	85 c0                	test   eax,eax
c00061a5:	75 67                	jne    c000620e <f_stat+0x86>
c00061a7:	83 ec 0c             	sub    esp,0xc
c00061aa:	bb 11 00 00 00       	mov    ebx,0x11
c00061af:	68 60 04 00 00       	push   0x460
c00061b4:	e8 db 22 00 00       	call   c0008494 <ff_memalloc>
c00061b9:	83 c4 10             	add    esp,0x10
c00061bc:	89 c6                	mov    esi,eax
c00061be:	85 c0                	test   eax,eax
c00061c0:	74 4c                	je     c000620e <f_stat+0x86>
c00061c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061c6:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061cc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061cf:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061d2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061d6:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061da:	e8 88 ec ff ff       	call   c0004e67 <follow_path>
c00061df:	89 c3                	mov    ebx,eax
c00061e1:	85 c0                	test   eax,eax
c00061e3:	75 1d                	jne    c0006202 <f_stat+0x7a>
c00061e5:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061ea:	78 11                	js     c00061fd <f_stat+0x75>
c00061ec:	85 ff                	test   edi,edi
c00061ee:	74 12                	je     c0006202 <f_stat+0x7a>
c00061f0:	89 fa                	mov    edx,edi
c00061f2:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061f6:	e8 e0 e9 ff ff       	call   c0004bdb <get_fileinfo>
c00061fb:	eb 05                	jmp    c0006202 <f_stat+0x7a>
c00061fd:	bb 06 00 00 00       	mov    ebx,0x6
c0006202:	83 ec 0c             	sub    esp,0xc
c0006205:	56                   	push   esi
c0006206:	e8 9f 22 00 00       	call   c00084aa <ff_memfree>
c000620b:	83 c4 10             	add    esp,0x10
c000620e:	83 c4 50             	add    esp,0x50
c0006211:	89 d8                	mov    eax,ebx
c0006213:	5b                   	pop    ebx
c0006214:	5e                   	pop    esi
c0006215:	5f                   	pop    edi
c0006216:	c3                   	ret    

c0006217 <f_getfree>:
c0006217:	55                   	push   ebp
c0006218:	31 c9                	xor    ecx,ecx
c000621a:	57                   	push   edi
c000621b:	56                   	push   esi
c000621c:	53                   	push   ebx
c000621d:	83 ec 5c             	sub    esp,0x5c
c0006220:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006224:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006228:	e8 c4 c4 ff ff       	call   c00026f1 <mount_volume>
c000622d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006231:	85 c0                	test   eax,eax
c0006233:	0f 85 9d 01 00 00    	jne    c00063d6 <f_getfree+0x1bf>
c0006239:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000623d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006241:	89 02                	mov    DWORD PTR [edx],eax
c0006243:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006246:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006249:	8d 71 fe             	lea    esi,[ecx-0x2]
c000624c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006250:	39 f2                	cmp    edx,esi
c0006252:	77 0b                	ja     c000625f <f_getfree+0x48>
c0006254:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006258:	89 10                	mov    DWORD PTR [eax],edx
c000625a:	e9 77 01 00 00       	jmp    c00063d6 <f_getfree+0x1bf>
c000625f:	8a 10                	mov    dl,BYTE PTR [eax]
c0006261:	80 fa 01             	cmp    dl,0x1
c0006264:	75 3a                	jne    c00062a0 <f_getfree+0x89>
c0006266:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000626a:	be 02 00 00 00       	mov    esi,0x2
c000626f:	31 db                	xor    ebx,ebx
c0006271:	89 f2                	mov    edx,esi
c0006273:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006277:	e8 4b cd ff ff       	call   c0002fc7 <get_fat>
c000627c:	83 f8 ff             	cmp    eax,0xffffffff
c000627f:	0f 84 28 01 00 00    	je     c00063ad <f_getfree+0x196>
c0006285:	83 f8 01             	cmp    eax,0x1
c0006288:	0f 84 29 01 00 00    	je     c00063b7 <f_getfree+0x1a0>
c000628e:	83 d3 00             	adc    ebx,0x0
c0006291:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006295:	46                   	inc    esi
c0006296:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006299:	77 d6                	ja     c0006271 <f_getfree+0x5a>
c000629b:	e9 25 01 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c00062a0:	80 fa 04             	cmp    dl,0x4
c00062a3:	0f 85 88 00 00 00    	jne    c0006331 <f_getfree+0x11a>
c00062a9:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00062ac:	31 ed                	xor    ebp,ebp
c00062ae:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00062b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062b9:	31 db                	xor    ebx,ebx
c00062bb:	85 ed                	test   ebp,ebp
c00062bd:	75 3f                	jne    c00062fe <f_getfree+0xe7>
c00062bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062c7:	83 c0 01             	add    eax,0x1
c00062ca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062ce:	83 d2 00             	adc    edx,0x0
c00062d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062e1:	e8 59 c1 ff ff       	call   c000243f <move_window>
c00062e6:	85 c0                	test   eax,eax
c00062e8:	0f 85 d3 00 00 00    	jne    c00063c1 <f_getfree+0x1aa>
c00062ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062fa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062fe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006302:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006305:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006309:	89 cf                	mov    edi,ecx
c000630b:	85 f6                	test   esi,esi
c000630d:	74 12                	je     c0006321 <f_getfree+0x10a>
c000630f:	88 c1                	mov    cl,al
c0006311:	83 e1 01             	and    ecx,0x1
c0006314:	80 f9 01             	cmp    cl,0x1
c0006317:	83 d3 00             	adc    ebx,0x0
c000631a:	d0 e8                	shr    al,1
c000631c:	4e                   	dec    esi
c000631d:	39 fe                	cmp    esi,edi
c000631f:	75 ea                	jne    c000630b <f_getfree+0xf4>
c0006321:	45                   	inc    ebp
c0006322:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006328:	85 f6                	test   esi,esi
c000632a:	75 8f                	jne    c00062bb <f_getfree+0xa4>
c000632c:	e9 94 00 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c0006331:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006334:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006337:	31 f6                	xor    esi,esi
c0006339:	31 db                	xor    ebx,ebx
c000633b:	85 f6                	test   esi,esi
c000633d:	75 1b                	jne    c000635a <f_getfree+0x143>
c000633f:	89 d7                	mov    edi,edx
c0006341:	89 cd                	mov    ebp,ecx
c0006343:	83 c7 01             	add    edi,0x1
c0006346:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000634a:	83 d5 00             	adc    ebp,0x0
c000634d:	e8 ed c0 ff ff       	call   c000243f <move_window>
c0006352:	85 c0                	test   eax,eax
c0006354:	75 6b                	jne    c00063c1 <f_getfree+0x1aa>
c0006356:	89 fa                	mov    edx,edi
c0006358:	89 e9                	mov    ecx,ebp
c000635a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000635e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006362:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006366:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006369:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000636d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006371:	75 11                	jne    c0006384 <f_getfree+0x16d>
c0006373:	e8 e9 b8 ff ff       	call   c0001c61 <ld_word>
c0006378:	66 83 f8 01          	cmp    ax,0x1
c000637c:	83 d3 00             	adc    ebx,0x0
c000637f:	83 c6 02             	add    esi,0x2
c0006382:	eb 13                	jmp    c0006397 <f_getfree+0x180>
c0006384:	e8 e5 b8 ff ff       	call   c0001c6e <ld_dword>
c0006389:	25 ff ff ff 0f       	and    eax,0xfffffff
c000638e:	83 f8 01             	cmp    eax,0x1
c0006391:	83 d3 00             	adc    ebx,0x0
c0006394:	83 c6 04             	add    esi,0x4
c0006397:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000639d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063a1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00063a5:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00063a9:	75 90                	jne    c000633b <f_getfree+0x124>
c00063ab:	eb 18                	jmp    c00063c5 <f_getfree+0x1ae>
c00063ad:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063b5:	eb 0e                	jmp    c00063c5 <f_getfree+0x1ae>
c00063b7:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063bf:	eb 04                	jmp    c00063c5 <f_getfree+0x1ae>
c00063c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063c5:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063c9:	89 18                	mov    DWORD PTR [eax],ebx
c00063cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063cf:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063d2:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063da:	83 c4 5c             	add    esp,0x5c
c00063dd:	5b                   	pop    ebx
c00063de:	5e                   	pop    esi
c00063df:	5f                   	pop    edi
c00063e0:	5d                   	pop    ebp
c00063e1:	c3                   	ret    

c00063e2 <f_truncate>:
c00063e2:	56                   	push   esi
c00063e3:	53                   	push   ebx
c00063e4:	83 ec 14             	sub    esp,0x14
c00063e7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063eb:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063ef:	89 d8                	mov    eax,ebx
c00063f1:	e8 6e bf ff ff       	call   c0002364 <validate>
c00063f6:	89 c6                	mov    esi,eax
c00063f8:	85 c0                	test   eax,eax
c00063fa:	0f 85 d2 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c0006400:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006404:	85 f6                	test   esi,esi
c0006406:	0f 85 c6 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c000640c:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006410:	0f 84 b7 00 00 00    	je     c00064cd <f_truncate+0xeb>
c0006416:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006419:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000641c:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000641f:	89 d1                	mov    ecx,edx
c0006421:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006424:	0f 83 a8 00 00 00    	jae    c00064d2 <f_truncate+0xf0>
c000642a:	09 c2                	or     edx,eax
c000642c:	75 15                	jne    c0006443 <f_truncate+0x61>
c000642e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006431:	31 c9                	xor    ecx,ecx
c0006433:	89 d8                	mov    eax,ebx
c0006435:	e8 7a d0 ff ff       	call   c00034b4 <remove_chain>
c000643a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006441:	eb 35                	jmp    c0006478 <f_truncate+0x96>
c0006443:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006446:	89 d8                	mov    eax,ebx
c0006448:	e8 7a cb ff ff       	call   c0002fc7 <get_fat>
c000644d:	89 c2                	mov    edx,eax
c000644f:	b8 01 00 00 00       	mov    eax,0x1
c0006454:	83 fa ff             	cmp    edx,0xffffffff
c0006457:	74 1f                	je     c0006478 <f_truncate+0x96>
c0006459:	b8 02 00 00 00       	mov    eax,0x2
c000645e:	83 fa 01             	cmp    edx,0x1
c0006461:	74 15                	je     c0006478 <f_truncate+0x96>
c0006463:	31 c0                	xor    eax,eax
c0006465:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006469:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000646c:	76 0a                	jbe    c0006478 <f_truncate+0x96>
c000646e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006471:	89 d8                	mov    eax,ebx
c0006473:	e8 3c d0 ff ff       	call   c00034b4 <remove_chain>
c0006478:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000647b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000647e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006481:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006484:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006487:	83 ca 40             	or     edx,0x40
c000648a:	85 c0                	test   eax,eax
c000648c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000648f:	75 35                	jne    c00064c6 <f_truncate+0xe4>
c0006491:	84 d2                	test   dl,dl
c0006493:	79 3d                	jns    c00064d2 <f_truncate+0xf0>
c0006495:	83 ec 0c             	sub    esp,0xc
c0006498:	8d 43 50             	lea    eax,[ebx+0x50]
c000649b:	6a 01                	push   0x1
c000649d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00064a0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00064a3:	50                   	push   eax
c00064a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00064a8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00064ac:	50                   	push   eax
c00064ad:	e8 7a b7 ff ff       	call   c0001c2c <disk_write>
c00064b2:	83 c4 20             	add    esp,0x20
c00064b5:	85 c0                	test   eax,eax
c00064b7:	75 08                	jne    c00064c1 <f_truncate+0xdf>
c00064b9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00064bd:	31 f6                	xor    esi,esi
c00064bf:	eb 11                	jmp    c00064d2 <f_truncate+0xf0>
c00064c1:	b8 01 00 00 00       	mov    eax,0x1
c00064c6:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064c9:	89 c6                	mov    esi,eax
c00064cb:	eb 05                	jmp    c00064d2 <f_truncate+0xf0>
c00064cd:	be 07 00 00 00       	mov    esi,0x7
c00064d2:	89 f0                	mov    eax,esi
c00064d4:	83 c4 14             	add    esp,0x14
c00064d7:	5b                   	pop    ebx
c00064d8:	5e                   	pop    esi
c00064d9:	c3                   	ret    

c00064da <f_unlink>:
c00064da:	56                   	push   esi
c00064db:	b9 02 00 00 00       	mov    ecx,0x2
c00064e0:	53                   	push   ebx
c00064e1:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064e7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064eb:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064f2:	e8 fa c1 ff ff       	call   c00026f1 <mount_volume>
c00064f7:	85 c0                	test   eax,eax
c00064f9:	0f 85 55 01 00 00    	jne    c0006654 <f_unlink+0x17a>
c00064ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006503:	83 ec 0c             	sub    esp,0xc
c0006506:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000650a:	68 60 04 00 00       	push   0x460
c000650f:	e8 80 1f 00 00       	call   c0008494 <ff_memalloc>
c0006514:	83 c4 10             	add    esp,0x10
c0006517:	89 c3                	mov    ebx,eax
c0006519:	b8 11 00 00 00       	mov    eax,0x11
c000651e:	85 db                	test   ebx,ebx
c0006520:	0f 84 2e 01 00 00    	je     c0006654 <f_unlink+0x17a>
c0006526:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000652a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006530:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006533:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006536:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000653d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006541:	e8 21 e9 ff ff       	call   c0004e67 <follow_path>
c0006546:	85 c0                	test   eax,eax
c0006548:	0f 85 f2 00 00 00    	jne    c0006640 <f_unlink+0x166>
c000654e:	b8 06 00 00 00       	mov    eax,0x6
c0006553:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000655b:	0f 88 df 00 00 00    	js     c0006640 <f_unlink+0x166>
c0006561:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006566:	74 0a                	je     c0006572 <f_unlink+0x98>
c0006568:	b8 07 00 00 00       	mov    eax,0x7
c000656d:	e9 ce 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c0006572:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006576:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000657a:	8a 02                	mov    al,BYTE PTR [edx]
c000657c:	3c 04                	cmp    al,0x4
c000657e:	75 12                	jne    c0006592 <f_unlink+0xb8>
c0006580:	8d 42 10             	lea    eax,[edx+0x10]
c0006583:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006587:	e8 a1 e8 ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c000658c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006590:	eb 0e                	jmp    c00065a0 <f_unlink+0xc6>
c0006592:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006599:	e8 3e e8 ff ff       	call   c0004ddc <ld_clust.isra.0>
c000659e:	89 c6                	mov    esi,eax
c00065a0:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00065a5:	75 12                	jne    c00065b9 <f_unlink+0xdf>
c00065a7:	8d 44 24 48          	lea    eax,[esp+0x48]
c00065ab:	e8 94 d6 ff ff       	call   c0003c44 <dir_remove>
c00065b0:	85 c0                	test   eax,eax
c00065b2:	74 6c                	je     c0006620 <f_unlink+0x146>
c00065b4:	e9 87 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c00065b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065bd:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065c4:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065cb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065ce:	75 21                	jne    c00065f1 <f_unlink+0x117>
c00065d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065d8:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065df:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065e6:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065ea:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065f1:	31 d2                	xor    edx,edx
c00065f3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065fa:	e8 be cb ff ff       	call   c00031bd <dir_sdi>
c00065ff:	85 c0                	test   eax,eax
c0006601:	75 3d                	jne    c0006640 <f_unlink+0x166>
c0006603:	31 d2                	xor    edx,edx
c0006605:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000660c:	e8 bc d3 ff ff       	call   c00039cd <dir_read>
c0006611:	85 c0                	test   eax,eax
c0006613:	0f 84 4f ff ff ff    	je     c0006568 <f_unlink+0x8e>
c0006619:	83 f8 04             	cmp    eax,0x4
c000661c:	75 22                	jne    c0006640 <f_unlink+0x166>
c000661e:	eb 87                	jmp    c00065a7 <f_unlink+0xcd>
c0006620:	85 f6                	test   esi,esi
c0006622:	75 0b                	jne    c000662f <f_unlink+0x155>
c0006624:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006628:	e8 3d df ff ff       	call   c000456a <sync_fs>
c000662d:	eb 11                	jmp    c0006640 <f_unlink+0x166>
c000662f:	31 c9                	xor    ecx,ecx
c0006631:	89 f2                	mov    edx,esi
c0006633:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006637:	e8 78 ce ff ff       	call   c00034b4 <remove_chain>
c000663c:	85 c0                	test   eax,eax
c000663e:	74 e4                	je     c0006624 <f_unlink+0x14a>
c0006640:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006644:	83 ec 0c             	sub    esp,0xc
c0006647:	53                   	push   ebx
c0006648:	e8 5d 1e 00 00       	call   c00084aa <ff_memfree>
c000664d:	83 c4 10             	add    esp,0x10
c0006650:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006654:	81 c4 e4 00 00 00    	add    esp,0xe4
c000665a:	5b                   	pop    ebx
c000665b:	5e                   	pop    esi
c000665c:	c3                   	ret    

c000665d <f_mkdir>:
c000665d:	57                   	push   edi
c000665e:	b9 02 00 00 00       	mov    ecx,0x2
c0006663:	56                   	push   esi
c0006664:	53                   	push   ebx
c0006665:	83 c4 80             	add    esp,0xffffff80
c0006668:	8d 54 24 08          	lea    edx,[esp+0x8]
c000666c:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006673:	e8 79 c0 ff ff       	call   c00026f1 <mount_volume>
c0006678:	89 c3                	mov    ebx,eax
c000667a:	85 c0                	test   eax,eax
c000667c:	0f 85 fe 01 00 00    	jne    c0006880 <f_mkdir+0x223>
c0006682:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006686:	bb 11 00 00 00       	mov    ebx,0x11
c000668b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000668f:	83 ec 0c             	sub    esp,0xc
c0006692:	68 60 04 00 00       	push   0x460
c0006697:	e8 f8 1d 00 00       	call   c0008494 <ff_memalloc>
c000669c:	83 c4 10             	add    esp,0x10
c000669f:	89 c7                	mov    edi,eax
c00066a1:	85 c0                	test   eax,eax
c00066a3:	0f 84 d7 01 00 00    	je     c0006880 <f_mkdir+0x223>
c00066a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066ad:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00066b3:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00066b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066b9:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066c0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066c4:	e8 9e e7 ff ff       	call   c0004e67 <follow_path>
c00066c9:	89 c3                	mov    ebx,eax
c00066cb:	85 c0                	test   eax,eax
c00066cd:	74 3e                	je     c000670d <f_mkdir+0xb0>
c00066cf:	83 f8 04             	cmp    eax,0x4
c00066d2:	75 3e                	jne    c0006712 <f_mkdir+0xb5>
c00066d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d8:	31 d2                	xor    edx,edx
c00066da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066de:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066e2:	e8 ce cb ff ff       	call   c00032b5 <create_chain>
c00066e7:	89 c6                	mov    esi,eax
c00066e9:	85 c0                	test   eax,eax
c00066eb:	74 0c                	je     c00066f9 <f_mkdir+0x9c>
c00066ed:	bb 02 00 00 00       	mov    ebx,0x2
c00066f2:	83 f8 01             	cmp    eax,0x1
c00066f5:	74 07                	je     c00066fe <f_mkdir+0xa1>
c00066f7:	eb 2a                	jmp    c0006723 <f_mkdir+0xc6>
c00066f9:	bb 07 00 00 00       	mov    ebx,0x7
c00066fe:	31 c9                	xor    ecx,ecx
c0006700:	89 f2                	mov    edx,esi
c0006702:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006706:	e8 a9 cd ff ff       	call   c00034b4 <remove_chain>
c000670b:	eb 05                	jmp    c0006712 <f_mkdir+0xb5>
c000670d:	bb 08 00 00 00       	mov    ebx,0x8
c0006712:	83 ec 0c             	sub    esp,0xc
c0006715:	57                   	push   edi
c0006716:	e8 8f 1d 00 00       	call   c00084aa <ff_memfree>
c000671b:	83 c4 10             	add    esp,0x10
c000671e:	e9 5d 01 00 00       	jmp    c0006880 <f_mkdir+0x223>
c0006723:	bb 01 00 00 00       	mov    ebx,0x1
c0006728:	83 f8 ff             	cmp    eax,0xffffffff
c000672b:	74 d1                	je     c00066fe <f_mkdir+0xa1>
c000672d:	89 f2                	mov    edx,esi
c000672f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006733:	e8 c4 ce ff ff       	call   c00035fc <dir_clear>
c0006738:	89 c3                	mov    ebx,eax
c000673a:	85 c0                	test   eax,eax
c000673c:	75 c0                	jne    c00066fe <f_mkdir+0xa1>
c000673e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006742:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006745:	74 69                	je     c00067b0 <f_mkdir+0x153>
c0006747:	b9 0b 00 00 00       	mov    ecx,0xb
c000674c:	83 c0 54             	add    eax,0x54
c000674f:	ba 20 00 00 00       	mov    edx,0x20
c0006754:	e8 9c b5 ff ff       	call   c0001cf5 <mem_set>
c0006759:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006762:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006766:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000676a:	83 c0 6a             	add    eax,0x6a
c000676d:	e8 65 b5 ff ff       	call   c0001cd7 <st_dword>
c0006772:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006776:	89 f1                	mov    ecx,esi
c0006778:	8d 50 54             	lea    edx,[eax+0x54]
c000677b:	e8 85 e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006784:	b9 20 00 00 00       	mov    ecx,0x20
c0006789:	8d 50 54             	lea    edx,[eax+0x54]
c000678c:	83 c0 74             	add    eax,0x74
c000678f:	e8 4c b5 ff ff       	call   c0001ce0 <mem_cpy>
c0006794:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006798:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000679c:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00067a0:	8d 50 74             	lea    edx,[eax+0x74]
c00067a3:	e8 5d e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c00067a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067ac:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067b0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067b4:	e8 2f db ff ff       	call   c00042e8 <dir_register>
c00067b9:	89 c3                	mov    ebx,eax
c00067bb:	85 c0                	test   eax,eax
c00067bd:	0f 85 3b ff ff ff    	jne    c00066fe <f_mkdir+0xa1>
c00067c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067c7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067ca:	75 74                	jne    c0006840 <f_mkdir+0x1e3>
c00067cc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067cf:	ba 00 00 21 50       	mov    edx,0x50210000
c00067d4:	83 c0 0c             	add    eax,0xc
c00067d7:	e8 fb b4 ff ff       	call   c0001cd7 <st_dword>
c00067dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e0:	89 f2                	mov    edx,esi
c00067e2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067e5:	83 c0 34             	add    eax,0x34
c00067e8:	e8 ea b4 ff ff       	call   c0001cd7 <st_dword>
c00067ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067f1:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067f5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067f8:	c1 e2 09             	shl    edx,0x9
c00067fb:	83 c0 38             	add    eax,0x38
c00067fe:	e8 d4 b4 ff ff       	call   c0001cd7 <st_dword>
c0006803:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006807:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000680b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000680e:	c1 e2 09             	shl    edx,0x9
c0006811:	83 c0 28             	add    eax,0x28
c0006814:	e8 be b4 ff ff       	call   c0001cd7 <st_dword>
c0006819:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006820:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006824:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006827:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000682b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000682f:	e8 8b d3 ff ff       	call   c0003bbf <store_xdir>
c0006834:	89 c3                	mov    ebx,eax
c0006836:	85 c0                	test   eax,eax
c0006838:	0f 85 d4 fe ff ff    	jne    c0006712 <f_mkdir+0xb5>
c000683e:	eb 30                	jmp    c0006870 <f_mkdir+0x213>
c0006840:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006844:	ba 00 00 21 50       	mov    edx,0x50210000
c0006849:	83 c0 16             	add    eax,0x16
c000684c:	e8 86 b4 ff ff       	call   c0001cd7 <st_dword>
c0006851:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006855:	89 f1                	mov    ecx,esi
c0006857:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000685b:	e8 a5 e5 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006860:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006864:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006868:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000686c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006870:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006874:	e8 f1 dc ff ff       	call   c000456a <sync_fs>
c0006879:	89 c3                	mov    ebx,eax
c000687b:	e9 92 fe ff ff       	jmp    c0006712 <f_mkdir+0xb5>
c0006880:	83 ec 80             	sub    esp,0xffffff80
c0006883:	89 d8                	mov    eax,ebx
c0006885:	5b                   	pop    ebx
c0006886:	5e                   	pop    esi
c0006887:	5f                   	pop    edi
c0006888:	c3                   	ret    

c0006889 <f_rename>:
c0006889:	55                   	push   ebp
c000688a:	57                   	push   edi
c000688b:	56                   	push   esi
c000688c:	53                   	push   ebx
c000688d:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006893:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000689a:	e8 a4 b9 ff ff       	call   c0002243 <get_ldnumber>
c000689f:	b9 02 00 00 00       	mov    ecx,0x2
c00068a4:	8d 54 24 14          	lea    edx,[esp+0x14]
c00068a8:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00068af:	e8 3d be ff ff       	call   c00026f1 <mount_volume>
c00068b4:	85 c0                	test   eax,eax
c00068b6:	0f 85 b5 02 00 00    	jne    c0006b71 <f_rename+0x2e8>
c00068bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c0:	83 ec 0c             	sub    esp,0xc
c00068c3:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068c7:	68 60 04 00 00       	push   0x460
c00068cc:	e8 c3 1b 00 00       	call   c0008494 <ff_memalloc>
c00068d1:	83 c4 10             	add    esp,0x10
c00068d4:	89 c3                	mov    ebx,eax
c00068d6:	b8 11 00 00 00       	mov    eax,0x11
c00068db:	85 db                	test   ebx,ebx
c00068dd:	0f 84 8e 02 00 00    	je     c0006b71 <f_rename+0x2e8>
c00068e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e7:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068ed:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068f3:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068fa:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068fe:	e8 64 e5 ff ff       	call   c0004e67 <follow_path>
c0006903:	85 c0                	test   eax,eax
c0006905:	0f 85 52 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000690b:	b8 06 00 00 00       	mov    eax,0x6
c0006910:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006918:	0f 85 3f 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000691e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006922:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006925:	0f 85 05 01 00 00    	jne    c0006a30 <f_rename+0x1a7>
c000692b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000692e:	b9 40 00 00 00       	mov    ecx,0x40
c0006933:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006937:	e8 a4 b3 ff ff       	call   c0001ce0 <mem_cpy>
c000693c:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006941:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006945:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694c:	e8 8f b3 ff ff       	call   c0001ce0 <mem_cpy>
c0006951:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006958:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000695f:	e8 03 e5 ff ff       	call   c0004e67 <follow_path>
c0006964:	85 c0                	test   eax,eax
c0006966:	75 29                	jne    c0006991 <f_rename+0x108>
c0006968:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696c:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006973:	74 0a                	je     c000697f <f_rename+0xf6>
c0006975:	b8 08 00 00 00       	mov    eax,0x8
c000697a:	e9 de 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c000697f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006986:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698d:	75 e6                	jne    c0006975 <f_rename+0xec>
c000698f:	eb 09                	jmp    c000699a <f_rename+0x111>
c0006991:	83 f8 04             	cmp    eax,0x4
c0006994:	0f 85 c3 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000699a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a1:	e8 42 d9 ff ff       	call   c00042e8 <dir_register>
c00069a6:	85 c0                	test   eax,eax
c00069a8:	0f 85 af 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c00069ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b2:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069b5:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00069b8:	89 c5                	mov    ebp,eax
c00069ba:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00069bd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069c1:	8d 46 24             	lea    eax,[esi+0x24]
c00069c4:	e8 98 b2 ff ff       	call   c0001c61 <ld_word>
c00069c9:	b9 40 00 00 00       	mov    ecx,0x40
c00069ce:	89 c7                	mov    edi,eax
c00069d0:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069d4:	89 f0                	mov    eax,esi
c00069d6:	e8 05 b3 ff ff       	call   c0001ce0 <mem_cpy>
c00069db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069df:	89 e9                	mov    ecx,ebp
c00069e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069e4:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069e7:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069ef:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069f2:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069f5:	0f b7 d7             	movzx  edx,di
c00069f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069fb:	83 c0 24             	add    eax,0x24
c00069fe:	e8 d0 b2 ff ff       	call   c0001cd3 <st_word>
c0006a03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a07:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a0a:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006a0d:	a8 10                	test   al,0x10
c0006a0f:	75 06                	jne    c0006a17 <f_rename+0x18e>
c0006a11:	83 c8 20             	or     eax,0x20
c0006a14:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a17:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1e:	e8 9c d1 ff ff       	call   c0003bbf <store_xdir>
c0006a23:	85 c0                	test   eax,eax
c0006a25:	0f 84 1c 01 00 00    	je     c0006b47 <f_rename+0x2be>
c0006a2b:	e9 2d 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c0006a30:	b9 20 00 00 00       	mov    ecx,0x20
c0006a35:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a3c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a40:	e8 9b b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a45:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a4a:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a4e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a55:	e8 86 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a5a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a61:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a68:	e8 fa e3 ff ff       	call   c0004e67 <follow_path>
c0006a6d:	85 c0                	test   eax,eax
c0006a6f:	75 27                	jne    c0006a98 <f_rename+0x20f>
c0006a71:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a75:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a7c:	0f 85 f3 fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a82:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a89:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a90:	0f 85 df fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a96:	eb 09                	jmp    c0006aa1 <f_rename+0x218>
c0006a98:	83 f8 04             	cmp    eax,0x4
c0006a9b:	0f 85 bc 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006aa1:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006aa8:	e8 3b d8 ff ff       	call   c00042e8 <dir_register>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	0f 85 a8 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006ab5:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006abc:	b9 13 00 00 00       	mov    ecx,0x13
c0006ac1:	8d 46 0d             	lea    eax,[esi+0xd]
c0006ac4:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006ac8:	e8 13 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006acd:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006ad1:	a8 10                	test   al,0x10
c0006ad3:	75 03                	jne    c0006ad8 <f_rename+0x24f>
c0006ad5:	83 c8 20             	or     eax,0x20
c0006ad8:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006adb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006adf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ae3:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006ae7:	74 5e                	je     c0006b47 <f_rename+0x2be>
c0006ae9:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006af0:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006af4:	74 51                	je     c0006b47 <f_rename+0x2be>
c0006af6:	89 f2                	mov    edx,esi
c0006af8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006afc:	8a 07                	mov    al,BYTE PTR [edi]
c0006afe:	e8 d9 e2 ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006b03:	89 c2                	mov    edx,eax
c0006b05:	89 f8                	mov    eax,edi
c0006b07:	e8 ee b3 ff ff       	call   c0001efa <clst2sect>
c0006b0c:	89 c6                	mov    esi,eax
c0006b0e:	89 d1                	mov    ecx,edx
c0006b10:	b8 02 00 00 00       	mov    eax,0x2
c0006b15:	09 f2                	or     edx,esi
c0006b17:	74 44                	je     c0006b5d <f_rename+0x2d4>
c0006b19:	89 f2                	mov    edx,esi
c0006b1b:	89 f8                	mov    eax,edi
c0006b1d:	e8 1d b9 ff ff       	call   c000243f <move_window>
c0006b22:	85 c0                	test   eax,eax
c0006b24:	75 37                	jne    c0006b5d <f_rename+0x2d4>
c0006b26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b2a:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b2e:	75 17                	jne    c0006b47 <f_rename+0x2be>
c0006b30:	8d 50 74             	lea    edx,[eax+0x74]
c0006b33:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b3a:	e8 c6 e2 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006b3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b43:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b47:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b4b:	e8 f4 d0 ff ff       	call   c0003c44 <dir_remove>
c0006b50:	85 c0                	test   eax,eax
c0006b52:	75 09                	jne    c0006b5d <f_rename+0x2d4>
c0006b54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b58:	e8 0d da ff ff       	call   c000456a <sync_fs>
c0006b5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b61:	83 ec 0c             	sub    esp,0xc
c0006b64:	53                   	push   ebx
c0006b65:	e8 40 19 00 00       	call   c00084aa <ff_memfree>
c0006b6a:	83 c4 10             	add    esp,0x10
c0006b6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b71:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b77:	5b                   	pop    ebx
c0006b78:	5e                   	pop    esi
c0006b79:	5f                   	pop    edi
c0006b7a:	5d                   	pop    ebp
c0006b7b:	c3                   	ret    

c0006b7c <f_chmod>:
c0006b7c:	57                   	push   edi
c0006b7d:	b9 02 00 00 00       	mov    ecx,0x2
c0006b82:	56                   	push   esi
c0006b83:	53                   	push   ebx
c0006b84:	83 ec 60             	sub    esp,0x60
c0006b87:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b8b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b8f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b93:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b97:	e8 55 bb ff ff       	call   c00026f1 <mount_volume>
c0006b9c:	85 c0                	test   eax,eax
c0006b9e:	0f 85 af 00 00 00    	jne    c0006c53 <f_chmod+0xd7>
c0006ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba8:	83 ec 0c             	sub    esp,0xc
c0006bab:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006baf:	68 60 04 00 00       	push   0x460
c0006bb4:	e8 db 18 00 00       	call   c0008494 <ff_memalloc>
c0006bb9:	83 c4 10             	add    esp,0x10
c0006bbc:	89 c6                	mov    esi,eax
c0006bbe:	b8 11 00 00 00       	mov    eax,0x11
c0006bc3:	85 f6                	test   esi,esi
c0006bc5:	0f 84 88 00 00 00    	je     c0006c53 <f_chmod+0xd7>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bd5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006bd8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bdb:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bdf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006be3:	e8 7f e2 ff ff       	call   c0004e67 <follow_path>
c0006be8:	85 c0                	test   eax,eax
c0006bea:	75 53                	jne    c0006c3f <f_chmod+0xc3>
c0006bec:	b8 06 00 00 00       	mov    eax,0x6
c0006bf1:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bf6:	75 47                	jne    c0006c3f <f_chmod+0xc3>
c0006bf8:	89 f9                	mov    ecx,edi
c0006bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bfe:	83 e1 27             	and    ecx,0x27
c0006c01:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c04:	75 1d                	jne    c0006c23 <f_chmod+0xa7>
c0006c06:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006c09:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c0c:	21 cb                	and    ebx,ecx
c0006c0e:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c11:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006c14:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c18:	e8 a2 cf ff ff       	call   c0003bbf <store_xdir>
c0006c1d:	85 c0                	test   eax,eax
c0006c1f:	75 1e                	jne    c0006c3f <f_chmod+0xc3>
c0006c21:	eb 13                	jmp    c0006c36 <f_chmod+0xba>
c0006c23:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c27:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2a:	21 cb                	and    ebx,ecx
c0006c2c:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2f:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c32:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	e8 2b d9 ff ff       	call   c000456a <sync_fs>
c0006c3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	56                   	push   esi
c0006c47:	e8 5e 18 00 00       	call   c00084aa <ff_memfree>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c53:	83 c4 60             	add    esp,0x60
c0006c56:	5b                   	pop    ebx
c0006c57:	5e                   	pop    esi
c0006c58:	5f                   	pop    edi
c0006c59:	c3                   	ret    

c0006c5a <f_utime>:
c0006c5a:	56                   	push   esi
c0006c5b:	b9 02 00 00 00       	mov    ecx,0x2
c0006c60:	53                   	push   ebx
c0006c61:	83 ec 64             	sub    esp,0x64
c0006c64:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c68:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c70:	e8 7c ba ff ff       	call   c00026f1 <mount_volume>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	0f 85 b5 00 00 00    	jne    c0006d32 <f_utime+0xd8>
c0006c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c81:	83 ec 0c             	sub    esp,0xc
c0006c84:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c88:	68 60 04 00 00       	push   0x460
c0006c8d:	e8 02 18 00 00       	call   c0008494 <ff_memalloc>
c0006c92:	83 c4 10             	add    esp,0x10
c0006c95:	89 c3                	mov    ebx,eax
c0006c97:	b8 11 00 00 00       	mov    eax,0x11
c0006c9c:	85 db                	test   ebx,ebx
c0006c9e:	0f 84 8e 00 00 00    	je     c0006d32 <f_utime+0xd8>
c0006ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca8:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006cae:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006cb1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006cb4:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 a6 e1 ff ff       	call   c0004e67 <follow_path>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 59                	jne    c0006d1e <f_utime+0xc4>
c0006cc5:	b8 06 00 00 00       	mov    eax,0x6
c0006cca:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ccf:	75 4d                	jne    c0006d1e <f_utime+0xc4>
c0006cd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd5:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006cd9:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006cdd:	c1 e2 10             	shl    edx,0x10
c0006ce0:	09 ca                	or     edx,ecx
c0006ce2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ce5:	75 1a                	jne    c0006d01 <f_utime+0xa7>
c0006ce7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cea:	83 c0 0c             	add    eax,0xc
c0006ced:	e8 e5 af ff ff       	call   c0001cd7 <st_dword>
c0006cf2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cf6:	e8 c4 ce ff ff       	call   c0003bbf <store_xdir>
c0006cfb:	85 c0                	test   eax,eax
c0006cfd:	75 1f                	jne    c0006d1e <f_utime+0xc4>
c0006cff:	eb 14                	jmp    c0006d15 <f_utime+0xbb>
c0006d01:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d05:	83 c0 16             	add    eax,0x16
c0006d08:	e8 ca af ff ff       	call   c0001cd7 <st_dword>
c0006d0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d11:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d19:	e8 4c d8 ff ff       	call   c000456a <sync_fs>
c0006d1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d22:	83 ec 0c             	sub    esp,0xc
c0006d25:	53                   	push   ebx
c0006d26:	e8 7f 17 00 00       	call   c00084aa <ff_memfree>
c0006d2b:	83 c4 10             	add    esp,0x10
c0006d2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d32:	83 c4 64             	add    esp,0x64
c0006d35:	5b                   	pop    ebx
c0006d36:	5e                   	pop    esi
c0006d37:	c3                   	ret    

c0006d38 <f_getlabel>:
c0006d38:	55                   	push   ebp
c0006d39:	31 c9                	xor    ecx,ecx
c0006d3b:	57                   	push   edi
c0006d3c:	56                   	push   esi
c0006d3d:	53                   	push   ebx
c0006d3e:	83 ec 6c             	sub    esp,0x6c
c0006d41:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d45:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d4c:	e8 a0 b9 ff ff       	call   c00026f1 <mount_volume>
c0006d51:	89 c6                	mov    esi,eax
c0006d53:	85 c0                	test   eax,eax
c0006d55:	0f 85 c1 01 00 00    	jne    c0006f1c <f_getlabel+0x1e4>
c0006d5b:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d63:	0f 84 5f 01 00 00    	je     c0006ec8 <f_getlabel+0x190>
c0006d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6d:	31 d2                	xor    edx,edx
c0006d6f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d73:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d7b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d7f:	e8 39 c4 ff ff       	call   c00031bd <dir_sdi>
c0006d84:	85 c0                	test   eax,eax
c0006d86:	0f 85 2d 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006d8c:	ba 01 00 00 00       	mov    edx,0x1
c0006d91:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d95:	e8 33 cc ff ff       	call   c00039cd <dir_read>
c0006d9a:	85 c0                	test   eax,eax
c0006d9c:	0f 85 17 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006da6:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006da9:	74 09                	je     c0006db4 <f_getlabel+0x7c>
c0006dab:	31 db                	xor    ebx,ebx
c0006dad:	31 c9                	xor    ecx,ecx
c0006daf:	e9 c8 00 00 00       	jmp    c0006e7c <f_getlabel+0x144>
c0006db4:	31 ed                	xor    ebp,ebp
c0006db6:	31 db                	xor    ebx,ebx
c0006db8:	31 ff                	xor    edi,edi
c0006dba:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006dbe:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006dc2:	39 fa                	cmp    edx,edi
c0006dc4:	76 4b                	jbe    c0006e11 <f_getlabel+0xd9>
c0006dc6:	47                   	inc    edi
c0006dc7:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006dca:	01 d0                	add    eax,edx
c0006dcc:	e8 90 ae ff ff       	call   c0001c61 <ld_word>
c0006dd1:	66 85 ed             	test   bp,bp
c0006dd4:	75 0d                	jne    c0006de3 <f_getlabel+0xab>
c0006dd6:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006ddc:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006de1:	76 28                	jbe    c0006e0b <f_getlabel+0xd3>
c0006de3:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006dea:	89 e9                	mov    ecx,ebp
c0006dec:	01 da                	add    edx,ebx
c0006dee:	c1 e1 10             	shl    ecx,0x10
c0006df1:	0f b7 c0             	movzx  eax,ax
c0006df4:	09 c8                	or     eax,ecx
c0006df6:	b9 04 00 00 00       	mov    ecx,0x4
c0006dfb:	e8 01 b0 ff ff       	call   c0001e01 <put_utf>
c0006e00:	84 c0                	test   al,al
c0006e02:	74 0b                	je     c0006e0f <f_getlabel+0xd7>
c0006e04:	0f b6 c0             	movzx  eax,al
c0006e07:	01 c3                	add    ebx,eax
c0006e09:	31 c0                	xor    eax,eax
c0006e0b:	89 c5                	mov    ebp,eax
c0006e0d:	eb ab                	jmp    c0006dba <f_getlabel+0x82>
c0006e0f:	31 db                	xor    ebx,ebx
c0006e11:	66 85 ed             	test   bp,bp
c0006e14:	74 02                	je     c0006e18 <f_getlabel+0xe0>
c0006e16:	31 db                	xor    ebx,ebx
c0006e18:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e1f:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e23:	e9 a0 00 00 00       	jmp    c0006ec8 <f_getlabel+0x190>
c0006e28:	83 ff 0b             	cmp    edi,0xb
c0006e2b:	74 11                	je     c0006e3e <f_getlabel+0x106>
c0006e2d:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e36:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e39:	c1 e0 08             	shl    eax,0x8
c0006e3c:	09 c2                	or     edx,eax
c0006e3e:	0f b7 d2             	movzx  edx,dx
c0006e41:	50                   	push   eax
c0006e42:	50                   	push   eax
c0006e43:	68 b5 01 00 00       	push   0x1b5
c0006e48:	52                   	push   edx
c0006e49:	e8 03 17 00 00       	call   c0008551 <ff_oem2uni>
c0006e4e:	83 c4 10             	add    esp,0x10
c0006e51:	66 85 c0             	test   ax,ax
c0006e54:	74 46                	je     c0006e9c <f_getlabel+0x164>
c0006e56:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e5d:	0f b7 c0             	movzx  eax,ax
c0006e60:	01 da                	add    edx,ebx
c0006e62:	b9 04 00 00 00       	mov    ecx,0x4
c0006e67:	e8 95 af ff ff       	call   c0001e01 <put_utf>
c0006e6c:	84 c0                	test   al,al
c0006e6e:	74 2c                	je     c0006e9c <f_getlabel+0x164>
c0006e70:	0f b6 c0             	movzx  eax,al
c0006e73:	01 c3                	add    ebx,eax
c0006e75:	83 ff 0b             	cmp    edi,0xb
c0006e78:	74 24                	je     c0006e9e <f_getlabel+0x166>
c0006e7a:	89 f9                	mov    ecx,edi
c0006e7c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e80:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e83:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e88:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e91:	e8 9f ae ff ff       	call   c0001d35 <dbc_1st>
c0006e96:	85 c0                	test   eax,eax
c0006e98:	74 a4                	je     c0006e3e <f_getlabel+0x106>
c0006e9a:	eb 8c                	jmp    c0006e28 <f_getlabel+0xf0>
c0006e9c:	31 db                	xor    ebx,ebx
c0006e9e:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006ea5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006ea8:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006eaf:	74 17                	je     c0006ec8 <f_getlabel+0x190>
c0006eb1:	4b                   	dec    ebx
c0006eb2:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006eb5:	74 ee                	je     c0006ea5 <f_getlabel+0x16d>
c0006eb7:	eb 0f                	jmp    c0006ec8 <f_getlabel+0x190>
c0006eb9:	83 f8 04             	cmp    eax,0x4
c0006ebc:	75 5c                	jne    c0006f1a <f_getlabel+0x1e2>
c0006ebe:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ec5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006ec8:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006ed0:	74 4a                	je     c0006f1c <f_getlabel+0x1e4>
c0006ed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ed6:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ed9:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006edc:	e8 5e b5 ff ff       	call   c000243f <move_window>
c0006ee1:	89 c6                	mov    esi,eax
c0006ee3:	85 c0                	test   eax,eax
c0006ee5:	75 35                	jne    c0006f1c <f_getlabel+0x1e4>
c0006ee7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eeb:	b8 43 00 00 00       	mov    eax,0x43
c0006ef0:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ef2:	80 f9 03             	cmp    cl,0x3
c0006ef5:	74 0f                	je     c0006f06 <f_getlabel+0x1ce>
c0006ef7:	31 c0                	xor    eax,eax
c0006ef9:	80 f9 04             	cmp    cl,0x4
c0006efc:	0f 94 c0             	sete   al
c0006eff:	48                   	dec    eax
c0006f00:	83 e0 c3             	and    eax,0xffffffc3
c0006f03:	83 c0 64             	add    eax,0x64
c0006f06:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006f0a:	e8 5f ad ff ff       	call   c0001c6e <ld_dword>
c0006f0f:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f16:	89 07                	mov    DWORD PTR [edi],eax
c0006f18:	eb 02                	jmp    c0006f1c <f_getlabel+0x1e4>
c0006f1a:	89 c6                	mov    esi,eax
c0006f1c:	83 c4 6c             	add    esp,0x6c
c0006f1f:	89 f0                	mov    eax,esi
c0006f21:	5b                   	pop    ebx
c0006f22:	5e                   	pop    esi
c0006f23:	5f                   	pop    edi
c0006f24:	5d                   	pop    ebp
c0006f25:	c3                   	ret    

c0006f26 <f_setlabel>:
c0006f26:	56                   	push   esi
c0006f27:	b9 02 00 00 00       	mov    ecx,0x2
c0006f2c:	53                   	push   ebx
c0006f2d:	83 ec 74             	sub    esp,0x74
c0006f30:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f34:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f3b:	e8 b1 b7 ff ff       	call   c00026f1 <mount_volume>
c0006f40:	89 c6                	mov    esi,eax
c0006f42:	85 c0                	test   eax,eax
c0006f44:	0f 85 41 02 00 00    	jne    c000718b <f_setlabel+0x265>
c0006f4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f4e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f51:	0f 85 8e 00 00 00    	jne    c0006fe5 <f_setlabel+0xbf>
c0006f57:	b9 16 00 00 00       	mov    ecx,0x16
c0006f5c:	31 d2                	xor    edx,edx
c0006f5e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f62:	31 db                	xor    ebx,ebx
c0006f64:	e8 8c ad ff ff       	call   c0001cf5 <mem_set>
c0006f69:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f70:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f73:	0f 86 0a 01 00 00    	jbe    c0007083 <f_setlabel+0x15d>
c0006f79:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f80:	e8 b6 ad ff ff       	call   c0001d3b <tchar2uni>
c0006f85:	89 c6                	mov    esi,eax
c0006f87:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f8c:	76 2a                	jbe    c0006fb8 <f_setlabel+0x92>
c0006f8e:	83 f8 ff             	cmp    eax,0xffffffff
c0006f91:	74 05                	je     c0006f98 <f_setlabel+0x72>
c0006f93:	83 fb 09             	cmp    ebx,0x9
c0006f96:	76 0a                	jbe    c0006fa2 <f_setlabel+0x7c>
c0006f98:	be 06 00 00 00       	mov    esi,0x6
c0006f9d:	e9 e9 01 00 00       	jmp    c000718b <f_setlabel+0x265>
c0006fa2:	89 c2                	mov    edx,eax
c0006fa4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fa8:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fab:	c1 ea 10             	shr    edx,0x10
c0006fae:	01 c8                	add    eax,ecx
c0006fb0:	43                   	inc    ebx
c0006fb1:	e8 1d ad ff ff       	call   c0001cd3 <st_word>
c0006fb6:	eb 04                	jmp    c0006fbc <f_setlabel+0x96>
c0006fb8:	85 c0                	test   eax,eax
c0006fba:	74 dc                	je     c0006f98 <f_setlabel+0x72>
c0006fbc:	89 f2                	mov    edx,esi
c0006fbe:	b8 17 94 02 c0       	mov    eax,0xc0029417
c0006fc3:	e8 5b ad ff ff       	call   c0001d23 <chk_chr>
c0006fc8:	85 c0                	test   eax,eax
c0006fca:	75 cc                	jne    c0006f98 <f_setlabel+0x72>
c0006fcc:	83 fb 0a             	cmp    ebx,0xa
c0006fcf:	77 c7                	ja     c0006f98 <f_setlabel+0x72>
c0006fd1:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fd4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fd8:	0f b7 d6             	movzx  edx,si
c0006fdb:	01 c8                	add    eax,ecx
c0006fdd:	43                   	inc    ebx
c0006fde:	e8 f0 ac ff ff       	call   c0001cd3 <st_word>
c0006fe3:	eb 84                	jmp    c0006f69 <f_setlabel+0x43>
c0006fe5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fea:	ba 20 00 00 00       	mov    edx,0x20
c0006fef:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ff3:	31 db                	xor    ebx,ebx
c0006ff5:	e8 fb ac ff ff       	call   c0001cf5 <mem_set>
c0006ffa:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0007001:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0007004:	76 60                	jbe    c0007066 <f_setlabel+0x140>
c0007006:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c000700d:	e8 29 ad ff ff       	call   c0001d3b <tchar2uni>
c0007012:	3d ff ff 00 00       	cmp    eax,0xffff
c0007017:	0f 87 7b ff ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000701d:	83 ec 0c             	sub    esp,0xc
c0007020:	50                   	push   eax
c0007021:	e8 97 15 00 00       	call   c00085bd <ff_wtoupper>
c0007026:	5a                   	pop    edx
c0007027:	59                   	pop    ecx
c0007028:	68 b5 01 00 00       	push   0x1b5
c000702d:	50                   	push   eax
c000702e:	e8 8e 14 00 00       	call   c00084c1 <ff_uni2oem>
c0007033:	83 c4 10             	add    esp,0x10
c0007036:	89 c6                	mov    esi,eax
c0007038:	66 85 c0             	test   ax,ax
c000703b:	0f 84 57 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007041:	0f b7 d0             	movzx  edx,ax
c0007044:	b8 10 94 02 c0       	mov    eax,0xc0029410
c0007049:	e8 d5 ac ff ff       	call   c0001d23 <chk_chr>
c000704e:	85 c0                	test   eax,eax
c0007050:	0f 85 42 ff ff ff    	jne    c0006f98 <f_setlabel+0x72>
c0007056:	66 81 fe ff 00       	cmp    si,0xff
c000705b:	0f 87 14 01 00 00    	ja     c0007175 <f_setlabel+0x24f>
c0007061:	e9 fa 00 00 00       	jmp    c0007160 <f_setlabel+0x23a>
c0007066:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c000706b:	0f 84 27 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007071:	85 db                	test   ebx,ebx
c0007073:	74 0e                	je     c0007083 <f_setlabel+0x15d>
c0007075:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007078:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c000707d:	75 04                	jne    c0007083 <f_setlabel+0x15d>
c000707f:	89 c3                	mov    ebx,eax
c0007081:	eb ee                	jmp    c0007071 <f_setlabel+0x14b>
c0007083:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007087:	31 d2                	xor    edx,edx
c0007089:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000708d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007095:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007099:	e8 1f c1 ff ff       	call   c00031bd <dir_sdi>
c000709e:	89 c6                	mov    esi,eax
c00070a0:	85 c0                	test   eax,eax
c00070a2:	0f 85 e3 00 00 00    	jne    c000718b <f_setlabel+0x265>
c00070a8:	ba 01 00 00 00       	mov    edx,0x1
c00070ad:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b1:	e8 17 c9 ff ff       	call   c00039cd <dir_read>
c00070b6:	85 c0                	test   eax,eax
c00070b8:	75 21                	jne    c00070db <f_setlabel+0x1b5>
c00070ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070be:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070c2:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070c5:	74 5d                	je     c0007124 <f_setlabel+0x1fe>
c00070c7:	85 db                	test   ebx,ebx
c00070c9:	74 0b                	je     c00070d6 <f_setlabel+0x1b0>
c00070cb:	b9 0b 00 00 00       	mov    ecx,0xb
c00070d0:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070d4:	eb 70                	jmp    c0007146 <f_setlabel+0x220>
c00070d6:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070d9:	eb 70                	jmp    c000714b <f_setlabel+0x225>
c00070db:	83 f8 04             	cmp    eax,0x4
c00070de:	75 7c                	jne    c000715c <f_setlabel+0x236>
c00070e0:	85 db                	test   ebx,ebx
c00070e2:	0f 84 a3 00 00 00    	je     c000718b <f_setlabel+0x265>
c00070e8:	ba 01 00 00 00       	mov    edx,0x1
c00070ed:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070f1:	e8 51 ca ff ff       	call   c0003b47 <dir_alloc>
c00070f6:	89 c6                	mov    esi,eax
c00070f8:	85 c0                	test   eax,eax
c00070fa:	0f 85 8b 00 00 00    	jne    c000718b <f_setlabel+0x265>
c0007100:	31 d2                	xor    edx,edx
c0007102:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007106:	b9 20 00 00 00       	mov    ecx,0x20
c000710b:	e8 e5 ab ff ff       	call   c0001cf5 <mem_set>
c0007110:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007114:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007117:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000711b:	75 18                	jne    c0007135 <f_setlabel+0x20f>
c000711d:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007120:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007124:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007127:	b9 16 00 00 00       	mov    ecx,0x16
c000712c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007130:	83 c0 02             	add    eax,0x2
c0007133:	eb 9b                	jmp    c00070d0 <f_setlabel+0x1aa>
c0007135:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007139:	b9 0b 00 00 00       	mov    ecx,0xb
c000713e:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007142:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007146:	e8 95 ab ff ff       	call   c0001ce0 <mem_cpy>
c000714b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000714f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007153:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007157:	e8 0e d4 ff ff       	call   c000456a <sync_fs>
c000715c:	89 c6                	mov    esi,eax
c000715e:	eb 2b                	jmp    c000718b <f_setlabel+0x265>
c0007160:	83 fb 0a             	cmp    ebx,0xa
c0007163:	0f 87 2f fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c0007169:	89 f0                	mov    eax,esi
c000716b:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000716f:	43                   	inc    ebx
c0007170:	e9 85 fe ff ff       	jmp    c0006ffa <f_setlabel+0xd4>
c0007175:	83 fb 09             	cmp    ebx,0x9
c0007178:	0f 87 1a fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000717e:	89 f0                	mov    eax,esi
c0007180:	66 c1 e8 08          	shr    ax,0x8
c0007184:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007188:	43                   	inc    ebx
c0007189:	eb de                	jmp    c0007169 <f_setlabel+0x243>
c000718b:	89 f0                	mov    eax,esi
c000718d:	83 c4 74             	add    esp,0x74
c0007190:	5b                   	pop    ebx
c0007191:	5e                   	pop    esi
c0007192:	c3                   	ret    

c0007193 <f_forward>:
c0007193:	55                   	push   ebp
c0007194:	57                   	push   edi
c0007195:	56                   	push   esi
c0007196:	53                   	push   ebx
c0007197:	83 ec 2c             	sub    esp,0x2c
c000719a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000719e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00071a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00071ac:	89 d8                	mov    eax,ebx
c00071ae:	e8 b1 b1 ff ff       	call   c0002364 <validate>
c00071b3:	89 c5                	mov    ebp,eax
c00071b5:	85 c0                	test   eax,eax
c00071b7:	0f 85 aa 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071c1:	85 ed                	test   ebp,ebp
c00071c3:	0f 85 9e 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071cd:	0f 84 8f 01 00 00    	je     c0007362 <f_forward+0x1cf>
c00071d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071dc:	bf 00 00 00 00       	mov    edi,0x0
c00071e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071e8:	89 d1                	mov    ecx,edx
c00071ea:	19 f9                	sbb    ecx,edi
c00071ec:	0f 83 cf 00 00 00    	jae    c00072c1 <f_forward+0x12e>
c00071f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071f6:	e9 c6 00 00 00       	jmp    c00072c1 <f_forward+0x12e>
c00071fb:	50                   	push   eax
c00071fc:	50                   	push   eax
c00071fd:	6a 00                	push   0x0
c00071ff:	6a 00                	push   0x0
c0007201:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007205:	83 c4 10             	add    esp,0x10
c0007208:	85 c0                	test   eax,eax
c000720a:	0f 84 57 01 00 00    	je     c0007367 <f_forward+0x1d4>
c0007210:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007213:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007217:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000721a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000721e:	89 d7                	mov    edi,edx
c0007220:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007223:	89 c6                	mov    esi,eax
c0007225:	0f ac fe 09          	shrd   esi,edi,0x9
c0007229:	21 ce                	and    esi,ecx
c000722b:	89 c1                	mov    ecx,eax
c000722d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007233:	0f 84 98 00 00 00    	je     c00072d1 <f_forward+0x13e>
c0007239:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000723d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007240:	89 c8                	mov    eax,ecx
c0007242:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007246:	e8 af ac ff ff       	call   c0001efa <clst2sect>
c000724b:	89 d7                	mov    edi,edx
c000724d:	09 c7                	or     edi,eax
c000724f:	0f 84 9e 00 00 00    	je     c00072f3 <f_forward+0x160>
c0007255:	31 ff                	xor    edi,edi
c0007257:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000725a:	01 c6                	add    esi,eax
c000725c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007260:	11 d7                	adc    edi,edx
c0007262:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007265:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007268:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000726c:	39 fa                	cmp    edx,edi
c000726e:	0f 85 a2 00 00 00    	jne    c0007316 <f_forward+0x183>
c0007274:	39 f0                	cmp    eax,esi
c0007276:	0f 85 9a 00 00 00    	jne    c0007316 <f_forward+0x183>
c000727c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000727f:	ba 00 02 00 00       	mov    edx,0x200
c0007284:	25 ff 01 00 00       	and    eax,0x1ff
c0007289:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000728d:	29 c2                	sub    edx,eax
c000728f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007292:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007295:	39 d1                	cmp    ecx,edx
c0007297:	76 02                	jbe    c000729b <f_forward+0x108>
c0007299:	89 d1                	mov    ecx,edx
c000729b:	8d 73 50             	lea    esi,[ebx+0x50]
c000729e:	52                   	push   edx
c000729f:	01 c6                	add    esi,eax
c00072a1:	52                   	push   edx
c00072a2:	51                   	push   ecx
c00072a3:	56                   	push   esi
c00072a4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	85 c0                	test   eax,eax
c00072ad:	74 44                	je     c00072f3 <f_forward+0x160>
c00072af:	31 ff                	xor    edi,edi
c00072b1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00072b4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00072b7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00072bb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072bf:	01 07                	add    DWORD PTR [edi],eax
c00072c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072c6:	0f 85 2f ff ff ff    	jne    c00071fb <f_forward+0x68>
c00072cc:	e9 96 00 00 00       	jmp    c0007367 <f_forward+0x1d4>
c00072d1:	85 f6                	test   esi,esi
c00072d3:	0f 85 60 ff ff ff    	jne    c0007239 <f_forward+0xa6>
c00072d9:	89 d7                	mov    edi,edx
c00072db:	09 c7                	or     edi,eax
c00072dd:	75 05                	jne    c00072e4 <f_forward+0x151>
c00072df:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072e2:	eb 0a                	jmp    c00072ee <f_forward+0x15b>
c00072e4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072e7:	89 d8                	mov    eax,ebx
c00072e9:	e8 d9 bc ff ff       	call   c0002fc7 <get_fat>
c00072ee:	83 f8 01             	cmp    eax,0x1
c00072f1:	77 0b                	ja     c00072fe <f_forward+0x16b>
c00072f3:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072f7:	bd 02 00 00 00       	mov    ebp,0x2
c00072fc:	eb 69                	jmp    c0007367 <f_forward+0x1d4>
c00072fe:	83 f8 ff             	cmp    eax,0xffffffff
c0007301:	75 0b                	jne    c000730e <f_forward+0x17b>
c0007303:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007307:	bd 01 00 00 00       	mov    ebp,0x1
c000730c:	eb 59                	jmp    c0007367 <f_forward+0x1d4>
c000730e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007311:	e9 23 ff ff ff       	jmp    c0007239 <f_forward+0xa6>
c0007316:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000731a:	79 20                	jns    c000733c <f_forward+0x1a9>
c000731c:	83 ec 0c             	sub    esp,0xc
c000731f:	6a 01                	push   0x1
c0007321:	52                   	push   edx
c0007322:	50                   	push   eax
c0007323:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007327:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000732b:	50                   	push   eax
c000732c:	e8 fb a8 ff ff       	call   c0001c2c <disk_write>
c0007331:	83 c4 20             	add    esp,0x20
c0007334:	85 c0                	test   eax,eax
c0007336:	75 cb                	jne    c0007303 <f_forward+0x170>
c0007338:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000733c:	83 ec 0c             	sub    esp,0xc
c000733f:	6a 01                	push   0x1
c0007341:	57                   	push   edi
c0007342:	56                   	push   esi
c0007343:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007347:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000734b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000734f:	50                   	push   eax
c0007350:	e8 c1 a8 ff ff       	call   c0001c16 <disk_read>
c0007355:	83 c4 20             	add    esp,0x20
c0007358:	85 c0                	test   eax,eax
c000735a:	0f 84 1c ff ff ff    	je     c000727c <f_forward+0xe9>
c0007360:	eb a1                	jmp    c0007303 <f_forward+0x170>
c0007362:	bd 07 00 00 00       	mov    ebp,0x7
c0007367:	83 c4 2c             	add    esp,0x2c
c000736a:	89 e8                	mov    eax,ebp
c000736c:	5b                   	pop    ebx
c000736d:	5e                   	pop    esi
c000736e:	5f                   	pop    edi
c000736f:	5d                   	pop    ebp
c0007370:	c3                   	ret    

c0007371 <f_mkfs>:
c0007371:	55                   	push   ebp
c0007372:	57                   	push   edi
c0007373:	56                   	push   esi
c0007374:	53                   	push   ebx
c0007375:	bb 0b 00 00 00       	mov    ebx,0xb
c000737a:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007380:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007387:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000738e:	e8 b0 ae ff ff       	call   c0002243 <get_ldnumber>
c0007393:	85 c0                	test   eax,eax
c0007395:	0f 88 ec 10 00 00    	js     c0008487 <f_mkfs+0x1116>
c000739b:	8b 14 85 e0 e5 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1a20]
c00073a2:	85 d2                	test   edx,edx
c00073a4:	74 03                	je     c00073a9 <f_mkfs+0x38>
c00073a6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00073a9:	85 f6                	test   esi,esi
c00073ab:	75 05                	jne    c00073b2 <f_mkfs+0x41>
c00073ad:	be 00 94 02 c0       	mov    esi,0xc0029400
c00073b2:	83 ec 0c             	sub    esp,0xc
c00073b5:	0f b6 c0             	movzx  eax,al
c00073b8:	bb 03 00 00 00       	mov    ebx,0x3
c00073bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073c5:	e8 49 a8 ff ff       	call   c0001c13 <disk_initialize>
c00073ca:	83 c4 10             	add    esp,0x10
c00073cd:	a8 01                	test   al,0x1
c00073cf:	0f 85 b2 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073d5:	bb 0a 00 00 00       	mov    ebx,0xa
c00073da:	a8 04                	test   al,0x4
c00073dc:	0f 85 a5 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073e5:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073e9:	85 c0                	test   eax,eax
c00073eb:	75 20                	jne    c000740d <f_mkfs+0x9c>
c00073ed:	51                   	push   ecx
c00073ee:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073f2:	50                   	push   eax
c00073f3:	6a 03                	push   0x3
c00073f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073f9:	e8 44 a8 ff ff       	call   c0001c42 <disk_ioctl>
c00073fe:	83 c4 10             	add    esp,0x10
c0007401:	85 c0                	test   eax,eax
c0007403:	74 08                	je     c000740d <f_mkfs+0x9c>
c0007405:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000740d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007411:	8d 42 ff             	lea    eax,[edx-0x1]
c0007414:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007419:	77 04                	ja     c000741f <f_mkfs+0xae>
c000741b:	85 c2                	test   edx,eax
c000741d:	74 08                	je     c0007427 <f_mkfs+0xb6>
c000741f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007427:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000742a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000742e:	48                   	dec    eax
c000742f:	3c 01                	cmp    al,0x1
c0007431:	76 05                	jbe    c0007438 <f_mkfs+0xc7>
c0007433:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007438:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000743b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000743f:	48                   	dec    eax
c0007440:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007445:	77 07                	ja     c000744e <f_mkfs+0xdd>
c0007447:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000744c:	74 08                	je     c0007456 <f_mkfs+0xe5>
c000744e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007456:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007459:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000745f:	77 07                	ja     c0007468 <f_mkfs+0xf7>
c0007461:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007464:	85 d8                	test   eax,ebx
c0007466:	74 02                	je     c000746a <f_mkfs+0xf9>
c0007468:	31 db                	xor    ebx,ebx
c000746a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007475:	77 0a                	ja     c0007481 <f_mkfs+0x110>
c0007477:	bb 11 00 00 00       	mov    ebx,0x11
c000747c:	e9 06 10 00 00       	jmp    c0008487 <f_mkfs+0x1116>
c0007481:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007488:	8b 36                	mov    esi,DWORD PTR [esi]
c000748a:	85 ed                	test   ebp,ebp
c000748c:	75 1e                	jne    c00074ac <f_mkfs+0x13b>
c000748e:	83 ec 0c             	sub    esp,0xc
c0007491:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007498:	25 00 fe ff ff       	and    eax,0xfffffe00
c000749d:	50                   	push   eax
c000749e:	e8 f1 0f 00 00       	call   c0008494 <ff_memalloc>
c00074a3:	83 c4 10             	add    esp,0x10
c00074a6:	89 c5                	mov    ebp,eax
c00074a8:	85 c0                	test   eax,eax
c00074aa:	74 cb                	je     c0007477 <f_mkfs+0x106>
c00074ac:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00074b4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00074bc:	52                   	push   edx
c00074bd:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074c1:	50                   	push   eax
c00074c2:	6a 01                	push   0x1
c00074c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074c8:	e8 75 a7 ff ff       	call   c0001c42 <disk_ioctl>
c00074cd:	83 c4 10             	add    esp,0x10
c00074d0:	85 c0                	test   eax,eax
c00074d2:	0f 85 4a 0f 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00074d8:	89 f1                	mov    ecx,esi
c00074da:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074e2:	83 e1 0f             	and    ecx,0xf
c00074e5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074ed:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074f1:	83 e6 08             	and    esi,0x8
c00074f4:	75 56                	jne    c000754c <f_mkfs+0x1db>
c00074f6:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074fa:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074fe:	83 ff 00             	cmp    edi,0x0
c0007501:	76 20                	jbe    c0007523 <f_mkfs+0x1b2>
c0007503:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007508:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007510:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007516:	83 d7 ff             	adc    edi,0xffffffff
c0007519:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000751d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007521:	eb 21                	jmp    c0007544 <f_mkfs+0x1d3>
c0007523:	ba 3f 00 00 00       	mov    edx,0x3f
c0007528:	39 f2                	cmp    edx,esi
c000752a:	19 f8                	sbb    eax,edi
c000752c:	73 1e                	jae    c000754c <f_mkfs+0x1db>
c000752e:	83 c6 c1             	add    esi,0xffffffc1
c0007531:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007539:	83 d7 ff             	adc    edi,0xffffffff
c000753c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007540:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007544:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000754c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007550:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007554:	89 04 24             	mov    DWORD PTR [esp],eax
c0007557:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000755b:	31 c0                	xor    eax,eax
c000755d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007562:	89 c7                	mov    edi,eax
c0007564:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007567:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000756b:	0f 83 c5 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c0007571:	89 df                	mov    edi,ebx
c0007573:	c1 ef 09             	shr    edi,0x9
c0007576:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000757a:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007581:	c1 ef 09             	shr    edi,0x9
c0007584:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007589:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000758d:	74 29                	je     c00075b8 <f_mkfs+0x247>
c000758f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007595:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000759a:	0f 97 c2             	seta   dl
c000759d:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00075a0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075a4:	0f 92 c0             	setb   al
c00075a7:	08 c2                	or     dl,al
c00075a9:	75 5b                	jne    c0007606 <f_mkfs+0x295>
c00075ab:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075af:	83 e0 07             	and    eax,0x7
c00075b2:	3c 04                	cmp    al,0x4
c00075b4:	74 50                	je     c0007606 <f_mkfs+0x295>
c00075b6:	eb 1b                	jmp    c00075d3 <f_mkfs+0x262>
c00075b8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00075bd:	0f 87 73 0a 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c00075c3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075c9:	76 08                	jbe    c00075d3 <f_mkfs+0x262>
c00075cb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075d3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075d7:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075db:	83 e0 01             	and    eax,0x1
c00075de:	80 e1 02             	and    cl,0x2
c00075e1:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075e5:	74 0d                	je     c00075f4 <f_mkfs+0x283>
c00075e7:	84 c0                	test   al,al
c00075e9:	0f 84 53 09 00 00    	je     c0007f42 <f_mkfs+0xbd1>
c00075ef:	e9 12 08 00 00       	jmp    c0007e06 <f_mkfs+0xa95>
c00075f4:	bb 13 00 00 00       	mov    ebx,0x13
c00075f9:	84 c0                	test   al,al
c00075fb:	0f 85 05 08 00 00    	jne    c0007e06 <f_mkfs+0xa95>
c0007601:	e9 39 0e 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0007606:	31 c0                	xor    eax,eax
c0007608:	ba ff 0f 00 00       	mov    edx,0xfff
c000760d:	89 c7                	mov    edi,eax
c000760f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007612:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007616:	0f 83 1a 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c000761c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007622:	77 39                	ja     c000765d <f_mkfs+0x2ec>
c0007624:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007629:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007631:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007634:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007638:	73 08                	jae    c0007642 <f_mkfs+0x2d1>
c000763a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007642:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007647:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000764a:	b8 00 00 00 00       	mov    eax,0x0
c000764f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007653:	73 08                	jae    c000765d <f_mkfs+0x2ec>
c0007655:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000765d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007661:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007665:	83 c0 20             	add    eax,0x20
c0007668:	83 d2 00             	adc    edx,0x0
c000766b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000766f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007673:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007677:	31 d2                	xor    edx,edx
c0007679:	31 ff                	xor    edi,edi
c000767b:	52                   	push   edx
c000767c:	89 fb                	mov    ebx,edi
c000767e:	50                   	push   eax
c000767f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007683:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007687:	e8 a0 f3 01 00       	call   c0026a2c <__udivdi3>
c000768c:	83 c4 10             	add    esp,0x10
c000768f:	c1 e0 02             	shl    eax,0x2
c0007692:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007696:	05 07 02 00 00       	add    eax,0x207
c000769b:	89 f1                	mov    ecx,esi
c000769d:	c1 e8 09             	shr    eax,0x9
c00076a0:	83 c1 ff             	add    ecx,0xffffffff
c00076a3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00076a7:	83 d3 ff             	adc    ebx,0xffffffff
c00076aa:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00076ae:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00076b2:	31 d2                	xor    edx,edx
c00076b4:	01 c8                	add    eax,ecx
c00076b6:	11 da                	adc    edx,ebx
c00076b8:	89 c1                	mov    ecx,eax
c00076ba:	f7 de                	neg    esi
c00076bc:	89 d0                	mov    eax,edx
c00076be:	83 d7 00             	adc    edi,0x0
c00076c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076c5:	f7 df                	neg    edi
c00076c7:	21 f1                	and    ecx,esi
c00076c9:	21 f8                	and    eax,edi
c00076cb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076d3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076d7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076db:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076df:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076e2:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076e6:	0f ac d0 01          	shrd   eax,edx,0x1
c00076ea:	89 df                	mov    edi,ebx
c00076ec:	d1 ea                	shr    edx,1
c00076ee:	39 c1                	cmp    ecx,eax
c00076f0:	19 d7                	sbb    edi,edx
c00076f2:	0f 83 3e 09 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c00076f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076fc:	31 d2                	xor    edx,edx
c00076fe:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007702:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007706:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000770a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000770d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007711:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007715:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007719:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000771d:	83 f8 0f             	cmp    eax,0xf
c0007720:	0f 86 10 09 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007726:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000772e:	0f 87 02 09 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007734:	31 d2                	xor    edx,edx
c0007736:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000773a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007742:	83 c0 07             	add    eax,0x7
c0007745:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000774d:	c1 e8 03             	shr    eax,0x3
c0007750:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007757:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000775b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000775f:	c1 e0 09             	shl    eax,0x9
c0007762:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007766:	48                   	dec    eax
c0007767:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000776b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000776f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007773:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007777:	31 d2                	xor    edx,edx
c0007779:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000777d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007784:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007788:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000778d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007791:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007795:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007799:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000779d:	31 ff                	xor    edi,edi
c000779f:	31 f6                	xor    esi,esi
c00077a1:	31 db                	xor    ebx,ebx
c00077a3:	85 ff                	test   edi,edi
c00077a5:	74 05                	je     c00077ac <f_mkfs+0x43b>
c00077a7:	4f                   	dec    edi
c00077a8:	74 44                	je     c00077ee <f_mkfs+0x47d>
c00077aa:	eb 4f                	jmp    c00077fb <f_mkfs+0x48a>
c00077ac:	83 ec 0c             	sub    esp,0xc
c00077af:	0f b7 c3             	movzx  eax,bx
c00077b2:	50                   	push   eax
c00077b3:	e8 05 0e 00 00       	call   c00085bd <ff_wtoupper>
c00077b8:	83 c4 10             	add    esp,0x10
c00077bb:	89 c1                	mov    ecx,eax
c00077bd:	8d 53 01             	lea    edx,[ebx+0x1]
c00077c0:	66 39 c3             	cmp    bx,ax
c00077c3:	75 3e                	jne    c0007803 <f_mkfs+0x492>
c00077c5:	be 01 00 00 00       	mov    esi,0x1
c00077ca:	89 df                	mov    edi,ebx
c00077cc:	66 01 f7             	add    di,si
c00077cf:	75 07                	jne    c00077d8 <f_mkfs+0x467>
c00077d1:	83 fe 7f             	cmp    esi,0x7f
c00077d4:	77 31                	ja     c0007807 <f_mkfs+0x496>
c00077d6:	eb 16                	jmp    c00077ee <f_mkfs+0x47d>
c00077d8:	83 ec 0c             	sub    esp,0xc
c00077db:	0f b7 ff             	movzx  edi,di
c00077de:	57                   	push   edi
c00077df:	e8 d9 0d 00 00       	call   c00085bd <ff_wtoupper>
c00077e4:	83 c4 10             	add    esp,0x10
c00077e7:	39 c7                	cmp    edi,eax
c00077e9:	75 e6                	jne    c00077d1 <f_mkfs+0x460>
c00077eb:	46                   	inc    esi
c00077ec:	eb dc                	jmp    c00077ca <f_mkfs+0x459>
c00077ee:	31 c0                	xor    eax,eax
c00077f0:	89 d9                	mov    ecx,ebx
c00077f2:	4e                   	dec    esi
c00077f3:	0f 95 c0             	setne  al
c00077f6:	43                   	inc    ebx
c00077f7:	89 c7                	mov    edi,eax
c00077f9:	eb 14                	jmp    c000780f <f_mkfs+0x49e>
c00077fb:	89 f1                	mov    ecx,esi
c00077fd:	01 f3                	add    ebx,esi
c00077ff:	31 ff                	xor    edi,edi
c0007801:	eb 0c                	jmp    c000780f <f_mkfs+0x49e>
c0007803:	89 d3                	mov    ebx,edx
c0007805:	eb 08                	jmp    c000780f <f_mkfs+0x49e>
c0007807:	bf 02 00 00 00       	mov    edi,0x2
c000780c:	83 c9 ff             	or     ecx,0xffffffff
c000780f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007813:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007816:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000781a:	0f b6 c1             	movzx  eax,cl
c000781d:	e8 3a a9 ff ff       	call   c000215c <xsum32>
c0007822:	66 c1 e9 08          	shr    cx,0x8
c0007826:	89 c2                	mov    edx,eax
c0007828:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000782f:	0f b7 c1             	movzx  eax,cx
c0007832:	e8 25 a9 ff ff       	call   c000215c <xsum32>
c0007837:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000783c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007840:	66 85 db             	test   bx,bx
c0007843:	74 1f                	je     c0007864 <f_mkfs+0x4f3>
c0007845:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007848:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000784f:	83 c0 02             	add    eax,0x2
c0007852:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007858:	39 c2                	cmp    edx,eax
c000785a:	74 08                	je     c0007864 <f_mkfs+0x4f3>
c000785c:	89 04 24             	mov    DWORD PTR [esp],eax
c000785f:	e9 3f ff ff ff       	jmp    c00077a3 <f_mkfs+0x432>
c0007864:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007867:	83 ec 0c             	sub    esp,0xc
c000786a:	05 01 02 00 00       	add    eax,0x201
c000786f:	c1 e8 09             	shr    eax,0x9
c0007872:	50                   	push   eax
c0007873:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007877:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787f:	55                   	push   ebp
c0007880:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007884:	e8 a3 a3 ff ff       	call   c0001c2c <disk_write>
c0007889:	83 c4 20             	add    esp,0x20
c000788c:	85 c0                	test   eax,eax
c000788e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007891:	0f 85 8b 0b 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007897:	89 d0                	mov    eax,edx
c0007899:	31 d2                	xor    edx,edx
c000789b:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000789f:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00078a3:	66 85 db             	test   bx,bx
c00078a6:	74 04                	je     c00078ac <f_mkfs+0x53b>
c00078a8:	31 c0                	xor    eax,eax
c00078aa:	eb b0                	jmp    c000785c <f_mkfs+0x4eb>
c00078ac:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00078b4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00078b8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00078be:	31 d2                	xor    edx,edx
c00078c0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078cb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078cf:	c1 eb 09             	shr    ebx,0x9
c00078d2:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078d9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078dd:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078e5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078e9:	8d 70 01             	lea    esi,[eax+0x1]
c00078ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078f0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078f4:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078fb:	31 d2                	xor    edx,edx
c00078fd:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007902:	89 04 24             	mov    DWORD PTR [esp],eax
c0007905:	89 c1                	mov    ecx,eax
c0007907:	89 e8                	mov    eax,ebp
c0007909:	e8 e7 a3 ff ff       	call   c0001cf5 <mem_set>
c000790e:	31 c0                	xor    eax,eax
c0007910:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007913:	76 10                	jbe    c0007925 <f_mkfs+0x5b4>
c0007915:	83 fe 07             	cmp    esi,0x7
c0007918:	76 0b                	jbe    c0007925 <f_mkfs+0x5b4>
c000791a:	40                   	inc    eax
c000791b:	83 ee 08             	sub    esi,0x8
c000791e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007923:	eb eb                	jmp    c0007910 <f_mkfs+0x59f>
c0007925:	b2 01                	mov    dl,0x1
c0007927:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000792b:	85 f6                	test   esi,esi
c000792d:	74 0c                	je     c000793b <f_mkfs+0x5ca>
c000792f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007932:	76 07                	jbe    c000793b <f_mkfs+0x5ca>
c0007934:	08 11                	or     BYTE PTR [ecx],dl
c0007936:	4e                   	dec    esi
c0007937:	d1 e2                	shl    edx,1
c0007939:	eb f0                	jmp    c000792b <f_mkfs+0x5ba>
c000793b:	89 df                	mov    edi,ebx
c000793d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007941:	76 04                	jbe    c0007947 <f_mkfs+0x5d6>
c0007943:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007947:	83 ec 0c             	sub    esp,0xc
c000794a:	57                   	push   edi
c000794b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000794f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007953:	55                   	push   ebp
c0007954:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007958:	e8 cf a2 ff ff       	call   c0001c2c <disk_write>
c000795d:	83 c4 20             	add    esp,0x20
c0007960:	85 c0                	test   eax,eax
c0007962:	0f 85 ba 0a 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007968:	31 d2                	xor    edx,edx
c000796a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000796e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007972:	29 fb                	sub    ebx,edi
c0007974:	0f 85 7a ff ff ff    	jne    c00078f4 <f_mkfs+0x583>
c000797a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000797e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007986:	31 f6                	xor    esi,esi
c0007988:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000798c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000798f:	31 d2                	xor    edx,edx
c0007991:	89 e8                	mov    eax,ebp
c0007993:	e8 5d a3 ff ff       	call   c0001cf5 <mem_set>
c0007998:	31 c9                	xor    ecx,ecx
c000799a:	85 db                	test   ebx,ebx
c000799c:	75 40                	jne    c00079de <f_mkfs+0x66d>
c000799e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00079a3:	89 e8                	mov    eax,ebp
c00079a5:	bb 02 00 00 00       	mov    ebx,0x2
c00079aa:	e8 28 a3 ff ff       	call   c0001cd7 <st_dword>
c00079af:	8d 45 04             	lea    eax,[ebp+0x4]
c00079b2:	83 ca ff             	or     edx,0xffffffff
c00079b5:	e8 1d a3 ff ff       	call   c0001cd7 <st_dword>
c00079ba:	b9 08 00 00 00       	mov    ecx,0x8
c00079bf:	eb 1d                	jmp    c00079de <f_mkfs+0x66d>
c00079c1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c4:	76 3b                	jbe    c0007a01 <f_mkfs+0x690>
c00079c6:	43                   	inc    ebx
c00079c7:	83 fe 01             	cmp    esi,0x1
c00079ca:	89 da                	mov    edx,ebx
c00079cc:	77 03                	ja     c00079d1 <f_mkfs+0x660>
c00079ce:	83 ca ff             	or     edx,0xffffffff
c00079d1:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079d5:	4e                   	dec    esi
c00079d6:	e8 fc a2 ff ff       	call   c0001cd7 <st_dword>
c00079db:	83 c1 04             	add    ecx,0x4
c00079de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079e2:	85 f6                	test   esi,esi
c00079e4:	75 db                	jne    c00079c1 <f_mkfs+0x650>
c00079e6:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079eb:	77 14                	ja     c0007a01 <f_mkfs+0x690>
c00079ed:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079f1:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079f8:	85 f6                	test   esi,esi
c00079fa:	74 05                	je     c0007a01 <f_mkfs+0x690>
c00079fc:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079ff:	77 dd                	ja     c00079de <f_mkfs+0x66d>
c0007a01:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007a05:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a09:	39 cf                	cmp    edi,ecx
c0007a0b:	76 02                	jbe    c0007a0f <f_mkfs+0x69e>
c0007a0d:	89 cf                	mov    edi,ecx
c0007a0f:	83 ec 0c             	sub    esp,0xc
c0007a12:	57                   	push   edi
c0007a13:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a17:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a1b:	55                   	push   ebp
c0007a1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a20:	e8 07 a2 ff ff       	call   c0001c2c <disk_write>
c0007a25:	83 c4 20             	add    esp,0x20
c0007a28:	85 c0                	test   eax,eax
c0007a2a:	0f 85 f2 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007a30:	31 d2                	xor    edx,edx
c0007a32:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a36:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a3a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a3e:	0f 85 48 ff ff ff    	jne    c000798c <f_mkfs+0x61b>
c0007a44:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a47:	31 d2                	xor    edx,edx
c0007a49:	89 e8                	mov    eax,ebp
c0007a4b:	31 ff                	xor    edi,edi
c0007a4d:	e8 a3 a2 ff ff       	call   c0001cf5 <mem_set>
c0007a52:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a55:	ba 02 00 00 00       	mov    edx,0x2
c0007a5a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a5e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a62:	e8 70 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a67:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a6a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a6e:	e8 64 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a73:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a76:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a7a:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a7e:	e8 54 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a83:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a86:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a8a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a8e:	83 c2 02             	add    edx,0x2
c0007a91:	e8 41 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a96:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a99:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a9d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007aa1:	e8 31 a2 ff ff       	call   c0001cd7 <st_dword>
c0007aa6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007aaa:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007aaf:	89 c6                	mov    esi,eax
c0007ab1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ab5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007ab9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007abc:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007ac0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007ac3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007ac7:	39 cb                	cmp    ebx,ecx
c0007ac9:	76 02                	jbe    c0007acd <f_mkfs+0x75c>
c0007acb:	89 cb                	mov    ebx,ecx
c0007acd:	83 ec 0c             	sub    esp,0xc
c0007ad0:	53                   	push   ebx
c0007ad1:	57                   	push   edi
c0007ad2:	56                   	push   esi
c0007ad3:	55                   	push   ebp
c0007ad4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ad8:	e8 4f a1 ff ff       	call   c0001c2c <disk_write>
c0007add:	83 c4 20             	add    esp,0x20
c0007ae0:	85 c0                	test   eax,eax
c0007ae2:	0f 85 3a 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007ae8:	31 d2                	xor    edx,edx
c0007aea:	b9 00 02 00 00       	mov    ecx,0x200
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 ff a1 ff ff       	call   c0001cf5 <mem_set>
c0007af6:	31 d2                	xor    edx,edx
c0007af8:	01 de                	add    esi,ebx
c0007afa:	11 d7                	adc    edi,edx
c0007afc:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007aff:	75 bf                	jne    c0007ac0 <f_mkfs+0x74f>
c0007b01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b05:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007b09:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007b11:	b9 00 02 00 00       	mov    ecx,0x200
c0007b16:	31 d2                	xor    edx,edx
c0007b18:	89 e8                	mov    eax,ebp
c0007b1a:	e8 d6 a1 ff ff       	call   c0001cf5 <mem_set>
c0007b1f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b24:	ba e0 94 02 c0       	mov    edx,0xc00294e0
c0007b29:	89 e8                	mov    eax,ebp
c0007b2b:	e8 b0 a1 ff ff       	call   c0001ce0 <mem_cpy>
c0007b30:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b33:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b37:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b3b:	e8 9a a1 ff ff       	call   c0001cda <st_qword>
c0007b40:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b44:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b47:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b4b:	e8 8a a1 ff ff       	call   c0001cda <st_qword>
c0007b50:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b53:	ba 20 00 00 00       	mov    edx,0x20
c0007b58:	e8 7a a1 ff ff       	call   c0001cd7 <st_dword>
c0007b5d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b61:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b65:	e8 6d a1 ff ff       	call   c0001cd7 <st_dword>
c0007b6a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b6e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b72:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b76:	e8 5c a1 ff ff       	call   c0001cd7 <st_dword>
c0007b7b:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b7e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b82:	e8 50 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b87:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b8b:	8d 50 02             	lea    edx,[eax+0x2]
c0007b8e:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b91:	e8 41 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b96:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b99:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b9e:	e8 34 a1 ff ff       	call   c0001cd7 <st_dword>
c0007ba3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007ba6:	ba 00 01 00 00       	mov    edx,0x100
c0007bab:	e8 23 a1 ff ff       	call   c0001cd3 <st_word>
c0007bb0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007bb4:	b8 0a 00 00 00       	mov    eax,0xa
c0007bb9:	48                   	dec    eax
c0007bba:	74 05                	je     c0007bc1 <f_mkfs+0x850>
c0007bbc:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007bbf:	eb f8                	jmp    c0007bb9 <f_mkfs+0x848>
c0007bc1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bc5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007bc9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bcd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bd1:	74 05                	je     c0007bd8 <f_mkfs+0x867>
c0007bd3:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bd6:	eb f5                	jmp    c0007bcd <f_mkfs+0x85c>
c0007bd8:	8d 45 78             	lea    eax,[ebp+0x78]
c0007bdb:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007be0:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007be6:	31 db                	xor    ebx,ebx
c0007be8:	e8 e6 a0 ff ff       	call   c0001cd3 <st_word>
c0007bed:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bf3:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bf8:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bfb:	e8 d3 a0 ff ff       	call   c0001cd3 <st_word>
c0007c00:	31 c9                	xor    ecx,ecx
c0007c02:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007c05:	83 f8 01             	cmp    eax,0x1
c0007c08:	76 13                	jbe    c0007c1d <f_mkfs+0x8ac>
c0007c0a:	83 f9 70             	cmp    ecx,0x70
c0007c0d:	74 0e                	je     c0007c1d <f_mkfs+0x8ac>
c0007c0f:	89 da                	mov    edx,ebx
c0007c11:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c16:	e8 41 a5 ff ff       	call   c000215c <xsum32>
c0007c1b:	89 c3                	mov    ebx,eax
c0007c1d:	41                   	inc    ecx
c0007c1e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c24:	75 dc                	jne    c0007c02 <f_mkfs+0x891>
c0007c26:	89 f0                	mov    eax,esi
c0007c28:	89 fa                	mov    edx,edi
c0007c2a:	83 c0 01             	add    eax,0x1
c0007c2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c31:	83 d2 00             	adc    edx,0x0
c0007c34:	83 ec 0c             	sub    esp,0xc
c0007c37:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c3b:	6a 01                	push   0x1
c0007c3d:	57                   	push   edi
c0007c3e:	56                   	push   esi
c0007c3f:	55                   	push   ebp
c0007c40:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c44:	e8 e3 9f ff ff       	call   c0001c2c <disk_write>
c0007c49:	83 c4 20             	add    esp,0x20
c0007c4c:	85 c0                	test   eax,eax
c0007c4e:	0f 85 ce 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007c54:	31 d2                	xor    edx,edx
c0007c56:	b9 00 02 00 00       	mov    ecx,0x200
c0007c5b:	89 e8                	mov    eax,ebp
c0007c5d:	e8 93 a0 ff ff       	call   c0001cf5 <mem_set>
c0007c62:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c67:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c6a:	e8 64 a0 ff ff       	call   c0001cd3 <st_word>
c0007c6f:	89 f0                	mov    eax,esi
c0007c71:	89 fa                	mov    edx,edi
c0007c73:	83 c0 09             	add    eax,0x9
c0007c76:	83 d2 00             	adc    edx,0x0
c0007c79:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c7c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c80:	31 c9                	xor    ecx,ecx
c0007c82:	41                   	inc    ecx
c0007c83:	89 da                	mov    edx,ebx
c0007c85:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c8a:	e8 cd a4 ff ff       	call   c000215c <xsum32>
c0007c8f:	89 c3                	mov    ebx,eax
c0007c91:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c97:	75 e9                	jne    c0007c82 <f_mkfs+0x911>
c0007c99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c9d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007ca1:	83 c0 01             	add    eax,0x1
c0007ca4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007ca8:	83 d2 00             	adc    edx,0x0
c0007cab:	83 ec 0c             	sub    esp,0xc
c0007cae:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007cb2:	6a 01                	push   0x1
c0007cb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cb8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cbc:	55                   	push   ebp
c0007cbd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cc1:	e8 66 9f ff ff       	call   c0001c2c <disk_write>
c0007cc6:	83 c4 20             	add    esp,0x20
c0007cc9:	85 c0                	test   eax,eax
c0007ccb:	0f 85 51 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007cd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cd5:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007cd9:	75 09                	jne    c0007ce4 <f_mkfs+0x973>
c0007cdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007cde:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ce2:	74 12                	je     c0007cf6 <f_mkfs+0x985>
c0007ce4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ce8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cf0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cf4:	eb 8a                	jmp    c0007c80 <f_mkfs+0x90f>
c0007cf6:	31 d2                	xor    edx,edx
c0007cf8:	b9 00 02 00 00       	mov    ecx,0x200
c0007cfd:	89 e8                	mov    eax,ebp
c0007cff:	e8 f1 9f ff ff       	call   c0001cf5 <mem_set>
c0007d04:	83 c6 0b             	add    esi,0xb
c0007d07:	83 d7 00             	adc    edi,0x0
c0007d0a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007d0e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007d12:	31 c9                	xor    ecx,ecx
c0007d14:	41                   	inc    ecx
c0007d15:	89 da                	mov    edx,ebx
c0007d17:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d1c:	e8 3b a4 ff ff       	call   c000215c <xsum32>
c0007d21:	89 c3                	mov    ebx,eax
c0007d23:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d29:	75 e9                	jne    c0007d14 <f_mkfs+0x9a3>
c0007d2b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d2e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d32:	83 c6 01             	add    esi,0x1
c0007d35:	83 d7 00             	adc    edi,0x0
c0007d38:	83 ec 0c             	sub    esp,0xc
c0007d3b:	6a 01                	push   0x1
c0007d3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d45:	55                   	push   ebp
c0007d46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d4a:	e8 dd 9e ff ff       	call   c0001c2c <disk_write>
c0007d4f:	83 c4 20             	add    esp,0x20
c0007d52:	85 c0                	test   eax,eax
c0007d54:	0f 85 c8 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007d5a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d5e:	75 06                	jne    c0007d66 <f_mkfs+0x9f5>
c0007d60:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d64:	74 09                	je     c0007d6f <f_mkfs+0x9fe>
c0007d66:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d69:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d6d:	eb a3                	jmp    c0007d12 <f_mkfs+0x9a1>
c0007d6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d73:	89 da                	mov    edx,ebx
c0007d75:	01 e8                	add    eax,ebp
c0007d77:	e8 5b 9f ff ff       	call   c0001cd7 <st_dword>
c0007d7c:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d81:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d89:	75 e4                	jne    c0007d6f <f_mkfs+0x9fe>
c0007d8b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d8e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d92:	83 c6 02             	add    esi,0x2
c0007d95:	83 d7 00             	adc    edi,0x0
c0007d98:	83 ec 0c             	sub    esp,0xc
c0007d9b:	6a 01                	push   0x1
c0007d9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da5:	55                   	push   ebp
c0007da6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007daa:	e8 7d 9e ff ff       	call   c0001c2c <disk_write>
c0007daf:	83 c4 20             	add    esp,0x20
c0007db2:	85 c0                	test   eax,eax
c0007db4:	0f 85 68 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007dba:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007dbf:	74 0d                	je     c0007dce <f_mkfs+0xa5d>
c0007dc1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007dc9:	e9 43 fd ff ff       	jmp    c0007b11 <f_mkfs+0x7a0>
c0007dce:	b1 07                	mov    cl,0x7
c0007dd0:	e9 e3 05 00 00       	jmp    c00083b8 <f_mkfs+0x1047>
c0007dd5:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007dda:	0f 85 4f 02 00 00    	jne    c000802f <f_mkfs+0xcbe>
c0007de0:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007de5:	0f 86 22 02 00 00    	jbe    c000800d <f_mkfs+0xc9c>
c0007deb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007df0:	0f 85 81 06 00 00    	jne    c0008477 <f_mkfs+0x1106>
c0007df6:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007df9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dfd:	83 f8 40             	cmp    eax,0x40
c0007e00:	0f 87 51 06 00 00    	ja     c0008457 <f_mkfs+0x10e6>
c0007e06:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e0a:	85 ff                	test   edi,edi
c0007e0c:	75 1c                	jne    c0007e2a <f_mkfs+0xab9>
c0007e0e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e11:	ba e0 93 02 c0       	mov    edx,0xc00293e0
c0007e16:	c1 e9 0c             	shr    ecx,0xc
c0007e19:	bf 01 00 00 00       	mov    edi,0x1
c0007e1e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e21:	66 85 c0             	test   ax,ax
c0007e24:	0f 85 95 01 00 00    	jne    c0007fbf <f_mkfs+0xc4e>
c0007e2a:	31 d2                	xor    edx,edx
c0007e2c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e2f:	f7 f7                	div    edi
c0007e31:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e36:	0f 86 95 01 00 00    	jbe    c0007fd1 <f_mkfs+0xc60>
c0007e3c:	83 c0 02             	add    eax,0x2
c0007e3f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e44:	01 c0                	add    eax,eax
c0007e46:	05 ff 01 00 00       	add    eax,0x1ff
c0007e4b:	be 01 00 00 00       	mov    esi,0x1
c0007e50:	c1 e8 09             	shr    eax,0x9
c0007e53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e57:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e5b:	c1 e0 05             	shl    eax,0x5
c0007e5e:	c1 e8 09             	shr    eax,0x9
c0007e61:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e65:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e6a:	31 d2                	xor    edx,edx
c0007e6c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e70:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e74:	89 f0                	mov    eax,esi
c0007e76:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e7a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e7e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e82:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e86:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e8a:	31 d2                	xor    edx,edx
c0007e8c:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e91:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e95:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e99:	31 db                	xor    ebx,ebx
c0007e9b:	01 c8                	add    eax,ecx
c0007e9d:	11 da                	adc    edx,ebx
c0007e9f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007ea3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007ea7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007eab:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007eaf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007eb3:	f7 da                	neg    edx
c0007eb5:	21 d1                	and    ecx,edx
c0007eb7:	29 d9                	sub    ecx,ebx
c0007eb9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ebe:	0f 85 20 01 00 00    	jne    c0007fe4 <f_mkfs+0xc73>
c0007ec4:	31 db                	xor    ebx,ebx
c0007ec6:	01 ce                	add    esi,ecx
c0007ec8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ecc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ed0:	31 d2                	xor    edx,edx
c0007ed2:	89 f8                	mov    eax,edi
c0007ed4:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007ed8:	c1 e0 04             	shl    eax,0x4
c0007edb:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007edf:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ee3:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ee7:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eeb:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eee:	19 d3                	sbb    ebx,edx
c0007ef0:	0f 82 40 01 00 00    	jb     c0008036 <f_mkfs+0xcc5>
c0007ef6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ef9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007efd:	89 c8                	mov    eax,ecx
c0007eff:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007f04:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007f08:	29 f0                	sub    eax,esi
c0007f0a:	29 d0                	sub    eax,edx
c0007f0c:	31 d2                	xor    edx,edx
c0007f0e:	f7 f7                	div    edi
c0007f10:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f15:	89 c3                	mov    ebx,eax
c0007f17:	0f 85 b8 fe ff ff    	jne    c0007dd5 <f_mkfs+0xa64>
c0007f1d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f22:	0f 87 1d 01 00 00    	ja     c0008045 <f_mkfs+0xcd4>
c0007f28:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f2d:	0f 85 03 01 00 00    	jne    c0008036 <f_mkfs+0xcc5>
c0007f33:	83 ff 01             	cmp    edi,0x1
c0007f36:	0f 86 fa 00 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007f3c:	d1 ef                	shr    edi,1
c0007f3e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f42:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f46:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f49:	85 db                	test   ebx,ebx
c0007f4b:	75 2d                	jne    c0007f7a <f_mkfs+0xc09>
c0007f4d:	89 cb                	mov    ebx,ecx
c0007f4f:	ba f0 93 02 c0       	mov    edx,0xc00293f0
c0007f54:	c1 eb 11             	shr    ebx,0x11
c0007f57:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f5f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f62:	66 85 c0             	test   ax,ax
c0007f65:	74 11                	je     c0007f78 <f_mkfs+0xc07>
c0007f67:	83 c2 02             	add    edx,0x2
c0007f6a:	39 d8                	cmp    eax,ebx
c0007f6c:	77 0a                	ja     c0007f78 <f_mkfs+0xc07>
c0007f6e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f72:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f76:	eb e7                	jmp    c0007f5f <f_mkfs+0xbee>
c0007f78:	31 db                	xor    ebx,ebx
c0007f7a:	31 d2                	xor    edx,edx
c0007f7c:	89 c8                	mov    eax,ecx
c0007f7e:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f82:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f89:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f8e:	c1 ea 09             	shr    edx,0x9
c0007f91:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f96:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f9a:	0f 87 96 00 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007fa0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fa4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007fac:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fb0:	be 20 00 00 00       	mov    esi,0x20
c0007fb5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007fba:	e9 a6 fe ff ff       	jmp    c0007e65 <f_mkfs+0xaf4>
c0007fbf:	83 c2 02             	add    edx,0x2
c0007fc2:	39 c8                	cmp    eax,ecx
c0007fc4:	0f 87 60 fe ff ff    	ja     c0007e2a <f_mkfs+0xab9>
c0007fca:	01 ff                	add    edi,edi
c0007fcc:	e9 4d fe ff ff       	jmp    c0007e1e <f_mkfs+0xaad>
c0007fd1:	8d 04 40             	lea    eax,[eax+eax*2]
c0007fd4:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007fd9:	40                   	inc    eax
c0007fda:	d1 e8                	shr    eax,1
c0007fdc:	83 c0 03             	add    eax,0x3
c0007fdf:	e9 62 fe ff ff       	jmp    c0007e46 <f_mkfs+0xad5>
c0007fe4:	31 d2                	xor    edx,edx
c0007fe6:	89 c8                	mov    eax,ecx
c0007fe8:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fec:	85 d2                	test   edx,edx
c0007fee:	74 0c                	je     c0007ffc <f_mkfs+0xc8b>
c0007ff0:	49                   	dec    ecx
c0007ff1:	46                   	inc    esi
c0007ff2:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007ff7:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007ffc:	89 c8                	mov    eax,ecx
c0007ffe:	31 d2                	xor    edx,edx
c0008000:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008004:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008008:	e9 c3 fe ff ff       	jmp    c0007ed0 <f_mkfs+0xb5f>
c000800d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008012:	77 31                	ja     c0008045 <f_mkfs+0xcd4>
c0008014:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008019:	75 1b                	jne    c0008036 <f_mkfs+0xcc5>
c000801b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000801e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008022:	3d 80 00 00 00       	cmp    eax,0x80
c0008027:	0f 86 d9 fd ff ff    	jbe    c0007e06 <f_mkfs+0xa95>
c000802d:	eb 07                	jmp    c0008036 <f_mkfs+0xcc5>
c000802f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008034:	76 0a                	jbe    c0008040 <f_mkfs+0xccf>
c0008036:	bb 0e 00 00 00       	mov    ebx,0xe
c000803b:	e9 ff 03 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0008040:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008045:	31 d2                	xor    edx,edx
c0008047:	b9 00 02 00 00       	mov    ecx,0x200
c000804c:	89 e8                	mov    eax,ebp
c000804e:	e8 a2 9c ff ff       	call   c0001cf5 <mem_set>
c0008053:	b9 0b 00 00 00       	mov    ecx,0xb
c0008058:	ba 02 95 02 c0       	mov    edx,0xc0029502
c000805d:	89 e8                	mov    eax,ebp
c000805f:	e8 7c 9c ff ff       	call   c0001ce0 <mem_cpy>
c0008064:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008067:	ba 00 02 00 00       	mov    edx,0x200
c000806c:	e8 62 9c ff ff       	call   c0001cd3 <st_word>
c0008071:	89 f8                	mov    eax,edi
c0008073:	0f b7 d6             	movzx  edx,si
c0008076:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008079:	8d 45 0e             	lea    eax,[ebp+0xe]
c000807c:	e8 52 9c ff ff       	call   c0001cd3 <st_word>
c0008081:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0008085:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000808a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c000808d:	75 08                	jne    c0008097 <f_mkfs+0xd26>
c000808f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008097:	8d 45 11             	lea    eax,[ebp+0x11]
c000809a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000809e:	e8 30 9c ff ff       	call   c0001cd3 <st_word>
c00080a3:	b8 ff ff 00 00       	mov    eax,0xffff
c00080a8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00080ac:	39 d0                	cmp    eax,edx
c00080ae:	b8 00 00 00 00       	mov    eax,0x0
c00080b3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00080b7:	72 0a                	jb     c00080c3 <f_mkfs+0xd52>
c00080b9:	8d 45 13             	lea    eax,[ebp+0x13]
c00080bc:	e8 12 9c ff ff       	call   c0001cd3 <st_word>
c00080c1:	eb 08                	jmp    c00080cb <f_mkfs+0xd5a>
c00080c3:	8d 45 20             	lea    eax,[ebp+0x20]
c00080c6:	e8 0c 9c ff ff       	call   c0001cd7 <st_dword>
c00080cb:	8d 45 18             	lea    eax,[ebp+0x18]
c00080ce:	ba 3f 00 00 00       	mov    edx,0x3f
c00080d3:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080d7:	e8 f7 9b ff ff       	call   c0001cd3 <st_word>
c00080dc:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080df:	ba ff 00 00 00       	mov    edx,0xff
c00080e4:	e8 ea 9b ff ff       	call   c0001cd3 <st_word>
c00080e9:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080f0:	e8 e2 9b ff ff       	call   c0001cd7 <st_dword>
c00080f5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080fa:	75 57                	jne    c0008153 <f_mkfs+0xde2>
c00080fc:	8d 45 43             	lea    eax,[ebp+0x43]
c00080ff:	ba 00 00 21 50       	mov    edx,0x50210000
c0008104:	e8 ce 9b ff ff       	call   c0001cd7 <st_dword>
c0008109:	8d 45 24             	lea    eax,[ebp+0x24]
c000810c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008110:	e8 c2 9b ff ff       	call   c0001cd7 <st_dword>
c0008115:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008118:	ba 02 00 00 00       	mov    edx,0x2
c000811d:	e8 b5 9b ff ff       	call   c0001cd7 <st_dword>
c0008122:	8d 45 30             	lea    eax,[ebp+0x30]
c0008125:	ba 01 00 00 00       	mov    edx,0x1
c000812a:	e8 a4 9b ff ff       	call   c0001cd3 <st_word>
c000812f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008132:	ba 06 00 00 00       	mov    edx,0x6
c0008137:	e8 97 9b ff ff       	call   c0001cd3 <st_word>
c000813c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008140:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008144:	8d 45 47             	lea    eax,[ebp+0x47]
c0008147:	b9 13 00 00 00       	mov    ecx,0x13
c000814c:	ba 0e 95 02 c0       	mov    edx,0xc002950e
c0008151:	eb 2f                	jmp    c0008182 <f_mkfs+0xe11>
c0008153:	8d 45 27             	lea    eax,[ebp+0x27]
c0008156:	ba 00 00 21 50       	mov    edx,0x50210000
c000815b:	e8 77 9b ff ff       	call   c0001cd7 <st_dword>
c0008160:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008165:	8d 45 16             	lea    eax,[ebp+0x16]
c0008168:	e8 66 9b ff ff       	call   c0001cd3 <st_word>
c000816d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008171:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008175:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008178:	b9 13 00 00 00       	mov    ecx,0x13
c000817d:	ba 22 95 02 c0       	mov    edx,0xc0029522
c0008182:	e8 59 9b ff ff       	call   c0001ce0 <mem_cpy>
c0008187:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c000818d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008192:	89 f0                	mov    eax,esi
c0008194:	e8 3a 9b ff ff       	call   c0001cd3 <st_word>
c0008199:	83 ec 0c             	sub    esp,0xc
c000819c:	6a 01                	push   0x1
c000819e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a6:	55                   	push   ebp
c00081a7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081ab:	e8 7c 9a ff ff       	call   c0001c2c <disk_write>
c00081b0:	83 c4 20             	add    esp,0x20
c00081b3:	85 c0                	test   eax,eax
c00081b5:	0f 85 67 02 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00081bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081c0:	0f 85 b7 00 00 00    	jne    c000827d <f_mkfs+0xf0c>
c00081c6:	83 ec 0c             	sub    esp,0xc
c00081c9:	6a 01                	push   0x1
c00081cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081cf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081d3:	83 c0 06             	add    eax,0x6
c00081d6:	83 d2 00             	adc    edx,0x0
c00081d9:	52                   	push   edx
c00081da:	50                   	push   eax
c00081db:	55                   	push   ebp
c00081dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081e0:	e8 47 9a ff ff       	call   c0001c2c <disk_write>
c00081e5:	83 c4 20             	add    esp,0x20
c00081e8:	b9 00 02 00 00       	mov    ecx,0x200
c00081ed:	31 d2                	xor    edx,edx
c00081ef:	89 e8                	mov    eax,ebp
c00081f1:	e8 ff 9a ff ff       	call   c0001cf5 <mem_set>
c00081f6:	ba 52 52 61 41       	mov    edx,0x41615252
c00081fb:	89 e8                	mov    eax,ebp
c00081fd:	e8 d5 9a ff ff       	call   c0001cd7 <st_dword>
c0008202:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008208:	ba 72 72 41 61       	mov    edx,0x61417272
c000820d:	e8 c5 9a ff ff       	call   c0001cd7 <st_dword>
c0008212:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008215:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000821b:	e8 b7 9a ff ff       	call   c0001cd7 <st_dword>
c0008220:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008226:	ba 02 00 00 00       	mov    edx,0x2
c000822b:	e8 a7 9a ff ff       	call   c0001cd7 <st_dword>
c0008230:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008235:	89 f0                	mov    eax,esi
c0008237:	e8 97 9a ff ff       	call   c0001cd3 <st_word>
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	6a 01                	push   0x1
c0008241:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008245:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008249:	83 c0 07             	add    eax,0x7
c000824c:	83 d2 00             	adc    edx,0x0
c000824f:	52                   	push   edx
c0008250:	50                   	push   eax
c0008251:	55                   	push   ebp
c0008252:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008256:	e8 d1 99 ff ff       	call   c0001c2c <disk_write>
c000825b:	83 c4 14             	add    esp,0x14
c000825e:	6a 01                	push   0x1
c0008260:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008264:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008268:	83 c0 01             	add    eax,0x1
c000826b:	83 d2 00             	adc    edx,0x0
c000826e:	52                   	push   edx
c000826f:	50                   	push   eax
c0008270:	55                   	push   ebp
c0008271:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008275:	e8 b2 99 ff ff       	call   c0001c2c <disk_write>
c000827a:	83 c4 20             	add    esp,0x20
c000827d:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008284:	31 d2                	xor    edx,edx
c0008286:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000828c:	31 db                	xor    ebx,ebx
c000828e:	89 e8                	mov    eax,ebp
c0008290:	e8 60 9a ff ff       	call   c0001cf5 <mem_set>
c0008295:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000829a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00082a1:	0f 94 c3             	sete   bl
c00082a4:	4b                   	dec    ebx
c00082a5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00082ab:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00082b1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082b6:	75 21                	jne    c00082d9 <f_mkfs+0xf68>
c00082b8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00082bd:	89 e8                	mov    eax,ebp
c00082bf:	e8 13 9a ff ff       	call   c0001cd7 <st_dword>
c00082c4:	8d 45 04             	lea    eax,[ebp+0x4]
c00082c7:	83 ca ff             	or     edx,0xffffffff
c00082ca:	e8 08 9a ff ff       	call   c0001cd7 <st_dword>
c00082cf:	8d 45 08             	lea    eax,[ebp+0x8]
c00082d2:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082d7:	eb 04                	jmp    c00082dd <f_mkfs+0xf6c>
c00082d9:	89 da                	mov    edx,ebx
c00082db:	89 e8                	mov    eax,ebp
c00082dd:	e8 f5 99 ff ff       	call   c0001cd7 <st_dword>
c00082e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082ea:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082ee:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082f2:	39 ce                	cmp    esi,ecx
c00082f4:	76 02                	jbe    c00082f8 <f_mkfs+0xf87>
c00082f6:	89 ce                	mov    esi,ecx
c00082f8:	83 ec 0c             	sub    esp,0xc
c00082fb:	56                   	push   esi
c00082fc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008300:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008304:	55                   	push   ebp
c0008305:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008309:	e8 1e 99 ff ff       	call   c0001c2c <disk_write>
c000830e:	83 c4 20             	add    esp,0x20
c0008311:	85 c0                	test   eax,eax
c0008313:	0f 85 09 01 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008319:	31 d2                	xor    edx,edx
c000831b:	b9 00 02 00 00       	mov    ecx,0x200
c0008320:	89 e8                	mov    eax,ebp
c0008322:	e8 ce 99 ff ff       	call   c0001cf5 <mem_set>
c0008327:	31 d2                	xor    edx,edx
c0008329:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000832d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008331:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008335:	75 b3                	jne    c00082ea <f_mkfs+0xf79>
c0008337:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000833a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008341:	40                   	inc    eax
c0008342:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008346:	0f 87 65 ff ff ff    	ja     c00082b1 <f_mkfs+0xf40>
c000834c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008351:	74 04                	je     c0008357 <f_mkfs+0xfe6>
c0008353:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008357:	89 fb                	mov    ebx,edi
c0008359:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000835d:	76 04                	jbe    c0008363 <f_mkfs+0xff2>
c000835f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008363:	83 ec 0c             	sub    esp,0xc
c0008366:	53                   	push   ebx
c0008367:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836f:	55                   	push   ebp
c0008370:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008374:	e8 b3 98 ff ff       	call   c0001c2c <disk_write>
c0008379:	83 c4 20             	add    esp,0x20
c000837c:	85 c0                	test   eax,eax
c000837e:	0f 85 9e 00 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008384:	31 d2                	xor    edx,edx
c0008386:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000838a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000838e:	29 df                	sub    edi,ebx
c0008390:	75 c5                	jne    c0008357 <f_mkfs+0xfe6>
c0008392:	b1 0c                	mov    cl,0xc
c0008394:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008399:	74 1d                	je     c00083b8 <f_mkfs+0x1047>
c000839b:	b8 ff ff 00 00       	mov    eax,0xffff
c00083a0:	b1 06                	mov    cl,0x6
c00083a2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00083a6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00083aa:	72 0c                	jb     c00083b8 <f_mkfs+0x1047>
c00083ac:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00083b1:	0f 94 c1             	sete   cl
c00083b4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00083b8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00083bd:	75 4c                	jne    c000840b <f_mkfs+0x109a>
c00083bf:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083c3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083c7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083ce:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083d5:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083e0:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083eb:	0f b6 c9             	movzx  ecx,cl
c00083ee:	83 ec 0c             	sub    esp,0xc
c00083f1:	55                   	push   ebp
c00083f2:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083fd:	e8 2f c2 ff ff       	call   c0004631 <create_partition>
c0008402:	83 c4 10             	add    esp,0x10
c0008405:	89 c3                	mov    ebx,eax
c0008407:	85 c0                	test   eax,eax
c0008409:	75 34                	jne    c000843f <f_mkfs+0x10ce>
c000840b:	31 db                	xor    ebx,ebx
c000840d:	50                   	push   eax
c000840e:	6a 00                	push   0x0
c0008410:	6a 00                	push   0x0
c0008412:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008416:	e8 27 98 ff ff       	call   c0001c42 <disk_ioctl>
c000841b:	83 c4 10             	add    esp,0x10
c000841e:	85 c0                	test   eax,eax
c0008420:	74 1d                	je     c000843f <f_mkfs+0x10ce>
c0008422:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000842a:	75 0c                	jne    c0008438 <f_mkfs+0x10c7>
c000842c:	83 ec 0c             	sub    esp,0xc
c000842f:	55                   	push   ebp
c0008430:	e8 75 00 00 00       	call   c00084aa <ff_memfree>
c0008435:	83 c4 10             	add    esp,0x10
c0008438:	bb 01 00 00 00       	mov    ebx,0x1
c000843d:	eb 48                	jmp    c0008487 <f_mkfs+0x1116>
c000843f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008447:	75 3e                	jne    c0008487 <f_mkfs+0x1116>
c0008449:	83 ec 0c             	sub    esp,0xc
c000844c:	55                   	push   ebp
c000844d:	e8 58 00 00 00       	call   c00084aa <ff_memfree>
c0008452:	83 c4 10             	add    esp,0x10
c0008455:	eb 30                	jmp    c0008487 <f_mkfs+0x1116>
c0008457:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000845c:	0f 85 eb fa ff ff    	jne    c0007f4d <f_mkfs+0xbdc>
c0008462:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008466:	81 ff 80 00 00 00    	cmp    edi,0x80
c000846c:	0f 86 b8 f9 ff ff    	jbe    c0007e2a <f_mkfs+0xab9>
c0008472:	e9 bf fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008477:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000847c:	0f 85 c0 fa ff ff    	jne    c0007f42 <f_mkfs+0xbd1>
c0008482:	e9 af fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008487:	81 c4 9c 00 00 00    	add    esp,0x9c
c000848d:	89 d8                	mov    eax,ebx
c000848f:	5b                   	pop    ebx
c0008490:	5e                   	pop    esi
c0008491:	5f                   	pop    edi
c0008492:	5d                   	pop    ebp
c0008493:	c3                   	ret    

c0008494 <ff_memalloc>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	83 ec 0c             	sub    esp,0xc
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	e8 9d 73 00 00       	call   c000f840 <malloc>
c00084a3:	83 c4 10             	add    esp,0x10
c00084a6:	83 c4 0c             	add    esp,0xc
c00084a9:	c3                   	ret    

c00084aa <ff_memfree>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	83 ec 0c             	sub    esp,0xc
c00084b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084b4:	e8 97 73 00 00       	call   c000f850 <free>
c00084b9:	83 c4 10             	add    esp,0x10
c00084bc:	90                   	nop
c00084bd:	83 c4 0c             	add    esp,0xc
c00084c0:	c3                   	ret    

c00084c1 <ff_uni2oem>:
c00084c1:	83 ec 14             	sub    esp,0x14
c00084c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084c8:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084cc:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084d3:	c7 44 24 0c 40 98 02 c0 	mov    DWORD PTR [esp+0xc],0xc0029840
c00084db:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084e0:	77 0b                	ja     c00084ed <ff_uni2oem+0x2c>
c00084e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084e6:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084eb:	eb 5b                	jmp    c0008548 <ff_uni2oem+0x87>
c00084ed:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084f5:	77 51                	ja     c0008548 <ff_uni2oem+0x87>
c00084f7:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084fd:	75 49                	jne    c0008548 <ff_uni2oem+0x87>
c00084ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008506:	eb 0b                	jmp    c0008513 <ff_uni2oem+0x52>
c0008508:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000850d:	40                   	inc    eax
c000850e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008513:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008519:	77 1b                	ja     c0008536 <ff_uni2oem+0x75>
c000851b:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008520:	01 c0                	add    eax,eax
c0008522:	89 c2                	mov    edx,eax
c0008524:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008528:	01 d0                	add    eax,edx
c000852a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000852d:	0f b7 c0             	movzx  eax,ax
c0008530:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008534:	75 d2                	jne    c0008508 <ff_uni2oem+0x47>
c0008536:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000853b:	83 e8 80             	sub    eax,0xffffff80
c000853e:	25 ff 00 00 00       	and    eax,0xff
c0008543:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008548:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000854d:	83 c4 14             	add    esp,0x14
c0008550:	c3                   	ret    

c0008551 <ff_oem2uni>:
c0008551:	83 ec 18             	sub    esp,0x18
c0008554:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008558:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000855c:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008561:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008565:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000856c:	c7 44 24 10 40 98 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029840
c0008574:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000857a:	77 0b                	ja     c0008587 <ff_oem2uni+0x36>
c000857c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008580:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008585:	eb 2d                	jmp    c00085b4 <ff_oem2uni+0x63>
c0008587:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000858d:	75 25                	jne    c00085b4 <ff_oem2uni+0x63>
c000858f:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008596:	77 1c                	ja     c00085b4 <ff_oem2uni+0x63>
c0008598:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000859d:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00085a2:	01 c0                	add    eax,eax
c00085a4:	89 c2                	mov    edx,eax
c00085a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085aa:	01 d0                	add    eax,edx
c00085ac:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085af:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085b4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00085b9:	83 c4 18             	add    esp,0x18
c00085bc:	c3                   	ret    

c00085bd <ff_wtoupper>:
c00085bd:	83 ec 10             	sub    esp,0x10
c00085c0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085c8:	0f 87 3e 01 00 00    	ja     c000870c <ff_wtoupper+0x14f>
c00085ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085d7:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085de:	77 07                	ja     c00085e7 <ff_wtoupper+0x2a>
c00085e0:	b8 40 96 02 c0       	mov    eax,0xc0029640
c00085e5:	eb 05                	jmp    c00085ec <ff_wtoupper+0x2f>
c00085e7:	b8 80 95 02 c0       	mov    eax,0xc0029580
c00085ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085f4:	8d 50 02             	lea    edx,[eax+0x2]
c00085f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085fb:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085fe:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008603:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008609:	0f 84 f4 00 00 00    	je     c0008703 <ff_wtoupper+0x146>
c000860f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008614:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008619:	0f 82 e4 00 00 00    	jb     c0008703 <ff_wtoupper+0x146>
c000861f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008623:	8d 50 02             	lea    edx,[eax+0x2]
c0008626:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000862a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000862d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008632:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008637:	66 c1 e8 08          	shr    ax,0x8
c000863b:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008640:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008647:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000864c:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008651:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008656:	01 ca                	add    edx,ecx
c0008658:	39 d0                	cmp    eax,edx
c000865a:	0f 8d 86 00 00 00    	jge    c00086e6 <ff_wtoupper+0x129>
c0008660:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008665:	83 f8 08             	cmp    eax,0x8
c0008668:	0f 87 94 00 00 00    	ja     c0008702 <ff_wtoupper+0x145>
c000866e:	8b 04 85 40 95 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ac0]
c0008675:	ff e0                	jmp    eax
c0008677:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000867c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008681:	29 c2                	sub    edx,eax
c0008683:	89 d0                	mov    eax,edx
c0008685:	01 c0                	add    eax,eax
c0008687:	89 c2                	mov    edx,eax
c0008689:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000868d:	01 d0                	add    eax,edx
c000868f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008692:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008697:	eb 4b                	jmp    c00086e4 <ff_wtoupper+0x127>
c0008699:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000869e:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00086a2:	83 e0 01             	and    eax,0x1
c00086a5:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00086aa:	eb 38                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086ac:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00086b2:	eb 30                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086b4:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00086ba:	eb 28                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086bc:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086c2:	eb 20                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086c4:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086ca:	eb 18                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086cc:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086d2:	eb 10                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086d4:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086da:	eb 08                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086dc:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086e3:	90                   	nop
c00086e4:	eb 1c                	jmp    c0008702 <ff_wtoupper+0x145>
c00086e6:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086ec:	0f 85 fe fe ff ff    	jne    c00085f0 <ff_wtoupper+0x33>
c00086f2:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086f7:	01 c0                	add    eax,eax
c00086f9:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086fd:	e9 ee fe ff ff       	jmp    c00085f0 <ff_wtoupper+0x33>
c0008702:	90                   	nop
c0008703:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008708:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000870c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008710:	83 c4 10             	add    esp,0x10
c0008713:	c3                   	ret    

c0008714 <psrc_set_converter>:
c0008714:	56                   	push   esi
c0008715:	89 d6                	mov    esi,edx
c0008717:	53                   	push   ebx
c0008718:	89 c3                	mov    ebx,eax
c000871a:	83 ec 0c             	sub    esp,0xc
c000871d:	52                   	push   edx
c000871e:	50                   	push   eax
c000871f:	e8 6f 55 00 00       	call   c000dc93 <sinc_set_converter>
c0008724:	83 c4 10             	add    esp,0x10
c0008727:	85 c0                	test   eax,eax
c0008729:	74 25                	je     c0008750 <psrc_set_converter+0x3c>
c000872b:	50                   	push   eax
c000872c:	50                   	push   eax
c000872d:	56                   	push   esi
c000872e:	53                   	push   ebx
c000872f:	e8 17 5d 00 00       	call   c000e44b <zoh_set_converter>
c0008734:	83 c4 10             	add    esp,0x10
c0008737:	85 c0                	test   eax,eax
c0008739:	74 15                	je     c0008750 <psrc_set_converter+0x3c>
c000873b:	51                   	push   ecx
c000873c:	51                   	push   ecx
c000873d:	56                   	push   esi
c000873e:	53                   	push   ebx
c000873f:	e8 0f 11 00 00       	call   c0009853 <linear_set_converter>
c0008744:	83 c4 10             	add    esp,0x10
c0008747:	ba 0a 00 00 00       	mov    edx,0xa
c000874c:	85 c0                	test   eax,eax
c000874e:	75 02                	jne    c0008752 <psrc_set_converter+0x3e>
c0008750:	31 d2                	xor    edx,edx
c0008752:	89 d0                	mov    eax,edx
c0008754:	5a                   	pop    edx
c0008755:	5b                   	pop    ebx
c0008756:	5e                   	pop    esi
c0008757:	c3                   	ret    

c0008758 <src_delete>:
c0008758:	53                   	push   ebx
c0008759:	83 ec 08             	sub    esp,0x8
c000875c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008760:	85 db                	test   ebx,ebx
c0008762:	74 29                	je     c000878d <src_delete+0x35>
c0008764:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008767:	85 c0                	test   eax,eax
c0008769:	74 0c                	je     c0008777 <src_delete+0x1f>
c000876b:	83 ec 0c             	sub    esp,0xc
c000876e:	50                   	push   eax
c000876f:	e8 dc 70 00 00       	call   c000f850 <free>
c0008774:	83 c4 10             	add    esp,0x10
c0008777:	50                   	push   eax
c0008778:	6a 3c                	push   0x3c
c000877a:	6a 00                	push   0x0
c000877c:	53                   	push   ebx
c000877d:	e8 f6 7f ff ff       	call   c0000778 <memset>
c0008782:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008785:	e8 c6 70 00 00       	call   c000f850 <free>
c000878a:	83 c4 10             	add    esp,0x10
c000878d:	31 c0                	xor    eax,eax
c000878f:	83 c4 08             	add    esp,0x8
c0008792:	5b                   	pop    ebx
c0008793:	c3                   	ret    

c0008794 <src_process>:
c0008794:	55                   	push   ebp
c0008795:	57                   	push   edi
c0008796:	56                   	push   esi
c0008797:	53                   	push   ebx
c0008798:	83 ec 1c             	sub    esp,0x1c
c000879b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000879f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087a3:	85 ed                	test   ebp,ebp
c00087a5:	0f 84 6f 01 00 00    	je     c000891a <src_process+0x186>
c00087ab:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00087af:	0f 84 6c 01 00 00    	je     c0008921 <src_process+0x18d>
c00087b5:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00087b9:	0f 84 62 01 00 00    	je     c0008921 <src_process+0x18d>
c00087bf:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087c6:	0f 85 5c 01 00 00    	jne    c0008928 <src_process+0x194>
c00087cc:	85 db                	test   ebx,ebx
c00087ce:	0f 84 5b 01 00 00    	je     c000892f <src_process+0x19b>
c00087d4:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087d6:	85 f6                	test   esi,esi
c00087d8:	0f 84 58 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087de:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087e1:	85 ff                	test   edi,edi
c00087e3:	0f 84 4d 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087e9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087ec:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087f7:	68 00 00 70 3f       	push   0x3f700000
c00087fc:	6a 00                	push   0x0
c00087fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008802:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008806:	e8 f4 fc 01 00       	call   c00284ff <__ltdf2>
c000880b:	83 c4 10             	add    esp,0x10
c000880e:	85 c0                	test   eax,eax
c0008810:	0f 88 27 01 00 00    	js     c000893d <src_process+0x1a9>
c0008816:	68 00 00 70 40       	push   0x40700000
c000881b:	6a 00                	push   0x0
c000881d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008821:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008825:	e8 b7 fc 01 00       	call   c00284e1 <__gtdf2>
c000882a:	83 c4 10             	add    esp,0x10
c000882d:	85 c0                	test   eax,eax
c000882f:	0f 8f 08 01 00 00    	jg     c000893d <src_process+0x1a9>
c0008835:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008839:	79 07                	jns    c0008842 <src_process+0xae>
c000883b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008842:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008845:	85 c0                	test   eax,eax
c0008847:	79 50                	jns    c0008899 <src_process+0x105>
c0008849:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008850:	39 fe                	cmp    esi,edi
c0008852:	72 37                	jb     c000888b <src_process+0xf7>
c0008854:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000885b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008862:	68 00 00 70 3f       	push   0x3f700000
c0008867:	6a 00                	push   0x0
c0008869:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000886c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000886f:	e8 8b fc 01 00       	call   c00284ff <__ltdf2>
c0008874:	83 c4 10             	add    esp,0x10
c0008877:	85 c0                	test   eax,eax
c0008879:	79 37                	jns    c00088b2 <src_process+0x11e>
c000887b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000887f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008883:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008886:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008889:	eb 27                	jmp    c00088b2 <src_process+0x11e>
c000888b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000888e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008892:	8d 04 86             	lea    eax,[esi+eax*4]
c0008895:	39 c7                	cmp    edi,eax
c0008897:	eb 0d                	jmp    c00088a6 <src_process+0x112>
c0008899:	39 fe                	cmp    esi,edi
c000889b:	72 ee                	jb     c000888b <src_process+0xf7>
c000889d:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c00088a1:	8d 04 87             	lea    eax,[edi+eax*4]
c00088a4:	39 c6                	cmp    esi,eax
c00088a6:	73 ac                	jae    c0008854 <src_process+0xc0>
c00088a8:	b8 10 00 00 00       	mov    eax,0x10
c00088ad:	e9 90 00 00 00       	jmp    c0008942 <src_process+0x1ae>
c00088b2:	83 ec 10             	sub    esp,0x10
c00088b5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00088b8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00088bb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00088be:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088c1:	e8 3e f3 01 00       	call   c0027c04 <__subdf3>
c00088c6:	83 c4 18             	add    esp,0x18
c00088c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088cd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088d1:	52                   	push   edx
c00088d2:	50                   	push   eax
c00088d3:	e8 b8 fd 01 00       	call   c0028690 <fabs>
c00088d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088dc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088e0:	83 c4 10             	add    esp,0x10
c00088e3:	68 af 03 d2 3c       	push   0x3cd203af
c00088e8:	68 16 56 e7 9e       	push   0x9ee75616
c00088ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f5:	e8 05 fc 01 00       	call   c00284ff <__ltdf2>
c00088fa:	83 c4 10             	add    esp,0x10
c00088fd:	85 c0                	test   eax,eax
c00088ff:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0008903:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0008907:	79 05                	jns    c000890e <src_process+0x17a>
c0008909:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000890c:	eb 03                	jmp    c0008911 <src_process+0x17d>
c000890e:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008911:	83 c4 1c             	add    esp,0x1c
c0008914:	5b                   	pop    ebx
c0008915:	5e                   	pop    esi
c0008916:	5f                   	pop    edi
c0008917:	5d                   	pop    ebp
c0008918:	ff e0                	jmp    eax
c000891a:	b8 02 00 00 00       	mov    eax,0x2
c000891f:	eb 21                	jmp    c0008942 <src_process+0x1ae>
c0008921:	b8 07 00 00 00       	mov    eax,0x7
c0008926:	eb 1a                	jmp    c0008942 <src_process+0x1ae>
c0008928:	b8 12 00 00 00       	mov    eax,0x12
c000892d:	eb 13                	jmp    c0008942 <src_process+0x1ae>
c000892f:	b8 03 00 00 00       	mov    eax,0x3
c0008934:	eb 0c                	jmp    c0008942 <src_process+0x1ae>
c0008936:	b8 04 00 00 00       	mov    eax,0x4
c000893b:	eb 05                	jmp    c0008942 <src_process+0x1ae>
c000893d:	b8 06 00 00 00       	mov    eax,0x6
c0008942:	83 c4 1c             	add    esp,0x1c
c0008945:	5b                   	pop    ebx
c0008946:	5e                   	pop    esi
c0008947:	5f                   	pop    edi
c0008948:	5d                   	pop    ebp
c0008949:	c3                   	ret    

c000894a <src_callback_read>:
c000894a:	55                   	push   ebp
c000894b:	57                   	push   edi
c000894c:	56                   	push   esi
c000894d:	53                   	push   ebx
c000894e:	83 ec 3c             	sub    esp,0x3c
c0008951:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008955:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008959:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000895d:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008961:	85 ed                	test   ebp,ebp
c0008963:	0f 8e 52 01 00 00    	jle    c0008abb <src_callback_read+0x171>
c0008969:	85 db                	test   ebx,ebx
c000896b:	0f 84 4a 01 00 00    	je     c0008abb <src_callback_read+0x171>
c0008971:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008978:	74 0c                	je     c0008986 <src_callback_read+0x3c>
c000897a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008981:	e9 35 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008986:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000898a:	75 0c                	jne    c0008998 <src_callback_read+0x4e>
c000898c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008993:	e9 23 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008998:	51                   	push   ecx
c0008999:	6a 24                	push   0x24
c000899b:	6a 00                	push   0x0
c000899d:	8d 44 24 18          	lea    eax,[esp+0x18]
c00089a1:	50                   	push   eax
c00089a2:	e8 d1 7d ff ff       	call   c0000778 <memset>
c00089a7:	83 c4 10             	add    esp,0x10
c00089aa:	68 00 00 70 3f       	push   0x3f700000
c00089af:	6a 00                	push   0x0
c00089b1:	57                   	push   edi
c00089b2:	56                   	push   esi
c00089b3:	e8 47 fb 01 00       	call   c00284ff <__ltdf2>
c00089b8:	83 c4 10             	add    esp,0x10
c00089bb:	85 c0                	test   eax,eax
c00089bd:	78 3e                	js     c00089fd <src_callback_read+0xb3>
c00089bf:	68 00 00 70 40       	push   0x40700000
c00089c4:	6a 00                	push   0x0
c00089c6:	57                   	push   edi
c00089c7:	56                   	push   esi
c00089c8:	e8 14 fb 01 00       	call   c00284e1 <__gtdf2>
c00089cd:	83 c4 10             	add    esp,0x10
c00089d0:	85 c0                	test   eax,eax
c00089d2:	7f 29                	jg     c00089fd <src_callback_read+0xb3>
c00089d4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089d8:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089e0:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089e4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089e7:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089ef:	31 f6                	xor    esi,esi
c00089f1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089f4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089f8:	e9 97 00 00 00       	jmp    c0008a94 <src_callback_read+0x14a>
c00089fd:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008a04:	e9 b2 00 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008a09:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008a0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008a11:	52                   	push   edx
c0008a12:	52                   	push   edx
c0008a13:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a17:	50                   	push   eax
c0008a18:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a1b:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a1e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a22:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a26:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a2a:	83 c4 10             	add    esp,0x10
c0008a2d:	85 c0                	test   eax,eax
c0008a2f:	75 08                	jne    c0008a39 <src_callback_read+0xef>
c0008a31:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a39:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a40:	50                   	push   eax
c0008a41:	50                   	push   eax
c0008a42:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a46:	50                   	push   eax
c0008a47:	53                   	push   ebx
c0008a48:	e8 47 fd ff ff       	call   c0008794 <src_process>
c0008a4d:	83 c4 10             	add    esp,0x10
c0008a50:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a57:	85 c0                	test   eax,eax
c0008a59:	75 49                	jne    c0008aa4 <src_callback_read+0x15a>
c0008a5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a5f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a62:	89 f9                	mov    ecx,edi
c0008a64:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a68:	0f af ca             	imul   ecx,edx
c0008a6b:	c1 e1 02             	shl    ecx,0x2
c0008a6e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a72:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a76:	0f af d1             	imul   edx,ecx
c0008a79:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a7d:	c1 e2 02             	shl    edx,0x2
c0008a80:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a84:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a87:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a8c:	74 12                	je     c0008aa0 <src_callback_read+0x156>
c0008a8e:	39 d5                	cmp    ebp,edx
c0008a90:	7e 14                	jle    c0008aa6 <src_callback_read+0x15c>
c0008a92:	89 d6                	mov    esi,edx
c0008a94:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a99:	75 9e                	jne    c0008a39 <src_callback_read+0xef>
c0008a9b:	e9 69 ff ff ff       	jmp    c0008a09 <src_callback_read+0xbf>
c0008aa0:	85 c9                	test   ecx,ecx
c0008aa2:	75 ea                	jne    c0008a8e <src_callback_read+0x144>
c0008aa4:	89 f2                	mov    edx,esi
c0008aa6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008aaa:	85 c0                	test   eax,eax
c0008aac:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008aaf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ab3:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008ab6:	74 05                	je     c0008abd <src_callback_read+0x173>
c0008ab8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008abb:	31 d2                	xor    edx,edx
c0008abd:	83 c4 3c             	add    esp,0x3c
c0008ac0:	89 d0                	mov    eax,edx
c0008ac2:	5b                   	pop    ebx
c0008ac3:	5e                   	pop    esi
c0008ac4:	5f                   	pop    edi
c0008ac5:	5d                   	pop    ebp
c0008ac6:	c3                   	ret    

c0008ac7 <src_set_ratio>:
c0008ac7:	57                   	push   edi
c0008ac8:	ba 02 00 00 00       	mov    edx,0x2
c0008acd:	56                   	push   esi
c0008ace:	53                   	push   ebx
c0008acf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ad3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ad7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008adb:	85 db                	test   ebx,ebx
c0008add:	74 4c                	je     c0008b2b <src_set_ratio+0x64>
c0008adf:	ba 07 00 00 00       	mov    edx,0x7
c0008ae4:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008ae8:	74 41                	je     c0008b2b <src_set_ratio+0x64>
c0008aea:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008aee:	74 3b                	je     c0008b2b <src_set_ratio+0x64>
c0008af0:	68 00 00 70 3f       	push   0x3f700000
c0008af5:	6a 00                	push   0x0
c0008af7:	57                   	push   edi
c0008af8:	56                   	push   esi
c0008af9:	e8 01 fa 01 00       	call   c00284ff <__ltdf2>
c0008afe:	83 c4 10             	add    esp,0x10
c0008b01:	ba 06 00 00 00       	mov    edx,0x6
c0008b06:	85 c0                	test   eax,eax
c0008b08:	78 21                	js     c0008b2b <src_set_ratio+0x64>
c0008b0a:	68 00 00 70 40       	push   0x40700000
c0008b0f:	6a 00                	push   0x0
c0008b11:	57                   	push   edi
c0008b12:	56                   	push   esi
c0008b13:	e8 c9 f9 01 00       	call   c00284e1 <__gtdf2>
c0008b18:	83 c4 10             	add    esp,0x10
c0008b1b:	ba 06 00 00 00       	mov    edx,0x6
c0008b20:	85 c0                	test   eax,eax
c0008b22:	7f 07                	jg     c0008b2b <src_set_ratio+0x64>
c0008b24:	89 33                	mov    DWORD PTR [ebx],esi
c0008b26:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b29:	31 d2                	xor    edx,edx
c0008b2b:	5b                   	pop    ebx
c0008b2c:	89 d0                	mov    eax,edx
c0008b2e:	5e                   	pop    esi
c0008b2f:	5f                   	pop    edi
c0008b30:	c3                   	ret    

c0008b31 <src_get_channels>:
c0008b31:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b35:	b8 02 00 00 00       	mov    eax,0x2
c0008b3a:	85 d2                	test   edx,edx
c0008b3c:	74 14                	je     c0008b52 <src_get_channels+0x21>
c0008b3e:	b8 07 00 00 00       	mov    eax,0x7
c0008b43:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b47:	74 09                	je     c0008b52 <src_get_channels+0x21>
c0008b49:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b4d:	74 03                	je     c0008b52 <src_get_channels+0x21>
c0008b4f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b52:	c3                   	ret    

c0008b53 <src_reset>:
c0008b53:	53                   	push   ebx
c0008b54:	b8 02 00 00 00       	mov    eax,0x2
c0008b59:	83 ec 08             	sub    esp,0x8
c0008b5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b60:	85 db                	test   ebx,ebx
c0008b62:	74 36                	je     c0008b9a <src_reset+0x47>
c0008b64:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b67:	85 c0                	test   eax,eax
c0008b69:	74 09                	je     c0008b74 <src_reset+0x21>
c0008b6b:	83 ec 0c             	sub    esp,0xc
c0008b6e:	53                   	push   ebx
c0008b6f:	ff d0                	call   eax
c0008b71:	83 c4 10             	add    esp,0x10
c0008b74:	31 c0                	xor    eax,eax
c0008b76:	31 d2                	xor    edx,edx
c0008b78:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b7b:	89 03                	mov    DWORD PTR [ebx],eax
c0008b7d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b80:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b83:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b8a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b91:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b98:	31 c0                	xor    eax,eax
c0008b9a:	83 c4 08             	add    esp,0x8
c0008b9d:	5b                   	pop    ebx
c0008b9e:	c3                   	ret    

c0008b9f <src_new>:
c0008b9f:	57                   	push   edi
c0008ba0:	56                   	push   esi
c0008ba1:	53                   	push   ebx
c0008ba2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008ba6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008baa:	85 f6                	test   esi,esi
c0008bac:	74 73                	je     c0008c21 <src_new+0x82>
c0008bae:	85 ff                	test   edi,edi
c0008bb0:	7f 08                	jg     c0008bba <src_new+0x1b>
c0008bb2:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008bb8:	eb 1e                	jmp    c0008bd8 <src_new+0x39>
c0008bba:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008bc0:	50                   	push   eax
c0008bc1:	50                   	push   eax
c0008bc2:	6a 3c                	push   0x3c
c0008bc4:	6a 01                	push   0x1
c0008bc6:	e8 a5 6c 00 00       	call   c000f870 <calloc>
c0008bcb:	83 c4 10             	add    esp,0x10
c0008bce:	89 c3                	mov    ebx,eax
c0008bd0:	85 c0                	test   eax,eax
c0008bd2:	75 10                	jne    c0008be4 <src_new+0x45>
c0008bd4:	85 f6                	test   esi,esi
c0008bd6:	75 04                	jne    c0008bdc <src_new+0x3d>
c0008bd8:	31 db                	xor    ebx,ebx
c0008bda:	eb 4b                	jmp    c0008c27 <src_new+0x88>
c0008bdc:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008be2:	eb 43                	jmp    c0008c27 <src_new+0x88>
c0008be4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008be7:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bf2:	e8 1d fb ff ff       	call   c0008714 <psrc_set_converter>
c0008bf7:	85 c0                	test   eax,eax
c0008bf9:	74 18                	je     c0008c13 <src_new+0x74>
c0008bfb:	85 f6                	test   esi,esi
c0008bfd:	74 06                	je     c0008c05 <src_new+0x66>
c0008bff:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008c05:	83 ec 0c             	sub    esp,0xc
c0008c08:	53                   	push   ebx
c0008c09:	31 db                	xor    ebx,ebx
c0008c0b:	e8 40 6c 00 00       	call   c000f850 <free>
c0008c10:	83 c4 10             	add    esp,0x10
c0008c13:	83 ec 0c             	sub    esp,0xc
c0008c16:	53                   	push   ebx
c0008c17:	e8 37 ff ff ff       	call   c0008b53 <src_reset>
c0008c1c:	83 c4 10             	add    esp,0x10
c0008c1f:	eb 06                	jmp    c0008c27 <src_new+0x88>
c0008c21:	85 ff                	test   edi,edi
c0008c23:	7f 9b                	jg     c0008bc0 <src_new+0x21>
c0008c25:	eb b1                	jmp    c0008bd8 <src_new+0x39>
c0008c27:	89 d8                	mov    eax,ebx
c0008c29:	5b                   	pop    ebx
c0008c2a:	5e                   	pop    esi
c0008c2b:	5f                   	pop    edi
c0008c2c:	c3                   	ret    

c0008c2d <src_callback_new>:
c0008c2d:	56                   	push   esi
c0008c2e:	53                   	push   ebx
c0008c2f:	53                   	push   ebx
c0008c30:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c38:	85 f6                	test   esi,esi
c0008c3a:	75 0e                	jne    c0008c4a <src_callback_new+0x1d>
c0008c3c:	31 db                	xor    ebx,ebx
c0008c3e:	85 c0                	test   eax,eax
c0008c40:	74 47                	je     c0008c89 <src_callback_new+0x5c>
c0008c42:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c48:	eb 3f                	jmp    c0008c89 <src_callback_new+0x5c>
c0008c4a:	85 c0                	test   eax,eax
c0008c4c:	74 06                	je     c0008c54 <src_callback_new+0x27>
c0008c4e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c54:	51                   	push   ecx
c0008c55:	50                   	push   eax
c0008c56:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5e:	e8 3c ff ff ff       	call   c0008b9f <src_new>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	89 c3                	mov    ebx,eax
c0008c68:	85 c0                	test   eax,eax
c0008c6a:	74 1d                	je     c0008c89 <src_callback_new+0x5c>
c0008c6c:	83 ec 0c             	sub    esp,0xc
c0008c6f:	50                   	push   eax
c0008c70:	e8 de fe ff ff       	call   c0008b53 <src_reset>
c0008c75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c79:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c80:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c83:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c86:	83 c4 10             	add    esp,0x10
c0008c89:	89 d8                	mov    eax,ebx
c0008c8b:	5a                   	pop    edx
c0008c8c:	5b                   	pop    ebx
c0008c8d:	5e                   	pop    esi
c0008c8e:	c3                   	ret    

c0008c8f <src_get_name>:
c0008c8f:	53                   	push   ebx
c0008c90:	83 ec 14             	sub    esp,0x14
c0008c93:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c97:	53                   	push   ebx
c0008c98:	e8 d0 4f 00 00       	call   c000dc6d <sinc_get_name>
c0008c9d:	83 c4 10             	add    esp,0x10
c0008ca0:	85 c0                	test   eax,eax
c0008ca2:	75 1d                	jne    c0008cc1 <src_get_name+0x32>
c0008ca4:	83 ec 0c             	sub    esp,0xc
c0008ca7:	53                   	push   ebx
c0008ca8:	e8 80 57 00 00       	call   c000e42d <zoh_get_name>
c0008cad:	83 c4 10             	add    esp,0x10
c0008cb0:	85 c0                	test   eax,eax
c0008cb2:	75 0d                	jne    c0008cc1 <src_get_name+0x32>
c0008cb4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb8:	83 c4 08             	add    esp,0x8
c0008cbb:	5b                   	pop    ebx
c0008cbc:	e9 74 0b 00 00       	jmp    c0009835 <linear_get_name>
c0008cc1:	83 c4 08             	add    esp,0x8
c0008cc4:	5b                   	pop    ebx
c0008cc5:	c3                   	ret    

c0008cc6 <src_get_description>:
c0008cc6:	53                   	push   ebx
c0008cc7:	83 ec 14             	sub    esp,0x14
c0008cca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cce:	53                   	push   ebx
c0008ccf:	e8 ac 4f 00 00       	call   c000dc80 <sinc_get_description>
c0008cd4:	83 c4 10             	add    esp,0x10
c0008cd7:	85 c0                	test   eax,eax
c0008cd9:	75 1d                	jne    c0008cf8 <src_get_description+0x32>
c0008cdb:	83 ec 0c             	sub    esp,0xc
c0008cde:	53                   	push   ebx
c0008cdf:	e8 58 57 00 00       	call   c000e43c <zoh_get_description>
c0008ce4:	83 c4 10             	add    esp,0x10
c0008ce7:	85 c0                	test   eax,eax
c0008ce9:	75 0d                	jne    c0008cf8 <src_get_description+0x32>
c0008ceb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cef:	83 c4 08             	add    esp,0x8
c0008cf2:	5b                   	pop    ebx
c0008cf3:	e9 4c 0b 00 00       	jmp    c0009844 <linear_get_description>
c0008cf8:	83 c4 08             	add    esp,0x8
c0008cfb:	5b                   	pop    ebx
c0008cfc:	c3                   	ret    

c0008cfd <src_get_version>:
c0008cfd:	b8 40 99 02 c0       	mov    eax,0xc0029940
c0008d02:	c3                   	ret    

c0008d03 <src_is_valid_ratio>:
c0008d03:	83 ec 1c             	sub    esp,0x1c
c0008d06:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d16:	68 00 00 70 3f       	push   0x3f700000
c0008d1b:	6a 00                	push   0x0
c0008d1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d25:	e8 d5 f7 01 00       	call   c00284ff <__ltdf2>
c0008d2a:	83 c4 10             	add    esp,0x10
c0008d2d:	31 d2                	xor    edx,edx
c0008d2f:	85 c0                	test   eax,eax
c0008d31:	78 1e                	js     c0008d51 <src_is_valid_ratio+0x4e>
c0008d33:	68 00 00 70 40       	push   0x40700000
c0008d38:	6a 00                	push   0x0
c0008d3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d42:	e8 9a f7 01 00       	call   c00284e1 <__gtdf2>
c0008d47:	31 d2                	xor    edx,edx
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	85 c0                	test   eax,eax
c0008d4e:	0f 9e c2             	setle  dl
c0008d51:	89 d0                	mov    eax,edx
c0008d53:	83 c4 1c             	add    esp,0x1c
c0008d56:	c3                   	ret    

c0008d57 <src_error>:
c0008d57:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d5b:	31 c0                	xor    eax,eax
c0008d5d:	85 d2                	test   edx,edx
c0008d5f:	74 03                	je     c0008d64 <src_error+0xd>
c0008d61:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d64:	c3                   	ret    

c0008d65 <src_strerror>:
c0008d65:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d69:	31 c0                	xor    eax,eax
c0008d6b:	83 fa 17             	cmp    edx,0x17
c0008d6e:	77 07                	ja     c0008d77 <src_strerror+0x12>
c0008d70:	8b 04 95 a0 9d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6260]
c0008d77:	c3                   	ret    

c0008d78 <src_simple>:
c0008d78:	56                   	push   esi
c0008d79:	53                   	push   ebx
c0008d7a:	83 ec 18             	sub    esp,0x18
c0008d7d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d81:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d85:	50                   	push   eax
c0008d86:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8e:	e8 0c fe ff ff       	call   c0008b9f <src_new>
c0008d93:	83 c4 10             	add    esp,0x10
c0008d96:	85 c0                	test   eax,eax
c0008d98:	75 06                	jne    c0008da0 <src_simple+0x28>
c0008d9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d9e:	eb 25                	jmp    c0008dc5 <src_simple+0x4d>
c0008da0:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008da7:	89 c3                	mov    ebx,eax
c0008da9:	50                   	push   eax
c0008daa:	50                   	push   eax
c0008dab:	56                   	push   esi
c0008dac:	53                   	push   ebx
c0008dad:	e8 e2 f9 ff ff       	call   c0008794 <src_process>
c0008db2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008db5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008db9:	e8 9a f9 ff ff       	call   c0008758 <src_delete>
c0008dbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008dc2:	83 c4 10             	add    esp,0x10
c0008dc5:	83 c4 14             	add    esp,0x14
c0008dc8:	5b                   	pop    ebx
c0008dc9:	5e                   	pop    esi
c0008dca:	c3                   	ret    

c0008dcb <src_short_to_float_array>:
c0008dcb:	53                   	push   ebx
c0008dcc:	83 ec 18             	sub    esp,0x18
c0008dcf:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008dd3:	85 db                	test   ebx,ebx
c0008dd5:	74 54                	je     c0008e2b <src_short_to_float_array+0x60>
c0008dd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ddb:	4b                   	dec    ebx
c0008ddc:	83 ec 0c             	sub    esp,0xc
c0008ddf:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008de3:	50                   	push   eax
c0008de4:	e8 aa f4 01 00       	call   c0028293 <__floatsidf>
c0008de9:	83 c4 10             	add    esp,0x10
c0008dec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008df0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008df4:	68 00 00 00 3f       	push   0x3f000000
c0008df9:	6a 00                	push   0x0
c0008dfb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e03:	e8 28 ee 01 00       	call   c0027c30 <__muldf3>
c0008e08:	59                   	pop    ecx
c0008e09:	59                   	pop    ecx
c0008e0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e1a:	e8 e4 f6 01 00       	call   c0028503 <__truncdfsf2>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e26:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e29:	eb a8                	jmp    c0008dd3 <src_short_to_float_array+0x8>
c0008e2b:	83 c4 18             	add    esp,0x18
c0008e2e:	5b                   	pop    ebx
c0008e2f:	c3                   	ret    

c0008e30 <src_float_to_short_array>:
c0008e30:	56                   	push   esi
c0008e31:	53                   	push   ebx
c0008e32:	83 ec 14             	sub    esp,0x14
c0008e35:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e39:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e3d:	85 db                	test   ebx,ebx
c0008e3f:	0f 84 a4 00 00 00    	je     c0008ee9 <src_float_to_short_array+0xb9>
c0008e45:	83 ec 0c             	sub    esp,0xc
c0008e48:	4b                   	dec    ebx
c0008e49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e4d:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e50:	e8 d2 f7 01 00       	call   c0028627 <__extendsfdf2>
c0008e55:	83 c4 10             	add    esp,0x10
c0008e58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e5c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e60:	68 00 00 e0 41       	push   0x41e00000
c0008e65:	6a 00                	push   0x0
c0008e67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6f:	e8 bc ed 01 00       	call   c0027c30 <__muldf3>
c0008e74:	83 c4 10             	add    esp,0x10
c0008e77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e7f:	68 ff ff df 41       	push   0x41dfffff
c0008e84:	68 00 00 c0 ff       	push   0xffc00000
c0008e89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e91:	e8 67 f6 01 00       	call   c00284fd <__gedf2>
c0008e96:	83 c4 10             	add    esp,0x10
c0008e99:	85 c0                	test   eax,eax
c0008e9b:	78 08                	js     c0008ea5 <src_float_to_short_array+0x75>
c0008e9d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008ea3:	eb 98                	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ea5:	68 00 00 e0 c1       	push   0xc1e00000
c0008eaa:	6a 00                	push   0x0
c0008eac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb4:	e8 48 f6 01 00       	call   c0028501 <__ledf2>
c0008eb9:	83 c4 10             	add    esp,0x10
c0008ebc:	85 c0                	test   eax,eax
c0008ebe:	7f 0b                	jg     c0008ecb <src_float_to_short_array+0x9b>
c0008ec0:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ec6:	e9 72 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ecb:	50                   	push   eax
c0008ecc:	50                   	push   eax
c0008ecd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed5:	e8 d6 f7 01 00       	call   c00286b0 <lrint>
c0008eda:	83 c4 10             	add    esp,0x10
c0008edd:	c1 f8 10             	sar    eax,0x10
c0008ee0:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ee4:	e9 54 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ee9:	83 c4 14             	add    esp,0x14
c0008eec:	5b                   	pop    ebx
c0008eed:	5e                   	pop    esi
c0008eee:	c3                   	ret    

c0008eef <src_int_to_float_array>:
c0008eef:	53                   	push   ebx
c0008ef0:	83 ec 18             	sub    esp,0x18
c0008ef3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ef7:	85 db                	test   ebx,ebx
c0008ef9:	74 52                	je     c0008f4d <src_int_to_float_array+0x5e>
c0008efb:	83 ec 0c             	sub    esp,0xc
c0008efe:	4b                   	dec    ebx
c0008eff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f03:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f06:	e8 88 f3 01 00       	call   c0028293 <__floatsidf>
c0008f0b:	83 c4 10             	add    esp,0x10
c0008f0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f12:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f16:	68 00 00 00 3e       	push   0x3e000000
c0008f1b:	6a 00                	push   0x0
c0008f1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f25:	e8 06 ed 01 00       	call   c0027c30 <__muldf3>
c0008f2a:	59                   	pop    ecx
c0008f2b:	59                   	pop    ecx
c0008f2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f30:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f3c:	e8 c2 f5 01 00       	call   c0028503 <__truncdfsf2>
c0008f41:	83 c4 10             	add    esp,0x10
c0008f44:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f48:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f4b:	eb aa                	jmp    c0008ef7 <src_int_to_float_array+0x8>
c0008f4d:	83 c4 18             	add    esp,0x18
c0008f50:	5b                   	pop    ebx
c0008f51:	c3                   	ret    

c0008f52 <src_float_to_int_array>:
c0008f52:	56                   	push   esi
c0008f53:	53                   	push   ebx
c0008f54:	83 ec 14             	sub    esp,0x14
c0008f57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f5b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f5f:	85 db                	test   ebx,ebx
c0008f61:	0f 84 a2 00 00 00    	je     c0009009 <src_float_to_int_array+0xb7>
c0008f67:	83 ec 0c             	sub    esp,0xc
c0008f6a:	4b                   	dec    ebx
c0008f6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f6f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f72:	e8 b0 f6 01 00       	call   c0028627 <__extendsfdf2>
c0008f77:	83 c4 10             	add    esp,0x10
c0008f7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f82:	68 00 00 e0 41       	push   0x41e00000
c0008f87:	6a 00                	push   0x0
c0008f89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f91:	e8 9a ec 01 00       	call   c0027c30 <__muldf3>
c0008f96:	83 c4 10             	add    esp,0x10
c0008f99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f9d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fa1:	68 ff ff df 41       	push   0x41dfffff
c0008fa6:	68 00 00 c0 ff       	push   0xffc00000
c0008fab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008faf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb3:	e8 45 f5 01 00       	call   c00284fd <__gedf2>
c0008fb8:	83 c4 10             	add    esp,0x10
c0008fbb:	85 c0                	test   eax,eax
c0008fbd:	78 09                	js     c0008fc8 <src_float_to_int_array+0x76>
c0008fbf:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fc6:	eb 97                	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fc8:	68 00 00 e0 c1       	push   0xc1e00000
c0008fcd:	6a 00                	push   0x0
c0008fcf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd7:	e8 25 f5 01 00       	call   c0028501 <__ledf2>
c0008fdc:	83 c4 10             	add    esp,0x10
c0008fdf:	85 c0                	test   eax,eax
c0008fe1:	7f 0c                	jg     c0008fef <src_float_to_int_array+0x9d>
c0008fe3:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fea:	e9 70 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fef:	50                   	push   eax
c0008ff0:	50                   	push   eax
c0008ff1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff9:	e8 b2 f6 01 00       	call   c00286b0 <lrint>
c0008ffe:	83 c4 10             	add    esp,0x10
c0009001:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0009004:	e9 56 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0009009:	83 c4 14             	add    esp,0x14
c000900c:	5b                   	pop    ebx
c000900d:	5e                   	pop    esi
c000900e:	c3                   	ret    

c000900f <linear_vari_process>:
c000900f:	55                   	push   ebp
c0009010:	31 d2                	xor    edx,edx
c0009012:	57                   	push   edi
c0009013:	56                   	push   esi
c0009014:	53                   	push   ebx
c0009015:	83 ec 3c             	sub    esp,0x3c
c0009018:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000901c:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0009020:	0f 8e d3 07 00 00    	jle    c00097f9 <linear_vari_process+0x7ea>
c0009026:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000902a:	ba 05 00 00 00       	mov    edx,0x5
c000902f:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009032:	85 db                	test   ebx,ebx
c0009034:	0f 84 bf 07 00 00    	je     c00097f9 <linear_vari_process+0x7ea>
c000903a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000903d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009041:	74 19                	je     c000905c <linear_vari_process+0x4d>
c0009043:	31 d2                	xor    edx,edx
c0009045:	39 c2                	cmp    edx,eax
c0009047:	7d 0c                	jge    c0009055 <linear_vari_process+0x46>
c0009049:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000904b:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000904e:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009052:	42                   	inc    edx
c0009053:	eb f0                	jmp    c0009045 <linear_vari_process+0x36>
c0009055:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000905c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000905f:	0f af d0             	imul   edx,eax
c0009062:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009065:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009069:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009070:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009073:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000907a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000907e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009081:	8b 00                	mov    eax,DWORD PTR [eax]
c0009083:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009087:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000908b:	68 00 00 70 3f       	push   0x3f700000
c0009090:	6a 00                	push   0x0
c0009092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009096:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909a:	e8 60 f4 01 00       	call   c00284ff <__ltdf2>
c000909f:	83 c4 10             	add    esp,0x10
c00090a2:	ba 16 00 00 00       	mov    edx,0x16
c00090a7:	85 c0                	test   eax,eax
c00090a9:	0f 88 4a 07 00 00    	js     c00097f9 <linear_vari_process+0x7ea>
c00090af:	68 00 00 70 40       	push   0x40700000
c00090b4:	6a 00                	push   0x0
c00090b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090be:	e8 1e f4 01 00       	call   c00284e1 <__gtdf2>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	ba 16 00 00 00       	mov    edx,0x16
c00090cb:	85 c0                	test   eax,eax
c00090cd:	0f 8f 26 07 00 00    	jg     c00097f9 <linear_vari_process+0x7ea>
c00090d3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090d7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090e5:	68 00 00 f0 3f       	push   0x3ff00000
c00090ea:	6a 00                	push   0x0
c00090ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f4:	e8 06 f4 01 00       	call   c00284ff <__ltdf2>
c00090f9:	83 c4 10             	add    esp,0x10
c00090fc:	85 c0                	test   eax,eax
c00090fe:	0f 89 89 02 00 00    	jns    c000938d <linear_vari_process+0x37e>
c0009104:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0009107:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c000910a:	0f 8d 7d 02 00 00    	jge    c000938d <linear_vari_process+0x37e>
c0009110:	83 ec 0c             	sub    esp,0xc
c0009113:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009116:	e8 78 f1 01 00       	call   c0028293 <__floatsidf>
c000911b:	83 c4 10             	add    esp,0x10
c000911e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009121:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009125:	68 00 00 f0 3f       	push   0x3ff00000
c000912a:	6a 00                	push   0x0
c000912c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009130:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009134:	e8 7a e4 01 00       	call   c00275b3 <__adddf3>
c0009139:	83 c4 10             	add    esp,0x10
c000913c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009140:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009144:	52                   	push   edx
c0009145:	50                   	push   eax
c0009146:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914e:	e8 dd ea 01 00       	call   c0027c30 <__muldf3>
c0009153:	5d                   	pop    ebp
c0009154:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009158:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000915c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000915f:	e8 2f f1 01 00       	call   c0028293 <__floatsidf>
c0009164:	83 c4 10             	add    esp,0x10
c0009167:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000916b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000916f:	52                   	push   edx
c0009170:	50                   	push   eax
c0009171:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009175:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009179:	e8 35 e4 01 00       	call   c00275b3 <__adddf3>
c000917e:	59                   	pop    ecx
c000917f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009183:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009187:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000918a:	e8 04 f1 01 00       	call   c0028293 <__floatsidf>
c000918f:	83 c4 10             	add    esp,0x10
c0009192:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009196:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000919a:	52                   	push   edx
c000919b:	50                   	push   eax
c000919c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a4:	e8 54 f3 01 00       	call   c00284fd <__gedf2>
c00091a9:	83 c4 10             	add    esp,0x10
c00091ac:	85 c0                	test   eax,eax
c00091ae:	0f 89 d9 01 00 00    	jns    c000938d <linear_vari_process+0x37e>
c00091b4:	85 ff                	test   edi,edi
c00091b6:	0f 8e f4 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c00091bc:	83 ec 10             	sub    esp,0x10
c00091bf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091c2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091c5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091c9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091cc:	ff 30                	push   DWORD PTR [eax]
c00091ce:	e8 31 ea 01 00       	call   c0027c04 <__subdf3>
c00091d3:	83 c4 18             	add    esp,0x18
c00091d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091de:	52                   	push   edx
c00091df:	50                   	push   eax
c00091e0:	e8 ab f4 01 00       	call   c0028690 <fabs>
c00091e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091ed:	83 c4 10             	add    esp,0x10
c00091f0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091f5:	68 23 42 92 0c       	push   0xc924223
c00091fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091fe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009202:	e8 da f2 01 00       	call   c00284e1 <__gtdf2>
c0009207:	83 c4 10             	add    esp,0x10
c000920a:	85 c0                	test   eax,eax
c000920c:	0f 8e 9e 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c0009212:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009216:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009219:	8b 00                	mov    eax,DWORD PTR [eax]
c000921b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000921f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009222:	52                   	push   edx
c0009223:	50                   	push   eax
c0009224:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009227:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000922a:	e8 d5 e9 01 00       	call   c0027c04 <__subdf3>
c000922f:	59                   	pop    ecx
c0009230:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009234:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009238:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000923b:	e8 53 f0 01 00       	call   c0028293 <__floatsidf>
c0009240:	83 c4 10             	add    esp,0x10
c0009243:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009247:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000924b:	52                   	push   edx
c000924c:	50                   	push   eax
c000924d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009255:	e8 d6 e9 01 00       	call   c0027c30 <__muldf3>
c000925a:	5f                   	pop    edi
c000925b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000925f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009263:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009266:	e8 28 f0 01 00       	call   c0028293 <__floatsidf>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009272:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009276:	52                   	push   edx
c0009277:	50                   	push   eax
c0009278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000927c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009280:	e8 8f ec 01 00       	call   c0027f14 <__divdf3>
c0009285:	83 c4 10             	add    esp,0x10
c0009288:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000928c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009290:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009294:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000929c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a0:	e8 0e e3 01 00       	call   c00275b3 <__adddf3>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b0:	31 ff                	xor    edi,edi
c00092b2:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00092b5:	0f 8e 9d 00 00 00    	jle    c0009358 <linear_vari_process+0x349>
c00092bb:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00092be:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092c5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00092cc:	8b 06                	mov    eax,DWORD PTR [esi]
c00092ce:	52                   	push   edx
c00092cf:	52                   	push   edx
c00092d0:	55                   	push   ebp
c00092d1:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092d4:	47                   	inc    edi
c00092d5:	e8 6e dc 01 00       	call   c0026f48 <__subsf3>
c00092da:	89 04 24             	mov    DWORD PTR [esp],eax
c00092dd:	e8 45 f3 01 00       	call   c0028627 <__extendsfdf2>
c00092e2:	83 c4 10             	add    esp,0x10
c00092e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092fd:	e8 2e e9 01 00       	call   c0027c30 <__muldf3>
c0009302:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009305:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009309:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000930d:	e8 15 f3 01 00       	call   c0028627 <__extendsfdf2>
c0009312:	83 c4 10             	add    esp,0x10
c0009315:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009319:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000931d:	52                   	push   edx
c000931e:	50                   	push   eax
c000931f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009323:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009327:	e8 87 e2 01 00       	call   c00275b3 <__adddf3>
c000932c:	59                   	pop    ecx
c000932d:	5d                   	pop    ebp
c000932e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009332:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009336:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933e:	e8 c0 f1 01 00       	call   c0028503 <__truncdfsf2>
c0009343:	83 c4 10             	add    esp,0x10
c0009346:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009349:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000934d:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009350:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009353:	e9 5a ff ff ff       	jmp    c00092b2 <linear_vari_process+0x2a3>
c0009358:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009360:	68 00 00 f0 3f       	push   0x3ff00000
c0009365:	6a 00                	push   0x0
c0009367:	e8 a8 eb 01 00       	call   c0027f14 <__divdf3>
c000936c:	83 c4 10             	add    esp,0x10
c000936f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009372:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000937c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009380:	e8 2e e2 01 00       	call   c00275b3 <__adddf3>
c0009385:	83 c4 10             	add    esp,0x10
c0009388:	e9 50 fd ff ff       	jmp    c00090dd <linear_vari_process+0xce>
c000938d:	50                   	push   eax
c000938e:	50                   	push   eax
c000938f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009393:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009397:	e8 14 f3 01 00       	call   c00286b0 <lrint>
c000939c:	83 ec 0c             	sub    esp,0xc
c000939f:	50                   	push   eax
c00093a0:	e8 ee ee 01 00       	call   c0028293 <__floatsidf>
c00093a5:	83 c4 10             	add    esp,0x10
c00093a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093b0:	52                   	push   edx
c00093b1:	50                   	push   eax
c00093b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093ba:	e8 45 e8 01 00       	call   c0027c04 <__subdf3>
c00093bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093c7:	83 c4 20             	add    esp,0x20
c00093ca:	6a 00                	push   0x0
c00093cc:	6a 00                	push   0x0
c00093ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d6:	e8 24 f1 01 00       	call   c00284ff <__ltdf2>
c00093db:	83 c4 10             	add    esp,0x10
c00093de:	85 c0                	test   eax,eax
c00093e0:	79 1e                	jns    c0009400 <linear_vari_process+0x3f1>
c00093e2:	68 00 00 f0 3f       	push   0x3ff00000
c00093e7:	6a 00                	push   0x0
c00093e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f1:	e8 bd e1 01 00       	call   c00275b3 <__adddf3>
c00093f6:	83 c4 10             	add    esp,0x10
c00093f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00093fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009400:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009403:	83 ec 10             	sub    esp,0x10
c0009406:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009412:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009416:	e8 e9 e7 01 00       	call   c0027c04 <__subdf3>
c000941b:	83 c4 18             	add    esp,0x18
c000941e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009422:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009426:	52                   	push   edx
c0009427:	50                   	push   eax
c0009428:	e8 83 f2 01 00       	call   c00286b0 <lrint>
c000942d:	83 c4 10             	add    esp,0x10
c0009430:	0f af f8             	imul   edi,eax
c0009433:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009436:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009439:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000943c:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c000943f:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009442:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009446:	0f 8d 13 03 00 00    	jge    c000975f <linear_vari_process+0x750>
c000944c:	83 ec 0c             	sub    esp,0xc
c000944f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009452:	e8 3c ee 01 00       	call   c0028293 <__floatsidf>
c0009457:	83 c4 10             	add    esp,0x10
c000945a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000945e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009462:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009466:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000946a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009472:	e8 b9 e7 01 00       	call   c0027c30 <__muldf3>
c0009477:	89 3c 24             	mov    DWORD PTR [esp],edi
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	e8 0c ee 01 00       	call   c0028293 <__floatsidf>
c0009487:	83 c4 10             	add    esp,0x10
c000948a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000948e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009492:	52                   	push   edx
c0009493:	50                   	push   eax
c0009494:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009498:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000949c:	e8 12 e1 01 00       	call   c00275b3 <__adddf3>
c00094a1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00094a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094ac:	e8 e2 ed 01 00       	call   c0028293 <__floatsidf>
c00094b1:	83 c4 10             	add    esp,0x10
c00094b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094bc:	52                   	push   edx
c00094bd:	50                   	push   eax
c00094be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c6:	e8 34 f0 01 00       	call   c00284ff <__ltdf2>
c00094cb:	83 c4 10             	add    esp,0x10
c00094ce:	85 c0                	test   eax,eax
c00094d0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094d4:	0f 89 85 02 00 00    	jns    c000975f <linear_vari_process+0x750>
c00094da:	85 c9                	test   ecx,ecx
c00094dc:	0f 8e f5 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c00094e2:	83 ec 10             	sub    esp,0x10
c00094e5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094e8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094eb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094ef:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094f2:	ff 30                	push   DWORD PTR [eax]
c00094f4:	e8 0b e7 01 00       	call   c0027c04 <__subdf3>
c00094f9:	83 c4 18             	add    esp,0x18
c00094fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009500:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009504:	52                   	push   edx
c0009505:	50                   	push   eax
c0009506:	e8 85 f1 01 00       	call   c0028690 <fabs>
c000950b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000950f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009513:	83 c4 10             	add    esp,0x10
c0009516:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000951b:	68 23 42 92 0c       	push   0xc924223
c0009520:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009524:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009528:	e8 b4 ef 01 00       	call   c00284e1 <__gtdf2>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	85 c0                	test   eax,eax
c0009532:	0f 8e 9f 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c0009538:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000953c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000953f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009541:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009545:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009549:	52                   	push   edx
c000954a:	50                   	push   eax
c000954b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000954e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009551:	e8 ae e6 01 00       	call   c0027c04 <__subdf3>
c0009556:	5f                   	pop    edi
c0009557:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000955b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000955f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009562:	e8 2c ed 01 00       	call   c0028293 <__floatsidf>
c0009567:	83 c4 10             	add    esp,0x10
c000956a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000956e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009572:	52                   	push   edx
c0009573:	50                   	push   eax
c0009574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009578:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000957c:	e8 af e6 01 00       	call   c0027c30 <__muldf3>
c0009581:	5d                   	pop    ebp
c0009582:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009586:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000958a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000958d:	e8 01 ed 01 00       	call   c0028293 <__floatsidf>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009599:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000959d:	52                   	push   edx
c000959e:	50                   	push   eax
c000959f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a7:	e8 68 e9 01 00       	call   c0027f14 <__divdf3>
c00095ac:	83 c4 10             	add    esp,0x10
c00095af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095b3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c7:	e8 e7 df 01 00       	call   c00275b3 <__adddf3>
c00095cc:	83 c4 10             	add    esp,0x10
c00095cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095d7:	31 ff                	xor    edi,edi
c00095d9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095dc:	39 f8                	cmp    eax,edi
c00095de:	0f 8e ac 00 00 00    	jle    c0009690 <linear_vari_process+0x681>
c00095e4:	8b 16                	mov    edx,DWORD PTR [esi]
c00095e6:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095e9:	29 c1                	sub    ecx,eax
c00095eb:	89 c8                	mov    eax,ecx
c00095ed:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095f0:	01 f8                	add    eax,edi
c00095f2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095f6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095f9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009600:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009603:	51                   	push   ecx
c0009604:	01 f8                	add    eax,edi
c0009606:	51                   	push   ecx
c0009607:	47                   	inc    edi
c0009608:	55                   	push   ebp
c0009609:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c000960c:	e8 37 d9 01 00       	call   c0026f48 <__subsf3>
c0009611:	89 04 24             	mov    DWORD PTR [esp],eax
c0009614:	e8 0e f0 01 00       	call   c0028627 <__extendsfdf2>
c0009619:	83 c4 10             	add    esp,0x10
c000961c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009620:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009624:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009628:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000962c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009630:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009634:	e8 f7 e5 01 00       	call   c0027c30 <__muldf3>
c0009639:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000963c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009640:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009644:	e8 de ef 01 00       	call   c0028627 <__extendsfdf2>
c0009649:	83 c4 10             	add    esp,0x10
c000964c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009650:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009654:	52                   	push   edx
c0009655:	50                   	push   eax
c0009656:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965e:	e8 50 df 01 00       	call   c00275b3 <__adddf3>
c0009663:	5d                   	pop    ebp
c0009664:	59                   	pop    ecx
c0009665:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009669:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000966d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009671:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009675:	e8 89 ee 01 00       	call   c0028503 <__truncdfsf2>
c000967a:	83 c4 10             	add    esp,0x10
c000967d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009681:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009685:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009688:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000968b:	e9 49 ff ff ff       	jmp    c00095d9 <linear_vari_process+0x5ca>
c0009690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	68 00 00 f0 3f       	push   0x3ff00000
c000969d:	6a 00                	push   0x0
c000969f:	e8 70 e8 01 00       	call   c0027f14 <__divdf3>
c00096a4:	83 c4 10             	add    esp,0x10
c00096a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096af:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bf:	e8 ef de 01 00       	call   c00275b3 <__adddf3>
c00096c4:	59                   	pop    ecx
c00096c5:	5f                   	pop    edi
c00096c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d6:	e8 d5 ef 01 00       	call   c00286b0 <lrint>
c00096db:	83 ec 0c             	sub    esp,0xc
c00096de:	50                   	push   eax
c00096df:	e8 af eb 01 00       	call   c0028293 <__floatsidf>
c00096e4:	83 c4 10             	add    esp,0x10
c00096e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096eb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ef:	52                   	push   edx
c00096f0:	50                   	push   eax
c00096f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f9:	e8 06 e5 01 00       	call   c0027c04 <__subdf3>
c00096fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009702:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009706:	83 c4 20             	add    esp,0x20
c0009709:	6a 00                	push   0x0
c000970b:	6a 00                	push   0x0
c000970d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009711:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009715:	e8 e5 ed 01 00       	call   c00284ff <__ltdf2>
c000971a:	83 c4 10             	add    esp,0x10
c000971d:	85 c0                	test   eax,eax
c000971f:	79 1e                	jns    c000973f <linear_vari_process+0x730>
c0009721:	68 00 00 f0 3f       	push   0x3ff00000
c0009726:	6a 00                	push   0x0
c0009728:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000972c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009730:	e8 7e de 01 00       	call   c00275b3 <__adddf3>
c0009735:	83 c4 10             	add    esp,0x10
c0009738:	89 04 24             	mov    DWORD PTR [esp],eax
c000973b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000973f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009742:	83 ec 10             	sub    esp,0x10
c0009745:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009749:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000974d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009751:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009755:	e8 aa e4 01 00       	call   c0027c04 <__subdf3>
c000975a:	e9 bc fc ff ff       	jmp    c000941b <linear_vari_process+0x40c>
c000975f:	39 fd                	cmp    ebp,edi
c0009761:	7d 38                	jge    c000979b <linear_vari_process+0x78c>
c0009763:	83 ec 0c             	sub    esp,0xc
c0009766:	89 f8                	mov    eax,edi
c0009768:	29 e8                	sub    eax,ebp
c000976a:	99                   	cdq    
c000976b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000976e:	50                   	push   eax
c000976f:	e8 1f eb 01 00       	call   c0028293 <__floatsidf>
c0009774:	83 c4 10             	add    esp,0x10
c0009777:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000977b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000977f:	52                   	push   edx
c0009780:	50                   	push   eax
c0009781:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009785:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009789:	e8 25 de 01 00       	call   c00275b3 <__adddf3>
c000978e:	83 c4 10             	add    esp,0x10
c0009791:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009794:	89 04 24             	mov    DWORD PTR [esp],eax
c0009797:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000979b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000979f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00097a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097a6:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00097a9:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00097ac:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097af:	85 c0                	test   eax,eax
c00097b1:	7f 29                	jg     c00097dc <linear_vari_process+0x7cd>
c00097b3:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097bf:	89 01                	mov    DWORD PTR [ecx],eax
c00097c1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097c4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097c7:	99                   	cdq    
c00097c8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097cb:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097ce:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097d1:	99                   	cdq    
c00097d2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097d5:	31 d2                	xor    edx,edx
c00097d7:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097da:	eb 1d                	jmp    c00097f9 <linear_vari_process+0x7ea>
c00097dc:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097df:	31 d2                	xor    edx,edx
c00097e1:	29 c8                	sub    eax,ecx
c00097e3:	c1 e0 02             	shl    eax,0x2
c00097e6:	39 d1                	cmp    ecx,edx
c00097e8:	7e c9                	jle    c00097b3 <linear_vari_process+0x7a4>
c00097ea:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097ec:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097ef:	83 c0 04             	add    eax,0x4
c00097f2:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097f6:	42                   	inc    edx
c00097f7:	eb ed                	jmp    c00097e6 <linear_vari_process+0x7d7>
c00097f9:	83 c4 3c             	add    esp,0x3c
c00097fc:	89 d0                	mov    eax,edx
c00097fe:	5b                   	pop    ebx
c00097ff:	5e                   	pop    esi
c0009800:	5f                   	pop    edi
c0009801:	5d                   	pop    ebp
c0009802:	c3                   	ret    

c0009803 <linear_reset>:
c0009803:	83 ec 0c             	sub    esp,0xc
c0009806:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000980a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000980d:	85 c0                	test   eax,eax
c000980f:	74 20                	je     c0009831 <linear_reset+0x2e>
c0009811:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0009814:	83 c0 1c             	add    eax,0x1c
c0009817:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000981a:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009821:	c1 e2 02             	shl    edx,0x2
c0009824:	51                   	push   ecx
c0009825:	52                   	push   edx
c0009826:	6a 00                	push   0x0
c0009828:	50                   	push   eax
c0009829:	e8 4a 6f ff ff       	call   c0000778 <memset>
c000982e:	83 c4 10             	add    esp,0x10
c0009831:	83 c4 0c             	add    esp,0xc
c0009834:	c3                   	ret    

c0009835 <linear_get_name>:
c0009835:	31 c0                	xor    eax,eax
c0009837:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000983c:	75 05                	jne    c0009843 <linear_get_name+0xe>
c000983e:	b8 00 9e 02 c0       	mov    eax,0xc0029e00
c0009843:	c3                   	ret    

c0009844 <linear_get_description>:
c0009844:	31 c0                	xor    eax,eax
c0009846:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000984b:	75 05                	jne    c0009852 <linear_get_description+0xe>
c000984d:	b8 14 9e 02 c0       	mov    eax,0xc0029e14
c0009852:	c3                   	ret    

c0009853 <linear_set_converter>:
c0009853:	53                   	push   ebx
c0009854:	b8 0a 00 00 00       	mov    eax,0xa
c0009859:	83 ec 08             	sub    esp,0x8
c000985c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009860:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009865:	75 6e                	jne    c00098d5 <linear_set_converter+0x82>
c0009867:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000986a:	85 c0                	test   eax,eax
c000986c:	74 13                	je     c0009881 <linear_set_converter+0x2e>
c000986e:	83 ec 0c             	sub    esp,0xc
c0009871:	50                   	push   eax
c0009872:	e8 d9 5f 00 00       	call   c000f850 <free>
c0009877:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000987e:	83 c4 10             	add    esp,0x10
c0009881:	50                   	push   eax
c0009882:	50                   	push   eax
c0009883:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009886:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000988d:	50                   	push   eax
c000988e:	6a 01                	push   0x1
c0009890:	e8 db 5f 00 00       	call   c000f870 <calloc>
c0009895:	83 c4 10             	add    esp,0x10
c0009898:	89 c2                	mov    edx,eax
c000989a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000989d:	85 d2                	test   edx,edx
c000989f:	b8 01 00 00 00       	mov    eax,0x1
c00098a4:	74 2f                	je     c00098d5 <linear_set_converter+0x82>
c00098a6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00098a9:	83 ec 0c             	sub    esp,0xc
c00098ac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00098af:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c00098b5:	c7 43 24 0f 90 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000900f
c00098bc:	c7 43 20 0f 90 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000900f
c00098c3:	c7 43 28 03 98 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009803
c00098ca:	53                   	push   ebx
c00098cb:	e8 33 ff ff ff       	call   c0009803 <linear_reset>
c00098d0:	83 c4 10             	add    esp,0x10
c00098d3:	31 c0                	xor    eax,eax
c00098d5:	83 c4 08             	add    esp,0x8
c00098d8:	5b                   	pop    ebx
c00098d9:	c3                   	ret    

c00098da <int_to_fp>:
c00098da:	c1 e0 0c             	shl    eax,0xc
c00098dd:	c3                   	ret    

c00098de <fp_to_int>:
c00098de:	c1 f8 0c             	sar    eax,0xc
c00098e1:	c3                   	ret    

c00098e2 <fp_fraction_part>:
c00098e2:	25 ff 0f 00 00       	and    eax,0xfff
c00098e7:	c3                   	ret    

c00098e8 <fp_to_double>:
c00098e8:	83 ec 1c             	sub    esp,0x1c
c00098eb:	e8 f2 ff ff ff       	call   c00098e2 <fp_fraction_part>
c00098f0:	83 ec 0c             	sub    esp,0xc
c00098f3:	50                   	push   eax
c00098f4:	e8 9a e9 01 00       	call   c0028293 <__floatsidf>
c00098f9:	83 c4 10             	add    esp,0x10
c00098fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009900:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009904:	68 00 00 30 3f       	push   0x3f300000
c0009909:	6a 00                	push   0x0
c000990b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000990f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009913:	e8 18 e3 01 00       	call   c0027c30 <__muldf3>
c0009918:	83 c4 2c             	add    esp,0x2c
c000991b:	c3                   	ret    

c000991c <calc_output_single>:
c000991c:	55                   	push   ebp
c000991d:	57                   	push   edi
c000991e:	56                   	push   esi
c000991f:	89 c6                	mov    esi,eax
c0009921:	53                   	push   ebx
c0009922:	89 d3                	mov    ebx,edx
c0009924:	83 ec 4c             	sub    esp,0x4c
c0009927:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000992b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000992e:	e8 a7 ff ff ff       	call   c00098da <int_to_fp>
c0009933:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009936:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000993a:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000993e:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009942:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009945:	99                   	cdq    
c0009946:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000994e:	f7 fb                	idiv   ebx
c0009950:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009958:	89 da                	mov    edx,ebx
c000995a:	0f af d0             	imul   edx,eax
c000995d:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009961:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009965:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009969:	29 c2                	sub    edx,eax
c000996b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000996e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009972:	83 c5 04             	add    ebp,0x4
c0009975:	e8 6e ff ff ff       	call   c00098e8 <fp_to_double>
c000997a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000997e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009986:	e8 53 ff ff ff       	call   c00098de <fp_to_int>
c000998b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000998e:	52                   	push   edx
c000998f:	52                   	push   edx
c0009990:	51                   	push   ecx
c0009991:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009995:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009999:	e8 aa d5 01 00       	call   c0026f48 <__subsf3>
c000999e:	89 04 24             	mov    DWORD PTR [esp],eax
c00099a1:	e8 81 ec 01 00       	call   c0028627 <__extendsfdf2>
c00099a6:	83 c4 10             	add    esp,0x10
c00099a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099ad:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099c1:	e8 6a e2 01 00       	call   c0027c30 <__muldf3>
c00099c6:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099ca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099ce:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099d1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099d5:	e8 4d ec 01 00       	call   c0028627 <__extendsfdf2>
c00099da:	83 c4 10             	add    esp,0x10
c00099dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099e5:	52                   	push   edx
c00099e6:	50                   	push   eax
c00099e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099ef:	e8 bf db 01 00       	call   c00275b3 <__adddf3>
c00099f4:	59                   	pop    ecx
c00099f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099fd:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009a03:	e8 1f ec 01 00       	call   c0028627 <__extendsfdf2>
c0009a08:	83 c4 10             	add    esp,0x10
c0009a0b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009a0f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009a13:	52                   	push   edx
c0009a14:	50                   	push   eax
c0009a15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a19:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a1d:	e8 0e e2 01 00       	call   c0027c30 <__muldf3>
c0009a22:	83 c4 10             	add    esp,0x10
c0009a25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a2d:	52                   	push   edx
c0009a2e:	50                   	push   eax
c0009a2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a37:	e8 77 db 01 00       	call   c00275b3 <__adddf3>
c0009a3c:	83 c4 10             	add    esp,0x10
c0009a3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a47:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a4b:	0f 89 1d ff ff ff    	jns    c000996e <calc_output_single+0x52>
c0009a51:	89 d9                	mov    ecx,ebx
c0009a53:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a57:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a5b:	89 dd                	mov    ebp,ebx
c0009a5d:	29 c8                	sub    eax,ecx
c0009a5f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a67:	99                   	cdq    
c0009a68:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a70:	f7 fb                	idiv   ebx
c0009a72:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a76:	0f af e8             	imul   ebp,eax
c0009a79:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a7d:	01 cd                	add    ebp,ecx
c0009a7f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a82:	89 e8                	mov    eax,ebp
c0009a84:	83 ee 04             	sub    esi,0x4
c0009a87:	e8 5c fe ff ff       	call   c00098e8 <fp_to_double>
c0009a8c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a94:	89 e8                	mov    eax,ebp
c0009a96:	29 dd                	sub    ebp,ebx
c0009a98:	e8 41 fe ff ff       	call   c00098de <fp_to_int>
c0009a9d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009aa0:	52                   	push   edx
c0009aa1:	52                   	push   edx
c0009aa2:	51                   	push   ecx
c0009aa3:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009aa7:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009aab:	e8 98 d4 01 00       	call   c0026f48 <__subsf3>
c0009ab0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ab3:	e8 6f eb 01 00       	call   c0028627 <__extendsfdf2>
c0009ab8:	83 c4 10             	add    esp,0x10
c0009abb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009abf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ac3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ac7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009acb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009acf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ad3:	e8 58 e1 01 00       	call   c0027c30 <__muldf3>
c0009ad8:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009adc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ae0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009ae3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ae7:	e8 3b eb 01 00       	call   c0028627 <__extendsfdf2>
c0009aec:	83 c4 10             	add    esp,0x10
c0009aef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009af3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009af7:	52                   	push   edx
c0009af8:	50                   	push   eax
c0009af9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b01:	e8 ad da 01 00       	call   c00275b3 <__adddf3>
c0009b06:	59                   	pop    ecx
c0009b07:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009b0b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009b0f:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009b15:	e8 0d eb 01 00       	call   c0028627 <__extendsfdf2>
c0009b1a:	83 c4 10             	add    esp,0x10
c0009b1d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b21:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b25:	52                   	push   edx
c0009b26:	50                   	push   eax
c0009b27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2f:	e8 fc e0 01 00       	call   c0027c30 <__muldf3>
c0009b34:	83 c4 10             	add    esp,0x10
c0009b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b3f:	52                   	push   edx
c0009b40:	50                   	push   eax
c0009b41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b49:	e8 65 da 01 00       	call   c00275b3 <__adddf3>
c0009b4e:	83 c4 10             	add    esp,0x10
c0009b51:	85 ed                	test   ebp,ebp
c0009b53:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b57:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b5b:	0f 8f 21 ff ff ff    	jg     c0009a82 <calc_output_single+0x166>
c0009b61:	52                   	push   edx
c0009b62:	50                   	push   eax
c0009b63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b6b:	e8 43 da 01 00       	call   c00275b3 <__adddf3>
c0009b70:	83 c4 5c             	add    esp,0x5c
c0009b73:	5b                   	pop    ebx
c0009b74:	5e                   	pop    esi
c0009b75:	5f                   	pop    edi
c0009b76:	5d                   	pop    ebp
c0009b77:	c3                   	ret    

c0009b78 <calc_output_stereo>:
c0009b78:	55                   	push   ebp
c0009b79:	89 cd                	mov    ebp,ecx
c0009b7b:	57                   	push   edi
c0009b7c:	56                   	push   esi
c0009b7d:	53                   	push   ebx
c0009b7e:	89 c3                	mov    ebx,eax
c0009b80:	83 ec 6c             	sub    esp,0x6c
c0009b83:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b87:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b8e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b95:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b99:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b9d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009ba0:	e8 35 fd ff ff       	call   c00098da <int_to_fp>
c0009ba5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009bad:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009bb9:	29 c8                	sub    eax,ecx
c0009bbb:	99                   	cdq    
c0009bbc:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009bc0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009bc4:	0f af d0             	imul   edx,eax
c0009bc7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bca:	31 d2                	xor    edx,edx
c0009bcc:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bd4:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009bd7:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009bdb:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009bde:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009be2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009be6:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009be9:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bee:	29 c1                	sub    ecx,eax
c0009bf0:	31 c0                	xor    eax,eax
c0009bf2:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bf5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bfd:	83 c7 08             	add    edi,0x8
c0009c00:	e8 e3 fc ff ff       	call   c00098e8 <fp_to_double>
c0009c05:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009c09:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009c0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c11:	e8 c8 fc ff ff       	call   c00098de <fp_to_int>
c0009c16:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009c19:	52                   	push   edx
c0009c1a:	52                   	push   edx
c0009c1b:	51                   	push   ecx
c0009c1c:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c20:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c24:	e8 1f d3 01 00       	call   c0026f48 <__subsf3>
c0009c29:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c2c:	e8 f6 e9 01 00       	call   c0028627 <__extendsfdf2>
c0009c31:	83 c4 10             	add    esp,0x10
c0009c34:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c38:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c44:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c48:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c4c:	e8 df df 01 00       	call   c0027c30 <__muldf3>
c0009c51:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c55:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c59:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c5c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c60:	e8 c2 e9 01 00       	call   c0028627 <__extendsfdf2>
c0009c65:	83 c4 10             	add    esp,0x10
c0009c68:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c6c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c70:	52                   	push   edx
c0009c71:	50                   	push   eax
c0009c72:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c76:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c7a:	e8 34 d9 01 00       	call   c00275b3 <__adddf3>
c0009c7f:	59                   	pop    ecx
c0009c80:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c84:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c88:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c8e:	e8 94 e9 01 00       	call   c0028627 <__extendsfdf2>
c0009c93:	83 c4 10             	add    esp,0x10
c0009c96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c9e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009caa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cae:	e8 7d df 01 00       	call   c0027c30 <__muldf3>
c0009cb3:	83 c4 10             	add    esp,0x10
c0009cb6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cba:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cbe:	52                   	push   edx
c0009cbf:	50                   	push   eax
c0009cc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc8:	e8 e6 d8 01 00       	call   c00275b3 <__adddf3>
c0009ccd:	59                   	pop    ecx
c0009cce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cd2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009cd6:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009cdc:	e8 46 e9 01 00       	call   c0028627 <__extendsfdf2>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ce8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cf8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cfc:	e8 2f df 01 00       	call   c0027c30 <__muldf3>
c0009d01:	83 c4 10             	add    esp,0x10
c0009d04:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009d08:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009d0c:	52                   	push   edx
c0009d0d:	50                   	push   eax
c0009d0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d16:	e8 98 d8 01 00       	call   c00275b3 <__adddf3>
c0009d1b:	83 c4 10             	add    esp,0x10
c0009d1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d22:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d26:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d2a:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d2e:	0f 89 c5 fe ff ff    	jns    c0009bf9 <calc_output_stereo+0x81>
c0009d34:	29 e9                	sub    ecx,ebp
c0009d36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d3a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d3e:	29 c8                	sub    eax,ecx
c0009d40:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d48:	99                   	cdq    
c0009d49:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d4d:	31 d2                	xor    edx,edx
c0009d4f:	0f af f8             	imul   edi,eax
c0009d52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d56:	40                   	inc    eax
c0009d57:	01 cf                	add    edi,ecx
c0009d59:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d5e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d62:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d6a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d6d:	31 c0                	xor    eax,eax
c0009d6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d73:	89 f8                	mov    eax,edi
c0009d75:	83 eb 08             	sub    ebx,0x8
c0009d78:	e8 6b fb ff ff       	call   c00098e8 <fp_to_double>
c0009d7d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d81:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d85:	89 f8                	mov    eax,edi
c0009d87:	e8 52 fb ff ff       	call   c00098de <fp_to_int>
c0009d8c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d8f:	52                   	push   edx
c0009d90:	52                   	push   edx
c0009d91:	55                   	push   ebp
c0009d92:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d96:	e8 ad d1 01 00       	call   c0026f48 <__subsf3>
c0009d9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d9e:	e8 84 e8 01 00       	call   c0028627 <__extendsfdf2>
c0009da3:	83 c4 10             	add    esp,0x10
c0009da6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009daa:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dbe:	e8 6d de 01 00       	call   c0027c30 <__muldf3>
c0009dc3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009dc6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009dca:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009dce:	e8 54 e8 01 00       	call   c0028627 <__extendsfdf2>
c0009dd3:	83 c4 10             	add    esp,0x10
c0009dd6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dda:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dde:	52                   	push   edx
c0009ddf:	50                   	push   eax
c0009de0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de8:	e8 c6 d7 01 00       	call   c00275b3 <__adddf3>
c0009ded:	59                   	pop    ecx
c0009dee:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009df2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009df6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dfc:	e8 26 e8 01 00       	call   c0028627 <__extendsfdf2>
c0009e01:	83 c4 10             	add    esp,0x10
c0009e04:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e08:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e0c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e10:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e14:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e1c:	e8 0f de 01 00       	call   c0027c30 <__muldf3>
c0009e21:	83 c4 10             	add    esp,0x10
c0009e24:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e28:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e2c:	52                   	push   edx
c0009e2d:	50                   	push   eax
c0009e2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e36:	e8 78 d7 01 00       	call   c00275b3 <__adddf3>
c0009e3b:	5d                   	pop    ebp
c0009e3c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e40:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e44:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e4a:	e8 d8 e7 01 00       	call   c0028627 <__extendsfdf2>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e56:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e62:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e6a:	e8 c1 dd 01 00       	call   c0027c30 <__muldf3>
c0009e6f:	83 c4 10             	add    esp,0x10
c0009e72:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e76:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e7a:	52                   	push   edx
c0009e7b:	50                   	push   eax
c0009e7c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e80:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e84:	e8 2a d7 01 00       	call   c00275b3 <__adddf3>
c0009e89:	83 c4 10             	add    esp,0x10
c0009e8c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e90:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e94:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e98:	85 ff                	test   edi,edi
c0009e9a:	0f 8f d3 fe ff ff    	jg     c0009d73 <calc_output_stereo+0x1fb>
c0009ea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb0:	e8 fe d6 01 00       	call   c00275b3 <__adddf3>
c0009eb5:	83 c4 10             	add    esp,0x10
c0009eb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ebc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ec0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ecc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed0:	e8 5b dd 01 00       	call   c0027c30 <__muldf3>
c0009ed5:	59                   	pop    ecx
c0009ed6:	5b                   	pop    ebx
c0009ed7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009edb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009edf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee7:	e8 17 e6 01 00       	call   c0028503 <__truncdfsf2>
c0009eec:	83 c4 10             	add    esp,0x10
c0009eef:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ef6:	89 03                	mov    DWORD PTR [ebx],eax
c0009ef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009efc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f08:	e8 a6 d6 01 00       	call   c00275b3 <__adddf3>
c0009f0d:	83 c4 10             	add    esp,0x10
c0009f10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009f18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f28:	e8 03 dd 01 00       	call   c0027c30 <__muldf3>
c0009f2d:	5e                   	pop    esi
c0009f2e:	5f                   	pop    edi
c0009f2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f33:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3f:	e8 bf e5 01 00       	call   c0028503 <__truncdfsf2>
c0009f44:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f4b:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f4e:	83 c4 7c             	add    esp,0x7c
c0009f51:	5b                   	pop    ebx
c0009f52:	5e                   	pop    esi
c0009f53:	5f                   	pop    edi
c0009f54:	5d                   	pop    ebp
c0009f55:	c3                   	ret    

c0009f56 <calc_output_quad>:
c0009f56:	55                   	push   ebp
c0009f57:	57                   	push   edi
c0009f58:	56                   	push   esi
c0009f59:	89 c6                	mov    esi,eax
c0009f5b:	53                   	push   ebx
c0009f5c:	83 ec 7c             	sub    esp,0x7c
c0009f5f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f63:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f67:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f6e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f75:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f79:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f7d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f80:	e8 55 f9 ff ff       	call   c00098da <int_to_fp>
c0009f85:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f88:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f8b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f8f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f93:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f97:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f9b:	99                   	cdq    
c0009f9c:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009fa0:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fa4:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009fa7:	31 d2                	xor    edx,edx
c0009fa9:	0f af d8             	imul   ebx,eax
c0009fac:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009fb4:	0f af c7             	imul   eax,edi
c0009fb7:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009fbb:	29 c1                	sub    ecx,eax
c0009fbd:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fc5:	31 c0                	xor    eax,eax
c0009fc7:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009fce:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009fd2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fd6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fda:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fde:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fe2:	89 d8                	mov    eax,ebx
c0009fe4:	83 c7 10             	add    edi,0x10
c0009fe7:	e8 fc f8 ff ff       	call   c00098e8 <fp_to_double>
c0009fec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ff0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ff4:	89 d8                	mov    eax,ebx
c0009ff6:	e8 e3 f8 ff ff       	call   c00098de <fp_to_int>
c0009ffb:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fff:	52                   	push   edx
c000a000:	52                   	push   edx
c000a001:	51                   	push   ecx
c000a002:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a006:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a00a:	e8 39 cf 01 00       	call   c0026f48 <__subsf3>
c000a00f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a012:	e8 10 e6 01 00       	call   c0028627 <__extendsfdf2>
c000a017:	83 c4 10             	add    esp,0x10
c000a01a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a01e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a02a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a02e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a032:	e8 f9 db 01 00       	call   c0027c30 <__muldf3>
c000a037:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a03b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a03f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a042:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a046:	e8 dc e5 01 00       	call   c0028627 <__extendsfdf2>
c000a04b:	83 c4 10             	add    esp,0x10
c000a04e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a052:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a056:	52                   	push   edx
c000a057:	50                   	push   eax
c000a058:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a05c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a060:	e8 4e d5 01 00       	call   c00275b3 <__adddf3>
c000a065:	59                   	pop    ecx
c000a066:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a06a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a06e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a074:	e8 ae e5 01 00       	call   c0028627 <__extendsfdf2>
c000a079:	83 c4 10             	add    esp,0x10
c000a07c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a080:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a08c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a090:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a094:	e8 97 db 01 00       	call   c0027c30 <__muldf3>
c000a099:	83 c4 10             	add    esp,0x10
c000a09c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0a4:	52                   	push   edx
c000a0a5:	50                   	push   eax
c000a0a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0ae:	e8 00 d5 01 00       	call   c00275b3 <__adddf3>
c000a0b3:	59                   	pop    ecx
c000a0b4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a0b8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a0bc:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0c2:	e8 60 e5 01 00       	call   c0028627 <__extendsfdf2>
c000a0c7:	83 c4 10             	add    esp,0x10
c000a0ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e2:	e8 49 db 01 00       	call   c0027c30 <__muldf3>
c000a0e7:	83 c4 10             	add    esp,0x10
c000a0ea:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ee:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0f2:	52                   	push   edx
c000a0f3:	50                   	push   eax
c000a0f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0fc:	e8 b2 d4 01 00       	call   c00275b3 <__adddf3>
c000a101:	59                   	pop    ecx
c000a102:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a106:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a10a:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a110:	e8 12 e5 01 00       	call   c0028627 <__extendsfdf2>
c000a115:	83 c4 10             	add    esp,0x10
c000a118:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a11c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a128:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a12c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a130:	e8 fb da 01 00       	call   c0027c30 <__muldf3>
c000a135:	83 c4 10             	add    esp,0x10
c000a138:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a13c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a140:	52                   	push   edx
c000a141:	50                   	push   eax
c000a142:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a146:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a14a:	e8 64 d4 01 00       	call   c00275b3 <__adddf3>
c000a14f:	59                   	pop    ecx
c000a150:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a154:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a158:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a15e:	e8 c4 e4 01 00       	call   c0028627 <__extendsfdf2>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a16a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a16e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a176:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17e:	e8 ad da 01 00       	call   c0027c30 <__muldf3>
c000a183:	83 c4 10             	add    esp,0x10
c000a186:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a18a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a18e:	52                   	push   edx
c000a18f:	50                   	push   eax
c000a190:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a194:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a198:	e8 16 d4 01 00       	call   c00275b3 <__adddf3>
c000a19d:	83 c4 10             	add    esp,0x10
c000a1a0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a1a4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a1a8:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1ac:	0f 89 30 fe ff ff    	jns    c0009fe2 <calc_output_quad+0x8c>
c000a1b2:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a1b6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a1ba:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1be:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1c2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1ca:	29 c8                	sub    eax,ecx
c000a1cc:	99                   	cdq    
c000a1cd:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1d1:	31 d2                	xor    edx,edx
c000a1d3:	0f af d8             	imul   ebx,eax
c000a1d6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1da:	40                   	inc    eax
c000a1db:	01 cb                	add    ebx,ecx
c000a1dd:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1e2:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1e6:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1ee:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1f1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1f9:	31 c0                	xor    eax,eax
c000a1fb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1ff:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a203:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a207:	89 d8                	mov    eax,ebx
c000a209:	83 ee 10             	sub    esi,0x10
c000a20c:	e8 d7 f6 ff ff       	call   c00098e8 <fp_to_double>
c000a211:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a215:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a219:	89 d8                	mov    eax,ebx
c000a21b:	e8 be f6 ff ff       	call   c00098de <fp_to_int>
c000a220:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a224:	52                   	push   edx
c000a225:	52                   	push   edx
c000a226:	57                   	push   edi
c000a227:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a22b:	e8 18 cd 01 00       	call   c0026f48 <__subsf3>
c000a230:	89 04 24             	mov    DWORD PTR [esp],eax
c000a233:	e8 ef e3 01 00       	call   c0028627 <__extendsfdf2>
c000a238:	83 c4 10             	add    esp,0x10
c000a23b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a23f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a243:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a247:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a24b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a24f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a253:	e8 d8 d9 01 00       	call   c0027c30 <__muldf3>
c000a258:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a25b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a25f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a263:	e8 bf e3 01 00       	call   c0028627 <__extendsfdf2>
c000a268:	83 c4 10             	add    esp,0x10
c000a26b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a26f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a273:	52                   	push   edx
c000a274:	50                   	push   eax
c000a275:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a279:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a27d:	e8 31 d3 01 00       	call   c00275b3 <__adddf3>
c000a282:	59                   	pop    ecx
c000a283:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a287:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a28b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a291:	e8 91 e3 01 00       	call   c0028627 <__extendsfdf2>
c000a296:	83 c4 10             	add    esp,0x10
c000a299:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a29d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ad:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2b1:	e8 7a d9 01 00       	call   c0027c30 <__muldf3>
c000a2b6:	83 c4 10             	add    esp,0x10
c000a2b9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2bd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2c1:	52                   	push   edx
c000a2c2:	50                   	push   eax
c000a2c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2cb:	e8 e3 d2 01 00       	call   c00275b3 <__adddf3>
c000a2d0:	5f                   	pop    edi
c000a2d1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2d5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2d9:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2df:	e8 43 e3 01 00       	call   c0028627 <__extendsfdf2>
c000a2e4:	83 c4 10             	add    esp,0x10
c000a2e7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2eb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2fb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ff:	e8 2c d9 01 00       	call   c0027c30 <__muldf3>
c000a304:	83 c4 10             	add    esp,0x10
c000a307:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a30b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a30f:	52                   	push   edx
c000a310:	50                   	push   eax
c000a311:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a315:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a319:	e8 95 d2 01 00       	call   c00275b3 <__adddf3>
c000a31e:	59                   	pop    ecx
c000a31f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a323:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a327:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a32d:	e8 f5 e2 01 00       	call   c0028627 <__extendsfdf2>
c000a332:	83 c4 10             	add    esp,0x10
c000a335:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a339:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a33d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a341:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a345:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a349:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a34d:	e8 de d8 01 00       	call   c0027c30 <__muldf3>
c000a352:	83 c4 10             	add    esp,0x10
c000a355:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a359:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a35d:	52                   	push   edx
c000a35e:	50                   	push   eax
c000a35f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a363:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a367:	e8 47 d2 01 00       	call   c00275b3 <__adddf3>
c000a36c:	5f                   	pop    edi
c000a36d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a371:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a375:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a37b:	e8 a7 e2 01 00       	call   c0028627 <__extendsfdf2>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a387:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a38b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a38f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a393:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a397:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a39b:	e8 90 d8 01 00       	call   c0027c30 <__muldf3>
c000a3a0:	83 c4 10             	add    esp,0x10
c000a3a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3a7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3ab:	52                   	push   edx
c000a3ac:	50                   	push   eax
c000a3ad:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b5:	e8 f9 d1 01 00       	call   c00275b3 <__adddf3>
c000a3ba:	83 c4 10             	add    esp,0x10
c000a3bd:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3c1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3c5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3c9:	85 db                	test   ebx,ebx
c000a3cb:	0f 8f 36 fe ff ff    	jg     c000a207 <calc_output_quad+0x2b1>
c000a3d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e1:	e8 cd d1 01 00       	call   c00275b3 <__adddf3>
c000a3e6:	83 c4 10             	add    esp,0x10
c000a3e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a401:	e8 2a d8 01 00       	call   c0027c30 <__muldf3>
c000a406:	59                   	pop    ecx
c000a407:	5b                   	pop    ebx
c000a408:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a40c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a410:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a414:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a418:	e8 e6 e0 01 00       	call   c0028503 <__truncdfsf2>
c000a41d:	83 c4 10             	add    esp,0x10
c000a420:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a427:	89 06                	mov    DWORD PTR [esi],eax
c000a429:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a42d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a431:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a435:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a439:	e8 75 d1 01 00       	call   c00275b3 <__adddf3>
c000a43e:	83 c4 10             	add    esp,0x10
c000a441:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a445:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a449:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a44d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a451:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a455:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a459:	e8 d2 d7 01 00       	call   c0027c30 <__muldf3>
c000a45e:	5e                   	pop    esi
c000a45f:	5f                   	pop    edi
c000a460:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a464:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	e8 8e e0 01 00       	call   c0028503 <__truncdfsf2>
c000a475:	83 c4 10             	add    esp,0x10
c000a478:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a47f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a482:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a486:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a48a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a48e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a492:	e8 1c d1 01 00       	call   c00275b3 <__adddf3>
c000a497:	83 c4 10             	add    esp,0x10
c000a49a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a49e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b2:	e8 79 d7 01 00       	call   c0027c30 <__muldf3>
c000a4b7:	5d                   	pop    ebp
c000a4b8:	59                   	pop    ecx
c000a4b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	e8 35 e0 01 00       	call   c0028503 <__truncdfsf2>
c000a4ce:	83 c4 10             	add    esp,0x10
c000a4d1:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4d8:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4db:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4df:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4eb:	e8 c3 d0 01 00       	call   c00275b3 <__adddf3>
c000a4f0:	83 c4 10             	add    esp,0x10
c000a4f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a503:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a507:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50b:	e8 20 d7 01 00       	call   c0027c30 <__muldf3>
c000a510:	5b                   	pop    ebx
c000a511:	5e                   	pop    esi
c000a512:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a516:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a51a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a51e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a522:	e8 dc df 01 00       	call   c0028503 <__truncdfsf2>
c000a527:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a52e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a531:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a537:	5b                   	pop    ebx
c000a538:	5e                   	pop    esi
c000a539:	5f                   	pop    edi
c000a53a:	5d                   	pop    ebp
c000a53b:	c3                   	ret    

c000a53c <calc_output_hex>:
c000a53c:	55                   	push   ebp
c000a53d:	89 cd                	mov    ebp,ecx
c000a53f:	57                   	push   edi
c000a540:	56                   	push   esi
c000a541:	53                   	push   ebx
c000a542:	89 c3                	mov    ebx,eax
c000a544:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a54a:	89 14 24             	mov    DWORD PTR [esp],edx
c000a54d:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a554:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a55b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a55f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a563:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a566:	e8 6f f3 ff ff       	call   c00098da <int_to_fp>
c000a56b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a56e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a572:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a575:	29 c8                	sub    eax,ecx
c000a577:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a57b:	99                   	cdq    
c000a57c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a584:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a587:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a58f:	0f af f8             	imul   edi,eax
c000a592:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a595:	01 cf                	add    edi,ecx
c000a597:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a59b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a59e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a5a2:	0f af c2             	imul   eax,edx
c000a5a5:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a5a9:	29 c1                	sub    ecx,eax
c000a5ab:	31 d2                	xor    edx,edx
c000a5ad:	31 c0                	xor    eax,eax
c000a5af:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a5ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a5be:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5c2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5c6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5ca:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5ce:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5da:	89 f8                	mov    eax,edi
c000a5dc:	e8 07 f3 ff ff       	call   c00098e8 <fp_to_double>
c000a5e1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5e9:	89 f8                	mov    eax,edi
c000a5eb:	e8 ee f2 ff ff       	call   c00098de <fp_to_int>
c000a5f0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5f4:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5f7:	52                   	push   edx
c000a5f8:	52                   	push   edx
c000a5f9:	51                   	push   ecx
c000a5fa:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5fe:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a605:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a609:	e8 3a c9 01 00       	call   c0026f48 <__subsf3>
c000a60e:	89 04 24             	mov    DWORD PTR [esp],eax
c000a611:	e8 11 e0 01 00       	call   c0028627 <__extendsfdf2>
c000a616:	83 c4 10             	add    esp,0x10
c000a619:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a61d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a625:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a629:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a62d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a631:	e8 fa d5 01 00       	call   c0027c30 <__muldf3>
c000a636:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a63a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a63e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a641:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a645:	e8 dd df 01 00       	call   c0028627 <__extendsfdf2>
c000a64a:	83 c4 10             	add    esp,0x10
c000a64d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a651:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a655:	52                   	push   edx
c000a656:	50                   	push   eax
c000a657:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65f:	e8 4f cf 01 00       	call   c00275b3 <__adddf3>
c000a664:	59                   	pop    ecx
c000a665:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a669:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a66d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a673:	e8 af df 01 00       	call   c0028627 <__extendsfdf2>
c000a678:	83 c4 10             	add    esp,0x10
c000a67b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a67f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a683:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a687:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a68b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a68f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a693:	e8 98 d5 01 00       	call   c0027c30 <__muldf3>
c000a698:	83 c4 10             	add    esp,0x10
c000a69b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a69f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6a3:	52                   	push   edx
c000a6a4:	50                   	push   eax
c000a6a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6ad:	e8 01 cf 01 00       	call   c00275b3 <__adddf3>
c000a6b2:	59                   	pop    ecx
c000a6b3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a6b7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a6bb:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6c1:	e8 61 df 01 00       	call   c0028627 <__extendsfdf2>
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6cd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6e1:	e8 4a d5 01 00       	call   c0027c30 <__muldf3>
c000a6e6:	83 c4 10             	add    esp,0x10
c000a6e9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6ed:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6f1:	52                   	push   edx
c000a6f2:	50                   	push   eax
c000a6f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6fb:	e8 b3 ce 01 00       	call   c00275b3 <__adddf3>
c000a700:	59                   	pop    ecx
c000a701:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a705:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a709:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a70f:	e8 13 df 01 00       	call   c0028627 <__extendsfdf2>
c000a714:	83 c4 10             	add    esp,0x10
c000a717:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a71b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a71f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a723:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a727:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72f:	e8 fc d4 01 00       	call   c0027c30 <__muldf3>
c000a734:	83 c4 10             	add    esp,0x10
c000a737:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a73b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a73f:	52                   	push   edx
c000a740:	50                   	push   eax
c000a741:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a745:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a749:	e8 65 ce 01 00       	call   c00275b3 <__adddf3>
c000a74e:	59                   	pop    ecx
c000a74f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a753:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a757:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a75d:	e8 c5 de 01 00       	call   c0028627 <__extendsfdf2>
c000a762:	83 c4 10             	add    esp,0x10
c000a765:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a769:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a76d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a771:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a775:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a779:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a77d:	e8 ae d4 01 00       	call   c0027c30 <__muldf3>
c000a782:	83 c4 10             	add    esp,0x10
c000a785:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a789:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a78d:	52                   	push   edx
c000a78e:	50                   	push   eax
c000a78f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a793:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a797:	e8 17 ce 01 00       	call   c00275b3 <__adddf3>
c000a79c:	59                   	pop    ecx
c000a79d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a7a1:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a7a5:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a7ab:	e8 77 de 01 00       	call   c0028627 <__extendsfdf2>
c000a7b0:	83 c4 10             	add    esp,0x10
c000a7b3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7b7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7c3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7cb:	e8 60 d4 01 00       	call   c0027c30 <__muldf3>
c000a7d0:	83 c4 10             	add    esp,0x10
c000a7d3:	83 c6 18             	add    esi,0x18
c000a7d6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7da:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7de:	52                   	push   edx
c000a7df:	50                   	push   eax
c000a7e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e8:	e8 c6 cd 01 00       	call   c00275b3 <__adddf3>
c000a7ed:	59                   	pop    ecx
c000a7ee:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7f2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7f6:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7fc:	e8 26 de 01 00       	call   c0028627 <__extendsfdf2>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a808:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a80c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a810:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a814:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a818:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a81c:	e8 0f d4 01 00       	call   c0027c30 <__muldf3>
c000a821:	83 c4 10             	add    esp,0x10
c000a824:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a828:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a82c:	52                   	push   edx
c000a82d:	50                   	push   eax
c000a82e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a832:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a836:	e8 78 cd 01 00       	call   c00275b3 <__adddf3>
c000a83b:	83 c4 10             	add    esp,0x10
c000a83e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a842:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a846:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a849:	0f 89 8b fd ff ff    	jns    c000a5da <calc_output_hex+0x9e>
c000a84f:	31 f6                	xor    esi,esi
c000a851:	31 ff                	xor    edi,edi
c000a853:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a857:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a85a:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a85e:	29 e9                	sub    ecx,ebp
c000a860:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a864:	29 c8                	sub    eax,ecx
c000a866:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a869:	99                   	cdq    
c000a86a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a86e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a871:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a875:	0f af e8             	imul   ebp,eax
c000a878:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a87c:	40                   	inc    eax
c000a87d:	01 cd                	add    ebp,ecx
c000a87f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a884:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a888:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a88c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a890:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a893:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a897:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a89b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a89f:	89 e8                	mov    eax,ebp
c000a8a1:	e8 42 f0 ff ff       	call   c00098e8 <fp_to_double>
c000a8a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8ae:	89 e8                	mov    eax,ebp
c000a8b0:	e8 29 f0 ff ff       	call   c00098de <fp_to_int>
c000a8b5:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a8b9:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a8bc:	52                   	push   edx
c000a8bd:	52                   	push   edx
c000a8be:	51                   	push   ecx
c000a8bf:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8c6:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8cd:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8d1:	e8 72 c6 01 00       	call   c0026f48 <__subsf3>
c000a8d6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8d9:	e8 49 dd 01 00       	call   c0028627 <__extendsfdf2>
c000a8de:	83 c4 10             	add    esp,0x10
c000a8e1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f9:	e8 32 d3 01 00       	call   c0027c30 <__muldf3>
c000a8fe:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a905:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a909:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a90c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a910:	e8 12 dd 01 00       	call   c0028627 <__extendsfdf2>
c000a915:	83 c4 10             	add    esp,0x10
c000a918:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a91c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a920:	52                   	push   edx
c000a921:	50                   	push   eax
c000a922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a92a:	e8 84 cc 01 00       	call   c00275b3 <__adddf3>
c000a92f:	59                   	pop    ecx
c000a930:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a934:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a938:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a93e:	e8 e4 dc 01 00       	call   c0028627 <__extendsfdf2>
c000a943:	83 c4 10             	add    esp,0x10
c000a946:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a94a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a94e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a952:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a956:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95e:	e8 cd d2 01 00       	call   c0027c30 <__muldf3>
c000a963:	83 c4 10             	add    esp,0x10
c000a966:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a96a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a96e:	52                   	push   edx
c000a96f:	50                   	push   eax
c000a970:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a974:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a978:	e8 36 cc 01 00       	call   c00275b3 <__adddf3>
c000a97d:	59                   	pop    ecx
c000a97e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a982:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a986:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a98c:	e8 96 dc 01 00       	call   c0028627 <__extendsfdf2>
c000a991:	83 c4 10             	add    esp,0x10
c000a994:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a998:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a99c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9a8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9ac:	e8 7f d2 01 00       	call   c0027c30 <__muldf3>
c000a9b1:	83 c4 10             	add    esp,0x10
c000a9b4:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9b8:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9bc:	52                   	push   edx
c000a9bd:	50                   	push   eax
c000a9be:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c2:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c6:	e8 e8 cb 01 00       	call   c00275b3 <__adddf3>
c000a9cb:	59                   	pop    ecx
c000a9cc:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9d0:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9d4:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9da:	e8 48 dc 01 00       	call   c0028627 <__extendsfdf2>
c000a9df:	83 c4 10             	add    esp,0x10
c000a9e2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9e6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9f2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9f6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9fa:	e8 31 d2 01 00       	call   c0027c30 <__muldf3>
c000a9ff:	83 c4 10             	add    esp,0x10
c000aa02:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa06:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa0a:	52                   	push   edx
c000aa0b:	50                   	push   eax
c000aa0c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa10:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa14:	e8 9a cb 01 00       	call   c00275b3 <__adddf3>
c000aa19:	59                   	pop    ecx
c000aa1a:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000aa1e:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa22:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa28:	e8 fa db 01 00       	call   c0028627 <__extendsfdf2>
c000aa2d:	83 c4 10             	add    esp,0x10
c000aa30:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa34:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa40:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa44:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa48:	e8 e3 d1 01 00       	call   c0027c30 <__muldf3>
c000aa4d:	83 c4 10             	add    esp,0x10
c000aa50:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa54:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa58:	52                   	push   edx
c000aa59:	50                   	push   eax
c000aa5a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa5e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa62:	e8 4c cb 01 00       	call   c00275b3 <__adddf3>
c000aa67:	59                   	pop    ecx
c000aa68:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa6c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa70:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa76:	e8 ac db 01 00       	call   c0028627 <__extendsfdf2>
c000aa7b:	83 c4 10             	add    esp,0x10
c000aa7e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa82:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa92:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa96:	e8 95 d1 01 00       	call   c0027c30 <__muldf3>
c000aa9b:	83 c4 10             	add    esp,0x10
c000aa9e:	83 eb 18             	sub    ebx,0x18
c000aaa1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aaa5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aaa9:	52                   	push   edx
c000aaaa:	50                   	push   eax
c000aaab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aaaf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aab3:	e8 fb ca 01 00       	call   c00275b3 <__adddf3>
c000aab8:	59                   	pop    ecx
c000aab9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aabd:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aac1:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aac7:	e8 5b db 01 00       	call   c0028627 <__extendsfdf2>
c000aacc:	83 c4 10             	add    esp,0x10
c000aacf:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aad3:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aad7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadf:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae7:	e8 44 d1 01 00       	call   c0027c30 <__muldf3>
c000aaec:	83 c4 10             	add    esp,0x10
c000aaef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aaf3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aaf7:	52                   	push   edx
c000aaf8:	50                   	push   eax
c000aaf9:	57                   	push   edi
c000aafa:	56                   	push   esi
c000aafb:	e8 b3 ca 01 00       	call   c00275b3 <__adddf3>
c000ab00:	83 c4 10             	add    esp,0x10
c000ab03:	89 c6                	mov    esi,eax
c000ab05:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ab08:	89 d7                	mov    edi,edx
c000ab0a:	85 ed                	test   ebp,ebp
c000ab0c:	0f 8f 8d fd ff ff    	jg     c000a89f <calc_output_hex+0x363>
c000ab12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab16:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab22:	e8 8c ca 01 00       	call   c00275b3 <__adddf3>
c000ab27:	83 c4 10             	add    esp,0x10
c000ab2a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab2d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab31:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab35:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab41:	e8 ea d0 01 00       	call   c0027c30 <__muldf3>
c000ab46:	59                   	pop    ecx
c000ab47:	5b                   	pop    ebx
c000ab48:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab54:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab58:	e8 a6 d9 01 00       	call   c0028503 <__truncdfsf2>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab67:	89 03                	mov    DWORD PTR [ebx],eax
c000ab69:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab6d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab79:	e8 35 ca 01 00       	call   c00275b3 <__adddf3>
c000ab7e:	83 c4 10             	add    esp,0x10
c000ab81:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab98:	e8 93 d0 01 00       	call   c0027c30 <__muldf3>
c000ab9d:	5d                   	pop    ebp
c000ab9e:	59                   	pop    ecx
c000ab9f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aba3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aba7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaf:	e8 4f d9 01 00       	call   c0028503 <__truncdfsf2>
c000abb4:	83 c4 10             	add    esp,0x10
c000abb7:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abbe:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000abc1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abcd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abd1:	e8 dd c9 01 00       	call   c00275b3 <__adddf3>
c000abd6:	83 c4 10             	add    esp,0x10
c000abd9:	89 04 24             	mov    DWORD PTR [esp],eax
c000abdc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abe0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf0:	e8 3b d0 01 00       	call   c0027c30 <__muldf3>
c000abf5:	5b                   	pop    ebx
c000abf6:	5d                   	pop    ebp
c000abf7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abfb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac07:	e8 f7 d8 01 00       	call   c0028503 <__truncdfsf2>
c000ac0c:	83 c4 10             	add    esp,0x10
c000ac0f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac16:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ac19:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac1d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac25:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac29:	e8 85 c9 01 00       	call   c00275b3 <__adddf3>
c000ac2e:	83 c4 10             	add    esp,0x10
c000ac31:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac34:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac48:	e8 e3 cf 01 00       	call   c0027c30 <__muldf3>
c000ac4d:	59                   	pop    ecx
c000ac4e:	5b                   	pop    ebx
c000ac4f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac57:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5f:	e8 9f d8 01 00       	call   c0028503 <__truncdfsf2>
c000ac64:	83 c4 10             	add    esp,0x10
c000ac67:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac6e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac7d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac81:	e8 2d c9 01 00       	call   c00275b3 <__adddf3>
c000ac86:	83 c4 10             	add    esp,0x10
c000ac89:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac8c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca0:	e8 8b cf 01 00       	call   c0027c30 <__muldf3>
c000aca5:	5d                   	pop    ebp
c000aca6:	59                   	pop    ecx
c000aca7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb7:	e8 47 d8 01 00       	call   c0028503 <__truncdfsf2>
c000acbc:	83 c4 10             	add    esp,0x10
c000acbf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000acc6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000acc9:	57                   	push   edi
c000acca:	56                   	push   esi
c000accb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000accf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acd3:	e8 db c8 01 00       	call   c00275b3 <__adddf3>
c000acd8:	83 c4 10             	add    esp,0x10
c000acdb:	89 04 24             	mov    DWORD PTR [esp],eax
c000acde:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ace2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ace6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf2:	e8 39 cf 01 00       	call   c0027c30 <__muldf3>
c000acf7:	5b                   	pop    ebx
c000acf8:	5e                   	pop    esi
c000acf9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acfd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad01:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad09:	e8 f5 d7 01 00       	call   c0028503 <__truncdfsf2>
c000ad0e:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ad15:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ad18:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ad1e:	5b                   	pop    ebx
c000ad1f:	5e                   	pop    esi
c000ad20:	5f                   	pop    edi
c000ad21:	5d                   	pop    ebp
c000ad22:	c3                   	ret    

c000ad23 <sinc_reset>:
c000ad23:	56                   	push   esi
c000ad24:	53                   	push   ebx
c000ad25:	51                   	push   ecx
c000ad26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad2a:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad2d:	85 db                	test   ebx,ebx
c000ad2f:	74 59                	je     c000ad8a <sinc_reset+0x67>
c000ad31:	31 d2                	xor    edx,edx
c000ad33:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad3a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad3d:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad40:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad47:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad4e:	31 c0                	xor    eax,eax
c000ad50:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad56:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad59:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad5c:	52                   	push   edx
c000ad5d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad60:	c1 e0 02             	shl    eax,0x2
c000ad63:	50                   	push   eax
c000ad64:	6a 00                	push   0x0
c000ad66:	56                   	push   esi
c000ad67:	e8 0c 5a ff ff       	call   c0000778 <memset>
c000ad6c:	83 c4 0c             	add    esp,0xc
c000ad6f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad72:	c1 e0 02             	shl    eax,0x2
c000ad75:	50                   	push   eax
c000ad76:	68 aa 00 00 00       	push   0xaa
c000ad7b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad7e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad81:	50                   	push   eax
c000ad82:	e8 f1 59 ff ff       	call   c0000778 <memset>
c000ad87:	83 c4 10             	add    esp,0x10
c000ad8a:	58                   	pop    eax
c000ad8b:	5b                   	pop    ebx
c000ad8c:	5e                   	pop    esi
c000ad8d:	c3                   	ret    

c000ad8e <calc_output_multi>:
c000ad8e:	55                   	push   ebp
c000ad8f:	57                   	push   edi
c000ad90:	56                   	push   esi
c000ad91:	89 c6                	mov    esi,eax
c000ad93:	53                   	push   ebx
c000ad94:	83 ec 4c             	sub    esp,0x4c
c000ad97:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad9b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad9f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ada3:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ada7:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000adab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000adaf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000adb3:	8d 46 44             	lea    eax,[esi+0x44]
c000adb6:	89 04 24             	mov    DWORD PTR [esp],eax
c000adb9:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000adbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000adc3:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000adc6:	e8 0f eb ff ff       	call   c00098da <int_to_fp>
c000adcb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000adce:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000add2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000add6:	99                   	cdq    
c000add7:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000addb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000addf:	0f af d0             	imul   edx,eax
c000ade2:	0f af c3             	imul   eax,ebx
c000ade5:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ade9:	29 c1                	sub    ecx,eax
c000adeb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adef:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adf3:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adfa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adfe:	57                   	push   edi
c000adff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae03:	6a 00                	push   0x0
c000ae05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae09:	e8 6a 59 ff ff       	call   c0000778 <memset>
c000ae0e:	83 c4 10             	add    esp,0x10
c000ae11:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae15:	89 df                	mov    edi,ebx
c000ae17:	e8 cc ea ff ff       	call   c00098e8 <fp_to_double>
c000ae1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae24:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae28:	e8 b1 ea ff ff       	call   c00098de <fp_to_int>
c000ae2d:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae30:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae33:	51                   	push   ecx
c000ae34:	51                   	push   ecx
c000ae35:	55                   	push   ebp
c000ae36:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae3a:	e8 09 c1 01 00       	call   c0026f48 <__subsf3>
c000ae3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae42:	e8 e0 d7 01 00       	call   c0028627 <__extendsfdf2>
c000ae47:	83 c4 10             	add    esp,0x10
c000ae4a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae4e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae5a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae5e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae62:	e8 c9 cd 01 00       	call   c0027c30 <__muldf3>
c000ae67:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae6e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae72:	e8 b0 d7 01 00       	call   c0028627 <__extendsfdf2>
c000ae77:	83 c4 10             	add    esp,0x10
c000ae7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae82:	52                   	push   edx
c000ae83:	50                   	push   eax
c000ae84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae8c:	e8 22 c7 01 00       	call   c00275b3 <__adddf3>
c000ae91:	83 c4 10             	add    esp,0x10
c000ae94:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae98:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae9c:	89 f8                	mov    eax,edi
c000ae9e:	b9 08 00 00 00       	mov    ecx,0x8
c000aea3:	99                   	cdq    
c000aea4:	f7 f9                	idiv   ecx
c000aea6:	4a                   	dec    edx
c000aea7:	83 fa 06             	cmp    edx,0x6
c000aeaa:	77 07                	ja     c000aeb3 <calc_output_multi+0x125>
c000aeac:	ff 24 95 44 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd61bc]
c000aeb3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeb6:	4f                   	dec    edi
c000aeb7:	83 ec 0c             	sub    esp,0xc
c000aeba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aebd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aec1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aec8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aecc:	e8 56 d7 01 00       	call   c0028627 <__extendsfdf2>
c000aed1:	83 c4 10             	add    esp,0x10
c000aed4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aed8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aedc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aee8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeec:	e8 3f cd 01 00       	call   c0027c30 <__muldf3>
c000aef1:	83 c4 10             	add    esp,0x10
c000aef4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aef8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aefc:	52                   	push   edx
c000aefd:	50                   	push   eax
c000aefe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af01:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af04:	e8 aa c6 01 00       	call   c00275b3 <__adddf3>
c000af09:	83 c4 10             	add    esp,0x10
c000af0c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af0f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af12:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af15:	4f                   	dec    edi
c000af16:	83 ec 0c             	sub    esp,0xc
c000af19:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af20:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af27:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af2b:	e8 f7 d6 01 00       	call   c0028627 <__extendsfdf2>
c000af30:	83 c4 10             	add    esp,0x10
c000af33:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af37:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af43:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af47:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af4b:	e8 e0 cc 01 00       	call   c0027c30 <__muldf3>
c000af50:	83 c4 10             	add    esp,0x10
c000af53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af57:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af5b:	52                   	push   edx
c000af5c:	50                   	push   eax
c000af5d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af60:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af63:	e8 4b c6 01 00       	call   c00275b3 <__adddf3>
c000af68:	83 c4 10             	add    esp,0x10
c000af6b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af6e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af71:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af74:	4f                   	dec    edi
c000af75:	83 ec 0c             	sub    esp,0xc
c000af78:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af7f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af86:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af8a:	e8 98 d6 01 00       	call   c0028627 <__extendsfdf2>
c000af8f:	83 c4 10             	add    esp,0x10
c000af92:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af96:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afa2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afa6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afaa:	e8 81 cc 01 00       	call   c0027c30 <__muldf3>
c000afaf:	83 c4 10             	add    esp,0x10
c000afb2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afb6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afba:	52                   	push   edx
c000afbb:	50                   	push   eax
c000afbc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afbf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afc2:	e8 ec c5 01 00       	call   c00275b3 <__adddf3>
c000afc7:	83 c4 10             	add    esp,0x10
c000afca:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afcd:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afd0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000afd3:	4f                   	dec    edi
c000afd4:	83 ec 0c             	sub    esp,0xc
c000afd7:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afde:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afe5:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afe9:	e8 39 d6 01 00       	call   c0028627 <__extendsfdf2>
c000afee:	83 c4 10             	add    esp,0x10
c000aff1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aff5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000affd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b001:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b005:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b009:	e8 22 cc 01 00       	call   c0027c30 <__muldf3>
c000b00e:	83 c4 10             	add    esp,0x10
c000b011:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b015:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b019:	52                   	push   edx
c000b01a:	50                   	push   eax
c000b01b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b01e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b021:	e8 8d c5 01 00       	call   c00275b3 <__adddf3>
c000b026:	83 c4 10             	add    esp,0x10
c000b029:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b02c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b02f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b032:	4f                   	dec    edi
c000b033:	83 ec 0c             	sub    esp,0xc
c000b036:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b039:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b03d:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b044:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b048:	e8 da d5 01 00       	call   c0028627 <__extendsfdf2>
c000b04d:	83 c4 10             	add    esp,0x10
c000b050:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b054:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b058:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b060:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b064:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b068:	e8 c3 cb 01 00       	call   c0027c30 <__muldf3>
c000b06d:	83 c4 10             	add    esp,0x10
c000b070:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b074:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b078:	52                   	push   edx
c000b079:	50                   	push   eax
c000b07a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b07d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b080:	e8 2e c5 01 00       	call   c00275b3 <__adddf3>
c000b085:	83 c4 10             	add    esp,0x10
c000b088:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b08b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b08e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b091:	4f                   	dec    edi
c000b092:	83 ec 0c             	sub    esp,0xc
c000b095:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b098:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b09c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0a3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0a7:	e8 7b d5 01 00       	call   c0028627 <__extendsfdf2>
c000b0ac:	83 c4 10             	add    esp,0x10
c000b0af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0b3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c7:	e8 64 cb 01 00       	call   c0027c30 <__muldf3>
c000b0cc:	83 c4 10             	add    esp,0x10
c000b0cf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0d7:	52                   	push   edx
c000b0d8:	50                   	push   eax
c000b0d9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0dc:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0df:	e8 cf c4 01 00       	call   c00275b3 <__adddf3>
c000b0e4:	83 c4 10             	add    esp,0x10
c000b0e7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0ea:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0ed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0f0:	4f                   	dec    edi
c000b0f1:	83 ec 0c             	sub    esp,0xc
c000b0f4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0fb:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b102:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b106:	e8 1c d5 01 00       	call   c0028627 <__extendsfdf2>
c000b10b:	83 c4 10             	add    esp,0x10
c000b10e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b112:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b116:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b122:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b126:	e8 05 cb 01 00       	call   c0027c30 <__muldf3>
c000b12b:	83 c4 10             	add    esp,0x10
c000b12e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b132:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b136:	52                   	push   edx
c000b137:	50                   	push   eax
c000b138:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b13b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b13e:	e8 70 c4 01 00       	call   c00275b3 <__adddf3>
c000b143:	83 c4 10             	add    esp,0x10
c000b146:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b149:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b14c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b14f:	4f                   	dec    edi
c000b150:	83 ec 0c             	sub    esp,0xc
c000b153:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b156:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b15a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b161:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b165:	e8 bd d4 01 00       	call   c0028627 <__extendsfdf2>
c000b16a:	83 c4 10             	add    esp,0x10
c000b16d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b171:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b175:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b179:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b17d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b181:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b185:	e8 a6 ca 01 00       	call   c0027c30 <__muldf3>
c000b18a:	83 c4 10             	add    esp,0x10
c000b18d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b191:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b195:	52                   	push   edx
c000b196:	50                   	push   eax
c000b197:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b19a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b19d:	e8 11 c4 01 00       	call   c00275b3 <__adddf3>
c000b1a2:	83 c4 10             	add    esp,0x10
c000b1a5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1a8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1ab:	85 ff                	test   edi,edi
c000b1ad:	0f 8f e9 fc ff ff    	jg     c000ae9c <calc_output_multi+0x10e>
c000b1b3:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b1b7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1bb:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1bf:	0f 89 4c fc ff ff    	jns    c000ae11 <calc_output_multi+0x83>
c000b1c5:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1cd:	29 c8                	sub    eax,ecx
c000b1cf:	99                   	cdq    
c000b1d0:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1d4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1d8:	0f af d0             	imul   edx,eax
c000b1db:	40                   	inc    eax
c000b1dc:	01 d1                	add    ecx,edx
c000b1de:	0f af c3             	imul   eax,ebx
c000b1e1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1e5:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1ec:	55                   	push   ebp
c000b1ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1f1:	6a 00                	push   0x0
c000b1f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1f7:	e8 7c 55 ff ff       	call   c0000778 <memset>
c000b1fc:	83 c4 10             	add    esp,0x10
c000b1ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b203:	e8 e0 e6 ff ff       	call   c00098e8 <fp_to_double>
c000b208:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b20c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b210:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b214:	e8 c5 e6 ff ff       	call   c00098de <fp_to_int>
c000b219:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b21c:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b21f:	57                   	push   edi
c000b220:	57                   	push   edi
c000b221:	89 df                	mov    edi,ebx
c000b223:	55                   	push   ebp
c000b224:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b228:	e8 1b bd 01 00       	call   c0026f48 <__subsf3>
c000b22d:	89 04 24             	mov    DWORD PTR [esp],eax
c000b230:	e8 f2 d3 01 00       	call   c0028627 <__extendsfdf2>
c000b235:	83 c4 10             	add    esp,0x10
c000b238:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b23c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b240:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b248:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b24c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b250:	e8 db c9 01 00       	call   c0027c30 <__muldf3>
c000b255:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b258:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b25c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b260:	e8 c2 d3 01 00       	call   c0028627 <__extendsfdf2>
c000b265:	83 c4 10             	add    esp,0x10
c000b268:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b26c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b270:	52                   	push   edx
c000b271:	50                   	push   eax
c000b272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b27a:	e8 34 c3 01 00       	call   c00275b3 <__adddf3>
c000b27f:	83 c4 10             	add    esp,0x10
c000b282:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b286:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b28a:	89 f8                	mov    eax,edi
c000b28c:	b9 08 00 00 00       	mov    ecx,0x8
c000b291:	99                   	cdq    
c000b292:	f7 f9                	idiv   ecx
c000b294:	4a                   	dec    edx
c000b295:	83 fa 06             	cmp    edx,0x6
c000b298:	77 07                	ja     c000b2a1 <calc_output_multi+0x513>
c000b29a:	ff 24 95 60 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd61a0]
c000b2a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2a5:	4f                   	dec    edi
c000b2a6:	83 ec 0c             	sub    esp,0xc
c000b2a9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2b0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2b7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2bb:	e8 67 d3 01 00       	call   c0028627 <__extendsfdf2>
c000b2c0:	83 c4 10             	add    esp,0x10
c000b2c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2db:	e8 50 c9 01 00       	call   c0027c30 <__muldf3>
c000b2e0:	83 c4 10             	add    esp,0x10
c000b2e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2eb:	52                   	push   edx
c000b2ec:	50                   	push   eax
c000b2ed:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2f0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2f3:	e8 bb c2 01 00       	call   c00275b3 <__adddf3>
c000b2f8:	83 c4 10             	add    esp,0x10
c000b2fb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2fe:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b301:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b305:	4f                   	dec    edi
c000b306:	83 ec 0c             	sub    esp,0xc
c000b309:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b30c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b310:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b317:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b31b:	e8 07 d3 01 00       	call   c0028627 <__extendsfdf2>
c000b320:	83 c4 10             	add    esp,0x10
c000b323:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b327:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b32b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b32f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b333:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b337:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b33b:	e8 f0 c8 01 00       	call   c0027c30 <__muldf3>
c000b340:	83 c4 10             	add    esp,0x10
c000b343:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b347:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b34b:	52                   	push   edx
c000b34c:	50                   	push   eax
c000b34d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b350:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b353:	e8 5b c2 01 00       	call   c00275b3 <__adddf3>
c000b358:	83 c4 10             	add    esp,0x10
c000b35b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b35e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b361:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b365:	4f                   	dec    edi
c000b366:	83 ec 0c             	sub    esp,0xc
c000b369:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b36c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b370:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b377:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b37b:	e8 a7 d2 01 00       	call   c0028627 <__extendsfdf2>
c000b380:	83 c4 10             	add    esp,0x10
c000b383:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b387:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b38b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b38f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b393:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b397:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b39b:	e8 90 c8 01 00       	call   c0027c30 <__muldf3>
c000b3a0:	83 c4 10             	add    esp,0x10
c000b3a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3ab:	52                   	push   edx
c000b3ac:	50                   	push   eax
c000b3ad:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3b0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3b3:	e8 fb c1 01 00       	call   c00275b3 <__adddf3>
c000b3b8:	83 c4 10             	add    esp,0x10
c000b3bb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3be:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3c5:	4f                   	dec    edi
c000b3c6:	83 ec 0c             	sub    esp,0xc
c000b3c9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3d0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3d7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3db:	e8 47 d2 01 00       	call   c0028627 <__extendsfdf2>
c000b3e0:	83 c4 10             	add    esp,0x10
c000b3e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3fb:	e8 30 c8 01 00       	call   c0027c30 <__muldf3>
c000b400:	83 c4 10             	add    esp,0x10
c000b403:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b407:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b40b:	52                   	push   edx
c000b40c:	50                   	push   eax
c000b40d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b410:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b413:	e8 9b c1 01 00       	call   c00275b3 <__adddf3>
c000b418:	83 c4 10             	add    esp,0x10
c000b41b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b41e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b421:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b425:	4f                   	dec    edi
c000b426:	83 ec 0c             	sub    esp,0xc
c000b429:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b42c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b430:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b437:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b43b:	e8 e7 d1 01 00       	call   c0028627 <__extendsfdf2>
c000b440:	83 c4 10             	add    esp,0x10
c000b443:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b447:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b44b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b44f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b453:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b457:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b45b:	e8 d0 c7 01 00       	call   c0027c30 <__muldf3>
c000b460:	83 c4 10             	add    esp,0x10
c000b463:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b467:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b46b:	52                   	push   edx
c000b46c:	50                   	push   eax
c000b46d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b470:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b473:	e8 3b c1 01 00       	call   c00275b3 <__adddf3>
c000b478:	83 c4 10             	add    esp,0x10
c000b47b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b47e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b481:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b485:	4f                   	dec    edi
c000b486:	83 ec 0c             	sub    esp,0xc
c000b489:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b48c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b490:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b497:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b49b:	e8 87 d1 01 00       	call   c0028627 <__extendsfdf2>
c000b4a0:	83 c4 10             	add    esp,0x10
c000b4a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4bb:	e8 70 c7 01 00       	call   c0027c30 <__muldf3>
c000b4c0:	83 c4 10             	add    esp,0x10
c000b4c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4cb:	52                   	push   edx
c000b4cc:	50                   	push   eax
c000b4cd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4d0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4d3:	e8 db c0 01 00       	call   c00275b3 <__adddf3>
c000b4d8:	83 c4 10             	add    esp,0x10
c000b4db:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4de:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4e5:	4f                   	dec    edi
c000b4e6:	83 ec 0c             	sub    esp,0xc
c000b4e9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4f0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4f7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4fb:	e8 27 d1 01 00       	call   c0028627 <__extendsfdf2>
c000b500:	83 c4 10             	add    esp,0x10
c000b503:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b507:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b50b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b50f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b513:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b517:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b51b:	e8 10 c7 01 00       	call   c0027c30 <__muldf3>
c000b520:	83 c4 10             	add    esp,0x10
c000b523:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b527:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b52b:	52                   	push   edx
c000b52c:	50                   	push   eax
c000b52d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b530:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b533:	e8 7b c0 01 00       	call   c00275b3 <__adddf3>
c000b538:	83 c4 10             	add    esp,0x10
c000b53b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b53e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b541:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b545:	4f                   	dec    edi
c000b546:	83 ec 0c             	sub    esp,0xc
c000b549:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b54c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b550:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b557:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b55b:	e8 c7 d0 01 00       	call   c0028627 <__extendsfdf2>
c000b560:	83 c4 10             	add    esp,0x10
c000b563:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b567:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b56b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b56f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b573:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b577:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b57b:	e8 b0 c6 01 00       	call   c0027c30 <__muldf3>
c000b580:	83 c4 10             	add    esp,0x10
c000b583:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b587:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b58b:	52                   	push   edx
c000b58c:	50                   	push   eax
c000b58d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b590:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b593:	e8 1b c0 01 00       	call   c00275b3 <__adddf3>
c000b598:	83 c4 10             	add    esp,0x10
c000b59b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b59e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5a1:	85 ff                	test   edi,edi
c000b5a3:	0f 8f e1 fc ff ff    	jg     c000b28a <calc_output_multi+0x4fc>
c000b5a9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b5ad:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b5b1:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b5b5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b5ba:	0f 8f 3f fc ff ff    	jg     c000b1ff <calc_output_multi+0x471>
c000b5c0:	be 08 00 00 00       	mov    esi,0x8
c000b5c5:	89 d8                	mov    eax,ebx
c000b5c7:	99                   	cdq    
c000b5c8:	f7 fe                	idiv   esi
c000b5ca:	4a                   	dec    edx
c000b5cb:	83 fa 06             	cmp    edx,0x6
c000b5ce:	77 07                	ja     c000b5d7 <calc_output_multi+0x849>
c000b5d0:	ff 24 95 7c 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6184]
c000b5d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5db:	4b                   	dec    ebx
c000b5dc:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5e0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5e7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5eb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5ee:	e8 c0 bf 01 00       	call   c00275b3 <__adddf3>
c000b5f3:	83 c4 10             	add    esp,0x10
c000b5f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60e:	e8 1d c6 01 00       	call   c0027c30 <__muldf3>
c000b613:	5d                   	pop    ebp
c000b614:	59                   	pop    ecx
c000b615:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b619:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b61d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b625:	e8 d9 ce 01 00       	call   c0028503 <__truncdfsf2>
c000b62a:	83 c4 10             	add    esp,0x10
c000b62d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b631:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b638:	4b                   	dec    ebx
c000b639:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b63d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b640:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b644:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b648:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b64b:	e8 63 bf 01 00       	call   c00275b3 <__adddf3>
c000b650:	83 c4 10             	add    esp,0x10
c000b653:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b657:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b65f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b663:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b667:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b66b:	e8 c0 c5 01 00       	call   c0027c30 <__muldf3>
c000b670:	59                   	pop    ecx
c000b671:	5f                   	pop    edi
c000b672:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b676:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b67a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b67e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b682:	e8 7c ce 01 00       	call   c0028503 <__truncdfsf2>
c000b687:	83 c4 10             	add    esp,0x10
c000b68a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b68e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b691:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b695:	4b                   	dec    ebx
c000b696:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b69a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b69d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6a1:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6a5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6a8:	e8 06 bf 01 00       	call   c00275b3 <__adddf3>
c000b6ad:	83 c4 10             	add    esp,0x10
c000b6b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c8:	e8 63 c5 01 00       	call   c0027c30 <__muldf3>
c000b6cd:	5f                   	pop    edi
c000b6ce:	5d                   	pop    ebp
c000b6cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6df:	e8 1f ce 01 00       	call   c0028503 <__truncdfsf2>
c000b6e4:	83 c4 10             	add    esp,0x10
c000b6e7:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6eb:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6f2:	4b                   	dec    ebx
c000b6f3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6f7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6fe:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b702:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b705:	e8 a9 be 01 00       	call   c00275b3 <__adddf3>
c000b70a:	83 c4 10             	add    esp,0x10
c000b70d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b711:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b715:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b719:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b71d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b721:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b725:	e8 06 c5 01 00       	call   c0027c30 <__muldf3>
c000b72a:	5d                   	pop    ebp
c000b72b:	59                   	pop    ecx
c000b72c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b730:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b734:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b738:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b73c:	e8 c2 cd 01 00       	call   c0028503 <__truncdfsf2>
c000b741:	83 c4 10             	add    esp,0x10
c000b744:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b748:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b74b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b74f:	4b                   	dec    ebx
c000b750:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b754:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b757:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b75b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b75f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b762:	e8 4c be 01 00       	call   c00275b3 <__adddf3>
c000b767:	83 c4 10             	add    esp,0x10
c000b76a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b76e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b782:	e8 a9 c4 01 00       	call   c0027c30 <__muldf3>
c000b787:	59                   	pop    ecx
c000b788:	5f                   	pop    edi
c000b789:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b78d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b791:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b799:	e8 65 cd 01 00       	call   c0028503 <__truncdfsf2>
c000b79e:	83 c4 10             	add    esp,0x10
c000b7a1:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7a5:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7ac:	4b                   	dec    ebx
c000b7ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7b8:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7bc:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7bf:	e8 ef bd 01 00       	call   c00275b3 <__adddf3>
c000b7c4:	83 c4 10             	add    esp,0x10
c000b7c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7df:	e8 4c c4 01 00       	call   c0027c30 <__muldf3>
c000b7e4:	5f                   	pop    edi
c000b7e5:	5d                   	pop    ebp
c000b7e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f6:	e8 08 cd 01 00       	call   c0028503 <__truncdfsf2>
c000b7fb:	83 c4 10             	add    esp,0x10
c000b7fe:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b802:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b805:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b809:	4b                   	dec    ebx
c000b80a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b80e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b811:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b815:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b819:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b81c:	e8 92 bd 01 00       	call   c00275b3 <__adddf3>
c000b821:	83 c4 10             	add    esp,0x10
c000b824:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b828:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b82c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b834:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b838:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b83c:	e8 ef c3 01 00       	call   c0027c30 <__muldf3>
c000b841:	5d                   	pop    ebp
c000b842:	59                   	pop    ecx
c000b843:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b847:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b84b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b84f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b853:	e8 ab cc 01 00       	call   c0028503 <__truncdfsf2>
c000b858:	83 c4 10             	add    esp,0x10
c000b85b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b85f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b862:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b866:	4b                   	dec    ebx
c000b867:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b86b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b86e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b872:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b876:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b879:	e8 35 bd 01 00       	call   c00275b3 <__adddf3>
c000b87e:	83 c4 10             	add    esp,0x10
c000b881:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b885:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b889:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b88d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b891:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b895:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b899:	e8 92 c3 01 00       	call   c0027c30 <__muldf3>
c000b89e:	59                   	pop    ecx
c000b89f:	5f                   	pop    edi
c000b8a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8a4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b0:	e8 4e cc 01 00       	call   c0028503 <__truncdfsf2>
c000b8b5:	83 c4 10             	add    esp,0x10
c000b8b8:	85 db                	test   ebx,ebx
c000b8ba:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b8be:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8c1:	0f 8f fe fc ff ff    	jg     c000b5c5 <calc_output_multi+0x837>
c000b8c7:	83 c4 4c             	add    esp,0x4c
c000b8ca:	5b                   	pop    ebx
c000b8cb:	5e                   	pop    esi
c000b8cc:	5f                   	pop    edi
c000b8cd:	5d                   	pop    ebp
c000b8ce:	c3                   	ret    

c000b8cf <double_to_fp>:
c000b8cf:	83 ec 0c             	sub    esp,0xc
c000b8d2:	68 00 00 b0 40       	push   0x40b00000
c000b8d7:	6a 00                	push   0x0
c000b8d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e1:	e8 4a c3 01 00       	call   c0027c30 <__muldf3>
c000b8e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8ee:	83 c4 1c             	add    esp,0x1c
c000b8f1:	e9 ba cd 01 00       	jmp    c00286b0 <lrint>

c000b8f6 <prepare_data>:
c000b8f6:	55                   	push   ebp
c000b8f7:	57                   	push   edi
c000b8f8:	56                   	push   esi
c000b8f9:	53                   	push   ebx
c000b8fa:	83 ec 1c             	sub    esp,0x1c
c000b8fd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b901:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b905:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b909:	0f 89 57 01 00 00    	jns    c000ba66 <prepare_data+0x170>
c000b90f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b912:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b915:	85 d2                	test   edx,edx
c000b917:	75 0d                	jne    c000b926 <prepare_data+0x30>
c000b919:	8d 14 36             	lea    edx,[esi+esi*1]
c000b91c:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b91f:	29 d0                	sub    eax,edx
c000b921:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b924:	eb 44                	jmp    c000b96a <prepare_data+0x74>
c000b926:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b929:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b92c:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b92f:	39 c1                	cmp    ecx,eax
c000b931:	7d 04                	jge    c000b937 <prepare_data+0x41>
c000b933:	29 d0                	sub    eax,edx
c000b935:	eb 2d                	jmp    c000b964 <prepare_data+0x6e>
c000b937:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b93d:	29 d7                	sub    edi,edx
c000b93f:	01 f7                	add    edi,esi
c000b941:	51                   	push   ecx
c000b942:	29 f2                	sub    edx,esi
c000b944:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b94b:	8d 14 90             	lea    edx,[eax+edx*4]
c000b94e:	51                   	push   ecx
c000b94f:	52                   	push   edx
c000b950:	50                   	push   eax
c000b951:	e8 26 4d ff ff       	call   c000067c <memmove>
c000b956:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b959:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b95c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b95f:	29 f0                	sub    eax,esi
c000b961:	83 c4 10             	add    esp,0x10
c000b964:	29 f0                	sub    eax,esi
c000b966:	79 02                	jns    c000b96a <prepare_data+0x74>
c000b968:	31 c0                	xor    eax,eax
c000b96a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b96d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b970:	29 ef                	sub    edi,ebp
c000b972:	39 c7                	cmp    edi,eax
c000b974:	7e 02                	jle    c000b978 <prepare_data+0x82>
c000b976:	89 c7                	mov    edi,eax
c000b978:	89 f8                	mov    eax,edi
c000b97a:	99                   	cdq    
c000b97b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b97e:	b8 15 00 00 00       	mov    eax,0x15
c000b983:	29 d7                	sub    edi,edx
c000b985:	0f 88 dd 00 00 00    	js     c000ba68 <prepare_data+0x172>
c000b98b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b98e:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b991:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b994:	0f 8f ce 00 00 00    	jg     c000ba68 <prepare_data+0x172>
c000b99a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b9a0:	50                   	push   eax
c000b9a1:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9a8:	50                   	push   eax
c000b9a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b9ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9af:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b9b2:	50                   	push   eax
c000b9b3:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9b6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9ba:	50                   	push   eax
c000b9bb:	e8 84 4d ff ff       	call   c0000744 <memcpy>
c000b9c0:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9c3:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9c6:	01 fd                	add    ebp,edi
c000b9c8:	01 f9                	add    ecx,edi
c000b9ca:	83 c4 10             	add    esp,0x10
c000b9cd:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9d0:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9d3:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9da:	0f 85 86 00 00 00    	jne    c000ba66 <prepare_data+0x170>
c000b9e0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9e3:	89 e8                	mov    eax,ebp
c000b9e5:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9e8:	29 c8                	sub    eax,ecx
c000b9ea:	39 f8                	cmp    eax,edi
c000b9ec:	7d 78                	jge    c000ba66 <prepare_data+0x170>
c000b9ee:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9f2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9f6:	74 6e                	je     c000ba66 <prepare_data+0x170>
c000b9f8:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9fb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9ff:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ba02:	29 ef                	sub    edi,ebp
c000ba04:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ba08:	7c 29                	jl     c000ba33 <prepare_data+0x13d>
c000ba0a:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0d:	29 f1                	sub    ecx,esi
c000ba0f:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000ba16:	55                   	push   ebp
c000ba17:	50                   	push   eax
c000ba18:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000ba1b:	50                   	push   eax
c000ba1c:	52                   	push   edx
c000ba1d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba21:	e8 56 4c ff ff       	call   c000067c <memmove>
c000ba26:	83 c4 10             	add    esp,0x10
c000ba29:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba2c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba2f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba33:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba36:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba39:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba3c:	83 c6 05             	add    esi,0x5
c000ba3f:	78 07                	js     c000ba48 <prepare_data+0x152>
c000ba41:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba44:	39 cf                	cmp    edi,ecx
c000ba46:	7e 04                	jle    c000ba4c <prepare_data+0x156>
c000ba48:	89 ce                	mov    esi,ecx
c000ba4a:	29 c6                	sub    esi,eax
c000ba4c:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba4f:	51                   	push   ecx
c000ba50:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba57:	51                   	push   ecx
c000ba58:	6a 00                	push   0x0
c000ba5a:	50                   	push   eax
c000ba5b:	e8 18 4d ff ff       	call   c0000778 <memset>
c000ba60:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba63:	83 c4 10             	add    esp,0x10
c000ba66:	31 c0                	xor    eax,eax
c000ba68:	83 c4 1c             	add    esp,0x1c
c000ba6b:	5b                   	pop    ebx
c000ba6c:	5e                   	pop    esi
c000ba6d:	5f                   	pop    edi
c000ba6e:	5d                   	pop    ebp
c000ba6f:	c3                   	ret    

c000ba70 <sinc_multichan_vari_process>:
c000ba70:	55                   	push   ebp
c000ba71:	ba 05 00 00 00       	mov    edx,0x5
c000ba76:	57                   	push   edi
c000ba77:	56                   	push   esi
c000ba78:	53                   	push   ebx
c000ba79:	83 ec 4c             	sub    esp,0x4c
c000ba7c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba80:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba84:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba87:	85 db                	test   ebx,ebx
c000ba89:	0f 84 9b 06 00 00    	je     c000c12a <sinc_multichan_vari_process+0x6ba>
c000ba8f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba92:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba95:	0f af c5             	imul   eax,ebp
c000ba98:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba9b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba9e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000baa5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000baac:	0f af c5             	imul   eax,ebp
c000baaf:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bab2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bab5:	8b 06                	mov    eax,DWORD PTR [esi]
c000bab7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000babb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000babf:	68 00 00 70 3f       	push   0x3f700000
c000bac4:	6a 00                	push   0x0
c000bac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bace:	e8 2c ca 01 00       	call   c00284ff <__ltdf2>
c000bad3:	83 c4 10             	add    esp,0x10
c000bad6:	ba 16 00 00 00       	mov    edx,0x16
c000badb:	85 c0                	test   eax,eax
c000badd:	0f 88 47 06 00 00    	js     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bae3:	68 00 00 70 40       	push   0x40700000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf2:	e8 ea c9 01 00       	call   c00284e1 <__gtdf2>
c000baf7:	83 c4 10             	add    esp,0x10
c000bafa:	ba 16 00 00 00       	mov    edx,0x16
c000baff:	85 c0                	test   eax,eax
c000bb01:	0f 8f 23 06 00 00    	jg     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bb07:	83 ec 0c             	sub    esp,0xc
c000bb0a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bb0d:	e8 81 c7 01 00       	call   c0028293 <__floatsidf>
c000bb12:	83 c4 10             	add    esp,0x10
c000bb15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb1d:	68 00 00 00 40       	push   0x40000000
c000bb22:	6a 00                	push   0x0
c000bb24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb2c:	e8 82 ba 01 00       	call   c00275b3 <__adddf3>
c000bb31:	59                   	pop    ecx
c000bb32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb36:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb3a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb3d:	e8 51 c7 01 00       	call   c0028293 <__floatsidf>
c000bb42:	83 c4 10             	add    esp,0x10
c000bb45:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb49:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb4d:	52                   	push   edx
c000bb4e:	50                   	push   eax
c000bb4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb57:	e8 b8 c3 01 00       	call   c0027f14 <__divdf3>
c000bb5c:	83 c4 10             	add    esp,0x10
c000bb5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb63:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb67:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb6a:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb71:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb85:	e8 57 c9 01 00       	call   c00284e1 <__gtdf2>
c000bb8a:	83 c4 10             	add    esp,0x10
c000bb8d:	85 c0                	test   eax,eax
c000bb8f:	7e 2d                	jle    c000bbbe <sinc_multichan_vari_process+0x14e>
c000bb91:	68 00 00 f0 3f       	push   0x3ff00000
c000bb96:	6a 00                	push   0x0
c000bb98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba0:	e8 5a c9 01 00       	call   c00284ff <__ltdf2>
c000bba5:	83 c4 10             	add    esp,0x10
c000bba8:	85 c0                	test   eax,eax
c000bbaa:	79 4d                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bbb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbb8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bbbc:	eb 1b                	jmp    c000bbd9 <sinc_multichan_vari_process+0x169>
c000bbbe:	68 00 00 f0 3f       	push   0x3ff00000
c000bbc3:	6a 00                	push   0x0
c000bbc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbcd:	e8 2d c9 01 00       	call   c00284ff <__ltdf2>
c000bbd2:	83 c4 10             	add    esp,0x10
c000bbd5:	85 c0                	test   eax,eax
c000bbd7:	79 20                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbd9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbdd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbe1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe9:	e8 26 c3 01 00       	call   c0027f14 <__divdf3>
c000bbee:	83 c4 10             	add    esp,0x10
c000bbf1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbf5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbf9:	50                   	push   eax
c000bbfa:	50                   	push   eax
c000bbfb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc03:	e8 a8 ca 01 00       	call   c00286b0 <lrint>
c000bc08:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bc0b:	40                   	inc    eax
c000bc0c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc10:	0f af c5             	imul   eax,ebp
c000bc13:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bc17:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bc1a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1e:	58                   	pop    eax
c000bc1f:	5a                   	pop    edx
c000bc20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc24:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc28:	e8 83 ca 01 00       	call   c00286b0 <lrint>
c000bc2d:	83 ec 0c             	sub    esp,0xc
c000bc30:	50                   	push   eax
c000bc31:	e8 5d c6 01 00       	call   c0028293 <__floatsidf>
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc3d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc41:	52                   	push   edx
c000bc42:	50                   	push   eax
c000bc43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc47:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc4b:	e8 b4 bf 01 00       	call   c0027c04 <__subdf3>
c000bc50:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc54:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc58:	83 c4 20             	add    esp,0x20
c000bc5b:	6a 00                	push   0x0
c000bc5d:	6a 00                	push   0x0
c000bc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc67:	e8 93 c8 01 00       	call   c00284ff <__ltdf2>
c000bc6c:	83 c4 10             	add    esp,0x10
c000bc6f:	85 c0                	test   eax,eax
c000bc71:	79 1f                	jns    c000bc92 <sinc_multichan_vari_process+0x222>
c000bc73:	68 00 00 f0 3f       	push   0x3ff00000
c000bc78:	6a 00                	push   0x0
c000bc7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc82:	e8 2c b9 01 00       	call   c00275b3 <__adddf3>
c000bc87:	83 c4 10             	add    esp,0x10
c000bc8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc92:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc95:	83 ec 10             	sub    esp,0x10
c000bc98:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc9c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcaf:	e8 50 bf 01 00       	call   c0027c04 <__subdf3>
c000bcb4:	83 c4 18             	add    esp,0x18
c000bcb7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcbb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcbf:	52                   	push   edx
c000bcc0:	50                   	push   eax
c000bcc1:	e8 ea c9 01 00       	call   c00286b0 <lrint>
c000bcc6:	0f af e8             	imul   ebp,eax
c000bcc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bccd:	01 e8                	add    eax,ebp
c000bccf:	99                   	cdq    
c000bcd0:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcd3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bcd6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcde:	68 00 00 f0 3f       	push   0x3ff00000
c000bce3:	6a 00                	push   0x0
c000bce5:	e8 2a c2 01 00       	call   c0027f14 <__divdf3>
c000bcea:	83 c4 10             	add    esp,0x10
c000bced:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcf1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcf5:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcfa:	68 23 42 92 0c       	push   0xc924223
c000bcff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd07:	e8 a7 b8 01 00       	call   c00275b3 <__adddf3>
c000bd0c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bd10:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bd14:	83 c4 20             	add    esp,0x20
c000bd17:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd1f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd27:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd2a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd2d:	7d 50                	jge    c000bd7f <sinc_multichan_vari_process+0x30f>
c000bd2f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd32:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd35:	01 c8                	add    eax,ecx
c000bd37:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3a:	99                   	cdq    
c000bd3b:	f7 f9                	idiv   ecx
c000bd3d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd41:	7d 0c                	jge    c000bd4f <sinc_multichan_vari_process+0x2df>
c000bd43:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd46:	85 ed                	test   ebp,ebp
c000bd48:	79 6b                	jns    c000bdb5 <sinc_multichan_vari_process+0x345>
c000bd4a:	e9 e6 00 00 00       	jmp    c000be35 <sinc_multichan_vari_process+0x3c5>
c000bd4f:	50                   	push   eax
c000bd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd54:	57                   	push   edi
c000bd55:	53                   	push   ebx
c000bd56:	e8 9b fb ff ff       	call   c000b8f6 <prepare_data>
c000bd5b:	83 c4 10             	add    esp,0x10
c000bd5e:	89 c2                	mov    edx,eax
c000bd60:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd63:	85 c0                	test   eax,eax
c000bd65:	0f 85 bf 03 00 00    	jne    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bd6b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd6e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd71:	01 c8                	add    eax,ecx
c000bd73:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd76:	99                   	cdq    
c000bd77:	f7 f9                	idiv   ecx
c000bd79:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd7d:	7c c4                	jl     c000bd43 <sinc_multichan_vari_process+0x2d3>
c000bd7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd87:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd8a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd95:	89 06                	mov    DWORD PTR [esi],eax
c000bd97:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd9a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd9d:	99                   	cdq    
c000bd9e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bda1:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bda4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bda7:	99                   	cdq    
c000bda8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bdab:	31 d2                	xor    edx,edx
c000bdad:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bdb0:	e9 75 03 00 00       	jmp    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bdb5:	83 ec 0c             	sub    esp,0xc
c000bdb8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bdbb:	e8 d3 c4 01 00       	call   c0028293 <__floatsidf>
c000bdc0:	83 c4 10             	add    esp,0x10
c000bdc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bddb:	e8 d3 b7 01 00       	call   c00275b3 <__adddf3>
c000bde0:	83 c4 10             	add    esp,0x10
c000bde3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bde7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdf3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdfb:	e8 b3 b7 01 00       	call   c00275b3 <__adddf3>
c000be00:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000be03:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be07:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be0b:	e8 83 c4 01 00       	call   c0028293 <__floatsidf>
c000be10:	83 c4 10             	add    esp,0x10
c000be13:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be17:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be1b:	52                   	push   edx
c000be1c:	50                   	push   eax
c000be1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be25:	e8 d3 c6 01 00       	call   c00284fd <__gedf2>
c000be2a:	83 c4 10             	add    esp,0x10
c000be2d:	85 c0                	test   eax,eax
c000be2f:	0f 89 4a ff ff ff    	jns    c000bd7f <sinc_multichan_vari_process+0x30f>
c000be35:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be39:	0f 8e ed 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be3f:	83 ec 10             	sub    esp,0x10
c000be42:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be45:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be48:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be4b:	ff 36                	push   DWORD PTR [esi]
c000be4d:	e8 b2 bd 01 00       	call   c0027c04 <__subdf3>
c000be52:	83 c4 18             	add    esp,0x18
c000be55:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be59:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be5d:	52                   	push   edx
c000be5e:	50                   	push   eax
c000be5f:	e8 2c c8 01 00       	call   c0028690 <fabs>
c000be64:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be68:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be6c:	83 c4 10             	add    esp,0x10
c000be6f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be74:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be81:	e8 5b c6 01 00       	call   c00284e1 <__gtdf2>
c000be86:	83 c4 10             	add    esp,0x10
c000be89:	85 c0                	test   eax,eax
c000be8b:	0f 8e 9b 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be91:	8b 06                	mov    eax,DWORD PTR [esi]
c000be93:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be9a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be9e:	52                   	push   edx
c000be9f:	50                   	push   eax
c000bea0:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bea3:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bea6:	e8 59 bd 01 00       	call   c0027c04 <__subdf3>
c000beab:	59                   	pop    ecx
c000beac:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000beb0:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000beb4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000beb7:	e8 d7 c3 01 00       	call   c0028293 <__floatsidf>
c000bebc:	83 c4 10             	add    esp,0x10
c000bebf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bec3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bec7:	52                   	push   edx
c000bec8:	50                   	push   eax
c000bec9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000becd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed1:	e8 5a bd 01 00       	call   c0027c30 <__muldf3>
c000bed6:	5d                   	pop    ebp
c000bed7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bedb:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bedf:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bee2:	e8 ac c3 01 00       	call   c0028293 <__floatsidf>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bef2:	52                   	push   edx
c000bef3:	50                   	push   eax
c000bef4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000befc:	e8 13 c0 01 00       	call   c0027f14 <__divdf3>
c000bf01:	83 c4 10             	add    esp,0x10
c000bf04:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf08:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf1c:	e8 92 b6 01 00       	call   c00275b3 <__adddf3>
c000bf21:	83 c4 10             	add    esp,0x10
c000bf24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf2c:	83 ec 0c             	sub    esp,0xc
c000bf2f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf32:	e8 5c c3 01 00       	call   c0028293 <__floatsidf>
c000bf37:	83 c4 10             	add    esp,0x10
c000bf3a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf3e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf52:	e8 a8 c5 01 00       	call   c00284ff <__ltdf2>
c000bf57:	83 c4 10             	add    esp,0x10
c000bf5a:	85 c0                	test   eax,eax
c000bf5c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf60:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf64:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf68:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf6c:	78 10                	js     c000bf7e <sinc_multichan_vari_process+0x50e>
c000bf6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf7a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf86:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8e:	e8 9d bc 01 00       	call   c0027c30 <__muldf3>
c000bf93:	59                   	pop    ecx
c000bf94:	5d                   	pop    ebp
c000bf95:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf99:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa5:	e8 25 f9 ff ff       	call   c000b8cf <double_to_fp>
c000bfaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfae:	89 c5                	mov    ebp,eax
c000bfb0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfb4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfb8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfbc:	e8 6f bc 01 00       	call   c0027c30 <__muldf3>
c000bfc1:	83 c4 18             	add    esp,0x18
c000bfc4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfc8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bfcc:	52                   	push   edx
c000bfcd:	50                   	push   eax
c000bfce:	e8 fc f8 ff ff       	call   c000b8cf <double_to_fp>
c000bfd3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bfd6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfda:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfdd:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfe0:	50                   	push   eax
c000bfe1:	50                   	push   eax
c000bfe2:	50                   	push   eax
c000bfe3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfe6:	e8 a8 c2 01 00       	call   c0028293 <__floatsidf>
c000bfeb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfef:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bff3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bff7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bffb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c003:	e8 0c bf 01 00       	call   c0027f14 <__divdf3>
c000c008:	83 c4 1c             	add    esp,0x1c
c000c00b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c00f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c013:	52                   	push   edx
c000c014:	89 ea                	mov    edx,ebp
c000c016:	50                   	push   eax
c000c017:	89 d8                	mov    eax,ebx
c000c019:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c01c:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c020:	e8 69 ed ff ff       	call   c000ad8e <calc_output_multi>
c000c025:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c028:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c02b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c02f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c033:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c037:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c03b:	e8 d4 be 01 00       	call   c0027f14 <__divdf3>
c000c040:	83 c4 10             	add    esp,0x10
c000c043:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c047:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c04b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c04f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c053:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c057:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c05b:	e8 53 b5 01 00       	call   c00275b3 <__adddf3>
c000c060:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c064:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c068:	83 c4 28             	add    esp,0x28
c000c06b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c06f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c073:	e8 38 c6 01 00       	call   c00286b0 <lrint>
c000c078:	83 ec 0c             	sub    esp,0xc
c000c07b:	50                   	push   eax
c000c07c:	e8 12 c2 01 00       	call   c0028293 <__floatsidf>
c000c081:	83 c4 10             	add    esp,0x10
c000c084:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c088:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c08c:	52                   	push   edx
c000c08d:	50                   	push   eax
c000c08e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c092:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c096:	e8 69 bb 01 00       	call   c0027c04 <__subdf3>
c000c09b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c09f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0a3:	83 c4 20             	add    esp,0x20
c000c0a6:	6a 00                	push   0x0
c000c0a8:	6a 00                	push   0x0
c000c0aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b2:	e8 48 c4 01 00       	call   c00284ff <__ltdf2>
c000c0b7:	83 c4 10             	add    esp,0x10
c000c0ba:	85 c0                	test   eax,eax
c000c0bc:	79 20                	jns    c000c0de <sinc_multichan_vari_process+0x66e>
c000c0be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ce:	e8 e0 b4 01 00       	call   c00275b3 <__adddf3>
c000c0d3:	83 c4 10             	add    esp,0x10
c000c0d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0de:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0e1:	83 ec 10             	sub    esp,0x10
c000c0e4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0e8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0fb:	e8 04 bb 01 00       	call   c0027c04 <__subdf3>
c000c100:	83 c4 18             	add    esp,0x18
c000c103:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c107:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c10b:	52                   	push   edx
c000c10c:	50                   	push   eax
c000c10d:	e8 9e c5 01 00       	call   c00286b0 <lrint>
c000c112:	0f af e8             	imul   ebp,eax
c000c115:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c119:	83 c4 10             	add    esp,0x10
c000c11c:	01 e8                	add    eax,ebp
c000c11e:	99                   	cdq    
c000c11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c125:	e9 fd fb ff ff       	jmp    c000bd27 <sinc_multichan_vari_process+0x2b7>
c000c12a:	83 c4 4c             	add    esp,0x4c
c000c12d:	89 d0                	mov    eax,edx
c000c12f:	5b                   	pop    ebx
c000c130:	5e                   	pop    esi
c000c131:	5f                   	pop    edi
c000c132:	5d                   	pop    ebp
c000c133:	c3                   	ret    

c000c134 <sinc_hex_vari_process>:
c000c134:	55                   	push   ebp
c000c135:	ba 05 00 00 00       	mov    edx,0x5
c000c13a:	57                   	push   edi
c000c13b:	56                   	push   esi
c000c13c:	53                   	push   ebx
c000c13d:	83 ec 4c             	sub    esp,0x4c
c000c140:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c144:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c148:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c14b:	85 db                	test   ebx,ebx
c000c14d:	0f 84 9c 06 00 00    	je     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c153:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c156:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c159:	0f af c7             	imul   eax,edi
c000c15c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c15f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c162:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c169:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c170:	0f af c7             	imul   eax,edi
c000c173:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c176:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c179:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c17c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c180:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c184:	68 00 00 70 3f       	push   0x3f700000
c000c189:	6a 00                	push   0x0
c000c18b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c18f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c193:	e8 67 c3 01 00       	call   c00284ff <__ltdf2>
c000c198:	83 c4 10             	add    esp,0x10
c000c19b:	ba 16 00 00 00       	mov    edx,0x16
c000c1a0:	85 c0                	test   eax,eax
c000c1a2:	0f 88 47 06 00 00    	js     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1a8:	68 00 00 70 40       	push   0x40700000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b7:	e8 25 c3 01 00       	call   c00284e1 <__gtdf2>
c000c1bc:	83 c4 10             	add    esp,0x10
c000c1bf:	ba 16 00 00 00       	mov    edx,0x16
c000c1c4:	85 c0                	test   eax,eax
c000c1c6:	0f 8f 23 06 00 00    	jg     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1cc:	83 ec 0c             	sub    esp,0xc
c000c1cf:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1d2:	e8 bc c0 01 00       	call   c0028293 <__floatsidf>
c000c1d7:	83 c4 10             	add    esp,0x10
c000c1da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1e2:	68 00 00 00 40       	push   0x40000000
c000c1e7:	6a 00                	push   0x0
c000c1e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f1:	e8 bd b3 01 00       	call   c00275b3 <__adddf3>
c000c1f6:	59                   	pop    ecx
c000c1f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1fb:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1ff:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c202:	e8 8c c0 01 00       	call   c0028293 <__floatsidf>
c000c207:	83 c4 10             	add    esp,0x10
c000c20a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c20e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c212:	52                   	push   edx
c000c213:	50                   	push   eax
c000c214:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c218:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c21c:	e8 f3 bc 01 00       	call   c0027f14 <__divdf3>
c000c221:	83 c4 10             	add    esp,0x10
c000c224:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c228:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c22c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c22f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c232:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c236:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c23a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c23e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c242:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c246:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24a:	e8 92 c2 01 00       	call   c00284e1 <__gtdf2>
c000c24f:	83 c4 10             	add    esp,0x10
c000c252:	85 c0                	test   eax,eax
c000c254:	7e 2d                	jle    c000c283 <sinc_hex_vari_process+0x14f>
c000c256:	68 00 00 f0 3f       	push   0x3ff00000
c000c25b:	6a 00                	push   0x0
c000c25d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c265:	e8 95 c2 01 00       	call   c00284ff <__ltdf2>
c000c26a:	83 c4 10             	add    esp,0x10
c000c26d:	85 c0                	test   eax,eax
c000c26f:	79 4d                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c275:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c279:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c27d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c281:	eb 1b                	jmp    c000c29e <sinc_hex_vari_process+0x16a>
c000c283:	68 00 00 f0 3f       	push   0x3ff00000
c000c288:	6a 00                	push   0x0
c000c28a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c28e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c292:	e8 68 c2 01 00       	call   c00284ff <__ltdf2>
c000c297:	83 c4 10             	add    esp,0x10
c000c29a:	85 c0                	test   eax,eax
c000c29c:	79 20                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c29e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ae:	e8 61 bc 01 00       	call   c0027f14 <__divdf3>
c000c2b3:	83 c4 10             	add    esp,0x10
c000c2b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2ba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2be:	50                   	push   eax
c000c2bf:	50                   	push   eax
c000c2c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c8:	e8 e3 c3 01 00       	call   c00286b0 <lrint>
c000c2cd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2d0:	40                   	inc    eax
c000c2d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2d5:	0f af c7             	imul   eax,edi
c000c2d8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2e3:	58                   	pop    eax
c000c2e4:	5a                   	pop    edx
c000c2e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ed:	e8 be c3 01 00       	call   c00286b0 <lrint>
c000c2f2:	83 ec 0c             	sub    esp,0xc
c000c2f5:	50                   	push   eax
c000c2f6:	e8 98 bf 01 00       	call   c0028293 <__floatsidf>
c000c2fb:	83 c4 10             	add    esp,0x10
c000c2fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c302:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c306:	52                   	push   edx
c000c307:	50                   	push   eax
c000c308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c30c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c310:	e8 ef b8 01 00       	call   c0027c04 <__subdf3>
c000c315:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c319:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c31d:	83 c4 20             	add    esp,0x20
c000c320:	6a 00                	push   0x0
c000c322:	6a 00                	push   0x0
c000c324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c32c:	e8 ce c1 01 00       	call   c00284ff <__ltdf2>
c000c331:	83 c4 10             	add    esp,0x10
c000c334:	85 c0                	test   eax,eax
c000c336:	79 1f                	jns    c000c357 <sinc_hex_vari_process+0x223>
c000c338:	68 00 00 f0 3f       	push   0x3ff00000
c000c33d:	6a 00                	push   0x0
c000c33f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c343:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c347:	e8 67 b2 01 00       	call   c00275b3 <__adddf3>
c000c34c:	83 c4 10             	add    esp,0x10
c000c34f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c353:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c357:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c35a:	83 ec 10             	sub    esp,0x10
c000c35d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c361:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c368:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c36c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c370:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c374:	e8 8b b8 01 00       	call   c0027c04 <__subdf3>
c000c379:	83 c4 18             	add    esp,0x18
c000c37c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c380:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c384:	52                   	push   edx
c000c385:	50                   	push   eax
c000c386:	e8 25 c3 01 00       	call   c00286b0 <lrint>
c000c38b:	0f af f8             	imul   edi,eax
c000c38e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c392:	01 f8                	add    eax,edi
c000c394:	99                   	cdq    
c000c395:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c398:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c39b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c39f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3a3:	68 00 00 f0 3f       	push   0x3ff00000
c000c3a8:	6a 00                	push   0x0
c000c3aa:	e8 65 bb 01 00       	call   c0027f14 <__divdf3>
c000c3af:	83 c4 10             	add    esp,0x10
c000c3b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ba:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3bf:	68 23 42 92 0c       	push   0xc924223
c000c3c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3cc:	e8 e2 b1 01 00       	call   c00275b3 <__adddf3>
c000c3d1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3d5:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3d9:	83 c4 20             	add    esp,0x20
c000c3dc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3e4:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3ef:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3f2:	7d 50                	jge    c000c444 <sinc_hex_vari_process+0x310>
c000c3f4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fa:	01 c8                	add    eax,ecx
c000c3fc:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3ff:	99                   	cdq    
c000c400:	f7 f9                	idiv   ecx
c000c402:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c406:	7d 0c                	jge    c000c414 <sinc_hex_vari_process+0x2e0>
c000c408:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c40b:	85 ff                	test   edi,edi
c000c40d:	79 6c                	jns    c000c47b <sinc_hex_vari_process+0x347>
c000c40f:	e9 e7 00 00 00       	jmp    c000c4fb <sinc_hex_vari_process+0x3c7>
c000c414:	50                   	push   eax
c000c415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c419:	56                   	push   esi
c000c41a:	53                   	push   ebx
c000c41b:	e8 d6 f4 ff ff       	call   c000b8f6 <prepare_data>
c000c420:	83 c4 10             	add    esp,0x10
c000c423:	89 c2                	mov    edx,eax
c000c425:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c428:	85 c0                	test   eax,eax
c000c42a:	0f 85 bf 03 00 00    	jne    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c430:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c433:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c436:	01 c8                	add    eax,ecx
c000c438:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c43b:	99                   	cdq    
c000c43c:	f7 f9                	idiv   ecx
c000c43e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c442:	7c c4                	jl     c000c408 <sinc_hex_vari_process+0x2d4>
c000c444:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c448:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c44c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c44f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c456:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c45a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c45d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c460:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c463:	99                   	cdq    
c000c464:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c467:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c46a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c46d:	99                   	cdq    
c000c46e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c471:	31 d2                	xor    edx,edx
c000c473:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c476:	e9 74 03 00 00       	jmp    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c47b:	83 ec 0c             	sub    esp,0xc
c000c47e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c481:	e8 0d be 01 00       	call   c0028293 <__floatsidf>
c000c486:	83 c4 10             	add    esp,0x10
c000c489:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c48d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c491:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c495:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c499:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c49d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a1:	e8 0d b1 01 00       	call   c00275b3 <__adddf3>
c000c4a6:	83 c4 10             	add    esp,0x10
c000c4a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c1:	e8 ed b0 01 00       	call   c00275b3 <__adddf3>
c000c4c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4cd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4d1:	e8 bd bd 01 00       	call   c0028293 <__floatsidf>
c000c4d6:	83 c4 10             	add    esp,0x10
c000c4d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4e1:	52                   	push   edx
c000c4e2:	50                   	push   eax
c000c4e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4eb:	e8 0d c0 01 00       	call   c00284fd <__gedf2>
c000c4f0:	83 c4 10             	add    esp,0x10
c000c4f3:	85 c0                	test   eax,eax
c000c4f5:	0f 89 49 ff ff ff    	jns    c000c444 <sinc_hex_vari_process+0x310>
c000c4fb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4ff:	0f 8e ef 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c505:	83 ec 10             	sub    esp,0x10
c000c508:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c50b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c50e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c511:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c514:	e8 eb b6 01 00       	call   c0027c04 <__subdf3>
c000c519:	83 c4 18             	add    esp,0x18
c000c51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c520:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c524:	52                   	push   edx
c000c525:	50                   	push   eax
c000c526:	e8 65 c1 01 00       	call   c0028690 <fabs>
c000c52b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c52f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c533:	83 c4 10             	add    esp,0x10
c000c536:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c53b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c540:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c544:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c548:	e8 94 bf 01 00       	call   c00284e1 <__gtdf2>
c000c54d:	83 c4 10             	add    esp,0x10
c000c550:	85 c0                	test   eax,eax
c000c552:	0f 8e 9c 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c558:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c55b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c55e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c562:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c566:	52                   	push   edx
c000c567:	50                   	push   eax
c000c568:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c56b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c56e:	e8 91 b6 01 00       	call   c0027c04 <__subdf3>
c000c573:	59                   	pop    ecx
c000c574:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c578:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c57c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c57f:	e8 0f bd 01 00       	call   c0028293 <__floatsidf>
c000c584:	83 c4 10             	add    esp,0x10
c000c587:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c58b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c58f:	52                   	push   edx
c000c590:	50                   	push   eax
c000c591:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c595:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c599:	e8 92 b6 01 00       	call   c0027c30 <__muldf3>
c000c59e:	5f                   	pop    edi
c000c59f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c5a3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c5a7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c5aa:	e8 e4 bc 01 00       	call   c0028293 <__floatsidf>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5ba:	52                   	push   edx
c000c5bb:	50                   	push   eax
c000c5bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c4:	e8 4b b9 01 00       	call   c0027f14 <__divdf3>
c000c5c9:	83 c4 10             	add    esp,0x10
c000c5cc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5d0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e4:	e8 ca af 01 00       	call   c00275b3 <__adddf3>
c000c5e9:	83 c4 10             	add    esp,0x10
c000c5ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5f4:	83 ec 0c             	sub    esp,0xc
c000c5f7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5fa:	e8 94 bc 01 00       	call   c0028293 <__floatsidf>
c000c5ff:	83 c4 10             	add    esp,0x10
c000c602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c60a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c60e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61a:	e8 e0 be 01 00       	call   c00284ff <__ltdf2>
c000c61f:	83 c4 10             	add    esp,0x10
c000c622:	85 c0                	test   eax,eax
c000c624:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c628:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c62c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c630:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c634:	78 10                	js     c000c646 <sinc_hex_vari_process+0x512>
c000c636:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c63a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c63e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c642:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c652:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c656:	e8 d5 b5 01 00       	call   c0027c30 <__muldf3>
c000c65b:	59                   	pop    ecx
c000c65c:	5f                   	pop    edi
c000c65d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c661:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c665:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c669:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c66d:	e8 5d f2 ff ff       	call   c000b8cf <double_to_fp>
c000c672:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c676:	89 c7                	mov    edi,eax
c000c678:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c67c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c680:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c684:	e8 a7 b5 01 00       	call   c0027c30 <__muldf3>
c000c689:	83 c4 18             	add    esp,0x18
c000c68c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c690:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c694:	52                   	push   edx
c000c695:	50                   	push   eax
c000c696:	e8 34 f2 ff ff       	call   c000b8cf <double_to_fp>
c000c69b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c69e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c6a2:	83 c4 0c             	add    esp,0xc
c000c6a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c6a8:	8d 04 90             	lea    eax,[eax+edx*4]
c000c6ab:	50                   	push   eax
c000c6ac:	50                   	push   eax
c000c6ad:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6b0:	e8 de bb 01 00       	call   c0028293 <__floatsidf>
c000c6b5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c6b9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c6bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6cd:	e8 42 b8 01 00       	call   c0027f14 <__divdf3>
c000c6d2:	83 c4 18             	add    esp,0x18
c000c6d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6dd:	52                   	push   edx
c000c6de:	89 fa                	mov    edx,edi
c000c6e0:	50                   	push   eax
c000c6e1:	89 d8                	mov    eax,ebx
c000c6e3:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6e7:	e8 50 de ff ff       	call   c000a53c <calc_output_hex>
c000c6ec:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c700:	e8 0f b8 01 00       	call   c0027f14 <__divdf3>
c000c705:	83 c4 10             	add    esp,0x10
c000c708:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c70c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c718:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c720:	e8 8e ae 01 00       	call   c00275b3 <__adddf3>
c000c725:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c729:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c72d:	83 c4 18             	add    esp,0x18
c000c730:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c734:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c738:	e8 73 bf 01 00       	call   c00286b0 <lrint>
c000c73d:	83 ec 0c             	sub    esp,0xc
c000c740:	50                   	push   eax
c000c741:	e8 4d bb 01 00       	call   c0028293 <__floatsidf>
c000c746:	83 c4 10             	add    esp,0x10
c000c749:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c74d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c751:	52                   	push   edx
c000c752:	50                   	push   eax
c000c753:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c757:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c75b:	e8 a4 b4 01 00       	call   c0027c04 <__subdf3>
c000c760:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c764:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c768:	83 c4 20             	add    esp,0x20
c000c76b:	6a 00                	push   0x0
c000c76d:	6a 00                	push   0x0
c000c76f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c773:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c777:	e8 83 bd 01 00       	call   c00284ff <__ltdf2>
c000c77c:	83 c4 10             	add    esp,0x10
c000c77f:	85 c0                	test   eax,eax
c000c781:	79 20                	jns    c000c7a3 <sinc_hex_vari_process+0x66f>
c000c783:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c787:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c78b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c78f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c793:	e8 1b ae 01 00       	call   c00275b3 <__adddf3>
c000c798:	83 c4 10             	add    esp,0x10
c000c79b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c79f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7a3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7a6:	83 ec 10             	sub    esp,0x10
c000c7a9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c7ad:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7c0:	e8 3f b4 01 00       	call   c0027c04 <__subdf3>
c000c7c5:	83 c4 18             	add    esp,0x18
c000c7c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7d0:	52                   	push   edx
c000c7d1:	50                   	push   eax
c000c7d2:	e8 d9 be 01 00       	call   c00286b0 <lrint>
c000c7d7:	0f af f8             	imul   edi,eax
c000c7da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7de:	83 c4 10             	add    esp,0x10
c000c7e1:	01 f8                	add    eax,edi
c000c7e3:	99                   	cdq    
c000c7e4:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7e7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7ea:	e9 fd fb ff ff       	jmp    c000c3ec <sinc_hex_vari_process+0x2b8>
c000c7ef:	83 c4 4c             	add    esp,0x4c
c000c7f2:	89 d0                	mov    eax,edx
c000c7f4:	5b                   	pop    ebx
c000c7f5:	5e                   	pop    esi
c000c7f6:	5f                   	pop    edi
c000c7f7:	5d                   	pop    ebp
c000c7f8:	c3                   	ret    

c000c7f9 <sinc_quad_vari_process>:
c000c7f9:	55                   	push   ebp
c000c7fa:	ba 05 00 00 00       	mov    edx,0x5
c000c7ff:	57                   	push   edi
c000c800:	56                   	push   esi
c000c801:	53                   	push   ebx
c000c802:	83 ec 4c             	sub    esp,0x4c
c000c805:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c809:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c80d:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c810:	85 db                	test   ebx,ebx
c000c812:	0f 84 9c 06 00 00    	je     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c818:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c81b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c81e:	0f af c7             	imul   eax,edi
c000c821:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c824:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c827:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c82e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c835:	0f af c7             	imul   eax,edi
c000c838:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c83b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c83e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c841:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c845:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c849:	68 00 00 70 3f       	push   0x3f700000
c000c84e:	6a 00                	push   0x0
c000c850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c858:	e8 a2 bc 01 00       	call   c00284ff <__ltdf2>
c000c85d:	83 c4 10             	add    esp,0x10
c000c860:	ba 16 00 00 00       	mov    edx,0x16
c000c865:	85 c0                	test   eax,eax
c000c867:	0f 88 47 06 00 00    	js     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c86d:	68 00 00 70 40       	push   0x40700000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c87c:	e8 60 bc 01 00       	call   c00284e1 <__gtdf2>
c000c881:	83 c4 10             	add    esp,0x10
c000c884:	ba 16 00 00 00       	mov    edx,0x16
c000c889:	85 c0                	test   eax,eax
c000c88b:	0f 8f 23 06 00 00    	jg     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c891:	83 ec 0c             	sub    esp,0xc
c000c894:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c897:	e8 f7 b9 01 00       	call   c0028293 <__floatsidf>
c000c89c:	83 c4 10             	add    esp,0x10
c000c89f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8a7:	68 00 00 00 40       	push   0x40000000
c000c8ac:	6a 00                	push   0x0
c000c8ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b6:	e8 f8 ac 01 00       	call   c00275b3 <__adddf3>
c000c8bb:	59                   	pop    ecx
c000c8bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8c0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8c4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8c7:	e8 c7 b9 01 00       	call   c0028293 <__floatsidf>
c000c8cc:	83 c4 10             	add    esp,0x10
c000c8cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8d7:	52                   	push   edx
c000c8d8:	50                   	push   eax
c000c8d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e1:	e8 2e b6 01 00       	call   c0027f14 <__divdf3>
c000c8e6:	83 c4 10             	add    esp,0x10
c000c8e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8f1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8f4:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c903:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c907:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90f:	e8 cd bb 01 00       	call   c00284e1 <__gtdf2>
c000c914:	83 c4 10             	add    esp,0x10
c000c917:	85 c0                	test   eax,eax
c000c919:	7e 2d                	jle    c000c948 <sinc_quad_vari_process+0x14f>
c000c91b:	68 00 00 f0 3f       	push   0x3ff00000
c000c920:	6a 00                	push   0x0
c000c922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c92a:	e8 d0 bb 01 00       	call   c00284ff <__ltdf2>
c000c92f:	83 c4 10             	add    esp,0x10
c000c932:	85 c0                	test   eax,eax
c000c934:	79 4d                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c93a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c93e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c942:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c946:	eb 1b                	jmp    c000c963 <sinc_quad_vari_process+0x16a>
c000c948:	68 00 00 f0 3f       	push   0x3ff00000
c000c94d:	6a 00                	push   0x0
c000c94f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c953:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c957:	e8 a3 bb 01 00       	call   c00284ff <__ltdf2>
c000c95c:	83 c4 10             	add    esp,0x10
c000c95f:	85 c0                	test   eax,eax
c000c961:	79 20                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c963:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c967:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c96b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c96f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c973:	e8 9c b5 01 00       	call   c0027f14 <__divdf3>
c000c978:	83 c4 10             	add    esp,0x10
c000c97b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c97f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c983:	50                   	push   eax
c000c984:	50                   	push   eax
c000c985:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c989:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c98d:	e8 1e bd 01 00       	call   c00286b0 <lrint>
c000c992:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c995:	40                   	inc    eax
c000c996:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c99a:	0f af c7             	imul   eax,edi
c000c99d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c9a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a8:	58                   	pop    eax
c000c9a9:	5a                   	pop    edx
c000c9aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9b2:	e8 f9 bc 01 00       	call   c00286b0 <lrint>
c000c9b7:	83 ec 0c             	sub    esp,0xc
c000c9ba:	50                   	push   eax
c000c9bb:	e8 d3 b8 01 00       	call   c0028293 <__floatsidf>
c000c9c0:	83 c4 10             	add    esp,0x10
c000c9c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9cb:	52                   	push   edx
c000c9cc:	50                   	push   eax
c000c9cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d5:	e8 2a b2 01 00       	call   c0027c04 <__subdf3>
c000c9da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9e2:	83 c4 20             	add    esp,0x20
c000c9e5:	6a 00                	push   0x0
c000c9e7:	6a 00                	push   0x0
c000c9e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f1:	e8 09 bb 01 00       	call   c00284ff <__ltdf2>
c000c9f6:	83 c4 10             	add    esp,0x10
c000c9f9:	85 c0                	test   eax,eax
c000c9fb:	79 1f                	jns    c000ca1c <sinc_quad_vari_process+0x223>
c000c9fd:	68 00 00 f0 3f       	push   0x3ff00000
c000ca02:	6a 00                	push   0x0
c000ca04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca0c:	e8 a2 ab 01 00       	call   c00275b3 <__adddf3>
c000ca11:	83 c4 10             	add    esp,0x10
c000ca14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ca1c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca1f:	83 ec 10             	sub    esp,0x10
c000ca22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca26:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca31:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca35:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca39:	e8 c6 b1 01 00       	call   c0027c04 <__subdf3>
c000ca3e:	83 c4 18             	add    esp,0x18
c000ca41:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca45:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca49:	52                   	push   edx
c000ca4a:	50                   	push   eax
c000ca4b:	e8 60 bc 01 00       	call   c00286b0 <lrint>
c000ca50:	0f af f8             	imul   edi,eax
c000ca53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca57:	01 f8                	add    eax,edi
c000ca59:	99                   	cdq    
c000ca5a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca5d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca68:	68 00 00 f0 3f       	push   0x3ff00000
c000ca6d:	6a 00                	push   0x0
c000ca6f:	e8 a0 b4 01 00       	call   c0027f14 <__divdf3>
c000ca74:	83 c4 10             	add    esp,0x10
c000ca77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca7f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca84:	68 23 42 92 0c       	push   0xc924223
c000ca89:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca8d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca91:	e8 1d ab 01 00       	call   c00275b3 <__adddf3>
c000ca96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca9e:	83 c4 20             	add    esp,0x20
c000caa1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000caa9:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cab1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cab4:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cab7:	7d 50                	jge    c000cb09 <sinc_quad_vari_process+0x310>
c000cab9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cabf:	01 c8                	add    eax,ecx
c000cac1:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac4:	99                   	cdq    
c000cac5:	f7 f9                	idiv   ecx
c000cac7:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacb:	7d 0c                	jge    c000cad9 <sinc_quad_vari_process+0x2e0>
c000cacd:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cad0:	85 ff                	test   edi,edi
c000cad2:	79 6c                	jns    c000cb40 <sinc_quad_vari_process+0x347>
c000cad4:	e9 e7 00 00 00       	jmp    c000cbc0 <sinc_quad_vari_process+0x3c7>
c000cad9:	50                   	push   eax
c000cada:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cade:	56                   	push   esi
c000cadf:	53                   	push   ebx
c000cae0:	e8 11 ee ff ff       	call   c000b8f6 <prepare_data>
c000cae5:	83 c4 10             	add    esp,0x10
c000cae8:	89 c2                	mov    edx,eax
c000caea:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000caed:	85 c0                	test   eax,eax
c000caef:	0f 85 bf 03 00 00    	jne    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000caf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000caf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cafb:	01 c8                	add    eax,ecx
c000cafd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cb00:	99                   	cdq    
c000cb01:	f7 f9                	idiv   ecx
c000cb03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cb07:	7c c4                	jl     c000cacd <sinc_quad_vari_process+0x2d4>
c000cb09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb11:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cb14:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cb17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb1f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb22:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb25:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb28:	99                   	cdq    
c000cb29:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb2c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb2f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb32:	99                   	cdq    
c000cb33:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb36:	31 d2                	xor    edx,edx
c000cb38:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb3b:	e9 74 03 00 00       	jmp    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000cb40:	83 ec 0c             	sub    esp,0xc
c000cb43:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb46:	e8 48 b7 01 00       	call   c0028293 <__floatsidf>
c000cb4b:	83 c4 10             	add    esp,0x10
c000cb4e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb52:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb66:	e8 48 aa 01 00       	call   c00275b3 <__adddf3>
c000cb6b:	83 c4 10             	add    esp,0x10
c000cb6e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb72:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb86:	e8 28 aa 01 00       	call   c00275b3 <__adddf3>
c000cb8b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb92:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb96:	e8 f8 b6 01 00       	call   c0028293 <__floatsidf>
c000cb9b:	83 c4 10             	add    esp,0x10
c000cb9e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cba2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cba6:	52                   	push   edx
c000cba7:	50                   	push   eax
c000cba8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb0:	e8 48 b9 01 00       	call   c00284fd <__gedf2>
c000cbb5:	83 c4 10             	add    esp,0x10
c000cbb8:	85 c0                	test   eax,eax
c000cbba:	0f 89 49 ff ff ff    	jns    c000cb09 <sinc_quad_vari_process+0x310>
c000cbc0:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cbc4:	0f 8e ef 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cbca:	83 ec 10             	sub    esp,0x10
c000cbcd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbd0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbd3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbd6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbd9:	e8 26 b0 01 00       	call   c0027c04 <__subdf3>
c000cbde:	83 c4 18             	add    esp,0x18
c000cbe1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbe5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbe9:	52                   	push   edx
c000cbea:	50                   	push   eax
c000cbeb:	e8 a0 ba 01 00       	call   c0028690 <fabs>
c000cbf0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbf4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbf8:	83 c4 10             	add    esp,0x10
c000cbfb:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cc00:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cc05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc0d:	e8 cf b8 01 00       	call   c00284e1 <__gtdf2>
c000cc12:	83 c4 10             	add    esp,0x10
c000cc15:	85 c0                	test   eax,eax
c000cc17:	0f 8e 9c 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cc1d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc20:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc23:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc27:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc2b:	52                   	push   edx
c000cc2c:	50                   	push   eax
c000cc2d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc30:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc33:	e8 cc af 01 00       	call   c0027c04 <__subdf3>
c000cc38:	59                   	pop    ecx
c000cc39:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc3d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc41:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc44:	e8 4a b6 01 00       	call   c0028293 <__floatsidf>
c000cc49:	83 c4 10             	add    esp,0x10
c000cc4c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc50:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc54:	52                   	push   edx
c000cc55:	50                   	push   eax
c000cc56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5e:	e8 cd af 01 00       	call   c0027c30 <__muldf3>
c000cc63:	5f                   	pop    edi
c000cc64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc68:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc6c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc6f:	e8 1f b6 01 00       	call   c0028293 <__floatsidf>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc7f:	52                   	push   edx
c000cc80:	50                   	push   eax
c000cc81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc89:	e8 86 b2 01 00       	call   c0027f14 <__divdf3>
c000cc8e:	83 c4 10             	add    esp,0x10
c000cc91:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc95:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cca1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca9:	e8 05 a9 01 00       	call   c00275b3 <__adddf3>
c000ccae:	83 c4 10             	add    esp,0x10
c000ccb1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccb5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccb9:	83 ec 0c             	sub    esp,0xc
c000ccbc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ccbf:	e8 cf b5 01 00       	call   c0028293 <__floatsidf>
c000ccc4:	83 c4 10             	add    esp,0x10
c000ccc7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cccb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cccf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdf:	e8 1b b8 01 00       	call   c00284ff <__ltdf2>
c000cce4:	83 c4 10             	add    esp,0x10
c000cce7:	85 c0                	test   eax,eax
c000cce9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cced:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccf1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccf5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccf9:	78 10                	js     c000cd0b <sinc_quad_vari_process+0x512>
c000ccfb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd03:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd17:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd1b:	e8 10 af 01 00       	call   c0027c30 <__muldf3>
c000cd20:	59                   	pop    ecx
c000cd21:	5f                   	pop    edi
c000cd22:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd26:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd2e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd32:	e8 98 eb ff ff       	call   c000b8cf <double_to_fp>
c000cd37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd3b:	89 c7                	mov    edi,eax
c000cd3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd45:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd49:	e8 e2 ae 01 00       	call   c0027c30 <__muldf3>
c000cd4e:	83 c4 18             	add    esp,0x18
c000cd51:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd55:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd59:	52                   	push   edx
c000cd5a:	50                   	push   eax
c000cd5b:	e8 6f eb ff ff       	call   c000b8cf <double_to_fp>
c000cd60:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd63:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd67:	83 c4 0c             	add    esp,0xc
c000cd6a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd6d:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd70:	50                   	push   eax
c000cd71:	50                   	push   eax
c000cd72:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd75:	e8 19 b5 01 00       	call   c0028293 <__floatsidf>
c000cd7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd92:	e8 7d b1 01 00       	call   c0027f14 <__divdf3>
c000cd97:	83 c4 18             	add    esp,0x18
c000cd9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cda2:	52                   	push   edx
c000cda3:	89 fa                	mov    edx,edi
c000cda5:	50                   	push   eax
c000cda6:	89 d8                	mov    eax,ebx
c000cda8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cdac:	e8 a5 d1 ff ff       	call   c0009f56 <calc_output_quad>
c000cdb1:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cdb5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdb9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdbd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc5:	e8 4a b1 01 00       	call   c0027f14 <__divdf3>
c000cdca:	83 c4 10             	add    esp,0x10
c000cdcd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdd1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cddd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde5:	e8 c9 a7 01 00       	call   c00275b3 <__adddf3>
c000cdea:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdee:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdf2:	83 c4 18             	add    esp,0x18
c000cdf5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdf9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdfd:	e8 ae b8 01 00       	call   c00286b0 <lrint>
c000ce02:	83 ec 0c             	sub    esp,0xc
c000ce05:	50                   	push   eax
c000ce06:	e8 88 b4 01 00       	call   c0028293 <__floatsidf>
c000ce0b:	83 c4 10             	add    esp,0x10
c000ce0e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce12:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce16:	52                   	push   edx
c000ce17:	50                   	push   eax
c000ce18:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce1c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce20:	e8 df ad 01 00       	call   c0027c04 <__subdf3>
c000ce25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce2d:	83 c4 20             	add    esp,0x20
c000ce30:	6a 00                	push   0x0
c000ce32:	6a 00                	push   0x0
c000ce34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce3c:	e8 be b6 01 00       	call   c00284ff <__ltdf2>
c000ce41:	83 c4 10             	add    esp,0x10
c000ce44:	85 c0                	test   eax,eax
c000ce46:	79 20                	jns    c000ce68 <sinc_quad_vari_process+0x66f>
c000ce48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce58:	e8 56 a7 01 00       	call   c00275b3 <__adddf3>
c000ce5d:	83 c4 10             	add    esp,0x10
c000ce60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce68:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce6b:	83 ec 10             	sub    esp,0x10
c000ce6e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce72:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce7d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce81:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce85:	e8 7a ad 01 00       	call   c0027c04 <__subdf3>
c000ce8a:	83 c4 18             	add    esp,0x18
c000ce8d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce91:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce95:	52                   	push   edx
c000ce96:	50                   	push   eax
c000ce97:	e8 14 b8 01 00       	call   c00286b0 <lrint>
c000ce9c:	0f af f8             	imul   edi,eax
c000ce9f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cea3:	83 c4 10             	add    esp,0x10
c000cea6:	01 f8                	add    eax,edi
c000cea8:	99                   	cdq    
c000cea9:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ceac:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ceaf:	e9 fd fb ff ff       	jmp    c000cab1 <sinc_quad_vari_process+0x2b8>
c000ceb4:	83 c4 4c             	add    esp,0x4c
c000ceb7:	89 d0                	mov    eax,edx
c000ceb9:	5b                   	pop    ebx
c000ceba:	5e                   	pop    esi
c000cebb:	5f                   	pop    edi
c000cebc:	5d                   	pop    ebp
c000cebd:	c3                   	ret    

c000cebe <sinc_stereo_vari_process>:
c000cebe:	55                   	push   ebp
c000cebf:	ba 05 00 00 00       	mov    edx,0x5
c000cec4:	57                   	push   edi
c000cec5:	56                   	push   esi
c000cec6:	53                   	push   ebx
c000cec7:	83 ec 4c             	sub    esp,0x4c
c000ceca:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cece:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ced2:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ced5:	85 db                	test   ebx,ebx
c000ced7:	0f 84 9c 06 00 00    	je     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cedd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cee0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cee3:	0f af c7             	imul   eax,edi
c000cee6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cee9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceec:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cef3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cefa:	0f af c7             	imul   eax,edi
c000cefd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cf00:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cf03:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf06:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cf0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf0e:	68 00 00 70 3f       	push   0x3f700000
c000cf13:	6a 00                	push   0x0
c000cf15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf1d:	e8 dd b5 01 00       	call   c00284ff <__ltdf2>
c000cf22:	83 c4 10             	add    esp,0x10
c000cf25:	ba 16 00 00 00       	mov    edx,0x16
c000cf2a:	85 c0                	test   eax,eax
c000cf2c:	0f 88 47 06 00 00    	js     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf32:	68 00 00 70 40       	push   0x40700000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf41:	e8 9b b5 01 00       	call   c00284e1 <__gtdf2>
c000cf46:	83 c4 10             	add    esp,0x10
c000cf49:	ba 16 00 00 00       	mov    edx,0x16
c000cf4e:	85 c0                	test   eax,eax
c000cf50:	0f 8f 23 06 00 00    	jg     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf56:	83 ec 0c             	sub    esp,0xc
c000cf59:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf5c:	e8 32 b3 01 00       	call   c0028293 <__floatsidf>
c000cf61:	83 c4 10             	add    esp,0x10
c000cf64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf6c:	68 00 00 00 40       	push   0x40000000
c000cf71:	6a 00                	push   0x0
c000cf73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf7b:	e8 33 a6 01 00       	call   c00275b3 <__adddf3>
c000cf80:	59                   	pop    ecx
c000cf81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf85:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf89:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf8c:	e8 02 b3 01 00       	call   c0028293 <__floatsidf>
c000cf91:	83 c4 10             	add    esp,0x10
c000cf94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf98:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf9c:	52                   	push   edx
c000cf9d:	50                   	push   eax
c000cf9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa6:	e8 69 af 01 00       	call   c0027f14 <__divdf3>
c000cfab:	83 c4 10             	add    esp,0x10
c000cfae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfb6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cfb9:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cfbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd4:	e8 08 b5 01 00       	call   c00284e1 <__gtdf2>
c000cfd9:	83 c4 10             	add    esp,0x10
c000cfdc:	85 c0                	test   eax,eax
c000cfde:	7e 2d                	jle    c000d00d <sinc_stereo_vari_process+0x14f>
c000cfe0:	68 00 00 f0 3f       	push   0x3ff00000
c000cfe5:	6a 00                	push   0x0
c000cfe7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfef:	e8 0b b5 01 00       	call   c00284ff <__ltdf2>
c000cff4:	83 c4 10             	add    esp,0x10
c000cff7:	85 c0                	test   eax,eax
c000cff9:	79 4d                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000cffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d003:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d007:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d00b:	eb 1b                	jmp    c000d028 <sinc_stereo_vari_process+0x16a>
c000d00d:	68 00 00 f0 3f       	push   0x3ff00000
c000d012:	6a 00                	push   0x0
c000d014:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d018:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d01c:	e8 de b4 01 00       	call   c00284ff <__ltdf2>
c000d021:	83 c4 10             	add    esp,0x10
c000d024:	85 c0                	test   eax,eax
c000d026:	79 20                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000d028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d02c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d030:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d034:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d038:	e8 d7 ae 01 00       	call   c0027f14 <__divdf3>
c000d03d:	83 c4 10             	add    esp,0x10
c000d040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d044:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d048:	50                   	push   eax
c000d049:	50                   	push   eax
c000d04a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d04e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d052:	e8 59 b6 01 00       	call   c00286b0 <lrint>
c000d057:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d05a:	40                   	inc    eax
c000d05b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d05f:	0f af c7             	imul   eax,edi
c000d062:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d069:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d06d:	58                   	pop    eax
c000d06e:	5a                   	pop    edx
c000d06f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d073:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d077:	e8 34 b6 01 00       	call   c00286b0 <lrint>
c000d07c:	83 ec 0c             	sub    esp,0xc
c000d07f:	50                   	push   eax
c000d080:	e8 0e b2 01 00       	call   c0028293 <__floatsidf>
c000d085:	83 c4 10             	add    esp,0x10
c000d088:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d08c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d090:	52                   	push   edx
c000d091:	50                   	push   eax
c000d092:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d096:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d09a:	e8 65 ab 01 00       	call   c0027c04 <__subdf3>
c000d09f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0a7:	83 c4 20             	add    esp,0x20
c000d0aa:	6a 00                	push   0x0
c000d0ac:	6a 00                	push   0x0
c000d0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b6:	e8 44 b4 01 00       	call   c00284ff <__ltdf2>
c000d0bb:	83 c4 10             	add    esp,0x10
c000d0be:	85 c0                	test   eax,eax
c000d0c0:	79 1f                	jns    c000d0e1 <sinc_stereo_vari_process+0x223>
c000d0c2:	68 00 00 f0 3f       	push   0x3ff00000
c000d0c7:	6a 00                	push   0x0
c000d0c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d1:	e8 dd a4 01 00       	call   c00275b3 <__adddf3>
c000d0d6:	83 c4 10             	add    esp,0x10
c000d0d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0e1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0e4:	83 ec 10             	sub    esp,0x10
c000d0e7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fe:	e8 01 ab 01 00       	call   c0027c04 <__subdf3>
c000d103:	83 c4 18             	add    esp,0x18
c000d106:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d10a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d10e:	52                   	push   edx
c000d10f:	50                   	push   eax
c000d110:	e8 9b b5 01 00       	call   c00286b0 <lrint>
c000d115:	0f af f8             	imul   edi,eax
c000d118:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d11c:	01 f8                	add    eax,edi
c000d11e:	99                   	cdq    
c000d11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d125:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d129:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d12d:	68 00 00 f0 3f       	push   0x3ff00000
c000d132:	6a 00                	push   0x0
c000d134:	e8 db ad 01 00       	call   c0027f14 <__divdf3>
c000d139:	83 c4 10             	add    esp,0x10
c000d13c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d140:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d144:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d149:	68 23 42 92 0c       	push   0xc924223
c000d14e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d152:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d156:	e8 58 a4 01 00       	call   c00275b3 <__adddf3>
c000d15b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d15f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d163:	83 c4 20             	add    esp,0x20
c000d166:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d16e:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d176:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d179:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d17c:	7d 50                	jge    c000d1ce <sinc_stereo_vari_process+0x310>
c000d17e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d181:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d184:	01 c8                	add    eax,ecx
c000d186:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d189:	99                   	cdq    
c000d18a:	f7 f9                	idiv   ecx
c000d18c:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d190:	7d 0c                	jge    c000d19e <sinc_stereo_vari_process+0x2e0>
c000d192:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d195:	85 ff                	test   edi,edi
c000d197:	79 6c                	jns    c000d205 <sinc_stereo_vari_process+0x347>
c000d199:	e9 e7 00 00 00       	jmp    c000d285 <sinc_stereo_vari_process+0x3c7>
c000d19e:	50                   	push   eax
c000d19f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1a3:	56                   	push   esi
c000d1a4:	53                   	push   ebx
c000d1a5:	e8 4c e7 ff ff       	call   c000b8f6 <prepare_data>
c000d1aa:	83 c4 10             	add    esp,0x10
c000d1ad:	89 c2                	mov    edx,eax
c000d1af:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d1b2:	85 c0                	test   eax,eax
c000d1b4:	0f 85 bf 03 00 00    	jne    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d1ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d1bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1c0:	01 c8                	add    eax,ecx
c000d1c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1c5:	99                   	cdq    
c000d1c6:	f7 f9                	idiv   ecx
c000d1c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1cc:	7c c4                	jl     c000d192 <sinc_stereo_vari_process+0x2d4>
c000d1ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1d6:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1d9:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1e4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1e7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1ea:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1ed:	99                   	cdq    
c000d1ee:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1f1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1f4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1f7:	99                   	cdq    
c000d1f8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1fb:	31 d2                	xor    edx,edx
c000d1fd:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d200:	e9 74 03 00 00       	jmp    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d205:	83 ec 0c             	sub    esp,0xc
c000d208:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d20b:	e8 83 b0 01 00       	call   c0028293 <__floatsidf>
c000d210:	83 c4 10             	add    esp,0x10
c000d213:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d217:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d21b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d21f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d223:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d227:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d22b:	e8 83 a3 01 00       	call   c00275b3 <__adddf3>
c000d230:	83 c4 10             	add    esp,0x10
c000d233:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d237:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d23b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d23f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d243:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d247:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d24b:	e8 63 a3 01 00       	call   c00275b3 <__adddf3>
c000d250:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d253:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d257:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d25b:	e8 33 b0 01 00       	call   c0028293 <__floatsidf>
c000d260:	83 c4 10             	add    esp,0x10
c000d263:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d267:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d26b:	52                   	push   edx
c000d26c:	50                   	push   eax
c000d26d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d271:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d275:	e8 83 b2 01 00       	call   c00284fd <__gedf2>
c000d27a:	83 c4 10             	add    esp,0x10
c000d27d:	85 c0                	test   eax,eax
c000d27f:	0f 89 49 ff ff ff    	jns    c000d1ce <sinc_stereo_vari_process+0x310>
c000d285:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d289:	0f 8e ef 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d28f:	83 ec 10             	sub    esp,0x10
c000d292:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d295:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d298:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d29b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d29e:	e8 61 a9 01 00       	call   c0027c04 <__subdf3>
c000d2a3:	83 c4 18             	add    esp,0x18
c000d2a6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2aa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2ae:	52                   	push   edx
c000d2af:	50                   	push   eax
c000d2b0:	e8 db b3 01 00       	call   c0028690 <fabs>
c000d2b5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2b9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d2bd:	83 c4 10             	add    esp,0x10
c000d2c0:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2c5:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2d2:	e8 0a b2 01 00       	call   c00284e1 <__gtdf2>
c000d2d7:	83 c4 10             	add    esp,0x10
c000d2da:	85 c0                	test   eax,eax
c000d2dc:	0f 8e 9c 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d2e2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2e5:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2f0:	52                   	push   edx
c000d2f1:	50                   	push   eax
c000d2f2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2f5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2f8:	e8 07 a9 01 00       	call   c0027c04 <__subdf3>
c000d2fd:	59                   	pop    ecx
c000d2fe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d302:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d306:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d309:	e8 85 af 01 00       	call   c0028293 <__floatsidf>
c000d30e:	83 c4 10             	add    esp,0x10
c000d311:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d315:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d319:	52                   	push   edx
c000d31a:	50                   	push   eax
c000d31b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d31f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d323:	e8 08 a9 01 00       	call   c0027c30 <__muldf3>
c000d328:	5f                   	pop    edi
c000d329:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d32d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d331:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d334:	e8 5a af 01 00       	call   c0028293 <__floatsidf>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d340:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d344:	52                   	push   edx
c000d345:	50                   	push   eax
c000d346:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34e:	e8 c1 ab 01 00       	call   c0027f14 <__divdf3>
c000d353:	83 c4 10             	add    esp,0x10
c000d356:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d35a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d35e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d362:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d366:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36e:	e8 40 a2 01 00       	call   c00275b3 <__adddf3>
c000d373:	83 c4 10             	add    esp,0x10
c000d376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d37e:	83 ec 0c             	sub    esp,0xc
c000d381:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d384:	e8 0a af 01 00       	call   c0028293 <__floatsidf>
c000d389:	83 c4 10             	add    esp,0x10
c000d38c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d390:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d398:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d39c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a4:	e8 56 b1 01 00       	call   c00284ff <__ltdf2>
c000d3a9:	83 c4 10             	add    esp,0x10
c000d3ac:	85 c0                	test   eax,eax
c000d3ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d3b2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3b6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d3ba:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d3be:	78 10                	js     c000d3d0 <sinc_stereo_vari_process+0x512>
c000d3c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e0:	e8 4b a8 01 00       	call   c0027c30 <__muldf3>
c000d3e5:	59                   	pop    ecx
c000d3e6:	5f                   	pop    edi
c000d3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f7:	e8 d3 e4 ff ff       	call   c000b8cf <double_to_fp>
c000d3fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d400:	89 c7                	mov    edi,eax
c000d402:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d406:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40e:	e8 1d a8 01 00       	call   c0027c30 <__muldf3>
c000d413:	83 c4 18             	add    esp,0x18
c000d416:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d41a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d41e:	52                   	push   edx
c000d41f:	50                   	push   eax
c000d420:	e8 aa e4 ff ff       	call   c000b8cf <double_to_fp>
c000d425:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d428:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d42c:	83 c4 0c             	add    esp,0xc
c000d42f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d432:	8d 04 90             	lea    eax,[eax+edx*4]
c000d435:	50                   	push   eax
c000d436:	50                   	push   eax
c000d437:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d43a:	e8 54 ae 01 00       	call   c0028293 <__floatsidf>
c000d43f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d443:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d447:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d453:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d457:	e8 b8 aa 01 00       	call   c0027f14 <__divdf3>
c000d45c:	83 c4 18             	add    esp,0x18
c000d45f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d463:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d467:	52                   	push   edx
c000d468:	89 fa                	mov    edx,edi
c000d46a:	50                   	push   eax
c000d46b:	89 d8                	mov    eax,ebx
c000d46d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d471:	e8 02 c7 ff ff       	call   c0009b78 <calc_output_stereo>
c000d476:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d47a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d47e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d482:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d486:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d48a:	e8 85 aa 01 00       	call   c0027f14 <__divdf3>
c000d48f:	83 c4 10             	add    esp,0x10
c000d492:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d496:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d49a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d49e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4aa:	e8 04 a1 01 00       	call   c00275b3 <__adddf3>
c000d4af:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d4b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d4b7:	83 c4 18             	add    esp,0x18
c000d4ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4c2:	e8 e9 b1 01 00       	call   c00286b0 <lrint>
c000d4c7:	83 ec 0c             	sub    esp,0xc
c000d4ca:	50                   	push   eax
c000d4cb:	e8 c3 ad 01 00       	call   c0028293 <__floatsidf>
c000d4d0:	83 c4 10             	add    esp,0x10
c000d4d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4db:	52                   	push   edx
c000d4dc:	50                   	push   eax
c000d4dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e5:	e8 1a a7 01 00       	call   c0027c04 <__subdf3>
c000d4ea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4f2:	83 c4 20             	add    esp,0x20
c000d4f5:	6a 00                	push   0x0
c000d4f7:	6a 00                	push   0x0
c000d4f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d501:	e8 f9 af 01 00       	call   c00284ff <__ltdf2>
c000d506:	83 c4 10             	add    esp,0x10
c000d509:	85 c0                	test   eax,eax
c000d50b:	79 20                	jns    c000d52d <sinc_stereo_vari_process+0x66f>
c000d50d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d511:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d515:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d519:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d51d:	e8 91 a0 01 00       	call   c00275b3 <__adddf3>
c000d522:	83 c4 10             	add    esp,0x10
c000d525:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d529:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d52d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d530:	83 ec 10             	sub    esp,0x10
c000d533:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d537:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d53a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d53e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d542:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d546:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d54a:	e8 b5 a6 01 00       	call   c0027c04 <__subdf3>
c000d54f:	83 c4 18             	add    esp,0x18
c000d552:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d556:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d55a:	52                   	push   edx
c000d55b:	50                   	push   eax
c000d55c:	e8 4f b1 01 00       	call   c00286b0 <lrint>
c000d561:	0f af f8             	imul   edi,eax
c000d564:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d568:	83 c4 10             	add    esp,0x10
c000d56b:	01 f8                	add    eax,edi
c000d56d:	99                   	cdq    
c000d56e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d571:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d574:	e9 fd fb ff ff       	jmp    c000d176 <sinc_stereo_vari_process+0x2b8>
c000d579:	83 c4 4c             	add    esp,0x4c
c000d57c:	89 d0                	mov    eax,edx
c000d57e:	5b                   	pop    ebx
c000d57f:	5e                   	pop    esi
c000d580:	5f                   	pop    edi
c000d581:	5d                   	pop    ebp
c000d582:	c3                   	ret    

c000d583 <sinc_mono_vari_process>:
c000d583:	55                   	push   ebp
c000d584:	ba 05 00 00 00       	mov    edx,0x5
c000d589:	57                   	push   edi
c000d58a:	56                   	push   esi
c000d58b:	53                   	push   ebx
c000d58c:	83 ec 4c             	sub    esp,0x4c
c000d58f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d593:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d597:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d59a:	85 db                	test   ebx,ebx
c000d59c:	0f 84 c1 06 00 00    	je     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5a2:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d5a5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d5a8:	0f af c7             	imul   eax,edi
c000d5ab:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d5ae:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d5b1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d5b8:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5bf:	0f af c7             	imul   eax,edi
c000d5c2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5c5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5c9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5cc:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5d6:	68 00 00 70 3f       	push   0x3f700000
c000d5db:	6a 00                	push   0x0
c000d5dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e5:	e8 15 af 01 00       	call   c00284ff <__ltdf2>
c000d5ea:	83 c4 10             	add    esp,0x10
c000d5ed:	ba 16 00 00 00       	mov    edx,0x16
c000d5f2:	85 c0                	test   eax,eax
c000d5f4:	0f 88 69 06 00 00    	js     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5fa:	68 00 00 70 40       	push   0x40700000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d605:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d609:	e8 d3 ae 01 00       	call   c00284e1 <__gtdf2>
c000d60e:	83 c4 10             	add    esp,0x10
c000d611:	ba 16 00 00 00       	mov    edx,0x16
c000d616:	85 c0                	test   eax,eax
c000d618:	0f 8f 45 06 00 00    	jg     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d61e:	83 ec 0c             	sub    esp,0xc
c000d621:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d624:	e8 6a ac 01 00       	call   c0028293 <__floatsidf>
c000d629:	83 c4 10             	add    esp,0x10
c000d62c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d630:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d634:	68 00 00 00 40       	push   0x40000000
c000d639:	6a 00                	push   0x0
c000d63b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d63f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d643:	e8 6b 9f 01 00       	call   c00275b3 <__adddf3>
c000d648:	59                   	pop    ecx
c000d649:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d64d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d651:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d654:	e8 3a ac 01 00       	call   c0028293 <__floatsidf>
c000d659:	83 c4 10             	add    esp,0x10
c000d65c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d660:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d664:	52                   	push   edx
c000d665:	50                   	push   eax
c000d666:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66e:	e8 a1 a8 01 00       	call   c0027f14 <__divdf3>
c000d673:	83 c4 10             	add    esp,0x10
c000d676:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d67a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d67e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d681:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d684:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d688:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d68c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d69c:	e8 40 ae 01 00       	call   c00284e1 <__gtdf2>
c000d6a1:	83 c4 10             	add    esp,0x10
c000d6a4:	85 c0                	test   eax,eax
c000d6a6:	7e 2d                	jle    c000d6d5 <sinc_mono_vari_process+0x152>
c000d6a8:	68 00 00 f0 3f       	push   0x3ff00000
c000d6ad:	6a 00                	push   0x0
c000d6af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b7:	e8 43 ae 01 00       	call   c00284ff <__ltdf2>
c000d6bc:	83 c4 10             	add    esp,0x10
c000d6bf:	85 c0                	test   eax,eax
c000d6c1:	79 4d                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6d3:	eb 1b                	jmp    c000d6f0 <sinc_mono_vari_process+0x16d>
c000d6d5:	68 00 00 f0 3f       	push   0x3ff00000
c000d6da:	6a 00                	push   0x0
c000d6dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e4:	e8 16 ae 01 00       	call   c00284ff <__ltdf2>
c000d6e9:	83 c4 10             	add    esp,0x10
c000d6ec:	85 c0                	test   eax,eax
c000d6ee:	79 20                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d700:	e8 0f a8 01 00       	call   c0027f14 <__divdf3>
c000d705:	83 c4 10             	add    esp,0x10
c000d708:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d70c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d710:	50                   	push   eax
c000d711:	50                   	push   eax
c000d712:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d716:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d71a:	e8 91 af 01 00       	call   c00286b0 <lrint>
c000d71f:	40                   	inc    eax
c000d720:	0f af c7             	imul   eax,edi
c000d723:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d727:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d72b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d72e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d731:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d735:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d739:	58                   	pop    eax
c000d73a:	5a                   	pop    edx
c000d73b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d73f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d743:	e8 68 af 01 00       	call   c00286b0 <lrint>
c000d748:	83 ec 0c             	sub    esp,0xc
c000d74b:	50                   	push   eax
c000d74c:	e8 42 ab 01 00       	call   c0028293 <__floatsidf>
c000d751:	83 c4 10             	add    esp,0x10
c000d754:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d758:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d75c:	52                   	push   edx
c000d75d:	50                   	push   eax
c000d75e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d762:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d766:	e8 99 a4 01 00       	call   c0027c04 <__subdf3>
c000d76b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d76f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d773:	83 c4 20             	add    esp,0x20
c000d776:	6a 00                	push   0x0
c000d778:	6a 00                	push   0x0
c000d77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d782:	e8 78 ad 01 00       	call   c00284ff <__ltdf2>
c000d787:	83 c4 10             	add    esp,0x10
c000d78a:	85 c0                	test   eax,eax
c000d78c:	79 1f                	jns    c000d7ad <sinc_mono_vari_process+0x22a>
c000d78e:	68 00 00 f0 3f       	push   0x3ff00000
c000d793:	6a 00                	push   0x0
c000d795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d79d:	e8 11 9e 01 00       	call   c00275b3 <__adddf3>
c000d7a2:	83 c4 10             	add    esp,0x10
c000d7a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d7ad:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d7b0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7b3:	83 ec 10             	sub    esp,0x10
c000d7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c6:	e8 39 a4 01 00       	call   c0027c04 <__subdf3>
c000d7cb:	83 c4 18             	add    esp,0x18
c000d7ce:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7d2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7d6:	52                   	push   edx
c000d7d7:	50                   	push   eax
c000d7d8:	e8 d3 ae 01 00       	call   c00286b0 <lrint>
c000d7dd:	0f af f8             	imul   edi,eax
c000d7e0:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7e3:	31 ff                	xor    edi,edi
c000d7e5:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7ea:	99                   	cdq    
c000d7eb:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7ee:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f9:	55                   	push   ebp
c000d7fa:	57                   	push   edi
c000d7fb:	e8 14 a7 01 00       	call   c0027f14 <__divdf3>
c000d800:	83 c4 10             	add    esp,0x10
c000d803:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d807:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d80b:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d810:	68 23 42 92 0c       	push   0xc924223
c000d815:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d819:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d81d:	e8 91 9d 01 00       	call   c00275b3 <__adddf3>
c000d822:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d826:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d82a:	83 c4 20             	add    esp,0x20
c000d82d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d831:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d835:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d838:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d83b:	7d 54                	jge    c000d891 <sinc_mono_vari_process+0x30e>
c000d83d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d840:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d843:	01 c8                	add    eax,ecx
c000d845:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d848:	99                   	cdq    
c000d849:	f7 f9                	idiv   ecx
c000d84b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d84f:	7d 0c                	jge    c000d85d <sinc_mono_vari_process+0x2da>
c000d851:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d854:	85 ff                	test   edi,edi
c000d856:	79 73                	jns    c000d8cb <sinc_mono_vari_process+0x348>
c000d858:	e9 ee 00 00 00       	jmp    c000d94b <sinc_mono_vari_process+0x3c8>
c000d85d:	50                   	push   eax
c000d85e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d862:	56                   	push   esi
c000d863:	53                   	push   ebx
c000d864:	e8 8d e0 ff ff       	call   c000b8f6 <prepare_data>
c000d869:	89 c2                	mov    edx,eax
c000d86b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d86f:	83 c4 10             	add    esp,0x10
c000d872:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d875:	85 d2                	test   edx,edx
c000d877:	0f 85 e6 03 00 00    	jne    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d87d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d880:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d883:	01 c8                	add    eax,ecx
c000d885:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d888:	99                   	cdq    
c000d889:	f7 f9                	idiv   ecx
c000d88b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d88f:	7c c0                	jl     c000d851 <sinc_mono_vari_process+0x2ce>
c000d891:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d895:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d899:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d89d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d8a0:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d8a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8ab:	89 01                	mov    DWORD PTR [ecx],eax
c000d8ad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d8b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d8b3:	99                   	cdq    
c000d8b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d8ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d8bd:	99                   	cdq    
c000d8be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8c1:	31 d2                	xor    edx,edx
c000d8c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8c6:	e9 98 03 00 00       	jmp    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d8cb:	83 ec 0c             	sub    esp,0xc
c000d8ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8d1:	e8 bd a9 01 00       	call   c0028293 <__floatsidf>
c000d8d6:	83 c4 10             	add    esp,0x10
c000d8d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f1:	e8 bd 9c 01 00       	call   c00275b3 <__adddf3>
c000d8f6:	83 c4 10             	add    esp,0x10
c000d8f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d901:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d905:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d909:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d90d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d911:	e8 9d 9c 01 00       	call   c00275b3 <__adddf3>
c000d916:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d919:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d91d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d921:	e8 6d a9 01 00       	call   c0028293 <__floatsidf>
c000d926:	83 c4 10             	add    esp,0x10
c000d929:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d92d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d931:	52                   	push   edx
c000d932:	50                   	push   eax
c000d933:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d937:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d93b:	e8 a1 ab 01 00       	call   c00284e1 <__gtdf2>
c000d940:	83 c4 10             	add    esp,0x10
c000d943:	85 c0                	test   eax,eax
c000d945:	0f 8f 46 ff ff ff    	jg     c000d891 <sinc_mono_vari_process+0x30e>
c000d94b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d94f:	0f 8e f5 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d955:	83 ec 10             	sub    esp,0x10
c000d958:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d95b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d95e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d962:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d965:	ff 30                	push   DWORD PTR [eax]
c000d967:	e8 98 a2 01 00       	call   c0027c04 <__subdf3>
c000d96c:	83 c4 18             	add    esp,0x18
c000d96f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d977:	52                   	push   edx
c000d978:	50                   	push   eax
c000d979:	e8 12 ad 01 00       	call   c0028690 <fabs>
c000d97e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d982:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d986:	83 c4 10             	add    esp,0x10
c000d989:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d98e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d99b:	e8 41 ab 01 00       	call   c00284e1 <__gtdf2>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	85 c0                	test   eax,eax
c000d9a5:	0f 8e 9f 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d9ab:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d9af:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d9b2:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d9b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9bc:	52                   	push   edx
c000d9bd:	50                   	push   eax
c000d9be:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9c1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9c4:	e8 3b a2 01 00       	call   c0027c04 <__subdf3>
c000d9c9:	5f                   	pop    edi
c000d9ca:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9ce:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9d2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9d5:	e8 b9 a8 01 00       	call   c0028293 <__floatsidf>
c000d9da:	83 c4 10             	add    esp,0x10
c000d9dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9e5:	52                   	push   edx
c000d9e6:	50                   	push   eax
c000d9e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9ef:	e8 3c a2 01 00       	call   c0027c30 <__muldf3>
c000d9f4:	5d                   	pop    ebp
c000d9f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9fd:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000da00:	e8 8e a8 01 00       	call   c0028293 <__floatsidf>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da0c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da10:	52                   	push   edx
c000da11:	50                   	push   eax
c000da12:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da16:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da1a:	e8 f5 a4 01 00       	call   c0027f14 <__divdf3>
c000da1f:	83 c4 10             	add    esp,0x10
c000da22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da26:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da32:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da3a:	e8 74 9b 01 00       	call   c00275b3 <__adddf3>
c000da3f:	83 c4 10             	add    esp,0x10
c000da42:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da46:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da4a:	83 ec 0c             	sub    esp,0xc
c000da4d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da50:	e8 3e a8 01 00       	call   c0028293 <__floatsidf>
c000da55:	83 c4 10             	add    esp,0x10
c000da58:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da5c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da70:	e8 8a aa 01 00       	call   c00284ff <__ltdf2>
c000da75:	83 c4 10             	add    esp,0x10
c000da78:	85 c0                	test   eax,eax
c000da7a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da7e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da82:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da86:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da8a:	78 10                	js     c000da9c <sinc_mono_vari_process+0x519>
c000da8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da90:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da94:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da98:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daa8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daac:	e8 7f a1 01 00       	call   c0027c30 <__muldf3>
c000dab1:	59                   	pop    ecx
c000dab2:	5f                   	pop    edi
c000dab3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dab7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dabb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dabf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dac3:	e8 07 de ff ff       	call   c000b8cf <double_to_fp>
c000dac8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dacc:	89 c7                	mov    edi,eax
c000dace:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dad2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dad6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dada:	e8 51 a1 01 00       	call   c0027c30 <__muldf3>
c000dadf:	83 c4 18             	add    esp,0x18
c000dae2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dae6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000daea:	52                   	push   edx
c000daeb:	50                   	push   eax
c000daec:	e8 de dd ff ff       	call   c000b8cf <double_to_fp>
c000daf1:	83 ec 0c             	sub    esp,0xc
c000daf4:	89 c5                	mov    ebp,eax
c000daf6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000daf9:	e8 95 a7 01 00       	call   c0028293 <__floatsidf>
c000dafe:	83 c4 10             	add    esp,0x10
c000db01:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db05:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db09:	52                   	push   edx
c000db0a:	50                   	push   eax
c000db0b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db0f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db13:	e8 fc a3 01 00       	call   c0027f14 <__divdf3>
c000db18:	83 c4 10             	add    esp,0x10
c000db1b:	89 e9                	mov    ecx,ebp
c000db1d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db21:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db25:	89 d8                	mov    eax,ebx
c000db27:	89 fa                	mov    edx,edi
c000db29:	e8 ee bd ff ff       	call   c000991c <calc_output_single>
c000db2e:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db31:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db38:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db3c:	52                   	push   edx
c000db3d:	50                   	push   eax
c000db3e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db42:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db46:	e8 e5 a0 01 00       	call   c0027c30 <__muldf3>
c000db4b:	59                   	pop    ecx
c000db4c:	59                   	pop    ecx
c000db4d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db51:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db55:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	e8 a1 a9 01 00       	call   c0028503 <__truncdfsf2>
c000db62:	83 c4 10             	add    esp,0x10
c000db65:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db68:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db6f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db77:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db7b:	e8 94 a3 01 00       	call   c0027f14 <__divdf3>
c000db80:	83 c4 10             	add    esp,0x10
c000db83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db87:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db97:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9b:	e8 13 9a 01 00       	call   c00275b3 <__adddf3>
c000dba0:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dba4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dba8:	83 c4 18             	add    esp,0x18
c000dbab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbb3:	e8 f8 aa 01 00       	call   c00286b0 <lrint>
c000dbb8:	83 ec 0c             	sub    esp,0xc
c000dbbb:	50                   	push   eax
c000dbbc:	e8 d2 a6 01 00       	call   c0028293 <__floatsidf>
c000dbc1:	83 c4 10             	add    esp,0x10
c000dbc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbc8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbcc:	52                   	push   edx
c000dbcd:	50                   	push   eax
c000dbce:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd6:	e8 29 a0 01 00       	call   c0027c04 <__subdf3>
c000dbdb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbdf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbe3:	83 c4 20             	add    esp,0x20
c000dbe6:	6a 00                	push   0x0
c000dbe8:	6a 00                	push   0x0
c000dbea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbf2:	e8 08 a9 01 00       	call   c00284ff <__ltdf2>
c000dbf7:	83 c4 10             	add    esp,0x10
c000dbfa:	85 c0                	test   eax,eax
c000dbfc:	79 20                	jns    c000dc1e <sinc_mono_vari_process+0x69b>
c000dbfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0e:	e8 a0 99 01 00       	call   c00275b3 <__adddf3>
c000dc13:	83 c4 10             	add    esp,0x10
c000dc16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc1a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc1e:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc21:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc24:	83 ec 10             	sub    esp,0x10
c000dc27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc33:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc37:	e8 c8 9f 01 00       	call   c0027c04 <__subdf3>
c000dc3c:	83 c4 18             	add    esp,0x18
c000dc3f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc43:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc47:	52                   	push   edx
c000dc48:	50                   	push   eax
c000dc49:	e8 62 aa 01 00       	call   c00286b0 <lrint>
c000dc4e:	83 c4 10             	add    esp,0x10
c000dc51:	0f af f8             	imul   edi,eax
c000dc54:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc57:	99                   	cdq    
c000dc58:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc5b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc5e:	e9 d2 fb ff ff       	jmp    c000d835 <sinc_mono_vari_process+0x2b2>
c000dc63:	83 c4 4c             	add    esp,0x4c
c000dc66:	89 d0                	mov    eax,edx
c000dc68:	5b                   	pop    ebx
c000dc69:	5e                   	pop    esi
c000dc6a:	5f                   	pop    edi
c000dc6b:	5d                   	pop    ebp
c000dc6c:	c3                   	ret    

c000dc6d <sinc_get_name>:
c000dc6d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc71:	31 c0                	xor    eax,eax
c000dc73:	83 fa 02             	cmp    edx,0x2
c000dc76:	77 07                	ja     c000dc7f <sinc_get_name+0x12>
c000dc78:	8b 04 95 a4 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd615c]
c000dc7f:	c3                   	ret    

c000dc80 <sinc_get_description>:
c000dc80:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc84:	31 c0                	xor    eax,eax
c000dc86:	83 fa 02             	cmp    edx,0x2
c000dc89:	77 07                	ja     c000dc92 <sinc_get_description+0x12>
c000dc8b:	8b 04 95 98 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6168]
c000dc92:	c3                   	ret    

c000dc93 <sinc_set_converter>:
c000dc93:	53                   	push   ebx
c000dc94:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc9a:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dca1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dca4:	85 c0                	test   eax,eax
c000dca6:	74 13                	je     c000dcbb <sinc_set_converter+0x28>
c000dca8:	83 ec 0c             	sub    esp,0xc
c000dcab:	50                   	push   eax
c000dcac:	e8 9f 1b 00 00       	call   c000f850 <free>
c000dcb1:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dcb8:	83 c4 10             	add    esp,0x10
c000dcbb:	50                   	push   eax
c000dcbc:	68 44 08 00 00       	push   0x844
c000dcc1:	6a 00                	push   0x0
c000dcc3:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dcc7:	50                   	push   eax
c000dcc8:	e8 ab 2a ff ff       	call   c0000778 <memset>
c000dccd:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcd0:	83 c4 10             	add    esp,0x10
c000dcd3:	b8 0b 00 00 00       	mov    eax,0xb
c000dcd8:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dcde:	7f 6e                	jg     c000dd4e <sinc_set_converter+0xbb>
c000dce0:	83 fa 01             	cmp    edx,0x1
c000dce3:	75 10                	jne    c000dcf5 <sinc_set_converter+0x62>
c000dce5:	c7 43 24 83 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d583
c000dcec:	c7 43 20 83 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d583
c000dcf3:	eb 4d                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dcf5:	83 fa 02             	cmp    edx,0x2
c000dcf8:	75 10                	jne    c000dd0a <sinc_set_converter+0x77>
c000dcfa:	c7 43 24 be ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cebe
c000dd01:	c7 43 20 be ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cebe
c000dd08:	eb 38                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd0a:	83 fa 04             	cmp    edx,0x4
c000dd0d:	75 10                	jne    c000dd1f <sinc_set_converter+0x8c>
c000dd0f:	c7 43 24 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7f9
c000dd16:	c7 43 20 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7f9
c000dd1d:	eb 23                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd1f:	83 fa 06             	cmp    edx,0x6
c000dd22:	75 10                	jne    c000dd34 <sinc_set_converter+0xa1>
c000dd24:	c7 43 24 34 c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c134
c000dd2b:	c7 43 20 34 c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c134
c000dd32:	eb 0e                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd34:	c7 43 24 70 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba70
c000dd3b:	c7 43 20 70 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba70
c000dd42:	c7 43 28 23 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad23
c000dd49:	b8 0a 00 00 00       	mov    eax,0xa
c000dd4e:	81 c4 58 08 00 00    	add    esp,0x858
c000dd54:	5b                   	pop    ebx
c000dd55:	c3                   	ret    

c000dd56 <zoh_vari_process>:
c000dd56:	55                   	push   ebp
c000dd57:	31 d2                	xor    edx,edx
c000dd59:	57                   	push   edi
c000dd5a:	56                   	push   esi
c000dd5b:	53                   	push   ebx
c000dd5c:	83 ec 3c             	sub    esp,0x3c
c000dd5f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd63:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd67:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd6b:	0f 8e 80 06 00 00    	jle    c000e3f1 <zoh_vari_process+0x69b>
c000dd71:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd74:	ba 05 00 00 00       	mov    edx,0x5
c000dd79:	85 db                	test   ebx,ebx
c000dd7b:	0f 84 70 06 00 00    	je     c000e3f1 <zoh_vari_process+0x69b>
c000dd81:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd84:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd88:	74 19                	je     c000dda3 <zoh_vari_process+0x4d>
c000dd8a:	31 d2                	xor    edx,edx
c000dd8c:	39 c2                	cmp    edx,eax
c000dd8e:	7d 0c                	jge    c000dd9c <zoh_vari_process+0x46>
c000dd90:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd92:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd95:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd99:	42                   	inc    edx
c000dd9a:	eb f0                	jmp    c000dd8c <zoh_vari_process+0x36>
c000dd9c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dda3:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dda6:	0f af d0             	imul   edx,eax
c000dda9:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ddac:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ddb0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ddb7:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ddba:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ddc1:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000ddc4:	8b 07                	mov    eax,DWORD PTR [edi]
c000ddc6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddce:	68 00 00 70 3f       	push   0x3f700000
c000ddd3:	6a 00                	push   0x0
c000ddd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dddd:	e8 1d a7 01 00       	call   c00284ff <__ltdf2>
c000dde2:	83 c4 10             	add    esp,0x10
c000dde5:	ba 16 00 00 00       	mov    edx,0x16
c000ddea:	85 c0                	test   eax,eax
c000ddec:	0f 88 ff 05 00 00    	js     c000e3f1 <zoh_vari_process+0x69b>
c000ddf2:	68 00 00 70 40       	push   0x40700000
c000ddf7:	6a 00                	push   0x0
c000ddf9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de01:	e8 db a6 01 00       	call   c00284e1 <__gtdf2>
c000de06:	83 c4 10             	add    esp,0x10
c000de09:	ba 16 00 00 00       	mov    edx,0x16
c000de0e:	85 c0                	test   eax,eax
c000de10:	0f 8f db 05 00 00    	jg     c000e3f1 <zoh_vari_process+0x69b>
c000de16:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000de19:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000de1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de24:	68 00 00 f0 3f       	push   0x3ff00000
c000de29:	6a 00                	push   0x0
c000de2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de33:	e8 c7 a6 01 00       	call   c00284ff <__ltdf2>
c000de38:	83 c4 10             	add    esp,0x10
c000de3b:	85 c0                	test   eax,eax
c000de3d:	0f 89 da 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000de43:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de46:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de49:	0f 8d ce 01 00 00    	jge    c000e01d <zoh_vari_process+0x2c7>
c000de4f:	83 ec 0c             	sub    esp,0xc
c000de52:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de55:	e8 39 a4 01 00       	call   c0028293 <__floatsidf>
c000de5a:	83 c4 10             	add    esp,0x10
c000de5d:	89 04 24             	mov    DWORD PTR [esp],eax
c000de60:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de6c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de70:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de74:	e8 b7 9d 01 00       	call   c0027c30 <__muldf3>
c000de79:	59                   	pop    ecx
c000de7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de7e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de82:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de85:	e8 09 a4 01 00       	call   c0028293 <__floatsidf>
c000de8a:	83 c4 10             	add    esp,0x10
c000de8d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de91:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de95:	52                   	push   edx
c000de96:	50                   	push   eax
c000de97:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9f:	e8 0f 97 01 00       	call   c00275b3 <__adddf3>
c000dea4:	59                   	pop    ecx
c000dea5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dea9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dead:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000deb0:	e8 de a3 01 00       	call   c0028293 <__floatsidf>
c000deb5:	83 c4 10             	add    esp,0x10
c000deb8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000debc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dec0:	52                   	push   edx
c000dec1:	50                   	push   eax
c000dec2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dec6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deca:	e8 2e a6 01 00       	call   c00284fd <__gedf2>
c000decf:	83 c4 10             	add    esp,0x10
c000ded2:	85 c0                	test   eax,eax
c000ded4:	0f 89 43 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000deda:	85 ed                	test   ebp,ebp
c000dedc:	0f 8e ec 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000dee2:	83 ec 10             	sub    esp,0x10
c000dee5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dee8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deeb:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deee:	ff 37                	push   DWORD PTR [edi]
c000def0:	e8 0f 9d 01 00       	call   c0027c04 <__subdf3>
c000def5:	83 c4 18             	add    esp,0x18
c000def8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000defc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df00:	52                   	push   edx
c000df01:	50                   	push   eax
c000df02:	e8 89 a7 01 00       	call   c0028690 <fabs>
c000df07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df0b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000df0f:	83 c4 10             	add    esp,0x10
c000df12:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df17:	68 23 42 92 0c       	push   0xc924223
c000df1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df24:	e8 b8 a5 01 00       	call   c00284e1 <__gtdf2>
c000df29:	83 c4 10             	add    esp,0x10
c000df2c:	85 c0                	test   eax,eax
c000df2e:	0f 8e 9a 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000df34:	8b 07                	mov    eax,DWORD PTR [edi]
c000df36:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df39:	89 04 24             	mov    DWORD PTR [esp],eax
c000df3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df40:	52                   	push   edx
c000df41:	50                   	push   eax
c000df42:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df45:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df48:	e8 b7 9c 01 00       	call   c0027c04 <__subdf3>
c000df4d:	59                   	pop    ecx
c000df4e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df52:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df56:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df59:	e8 35 a3 01 00       	call   c0028293 <__floatsidf>
c000df5e:	83 c4 10             	add    esp,0x10
c000df61:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df65:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df69:	52                   	push   edx
c000df6a:	50                   	push   eax
c000df6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df73:	e8 b8 9c 01 00       	call   c0027c30 <__muldf3>
c000df78:	5d                   	pop    ebp
c000df79:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df7d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df81:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df84:	e8 0a a3 01 00       	call   c0028293 <__floatsidf>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df90:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df94:	52                   	push   edx
c000df95:	50                   	push   eax
c000df96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9e:	e8 71 9f 01 00       	call   c0027f14 <__divdf3>
c000dfa3:	83 c4 10             	add    esp,0x10
c000dfa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfaa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfbe:	e8 f0 95 01 00       	call   c00275b3 <__adddf3>
c000dfc3:	83 c4 10             	add    esp,0x10
c000dfc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfce:	31 c0                	xor    eax,eax
c000dfd0:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dfd3:	7e 13                	jle    c000dfe8 <zoh_vari_process+0x292>
c000dfd5:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dfd9:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfdc:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfdf:	40                   	inc    eax
c000dfe0:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfe3:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfe6:	eb e8                	jmp    c000dfd0 <zoh_vari_process+0x27a>
c000dfe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff0:	68 00 00 f0 3f       	push   0x3ff00000
c000dff5:	6a 00                	push   0x0
c000dff7:	e8 18 9f 01 00       	call   c0027f14 <__divdf3>
c000dffc:	83 c4 10             	add    esp,0x10
c000dfff:	89 04 24             	mov    DWORD PTR [esp],eax
c000e002:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e00c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e010:	e8 9e 95 01 00       	call   c00275b3 <__adddf3>
c000e015:	83 c4 10             	add    esp,0x10
c000e018:	e9 ff fd ff ff       	jmp    c000de1c <zoh_vari_process+0xc6>
c000e01d:	55                   	push   ebp
c000e01e:	55                   	push   ebp
c000e01f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e023:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e027:	e8 84 a6 01 00       	call   c00286b0 <lrint>
c000e02c:	83 ec 0c             	sub    esp,0xc
c000e02f:	50                   	push   eax
c000e030:	e8 5e a2 01 00       	call   c0028293 <__floatsidf>
c000e035:	83 c4 10             	add    esp,0x10
c000e038:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e03c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e040:	52                   	push   edx
c000e041:	50                   	push   eax
c000e042:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e046:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e04a:	e8 b5 9b 01 00       	call   c0027c04 <__subdf3>
c000e04f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e053:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e057:	83 c4 20             	add    esp,0x20
c000e05a:	6a 00                	push   0x0
c000e05c:	6a 00                	push   0x0
c000e05e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e062:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e066:	e8 94 a4 01 00       	call   c00284ff <__ltdf2>
c000e06b:	83 c4 10             	add    esp,0x10
c000e06e:	85 c0                	test   eax,eax
c000e070:	79 1e                	jns    c000e090 <zoh_vari_process+0x33a>
c000e072:	68 00 00 f0 3f       	push   0x3ff00000
c000e077:	6a 00                	push   0x0
c000e079:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e07d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e081:	e8 2d 95 01 00       	call   c00275b3 <__adddf3>
c000e086:	83 c4 10             	add    esp,0x10
c000e089:	89 04 24             	mov    DWORD PTR [esp],eax
c000e08c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e090:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e093:	83 ec 10             	sub    esp,0x10
c000e096:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a6:	e8 59 9b 01 00       	call   c0027c04 <__subdf3>
c000e0ab:	83 c4 18             	add    esp,0x18
c000e0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0b6:	52                   	push   edx
c000e0b7:	50                   	push   eax
c000e0b8:	e8 f3 a5 01 00       	call   c00286b0 <lrint>
c000e0bd:	83 c4 10             	add    esp,0x10
c000e0c0:	0f af e8             	imul   ebp,eax
c000e0c3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0c6:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0c9:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0d0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0d7:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0da:	0f 8d 7a 02 00 00    	jge    c000e35a <zoh_vari_process+0x604>
c000e0e0:	83 ec 0c             	sub    esp,0xc
c000e0e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0e6:	e8 a8 a1 01 00       	call   c0028293 <__floatsidf>
c000e0eb:	83 c4 10             	add    esp,0x10
c000e0ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0f2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0f6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e102:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e106:	e8 25 9b 01 00       	call   c0027c30 <__muldf3>
c000e10b:	59                   	pop    ecx
c000e10c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e110:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e118:	e8 76 a1 01 00       	call   c0028293 <__floatsidf>
c000e11d:	83 c4 10             	add    esp,0x10
c000e120:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e124:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e128:	52                   	push   edx
c000e129:	50                   	push   eax
c000e12a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e12e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e132:	e8 7c 94 01 00       	call   c00275b3 <__adddf3>
c000e137:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e13a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e13e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e142:	e8 4c a1 01 00       	call   c0028293 <__floatsidf>
c000e147:	83 c4 10             	add    esp,0x10
c000e14a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e14e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e152:	52                   	push   edx
c000e153:	50                   	push   eax
c000e154:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e158:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e15c:	e8 a0 a3 01 00       	call   c0028501 <__ledf2>
c000e161:	83 c4 10             	add    esp,0x10
c000e164:	85 c0                	test   eax,eax
c000e166:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e16a:	0f 8f ea 01 00 00    	jg     c000e35a <zoh_vari_process+0x604>
c000e170:	85 c9                	test   ecx,ecx
c000e172:	0f 8e ed 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e178:	83 ec 10             	sub    esp,0x10
c000e17b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e17e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e181:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e184:	ff 37                	push   DWORD PTR [edi]
c000e186:	e8 79 9a 01 00       	call   c0027c04 <__subdf3>
c000e18b:	83 c4 18             	add    esp,0x18
c000e18e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e192:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e196:	52                   	push   edx
c000e197:	50                   	push   eax
c000e198:	e8 f3 a4 01 00       	call   c0028690 <fabs>
c000e19d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e1a1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e1a5:	83 c4 10             	add    esp,0x10
c000e1a8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e1ad:	68 23 42 92 0c       	push   0xc924223
c000e1b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1ba:	e8 22 a3 01 00       	call   c00284e1 <__gtdf2>
c000e1bf:	83 c4 10             	add    esp,0x10
c000e1c2:	85 c0                	test   eax,eax
c000e1c4:	0f 8e 9b 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e1ca:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1cc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1d7:	52                   	push   edx
c000e1d8:	50                   	push   eax
c000e1d9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1dc:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1df:	e8 20 9a 01 00       	call   c0027c04 <__subdf3>
c000e1e4:	5d                   	pop    ebp
c000e1e5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1e9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1ed:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1f0:	e8 9e a0 01 00       	call   c0028293 <__floatsidf>
c000e1f5:	83 c4 10             	add    esp,0x10
c000e1f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1fc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e200:	52                   	push   edx
c000e201:	50                   	push   eax
c000e202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e20a:	e8 21 9a 01 00       	call   c0027c30 <__muldf3>
c000e20f:	59                   	pop    ecx
c000e210:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e214:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e218:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e21b:	e8 73 a0 01 00       	call   c0028293 <__floatsidf>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e227:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e22b:	52                   	push   edx
c000e22c:	50                   	push   eax
c000e22d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e231:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e235:	e8 da 9c 01 00       	call   c0027f14 <__divdf3>
c000e23a:	83 c4 10             	add    esp,0x10
c000e23d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e241:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e245:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e249:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e24d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e255:	e8 59 93 01 00       	call   c00275b3 <__adddf3>
c000e25a:	83 c4 10             	add    esp,0x10
c000e25d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e261:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e265:	31 d2                	xor    edx,edx
c000e267:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e26a:	39 d0                	cmp    eax,edx
c000e26c:	7e 1d                	jle    c000e28b <zoh_vari_process+0x535>
c000e26e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e271:	29 c1                	sub    ecx,eax
c000e273:	89 c8                	mov    eax,ecx
c000e275:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e277:	01 d0                	add    eax,edx
c000e279:	42                   	inc    edx
c000e27a:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e27d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e280:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e283:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e286:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e289:	eb dc                	jmp    c000e267 <zoh_vari_process+0x511>
c000e28b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e28f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e293:	68 00 00 f0 3f       	push   0x3ff00000
c000e298:	6a 00                	push   0x0
c000e29a:	e8 75 9c 01 00       	call   c0027f14 <__divdf3>
c000e29f:	83 c4 10             	add    esp,0x10
c000e2a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2ae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2ba:	e8 f4 92 01 00       	call   c00275b3 <__adddf3>
c000e2bf:	5d                   	pop    ebp
c000e2c0:	59                   	pop    ecx
c000e2c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d1:	e8 da a3 01 00       	call   c00286b0 <lrint>
c000e2d6:	83 ec 0c             	sub    esp,0xc
c000e2d9:	50                   	push   eax
c000e2da:	e8 b4 9f 01 00       	call   c0028293 <__floatsidf>
c000e2df:	83 c4 10             	add    esp,0x10
c000e2e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2ea:	52                   	push   edx
c000e2eb:	50                   	push   eax
c000e2ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f4:	e8 0b 99 01 00       	call   c0027c04 <__subdf3>
c000e2f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e301:	83 c4 20             	add    esp,0x20
c000e304:	6a 00                	push   0x0
c000e306:	6a 00                	push   0x0
c000e308:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e30c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e310:	e8 ea a1 01 00       	call   c00284ff <__ltdf2>
c000e315:	83 c4 10             	add    esp,0x10
c000e318:	85 c0                	test   eax,eax
c000e31a:	79 1e                	jns    c000e33a <zoh_vari_process+0x5e4>
c000e31c:	68 00 00 f0 3f       	push   0x3ff00000
c000e321:	6a 00                	push   0x0
c000e323:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e327:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e32b:	e8 83 92 01 00       	call   c00275b3 <__adddf3>
c000e330:	83 c4 10             	add    esp,0x10
c000e333:	89 04 24             	mov    DWORD PTR [esp],eax
c000e336:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e33a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e33d:	83 ec 10             	sub    esp,0x10
c000e340:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e344:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e348:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e34c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e350:	e8 af 98 01 00       	call   c0027c04 <__subdf3>
c000e355:	e9 51 fd ff ff       	jmp    c000e0ab <zoh_vari_process+0x355>
c000e35a:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e35e:	7d 3a                	jge    c000e39a <zoh_vari_process+0x644>
c000e360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e364:	83 ec 0c             	sub    esp,0xc
c000e367:	29 e8                	sub    eax,ebp
c000e369:	99                   	cdq    
c000e36a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e36d:	50                   	push   eax
c000e36e:	e8 20 9f 01 00       	call   c0028293 <__floatsidf>
c000e373:	83 c4 10             	add    esp,0x10
c000e376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e37e:	52                   	push   edx
c000e37f:	50                   	push   eax
c000e380:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e384:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e388:	e8 26 92 01 00       	call   c00275b3 <__adddf3>
c000e38d:	83 c4 10             	add    esp,0x10
c000e390:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e393:	89 04 24             	mov    DWORD PTR [esp],eax
c000e396:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e39a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e39d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e3a1:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e3a4:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e3a7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3aa:	85 c0                	test   eax,eax
c000e3ac:	7f 25                	jg     c000e3d3 <zoh_vari_process+0x67d>
c000e3ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e3b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e3b6:	89 07                	mov    DWORD PTR [edi],eax
c000e3b8:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e3bb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3be:	99                   	cdq    
c000e3bf:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3c2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3c5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3c8:	99                   	cdq    
c000e3c9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3cc:	31 d2                	xor    edx,edx
c000e3ce:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3d1:	eb 1e                	jmp    c000e3f1 <zoh_vari_process+0x69b>
c000e3d3:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3d6:	31 d2                	xor    edx,edx
c000e3d8:	29 c8                	sub    eax,ecx
c000e3da:	c1 e0 02             	shl    eax,0x2
c000e3dd:	39 d1                	cmp    ecx,edx
c000e3df:	7e cd                	jle    c000e3ae <zoh_vari_process+0x658>
c000e3e1:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3e3:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3e7:	83 c0 04             	add    eax,0x4
c000e3ea:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3ee:	42                   	inc    edx
c000e3ef:	eb ec                	jmp    c000e3dd <zoh_vari_process+0x687>
c000e3f1:	83 c4 3c             	add    esp,0x3c
c000e3f4:	89 d0                	mov    eax,edx
c000e3f6:	5b                   	pop    ebx
c000e3f7:	5e                   	pop    esi
c000e3f8:	5f                   	pop    edi
c000e3f9:	5d                   	pop    ebp
c000e3fa:	c3                   	ret    

c000e3fb <zoh_reset>:
c000e3fb:	83 ec 0c             	sub    esp,0xc
c000e3fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e402:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e405:	85 c0                	test   eax,eax
c000e407:	74 20                	je     c000e429 <zoh_reset+0x2e>
c000e409:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e40c:	83 c0 1c             	add    eax,0x1c
c000e40f:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e412:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e419:	c1 e2 02             	shl    edx,0x2
c000e41c:	51                   	push   ecx
c000e41d:	52                   	push   edx
c000e41e:	6a 00                	push   0x0
c000e420:	50                   	push   eax
c000e421:	e8 52 23 ff ff       	call   c0000778 <memset>
c000e426:	83 c4 10             	add    esp,0x10
c000e429:	83 c4 0c             	add    esp,0xc
c000e42c:	c3                   	ret    

c000e42d <zoh_get_name>:
c000e42d:	31 c0                	xor    eax,eax
c000e42f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e434:	75 05                	jne    c000e43b <zoh_get_name+0xe>
c000e436:	b8 be 9f 02 c0       	mov    eax,0xc0029fbe
c000e43b:	c3                   	ret    

c000e43c <zoh_get_description>:
c000e43c:	31 c0                	xor    eax,eax
c000e43e:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e443:	75 05                	jne    c000e44a <zoh_get_description+0xe>
c000e445:	b8 cf 9f 02 c0       	mov    eax,0xc0029fcf
c000e44a:	c3                   	ret    

c000e44b <zoh_set_converter>:
c000e44b:	53                   	push   ebx
c000e44c:	b8 0a 00 00 00       	mov    eax,0xa
c000e451:	83 ec 08             	sub    esp,0x8
c000e454:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e458:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e45d:	75 6e                	jne    c000e4cd <zoh_set_converter+0x82>
c000e45f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e462:	85 c0                	test   eax,eax
c000e464:	74 13                	je     c000e479 <zoh_set_converter+0x2e>
c000e466:	83 ec 0c             	sub    esp,0xc
c000e469:	50                   	push   eax
c000e46a:	e8 e1 13 00 00       	call   c000f850 <free>
c000e46f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e476:	83 c4 10             	add    esp,0x10
c000e479:	50                   	push   eax
c000e47a:	50                   	push   eax
c000e47b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e47e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e485:	50                   	push   eax
c000e486:	6a 01                	push   0x1
c000e488:	e8 e3 13 00 00       	call   c000f870 <calloc>
c000e48d:	83 c4 10             	add    esp,0x10
c000e490:	89 c2                	mov    edx,eax
c000e492:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e495:	85 d2                	test   edx,edx
c000e497:	b8 01 00 00 00       	mov    eax,0x1
c000e49c:	74 2f                	je     c000e4cd <zoh_set_converter+0x82>
c000e49e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e4a1:	83 ec 0c             	sub    esp,0xc
c000e4a4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e4a7:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e4ad:	c7 43 24 56 dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd56
c000e4b4:	c7 43 20 56 dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd56
c000e4bb:	c7 43 28 fb e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3fb
c000e4c2:	53                   	push   ebx
c000e4c3:	e8 33 ff ff ff       	call   c000e3fb <zoh_reset>
c000e4c8:	83 c4 10             	add    esp,0x10
c000e4cb:	31 c0                	xor    eax,eax
c000e4cd:	83 c4 08             	add    esp,0x8
c000e4d0:	5b                   	pop    ebx
c000e4d1:	c3                   	ret    

c000e4d2 <CPU::current()>:
c000e4d2:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c000e4d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4dd:	90                   	nop
c000e4de:	c3                   	ret    

c000e4df <operator new(unsigned long)>:
c000e4df:	83 ec 0c             	sub    esp,0xc
c000e4e2:	83 ec 0c             	sub    esp,0xc
c000e4e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4e9:	e8 52 13 00 00       	call   c000f840 <malloc>
c000e4ee:	83 c4 10             	add    esp,0x10
c000e4f1:	83 c4 0c             	add    esp,0xc
c000e4f4:	c3                   	ret    

c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>:
c000e4f5:	83 ec 0c             	sub    esp,0xc
c000e4f8:	83 ec 08             	sub    esp,0x8
c000e4fb:	68 06 a0 02 c0       	push   0xc002a006
c000e500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e504:	e8 b7 23 ff ff       	call   c00008c0 <strcmp>
c000e509:	83 c4 10             	add    esp,0x10
c000e50c:	85 c0                	test   eax,eax
c000e50e:	0f 94 c0             	sete   al
c000e511:	84 c0                	test   al,al
c000e513:	74 0a                	je     c000e51f <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e515:	b8 48 e6 02 c0       	mov    eax,0xc002e648
c000e51a:	e9 e3 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e51f:	83 ec 08             	sub    esp,0x8
c000e522:	68 0f a0 02 c0       	push   0xc002a00f
c000e527:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e52b:	e8 90 23 ff ff       	call   c00008c0 <strcmp>
c000e530:	83 c4 10             	add    esp,0x10
c000e533:	85 c0                	test   eax,eax
c000e535:	0f 94 c0             	sete   al
c000e538:	84 c0                	test   al,al
c000e53a:	74 0a                	je     c000e546 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e53c:	b8 2c 6a 02 c0       	mov    eax,0xc0026a2c
c000e541:	e9 bc 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e546:	83 ec 08             	sub    esp,0x8
c000e549:	68 19 a0 02 c0       	push   0xc002a019
c000e54e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e552:	e8 69 23 ff ff       	call   c00008c0 <strcmp>
c000e557:	83 c4 10             	add    esp,0x10
c000e55a:	85 c0                	test   eax,eax
c000e55c:	0f 94 c0             	sete   al
c000e55f:	84 c0                	test   al,al
c000e561:	74 0a                	je     c000e56d <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e563:	b8 60 67 02 c0       	mov    eax,0xc0026760
c000e568:	e9 95 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e56d:	83 ec 08             	sub    esp,0x8
c000e570:	68 22 a0 02 c0       	push   0xc002a022
c000e575:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e579:	e8 42 23 ff ff       	call   c00008c0 <strcmp>
c000e57e:	83 c4 10             	add    esp,0x10
c000e581:	85 c0                	test   eax,eax
c000e583:	0f 94 c0             	sete   al
c000e586:	84 c0                	test   al,al
c000e588:	74 07                	je     c000e591 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e58a:	b8 2c 6b 02 c0       	mov    eax,0xc0026b2c
c000e58f:	eb 71                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e591:	83 ec 08             	sub    esp,0x8
c000e594:	68 2c a0 02 c0       	push   0xc002a02c
c000e599:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59d:	e8 1e 23 ff ff       	call   c00008c0 <strcmp>
c000e5a2:	83 c4 10             	add    esp,0x10
c000e5a5:	85 c0                	test   eax,eax
c000e5a7:	0f 94 c0             	sete   al
c000e5aa:	84 c0                	test   al,al
c000e5ac:	74 07                	je     c000e5b5 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5ae:	b8 ac 68 02 c0       	mov    eax,0xc00268ac
c000e5b3:	eb 4d                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b5:	83 ec 08             	sub    esp,0x8
c000e5b8:	68 35 a0 02 c0       	push   0xc002a035
c000e5bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c1:	e8 fa 22 ff ff       	call   c00008c0 <strcmp>
c000e5c6:	83 c4 10             	add    esp,0x10
c000e5c9:	85 c0                	test   eax,eax
c000e5cb:	0f 94 c0             	sete   al
c000e5ce:	84 c0                	test   al,al
c000e5d0:	74 07                	je     c000e5d9 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e5d2:	b8 4c e6 02 c0       	mov    eax,0xc002e64c
c000e5d7:	eb 29                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5d9:	83 ec 08             	sub    esp,0x8
c000e5dc:	68 42 a0 02 c0       	push   0xc002a042
c000e5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e5:	e8 d6 22 ff ff       	call   c00008c0 <strcmp>
c000e5ea:	83 c4 10             	add    esp,0x10
c000e5ed:	85 c0                	test   eax,eax
c000e5ef:	0f 94 c0             	sete   al
c000e5f2:	84 c0                	test   al,al
c000e5f4:	74 07                	je     c000e5fd <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e5f6:	b8 4d e6 02 c0       	mov    eax,0xc002e64d
c000e5fb:	eb 05                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5fd:	b8 00 00 00 00       	mov    eax,0x0
c000e602:	83 c4 0c             	add    esp,0xc
c000e605:	c3                   	ret    

c000e606 <Computer::close(int, int, void*)>:
c000e606:	57                   	push   edi
c000e607:	56                   	push   esi
c000e608:	53                   	push   ebx
c000e609:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e60d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e611:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e615:	83 ec 0c             	sub    esp,0xc
c000e618:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e61e:	e8 eb 5e 00 00       	call   c001450e <Device::closeAll()>
c000e623:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e629:	83 c4 10             	add    esp,0x10
c000e62c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e62e:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e632:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e63a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e63e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e642:	5b                   	pop    ebx
c000e643:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e646:	5e                   	pop    esi
c000e647:	5f                   	pop    edi
c000e648:	ff e0                	jmp    eax

c000e64a <Krnl::firstTask()>:
c000e64a:	53                   	push   ebx
c000e64b:	83 ec 14             	sub    esp,0x14
c000e64e:	fb                   	sti    
c000e64f:	68 3f 07 00 00       	push   0x73f
c000e654:	e8 e7 11 00 00       	call   c000f840 <malloc>
c000e659:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e660:	89 c3                	mov    ebx,eax
c000e662:	ff 35 b4 1b 03 c0    	push   DWORD PTR ds:0xc0031bb4
c000e668:	68 4f a0 02 c0       	push   0xc002a04f
c000e66d:	6a 01                	push   0x1
c000e66f:	50                   	push   eax
c000e670:	e8 07 f6 00 00       	call   c001dc7c <Process::Process(bool, char const*, Process*, char**)>
c000e675:	83 c4 20             	add    esp,0x20
c000e678:	68 ff 00 00 00       	push   0xff
c000e67d:	6a 00                	push   0x0
c000e67f:	68 d5 f1 00 c0       	push   0xc000f1d5
c000e684:	53                   	push   ebx
c000e685:	e8 f0 f8 00 00       	call   c001df7a <Process::createThread(void (*)(void*), void*, int)>
c000e68a:	6a 7a                	push   0x7a
c000e68c:	6a 00                	push   0x0
c000e68e:	68 d8 e7 01 c0       	push   0xc001e7d8
c000e693:	ff 35 b4 1b 03 c0    	push   DWORD PTR ds:0xc0031bb4
c000e699:	e8 dc f8 00 00       	call   c001df7a <Process::createThread(void (*)(void*), void*, int)>
c000e69e:	83 c4 20             	add    esp,0x20
c000e6a1:	a3 68 1b 03 c0       	mov    ds:0xc0031b68,eax
c000e6a6:	c6 05 4d e6 02 c0 01 	mov    BYTE PTR ds:0xc002e64d,0x1
c000e6ad:	e8 a7 04 01 00       	call   c001eb59 <Vm::initialise8086()>
c000e6b2:	e8 3f 4c 00 00       	call   c00132f6 <Fs::initVFS()>
c000e6b7:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c000e6bc:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e6c2:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6c4:	6a 00                	push   0x0
c000e6c6:	6a 00                	push   0x0
c000e6c8:	6a 00                	push   0x0
c000e6ca:	50                   	push   eax
c000e6cb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e6ce:	e8 39 df 00 00       	call   c001c60c <Sys::loadSyscalls()>
c000e6d3:	e8 12 be 00 00       	call   c001a4ea <Krnl::loadSystemEnv()>
c000e6d8:	83 c4 0c             	add    esp,0xc
c000e6db:	6a 3a                	push   0x3a
c000e6dd:	68 5c a0 02 c0       	push   0xc002a05c
c000e6e2:	68 65 a0 02 c0       	push   0xc002a065
c000e6e7:	e8 24 cb 00 00       	call   c001b210 <Reg::readIntWithDefault(char*, char*, int)>
c000e6ec:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6ef:	e8 ea 56 00 00       	call   c0013dde <User::loadClockSettings(int)>
c000e6f4:	58                   	pop    eax
c000e6f5:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c000e6fa:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e700:	e8 dd 5d 00 00       	call   c00144e2 <Device::loadDriversForAll()>
c000e705:	e8 26 b9 00 00       	call   c001a030 <Krnl::startCPUs()>
c000e70a:	5a                   	pop    edx
c000e70b:	8b 1d 48 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e648
c000e711:	59                   	pop    ecx
c000e712:	6a 01                	push   0x1
c000e714:	68 6d a0 02 c0       	push   0xc002a06d
c000e719:	e8 82 f0 00 00       	call   c001d7a0 <Thr::loadDLL(char const*, bool)>
c000e71e:	5a                   	pop    edx
c000e71f:	59                   	pop    ecx
c000e720:	53                   	push   ebx
c000e721:	50                   	push   eax
c000e722:	e8 ad f2 00 00       	call   c001d9d4 <Thr::executeDLL(unsigned long, void*)>
c000e727:	83 c4 10             	add    esp,0x10
c000e72a:	83 ec 0c             	sub    esp,0xc
c000e72d:	6a 02                	push   0x2
c000e72f:	e8 aa fb 00 00       	call   c001e2de <blockTask(TaskState)>
c000e734:	83 c4 10             	add    esp,0x10
c000e737:	eb f1                	jmp    c000e72a <Krnl::firstTask()+0xe0>
c000e739:	90                   	nop

c000e73a <Computer::Computer()>:
c000e73a:	83 ec 0c             	sub    esp,0xc
c000e73d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e741:	83 ec 08             	sub    esp,0x8
c000e744:	68 89 a0 02 c0       	push   0xc002a089
c000e749:	50                   	push   eax
c000e74a:	e8 39 5e 00 00       	call   c0014588 <Device::Device(char const*)>
c000e74f:	83 c4 10             	add    esp,0x10
c000e752:	ba 28 a2 02 c0       	mov    edx,0xc002a228
c000e757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e75b:	89 10                	mov    DWORD PTR [eax],edx
c000e75d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e761:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e76b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e76f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e779:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e77d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e783:	83 ca 04             	or     edx,0x4
c000e786:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e790:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e796:	0f b6 d0             	movzx  edx,al
c000e799:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e79d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e7a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ae:	0f b6 d0             	movzx  edx,al
c000e7b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b5:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e7ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7be:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7c4:	8d 50 01             	lea    edx,[eax+0x1]
c000e7c7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e7cb:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e7d1:	0f b6 d0             	movzx  edx,al
c000e7d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7d8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e7dc:	83 e1 3f             	and    ecx,0x3f
c000e7df:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e7e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ed:	0f b6 d0             	movzx  edx,al
c000e7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f4:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e7fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e805:	0f b6 d0             	movzx  edx,al
c000e808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80c:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e815:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e81b:	8d 50 01             	lea    edx,[eax+0x1]
c000e81e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e822:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e828:	0f b6 d0             	movzx  edx,al
c000e82b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e833:	83 e1 3f             	and    ecx,0x3f
c000e836:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e844:	0f b6 d0             	movzx  edx,al
c000e847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e84b:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e856:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e85c:	0f b6 d0             	movzx  edx,al
c000e85f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e863:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e86c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e872:	8d 50 01             	lea    edx,[eax+0x1]
c000e875:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e879:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e87f:	0f b6 d0             	movzx  edx,al
c000e882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e886:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e88a:	83 e1 3f             	and    ecx,0x3f
c000e88d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e891:	90                   	nop
c000e892:	83 c4 0c             	add    esp,0xc
c000e895:	c3                   	ret    

c000e896 <Computer::setBootMessage(char const*)>:
c000e896:	c3                   	ret    
c000e897:	90                   	nop

c000e898 <Computer::detectFeatures()>:
c000e898:	55                   	push   ebp
c000e899:	57                   	push   edi
c000e89a:	56                   	push   esi
c000e89b:	53                   	push   ebx
c000e89c:	83 ec 1c             	sub    esp,0x1c
c000e89f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e8a3:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e8ad:	e8 32 1a ff ff       	call   c00002e4 <detectCPUID>
c000e8b2:	85 c0                	test   eax,eax
c000e8b4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8ba:	0f 95 c2             	setne  dl
c000e8bd:	83 e0 fd             	and    eax,0xfffffffd
c000e8c0:	d1 e2                	shl    edx,1
c000e8c2:	09 d0                	or     eax,edx
c000e8c4:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8ca:	a8 02                	test   al,0x2
c000e8cc:	75 46                	jne    c000e914 <Computer::detectFeatures()+0x7c>
c000e8ce:	f6 05 61 e6 02 c0 04 	test   BYTE PTR ds:0xc002e661,0x4
c000e8d5:	74 07                	je     c000e8de <Computer::detectFeatures()+0x46>
c000e8d7:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e8de:	e8 13 7e 01 00       	call   c00266f6 <x87Detect>
c000e8e3:	83 e0 01             	and    eax,0x1
c000e8e6:	c1 e0 04             	shl    eax,0x4
c000e8e9:	88 c2                	mov    dl,al
c000e8eb:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8f1:	83 e0 ef             	and    eax,0xffffffef
c000e8f4:	09 d0                	or     eax,edx
c000e8f6:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8fc:	a8 10                	test   al,0x10
c000e8fe:	0f 85 2a 01 00 00    	jne    c000ea2e <Computer::detectFeatures()+0x196>
c000e904:	84 c0                	test   al,al
c000e906:	0f 88 45 01 00 00    	js     c000ea51 <Computer::detectFeatures()+0x1b9>
c000e90c:	83 c4 1c             	add    esp,0x1c
c000e90f:	5b                   	pop    ebx
c000e910:	5e                   	pop    esi
c000e911:	5f                   	pop    edi
c000e912:	5d                   	pop    ebp
c000e913:	c3                   	ret    
c000e914:	83 ec 0c             	sub    esp,0xc
c000e917:	6a 20                	push   0x20
c000e919:	e8 24 a4 00 00       	call   c0018d42 <CPU::cpuidCheckEDX(unsigned int)>
c000e91e:	83 e0 01             	and    eax,0x1
c000e921:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e928:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e92e:	83 e0 f7             	and    eax,0xfffffff7
c000e931:	09 d0                	or     eax,edx
c000e933:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e939:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e940:	e8 fd a3 00 00       	call   c0018d42 <CPU::cpuidCheckEDX(unsigned int)>
c000e945:	83 e0 01             	and    eax,0x1
c000e948:	88 c2                	mov    dl,al
c000e94a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e950:	83 e0 fe             	and    eax,0xfffffffe
c000e953:	09 d0                	or     eax,edx
c000e955:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e95b:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e962:	e8 db a3 00 00       	call   c0018d42 <CPU::cpuidCheckEDX(unsigned int)>
c000e967:	c1 e0 07             	shl    eax,0x7
c000e96a:	88 c2                	mov    dl,al
c000e96c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e972:	83 e0 7f             	and    eax,0x7f
c000e975:	09 d0                	or     eax,edx
c000e977:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e97d:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e984:	e8 b9 a3 00 00       	call   c0018d42 <CPU::cpuidCheckEDX(unsigned int)>
c000e989:	83 c4 10             	add    esp,0x10
c000e98c:	83 e0 01             	and    eax,0x1
c000e98f:	c1 e0 05             	shl    eax,0x5
c000e992:	88 c2                	mov    dl,al
c000e994:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e99a:	83 e0 df             	and    eax,0xffffffdf
c000e99d:	09 d0                	or     eax,edx
c000e99f:	f7 05 60 e6 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002e660,0x401
c000e9a9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9af:	0f 84 c2 00 00 00    	je     c000ea77 <Computer::detectFeatures()+0x1df>
c000e9b5:	83 e0 fe             	and    eax,0xfffffffe
c000e9b8:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9be:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9c4:	88 c2                	mov    dl,al
c000e9c6:	83 e2 09             	and    edx,0x9
c000e9c9:	fe ca                	dec    dl
c000e9cb:	75 09                	jne    c000e9d6 <Computer::detectFeatures()+0x13e>
c000e9cd:	83 e0 fe             	and    eax,0xfffffffe
c000e9d0:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d6:	83 ec 0c             	sub    esp,0xc
c000e9d9:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e9dd:	50                   	push   eax
c000e9de:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e9e2:	55                   	push   ebp
c000e9e3:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e9e7:	57                   	push   edi
c000e9e8:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e9ec:	56                   	push   esi
c000e9ed:	68 00 00 00 80       	push   0x80000000
c000e9f2:	e8 c7 a2 00 00       	call   c0018cbe <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e9f7:	83 c4 20             	add    esp,0x20
c000e9fa:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea01:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea05:	0f 86 c3 fe ff ff    	jbe    c000e8ce <Computer::detectFeatures()+0x36>
c000ea0b:	83 ec 0c             	sub    esp,0xc
c000ea0e:	50                   	push   eax
c000ea0f:	55                   	push   ebp
c000ea10:	57                   	push   edi
c000ea11:	56                   	push   esi
c000ea12:	68 01 00 00 80       	push   0x80000001
c000ea17:	e8 a2 a2 00 00       	call   c0018cbe <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea1c:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea26:	83 c4 20             	add    esp,0x20
c000ea29:	e9 a0 fe ff ff       	jmp    c000e8ce <Computer::detectFeatures()+0x36>
c000ea2e:	e8 7d 7c 01 00       	call   c00266b0 <absolutelyNoChanceInHell>
c000ea33:	88 c2                	mov    dl,al
c000ea35:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea3b:	c1 e2 07             	shl    edx,0x7
c000ea3e:	83 e0 7f             	and    eax,0x7f
c000ea41:	09 d0                	or     eax,edx
c000ea43:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea49:	84 c0                	test   al,al
c000ea4b:	0f 89 bb fe ff ff    	jns    c000e90c <Computer::detectFeatures()+0x74>
c000ea51:	e8 3a 7c 01 00       	call   c0026690 <avxDetect>
c000ea56:	83 e0 01             	and    eax,0x1
c000ea59:	c1 e0 05             	shl    eax,0x5
c000ea5c:	88 c2                	mov    dl,al
c000ea5e:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea64:	83 e0 df             	and    eax,0xffffffdf
c000ea67:	09 d0                	or     eax,edx
c000ea69:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea6f:	83 c4 1c             	add    esp,0x1c
c000ea72:	5b                   	pop    ebx
c000ea73:	5e                   	pop    esi
c000ea74:	5f                   	pop    edi
c000ea75:	5d                   	pop    ebp
c000ea76:	c3                   	ret    
c000ea77:	83 ec 0c             	sub    esp,0xc
c000ea7a:	68 00 02 00 00       	push   0x200
c000ea7f:	e8 be a2 00 00       	call   c0018d42 <CPU::cpuidCheckEDX(unsigned int)>
c000ea84:	83 c4 10             	add    esp,0x10
c000ea87:	83 e0 01             	and    eax,0x1
c000ea8a:	88 c2                	mov    dl,al
c000ea8c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea92:	83 e0 fe             	and    eax,0xfffffffe
c000ea95:	09 d0                	or     eax,edx
c000ea97:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea9d:	e9 1c ff ff ff       	jmp    c000e9be <Computer::detectFeatures()+0x126>

c000eaa2 <Computer::displayFeatures()>:
c000eaa2:	53                   	push   ebx
c000eaa3:	83 ec 14             	sub    esp,0x14
c000eaa6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eaaa:	68 99 a0 02 c0       	push   0xc002a099
c000eaaf:	e8 bd 44 00 00       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c000eab4:	83 c4 10             	add    esp,0x10
c000eab7:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eabe:	0f 85 73 02 00 00    	jne    c000ed37 <Computer::displayFeatures()+0x295>
c000eac4:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c000eac9:	83 ec 08             	sub    esp,0x8
c000eacc:	50                   	push   eax
c000eacd:	68 ac a0 02 c0       	push   0xc002a0ac
c000ead2:	e8 9a 44 00 00       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c000ead7:	83 c4 10             	add    esp,0x10
c000eada:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eae1:	0f 85 8c 02 00 00    	jne    c000ed73 <Computer::displayFeatures()+0x2d1>
c000eae7:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c000eaec:	83 ec 08             	sub    esp,0x8
c000eaef:	50                   	push   eax
c000eaf0:	68 bd a0 02 c0       	push   0xc002a0bd
c000eaf5:	e8 77 44 00 00       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c000eafa:	83 c4 10             	add    esp,0x10
c000eafd:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb04:	0f 85 5f 02 00 00    	jne    c000ed69 <Computer::displayFeatures()+0x2c7>
c000eb0a:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c000eb0f:	83 ec 08             	sub    esp,0x8
c000eb12:	50                   	push   eax
c000eb13:	68 ce a0 02 c0       	push   0xc002a0ce
c000eb18:	e8 54 44 00 00       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c000eb1d:	83 c4 10             	add    esp,0x10
c000eb20:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb27:	0f 85 32 02 00 00    	jne    c000ed5f <Computer::displayFeatures()+0x2bd>
c000eb2d:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c000eb32:	83 ec 08             	sub    esp,0x8
c000eb35:	50                   	push   eax
c000eb36:	68 df a0 02 c0       	push   0xc002a0df
c000eb3b:	e8 31 44 00 00       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c000eb40:	83 c4 10             	add    esp,0x10
c000eb43:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000eb4a:	0f 85 05 02 00 00    	jne    c000ed55 <Computer::displayFeatures()+0x2b3>
c000eb50:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c000eb55:	83 ec 08             	sub    esp,0x8
c000eb58:	50                   	push   eax
c000eb59:	68 f0 a0 02 c0       	push   0xc002a0f0
c000eb5e:	e8 0e 44 00 00       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c000eb63:	83 c4 10             	add    esp,0x10
c000eb66:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000eb6d:	0f 85 d8 01 00 00    	jne    c000ed4b <Computer::displayFeatures()+0x2a9>
c000eb73:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c000eb78:	83 ec 08             	sub    esp,0x8
c000eb7b:	50                   	push   eax
c000eb7c:	68 01 a1 02 c0       	push   0xc002a101
c000eb81:	e8 eb 43 00 00       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c000eb86:	83 c4 10             	add    esp,0x10
c000eb89:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000eb90:	0f 85 ab 01 00 00    	jne    c000ed41 <Computer::displayFeatures()+0x29f>
c000eb96:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c000eb9b:	83 ec 08             	sub    esp,0x8
c000eb9e:	50                   	push   eax
c000eb9f:	68 12 a1 02 c0       	push   0xc002a112
c000eba4:	e8 c8 43 00 00       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c000eba9:	83 c4 10             	add    esp,0x10
c000ebac:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ebb3:	0f 88 1b 02 00 00    	js     c000edd4 <Computer::displayFeatures()+0x332>
c000ebb9:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c000ebbe:	83 ec 08             	sub    esp,0x8
c000ebc1:	50                   	push   eax
c000ebc2:	68 23 a1 02 c0       	push   0xc002a123
c000ebc7:	e8 a5 43 00 00       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c000ebcc:	83 c4 10             	add    esp,0x10
c000ebcf:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ebd6:	0f 85 a1 01 00 00    	jne    c000ed7d <Computer::displayFeatures()+0x2db>
c000ebdc:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c000ebe1:	83 ec 08             	sub    esp,0x8
c000ebe4:	50                   	push   eax
c000ebe5:	68 34 a1 02 c0       	push   0xc002a134
c000ebea:	e8 82 43 00 00       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c000ebef:	83 c4 10             	add    esp,0x10
c000ebf2:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ebf9:	0f 85 cb 01 00 00    	jne    c000edca <Computer::displayFeatures()+0x328>
c000ebff:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c000ec04:	83 ec 08             	sub    esp,0x8
c000ec07:	50                   	push   eax
c000ec08:	68 45 a1 02 c0       	push   0xc002a145
c000ec0d:	e8 5f 43 00 00       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c000ec12:	83 c4 10             	add    esp,0x10
c000ec15:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec1c:	0f 85 9e 01 00 00    	jne    c000edc0 <Computer::displayFeatures()+0x31e>
c000ec22:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c000ec27:	83 ec 08             	sub    esp,0x8
c000ec2a:	50                   	push   eax
c000ec2b:	68 56 a1 02 c0       	push   0xc002a156
c000ec30:	e8 3c 43 00 00       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c000ec35:	83 c4 10             	add    esp,0x10
c000ec38:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ec3f:	0f 85 71 01 00 00    	jne    c000edb6 <Computer::displayFeatures()+0x314>
c000ec45:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c000ec4a:	83 ec 08             	sub    esp,0x8
c000ec4d:	50                   	push   eax
c000ec4e:	68 67 a1 02 c0       	push   0xc002a167
c000ec53:	e8 19 43 00 00       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c000ec58:	83 c4 10             	add    esp,0x10
c000ec5b:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ec62:	0f 85 44 01 00 00    	jne    c000edac <Computer::displayFeatures()+0x30a>
c000ec68:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c000ec6d:	83 ec 08             	sub    esp,0x8
c000ec70:	50                   	push   eax
c000ec71:	68 78 a1 02 c0       	push   0xc002a178
c000ec76:	e8 f6 42 00 00       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c000ec7b:	83 c4 10             	add    esp,0x10
c000ec7e:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ec85:	0f 85 17 01 00 00    	jne    c000eda2 <Computer::displayFeatures()+0x300>
c000ec8b:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c000ec90:	83 ec 08             	sub    esp,0x8
c000ec93:	50                   	push   eax
c000ec94:	68 89 a1 02 c0       	push   0xc002a189
c000ec99:	e8 d3 42 00 00       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c000ec9e:	83 c4 10             	add    esp,0x10
c000eca1:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000eca8:	0f 85 ea 00 00 00    	jne    c000ed98 <Computer::displayFeatures()+0x2f6>
c000ecae:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c000ecb3:	83 ec 08             	sub    esp,0x8
c000ecb6:	50                   	push   eax
c000ecb7:	68 9a a1 02 c0       	push   0xc002a19a
c000ecbc:	e8 b0 42 00 00       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c000ecc1:	83 c4 10             	add    esp,0x10
c000ecc4:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000eccb:	0f 88 0d 01 00 00    	js     c000edde <Computer::displayFeatures()+0x33c>
c000ecd1:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c000ecd6:	83 ec 08             	sub    esp,0x8
c000ecd9:	50                   	push   eax
c000ecda:	68 ab a1 02 c0       	push   0xc002a1ab
c000ecdf:	e8 8d 42 00 00       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c000ece4:	83 c4 10             	add    esp,0x10
c000ece7:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ecee:	0f 85 9a 00 00 00    	jne    c000ed8e <Computer::displayFeatures()+0x2ec>
c000ecf4:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c000ecf9:	83 ec 08             	sub    esp,0x8
c000ecfc:	50                   	push   eax
c000ecfd:	68 bc a1 02 c0       	push   0xc002a1bc
c000ed02:	e8 6a 42 00 00       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c000ed07:	83 c4 10             	add    esp,0x10
c000ed0a:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed11:	75 74                	jne    c000ed87 <Computer::displayFeatures()+0x2e5>
c000ed13:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c000ed18:	83 ec 08             	sub    esp,0x8
c000ed1b:	50                   	push   eax
c000ed1c:	68 cd a1 02 c0       	push   0xc002a1cd
c000ed21:	e8 4b 42 00 00       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c000ed26:	c7 44 24 20 bc bc 02 c0 	mov    DWORD PTR [esp+0x20],0xc002bcbc
c000ed2e:	83 c4 18             	add    esp,0x18
c000ed31:	5b                   	pop    ebx
c000ed32:	e9 3a 42 00 00       	jmp    c0012f71 <Dbg::kprintf(char const*, ...)>
c000ed37:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c000ed3c:	e9 88 fd ff ff       	jmp    c000eac9 <Computer::displayFeatures()+0x27>
c000ed41:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c000ed46:	e9 50 fe ff ff       	jmp    c000eb9b <Computer::displayFeatures()+0xf9>
c000ed4b:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c000ed50:	e9 23 fe ff ff       	jmp    c000eb78 <Computer::displayFeatures()+0xd6>
c000ed55:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c000ed5a:	e9 f6 fd ff ff       	jmp    c000eb55 <Computer::displayFeatures()+0xb3>
c000ed5f:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c000ed64:	e9 c9 fd ff ff       	jmp    c000eb32 <Computer::displayFeatures()+0x90>
c000ed69:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c000ed6e:	e9 9c fd ff ff       	jmp    c000eb0f <Computer::displayFeatures()+0x6d>
c000ed73:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c000ed78:	e9 6f fd ff ff       	jmp    c000eaec <Computer::displayFeatures()+0x4a>
c000ed7d:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c000ed82:	e9 5a fe ff ff       	jmp    c000ebe1 <Computer::displayFeatures()+0x13f>
c000ed87:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c000ed8c:	eb 8a                	jmp    c000ed18 <Computer::displayFeatures()+0x276>
c000ed8e:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c000ed93:	e9 61 ff ff ff       	jmp    c000ecf9 <Computer::displayFeatures()+0x257>
c000ed98:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c000ed9d:	e9 11 ff ff ff       	jmp    c000ecb3 <Computer::displayFeatures()+0x211>
c000eda2:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c000eda7:	e9 e4 fe ff ff       	jmp    c000ec90 <Computer::displayFeatures()+0x1ee>
c000edac:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c000edb1:	e9 b7 fe ff ff       	jmp    c000ec6d <Computer::displayFeatures()+0x1cb>
c000edb6:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c000edbb:	e9 8a fe ff ff       	jmp    c000ec4a <Computer::displayFeatures()+0x1a8>
c000edc0:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c000edc5:	e9 5d fe ff ff       	jmp    c000ec27 <Computer::displayFeatures()+0x185>
c000edca:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c000edcf:	e9 30 fe ff ff       	jmp    c000ec04 <Computer::displayFeatures()+0x162>
c000edd4:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c000edd9:	e9 e0 fd ff ff       	jmp    c000ebbe <Computer::displayFeatures()+0x11c>
c000edde:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c000ede3:	e9 ee fe ff ff       	jmp    c000ecd6 <Computer::displayFeatures()+0x234>

c000ede8 <Computer::rdmsr(unsigned int)>:
c000ede8:	83 ec 0c             	sub    esp,0xc
c000edeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edef:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000edf6:	74 0a                	je     c000ee02 <Computer::rdmsr(unsigned int)+0x1a>
c000edf8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000edfc:	0f 32                	rdmsr  
c000edfe:	83 c4 0c             	add    esp,0xc
c000ee01:	c3                   	ret    
c000ee02:	83 ec 0c             	sub    esp,0xc
c000ee05:	68 de a1 02 c0       	push   0xc002a1de
c000ee0a:	e8 14 b8 00 00       	call   c001a623 <Krnl::panic(char const*)>
c000ee0f:	83 c4 10             	add    esp,0x10
c000ee12:	eb e4                	jmp    c000edf8 <Computer::rdmsr(unsigned int)+0x10>

c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee14:	57                   	push   edi
c000ee15:	56                   	push   esi
c000ee16:	52                   	push   edx
c000ee17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee1b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee1f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee23:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee2a:	74 0e                	je     c000ee3a <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee2c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee30:	89 f0                	mov    eax,esi
c000ee32:	89 fa                	mov    edx,edi
c000ee34:	0f 30                	wrmsr  
c000ee36:	58                   	pop    eax
c000ee37:	5e                   	pop    esi
c000ee38:	5f                   	pop    edi
c000ee39:	c3                   	ret    
c000ee3a:	83 ec 0c             	sub    esp,0xc
c000ee3d:	68 e4 a1 02 c0       	push   0xc002a1e4
c000ee42:	e8 dc b7 00 00       	call   c001a623 <Krnl::panic(char const*)>
c000ee47:	83 c4 10             	add    esp,0x10
c000ee4a:	eb e0                	jmp    c000ee2c <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ee4c <Computer::nmiEnabled()>:
c000ee4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee50:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ee56:	c3                   	ret    
c000ee57:	90                   	nop

c000ee58 <Computer::readCMOS(unsigned char)>:
c000ee58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee5c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ee63:	19 c0                	sbb    eax,eax
c000ee65:	83 e0 80             	and    eax,0xffffff80
c000ee68:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ee6c:	e6 70                	out    0x70,al
c000ee6e:	e4 71                	in     al,0x71
c000ee70:	c3                   	ret    
c000ee71:	90                   	nop

c000ee72 <Computer::enableNMI(bool)>:
c000ee72:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee7a:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ee80:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ee88:	eb ce                	jmp    c000ee58 <Computer::readCMOS(unsigned char)>

c000ee8a <Computer::open(int, int, void*)>:
c000ee8a:	56                   	push   esi
c000ee8b:	53                   	push   ebx
c000ee8c:	83 ec 10             	sub    esp,0x10
c000ee8f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee93:	f6 05 60 e6 02 c0 04 	test   BYTE PTR ds:0xc002e660,0x4
c000ee9a:	68 68 12 00 00       	push   0x1268
c000ee9f:	0f 94 05 84 d5 02 c0 	sete   BYTE PTR ds:0xc002d584
c000eea6:	e8 95 09 00 00       	call   c000f840 <malloc>
c000eeab:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeae:	89 c6                	mov    esi,eax
c000eeb0:	e8 5d 93 00 00       	call   c0018212 <ACPI::ACPI()>
c000eeb5:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eebb:	58                   	pop    eax
c000eebc:	5a                   	pop    edx
c000eebd:	56                   	push   esi
c000eebe:	53                   	push   ebx
c000eebf:	e8 d4 54 00 00       	call   c0014398 <Device::addChild(Device*)>
c000eec4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eec7:	e8 cc f9 ff ff       	call   c000e898 <Computer::detectFeatures()>
c000eecc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eecf:	e8 ce fb ff ff       	call   c000eaa2 <Computer::displayFeatures()>
c000eed4:	59                   	pop    ecx
c000eed5:	5e                   	pop    esi
c000eed6:	6a 01                	push   0x1
c000eed8:	53                   	push   ebx
c000eed9:	e8 94 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000eede:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eee5:	e8 56 09 00 00       	call   c000f840 <malloc>
c000eeea:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeed:	89 c6                	mov    esi,eax
c000eeef:	e8 06 9f 00 00       	call   c0018dfa <CPU::CPU()>
c000eef4:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000eefa:	58                   	pop    eax
c000eefb:	5a                   	pop    edx
c000eefc:	56                   	push   esi
c000eefd:	53                   	push   ebx
c000eefe:	e8 95 54 00 00       	call   c0014398 <Device::addChild(Device*)>
c000ef03:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef09:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef0f:	6a 00                	push   0x0
c000ef11:	6a 00                	push   0x0
c000ef13:	50                   	push   eax
c000ef14:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef17:	83 c4 20             	add    esp,0x20
c000ef1a:	e8 ff 59 00 00       	call   c001491e <setupFPU()>
c000ef1f:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef25:	85 c0                	test   eax,eax
c000ef27:	74 1f                	je     c000ef48 <Computer::open(int, int, void*)+0xbe>
c000ef29:	83 ec 08             	sub    esp,0x8
c000ef2c:	50                   	push   eax
c000ef2d:	53                   	push   ebx
c000ef2e:	e8 65 54 00 00       	call   c0014398 <Device::addChild(Device*)>
c000ef33:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef39:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef3b:	6a 00                	push   0x0
c000ef3d:	6a 00                	push   0x0
c000ef3f:	6a 00                	push   0x0
c000ef41:	50                   	push   eax
c000ef42:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef45:	83 c4 20             	add    esp,0x20
c000ef48:	83 ec 0c             	sub    esp,0xc
c000ef4b:	68 4a e6 00 c0       	push   0xc000e64a
c000ef50:	e8 25 f1 00 00       	call   c001e07a <setupMultitasking(void (*)())>
c000ef55:	83 c4 14             	add    esp,0x14
c000ef58:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef5d:	5b                   	pop    ebx
c000ef5e:	5e                   	pop    esi
c000ef5f:	c3                   	ret    

c000ef60 <Computer::disableNMI()>:
c000ef60:	6a 00                	push   0x0
c000ef62:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ef66:	e8 07 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000ef6b:	58                   	pop    eax
c000ef6c:	5a                   	pop    edx
c000ef6d:	c3                   	ret    

c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ef6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef72:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ef79:	19 c0                	sbb    eax,eax
c000ef7b:	83 e0 80             	and    eax,0xffffff80
c000ef7e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ef82:	e6 70                	out    0x70,al
c000ef84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef88:	e6 71                	out    0x71,al
c000ef8a:	c3                   	ret    
c000ef8b:	90                   	nop

c000ef8c <Computer::handleNMI()>:
c000ef8c:	56                   	push   esi
c000ef8d:	53                   	push   ebx
c000ef8e:	83 ec 10             	sub    esp,0x10
c000ef91:	e4 92                	in     al,0x92
c000ef93:	89 c6                	mov    esi,eax
c000ef95:	e4 61                	in     al,0x61
c000ef97:	68 ea a1 02 c0       	push   0xc002a1ea
c000ef9c:	88 c3                	mov    bl,al
c000ef9e:	e8 ce 3f 00 00       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c000efa3:	83 c4 10             	add    esp,0x10
c000efa6:	83 e6 10             	and    esi,0x10
c000efa9:	75 0d                	jne    c000efb8 <Computer::handleNMI()+0x2c>
c000efab:	f6 c3 40             	test   bl,0x40
c000efae:	75 1d                	jne    c000efcd <Computer::handleNMI()+0x41>
c000efb0:	84 db                	test   bl,bl
c000efb2:	78 2d                	js     c000efe1 <Computer::handleNMI()+0x55>
c000efb4:	58                   	pop    eax
c000efb5:	5b                   	pop    ebx
c000efb6:	5e                   	pop    esi
c000efb7:	c3                   	ret    
c000efb8:	83 ec 0c             	sub    esp,0xc
c000efbb:	68 fb a1 02 c0       	push   0xc002a1fb
c000efc0:	e8 5e b6 00 00       	call   c001a623 <Krnl::panic(char const*)>
c000efc5:	83 c4 10             	add    esp,0x10
c000efc8:	f6 c3 40             	test   bl,0x40
c000efcb:	74 e3                	je     c000efb0 <Computer::handleNMI()+0x24>
c000efcd:	83 ec 0c             	sub    esp,0xc
c000efd0:	68 08 a2 02 c0       	push   0xc002a208
c000efd5:	e8 49 b6 00 00       	call   c001a623 <Krnl::panic(char const*)>
c000efda:	83 c4 10             	add    esp,0x10
c000efdd:	84 db                	test   bl,bl
c000efdf:	79 d3                	jns    c000efb4 <Computer::handleNMI()+0x28>
c000efe1:	c7 44 24 10 12 a2 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a212
c000efe9:	5a                   	pop    edx
c000efea:	5b                   	pop    ebx
c000efeb:	5e                   	pop    esi
c000efec:	e9 32 b6 00 00       	jmp    c001a623 <Krnl::panic(char const*)>
c000eff1:	90                   	nop

c000eff2 <Computer::setDiskActivityLight(int, bool)>:
c000eff2:	56                   	push   esi
c000eff3:	53                   	push   ebx
c000eff4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000eff8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000effd:	77 1b                	ja     c000f01a <Computer::setDiskActivityLight(int, bool)+0x28>
c000efff:	e4 92                	in     al,0x92
c000f001:	bb 40 00 00 00       	mov    ebx,0x40
c000f006:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f00a:	89 da                	mov    edx,ebx
c000f00c:	d3 e2                	shl    edx,cl
c000f00e:	89 f1                	mov    ecx,esi
c000f010:	f7 d2                	not    edx
c000f012:	d3 e3                	shl    ebx,cl
c000f014:	21 d0                	and    eax,edx
c000f016:	09 d8                	or     eax,ebx
c000f018:	e6 92                	out    0x92,al
c000f01a:	5b                   	pop    ebx
c000f01b:	5e                   	pop    esi
c000f01c:	c3                   	ret    
c000f01d:	90                   	nop

c000f01e <GDTEntry::setBase(unsigned int)>:
c000f01e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f022:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f026:	89 c1                	mov    ecx,eax
c000f028:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f02c:	c1 e9 10             	shr    ecx,0x10
c000f02f:	c1 e8 18             	shr    eax,0x18
c000f032:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f035:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f038:	c3                   	ret    
c000f039:	90                   	nop

c000f03a <GDTEntry::setLimit(unsigned int)>:
c000f03a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f03e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f042:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f045:	66 89 01             	mov    WORD PTR [ecx],ax
c000f048:	83 e2 f0             	and    edx,0xfffffff0
c000f04b:	c1 e8 10             	shr    eax,0x10
c000f04e:	83 e0 0f             	and    eax,0xf
c000f051:	09 d0                	or     eax,edx
c000f053:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f056:	c3                   	ret    
c000f057:	90                   	nop

c000f058 <GDT::GDT()>:
c000f058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f05c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f062:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f066:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f06c:	90                   	nop
c000f06d:	c3                   	ret    

c000f06e <GDT::addEntry(GDTEntry)>:
c000f06e:	53                   	push   ebx
c000f06f:	83 ec 0c             	sub    esp,0xc
c000f072:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f076:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f078:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f07f:	52                   	push   edx
c000f080:	50                   	push   eax
c000f081:	68 4c a2 02 c0       	push   0xc002a24c
c000f086:	e8 e6 3e 00 00       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c000f08b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f08d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f091:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f095:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f099:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f09d:	8d 50 01             	lea    edx,[eax+0x1]
c000f0a0:	c1 e0 03             	shl    eax,0x3
c000f0a3:	89 13                	mov    DWORD PTR [ebx],edx
c000f0a5:	83 c4 18             	add    esp,0x18
c000f0a8:	5b                   	pop    ebx
c000f0a9:	c3                   	ret    

c000f0aa <GDT::getNumberOfEntries()>:
c000f0aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0ae:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0b0:	c3                   	ret    
c000f0b1:	90                   	nop

c000f0b2 <GDT::flush()>:
c000f0b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0b6:	8b 10                	mov    edx,DWORD PTR [eax]
c000f0b8:	83 c0 04             	add    eax,0x4
c000f0bb:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f0c2:	a3 52 e6 02 c0       	mov    ds:0xc002e652,eax
c000f0c7:	66 89 15 50 e6 02 c0 	mov    WORD PTR ds:0xc002e650,dx
c000f0ce:	e9 75 13 ff ff       	jmp    c0000448 <loadGDT>
c000f0d3:	90                   	nop

c000f0d4 <GDT::setup()>:
c000f0d4:	55                   	push   ebp
c000f0d5:	57                   	push   edi
c000f0d6:	56                   	push   esi
c000f0d7:	53                   	push   ebx
c000f0d8:	83 ec 3c             	sub    esp,0x3c
c000f0db:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f0df:	6a 00                	push   0x0
c000f0e1:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f0e5:	53                   	push   ebx
c000f0e6:	e8 33 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f0eb:	6a 00                	push   0x0
c000f0ed:	53                   	push   ebx
c000f0ee:	e8 47 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f0f3:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f0fb:	6a 00                	push   0x0
c000f0fd:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f101:	53                   	push   ebx
c000f102:	e8 17 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f107:	68 ff ff ff 00       	push   0xffffff
c000f10c:	53                   	push   ebx
c000f10d:	e8 28 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f112:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f116:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f11b:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f120:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f124:	83 c4 20             	add    esp,0x20
c000f127:	6a 00                	push   0x0
c000f129:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f12d:	53                   	push   ebx
c000f12e:	e8 eb fe ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f133:	68 ff ff ff 00       	push   0xffffff
c000f138:	53                   	push   ebx
c000f139:	e8 fc fe ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f13e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f142:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f146:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f14a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f14e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f152:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f157:	0d 00 92 c0 00       	or     eax,0xc09200
c000f15c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f160:	89 d8                	mov    eax,ebx
c000f162:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f166:	80 cc 60             	or     ah,0x60
c000f169:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f16d:	83 c4 0c             	add    esp,0xc
c000f170:	89 f8                	mov    eax,edi
c000f172:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f176:	80 cc 60             	or     ah,0x60
c000f179:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f17d:	89 c7                	mov    edi,eax
c000f17f:	55                   	push   ebp
c000f180:	e8 e9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f185:	83 c4 0c             	add    esp,0xc
c000f188:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f18c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f190:	55                   	push   ebp
c000f191:	e8 d8 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f196:	83 c4 0c             	add    esp,0xc
c000f199:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f19d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1a1:	55                   	push   ebp
c000f1a2:	e8 c7 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1a7:	83 c4 0c             	add    esp,0xc
c000f1aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1b2:	53                   	push   ebx
c000f1b3:	51                   	push   ecx
c000f1b4:	55                   	push   ebp
c000f1b5:	e8 b4 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1ba:	83 c4 0c             	add    esp,0xc
c000f1bd:	57                   	push   edi
c000f1be:	56                   	push   esi
c000f1bf:	55                   	push   ebp
c000f1c0:	e8 a9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1c5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f1c8:	e8 e5 fe ff ff       	call   c000f0b2 <GDT::flush()>
c000f1cd:	83 c4 4c             	add    esp,0x4c
c000f1d0:	5b                   	pop    ebx
c000f1d1:	5e                   	pop    esi
c000f1d2:	5f                   	pop    edi
c000f1d3:	5d                   	pop    ebp
c000f1d4:	c3                   	ret    

c000f1d5 <idleFunction(void*)>:
c000f1d5:	53                   	push   ebx
c000f1d6:	83 ec 08             	sub    esp,0x8
c000f1d9:	e8 6c ec 00 00       	call   c001de4a <unlockScheduler()>
c000f1de:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c000f1e3:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f1e9:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f1f0:	74 3c                	je     c000f22e <idleFunction(void*)+0x59>
c000f1f2:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f1f9:	74 33                	je     c000f22e <idleFunction(void*)+0x59>
c000f1fb:	31 db                	xor    ebx,ebx
c000f1fd:	52                   	push   edx
c000f1fe:	52                   	push   edx
c000f1ff:	68 e1 00 00 00       	push   0xe1
c000f204:	50                   	push   eax
c000f205:	e8 de fb ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c000f20a:	53                   	push   ebx
c000f20b:	83 e0 02             	and    eax,0x2
c000f20e:	50                   	push   eax
c000f20f:	68 e1 00 00 00       	push   0xe1
c000f214:	ff 35 48 e6 02 c0    	push   DWORD PTR ds:0xc002e648
c000f21a:	e8 f5 fb ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c000f21f:	83 c4 20             	add    esp,0x20
c000f222:	e8 58 10 ff ff       	call   c000027f <doTPAUSE>
c000f227:	e8 04 95 01 00       	call   c0028730 <idleCommon()>
c000f22c:	eb f4                	jmp    c000f222 <idleFunction(void*)+0x4d>
c000f22e:	fb                   	sti    
c000f22f:	f4                   	hlt    
c000f230:	e8 fb 94 01 00       	call   c0028730 <idleCommon()>
c000f235:	eb f7                	jmp    c000f22e <idleFunction(void*)+0x59>
c000f237:	90                   	nop

c000f238 <IDTEntry::IDTEntry(bool)>:
c000f238:	83 ec 04             	sub    esp,0x4
c000f23b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f23f:	88 04 24             	mov    BYTE PTR [esp],al
c000f242:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f246:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f24c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f250:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f254:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f258:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f25b:	83 e2 f0             	and    edx,0xfffffff0
c000f25e:	83 ca 0e             	or     edx,0xe
c000f261:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f264:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f268:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f26b:	83 e2 ef             	and    edx,0xffffffef
c000f26e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f271:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f275:	74 04                	je     c000f27b <IDTEntry::IDTEntry(bool)+0x43>
c000f277:	b2 03                	mov    dl,0x3
c000f279:	eb 02                	jmp    c000f27d <IDTEntry::IDTEntry(bool)+0x45>
c000f27b:	b2 00                	mov    dl,0x0
c000f27d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f281:	83 e2 03             	and    edx,0x3
c000f284:	88 d1                	mov    cl,dl
c000f286:	c1 e1 05             	shl    ecx,0x5
c000f289:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f28c:	83 e2 9f             	and    edx,0xffffff9f
c000f28f:	09 ca                	or     edx,ecx
c000f291:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f294:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f298:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f29b:	83 ca 80             	or     edx,0xffffff80
c000f29e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2a1:	90                   	nop
c000f2a2:	83 c4 04             	add    esp,0x4
c000f2a5:	c3                   	ret    

c000f2a6 <IDTEntry::setOffset(unsigned int)>:
c000f2a6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ae:	66 89 02             	mov    WORD PTR [edx],ax
c000f2b1:	c1 e8 10             	shr    eax,0x10
c000f2b4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f2b8:	c3                   	ret    
c000f2b9:	90                   	nop

c000f2ba <IDT::IDT()>:
c000f2ba:	90                   	nop
c000f2bb:	c3                   	ret    

c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f2bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2c0:	83 c0 30             	add    eax,0x30
c000f2c3:	c3                   	ret    

c000f2c4 <IDT::addEntry(IDTEntry, int)>:
c000f2c4:	53                   	push   ebx
c000f2c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f2cd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f2d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f2d5:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f2d8:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f2dc:	5b                   	pop    ebx
c000f2dd:	c3                   	ret    

c000f2de <IDT::addEntry(int, void (*)(), bool)>:
c000f2de:	53                   	push   ebx
c000f2df:	83 ec 10             	sub    esp,0x10
c000f2e2:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f2e7:	50                   	push   eax
c000f2e8:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f2ec:	53                   	push   ebx
c000f2ed:	e8 46 ff ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f2f2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f2f6:	53                   	push   ebx
c000f2f7:	e8 aa ff ff ff       	call   c000f2a6 <IDTEntry::setOffset(unsigned int)>
c000f2fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f300:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f304:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f30c:	e8 b3 ff ff ff       	call   c000f2c4 <IDT::addEntry(IDTEntry, int)>
c000f311:	83 c4 30             	add    esp,0x30
c000f314:	5b                   	pop    ebx
c000f315:	c3                   	ret    

c000f316 <IDT::flush()>:
c000f316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f31a:	66 c7 05 58 e6 02 c0 ff 07 	mov    WORD PTR ds:0xc002e658,0x7ff
c000f323:	a3 5a e6 02 c0       	mov    ds:0xc002e65a,eax
c000f328:	0f 01 1d 58 e6 02 c0 	lidtd  ds:0xc002e658
c000f32f:	c3                   	ret    

c000f330 <IDT::setup()>:
c000f330:	57                   	push   edi
c000f331:	56                   	push   esi
c000f332:	53                   	push   ebx
c000f333:	83 ec 10             	sub    esp,0x10
c000f336:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f33a:	6a 00                	push   0x0
c000f33c:	68 68 04 00 c0       	push   0xc0000468
c000f341:	6a 00                	push   0x0
c000f343:	53                   	push   ebx
c000f344:	e8 95 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f349:	6a 00                	push   0x0
c000f34b:	68 78 04 00 c0       	push   0xc0000478
c000f350:	6a 01                	push   0x1
c000f352:	53                   	push   ebx
c000f353:	e8 86 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f358:	83 c4 20             	add    esp,0x20
c000f35b:	6a 00                	push   0x0
c000f35d:	68 82 04 00 c0       	push   0xc0000482
c000f362:	6a 02                	push   0x2
c000f364:	53                   	push   ebx
c000f365:	e8 74 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f36a:	6a 00                	push   0x0
c000f36c:	68 8c 04 00 c0       	push   0xc000048c
c000f371:	6a 03                	push   0x3
c000f373:	53                   	push   ebx
c000f374:	e8 65 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f379:	83 c4 20             	add    esp,0x20
c000f37c:	6a 00                	push   0x0
c000f37e:	68 96 04 00 c0       	push   0xc0000496
c000f383:	6a 04                	push   0x4
c000f385:	53                   	push   ebx
c000f386:	e8 53 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f38b:	6a 00                	push   0x0
c000f38d:	68 a0 04 00 c0       	push   0xc00004a0
c000f392:	6a 05                	push   0x5
c000f394:	53                   	push   ebx
c000f395:	e8 44 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f39a:	83 c4 20             	add    esp,0x20
c000f39d:	6a 00                	push   0x0
c000f39f:	68 aa 04 00 c0       	push   0xc00004aa
c000f3a4:	6a 06                	push   0x6
c000f3a6:	53                   	push   ebx
c000f3a7:	e8 32 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ac:	6a 00                	push   0x0
c000f3ae:	68 b4 04 00 c0       	push   0xc00004b4
c000f3b3:	6a 07                	push   0x7
c000f3b5:	53                   	push   ebx
c000f3b6:	e8 23 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3bb:	83 c4 20             	add    esp,0x20
c000f3be:	6a 00                	push   0x0
c000f3c0:	68 be 04 00 c0       	push   0xc00004be
c000f3c5:	6a 08                	push   0x8
c000f3c7:	53                   	push   ebx
c000f3c8:	e8 11 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3cd:	6a 00                	push   0x0
c000f3cf:	68 c6 04 00 c0       	push   0xc00004c6
c000f3d4:	6a 09                	push   0x9
c000f3d6:	53                   	push   ebx
c000f3d7:	e8 02 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3dc:	83 c4 20             	add    esp,0x20
c000f3df:	6a 00                	push   0x0
c000f3e1:	68 d0 04 00 c0       	push   0xc00004d0
c000f3e6:	6a 0a                	push   0xa
c000f3e8:	53                   	push   ebx
c000f3e9:	e8 f0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ee:	6a 00                	push   0x0
c000f3f0:	68 d8 04 00 c0       	push   0xc00004d8
c000f3f5:	6a 0b                	push   0xb
c000f3f7:	53                   	push   ebx
c000f3f8:	e8 e1 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3fd:	83 c4 20             	add    esp,0x20
c000f400:	6a 00                	push   0x0
c000f402:	68 e0 04 00 c0       	push   0xc00004e0
c000f407:	6a 0c                	push   0xc
c000f409:	53                   	push   ebx
c000f40a:	e8 cf fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f40f:	6a 00                	push   0x0
c000f411:	68 e8 04 00 c0       	push   0xc00004e8
c000f416:	6a 0d                	push   0xd
c000f418:	53                   	push   ebx
c000f419:	e8 c0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f41e:	83 c4 20             	add    esp,0x20
c000f421:	6a 00                	push   0x0
c000f423:	68 f0 04 00 c0       	push   0xc00004f0
c000f428:	6a 0e                	push   0xe
c000f42a:	53                   	push   ebx
c000f42b:	e8 ae fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f430:	6a 00                	push   0x0
c000f432:	68 f8 04 00 c0       	push   0xc00004f8
c000f437:	6a 0f                	push   0xf
c000f439:	53                   	push   ebx
c000f43a:	e8 9f fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f43f:	83 c4 20             	add    esp,0x20
c000f442:	6a 00                	push   0x0
c000f444:	68 02 05 00 c0       	push   0xc0000502
c000f449:	6a 10                	push   0x10
c000f44b:	53                   	push   ebx
c000f44c:	e8 8d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f451:	6a 00                	push   0x0
c000f453:	68 0c 05 00 c0       	push   0xc000050c
c000f458:	6a 11                	push   0x11
c000f45a:	53                   	push   ebx
c000f45b:	e8 7e fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f460:	83 c4 20             	add    esp,0x20
c000f463:	6a 00                	push   0x0
c000f465:	68 16 05 00 c0       	push   0xc0000516
c000f46a:	6a 12                	push   0x12
c000f46c:	53                   	push   ebx
c000f46d:	e8 6c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f472:	6a 01                	push   0x1
c000f474:	68 b0 05 00 c0       	push   0xc00005b0
c000f479:	6a 60                	push   0x60
c000f47b:	53                   	push   ebx
c000f47c:	e8 5d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f481:	83 c4 20             	add    esp,0x20
c000f484:	6a 00                	push   0x0
c000f486:	68 b7 05 00 c0       	push   0xc00005b7
c000f48b:	6a 20                	push   0x20
c000f48d:	53                   	push   ebx
c000f48e:	e8 4b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f493:	6a 00                	push   0x0
c000f495:	68 a2 05 00 c0       	push   0xc00005a2
c000f49a:	6a 21                	push   0x21
c000f49c:	53                   	push   ebx
c000f49d:	e8 3c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4a2:	83 c4 20             	add    esp,0x20
c000f4a5:	6a 00                	push   0x0
c000f4a7:	68 a9 05 00 c0       	push   0xc00005a9
c000f4ac:	6a 22                	push   0x22
c000f4ae:	53                   	push   ebx
c000f4af:	e8 2a fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4b4:	6a 00                	push   0x0
c000f4b6:	68 20 05 00 c0       	push   0xc0000520
c000f4bb:	6a 23                	push   0x23
c000f4bd:	53                   	push   ebx
c000f4be:	e8 1b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4c3:	83 c4 20             	add    esp,0x20
c000f4c6:	6a 00                	push   0x0
c000f4c8:	68 2a 05 00 c0       	push   0xc000052a
c000f4cd:	6a 24                	push   0x24
c000f4cf:	53                   	push   ebx
c000f4d0:	e8 09 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4d5:	6a 00                	push   0x0
c000f4d7:	68 34 05 00 c0       	push   0xc0000534
c000f4dc:	6a 25                	push   0x25
c000f4de:	53                   	push   ebx
c000f4df:	e8 fa fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4e4:	83 c4 20             	add    esp,0x20
c000f4e7:	6a 00                	push   0x0
c000f4e9:	68 3e 05 00 c0       	push   0xc000053e
c000f4ee:	6a 26                	push   0x26
c000f4f0:	53                   	push   ebx
c000f4f1:	e8 e8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4f6:	6a 00                	push   0x0
c000f4f8:	68 48 05 00 c0       	push   0xc0000548
c000f4fd:	6a 27                	push   0x27
c000f4ff:	53                   	push   ebx
c000f500:	e8 d9 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f505:	83 c4 20             	add    esp,0x20
c000f508:	6a 00                	push   0x0
c000f50a:	68 52 05 00 c0       	push   0xc0000552
c000f50f:	6a 28                	push   0x28
c000f511:	53                   	push   ebx
c000f512:	e8 c7 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f517:	6a 00                	push   0x0
c000f519:	68 5c 05 00 c0       	push   0xc000055c
c000f51e:	6a 29                	push   0x29
c000f520:	53                   	push   ebx
c000f521:	e8 b8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f526:	83 c4 20             	add    esp,0x20
c000f529:	6a 00                	push   0x0
c000f52b:	68 66 05 00 c0       	push   0xc0000566
c000f530:	6a 2a                	push   0x2a
c000f532:	53                   	push   ebx
c000f533:	e8 a6 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f538:	6a 00                	push   0x0
c000f53a:	68 70 05 00 c0       	push   0xc0000570
c000f53f:	6a 2b                	push   0x2b
c000f541:	53                   	push   ebx
c000f542:	e8 97 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f547:	83 c4 20             	add    esp,0x20
c000f54a:	6a 00                	push   0x0
c000f54c:	68 7a 05 00 c0       	push   0xc000057a
c000f551:	6a 2c                	push   0x2c
c000f553:	53                   	push   ebx
c000f554:	e8 85 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f559:	6a 00                	push   0x0
c000f55b:	68 84 05 00 c0       	push   0xc0000584
c000f560:	6a 2d                	push   0x2d
c000f562:	53                   	push   ebx
c000f563:	e8 76 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f568:	83 c4 20             	add    esp,0x20
c000f56b:	6a 00                	push   0x0
c000f56d:	68 8e 05 00 c0       	push   0xc000058e
c000f572:	6a 2e                	push   0x2e
c000f574:	53                   	push   ebx
c000f575:	e8 64 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f57a:	6a 00                	push   0x0
c000f57c:	68 98 05 00 c0       	push   0xc0000598
c000f581:	6a 2f                	push   0x2f
c000f583:	53                   	push   ebx
c000f584:	e8 55 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f589:	83 c4 20             	add    esp,0x20
c000f58c:	6a 00                	push   0x0
c000f58e:	68 ed 05 00 c0       	push   0xc00005ed
c000f593:	6a 30                	push   0x30
c000f595:	53                   	push   ebx
c000f596:	e8 43 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f59b:	6a 00                	push   0x0
c000f59d:	68 f7 05 00 c0       	push   0xc00005f7
c000f5a2:	6a 31                	push   0x31
c000f5a4:	53                   	push   ebx
c000f5a5:	e8 34 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5aa:	83 c4 20             	add    esp,0x20
c000f5ad:	6a 00                	push   0x0
c000f5af:	68 01 06 00 c0       	push   0xc0000601
c000f5b4:	6a 32                	push   0x32
c000f5b6:	53                   	push   ebx
c000f5b7:	e8 22 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5bc:	6a 00                	push   0x0
c000f5be:	68 0b 06 00 c0       	push   0xc000060b
c000f5c3:	6a 33                	push   0x33
c000f5c5:	53                   	push   ebx
c000f5c6:	e8 13 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5cb:	83 c4 20             	add    esp,0x20
c000f5ce:	6a 00                	push   0x0
c000f5d0:	68 15 06 00 c0       	push   0xc0000615
c000f5d5:	6a 34                	push   0x34
c000f5d7:	53                   	push   ebx
c000f5d8:	e8 01 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5dd:	6a 00                	push   0x0
c000f5df:	68 1f 06 00 c0       	push   0xc000061f
c000f5e4:	6a 35                	push   0x35
c000f5e6:	53                   	push   ebx
c000f5e7:	e8 f2 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5ec:	83 c4 20             	add    esp,0x20
c000f5ef:	6a 00                	push   0x0
c000f5f1:	68 29 06 00 c0       	push   0xc0000629
c000f5f6:	6a 36                	push   0x36
c000f5f8:	53                   	push   ebx
c000f5f9:	e8 e0 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5fe:	6a 00                	push   0x0
c000f600:	68 33 06 00 c0       	push   0xc0000633
c000f605:	6a 37                	push   0x37
c000f607:	53                   	push   ebx
c000f608:	e8 d1 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f60d:	83 c4 20             	add    esp,0x20
c000f610:	e8 29 28 00 00       	call   c0011e3e <Virt::getAKernelVAS()>
c000f615:	52                   	push   edx
c000f616:	6a 03                	push   0x3
c000f618:	6a 02                	push   0x2
c000f61a:	50                   	push   eax
c000f61b:	e8 5a 2e 00 00       	call   c001247a <VAS::allocatePages(int, int)>
c000f620:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f627:	89 c6                	mov    esi,eax
c000f629:	e8 12 02 00 00       	call   c000f840 <malloc>
c000f62e:	81 c6 00 20 00 00    	add    esi,0x2000
c000f634:	89 04 24             	mov    DWORD PTR [esp],eax
c000f637:	89 c7                	mov    edi,eax
c000f639:	e8 96 1e 00 00       	call   c00114d4 <TSS::TSS()>
c000f63e:	83 c4 0c             	add    esp,0xc
c000f641:	68 be 04 00 c0       	push   0xc00004be
c000f646:	56                   	push   esi
c000f647:	57                   	push   edi
c000f648:	e8 c7 1e 00 00       	call   c0011514 <TSS::setup(unsigned long, unsigned long)>
c000f64d:	59                   	pop    ecx
c000f64e:	89 c6                	mov    esi,eax
c000f650:	5f                   	pop    edi
c000f651:	6a 00                	push   0x0
c000f653:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f657:	50                   	push   eax
c000f658:	e8 db fb ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f65d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f661:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f666:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f66d:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f673:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f677:	80 ce 05             	or     dh,0x5
c000f67a:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f67d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f681:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f685:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f688:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f68b:	e8 86 fc ff ff       	call   c000f316 <IDT::flush()>
c000f690:	83 c4 20             	add    esp,0x20
c000f693:	5b                   	pop    ebx
c000f694:	5e                   	pop    esi
c000f695:	5f                   	pop    edi
c000f696:	c3                   	ret    

c000f697 <sbrk>:
c000f697:	55                   	push   ebp
c000f698:	57                   	push   edi
c000f699:	56                   	push   esi
c000f69a:	53                   	push   ebx
c000f69b:	83 ec 1c             	sub    esp,0x1c
c000f69e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6a2:	85 c0                	test   eax,eax
c000f6a4:	74 3e                	je     c000f6e4 <sbrk+0x4d>
c000f6a6:	78 43                	js     c000f6eb <sbrk+0x54>
c000f6a8:	8b 15 48 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e648
c000f6ae:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f6b4:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f6ba:	83 e2 01             	and    edx,0x1
c000f6bd:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f6c1:	8b 0d 6c d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d56c
c000f6c7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f6cb:	05 ff 0f 00 00       	add    eax,0xfff
c000f6d0:	89 c2                	mov    edx,eax
c000f6d2:	78 2f                	js     c000f703 <sbrk+0x6c>
c000f6d4:	c1 fa 0c             	sar    edx,0xc
c000f6d7:	89 d7                	mov    edi,edx
c000f6d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f6dd:	be 00 00 00 00       	mov    esi,0x0
c000f6e2:	eb 36                	jmp    c000f71a <sbrk+0x83>
c000f6e4:	a1 6c d5 02 c0       	mov    eax,ds:0xc002d56c
c000f6e9:	eb 74                	jmp    c000f75f <sbrk+0xc8>
c000f6eb:	83 ec 08             	sub    esp,0x8
c000f6ee:	50                   	push   eax
c000f6ef:	68 68 a2 02 c0       	push   0xc002a268
c000f6f4:	e8 78 38 00 00       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c000f6f9:	83 c4 10             	add    esp,0x10
c000f6fc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f701:	eb 5c                	jmp    c000f75f <sbrk+0xc8>
c000f703:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f709:	eb c9                	jmp    c000f6d4 <sbrk+0x3d>
c000f70b:	81 05 6c d5 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002d56c,0x1000
c000f715:	46                   	inc    esi
c000f716:	39 f7                	cmp    edi,esi
c000f718:	74 34                	je     c000f74e <sbrk+0xb7>
c000f71a:	e8 1f 27 00 00       	call   c0011e3e <Virt::getAKernelVAS()>
c000f71f:	89 c3                	mov    ebx,eax
c000f721:	8b 2d 6c d5 02 c0    	mov    ebp,DWORD PTR ds:0xc002d56c
c000f727:	e8 b6 07 00 00       	call   c000fee2 <Phys::allocatePage()>
c000f72c:	68 01 04 00 00       	push   0x401
c000f731:	55                   	push   ebp
c000f732:	50                   	push   eax
c000f733:	53                   	push   ebx
c000f734:	e8 41 2c 00 00       	call   c001237a <VAS::mapPage(unsigned long, unsigned long, int)>
c000f739:	83 c4 10             	add    esp,0x10
c000f73c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f741:	74 c8                	je     c000f70b <sbrk+0x74>
c000f743:	8b 1d 6c d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d56c
c000f749:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f74c:	eb bd                	jmp    c000f70b <sbrk+0x74>
c000f74e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f753:	75 12                	jne    c000f767 <sbrk+0xd0>
c000f755:	0f 20 d8             	mov    eax,cr3
c000f758:	0f 22 d8             	mov    cr3,eax
c000f75b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f75f:	83 c4 1c             	add    esp,0x1c
c000f762:	5b                   	pop    ebx
c000f763:	5e                   	pop    esi
c000f764:	5f                   	pop    edi
c000f765:	5d                   	pop    ebp
c000f766:	c3                   	ret    
c000f767:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f76b:	89 cb                	mov    ebx,ecx
c000f76d:	c1 eb 0a             	shr    ebx,0xa
c000f770:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f776:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f77c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f780:	c1 e0 0c             	shl    eax,0xc
c000f783:	01 c8                	add    eax,ecx
c000f785:	c1 e8 0a             	shr    eax,0xa
c000f788:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f78d:	2d 00 00 40 00       	sub    eax,0x400000
c000f792:	39 c3                	cmp    ebx,eax
c000f794:	77 c5                	ja     c000f75b <sbrk+0xc4>
c000f796:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f799:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f79f:	39 d8                	cmp    eax,ebx
c000f7a1:	73 f3                	jae    c000f796 <sbrk+0xff>
c000f7a3:	eb b6                	jmp    c000f75b <sbrk+0xc4>

c000f7a5 <mmap>:
c000f7a5:	83 ec 18             	sub    esp,0x18
c000f7a8:	68 98 a2 02 c0       	push   0xc002a298
c000f7ad:	e8 71 ae 00 00       	call   c001a623 <Krnl::panic(char const*)>
c000f7b2:	b8 00 00 00 00       	mov    eax,0x0
c000f7b7:	83 c4 1c             	add    esp,0x1c
c000f7ba:	c3                   	ret    

c000f7bb <munmap>:
c000f7bb:	83 ec 18             	sub    esp,0x18
c000f7be:	68 9d a2 02 c0       	push   0xc002a29d
c000f7c3:	e8 5b ae 00 00       	call   c001a623 <Krnl::panic(char const*)>
c000f7c8:	b8 00 00 00 00       	mov    eax,0x0
c000f7cd:	83 c4 1c             	add    esp,0x1c
c000f7d0:	c3                   	ret    

c000f7d1 <liballoc_lock()>:
c000f7d1:	83 ec 0c             	sub    esp,0xc
c000f7d4:	e8 6f e6 00 00       	call   c001de48 <lockScheduler()>
c000f7d9:	b8 00 00 00 00       	mov    eax,0x0
c000f7de:	83 c4 0c             	add    esp,0xc
c000f7e1:	c3                   	ret    

c000f7e2 <liballoc_unlock()>:
c000f7e2:	83 ec 0c             	sub    esp,0xc
c000f7e5:	e8 60 e6 00 00       	call   c001de4a <unlockScheduler()>
c000f7ea:	b8 00 00 00 00       	mov    eax,0x0
c000f7ef:	83 c4 0c             	add    esp,0xc
c000f7f2:	c3                   	ret    

c000f7f3 <liballoc_alloc(int)>:
c000f7f3:	83 ec 0c             	sub    esp,0xc
c000f7f6:	e8 43 26 00 00       	call   c0011e3e <Virt::getAKernelVAS()>
c000f7fb:	83 ec 04             	sub    esp,0x4
c000f7fe:	6a 01                	push   0x1
c000f800:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f804:	50                   	push   eax
c000f805:	e8 70 2c 00 00       	call   c001247a <VAS::allocatePages(int, int)>
c000f80a:	83 c4 1c             	add    esp,0x1c
c000f80d:	c3                   	ret    

c000f80e <liballoc_free(void*, int)>:
c000f80e:	83 ec 0c             	sub    esp,0xc
c000f811:	e8 28 26 00 00       	call   c0011e3e <Virt::getAKernelVAS()>
c000f816:	83 ec 08             	sub    esp,0x8
c000f819:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f81d:	50                   	push   eax
c000f81e:	e8 13 29 00 00       	call   c0012136 <VAS::freeAllocatedPages(unsigned long)>
c000f823:	b8 00 00 00 00       	mov    eax,0x0
c000f828:	83 c4 1c             	add    esp,0x1c
c000f82b:	c3                   	ret    

c000f82c <realloc>:
c000f82c:	83 ec 14             	sub    esp,0x14
c000f82f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f833:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f837:	e8 18 1e ff ff       	call   c0001654 <dlrealloc>
c000f83c:	83 c4 1c             	add    esp,0x1c
c000f83f:	c3                   	ret    

c000f840 <malloc>:
c000f840:	83 ec 18             	sub    esp,0x18
c000f843:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f847:	e8 cb 18 ff ff       	call   c0001117 <dlmalloc>
c000f84c:	83 c4 1c             	add    esp,0x1c
c000f84f:	c3                   	ret    

c000f850 <free>:
c000f850:	83 ec 18             	sub    esp,0x18
c000f853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f857:	e8 60 15 ff ff       	call   c0000dbc <dlfree>
c000f85c:	83 c4 1c             	add    esp,0x1c
c000f85f:	c3                   	ret    

c000f860 <rfree>:
c000f860:	83 ec 18             	sub    esp,0x18
c000f863:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f867:	e8 50 15 ff ff       	call   c0000dbc <dlfree>
c000f86c:	83 c4 1c             	add    esp,0x1c
c000f86f:	c3                   	ret    

c000f870 <calloc>:
c000f870:	56                   	push   esi
c000f871:	53                   	push   ebx
c000f872:	83 ec 10             	sub    esp,0x10
c000f875:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f879:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f87e:	53                   	push   ebx
c000f87f:	e8 bc ff ff ff       	call   c000f840 <malloc>
c000f884:	89 c6                	mov    esi,eax
c000f886:	83 c4 0c             	add    esp,0xc
c000f889:	53                   	push   ebx
c000f88a:	6a 00                	push   0x0
c000f88c:	50                   	push   eax
c000f88d:	e8 e6 0e ff ff       	call   c0000778 <memset>
c000f892:	89 f0                	mov    eax,esi
c000f894:	83 c4 14             	add    esp,0x14
c000f897:	5b                   	pop    ebx
c000f898:	5e                   	pop    esi
c000f899:	c3                   	ret    

c000f89a <hwTextMode_loadInData(VgaText*)>:
c000f89a:	55                   	push   ebp
c000f89b:	a1 80 d5 02 c0       	mov    eax,ds:0xc002d580
c000f8a0:	57                   	push   edi
c000f8a1:	56                   	push   esi
c000f8a2:	53                   	push   ebx
c000f8a3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f8a7:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f8ad:	85 d2                	test   edx,edx
c000f8af:	7e 2f                	jle    c000f8e0 <hwTextMode_loadInData(VgaText*)+0x46>
c000f8b1:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f8b7:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f8ba:	31 f6                	xor    esi,esi
c000f8bc:	29 fd                	sub    ebp,edi
c000f8be:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f8c1:	31 c0                	xor    eax,eax
c000f8c3:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f8c7:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f8cb:	40                   	inc    eax
c000f8cc:	83 f8 50             	cmp    eax,0x50
c000f8cf:	75 f2                	jne    c000f8c3 <hwTextMode_loadInData(VgaText*)+0x29>
c000f8d1:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f8d7:	46                   	inc    esi
c000f8d8:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f8de:	7f de                	jg     c000f8be <hwTextMode_loadInData(VgaText*)+0x24>
c000f8e0:	5b                   	pop    ebx
c000f8e1:	5e                   	pop    esi
c000f8e2:	5f                   	pop    edi
c000f8e3:	5d                   	pop    ebp
c000f8e4:	c3                   	ret    

c000f8e5 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f8e5:	55                   	push   ebp
c000f8e6:	80 3d e0 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e6e0,0x0
c000f8ed:	57                   	push   edi
c000f8ee:	56                   	push   esi
c000f8ef:	53                   	push   ebx
c000f8f0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f8f4:	75 50                	jne    c000f946 <hwTextMode_loadInTitle(VgaText*, char*)+0x61>
c000f8f6:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f8fc:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f902:	8b 15 80 d5 02 c0    	mov    edx,DWORD PTR ds:0xc002d580
c000f908:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f90c:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f912:	eb 0e                	jmp    c000f922 <hwTextMode_loadInTitle(VgaText*, char*)+0x3d>
c000f914:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f91a:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f920:	89 da                	mov    edx,ebx
c000f922:	83 e5 0f             	and    ebp,0xf
c000f925:	c1 e0 04             	shl    eax,0x4
c000f928:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f92b:	0f b6 c0             	movzx  eax,al
c000f92e:	41                   	inc    ecx
c000f92f:	09 e8                	or     eax,ebp
c000f931:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f935:	c1 e0 08             	shl    eax,0x8
c000f938:	09 e8                	or     eax,ebp
c000f93a:	39 fb                	cmp    ebx,edi
c000f93c:	66 89 02             	mov    WORD PTR [edx],ax
c000f93f:	75 d3                	jne    c000f914 <hwTextMode_loadInTitle(VgaText*, char*)+0x2f>
c000f941:	5b                   	pop    ebx
c000f942:	5e                   	pop    esi
c000f943:	5f                   	pop    edi
c000f944:	5d                   	pop    ebp
c000f945:	c3                   	ret    
c000f946:	c7 86 d8 0f 00 00 02 00 00 00 	mov    DWORD PTR [esi+0xfd8],0x2
c000f950:	c7 86 d4 0f 00 00 00 00 00 00 	mov    DWORD PTR [esi+0xfd4],0x0
c000f95a:	31 c0                	xor    eax,eax
c000f95c:	bd 02 00 00 00       	mov    ebp,0x2
c000f961:	eb 9f                	jmp    c000f902 <hwTextMode_loadInTitle(VgaText*, char*)+0x1d>

c000f963 <hwTextMode_showCursor(VgaText*, bool)>:
c000f963:	56                   	push   esi
c000f964:	80 3d e0 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e6e0,0x0
c000f96b:	53                   	push   ebx
c000f96c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f970:	75 39                	jne    c000f9ab <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f972:	84 c0                	test   al,al
c000f974:	74 38                	je     c000f9ae <hwTextMode_showCursor(VgaText*, bool)+0x4b>
c000f976:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f97b:	b0 0a                	mov    al,0xa
c000f97d:	89 da                	mov    edx,ebx
c000f97f:	ee                   	out    dx,al
c000f980:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f985:	89 ca                	mov    edx,ecx
c000f987:	ec                   	in     al,dx
c000f988:	b2 0f                	mov    dl,0xf
c000f98a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f98e:	83 e0 c0             	and    eax,0xffffffc0
c000f991:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f997:	09 d0                	or     eax,edx
c000f999:	89 ca                	mov    edx,ecx
c000f99b:	ee                   	out    dx,al
c000f99c:	b0 0b                	mov    al,0xb
c000f99e:	89 da                	mov    edx,ebx
c000f9a0:	ee                   	out    dx,al
c000f9a1:	89 ca                	mov    edx,ecx
c000f9a3:	ec                   	in     al,dx
c000f9a4:	83 e0 e0             	and    eax,0xffffffe0
c000f9a7:	83 c8 0f             	or     eax,0xf
c000f9aa:	ee                   	out    dx,al
c000f9ab:	5b                   	pop    ebx
c000f9ac:	5e                   	pop    esi
c000f9ad:	c3                   	ret    
c000f9ae:	b0 0a                	mov    al,0xa
c000f9b0:	ba d4 03 00 00       	mov    edx,0x3d4
c000f9b5:	ee                   	out    dx,al
c000f9b6:	b0 20                	mov    al,0x20
c000f9b8:	ba d5 03 00 00       	mov    edx,0x3d5
c000f9bd:	ee                   	out    dx,al
c000f9be:	5b                   	pop    ebx
c000f9bf:	5e                   	pop    esi
c000f9c0:	c3                   	ret    

c000f9c1 <hwTextMode_update(VgaText*)>:
c000f9c1:	c3                   	ret    

c000f9c2 <hwTextMode_updateCursor(VgaText*)>:
c000f9c2:	56                   	push   esi
c000f9c3:	80 3d e0 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e6e0,0x0
c000f9ca:	53                   	push   ebx
c000f9cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9cf:	75 3f                	jne    c000fa10 <hwTextMode_updateCursor(VgaText*)+0x4e>
c000f9d1:	be d4 03 00 00       	mov    esi,0x3d4
c000f9d6:	b9 19 00 00 00       	mov    ecx,0x19
c000f9db:	89 f2                	mov    edx,esi
c000f9dd:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f9e3:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f9e9:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f9ec:	c1 e1 04             	shl    ecx,0x4
c000f9ef:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f9f5:	b0 0f                	mov    al,0xf
c000f9f7:	ee                   	out    dx,al
c000f9f8:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f9fd:	88 c8                	mov    al,cl
c000f9ff:	89 da                	mov    edx,ebx
c000fa01:	ee                   	out    dx,al
c000fa02:	b0 0e                	mov    al,0xe
c000fa04:	89 f2                	mov    edx,esi
c000fa06:	ee                   	out    dx,al
c000fa07:	89 c8                	mov    eax,ecx
c000fa09:	89 da                	mov    edx,ebx
c000fa0b:	66 c1 e8 08          	shr    ax,0x8
c000fa0f:	ee                   	out    dx,al
c000fa10:	5b                   	pop    ebx
c000fa11:	5e                   	pop    esi
c000fa12:	c3                   	ret    

c000fa13 <hwTextMode_disableBlink(VgaText*, bool)>:
c000fa13:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa17:	80 3d e0 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e6e0,0x0
c000fa1e:	75 38                	jne    c000fa58 <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fa20:	ba da 03 00 00       	mov    edx,0x3da
c000fa25:	84 c0                	test   al,al
c000fa27:	75 18                	jne    c000fa41 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fa29:	ec                   	in     al,dx
c000fa2a:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa2f:	b0 30                	mov    al,0x30
c000fa31:	89 ca                	mov    edx,ecx
c000fa33:	ee                   	out    dx,al
c000fa34:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa39:	ec                   	in     al,dx
c000fa3a:	83 c8 08             	or     eax,0x8
c000fa3d:	89 ca                	mov    edx,ecx
c000fa3f:	ee                   	out    dx,al
c000fa40:	c3                   	ret    
c000fa41:	ec                   	in     al,dx
c000fa42:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa47:	b0 30                	mov    al,0x30
c000fa49:	89 ca                	mov    edx,ecx
c000fa4b:	ee                   	out    dx,al
c000fa4c:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa51:	ec                   	in     al,dx
c000fa52:	83 e0 f7             	and    eax,0xfffffff7
c000fa55:	89 ca                	mov    edx,ecx
c000fa57:	ee                   	out    dx,al
c000fa58:	c3                   	ret    

c000fa59 <hwTextMode_scrollScreen(VgaText*)>:
c000fa59:	55                   	push   ebp
c000fa5a:	57                   	push   edi
c000fa5b:	56                   	push   esi
c000fa5c:	53                   	push   ebx
c000fa5d:	83 ec 1c             	sub    esp,0x1c
c000fa60:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa64:	80 3d e0 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e6e0,0x0
c000fa6b:	74 14                	je     c000fa81 <hwTextMode_scrollScreen(VgaText*)+0x28>
c000fa6d:	c7 81 d0 0f 00 00 02 00 00 00 	mov    DWORD PTR [ecx+0xfd0],0x2
c000fa77:	c7 81 cc 0f 00 00 00 00 00 00 	mov    DWORD PTR [ecx+0xfcc],0x0
c000fa81:	a1 80 d5 02 c0       	mov    eax,ds:0xc002d580
c000fa86:	bd 02 00 00 00       	mov    ebp,0x2
c000fa8b:	05 a0 00 00 00       	add    eax,0xa0
c000fa90:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa94:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fa98:	31 c0                	xor    eax,eax
c000fa9a:	eb 0b                	jmp    c000faa7 <hwTextMode_scrollScreen(VgaText*)+0x4e>
c000fa9c:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faa2:	74 57                	je     c000fafb <hwTextMode_scrollScreen(VgaText*)+0xa2>
c000faa4:	43                   	inc    ebx
c000faa5:	89 f0                	mov    eax,esi
c000faa7:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000faad:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000fab3:	88 13                	mov    BYTE PTR [ebx],dl
c000fab5:	8d 70 01             	lea    esi,[eax+0x1]
c000fab8:	83 fd 18             	cmp    ebp,0x18
c000fabb:	75 df                	jne    c000fa9c <hwTextMode_scrollScreen(VgaText*)+0x43>
c000fabd:	a8 01                	test   al,0x1
c000fabf:	75 13                	jne    c000fad4 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000fac1:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000fac4:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faca:	75 d8                	jne    c000faa4 <hwTextMode_scrollScreen(VgaText*)+0x4b>
c000facc:	83 c4 1c             	add    esp,0x1c
c000facf:	5b                   	pop    ebx
c000fad0:	5e                   	pop    esi
c000fad1:	5f                   	pop    edi
c000fad2:	5d                   	pop    ebp
c000fad3:	c3                   	ret    
c000fad4:	83 ec 08             	sub    esp,0x8
c000fad7:	0f b6 81 cc 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfcc]
c000fade:	50                   	push   eax
c000fadf:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fae3:	0f b6 81 d0 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfd0]
c000faea:	50                   	push   eax
c000faeb:	e8 b6 0c 00 00       	call   c00107a6 <VgaText::combineColours(unsigned char, unsigned char)>
c000faf0:	83 c4 10             	add    esp,0x10
c000faf3:	88 07                	mov    BYTE PTR [edi],al
c000faf5:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000faf9:	eb c9                	jmp    c000fac4 <hwTextMode_scrollScreen(VgaText*)+0x6b>
c000fafb:	45                   	inc    ebp
c000fafc:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fb04:	eb 8e                	jmp    c000fa94 <hwTextMode_scrollScreen(VgaText*)+0x3b>

c000fb06 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fb06:	57                   	push   edi
c000fb07:	80 3d e0 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e6e0,0x0
c000fb0e:	56                   	push   esi
c000fb0f:	53                   	push   ebx
c000fb10:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fb14:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fb18:	75 65                	jne    c000fb7f <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x79>
c000fb1a:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fb1f:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fb24:	83 ec 08             	sub    esp,0x8
c000fb27:	52                   	push   edx
c000fb28:	50                   	push   eax
c000fb29:	e8 78 0c 00 00       	call   c00107a6 <VgaText::combineColours(unsigned char, unsigned char)>
c000fb2e:	5a                   	pop    edx
c000fb2f:	0f b6 c0             	movzx  eax,al
c000fb32:	59                   	pop    ecx
c000fb33:	50                   	push   eax
c000fb34:	0f be c3             	movsx  eax,bl
c000fb37:	50                   	push   eax
c000fb38:	e8 0f 0d 00 00       	call   c001084c <VgaText::combineCharAndColour(char, unsigned char)>
c000fb3d:	83 c4 10             	add    esp,0x10
c000fb40:	8b 35 80 d5 02 c0    	mov    esi,DWORD PTR ds:0xc002d580
c000fb46:	80 3d e0 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e6e0,0x0
c000fb4d:	74 07                	je     c000fb56 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fb4f:	66 0f be c3          	movsx  ax,bl
c000fb53:	80 cc 02             	or     ah,0x2
c000fb56:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fb5a:	ba 19 00 00 00       	mov    edx,0x19
c000fb5f:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000fb65:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fb68:	8d 14 92             	lea    edx,[edx+edx*4]
c000fb6b:	c1 e1 04             	shl    ecx,0x4
c000fb6e:	c1 e2 04             	shl    edx,0x4
c000fb71:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fb75:	01 ca                	add    edx,ecx
c000fb77:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fb7b:	5b                   	pop    ebx
c000fb7c:	5e                   	pop    esi
c000fb7d:	5f                   	pop    edi
c000fb7e:	c3                   	ret    
c000fb7f:	b8 02 00 00 00       	mov    eax,0x2
c000fb84:	31 d2                	xor    edx,edx
c000fb86:	eb 9c                	jmp    c000fb24 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fb88 <setupTextMode()>:
c000fb88:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fb8d:	83 e0 30             	and    eax,0x30
c000fb90:	66 83 f8 30          	cmp    ax,0x30
c000fb94:	75 11                	jne    c000fba7 <setupTextMode()+0x1f>
c000fb96:	81 2d 80 d5 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002d580,0x8000
c000fba0:	c6 05 e0 e6 02 c0 01 	mov    BYTE PTR ds:0xc002e6e0,0x1
c000fba7:	c7 05 18 e7 02 c0 13 fa 00 c0 	mov    DWORD PTR ds:0xc002e718,0xc000fa13
c000fbb1:	c7 05 04 e7 02 c0 9a f8 00 c0 	mov    DWORD PTR ds:0xc002e704,0xc000f89a
c000fbbb:	c7 05 00 e7 02 c0 e5 f8 00 c0 	mov    DWORD PTR ds:0xc002e700,0xc000f8e5
c000fbc5:	c7 05 0c e7 02 c0 59 fa 00 c0 	mov    DWORD PTR ds:0xc002e70c,0xc000fa59
c000fbcf:	c7 05 14 e7 02 c0 63 f9 00 c0 	mov    DWORD PTR ds:0xc002e714,0xc000f963
c000fbd9:	c7 05 08 e7 02 c0 c1 f9 00 c0 	mov    DWORD PTR ds:0xc002e708,0xc000f9c1
c000fbe3:	c7 05 10 e7 02 c0 c2 f9 00 c0 	mov    DWORD PTR ds:0xc002e710,0xc000f9c2
c000fbed:	c7 05 1c e7 02 c0 06 fb 00 c0 	mov    DWORD PTR ds:0xc002e71c,0xc000fb06
c000fbf7:	c3                   	ret    

c000fbf8 <kernel_main>:
c000fbf8:	57                   	push   edi
c000fbf9:	bf f9 03 00 00       	mov    edi,0x3f9
c000fbfe:	56                   	push   esi
c000fbff:	31 f6                	xor    esi,esi
c000fc01:	53                   	push   ebx
c000fc02:	83 ec 10             	sub    esp,0x10
c000fc05:	e8 f6 09 00 00       	call   c0010600 <installVgaTextImplementation()>
c000fc0a:	e8 79 ff ff ff       	call   c000fb88 <setupTextMode()>
c000fc0f:	89 f0                	mov    eax,esi
c000fc11:	89 fa                	mov    edx,edi
c000fc13:	ee                   	out    dx,al
c000fc14:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fc19:	b0 80                	mov    al,0x80
c000fc1b:	89 da                	mov    edx,ebx
c000fc1d:	ee                   	out    dx,al
c000fc1e:	b1 03                	mov    cl,0x3
c000fc20:	ba f8 03 00 00       	mov    edx,0x3f8
c000fc25:	88 c8                	mov    al,cl
c000fc27:	ee                   	out    dx,al
c000fc28:	89 f0                	mov    eax,esi
c000fc2a:	89 fa                	mov    edx,edi
c000fc2c:	ee                   	out    dx,al
c000fc2d:	88 c8                	mov    al,cl
c000fc2f:	89 da                	mov    edx,ebx
c000fc31:	ee                   	out    dx,al
c000fc32:	b0 c7                	mov    al,0xc7
c000fc34:	ba fa 03 00 00       	mov    edx,0x3fa
c000fc39:	ee                   	out    dx,al
c000fc3a:	b0 0b                	mov    al,0xb
c000fc3c:	ba fc 03 00 00       	mov    edx,0x3fc
c000fc41:	ee                   	out    dx,al
c000fc42:	83 ec 0c             	sub    esp,0xc
c000fc45:	68 a4 a2 02 c0       	push   0xc002a2a4
c000fc4a:	e8 22 33 00 00       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c000fc4f:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fc54:	05 ff 0f 00 00       	add    eax,0xfff
c000fc59:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fc5e:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc61:	e8 55 04 00 00       	call   c00100bb <Phys::physicalMemorySetup(unsigned int)>
c000fc66:	e8 f7 20 00 00       	call   c0011d62 <Virt::virtualMemorySetup()>
c000fc6b:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fc71:	83 c4 10             	add    esp,0x10
c000fc74:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fc7a:	75 0e                	jne    c000fc8a <kernel_main+0x92>
c000fc7c:	89 d8                	mov    eax,ebx
c000fc7e:	25 48 03 00 00       	and    eax,0x348
c000fc83:	3d 00 03 00 00       	cmp    eax,0x300
c000fc88:	74 10                	je     c000fc9a <kernel_main+0xa2>
c000fc8a:	83 ec 0c             	sub    esp,0xc
c000fc8d:	68 bd bc 02 c0       	push   0xc002bcbd
c000fc92:	e8 8c a9 00 00       	call   c001a623 <Krnl::panic(char const*)>
c000fc97:	83 c4 10             	add    esp,0x10
c000fc9a:	83 ec 0c             	sub    esp,0xc
c000fc9d:	89 1d 60 e6 02 c0    	mov    DWORD PTR ds:0xc002e660,ebx
c000fca3:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000fca7:	53                   	push   ebx
c000fca8:	e8 c7 22 00 00       	call   c0011f74 <VAS::VAS()>
c000fcad:	89 1d c8 e7 02 c0    	mov    DWORD PTR ds:0xc002e7c8,ebx
c000fcb3:	e8 68 03 ff ff       	call   c0000020 <callGlobalConstructors>
c000fcb8:	c7 04 24 bb a2 02 c0 	mov    DWORD PTR [esp],0xc002a2bb
c000fcbf:	e8 ad 32 00 00       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c000fcc4:	e8 18 21 00 00       	call   c0011de1 <Virt::swappingSetup()>
c000fcc9:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fcd0:	e8 6b fb ff ff       	call   c000f840 <malloc>
c000fcd5:	89 04 24             	mov    DWORD PTR [esp],eax
c000fcd8:	89 c6                	mov    esi,eax
c000fcda:	e8 5b ea ff ff       	call   c000e73a <Computer::Computer()>
c000fcdf:	58                   	pop    eax
c000fce0:	89 35 48 e6 02 c0    	mov    DWORD PTR ds:0xc002e648,esi
c000fce6:	5a                   	pop    edx
c000fce7:	56                   	push   esi
c000fce8:	68 d8 a2 02 c0       	push   0xc002a2d8
c000fced:	e8 7f 32 00 00       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c000fcf2:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c000fcf7:	8b 10                	mov    edx,DWORD PTR [eax]
c000fcf9:	6a 00                	push   0x0
c000fcfb:	6a 00                	push   0x0
c000fcfd:	6a 00                	push   0x0
c000fcff:	50                   	push   eax
c000fd00:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fd03:	83 c4 14             	add    esp,0x14
c000fd06:	53                   	push   ebx
c000fd07:	e8 02 25 00 00       	call   c001220e <VAS::~VAS()>
c000fd0c:	c7 04 24 eb a2 02 c0 	mov    DWORD PTR [esp],0xc002a2eb
c000fd13:	e8 0b a9 00 00       	call   c001a623 <Krnl::panic(char const*)>
c000fd18:	83 c4 20             	add    esp,0x20
c000fd1b:	5b                   	pop    ebx
c000fd1c:	5e                   	pop    esi
c000fd1d:	5f                   	pop    edi
c000fd1e:	c3                   	ret    

c000fd1f <Phys::allocateDMA(unsigned long)>:
c000fd1f:	55                   	push   ebp
c000fd20:	31 d2                	xor    edx,edx
c000fd22:	57                   	push   edi
c000fd23:	31 ed                	xor    ebp,ebp
c000fd25:	56                   	push   esi
c000fd26:	31 c9                	xor    ecx,ecx
c000fd28:	53                   	push   ebx
c000fd29:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd2d:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fd33:	31 c0                	xor    eax,eax
c000fd35:	c1 ee 0c             	shr    esi,0xc
c000fd38:	eb 17                	jmp    c000fd51 <Phys::allocateDMA(unsigned long)+0x32>
c000fd3a:	85 c9                	test   ecx,ecx
c000fd3c:	75 04                	jne    c000fd42 <Phys::allocateDMA(unsigned long)+0x23>
c000fd3e:	89 d5                	mov    ebp,edx
c000fd40:	89 d0                	mov    eax,edx
c000fd42:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fd45:	39 de                	cmp    esi,ebx
c000fd47:	74 20                	je     c000fd69 <Phys::allocateDMA(unsigned long)+0x4a>
c000fd49:	42                   	inc    edx
c000fd4a:	89 d9                	mov    ecx,ebx
c000fd4c:	83 fa 2f             	cmp    edx,0x2f
c000fd4f:	7f 11                	jg     c000fd62 <Phys::allocateDMA(unsigned long)+0x43>
c000fd51:	80 ba a0 e6 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd1960],0x0
c000fd58:	74 e0                	je     c000fd3a <Phys::allocateDMA(unsigned long)+0x1b>
c000fd5a:	31 c9                	xor    ecx,ecx
c000fd5c:	42                   	inc    edx
c000fd5d:	83 fa 2f             	cmp    edx,0x2f
c000fd60:	7e ef                	jle    c000fd51 <Phys::allocateDMA(unsigned long)+0x32>
c000fd62:	5b                   	pop    ebx
c000fd63:	31 c0                	xor    eax,eax
c000fd65:	5e                   	pop    esi
c000fd66:	5f                   	pop    edi
c000fd67:	5d                   	pop    ebp
c000fd68:	c3                   	ret    
c000fd69:	8d 14 30             	lea    edx,[eax+esi*1]
c000fd6c:	89 d7                	mov    edi,edx
c000fd6e:	4f                   	dec    edi
c000fd6f:	79 03                	jns    c000fd74 <Phys::allocateDMA(unsigned long)+0x55>
c000fd71:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fd74:	c1 ff 04             	sar    edi,0x4
c000fd77:	89 c2                	mov    edx,eax
c000fd79:	c1 fa 04             	sar    edx,0x4
c000fd7c:	39 fa                	cmp    edx,edi
c000fd7e:	75 2f                	jne    c000fdaf <Phys::allocateDMA(unsigned long)+0x90>
c000fd80:	85 db                	test   ebx,ebx
c000fd82:	74 1a                	je     c000fd9e <Phys::allocateDMA(unsigned long)+0x7f>
c000fd84:	be a0 e6 02 c0       	mov    esi,0xc002e6a0
c000fd89:	8d 90 a0 e6 02 c0    	lea    edx,[eax-0x3ffd1960]
c000fd8f:	f7 d6                	not    esi
c000fd91:	29 c6                	sub    esi,eax
c000fd93:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fd96:	42                   	inc    edx
c000fd97:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fd9a:	39 d9                	cmp    ecx,ebx
c000fd9c:	7f f5                	jg     c000fd93 <Phys::allocateDMA(unsigned long)+0x74>
c000fd9e:	85 ff                	test   edi,edi
c000fda0:	74 13                	je     c000fdb5 <Phys::allocateDMA(unsigned long)+0x96>
c000fda2:	5b                   	pop    ebx
c000fda3:	05 50 20 0c 00       	add    eax,0xc2050
c000fda8:	5e                   	pop    esi
c000fda9:	c1 e0 0c             	shl    eax,0xc
c000fdac:	5f                   	pop    edi
c000fdad:	5d                   	pop    ebp
c000fdae:	c3                   	ret    
c000fdaf:	89 ea                	mov    edx,ebp
c000fdb1:	31 c9                	xor    ecx,ecx
c000fdb3:	eb a7                	jmp    c000fd5c <Phys::allocateDMA(unsigned long)+0x3d>
c000fdb5:	5b                   	pop    ebx
c000fdb6:	c1 e0 0c             	shl    eax,0xc
c000fdb9:	5e                   	pop    esi
c000fdba:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fdbf:	5f                   	pop    edi
c000fdc0:	5d                   	pop    ebp
c000fdc1:	c3                   	ret    

c000fdc2 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fdc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdc6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fdca:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fdd0:	c1 e9 0c             	shr    ecx,0xc
c000fdd3:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fdd8:	76 25                	jbe    c000fdff <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fdda:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fddf:	c1 e8 0c             	shr    eax,0xc
c000fde2:	8d 50 10             	lea    edx,[eax+0x10]
c000fde5:	85 c9                	test   ecx,ecx
c000fde7:	74 15                	je     c000fdfe <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fde9:	8d 82 a0 e6 02 c0    	lea    eax,[edx-0x3ffd1960]
c000fdef:	8d 94 11 a0 e6 02 c0 	lea    edx,[ecx+edx*1-0x3ffd1960]
c000fdf6:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fdf9:	40                   	inc    eax
c000fdfa:	39 d0                	cmp    eax,edx
c000fdfc:	75 f8                	jne    c000fdf6 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fdfe:	c3                   	ret    
c000fdff:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fe05:	c1 ea 0c             	shr    edx,0xc
c000fe08:	eb db                	jmp    c000fde5 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fe0a <Phys::setPageState(unsigned long, bool)>:
c000fe0a:	56                   	push   esi
c000fe0b:	ba 01 00 00 00       	mov    edx,0x1
c000fe10:	53                   	push   ebx
c000fe11:	8b 35 70 d5 02 c0    	mov    esi,DWORD PTR ds:0xc002d570
c000fe17:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe1b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe1f:	89 c8                	mov    eax,ecx
c000fe21:	83 e1 07             	and    ecx,0x7
c000fe24:	c1 e8 03             	shr    eax,0x3
c000fe27:	d3 e3                	shl    ebx,cl
c000fe29:	01 c6                	add    esi,eax
c000fe2b:	d3 e2                	shl    edx,cl
c000fe2d:	f7 d2                	not    edx
c000fe2f:	20 16                	and    BYTE PTR [esi],dl
c000fe31:	03 05 70 d5 02 c0    	add    eax,DWORD PTR ds:0xc002d570
c000fe37:	08 18                	or     BYTE PTR [eax],bl
c000fe39:	5b                   	pop    ebx
c000fe3a:	5e                   	pop    esi
c000fe3b:	c3                   	ret    

c000fe3c <Phys::getPageState(unsigned long)>:
c000fe3c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe40:	8b 15 70 d5 02 c0    	mov    edx,DWORD PTR ds:0xc002d570
c000fe46:	89 c8                	mov    eax,ecx
c000fe48:	83 e1 07             	and    ecx,0x7
c000fe4b:	c1 e8 03             	shr    eax,0x3
c000fe4e:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fe52:	d3 f8                	sar    eax,cl
c000fe54:	83 e0 01             	and    eax,0x1
c000fe57:	c3                   	ret    

c000fe58 <Phys::freePage(unsigned long)>:
c000fe58:	53                   	push   ebx
c000fe59:	83 ec 08             	sub    esp,0x8
c000fe5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe60:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fe66:	76 57                	jbe    c000febf <Phys::freePage(unsigned long)+0x67>
c000fe68:	c1 eb 0c             	shr    ebx,0xc
c000fe6b:	53                   	push   ebx
c000fe6c:	e8 cb ff ff ff       	call   c000fe3c <Phys::getPageState(unsigned long)>
c000fe71:	5a                   	pop    edx
c000fe72:	84 c0                	test   al,al
c000fe74:	74 5b                	je     c000fed1 <Phys::freePage(unsigned long)+0x79>
c000fe76:	a1 90 e6 02 c0       	mov    eax,ds:0xc002e690
c000fe7b:	48                   	dec    eax
c000fe7c:	a3 90 e6 02 c0       	mov    ds:0xc002e690,eax
c000fe81:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe84:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe87:	c1 e0 02             	shl    eax,0x2
c000fe8a:	99                   	cdq    
c000fe8b:	f7 3d 94 e6 02 c0    	idiv   DWORD PTR ds:0xc002e694
c000fe91:	39 05 8c e6 02 c0    	cmp    DWORD PTR ds:0xc002e68c,eax
c000fe97:	75 13                	jne    c000feac <Phys::freePage(unsigned long)+0x54>
c000fe99:	83 ec 08             	sub    esp,0x8
c000fe9c:	6a 00                	push   0x0
c000fe9e:	53                   	push   ebx
c000fe9f:	e8 66 ff ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c000fea4:	83 c4 10             	add    esp,0x10
c000fea7:	83 c4 08             	add    esp,0x8
c000feaa:	5b                   	pop    ebx
c000feab:	c3                   	ret    
c000feac:	83 ec 0c             	sub    esp,0xc
c000feaf:	a3 8c e6 02 c0       	mov    ds:0xc002e68c,eax
c000feb4:	50                   	push   eax
c000feb5:	e8 da 0a 00 00       	call   c0010994 <VgaText::updateRAMUsageDisplay(int)>
c000feba:	83 c4 10             	add    esp,0x10
c000febd:	eb da                	jmp    c000fe99 <Phys::freePage(unsigned long)+0x41>
c000febf:	68 00 10 00 00       	push   0x1000
c000fec4:	53                   	push   ebx
c000fec5:	e8 f8 fe ff ff       	call   c000fdc2 <Phys::freeDMA(unsigned long, unsigned long)>
c000feca:	59                   	pop    ecx
c000fecb:	5b                   	pop    ebx
c000fecc:	83 c4 08             	add    esp,0x8
c000fecf:	5b                   	pop    ebx
c000fed0:	c3                   	ret    
c000fed1:	c7 44 24 10 06 a3 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a306
c000fed9:	83 c4 08             	add    esp,0x8
c000fedc:	5b                   	pop    ebx
c000fedd:	e9 41 a7 00 00       	jmp    c001a623 <Krnl::panic(char const*)>

c000fee2 <Phys::allocatePage()>:
c000fee2:	55                   	push   ebp
c000fee3:	89 e5                	mov    ebp,esp
c000fee5:	56                   	push   esi
c000fee6:	53                   	push   ebx
c000fee7:	83 ec 10             	sub    esp,0x10
c000feea:	8b 35 84 e6 02 c0    	mov    esi,DWORD PTR ds:0xc002e684
c000fef0:	89 f3                	mov    ebx,esi
c000fef2:	eb 0a                	jmp    c000fefe <Phys::allocatePage()+0x1c>
c000fef4:	89 1d 84 e6 02 c0    	mov    DWORD PTR ds:0xc002e684,ebx
c000fefa:	39 de                	cmp    esi,ebx
c000fefc:	74 24                	je     c000ff22 <Phys::allocatePage()+0x40>
c000fefe:	53                   	push   ebx
c000feff:	e8 38 ff ff ff       	call   c000fe3c <Phys::getPageState(unsigned long)>
c000ff04:	5a                   	pop    edx
c000ff05:	84 c0                	test   al,al
c000ff07:	74 5e                	je     c000ff67 <Phys::allocatePage()+0x85>
c000ff09:	43                   	inc    ebx
c000ff0a:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ff10:	75 e2                	jne    c000fef4 <Phys::allocatePage()+0x12>
c000ff12:	31 db                	xor    ebx,ebx
c000ff14:	c7 05 84 e6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e684,0x0
c000ff1e:	39 de                	cmp    esi,ebx
c000ff20:	75 dc                	jne    c000fefe <Phys::allocatePage()+0x1c>
c000ff22:	83 ec 0c             	sub    esp,0xc
c000ff25:	68 30 a3 02 c0       	push   0xc002a330
c000ff2a:	e8 42 30 00 00       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c000ff2f:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ff36:	e8 e4 fd ff ff       	call   c000fd1f <Phys::allocateDMA(unsigned long)>
c000ff3b:	83 c4 10             	add    esp,0x10
c000ff3e:	85 c0                	test   eax,eax
c000ff40:	0f 85 b6 00 00 00    	jne    c000fffc <Phys::allocatePage()+0x11a>
c000ff46:	83 ec 0c             	sub    esp,0xc
c000ff49:	68 41 a3 02 c0       	push   0xc002a341
c000ff4e:	e8 d0 a6 00 00       	call   c001a623 <Krnl::panic(char const*)>
c000ff53:	83 c4 10             	add    esp,0x10
c000ff56:	8b 1d 84 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e684
c000ff5c:	53                   	push   ebx
c000ff5d:	e8 da fe ff ff       	call   c000fe3c <Phys::getPageState(unsigned long)>
c000ff62:	5a                   	pop    edx
c000ff63:	84 c0                	test   al,al
c000ff65:	75 a2                	jne    c000ff09 <Phys::allocatePage()+0x27>
c000ff67:	6a 01                	push   0x1
c000ff69:	53                   	push   ebx
c000ff6a:	e8 9b fe ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c000ff6f:	a1 90 e6 02 c0       	mov    eax,ds:0xc002e690
c000ff74:	40                   	inc    eax
c000ff75:	a3 90 e6 02 c0       	mov    ds:0xc002e690,eax
c000ff7a:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff7d:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff80:	c1 e0 02             	shl    eax,0x2
c000ff83:	99                   	cdq    
c000ff84:	f7 3d 94 e6 02 c0    	idiv   DWORD PTR ds:0xc002e694
c000ff8a:	5a                   	pop    edx
c000ff8b:	39 05 8c e6 02 c0    	cmp    DWORD PTR ds:0xc002e68c,eax
c000ff91:	59                   	pop    ecx
c000ff92:	75 6f                	jne    c0010003 <Phys::allocatePage()+0x121>
c000ff94:	83 f8 46             	cmp    eax,0x46
c000ff97:	7e 5b                	jle    c000fff4 <Phys::allocatePage()+0x112>
c000ff99:	80 3d 80 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e680,0x0
c000ffa0:	75 52                	jne    c000fff4 <Phys::allocatePage()+0x112>
c000ffa2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ffa7:	85 c0                	test   eax,eax
c000ffa9:	74 49                	je     c000fff4 <Phys::allocatePage()+0x112>
c000ffab:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ffae:	85 c0                	test   eax,eax
c000ffb0:	74 42                	je     c000fff4 <Phys::allocatePage()+0x112>
c000ffb2:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000ffb8:	85 c0                	test   eax,eax
c000ffba:	74 38                	je     c000fff4 <Phys::allocatePage()+0x112>
c000ffbc:	83 ec 0c             	sub    esp,0xc
c000ffbf:	68 1c a3 02 c0       	push   0xc002a31c
c000ffc4:	e8 a8 2f 00 00       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c000ffc9:	83 c4 0c             	add    esp,0xc
c000ffcc:	a1 90 e6 02 c0       	mov    eax,ds:0xc002e690
c000ffd1:	85 c0                	test   eax,eax
c000ffd3:	78 4f                	js     c0010024 <Phys::allocatePage()+0x142>
c000ffd5:	c1 f8 05             	sar    eax,0x5
c000ffd8:	83 c0 02             	add    eax,0x2
c000ffdb:	50                   	push   eax
c000ffdc:	6a 04                	push   0x4
c000ffde:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ffe3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ffe6:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000ffec:	e8 5d 2c 00 00       	call   c0012c4e <VAS::scanForEviction(int, int)>
c000fff1:	83 c4 10             	add    esp,0x10
c000fff4:	a1 84 e6 02 c0       	mov    eax,ds:0xc002e684
c000fff9:	c1 e0 0c             	shl    eax,0xc
c000fffc:	8d 65 f8             	lea    esp,[ebp-0x8]
c000ffff:	5b                   	pop    ebx
c0010000:	5e                   	pop    esi
c0010001:	5d                   	pop    ebp
c0010002:	c3                   	ret    
c0010003:	83 ec 0c             	sub    esp,0xc
c0010006:	a3 8c e6 02 c0       	mov    ds:0xc002e68c,eax
c001000b:	50                   	push   eax
c001000c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001000f:	e8 80 09 00 00       	call   c0010994 <VgaText::updateRAMUsageDisplay(int)>
c0010014:	83 c4 10             	add    esp,0x10
c0010017:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001001a:	83 f8 46             	cmp    eax,0x46
c001001d:	7e d5                	jle    c000fff4 <Phys::allocatePage()+0x112>
c001001f:	e9 75 ff ff ff       	jmp    c000ff99 <Phys::allocatePage()+0xb7>
c0010024:	83 c0 1f             	add    eax,0x1f
c0010027:	eb ac                	jmp    c000ffd5 <Phys::allocatePage()+0xf3>

c0010029 <Phys::allocateContiguousPages(int)>:
c0010029:	57                   	push   edi
c001002a:	56                   	push   esi
c001002b:	53                   	push   ebx
c001002c:	31 db                	xor    ebx,ebx
c001002e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0010032:	e8 11 de 00 00       	call   c001de48 <lockScheduler()>
c0010037:	85 db                	test   ebx,ebx
c0010039:	75 11                	jne    c001004c <Phys::allocateContiguousPages(int)+0x23>
c001003b:	e8 a2 fe ff ff       	call   c000fee2 <Phys::allocatePage()>
c0010040:	83 ff 01             	cmp    edi,0x1
c0010043:	89 c6                	mov    esi,eax
c0010045:	74 21                	je     c0010068 <Phys::allocateContiguousPages(int)+0x3f>
c0010047:	bb 01 00 00 00       	mov    ebx,0x1
c001004c:	e8 91 fe ff ff       	call   c000fee2 <Phys::allocatePage()>
c0010051:	89 da                	mov    edx,ebx
c0010053:	c1 e2 0c             	shl    edx,0xc
c0010056:	01 f2                	add    edx,esi
c0010058:	39 c2                	cmp    edx,eax
c001005a:	74 17                	je     c0010073 <Phys::allocateContiguousPages(int)+0x4a>
c001005c:	bb 01 00 00 00       	mov    ebx,0x1
c0010061:	89 c6                	mov    esi,eax
c0010063:	83 ff 01             	cmp    edi,0x1
c0010066:	75 e4                	jne    c001004c <Phys::allocateContiguousPages(int)+0x23>
c0010068:	e8 dd dd 00 00       	call   c001de4a <unlockScheduler()>
c001006d:	89 f0                	mov    eax,esi
c001006f:	5b                   	pop    ebx
c0010070:	5e                   	pop    esi
c0010071:	5f                   	pop    edi
c0010072:	c3                   	ret    
c0010073:	43                   	inc    ebx
c0010074:	39 fb                	cmp    ebx,edi
c0010076:	75 bf                	jne    c0010037 <Phys::allocateContiguousPages(int)+0xe>
c0010078:	e8 cd dd 00 00       	call   c001de4a <unlockScheduler()>
c001007d:	89 f0                	mov    eax,esi
c001007f:	5b                   	pop    ebx
c0010080:	5e                   	pop    esi
c0010081:	5f                   	pop    edi
c0010082:	c3                   	ret    

c0010083 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0010083:	56                   	push   esi
c0010084:	53                   	push   ebx
c0010085:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010089:	39 1d 88 e6 02 c0    	cmp    DWORD PTR ds:0xc002e688,ebx
c001008f:	73 06                	jae    c0010097 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0010091:	89 1d 88 e6 02 c0    	mov    DWORD PTR ds:0xc002e688,ebx
c0010097:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001009b:	c1 eb 0c             	shr    ebx,0xc
c001009e:	c1 e8 0c             	shr    eax,0xc
c00100a1:	39 d8                	cmp    eax,ebx
c00100a3:	73 13                	jae    c00100b8 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c00100a5:	6a 00                	push   0x0
c00100a7:	8d 70 01             	lea    esi,[eax+0x1]
c00100aa:	50                   	push   eax
c00100ab:	e8 5a fd ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c00100b0:	5a                   	pop    edx
c00100b1:	89 f0                	mov    eax,esi
c00100b3:	59                   	pop    ecx
c00100b4:	39 f3                	cmp    ebx,esi
c00100b6:	75 ed                	jne    c00100a5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c00100b8:	5b                   	pop    ebx
c00100b9:	5e                   	pop    esi
c00100ba:	c3                   	ret    

c00100bb <Phys::physicalMemorySetup(unsigned int)>:
c00100bb:	55                   	push   ebp
c00100bc:	57                   	push   edi
c00100bd:	56                   	push   esi
c00100be:	53                   	push   ebx
c00100bf:	31 db                	xor    ebx,ebx
c00100c1:	83 ec 40             	sub    esp,0x40
c00100c4:	6a 30                	push   0x30
c00100c6:	6a 00                	push   0x0
c00100c8:	68 a0 e6 02 c0       	push   0xc002e6a0
c00100cd:	e8 a6 06 ff ff       	call   c0000778 <memset>
c00100d2:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00100d6:	25 00 f0 ff ff       	and    eax,0xfffff000
c00100db:	05 00 10 00 00       	add    eax,0x1000
c00100e0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00100e4:	83 c4 10             	add    esp,0x10
c00100e7:	83 ec 08             	sub    esp,0x8
c00100ea:	6a 01                	push   0x1
c00100ec:	53                   	push   ebx
c00100ed:	43                   	inc    ebx
c00100ee:	e8 17 fd ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c00100f3:	83 c4 10             	add    esp,0x10
c00100f6:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00100fc:	75 e9                	jne    c00100e7 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c00100fe:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0010105:	66 85 c0             	test   ax,ax
c0010108:	0f 84 8e 01 00 00    	je     c001029c <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c001010e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0010112:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001011a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001011e:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0010123:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010127:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001012f:	eb 15                	jmp    c0010146 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c0010131:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0010135:	83 c3 18             	add    ebx,0x18
c0010138:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001013c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0010140:	0f 84 66 01 00 00    	je     c00102ac <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c0010146:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0010149:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001014c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001014f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010153:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010157:	8b 33                	mov    esi,DWORD PTR [ebx]
c0010159:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c001015c:	01 f0                	add    eax,esi
c001015e:	55                   	push   ebp
c001015f:	11 fa                	adc    edx,edi
c0010161:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010165:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0010169:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001016d:	56                   	push   esi
c001016e:	68 7c a3 02 c0       	push   0xc002a37c
c0010173:	e8 f9 2d 00 00       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0010178:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001017c:	83 c4 10             	add    esp,0x10
c001017f:	09 f8                	or     eax,edi
c0010181:	0f 85 25 01 00 00    	jne    c00102ac <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c0010187:	4d                   	dec    ebp
c0010188:	75 a7                	jne    c0010131 <Phys::physicalMemorySetup(unsigned int)+0x76>
c001018a:	ba 00 00 08 00       	mov    edx,0x80000
c001018f:	89 c1                	mov    ecx,eax
c0010191:	39 f2                	cmp    edx,esi
c0010193:	19 f9                	sbb    ecx,edi
c0010195:	0f 82 a7 00 00 00    	jb     c0010242 <Phys::physicalMemorySetup(unsigned int)+0x187>
c001019b:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c001019f:	89 c1                	mov    ecx,eax
c00101a1:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c00101a5:	0f 83 97 00 00 00    	jae    c0010242 <Phys::physicalMemorySetup(unsigned int)+0x187>
c00101ab:	ba 00 00 0a 00       	mov    edx,0xa0000
c00101b0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00101b4:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00101b8:	39 fa                	cmp    edx,edi
c00101ba:	19 e8                	sbb    eax,ebp
c00101bc:	0f 82 14 01 00 00    	jb     c00102d6 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c00101c2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00101c6:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00101ca:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c00101d0:	ba ff 1f 00 00       	mov    edx,0x1fff
c00101d5:	83 d5 ff             	adc    ebp,0xffffffff
c00101d8:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00101dc:	31 c0                	xor    eax,eax
c00101de:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00101e2:	39 fa                	cmp    edx,edi
c00101e4:	89 c1                	mov    ecx,eax
c00101e6:	19 e9                	sbb    ecx,ebp
c00101e8:	0f 83 43 ff ff ff    	jae    c0010131 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101ee:	be 00 00 08 00       	mov    esi,0x80000
c00101f3:	50                   	push   eax
c00101f4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00101f8:	57                   	push   edi
c00101f9:	56                   	push   esi
c00101fa:	68 a0 a3 02 c0       	push   0xc002a3a0
c00101ff:	e8 6d 2d 00 00       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0010204:	5a                   	pop    edx
c0010205:	59                   	pop    ecx
c0010206:	57                   	push   edi
c0010207:	56                   	push   esi
c0010208:	e8 76 fe ff ff       	call   c0010083 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c001020d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0010211:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010215:	83 c4 0c             	add    esp,0xc
c0010218:	0f ac d0 0c          	shrd   eax,edx,0xc
c001021c:	03 05 94 e6 02 c0    	add    eax,DWORD PTR ds:0xc002e694
c0010222:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010229:	a3 94 e6 02 c0       	mov    ds:0xc002e694,eax
c001022e:	52                   	push   edx
c001022f:	50                   	push   eax
c0010230:	68 5d a3 02 c0       	push   0xc002a35d
c0010235:	e8 37 2d 00 00       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001023a:	83 c4 10             	add    esp,0x10
c001023d:	e9 ef fe ff ff       	jmp    c0010131 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010242:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0010246:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001024a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001024e:	39 ea                	cmp    edx,ebp
c0010250:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0010254:	0f 82 d7 fe ff ff    	jb     c0010131 <Phys::physicalMemorySetup(unsigned int)+0x76>
c001025a:	ba ff 1f 00 00       	mov    edx,0x1fff
c001025f:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0010263:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0010267:	0f 83 c4 fe ff ff    	jae    c0010131 <Phys::physicalMemorySetup(unsigned int)+0x76>
c001026d:	39 ee                	cmp    esi,ebp
c001026f:	89 f8                	mov    eax,edi
c0010271:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0010275:	0f 83 78 ff ff ff    	jae    c00101f3 <Phys::physicalMemorySetup(unsigned int)+0x138>
c001027b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001027f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010283:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0010287:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001028b:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c001028f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010293:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010297:	e9 57 ff ff ff       	jmp    c00101f3 <Phys::physicalMemorySetup(unsigned int)+0x138>
c001029c:	83 ec 0c             	sub    esp,0xc
c001029f:	68 4f a3 02 c0       	push   0xc002a34f
c00102a4:	e8 7a a3 00 00       	call   c001a623 <Krnl::panic(char const*)>
c00102a9:	83 c4 10             	add    esp,0x10
c00102ac:	bb 40 01 00 00       	mov    ebx,0x140
c00102b1:	83 ec 08             	sub    esp,0x8
c00102b4:	6a 00                	push   0x0
c00102b6:	53                   	push   ebx
c00102b7:	43                   	inc    ebx
c00102b8:	e8 4d fb ff ff       	call   c000fe0a <Phys::setPageState(unsigned long, bool)>
c00102bd:	ff 05 94 e6 02 c0    	inc    DWORD PTR ds:0xc002e694
c00102c3:	83 c4 10             	add    esp,0x10
c00102c6:	81 fb 80 01 00 00    	cmp    ebx,0x180
c00102cc:	75 e3                	jne    c00102b1 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c00102ce:	83 c4 3c             	add    esp,0x3c
c00102d1:	5b                   	pop    ebx
c00102d2:	5e                   	pop    esi
c00102d3:	5f                   	pop    edi
c00102d4:	5d                   	pop    ebp
c00102d5:	c3                   	ret    
c00102d6:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c00102de:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00102e6:	e9 d7 fe ff ff       	jmp    c00101c2 <Phys::physicalMemorySetup(unsigned int)+0x107>
c00102eb:	90                   	nop

c00102ec <Pipe::isAtty()>:
c00102ec:	31 c0                	xor    eax,eax
c00102ee:	c3                   	ret    
c00102ef:	90                   	nop

c00102f0 <Pipe::~Pipe()>:
c00102f0:	83 ec 0c             	sub    esp,0xc
c00102f3:	ba 0c a4 02 c0       	mov    edx,0xc002a40c
c00102f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102fc:	89 10                	mov    DWORD PTR [eax],edx
c00102fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010302:	83 ec 0c             	sub    esp,0xc
c0010305:	50                   	push   eax
c0010306:	e8 37 16 00 00       	call   c0011942 <UnixFile::~UnixFile()>
c001030b:	83 c4 10             	add    esp,0x10
c001030e:	90                   	nop
c001030f:	83 c4 0c             	add    esp,0xc
c0010312:	c3                   	ret    
c0010313:	90                   	nop

c0010314 <Pipe::~Pipe()>:
c0010314:	83 ec 0c             	sub    esp,0xc
c0010317:	83 ec 0c             	sub    esp,0xc
c001031a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001031e:	e8 cd ff ff ff       	call   c00102f0 <Pipe::~Pipe()>
c0010323:	83 c4 10             	add    esp,0x10
c0010326:	83 ec 08             	sub    esp,0x8
c0010329:	6a 20                	push   0x20
c001032b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001032f:	e8 5d 2b 00 00       	call   c0012e91 <operator delete(void*, unsigned long)>
c0010334:	83 c4 10             	add    esp,0x10
c0010337:	83 c4 0c             	add    esp,0xc
c001033a:	c3                   	ret    
c001033b:	90                   	nop

c001033c <Pipe::read(unsigned long long, void*, int*)>:
c001033c:	55                   	push   ebp
c001033d:	57                   	push   edi
c001033e:	56                   	push   esi
c001033f:	53                   	push   ebx
c0010340:	83 ec 1c             	sub    esp,0x1c
c0010343:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010347:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001034b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001034f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0010352:	89 c8                	mov    eax,ecx
c0010354:	99                   	cdq    
c0010355:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0010359:	74 19                	je     c0010374 <Pipe::read(unsigned long long, void*, int*)+0x38>
c001035b:	39 f9                	cmp    ecx,edi
c001035d:	89 d1                	mov    ecx,edx
c001035f:	19 f1                	sbb    ecx,esi
c0010361:	73 11                	jae    c0010374 <Pipe::read(unsigned long long, void*, int*)+0x38>
c0010363:	e8 e0 da 00 00       	call   c001de48 <lockScheduler()>
c0010368:	e8 17 de 00 00       	call   c001e184 <schedule()>
c001036d:	e8 d8 da 00 00       	call   c001de4a <unlockScheduler()>
c0010372:	eb db                	jmp    c001034f <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010374:	39 f8                	cmp    eax,edi
c0010376:	89 d1                	mov    ecx,edx
c0010378:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001037c:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0010380:	19 f1                	sbb    ecx,esi
c0010382:	73 08                	jae    c001038c <Pipe::read(unsigned long long, void*, int*)+0x50>
c0010384:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010388:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001038c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001038f:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010392:	29 c6                	sub    esi,eax
c0010394:	89 f1                	mov    ecx,esi
c0010396:	c1 f9 1f             	sar    ecx,0x1f
c0010399:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c001039d:	89 ca                	mov    edx,ecx
c001039f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00103a3:	19 d1                	sbb    ecx,edx
c00103a5:	73 04                	jae    c00103ab <Pipe::read(unsigned long long, void*, int*)+0x6f>
c00103a7:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00103ab:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00103af:	89 fd                	mov    ebp,edi
c00103b1:	29 f5                	sub    ebp,esi
c00103b3:	85 f6                	test   esi,esi
c00103b5:	74 12                	je     c00103c9 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c00103b7:	52                   	push   edx
c00103b8:	56                   	push   esi
c00103b9:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c00103bc:	50                   	push   eax
c00103bd:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00103c1:	e8 7e 03 ff ff       	call   c0000744 <memcpy>
c00103c6:	83 c4 10             	add    esp,0x10
c00103c9:	85 ed                	test   ebp,ebp
c00103cb:	74 12                	je     c00103df <Pipe::read(unsigned long long, void*, int*)+0xa3>
c00103cd:	50                   	push   eax
c00103ce:	55                   	push   ebp
c00103cf:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00103d2:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c00103d6:	56                   	push   esi
c00103d7:	e8 68 03 ff ff       	call   c0000744 <memcpy>
c00103dc:	83 c4 10             	add    esp,0x10
c00103df:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c00103e2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00103e5:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00103e8:	99                   	cdq    
c00103e9:	89 f7                	mov    edi,esi
c00103eb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00103ef:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00103f3:	c1 ff 1f             	sar    edi,0x1f
c00103f6:	57                   	push   edi
c00103f7:	56                   	push   esi
c00103f8:	52                   	push   edx
c00103f9:	50                   	push   eax
c00103fa:	e8 2d 67 01 00       	call   c0026b2c <__umoddi3>
c00103ff:	83 c4 10             	add    esp,0x10
c0010402:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0010405:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001040a:	75 10                	jne    c001041c <Pipe::read(unsigned long long, void*, int*)+0xe0>
c001040c:	83 ec 0c             	sub    esp,0xc
c001040f:	68 c9 a3 02 c0       	push   0xc002a3c9
c0010414:	e8 0a a2 00 00       	call   c001a623 <Krnl::panic(char const*)>
c0010419:	83 c4 10             	add    esp,0x10
c001041c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010420:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010424:	89 10                	mov    DWORD PTR [eax],edx
c0010426:	83 c4 1c             	add    esp,0x1c
c0010429:	31 c0                	xor    eax,eax
c001042b:	5b                   	pop    ebx
c001042c:	5e                   	pop    esi
c001042d:	5f                   	pop    edi
c001042e:	5d                   	pop    ebp
c001042f:	c3                   	ret    

c0010430 <Pipe::write(unsigned long long, void*, int*)>:
c0010430:	55                   	push   ebp
c0010431:	57                   	push   edi
c0010432:	56                   	push   esi
c0010433:	53                   	push   ebx
c0010434:	83 ec 1c             	sub    esp,0x1c
c0010437:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001043b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001043f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010443:	89 04 24             	mov    DWORD PTR [esp],eax
c0010446:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0010449:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c001044c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010450:	89 de                	mov    esi,ebx
c0010452:	89 df                	mov    edi,ebx
c0010454:	c1 ff 1f             	sar    edi,0x1f
c0010457:	01 c6                	add    esi,eax
c0010459:	89 c8                	mov    eax,ecx
c001045b:	11 d7                	adc    edi,edx
c001045d:	99                   	cdq    
c001045e:	39 f1                	cmp    ecx,esi
c0010460:	89 d0                	mov    eax,edx
c0010462:	19 f8                	sbb    eax,edi
c0010464:	b8 01 00 00 00       	mov    eax,0x1
c0010469:	0f 82 80 00 00 00    	jb     c00104ef <Pipe::write(unsigned long long, void*, int*)+0xbf>
c001046f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0010472:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0010475:	01 d8                	add    eax,ebx
c0010477:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001047b:	99                   	cdq    
c001047c:	f7 f9                	idiv   ecx
c001047e:	29 d1                	sub    ecx,edx
c0010480:	89 d7                	mov    edi,edx
c0010482:	89 c8                	mov    eax,ecx
c0010484:	99                   	cdq    
c0010485:	39 ce                	cmp    esi,ecx
c0010487:	19 d3                	sbb    ebx,edx
c0010489:	bb 00 00 00 00       	mov    ebx,0x0
c001048e:	72 04                	jb     c0010494 <Pipe::write(unsigned long long, void*, int*)+0x64>
c0010490:	89 f3                	mov    ebx,esi
c0010492:	29 cb                	sub    ebx,ecx
c0010494:	89 f1                	mov    ecx,esi
c0010496:	29 d9                	sub    ecx,ebx
c0010498:	74 1a                	je     c00104b4 <Pipe::write(unsigned long long, void*, int*)+0x84>
c001049a:	52                   	push   edx
c001049b:	51                   	push   ecx
c001049c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00104a0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00104a4:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00104a7:	57                   	push   edi
c00104a8:	e8 97 02 ff ff       	call   c0000744 <memcpy>
c00104ad:	83 c4 10             	add    esp,0x10
c00104b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00104b4:	85 db                	test   ebx,ebx
c00104b6:	74 12                	je     c00104ca <Pipe::write(unsigned long long, void*, int*)+0x9a>
c00104b8:	50                   	push   eax
c00104b9:	53                   	push   ebx
c00104ba:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c00104be:	51                   	push   ecx
c00104bf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00104c2:	e8 7d 02 ff ff       	call   c0000744 <memcpy>
c00104c7:	83 c4 10             	add    esp,0x10
c00104ca:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c00104cd:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00104d2:	75 10                	jne    c00104e4 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c00104d4:	83 ec 0c             	sub    esp,0xc
c00104d7:	68 e5 a3 02 c0       	push   0xc002a3e5
c00104dc:	e8 42 a1 00 00       	call   c001a623 <Krnl::panic(char const*)>
c00104e1:	83 c4 10             	add    esp,0x10
c00104e4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00104e8:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00104eb:	89 38                	mov    DWORD PTR [eax],edi
c00104ed:	31 c0                	xor    eax,eax
c00104ef:	83 c4 1c             	add    esp,0x1c
c00104f2:	5b                   	pop    ebx
c00104f3:	5e                   	pop    esi
c00104f4:	5f                   	pop    edi
c00104f5:	5d                   	pop    ebp
c00104f6:	c3                   	ret    
c00104f7:	90                   	nop

c00104f8 <Pipe::Pipe(int)>:
c00104f8:	83 ec 0c             	sub    esp,0xc
c00104fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104ff:	83 ec 08             	sub    esp,0x8
c0010502:	6a 00                	push   0x0
c0010504:	50                   	push   eax
c0010505:	e8 56 12 00 00       	call   c0011760 <UnixFile::UnixFile(int)>
c001050a:	83 c4 10             	add    esp,0x10
c001050d:	ba 0c a4 02 c0       	mov    edx,0xc002a40c
c0010512:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010516:	89 10                	mov    DWORD PTR [eax],edx
c0010518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001051c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010520:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010527:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c001052e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010532:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0010539:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001053d:	83 ec 0c             	sub    esp,0xc
c0010540:	50                   	push   eax
c0010541:	e8 fa f2 ff ff       	call   c000f840 <malloc>
c0010546:	83 c4 10             	add    esp,0x10
c0010549:	89 c2                	mov    edx,eax
c001054b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001054f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010552:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010556:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c001055a:	90                   	nop
c001055b:	83 c4 0c             	add    esp,0xc
c001055e:	c3                   	ret    
c001055f:	90                   	nop

c0010560 <VgaText::isAtty()>:
c0010560:	b0 01                	mov    al,0x1
c0010562:	c3                   	ret    
c0010563:	90                   	nop

c0010564 <VgaText::~VgaText()>:
c0010564:	83 ec 0c             	sub    esp,0xc
c0010567:	ba c8 a4 02 c0       	mov    edx,0xc002a4c8
c001056c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010570:	89 10                	mov    DWORD PTR [eax],edx
c0010572:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010576:	83 ec 0c             	sub    esp,0xc
c0010579:	50                   	push   eax
c001057a:	e8 c3 13 00 00       	call   c0011942 <UnixFile::~UnixFile()>
c001057f:	83 c4 10             	add    esp,0x10
c0010582:	90                   	nop
c0010583:	83 c4 0c             	add    esp,0xc
c0010586:	c3                   	ret    
c0010587:	90                   	nop

c0010588 <VgaText::~VgaText()>:
c0010588:	83 ec 0c             	sub    esp,0xc
c001058b:	83 ec 0c             	sub    esp,0xc
c001058e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010592:	e8 cd ff ff ff       	call   c0010564 <VgaText::~VgaText()>
c0010597:	83 c4 10             	add    esp,0x10
c001059a:	83 ec 08             	sub    esp,0x8
c001059d:	68 60 12 00 00       	push   0x1260
c00105a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105a6:	e8 e6 28 00 00       	call   c0012e91 <operator delete(void*, unsigned long)>
c00105ab:	83 c4 10             	add    esp,0x10
c00105ae:	83 c4 0c             	add    esp,0xc
c00105b1:	c3                   	ret    

c00105b2 <VgaText::read(unsigned long long, void*, int*)>:
c00105b2:	83 ec 10             	sub    esp,0x10
c00105b5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105b9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00105bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105c1:	e8 5e 5d 00 00       	call   c0016324 <readKeyboard(VgaText*, char*, unsigned long)>
c00105c6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00105ca:	89 02                	mov    DWORD PTR [edx],eax
c00105cc:	31 c0                	xor    eax,eax
c00105ce:	83 c4 1c             	add    esp,0x1c
c00105d1:	c3                   	ret    

c00105d2 <setTerminalScrollLock(bool)>:
c00105d2:	c3                   	ret    

c00105d3 <addToTerminalCycle(VgaText*)>:
c00105d3:	8b 15 20 e7 02 c0    	mov    edx,DWORD PTR ds:0xc002e720
c00105d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105dd:	85 d2                	test   edx,edx
c00105df:	75 0c                	jne    c00105ed <addToTerminalCycle(VgaText*)+0x1a>
c00105e1:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c00105e7:	a3 20 e7 02 c0       	mov    ds:0xc002e720,eax
c00105ec:	c3                   	ret    
c00105ed:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c00105f3:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c00105f9:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c00105ff:	c3                   	ret    

c0010600 <installVgaTextImplementation()>:
c0010600:	83 ec 10             	sub    esp,0x10
c0010603:	6a 20                	push   0x20
c0010605:	6a 00                	push   0x0
c0010607:	68 00 e7 02 c0       	push   0xc002e700
c001060c:	e8 67 01 ff ff       	call   c0000778 <memset>
c0010611:	83 c4 1c             	add    esp,0x1c
c0010614:	c3                   	ret    

c0010615 <scrollTerminalScrollLock(int)>:
c0010615:	c3                   	ret    

c0010616 <VgaText::load()>:
c0010616:	53                   	push   ebx
c0010617:	31 c0                	xor    eax,eax
c0010619:	83 ec 58             	sub    esp,0x58
c001061c:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0010620:	89 e2                	mov    edx,esp
c0010622:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c0010626:	40                   	inc    eax
c0010627:	83 f8 50             	cmp    eax,0x50
c001062a:	75 f6                	jne    c0010622 <VgaText::load()+0xc>
c001062c:	31 c0                	xor    eax,eax
c001062e:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c0010635:	84 c9                	test   cl,cl
c0010637:	74 06                	je     c001063f <VgaText::load()+0x29>
c0010639:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001063c:	40                   	inc    eax
c001063d:	eb ef                	jmp    c001062e <VgaText::load()+0x18>
c001063f:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c0010645:	85 c0                	test   eax,eax
c0010647:	74 09                	je     c0010652 <VgaText::load()+0x3c>
c0010649:	51                   	push   ecx
c001064a:	51                   	push   ecx
c001064b:	52                   	push   edx
c001064c:	53                   	push   ebx
c001064d:	ff d0                	call   eax
c001064f:	83 c4 10             	add    esp,0x10
c0010652:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c0010658:	85 c0                	test   eax,eax
c001065a:	74 09                	je     c0010665 <VgaText::load()+0x4f>
c001065c:	83 ec 0c             	sub    esp,0xc
c001065f:	53                   	push   ebx
c0010660:	ff d0                	call   eax
c0010662:	83 c4 10             	add    esp,0x10
c0010665:	83 c4 58             	add    esp,0x58
c0010668:	5b                   	pop    ebx
c0010669:	c3                   	ret    

c001066a <VgaText::updateCursor()>:
c001066a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001066e:	39 05 24 e7 02 c0    	cmp    DWORD PTR ds:0xc002e724,eax
c0010674:	75 0c                	jne    c0010682 <VgaText::updateCursor()+0x18>
c0010676:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c001067c:	85 c0                	test   eax,eax
c001067e:	74 02                	je     c0010682 <VgaText::updateCursor()+0x18>
c0010680:	ff e0                	jmp    eax
c0010682:	c3                   	ret    
c0010683:	90                   	nop

c0010684 <VgaText::showCursor(bool)>:
c0010684:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010688:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001068c:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c0010692:	c3                   	ret    
c0010693:	90                   	nop

c0010694 <VgaText::disableBlink(bool)>:
c0010694:	56                   	push   esi
c0010695:	53                   	push   ebx
c0010696:	51                   	push   ecx
c0010697:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001069b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001069f:	39 1d 24 e7 02 c0    	cmp    DWORD PTR ds:0xc002e724,ebx
c00106a5:	75 18                	jne    c00106bf <VgaText::disableBlink(bool)+0x2b>
c00106a7:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c00106ad:	85 c0                	test   eax,eax
c00106af:	74 0e                	je     c00106bf <VgaText::disableBlink(bool)+0x2b>
c00106b1:	89 f1                	mov    ecx,esi
c00106b3:	52                   	push   edx
c00106b4:	52                   	push   edx
c00106b5:	0f b6 d1             	movzx  edx,cl
c00106b8:	52                   	push   edx
c00106b9:	53                   	push   ebx
c00106ba:	ff d0                	call   eax
c00106bc:	83 c4 10             	add    esp,0x10
c00106bf:	89 f0                	mov    eax,esi
c00106c1:	83 f0 01             	xor    eax,0x1
c00106c4:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c00106ca:	58                   	pop    eax
c00106cb:	5b                   	pop    ebx
c00106cc:	5e                   	pop    esi
c00106cd:	c3                   	ret    

c00106ce <VgaText::doANSI_SGR(int)>:
c00106ce:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106d6:	85 d2                	test   edx,edx
c00106d8:	75 14                	jne    c00106ee <VgaText::doANSI_SGR(int)+0x20>
c00106da:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c00106e0:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00106e6:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c00106ec:	eb 65                	jmp    c0010753 <VgaText::doANSI_SGR(int)+0x85>
c00106ee:	83 fa 07             	cmp    edx,0x7
c00106f1:	75 14                	jne    c0010707 <VgaText::doANSI_SGR(int)+0x39>
c00106f3:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c00106f9:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c00106ff:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c0010705:	eb 4c                	jmp    c0010753 <VgaText::doANSI_SGR(int)+0x85>
c0010707:	83 fa 1b             	cmp    edx,0x1b
c001070a:	74 ce                	je     c00106da <VgaText::doANSI_SGR(int)+0xc>
c001070c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c001070f:	83 f9 07             	cmp    ecx,0x7
c0010712:	77 09                	ja     c001071d <VgaText::doANSI_SGR(int)+0x4f>
c0010714:	8b 14 8d a0 d5 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2a60]
c001071b:	eb 20                	jmp    c001073d <VgaText::doANSI_SGR(int)+0x6f>
c001071d:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010720:	83 f9 07             	cmp    ecx,0x7
c0010723:	77 09                	ja     c001072e <VgaText::doANSI_SGR(int)+0x60>
c0010725:	8b 14 8d a0 d5 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2a60]
c001072c:	eb 25                	jmp    c0010753 <VgaText::doANSI_SGR(int)+0x85>
c001072e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010731:	83 f9 07             	cmp    ecx,0x7
c0010734:	77 0e                	ja     c0010744 <VgaText::doANSI_SGR(int)+0x76>
c0010736:	8b 14 95 58 d4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2ba8]
c001073d:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010743:	c3                   	ret    
c0010744:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010747:	83 f9 07             	cmp    ecx,0x7
c001074a:	77 0d                	ja     c0010759 <VgaText::doANSI_SGR(int)+0x8b>
c001074c:	8b 14 95 30 d4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2bd0]
c0010753:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010759:	c3                   	ret    

c001075a <VgaText::setDefaultBgColour(VgaColour)>:
c001075a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001075e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010762:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c0010768:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c001076e:	c3                   	ret    
c001076f:	90                   	nop

c0010770 <VgaText::setDefaultFgColour(VgaColour)>:
c0010770:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010774:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010778:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c001077e:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010784:	c3                   	ret    
c0010785:	90                   	nop

c0010786 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010786:	53                   	push   ebx
c0010787:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001078b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001078f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010793:	51                   	push   ecx
c0010794:	e8 c1 ff ff ff       	call   c001075a <VgaText::setDefaultBgColour(VgaColour)>
c0010799:	58                   	pop    eax
c001079a:	5a                   	pop    edx
c001079b:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001079f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00107a3:	5b                   	pop    ebx
c00107a4:	eb ca                	jmp    c0010770 <VgaText::setDefaultFgColour(VgaColour)>

c00107a6 <VgaText::combineColours(unsigned char, unsigned char)>:
c00107a6:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00107aa:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00107af:	83 e0 0f             	and    eax,0xf
c00107b2:	c1 e2 04             	shl    edx,0x4
c00107b5:	09 d0                	or     eax,edx
c00107b7:	c3                   	ret    

c00107b8 <VgaText::scrollScreen()>:
c00107b8:	57                   	push   edi
c00107b9:	56                   	push   esi
c00107ba:	be 01 00 00 00       	mov    esi,0x1
c00107bf:	53                   	push   ebx
c00107c0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00107c4:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c00107ca:	31 ff                	xor    edi,edi
c00107cc:	01 d9                	add    ecx,ebx
c00107ce:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c00107d1:	83 fe 17             	cmp    esi,0x17
c00107d4:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c00107da:	75 28                	jne    c0010804 <VgaText::scrollScreen()+0x4c>
c00107dc:	f7 c7 01 00 00 00    	test   edi,0x1
c00107e2:	74 1c                	je     c0010800 <VgaText::scrollScreen()+0x48>
c00107e4:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c00107eb:	50                   	push   eax
c00107ec:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c00107f3:	50                   	push   eax
c00107f4:	e8 ad ff ff ff       	call   c00107a6 <VgaText::combineColours(unsigned char, unsigned char)>
c00107f9:	5a                   	pop    edx
c00107fa:	5a                   	pop    edx
c00107fb:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c00107fe:	eb 04                	jmp    c0010804 <VgaText::scrollScreen()+0x4c>
c0010800:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c0010804:	47                   	inc    edi
c0010805:	41                   	inc    ecx
c0010806:	81 ff a0 00 00 00    	cmp    edi,0xa0
c001080c:	75 c0                	jne    c00107ce <VgaText::scrollScreen()+0x16>
c001080e:	46                   	inc    esi
c001080f:	83 fe 18             	cmp    esi,0x18
c0010812:	75 b0                	jne    c00107c4 <VgaText::scrollScreen()+0xc>
c0010814:	39 1d 24 e7 02 c0    	cmp    DWORD PTR ds:0xc002e724,ebx
c001081a:	75 24                	jne    c0010840 <VgaText::scrollScreen()+0x88>
c001081c:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010823:	74 08                	je     c001082d <VgaText::scrollScreen()+0x75>
c0010825:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c001082b:	eb 13                	jmp    c0010840 <VgaText::scrollScreen()+0x88>
c001082d:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c0010833:	85 c0                	test   eax,eax
c0010835:	74 09                	je     c0010840 <VgaText::scrollScreen()+0x88>
c0010837:	83 ec 0c             	sub    esp,0xc
c001083a:	53                   	push   ebx
c001083b:	ff d0                	call   eax
c001083d:	83 c4 10             	add    esp,0x10
c0010840:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010844:	5b                   	pop    ebx
c0010845:	5e                   	pop    esi
c0010846:	5f                   	pop    edi
c0010847:	e9 1e fe ff ff       	jmp    c001066a <VgaText::updateCursor()>

c001084c <VgaText::combineCharAndColour(char, unsigned char)>:
c001084c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0010851:	c1 e0 08             	shl    eax,0x8
c0010854:	89 c2                	mov    edx,eax
c0010856:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001085b:	09 d0                	or     eax,edx
c001085d:	c3                   	ret    

c001085e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c001085e:	53                   	push   ebx
c001085f:	83 ec 08             	sub    esp,0x8
c0010862:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010866:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001086b:	50                   	push   eax
c001086c:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010871:	50                   	push   eax
c0010872:	e8 2f ff ff ff       	call   c00107a6 <VgaText::combineColours(unsigned char, unsigned char)>
c0010877:	5a                   	pop    edx
c0010878:	0f b6 c0             	movzx  eax,al
c001087b:	5b                   	pop    ebx
c001087c:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0010881:	50                   	push   eax
c0010882:	53                   	push   ebx
c0010883:	e8 c4 ff ff ff       	call   c001084c <VgaText::combineCharAndColour(char, unsigned char)>
c0010888:	5a                   	pop    edx
c0010889:	5a                   	pop    edx
c001088a:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010890:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010894:	0f b7 d2             	movzx  edx,dx
c0010897:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c001089c:	39 0d 24 e7 02 c0    	cmp    DWORD PTR ds:0xc002e724,ecx
c00108a2:	75 14                	jne    c00108b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c00108a4:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c00108aa:	85 c0                	test   eax,eax
c00108ac:	74 0a                	je     c00108b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c00108ae:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00108b2:	83 c4 08             	add    esp,0x8
c00108b5:	5b                   	pop    ebx
c00108b6:	ff e0                	jmp    eax
c00108b8:	83 c4 08             	add    esp,0x8
c00108bb:	5b                   	pop    ebx
c00108bc:	c3                   	ret    
c00108bd:	90                   	nop

c00108be <VgaText::getCursorX()>:
c00108be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108c2:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c00108c8:	c3                   	ret    
c00108c9:	90                   	nop

c00108ca <VgaText::getCursorY()>:
c00108ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108ce:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c00108d4:	c3                   	ret    
c00108d5:	90                   	nop

c00108d6 <VgaText::setCursor(int, int)>:
c00108d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108da:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00108de:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c00108e4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00108e8:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c00108ee:	e9 77 fd ff ff       	jmp    c001066a <VgaText::updateCursor()>
c00108f3:	90                   	nop

c00108f4 <VgaText::setCursorX(int)>:
c00108f4:	83 ec 10             	sub    esp,0x10
c00108f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108fb:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c0010901:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010905:	50                   	push   eax
c0010906:	e8 cb ff ff ff       	call   c00108d6 <VgaText::setCursor(int, int)>
c001090b:	83 c4 1c             	add    esp,0x1c
c001090e:	c3                   	ret    
c001090f:	90                   	nop

c0010910 <VgaText::setCursorY(int)>:
c0010910:	83 ec 10             	sub    esp,0x10
c0010913:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010917:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001091b:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c0010921:	50                   	push   eax
c0010922:	e8 af ff ff ff       	call   c00108d6 <VgaText::setCursor(int, int)>
c0010927:	83 c4 1c             	add    esp,0x1c
c001092a:	c3                   	ret    
c001092b:	90                   	nop

c001092c <VgaText::incrementCursor(bool)>:
c001092c:	56                   	push   esi
c001092d:	53                   	push   ebx
c001092e:	51                   	push   ecx
c001092f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010933:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010937:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c001093d:	40                   	inc    eax
c001093e:	83 f8 50             	cmp    eax,0x50
c0010941:	74 08                	je     c001094b <VgaText::incrementCursor(bool)+0x1f>
c0010943:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c0010949:	eb 33                	jmp    c001097e <VgaText::incrementCursor(bool)+0x52>
c001094b:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010951:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c001095b:	8d 50 01             	lea    edx,[eax+0x1]
c001095e:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010964:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c001096a:	75 12                	jne    c001097e <VgaText::incrementCursor(bool)+0x52>
c001096c:	83 ec 0c             	sub    esp,0xc
c001096f:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010975:	53                   	push   ebx
c0010976:	e8 3d fe ff ff       	call   c00107b8 <VgaText::scrollScreen()>
c001097b:	83 c4 10             	add    esp,0x10
c001097e:	89 f0                	mov    eax,esi
c0010980:	84 c0                	test   al,al
c0010982:	74 0c                	je     c0010990 <VgaText::incrementCursor(bool)+0x64>
c0010984:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010988:	5a                   	pop    edx
c0010989:	5b                   	pop    ebx
c001098a:	5e                   	pop    esi
c001098b:	e9 da fc ff ff       	jmp    c001066a <VgaText::updateCursor()>
c0010990:	58                   	pop    eax
c0010991:	5b                   	pop    ebx
c0010992:	5e                   	pop    esi
c0010993:	c3                   	ret    

c0010994 <VgaText::updateRAMUsageDisplay(int)>:
c0010994:	56                   	push   esi
c0010995:	8b 35 80 d5 02 c0    	mov    esi,DWORD PTR ds:0xc002d580
c001099b:	53                   	push   ebx
c001099c:	bb 0a 00 00 00       	mov    ebx,0xa
c00109a1:	6a 0f                	push   0xf
c00109a3:	6a 00                	push   0x0
c00109a5:	e8 fc fd ff ff       	call   c00107a6 <VgaText::combineColours(unsigned char, unsigned char)>
c00109aa:	5a                   	pop    edx
c00109ab:	59                   	pop    ecx
c00109ac:	0f b6 c8             	movzx  ecx,al
c00109af:	51                   	push   ecx
c00109b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109b4:	99                   	cdq    
c00109b5:	f7 fb                	idiv   ebx
c00109b7:	89 d3                	mov    ebx,edx
c00109b9:	83 c0 30             	add    eax,0x30
c00109bc:	83 c3 30             	add    ebx,0x30
c00109bf:	0f be c0             	movsx  eax,al
c00109c2:	0f b6 db             	movzx  ebx,bl
c00109c5:	50                   	push   eax
c00109c6:	e8 81 fe ff ff       	call   c001084c <VgaText::combineCharAndColour(char, unsigned char)>
c00109cb:	5a                   	pop    edx
c00109cc:	5a                   	pop    edx
c00109cd:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c00109d4:	51                   	push   ecx
c00109d5:	53                   	push   ebx
c00109d6:	e8 71 fe ff ff       	call   c001084c <VgaText::combineCharAndColour(char, unsigned char)>
c00109db:	5b                   	pop    ebx
c00109dc:	5a                   	pop    edx
c00109dd:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c00109e4:	51                   	push   ecx
c00109e5:	6a 25                	push   0x25
c00109e7:	e8 60 fe ff ff       	call   c001084c <VgaText::combineCharAndColour(char, unsigned char)>
c00109ec:	59                   	pop    ecx
c00109ed:	5b                   	pop    ebx
c00109ee:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c00109f5:	5b                   	pop    ebx
c00109f6:	5e                   	pop    esi
c00109f7:	c3                   	ret    

c00109f8 <VgaText::updateDiskUsage()>:
c00109f8:	55                   	push   ebp
c00109f9:	bd 10 27 00 00       	mov    ebp,0x2710
c00109fe:	57                   	push   edi
c00109ff:	8b 3d 80 d5 02 c0    	mov    edi,DWORD PTR ds:0xc002d580
c0010a05:	56                   	push   esi
c0010a06:	53                   	push   ebx
c0010a07:	6a 0f                	push   0xf
c0010a09:	6a 00                	push   0x0
c0010a0b:	e8 96 fd ff ff       	call   c00107a6 <VgaText::combineColours(unsigned char, unsigned char)>
c0010a10:	5a                   	pop    edx
c0010a11:	0f b6 d8             	movzx  ebx,al
c0010a14:	59                   	pop    ecx
c0010a15:	8b 35 a8 29 03 c0    	mov    esi,DWORD PTR ds:0xc00329a8
c0010a1b:	53                   	push   ebx
c0010a1c:	b9 0a 00 00 00       	mov    ecx,0xa
c0010a21:	89 f0                	mov    eax,esi
c0010a23:	99                   	cdq    
c0010a24:	f7 fd                	idiv   ebp
c0010a26:	99                   	cdq    
c0010a27:	f7 f9                	idiv   ecx
c0010a29:	8d 42 30             	lea    eax,[edx+0x30]
c0010a2c:	0f b6 c0             	movzx  eax,al
c0010a2f:	50                   	push   eax
c0010a30:	e8 17 fe ff ff       	call   c001084c <VgaText::combineCharAndColour(char, unsigned char)>
c0010a35:	5d                   	pop    ebp
c0010a36:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010a3b:	5a                   	pop    edx
c0010a3c:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c0010a40:	53                   	push   ebx
c0010a41:	89 f0                	mov    eax,esi
c0010a43:	99                   	cdq    
c0010a44:	f7 fd                	idiv   ebp
c0010a46:	99                   	cdq    
c0010a47:	f7 f9                	idiv   ecx
c0010a49:	8d 42 30             	lea    eax,[edx+0x30]
c0010a4c:	0f b6 c0             	movzx  eax,al
c0010a4f:	50                   	push   eax
c0010a50:	e8 f7 fd ff ff       	call   c001084c <VgaText::combineCharAndColour(char, unsigned char)>
c0010a55:	5d                   	pop    ebp
c0010a56:	bd 64 00 00 00       	mov    ebp,0x64
c0010a5b:	5a                   	pop    edx
c0010a5c:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c0010a63:	53                   	push   ebx
c0010a64:	89 f0                	mov    eax,esi
c0010a66:	99                   	cdq    
c0010a67:	f7 fd                	idiv   ebp
c0010a69:	99                   	cdq    
c0010a6a:	f7 f9                	idiv   ecx
c0010a6c:	8d 42 30             	lea    eax,[edx+0x30]
c0010a6f:	0f b6 c0             	movzx  eax,al
c0010a72:	50                   	push   eax
c0010a73:	e8 d4 fd ff ff       	call   c001084c <VgaText::combineCharAndColour(char, unsigned char)>
c0010a78:	5d                   	pop    ebp
c0010a79:	5a                   	pop    edx
c0010a7a:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c0010a81:	53                   	push   ebx
c0010a82:	89 f0                	mov    eax,esi
c0010a84:	99                   	cdq    
c0010a85:	f7 f9                	idiv   ecx
c0010a87:	89 d6                	mov    esi,edx
c0010a89:	99                   	cdq    
c0010a8a:	f7 f9                	idiv   ecx
c0010a8c:	8d 42 30             	lea    eax,[edx+0x30]
c0010a8f:	0f b6 c0             	movzx  eax,al
c0010a92:	50                   	push   eax
c0010a93:	e8 b4 fd ff ff       	call   c001084c <VgaText::combineCharAndColour(char, unsigned char)>
c0010a98:	5d                   	pop    ebp
c0010a99:	5a                   	pop    edx
c0010a9a:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010aa1:	53                   	push   ebx
c0010aa2:	8d 46 30             	lea    eax,[esi+0x30]
c0010aa5:	0f b6 f0             	movzx  esi,al
c0010aa8:	56                   	push   esi
c0010aa9:	e8 9e fd ff ff       	call   c001084c <VgaText::combineCharAndColour(char, unsigned char)>
c0010aae:	5e                   	pop    esi
c0010aaf:	8b 35 a4 29 03 c0    	mov    esi,DWORD PTR ds:0xc00329a4
c0010ab5:	5d                   	pop    ebp
c0010ab6:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010abd:	bd 10 27 00 00       	mov    ebp,0x2710
c0010ac2:	53                   	push   ebx
c0010ac3:	89 f0                	mov    eax,esi
c0010ac5:	99                   	cdq    
c0010ac6:	f7 fd                	idiv   ebp
c0010ac8:	99                   	cdq    
c0010ac9:	f7 f9                	idiv   ecx
c0010acb:	8d 42 30             	lea    eax,[edx+0x30]
c0010ace:	0f b6 c0             	movzx  eax,al
c0010ad1:	50                   	push   eax
c0010ad2:	e8 75 fd ff ff       	call   c001084c <VgaText::combineCharAndColour(char, unsigned char)>
c0010ad7:	5a                   	pop    edx
c0010ad8:	5d                   	pop    ebp
c0010ad9:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010ae0:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010ae5:	53                   	push   ebx
c0010ae6:	89 f0                	mov    eax,esi
c0010ae8:	99                   	cdq    
c0010ae9:	f7 fd                	idiv   ebp
c0010aeb:	99                   	cdq    
c0010aec:	f7 f9                	idiv   ecx
c0010aee:	8d 42 30             	lea    eax,[edx+0x30]
c0010af1:	0f b6 c0             	movzx  eax,al
c0010af4:	50                   	push   eax
c0010af5:	e8 52 fd ff ff       	call   c001084c <VgaText::combineCharAndColour(char, unsigned char)>
c0010afa:	5a                   	pop    edx
c0010afb:	5d                   	pop    ebp
c0010afc:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010b03:	bd 64 00 00 00       	mov    ebp,0x64
c0010b08:	53                   	push   ebx
c0010b09:	89 f0                	mov    eax,esi
c0010b0b:	99                   	cdq    
c0010b0c:	f7 fd                	idiv   ebp
c0010b0e:	99                   	cdq    
c0010b0f:	f7 f9                	idiv   ecx
c0010b11:	83 c2 30             	add    edx,0x30
c0010b14:	0f b6 d2             	movzx  edx,dl
c0010b17:	52                   	push   edx
c0010b18:	e8 2f fd ff ff       	call   c001084c <VgaText::combineCharAndColour(char, unsigned char)>
c0010b1d:	5a                   	pop    edx
c0010b1e:	5d                   	pop    ebp
c0010b1f:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010b26:	53                   	push   ebx
c0010b27:	89 f0                	mov    eax,esi
c0010b29:	99                   	cdq    
c0010b2a:	f7 f9                	idiv   ecx
c0010b2c:	89 d6                	mov    esi,edx
c0010b2e:	99                   	cdq    
c0010b2f:	f7 f9                	idiv   ecx
c0010b31:	8d 42 30             	lea    eax,[edx+0x30]
c0010b34:	0f b6 c0             	movzx  eax,al
c0010b37:	50                   	push   eax
c0010b38:	e8 0f fd ff ff       	call   c001084c <VgaText::combineCharAndColour(char, unsigned char)>
c0010b3d:	5a                   	pop    edx
c0010b3e:	59                   	pop    ecx
c0010b3f:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010b46:	53                   	push   ebx
c0010b47:	8d 46 30             	lea    eax,[esi+0x30]
c0010b4a:	0f b6 f0             	movzx  esi,al
c0010b4d:	56                   	push   esi
c0010b4e:	e8 f9 fc ff ff       	call   c001084c <VgaText::combineCharAndColour(char, unsigned char)>
c0010b53:	5b                   	pop    ebx
c0010b54:	5e                   	pop    esi
c0010b55:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010b5c:	5b                   	pop    ebx
c0010b5d:	5e                   	pop    esi
c0010b5e:	5f                   	pop    edi
c0010b5f:	5d                   	pop    ebp
c0010b60:	c3                   	ret    
c0010b61:	90                   	nop

c0010b62 <VgaText::updateTitle()>:
c0010b62:	53                   	push   ebx
c0010b63:	31 c0                	xor    eax,eax
c0010b65:	83 ec 58             	sub    esp,0x58
c0010b68:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010b6c:	89 e1                	mov    ecx,esp
c0010b6e:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010b72:	40                   	inc    eax
c0010b73:	83 f8 50             	cmp    eax,0x50
c0010b76:	75 f6                	jne    c0010b6e <VgaText::updateTitle()+0xc>
c0010b78:	31 c0                	xor    eax,eax
c0010b7a:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010b81:	84 db                	test   bl,bl
c0010b83:	74 06                	je     c0010b8b <VgaText::updateTitle()+0x29>
c0010b85:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010b88:	40                   	inc    eax
c0010b89:	eb ef                	jmp    c0010b7a <VgaText::updateTitle()+0x18>
c0010b8b:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010b91:	85 c0                	test   eax,eax
c0010b93:	74 09                	je     c0010b9e <VgaText::updateTitle()+0x3c>
c0010b95:	53                   	push   ebx
c0010b96:	53                   	push   ebx
c0010b97:	51                   	push   ecx
c0010b98:	52                   	push   edx
c0010b99:	ff d0                	call   eax
c0010b9b:	83 c4 10             	add    esp,0x10
c0010b9e:	e8 55 fe ff ff       	call   c00109f8 <VgaText::updateDiskUsage()>
c0010ba3:	83 c4 58             	add    esp,0x58
c0010ba6:	5b                   	pop    ebx
c0010ba7:	c3                   	ret    

c0010ba8 <VgaText::setTitleTextColour(VgaColour)>:
c0010ba8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010bac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010bb0:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c0010bb6:	eb aa                	jmp    c0010b62 <VgaText::updateTitle()>

c0010bb8 <VgaText::setTitleColour(VgaColour)>:
c0010bb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010bbc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010bc0:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010bc6:	eb 9a                	jmp    c0010b62 <VgaText::updateTitle()>

c0010bc8 <VgaText::setTitle(char*)>:
c0010bc8:	53                   	push   ebx
c0010bc9:	83 ec 10             	sub    esp,0x10
c0010bcc:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010bd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bd4:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c0010bda:	50                   	push   eax
c0010bdb:	e8 54 fc fe ff       	call   c0000834 <strcpy>
c0010be0:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010be4:	83 c4 18             	add    esp,0x18
c0010be7:	5b                   	pop    ebx
c0010be8:	e9 75 ff ff ff       	jmp    c0010b62 <VgaText::updateTitle()>
c0010bed:	90                   	nop

c0010bee <VgaText::decrementCursor(bool)>:
c0010bee:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010bf2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010bf6:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c0010bfc:	85 c0                	test   eax,eax
c0010bfe:	74 07                	je     c0010c07 <VgaText::decrementCursor(bool)+0x19>
c0010c00:	48                   	dec    eax
c0010c01:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010c07:	84 c9                	test   cl,cl
c0010c09:	74 09                	je     c0010c14 <VgaText::decrementCursor(bool)+0x26>
c0010c0b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010c0f:	e9 56 fa ff ff       	jmp    c001066a <VgaText::updateCursor()>
c0010c14:	c3                   	ret    
c0010c15:	90                   	nop

c0010c16 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010c16:	53                   	push   ebx
c0010c17:	83 ec 08             	sub    esp,0x8
c0010c1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010c1e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c22:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010c26:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010c2a:	3c 07                	cmp    al,0x7
c0010c2c:	75 2a                	jne    c0010c58 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010c2e:	a1 d0 e7 02 c0       	mov    eax,ds:0xc002e7d0
c0010c33:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010c3b:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010c43:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010c4b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010c4f:	83 c4 08             	add    esp,0x8
c0010c52:	5b                   	pop    ebx
c0010c53:	e9 18 31 00 00       	jmp    c0013d70 <Buzzer::beep(int, int, bool)>
c0010c58:	3c 0d                	cmp    al,0xd
c0010c5a:	75 0c                	jne    c0010c68 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010c5c:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c66:	eb 3b                	jmp    c0010ca3 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010c68:	3c 0a                	cmp    al,0xa
c0010c6a:	75 40                	jne    c0010cac <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010c6c:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010c72:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c7c:	8d 50 01             	lea    edx,[eax+0x1]
c0010c7f:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010c85:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010c8b:	75 12                	jne    c0010c9f <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010c8d:	83 ec 0c             	sub    esp,0xc
c0010c90:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010c96:	53                   	push   ebx
c0010c97:	e8 1c fb ff ff       	call   c00107b8 <VgaText::scrollScreen()>
c0010c9c:	83 c4 10             	add    esp,0x10
c0010c9f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010ca3:	83 c4 08             	add    esp,0x8
c0010ca6:	5b                   	pop    ebx
c0010ca7:	e9 be f9 ff ff       	jmp    c001066a <VgaText::updateCursor()>
c0010cac:	3c 08                	cmp    al,0x8
c0010cae:	75 31                	jne    c0010ce1 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010cb0:	50                   	push   eax
c0010cb1:	50                   	push   eax
c0010cb2:	6a 01                	push   0x1
c0010cb4:	53                   	push   ebx
c0010cb5:	e8 34 ff ff ff       	call   c0010bee <VgaText::decrementCursor(bool)>
c0010cba:	5a                   	pop    edx
c0010cbb:	59                   	pop    ecx
c0010cbc:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010cc2:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010cc8:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010cce:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010cd4:	6a 20                	push   0x20
c0010cd6:	53                   	push   ebx
c0010cd7:	e8 82 fb ff ff       	call   c001085e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010cdc:	83 c4 28             	add    esp,0x28
c0010cdf:	5b                   	pop    ebx
c0010ce0:	c3                   	ret    
c0010ce1:	83 ec 08             	sub    esp,0x8
c0010ce4:	0f be c0             	movsx  eax,al
c0010ce7:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010ced:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010cf3:	51                   	push   ecx
c0010cf4:	52                   	push   edx
c0010cf5:	50                   	push   eax
c0010cf6:	53                   	push   ebx
c0010cf7:	e8 62 fb ff ff       	call   c001085e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010cfc:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010d00:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010d08:	83 c4 28             	add    esp,0x28
c0010d0b:	5b                   	pop    ebx
c0010d0c:	e9 1b fc ff ff       	jmp    c001092c <VgaText::incrementCursor(bool)>
c0010d11:	90                   	nop

c0010d12 <VgaText::isShowingCursor()>:
c0010d12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d16:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010d1c:	c3                   	ret    
c0010d1d:	90                   	nop

c0010d1e <VgaText::isBlinkDisabled()>:
c0010d1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d22:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010d28:	83 f0 01             	xor    eax,0x1
c0010d2b:	c3                   	ret    

c0010d2c <VgaText::setCursorHeight(int)>:
c0010d2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d30:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010d34:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010d3a:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010d41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010d45:	e9 3a f9 ff ff       	jmp    c0010684 <VgaText::showCursor(bool)>

c0010d4a <VgaText::getCursorHeight()>:
c0010d4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d4e:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010d54:	c3                   	ret    

c0010d55 <setActiveTerminal(VgaText*)>:
c0010d55:	53                   	push   ebx
c0010d56:	83 ec 08             	sub    esp,0x8
c0010d59:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d5d:	85 db                	test   ebx,ebx
c0010d5f:	75 11                	jne    c0010d72 <setActiveTerminal(VgaText*)+0x1d>
c0010d61:	c7 44 24 10 20 a4 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a420
c0010d69:	83 c4 08             	add    esp,0x8
c0010d6c:	5b                   	pop    ebx
c0010d6d:	e9 b1 98 00 00       	jmp    c001a623 <Krnl::panic(char const*)>
c0010d72:	50                   	push   eax
c0010d73:	50                   	push   eax
c0010d74:	53                   	push   ebx
c0010d75:	68 2e a4 02 c0       	push   0xc002a42e
c0010d7a:	e8 f2 21 00 00       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0010d7f:	a1 24 e7 02 c0       	mov    eax,ds:0xc002e724
c0010d84:	83 c4 10             	add    esp,0x10
c0010d87:	85 c0                	test   eax,eax
c0010d89:	74 0c                	je     c0010d97 <setActiveTerminal(VgaText*)+0x42>
c0010d8b:	83 ec 0c             	sub    esp,0xc
c0010d8e:	50                   	push   eax
c0010d8f:	e8 d6 f8 ff ff       	call   c001066a <VgaText::updateCursor()>
c0010d94:	83 c4 10             	add    esp,0x10
c0010d97:	89 1d 24 e7 02 c0    	mov    DWORD PTR ds:0xc002e724,ebx
c0010d9d:	51                   	push   ecx
c0010d9e:	51                   	push   ecx
c0010d9f:	53                   	push   ebx
c0010da0:	68 46 a4 02 c0       	push   0xc002a446
c0010da5:	e8 c7 21 00 00       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0010daa:	83 c4 0c             	add    esp,0xc
c0010dad:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010db3:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010db9:	53                   	push   ebx
c0010dba:	e8 17 fb ff ff       	call   c00108d6 <VgaText::setCursor(int, int)>
c0010dbf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010dc2:	e8 57 ff ff ff       	call   c0010d1e <VgaText::isBlinkDisabled()>
c0010dc7:	5a                   	pop    edx
c0010dc8:	0f b6 c0             	movzx  eax,al
c0010dcb:	59                   	pop    ecx
c0010dcc:	50                   	push   eax
c0010dcd:	53                   	push   ebx
c0010dce:	e8 c1 f8 ff ff       	call   c0010694 <VgaText::disableBlink(bool)>
c0010dd3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010dd6:	e8 6f ff ff ff       	call   c0010d4a <VgaText::getCursorHeight()>
c0010ddb:	5a                   	pop    edx
c0010ddc:	59                   	pop    ecx
c0010ddd:	50                   	push   eax
c0010dde:	53                   	push   ebx
c0010ddf:	e8 48 ff ff ff       	call   c0010d2c <VgaText::setCursorHeight(int)>
c0010de4:	83 c4 10             	add    esp,0x10
c0010de7:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010dee:	75 0a                	jne    c0010dfa <setActiveTerminal(VgaText*)+0xa5>
c0010df0:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010dfa:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010dfe:	83 c4 08             	add    esp,0x8
c0010e01:	5b                   	pop    ebx
c0010e02:	e9 0f f8 ff ff       	jmp    c0010616 <VgaText::load()>

c0010e07 <doTerminalCycle()>:
c0010e07:	83 ec 18             	sub    esp,0x18
c0010e0a:	a1 20 e7 02 c0       	mov    eax,ds:0xc002e720
c0010e0f:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010e15:	50                   	push   eax
c0010e16:	a3 20 e7 02 c0       	mov    ds:0xc002e720,eax
c0010e1b:	e8 35 ff ff ff       	call   c0010d55 <setActiveTerminal(VgaText*)>
c0010e20:	83 c4 1c             	add    esp,0x1c
c0010e23:	c3                   	ret    

c0010e24 <VgaText::doUpdate()>:
c0010e24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e28:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010e2e:	85 c0                	test   eax,eax
c0010e30:	74 02                	je     c0010e34 <VgaText::doUpdate()+0x10>
c0010e32:	ff e0                	jmp    eax
c0010e34:	c3                   	ret    
c0010e35:	90                   	nop

c0010e36 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010e36:	55                   	push   ebp
c0010e37:	57                   	push   edi
c0010e38:	56                   	push   esi
c0010e39:	53                   	push   ebx
c0010e3a:	83 ec 1c             	sub    esp,0x1c
c0010e3d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010e41:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010e46:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010e4d:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010e50:	50                   	push   eax
c0010e51:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010e56:	50                   	push   eax
c0010e57:	e8 4a f9 ff ff       	call   c00107a6 <VgaText::combineColours(unsigned char, unsigned char)>
c0010e5c:	59                   	pop    ecx
c0010e5d:	0f b6 c0             	movzx  eax,al
c0010e60:	5b                   	pop    ebx
c0010e61:	31 c9                	xor    ecx,ecx
c0010e63:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010e6b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010e6f:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010e75:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010e79:	0f b7 db             	movzx  ebx,bx
c0010e7c:	01 db                	add    ebx,ebx
c0010e7e:	01 fb                	add    ebx,edi
c0010e80:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010e83:	84 c0                	test   al,al
c0010e85:	0f 84 38 01 00 00    	je     c0010fc3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010e8b:	3c 0d                	cmp    al,0xd
c0010e8d:	75 0f                	jne    c0010e9e <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010e8f:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e99:	e9 1f 01 00 00       	jmp    c0010fbd <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010e9e:	3c 0a                	cmp    al,0xa
c0010ea0:	75 5b                	jne    c0010efd <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010ea2:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010ea8:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010eb2:	8d 48 01             	lea    ecx,[eax+0x1]
c0010eb5:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010ebb:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010ec1:	75 12                	jne    c0010ed5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010ec3:	83 ec 0c             	sub    esp,0xc
c0010ec6:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010ecc:	55                   	push   ebp
c0010ecd:	e8 e6 f8 ff ff       	call   c00107b8 <VgaText::scrollScreen()>
c0010ed2:	83 c4 10             	add    esp,0x10
c0010ed5:	83 ec 0c             	sub    esp,0xc
c0010ed8:	55                   	push   ebp
c0010ed9:	e8 8c f7 ff ff       	call   c001066a <VgaText::updateCursor()>
c0010ede:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010ee6:	83 c4 10             	add    esp,0x10
c0010ee9:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010eef:	31 c9                	xor    ecx,ecx
c0010ef1:	0f b7 db             	movzx  ebx,bx
c0010ef4:	01 db                	add    ebx,ebx
c0010ef6:	01 fb                	add    ebx,edi
c0010ef8:	e9 c0 00 00 00       	jmp    c0010fbd <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010efd:	3c 08                	cmp    al,0x8
c0010eff:	75 4e                	jne    c0010f4f <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010f01:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010f05:	53                   	push   ebx
c0010f06:	53                   	push   ebx
c0010f07:	6a 01                	push   0x1
c0010f09:	55                   	push   ebp
c0010f0a:	e8 df fc ff ff       	call   c0010bee <VgaText::decrementCursor(bool)>
c0010f0f:	58                   	pop    eax
c0010f10:	5a                   	pop    edx
c0010f11:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010f17:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010f1d:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010f23:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010f29:	6a 20                	push   0x20
c0010f2b:	55                   	push   ebp
c0010f2c:	e8 2d f9 ff ff       	call   c001085e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010f31:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f39:	83 c4 20             	add    esp,0x20
c0010f3c:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010f42:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010f46:	0f b7 db             	movzx  ebx,bx
c0010f49:	01 db                	add    ebx,ebx
c0010f4b:	01 fb                	add    ebx,edi
c0010f4d:	eb 6e                	jmp    c0010fbd <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010f4f:	51                   	push   ecx
c0010f50:	51                   	push   ecx
c0010f51:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010f55:	50                   	push   eax
c0010f56:	e8 f1 f8 ff ff       	call   c001084c <VgaText::combineCharAndColour(char, unsigned char)>
c0010f5b:	83 c4 10             	add    esp,0x10
c0010f5e:	66 89 03             	mov    WORD PTR [ebx],ax
c0010f61:	39 2d 24 e7 02 c0    	cmp    DWORD PTR ds:0xc002e724,ebp
c0010f67:	75 2a                	jne    c0010f93 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f69:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010f6f:	85 c0                	test   eax,eax
c0010f71:	74 20                	je     c0010f93 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f73:	52                   	push   edx
c0010f74:	52                   	push   edx
c0010f75:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010f7b:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010f81:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f85:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f89:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010f8c:	51                   	push   ecx
c0010f8d:	55                   	push   ebp
c0010f8e:	ff d0                	call   eax
c0010f90:	83 c4 20             	add    esp,0x20
c0010f93:	83 c3 02             	add    ebx,0x2
c0010f96:	50                   	push   eax
c0010f97:	50                   	push   eax
c0010f98:	6a 00                	push   0x0
c0010f9a:	55                   	push   ebp
c0010f9b:	e8 8c f9 ff ff       	call   c001092c <VgaText::incrementCursor(bool)>
c0010fa0:	83 c4 10             	add    esp,0x10
c0010fa3:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010faa:	75 0f                	jne    c0010fbb <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010fac:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010fb4:	0f b7 db             	movzx  ebx,bx
c0010fb7:	01 db                	add    ebx,ebx
c0010fb9:	01 fb                	add    ebx,edi
c0010fbb:	b1 01                	mov    cl,0x1
c0010fbd:	46                   	inc    esi
c0010fbe:	e9 bd fe ff ff       	jmp    c0010e80 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010fc3:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010fc7:	83 ec 0c             	sub    esp,0xc
c0010fca:	55                   	push   ebp
c0010fcb:	e8 9a f6 ff ff       	call   c001066a <VgaText::updateCursor()>
c0010fd0:	83 c4 10             	add    esp,0x10
c0010fd3:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010fd7:	84 c9                	test   cl,cl
c0010fd9:	74 0c                	je     c0010fe7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010fdb:	83 ec 0c             	sub    esp,0xc
c0010fde:	55                   	push   ebp
c0010fdf:	e8 40 fe ff ff       	call   c0010e24 <VgaText::doUpdate()>
c0010fe4:	83 c4 10             	add    esp,0x10
c0010fe7:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010fee:	83 c4 1c             	add    esp,0x1c
c0010ff1:	5b                   	pop    ebx
c0010ff2:	5e                   	pop    esi
c0010ff3:	5f                   	pop    edi
c0010ff4:	5d                   	pop    ebp
c0010ff5:	c3                   	ret    

c0010ff6 <VgaText::clearScreen()>:
c0010ff6:	57                   	push   edi
c0010ff7:	56                   	push   esi
c0010ff8:	31 f6                	xor    esi,esi
c0010ffa:	53                   	push   ebx
c0010ffb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010fff:	52                   	push   edx
c0011000:	6a 00                	push   0x0
c0011002:	6a 00                	push   0x0
c0011004:	53                   	push   ebx
c0011005:	e8 cc f8 ff ff       	call   c00108d6 <VgaText::setCursor(int, int)>
c001100a:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0011011:	83 c4 10             	add    esp,0x10
c0011014:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c001101a:	7e 26                	jle    c0011042 <VgaText::clearScreen()+0x4c>
c001101c:	31 ff                	xor    edi,edi
c001101e:	50                   	push   eax
c001101f:	50                   	push   eax
c0011020:	56                   	push   esi
c0011021:	57                   	push   edi
c0011022:	47                   	inc    edi
c0011023:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0011029:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c001102f:	6a 20                	push   0x20
c0011031:	53                   	push   ebx
c0011032:	e8 27 f8 ff ff       	call   c001085e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0011037:	83 c4 20             	add    esp,0x20
c001103a:	83 ff 50             	cmp    edi,0x50
c001103d:	75 df                	jne    c001101e <VgaText::clearScreen()+0x28>
c001103f:	46                   	inc    esi
c0011040:	eb d2                	jmp    c0011014 <VgaText::clearScreen()+0x1e>
c0011042:	83 ec 0c             	sub    esp,0xc
c0011045:	53                   	push   ebx
c0011046:	e8 d9 fd ff ff       	call   c0010e24 <VgaText::doUpdate()>
c001104b:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0011052:	83 c4 10             	add    esp,0x10
c0011055:	5b                   	pop    ebx
c0011056:	5e                   	pop    esi
c0011057:	5f                   	pop    edi
c0011058:	c3                   	ret    
c0011059:	90                   	nop

c001105a <VgaText::putchar(char)>:
c001105a:	56                   	push   esi
c001105b:	53                   	push   ebx
c001105c:	83 ec 14             	sub    esp,0x14
c001105f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011063:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011067:	3c 5b                	cmp    al,0x5b
c0011069:	75 21                	jne    c001108c <VgaText::putchar(char)+0x32>
c001106b:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c0011072:	74 28                	je     c001109c <VgaText::putchar(char)+0x42>
c0011074:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c001107d:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c0011087:	e9 e2 00 00 00       	jmp    c001116e <VgaText::putchar(char)+0x114>
c001108c:	3c 1b                	cmp    al,0x1b
c001108e:	75 0c                	jne    c001109c <VgaText::putchar(char)+0x42>
c0011090:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c0011097:	e9 d2 00 00 00       	jmp    c001116e <VgaText::putchar(char)+0x114>
c001109c:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c00110a2:	84 c9                	test   cl,cl
c00110a4:	0f 84 ab 00 00 00    	je     c0011155 <VgaText::putchar(char)+0xfb>
c00110aa:	8d 50 c0             	lea    edx,[eax-0x40]
c00110ad:	80 fa 3e             	cmp    dl,0x3e
c00110b0:	0f 87 82 00 00 00    	ja     c0011138 <VgaText::putchar(char)+0xde>
c00110b6:	3c 6d                	cmp    al,0x6d
c00110b8:	75 4d                	jne    c0011107 <VgaText::putchar(char)+0xad>
c00110ba:	31 f6                	xor    esi,esi
c00110bc:	31 d2                	xor    edx,edx
c00110be:	31 c0                	xor    eax,eax
c00110c0:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c00110c6:	7e 30                	jle    c00110f8 <VgaText::putchar(char)+0x9e>
c00110c8:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c00110d0:	80 fa 3b             	cmp    dl,0x3b
c00110d3:	75 17                	jne    c00110ec <VgaText::putchar(char)+0x92>
c00110d5:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00110d9:	50                   	push   eax
c00110da:	53                   	push   ebx
c00110db:	e8 ee f5 ff ff       	call   c00106ce <VgaText::doANSI_SGR(int)>
c00110e0:	59                   	pop    ecx
c00110e1:	31 d2                	xor    edx,edx
c00110e3:	58                   	pop    eax
c00110e4:	31 c0                	xor    eax,eax
c00110e6:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00110ea:	eb 09                	jmp    c00110f5 <VgaText::putchar(char)+0x9b>
c00110ec:	6b c0 0a             	imul   eax,eax,0xa
c00110ef:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00110f3:	88 ca                	mov    dl,cl
c00110f5:	46                   	inc    esi
c00110f6:	eb c8                	jmp    c00110c0 <VgaText::putchar(char)+0x66>
c00110f8:	84 d2                	test   dl,dl
c00110fa:	74 31                	je     c001112d <VgaText::putchar(char)+0xd3>
c00110fc:	50                   	push   eax
c00110fd:	53                   	push   ebx
c00110fe:	e8 cb f5 ff ff       	call   c00106ce <VgaText::doANSI_SGR(int)>
c0011103:	58                   	pop    eax
c0011104:	5a                   	pop    edx
c0011105:	eb 26                	jmp    c001112d <VgaText::putchar(char)+0xd3>
c0011107:	3c 4a                	cmp    al,0x4a
c0011109:	75 22                	jne    c001112d <VgaText::putchar(char)+0xd3>
c001110b:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c0011112:	75 19                	jne    c001112d <VgaText::putchar(char)+0xd3>
c0011114:	83 ec 0c             	sub    esp,0xc
c0011117:	53                   	push   ebx
c0011118:	e8 d9 fe ff ff       	call   c0010ff6 <VgaText::clearScreen()>
c001111d:	83 c4 0c             	add    esp,0xc
c0011120:	6a 00                	push   0x0
c0011122:	6a 00                	push   0x0
c0011124:	53                   	push   ebx
c0011125:	e8 ac f7 ff ff       	call   c00108d6 <VgaText::setCursor(int, int)>
c001112a:	83 c4 10             	add    esp,0x10
c001112d:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c0011136:	eb 36                	jmp    c001116e <VgaText::putchar(char)+0x114>
c0011138:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c001113e:	83 fa 0e             	cmp    edx,0xe
c0011141:	7f 2b                	jg     c001116e <VgaText::putchar(char)+0x114>
c0011143:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011146:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c001114c:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c0011153:	eb 19                	jmp    c001116e <VgaText::putchar(char)+0x114>
c0011155:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c001115b:	0f be c0             	movsx  eax,al
c001115e:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0011164:	50                   	push   eax
c0011165:	53                   	push   ebx
c0011166:	e8 ab fa ff ff       	call   c0010c16 <VgaText::putchar(char, VgaColour, VgaColour)>
c001116b:	83 c4 10             	add    esp,0x10
c001116e:	83 c4 14             	add    esp,0x14
c0011171:	5b                   	pop    ebx
c0011172:	5e                   	pop    esi
c0011173:	c3                   	ret    

c0011174 <VgaText::puts(char const*)>:
c0011174:	53                   	push   ebx
c0011175:	83 ec 08             	sub    esp,0x8
c0011178:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001117c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001117f:	84 c0                	test   al,al
c0011181:	74 12                	je     c0011195 <VgaText::puts(char const*)+0x21>
c0011183:	43                   	inc    ebx
c0011184:	51                   	push   ecx
c0011185:	51                   	push   ecx
c0011186:	50                   	push   eax
c0011187:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001118b:	e8 ca fe ff ff       	call   c001105a <VgaText::putchar(char)>
c0011190:	83 c4 10             	add    esp,0x10
c0011193:	eb e7                	jmp    c001117c <VgaText::puts(char const*)+0x8>
c0011195:	83 c4 08             	add    esp,0x8
c0011198:	5b                   	pop    ebx
c0011199:	c3                   	ret    

c001119a <VgaText::putx(unsigned int)>:
c001119a:	57                   	push   edi
c001119b:	b9 11 00 00 00       	mov    ecx,0x11
c00111a0:	56                   	push   esi
c00111a1:	be 62 a4 02 c0       	mov    esi,0xc002a462
c00111a6:	53                   	push   ebx
c00111a7:	83 ec 20             	sub    esp,0x20
c00111aa:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00111ae:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00111b2:	fc                   	cld    
c00111b3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00111b5:	be 08 00 00 00       	mov    esi,0x8
c00111ba:	50                   	push   eax
c00111bb:	50                   	push   eax
c00111bc:	89 d8                	mov    eax,ebx
c00111be:	c1 e3 04             	shl    ebx,0x4
c00111c1:	c1 e8 1c             	shr    eax,0x1c
c00111c4:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00111c9:	50                   	push   eax
c00111ca:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00111ce:	e8 87 fe ff ff       	call   c001105a <VgaText::putchar(char)>
c00111d3:	83 c4 10             	add    esp,0x10
c00111d6:	4e                   	dec    esi
c00111d7:	75 e1                	jne    c00111ba <VgaText::putx(unsigned int)+0x20>
c00111d9:	83 c4 20             	add    esp,0x20
c00111dc:	5b                   	pop    ebx
c00111dd:	5e                   	pop    esi
c00111de:	5f                   	pop    edi
c00111df:	c3                   	ret    

c00111e0 <VgaText::VgaText(char const*)>:
c00111e0:	57                   	push   edi
c00111e1:	56                   	push   esi
c00111e2:	53                   	push   ebx
c00111e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111e7:	83 ec 08             	sub    esp,0x8
c00111ea:	6a 00                	push   0x0
c00111ec:	50                   	push   eax
c00111ed:	e8 6e 05 00 00       	call   c0011760 <UnixFile::UnixFile(int)>
c00111f2:	83 c4 10             	add    esp,0x10
c00111f5:	ba c8 a4 02 c0       	mov    edx,0xc002a4c8
c00111fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111fe:	89 10                	mov    DWORD PTR [eax],edx
c0011200:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011204:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c001120e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011212:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c001121c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011220:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c0011227:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001122b:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c0011232:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011236:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c0011240:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011244:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c001124e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011252:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0011259:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001125d:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c0011264:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011268:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c001126e:	bb 00 e7 02 c0       	mov    ebx,0xc002e700
c0011273:	b8 08 00 00 00       	mov    eax,0x8
c0011278:	fc                   	cld    
c0011279:	89 d7                	mov    edi,edx
c001127b:	89 de                	mov    esi,ebx
c001127d:	89 c1                	mov    ecx,eax
c001127f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011281:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011285:	05 1e 10 00 00       	add    eax,0x101e
c001128a:	83 ec 08             	sub    esp,0x8
c001128d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011291:	50                   	push   eax
c0011292:	e8 9d f5 fe ff       	call   c0000834 <strcpy>
c0011297:	83 c4 10             	add    esp,0x10
c001129a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001129e:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c00112a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112ac:	83 c0 0c             	add    eax,0xc
c00112af:	83 ec 04             	sub    esp,0x4
c00112b2:	68 00 0f 00 00       	push   0xf00
c00112b7:	6a 00                	push   0x0
c00112b9:	50                   	push   eax
c00112ba:	e8 b9 f4 fe ff       	call   c0000778 <memset>
c00112bf:	83 c4 10             	add    esp,0x10
c00112c2:	83 ec 04             	sub    esp,0x4
c00112c5:	6a 00                	push   0x0
c00112c7:	6a 07                	push   0x7
c00112c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112cd:	e8 b4 f4 ff ff       	call   c0010786 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00112d2:	83 c4 10             	add    esp,0x10
c00112d5:	83 ec 08             	sub    esp,0x8
c00112d8:	6a 02                	push   0x2
c00112da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112de:	e8 49 fa ff ff       	call   c0010d2c <VgaText::setCursorHeight(int)>
c00112e3:	83 c4 10             	add    esp,0x10
c00112e6:	83 ec 04             	sub    esp,0x4
c00112e9:	6a 00                	push   0x0
c00112eb:	6a 00                	push   0x0
c00112ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112f1:	e8 e0 f5 ff ff       	call   c00108d6 <VgaText::setCursor(int, int)>
c00112f6:	83 c4 10             	add    esp,0x10
c00112f9:	83 ec 08             	sub    esp,0x8
c00112fc:	6a 01                	push   0x1
c00112fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011302:	e8 7d f3 ff ff       	call   c0010684 <VgaText::showCursor(bool)>
c0011307:	83 c4 10             	add    esp,0x10
c001130a:	83 ec 08             	sub    esp,0x8
c001130d:	6a 01                	push   0x1
c001130f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011313:	e8 7c f3 ff ff       	call   c0010694 <VgaText::disableBlink(bool)>
c0011318:	83 c4 10             	add    esp,0x10
c001131b:	83 ec 0c             	sub    esp,0xc
c001131e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011322:	e8 cf fc ff ff       	call   c0010ff6 <VgaText::clearScreen()>
c0011327:	83 c4 10             	add    esp,0x10
c001132a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001132e:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c0011335:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011339:	05 9e 10 00 00       	add    eax,0x109e
c001133e:	83 ec 04             	sub    esp,0x4
c0011341:	68 96 00 00 00       	push   0x96
c0011346:	6a 00                	push   0x0
c0011348:	50                   	push   eax
c0011349:	e8 2a f4 fe ff       	call   c0000778 <memset>
c001134e:	83 c4 10             	add    esp,0x10
c0011351:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011355:	05 34 11 00 00       	add    eax,0x1134
c001135a:	83 ec 04             	sub    esp,0x4
c001135d:	68 2c 01 00 00       	push   0x12c
c0011362:	6a 00                	push   0x0
c0011364:	50                   	push   eax
c0011365:	e8 0e f4 fe ff       	call   c0000778 <memset>
c001136a:	83 c4 10             	add    esp,0x10
c001136d:	90                   	nop
c001136e:	5b                   	pop    ebx
c001136f:	5e                   	pop    esi
c0011370:	5f                   	pop    edi
c0011371:	c3                   	ret    

c0011372 <VgaText::receiveKey(unsigned char)>:
c0011372:	55                   	push   ebp
c0011373:	57                   	push   edi
c0011374:	56                   	push   esi
c0011375:	53                   	push   ebx
c0011376:	83 ec 1c             	sub    esp,0x1c
c0011379:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001137d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011381:	84 db                	test   bl,bl
c0011383:	0f 84 c9 00 00 00    	je     c0011452 <VgaText::receiveKey(unsigned char)+0xe0>
c0011389:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c001138f:	80 fb 08             	cmp    bl,0x8
c0011392:	75 2c                	jne    c00113c0 <VgaText::receiveKey(unsigned char)+0x4e>
c0011394:	83 ec 0c             	sub    esp,0xc
c0011397:	57                   	push   edi
c0011398:	e8 f7 f3 fe ff       	call   c0000794 <strlen>
c001139d:	83 c4 10             	add    esp,0x10
c00113a0:	85 c0                	test   eax,eax
c00113a2:	74 41                	je     c00113e5 <VgaText::receiveKey(unsigned char)+0x73>
c00113a4:	50                   	push   eax
c00113a5:	50                   	push   eax
c00113a6:	6a 08                	push   0x8
c00113a8:	56                   	push   esi
c00113a9:	e8 ac fc ff ff       	call   c001105a <VgaText::putchar(char)>
c00113ae:	89 3c 24             	mov    DWORD PTR [esp],edi
c00113b1:	e8 de f3 fe ff       	call   c0000794 <strlen>
c00113b6:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c00113be:	eb 22                	jmp    c00113e2 <VgaText::receiveKey(unsigned char)+0x70>
c00113c0:	0f be c3             	movsx  eax,bl
c00113c3:	52                   	push   edx
c00113c4:	52                   	push   edx
c00113c5:	50                   	push   eax
c00113c6:	56                   	push   esi
c00113c7:	e8 8e fc ff ff       	call   c001105a <VgaText::putchar(char)>
c00113cc:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c00113d0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00113d5:	59                   	pop    ecx
c00113d6:	5d                   	pop    ebp
c00113d7:	8d 44 24 16          	lea    eax,[esp+0x16]
c00113db:	50                   	push   eax
c00113dc:	57                   	push   edi
c00113dd:	e8 92 f5 fe ff       	call   c0000974 <strcat>
c00113e2:	83 c4 10             	add    esp,0x10
c00113e5:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c00113ec:	75 05                	jne    c00113f3 <VgaText::receiveKey(unsigned char)+0x81>
c00113ee:	80 fb 0a             	cmp    bl,0xa
c00113f1:	75 53                	jne    c0011446 <VgaText::receiveKey(unsigned char)+0xd4>
c00113f3:	83 ec 0c             	sub    esp,0xc
c00113f6:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c00113fc:	53                   	push   ebx
c00113fd:	e8 92 f3 fe ff       	call   c0000794 <strlen>
c0011402:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011405:	89 c5                	mov    ebp,eax
c0011407:	e8 88 f3 fe ff       	call   c0000794 <strlen>
c001140c:	83 c4 10             	add    esp,0x10
c001140f:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0011413:	3d 2c 01 00 00       	cmp    eax,0x12c
c0011418:	76 10                	jbe    c001142a <VgaText::receiveKey(unsigned char)+0xb8>
c001141a:	83 ec 0c             	sub    esp,0xc
c001141d:	68 73 a4 02 c0       	push   0xc002a473
c0011422:	e8 fc 91 00 00       	call   c001a623 <Krnl::panic(char const*)>
c0011427:	83 c4 10             	add    esp,0x10
c001142a:	50                   	push   eax
c001142b:	50                   	push   eax
c001142c:	57                   	push   edi
c001142d:	53                   	push   ebx
c001142e:	e8 41 f5 fe ff       	call   c0000974 <strcat>
c0011433:	83 c4 0c             	add    esp,0xc
c0011436:	68 96 00 00 00       	push   0x96
c001143b:	6a 00                	push   0x0
c001143d:	57                   	push   edi
c001143e:	e8 35 f3 fe ff       	call   c0000778 <memset>
c0011443:	83 c4 10             	add    esp,0x10
c0011446:	83 ec 0c             	sub    esp,0xc
c0011449:	56                   	push   esi
c001144a:	e8 d5 f9 ff ff       	call   c0010e24 <VgaText::doUpdate()>
c001144f:	83 c4 10             	add    esp,0x10
c0011452:	83 c4 1c             	add    esp,0x1c
c0011455:	5b                   	pop    ebx
c0011456:	5e                   	pop    esi
c0011457:	5f                   	pop    edi
c0011458:	5d                   	pop    ebp
c0011459:	c3                   	ret    

c001145a <VgaText::write(unsigned long long, void*, int*)>:
c001145a:	55                   	push   ebp
c001145b:	57                   	push   edi
c001145c:	56                   	push   esi
c001145d:	53                   	push   ebx
c001145e:	83 ec 0c             	sub    esp,0xc
c0011461:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011465:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011469:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001146d:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c0011474:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0011477:	39 eb                	cmp    ebx,ebp
c0011479:	74 13                	je     c001148e <VgaText::write(unsigned long long, void*, int*)+0x34>
c001147b:	43                   	inc    ebx
c001147c:	50                   	push   eax
c001147d:	50                   	push   eax
c001147e:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0011482:	50                   	push   eax
c0011483:	56                   	push   esi
c0011484:	e8 d1 fb ff ff       	call   c001105a <VgaText::putchar(char)>
c0011489:	83 c4 10             	add    esp,0x10
c001148c:	eb e9                	jmp    c0011477 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c001148e:	83 ec 0c             	sub    esp,0xc
c0011491:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0011498:	56                   	push   esi
c0011499:	e8 86 f9 ff ff       	call   c0010e24 <VgaText::doUpdate()>
c001149e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00114a2:	89 38                	mov    DWORD PTR [eax],edi
c00114a4:	83 c4 1c             	add    esp,0x1c
c00114a7:	31 c0                	xor    eax,eax
c00114a9:	5b                   	pop    ebx
c00114aa:	5e                   	pop    esi
c00114ab:	5f                   	pop    edi
c00114ac:	5d                   	pop    ebp
c00114ad:	c3                   	ret    

c00114ae <newTerminal(char*)>:
c00114ae:	83 ec 28             	sub    esp,0x28
c00114b1:	68 60 12 00 00       	push   0x1260
c00114b6:	e8 85 e3 ff ff       	call   c000f840 <malloc>
c00114bb:	5a                   	pop    edx
c00114bc:	59                   	pop    ecx
c00114bd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00114c1:	50                   	push   eax
c00114c2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00114c6:	e8 15 fd ff ff       	call   c00111e0 <VgaText::VgaText(char const*)>
c00114cb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114cf:	83 c4 2c             	add    esp,0x2c
c00114d2:	c3                   	ret    
c00114d3:	90                   	nop

c00114d4 <TSS::TSS()>:
c00114d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114d8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00114df:	90                   	nop
c00114e0:	c3                   	ret    
c00114e1:	90                   	nop

c00114e2 <TSS::setESP(unsigned long)>:
c00114e2:	55                   	push   ebp
c00114e3:	89 e5                	mov    ebp,esp
c00114e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114eb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00114ee:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00114f1:	90                   	nop
c00114f2:	5d                   	pop    ebp
c00114f3:	c3                   	ret    

c00114f4 <TSS::flush()>:
c00114f4:	55                   	push   ebp
c00114f5:	89 e5                	mov    ebp,esp
c00114f7:	83 ec 10             	sub    esp,0x10
c00114fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00114ff:	83 c8 03             	or     eax,0x3
c0011502:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0011506:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001150a:	66 89 d0             	mov    ax,dx
c001150d:	0f 00 d8             	ltr    ax
c0011510:	90                   	nop
c0011511:	c9                   	leave  
c0011512:	c3                   	ret    
c0011513:	90                   	nop

c0011514 <TSS::setup(unsigned long, unsigned long)>:
c0011514:	55                   	push   ebp
c0011515:	89 e5                	mov    ebp,esp
c0011517:	83 ec 18             	sub    esp,0x18
c001151a:	83 ec 0c             	sub    esp,0xc
c001151d:	6a 68                	push   0x68
c001151f:	e8 1c e3 ff ff       	call   c000f840 <malloc>
c0011524:	83 c4 10             	add    esp,0x10
c0011527:	89 c2                	mov    edx,eax
c0011529:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001152c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001152f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011532:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011535:	83 ec 04             	sub    esp,0x4
c0011538:	6a 68                	push   0x68
c001153a:	6a 00                	push   0x0
c001153c:	50                   	push   eax
c001153d:	e8 36 f2 fe ff       	call   c0000778 <memset>
c0011542:	83 c4 10             	add    esp,0x10
c0011545:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011548:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001154b:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0011551:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011554:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011557:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c001155d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011560:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011563:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011566:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011569:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001156c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001156f:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0011575:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011578:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001157b:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0011581:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011584:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011587:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c001158d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011590:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011593:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0011599:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001159c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001159f:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c00115a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115ab:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00115b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115b7:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00115ba:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00115bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115c3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00115c6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00115c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115cf:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00115d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115d9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115dc:	0f 20 da             	mov    edx,cr3
c00115df:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00115e2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00115e5:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00115e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115eb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115ee:	83 ec 08             	sub    esp,0x8
c00115f1:	50                   	push   eax
c00115f2:	8d 45 ec             	lea    eax,[ebp-0x14]
c00115f5:	50                   	push   eax
c00115f6:	e8 23 da ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c00115fb:	83 c4 10             	add    esp,0x10
c00115fe:	83 ec 08             	sub    esp,0x8
c0011601:	6a 68                	push   0x68
c0011603:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011606:	50                   	push   eax
c0011607:	e8 2e da ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c001160c:	83 c4 10             	add    esp,0x10
c001160f:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0011613:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011616:	83 e0 0f             	and    eax,0xf
c0011619:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c001161c:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c001161f:	83 c8 40             	or     eax,0x40
c0011622:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011625:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c001162a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011630:	05 78 01 00 00       	add    eax,0x178
c0011635:	83 ec 04             	sub    esp,0x4
c0011638:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001163b:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001163e:	50                   	push   eax
c001163f:	e8 2a da ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c0011644:	83 c4 10             	add    esp,0x10
c0011647:	89 c2                	mov    edx,eax
c0011649:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001164c:	89 10                	mov    DWORD PTR [eax],edx
c001164e:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c0011653:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011659:	05 78 01 00 00       	add    eax,0x178
c001165e:	83 ec 0c             	sub    esp,0xc
c0011661:	50                   	push   eax
c0011662:	e8 4b da ff ff       	call   c000f0b2 <GDT::flush()>
c0011667:	83 c4 10             	add    esp,0x10
c001166a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001166d:	8b 00                	mov    eax,DWORD PTR [eax]
c001166f:	83 ec 08             	sub    esp,0x8
c0011672:	50                   	push   eax
c0011673:	68 dc a4 02 c0       	push   0xc002a4dc
c0011678:	e8 f4 18 00 00       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001167d:	83 c4 10             	add    esp,0x10
c0011680:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011683:	8b 00                	mov    eax,DWORD PTR [eax]
c0011685:	c9                   	leave  
c0011686:	c3                   	ret    
c0011687:	90                   	nop

c0011688 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011688:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001168c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011690:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011693:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011698:	75 08                	jne    c00116a2 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c001169a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00116a0:	eb 38                	jmp    c00116da <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00116a2:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00116a7:	75 17                	jne    c00116c0 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00116a9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116ae:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00116b1:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00116b7:	8b 10                	mov    edx,DWORD PTR [eax]
c00116b9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00116bd:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00116c0:	89 c1                	mov    ecx,eax
c00116c2:	83 e1 fd             	and    ecx,0xfffffffd
c00116c5:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00116cb:	74 cd                	je     c001169a <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00116cd:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00116d2:	83 e0 ef             	and    eax,0xffffffef
c00116d5:	83 f8 08             	cmp    eax,0x8
c00116d8:	76 c0                	jbe    c001169a <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00116da:	31 c0                	xor    eax,eax
c00116dc:	c3                   	ret    
c00116dd:	90                   	nop

c00116de <ReservedFilename::isAtty()>:
c00116de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116e2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00116e5:	31 c0                	xor    eax,eax
c00116e7:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00116ed:	74 09                	je     c00116f8 <ReservedFilename::isAtty()+0x1a>
c00116ef:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00116f5:	0f 94 c0             	sete   al
c00116f8:	c3                   	ret    
c00116f9:	90                   	nop

c00116fa <ReservedFilename::write(unsigned long long, void*, int*)>:
c00116fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116fe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011702:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011705:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011709:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001170e:	75 08                	jne    c0011718 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0011710:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011716:	eb 3d                	jmp    c0011755 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011718:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001171d:	75 17                	jne    c0011736 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c001171f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011724:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011727:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001172d:	8b 10                	mov    edx,DWORD PTR [eax]
c001172f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011733:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011736:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001173b:	75 04                	jne    c0011741 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c001173d:	89 0a                	mov    DWORD PTR [edx],ecx
c001173f:	eb 14                	jmp    c0011755 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011741:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011746:	74 c8                	je     c0011710 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011748:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c001174d:	83 e0 ef             	and    eax,0xffffffef
c0011750:	83 f8 08             	cmp    eax,0x8
c0011753:	76 bb                	jbe    c0011710 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011755:	31 c0                	xor    eax,eax
c0011757:	c3                   	ret    

c0011758 <UnixFile::getFileDescriptor()>:
c0011758:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001175c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001175f:	c3                   	ret    

c0011760 <UnixFile::UnixFile(int)>:
c0011760:	53                   	push   ebx
c0011761:	83 ec 28             	sub    esp,0x28
c0011764:	ba c8 a5 02 c0       	mov    edx,0xc002a5c8
c0011769:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001176d:	89 10                	mov    DWORD PTR [eax],edx
c001176f:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0011777:	0f 8f 8c 01 00 00    	jg     c0011909 <UnixFile::UnixFile(int)+0x1a9>
c001177d:	a1 e0 d5 02 c0       	mov    eax,ds:0xc002d5e0
c0011782:	8d 50 01             	lea    edx,[eax+0x1]
c0011785:	89 15 e0 d5 02 c0    	mov    DWORD PTR ds:0xc002d5e0,edx
c001178b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001178f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011792:	83 ec 08             	sub    esp,0x8
c0011795:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011799:	68 b8 e7 02 c0       	push   0xc002e7b8
c001179e:	e8 fd 6f 01 00       	call   c00287a0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00117a3:	83 c4 10             	add    esp,0x10
c00117a6:	a0 b4 e7 02 c0       	mov    al,ds:0xc002e7b4
c00117ab:	83 f0 01             	xor    eax,0x1
c00117ae:	84 c0                	test   al,al
c00117b0:	0f 84 54 01 00 00    	je     c001190a <UnixFile::UnixFile(int)+0x1aa>
c00117b6:	c6 05 b4 e7 02 c0 01 	mov    BYTE PTR ds:0xc002e7b4,0x1
c00117bd:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00117c5:	83 ec 0c             	sub    esp,0xc
c00117c8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00117cc:	e8 6f e0 ff ff       	call   c000f840 <malloc>
c00117d1:	83 c4 10             	add    esp,0x10
c00117d4:	89 c3                	mov    ebx,eax
c00117d6:	83 ec 08             	sub    esp,0x8
c00117d9:	68 03 ff ff 0f       	push   0xfffff03
c00117de:	53                   	push   ebx
c00117df:	e8 2c 01 00 00       	call   c0011910 <ReservedFilename::ReservedFilename(int)>
c00117e4:	83 c4 10             	add    esp,0x10
c00117e7:	89 1d ac e7 02 c0    	mov    DWORD PTR ds:0xc002e7ac,ebx
c00117ed:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00117f5:	83 ec 0c             	sub    esp,0xc
c00117f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117fc:	e8 3f e0 ff ff       	call   c000f840 <malloc>
c0011801:	83 c4 10             	add    esp,0x10
c0011804:	89 c3                	mov    ebx,eax
c0011806:	83 ec 08             	sub    esp,0x8
c0011809:	68 01 ff ff 0f       	push   0xfffff01
c001180e:	53                   	push   ebx
c001180f:	e8 fc 00 00 00       	call   c0011910 <ReservedFilename::ReservedFilename(int)>
c0011814:	83 c4 10             	add    esp,0x10
c0011817:	89 1d b0 e7 02 c0    	mov    DWORD PTR ds:0xc002e7b0,ebx
c001181d:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011825:	83 ec 0c             	sub    esp,0xc
c0011828:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001182c:	e8 0f e0 ff ff       	call   c000f840 <malloc>
c0011831:	83 c4 10             	add    esp,0x10
c0011834:	89 c3                	mov    ebx,eax
c0011836:	83 ec 08             	sub    esp,0x8
c0011839:	68 00 ff ff 0f       	push   0xfffff00
c001183e:	53                   	push   ebx
c001183f:	e8 cc 00 00 00       	call   c0011910 <ReservedFilename::ReservedFilename(int)>
c0011844:	83 c4 10             	add    esp,0x10
c0011847:	89 1d a4 e7 02 c0    	mov    DWORD PTR ds:0xc002e7a4,ebx
c001184d:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0011855:	83 ec 0c             	sub    esp,0xc
c0011858:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001185c:	e8 df df ff ff       	call   c000f840 <malloc>
c0011861:	83 c4 10             	add    esp,0x10
c0011864:	89 c3                	mov    ebx,eax
c0011866:	83 ec 08             	sub    esp,0x8
c0011869:	68 02 ff ff 0f       	push   0xfffff02
c001186e:	53                   	push   ebx
c001186f:	e8 9c 00 00 00       	call   c0011910 <ReservedFilename::ReservedFilename(int)>
c0011874:	83 c4 10             	add    esp,0x10
c0011877:	89 1d a8 e7 02 c0    	mov    DWORD PTR ds:0xc002e7a8,ebx
c001187d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011885:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c001188a:	7f 7e                	jg     c001190a <UnixFile::UnixFile(int)+0x1aa>
c001188c:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011894:	83 ec 0c             	sub    esp,0xc
c0011897:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001189b:	e8 a0 df ff ff       	call   c000f840 <malloc>
c00118a0:	83 c4 10             	add    esp,0x10
c00118a3:	89 c3                	mov    ebx,eax
c00118a5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118a9:	05 10 ff ff 0f       	add    eax,0xfffff10
c00118ae:	83 ec 08             	sub    esp,0x8
c00118b1:	50                   	push   eax
c00118b2:	53                   	push   ebx
c00118b3:	e8 58 00 00 00       	call   c0011910 <ReservedFilename::ReservedFilename(int)>
c00118b8:	83 c4 10             	add    esp,0x10
c00118bb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118bf:	89 1c 85 80 e7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1880],ebx
c00118c6:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00118ce:	83 ec 0c             	sub    esp,0xc
c00118d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00118d5:	e8 66 df ff ff       	call   c000f840 <malloc>
c00118da:	83 c4 10             	add    esp,0x10
c00118dd:	89 c3                	mov    ebx,eax
c00118df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118e3:	05 20 ff ff 0f       	add    eax,0xfffff20
c00118e8:	83 ec 08             	sub    esp,0x8
c00118eb:	50                   	push   eax
c00118ec:	53                   	push   ebx
c00118ed:	e8 1e 00 00 00       	call   c0011910 <ReservedFilename::ReservedFilename(int)>
c00118f2:	83 c4 10             	add    esp,0x10
c00118f5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118f9:	89 1c 85 40 e7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd18c0],ebx
c0011900:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011904:	e9 7c ff ff ff       	jmp    c0011885 <UnixFile::UnixFile(int)+0x125>
c0011909:	90                   	nop
c001190a:	83 c4 28             	add    esp,0x28
c001190d:	5b                   	pop    ebx
c001190e:	c3                   	ret    
c001190f:	90                   	nop

c0011910 <ReservedFilename::ReservedFilename(int)>:
c0011910:	83 ec 0c             	sub    esp,0xc
c0011913:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011917:	83 ec 08             	sub    esp,0x8
c001191a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001191e:	50                   	push   eax
c001191f:	e8 3c fe ff ff       	call   c0011760 <UnixFile::UnixFile(int)>
c0011924:	83 c4 10             	add    esp,0x10
c0011927:	ba e4 a5 02 c0       	mov    edx,0xc002a5e4
c001192c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011930:	89 10                	mov    DWORD PTR [eax],edx
c0011932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011936:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001193a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001193d:	90                   	nop
c001193e:	83 c4 0c             	add    esp,0xc
c0011941:	c3                   	ret    

c0011942 <UnixFile::~UnixFile()>:
c0011942:	83 ec 1c             	sub    esp,0x1c
c0011945:	ba c8 a5 02 c0       	mov    edx,0xc002a5c8
c001194a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001194e:	89 10                	mov    DWORD PTR [eax],edx
c0011950:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011954:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011957:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c001195c:	7f 73                	jg     c00119d1 <UnixFile::~UnixFile()+0x8f>
c001195e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011966:	83 ec 0c             	sub    esp,0xc
c0011969:	68 b8 e7 02 c0       	push   0xc002e7b8
c001196e:	e8 01 6f 01 00       	call   c0028874 <LinkedList<UnixFile>::getFirstElement()>
c0011973:	83 c4 10             	add    esp,0x10
c0011976:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001197a:	83 ec 0c             	sub    esp,0xc
c001197d:	68 b8 e7 02 c0       	push   0xc002e7b8
c0011982:	e8 f5 6e 01 00       	call   c002887c <LinkedList<UnixFile>::removeFirst()>
c0011987:	83 c4 10             	add    esp,0x10
c001198a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001198e:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011992:	74 40                	je     c00119d4 <UnixFile::~UnixFile()+0x92>
c0011994:	83 ec 08             	sub    esp,0x8
c0011997:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001199b:	68 b8 e7 02 c0       	push   0xc002e7b8
c00119a0:	e8 fb 6d 01 00       	call   c00287a0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00119a5:	83 c4 10             	add    esp,0x10
c00119a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119ac:	8d 50 01             	lea    edx,[eax+0x1]
c00119af:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00119b3:	3d 88 13 00 00       	cmp    eax,0x1388
c00119b8:	0f 94 c0             	sete   al
c00119bb:	84 c0                	test   al,al
c00119bd:	74 a7                	je     c0011966 <UnixFile::~UnixFile()+0x24>
c00119bf:	83 ec 0c             	sub    esp,0xc
c00119c2:	68 a0 a5 02 c0       	push   0xc002a5a0
c00119c7:	e8 57 8c 00 00       	call   c001a623 <Krnl::panic(char const*)>
c00119cc:	83 c4 10             	add    esp,0x10
c00119cf:	eb 95                	jmp    c0011966 <UnixFile::~UnixFile()+0x24>
c00119d1:	90                   	nop
c00119d2:	eb 01                	jmp    c00119d5 <UnixFile::~UnixFile()+0x93>
c00119d4:	90                   	nop
c00119d5:	90                   	nop
c00119d6:	83 c4 1c             	add    esp,0x1c
c00119d9:	c3                   	ret    

c00119da <UnixFile::~UnixFile()>:
c00119da:	83 ec 0c             	sub    esp,0xc
c00119dd:	83 ec 0c             	sub    esp,0xc
c00119e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119e4:	e8 59 ff ff ff       	call   c0011942 <UnixFile::~UnixFile()>
c00119e9:	83 c4 10             	add    esp,0x10
c00119ec:	83 ec 08             	sub    esp,0x8
c00119ef:	6a 0c                	push   0xc
c00119f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119f5:	e8 97 14 00 00       	call   c0012e91 <operator delete(void*, unsigned long)>
c00119fa:	83 c4 10             	add    esp,0x10
c00119fd:	83 c4 0c             	add    esp,0xc
c0011a00:	c3                   	ret    
c0011a01:	90                   	nop

c0011a02 <ReservedFilename::~ReservedFilename()>:
c0011a02:	83 ec 0c             	sub    esp,0xc
c0011a05:	ba e4 a5 02 c0       	mov    edx,0xc002a5e4
c0011a0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a0e:	89 10                	mov    DWORD PTR [eax],edx
c0011a10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a14:	83 ec 0c             	sub    esp,0xc
c0011a17:	50                   	push   eax
c0011a18:	e8 25 ff ff ff       	call   c0011942 <UnixFile::~UnixFile()>
c0011a1d:	83 c4 10             	add    esp,0x10
c0011a20:	90                   	nop
c0011a21:	83 c4 0c             	add    esp,0xc
c0011a24:	c3                   	ret    
c0011a25:	90                   	nop

c0011a26 <ReservedFilename::~ReservedFilename()>:
c0011a26:	83 ec 0c             	sub    esp,0xc
c0011a29:	83 ec 0c             	sub    esp,0xc
c0011a2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a30:	e8 cd ff ff ff       	call   c0011a02 <ReservedFilename::~ReservedFilename()>
c0011a35:	83 c4 10             	add    esp,0x10
c0011a38:	83 ec 08             	sub    esp,0x8
c0011a3b:	6a 0c                	push   0xc
c0011a3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a41:	e8 4b 14 00 00       	call   c0012e91 <operator delete(void*, unsigned long)>
c0011a46:	83 c4 10             	add    esp,0x10
c0011a49:	83 c4 0c             	add    esp,0xc
c0011a4c:	c3                   	ret    

c0011a4d <getFromFileDescriptor(int)>:
c0011a4d:	53                   	push   ebx
c0011a4e:	83 ec 08             	sub    esp,0x8
c0011a51:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011a55:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011a5b:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011a61:	7f 2c                	jg     c0011a8f <getFromFileDescriptor(int)+0x42>
c0011a63:	83 ec 0c             	sub    esp,0xc
c0011a66:	68 b8 e7 02 c0       	push   0xc002e7b8
c0011a6b:	e8 04 6e 01 00       	call   c0028874 <LinkedList<UnixFile>::getFirstElement()>
c0011a70:	83 c4 10             	add    esp,0x10
c0011a73:	85 c0                	test   eax,eax
c0011a75:	75 04                	jne    c0011a7b <getFromFileDescriptor(int)+0x2e>
c0011a77:	31 c0                	xor    eax,eax
c0011a79:	eb 6e                	jmp    c0011ae9 <getFromFileDescriptor(int)+0x9c>
c0011a7b:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011a7e:	74 69                	je     c0011ae9 <getFromFileDescriptor(int)+0x9c>
c0011a80:	52                   	push   edx
c0011a81:	52                   	push   edx
c0011a82:	50                   	push   eax
c0011a83:	68 b8 e7 02 c0       	push   0xc002e7b8
c0011a88:	e8 91 6e 01 00       	call   c002891e <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011a8d:	eb e1                	jmp    c0011a70 <getFromFileDescriptor(int)+0x23>
c0011a8f:	a1 ac e7 02 c0       	mov    eax,ds:0xc002e7ac
c0011a94:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011a9a:	74 4d                	je     c0011ae9 <getFromFileDescriptor(int)+0x9c>
c0011a9c:	a1 b0 e7 02 c0       	mov    eax,ds:0xc002e7b0
c0011aa1:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011aa7:	74 40                	je     c0011ae9 <getFromFileDescriptor(int)+0x9c>
c0011aa9:	a1 a8 e7 02 c0       	mov    eax,ds:0xc002e7a8
c0011aae:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011ab4:	74 33                	je     c0011ae9 <getFromFileDescriptor(int)+0x9c>
c0011ab6:	a1 a4 e7 02 c0       	mov    eax,ds:0xc002e7a4
c0011abb:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011ac1:	74 26                	je     c0011ae9 <getFromFileDescriptor(int)+0x9c>
c0011ac3:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011ac9:	83 f8 08             	cmp    eax,0x8
c0011acc:	77 09                	ja     c0011ad7 <getFromFileDescriptor(int)+0x8a>
c0011ace:	8b 04 85 80 e7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1880]
c0011ad5:	eb 12                	jmp    c0011ae9 <getFromFileDescriptor(int)+0x9c>
c0011ad7:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011add:	83 fb 08             	cmp    ebx,0x8
c0011ae0:	77 95                	ja     c0011a77 <getFromFileDescriptor(int)+0x2a>
c0011ae2:	8b 04 9d 40 e7 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd18c0]
c0011ae9:	83 c4 08             	add    esp,0x8
c0011aec:	5b                   	pop    ebx
c0011aed:	c3                   	ret    

c0011aee <__static_initialization_and_destruction_0(int, int)>:
c0011aee:	83 ec 0c             	sub    esp,0xc
c0011af1:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011af6:	75 34                	jne    c0011b2c <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011af8:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011b00:	75 2a                	jne    c0011b2c <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011b02:	83 ec 0c             	sub    esp,0xc
c0011b05:	68 b8 e7 02 c0       	push   0xc002e7b8
c0011b0a:	e8 39 6c 01 00       	call   c0028748 <LinkedList<UnixFile>::LinkedList()>
c0011b0f:	83 c4 10             	add    esp,0x10
c0011b12:	83 ec 04             	sub    esp,0x4
c0011b15:	68 68 d5 02 c0       	push   0xc002d568
c0011b1a:	68 b8 e7 02 c0       	push   0xc002e7b8
c0011b1f:	68 46 87 02 c0       	push   0xc0028746
c0011b24:	e8 e2 12 00 00       	call   c0012e0b <__cxa_atexit>
c0011b29:	83 c4 10             	add    esp,0x10
c0011b2c:	90                   	nop
c0011b2d:	83 c4 0c             	add    esp,0xc
c0011b30:	c3                   	ret    

c0011b31 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011b31:	83 ec 0c             	sub    esp,0xc
c0011b34:	83 ec 08             	sub    esp,0x8
c0011b37:	68 ff ff 00 00       	push   0xffff
c0011b3c:	6a 01                	push   0x1
c0011b3e:	e8 ab ff ff ff       	call   c0011aee <__static_initialization_and_destruction_0(int, int)>
c0011b43:	83 c4 10             	add    esp,0x10
c0011b46:	83 c4 0c             	add    esp,0xc
c0011b49:	c3                   	ret    

c0011b4a <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011b4a:	53                   	push   ebx
c0011b4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011b4f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b53:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011b59:	89 c8                	mov    eax,ecx
c0011b5b:	d1 e8                	shr    eax,1
c0011b5d:	03 05 e8 d5 02 c0    	add    eax,DWORD PTR ds:0xc002d5e8
c0011b63:	83 e1 01             	and    ecx,0x1
c0011b66:	8a 10                	mov    dl,BYTE PTR [eax]
c0011b68:	75 09                	jne    c0011b73 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011b6a:	83 e2 f0             	and    edx,0xfffffff0
c0011b6d:	09 da                	or     edx,ebx
c0011b6f:	88 10                	mov    BYTE PTR [eax],dl
c0011b71:	5b                   	pop    ebx
c0011b72:	c3                   	ret    
c0011b73:	c1 e3 04             	shl    ebx,0x4
c0011b76:	83 e2 0f             	and    edx,0xf
c0011b79:	09 da                	or     edx,ebx
c0011b7b:	88 10                	mov    BYTE PTR [eax],dl
c0011b7d:	5b                   	pop    ebx
c0011b7e:	c3                   	ret    

c0011b7f <Virt::getPageState(unsigned long)>:
c0011b7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b83:	8b 0d e8 d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d5e8
c0011b89:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011b8f:	89 d0                	mov    eax,edx
c0011b91:	d1 e8                	shr    eax,1
c0011b93:	83 e2 01             	and    edx,0x1
c0011b96:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011b99:	75 04                	jne    c0011b9f <Virt::getPageState(unsigned long)+0x20>
c0011b9b:	83 e0 0f             	and    eax,0xf
c0011b9e:	c3                   	ret    
c0011b9f:	c0 e8 04             	shr    al,0x4
c0011ba2:	c3                   	ret    

c0011ba3 <Virt::allocateKernelVirtualPages(int)>:
c0011ba3:	55                   	push   ebp
c0011ba4:	31 ed                	xor    ebp,ebp
c0011ba6:	57                   	push   edi
c0011ba7:	56                   	push   esi
c0011ba8:	53                   	push   ebx
c0011ba9:	31 db                	xor    ebx,ebx
c0011bab:	83 ec 1c             	sub    esp,0x1c
c0011bae:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011bb2:	8b 3d e4 d5 02 c0    	mov    edi,DWORD PTR ds:0xc002d5e4
c0011bb8:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011bbd:	57                   	push   edi
c0011bbe:	e8 bc ff ff ff       	call   c0011b7f <Virt::getPageState(unsigned long)>
c0011bc3:	5a                   	pop    edx
c0011bc4:	84 c0                	test   al,al
c0011bc6:	75 3a                	jne    c0011c02 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011bc8:	85 db                	test   ebx,ebx
c0011bca:	75 02                	jne    c0011bce <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011bcc:	89 fd                	mov    ebp,edi
c0011bce:	43                   	inc    ebx
c0011bcf:	39 f3                	cmp    ebx,esi
c0011bd1:	74 5a                	je     c0011c2d <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011bd3:	47                   	inc    edi
c0011bd4:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011bda:	76 31                	jbe    c0011c0d <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011bdc:	c7 05 e4 d5 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002d5e4,0xc8000
c0011be6:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011beb:	75 28                	jne    c0011c15 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011bed:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011bf2:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011bf7:	57                   	push   edi
c0011bf8:	e8 82 ff ff ff       	call   c0011b7f <Virt::getPageState(unsigned long)>
c0011bfd:	5a                   	pop    edx
c0011bfe:	84 c0                	test   al,al
c0011c00:	74 c6                	je     c0011bc8 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011c02:	31 db                	xor    ebx,ebx
c0011c04:	47                   	inc    edi
c0011c05:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011c0b:	77 cf                	ja     c0011bdc <Virt::allocateKernelVirtualPages(int)+0x39>
c0011c0d:	89 3d e4 d5 02 c0    	mov    DWORD PTR ds:0xc002d5e4,edi
c0011c13:	eb a8                	jmp    c0011bbd <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011c15:	83 ec 0c             	sub    esp,0xc
c0011c18:	68 f8 a5 02 c0       	push   0xc002a5f8
c0011c1d:	e8 01 8a 00 00       	call   c001a623 <Krnl::panic(char const*)>
c0011c22:	8b 3d e4 d5 02 c0    	mov    edi,DWORD PTR ds:0xc002d5e4
c0011c28:	83 c4 10             	add    esp,0x10
c0011c2b:	eb 90                	jmp    c0011bbd <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011c2d:	89 2d e4 d5 02 c0    	mov    DWORD PTR ds:0xc002d5e4,ebp
c0011c33:	4b                   	dec    ebx
c0011c34:	74 5f                	je     c0011c95 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011c36:	85 f6                	test   esi,esi
c0011c38:	74 3d                	je     c0011c77 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011c3a:	89 e8                	mov    eax,ebp
c0011c3c:	31 db                	xor    ebx,ebx
c0011c3e:	8d 7e ff             	lea    edi,[esi-0x1]
c0011c41:	eb 14                	jmp    c0011c57 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011c43:	6a 01                	push   0x1
c0011c45:	43                   	inc    ebx
c0011c46:	50                   	push   eax
c0011c47:	e8 fe fe ff ff       	call   c0011b4a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c4c:	58                   	pop    eax
c0011c4d:	39 f3                	cmp    ebx,esi
c0011c4f:	5a                   	pop    edx
c0011c50:	74 25                	je     c0011c77 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011c52:	a1 e4 d5 02 c0       	mov    eax,ds:0xc002d5e4
c0011c57:	8d 50 01             	lea    edx,[eax+0x1]
c0011c5a:	85 db                	test   ebx,ebx
c0011c5c:	89 15 e4 d5 02 c0    	mov    DWORD PTR ds:0xc002d5e4,edx
c0011c62:	74 20                	je     c0011c84 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011c64:	39 df                	cmp    edi,ebx
c0011c66:	75 db                	jne    c0011c43 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011c68:	6a 03                	push   0x3
c0011c6a:	43                   	inc    ebx
c0011c6b:	50                   	push   eax
c0011c6c:	e8 d9 fe ff ff       	call   c0011b4a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c71:	59                   	pop    ecx
c0011c72:	39 f3                	cmp    ebx,esi
c0011c74:	58                   	pop    eax
c0011c75:	75 db                	jne    c0011c52 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c77:	83 c4 1c             	add    esp,0x1c
c0011c7a:	89 e8                	mov    eax,ebp
c0011c7c:	5b                   	pop    ebx
c0011c7d:	c1 e0 0c             	shl    eax,0xc
c0011c80:	5e                   	pop    esi
c0011c81:	5f                   	pop    edi
c0011c82:	5d                   	pop    ebp
c0011c83:	c3                   	ret    
c0011c84:	6a 02                	push   0x2
c0011c86:	bb 01 00 00 00       	mov    ebx,0x1
c0011c8b:	50                   	push   eax
c0011c8c:	e8 b9 fe ff ff       	call   c0011b4a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c91:	58                   	pop    eax
c0011c92:	5a                   	pop    edx
c0011c93:	eb bd                	jmp    c0011c52 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c95:	6a 04                	push   0x4
c0011c97:	8d 45 01             	lea    eax,[ebp+0x1]
c0011c9a:	55                   	push   ebp
c0011c9b:	a3 e4 d5 02 c0       	mov    ds:0xc002d5e4,eax
c0011ca0:	e8 a5 fe ff ff       	call   c0011b4a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011ca5:	59                   	pop    ecx
c0011ca6:	89 e8                	mov    eax,ebp
c0011ca8:	5b                   	pop    ebx
c0011ca9:	c1 e0 0c             	shl    eax,0xc
c0011cac:	83 c4 1c             	add    esp,0x1c
c0011caf:	5b                   	pop    ebx
c0011cb0:	5e                   	pop    esi
c0011cb1:	5f                   	pop    edi
c0011cb2:	5d                   	pop    ebp
c0011cb3:	c3                   	ret    

c0011cb4 <Virt::freeSwapfilePage(unsigned long)>:
c0011cb4:	53                   	push   ebx
c0011cb5:	8b 15 c4 e7 02 c0    	mov    edx,DWORD PTR ds:0xc002e7c4
c0011cbb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011cbf:	b8 01 00 00 00       	mov    eax,0x1
c0011cc4:	89 cb                	mov    ebx,ecx
c0011cc6:	d3 e0                	shl    eax,cl
c0011cc8:	c1 eb 05             	shr    ebx,0x5
c0011ccb:	f7 d0                	not    eax
c0011ccd:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011cd0:	5b                   	pop    ebx
c0011cd1:	c3                   	ret    

c0011cd2 <Virt::swapIDToSector(unsigned long)>:
c0011cd2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011cd6:	0f af 05 ec d5 02 c0 	imul   eax,DWORD PTR ds:0xc002d5ec
c0011cdd:	03 05 f4 d5 02 c0    	add    eax,DWORD PTR ds:0xc002d5f4
c0011ce3:	c3                   	ret    

c0011ce4 <Virt::allocateSwapfilePage()>:
c0011ce4:	55                   	push   ebp
c0011ce5:	31 d2                	xor    edx,edx
c0011ce7:	57                   	push   edi
c0011ce8:	56                   	push   esi
c0011ce9:	53                   	push   ebx
c0011cea:	83 ec 0c             	sub    esp,0xc
c0011ced:	8b 0d ec d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d5ec
c0011cf3:	a1 f0 d5 02 c0       	mov    eax,ds:0xc002d5f0
c0011cf8:	f7 f1                	div    ecx
c0011cfa:	39 0d f0 d5 02 c0    	cmp    DWORD PTR ds:0xc002d5f0,ecx
c0011d00:	72 2d                	jb     c0011d2f <Virt::allocateSwapfilePage()+0x4b>
c0011d02:	8b 35 c4 e7 02 c0    	mov    esi,DWORD PTR ds:0xc002e7c4
c0011d08:	8b 16                	mov    edx,DWORD PTR [esi]
c0011d0a:	f6 c2 01             	test   dl,0x1
c0011d0d:	74 3c                	je     c0011d4b <Virt::allocateSwapfilePage()+0x67>
c0011d0f:	31 c9                	xor    ecx,ecx
c0011d11:	bf 01 00 00 00       	mov    edi,0x1
c0011d16:	eb 12                	jmp    c0011d2a <Virt::allocateSwapfilePage()+0x46>
c0011d18:	89 fd                	mov    ebp,edi
c0011d1a:	89 ca                	mov    edx,ecx
c0011d1c:	d3 e5                	shl    ebp,cl
c0011d1e:	c1 ea 05             	shr    edx,0x5
c0011d21:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011d24:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011d26:	85 ea                	test   edx,ebp
c0011d28:	74 2a                	je     c0011d54 <Virt::allocateSwapfilePage()+0x70>
c0011d2a:	41                   	inc    ecx
c0011d2b:	39 c8                	cmp    eax,ecx
c0011d2d:	77 e9                	ja     c0011d18 <Virt::allocateSwapfilePage()+0x34>
c0011d2f:	83 ec 0c             	sub    esp,0xc
c0011d32:	68 6a a8 02 c0       	push   0xc002a86a
c0011d37:	e8 e7 88 00 00       	call   c001a623 <Krnl::panic(char const*)>
c0011d3c:	83 c4 10             	add    esp,0x10
c0011d3f:	31 c9                	xor    ecx,ecx
c0011d41:	83 c4 0c             	add    esp,0xc
c0011d44:	89 c8                	mov    eax,ecx
c0011d46:	5b                   	pop    ebx
c0011d47:	5e                   	pop    esi
c0011d48:	5f                   	pop    edi
c0011d49:	5d                   	pop    ebp
c0011d4a:	c3                   	ret    
c0011d4b:	89 f3                	mov    ebx,esi
c0011d4d:	bd 01 00 00 00       	mov    ebp,0x1
c0011d52:	31 c9                	xor    ecx,ecx
c0011d54:	09 ea                	or     edx,ebp
c0011d56:	89 c8                	mov    eax,ecx
c0011d58:	89 13                	mov    DWORD PTR [ebx],edx
c0011d5a:	83 c4 0c             	add    esp,0xc
c0011d5d:	5b                   	pop    ebx
c0011d5e:	5e                   	pop    esi
c0011d5f:	5f                   	pop    edi
c0011d60:	5d                   	pop    ebp
c0011d61:	c3                   	ret    

c0011d62 <Virt::virtualMemorySetup()>:
c0011d62:	53                   	push   ebx
c0011d63:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011d68:	83 ec 08             	sub    esp,0x8
c0011d6b:	6a 0f                	push   0xf
c0011d6d:	53                   	push   ebx
c0011d6e:	43                   	inc    ebx
c0011d6f:	e8 d6 fd ff ff       	call   c0011b4a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d74:	59                   	pop    ecx
c0011d75:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011d7b:	58                   	pop    eax
c0011d7c:	75 ed                	jne    c0011d6b <Virt::virtualMemorySetup()+0x9>
c0011d7e:	83 ec 08             	sub    esp,0x8
c0011d81:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011d86:	68 00 00 00 c8       	push   0xc8000000
c0011d8b:	68 81 a8 02 c0       	push   0xc002a881
c0011d90:	e8 dc 11 00 00       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0011d95:	58                   	pop    eax
c0011d96:	5a                   	pop    edx
c0011d97:	68 00 f0 ff ef       	push   0xeffff000
c0011d9c:	68 95 a8 02 c0       	push   0xc002a895
c0011da1:	e8 cb 11 00 00       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0011da6:	83 c4 10             	add    esp,0x10
c0011da9:	83 ec 08             	sub    esp,0x8
c0011dac:	6a 00                	push   0x0
c0011dae:	53                   	push   ebx
c0011daf:	43                   	inc    ebx
c0011db0:	e8 95 fd ff ff       	call   c0011b4a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011db5:	83 c4 10             	add    esp,0x10
c0011db8:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011dbe:	75 e9                	jne    c0011da9 <Virt::virtualMemorySetup()+0x47>
c0011dc0:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011dc5:	83 ec 08             	sub    esp,0x8
c0011dc8:	6a 0f                	push   0xf
c0011dca:	53                   	push   ebx
c0011dcb:	43                   	inc    ebx
c0011dcc:	e8 79 fd ff ff       	call   c0011b4a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011dd1:	83 c4 10             	add    esp,0x10
c0011dd4:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011dda:	75 e9                	jne    c0011dc5 <Virt::virtualMemorySetup()+0x63>
c0011ddc:	83 c4 08             	add    esp,0x8
c0011ddf:	5b                   	pop    ebx
c0011de0:	c3                   	ret    

c0011de1 <Virt::swappingSetup()>:
c0011de1:	83 ec 14             	sub    esp,0x14
c0011de4:	31 d2                	xor    edx,edx
c0011de6:	a1 f0 d5 02 c0       	mov    eax,ds:0xc002d5f0
c0011deb:	f7 35 ec d5 02 c0    	div    DWORD PTR ds:0xc002d5ec
c0011df1:	c1 e8 05             	shr    eax,0x5
c0011df4:	50                   	push   eax
c0011df5:	68 a9 a8 02 c0       	push   0xc002a8a9
c0011dfa:	e8 72 11 00 00       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0011dff:	a1 f0 d5 02 c0       	mov    eax,ds:0xc002d5f0
c0011e04:	31 d2                	xor    edx,edx
c0011e06:	f7 35 ec d5 02 c0    	div    DWORD PTR ds:0xc002d5ec
c0011e0c:	c1 e8 05             	shr    eax,0x5
c0011e0f:	89 04 24             	mov    DWORD PTR [esp],eax
c0011e12:	e8 29 da ff ff       	call   c000f840 <malloc>
c0011e17:	83 c4 0c             	add    esp,0xc
c0011e1a:	89 c1                	mov    ecx,eax
c0011e1c:	a3 c4 e7 02 c0       	mov    ds:0xc002e7c4,eax
c0011e21:	31 d2                	xor    edx,edx
c0011e23:	a1 f0 d5 02 c0       	mov    eax,ds:0xc002d5f0
c0011e28:	f7 35 ec d5 02 c0    	div    DWORD PTR ds:0xc002d5ec
c0011e2e:	c1 e8 05             	shr    eax,0x5
c0011e31:	50                   	push   eax
c0011e32:	6a 00                	push   0x0
c0011e34:	51                   	push   ecx
c0011e35:	e8 3e e9 fe ff       	call   c0000778 <memset>
c0011e3a:	83 c4 1c             	add    esp,0x1c
c0011e3d:	c3                   	ret    

c0011e3e <Virt::getAKernelVAS()>:
c0011e3e:	a1 c8 e7 02 c0       	mov    eax,ds:0xc002e7c8
c0011e43:	c3                   	ret    

c0011e44 <Virt::setupPageSwapping(int)>:
c0011e44:	57                   	push   edi
c0011e45:	56                   	push   esi
c0011e46:	53                   	push   ebx
c0011e47:	83 ec 1c             	sub    esp,0x1c
c0011e4a:	68 14 01 00 00       	push   0x114
c0011e4f:	e8 ec d9 ff ff       	call   c000f840 <malloc>
c0011e54:	83 c4 0c             	add    esp,0xc
c0011e57:	89 c6                	mov    esi,eax
c0011e59:	ff 35 b4 1b 03 c0    	push   DWORD PTR ds:0xc0031bb4
c0011e5f:	68 c4 a8 02 c0       	push   0xc002a8c4
c0011e64:	50                   	push   eax
c0011e65:	e8 60 16 00 00       	call   c00134ca <File::File(char const*, Process*)>
c0011e6a:	89 34 24             	mov    DWORD PTR [esp],esi
c0011e6d:	e8 34 18 00 00       	call   c00136a6 <File::unlink()>
c0011e72:	58                   	pop    eax
c0011e73:	5a                   	pop    edx
c0011e74:	6a 12                	push   0x12
c0011e76:	56                   	push   esi
c0011e77:	e8 b2 16 00 00       	call   c001352e <File::open(FileOpenMode)>
c0011e7c:	83 c4 10             	add    esp,0x10
c0011e7f:	85 c0                	test   eax,eax
c0011e81:	0f 85 ca 00 00 00    	jne    c0011f51 <Virt::setupPageSwapping(int)+0x10d>
c0011e87:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011e8b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011e93:	c1 e3 08             	shl    ebx,0x8
c0011e96:	83 ec 0c             	sub    esp,0xc
c0011e99:	68 00 00 01 00       	push   0x10000
c0011e9e:	e8 9d d9 ff ff       	call   c000f840 <malloc>
c0011ea3:	83 c4 0c             	add    esp,0xc
c0011ea6:	89 c7                	mov    edi,eax
c0011ea8:	68 00 00 01 00       	push   0x10000
c0011ead:	6a 00                	push   0x0
c0011eaf:	50                   	push   eax
c0011eb0:	e8 c3 e8 fe ff       	call   c0000778 <memset>
c0011eb5:	83 c4 10             	add    esp,0x10
c0011eb8:	85 db                	test   ebx,ebx
c0011eba:	79 03                	jns    c0011ebf <Virt::setupPageSwapping(int)+0x7b>
c0011ebc:	83 c3 0f             	add    ebx,0xf
c0011ebf:	c1 fb 04             	sar    ebx,0x4
c0011ec2:	4b                   	dec    ebx
c0011ec3:	83 fb ff             	cmp    ebx,0xffffffff
c0011ec6:	74 4b                	je     c0011f13 <Virt::setupPageSwapping(int)+0xcf>
c0011ec8:	83 ec 0c             	sub    esp,0xc
c0011ecb:	8b 06                	mov    eax,DWORD PTR [esi]
c0011ecd:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011ed1:	52                   	push   edx
c0011ed2:	57                   	push   edi
c0011ed3:	6a 00                	push   0x0
c0011ed5:	68 00 00 01 00       	push   0x10000
c0011eda:	56                   	push   esi
c0011edb:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011ede:	83 c4 20             	add    esp,0x20
c0011ee1:	85 c0                	test   eax,eax
c0011ee3:	75 59                	jne    c0011f3e <Virt::setupPageSwapping(int)+0xfa>
c0011ee5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ee9:	3d 00 00 01 00       	cmp    eax,0x10000
c0011eee:	74 d2                	je     c0011ec2 <Virt::setupPageSwapping(int)+0x7e>
c0011ef0:	83 ec 08             	sub    esp,0x8
c0011ef3:	4b                   	dec    ebx
c0011ef4:	50                   	push   eax
c0011ef5:	68 17 a9 02 c0       	push   0xc002a917
c0011efa:	e8 72 10 00 00       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0011eff:	c7 04 24 20 a9 02 c0 	mov    DWORD PTR [esp],0xc002a920
c0011f06:	e8 18 87 00 00       	call   c001a623 <Krnl::panic(char const*)>
c0011f0b:	83 c4 10             	add    esp,0x10
c0011f0e:	83 fb ff             	cmp    ebx,0xffffffff
c0011f11:	75 b5                	jne    c0011ec8 <Virt::setupPageSwapping(int)+0x84>
c0011f13:	83 ec 0c             	sub    esp,0xc
c0011f16:	56                   	push   esi
c0011f17:	e8 70 16 00 00       	call   c001358c <File::close()>
c0011f1c:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011f1f:	e8 3c d9 ff ff       	call   c000f860 <rfree>
c0011f24:	83 c4 10             	add    esp,0x10
c0011f27:	85 f6                	test   esi,esi
c0011f29:	74 0c                	je     c0011f37 <Virt::setupPageSwapping(int)+0xf3>
c0011f2b:	83 ec 0c             	sub    esp,0xc
c0011f2e:	8b 06                	mov    eax,DWORD PTR [esi]
c0011f30:	56                   	push   esi
c0011f31:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011f34:	83 c4 10             	add    esp,0x10
c0011f37:	83 c4 10             	add    esp,0x10
c0011f3a:	5b                   	pop    ebx
c0011f3b:	5e                   	pop    esi
c0011f3c:	5f                   	pop    edi
c0011f3d:	c3                   	ret    
c0011f3e:	83 ec 08             	sub    esp,0x8
c0011f41:	50                   	push   eax
c0011f42:	68 ff a8 02 c0       	push   0xc002a8ff
c0011f47:	e8 25 10 00 00       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0011f4c:	83 c4 10             	add    esp,0x10
c0011f4f:	eb 94                	jmp    c0011ee5 <Virt::setupPageSwapping(int)+0xa1>
c0011f51:	83 ec 08             	sub    esp,0x8
c0011f54:	50                   	push   eax
c0011f55:	68 db a8 02 c0       	push   0xc002a8db
c0011f5a:	e8 12 10 00 00       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0011f5f:	c7 04 24 e4 a8 02 c0 	mov    DWORD PTR [esp],0xc002a8e4
c0011f66:	e8 b8 86 00 00       	call   c001a623 <Krnl::panic(char const*)>
c0011f6b:	83 c4 10             	add    esp,0x10
c0011f6e:	e9 14 ff ff ff       	jmp    c0011e87 <Virt::setupPageSwapping(int)+0x43>
c0011f73:	90                   	nop

c0011f74 <VAS::VAS()>:
c0011f74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f78:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f83:	a3 c8 e7 02 c0       	mov    ds:0xc002e7c8,eax
c0011f88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f8c:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011f90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f94:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011f97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f9b:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011fa2:	90                   	nop
c0011fa3:	c3                   	ret    

c0011fa4 <VAS::VAS(VAS*)>:
c0011fa4:	83 ec 0c             	sub    esp,0xc
c0011fa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011fab:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011fb2:	83 ec 0c             	sub    esp,0xc
c0011fb5:	68 18 a6 02 c0       	push   0xc002a618
c0011fba:	e8 64 86 00 00       	call   c001a623 <Krnl::panic(char const*)>
c0011fbf:	83 c4 10             	add    esp,0x10
c0011fc2:	90                   	nop
c0011fc3:	83 c4 0c             	add    esp,0xc
c0011fc6:	c3                   	ret    
c0011fc7:	90                   	nop

c0011fc8 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011fc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011fcc:	89 c2                	mov    edx,eax
c0011fce:	c1 e8 0a             	shr    eax,0xa
c0011fd1:	c1 ea 16             	shr    edx,0x16
c0011fd4:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011fd9:	19 c9                	sbb    ecx,ecx
c0011fdb:	c1 e2 0c             	shl    edx,0xc
c0011fde:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011fe4:	25 fc 0f 00 00       	and    eax,0xffc
c0011fe9:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011ff0:	01 d0                	add    eax,edx
c0011ff2:	c3                   	ret    
c0011ff3:	90                   	nop

c0011ff4 <VAS::getPageTableEntry(unsigned long)>:
c0011ff4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011ff8:	89 ca                	mov    edx,ecx
c0011ffa:	c1 e9 0a             	shr    ecx,0xa
c0011ffd:	c1 ea 16             	shr    edx,0x16
c0012000:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0012006:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c001200c:	c1 e0 0c             	shl    eax,0xc
c001200f:	8d 04 08             	lea    eax,[eax+ecx*1]
c0012012:	c3                   	ret    

c0012013 <Virt::freeKernelVirtualPages(unsigned long)>:
c0012013:	57                   	push   edi
c0012014:	56                   	push   esi
c0012015:	be 01 00 00 00       	mov    esi,0x1
c001201a:	53                   	push   ebx
c001201b:	83 ec 10             	sub    esp,0x10
c001201e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012022:	c1 eb 0c             	shr    ebx,0xc
c0012025:	eb 3f                	jmp    c0012066 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0012027:	e8 12 fe ff ff       	call   c0011e3e <Virt::getAKernelVAS()>
c001202c:	83 ec 08             	sub    esp,0x8
c001202f:	57                   	push   edi
c0012030:	50                   	push   eax
c0012031:	e8 be ff ff ff       	call   c0011ff4 <VAS::getPageTableEntry(unsigned long)>
c0012036:	83 c4 10             	add    esp,0x10
c0012039:	8b 00                	mov    eax,DWORD PTR [eax]
c001203b:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001203f:	f6 c4 04             	test   ah,0x4
c0012042:	75 5f                	jne    c00120a3 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0012044:	80 fa 04             	cmp    dl,0x4
c0012047:	74 78                	je     c00120c1 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0012049:	80 fa 02             	cmp    dl,0x2
c001204c:	0f 84 88 00 00 00    	je     c00120da <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0012052:	80 fa 03             	cmp    dl,0x3
c0012055:	0f 84 ad 00 00 00    	je     c0012108 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c001205b:	fe ca                	dec    dl
c001205d:	0f 84 92 00 00 00    	je     c00120f5 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0012063:	43                   	inc    ebx
c0012064:	31 f6                	xor    esi,esi
c0012066:	53                   	push   ebx
c0012067:	e8 13 fb ff ff       	call   c0011b7f <Virt::getPageState(unsigned long)>
c001206c:	5f                   	pop    edi
c001206d:	89 df                	mov    edi,ebx
c001206f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012073:	c1 e7 0c             	shl    edi,0xc
c0012076:	84 c0                	test   al,al
c0012078:	75 ad                	jne    c0012027 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c001207a:	83 ec 0c             	sub    esp,0xc
c001207d:	68 26 a9 02 c0       	push   0xc002a926
c0012082:	e8 9c 85 00 00       	call   c001a623 <Krnl::panic(char const*)>
c0012087:	e8 b2 fd ff ff       	call   c0011e3e <Virt::getAKernelVAS()>
c001208c:	5a                   	pop    edx
c001208d:	59                   	pop    ecx
c001208e:	57                   	push   edi
c001208f:	50                   	push   eax
c0012090:	e8 5f ff ff ff       	call   c0011ff4 <VAS::getPageTableEntry(unsigned long)>
c0012095:	83 c4 10             	add    esp,0x10
c0012098:	8b 00                	mov    eax,DWORD PTR [eax]
c001209a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001209e:	f6 c4 04             	test   ah,0x4
c00120a1:	74 c0                	je     c0012063 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00120a3:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c00120a7:	25 00 f0 ff ff       	and    eax,0xfffff000
c00120ac:	83 ec 0c             	sub    esp,0xc
c00120af:	50                   	push   eax
c00120b0:	e8 a3 dd ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c00120b5:	83 c4 10             	add    esp,0x10
c00120b8:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00120bc:	80 fa 04             	cmp    dl,0x4
c00120bf:	75 88                	jne    c0012049 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c00120c1:	89 f0                	mov    eax,esi
c00120c3:	84 c0                	test   al,al
c00120c5:	75 47                	jne    c001210e <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c00120c7:	c7 44 24 20 3c a6 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a63c
c00120cf:	83 c4 10             	add    esp,0x10
c00120d2:	5b                   	pop    ebx
c00120d3:	5e                   	pop    esi
c00120d4:	5f                   	pop    edi
c00120d5:	e9 49 85 00 00       	jmp    c001a623 <Krnl::panic(char const*)>
c00120da:	89 f0                	mov    eax,esi
c00120dc:	84 c0                	test   al,al
c00120de:	75 15                	jne    c00120f5 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00120e0:	83 ec 0c             	sub    esp,0xc
c00120e3:	68 42 a9 02 c0       	push   0xc002a942
c00120e8:	e8 36 85 00 00       	call   c001a623 <Krnl::panic(char const*)>
c00120ed:	83 c4 10             	add    esp,0x10
c00120f0:	e9 6e ff ff ff       	jmp    c0012063 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00120f5:	83 ec 08             	sub    esp,0x8
c00120f8:	6a 00                	push   0x0
c00120fa:	53                   	push   ebx
c00120fb:	e8 4a fa ff ff       	call   c0011b4a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012100:	83 c4 10             	add    esp,0x10
c0012103:	e9 5b ff ff ff       	jmp    c0012063 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0012108:	89 f0                	mov    eax,esi
c001210a:	84 c0                	test   al,al
c001210c:	75 15                	jne    c0012123 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c001210e:	83 ec 08             	sub    esp,0x8
c0012111:	6a 00                	push   0x0
c0012113:	53                   	push   ebx
c0012114:	e8 31 fa ff ff       	call   c0011b4a <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012119:	83 c4 10             	add    esp,0x10
c001211c:	83 c4 10             	add    esp,0x10
c001211f:	5b                   	pop    ebx
c0012120:	5e                   	pop    esi
c0012121:	5f                   	pop    edi
c0012122:	c3                   	ret    
c0012123:	c7 44 24 20 5e a9 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a95e
c001212b:	83 c4 10             	add    esp,0x10
c001212e:	5b                   	pop    ebx
c001212f:	5e                   	pop    esi
c0012130:	5f                   	pop    edi
c0012131:	e9 ed 84 00 00       	jmp    c001a623 <Krnl::panic(char const*)>

c0012136 <VAS::freeAllocatedPages(unsigned long)>:
c0012136:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001213a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001213e:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0012142:	74 09                	je     c001214d <VAS::freeAllocatedPages(unsigned long)+0x17>
c0012144:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012148:	e9 c6 fe ff ff       	jmp    c0012013 <Virt::freeKernelVirtualPages(unsigned long)>
c001214d:	c7 44 24 04 60 a6 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a660
c0012155:	e9 17 0e 00 00       	jmp    c0012f71 <Dbg::kprintf(char const*, ...)>

c001215a <VAS::virtualToPhysical(unsigned long)>:
c001215a:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001215e:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0012162:	e8 8d fe ff ff       	call   c0011ff4 <VAS::getPageTableEntry(unsigned long)>
c0012167:	5a                   	pop    edx
c0012168:	8b 00                	mov    eax,DWORD PTR [eax]
c001216a:	59                   	pop    ecx
c001216b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012170:	c3                   	ret    
c0012171:	90                   	nop

c0012172 <VAS::reflagRange(unsigned long, int, int, int)>:
c0012172:	55                   	push   ebp
c0012173:	57                   	push   edi
c0012174:	56                   	push   esi
c0012175:	53                   	push   ebx
c0012176:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001217a:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001217e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012182:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012186:	85 db                	test   ebx,ebx
c0012188:	7e 22                	jle    c00121ac <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c001218a:	c1 e3 0c             	shl    ebx,0xc
c001218d:	01 f3                	add    ebx,esi
c001218f:	56                   	push   esi
c0012190:	81 c6 00 10 00 00    	add    esi,0x1000
c0012196:	55                   	push   ebp
c0012197:	e8 58 fe ff ff       	call   c0011ff4 <VAS::getPageTableEntry(unsigned long)>
c001219c:	5a                   	pop    edx
c001219d:	59                   	pop    ecx
c001219e:	8b 08                	mov    ecx,DWORD PTR [eax]
c00121a0:	21 f9                	and    ecx,edi
c00121a2:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c00121a6:	39 f3                	cmp    ebx,esi
c00121a8:	89 08                	mov    DWORD PTR [eax],ecx
c00121aa:	75 e3                	jne    c001218f <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c00121ac:	5b                   	pop    ebx
c00121ad:	5e                   	pop    esi
c00121ae:	5f                   	pop    edi
c00121af:	5d                   	pop    ebp
c00121b0:	c3                   	ret    
c00121b1:	90                   	nop

c00121b2 <VAS::setToWriteCombining(unsigned long, int)>:
c00121b2:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c00121b7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00121bd:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c00121c4:	75 01                	jne    c00121c7 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c00121c6:	c3                   	ret    
c00121c7:	68 80 00 00 00       	push   0x80
c00121cc:	6a ff                	push   0xffffffff
c00121ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121da:	e8 93 ff ff ff       	call   c0012172 <VAS::reflagRange(unsigned long, int, int, int)>
c00121df:	83 c4 14             	add    esp,0x14
c00121e2:	c3                   	ret    
c00121e3:	90                   	nop

c00121e4 <VAS::mapOtherVASIn(bool, VAS*)>:
c00121e4:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00121e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00121ed:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00121f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121f4:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00121f7:	19 c0                	sbb    eax,eax
c00121f9:	83 ca 03             	or     edx,0x3
c00121fc:	83 e0 fc             	and    eax,0xfffffffc
c00121ff:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0012206:	0f 20 d8             	mov    eax,cr3
c0012209:	0f 22 d8             	mov    cr3,eax
c001220c:	c3                   	ret    
c001220d:	90                   	nop

c001220e <VAS::~VAS()>:
c001220e:	83 ec 2c             	sub    esp,0x2c
c0012211:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012219:	e8 2a bc 00 00       	call   c001de48 <lockScheduler()>
c001221e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012223:	8b 00                	mov    eax,DWORD PTR [eax]
c0012225:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012228:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001222e:	83 ec 04             	sub    esp,0x4
c0012231:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0012235:	6a 01                	push   0x1
c0012237:	50                   	push   eax
c0012238:	e8 a7 ff ff ff       	call   c00121e4 <VAS::mapOtherVASIn(bool, VAS*)>
c001223d:	83 c4 10             	add    esp,0x10
c0012240:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012248:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0012250:	0f 8f d7 00 00 00    	jg     c001232d <VAS::~VAS()+0x11f>
c0012256:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001225a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001225d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012261:	c1 e2 02             	shl    edx,0x2
c0012264:	01 d0                	add    eax,edx
c0012266:	8b 00                	mov    eax,DWORD PTR [eax]
c0012268:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001226c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012270:	83 e0 01             	and    eax,0x1
c0012273:	0f 84 ab 00 00 00    	je     c0012324 <VAS::~VAS()+0x116>
c0012279:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012281:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0012289:	7f 75                	jg     c0012300 <VAS::~VAS()+0xf2>
c001228b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001228f:	c1 e0 0a             	shl    eax,0xa
c0012292:	89 c2                	mov    edx,eax
c0012294:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012298:	01 d0                	add    eax,edx
c001229a:	c1 e0 0c             	shl    eax,0xc
c001229d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00122a1:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00122a6:	8b 00                	mov    eax,DWORD PTR [eax]
c00122a8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00122ab:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00122b1:	83 ec 04             	sub    esp,0x4
c00122b4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00122b8:	6a 01                	push   0x1
c00122ba:	50                   	push   eax
c00122bb:	e8 08 fd ff ff       	call   c0011fc8 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00122c0:	83 c4 10             	add    esp,0x10
c00122c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00122c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00122cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00122cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00122d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122d5:	25 01 04 00 00       	and    eax,0x401
c00122da:	3d 01 04 00 00       	cmp    eax,0x401
c00122df:	75 19                	jne    c00122fa <VAS::~VAS()+0xec>
c00122e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122e5:	25 00 f0 ff ff       	and    eax,0xfffff000
c00122ea:	83 ec 0c             	sub    esp,0xc
c00122ed:	50                   	push   eax
c00122ee:	e8 65 db ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c00122f3:	83 c4 10             	add    esp,0x10
c00122f6:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00122fa:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00122fe:	eb 81                	jmp    c0012281 <VAS::~VAS()+0x73>
c0012300:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012304:	25 00 04 00 00       	and    eax,0x400
c0012309:	74 19                	je     c0012324 <VAS::~VAS()+0x116>
c001230b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001230f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012314:	83 ec 0c             	sub    esp,0xc
c0012317:	50                   	push   eax
c0012318:	e8 3b db ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c001231d:	83 c4 10             	add    esp,0x10
c0012320:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012324:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012328:	e9 1b ff ff ff       	jmp    c0012248 <VAS::~VAS()+0x3a>
c001232d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012331:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012334:	83 ec 0c             	sub    esp,0xc
c0012337:	50                   	push   eax
c0012338:	e8 d6 fc ff ff       	call   c0012013 <Virt::freeKernelVirtualPages(unsigned long)>
c001233d:	83 c4 10             	add    esp,0x10
c0012340:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012344:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012347:	83 ec 0c             	sub    esp,0xc
c001234a:	50                   	push   eax
c001234b:	e8 08 db ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c0012350:	83 c4 10             	add    esp,0x10
c0012353:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012357:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001235b:	c1 e0 02             	shl    eax,0x2
c001235e:	83 ec 08             	sub    esp,0x8
c0012361:	50                   	push   eax
c0012362:	68 84 a6 02 c0       	push   0xc002a684
c0012367:	e8 05 0c 00 00       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001236c:	83 c4 10             	add    esp,0x10
c001236f:	e8 d6 ba 00 00       	call   c001de4a <unlockScheduler()>
c0012374:	90                   	nop
c0012375:	83 c4 2c             	add    esp,0x2c
c0012378:	c3                   	ret    
c0012379:	90                   	nop

c001237a <VAS::mapPage(unsigned long, unsigned long, int)>:
c001237a:	55                   	push   ebp
c001237b:	57                   	push   edi
c001237c:	56                   	push   esi
c001237d:	53                   	push   ebx
c001237e:	83 ec 1c             	sub    esp,0x1c
c0012381:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0012385:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012389:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c001238f:	77 08                	ja     c0012399 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0012391:	0f 20 d8             	mov    eax,cr3
c0012394:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c0012397:	75 47                	jne    c00123e0 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0012399:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001239d:	09 d8                	or     eax,ebx
c001239f:	a9 ff 0f 00 00       	test   eax,0xfff
c00123a4:	75 57                	jne    c00123fd <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c00123a6:	89 de                	mov    esi,ebx
c00123a8:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00123ab:	c1 ee 16             	shr    esi,0x16
c00123ae:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c00123b5:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00123b9:	74 54                	je     c001240f <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c00123bb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00123bf:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c00123c5:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00123c9:	c1 e6 0c             	shl    esi,0xc
c00123cc:	c1 eb 0a             	shr    ebx,0xa
c00123cf:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00123d5:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c00123d8:	83 c4 1c             	add    esp,0x1c
c00123db:	5b                   	pop    ebx
c00123dc:	5e                   	pop    esi
c00123dd:	5f                   	pop    edi
c00123de:	5d                   	pop    ebp
c00123df:	c3                   	ret    
c00123e0:	83 ec 0c             	sub    esp,0xc
c00123e3:	68 a4 a6 02 c0       	push   0xc002a6a4
c00123e8:	e8 84 0b 00 00       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c00123ed:	83 c4 10             	add    esp,0x10
c00123f0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00123f4:	09 d8                	or     eax,ebx
c00123f6:	a9 ff 0f 00 00       	test   eax,0xfff
c00123fb:	74 a9                	je     c00123a6 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00123fd:	83 ec 0c             	sub    esp,0xc
c0012400:	68 0c a7 02 c0       	push   0xc002a70c
c0012405:	e8 19 82 00 00       	call   c001a623 <Krnl::panic(char const*)>
c001240a:	83 c4 10             	add    esp,0x10
c001240d:	eb 97                	jmp    c00123a6 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c001240f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012413:	e8 ca da ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012418:	89 c5                	mov    ebp,eax
c001241a:	e8 1f fa ff ff       	call   c0011e3e <Virt::getAKernelVAS()>
c001241f:	83 ec 0c             	sub    esp,0xc
c0012422:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012426:	6a 01                	push   0x1
c0012428:	e8 76 f7 ff ff       	call   c0011ba3 <Virt::allocateKernelVirtualPages(int)>
c001242d:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012434:	6a 01                	push   0x1
c0012436:	50                   	push   eax
c0012437:	55                   	push   ebp
c0012438:	81 cd 07 04 00 00    	or     ebp,0x407
c001243e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012442:	51                   	push   ecx
c0012443:	e8 26 02 00 00       	call   c001266e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012448:	83 c4 1c             	add    esp,0x1c
c001244b:	68 00 10 00 00       	push   0x1000
c0012450:	6a 00                	push   0x0
c0012452:	50                   	push   eax
c0012453:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012457:	e8 1c e3 fe ff       	call   c0000778 <memset>
c001245c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012460:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012463:	e8 ab fb ff ff       	call   c0012013 <Virt::freeKernelVirtualPages(unsigned long)>
c0012468:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001246c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001246f:	83 c4 10             	add    esp,0x10
c0012472:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0012475:	e9 41 ff ff ff       	jmp    c00123bb <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c001247a <VAS::allocatePages(int, int)>:
c001247a:	55                   	push   ebp
c001247b:	57                   	push   edi
c001247c:	56                   	push   esi
c001247d:	53                   	push   ebx
c001247e:	83 ec 1c             	sub    esp,0x1c
c0012481:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012485:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c001248a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012490:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012496:	83 e0 01             	and    eax,0x1
c0012499:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c001249d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00124a1:	0f 85 cc 00 00 00    	jne    c0012573 <VAS::allocatePages(int, int)+0xf9>
c00124a7:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00124aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00124ae:	85 c0                	test   eax,eax
c00124b0:	0f 84 a1 00 00 00    	je     c0012557 <VAS::allocatePages(int, int)+0xdd>
c00124b6:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00124ba:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00124be:	c1 e6 0c             	shl    esi,0xc
c00124c1:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c00124c5:	85 c0                	test   eax,eax
c00124c7:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00124ca:	7e 33                	jle    c00124ff <VAS::allocatePages(int, int)+0x85>
c00124cc:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00124d0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00124d4:	81 cd 00 04 00 00    	or     ebp,0x400
c00124da:	e8 03 da ff ff       	call   c000fee2 <Phys::allocatePage()>
c00124df:	55                   	push   ebp
c00124e0:	53                   	push   ebx
c00124e1:	50                   	push   eax
c00124e2:	57                   	push   edi
c00124e3:	e8 92 fe ff ff       	call   c001237a <VAS::mapPage(unsigned long, unsigned long, int)>
c00124e8:	83 c4 10             	add    esp,0x10
c00124eb:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124f0:	74 03                	je     c00124f5 <VAS::allocatePages(int, int)+0x7b>
c00124f2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00124f5:	81 c3 00 10 00 00    	add    ebx,0x1000
c00124fb:	39 de                	cmp    esi,ebx
c00124fd:	75 db                	jne    c00124da <VAS::allocatePages(int, int)+0x60>
c00124ff:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012504:	75 12                	jne    c0012518 <VAS::allocatePages(int, int)+0x9e>
c0012506:	0f 20 d8             	mov    eax,cr3
c0012509:	0f 22 d8             	mov    cr3,eax
c001250c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012510:	83 c4 1c             	add    esp,0x1c
c0012513:	5b                   	pop    ebx
c0012514:	5e                   	pop    esi
c0012515:	5f                   	pop    edi
c0012516:	5d                   	pop    ebp
c0012517:	c3                   	ret    
c0012518:	c1 ee 0a             	shr    esi,0xa
c001251b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001251f:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012525:	c1 eb 0a             	shr    ebx,0xa
c0012528:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c001252e:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012534:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001253a:	39 c3                	cmp    ebx,eax
c001253c:	77 ce                	ja     c001250c <VAS::allocatePages(int, int)+0x92>
c001253e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012541:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012547:	39 d8                	cmp    eax,ebx
c0012549:	73 f3                	jae    c001253e <VAS::allocatePages(int, int)+0xc4>
c001254b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001254f:	83 c4 1c             	add    esp,0x1c
c0012552:	5b                   	pop    ebx
c0012553:	5e                   	pop    esi
c0012554:	5f                   	pop    edi
c0012555:	5d                   	pop    ebp
c0012556:	c3                   	ret    
c0012557:	83 ec 0c             	sub    esp,0xc
c001255a:	68 30 a7 02 c0       	push   0xc002a730
c001255f:	e8 bf 80 00 00       	call   c001a623 <Krnl::panic(char const*)>
c0012564:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012567:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001256b:	83 c4 10             	add    esp,0x10
c001256e:	e9 43 ff ff ff       	jmp    c00124b6 <VAS::allocatePages(int, int)+0x3c>
c0012573:	83 ec 0c             	sub    esp,0xc
c0012576:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001257a:	e8 24 f6 ff ff       	call   c0011ba3 <Virt::allocateKernelVirtualPages(int)>
c001257f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012583:	83 c4 10             	add    esp,0x10
c0012586:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c001258b:	0f 87 9b 00 00 00    	ja     c001262c <VAS::allocatePages(int, int)+0x1b2>
c0012591:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012595:	85 d2                	test   edx,edx
c0012597:	7e 3c                	jle    c00125d5 <VAS::allocatePages(int, int)+0x15b>
c0012599:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001259d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00125a1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00125a5:	c1 e5 0c             	shl    ebp,0xc
c00125a8:	81 ce 00 04 00 00    	or     esi,0x400
c00125ae:	01 dd                	add    ebp,ebx
c00125b0:	e8 2d d9 ff ff       	call   c000fee2 <Phys::allocatePage()>
c00125b5:	56                   	push   esi
c00125b6:	53                   	push   ebx
c00125b7:	50                   	push   eax
c00125b8:	57                   	push   edi
c00125b9:	e8 bc fd ff ff       	call   c001237a <VAS::mapPage(unsigned long, unsigned long, int)>
c00125be:	83 c4 10             	add    esp,0x10
c00125c1:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125c6:	74 03                	je     c00125cb <VAS::allocatePages(int, int)+0x151>
c00125c8:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00125cb:	81 c3 00 10 00 00    	add    ebx,0x1000
c00125d1:	39 dd                	cmp    ebp,ebx
c00125d3:	75 db                	jne    c00125b0 <VAS::allocatePages(int, int)+0x136>
c00125d5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125da:	0f 84 26 ff ff ff    	je     c0012506 <VAS::allocatePages(int, int)+0x8c>
c00125e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00125e4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00125e8:	89 d3                	mov    ebx,edx
c00125ea:	c1 e0 0c             	shl    eax,0xc
c00125ed:	c1 eb 0a             	shr    ebx,0xa
c00125f0:	01 d0                	add    eax,edx
c00125f2:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00125f8:	c1 e8 0a             	shr    eax,0xa
c00125fb:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012601:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012606:	2d 00 00 40 00       	sub    eax,0x400000
c001260b:	39 c3                	cmp    ebx,eax
c001260d:	0f 87 f9 fe ff ff    	ja     c001250c <VAS::allocatePages(int, int)+0x92>
c0012613:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012616:	81 c3 00 10 00 00    	add    ebx,0x1000
c001261c:	39 d8                	cmp    eax,ebx
c001261e:	73 f3                	jae    c0012613 <VAS::allocatePages(int, int)+0x199>
c0012620:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012624:	83 c4 1c             	add    esp,0x1c
c0012627:	5b                   	pop    ebx
c0012628:	5e                   	pop    esi
c0012629:	5f                   	pop    edi
c001262a:	5d                   	pop    ebp
c001262b:	c3                   	ret    
c001262c:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c0012631:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012637:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c001263e:	0f 84 4d ff ff ff    	je     c0012591 <VAS::allocatePages(int, int)+0x117>
c0012644:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c001264c:	e9 40 ff ff ff       	jmp    c0012591 <VAS::allocatePages(int, int)+0x117>
c0012651:	90                   	nop

c0012652 <VAS::setCPUSpecific(unsigned long)>:
c0012652:	83 ec 0c             	sub    esp,0xc
c0012655:	6a 05                	push   0x5
c0012657:	68 00 00 40 c2       	push   0xc2400000
c001265c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012660:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012664:	e8 11 fd ff ff       	call   c001237a <VAS::mapPage(unsigned long, unsigned long, int)>
c0012669:	83 c4 1c             	add    esp,0x1c
c001266c:	c3                   	ret    
c001266d:	90                   	nop

c001266e <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c001266e:	55                   	push   ebp
c001266f:	57                   	push   edi
c0012670:	56                   	push   esi
c0012671:	53                   	push   ebx
c0012672:	83 ec 1c             	sub    esp,0x1c
c0012675:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c001267a:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001267e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012684:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012688:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c001268e:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012692:	83 e0 01             	and    eax,0x1
c0012695:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012699:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001269d:	85 c0                	test   eax,eax
c001269f:	7e 39                	jle    c00126da <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c00126a1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126a5:	89 f3                	mov    ebx,esi
c00126a7:	c1 e0 0c             	shl    eax,0xc
c00126aa:	01 f0                	add    eax,esi
c00126ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00126b0:	55                   	push   ebp
c00126b1:	53                   	push   ebx
c00126b2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126b6:	29 f0                	sub    eax,esi
c00126b8:	01 d8                	add    eax,ebx
c00126ba:	50                   	push   eax
c00126bb:	57                   	push   edi
c00126bc:	e8 b9 fc ff ff       	call   c001237a <VAS::mapPage(unsigned long, unsigned long, int)>
c00126c1:	83 c4 10             	add    esp,0x10
c00126c4:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00126c9:	74 03                	je     c00126ce <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c00126cb:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00126ce:	81 c3 00 10 00 00    	add    ebx,0x1000
c00126d4:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c00126d8:	75 d6                	jne    c00126b0 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c00126da:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00126df:	75 10                	jne    c00126f1 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c00126e1:	0f 20 d8             	mov    eax,cr3
c00126e4:	0f 22 d8             	mov    cr3,eax
c00126e7:	83 c4 1c             	add    esp,0x1c
c00126ea:	89 f0                	mov    eax,esi
c00126ec:	5b                   	pop    ebx
c00126ed:	5e                   	pop    esi
c00126ee:	5f                   	pop    edi
c00126ef:	5d                   	pop    ebp
c00126f0:	c3                   	ret    
c00126f1:	89 f3                	mov    ebx,esi
c00126f3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126f7:	c1 eb 0a             	shr    ebx,0xa
c00126fa:	c1 e0 0c             	shl    eax,0xc
c00126fd:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012703:	01 f0                	add    eax,esi
c0012705:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001270b:	c1 e8 0a             	shr    eax,0xa
c001270e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012713:	2d 00 00 40 00       	sub    eax,0x400000
c0012718:	39 c3                	cmp    ebx,eax
c001271a:	77 cb                	ja     c00126e7 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c001271c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001271f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012725:	39 d8                	cmp    eax,ebx
c0012727:	73 f3                	jae    c001271c <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0012729:	83 c4 1c             	add    esp,0x1c
c001272c:	89 f0                	mov    eax,esi
c001272e:	5b                   	pop    ebx
c001272f:	5e                   	pop    esi
c0012730:	5f                   	pop    edi
c0012731:	5d                   	pop    ebp
c0012732:	c3                   	ret    
c0012733:	90                   	nop

c0012734 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0012734:	55                   	push   ebp
c0012735:	57                   	push   edi
c0012736:	56                   	push   esi
c0012737:	53                   	push   ebx
c0012738:	83 ec 1c             	sub    esp,0x1c
c001273b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001273f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012743:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0012747:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001274b:	a9 ff 0f 00 00       	test   eax,0xfff
c0012750:	75 4a                	jne    c001279c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0012752:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012756:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012759:	c1 eb 16             	shr    ebx,0x16
c001275c:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0012763:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0012767:	74 4d                	je     c00127b6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0012769:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001276d:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0012771:	c1 e8 0a             	shr    eax,0xa
c0012774:	80 fa 01             	cmp    dl,0x1
c0012777:	19 d2                	sbb    edx,edx
c0012779:	c1 e3 0c             	shl    ebx,0xc
c001277c:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0012780:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0012786:	25 fc 0f 00 00       	and    eax,0xffc
c001278b:	01 d8                	add    eax,ebx
c001278d:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0012794:	83 c4 1c             	add    esp,0x1c
c0012797:	5b                   	pop    ebx
c0012798:	5e                   	pop    esi
c0012799:	5f                   	pop    edi
c001279a:	5d                   	pop    ebp
c001279b:	c3                   	ret    
c001279c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00127a0:	83 ec 0c             	sub    esp,0xc
c00127a3:	68 5c a7 02 c0       	push   0xc002a75c
c00127a8:	e8 76 7e 00 00       	call   c001a623 <Krnl::panic(char const*)>
c00127ad:	83 c4 10             	add    esp,0x10
c00127b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00127b4:	eb 9c                	jmp    c0012752 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c00127b6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00127ba:	e8 23 d7 ff ff       	call   c000fee2 <Phys::allocatePage()>
c00127bf:	89 c5                	mov    ebp,eax
c00127c1:	e8 78 f6 ff ff       	call   c0011e3e <Virt::getAKernelVAS()>
c00127c6:	83 ec 0c             	sub    esp,0xc
c00127c9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00127cd:	6a 01                	push   0x1
c00127cf:	e8 cf f3 ff ff       	call   c0011ba3 <Virt::allocateKernelVirtualPages(int)>
c00127d4:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00127db:	6a 01                	push   0x1
c00127dd:	50                   	push   eax
c00127de:	55                   	push   ebp
c00127df:	81 cd 07 04 00 00    	or     ebp,0x407
c00127e5:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00127e9:	51                   	push   ecx
c00127ea:	e8 7f fe ff ff       	call   c001266e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00127ef:	83 c4 1c             	add    esp,0x1c
c00127f2:	68 00 10 00 00       	push   0x1000
c00127f7:	6a 00                	push   0x0
c00127f9:	50                   	push   eax
c00127fa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00127fe:	e8 75 df fe ff       	call   c0000778 <memset>
c0012803:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012807:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001280a:	e8 04 f8 ff ff       	call   c0012013 <Virt::freeKernelVirtualPages(unsigned long)>
c001280f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012812:	83 c4 10             	add    esp,0x10
c0012815:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0012818:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001281c:	e9 48 ff ff ff       	jmp    c0012769 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c0012821:	90                   	nop

c0012822 <VAS::VAS(bool)>:
c0012822:	53                   	push   ebx
c0012823:	83 ec 28             	sub    esp,0x28
c0012826:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001282a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001282e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012832:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012839:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001283d:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012841:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012844:	e8 99 d6 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012849:	89 c2                	mov    edx,eax
c001284b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001284f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012852:	e8 e7 f5 ff ff       	call   c0011e3e <Virt::getAKernelVAS()>
c0012857:	89 c3                	mov    ebx,eax
c0012859:	83 ec 0c             	sub    esp,0xc
c001285c:	6a 01                	push   0x1
c001285e:	e8 40 f3 ff ff       	call   c0011ba3 <Virt::allocateKernelVirtualPages(int)>
c0012863:	83 c4 10             	add    esp,0x10
c0012866:	89 c2                	mov    edx,eax
c0012868:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001286c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001286f:	83 ec 0c             	sub    esp,0xc
c0012872:	6a 03                	push   0x3
c0012874:	6a 01                	push   0x1
c0012876:	52                   	push   edx
c0012877:	50                   	push   eax
c0012878:	53                   	push   ebx
c0012879:	e8 f0 fd ff ff       	call   c001266e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001287e:	83 c4 20             	add    esp,0x20
c0012881:	89 c2                	mov    edx,eax
c0012883:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012887:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001288a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012892:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c001289a:	7f 1c                	jg     c00128b8 <VAS::VAS(bool)+0x96>
c001289c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00128a3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00128a7:	c1 e2 02             	shl    edx,0x2
c00128aa:	01 d0                	add    eax,edx
c00128ac:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00128b2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00128b6:	eb da                	jmp    c0012892 <VAS::VAS(bool)+0x70>
c00128b8:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c00128c0:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c00128c8:	7f 7a                	jg     c0012944 <VAS::VAS(bool)+0x122>
c00128ca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00128ce:	2d 00 02 00 00       	sub    eax,0x200
c00128d3:	c1 e0 0c             	shl    eax,0xc
c00128d6:	83 c8 03             	or     eax,0x3
c00128d9:	89 c2                	mov    edx,eax
c00128db:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c00128e0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128e6:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00128ec:	83 e0 10             	and    eax,0x10
c00128ef:	84 c0                	test   al,al
c00128f1:	74 07                	je     c00128fa <VAS::VAS(bool)+0xd8>
c00128f3:	b8 00 01 00 00       	mov    eax,0x100
c00128f8:	eb 05                	jmp    c00128ff <VAS::VAS(bool)+0xdd>
c00128fa:	b8 00 00 00 00       	mov    eax,0x0
c00128ff:	09 d0                	or     eax,edx
c0012901:	89 c1                	mov    ecx,eax
c0012903:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012907:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001290a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001290e:	c1 e2 02             	shl    edx,0x2
c0012911:	01 d0                	add    eax,edx
c0012913:	89 ca                	mov    edx,ecx
c0012915:	89 10                	mov    DWORD PTR [eax],edx
c0012917:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001291b:	2d 40 03 00 00       	sub    eax,0x340
c0012920:	83 f8 7f             	cmp    eax,0x7f
c0012923:	77 16                	ja     c001293b <VAS::VAS(bool)+0x119>
c0012925:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012929:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001292c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012930:	c1 e2 02             	shl    edx,0x2
c0012933:	01 d0                	add    eax,edx
c0012935:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c001293b:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001293f:	e9 7c ff ff ff       	jmp    c00128c0 <VAS::VAS(bool)+0x9e>
c0012944:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c0012949:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001294f:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012955:	83 e0 10             	and    eax,0x10
c0012958:	84 c0                	test   al,al
c001295a:	74 07                	je     c0012963 <VAS::VAS(bool)+0x141>
c001295c:	b8 03 41 00 00       	mov    eax,0x4103
c0012961:	eb 05                	jmp    c0012968 <VAS::VAS(bool)+0x146>
c0012963:	b8 03 40 00 00       	mov    eax,0x4003
c0012968:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001296c:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001296f:	81 c2 20 0c 00 00    	add    edx,0xc20
c0012975:	89 02                	mov    DWORD PTR [edx],eax
c0012977:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c001297c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012982:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0012988:	83 ec 08             	sub    esp,0x8
c001298b:	50                   	push   eax
c001298c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012990:	e8 bd fc ff ff       	call   c0012652 <VAS::setCPUSpecific(unsigned long)>
c0012995:	83 c4 10             	add    esp,0x10
c0012998:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001299c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001299f:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c00129a4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129aa:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00129b0:	83 e0 10             	and    eax,0x10
c00129b3:	84 c0                	test   al,al
c00129b5:	74 07                	je     c00129be <VAS::VAS(bool)+0x19c>
c00129b7:	b8 00 01 00 00       	mov    eax,0x100
c00129bc:	eb 05                	jmp    c00129c3 <VAS::VAS(bool)+0x1a1>
c00129be:	b8 00 00 00 00       	mov    eax,0x0
c00129c3:	09 c2                	or     edx,eax
c00129c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00129c9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00129cc:	05 fc 0f 00 00       	add    eax,0xffc
c00129d1:	83 ca 03             	or     edx,0x3
c00129d4:	89 10                	mov    DWORD PTR [eax],edx
c00129d6:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c00129db:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129e1:	83 ec 0c             	sub    esp,0xc
c00129e4:	50                   	push   eax
c00129e5:	e8 9a 1c 00 00       	call   c0014684 <Device::getName()>
c00129ea:	83 c4 10             	add    esp,0x10
c00129ed:	83 ec 08             	sub    esp,0x8
c00129f0:	68 78 a9 02 c0       	push   0xc002a978
c00129f5:	50                   	push   eax
c00129f6:	e8 c5 de fe ff       	call   c00008c0 <strcmp>
c00129fb:	83 c4 10             	add    esp,0x10
c00129fe:	85 c0                	test   eax,eax
c0012a00:	0f 94 c0             	sete   al
c0012a03:	84 c0                	test   al,al
c0012a05:	74 70                	je     c0012a77 <VAS::VAS(bool)+0x255>
c0012a07:	e8 1f b4 00 00       	call   c001de2b <disableIRQs()>
c0012a0c:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c0012a11:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012a17:	05 7c 09 00 00       	add    eax,0x97c
c0012a1c:	83 ec 0c             	sub    esp,0xc
c0012a1f:	50                   	push   eax
c0012a20:	e8 97 c8 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012a25:	83 c4 10             	add    esp,0x10
c0012a28:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012a2d:	89 c3                	mov    ebx,eax
c0012a2f:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c0012a34:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012a3a:	05 7c 09 00 00       	add    eax,0x97c
c0012a3f:	83 ec 0c             	sub    esp,0xc
c0012a42:	50                   	push   eax
c0012a43:	e8 74 c8 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012a48:	83 c4 10             	add    esp,0x10
c0012a4b:	83 ec 08             	sub    esp,0x8
c0012a4e:	50                   	push   eax
c0012a4f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a53:	e8 9c f5 ff ff       	call   c0011ff4 <VAS::getPageTableEntry(unsigned long)>
c0012a58:	83 c4 10             	add    esp,0x10
c0012a5b:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a5d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012a62:	6a 11                	push   0x11
c0012a64:	53                   	push   ebx
c0012a65:	50                   	push   eax
c0012a66:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a6a:	e8 0b f9 ff ff       	call   c001237a <VAS::mapPage(unsigned long, unsigned long, int)>
c0012a6f:	83 c4 10             	add    esp,0x10
c0012a72:	e8 c2 b3 00 00       	call   c001de39 <enableIRQs()>
c0012a77:	90                   	nop
c0012a78:	83 c4 28             	add    esp,0x28
c0012a7b:	5b                   	pop    ebx
c0012a7c:	c3                   	ret    
c0012a7d:	90                   	nop

c0012a7e <VAS::evict(unsigned long)>:
c0012a7e:	57                   	push   edi
c0012a7f:	56                   	push   esi
c0012a80:	53                   	push   ebx
c0012a81:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0012a85:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012a89:	e8 ba b3 00 00       	call   c001de48 <lockScheduler()>
c0012a8e:	83 ec 08             	sub    esp,0x8
c0012a91:	56                   	push   esi
c0012a92:	68 80 a7 02 c0       	push   0xc002a780
c0012a97:	e8 d5 04 00 00       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0012a9c:	e8 43 f2 ff ff       	call   c0011ce4 <Virt::allocateSwapfilePage()>
c0012aa1:	83 c4 0c             	add    esp,0xc
c0012aa4:	89 c3                	mov    ebx,eax
c0012aa6:	50                   	push   eax
c0012aa7:	50                   	push   eax
c0012aa8:	68 86 a9 02 c0       	push   0xc002a986
c0012aad:	e8 bf 04 00 00       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0012ab2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012ab5:	e8 18 f2 ff ff       	call   c0011cd2 <Virt::swapIDToSector(unsigned long)>
c0012aba:	c1 e3 0b             	shl    ebx,0xb
c0012abd:	89 34 24             	mov    DWORD PTR [esp],esi
c0012ac0:	31 d2                	xor    edx,edx
c0012ac2:	6a 08                	push   0x8
c0012ac4:	52                   	push   edx
c0012ac5:	50                   	push   eax
c0012ac6:	0f be 05 f8 d5 02 c0 	movsx  eax,BYTE PTR ds:0xc002d5f8
c0012acd:	ff 34 85 5c eb 02 c0 	push   DWORD PTR [eax*4-0x3ffd14a4]
c0012ad4:	e8 25 3d 00 00       	call   c00167fe <LogicalDisk::write(unsigned long long, int, void*)>
c0012ad9:	83 c4 18             	add    esp,0x18
c0012adc:	56                   	push   esi
c0012add:	57                   	push   edi
c0012ade:	e8 11 f5 ff ff       	call   c0011ff4 <VAS::getPageTableEntry(unsigned long)>
c0012ae3:	89 c6                	mov    esi,eax
c0012ae5:	8b 00                	mov    eax,DWORD PTR [eax]
c0012ae7:	c1 e8 0c             	shr    eax,0xc
c0012aea:	89 04 24             	mov    DWORD PTR [esp],eax
c0012aed:	e8 66 d3 ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c0012af2:	8b 16                	mov    edx,DWORD PTR [esi]
c0012af4:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012afa:	09 d3                	or     ebx,edx
c0012afc:	89 1e                	mov    DWORD PTR [esi],ebx
c0012afe:	c7 04 24 96 a9 02 c0 	mov    DWORD PTR [esp],0xc002a996
c0012b05:	e8 67 04 00 00       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0012b0a:	83 c4 10             	add    esp,0x10
c0012b0d:	5b                   	pop    ebx
c0012b0e:	5e                   	pop    esi
c0012b0f:	5f                   	pop    edi
c0012b10:	e9 35 b3 00 00       	jmp    c001de4a <unlockScheduler()>
c0012b15:	90                   	nop

c0012b16 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012b16:	57                   	push   edi
c0012b17:	56                   	push   esi
c0012b18:	53                   	push   ebx
c0012b19:	83 ec 10             	sub    esp,0x10
c0012b1c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0012b20:	e8 23 b3 00 00       	call   c001de48 <lockScheduler()>
c0012b25:	83 ec 08             	sub    esp,0x8
c0012b28:	56                   	push   esi
c0012b29:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012b2f:	68 a0 a7 02 c0       	push   0xc002a7a0
c0012b34:	e8 38 04 00 00       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0012b39:	58                   	pop    eax
c0012b3a:	5a                   	pop    edx
c0012b3b:	56                   	push   esi
c0012b3c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012b40:	e8 af f4 ff ff       	call   c0011ff4 <VAS::getPageTableEntry(unsigned long)>
c0012b45:	59                   	pop    ecx
c0012b46:	5b                   	pop    ebx
c0012b47:	89 c3                	mov    ebx,eax
c0012b49:	ff 30                	push   DWORD PTR [eax]
c0012b4b:	68 a6 a9 02 c0       	push   0xc002a9a6
c0012b50:	e8 1c 04 00 00       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0012b55:	5f                   	pop    edi
c0012b56:	58                   	pop    eax
c0012b57:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012b59:	c1 e8 0b             	shr    eax,0xb
c0012b5c:	50                   	push   eax
c0012b5d:	68 b7 a9 02 c0       	push   0xc002a9b7
c0012b62:	e8 0a 04 00 00       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0012b67:	83 c4 10             	add    esp,0x10
c0012b6a:	f7 03 00 04 00 00    	test   DWORD PTR [ebx],0x400
c0012b70:	75 1e                	jne    c0012b90 <VAS::tryLoadBackOffDisk(unsigned long)+0x7a>
c0012b72:	83 ec 0c             	sub    esp,0xc
c0012b75:	68 2c aa 02 c0       	push   0xc002aa2c
c0012b7a:	e8 f2 03 00 00       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0012b7f:	e8 c6 b2 00 00       	call   c001de4a <unlockScheduler()>
c0012b84:	83 c4 10             	add    esp,0x10
c0012b87:	31 c0                	xor    eax,eax
c0012b89:	83 c4 10             	add    esp,0x10
c0012b8c:	5b                   	pop    ebx
c0012b8d:	5e                   	pop    esi
c0012b8e:	5f                   	pop    edi
c0012b8f:	c3                   	ret    
c0012b90:	83 ec 0c             	sub    esp,0xc
c0012b93:	68 d4 a9 02 c0       	push   0xc002a9d4
c0012b98:	e8 d4 03 00 00       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0012b9d:	c6 05 80 e6 02 c0 01 	mov    BYTE PTR ds:0xc002e680,0x1
c0012ba4:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0012ba6:	e8 37 d3 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012bab:	c1 ef 0b             	shr    edi,0xb
c0012bae:	5a                   	pop    edx
c0012baf:	c6 05 80 e6 02 c0 00 	mov    BYTE PTR ds:0xc002e680,0x0
c0012bb6:	59                   	pop    ecx
c0012bb7:	50                   	push   eax
c0012bb8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012bbc:	68 ec a9 02 c0       	push   0xc002a9ec
c0012bc1:	e8 ab 03 00 00       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0012bc6:	58                   	pop    eax
c0012bc7:	5a                   	pop    edx
c0012bc8:	ff 33                	push   DWORD PTR [ebx]
c0012bca:	68 06 aa 02 c0       	push   0xc002aa06
c0012bcf:	e8 9d 03 00 00       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0012bd4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012bd8:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012bda:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012be0:	09 d0                	or     eax,edx
c0012be2:	0d 01 08 00 00       	or     eax,0x801
c0012be7:	89 03                	mov    DWORD PTR [ebx],eax
c0012be9:	59                   	pop    ecx
c0012bea:	5b                   	pop    ebx
c0012beb:	50                   	push   eax
c0012bec:	68 19 aa 02 c0       	push   0xc002aa19
c0012bf1:	e8 7b 03 00 00       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0012bf6:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012bf9:	e8 d4 f0 ff ff       	call   c0011cd2 <Virt::swapIDToSector(unsigned long)>
c0012bfe:	89 34 24             	mov    DWORD PTR [esp],esi
c0012c01:	31 d2                	xor    edx,edx
c0012c03:	ff 35 ec d5 02 c0    	push   DWORD PTR ds:0xc002d5ec
c0012c09:	52                   	push   edx
c0012c0a:	50                   	push   eax
c0012c0b:	0f be 05 f8 d5 02 c0 	movsx  eax,BYTE PTR ds:0xc002d5f8
c0012c12:	ff 34 85 5c eb 02 c0 	push   DWORD PTR [eax*4-0x3ffd14a4]
c0012c19:	e8 74 3b 00 00       	call   c0016792 <LogicalDisk::read(unsigned long long, int, void*)>
c0012c1e:	83 c4 14             	add    esp,0x14
c0012c21:	57                   	push   edi
c0012c22:	e8 8d f0 ff ff       	call   c0011cb4 <Virt::freeSwapfilePage(unsigned long)>
c0012c27:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012c2a:	e8 a3 f0 ff ff       	call   c0011cd2 <Virt::swapIDToSector(unsigned long)>
c0012c2f:	5e                   	pop    esi
c0012c30:	5f                   	pop    edi
c0012c31:	50                   	push   eax
c0012c32:	68 cc a7 02 c0       	push   0xc002a7cc
c0012c37:	e8 35 03 00 00       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0012c3c:	e8 09 b2 00 00       	call   c001de4a <unlockScheduler()>
c0012c41:	83 c4 10             	add    esp,0x10
c0012c44:	b0 01                	mov    al,0x1
c0012c46:	83 c4 10             	add    esp,0x10
c0012c49:	5b                   	pop    ebx
c0012c4a:	5e                   	pop    esi
c0012c4b:	5f                   	pop    edi
c0012c4c:	c3                   	ret    
c0012c4d:	90                   	nop

c0012c4e <VAS::scanForEviction(int, int)>:
c0012c4e:	55                   	push   ebp
c0012c4f:	57                   	push   edi
c0012c50:	56                   	push   esi
c0012c51:	53                   	push   ebx
c0012c52:	83 ec 1c             	sub    esp,0x1c
c0012c55:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0012c59:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012c5d:	85 c9                	test   ecx,ecx
c0012c5f:	75 08                	jne    c0012c69 <VAS::scanForEviction(int, int)+0x1b>
c0012c61:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0012c69:	83 ec 0c             	sub    esp,0xc
c0012c6c:	bb 00 00 40 00       	mov    ebx,0x400000
c0012c71:	68 ec a7 02 c0       	push   0xc002a7ec
c0012c76:	31 ff                	xor    edi,edi
c0012c78:	e8 f4 02 00 00       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0012c7d:	83 c4 10             	add    esp,0x10
c0012c80:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012c88:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012c90:	eb 17                	jmp    c0012ca9 <VAS::scanForEviction(int, int)+0x5b>
c0012c92:	83 44 24 0c 04       	add    DWORD PTR [esp+0xc],0x4
c0012c97:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012c9d:	81 fb 00 00 40 c0    	cmp    ebx,0xc0400000
c0012ca3:	0f 84 88 00 00 00    	je     c0012d31 <VAS::scanForEviction(int, int)+0xe3>
c0012ca9:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0012cac:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012cb0:	f6 04 08 01          	test   BYTE PTR [eax+ecx*1],0x1
c0012cb4:	74 dc                	je     c0012c92 <VAS::scanForEviction(int, int)+0x44>
c0012cb6:	8d ab 00 00 c0 ff    	lea    ebp,[ebx-0x400000]
c0012cbc:	eb 0a                	jmp    c0012cc8 <VAS::scanForEviction(int, int)+0x7a>
c0012cbe:	81 c5 00 10 00 00    	add    ebp,0x1000
c0012cc4:	39 eb                	cmp    ebx,ebp
c0012cc6:	74 ca                	je     c0012c92 <VAS::scanForEviction(int, int)+0x44>
c0012cc8:	83 ec 08             	sub    esp,0x8
c0012ccb:	55                   	push   ebp
c0012ccc:	56                   	push   esi
c0012ccd:	e8 22 f3 ff ff       	call   c0011ff4 <VAS::getPageTableEntry(unsigned long)>
c0012cd2:	83 c4 10             	add    esp,0x10
c0012cd5:	8b 00                	mov    eax,DWORD PTR [eax]
c0012cd7:	89 c2                	mov    edx,eax
c0012cd9:	81 e2 00 0c 00 00    	and    edx,0xc00
c0012cdf:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c0012ce5:	75 d7                	jne    c0012cbe <VAS::scanForEviction(int, int)+0x70>
c0012ce7:	a8 01                	test   al,0x1
c0012ce9:	74 4e                	je     c0012d39 <VAS::scanForEviction(int, int)+0xeb>
c0012ceb:	83 ec 08             	sub    esp,0x8
c0012cee:	55                   	push   ebp
c0012cef:	68 10 a8 02 c0       	push   0xc002a810
c0012cf4:	e8 78 02 00 00       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0012cf9:	89 f8                	mov    eax,edi
c0012cfb:	99                   	cdq    
c0012cfc:	f7 7c 24 44          	idiv   DWORD PTR [esp+0x44]
c0012d00:	83 c4 10             	add    esp,0x10
c0012d03:	85 d2                	test   edx,edx
c0012d05:	74 03                	je     c0012d0a <VAS::scanForEviction(int, int)+0xbc>
c0012d07:	47                   	inc    edi
c0012d08:	eb b4                	jmp    c0012cbe <VAS::scanForEviction(int, int)+0x70>
c0012d0a:	83 ec 0c             	sub    esp,0xc
c0012d0d:	68 45 aa 02 c0       	push   0xc002aa45
c0012d12:	e8 5a 02 00 00       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0012d17:	58                   	pop    eax
c0012d18:	5a                   	pop    edx
c0012d19:	55                   	push   ebp
c0012d1a:	56                   	push   esi
c0012d1b:	e8 5e fd ff ff       	call   c0012a7e <VAS::evict(unsigned long)>
c0012d20:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012d24:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012d28:	83 c4 10             	add    esp,0x10
c0012d2b:	3b 44 24 38          	cmp    eax,DWORD PTR [esp+0x38]
c0012d2f:	75 d6                	jne    c0012d07 <VAS::scanForEviction(int, int)+0xb9>
c0012d31:	83 c4 1c             	add    esp,0x1c
c0012d34:	5b                   	pop    ebx
c0012d35:	5e                   	pop    esi
c0012d36:	5f                   	pop    edi
c0012d37:	5d                   	pop    ebp
c0012d38:	c3                   	ret    
c0012d39:	83 ec 08             	sub    esp,0x8
c0012d3c:	55                   	push   ebp
c0012d3d:	68 3c a8 02 c0       	push   0xc002a83c
c0012d42:	e8 2a 02 00 00       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0012d47:	83 c4 10             	add    esp,0x10
c0012d4a:	e9 6f ff ff ff       	jmp    c0012cbe <VAS::scanForEviction(int, int)+0x70>

c0012d4f <mapVASFirstTime>:
c0012d4f:	55                   	push   ebp
c0012d50:	57                   	push   edi
c0012d51:	56                   	push   esi
c0012d52:	53                   	push   ebx
c0012d53:	83 ec 0c             	sub    esp,0xc
c0012d56:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012d5b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012d5e:	4a                   	dec    edx
c0012d5f:	0f 84 8e 00 00 00    	je     c0012df3 <mapVASFirstTime+0xa4>
c0012d65:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012d68:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012d6b:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012d70:	c1 e5 15             	shl    ebp,0x15
c0012d73:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012d78:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012d7e:	29 eb                	sub    ebx,ebp
c0012d80:	29 ee                	sub    esi,ebp
c0012d82:	e8 5b d1 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012d87:	83 ec 0c             	sub    esp,0xc
c0012d8a:	68 03 04 00 00       	push   0x403
c0012d8f:	6a 01                	push   0x1
c0012d91:	53                   	push   ebx
c0012d92:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012d98:	50                   	push   eax
c0012d99:	57                   	push   edi
c0012d9a:	e8 cf f8 ff ff       	call   c001266e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012d9f:	83 c4 20             	add    esp,0x20
c0012da2:	39 f3                	cmp    ebx,esi
c0012da4:	75 dc                	jne    c0012d82 <mapVASFirstTime+0x33>
c0012da6:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012dab:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012db0:	29 ee                	sub    esi,ebp
c0012db2:	29 e8                	sub    eax,ebp
c0012db4:	89 c5                	mov    ebp,eax
c0012db6:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012dba:	19 db                	sbb    ebx,ebx
c0012dbc:	e8 21 d1 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0012dc1:	83 e3 04             	and    ebx,0x4
c0012dc4:	83 ec 0c             	sub    esp,0xc
c0012dc7:	81 c3 03 04 00 00    	add    ebx,0x403
c0012dcd:	53                   	push   ebx
c0012dce:	6a 01                	push   0x1
c0012dd0:	56                   	push   esi
c0012dd1:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012dd7:	50                   	push   eax
c0012dd8:	57                   	push   edi
c0012dd9:	e8 90 f8 ff ff       	call   c001266e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012dde:	83 c4 20             	add    esp,0x20
c0012de1:	39 f5                	cmp    ebp,esi
c0012de3:	75 d1                	jne    c0012db6 <mapVASFirstTime+0x67>
c0012de5:	0f 20 d8             	mov    eax,cr3
c0012de8:	0f 22 d8             	mov    cr3,eax
c0012deb:	83 c4 0c             	add    esp,0xc
c0012dee:	5b                   	pop    ebx
c0012def:	5e                   	pop    esi
c0012df0:	5f                   	pop    edi
c0012df1:	5d                   	pop    ebp
c0012df2:	c3                   	ret    
c0012df3:	83 ec 0c             	sub    esp,0xc
c0012df6:	68 50 aa 02 c0       	push   0xc002aa50
c0012dfb:	e8 71 01 00 00       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0012e00:	83 c4 10             	add    esp,0x10
c0012e03:	83 c4 0c             	add    esp,0xc
c0012e06:	5b                   	pop    ebx
c0012e07:	5e                   	pop    esi
c0012e08:	5f                   	pop    edi
c0012e09:	5d                   	pop    ebp
c0012e0a:	c3                   	ret    

c0012e0b <__cxa_atexit>:
c0012e0b:	31 c0                	xor    eax,eax
c0012e0d:	c3                   	ret    

c0012e0e <__cxa_finalize>:
c0012e0e:	c3                   	ret    

c0012e0f <__stack_chk_fail>:
c0012e0f:	55                   	push   ebp
c0012e10:	89 e5                	mov    ebp,esp
c0012e12:	83 ec 14             	sub    esp,0x14
c0012e15:	68 69 aa 02 c0       	push   0xc002aa69
c0012e1a:	e8 52 01 00 00       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0012e1f:	58                   	pop    eax
c0012e20:	5a                   	pop    edx
c0012e21:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012e24:	68 b9 aa 02 c0       	push   0xc002aab9
c0012e29:	e8 43 01 00 00       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0012e2e:	59                   	pop    ecx
c0012e2f:	58                   	pop    eax
c0012e30:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012e33:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012e36:	68 b9 aa 02 c0       	push   0xc002aab9
c0012e3b:	e8 31 01 00 00       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0012e40:	5a                   	pop    edx
c0012e41:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012e44:	59                   	pop    ecx
c0012e45:	8b 00                	mov    eax,DWORD PTR [eax]
c0012e47:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012e4a:	68 b9 aa 02 c0       	push   0xc002aab9
c0012e4f:	e8 1d 01 00 00       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0012e54:	5a                   	pop    edx
c0012e55:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012e58:	59                   	pop    ecx
c0012e59:	8b 00                	mov    eax,DWORD PTR [eax]
c0012e5b:	8b 00                	mov    eax,DWORD PTR [eax]
c0012e5d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012e60:	68 b9 aa 02 c0       	push   0xc002aab9
c0012e65:	e8 07 01 00 00       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0012e6a:	c7 04 24 c1 aa 02 c0 	mov    DWORD PTR [esp],0xc002aac1
c0012e71:	e8 ad 77 00 00       	call   c001a623 <Krnl::panic(char const*)>
c0012e76:	83 c4 10             	add    esp,0x10
c0012e79:	c9                   	leave  
c0012e7a:	c3                   	ret    

c0012e7b <__cxa_pure_virtual>:
c0012e7b:	83 ec 18             	sub    esp,0x18
c0012e7e:	68 d9 aa 02 c0       	push   0xc002aad9
c0012e83:	e8 9b 77 00 00       	call   c001a623 <Krnl::panic(char const*)>
c0012e88:	83 c4 1c             	add    esp,0x1c
c0012e8b:	c3                   	ret    

c0012e8c <operator new[](unsigned long)>:
c0012e8c:	e9 af c9 ff ff       	jmp    c000f840 <malloc>

c0012e91 <operator delete(void*, unsigned long)>:
c0012e91:	e9 ca c9 ff ff       	jmp    c000f860 <rfree>

c0012e96 <operator delete[](void*)>:
c0012e96:	e9 c5 c9 ff ff       	jmp    c000f860 <rfree>

c0012e9b <operator delete[](void*, unsigned long)>:
c0012e9b:	e9 c0 c9 ff ff       	jmp    c000f860 <rfree>

c0012ea0 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012ea0:	57                   	push   edi
c0012ea1:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012ea6:	56                   	push   esi
c0012ea7:	be ec aa 02 c0       	mov    esi,0xc002aaec
c0012eac:	53                   	push   ebx
c0012ead:	83 ec 40             	sub    esp,0x40
c0012eb0:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012eb4:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012eb8:	fc                   	cld    
c0012eb9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012ebb:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012ebf:	83 f9 3e             	cmp    ecx,0x3e
c0012ec2:	7e 05                	jle    c0012ec9 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012ec4:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012ec9:	89 df                	mov    edi,ebx
c0012ecb:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012ecf:	eb 02                	jmp    c0012ed3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012ed1:	89 c7                	mov    edi,eax
c0012ed3:	31 d2                	xor    edx,edx
c0012ed5:	46                   	inc    esi
c0012ed6:	89 f8                	mov    eax,edi
c0012ed8:	f7 f1                	div    ecx
c0012eda:	39 cf                	cmp    edi,ecx
c0012edc:	73 f3                	jae    c0012ed1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012ede:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012ee1:	eb 02                	jmp    c0012ee5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012ee3:	89 c3                	mov    ebx,eax
c0012ee5:	31 d2                	xor    edx,edx
c0012ee7:	4e                   	dec    esi
c0012ee8:	89 d8                	mov    eax,ebx
c0012eea:	f7 f1                	div    ecx
c0012eec:	39 cb                	cmp    ebx,ecx
c0012eee:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012ef2:	88 16                	mov    BYTE PTR [esi],dl
c0012ef4:	73 ed                	jae    c0012ee3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012ef6:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012efa:	83 c4 40             	add    esp,0x40
c0012efd:	5b                   	pop    ebx
c0012efe:	5e                   	pop    esi
c0012eff:	5f                   	pop    edi
c0012f00:	c3                   	ret    

c0012f01 <Dbg::logc(char)>:
c0012f01:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f05:	ba fd 03 00 00       	mov    edx,0x3fd
c0012f0a:	ec                   	in     al,dx
c0012f0b:	a8 20                	test   al,0x20
c0012f0d:	74 fb                	je     c0012f0a <Dbg::logc(char)+0x9>
c0012f0f:	ba f8 03 00 00       	mov    edx,0x3f8
c0012f14:	88 c8                	mov    al,cl
c0012f16:	ee                   	out    dx,al
c0012f17:	c3                   	ret    

c0012f18 <Dbg::logs(char*)>:
c0012f18:	53                   	push   ebx
c0012f19:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012f1d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012f20:	84 c0                	test   al,al
c0012f22:	74 0f                	je     c0012f33 <Dbg::logs(char*)+0x1b>
c0012f24:	50                   	push   eax
c0012f25:	43                   	inc    ebx
c0012f26:	e8 d6 ff ff ff       	call   c0012f01 <Dbg::logc(char)>
c0012f2b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012f2e:	5a                   	pop    edx
c0012f2f:	84 c0                	test   al,al
c0012f31:	75 f1                	jne    c0012f24 <Dbg::logs(char*)+0xc>
c0012f33:	5b                   	pop    ebx
c0012f34:	c3                   	ret    

c0012f35 <Dbg::logWriteInt(unsigned int)>:
c0012f35:	83 ec 10             	sub    esp,0x10
c0012f38:	6a 0a                	push   0xa
c0012f3a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012f3e:	50                   	push   eax
c0012f3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f43:	e8 58 ff ff ff       	call   c0012ea0 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012f48:	50                   	push   eax
c0012f49:	e8 ca ff ff ff       	call   c0012f18 <Dbg::logs(char*)>
c0012f4e:	83 c4 20             	add    esp,0x20
c0012f51:	c3                   	ret    

c0012f52 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012f52:	83 ec 10             	sub    esp,0x10
c0012f55:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012f59:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012f5d:	50                   	push   eax
c0012f5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f62:	e8 39 ff ff ff       	call   c0012ea0 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012f67:	50                   	push   eax
c0012f68:	e8 ab ff ff ff       	call   c0012f18 <Dbg::logs(char*)>
c0012f6d:	83 c4 20             	add    esp,0x20
c0012f70:	c3                   	ret    

c0012f71 <Dbg::kprintf(char const*, ...)>:
c0012f71:	55                   	push   ebp
c0012f72:	57                   	push   edi
c0012f73:	56                   	push   esi
c0012f74:	53                   	push   ebx
c0012f75:	83 ec 0c             	sub    esp,0xc
c0012f78:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012f7c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012f80:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012f84:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012f87:	84 c0                	test   al,al
c0012f89:	74 4a                	je     c0012fd5 <Dbg::kprintf(char const*, ...)+0x64>
c0012f8b:	31 db                	xor    ebx,ebx
c0012f8d:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012f90:	3c 25                	cmp    al,0x25
c0012f92:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012f95:	0f 85 e4 00 00 00    	jne    c001307f <Dbg::kprintf(char const*, ...)+0x10e>
c0012f9b:	83 c3 02             	add    ebx,0x2
c0012f9e:	8a 07                	mov    al,BYTE PTR [edi]
c0012fa0:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012fa3:	83 e8 25             	sub    eax,0x25
c0012fa6:	3c 53                	cmp    al,0x53
c0012fa8:	0f 87 ba 00 00 00    	ja     c0013068 <Dbg::kprintf(char const*, ...)+0xf7>
c0012fae:	0f b6 c0             	movzx  eax,al
c0012fb1:	ff 24 85 2c ab 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd54d4]
c0012fb8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012fbc:	89 c8                	mov    eax,ecx
c0012fbe:	83 c1 04             	add    ecx,0x4
c0012fc1:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012fc5:	ff 30                	push   DWORD PTR [eax]
c0012fc7:	e8 4c ff ff ff       	call   c0012f18 <Dbg::logs(char*)>
c0012fcc:	58                   	pop    eax
c0012fcd:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012fd1:	84 c0                	test   al,al
c0012fd3:	75 b8                	jne    c0012f8d <Dbg::kprintf(char const*, ...)+0x1c>
c0012fd5:	83 c4 0c             	add    esp,0xc
c0012fd8:	5b                   	pop    ebx
c0012fd9:	5e                   	pop    esi
c0012fda:	5f                   	pop    edi
c0012fdb:	5d                   	pop    ebp
c0012fdc:	c3                   	ret    
c0012fdd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012fe1:	89 d0                	mov    eax,edx
c0012fe3:	83 c2 04             	add    edx,0x4
c0012fe6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012fea:	ff 30                	push   DWORD PTR [eax]
c0012fec:	e8 44 ff ff ff       	call   c0012f35 <Dbg::logWriteInt(unsigned int)>
c0012ff1:	58                   	pop    eax
c0012ff2:	eb d9                	jmp    c0012fcd <Dbg::kprintf(char const*, ...)+0x5c>
c0012ff4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012ff8:	89 d0                	mov    eax,edx
c0012ffa:	83 c2 04             	add    edx,0x4
c0012ffd:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0013000:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0013004:	50                   	push   eax
c0013005:	e8 f7 fe ff ff       	call   c0012f01 <Dbg::logc(char)>
c001300a:	58                   	pop    eax
c001300b:	eb c0                	jmp    c0012fcd <Dbg::kprintf(char const*, ...)+0x5c>
c001300d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013011:	89 c8                	mov    eax,ecx
c0013013:	83 c1 04             	add    ecx,0x4
c0013016:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001301a:	ff 30                	push   DWORD PTR [eax]
c001301c:	e8 14 ff ff ff       	call   c0012f35 <Dbg::logWriteInt(unsigned int)>
c0013021:	5f                   	pop    edi
c0013022:	eb a9                	jmp    c0012fcd <Dbg::kprintf(char const*, ...)+0x5c>
c0013024:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013028:	89 c8                	mov    eax,ecx
c001302a:	83 c1 04             	add    ecx,0x4
c001302d:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0013031:	6a 10                	push   0x10
c0013033:	ff 30                	push   DWORD PTR [eax]
c0013035:	e8 18 ff ff ff       	call   c0012f52 <Dbg::logWriteIntBase(unsigned int, int)>
c001303a:	59                   	pop    ecx
c001303b:	5f                   	pop    edi
c001303c:	eb 8f                	jmp    c0012fcd <Dbg::kprintf(char const*, ...)+0x5c>
c001303e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013042:	89 d0                	mov    eax,edx
c0013044:	83 c2 08             	add    edx,0x8
c0013047:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001304b:	6a 10                	push   0x10
c001304d:	ff 30                	push   DWORD PTR [eax]
c001304f:	e8 fe fe ff ff       	call   c0012f52 <Dbg::logWriteIntBase(unsigned int, int)>
c0013054:	58                   	pop    eax
c0013055:	5a                   	pop    edx
c0013056:	e9 72 ff ff ff       	jmp    c0012fcd <Dbg::kprintf(char const*, ...)+0x5c>
c001305b:	6a 25                	push   0x25
c001305d:	e8 9f fe ff ff       	call   c0012f01 <Dbg::logc(char)>
c0013062:	58                   	pop    eax
c0013063:	e9 65 ff ff ff       	jmp    c0012fcd <Dbg::kprintf(char const*, ...)+0x5c>
c0013068:	6a 25                	push   0x25
c001306a:	e8 92 fe ff ff       	call   c0012f01 <Dbg::logc(char)>
c001306f:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0013072:	50                   	push   eax
c0013073:	e8 89 fe ff ff       	call   c0012f01 <Dbg::logc(char)>
c0013078:	5a                   	pop    edx
c0013079:	59                   	pop    ecx
c001307a:	e9 4e ff ff ff       	jmp    c0012fcd <Dbg::kprintf(char const*, ...)+0x5c>
c001307f:	50                   	push   eax
c0013080:	89 eb                	mov    ebx,ebp
c0013082:	e8 7a fe ff ff       	call   c0012f01 <Dbg::logc(char)>
c0013087:	89 fd                	mov    ebp,edi
c0013089:	58                   	pop    eax
c001308a:	e9 3e ff ff ff       	jmp    c0012fcd <Dbg::kprintf(char const*, ...)+0x5c>
c001308f:	90                   	nop

c0013090 <File::read(unsigned long long, void*, int*)>:
c0013090:	53                   	push   ebx
c0013091:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013095:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013099:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00130a0:	3c 19                	cmp    al,0x19
c00130a2:	77 35                	ja     c00130d9 <File::read(unsigned long long, void*, int*)+0x49>
c00130a4:	8b 04 85 60 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd13a0]
c00130ab:	85 c0                	test   eax,eax
c00130ad:	74 2a                	je     c00130d9 <File::read(unsigned long long, void*, int*)+0x49>
c00130af:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00130b5:	85 c0                	test   eax,eax
c00130b7:	74 20                	je     c00130d9 <File::read(unsigned long long, void*, int*)+0x49>
c00130b9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00130bd:	74 21                	je     c00130e0 <File::read(unsigned long long, void*, int*)+0x50>
c00130bf:	8b 08                	mov    ecx,DWORD PTR [eax]
c00130c1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00130c5:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00130cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00130cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00130d3:	5b                   	pop    ebx
c00130d4:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c00130d7:	ff e0                	jmp    eax
c00130d9:	b8 0b 00 00 00       	mov    eax,0xb
c00130de:	eb 05                	jmp    c00130e5 <File::read(unsigned long long, void*, int*)+0x55>
c00130e0:	b8 05 00 00 00       	mov    eax,0x5
c00130e5:	5b                   	pop    ebx
c00130e6:	c3                   	ret    
c00130e7:	90                   	nop

c00130e8 <File::write(unsigned long long, void*, int*)>:
c00130e8:	53                   	push   ebx
c00130e9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00130ed:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00130f1:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00130f8:	3c 19                	cmp    al,0x19
c00130fa:	77 35                	ja     c0013131 <File::write(unsigned long long, void*, int*)+0x49>
c00130fc:	8b 04 85 60 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd13a0]
c0013103:	85 c0                	test   eax,eax
c0013105:	74 2a                	je     c0013131 <File::write(unsigned long long, void*, int*)+0x49>
c0013107:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001310d:	85 c0                	test   eax,eax
c001310f:	74 20                	je     c0013131 <File::write(unsigned long long, void*, int*)+0x49>
c0013111:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013115:	74 21                	je     c0013138 <File::write(unsigned long long, void*, int*)+0x50>
c0013117:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013119:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001311d:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0013123:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013127:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001312b:	5b                   	pop    ebx
c001312c:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c001312f:	ff e0                	jmp    eax
c0013131:	b8 0b 00 00 00       	mov    eax,0xb
c0013136:	eb 05                	jmp    c001313d <File::write(unsigned long long, void*, int*)+0x55>
c0013138:	b8 05 00 00 00       	mov    eax,0x5
c001313d:	5b                   	pop    ebx
c001313e:	c3                   	ret    
c001313f:	90                   	nop

c0013140 <Directory::read(unsigned long long, void*, int*)>:
c0013140:	53                   	push   ebx
c0013141:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013145:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013149:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0013150:	3c 19                	cmp    al,0x19
c0013152:	77 35                	ja     c0013189 <Directory::read(unsigned long long, void*, int*)+0x49>
c0013154:	8b 04 85 60 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd13a0]
c001315b:	85 c0                	test   eax,eax
c001315d:	74 2a                	je     c0013189 <Directory::read(unsigned long long, void*, int*)+0x49>
c001315f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013165:	85 c0                	test   eax,eax
c0013167:	74 20                	je     c0013189 <Directory::read(unsigned long long, void*, int*)+0x49>
c0013169:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001316d:	74 21                	je     c0013190 <Directory::read(unsigned long long, void*, int*)+0x50>
c001316f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013171:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013175:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001317b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001317f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013183:	5b                   	pop    ebx
c0013184:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0013187:	ff e0                	jmp    eax
c0013189:	b8 0b 00 00 00       	mov    eax,0xb
c001318e:	eb 05                	jmp    c0013195 <Directory::read(unsigned long long, void*, int*)+0x55>
c0013190:	b8 05 00 00 00       	mov    eax,0x5
c0013195:	5b                   	pop    ebx
c0013196:	c3                   	ret    
c0013197:	90                   	nop

c0013198 <Directory::write(unsigned long long, void*, int*)>:
c0013198:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001319c:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c00131a3:	b8 0b 00 00 00       	mov    eax,0xb
c00131a8:	80 fa 19             	cmp    dl,0x19
c00131ab:	77 18                	ja     c00131c5 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00131ad:	8b 14 95 60 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd13a0]
c00131b4:	85 d2                	test   edx,edx
c00131b6:	74 0d                	je     c00131c5 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00131b8:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c00131bf:	19 c0                	sbb    eax,eax
c00131c1:	83 e0 0a             	and    eax,0xa
c00131c4:	40                   	inc    eax
c00131c5:	c3                   	ret    

c00131c6 <File::isAtty()>:
c00131c6:	31 c0                	xor    eax,eax
c00131c8:	c3                   	ret    
c00131c9:	90                   	nop

c00131ca <Directory::isAtty()>:
c00131ca:	31 c0                	xor    eax,eax
c00131cc:	c3                   	ret    
c00131cd:	90                   	nop

c00131ce <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00131ce:	b8 0a 00 00 00       	mov    eax,0xa
c00131d3:	c3                   	ret    

c00131d4 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c00131d4:	b8 0a 00 00 00       	mov    eax,0xa
c00131d9:	c3                   	ret    

c00131da <File::~File()>:
c00131da:	83 ec 0c             	sub    esp,0xc
c00131dd:	ba e8 ac 02 c0       	mov    edx,0xc002ace8
c00131e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131e6:	89 10                	mov    DWORD PTR [eax],edx
c00131e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131ec:	83 ec 0c             	sub    esp,0xc
c00131ef:	50                   	push   eax
c00131f0:	e8 4d e7 ff ff       	call   c0011942 <UnixFile::~UnixFile()>
c00131f5:	83 c4 10             	add    esp,0x10
c00131f8:	90                   	nop
c00131f9:	83 c4 0c             	add    esp,0xc
c00131fc:	c3                   	ret    
c00131fd:	90                   	nop

c00131fe <File::~File()>:
c00131fe:	83 ec 0c             	sub    esp,0xc
c0013201:	83 ec 0c             	sub    esp,0xc
c0013204:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013208:	e8 cd ff ff ff       	call   c00131da <File::~File()>
c001320d:	83 c4 10             	add    esp,0x10
c0013210:	83 ec 08             	sub    esp,0x8
c0013213:	68 14 01 00 00       	push   0x114
c0013218:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001321c:	e8 70 fc ff ff       	call   c0012e91 <operator delete(void*, unsigned long)>
c0013221:	83 c4 10             	add    esp,0x10
c0013224:	83 c4 0c             	add    esp,0xc
c0013227:	c3                   	ret    

c0013228 <Directory::~Directory()>:
c0013228:	83 ec 0c             	sub    esp,0xc
c001322b:	ba 04 ad 02 c0       	mov    edx,0xc002ad04
c0013230:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013234:	89 10                	mov    DWORD PTR [eax],edx
c0013236:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001323a:	83 ec 0c             	sub    esp,0xc
c001323d:	50                   	push   eax
c001323e:	e8 ff e6 ff ff       	call   c0011942 <UnixFile::~UnixFile()>
c0013243:	83 c4 10             	add    esp,0x10
c0013246:	90                   	nop
c0013247:	83 c4 0c             	add    esp,0xc
c001324a:	c3                   	ret    
c001324b:	90                   	nop

c001324c <Directory::~Directory()>:
c001324c:	83 ec 0c             	sub    esp,0xc
c001324f:	83 ec 0c             	sub    esp,0xc
c0013252:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013256:	e8 cd ff ff ff       	call   c0013228 <Directory::~Directory()>
c001325b:	83 c4 10             	add    esp,0x10
c001325e:	83 ec 08             	sub    esp,0x8
c0013261:	68 14 01 00 00       	push   0x114
c0013266:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001326a:	e8 22 fc ff ff       	call   c0012e91 <operator delete(void*, unsigned long)>
c001326f:	83 c4 10             	add    esp,0x10
c0013272:	83 c4 0c             	add    esp,0xc
c0013275:	c3                   	ret    

c0013276 <Filesystem::Filesystem()>:
c0013276:	ba 84 ac 02 c0       	mov    edx,0xc002ac84
c001327b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001327f:	89 10                	mov    DWORD PTR [eax],edx
c0013281:	8b 15 cc e7 02 c0    	mov    edx,DWORD PTR ds:0xc002e7cc
c0013287:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001328b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001328e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013292:	a3 cc e7 02 c0       	mov    ds:0xc002e7cc,eax
c0013297:	90                   	nop
c0013298:	c3                   	ret    
c0013299:	90                   	nop

c001329a <Filesystem::~Filesystem()>:
c001329a:	ba 84 ac 02 c0       	mov    edx,0xc002ac84
c001329f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00132a3:	89 10                	mov    DWORD PTR [eax],edx
c00132a5:	90                   	nop
c00132a6:	c3                   	ret    
c00132a7:	90                   	nop

c00132a8 <Filesystem::~Filesystem()>:
c00132a8:	83 ec 0c             	sub    esp,0xc
c00132ab:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00132af:	e8 e6 ff ff ff       	call   c001329a <Filesystem::~Filesystem()>
c00132b4:	83 c4 04             	add    esp,0x4
c00132b7:	83 ec 08             	sub    esp,0x8
c00132ba:	6a 08                	push   0x8
c00132bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132c0:	e8 cc fb ff ff       	call   c0012e91 <operator delete(void*, unsigned long)>
c00132c5:	83 c4 10             	add    esp,0x10
c00132c8:	83 c4 0c             	add    esp,0xc
c00132cb:	c3                   	ret    

c00132cc <Fs::getcwd(Process*, char*, int)>:
c00132cc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00132d0:	31 c0                	xor    eax,eax
c00132d2:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00132d5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00132d9:	7d 15                	jge    c00132f0 <Fs::getcwd(Process*, char*, int)+0x24>
c00132db:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00132df:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c00132e6:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00132e9:	84 c9                	test   cl,cl
c00132eb:	74 06                	je     c00132f3 <Fs::getcwd(Process*, char*, int)+0x27>
c00132ed:	40                   	inc    eax
c00132ee:	eb e2                	jmp    c00132d2 <Fs::getcwd(Process*, char*, int)+0x6>
c00132f0:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00132f3:	31 c0                	xor    eax,eax
c00132f5:	c3                   	ret    

c00132f6 <Fs::initVFS()>:
c00132f6:	83 ec 18             	sub    esp,0x18
c00132f9:	6a 08                	push   0x8
c00132fb:	e8 40 c5 ff ff       	call   c000f840 <malloc>
c0013300:	89 04 24             	mov    DWORD PTR [esp],eax
c0013303:	e8 b4 dc 00 00       	call   c0020fbc <FAT::FAT()>
c0013308:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001330f:	e8 2c c5 ff ff       	call   c000f840 <malloc>
c0013314:	89 04 24             	mov    DWORD PTR [esp],eax
c0013317:	e8 f8 ee 00 00       	call   c0022214 <ISO9660::ISO9660()>
c001331c:	83 c4 1c             	add    esp,0x1c
c001331f:	c3                   	ret    

c0013320 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0013320:	55                   	push   ebp
c0013321:	57                   	push   edi
c0013322:	56                   	push   esi
c0013323:	53                   	push   ebx
c0013324:	81 ec 10 04 00 00    	sub    esp,0x410
c001332a:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0013331:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0013338:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c001333f:	68 00 04 00 00       	push   0x400
c0013344:	6a 00                	push   0x0
c0013346:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001334a:	56                   	push   esi
c001334b:	e8 28 d4 fe ff       	call   c0000778 <memset>
c0013350:	83 c4 10             	add    esp,0x10
c0013353:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0013357:	75 0b                	jne    c0013364 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0013359:	50                   	push   eax
c001335a:	50                   	push   eax
c001335b:	57                   	push   edi
c001335c:	56                   	push   esi
c001335d:	e8 d2 d4 fe ff       	call   c0000834 <strcpy>
c0013362:	eb 41                	jmp    c00133a5 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0013364:	8a 07                	mov    al,BYTE PTR [edi]
c0013366:	3c 5c                	cmp    al,0x5c
c0013368:	74 04                	je     c001336e <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c001336a:	3c 2f                	cmp    al,0x2f
c001336c:	75 18                	jne    c0013386 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c001336e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0013371:	3c 60                	cmp    al,0x60
c0013373:	7e 03                	jle    c0013378 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0013375:	83 e8 20             	sub    eax,0x20
c0013378:	88 04 24             	mov    BYTE PTR [esp],al
c001337b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0013382:	50                   	push   eax
c0013383:	50                   	push   eax
c0013384:	eb 18                	jmp    c001339e <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0013386:	50                   	push   eax
c0013387:	50                   	push   eax
c0013388:	55                   	push   ebp
c0013389:	56                   	push   esi
c001338a:	e8 a5 d4 fe ff       	call   c0000834 <strcpy>
c001338f:	5a                   	pop    edx
c0013390:	59                   	pop    ecx
c0013391:	68 2d c4 02 c0       	push   0xc002c42d
c0013396:	56                   	push   esi
c0013397:	e8 d8 d5 fe ff       	call   c0000974 <strcat>
c001339c:	5d                   	pop    ebp
c001339d:	58                   	pop    eax
c001339e:	57                   	push   edi
c001339f:	56                   	push   esi
c00133a0:	e8 cf d5 fe ff       	call   c0000974 <strcat>
c00133a5:	83 c4 10             	add    esp,0x10
c00133a8:	8a 04 24             	mov    al,BYTE PTR [esp]
c00133ab:	3c 60                	cmp    al,0x60
c00133ad:	7e 03                	jle    c00133b2 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c00133af:	83 e8 20             	sub    eax,0x20
c00133b2:	88 04 24             	mov    BYTE PTR [esp],al
c00133b5:	88 03                	mov    BYTE PTR [ebx],al
c00133b7:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c00133be:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c00133c4:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00133c8:	bf 03 00 00 00       	mov    edi,0x3
c00133cd:	b8 03 00 00 00       	mov    eax,0x3
c00133d2:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c00133d5:	84 d2                	test   dl,dl
c00133d7:	0f 84 91 00 00 00    	je     c001346e <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c00133dd:	8d 4f 01             	lea    ecx,[edi+0x1]
c00133e0:	80 fa 5c             	cmp    dl,0x5c
c00133e3:	74 05                	je     c00133ea <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c00133e5:	80 fa 2f             	cmp    dl,0x2f
c00133e8:	75 12                	jne    c00133fc <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c00133ea:	89 c5                	mov    ebp,eax
c00133ec:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00133f1:	74 09                	je     c00133fc <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c00133f3:	40                   	inc    eax
c00133f4:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c00133f8:	89 cf                	mov    edi,ecx
c00133fa:	eb d6                	jmp    c00133d2 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c00133fc:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0013401:	75 5b                	jne    c001345e <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0013403:	80 fa 2e             	cmp    dl,0x2e
c0013406:	75 56                	jne    c001345e <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0013408:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c001340c:	74 19                	je     c0013427 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c001340e:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0013413:	74 53                	je     c0013468 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0013415:	89 f9                	mov    ecx,edi
c0013417:	41                   	inc    ecx
c0013418:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c001341b:	80 fa 2f             	cmp    dl,0x2f
c001341e:	74 f7                	je     c0013417 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0013420:	80 fa 5c             	cmp    dl,0x5c
c0013423:	74 f2                	je     c0013417 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0013425:	eb d1                	jmp    c00133f8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013427:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c001342c:	74 3a                	je     c0013468 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c001342e:	83 f8 03             	cmp    eax,0x3
c0013431:	74 c5                	je     c00133f8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013433:	41                   	inc    ecx
c0013434:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0013437:	80 fa 2f             	cmp    dl,0x2f
c001343a:	74 f7                	je     c0013433 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c001343c:	80 fa 5c             	cmp    dl,0x5c
c001343f:	74 f2                	je     c0013433 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013441:	48                   	dec    eax
c0013442:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013446:	75 06                	jne    c001344e <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0013448:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001344c:	eb f3                	jmp    c0013441 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c001344e:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013452:	74 07                	je     c001345b <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0013454:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013458:	48                   	dec    eax
c0013459:	eb f3                	jmp    c001344e <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c001345b:	40                   	inc    eax
c001345c:	eb 9a                	jmp    c00133f8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001345e:	80 fa 2f             	cmp    dl,0x2f
c0013461:	74 95                	je     c00133f8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013463:	80 fa 5c             	cmp    dl,0x5c
c0013466:	74 90                	je     c00133f8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013468:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c001346b:	40                   	inc    eax
c001346c:	eb 8a                	jmp    c00133f8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001346e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013472:	83 ec 0c             	sub    esp,0xc
c0013475:	53                   	push   ebx
c0013476:	e8 19 d3 fe ff       	call   c0000794 <strlen>
c001347b:	83 c4 10             	add    esp,0x10
c001347e:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0013483:	75 26                	jne    c00134ab <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0013485:	83 ec 0c             	sub    esp,0xc
c0013488:	53                   	push   ebx
c0013489:	e8 06 d3 fe ff       	call   c0000794 <strlen>
c001348e:	83 c4 10             	add    esp,0x10
c0013491:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0013496:	74 26                	je     c00134be <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0013498:	83 ec 0c             	sub    esp,0xc
c001349b:	53                   	push   ebx
c001349c:	e8 f3 d2 fe ff       	call   c0000794 <strlen>
c00134a1:	83 c4 10             	add    esp,0x10
c00134a4:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00134a9:	eb c7                	jmp    c0013472 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c00134ab:	83 ec 0c             	sub    esp,0xc
c00134ae:	53                   	push   ebx
c00134af:	e8 e0 d2 fe ff       	call   c0000794 <strlen>
c00134b4:	83 c4 10             	add    esp,0x10
c00134b7:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00134bc:	74 c7                	je     c0013485 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c00134be:	81 c4 0c 04 00 00    	add    esp,0x40c
c00134c4:	5b                   	pop    ebx
c00134c5:	5e                   	pop    esi
c00134c6:	5f                   	pop    edi
c00134c7:	5d                   	pop    ebp
c00134c8:	c3                   	ret    
c00134c9:	90                   	nop

c00134ca <File::File(char const*, Process*)>:
c00134ca:	83 ec 0c             	sub    esp,0xc
c00134cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134d1:	83 ec 08             	sub    esp,0x8
c00134d4:	6a 00                	push   0x0
c00134d6:	50                   	push   eax
c00134d7:	e8 84 e2 ff ff       	call   c0011760 <UnixFile::UnixFile(int)>
c00134dc:	83 c4 10             	add    esp,0x10
c00134df:	ba e8 ac 02 c0       	mov    edx,0xc002ace8
c00134e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134e8:	89 10                	mov    DWORD PTR [eax],edx
c00134ea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00134ee:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00134f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134f8:	83 c0 0d             	add    eax,0xd
c00134fb:	83 ec 04             	sub    esp,0x4
c00134fe:	52                   	push   edx
c00134ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013503:	50                   	push   eax
c0013504:	e8 17 fe ff ff       	call   c0013320 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013509:	83 c4 10             	add    esp,0x10
c001350c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013510:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013513:	8d 50 bf             	lea    edx,[eax-0x41]
c0013516:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001351a:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013524:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013528:	90                   	nop
c0013529:	83 c4 0c             	add    esp,0xc
c001352c:	c3                   	ret    
c001352d:	90                   	nop

c001352e <File::open(FileOpenMode)>:
c001352e:	53                   	push   ebx
c001352f:	b8 0b 00 00 00       	mov    eax,0xb
c0013534:	83 ec 08             	sub    esp,0x8
c0013537:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001353b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013542:	80 fa 19             	cmp    dl,0x19
c0013545:	77 40                	ja     c0013587 <File::open(FileOpenMode)+0x59>
c0013547:	8b 14 95 60 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd13a0]
c001354e:	85 d2                	test   edx,edx
c0013550:	74 35                	je     c0013587 <File::open(FileOpenMode)+0x59>
c0013552:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013558:	85 d2                	test   edx,edx
c001355a:	74 2b                	je     c0013587 <File::open(FileOpenMode)+0x59>
c001355c:	b8 06 00 00 00       	mov    eax,0x6
c0013561:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013565:	75 20                	jne    c0013587 <File::open(FileOpenMode)+0x59>
c0013567:	8b 02                	mov    eax,DWORD PTR [edx]
c0013569:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001356f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013573:	51                   	push   ecx
c0013574:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013577:	51                   	push   ecx
c0013578:	52                   	push   edx
c0013579:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001357c:	83 c4 10             	add    esp,0x10
c001357f:	85 c0                	test   eax,eax
c0013581:	75 04                	jne    c0013587 <File::open(FileOpenMode)+0x59>
c0013583:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013587:	83 c4 08             	add    esp,0x8
c001358a:	5b                   	pop    ebx
c001358b:	c3                   	ret    

c001358c <File::close()>:
c001358c:	53                   	push   ebx
c001358d:	b8 0b 00 00 00       	mov    eax,0xb
c0013592:	83 ec 08             	sub    esp,0x8
c0013595:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013599:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00135a0:	80 fa 19             	cmp    dl,0x19
c00135a3:	77 41                	ja     c00135e6 <File::close()+0x5a>
c00135a5:	8b 1c 95 60 ec 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd13a0]
c00135ac:	85 db                	test   ebx,ebx
c00135ae:	74 36                	je     c00135e6 <File::close()+0x5a>
c00135b0:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00135b7:	74 2d                	je     c00135e6 <File::close()+0x5a>
c00135b9:	b8 05 00 00 00       	mov    eax,0x5
c00135be:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00135c2:	74 22                	je     c00135e6 <File::close()+0x5a>
c00135c4:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00135c8:	8b 04 95 60 ec 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd13a0]
c00135cf:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00135d5:	53                   	push   ebx
c00135d6:	53                   	push   ebx
c00135d7:	8b 10                	mov    edx,DWORD PTR [eax]
c00135d9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00135df:	50                   	push   eax
c00135e0:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c00135e3:	83 c4 10             	add    esp,0x10
c00135e6:	83 c4 08             	add    esp,0x8
c00135e9:	5b                   	pop    ebx
c00135ea:	c3                   	ret    
c00135eb:	90                   	nop

c00135ec <File::seek(unsigned long long)>:
c00135ec:	56                   	push   esi
c00135ed:	53                   	push   ebx
c00135ee:	b8 0b 00 00 00       	mov    eax,0xb
c00135f3:	51                   	push   ecx
c00135f4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00135f8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00135fc:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0013603:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013607:	80 fa 19             	cmp    dl,0x19
c001360a:	77 31                	ja     c001363d <File::seek(unsigned long long)+0x51>
c001360c:	8b 14 95 60 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd13a0]
c0013613:	85 d2                	test   edx,edx
c0013615:	74 26                	je     c001363d <File::seek(unsigned long long)+0x51>
c0013617:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001361d:	85 d2                	test   edx,edx
c001361f:	74 1c                	je     c001363d <File::seek(unsigned long long)+0x51>
c0013621:	b8 05 00 00 00       	mov    eax,0x5
c0013626:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c001362a:	74 11                	je     c001363d <File::seek(unsigned long long)+0x51>
c001362c:	8b 02                	mov    eax,DWORD PTR [edx]
c001362e:	53                   	push   ebx
c001362f:	51                   	push   ecx
c0013630:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0013636:	52                   	push   edx
c0013637:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001363a:	83 c4 10             	add    esp,0x10
c001363d:	5a                   	pop    edx
c001363e:	5b                   	pop    ebx
c001363f:	5e                   	pop    esi
c0013640:	c3                   	ret    
c0013641:	90                   	nop

c0013642 <File::tell(unsigned long long*)>:
c0013642:	83 ec 0c             	sub    esp,0xc
c0013645:	b8 0b 00 00 00       	mov    eax,0xb
c001364a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001364e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013655:	80 fa 19             	cmp    dl,0x19
c0013658:	77 34                	ja     c001368e <File::tell(unsigned long long*)+0x4c>
c001365a:	8b 14 95 60 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd13a0]
c0013661:	85 d2                	test   edx,edx
c0013663:	74 29                	je     c001368e <File::tell(unsigned long long*)+0x4c>
c0013665:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001366b:	85 d2                	test   edx,edx
c001366d:	74 1f                	je     c001368e <File::tell(unsigned long long*)+0x4c>
c001366f:	b8 05 00 00 00       	mov    eax,0x5
c0013674:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013678:	74 14                	je     c001368e <File::tell(unsigned long long*)+0x4c>
c001367a:	50                   	push   eax
c001367b:	8b 02                	mov    eax,DWORD PTR [edx]
c001367d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013681:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013687:	52                   	push   edx
c0013688:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001368b:	83 c4 10             	add    esp,0x10
c001368e:	83 c4 0c             	add    esp,0xc
c0013691:	c3                   	ret    

c0013692 <File::rewind()>:
c0013692:	83 ec 10             	sub    esp,0x10
c0013695:	6a 00                	push   0x0
c0013697:	6a 00                	push   0x0
c0013699:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001369d:	e8 4a ff ff ff       	call   c00135ec <File::seek(unsigned long long)>
c00136a2:	83 c4 1c             	add    esp,0x1c
c00136a5:	c3                   	ret    

c00136a6 <File::unlink()>:
c00136a6:	83 ec 0c             	sub    esp,0xc
c00136a9:	b8 0b 00 00 00       	mov    eax,0xb
c00136ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136b2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00136b9:	80 f9 19             	cmp    cl,0x19
c00136bc:	77 2f                	ja     c00136ed <File::unlink()+0x47>
c00136be:	8b 0c 8d 60 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd13a0]
c00136c5:	85 c9                	test   ecx,ecx
c00136c7:	74 24                	je     c00136ed <File::unlink()+0x47>
c00136c9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136cf:	85 c9                	test   ecx,ecx
c00136d1:	74 1a                	je     c00136ed <File::unlink()+0x47>
c00136d3:	b8 06 00 00 00       	mov    eax,0x6
c00136d8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00136dc:	75 0f                	jne    c00136ed <File::unlink()+0x47>
c00136de:	83 c2 0d             	add    edx,0xd
c00136e1:	50                   	push   eax
c00136e2:	50                   	push   eax
c00136e3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00136e5:	52                   	push   edx
c00136e6:	51                   	push   ecx
c00136e7:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00136ea:	83 c4 10             	add    esp,0x10
c00136ed:	83 c4 0c             	add    esp,0xc
c00136f0:	c3                   	ret    
c00136f1:	90                   	nop

c00136f2 <File::rename(char const*)>:
c00136f2:	83 ec 0c             	sub    esp,0xc
c00136f5:	b8 0b 00 00 00       	mov    eax,0xb
c00136fa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136fe:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013705:	80 f9 19             	cmp    cl,0x19
c0013708:	77 32                	ja     c001373c <File::rename(char const*)+0x4a>
c001370a:	8b 0c 8d 60 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd13a0]
c0013711:	85 c9                	test   ecx,ecx
c0013713:	74 27                	je     c001373c <File::rename(char const*)+0x4a>
c0013715:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001371b:	85 c9                	test   ecx,ecx
c001371d:	74 1d                	je     c001373c <File::rename(char const*)+0x4a>
c001371f:	b8 06 00 00 00       	mov    eax,0x6
c0013724:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013728:	75 12                	jne    c001373c <File::rename(char const*)+0x4a>
c001372a:	83 c2 0d             	add    edx,0xd
c001372d:	50                   	push   eax
c001372e:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013730:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013734:	52                   	push   edx
c0013735:	51                   	push   ecx
c0013736:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013739:	83 c4 10             	add    esp,0x10
c001373c:	83 c4 0c             	add    esp,0xc
c001373f:	c3                   	ret    

c0013740 <File::chfatattr(unsigned char, unsigned char)>:
c0013740:	57                   	push   edi
c0013741:	b8 0b 00 00 00       	mov    eax,0xb
c0013746:	56                   	push   esi
c0013747:	53                   	push   ebx
c0013748:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001374c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013750:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013757:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001375b:	80 f9 19             	cmp    cl,0x19
c001375e:	77 37                	ja     c0013797 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013760:	8b 0c 8d 60 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd13a0]
c0013767:	85 c9                	test   ecx,ecx
c0013769:	74 2c                	je     c0013797 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001376b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013771:	85 c9                	test   ecx,ecx
c0013773:	74 22                	je     c0013797 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013775:	b8 06 00 00 00       	mov    eax,0x6
c001377a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001377e:	75 17                	jne    c0013797 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013780:	8b 39                	mov    edi,DWORD PTR [ecx]
c0013782:	89 f0                	mov    eax,esi
c0013784:	83 c2 0d             	add    edx,0xd
c0013787:	0f b6 f0             	movzx  esi,al
c001378a:	0f b6 db             	movzx  ebx,bl
c001378d:	56                   	push   esi
c001378e:	53                   	push   ebx
c001378f:	52                   	push   edx
c0013790:	51                   	push   ecx
c0013791:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0013794:	83 c4 10             	add    esp,0x10
c0013797:	5b                   	pop    ebx
c0013798:	5e                   	pop    esi
c0013799:	5f                   	pop    edi
c001379a:	c3                   	ret    
c001379b:	90                   	nop

c001379c <File::exists()>:
c001379c:	83 ec 0c             	sub    esp,0xc
c001379f:	31 c0                	xor    eax,eax
c00137a1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00137a5:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00137ac:	80 f9 19             	cmp    cl,0x19
c00137af:	77 24                	ja     c00137d5 <File::exists()+0x39>
c00137b1:	8b 0c 8d 60 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd13a0]
c00137b8:	85 c9                	test   ecx,ecx
c00137ba:	74 19                	je     c00137d5 <File::exists()+0x39>
c00137bc:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00137c2:	85 c9                	test   ecx,ecx
c00137c4:	74 0f                	je     c00137d5 <File::exists()+0x39>
c00137c6:	83 c2 0d             	add    edx,0xd
c00137c9:	50                   	push   eax
c00137ca:	50                   	push   eax
c00137cb:	8b 01                	mov    eax,DWORD PTR [ecx]
c00137cd:	52                   	push   edx
c00137ce:	51                   	push   ecx
c00137cf:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00137d2:	83 c4 10             	add    esp,0x10
c00137d5:	83 c4 0c             	add    esp,0xc
c00137d8:	c3                   	ret    
c00137d9:	90                   	nop

c00137da <File::stat(unsigned long long*, bool*)>:
c00137da:	56                   	push   esi
c00137db:	53                   	push   ebx
c00137dc:	50                   	push   eax
c00137dd:	b8 0b 00 00 00       	mov    eax,0xb
c00137e2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00137e6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00137ea:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00137f1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00137f5:	80 f9 19             	cmp    cl,0x19
c00137f8:	77 3d                	ja     c0013837 <File::stat(unsigned long long*, bool*)+0x5d>
c00137fa:	8b 0c 8d 60 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd13a0]
c0013801:	85 c9                	test   ecx,ecx
c0013803:	74 32                	je     c0013837 <File::stat(unsigned long long*, bool*)+0x5d>
c0013805:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001380b:	85 c9                	test   ecx,ecx
c001380d:	74 28                	je     c0013837 <File::stat(unsigned long long*, bool*)+0x5d>
c001380f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013811:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013815:	74 13                	je     c001382a <File::stat(unsigned long long*, bool*)+0x50>
c0013817:	83 ec 04             	sub    esp,0x4
c001381a:	56                   	push   esi
c001381b:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0013821:	51                   	push   ecx
c0013822:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0013825:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013828:	eb 0a                	jmp    c0013834 <File::stat(unsigned long long*, bool*)+0x5a>
c001382a:	53                   	push   ebx
c001382b:	83 c2 0d             	add    edx,0xd
c001382e:	56                   	push   esi
c001382f:	52                   	push   edx
c0013830:	51                   	push   ecx
c0013831:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0013834:	83 c4 10             	add    esp,0x10
c0013837:	5a                   	pop    edx
c0013838:	5b                   	pop    ebx
c0013839:	5e                   	pop    esi
c001383a:	c3                   	ret    

c001383b <Fs::setcwd(Process*, char*)>:
c001383b:	55                   	push   ebp
c001383c:	57                   	push   edi
c001383d:	56                   	push   esi
c001383e:	53                   	push   ebx
c001383f:	81 ec 20 02 00 00    	sub    esp,0x220
c0013845:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c001384c:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0013852:	57                   	push   edi
c0013853:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001385a:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c001385e:	56                   	push   esi
c001385f:	e8 bc fa ff ff       	call   c0013320 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013864:	89 34 24             	mov    DWORD PTR [esp],esi
c0013867:	e8 28 cf fe ff       	call   c0000794 <strlen>
c001386c:	83 c4 10             	add    esp,0x10
c001386f:	83 f8 02             	cmp    eax,0x2
c0013872:	77 17                	ja     c001388b <Fs::setcwd(Process*, char*)+0x50>
c0013874:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0013879:	83 e8 41             	sub    eax,0x41
c001387c:	83 f8 19             	cmp    eax,0x19
c001387f:	76 24                	jbe    c00138a5 <Fs::setcwd(Process*, char*)+0x6a>
c0013881:	b8 03 00 00 00       	mov    eax,0x3
c0013886:	e9 e0 00 00 00       	jmp    c001396b <Fs::setcwd(Process*, char*)+0x130>
c001388b:	83 ec 0c             	sub    esp,0xc
c001388e:	56                   	push   esi
c001388f:	e8 00 cf fe ff       	call   c0000794 <strlen>
c0013894:	83 c4 10             	add    esp,0x10
c0013897:	83 f8 03             	cmp    eax,0x3
c001389a:	75 34                	jne    c00138d0 <Fs::setcwd(Process*, char*)+0x95>
c001389c:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c00138a1:	75 2d                	jne    c00138d0 <Fs::setcwd(Process*, char*)+0x95>
c00138a3:	eb cf                	jmp    c0013874 <Fs::setcwd(Process*, char*)+0x39>
c00138a5:	8b 14 85 60 ec 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd13a0]
c00138ac:	b8 05 00 00 00       	mov    eax,0x5
c00138b1:	85 d2                	test   edx,edx
c00138b3:	0f 84 b2 00 00 00    	je     c001396b <Fs::setcwd(Process*, char*)+0x130>
c00138b9:	b8 06 00 00 00       	mov    eax,0x6
c00138be:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00138c5:	0f 85 92 00 00 00    	jne    c001395d <Fs::setcwd(Process*, char*)+0x122>
c00138cb:	e9 9b 00 00 00       	jmp    c001396b <Fs::setcwd(Process*, char*)+0x130>
c00138d0:	83 ec 0c             	sub    esp,0xc
c00138d3:	68 14 01 00 00       	push   0x114
c00138d8:	e8 63 bf ff ff       	call   c000f840 <malloc>
c00138dd:	83 c4 0c             	add    esp,0xc
c00138e0:	89 c3                	mov    ebx,eax
c00138e2:	55                   	push   ebp
c00138e3:	56                   	push   esi
c00138e4:	50                   	push   eax
c00138e5:	e8 e0 fb ff ff       	call   c00134ca <File::File(char const*, Process*)>
c00138ea:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00138ef:	83 c4 0c             	add    esp,0xc
c00138f2:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00138f6:	50                   	push   eax
c00138f7:	8d 44 24 10          	lea    eax,[esp+0x10]
c00138fb:	50                   	push   eax
c00138fc:	53                   	push   ebx
c00138fd:	e8 d8 fe ff ff       	call   c00137da <File::stat(unsigned long long*, bool*)>
c0013902:	83 c4 10             	add    esp,0x10
c0013905:	83 f8 02             	cmp    eax,0x2
c0013908:	74 04                	je     c001390e <Fs::setcwd(Process*, char*)+0xd3>
c001390a:	85 c0                	test   eax,eax
c001390c:	74 1c                	je     c001392a <Fs::setcwd(Process*, char*)+0xef>
c001390e:	b8 01 00 00 00       	mov    eax,0x1
c0013913:	85 db                	test   ebx,ebx
c0013915:	74 54                	je     c001396b <Fs::setcwd(Process*, char*)+0x130>
c0013917:	83 ec 0c             	sub    esp,0xc
c001391a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001391c:	53                   	push   ebx
c001391d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013920:	83 c4 10             	add    esp,0x10
c0013923:	b8 01 00 00 00       	mov    eax,0x1
c0013928:	eb 41                	jmp    c001396b <Fs::setcwd(Process*, char*)+0x130>
c001392a:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001392f:	75 1c                	jne    c001394d <Fs::setcwd(Process*, char*)+0x112>
c0013931:	b8 02 00 00 00       	mov    eax,0x2
c0013936:	85 db                	test   ebx,ebx
c0013938:	74 31                	je     c001396b <Fs::setcwd(Process*, char*)+0x130>
c001393a:	83 ec 0c             	sub    esp,0xc
c001393d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001393f:	53                   	push   ebx
c0013940:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013943:	83 c4 10             	add    esp,0x10
c0013946:	b8 02 00 00 00       	mov    eax,0x2
c001394b:	eb 1e                	jmp    c001396b <Fs::setcwd(Process*, char*)+0x130>
c001394d:	85 db                	test   ebx,ebx
c001394f:	74 0c                	je     c001395d <Fs::setcwd(Process*, char*)+0x122>
c0013951:	83 ec 0c             	sub    esp,0xc
c0013954:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013956:	53                   	push   ebx
c0013957:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001395a:	83 c4 10             	add    esp,0x10
c001395d:	50                   	push   eax
c001395e:	50                   	push   eax
c001395f:	56                   	push   esi
c0013960:	57                   	push   edi
c0013961:	e8 ce ce fe ff       	call   c0000834 <strcpy>
c0013966:	83 c4 10             	add    esp,0x10
c0013969:	31 c0                	xor    eax,eax
c001396b:	81 c4 1c 02 00 00    	add    esp,0x21c
c0013971:	5b                   	pop    ebx
c0013972:	5e                   	pop    esi
c0013973:	5f                   	pop    edi
c0013974:	5d                   	pop    ebp
c0013975:	c3                   	ret    

c0013976 <Directory::Directory(char const*, Process*)>:
c0013976:	83 ec 0c             	sub    esp,0xc
c0013979:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001397d:	83 ec 08             	sub    esp,0x8
c0013980:	6a 00                	push   0x0
c0013982:	50                   	push   eax
c0013983:	e8 d8 dd ff ff       	call   c0011760 <UnixFile::UnixFile(int)>
c0013988:	83 c4 10             	add    esp,0x10
c001398b:	ba 04 ad 02 c0       	mov    edx,0xc002ad04
c0013990:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013994:	89 10                	mov    DWORD PTR [eax],edx
c0013996:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001399a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00139a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139a4:	83 c0 0d             	add    eax,0xd
c00139a7:	83 ec 04             	sub    esp,0x4
c00139aa:	52                   	push   edx
c00139ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00139af:	50                   	push   eax
c00139b0:	e8 6b f9 ff ff       	call   c0013320 <Fs::standardiseFiles(char*, char const*, char const*)>
c00139b5:	83 c4 10             	add    esp,0x10
c00139b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139bc:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00139bf:	8d 50 bf             	lea    edx,[eax-0x41]
c00139c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139c6:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00139cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139d0:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00139d4:	90                   	nop
c00139d5:	83 c4 0c             	add    esp,0xc
c00139d8:	c3                   	ret    
c00139d9:	90                   	nop

c00139da <Directory::open()>:
c00139da:	53                   	push   ebx
c00139db:	b8 0b 00 00 00       	mov    eax,0xb
c00139e0:	83 ec 08             	sub    esp,0x8
c00139e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00139e7:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00139ee:	80 fa 19             	cmp    dl,0x19
c00139f1:	77 3d                	ja     c0013a30 <Directory::open()+0x56>
c00139f3:	8b 14 95 60 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd13a0]
c00139fa:	85 d2                	test   edx,edx
c00139fc:	74 32                	je     c0013a30 <Directory::open()+0x56>
c00139fe:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013a04:	85 d2                	test   edx,edx
c0013a06:	74 28                	je     c0013a30 <Directory::open()+0x56>
c0013a08:	b8 06 00 00 00       	mov    eax,0x6
c0013a0d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013a11:	75 1d                	jne    c0013a30 <Directory::open()+0x56>
c0013a13:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013a19:	50                   	push   eax
c0013a1a:	8b 02                	mov    eax,DWORD PTR [edx]
c0013a1c:	51                   	push   ecx
c0013a1d:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013a20:	51                   	push   ecx
c0013a21:	52                   	push   edx
c0013a22:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013a25:	83 c4 10             	add    esp,0x10
c0013a28:	85 c0                	test   eax,eax
c0013a2a:	75 04                	jne    c0013a30 <Directory::open()+0x56>
c0013a2c:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013a30:	83 c4 08             	add    esp,0x8
c0013a33:	5b                   	pop    ebx
c0013a34:	c3                   	ret    
c0013a35:	90                   	nop

c0013a36 <Directory::close()>:
c0013a36:	53                   	push   ebx
c0013a37:	b8 0b 00 00 00       	mov    eax,0xb
c0013a3c:	83 ec 08             	sub    esp,0x8
c0013a3f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013a43:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013a4a:	80 fa 19             	cmp    dl,0x19
c0013a4d:	77 41                	ja     c0013a90 <Directory::close()+0x5a>
c0013a4f:	8b 1c 95 60 ec 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd13a0]
c0013a56:	85 db                	test   ebx,ebx
c0013a58:	74 36                	je     c0013a90 <Directory::close()+0x5a>
c0013a5a:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013a61:	74 2d                	je     c0013a90 <Directory::close()+0x5a>
c0013a63:	b8 05 00 00 00       	mov    eax,0x5
c0013a68:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013a6c:	74 22                	je     c0013a90 <Directory::close()+0x5a>
c0013a6e:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013a72:	8b 04 95 60 ec 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd13a0]
c0013a79:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013a7f:	53                   	push   ebx
c0013a80:	53                   	push   ebx
c0013a81:	8b 10                	mov    edx,DWORD PTR [eax]
c0013a83:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013a89:	50                   	push   eax
c0013a8a:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0013a8d:	83 c4 10             	add    esp,0x10
c0013a90:	83 c4 08             	add    esp,0x8
c0013a93:	5b                   	pop    ebx
c0013a94:	c3                   	ret    
c0013a95:	90                   	nop

c0013a96 <Directory::unlink()>:
c0013a96:	83 ec 0c             	sub    esp,0xc
c0013a99:	b8 0b 00 00 00       	mov    eax,0xb
c0013a9e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013aa2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013aa9:	80 f9 19             	cmp    cl,0x19
c0013aac:	77 2f                	ja     c0013add <Directory::unlink()+0x47>
c0013aae:	8b 0c 8d 60 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd13a0]
c0013ab5:	85 c9                	test   ecx,ecx
c0013ab7:	74 24                	je     c0013add <Directory::unlink()+0x47>
c0013ab9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013abf:	85 c9                	test   ecx,ecx
c0013ac1:	74 1a                	je     c0013add <Directory::unlink()+0x47>
c0013ac3:	b8 06 00 00 00       	mov    eax,0x6
c0013ac8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013acc:	75 0f                	jne    c0013add <Directory::unlink()+0x47>
c0013ace:	83 c2 0d             	add    edx,0xd
c0013ad1:	50                   	push   eax
c0013ad2:	50                   	push   eax
c0013ad3:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013ad5:	52                   	push   edx
c0013ad6:	51                   	push   ecx
c0013ad7:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013ada:	83 c4 10             	add    esp,0x10
c0013add:	83 c4 0c             	add    esp,0xc
c0013ae0:	c3                   	ret    
c0013ae1:	90                   	nop

c0013ae2 <Directory::rename(char const*)>:
c0013ae2:	83 ec 0c             	sub    esp,0xc
c0013ae5:	b8 0b 00 00 00       	mov    eax,0xb
c0013aea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013aee:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013af5:	80 f9 19             	cmp    cl,0x19
c0013af8:	77 32                	ja     c0013b2c <Directory::rename(char const*)+0x4a>
c0013afa:	8b 0c 8d 60 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd13a0]
c0013b01:	85 c9                	test   ecx,ecx
c0013b03:	74 27                	je     c0013b2c <Directory::rename(char const*)+0x4a>
c0013b05:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013b0b:	85 c9                	test   ecx,ecx
c0013b0d:	74 1d                	je     c0013b2c <Directory::rename(char const*)+0x4a>
c0013b0f:	b8 06 00 00 00       	mov    eax,0x6
c0013b14:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013b18:	75 12                	jne    c0013b2c <Directory::rename(char const*)+0x4a>
c0013b1a:	83 c2 0d             	add    edx,0xd
c0013b1d:	50                   	push   eax
c0013b1e:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b20:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013b24:	52                   	push   edx
c0013b25:	51                   	push   ecx
c0013b26:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013b29:	83 c4 10             	add    esp,0x10
c0013b2c:	83 c4 0c             	add    esp,0xc
c0013b2f:	c3                   	ret    

c0013b30 <Directory::exists()>:
c0013b30:	83 ec 0c             	sub    esp,0xc
c0013b33:	31 c0                	xor    eax,eax
c0013b35:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b39:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013b40:	80 f9 19             	cmp    cl,0x19
c0013b43:	77 24                	ja     c0013b69 <Directory::exists()+0x39>
c0013b45:	8b 0c 8d 60 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd13a0]
c0013b4c:	85 c9                	test   ecx,ecx
c0013b4e:	74 19                	je     c0013b69 <Directory::exists()+0x39>
c0013b50:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013b56:	85 c9                	test   ecx,ecx
c0013b58:	74 0f                	je     c0013b69 <Directory::exists()+0x39>
c0013b5a:	83 c2 0d             	add    edx,0xd
c0013b5d:	50                   	push   eax
c0013b5e:	50                   	push   eax
c0013b5f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b61:	52                   	push   edx
c0013b62:	51                   	push   ecx
c0013b63:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013b66:	83 c4 10             	add    esp,0x10
c0013b69:	83 c4 0c             	add    esp,0xc
c0013b6c:	c3                   	ret    
c0013b6d:	90                   	nop

c0013b6e <Directory::read(dirent*)>:
c0013b6e:	83 ec 1c             	sub    esp,0x1c
c0013b71:	b8 0b 00 00 00       	mov    eax,0xb
c0013b76:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013b7a:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013b81:	80 fa 19             	cmp    dl,0x19
c0013b84:	77 30                	ja     c0013bb6 <Directory::read(dirent*)+0x48>
c0013b86:	8b 14 95 60 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd13a0]
c0013b8d:	85 d2                	test   edx,edx
c0013b8f:	74 25                	je     c0013bb6 <Directory::read(dirent*)+0x48>
c0013b91:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013b98:	74 1c                	je     c0013bb6 <Directory::read(dirent*)+0x48>
c0013b9a:	83 ec 0c             	sub    esp,0xc
c0013b9d:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b9f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013ba3:	52                   	push   edx
c0013ba4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013ba8:	6a 00                	push   0x0
c0013baa:	68 10 01 00 00       	push   0x110
c0013baf:	51                   	push   ecx
c0013bb0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013bb3:	83 c4 20             	add    esp,0x20
c0013bb6:	83 c4 1c             	add    esp,0x1c
c0013bb9:	c3                   	ret    

c0013bba <Directory::create()>:
c0013bba:	83 ec 0c             	sub    esp,0xc
c0013bbd:	b8 0b 00 00 00       	mov    eax,0xb
c0013bc2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013bc6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013bcd:	80 f9 19             	cmp    cl,0x19
c0013bd0:	77 2f                	ja     c0013c01 <Directory::create()+0x47>
c0013bd2:	8b 0c 8d 60 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd13a0]
c0013bd9:	85 c9                	test   ecx,ecx
c0013bdb:	74 24                	je     c0013c01 <Directory::create()+0x47>
c0013bdd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013be3:	85 c9                	test   ecx,ecx
c0013be5:	74 1a                	je     c0013c01 <Directory::create()+0x47>
c0013be7:	b8 06 00 00 00       	mov    eax,0x6
c0013bec:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013bf0:	75 0f                	jne    c0013c01 <Directory::create()+0x47>
c0013bf2:	83 c2 0d             	add    edx,0xd
c0013bf5:	50                   	push   eax
c0013bf6:	50                   	push   eax
c0013bf7:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013bf9:	52                   	push   edx
c0013bfa:	51                   	push   ecx
c0013bfb:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013bfe:	83 c4 10             	add    esp,0x10
c0013c01:	83 c4 0c             	add    esp,0xc
c0013c04:	c3                   	ret    
c0013c05:	90                   	nop

c0013c06 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013c06:	b8 0a 00 00 00       	mov    eax,0xa
c0013c0b:	c3                   	ret    

c0013c0c <Bus::Bus(char const*)>:
c0013c0c:	83 ec 0c             	sub    esp,0xc
c0013c0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c13:	83 ec 08             	sub    esp,0x8
c0013c16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c1a:	50                   	push   eax
c0013c1b:	e8 68 09 00 00       	call   c0014588 <Device::Device(char const*)>
c0013c20:	83 c4 10             	add    esp,0x10
c0013c23:	ba 20 ad 02 c0       	mov    edx,0xc002ad20
c0013c28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c2c:	89 10                	mov    DWORD PTR [eax],edx
c0013c2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c32:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013c3c:	90                   	nop
c0013c3d:	83 c4 0c             	add    esp,0xc
c0013c40:	c3                   	ret    
c0013c41:	90                   	nop

c0013c42 <Bus::~Bus()>:
c0013c42:	83 ec 0c             	sub    esp,0xc
c0013c45:	ba 20 ad 02 c0       	mov    edx,0xc002ad20
c0013c4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c4e:	89 10                	mov    DWORD PTR [eax],edx
c0013c50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c54:	83 ec 0c             	sub    esp,0xc
c0013c57:	50                   	push   eax
c0013c58:	e8 0d 06 00 00       	call   c001426a <Device::~Device()>
c0013c5d:	83 c4 10             	add    esp,0x10
c0013c60:	90                   	nop
c0013c61:	83 c4 0c             	add    esp,0xc
c0013c64:	c3                   	ret    
c0013c65:	90                   	nop

c0013c66 <Bus::~Bus()>:
c0013c66:	83 ec 0c             	sub    esp,0xc
c0013c69:	83 ec 0c             	sub    esp,0xc
c0013c6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c70:	e8 cd ff ff ff       	call   c0013c42 <Bus::~Bus()>
c0013c75:	83 c4 10             	add    esp,0x10
c0013c78:	83 ec 08             	sub    esp,0x8
c0013c7b:	68 58 01 00 00       	push   0x158
c0013c80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c84:	e8 08 f2 ff ff       	call   c0012e91 <operator delete(void*, unsigned long)>
c0013c89:	83 c4 10             	add    esp,0x10
c0013c8c:	83 c4 0c             	add    esp,0xc
c0013c8f:	c3                   	ret    

c0013c90 <Buzzer::Buzzer(char const*)>:
c0013c90:	83 ec 0c             	sub    esp,0xc
c0013c93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c97:	83 ec 08             	sub    esp,0x8
c0013c9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c9e:	50                   	push   eax
c0013c9f:	e8 e4 08 00 00       	call   c0014588 <Device::Device(char const*)>
c0013ca4:	83 c4 10             	add    esp,0x10
c0013ca7:	ba 4c ad 02 c0       	mov    edx,0xc002ad4c
c0013cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cb0:	89 10                	mov    DWORD PTR [eax],edx
c0013cb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cb6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013cc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cc4:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013cce:	90                   	nop
c0013ccf:	83 c4 0c             	add    esp,0xc
c0013cd2:	c3                   	ret    
c0013cd3:	90                   	nop

c0013cd4 <Buzzer::~Buzzer()>:
c0013cd4:	83 ec 0c             	sub    esp,0xc
c0013cd7:	ba 4c ad 02 c0       	mov    edx,0xc002ad4c
c0013cdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ce0:	89 10                	mov    DWORD PTR [eax],edx
c0013ce2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ce6:	83 ec 0c             	sub    esp,0xc
c0013ce9:	50                   	push   eax
c0013cea:	e8 7b 05 00 00       	call   c001426a <Device::~Device()>
c0013cef:	83 c4 10             	add    esp,0x10
c0013cf2:	90                   	nop
c0013cf3:	83 c4 0c             	add    esp,0xc
c0013cf6:	c3                   	ret    
c0013cf7:	90                   	nop

c0013cf8 <Buzzer::~Buzzer()>:
c0013cf8:	83 ec 0c             	sub    esp,0xc
c0013cfb:	83 ec 0c             	sub    esp,0xc
c0013cfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d02:	e8 cd ff ff ff       	call   c0013cd4 <Buzzer::~Buzzer()>
c0013d07:	83 c4 10             	add    esp,0x10
c0013d0a:	83 ec 08             	sub    esp,0x8
c0013d0d:	68 5c 01 00 00       	push   0x15c
c0013d12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d16:	e8 76 f1 ff ff       	call   c0012e91 <operator delete(void*, unsigned long)>
c0013d1b:	83 c4 10             	add    esp,0x10
c0013d1e:	83 c4 0c             	add    esp,0xc
c0013d21:	c3                   	ret    

c0013d22 <Buzzer::stop()>:
c0013d22:	83 ec 14             	sub    esp,0x14
c0013d25:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d29:	8b 10                	mov    edx,DWORD PTR [eax]
c0013d2b:	6a 00                	push   0x0
c0013d2d:	50                   	push   eax
c0013d2e:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013d31:	83 c4 1c             	add    esp,0x1c
c0013d34:	c3                   	ret    

c0013d35 <beepThread(void*)>:
c0013d35:	53                   	push   ebx
c0013d36:	83 ec 08             	sub    esp,0x8
c0013d39:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013d3d:	e8 08 a1 00 00       	call   c001de4a <unlockScheduler()>
c0013d42:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013d47:	52                   	push   edx
c0013d48:	52                   	push   edx
c0013d49:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013d4f:	52                   	push   edx
c0013d50:	50                   	push   eax
c0013d51:	e8 42 a6 00 00       	call   c001e398 <nanoSleep(unsigned long long)>
c0013d56:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013d59:	e8 c4 ff ff ff       	call   c0013d22 <Buzzer::stop()>
c0013d5e:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013d66:	83 c4 18             	add    esp,0x18
c0013d69:	5b                   	pop    ebx
c0013d6a:	e9 6f a5 00 00       	jmp    c001e2de <blockTask(TaskState)>
c0013d6f:	90                   	nop

c0013d70 <Buzzer::beep(int, int, bool)>:
c0013d70:	57                   	push   edi
c0013d71:	56                   	push   esi
c0013d72:	53                   	push   ebx
c0013d73:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013d77:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013d7b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013d7f:	52                   	push   edx
c0013d80:	52                   	push   edx
c0013d81:	8b 06                	mov    eax,DWORD PTR [esi]
c0013d83:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d87:	56                   	push   esi
c0013d88:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013d8b:	83 c4 10             	add    esp,0x10
c0013d8e:	89 f8                	mov    eax,edi
c0013d90:	84 c0                	test   al,al
c0013d92:	74 1f                	je     c0013db3 <Buzzer::beep(int, int, bool)+0x43>
c0013d94:	50                   	push   eax
c0013d95:	50                   	push   eax
c0013d96:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013d9c:	99                   	cdq    
c0013d9d:	52                   	push   edx
c0013d9e:	50                   	push   eax
c0013d9f:	e8 f4 a5 00 00       	call   c001e398 <nanoSleep(unsigned long long)>
c0013da4:	83 c4 10             	add    esp,0x10
c0013da7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013dab:	5b                   	pop    ebx
c0013dac:	5e                   	pop    esi
c0013dad:	5f                   	pop    edi
c0013dae:	e9 6f ff ff ff       	jmp    c0013d22 <Buzzer::stop()>
c0013db3:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013db9:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c0013dbe:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013dc6:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013dca:	c7 44 24 14 35 3d 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013d35
c0013dd2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013dd6:	5b                   	pop    ebx
c0013dd7:	5e                   	pop    esi
c0013dd8:	5f                   	pop    edi
c0013dd9:	e9 9c a1 00 00       	jmp    c001df7a <Process::createThread(void (*)(void*), void*, int)>

c0013dde <User::loadClockSettings(int)>:
c0013dde:	53                   	push   ebx
c0013ddf:	83 ec 14             	sub    esp,0x14
c0013de2:	68 14 01 00 00       	push   0x114
c0013de7:	e8 54 ba ff ff       	call   c000f840 <malloc>
c0013dec:	83 c4 0c             	add    esp,0xc
c0013def:	89 c3                	mov    ebx,eax
c0013df1:	ff 35 b4 1b 03 c0    	push   DWORD PTR ds:0xc0031bb4
c0013df7:	68 74 ad 02 c0       	push   0xc002ad74
c0013dfc:	50                   	push   eax
c0013dfd:	e8 c8 f6 ff ff       	call   c00134ca <File::File(char const*, Process*)>
c0013e02:	58                   	pop    eax
c0013e03:	5a                   	pop    edx
c0013e04:	6a 01                	push   0x1
c0013e06:	53                   	push   ebx
c0013e07:	e8 22 f7 ff ff       	call   c001352e <File::open(FileOpenMode)>
c0013e0c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013e0f:	e8 78 f7 ff ff       	call   c001358c <File::close()>
c0013e14:	83 c4 10             	add    esp,0x10
c0013e17:	85 db                	test   ebx,ebx
c0013e19:	74 0f                	je     c0013e2a <User::loadClockSettings(int)+0x4c>
c0013e1b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e1d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013e21:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013e24:	83 c4 08             	add    esp,0x8
c0013e27:	5b                   	pop    ebx
c0013e28:	ff e0                	jmp    eax
c0013e2a:	83 c4 08             	add    esp,0x8
c0013e2d:	5b                   	pop    ebx
c0013e2e:	c3                   	ret    
c0013e2f:	90                   	nop

c0013e30 <Clock::Clock(char const*)>:
c0013e30:	83 ec 0c             	sub    esp,0xc
c0013e33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e37:	83 ec 08             	sub    esp,0x8
c0013e3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e3e:	50                   	push   eax
c0013e3f:	e8 44 07 00 00       	call   c0014588 <Device::Device(char const*)>
c0013e44:	83 c4 10             	add    esp,0x10
c0013e47:	ba 9c ad 02 c0       	mov    edx,0xc002ad9c
c0013e4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e50:	89 10                	mov    DWORD PTR [eax],edx
c0013e52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e56:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013e60:	90                   	nop
c0013e61:	83 c4 0c             	add    esp,0xc
c0013e64:	c3                   	ret    
c0013e65:	90                   	nop

c0013e66 <Clock::~Clock()>:
c0013e66:	83 ec 0c             	sub    esp,0xc
c0013e69:	ba 9c ad 02 c0       	mov    edx,0xc002ad9c
c0013e6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e72:	89 10                	mov    DWORD PTR [eax],edx
c0013e74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e78:	83 ec 0c             	sub    esp,0xc
c0013e7b:	50                   	push   eax
c0013e7c:	e8 e9 03 00 00       	call   c001426a <Device::~Device()>
c0013e81:	83 c4 10             	add    esp,0x10
c0013e84:	90                   	nop
c0013e85:	83 c4 0c             	add    esp,0xc
c0013e88:	c3                   	ret    
c0013e89:	90                   	nop

c0013e8a <Clock::~Clock()>:
c0013e8a:	83 ec 0c             	sub    esp,0xc
c0013e8d:	83 ec 0c             	sub    esp,0xc
c0013e90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e94:	e8 cd ff ff ff       	call   c0013e66 <Clock::~Clock()>
c0013e99:	83 c4 10             	add    esp,0x10
c0013e9c:	83 ec 08             	sub    esp,0x8
c0013e9f:	68 58 01 00 00       	push   0x158
c0013ea4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ea8:	e8 e4 ef ff ff       	call   c0012e91 <operator delete(void*, unsigned long)>
c0013ead:	83 c4 10             	add    esp,0x10
c0013eb0:	83 c4 0c             	add    esp,0xc
c0013eb3:	c3                   	ret    

c0013eb4 <Clock::timeInSecondsLocal()>:
c0013eb4:	53                   	push   ebx
c0013eb5:	83 ec 14             	sub    esp,0x14
c0013eb8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013ebc:	8b 10                	mov    edx,DWORD PTR [eax]
c0013ebe:	50                   	push   eax
c0013ebf:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013ec2:	0f b6 0d d4 e7 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e7d4
c0013ec9:	03 0d d8 e7 02 c0    	add    ecx,DWORD PTR ds:0xc002e7d8
c0013ecf:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013ed5:	89 cb                	mov    ebx,ecx
c0013ed7:	c1 fb 1f             	sar    ebx,0x1f
c0013eda:	01 c8                	add    eax,ecx
c0013edc:	11 da                	adc    edx,ebx
c0013ede:	83 c4 10             	add    esp,0x10
c0013ee1:	31 c9                	xor    ecx,ecx
c0013ee3:	80 3d d5 e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e7d5,0x0
c0013eea:	74 05                	je     c0013ef1 <Clock::timeInSecondsLocal()+0x3d>
c0013eec:	b9 08 07 00 00       	mov    ecx,0x708
c0013ef1:	31 db                	xor    ebx,ebx
c0013ef3:	01 c8                	add    eax,ecx
c0013ef5:	11 da                	adc    edx,ebx
c0013ef7:	83 c4 08             	add    esp,0x8
c0013efa:	5b                   	pop    ebx
c0013efb:	c3                   	ret    

c0013efc <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013efc:	57                   	push   edi
c0013efd:	56                   	push   esi
c0013efe:	53                   	push   ebx
c0013eff:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013f03:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013f07:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013f09:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013f0d:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013f10:	0f b6 05 d4 e7 02 c0 	movzx  eax,BYTE PTR ds:0xc002e7d4
c0013f17:	03 05 d8 e7 02 c0    	add    eax,DWORD PTR ds:0xc002e7d8
c0013f1d:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013f23:	99                   	cdq    
c0013f24:	29 c6                	sub    esi,eax
c0013f26:	19 d7                	sbb    edi,edx
c0013f28:	89 f0                	mov    eax,esi
c0013f2a:	89 fa                	mov    edx,edi
c0013f2c:	31 f6                	xor    esi,esi
c0013f2e:	80 3d d5 e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e7d5,0x0
c0013f35:	74 05                	je     c0013f3c <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013f37:	be 08 07 00 00       	mov    esi,0x708
c0013f3c:	31 ff                	xor    edi,edi
c0013f3e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013f42:	29 f0                	sub    eax,esi
c0013f44:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013f48:	19 fa                	sbb    edx,edi
c0013f4a:	89 d8                	mov    eax,ebx
c0013f4c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013f50:	5b                   	pop    ebx
c0013f51:	5e                   	pop    esi
c0013f52:	5f                   	pop    edi
c0013f53:	ff e0                	jmp    eax

c0013f55 <datetimeToSeconds(datetime_t)>:
c0013f55:	55                   	push   ebp
c0013f56:	57                   	push   edi
c0013f57:	56                   	push   esi
c0013f58:	53                   	push   ebx
c0013f59:	83 ec 14             	sub    esp,0x14
c0013f5c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013f60:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013f64:	89 d3                	mov    ebx,edx
c0013f66:	0f b6 c6             	movzx  eax,dh
c0013f69:	c1 eb 10             	shr    ebx,0x10
c0013f6c:	48                   	dec    eax
c0013f6d:	66 81 eb 6c 07       	sub    bx,0x76c
c0013f72:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013f76:	0f b6 f5             	movzx  esi,ch
c0013f79:	89 cf                	mov    edi,ecx
c0013f7b:	6b f6 3c             	imul   esi,esi,0x3c
c0013f7e:	c1 ef 10             	shr    edi,0x10
c0013f81:	0f b6 c9             	movzx  ecx,cl
c0013f84:	89 f8                	mov    eax,edi
c0013f86:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013f8c:	0f b6 f8             	movzx  edi,al
c0013f8f:	0f b6 d2             	movzx  edx,dl
c0013f92:	01 fe                	add    esi,edi
c0013f94:	01 f1                	add    ecx,esi
c0013f96:	0f b7 f3             	movzx  esi,bx
c0013f99:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013f9d:	c1 f9 1f             	sar    ecx,0x1f
c0013fa0:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013fa5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013fa9:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013fae:	8b 0c 8d e0 ad 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5220]
c0013fb5:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013fb9:	76 29                	jbe    c0013fe4 <datetimeToSeconds(datetime_t)+0x8f>
c0013fbb:	f6 c3 03             	test   bl,0x3
c0013fbe:	75 24                	jne    c0013fe4 <datetimeToSeconds(datetime_t)+0x8f>
c0013fc0:	31 d2                	xor    edx,edx
c0013fc2:	bf 64 00 00 00       	mov    edi,0x64
c0013fc7:	89 d8                	mov    eax,ebx
c0013fc9:	66 f7 f7             	div    di
c0013fcc:	66 85 d2             	test   dx,dx
c0013fcf:	75 12                	jne    c0013fe3 <datetimeToSeconds(datetime_t)+0x8e>
c0013fd1:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013fd7:	bf 90 01 00 00       	mov    edi,0x190
c0013fdc:	99                   	cdq    
c0013fdd:	f7 ff                	idiv   edi
c0013fdf:	85 d2                	test   edx,edx
c0013fe1:	75 01                	jne    c0013fe4 <datetimeToSeconds(datetime_t)+0x8f>
c0013fe3:	41                   	inc    ecx
c0013fe4:	66 83 fb 46          	cmp    bx,0x46
c0013fe8:	76 45                	jbe    c001402f <datetimeToSeconds(datetime_t)+0xda>
c0013fea:	bb 46 00 00 00       	mov    ebx,0x46
c0013fef:	bf 64 00 00 00       	mov    edi,0x64
c0013ff4:	bd 90 01 00 00       	mov    ebp,0x190
c0013ff9:	b8 6d 01 00 00       	mov    eax,0x16d
c0013ffe:	f6 c3 03             	test   bl,0x3
c0014001:	75 23                	jne    c0014026 <datetimeToSeconds(datetime_t)+0xd1>
c0014003:	89 d8                	mov    eax,ebx
c0014005:	99                   	cdq    
c0014006:	f7 ff                	idiv   edi
c0014008:	b8 6e 01 00 00       	mov    eax,0x16e
c001400d:	85 d2                	test   edx,edx
c001400f:	75 15                	jne    c0014026 <datetimeToSeconds(datetime_t)+0xd1>
c0014011:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0014017:	99                   	cdq    
c0014018:	f7 fd                	idiv   ebp
c001401a:	83 fa 01             	cmp    edx,0x1
c001401d:	19 c0                	sbb    eax,eax
c001401f:	f7 d0                	not    eax
c0014021:	05 6e 01 00 00       	add    eax,0x16e
c0014026:	01 c1                	add    ecx,eax
c0014028:	43                   	inc    ebx
c0014029:	39 f3                	cmp    ebx,esi
c001402b:	7c cc                	jl     c0013ff9 <datetimeToSeconds(datetime_t)+0xa4>
c001402d:	eb 35                	jmp    c0014064 <datetimeToSeconds(datetime_t)+0x10f>
c001402f:	74 33                	je     c0014064 <datetimeToSeconds(datetime_t)+0x10f>
c0014031:	b8 45 00 00 00       	mov    eax,0x45
c0014036:	89 c2                	mov    edx,eax
c0014038:	83 e2 03             	and    edx,0x3
c001403b:	39 f0                	cmp    eax,esi
c001403d:	7e 0f                	jle    c001404e <datetimeToSeconds(datetime_t)+0xf9>
c001403f:	83 fa 01             	cmp    edx,0x1
c0014042:	19 d2                	sbb    edx,edx
c0014044:	48                   	dec    eax
c0014045:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c001404c:	eb e8                	jmp    c0014036 <datetimeToSeconds(datetime_t)+0xe1>
c001404e:	b8 6d 01 00 00       	mov    eax,0x16d
c0014053:	85 d2                	test   edx,edx
c0014055:	75 0b                	jne    c0014062 <datetimeToSeconds(datetime_t)+0x10d>
c0014057:	66 83 fb 01          	cmp    bx,0x1
c001405b:	19 c0                	sbb    eax,eax
c001405d:	05 6e 01 00 00       	add    eax,0x16e
c0014062:	29 c1                	sub    ecx,eax
c0014064:	b8 80 51 01 00       	mov    eax,0x15180
c0014069:	f7 e9                	imul   ecx
c001406b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001406f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0014073:	83 c4 14             	add    esp,0x14
c0014076:	5b                   	pop    ebx
c0014077:	5e                   	pop    esi
c0014078:	5f                   	pop    edi
c0014079:	5d                   	pop    ebp
c001407a:	c3                   	ret    
c001407b:	90                   	nop

c001407c <Clock::setTimeInDatetimeLocal(datetime_t)>:
c001407c:	57                   	push   edi
c001407d:	56                   	push   esi
c001407e:	53                   	push   ebx
c001407f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014083:	8b 06                	mov    eax,DWORD PTR [esi]
c0014085:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0014088:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001408c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014090:	e8 c0 fe ff ff       	call   c0013f55 <datetimeToSeconds(datetime_t)>
c0014095:	59                   	pop    ecx
c0014096:	0f b6 0d d4 e7 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e7d4
c001409d:	5b                   	pop    ebx
c001409e:	03 0d d8 e7 02 c0    	add    ecx,DWORD PTR ds:0xc002e7d8
c00140a4:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00140aa:	89 cb                	mov    ebx,ecx
c00140ac:	c1 fb 1f             	sar    ebx,0x1f
c00140af:	29 c8                	sub    eax,ecx
c00140b1:	19 da                	sbb    edx,ebx
c00140b3:	31 c9                	xor    ecx,ecx
c00140b5:	80 3d d5 e7 02 c0 00 	cmp    BYTE PTR ds:0xc002e7d5,0x0
c00140bc:	74 05                	je     c00140c3 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c00140be:	b9 08 07 00 00       	mov    ecx,0x708
c00140c3:	31 db                	xor    ebx,ebx
c00140c5:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00140c9:	29 c8                	sub    eax,ecx
c00140cb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00140cf:	19 da                	sbb    edx,ebx
c00140d1:	89 f8                	mov    eax,edi
c00140d3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00140d7:	5b                   	pop    ebx
c00140d8:	5e                   	pop    esi
c00140d9:	5f                   	pop    edi
c00140da:	ff e0                	jmp    eax

c00140dc <secondsToDatetime(unsigned long long)>:
c00140dc:	55                   	push   ebp
c00140dd:	57                   	push   edi
c00140de:	56                   	push   esi
c00140df:	53                   	push   ebx
c00140e0:	83 ec 1c             	sub    esp,0x1c
c00140e3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00140e7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00140eb:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00140ef:	6a 00                	push   0x0
c00140f1:	68 80 51 01 00       	push   0x15180
c00140f6:	55                   	push   ebp
c00140f7:	57                   	push   edi
c00140f8:	e8 2f 29 01 00       	call   c0026a2c <__udivdi3>
c00140fd:	83 c4 10             	add    esp,0x10
c0014100:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0014106:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001410a:	6a 00                	push   0x0
c001410c:	68 80 51 01 00       	push   0x15180
c0014111:	55                   	push   ebp
c0014112:	57                   	push   edi
c0014113:	bf 10 0e 00 00       	mov    edi,0xe10
c0014118:	e8 0f 2a 01 00       	call   c0026b2c <__umoddi3>
c001411d:	83 c4 10             	add    esp,0x10
c0014120:	99                   	cdq    
c0014121:	f7 ff                	idiv   edi
c0014123:	bf 3c 00 00 00       	mov    edi,0x3c
c0014128:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c001412b:	89 d0                	mov    eax,edx
c001412d:	99                   	cdq    
c001412e:	f7 ff                	idiv   edi
c0014130:	85 db                	test   ebx,ebx
c0014132:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0014135:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0014138:	79 11                	jns    c001414b <secondsToDatetime(unsigned long long)+0x6f>
c001413a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001413e:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0014144:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0014149:	eb 07                	jmp    c0014152 <secondsToDatetime(unsigned long long)+0x76>
c001414b:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0014150:	89 d8                	mov    eax,ebx
c0014152:	bf b4 05 00 00       	mov    edi,0x5b4
c0014157:	99                   	cdq    
c0014158:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c001415d:	f7 f9                	idiv   ecx
c001415f:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0014164:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014168:	31 d2                	xor    edx,edx
c001416a:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0014172:	01 c3                	add    ebx,eax
c0014174:	89 d8                	mov    eax,ebx
c0014176:	f7 f1                	div    ecx
c0014178:	31 d2                	xor    edx,edx
c001417a:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c001417d:	89 d8                	mov    eax,ebx
c001417f:	f7 f7                	div    edi
c0014181:	31 d2                	xor    edx,edx
c0014183:	29 c1                	sub    ecx,eax
c0014185:	89 d8                	mov    eax,ebx
c0014187:	f7 f5                	div    ebp
c0014189:	bd 6d 01 00 00       	mov    ebp,0x16d
c001418e:	29 c1                	sub    ecx,eax
c0014190:	31 d2                	xor    edx,edx
c0014192:	89 c8                	mov    eax,ecx
c0014194:	f7 f5                	div    ebp
c0014196:	bd 94 8e 00 00       	mov    ebp,0x8e94
c001419b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001419f:	31 d2                	xor    edx,edx
c00141a1:	89 c8                	mov    eax,ecx
c00141a3:	f7 f5                	div    ebp
c00141a5:	31 d2                	xor    edx,edx
c00141a7:	01 c3                	add    ebx,eax
c00141a9:	89 c8                	mov    eax,ecx
c00141ab:	f7 f7                	div    edi
c00141ad:	bf 99 00 00 00       	mov    edi,0x99
c00141b2:	29 c3                	sub    ebx,eax
c00141b4:	31 d2                	xor    edx,edx
c00141b6:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c00141be:	29 c3                	sub    ebx,eax
c00141c0:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00141c3:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c00141c6:	bb 05 00 00 00       	mov    ebx,0x5
c00141cb:	83 c1 02             	add    ecx,0x2
c00141ce:	89 c8                	mov    eax,ecx
c00141d0:	f7 f7                	div    edi
c00141d2:	31 d2                	xor    edx,edx
c00141d4:	89 c7                	mov    edi,eax
c00141d6:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c00141dc:	83 c0 02             	add    eax,0x2
c00141df:	f7 f3                	div    ebx
c00141e1:	89 eb                	mov    ebx,ebp
c00141e3:	29 c3                	sub    ebx,eax
c00141e5:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c00141eb:	88 1e                	mov    BYTE PTR [esi],bl
c00141ed:	19 c0                	sbb    eax,eax
c00141ef:	31 d2                	xor    edx,edx
c00141f1:	83 e0 0c             	and    eax,0xc
c00141f4:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c00141f8:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0014200:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0014204:	83 f9 01             	cmp    ecx,0x1
c0014207:	0f 96 c2             	setbe  dl
c001420a:	41                   	inc    ecx
c001420b:	01 d0                	add    eax,edx
c001420d:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0014210:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0014214:	83 c4 1c             	add    esp,0x1c
c0014217:	89 f0                	mov    eax,esi
c0014219:	5b                   	pop    ebx
c001421a:	5e                   	pop    esi
c001421b:	5f                   	pop    edi
c001421c:	5d                   	pop    ebp
c001421d:	c2 04 00             	ret    0x4

c0014220 <Clock::timeInDatetimeLocal()>:
c0014220:	53                   	push   ebx
c0014221:	83 ec 14             	sub    esp,0x14
c0014224:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014228:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001422c:	e8 83 fc ff ff       	call   c0013eb4 <Clock::timeInSecondsLocal()>
c0014231:	83 c4 0c             	add    esp,0xc
c0014234:	52                   	push   edx
c0014235:	50                   	push   eax
c0014236:	53                   	push   ebx
c0014237:	e8 a0 fe ff ff       	call   c00140dc <secondsToDatetime(unsigned long long)>
c001423c:	89 d8                	mov    eax,ebx
c001423e:	83 c4 14             	add    esp,0x14
c0014241:	5b                   	pop    ebx
c0014242:	c2 04 00             	ret    0x4
c0014245:	90                   	nop

c0014246 <Device::hibernate()>:
c0014246:	c3                   	ret    
c0014247:	90                   	nop

c0014248 <Device::wake()>:
c0014248:	c3                   	ret    
c0014249:	90                   	nop

c001424a <Device::detect()>:
c001424a:	c3                   	ret    
c001424b:	90                   	nop

c001424c <Device::disableLegacy()>:
c001424c:	c3                   	ret    
c001424d:	90                   	nop

c001424e <Device::powerSaving(PowerSavingLevel)>:
c001424e:	c3                   	ret    
c001424f:	90                   	nop

c0014250 <DriverlessDevice::close(int, int, void*)>:
c0014250:	31 c0                	xor    eax,eax
c0014252:	c3                   	ret    
c0014253:	90                   	nop

c0014254 <DriverlessDevice::detect()>:
c0014254:	c3                   	ret    
c0014255:	90                   	nop

c0014256 <DriverlessDevice::open(int, int, void*)>:
c0014256:	83 ec 18             	sub    esp,0x18
c0014259:	68 10 ae 02 c0       	push   0xc002ae10
c001425e:	e8 c0 63 00 00       	call   c001a623 <Krnl::panic(char const*)>
c0014263:	83 c8 ff             	or     eax,0xffffffff
c0014266:	83 c4 1c             	add    esp,0x1c
c0014269:	c3                   	ret    

c001426a <Device::~Device()>:
c001426a:	ba 38 ae 02 c0       	mov    edx,0xc002ae38
c001426f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014273:	89 10                	mov    DWORD PTR [eax],edx
c0014275:	90                   	nop
c0014276:	c3                   	ret    
c0014277:	90                   	nop

c0014278 <Device::~Device()>:
c0014278:	83 ec 0c             	sub    esp,0xc
c001427b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001427f:	e8 e6 ff ff ff       	call   c001426a <Device::~Device()>
c0014284:	83 c4 04             	add    esp,0x4
c0014287:	83 ec 08             	sub    esp,0x8
c001428a:	68 58 01 00 00       	push   0x158
c001428f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014293:	e8 f9 eb ff ff       	call   c0012e91 <operator delete(void*, unsigned long)>
c0014298:	83 c4 10             	add    esp,0x10
c001429b:	83 c4 0c             	add    esp,0xc
c001429e:	c3                   	ret    
c001429f:	90                   	nop

c00142a0 <Device::findAndLoadDriver()>:
c00142a0:	c3                   	ret    
c00142a1:	90                   	nop

c00142a2 <Device::preOpenPCI(PCIDeviceInfo)>:
c00142a2:	57                   	push   edi
c00142a3:	b9 09 00 00 00       	mov    ecx,0x9
c00142a8:	56                   	push   esi
c00142a9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00142ad:	8d 74 24 10          	lea    esi,[esp+0x10]
c00142b1:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c00142bb:	81 c7 18 01 00 00    	add    edi,0x118
c00142c1:	fc                   	cld    
c00142c2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00142c4:	5e                   	pop    esi
c00142c5:	5f                   	pop    edi
c00142c6:	c3                   	ret    
c00142c7:	90                   	nop

c00142c8 <Device::preOpenACPI(void*, char*, char*)>:
c00142c8:	56                   	push   esi
c00142c9:	53                   	push   ebx
c00142ca:	83 ec 08             	sub    esp,0x8
c00142cd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00142d1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00142d5:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c00142df:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00142e3:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c00142e9:	6a 1e                	push   0x1e
c00142eb:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c00142f1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00142f5:	81 c3 3a 01 00 00    	add    ebx,0x13a
c00142fb:	50                   	push   eax
c00142fc:	e8 43 c4 fe ff       	call   c0000744 <memcpy>
c0014301:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0014305:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0014309:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0014311:	83 c4 14             	add    esp,0x14
c0014314:	5b                   	pop    ebx
c0014315:	5e                   	pop    esi
c0014316:	e9 29 c4 fe ff       	jmp    c0000744 <memcpy>
c001431b:	90                   	nop

c001431c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001431c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014320:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0014325:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c001432c:	75 0b                	jne    c0014339 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c001432e:	8b 00                	mov    eax,DWORD PTR [eax]
c0014330:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014334:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014337:	eb 1e                	jmp    c0014357 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0014339:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c001433e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014344:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001434a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001434c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014350:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014354:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0014357:	ff e0                	jmp    eax
c0014359:	90                   	nop

c001435a <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c001435a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001435e:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0014363:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c001436a:	75 0b                	jne    c0014377 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001436c:	8b 00                	mov    eax,DWORD PTR [eax]
c001436e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014372:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0014375:	eb 1e                	jmp    c0014395 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0014377:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c001437c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014382:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0014388:	8b 08                	mov    ecx,DWORD PTR [eax]
c001438a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001438e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014392:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0014395:	ff e0                	jmp    eax
c0014397:	90                   	nop

c0014398 <Device::addChild(Device*)>:
c0014398:	53                   	push   ebx
c0014399:	83 ec 08             	sub    esp,0x8
c001439c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00143a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00143a4:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c00143aa:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c00143b0:	8b 13                	mov    edx,DWORD PTR [ebx]
c00143b2:	85 d2                	test   edx,edx
c00143b4:	74 04                	je     c00143ba <Device::addChild(Device*)+0x22>
c00143b6:	89 d3                	mov    ebx,edx
c00143b8:	eb f6                	jmp    c00143b0 <Device::addChild(Device*)+0x18>
c00143ba:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00143bd:	83 ec 0c             	sub    esp,0xc
c00143c0:	6a 08                	push   0x8
c00143c2:	e8 79 b4 ff ff       	call   c000f840 <malloc>
c00143c7:	89 03                	mov    DWORD PTR [ebx],eax
c00143c9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00143cf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00143d6:	83 c4 18             	add    esp,0x18
c00143d9:	5b                   	pop    ebx
c00143da:	c3                   	ret    
c00143db:	90                   	nop

c00143dc <Device::removeAllChildren()>:
c00143dc:	56                   	push   esi
c00143dd:	53                   	push   ebx
c00143de:	52                   	push   edx
c00143df:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00143e3:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c00143e9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143ec:	74 17                	je     c0014405 <Device::removeAllChildren()+0x29>
c00143ee:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00143f1:	85 c0                	test   eax,eax
c00143f3:	74 0c                	je     c0014401 <Device::removeAllChildren()+0x25>
c00143f5:	83 ec 0c             	sub    esp,0xc
c00143f8:	8b 10                	mov    edx,DWORD PTR [eax]
c00143fa:	50                   	push   eax
c00143fb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00143fe:	83 c4 10             	add    esp,0x10
c0014401:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014403:	eb e4                	jmp    c00143e9 <Device::removeAllChildren()+0xd>
c0014405:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001440b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014411:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0014417:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001441e:	58                   	pop    eax
c001441f:	5b                   	pop    ebx
c0014420:	5e                   	pop    esi
c0014421:	c3                   	ret    

c0014422 <Device::hibernateAll()>:
c0014422:	53                   	push   ebx
c0014423:	83 ec 14             	sub    esp,0x14
c0014426:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001442a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001442c:	53                   	push   ebx
c001442d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014430:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014436:	83 c4 10             	add    esp,0x10
c0014439:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001443c:	74 0f                	je     c001444d <Device::hibernateAll()+0x2b>
c001443e:	83 ec 0c             	sub    esp,0xc
c0014441:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014444:	e8 d9 ff ff ff       	call   c0014422 <Device::hibernateAll()>
c0014449:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001444b:	eb e9                	jmp    c0014436 <Device::hibernateAll()+0x14>
c001444d:	83 c4 08             	add    esp,0x8
c0014450:	5b                   	pop    ebx
c0014451:	c3                   	ret    

c0014452 <Device::wakeAll()>:
c0014452:	53                   	push   ebx
c0014453:	83 ec 14             	sub    esp,0x14
c0014456:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001445a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001445c:	53                   	push   ebx
c001445d:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0014460:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014466:	83 c4 10             	add    esp,0x10
c0014469:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001446c:	74 0f                	je     c001447d <Device::wakeAll()+0x2b>
c001446e:	83 ec 0c             	sub    esp,0xc
c0014471:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014474:	e8 d9 ff ff ff       	call   c0014452 <Device::wakeAll()>
c0014479:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001447b:	eb e9                	jmp    c0014466 <Device::wakeAll()+0x14>
c001447d:	83 c4 08             	add    esp,0x8
c0014480:	5b                   	pop    ebx
c0014481:	c3                   	ret    

c0014482 <Device::detectAll()>:
c0014482:	53                   	push   ebx
c0014483:	83 ec 14             	sub    esp,0x14
c0014486:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001448a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001448c:	53                   	push   ebx
c001448d:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0014490:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014496:	83 c4 10             	add    esp,0x10
c0014499:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001449c:	74 0f                	je     c00144ad <Device::detectAll()+0x2b>
c001449e:	83 ec 0c             	sub    esp,0xc
c00144a1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00144a4:	e8 d9 ff ff ff       	call   c0014482 <Device::detectAll()>
c00144a9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00144ab:	eb e9                	jmp    c0014496 <Device::detectAll()+0x14>
c00144ad:	83 c4 08             	add    esp,0x8
c00144b0:	5b                   	pop    ebx
c00144b1:	c3                   	ret    

c00144b2 <Device::disableLegacyAll()>:
c00144b2:	53                   	push   ebx
c00144b3:	83 ec 14             	sub    esp,0x14
c00144b6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00144ba:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144bc:	53                   	push   ebx
c00144bd:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c00144c0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00144c6:	83 c4 10             	add    esp,0x10
c00144c9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00144cc:	74 0f                	je     c00144dd <Device::disableLegacyAll()+0x2b>
c00144ce:	83 ec 0c             	sub    esp,0xc
c00144d1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00144d4:	e8 d9 ff ff ff       	call   c00144b2 <Device::disableLegacyAll()>
c00144d9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00144db:	eb e9                	jmp    c00144c6 <Device::disableLegacyAll()+0x14>
c00144dd:	83 c4 08             	add    esp,0x8
c00144e0:	5b                   	pop    ebx
c00144e1:	c3                   	ret    

c00144e2 <Device::loadDriversForAll()>:
c00144e2:	53                   	push   ebx
c00144e3:	83 ec 08             	sub    esp,0x8
c00144e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00144ea:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00144f0:	8b 18                	mov    ebx,DWORD PTR [eax]
c00144f2:	85 db                	test   ebx,ebx
c00144f4:	74 12                	je     c0014508 <Device::loadDriversForAll()+0x26>
c00144f6:	83 ec 0c             	sub    esp,0xc
c00144f9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00144fc:	e8 e1 ff ff ff       	call   c00144e2 <Device::loadDriversForAll()>
c0014501:	83 c4 10             	add    esp,0x10
c0014504:	89 d8                	mov    eax,ebx
c0014506:	eb e8                	jmp    c00144f0 <Device::loadDriversForAll()+0xe>
c0014508:	83 c4 08             	add    esp,0x8
c001450b:	5b                   	pop    ebx
c001450c:	c3                   	ret    
c001450d:	90                   	nop

c001450e <Device::closeAll()>:
c001450e:	53                   	push   ebx
c001450f:	83 ec 08             	sub    esp,0x8
c0014512:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014516:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014518:	6a 00                	push   0x0
c001451a:	6a 00                	push   0x0
c001451c:	6a 00                	push   0x0
c001451e:	53                   	push   ebx
c001451f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014522:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014528:	83 c4 10             	add    esp,0x10
c001452b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001452e:	74 0f                	je     c001453f <Device::closeAll()+0x31>
c0014530:	83 ec 0c             	sub    esp,0xc
c0014533:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014536:	e8 d3 ff ff ff       	call   c001450e <Device::closeAll()>
c001453b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001453d:	eb e9                	jmp    c0014528 <Device::closeAll()+0x1a>
c001453f:	83 c4 08             	add    esp,0x8
c0014542:	5b                   	pop    ebx
c0014543:	c3                   	ret    

c0014544 <Device::powerSavingAll(PowerSavingLevel)>:
c0014544:	56                   	push   esi
c0014545:	53                   	push   ebx
c0014546:	83 ec 0c             	sub    esp,0xc
c0014549:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001454d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0014551:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014553:	56                   	push   esi
c0014554:	53                   	push   ebx
c0014555:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0014558:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001455e:	83 c4 10             	add    esp,0x10
c0014561:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014564:	74 0f                	je     c0014575 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0014566:	52                   	push   edx
c0014567:	52                   	push   edx
c0014568:	56                   	push   esi
c0014569:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001456c:	e8 d3 ff ff ff       	call   c0014544 <Device::powerSavingAll(PowerSavingLevel)>
c0014571:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014573:	eb e9                	jmp    c001455e <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0014575:	58                   	pop    eax
c0014576:	5b                   	pop    ebx
c0014577:	5e                   	pop    esi
c0014578:	c3                   	ret    
c0014579:	90                   	nop

c001457a <Device::setName(char const*)>:
c001457a:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0014582:	e9 ad c2 fe ff       	jmp    c0000834 <strcpy>
c0014587:	90                   	nop

c0014588 <Device::Device(char const*)>:
c0014588:	83 ec 1c             	sub    esp,0x1c
c001458b:	ba 38 ae 02 c0       	mov    edx,0xc002ae38
c0014590:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014594:	89 10                	mov    DWORD PTR [eax],edx
c0014596:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001459a:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c00145a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145a8:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00145b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145b6:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00145c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145c4:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00145ce:	83 ec 08             	sub    esp,0x8
c00145d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00145d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00145d9:	e8 9c ff ff ff       	call   c001457a <Device::setName(char const*)>
c00145de:	83 c4 10             	add    esp,0x10
c00145e1:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c00145e9:	83 ec 0c             	sub    esp,0xc
c00145ec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00145f0:	e8 4b b2 ff ff       	call   c000f840 <malloc>
c00145f5:	83 c4 10             	add    esp,0x10
c00145f8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00145fe:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014605:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014609:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c001460f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014613:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014619:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001461f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014623:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014629:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014630:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014634:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c001463b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001463f:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0014646:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001464a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014654:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014658:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014662:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014666:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014670:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014674:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c001467e:	90                   	nop
c001467f:	83 c4 1c             	add    esp,0x1c
c0014682:	c3                   	ret    
c0014683:	90                   	nop

c0014684 <Device::getName()>:
c0014684:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014688:	05 d0 00 00 00       	add    eax,0xd0
c001468d:	c3                   	ret    

c001468e <DriverlessDevice::DriverlessDevice(char const*)>:
c001468e:	83 ec 0c             	sub    esp,0xc
c0014691:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014695:	83 ec 08             	sub    esp,0x8
c0014698:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001469c:	50                   	push   eax
c001469d:	e8 e6 fe ff ff       	call   c0014588 <Device::Device(char const*)>
c00146a2:	83 c4 10             	add    esp,0x10
c00146a5:	ba 64 ae 02 c0       	mov    edx,0xc002ae64
c00146aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146ae:	89 10                	mov    DWORD PTR [eax],edx
c00146b0:	90                   	nop
c00146b1:	83 c4 0c             	add    esp,0xc
c00146b4:	c3                   	ret    
c00146b5:	90                   	nop

c00146b6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c00146b6:	57                   	push   edi
c00146b7:	56                   	push   esi
c00146b8:	53                   	push   ebx
c00146b9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00146bd:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00146c1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00146c5:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c00146cb:	75 0c                	jne    c00146d9 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c00146cd:	52                   	push   edx
c00146ce:	52                   	push   edx
c00146cf:	53                   	push   ebx
c00146d0:	56                   	push   esi
c00146d1:	e8 94 42 01 00       	call   c002896a <LinkedList<Device>::addElement(Device*)>
c00146d6:	83 c4 10             	add    esp,0x10
c00146d9:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00146df:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00146e2:	74 12                	je     c00146f6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c00146e4:	50                   	push   eax
c00146e5:	57                   	push   edi
c00146e6:	56                   	push   esi
c00146e7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00146ea:	e8 c7 ff ff ff       	call   c00146b6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00146ef:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00146f1:	83 c4 10             	add    esp,0x10
c00146f4:	eb e9                	jmp    c00146df <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c00146f6:	5b                   	pop    ebx
c00146f7:	5e                   	pop    esi
c00146f8:	5f                   	pop    edi
c00146f9:	c3                   	ret    

c00146fa <getDevicesOfType(DeviceType)>:
c00146fa:	53                   	push   ebx
c00146fb:	83 ec 14             	sub    esp,0x14
c00146fe:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014702:	53                   	push   ebx
c0014703:	e8 3e 43 01 00       	call   c0028a46 <LinkedList<Device>::LinkedList()>
c0014708:	83 c4 0c             	add    esp,0xc
c001470b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001470f:	53                   	push   ebx
c0014710:	ff 35 48 e6 02 c0    	push   DWORD PTR ds:0xc002e648
c0014716:	e8 9b ff ff ff       	call   c00146b6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001471b:	89 d8                	mov    eax,ebx
c001471d:	83 c4 18             	add    esp,0x18
c0014720:	5b                   	pop    ebx
c0014721:	c2 04 00             	ret    0x4

c0014724 <HardDiskController::HardDiskController(char const*)>:
c0014724:	83 ec 0c             	sub    esp,0xc
c0014727:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001472b:	83 ec 08             	sub    esp,0x8
c001472e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014732:	50                   	push   eax
c0014733:	e8 50 fe ff ff       	call   c0014588 <Device::Device(char const*)>
c0014738:	83 c4 10             	add    esp,0x10
c001473b:	ba 90 ae 02 c0       	mov    edx,0xc002ae90
c0014740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014744:	89 10                	mov    DWORD PTR [eax],edx
c0014746:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001474a:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0014754:	90                   	nop
c0014755:	83 c4 0c             	add    esp,0xc
c0014758:	c3                   	ret    
c0014759:	90                   	nop

c001475a <HardDiskController::~HardDiskController()>:
c001475a:	83 ec 0c             	sub    esp,0xc
c001475d:	ba 90 ae 02 c0       	mov    edx,0xc002ae90
c0014762:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014766:	89 10                	mov    DWORD PTR [eax],edx
c0014768:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001476c:	83 ec 0c             	sub    esp,0xc
c001476f:	50                   	push   eax
c0014770:	e8 f5 fa ff ff       	call   c001426a <Device::~Device()>
c0014775:	83 c4 10             	add    esp,0x10
c0014778:	90                   	nop
c0014779:	83 c4 0c             	add    esp,0xc
c001477c:	c3                   	ret    
c001477d:	90                   	nop

c001477e <HardDiskController::~HardDiskController()>:
c001477e:	83 ec 0c             	sub    esp,0xc
c0014781:	83 ec 0c             	sub    esp,0xc
c0014784:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014788:	e8 cd ff ff ff       	call   c001475a <HardDiskController::~HardDiskController()>
c001478d:	83 c4 10             	add    esp,0x10
c0014790:	83 ec 08             	sub    esp,0x8
c0014793:	68 58 01 00 00       	push   0x158
c0014798:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001479c:	e8 f0 e6 ff ff       	call   c0012e91 <operator delete(void*, unsigned long)>
c00147a1:	83 c4 10             	add    esp,0x10
c00147a4:	83 c4 0c             	add    esp,0xc
c00147a7:	c3                   	ret    

c00147a8 <PhysicalDisk::eject()>:
c00147a8:	83 ec 18             	sub    esp,0x18
c00147ab:	68 b4 ae 02 c0       	push   0xc002aeb4
c00147b0:	e8 bc e7 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c00147b5:	83 c8 ff             	or     eax,0xffffffff
c00147b8:	83 c4 1c             	add    esp,0x1c
c00147bb:	c3                   	ret    

c00147bc <PhysicalDisk::PhysicalDisk(char const*, int)>:
c00147bc:	83 ec 0c             	sub    esp,0xc
c00147bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147c3:	83 ec 08             	sub    esp,0x8
c00147c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147ca:	50                   	push   eax
c00147cb:	e8 b8 fd ff ff       	call   c0014588 <Device::Device(char const*)>
c00147d0:	83 c4 10             	add    esp,0x10
c00147d3:	ba e4 ae 02 c0       	mov    edx,0xc002aee4
c00147d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147dc:	89 10                	mov    DWORD PTR [eax],edx
c00147de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147e2:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00147e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147ed:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c00147f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147f8:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0014802:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014806:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001480a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0014810:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014814:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001481e:	90                   	nop
c001481f:	83 c4 0c             	add    esp,0xc
c0014822:	c3                   	ret    
c0014823:	90                   	nop

c0014824 <PhysicalDisk::startCache()>:
c0014824:	56                   	push   esi
c0014825:	53                   	push   ebx
c0014826:	83 ec 10             	sub    esp,0x10
c0014829:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001482d:	6a 44                	push   0x44
c001482f:	e8 0c b0 ff ff       	call   c000f840 <malloc>
c0014834:	89 c6                	mov    esi,eax
c0014836:	58                   	pop    eax
c0014837:	5a                   	pop    edx
c0014838:	53                   	push   ebx
c0014839:	56                   	push   esi
c001483a:	e8 39 27 00 00       	call   c0016f78 <VCache::VCache(PhysicalDisk*)>
c001483f:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0014845:	83 c4 14             	add    esp,0x14
c0014848:	5b                   	pop    ebx
c0014849:	5e                   	pop    esi
c001484a:	c3                   	ret    
c001484b:	90                   	nop

c001484c <PhysicalDisk::~PhysicalDisk()>:
c001484c:	83 ec 0c             	sub    esp,0xc
c001484f:	ba e4 ae 02 c0       	mov    edx,0xc002aee4
c0014854:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014858:	89 10                	mov    DWORD PTR [eax],edx
c001485a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001485e:	83 ec 0c             	sub    esp,0xc
c0014861:	50                   	push   eax
c0014862:	e8 03 fa ff ff       	call   c001426a <Device::~Device()>
c0014867:	83 c4 10             	add    esp,0x10
c001486a:	90                   	nop
c001486b:	83 c4 0c             	add    esp,0xc
c001486e:	c3                   	ret    
c001486f:	90                   	nop

c0014870 <PhysicalDisk::~PhysicalDisk()>:
c0014870:	83 ec 0c             	sub    esp,0xc
c0014873:	83 ec 0c             	sub    esp,0xc
c0014876:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001487a:	e8 cd ff ff ff       	call   c001484c <PhysicalDisk::~PhysicalDisk()>
c001487f:	83 c4 10             	add    esp,0x10
c0014882:	83 ec 08             	sub    esp,0x8
c0014885:	68 6c 01 00 00       	push   0x16c
c001488a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001488e:	e8 fe e5 ff ff       	call   c0012e91 <operator delete(void*, unsigned long)>
c0014893:	83 c4 10             	add    esp,0x10
c0014896:	83 c4 0c             	add    esp,0xc
c0014899:	c3                   	ret    

c001489a <FPU::FPU(char const*)>:
c001489a:	83 ec 0c             	sub    esp,0xc
c001489d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148a1:	83 ec 08             	sub    esp,0x8
c00148a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00148a8:	50                   	push   eax
c00148a9:	e8 da fc ff ff       	call   c0014588 <Device::Device(char const*)>
c00148ae:	83 c4 10             	add    esp,0x10
c00148b1:	ba 28 af 02 c0       	mov    edx,0xc002af28
c00148b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148ba:	89 10                	mov    DWORD PTR [eax],edx
c00148bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148c0:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c00148ca:	90                   	nop
c00148cb:	83 c4 0c             	add    esp,0xc
c00148ce:	c3                   	ret    
c00148cf:	90                   	nop

c00148d0 <FPU::~FPU()>:
c00148d0:	83 ec 0c             	sub    esp,0xc
c00148d3:	ba 28 af 02 c0       	mov    edx,0xc002af28
c00148d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148dc:	89 10                	mov    DWORD PTR [eax],edx
c00148de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148e2:	83 ec 0c             	sub    esp,0xc
c00148e5:	50                   	push   eax
c00148e6:	e8 7f f9 ff ff       	call   c001426a <Device::~Device()>
c00148eb:	83 c4 10             	add    esp,0x10
c00148ee:	90                   	nop
c00148ef:	83 c4 0c             	add    esp,0xc
c00148f2:	c3                   	ret    
c00148f3:	90                   	nop

c00148f4 <FPU::~FPU()>:
c00148f4:	83 ec 0c             	sub    esp,0xc
c00148f7:	83 ec 0c             	sub    esp,0xc
c00148fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00148fe:	e8 cd ff ff ff       	call   c00148d0 <FPU::~FPU()>
c0014903:	83 c4 10             	add    esp,0x10
c0014906:	83 ec 08             	sub    esp,0x8
c0014909:	68 58 01 00 00       	push   0x158
c001490e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014912:	e8 7a e5 ff ff       	call   c0012e91 <operator delete(void*, unsigned long)>
c0014917:	83 c4 10             	add    esp,0x10
c001491a:	83 c4 0c             	add    esp,0xc
c001491d:	c3                   	ret    

c001491e <setupFPU()>:
c001491e:	53                   	push   ebx
c001491f:	83 ec 08             	sub    esp,0x8
c0014922:	8b 15 48 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e648
c0014928:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c001492f:	74 19                	je     c001494a <setupFPU()+0x2c>
c0014931:	83 ec 0c             	sub    esp,0xc
c0014934:	68 58 01 00 00       	push   0x158
c0014939:	e8 02 af ff ff       	call   c000f840 <malloc>
c001493e:	89 c3                	mov    ebx,eax
c0014940:	89 04 24             	mov    DWORD PTR [esp],eax
c0014943:	e8 66 0c 01 00       	call   c00255ae <AVX::AVX()>
c0014948:	eb 5b                	jmp    c00149a5 <setupFPU()+0x87>
c001494a:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0014950:	84 c0                	test   al,al
c0014952:	79 19                	jns    c001496d <setupFPU()+0x4f>
c0014954:	83 ec 0c             	sub    esp,0xc
c0014957:	68 58 01 00 00       	push   0x158
c001495c:	e8 df ae ff ff       	call   c000f840 <malloc>
c0014961:	89 c3                	mov    ebx,eax
c0014963:	89 04 24             	mov    DWORD PTR [esp],eax
c0014966:	e8 69 0d 01 00       	call   c00256d4 <SSE::SSE()>
c001496b:	eb 38                	jmp    c00149a5 <setupFPU()+0x87>
c001496d:	a8 20                	test   al,0x20
c001496f:	74 19                	je     c001498a <setupFPU()+0x6c>
c0014971:	83 ec 0c             	sub    esp,0xc
c0014974:	68 58 01 00 00       	push   0x158
c0014979:	e8 c2 ae ff ff       	call   c000f840 <malloc>
c001497e:	89 c3                	mov    ebx,eax
c0014980:	89 04 24             	mov    DWORD PTR [esp],eax
c0014983:	e8 b6 0c 01 00       	call   c002563e <MMX::MMX()>
c0014988:	eb 1b                	jmp    c00149a5 <setupFPU()+0x87>
c001498a:	a8 10                	test   al,0x10
c001498c:	74 1c                	je     c00149aa <setupFPU()+0x8c>
c001498e:	83 ec 0c             	sub    esp,0xc
c0014991:	68 58 01 00 00       	push   0x158
c0014996:	e8 a5 ae ff ff       	call   c000f840 <malloc>
c001499b:	89 c3                	mov    ebx,eax
c001499d:	89 04 24             	mov    DWORD PTR [esp],eax
c00149a0:	e8 bd 0d 01 00       	call   c0025762 <x87::x87()>
c00149a5:	83 c4 10             	add    esp,0x10
c00149a8:	eb 24                	jmp    c00149ce <setupFPU()+0xb0>
c00149aa:	83 e0 ef             	and    eax,0xffffffef
c00149ad:	83 ec 0c             	sub    esp,0xc
c00149b0:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00149b6:	68 14 af 02 c0       	push   0xc002af14
c00149bb:	e8 b1 e5 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c00149c0:	0f 20 c0             	mov    eax,cr0
c00149c3:	83 c8 04             	or     eax,0x4
c00149c6:	0f 22 c0             	mov    cr0,eax
c00149c9:	31 db                	xor    ebx,ebx
c00149cb:	83 c4 10             	add    esp,0x10
c00149ce:	89 d8                	mov    eax,ebx
c00149d0:	83 c4 08             	add    esp,0x8
c00149d3:	5b                   	pop    ebx
c00149d4:	c3                   	ret    
c00149d5:	90                   	nop

c00149d6 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c00149d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00149da:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00149de:	c1 e0 04             	shl    eax,0x4
c00149e1:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00149e5:	8d 50 10             	lea    edx,[eax+0x10]
c00149e8:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c00149ee:	74 08                	je     c00149f8 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c00149f0:	83 c0 04             	add    eax,0x4
c00149f3:	39 d0                	cmp    eax,edx
c00149f5:	75 f1                	jne    c00149e8 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c00149f7:	c3                   	ret    
c00149f8:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014a02:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014a0c:	eb e2                	jmp    c00149f0 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014a0e <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014a0e:	57                   	push   edi
c0014a0f:	31 c0                	xor    eax,eax
c0014a11:	56                   	push   esi
c0014a12:	53                   	push   ebx
c0014a13:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014a17:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014a1b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014a1f:	89 da                	mov    edx,ebx
c0014a21:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014a25:	c1 e2 04             	shl    edx,0x4
c0014a28:	01 ca                	add    edx,ecx
c0014a2a:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014a32:	74 16                	je     c0014a4a <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0014a34:	40                   	inc    eax
c0014a35:	83 f8 04             	cmp    eax,0x4
c0014a38:	75 f0                	jne    c0014a2a <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0014a3a:	c7 44 24 10 58 af 02 c0 	mov    DWORD PTR [esp+0x10],0xc002af58
c0014a42:	5b                   	pop    ebx
c0014a43:	5e                   	pop    esi
c0014a44:	5f                   	pop    edi
c0014a45:	e9 d9 5b 00 00       	jmp    c001a623 <Krnl::panic(char const*)>
c0014a4a:	8d 04 98             	lea    eax,[eax+ebx*4]
c0014a4d:	8d 04 81             	lea    eax,[ecx+eax*4]
c0014a50:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014a56:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014a5c:	5b                   	pop    ebx
c0014a5d:	5e                   	pop    esi
c0014a5e:	5f                   	pop    edi
c0014a5f:	c3                   	ret    

c0014a60 <doubleFault(regs*, void*)>:
c0014a60:	55                   	push   ebp
c0014a61:	89 e5                	mov    ebp,esp
c0014a63:	83 ec 08             	sub    esp,0x8
c0014a66:	83 ec 0c             	sub    esp,0xc
c0014a69:	68 93 af 02 c0       	push   0xc002af93
c0014a6e:	e8 b0 5b 00 00       	call   c001a623 <Krnl::panic(char const*)>
c0014a73:	83 c4 10             	add    esp,0x10
c0014a76:	90                   	nop
c0014a77:	c9                   	leave  
c0014a78:	c3                   	ret    
c0014a79:	90                   	nop

c0014a7a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014a7a:	56                   	push   esi
c0014a7b:	53                   	push   ebx
c0014a7c:	50                   	push   eax
c0014a7d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014a81:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014a85:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014a8a:	75 35                	jne    c0014ac1 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014a8c:	8d 43 20             	lea    eax,[ebx+0x20]
c0014a8f:	31 d2                	xor    edx,edx
c0014a91:	89 c1                	mov    ecx,eax
c0014a93:	c1 e1 04             	shl    ecx,0x4
c0014a96:	01 f1                	add    ecx,esi
c0014a98:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014aa0:	74 3e                	je     c0014ae0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014aa2:	42                   	inc    edx
c0014aa3:	83 fa 04             	cmp    edx,0x4
c0014aa6:	75 f0                	jne    c0014a98 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014aa8:	83 ec 0c             	sub    esp,0xc
c0014aab:	68 d8 af 02 c0       	push   0xc002afd8
c0014ab0:	e8 6e 5b 00 00       	call   c001a623 <Krnl::panic(char const*)>
c0014ab5:	83 c4 10             	add    esp,0x10
c0014ab8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014abd:	5a                   	pop    edx
c0014abe:	5b                   	pop    ebx
c0014abf:	5e                   	pop    esi
c0014ac0:	c3                   	ret    
c0014ac1:	83 ec 0c             	sub    esp,0xc
c0014ac4:	56                   	push   esi
c0014ac5:	e8 ba fb ff ff       	call   c0014684 <Device::getName()>
c0014aca:	83 c4 10             	add    esp,0x10
c0014acd:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014ad0:	75 ba                	jne    c0014a8c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014ad2:	83 fb 0f             	cmp    ebx,0xf
c0014ad5:	7f 29                	jg     c0014b00 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014ad7:	0f b6 9b a0 d8 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd2760]
c0014ade:	eb ac                	jmp    c0014a8c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014ae0:	8d 04 82             	lea    eax,[edx+eax*4]
c0014ae3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014ae7:	8d 04 86             	lea    eax,[esi+eax*4]
c0014aea:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014af0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014af4:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014afa:	89 d8                	mov    eax,ebx
c0014afc:	5a                   	pop    edx
c0014afd:	5b                   	pop    ebx
c0014afe:	5e                   	pop    esi
c0014aff:	c3                   	ret    
c0014b00:	83 ec 0c             	sub    esp,0xc
c0014b03:	68 a0 af 02 c0       	push   0xc002afa0
c0014b08:	e8 16 5b 00 00       	call   c001a623 <Krnl::panic(char const*)>
c0014b0d:	83 c4 10             	add    esp,0x10
c0014b10:	e9 77 ff ff ff       	jmp    c0014a8c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014b15:	90                   	nop

c0014b16 <InterruptController::clearAllHandlers(int, bool)>:
c0014b16:	56                   	push   esi
c0014b17:	53                   	push   ebx
c0014b18:	52                   	push   edx
c0014b19:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014b1d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014b21:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014b26:	75 61                	jne    c0014b89 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014b28:	8d 46 20             	lea    eax,[esi+0x20]
c0014b2b:	c1 e6 04             	shl    esi,0x4
c0014b2e:	c1 e0 04             	shl    eax,0x4
c0014b31:	01 de                	add    esi,ebx
c0014b33:	01 d8                	add    eax,ebx
c0014b35:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014b3f:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014b49:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014b53:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014b5d:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014b67:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014b71:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014b7b:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014b85:	58                   	pop    eax
c0014b86:	5b                   	pop    ebx
c0014b87:	5e                   	pop    esi
c0014b88:	c3                   	ret    
c0014b89:	83 ec 0c             	sub    esp,0xc
c0014b8c:	53                   	push   ebx
c0014b8d:	e8 f2 fa ff ff       	call   c0014684 <Device::getName()>
c0014b92:	83 c4 10             	add    esp,0x10
c0014b95:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014b98:	75 8e                	jne    c0014b28 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014b9a:	83 fe 0f             	cmp    esi,0xf
c0014b9d:	7f 09                	jg     c0014ba8 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014b9f:	0f b6 b6 a0 d8 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd2760]
c0014ba6:	eb 80                	jmp    c0014b28 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014ba8:	83 ec 0c             	sub    esp,0xc
c0014bab:	68 14 b0 02 c0       	push   0xc002b014
c0014bb0:	e8 6e 5a 00 00       	call   c001a623 <Krnl::panic(char const*)>
c0014bb5:	83 c4 10             	add    esp,0x10
c0014bb8:	e9 6b ff ff ff       	jmp    c0014b28 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014bbd:	90                   	nop

c0014bbe <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014bbe:	56                   	push   esi
c0014bbf:	53                   	push   ebx
c0014bc0:	52                   	push   edx
c0014bc1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014bc5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014bc9:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014bce:	75 3a                	jne    c0014c0a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014bd0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014bd4:	8d 50 20             	lea    edx,[eax+0x20]
c0014bd7:	c1 e2 04             	shl    edx,0x4
c0014bda:	8d 04 16             	lea    eax,[esi+edx*1]
c0014bdd:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014be1:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014be7:	74 0b                	je     c0014bf4 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014be9:	83 c0 04             	add    eax,0x4
c0014bec:	39 d0                	cmp    eax,edx
c0014bee:	75 f1                	jne    c0014be1 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014bf0:	58                   	pop    eax
c0014bf1:	5b                   	pop    ebx
c0014bf2:	5e                   	pop    esi
c0014bf3:	c3                   	ret    
c0014bf4:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014bfe:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014c08:	eb df                	jmp    c0014be9 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014c0a:	83 ec 0c             	sub    esp,0xc
c0014c0d:	56                   	push   esi
c0014c0e:	e8 71 fa ff ff       	call   c0014684 <Device::getName()>
c0014c13:	83 c4 10             	add    esp,0x10
c0014c16:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014c19:	75 b5                	jne    c0014bd0 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014c1b:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014c20:	7f 11                	jg     c0014c33 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014c22:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014c26:	0f b6 80 a0 d8 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd2760]
c0014c2d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014c31:	eb 9d                	jmp    c0014bd0 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014c33:	83 ec 0c             	sub    esp,0xc
c0014c36:	68 14 b0 02 c0       	push   0xc002b014
c0014c3b:	e8 e3 59 00 00       	call   c001a623 <Krnl::panic(char const*)>
c0014c40:	83 c4 10             	add    esp,0x10
c0014c43:	eb 8b                	jmp    c0014bd0 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014c45 <nmiHandler(regs*, void*)>:
c0014c45:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c0014c4a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014c4e:	e9 39 a3 ff ff       	jmp    c000ef8c <Computer::handleNMI()>

c0014c53 <int_handler>:
c0014c53:	55                   	push   ebp
c0014c54:	57                   	push   edi
c0014c55:	56                   	push   esi
c0014c56:	53                   	push   ebx
c0014c57:	83 ec 0c             	sub    esp,0xc
c0014c5a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014c5e:	80 3d a4 11 03 c0 00 	cmp    BYTE PTR ds:0xc00311a4,0x0
c0014c65:	74 0b                	je     c0014c72 <int_handler+0x1f>
c0014c67:	fa                   	cli    
c0014c68:	f4                   	hlt    
c0014c69:	80 3d a4 11 03 c0 00 	cmp    BYTE PTR ds:0xc00311a4,0x0
c0014c70:	75 f5                	jne    c0014c67 <int_handler+0x14>
c0014c72:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c0014c77:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014c7a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014c80:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014c86:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014c89:	83 f8 17             	cmp    eax,0x17
c0014c8c:	77 13                	ja     c0014ca1 <int_handler+0x4e>
c0014c8e:	83 ec 08             	sub    esp,0x8
c0014c91:	8b 17                	mov    edx,DWORD PTR [edi]
c0014c93:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014c96:	0f b6 c0             	movzx  eax,al
c0014c99:	50                   	push   eax
c0014c9a:	57                   	push   edi
c0014c9b:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014c9e:	83 c4 10             	add    esp,0x10
c0014ca1:	83 c3 15             	add    ebx,0x15
c0014ca4:	c1 e3 04             	shl    ebx,0x4
c0014ca7:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014cab:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014cb2:	31 db                	xor    ebx,ebx
c0014cb4:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014cb8:	85 c0                	test   eax,eax
c0014cba:	74 13                	je     c0014ccf <int_handler+0x7c>
c0014cbc:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014cbf:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014cc3:	74 1c                	je     c0014ce1 <int_handler+0x8e>
c0014cc5:	83 ec 08             	sub    esp,0x8
c0014cc8:	52                   	push   edx
c0014cc9:	56                   	push   esi
c0014cca:	ff d0                	call   eax
c0014ccc:	83 c4 10             	add    esp,0x10
c0014ccf:	43                   	inc    ebx
c0014cd0:	83 fb 04             	cmp    ebx,0x4
c0014cd3:	75 df                	jne    c0014cb4 <int_handler+0x61>
c0014cd5:	83 c4 0c             	add    esp,0xc
c0014cd8:	31 c0                	xor    eax,eax
c0014cda:	5b                   	pop    ebx
c0014cdb:	31 d2                	xor    edx,edx
c0014cdd:	5e                   	pop    esi
c0014cde:	5f                   	pop    edi
c0014cdf:	5d                   	pop    ebp
c0014ce0:	c3                   	ret    
c0014ce1:	83 ec 08             	sub    esp,0x8
c0014ce4:	52                   	push   edx
c0014ce5:	56                   	push   esi
c0014ce6:	ff d0                	call   eax
c0014ce8:	83 c4 10             	add    esp,0x10
c0014ceb:	83 c4 0c             	add    esp,0xc
c0014cee:	5b                   	pop    ebx
c0014cef:	5e                   	pop    esi
c0014cf0:	5f                   	pop    edi
c0014cf1:	5d                   	pop    ebp
c0014cf2:	c3                   	ret    
c0014cf3:	90                   	nop

c0014cf4 <InterruptController::InterruptController(char const*)>:
c0014cf4:	83 ec 1c             	sub    esp,0x1c
c0014cf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014cfb:	83 ec 08             	sub    esp,0x8
c0014cfe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014d02:	50                   	push   eax
c0014d03:	e8 80 f8 ff ff       	call   c0014588 <Device::Device(char const*)>
c0014d08:	83 c4 10             	add    esp,0x10
c0014d0b:	ba bc b2 02 c0       	mov    edx,0xc002b2bc
c0014d10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d14:	89 10                	mov    DWORD PTR [eax],edx
c0014d16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d1a:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014d24:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014d2c:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014d34:	7f 5e                	jg     c0014d94 <InterruptController::InterruptController(char const*)+0xa0>
c0014d36:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014d3e:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014d43:	7f 49                	jg     c0014d8e <InterruptController::InterruptController(char const*)+0x9a>
c0014d45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014d4d:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014d54:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014d58:	01 ca                	add    edx,ecx
c0014d5a:	83 c2 54             	add    edx,0x54
c0014d5d:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014d65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d69:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014d6d:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014d74:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014d78:	01 ca                	add    edx,ecx
c0014d7a:	81 c2 54 04 00 00    	add    edx,0x454
c0014d80:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014d88:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014d8c:	eb b0                	jmp    c0014d3e <InterruptController::InterruptController(char const*)+0x4a>
c0014d8e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014d92:	eb 98                	jmp    c0014d2c <InterruptController::InterruptController(char const*)+0x38>
c0014d94:	90                   	nop
c0014d95:	83 c4 1c             	add    esp,0x1c
c0014d98:	c3                   	ret    
c0014d99:	90                   	nop

c0014d9a <InterruptController::~InterruptController()>:
c0014d9a:	83 ec 0c             	sub    esp,0xc
c0014d9d:	ba bc b2 02 c0       	mov    edx,0xc002b2bc
c0014da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014da6:	89 10                	mov    DWORD PTR [eax],edx
c0014da8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014dac:	83 ec 0c             	sub    esp,0xc
c0014daf:	50                   	push   eax
c0014db0:	e8 b5 f4 ff ff       	call   c001426a <Device::~Device()>
c0014db5:	83 c4 10             	add    esp,0x10
c0014db8:	90                   	nop
c0014db9:	83 c4 0c             	add    esp,0xc
c0014dbc:	c3                   	ret    
c0014dbd:	90                   	nop

c0014dbe <InterruptController::~InterruptController()>:
c0014dbe:	83 ec 0c             	sub    esp,0xc
c0014dc1:	83 ec 0c             	sub    esp,0xc
c0014dc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014dc8:	e8 cd ff ff ff       	call   c0014d9a <InterruptController::~InterruptController()>
c0014dcd:	83 c4 10             	add    esp,0x10
c0014dd0:	83 ec 08             	sub    esp,0x8
c0014dd3:	68 58 21 00 00       	push   0x2158
c0014dd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ddc:	e8 b0 e0 ff ff       	call   c0012e91 <operator delete(void*, unsigned long)>
c0014de1:	83 c4 10             	add    esp,0x10
c0014de4:	83 c4 0c             	add    esp,0xc
c0014de7:	c3                   	ret    

c0014de8 <displayDebugInfo(regs*)>:
c0014de8:	55                   	push   ebp
c0014de9:	57                   	push   edi
c0014dea:	56                   	push   esi
c0014deb:	53                   	push   ebx
c0014dec:	83 ec 24             	sub    esp,0x24
c0014def:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014df3:	0f 20 c2             	mov    edx,cr0
c0014df6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014dfa:	0f 20 d7             	mov    edi,cr2
c0014dfd:	0f 20 de             	mov    esi,cr3
c0014e00:	0f 20 e5             	mov    ebp,cr4
c0014e03:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014e06:	68 4e b0 02 c0       	push   0xc002b04e
c0014e0b:	e8 61 e1 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0014e10:	59                   	pop    ecx
c0014e11:	58                   	pop    eax
c0014e12:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014e15:	68 59 b0 02 c0       	push   0xc002b059
c0014e1a:	e8 52 e1 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0014e1f:	58                   	pop    eax
c0014e20:	5a                   	pop    edx
c0014e21:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014e24:	68 64 b0 02 c0       	push   0xc002b064
c0014e29:	e8 43 e1 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0014e2e:	59                   	pop    ecx
c0014e2f:	58                   	pop    eax
c0014e30:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014e33:	68 6f b0 02 c0       	push   0xc002b06f
c0014e38:	e8 34 e1 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0014e3d:	58                   	pop    eax
c0014e3e:	5a                   	pop    edx
c0014e3f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014e42:	68 7a b0 02 c0       	push   0xc002b07a
c0014e47:	e8 25 e1 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0014e4c:	59                   	pop    ecx
c0014e4d:	58                   	pop    eax
c0014e4e:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014e51:	68 85 b0 02 c0       	push   0xc002b085
c0014e56:	e8 16 e1 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0014e5b:	58                   	pop    eax
c0014e5c:	5a                   	pop    edx
c0014e5d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014e60:	68 90 b0 02 c0       	push   0xc002b090
c0014e65:	e8 07 e1 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0014e6a:	59                   	pop    ecx
c0014e6b:	58                   	pop    eax
c0014e6c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014e6f:	68 9b b0 02 c0       	push   0xc002b09b
c0014e74:	e8 f8 e0 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0014e79:	58                   	pop    eax
c0014e7a:	5a                   	pop    edx
c0014e7b:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014e7e:	68 a6 b0 02 c0       	push   0xc002b0a6
c0014e83:	e8 e9 e0 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0014e88:	59                   	pop    ecx
c0014e89:	58                   	pop    eax
c0014e8a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014e8d:	68 b5 b0 02 c0       	push   0xc002b0b5
c0014e92:	e8 da e0 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0014e97:	58                   	pop    eax
c0014e98:	5a                   	pop    edx
c0014e99:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014e9c:	68 c0 b0 02 c0       	push   0xc002b0c0
c0014ea1:	e8 cb e0 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0014ea6:	59                   	pop    ecx
c0014ea7:	58                   	pop    eax
c0014ea8:	57                   	push   edi
c0014ea9:	68 cb b0 02 c0       	push   0xc002b0cb
c0014eae:	e8 be e0 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0014eb3:	58                   	pop    eax
c0014eb4:	5a                   	pop    edx
c0014eb5:	56                   	push   esi
c0014eb6:	68 d6 b0 02 c0       	push   0xc002b0d6
c0014ebb:	e8 b1 e0 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0014ec0:	59                   	pop    ecx
c0014ec1:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c0014ec6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ecc:	e8 84 be ff ff       	call   c0010d55 <setActiveTerminal(VgaText*)>
c0014ed1:	58                   	pop    eax
c0014ed2:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014ed5:	5a                   	pop    edx
c0014ed6:	c1 e0 05             	shl    eax,0x5
c0014ed9:	05 00 d6 02 c0       	add    eax,0xc002d600
c0014ede:	50                   	push   eax
c0014edf:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c0014ee4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014eea:	e8 85 c2 ff ff       	call   c0011174 <VgaText::puts(char const*)>
c0014eef:	59                   	pop    ecx
c0014ef0:	58                   	pop    eax
c0014ef1:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c0014ef6:	68 e1 b0 02 c0       	push   0xc002b0e1
c0014efb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f01:	e8 6e c2 ff ff       	call   c0011174 <VgaText::puts(char const*)>
c0014f06:	58                   	pop    eax
c0014f07:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014f0c:	5a                   	pop    edx
c0014f0d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014f10:	83 c0 0c             	add    eax,0xc
c0014f13:	50                   	push   eax
c0014f14:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c0014f19:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f1f:	e8 50 c2 ff ff       	call   c0011174 <VgaText::puts(char const*)>
c0014f24:	59                   	pop    ecx
c0014f25:	58                   	pop    eax
c0014f26:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c0014f2b:	68 ea b0 02 c0       	push   0xc002b0ea
c0014f30:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f36:	e8 39 c2 ff ff       	call   c0011174 <VgaText::puts(char const*)>
c0014f3b:	58                   	pop    eax
c0014f3c:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c0014f41:	5a                   	pop    edx
c0014f42:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014f45:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f4b:	e8 4a c2 ff ff       	call   c001119a <VgaText::putx(unsigned int)>
c0014f50:	59                   	pop    ecx
c0014f51:	58                   	pop    eax
c0014f52:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c0014f57:	68 f2 b0 02 c0       	push   0xc002b0f2
c0014f5c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f62:	e8 0d c2 ff ff       	call   c0011174 <VgaText::puts(char const*)>
c0014f67:	58                   	pop    eax
c0014f68:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c0014f6d:	5a                   	pop    edx
c0014f6e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014f71:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f77:	e8 1e c2 ff ff       	call   c001119a <VgaText::putx(unsigned int)>
c0014f7c:	59                   	pop    ecx
c0014f7d:	58                   	pop    eax
c0014f7e:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c0014f83:	68 fa b0 02 c0       	push   0xc002b0fa
c0014f88:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f8e:	e8 e1 c1 ff ff       	call   c0011174 <VgaText::puts(char const*)>
c0014f93:	58                   	pop    eax
c0014f94:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c0014f99:	5a                   	pop    edx
c0014f9a:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014f9d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fa3:	e8 f2 c1 ff ff       	call   c001119a <VgaText::putx(unsigned int)>
c0014fa8:	59                   	pop    ecx
c0014fa9:	58                   	pop    eax
c0014faa:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c0014faf:	68 02 b1 02 c0       	push   0xc002b102
c0014fb4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fba:	e8 b5 c1 ff ff       	call   c0011174 <VgaText::puts(char const*)>
c0014fbf:	58                   	pop    eax
c0014fc0:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c0014fc5:	5a                   	pop    edx
c0014fc6:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014fc9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fcf:	e8 c6 c1 ff ff       	call   c001119a <VgaText::putx(unsigned int)>
c0014fd4:	59                   	pop    ecx
c0014fd5:	58                   	pop    eax
c0014fd6:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c0014fdb:	68 0a b1 02 c0       	push   0xc002b10a
c0014fe0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fe6:	e8 89 c1 ff ff       	call   c0011174 <VgaText::puts(char const*)>
c0014feb:	58                   	pop    eax
c0014fec:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c0014ff1:	5a                   	pop    edx
c0014ff2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014ff5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ffb:	e8 9a c1 ff ff       	call   c001119a <VgaText::putx(unsigned int)>
c0015000:	59                   	pop    ecx
c0015001:	58                   	pop    eax
c0015002:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c0015007:	68 12 b1 02 c0       	push   0xc002b112
c001500c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015012:	e8 5d c1 ff ff       	call   c0011174 <VgaText::puts(char const*)>
c0015017:	58                   	pop    eax
c0015018:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001501d:	5a                   	pop    edx
c001501e:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0015021:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015027:	e8 6e c1 ff ff       	call   c001119a <VgaText::putx(unsigned int)>
c001502c:	59                   	pop    ecx
c001502d:	58                   	pop    eax
c001502e:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c0015033:	68 1a b1 02 c0       	push   0xc002b11a
c0015038:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001503e:	e8 31 c1 ff ff       	call   c0011174 <VgaText::puts(char const*)>
c0015043:	58                   	pop    eax
c0015044:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c0015049:	5a                   	pop    edx
c001504a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001504e:	52                   	push   edx
c001504f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015055:	e8 40 c1 ff ff       	call   c001119a <VgaText::putx(unsigned int)>
c001505a:	59                   	pop    ecx
c001505b:	58                   	pop    eax
c001505c:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c0015061:	68 23 b1 02 c0       	push   0xc002b123
c0015066:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001506c:	e8 03 c1 ff ff       	call   c0011174 <VgaText::puts(char const*)>
c0015071:	58                   	pop    eax
c0015072:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c0015077:	5a                   	pop    edx
c0015078:	57                   	push   edi
c0015079:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001507f:	e8 16 c1 ff ff       	call   c001119a <VgaText::putx(unsigned int)>
c0015084:	59                   	pop    ecx
c0015085:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001508a:	5f                   	pop    edi
c001508b:	68 2b b1 02 c0       	push   0xc002b12b
c0015090:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015096:	e8 d9 c0 ff ff       	call   c0011174 <VgaText::puts(char const*)>
c001509b:	58                   	pop    eax
c001509c:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c00150a1:	5a                   	pop    edx
c00150a2:	56                   	push   esi
c00150a3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150a9:	e8 ec c0 ff ff       	call   c001119a <VgaText::putx(unsigned int)>
c00150ae:	59                   	pop    ecx
c00150af:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c00150b4:	5e                   	pop    esi
c00150b5:	68 33 b1 02 c0       	push   0xc002b133
c00150ba:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150c0:	e8 af c0 ff ff       	call   c0011174 <VgaText::puts(char const*)>
c00150c5:	5f                   	pop    edi
c00150c6:	58                   	pop    eax
c00150c7:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c00150cc:	55                   	push   ebp
c00150cd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150d3:	e8 c2 c0 ff ff       	call   c001119a <VgaText::putx(unsigned int)>
c00150d8:	58                   	pop    eax
c00150d9:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c00150de:	5a                   	pop    edx
c00150df:	68 3b b1 02 c0       	push   0xc002b13b
c00150e4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150ea:	e8 85 c0 ff ff       	call   c0011174 <VgaText::puts(char const*)>
c00150ef:	0f 21 c0             	mov    eax,db0
c00150f2:	59                   	pop    ecx
c00150f3:	5e                   	pop    esi
c00150f4:	50                   	push   eax
c00150f5:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c00150fa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015100:	e8 95 c0 ff ff       	call   c001119a <VgaText::putx(unsigned int)>
c0015105:	5f                   	pop    edi
c0015106:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001510b:	5d                   	pop    ebp
c001510c:	68 44 b1 02 c0       	push   0xc002b144
c0015111:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015117:	e8 58 c0 ff ff       	call   c0011174 <VgaText::puts(char const*)>
c001511c:	0f 21 c8             	mov    eax,db1
c001511f:	5a                   	pop    edx
c0015120:	59                   	pop    ecx
c0015121:	50                   	push   eax
c0015122:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c0015127:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001512d:	e8 68 c0 ff ff       	call   c001119a <VgaText::putx(unsigned int)>
c0015132:	5e                   	pop    esi
c0015133:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c0015138:	5f                   	pop    edi
c0015139:	68 4c b1 02 c0       	push   0xc002b14c
c001513e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015144:	e8 2b c0 ff ff       	call   c0011174 <VgaText::puts(char const*)>
c0015149:	0f 21 d0             	mov    eax,db2
c001514c:	5d                   	pop    ebp
c001514d:	5a                   	pop    edx
c001514e:	50                   	push   eax
c001514f:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c0015154:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001515a:	e8 3b c0 ff ff       	call   c001119a <VgaText::putx(unsigned int)>
c001515f:	59                   	pop    ecx
c0015160:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c0015165:	5e                   	pop    esi
c0015166:	68 54 b1 02 c0       	push   0xc002b154
c001516b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015171:	e8 fe bf ff ff       	call   c0011174 <VgaText::puts(char const*)>
c0015176:	0f 21 d8             	mov    eax,db3
c0015179:	5f                   	pop    edi
c001517a:	5d                   	pop    ebp
c001517b:	50                   	push   eax
c001517c:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c0015181:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015187:	e8 0e c0 ff ff       	call   c001119a <VgaText::putx(unsigned int)>
c001518c:	58                   	pop    eax
c001518d:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c0015192:	5a                   	pop    edx
c0015193:	68 5c b1 02 c0       	push   0xc002b15c
c0015198:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001519e:	e8 d1 bf ff ff       	call   c0011174 <VgaText::puts(char const*)>
c00151a3:	0f 21 f0             	mov    eax,db6
c00151a6:	59                   	pop    ecx
c00151a7:	5e                   	pop    esi
c00151a8:	50                   	push   eax
c00151a9:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c00151ae:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151b4:	e8 e1 bf ff ff       	call   c001119a <VgaText::putx(unsigned int)>
c00151b9:	5f                   	pop    edi
c00151ba:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c00151bf:	5d                   	pop    ebp
c00151c0:	68 64 b1 02 c0       	push   0xc002b164
c00151c5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151cb:	e8 a4 bf ff ff       	call   c0011174 <VgaText::puts(char const*)>
c00151d0:	0f 21 f8             	mov    eax,db7
c00151d3:	5a                   	pop    edx
c00151d4:	59                   	pop    ecx
c00151d5:	50                   	push   eax
c00151d6:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c00151db:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151e1:	e8 b4 bf ff ff       	call   c001119a <VgaText::putx(unsigned int)>
c00151e6:	5e                   	pop    esi
c00151e7:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00151ea:	e8 60 85 00 00       	call   c001d74f <Thr::getDriverNameFromAddress(unsigned long)>
c00151ef:	83 c4 10             	add    esp,0x10
c00151f2:	85 c0                	test   eax,eax
c00151f4:	74 7d                	je     c0015273 <displayDebugInfo(regs*)+0x48b>
c00151f6:	89 c6                	mov    esi,eax
c00151f8:	50                   	push   eax
c00151f9:	50                   	push   eax
c00151fa:	56                   	push   esi
c00151fb:	68 6c b1 02 c0       	push   0xc002b16c
c0015200:	e8 6c dd ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0015205:	5a                   	pop    edx
c0015206:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001520b:	59                   	pop    ecx
c001520c:	68 7a b1 02 c0       	push   0xc002b17a
c0015211:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015217:	e8 58 bf ff ff       	call   c0011174 <VgaText::puts(char const*)>
c001521c:	5f                   	pop    edi
c001521d:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c0015222:	5d                   	pop    ebp
c0015223:	56                   	push   esi
c0015224:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001522a:	e8 45 bf ff ff       	call   c0011174 <VgaText::puts(char const*)>
c001522f:	58                   	pop    eax
c0015230:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c0015235:	5a                   	pop    edx
c0015236:	68 86 b1 02 c0       	push   0xc002b186
c001523b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015241:	e8 2e bf ff ff       	call   c0011174 <VgaText::puts(char const*)>
c0015246:	59                   	pop    ecx
c0015247:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001524c:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c0015252:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0015255:	e8 2c 85 00 00       	call   c001d786 <Thr::getDriverOffsetFromAddress(unsigned long)>
c001525a:	5b                   	pop    ebx
c001525b:	5d                   	pop    ebp
c001525c:	50                   	push   eax
c001525d:	57                   	push   edi
c001525e:	e8 37 bf ff ff       	call   c001119a <VgaText::putx(unsigned int)>
c0015263:	58                   	pop    eax
c0015264:	5a                   	pop    edx
c0015265:	56                   	push   esi
c0015266:	68 92 b1 02 c0       	push   0xc002b192
c001526b:	e8 01 dd ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0015270:	83 c4 10             	add    esp,0x10
c0015273:	fa                   	cli    
c0015274:	f4                   	hlt    
c0015275:	eb fe                	jmp    c0015275 <displayDebugInfo(regs*)+0x48d>

c0015277 <x87EmulHandler(regs*, void*)>:
c0015277:	53                   	push   ebx
c0015278:	83 ec 14             	sub    esp,0x14
c001527b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001527f:	53                   	push   ebx
c0015280:	e8 57 a8 00 00       	call   c001fadc <Vm::x87Handler(regs*)>
c0015285:	83 c4 10             	add    esp,0x10
c0015288:	84 c0                	test   al,al
c001528a:	74 05                	je     c0015291 <x87EmulHandler(regs*, void*)+0x1a>
c001528c:	83 c4 08             	add    esp,0x8
c001528f:	5b                   	pop    ebx
c0015290:	c3                   	ret    
c0015291:	83 ec 0c             	sub    esp,0xc
c0015294:	68 a2 b1 02 c0       	push   0xc002b1a2
c0015299:	e8 d3 dc ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001529e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00152a1:	e8 42 fb ff ff       	call   c0014de8 <displayDebugInfo(regs*)>

c00152a6 <gpFault(regs*, void*)>:
c00152a6:	53                   	push   ebx
c00152a7:	83 ec 14             	sub    esp,0x14
c00152aa:	c7 05 f4 e7 02 c0 59 ee 01 c0 	mov    DWORD PTR ds:0xc002e7f4,0xc001ee59
c00152b4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00152b8:	53                   	push   ebx
c00152b9:	e8 9b 9b 00 00       	call   c001ee59 <Vm::faultHandler(regs*)>
c00152be:	83 c4 10             	add    esp,0x10
c00152c1:	84 c0                	test   al,al
c00152c3:	74 05                	je     c00152ca <gpFault(regs*, void*)+0x24>
c00152c5:	83 c4 08             	add    esp,0x8
c00152c8:	5b                   	pop    ebx
c00152c9:	c3                   	ret    
c00152ca:	83 ec 0c             	sub    esp,0xc
c00152cd:	68 b8 b1 02 c0       	push   0xc002b1b8
c00152d2:	e8 9a dc ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c00152d7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00152da:	e8 09 fb ff ff       	call   c0014de8 <displayDebugInfo(regs*)>

c00152df <pgFault(regs*, void*)>:
c00152df:	53                   	push   ebx
c00152e0:	83 ec 14             	sub    esp,0x14
c00152e3:	68 d3 b1 02 c0       	push   0xc002b1d3
c00152e8:	e8 84 dc ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c00152ed:	0f 20 d3             	mov    ebx,cr2
c00152f0:	58                   	pop    eax
c00152f1:	5a                   	pop    edx
c00152f2:	53                   	push   ebx
c00152f3:	68 e0 b1 02 c0       	push   0xc002b1e0
c00152f8:	e8 74 dc ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c00152fd:	59                   	pop    ecx
c00152fe:	58                   	pop    eax
c00152ff:	53                   	push   ebx
c0015300:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015305:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015308:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001530e:	e8 03 d8 ff ff       	call   c0012b16 <VAS::tryLoadBackOffDisk(unsigned long)>
c0015313:	83 c4 10             	add    esp,0x10
c0015316:	84 c0                	test   al,al
c0015318:	74 05                	je     c001531f <pgFault(regs*, void*)+0x40>
c001531a:	83 c4 08             	add    esp,0x8
c001531d:	5b                   	pop    ebx
c001531e:	c3                   	ret    
c001531f:	83 ec 0c             	sub    esp,0xc
c0015322:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015326:	e8 bd fa ff ff       	call   c0014de8 <displayDebugInfo(regs*)>

c001532b <otherISRHandler(regs*, void*)>:
c001532b:	53                   	push   ebx
c001532c:	83 ec 0c             	sub    esp,0xc
c001532f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015333:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0015336:	50                   	push   eax
c0015337:	50                   	push   eax
c0015338:	68 ec b1 02 c0       	push   0xc002b1ec
c001533d:	e8 2f dc ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0015342:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015345:	e8 9e fa ff ff       	call   c0014de8 <displayDebugInfo(regs*)>

c001534a <opcodeFault(regs*, void*)>:
c001534a:	55                   	push   ebp
c001534b:	89 e5                	mov    ebp,esp
c001534d:	56                   	push   esi
c001534e:	53                   	push   ebx
c001534f:	83 ec 40             	sub    esp,0x40
c0015352:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c0015357:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001535d:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0015363:	84 c0                	test   al,al
c0015365:	74 24                	je     c001538b <opcodeFault(regs*, void*)+0x41>
c0015367:	83 ec 0c             	sub    esp,0xc
c001536a:	68 0c b2 02 c0       	push   0xc002b20c
c001536f:	e8 fd db ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0015374:	83 c4 10             	add    esp,0x10
c0015377:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001537a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001537d:	8d 50 19             	lea    edx,[eax+0x19]
c0015380:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015383:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015386:	e9 be 05 00 00       	jmp    c0015949 <opcodeFault(regs*, void*)+0x5ff>
c001538b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001538e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015391:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015394:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0015398:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c001539c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001539f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153a2:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00153a5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153a8:	8a 00                	mov    al,BYTE PTR [eax]
c00153aa:	3c f0                	cmp    al,0xf0
c00153ac:	75 17                	jne    c00153c5 <opcodeFault(regs*, void*)+0x7b>
c00153ae:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153b4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153b7:	8d 50 01             	lea    edx,[eax+0x1]
c00153ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153bd:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153c0:	e9 da 00 00 00       	jmp    c001549f <opcodeFault(regs*, void*)+0x155>
c00153c5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153c8:	8a 00                	mov    al,BYTE PTR [eax]
c00153ca:	3c f2                	cmp    al,0xf2
c00153cc:	74 09                	je     c00153d7 <opcodeFault(regs*, void*)+0x8d>
c00153ce:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153d1:	8a 00                	mov    al,BYTE PTR [eax]
c00153d3:	3c f3                	cmp    al,0xf3
c00153d5:	75 1b                	jne    c00153f2 <opcodeFault(regs*, void*)+0xa8>
c00153d7:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153db:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153e1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153e4:	8d 50 01             	lea    edx,[eax+0x1]
c00153e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153ea:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153ed:	e9 ad 00 00 00       	jmp    c001549f <opcodeFault(regs*, void*)+0x155>
c00153f2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153f5:	8a 00                	mov    al,BYTE PTR [eax]
c00153f7:	3c 66                	cmp    al,0x66
c00153f9:	75 1f                	jne    c001541a <opcodeFault(regs*, void*)+0xd0>
c00153fb:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153ff:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0015403:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015406:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015409:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001540c:	8d 50 01             	lea    edx,[eax+0x1]
c001540f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015412:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015415:	e9 85 00 00 00       	jmp    c001549f <opcodeFault(regs*, void*)+0x155>
c001541a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001541d:	8a 00                	mov    al,BYTE PTR [eax]
c001541f:	3c 67                	cmp    al,0x67
c0015421:	75 18                	jne    c001543b <opcodeFault(regs*, void*)+0xf1>
c0015423:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015427:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001542a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001542d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015430:	8d 50 01             	lea    edx,[eax+0x1]
c0015433:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015436:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015439:	eb 64                	jmp    c001549f <opcodeFault(regs*, void*)+0x155>
c001543b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001543e:	8a 00                	mov    al,BYTE PTR [eax]
c0015440:	3c 2e                	cmp    al,0x2e
c0015442:	74 09                	je     c001544d <opcodeFault(regs*, void*)+0x103>
c0015444:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015447:	8a 00                	mov    al,BYTE PTR [eax]
c0015449:	3c 3e                	cmp    al,0x3e
c001544b:	75 18                	jne    c0015465 <opcodeFault(regs*, void*)+0x11b>
c001544d:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015451:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015454:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015457:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001545a:	8d 50 01             	lea    edx,[eax+0x1]
c001545d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015460:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015463:	eb 3a                	jmp    c001549f <opcodeFault(regs*, void*)+0x155>
c0015465:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015468:	8a 00                	mov    al,BYTE PTR [eax]
c001546a:	3c 36                	cmp    al,0x36
c001546c:	74 1b                	je     c0015489 <opcodeFault(regs*, void*)+0x13f>
c001546e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015471:	8a 00                	mov    al,BYTE PTR [eax]
c0015473:	3c 26                	cmp    al,0x26
c0015475:	74 12                	je     c0015489 <opcodeFault(regs*, void*)+0x13f>
c0015477:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001547a:	8a 00                	mov    al,BYTE PTR [eax]
c001547c:	3c 64                	cmp    al,0x64
c001547e:	74 09                	je     c0015489 <opcodeFault(regs*, void*)+0x13f>
c0015480:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015483:	8a 00                	mov    al,BYTE PTR [eax]
c0015485:	3c 65                	cmp    al,0x65
c0015487:	75 16                	jne    c001549f <opcodeFault(regs*, void*)+0x155>
c0015489:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001548d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015490:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015493:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015496:	8d 50 01             	lea    edx,[eax+0x1]
c0015499:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001549c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001549f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154a2:	8a 00                	mov    al,BYTE PTR [eax]
c00154a4:	3c 0f                	cmp    al,0xf
c00154a6:	0f 85 ad 00 00 00    	jne    c0015559 <opcodeFault(regs*, void*)+0x20f>
c00154ac:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154af:	40                   	inc    eax
c00154b0:	8a 00                	mov    al,BYTE PTR [eax]
c00154b2:	3c c2                	cmp    al,0xc2
c00154b4:	74 0e                	je     c00154c4 <opcodeFault(regs*, void*)+0x17a>
c00154b6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154b9:	40                   	inc    eax
c00154ba:	8a 00                	mov    al,BYTE PTR [eax]
c00154bc:	3c c3                	cmp    al,0xc3
c00154be:	0f 85 95 00 00 00    	jne    c0015559 <opcodeFault(regs*, void*)+0x20f>
c00154c4:	83 ec 0c             	sub    esp,0xc
c00154c7:	68 2f b2 02 c0       	push   0xc002b22f
c00154cc:	e8 a0 da ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c00154d1:	83 c4 10             	add    esp,0x10
c00154d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154d7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154da:	8d 50 01             	lea    edx,[eax+0x1]
c00154dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154e0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154e3:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00154e6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154e9:	8a 00                	mov    al,BYTE PTR [eax]
c00154eb:	8d 50 fe             	lea    edx,[eax-0x2]
c00154ee:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154f1:	88 10                	mov    BYTE PTR [eax],dl
c00154f3:	8d 45 c2             	lea    eax,[ebp-0x3e]
c00154f6:	50                   	push   eax
c00154f7:	8d 45 c3             	lea    eax,[ebp-0x3d]
c00154fa:	50                   	push   eax
c00154fb:	8d 45 c4             	lea    eax,[ebp-0x3c]
c00154fe:	50                   	push   eax
c00154ff:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015502:	e8 e3 47 00 00       	call   c0019cea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015507:	83 c4 10             	add    esp,0x10
c001550a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001550d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015510:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015513:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0015516:	01 d0                	add    eax,edx
c0015518:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001551b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001551e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015521:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015524:	48                   	dec    eax
c0015525:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0015528:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001552b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001552e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015531:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015534:	83 ec 04             	sub    esp,0x4
c0015537:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001553a:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c001553d:	50                   	push   eax
c001553e:	e8 71 ac fe ff       	call   c00001b4 <voodooXADD>
c0015543:	83 c4 10             	add    esp,0x10
c0015546:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0015549:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001554c:	01 c2                	add    edx,eax
c001554e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015551:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015554:	e9 f0 03 00 00       	jmp    c0015949 <opcodeFault(regs*, void*)+0x5ff>
c0015559:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001555c:	8a 00                	mov    al,BYTE PTR [eax]
c001555e:	3c 0f                	cmp    al,0xf
c0015560:	0f 85 8b 01 00 00    	jne    c00156f1 <opcodeFault(regs*, void*)+0x3a7>
c0015566:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015569:	40                   	inc    eax
c001556a:	8a 00                	mov    al,BYTE PTR [eax]
c001556c:	3c c7                	cmp    al,0xc7
c001556e:	0f 86 7d 01 00 00    	jbe    c00156f1 <opcodeFault(regs*, void*)+0x3a7>
c0015574:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015577:	40                   	inc    eax
c0015578:	8a 00                	mov    al,BYTE PTR [eax]
c001557a:	3c cf                	cmp    al,0xcf
c001557c:	0f 87 6f 01 00 00    	ja     c00156f1 <opcodeFault(regs*, void*)+0x3a7>
c0015582:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015585:	40                   	inc    eax
c0015586:	8a 00                	mov    al,BYTE PTR [eax]
c0015588:	83 c0 38             	add    eax,0x38
c001558b:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001558e:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0015592:	75 0b                	jne    c001559f <opcodeFault(regs*, void*)+0x255>
c0015594:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015597:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001559a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001559d:	eb 75                	jmp    c0015614 <opcodeFault(regs*, void*)+0x2ca>
c001559f:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00155a3:	75 0b                	jne    c00155b0 <opcodeFault(regs*, void*)+0x266>
c00155a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155a8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00155ab:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155ae:	eb 64                	jmp    c0015614 <opcodeFault(regs*, void*)+0x2ca>
c00155b0:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00155b4:	75 0b                	jne    c00155c1 <opcodeFault(regs*, void*)+0x277>
c00155b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155b9:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00155bc:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155bf:	eb 53                	jmp    c0015614 <opcodeFault(regs*, void*)+0x2ca>
c00155c1:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00155c5:	75 0b                	jne    c00155d2 <opcodeFault(regs*, void*)+0x288>
c00155c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155ca:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00155cd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155d0:	eb 42                	jmp    c0015614 <opcodeFault(regs*, void*)+0x2ca>
c00155d2:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00155d6:	75 0b                	jne    c00155e3 <opcodeFault(regs*, void*)+0x299>
c00155d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155db:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00155de:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155e1:	eb 31                	jmp    c0015614 <opcodeFault(regs*, void*)+0x2ca>
c00155e3:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00155e7:	75 0b                	jne    c00155f4 <opcodeFault(regs*, void*)+0x2aa>
c00155e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155ec:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00155ef:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155f2:	eb 20                	jmp    c0015614 <opcodeFault(regs*, void*)+0x2ca>
c00155f4:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00155f8:	75 0b                	jne    c0015605 <opcodeFault(regs*, void*)+0x2bb>
c00155fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155fd:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015600:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015603:	eb 0f                	jmp    c0015614 <opcodeFault(regs*, void*)+0x2ca>
c0015605:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0015609:	75 09                	jne    c0015614 <opcodeFault(regs*, void*)+0x2ca>
c001560b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001560e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015611:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015614:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0015618:	74 10                	je     c001562a <opcodeFault(regs*, void*)+0x2e0>
c001561a:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0015621:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0015628:	eb 2d                	jmp    c0015657 <opcodeFault(regs*, void*)+0x30d>
c001562a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001562d:	c1 e0 18             	shl    eax,0x18
c0015630:	89 c2                	mov    edx,eax
c0015632:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015635:	c1 e0 08             	shl    eax,0x8
c0015638:	25 00 00 ff 00       	and    eax,0xff0000
c001563d:	09 c2                	or     edx,eax
c001563f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015642:	c1 e8 08             	shr    eax,0x8
c0015645:	25 00 ff 00 00       	and    eax,0xff00
c001564a:	09 c2                	or     edx,eax
c001564c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001564f:	c1 e8 18             	shr    eax,0x18
c0015652:	09 d0                	or     eax,edx
c0015654:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015657:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c001565b:	75 0b                	jne    c0015668 <opcodeFault(regs*, void*)+0x31e>
c001565d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015660:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015663:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015666:	eb 75                	jmp    c00156dd <opcodeFault(regs*, void*)+0x393>
c0015668:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001566c:	75 0b                	jne    c0015679 <opcodeFault(regs*, void*)+0x32f>
c001566e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015671:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015674:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0015677:	eb 64                	jmp    c00156dd <opcodeFault(regs*, void*)+0x393>
c0015679:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c001567d:	75 0b                	jne    c001568a <opcodeFault(regs*, void*)+0x340>
c001567f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015682:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015685:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015688:	eb 53                	jmp    c00156dd <opcodeFault(regs*, void*)+0x393>
c001568a:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c001568e:	75 0b                	jne    c001569b <opcodeFault(regs*, void*)+0x351>
c0015690:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015693:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015696:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0015699:	eb 42                	jmp    c00156dd <opcodeFault(regs*, void*)+0x393>
c001569b:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c001569f:	75 0b                	jne    c00156ac <opcodeFault(regs*, void*)+0x362>
c00156a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156a4:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00156a7:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00156aa:	eb 31                	jmp    c00156dd <opcodeFault(regs*, void*)+0x393>
c00156ac:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00156b0:	75 0b                	jne    c00156bd <opcodeFault(regs*, void*)+0x373>
c00156b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156b5:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00156b8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00156bb:	eb 20                	jmp    c00156dd <opcodeFault(regs*, void*)+0x393>
c00156bd:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00156c1:	75 0b                	jne    c00156ce <opcodeFault(regs*, void*)+0x384>
c00156c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156c6:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00156c9:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00156cc:	eb 0f                	jmp    c00156dd <opcodeFault(regs*, void*)+0x393>
c00156ce:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00156d2:	75 09                	jne    c00156dd <opcodeFault(regs*, void*)+0x393>
c00156d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156d7:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00156da:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00156dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156e0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00156e3:	8d 50 02             	lea    edx,[eax+0x2]
c00156e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156e9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00156ec:	e9 58 02 00 00       	jmp    c0015949 <opcodeFault(regs*, void*)+0x5ff>
c00156f1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156f4:	8a 00                	mov    al,BYTE PTR [eax]
c00156f6:	3c 0f                	cmp    al,0xf
c00156f8:	0f 85 76 01 00 00    	jne    c0015874 <opcodeFault(regs*, void*)+0x52a>
c00156fe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015701:	40                   	inc    eax
c0015702:	8a 00                	mov    al,BYTE PTR [eax]
c0015704:	3c c7                	cmp    al,0xc7
c0015706:	0f 85 68 01 00 00    	jne    c0015874 <opcodeFault(regs*, void*)+0x52a>
c001570c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001570f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015712:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015715:	8d 50 01             	lea    edx,[eax+0x1]
c0015718:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001571b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001571e:	8d 45 ba             	lea    eax,[ebp-0x46]
c0015721:	50                   	push   eax
c0015722:	8d 45 bb             	lea    eax,[ebp-0x45]
c0015725:	50                   	push   eax
c0015726:	8d 45 bc             	lea    eax,[ebp-0x44]
c0015729:	50                   	push   eax
c001572a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001572d:	e8 b8 45 00 00       	call   c0019cea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015732:	83 c4 10             	add    esp,0x10
c0015735:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0015738:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c001573b:	83 f0 01             	xor    eax,0x1
c001573e:	84 c0                	test   al,al
c0015740:	0f 84 2e 01 00 00    	je     c0015874 <opcodeFault(regs*, void*)+0x52a>
c0015746:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0015749:	3c 01                	cmp    al,0x1
c001574b:	0f 85 23 01 00 00    	jne    c0015874 <opcodeFault(regs*, void*)+0x52a>
c0015751:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0015754:	83 f0 01             	xor    eax,0x1
c0015757:	84 c0                	test   al,al
c0015759:	0f 84 15 01 00 00    	je     c0015874 <opcodeFault(regs*, void*)+0x52a>
c001575f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015762:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015765:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015768:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c001576f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015772:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015775:	89 c2                	mov    edx,eax
c0015777:	b8 00 00 00 00       	mov    eax,0x0
c001577c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001577f:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015782:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015785:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015788:	ba 00 00 00 00       	mov    edx,0x0
c001578d:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0015790:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0015793:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015796:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015799:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001579c:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c00157a3:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00157a6:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00157a9:	89 c2                	mov    edx,eax
c00157ab:	b8 00 00 00 00       	mov    eax,0x0
c00157b0:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00157b3:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c00157b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157b9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00157bc:	ba 00 00 00 00       	mov    edx,0x0
c00157c1:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c00157c4:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c00157c7:	e8 7c 86 00 00       	call   c001de48 <lockScheduler()>
c00157cc:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00157cf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00157d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00157d4:	89 c1                	mov    ecx,eax
c00157d6:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c00157d9:	89 cb                	mov    ebx,ecx
c00157db:	89 d0                	mov    eax,edx
c00157dd:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c00157e0:	89 c6                	mov    esi,eax
c00157e2:	89 f0                	mov    eax,esi
c00157e4:	09 d8                	or     eax,ebx
c00157e6:	85 c0                	test   eax,eax
c00157e8:	75 21                	jne    c001580b <opcodeFault(regs*, void*)+0x4c1>
c00157ea:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00157ed:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00157f0:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00157f3:	89 01                	mov    DWORD PTR [ecx],eax
c00157f5:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00157f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157fb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00157fe:	83 c8 40             	or     eax,0x40
c0015801:	89 c2                	mov    edx,eax
c0015803:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015806:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015809:	eb 3e                	jmp    c0015849 <opcodeFault(regs*, void*)+0x4ff>
c001580b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001580e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015811:	8b 00                	mov    eax,DWORD PTR [eax]
c0015813:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015816:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015819:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c001581c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001581f:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015822:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015825:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015828:	89 d0                	mov    eax,edx
c001582a:	31 d2                	xor    edx,edx
c001582c:	89 c3                	mov    ebx,eax
c001582e:	89 d6                	mov    esi,edx
c0015830:	89 da                	mov    edx,ebx
c0015832:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015835:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015838:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001583b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001583e:	83 e0 bf             	and    eax,0xffffffbf
c0015841:	89 c2                	mov    edx,eax
c0015843:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015846:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015849:	e8 fc 85 00 00       	call   c001de4a <unlockScheduler()>
c001584e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015851:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015854:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0015857:	01 c2                	add    edx,eax
c0015859:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001585c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001585f:	83 ec 0c             	sub    esp,0xc
c0015862:	68 3e b2 02 c0       	push   0xc002b23e
c0015867:	e8 05 d7 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001586c:	83 c4 10             	add    esp,0x10
c001586f:	e9 d5 00 00 00       	jmp    c0015949 <opcodeFault(regs*, void*)+0x5ff>
c0015874:	83 ec 0c             	sub    esp,0xc
c0015877:	68 51 b2 02 c0       	push   0xc002b251
c001587c:	e8 f0 d6 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0015881:	83 c4 10             	add    esp,0x10
c0015884:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015887:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001588a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001588d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015890:	c1 e0 04             	shl    eax,0x4
c0015893:	01 d0                	add    eax,edx
c0015895:	83 c0 03             	add    eax,0x3
c0015898:	8a 00                	mov    al,BYTE PTR [eax]
c001589a:	0f b6 d8             	movzx  ebx,al
c001589d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158a0:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00158a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158a6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00158a9:	c1 e0 04             	shl    eax,0x4
c00158ac:	01 d0                	add    eax,edx
c00158ae:	83 c0 02             	add    eax,0x2
c00158b1:	8a 00                	mov    al,BYTE PTR [eax]
c00158b3:	0f b6 c8             	movzx  ecx,al
c00158b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158b9:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00158bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158bf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00158c2:	c1 e0 04             	shl    eax,0x4
c00158c5:	01 d0                	add    eax,edx
c00158c7:	40                   	inc    eax
c00158c8:	8a 00                	mov    al,BYTE PTR [eax]
c00158ca:	0f b6 d0             	movzx  edx,al
c00158cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158d0:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c00158d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158d6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00158d9:	c1 e0 04             	shl    eax,0x4
c00158dc:	01 f0                	add    eax,esi
c00158de:	8a 00                	mov    al,BYTE PTR [eax]
c00158e0:	0f b6 c0             	movzx  eax,al
c00158e3:	83 ec 0c             	sub    esp,0xc
c00158e6:	53                   	push   ebx
c00158e7:	51                   	push   ecx
c00158e8:	52                   	push   edx
c00158e9:	50                   	push   eax
c00158ea:	68 64 b2 02 c0       	push   0xc002b264
c00158ef:	e8 7d d6 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c00158f4:	83 c4 20             	add    esp,0x20
c00158f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158fa:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158fd:	83 c0 03             	add    eax,0x3
c0015900:	8a 00                	mov    al,BYTE PTR [eax]
c0015902:	0f b6 d8             	movzx  ebx,al
c0015905:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015908:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001590b:	83 c0 02             	add    eax,0x2
c001590e:	8a 00                	mov    al,BYTE PTR [eax]
c0015910:	0f b6 c8             	movzx  ecx,al
c0015913:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015916:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015919:	40                   	inc    eax
c001591a:	8a 00                	mov    al,BYTE PTR [eax]
c001591c:	0f b6 d0             	movzx  edx,al
c001591f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015922:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015925:	8a 00                	mov    al,BYTE PTR [eax]
c0015927:	0f b6 c0             	movzx  eax,al
c001592a:	83 ec 0c             	sub    esp,0xc
c001592d:	53                   	push   ebx
c001592e:	51                   	push   ecx
c001592f:	52                   	push   edx
c0015930:	50                   	push   eax
c0015931:	68 8c b2 02 c0       	push   0xc002b28c
c0015936:	e8 36 d6 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001593b:	83 c4 20             	add    esp,0x20
c001593e:	83 ec 0c             	sub    esp,0xc
c0015941:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015944:	e8 9f f4 ff ff       	call   c0014de8 <displayDebugInfo(regs*)>
c0015949:	8d 65 f8             	lea    esp,[ebp-0x8]
c001594c:	5b                   	pop    ebx
c001594d:	5e                   	pop    esi
c001594e:	5d                   	pop    ebp
c001594f:	c3                   	ret    

c0015950 <displayProgramFault(char const*)>:
c0015950:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015955:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015958:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001595e:	85 c0                	test   eax,eax
c0015960:	74 15                	je     c0015977 <displayProgramFault(char const*)+0x27>
c0015962:	83 ec 0c             	sub    esp,0xc
c0015965:	6a 04                	push   0x4
c0015967:	6a 0f                	push   0xf
c0015969:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001596d:	50                   	push   eax
c001596e:	e8 c3 b4 ff ff       	call   c0010e36 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015973:	83 c4 1c             	add    esp,0x1c
c0015976:	c3                   	ret    
c0015977:	c3                   	ret    

c0015978 <setupInterruptController()>:
c0015978:	55                   	push   ebp
c0015979:	89 e5                	mov    ebp,esp
c001597b:	53                   	push   ebx
c001597c:	83 ec 24             	sub    esp,0x24
c001597f:	b8 00 00 00 00       	mov    eax,0x0
c0015984:	85 c0                	test   eax,eax
c0015986:	0f 95 c0             	setne  al
c0015989:	84 c0                	test   al,al
c001598b:	74 5b                	je     c00159e8 <setupInterruptController()+0x70>
c001598d:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0015994:	83 ec 0c             	sub    esp,0xc
c0015997:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c001599a:	e8 a1 9e ff ff       	call   c000f840 <malloc>
c001599f:	83 c4 10             	add    esp,0x10
c00159a2:	89 c3                	mov    ebx,eax
c00159a4:	83 ec 0c             	sub    esp,0xc
c00159a7:	53                   	push   ebx
c00159a8:	e8 f3 ff 00 00       	call   c00259a0 <APIC::APIC()>
c00159ad:	83 c4 10             	add    esp,0x10
c00159b0:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c00159b3:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c00159b6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00159b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00159bb:	83 c0 08             	add    eax,0x8
c00159be:	8b 00                	mov    eax,DWORD PTR [eax]
c00159c0:	6a 00                	push   0x0
c00159c2:	6a 00                	push   0x0
c00159c4:	6a 00                	push   0x0
c00159c6:	52                   	push   edx
c00159c7:	ff d0                	call   eax
c00159c9:	83 c4 10             	add    esp,0x10
c00159cc:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c00159d1:	83 ec 08             	sub    esp,0x8
c00159d4:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00159d7:	50                   	push   eax
c00159d8:	e8 bb e9 ff ff       	call   c0014398 <Device::addChild(Device*)>
c00159dd:	83 c4 10             	add    esp,0x10
c00159e0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00159e3:	e9 52 03 00 00       	jmp    c0015d3a <setupInterruptController()+0x3c2>
c00159e8:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c00159ed:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00159f3:	83 e0 01             	and    eax,0x1
c00159f6:	84 c0                	test   al,al
c00159f8:	0f 95 c0             	setne  al
c00159fb:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00159fe:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0015a05:	83 ec 0c             	sub    esp,0xc
c0015a08:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015a0b:	e8 30 9e ff ff       	call   c000f840 <malloc>
c0015a10:	83 c4 10             	add    esp,0x10
c0015a13:	89 c3                	mov    ebx,eax
c0015a15:	83 ec 0c             	sub    esp,0xc
c0015a18:	53                   	push   ebx
c0015a19:	e8 da 04 01 00       	call   c0025ef8 <PIC::PIC()>
c0015a1e:	83 c4 10             	add    esp,0x10
c0015a21:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015a24:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a27:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a2a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a2c:	83 c0 08             	add    eax,0x8
c0015a2f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a31:	6a 00                	push   0x0
c0015a33:	6a 00                	push   0x0
c0015a35:	6a 00                	push   0x0
c0015a37:	52                   	push   edx
c0015a38:	ff d0                	call   eax
c0015a3a:	83 c4 10             	add    esp,0x10
c0015a3d:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015a41:	74 73                	je     c0015ab6 <setupInterruptController()+0x13e>
c0015a43:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a46:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a49:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a4b:	83 c0 0c             	add    eax,0xc
c0015a4e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a50:	6a 00                	push   0x0
c0015a52:	6a 00                	push   0x0
c0015a54:	6a 00                	push   0x0
c0015a56:	52                   	push   edx
c0015a57:	ff d0                	call   eax
c0015a59:	83 c4 10             	add    esp,0x10
c0015a5c:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015a60:	74 15                	je     c0015a77 <setupInterruptController()+0xff>
c0015a62:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a65:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a67:	83 c0 04             	add    eax,0x4
c0015a6a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a6c:	83 ec 0c             	sub    esp,0xc
c0015a6f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a72:	ff d0                	call   eax
c0015a74:	83 c4 10             	add    esp,0x10
c0015a77:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015a7e:	83 ec 0c             	sub    esp,0xc
c0015a81:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015a84:	e8 b7 9d ff ff       	call   c000f840 <malloc>
c0015a89:	83 c4 10             	add    esp,0x10
c0015a8c:	89 c3                	mov    ebx,eax
c0015a8e:	83 ec 0c             	sub    esp,0xc
c0015a91:	53                   	push   ebx
c0015a92:	e8 09 ff 00 00       	call   c00259a0 <APIC::APIC()>
c0015a97:	83 c4 10             	add    esp,0x10
c0015a9a:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015a9d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015aa0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015aa3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aa5:	83 c0 08             	add    eax,0x8
c0015aa8:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aaa:	6a 00                	push   0x0
c0015aac:	6a 00                	push   0x0
c0015aae:	6a 00                	push   0x0
c0015ab0:	52                   	push   edx
c0015ab1:	ff d0                	call   eax
c0015ab3:	83 c4 10             	add    esp,0x10
c0015ab6:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c0015abb:	83 ec 08             	sub    esp,0x8
c0015abe:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ac1:	50                   	push   eax
c0015ac2:	e8 d1 e8 ff ff       	call   c0014398 <Device::addChild(Device*)>
c0015ac7:	83 c4 10             	add    esp,0x10
c0015aca:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015acd:	8b 00                	mov    eax,DWORD PTR [eax]
c0015acf:	83 c0 24             	add    eax,0x24
c0015ad2:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ad4:	6a 00                	push   0x0
c0015ad6:	68 2b 53 01 c0       	push   0xc001532b
c0015adb:	6a 00                	push   0x0
c0015add:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ae0:	ff d0                	call   eax
c0015ae2:	83 c4 10             	add    esp,0x10
c0015ae5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ae8:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aea:	83 c0 24             	add    eax,0x24
c0015aed:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aef:	6a 00                	push   0x0
c0015af1:	68 2b 53 01 c0       	push   0xc001532b
c0015af6:	6a 01                	push   0x1
c0015af8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015afb:	ff d0                	call   eax
c0015afd:	83 c4 10             	add    esp,0x10
c0015b00:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b03:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b05:	83 c0 24             	add    eax,0x24
c0015b08:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b0a:	6a 00                	push   0x0
c0015b0c:	68 45 4c 01 c0       	push   0xc0014c45
c0015b11:	6a 02                	push   0x2
c0015b13:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b16:	ff d0                	call   eax
c0015b18:	83 c4 10             	add    esp,0x10
c0015b1b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b1e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b20:	83 c0 24             	add    eax,0x24
c0015b23:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b25:	6a 00                	push   0x0
c0015b27:	68 2b 53 01 c0       	push   0xc001532b
c0015b2c:	6a 03                	push   0x3
c0015b2e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b31:	ff d0                	call   eax
c0015b33:	83 c4 10             	add    esp,0x10
c0015b36:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b39:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b3b:	83 c0 24             	add    eax,0x24
c0015b3e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b40:	6a 00                	push   0x0
c0015b42:	68 2b 53 01 c0       	push   0xc001532b
c0015b47:	6a 04                	push   0x4
c0015b49:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b4c:	ff d0                	call   eax
c0015b4e:	83 c4 10             	add    esp,0x10
c0015b51:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b54:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b56:	83 c0 24             	add    eax,0x24
c0015b59:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b5b:	6a 00                	push   0x0
c0015b5d:	68 2b 53 01 c0       	push   0xc001532b
c0015b62:	6a 05                	push   0x5
c0015b64:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b67:	ff d0                	call   eax
c0015b69:	83 c4 10             	add    esp,0x10
c0015b6c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b6f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b71:	83 c0 24             	add    eax,0x24
c0015b74:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b76:	6a 00                	push   0x0
c0015b78:	68 4a 53 01 c0       	push   0xc001534a
c0015b7d:	6a 06                	push   0x6
c0015b7f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b82:	ff d0                	call   eax
c0015b84:	83 c4 10             	add    esp,0x10
c0015b87:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b8a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b8c:	83 c0 24             	add    eax,0x24
c0015b8f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b91:	6a 00                	push   0x0
c0015b93:	68 77 52 01 c0       	push   0xc0015277
c0015b98:	6a 07                	push   0x7
c0015b9a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b9d:	ff d0                	call   eax
c0015b9f:	83 c4 10             	add    esp,0x10
c0015ba2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ba5:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ba7:	83 c0 24             	add    eax,0x24
c0015baa:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bac:	6a 00                	push   0x0
c0015bae:	68 60 4a 01 c0       	push   0xc0014a60
c0015bb3:	6a 08                	push   0x8
c0015bb5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bb8:	ff d0                	call   eax
c0015bba:	83 c4 10             	add    esp,0x10
c0015bbd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bc0:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bc2:	83 c0 24             	add    eax,0x24
c0015bc5:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bc7:	6a 00                	push   0x0
c0015bc9:	68 2b 53 01 c0       	push   0xc001532b
c0015bce:	6a 09                	push   0x9
c0015bd0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bd3:	ff d0                	call   eax
c0015bd5:	83 c4 10             	add    esp,0x10
c0015bd8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bdb:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bdd:	83 c0 24             	add    eax,0x24
c0015be0:	8b 00                	mov    eax,DWORD PTR [eax]
c0015be2:	6a 00                	push   0x0
c0015be4:	68 2b 53 01 c0       	push   0xc001532b
c0015be9:	6a 0a                	push   0xa
c0015beb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bee:	ff d0                	call   eax
c0015bf0:	83 c4 10             	add    esp,0x10
c0015bf3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bf6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bf8:	83 c0 24             	add    eax,0x24
c0015bfb:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bfd:	6a 00                	push   0x0
c0015bff:	68 2b 53 01 c0       	push   0xc001532b
c0015c04:	6a 0b                	push   0xb
c0015c06:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c09:	ff d0                	call   eax
c0015c0b:	83 c4 10             	add    esp,0x10
c0015c0e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c11:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c13:	83 c0 24             	add    eax,0x24
c0015c16:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c18:	6a 00                	push   0x0
c0015c1a:	68 2b 53 01 c0       	push   0xc001532b
c0015c1f:	6a 0c                	push   0xc
c0015c21:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c24:	ff d0                	call   eax
c0015c26:	83 c4 10             	add    esp,0x10
c0015c29:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c2c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c2e:	83 c0 24             	add    eax,0x24
c0015c31:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c33:	6a 00                	push   0x0
c0015c35:	68 a6 52 01 c0       	push   0xc00152a6
c0015c3a:	6a 0d                	push   0xd
c0015c3c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c3f:	ff d0                	call   eax
c0015c41:	83 c4 10             	add    esp,0x10
c0015c44:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c47:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c49:	83 c0 24             	add    eax,0x24
c0015c4c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c4e:	6a 00                	push   0x0
c0015c50:	68 df 52 01 c0       	push   0xc00152df
c0015c55:	6a 0e                	push   0xe
c0015c57:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c5a:	ff d0                	call   eax
c0015c5c:	83 c4 10             	add    esp,0x10
c0015c5f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c62:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c64:	83 c0 24             	add    eax,0x24
c0015c67:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c69:	6a 00                	push   0x0
c0015c6b:	68 2b 53 01 c0       	push   0xc001532b
c0015c70:	6a 0f                	push   0xf
c0015c72:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c75:	ff d0                	call   eax
c0015c77:	83 c4 10             	add    esp,0x10
c0015c7a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c7d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c7f:	83 c0 24             	add    eax,0x24
c0015c82:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c84:	6a 00                	push   0x0
c0015c86:	68 2b 53 01 c0       	push   0xc001532b
c0015c8b:	6a 10                	push   0x10
c0015c8d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c90:	ff d0                	call   eax
c0015c92:	83 c4 10             	add    esp,0x10
c0015c95:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c98:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c9a:	83 c0 24             	add    eax,0x24
c0015c9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c9f:	6a 00                	push   0x0
c0015ca1:	68 2b 53 01 c0       	push   0xc001532b
c0015ca6:	6a 11                	push   0x11
c0015ca8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cab:	ff d0                	call   eax
c0015cad:	83 c4 10             	add    esp,0x10
c0015cb0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cb3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cb5:	83 c0 24             	add    eax,0x24
c0015cb8:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cba:	6a 00                	push   0x0
c0015cbc:	68 2b 53 01 c0       	push   0xc001532b
c0015cc1:	6a 12                	push   0x12
c0015cc3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cc6:	ff d0                	call   eax
c0015cc8:	83 c4 10             	add    esp,0x10
c0015ccb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cce:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cd0:	83 c0 24             	add    eax,0x24
c0015cd3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cd5:	6a 00                	push   0x0
c0015cd7:	68 2b 53 01 c0       	push   0xc001532b
c0015cdc:	6a 13                	push   0x13
c0015cde:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ce1:	ff d0                	call   eax
c0015ce3:	83 c4 10             	add    esp,0x10
c0015ce6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ce9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ceb:	83 c0 24             	add    eax,0x24
c0015cee:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cf0:	6a 00                	push   0x0
c0015cf2:	68 2b 53 01 c0       	push   0xc001532b
c0015cf7:	6a 14                	push   0x14
c0015cf9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cfc:	ff d0                	call   eax
c0015cfe:	83 c4 10             	add    esp,0x10
c0015d01:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d04:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d06:	83 c0 24             	add    eax,0x24
c0015d09:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d0b:	6a 00                	push   0x0
c0015d0d:	68 2b 53 01 c0       	push   0xc001532b
c0015d12:	6a 1e                	push   0x1e
c0015d14:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d17:	ff d0                	call   eax
c0015d19:	83 c4 10             	add    esp,0x10
c0015d1c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d1f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d21:	83 c0 24             	add    eax,0x24
c0015d24:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d26:	6a 00                	push   0x0
c0015d28:	68 f7 c7 01 c0       	push   0xc001c7f7
c0015d2d:	6a 60                	push   0x60
c0015d2f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d32:	ff d0                	call   eax
c0015d34:	83 c4 10             	add    esp,0x10
c0015d37:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d3a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015d3d:	c9                   	leave  
c0015d3e:	c3                   	ret    
c0015d3f:	90                   	nop

c0015d40 <InterruptController::convertLegacyIRQNumber(int)>:
c0015d40:	55                   	push   ebp
c0015d41:	89 e5                	mov    ebp,esp
c0015d43:	83 ec 08             	sub    esp,0x8
c0015d46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d49:	83 ec 0c             	sub    esp,0xc
c0015d4c:	50                   	push   eax
c0015d4d:	e8 32 e9 ff ff       	call   c0014684 <Device::getName()>
c0015d52:	83 c4 10             	add    esp,0x10
c0015d55:	8a 00                	mov    al,BYTE PTR [eax]
c0015d57:	3c 41                	cmp    al,0x41
c0015d59:	0f 94 c0             	sete   al
c0015d5c:	84 c0                	test   al,al
c0015d5e:	74 28                	je     c0015d88 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015d60:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015d64:	7f 12                	jg     c0015d78 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015d66:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015d69:	05 a0 d8 02 c0       	add    eax,0xc002d8a0
c0015d6e:	8a 00                	mov    al,BYTE PTR [eax]
c0015d70:	0f b6 c0             	movzx  eax,al
c0015d73:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015d76:	eb 10                	jmp    c0015d88 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015d78:	83 ec 0c             	sub    esp,0xc
c0015d7b:	68 a0 af 02 c0       	push   0xc002afa0
c0015d80:	e8 9e 48 00 00       	call   c001a623 <Krnl::panic(char const*)>
c0015d85:	83 c4 10             	add    esp,0x10
c0015d88:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015d8b:	c9                   	leave  
c0015d8c:	c3                   	ret    
c0015d8d:	90                   	nop

c0015d8e <startGUI(void*)>:
c0015d8e:	55                   	push   ebp
c0015d8f:	89 e5                	mov    ebp,esp
c0015d91:	53                   	push   ebx
c0015d92:	83 ec 04             	sub    esp,0x4
c0015d95:	e8 b0 80 00 00       	call   c001de4a <unlockScheduler()>
c0015d9a:	8b 1d 48 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e648
c0015da0:	83 ec 08             	sub    esp,0x8
c0015da3:	6a 01                	push   0x1
c0015da5:	68 fc b2 02 c0       	push   0xc002b2fc
c0015daa:	e8 f1 79 00 00       	call   c001d7a0 <Thr::loadDLL(char const*, bool)>
c0015daf:	83 c4 10             	add    esp,0x10
c0015db2:	83 ec 08             	sub    esp,0x8
c0015db5:	53                   	push   ebx
c0015db6:	50                   	push   eax
c0015db7:	e8 18 7c 00 00       	call   c001d9d4 <Thr::executeDLL(unsigned long, void*)>
c0015dbc:	83 c4 10             	add    esp,0x10
c0015dbf:	8b 1d 48 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e648
c0015dc5:	83 ec 08             	sub    esp,0x8
c0015dc8:	6a 01                	push   0x1
c0015dca:	68 16 b3 02 c0       	push   0xc002b316
c0015dcf:	e8 cc 79 00 00       	call   c001d7a0 <Thr::loadDLL(char const*, bool)>
c0015dd4:	83 c4 10             	add    esp,0x10
c0015dd7:	83 ec 08             	sub    esp,0x8
c0015dda:	53                   	push   ebx
c0015ddb:	50                   	push   eax
c0015ddc:	e8 f3 7b 00 00       	call   c001d9d4 <Thr::executeDLL(unsigned long, void*)>
c0015de1:	83 c4 10             	add    esp,0x10
c0015de4:	90                   	nop
c0015de5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015de8:	c9                   	leave  
c0015de9:	c3                   	ret    

c0015dea <startGUIVESA(void*)>:
c0015dea:	55                   	push   ebp
c0015deb:	89 e5                	mov    ebp,esp
c0015ded:	53                   	push   ebx
c0015dee:	83 ec 04             	sub    esp,0x4
c0015df1:	e8 54 80 00 00       	call   c001de4a <unlockScheduler()>
c0015df6:	8b 1d 48 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e648
c0015dfc:	83 ec 08             	sub    esp,0x8
c0015dff:	6a 01                	push   0x1
c0015e01:	68 30 b3 02 c0       	push   0xc002b330
c0015e06:	e8 95 79 00 00       	call   c001d7a0 <Thr::loadDLL(char const*, bool)>
c0015e0b:	83 c4 10             	add    esp,0x10
c0015e0e:	83 ec 08             	sub    esp,0x8
c0015e11:	53                   	push   ebx
c0015e12:	50                   	push   eax
c0015e13:	e8 bc 7b 00 00       	call   c001d9d4 <Thr::executeDLL(unsigned long, void*)>
c0015e18:	83 c4 10             	add    esp,0x10
c0015e1b:	8b 1d 48 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e648
c0015e21:	83 ec 08             	sub    esp,0x8
c0015e24:	6a 01                	push   0x1
c0015e26:	68 16 b3 02 c0       	push   0xc002b316
c0015e2b:	e8 70 79 00 00       	call   c001d7a0 <Thr::loadDLL(char const*, bool)>
c0015e30:	83 c4 10             	add    esp,0x10
c0015e33:	83 ec 08             	sub    esp,0x8
c0015e36:	53                   	push   ebx
c0015e37:	50                   	push   eax
c0015e38:	e8 97 7b 00 00       	call   c001d9d4 <Thr::executeDLL(unsigned long, void*)>
c0015e3d:	83 c4 10             	add    esp,0x10
c0015e40:	90                   	nop
c0015e41:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015e44:	c9                   	leave  
c0015e45:	c3                   	ret    

c0015e46 <sendKeyToTerminal(unsigned char)>:
c0015e46:	55                   	push   ebp
c0015e47:	89 e5                	mov    ebp,esp
c0015e49:	83 ec 28             	sub    esp,0x28
c0015e4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e4f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015e52:	a1 24 e7 02 c0       	mov    eax,ds:0xc002e724
c0015e57:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015e5b:	83 ec 08             	sub    esp,0x8
c0015e5e:	52                   	push   edx
c0015e5f:	50                   	push   eax
c0015e60:	e8 0d b5 ff ff       	call   c0011372 <VgaText::receiveKey(unsigned char)>
c0015e65:	83 c4 10             	add    esp,0x10
c0015e68:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015e6c:	75 41                	jne    c0015eaf <sendKeyToTerminal(unsigned char)+0x69>
c0015e6e:	e8 fc 7f 00 00       	call   c001de6f <lockStuff()>
c0015e73:	a1 00 e8 02 c0       	mov    eax,ds:0xc002e800
c0015e78:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015e7b:	c7 05 00 e8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e800,0x0
c0015e85:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015e89:	74 1f                	je     c0015eaa <sendKeyToTerminal(unsigned char)+0x64>
c0015e8b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015e8e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015e91:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015e94:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015e97:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015e9a:	83 ec 0c             	sub    esp,0xc
c0015e9d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015ea0:	e8 bb 85 00 00       	call   c001e460 <unblockTask(ThreadControlBlock*)>
c0015ea5:	83 c4 10             	add    esp,0x10
c0015ea8:	eb db                	jmp    c0015e85 <sendKeyToTerminal(unsigned char)+0x3f>
c0015eaa:	e8 5a 83 00 00       	call   c001e209 <unlockStuff()>
c0015eaf:	90                   	nop
c0015eb0:	c9                   	leave  
c0015eb1:	c3                   	ret    

c0015eb2 <sendKeyboardToken(KeyboardToken)>:
c0015eb2:	55                   	push   ebp
c0015eb3:	89 e5                	mov    ebp,esp
c0015eb5:	83 ec 18             	sub    esp,0x18
c0015eb8:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015ebb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ebe:	0f b7 c0             	movzx  eax,ax
c0015ec1:	83 f2 01             	xor    edx,0x1
c0015ec4:	88 90 20 e8 02 c0    	mov    BYTE PTR [eax-0x3ffd17e0],dl
c0015eca:	a1 08 e8 02 c0       	mov    eax,ds:0xc002e808
c0015ecf:	85 c0                	test   eax,eax
c0015ed1:	74 24                	je     c0015ef7 <sendKeyboardToken(KeyboardToken)+0x45>
c0015ed3:	8b 0d 08 e8 02 c0    	mov    ecx,DWORD PTR ds:0xc002e808
c0015ed9:	83 ec 04             	sub    esp,0x4
c0015edc:	68 20 e8 02 c0       	push   0xc002e820
c0015ee1:	83 ec 08             	sub    esp,0x8
c0015ee4:	89 e2                	mov    edx,esp
c0015ee6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ee9:	89 02                	mov    DWORD PTR [edx],eax
c0015eeb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015eee:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015ef2:	ff d1                	call   ecx
c0015ef4:	83 c4 10             	add    esp,0x10
c0015ef7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015efa:	66 3d 03 02          	cmp    ax,0x203
c0015efe:	75 07                	jne    c0015f07 <sendKeyboardToken(KeyboardToken)+0x55>
c0015f00:	a0 20 e9 02 c0       	mov    al,ds:0xc002e920
c0015f05:	84 c0                	test   al,al
c0015f07:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015f0b:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015f0e:	a0 28 ec 02 c0       	mov    al,ds:0xc002ec28
c0015f13:	38 c2                	cmp    dl,al
c0015f15:	74 1c                	je     c0015f33 <sendKeyboardToken(KeyboardToken)+0x81>
c0015f17:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015f1a:	a2 28 ec 02 c0       	mov    ds:0xc002ec28,al
c0015f1f:	a0 28 ec 02 c0       	mov    al,ds:0xc002ec28
c0015f24:	0f b6 c0             	movzx  eax,al
c0015f27:	83 ec 0c             	sub    esp,0xc
c0015f2a:	50                   	push   eax
c0015f2b:	e8 a2 a6 ff ff       	call   c00105d2 <setTerminalScrollLock(bool)>
c0015f30:	83 c4 10             	add    esp,0x10
c0015f33:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015f36:	84 c0                	test   al,al
c0015f38:	0f 84 ae 00 00 00    	je     c0015fec <sendKeyboardToken(KeyboardToken)+0x13a>
c0015f3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f41:	66 3d 10 03          	cmp    ax,0x310
c0015f45:	75 06                	jne    c0015f4d <sendKeyboardToken(KeyboardToken)+0x9b>
c0015f47:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015f4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f50:	66 3d 11 03          	cmp    ax,0x311
c0015f54:	75 06                	jne    c0015f5c <sendKeyboardToken(KeyboardToken)+0xaa>
c0015f56:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015f5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f5f:	66 3d 12 03          	cmp    ax,0x312
c0015f63:	75 06                	jne    c0015f6b <sendKeyboardToken(KeyboardToken)+0xb9>
c0015f65:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015f6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f6e:	66 3d 13 03          	cmp    ax,0x313
c0015f72:	75 06                	jne    c0015f7a <sendKeyboardToken(KeyboardToken)+0xc8>
c0015f74:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015f7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f7d:	66 3d 14 03          	cmp    ax,0x314
c0015f81:	75 06                	jne    c0015f89 <sendKeyboardToken(KeyboardToken)+0xd7>
c0015f83:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015f89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f8c:	66 3d 15 03          	cmp    ax,0x315
c0015f90:	75 06                	jne    c0015f98 <sendKeyboardToken(KeyboardToken)+0xe6>
c0015f92:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015f98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f9b:	66 3d 16 03          	cmp    ax,0x316
c0015f9f:	75 06                	jne    c0015fa7 <sendKeyboardToken(KeyboardToken)+0xf5>
c0015fa1:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015fa7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015faa:	66 3d 17 03          	cmp    ax,0x317
c0015fae:	75 06                	jne    c0015fb6 <sendKeyboardToken(KeyboardToken)+0x104>
c0015fb0:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015fb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fb9:	66 3d 18 03          	cmp    ax,0x318
c0015fbd:	75 06                	jne    c0015fc5 <sendKeyboardToken(KeyboardToken)+0x113>
c0015fbf:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015fc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fc8:	66 3d 19 03          	cmp    ax,0x319
c0015fcc:	75 06                	jne    c0015fd4 <sendKeyboardToken(KeyboardToken)+0x122>
c0015fce:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015fd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fd7:	66 3d 1a 03          	cmp    ax,0x31a
c0015fdb:	0f 85 c9 00 00 00    	jne    c00160aa <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015fe1:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015fe7:	e9 be 00 00 00       	jmp    c00160aa <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015fec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fef:	66 3d 10 03          	cmp    ax,0x310
c0015ff3:	75 0a                	jne    c0015fff <sendKeyboardToken(KeyboardToken)+0x14d>
c0015ff5:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015ffb:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016002:	66 3d 11 03          	cmp    ax,0x311
c0016006:	75 0a                	jne    c0016012 <sendKeyboardToken(KeyboardToken)+0x160>
c0016008:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c001600e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016012:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016015:	66 3d 12 03          	cmp    ax,0x312
c0016019:	75 0a                	jne    c0016025 <sendKeyboardToken(KeyboardToken)+0x173>
c001601b:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0016021:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016028:	66 3d 13 03          	cmp    ax,0x313
c001602c:	75 0a                	jne    c0016038 <sendKeyboardToken(KeyboardToken)+0x186>
c001602e:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0016034:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016038:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001603b:	66 3d 14 03          	cmp    ax,0x314
c001603f:	75 0a                	jne    c001604b <sendKeyboardToken(KeyboardToken)+0x199>
c0016041:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0016047:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001604b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001604e:	66 3d 15 03          	cmp    ax,0x315
c0016052:	75 0a                	jne    c001605e <sendKeyboardToken(KeyboardToken)+0x1ac>
c0016054:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001605a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001605e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016061:	66 3d 16 03          	cmp    ax,0x316
c0016065:	75 0a                	jne    c0016071 <sendKeyboardToken(KeyboardToken)+0x1bf>
c0016067:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c001606d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016071:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016074:	66 3d 17 03          	cmp    ax,0x317
c0016078:	75 0a                	jne    c0016084 <sendKeyboardToken(KeyboardToken)+0x1d2>
c001607a:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0016080:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016084:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016087:	66 3d 18 03          	cmp    ax,0x318
c001608b:	75 0a                	jne    c0016097 <sendKeyboardToken(KeyboardToken)+0x1e5>
c001608d:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0016093:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016097:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001609a:	66 3d 19 03          	cmp    ax,0x319
c001609e:	75 0a                	jne    c00160aa <sendKeyboardToken(KeyboardToken)+0x1f8>
c00160a0:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00160a6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160ad:	66 3d 00 02          	cmp    ax,0x200
c00160b1:	75 2c                	jne    c00160df <sendKeyboardToken(KeyboardToken)+0x22d>
c00160b3:	a0 20 ec 02 c0       	mov    al,ds:0xc002ec20
c00160b8:	83 f0 01             	xor    eax,0x1
c00160bb:	84 c0                	test   al,al
c00160bd:	74 20                	je     c00160df <sendKeyboardToken(KeyboardToken)+0x22d>
c00160bf:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c00160c4:	6a 01                	push   0x1
c00160c6:	6a 00                	push   0x0
c00160c8:	68 8e 5d 01 c0       	push   0xc0015d8e
c00160cd:	50                   	push   eax
c00160ce:	e8 a7 7e 00 00       	call   c001df7a <Process::createThread(void (*)(void*), void*, int)>
c00160d3:	83 c4 10             	add    esp,0x10
c00160d6:	c6 05 20 ec 02 c0 01 	mov    BYTE PTR ds:0xc002ec20,0x1
c00160dd:	eb 33                	jmp    c0016112 <sendKeyboardToken(KeyboardToken)+0x260>
c00160df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160e2:	66 3d 01 02          	cmp    ax,0x201
c00160e6:	75 2a                	jne    c0016112 <sendKeyboardToken(KeyboardToken)+0x260>
c00160e8:	a0 20 ec 02 c0       	mov    al,ds:0xc002ec20
c00160ed:	83 f0 01             	xor    eax,0x1
c00160f0:	84 c0                	test   al,al
c00160f2:	74 1e                	je     c0016112 <sendKeyboardToken(KeyboardToken)+0x260>
c00160f4:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c00160f9:	6a 01                	push   0x1
c00160fb:	6a 00                	push   0x0
c00160fd:	68 ea 5d 01 c0       	push   0xc0015dea
c0016102:	50                   	push   eax
c0016103:	e8 72 7e 00 00       	call   c001df7a <Process::createThread(void (*)(void*), void*, int)>
c0016108:	83 c4 10             	add    esp,0x10
c001610b:	c6 05 20 ec 02 c0 01 	mov    BYTE PTR ds:0xc002ec20,0x1
c0016112:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016115:	66 3d 1d 03          	cmp    ax,0x31d
c0016119:	75 06                	jne    c0016121 <sendKeyboardToken(KeyboardToken)+0x26f>
c001611b:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0016121:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016124:	66 3d 1c 03          	cmp    ax,0x31c
c0016128:	75 06                	jne    c0016130 <sendKeyboardToken(KeyboardToken)+0x27e>
c001612a:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0016130:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016133:	66 3d 1b 03          	cmp    ax,0x31b
c0016137:	75 06                	jne    c001613f <sendKeyboardToken(KeyboardToken)+0x28d>
c0016139:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c001613f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016142:	66 3d 1e 03          	cmp    ax,0x31e
c0016146:	75 06                	jne    c001614e <sendKeyboardToken(KeyboardToken)+0x29c>
c0016148:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c001614e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016151:	66 3d 1f 03          	cmp    ax,0x31f
c0016155:	75 06                	jne    c001615d <sendKeyboardToken(KeyboardToken)+0x2ab>
c0016157:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c001615d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016160:	66 3d 1a 03          	cmp    ax,0x31a
c0016164:	75 06                	jne    c001616c <sendKeyboardToken(KeyboardToken)+0x2ba>
c0016166:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c001616c:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0016170:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016173:	83 f0 01             	xor    eax,0x1
c0016176:	84 c0                	test   al,al
c0016178:	74 77                	je     c00161f1 <sendKeyboardToken(KeyboardToken)+0x33f>
c001617a:	a0 21 e9 02 c0       	mov    al,ds:0xc002e921
c001617f:	84 c0                	test   al,al
c0016181:	74 41                	je     c00161c4 <sendKeyboardToken(KeyboardToken)+0x312>
c0016183:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016187:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c001618b:	74 2b                	je     c00161b8 <sendKeyboardToken(KeyboardToken)+0x306>
c001618d:	8b 15 24 ec 02 c0    	mov    edx,DWORD PTR ds:0xc002ec24
c0016193:	89 d0                	mov    eax,edx
c0016195:	c1 e0 02             	shl    eax,0x2
c0016198:	01 d0                	add    eax,edx
c001619a:	01 c0                	add    eax,eax
c001619c:	a3 24 ec 02 c0       	mov    ds:0xc002ec24,eax
c00161a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161a4:	0f b7 c0             	movzx  eax,ax
c00161a7:	8d 50 d0             	lea    edx,[eax-0x30]
c00161aa:	a1 24 ec 02 c0       	mov    eax,ds:0xc002ec24
c00161af:	01 d0                	add    eax,edx
c00161b1:	a3 24 ec 02 c0       	mov    ds:0xc002ec24,eax
c00161b6:	eb 6d                	jmp    c0016225 <sendKeyboardToken(KeyboardToken)+0x373>
c00161b8:	c7 05 24 ec 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ec24,0x0
c00161c2:	eb 61                	jmp    c0016225 <sendKeyboardToken(KeyboardToken)+0x373>
c00161c4:	a1 24 ec 02 c0       	mov    eax,ds:0xc002ec24
c00161c9:	85 c0                	test   eax,eax
c00161cb:	74 18                	je     c00161e5 <sendKeyboardToken(KeyboardToken)+0x333>
c00161cd:	a1 24 ec 02 c0       	mov    eax,ds:0xc002ec24
c00161d2:	0f b6 c0             	movzx  eax,al
c00161d5:	83 ec 0c             	sub    esp,0xc
c00161d8:	50                   	push   eax
c00161d9:	e8 68 fc ff ff       	call   c0015e46 <sendKeyToTerminal(unsigned char)>
c00161de:	83 c4 10             	add    esp,0x10
c00161e1:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00161e5:	c7 05 24 ec 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ec24,0x0
c00161ef:	eb 34                	jmp    c0016225 <sendKeyboardToken(KeyboardToken)+0x373>
c00161f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161f4:	66 3d 01 01          	cmp    ax,0x101
c00161f8:	75 2b                	jne    c0016225 <sendKeyboardToken(KeyboardToken)+0x373>
c00161fa:	a1 24 ec 02 c0       	mov    eax,ds:0xc002ec24
c00161ff:	85 c0                	test   eax,eax
c0016201:	74 18                	je     c001621b <sendKeyboardToken(KeyboardToken)+0x369>
c0016203:	a1 24 ec 02 c0       	mov    eax,ds:0xc002ec24
c0016208:	0f b6 c0             	movzx  eax,al
c001620b:	83 ec 0c             	sub    esp,0xc
c001620e:	50                   	push   eax
c001620f:	e8 32 fc ff ff       	call   c0015e46 <sendKeyToTerminal(unsigned char)>
c0016214:	83 c4 10             	add    esp,0x10
c0016217:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001621b:	c7 05 24 ec 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ec24,0x0
c0016225:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0016228:	83 f0 01             	xor    eax,0x1
c001622b:	84 c0                	test   al,al
c001622d:	74 4c                	je     c001627b <sendKeyboardToken(KeyboardToken)+0x3c9>
c001622f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016232:	83 f0 01             	xor    eax,0x1
c0016235:	84 c0                	test   al,al
c0016237:	74 42                	je     c001627b <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016239:	a0 20 e9 02 c0       	mov    al,ds:0xc002e920
c001623e:	83 f0 01             	xor    eax,0x1
c0016241:	84 c0                	test   al,al
c0016243:	74 36                	je     c001627b <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016245:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016248:	66 83 f8 1f          	cmp    ax,0x1f
c001624c:	76 09                	jbe    c0016257 <sendKeyboardToken(KeyboardToken)+0x3a5>
c001624e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016251:	66 83 f8 7e          	cmp    ax,0x7e
c0016255:	76 12                	jbe    c0016269 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0016257:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001625a:	66 83 f8 0a          	cmp    ax,0xa
c001625e:	74 09                	je     c0016269 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0016260:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016263:	66 83 f8 08          	cmp    ax,0x8
c0016267:	75 12                	jne    c001627b <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016269:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001626c:	0f b6 c0             	movzx  eax,al
c001626f:	83 ec 0c             	sub    esp,0xc
c0016272:	50                   	push   eax
c0016273:	e8 ce fb ff ff       	call   c0015e46 <sendKeyToTerminal(unsigned char)>
c0016278:	83 c4 10             	add    esp,0x10
c001627b:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001627e:	83 f0 01             	xor    eax,0x1
c0016281:	84 c0                	test   al,al
c0016283:	74 4f                	je     c00162d4 <sendKeyboardToken(KeyboardToken)+0x422>
c0016285:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016288:	83 f0 01             	xor    eax,0x1
c001628b:	84 c0                	test   al,al
c001628d:	74 45                	je     c00162d4 <sendKeyboardToken(KeyboardToken)+0x422>
c001628f:	a0 20 e9 02 c0       	mov    al,ds:0xc002e920
c0016294:	84 c0                	test   al,al
c0016296:	74 3c                	je     c00162d4 <sendKeyboardToken(KeyboardToken)+0x422>
c0016298:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001629b:	66 83 f8 3f          	cmp    ax,0x3f
c001629f:	76 33                	jbe    c00162d4 <sendKeyboardToken(KeyboardToken)+0x422>
c00162a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162a4:	66 83 f8 7f          	cmp    ax,0x7f
c00162a8:	77 2a                	ja     c00162d4 <sendKeyboardToken(KeyboardToken)+0x422>
c00162aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162ad:	88 c2                	mov    dl,al
c00162af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162b2:	66 83 f8 5f          	cmp    ax,0x5f
c00162b6:	76 04                	jbe    c00162bc <sendKeyboardToken(KeyboardToken)+0x40a>
c00162b8:	b0 20                	mov    al,0x20
c00162ba:	eb 02                	jmp    c00162be <sendKeyboardToken(KeyboardToken)+0x40c>
c00162bc:	b0 00                	mov    al,0x0
c00162be:	29 c2                	sub    edx,eax
c00162c0:	88 d0                	mov    al,dl
c00162c2:	83 e8 40             	sub    eax,0x40
c00162c5:	0f b6 c0             	movzx  eax,al
c00162c8:	83 ec 0c             	sub    esp,0xc
c00162cb:	50                   	push   eax
c00162cc:	e8 75 fb ff ff       	call   c0015e46 <sendKeyToTerminal(unsigned char)>
c00162d1:	83 c4 10             	add    esp,0x10
c00162d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162d7:	66 3d 00 03          	cmp    ax,0x300
c00162db:	75 0f                	jne    c00162ec <sendKeyboardToken(KeyboardToken)+0x43a>
c00162dd:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00162e0:	83 f0 01             	xor    eax,0x1
c00162e3:	84 c0                	test   al,al
c00162e5:	74 05                	je     c00162ec <sendKeyboardToken(KeyboardToken)+0x43a>
c00162e7:	e8 1b ab ff ff       	call   c0010e07 <doTerminalCycle()>
c00162ec:	90                   	nop
c00162ed:	c9                   	leave  
c00162ee:	c3                   	ret    

c00162ef <clearInternalKeybuffer(VgaText*)>:
c00162ef:	55                   	push   ebp
c00162f0:	89 e5                	mov    ebp,esp
c00162f2:	83 ec 08             	sub    esp,0x8
c00162f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162f8:	05 34 11 00 00       	add    eax,0x1134
c00162fd:	83 ec 0c             	sub    esp,0xc
c0016300:	50                   	push   eax
c0016301:	e8 8e a4 fe ff       	call   c0000794 <strlen>
c0016306:	83 c4 10             	add    esp,0x10
c0016309:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001630c:	81 c2 34 11 00 00    	add    edx,0x1134
c0016312:	83 ec 04             	sub    esp,0x4
c0016315:	50                   	push   eax
c0016316:	6a 00                	push   0x0
c0016318:	52                   	push   edx
c0016319:	e8 5a a4 fe ff       	call   c0000778 <memset>
c001631e:	83 c4 10             	add    esp,0x10
c0016321:	90                   	nop
c0016322:	c9                   	leave  
c0016323:	c3                   	ret    

c0016324 <readKeyboard(VgaText*, char*, unsigned long)>:
c0016324:	55                   	push   ebp
c0016325:	89 e5                	mov    ebp,esp
c0016327:	83 ec 18             	sub    esp,0x18
c001632a:	fb                   	sti    
c001632b:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0016332:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0016336:	0f 84 8a 00 00 00    	je     c00163c6 <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c001633c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001633f:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0016345:	84 c0                	test   al,al
c0016347:	75 11                	jne    c001635a <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c0016349:	e8 fa 7a 00 00       	call   c001de48 <lockScheduler()>
c001634e:	e8 31 7e 00 00       	call   c001e184 <schedule()>
c0016353:	e8 f2 7a 00 00       	call   c001de4a <unlockScheduler()>
c0016358:	eb e2                	jmp    c001633c <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c001635a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001635d:	8d 50 01             	lea    edx,[eax+0x1]
c0016360:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0016363:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016366:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c001636c:	88 10                	mov    BYTE PTR [eax],dl
c001636e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016371:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0016377:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c001637a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001637d:	05 34 11 00 00       	add    eax,0x1134
c0016382:	83 ec 0c             	sub    esp,0xc
c0016385:	50                   	push   eax
c0016386:	e8 09 a4 fe ff       	call   c0000794 <strlen>
c001638b:	83 c4 10             	add    esp,0x10
c001638e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016391:	81 c2 34 11 00 00    	add    edx,0x1134
c0016397:	8d 4a 01             	lea    ecx,[edx+0x1]
c001639a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001639d:	81 c2 34 11 00 00    	add    edx,0x1134
c00163a3:	83 ec 04             	sub    esp,0x4
c00163a6:	50                   	push   eax
c00163a7:	51                   	push   ecx
c00163a8:	52                   	push   edx
c00163a9:	e8 ce a2 fe ff       	call   c000067c <memmove>
c00163ae:	83 c4 10             	add    esp,0x10
c00163b1:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00163b4:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00163b7:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c00163bb:	0f 85 71 ff ff ff    	jne    c0016332 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c00163c1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00163c4:	eb 03                	jmp    c00163c9 <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c00163c6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00163c9:	c9                   	leave  
c00163ca:	c3                   	ret    
c00163cb:	90                   	nop

c00163cc <Keyboard::Keyboard(char const*)>:
c00163cc:	83 ec 0c             	sub    esp,0xc
c00163cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163d3:	83 ec 08             	sub    esp,0x8
c00163d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163da:	50                   	push   eax
c00163db:	e8 a8 e1 ff ff       	call   c0014588 <Device::Device(char const*)>
c00163e0:	83 c4 10             	add    esp,0x10
c00163e3:	ba 54 b3 02 c0       	mov    edx,0xc002b354
c00163e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163ec:	89 10                	mov    DWORD PTR [eax],edx
c00163ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163f2:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c00163fc:	c6 05 04 e8 02 c0 01 	mov    BYTE PTR ds:0xc002e804,0x1
c0016403:	90                   	nop
c0016404:	83 c4 0c             	add    esp,0xc
c0016407:	c3                   	ret    

c0016408 <Keyboard::~Keyboard()>:
c0016408:	83 ec 0c             	sub    esp,0xc
c001640b:	ba 54 b3 02 c0       	mov    edx,0xc002b354
c0016410:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016414:	89 10                	mov    DWORD PTR [eax],edx
c0016416:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001641a:	83 ec 0c             	sub    esp,0xc
c001641d:	50                   	push   eax
c001641e:	e8 47 de ff ff       	call   c001426a <Device::~Device()>
c0016423:	83 c4 10             	add    esp,0x10
c0016426:	90                   	nop
c0016427:	83 c4 0c             	add    esp,0xc
c001642a:	c3                   	ret    
c001642b:	90                   	nop

c001642c <Keyboard::~Keyboard()>:
c001642c:	83 ec 0c             	sub    esp,0xc
c001642f:	83 ec 0c             	sub    esp,0xc
c0016432:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016436:	e8 cd ff ff ff       	call   c0016408 <Keyboard::~Keyboard()>
c001643b:	83 c4 10             	add    esp,0x10
c001643e:	83 ec 08             	sub    esp,0x8
c0016441:	68 5c 01 00 00       	push   0x15c
c0016446:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001644a:	e8 42 ca ff ff       	call   c0012e91 <operator delete(void*, unsigned long)>
c001644f:	83 c4 10             	add    esp,0x10
c0016452:	83 c4 0c             	add    esp,0xc
c0016455:	c3                   	ret    

c0016456 <LogicalDisk::close(int, int, void*)>:
c0016456:	83 c8 ff             	or     eax,0xffffffff
c0016459:	c3                   	ret    

c001645a <LogicalDisk::~LogicalDisk()>:
c001645a:	83 ec 0c             	sub    esp,0xc
c001645d:	ba 04 b4 02 c0       	mov    edx,0xc002b404
c0016462:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016466:	89 10                	mov    DWORD PTR [eax],edx
c0016468:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001646c:	83 ec 0c             	sub    esp,0xc
c001646f:	50                   	push   eax
c0016470:	e8 f5 dd ff ff       	call   c001426a <Device::~Device()>
c0016475:	83 c4 10             	add    esp,0x10
c0016478:	90                   	nop
c0016479:	83 c4 0c             	add    esp,0xc
c001647c:	c3                   	ret    
c001647d:	90                   	nop

c001647e <LogicalDisk::~LogicalDisk()>:
c001647e:	83 ec 0c             	sub    esp,0xc
c0016481:	83 ec 0c             	sub    esp,0xc
c0016484:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016488:	e8 cd ff ff ff       	call   c001645a <LogicalDisk::~LogicalDisk()>
c001648d:	83 c4 10             	add    esp,0x10
c0016490:	83 ec 08             	sub    esp,0x8
c0016493:	68 74 01 00 00       	push   0x174
c0016498:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001649c:	e8 f0 c9 ff ff       	call   c0012e91 <operator delete(void*, unsigned long)>
c00164a1:	83 c4 10             	add    esp,0x10
c00164a4:	83 c4 0c             	add    esp,0xc
c00164a7:	c3                   	ret    

c00164a8 <LogicalDisk::open(int, int, void*)>:
c00164a8:	83 ec 18             	sub    esp,0x18
c00164ab:	68 80 b3 02 c0       	push   0xc002b380
c00164b0:	e8 6e 41 00 00       	call   c001a623 <Krnl::panic(char const*)>
c00164b5:	83 c8 ff             	or     eax,0xffffffff
c00164b8:	83 c4 1c             	add    esp,0x1c
c00164bb:	c3                   	ret    

c00164bc <LogicalDisk::absoluteToRelative(unsigned long long)>:
c00164bc:	53                   	push   ebx
c00164bd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00164c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00164c5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00164c9:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00164cf:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00164d5:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00164db:	77 10                	ja     c00164ed <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00164dd:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00164e3:	89 d3                	mov    ebx,edx
c00164e5:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c00164eb:	72 05                	jb     c00164f2 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c00164ed:	83 c8 ff             	or     eax,0xffffffff
c00164f0:	89 c2                	mov    edx,eax
c00164f2:	5b                   	pop    ebx
c00164f3:	c3                   	ret    

c00164f4 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00164f4:	56                   	push   esi
c00164f5:	83 c8 ff             	or     eax,0xffffffff
c00164f8:	53                   	push   ebx
c00164f9:	89 c2                	mov    edx,eax
c00164fb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00164ff:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0016503:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016507:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001650d:	77 27                	ja     c0016536 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001650f:	89 d8                	mov    eax,ebx
c0016511:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0016517:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c001651d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016522:	89 c2                	mov    edx,eax
c0016524:	73 10                	jae    c0016536 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0016526:	89 c8                	mov    eax,ecx
c0016528:	89 da                	mov    edx,ebx
c001652a:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0016530:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0016536:	5b                   	pop    ebx
c0016537:	5e                   	pop    esi
c0016538:	c3                   	ret    
c0016539:	90                   	nop

c001653a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c001653a:	83 ec 1c             	sub    esp,0x1c
c001653d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016541:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016545:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016549:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001654d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016551:	89 04 24             	mov    DWORD PTR [esp],eax
c0016554:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016558:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001655c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016560:	83 ec 08             	sub    esp,0x8
c0016563:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016567:	50                   	push   eax
c0016568:	e8 1b e0 ff ff       	call   c0014588 <Device::Device(char const*)>
c001656d:	83 c4 10             	add    esp,0x10
c0016570:	ba 04 b4 02 c0       	mov    edx,0xc002b404
c0016575:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016579:	89 10                	mov    DWORD PTR [eax],edx
c001657b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001657f:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016586:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001658a:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016591:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016595:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c001659f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00165a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00165a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00165ab:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c00165b1:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c00165b7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00165bb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00165be:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00165c2:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00165c8:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00165ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165d2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00165d6:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00165dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165e0:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00165ea:	90                   	nop
c00165eb:	83 c4 1c             	add    esp,0x1c
c00165ee:	c3                   	ret    
c00165ef:	90                   	nop

c00165f0 <LogicalDisk::assignDriveLetter()>:
c00165f0:	55                   	push   ebp
c00165f1:	57                   	push   edi
c00165f2:	56                   	push   esi
c00165f3:	53                   	push   ebx
c00165f4:	83 ec 14             	sub    esp,0x14
c00165f7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00165fb:	8b 3d 40 ec 02 c0    	mov    edi,DWORD PTR ds:0xc002ec40
c0016601:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0016607:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001660b:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0016611:	8b 3d 44 ec 02 c0    	mov    edi,DWORD PTR ds:0xc002ec44
c0016617:	3c 01                	cmp    al,0x1
c0016619:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001661d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016621:	19 c0                	sbb    eax,eax
c0016623:	83 e0 02             	and    eax,0x2
c0016626:	83 c0 41             	add    eax,0x41
c0016629:	0f be e8             	movsx  ebp,al
c001662c:	3c 43                	cmp    al,0x43
c001662e:	75 10                	jne    c0016640 <LogicalDisk::assignDriveLetter()+0x50>
c0016630:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0016637:	75 5d                	jne    c0016696 <LogicalDisk::assignDriveLetter()+0xa6>
c0016639:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001663e:	75 56                	jne    c0016696 <LogicalDisk::assignDriveLetter()+0xa6>
c0016640:	8d 75 bf             	lea    esi,[ebp-0x41]
c0016643:	ba 01 00 00 00       	mov    edx,0x1
c0016648:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c001664c:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0016650:	d3 e2                	shl    edx,cl
c0016652:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016656:	89 d7                	mov    edi,edx
c0016658:	89 d6                	mov    esi,edx
c001665a:	c1 ff 1f             	sar    edi,0x1f
c001665d:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0016661:	21 f9                	and    ecx,edi
c0016663:	09 d1                	or     ecx,edx
c0016665:	75 2f                	jne    c0016696 <LogicalDisk::assignDriveLetter()+0xa6>
c0016667:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001666b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001666f:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0016675:	09 f2                	or     edx,esi
c0016677:	89 15 40 ec 02 c0    	mov    DWORD PTR ds:0xc002ec40,edx
c001667d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016681:	09 fa                	or     edx,edi
c0016683:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0016687:	89 15 44 ec 02 c0    	mov    DWORD PTR ds:0xc002ec44,edx
c001668d:	89 1c bd 60 ec 02 c0 	mov    DWORD PTR [edi*4-0x3ffd13a0],ebx
c0016694:	eb 08                	jmp    c001669e <LogicalDisk::assignDriveLetter()+0xae>
c0016696:	45                   	inc    ebp
c0016697:	40                   	inc    eax
c0016698:	3c 5b                	cmp    al,0x5b
c001669a:	75 90                	jne    c001662c <LogicalDisk::assignDriveLetter()+0x3c>
c001669c:	31 c0                	xor    eax,eax
c001669e:	83 c4 14             	add    esp,0x14
c00166a1:	5b                   	pop    ebx
c00166a2:	5e                   	pop    esi
c00166a3:	5f                   	pop    edi
c00166a4:	5d                   	pop    ebp
c00166a5:	c3                   	ret    

c00166a6 <LogicalDisk::mount()>:
c00166a6:	56                   	push   esi
c00166a7:	53                   	push   ebx
c00166a8:	51                   	push   ecx
c00166a9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00166ad:	8b 1d cc e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e7cc
c00166b3:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00166bd:	85 db                	test   ebx,ebx
c00166bf:	74 50                	je     c0016711 <LogicalDisk::mount()+0x6b>
c00166c1:	e8 6d 77 00 00       	call   c001de33 <getIRQNestingLevel()>
c00166c6:	52                   	push   edx
c00166c7:	52                   	push   edx
c00166c8:	50                   	push   eax
c00166c9:	68 a4 b3 02 c0       	push   0xc002b3a4
c00166ce:	e8 9e c8 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c00166d3:	83 c4 0c             	add    esp,0xc
c00166d6:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00166dd:	8b 13                	mov    edx,DWORD PTR [ebx]
c00166df:	83 e8 41             	sub    eax,0x41
c00166e2:	50                   	push   eax
c00166e3:	56                   	push   esi
c00166e4:	53                   	push   ebx
c00166e5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00166e8:	83 c4 10             	add    esp,0x10
c00166eb:	84 c0                	test   al,al
c00166ed:	74 08                	je     c00166f7 <LogicalDisk::mount()+0x51>
c00166ef:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00166f5:	eb 1c                	jmp    c0016713 <LogicalDisk::mount()+0x6d>
c00166f7:	e8 37 77 00 00       	call   c001de33 <getIRQNestingLevel()>
c00166fc:	51                   	push   ecx
c00166fd:	51                   	push   ecx
c00166fe:	50                   	push   eax
c00166ff:	68 bf b3 02 c0       	push   0xc002b3bf
c0016704:	e8 68 c8 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0016709:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001670c:	83 c4 10             	add    esp,0x10
c001670f:	eb ac                	jmp    c00166bd <LogicalDisk::mount()+0x17>
c0016711:	31 c0                	xor    eax,eax
c0016713:	5a                   	pop    edx
c0016714:	5b                   	pop    ebx
c0016715:	5e                   	pop    esi
c0016716:	c3                   	ret    
c0016717:	90                   	nop

c0016718 <LogicalDisk::unmount()>:
c0016718:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001671c:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016726:	c3                   	ret    
c0016727:	90                   	nop

c0016728 <LogicalDisk::eject()>:
c0016728:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001672c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016732:	8b 10                	mov    edx,DWORD PTR [eax]
c0016734:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016738:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c001673b:	90                   	nop

c001673c <LogicalDisk::unassignDriveLetter()>:
c001673c:	57                   	push   edi
c001673d:	56                   	push   esi
c001673e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016742:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0016749:	84 c9                	test   cl,cl
c001674b:	75 0f                	jne    c001675c <LogicalDisk::unassignDriveLetter()+0x20>
c001674d:	c7 44 24 0c da b3 02 c0 	mov    DWORD PTR [esp+0xc],0xc002b3da
c0016755:	5e                   	pop    esi
c0016756:	5f                   	pop    edi
c0016757:	e9 c7 3e 00 00       	jmp    c001a623 <Krnl::panic(char const*)>
c001675c:	83 e9 41             	sub    ecx,0x41
c001675f:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0016766:	b8 01 00 00 00       	mov    eax,0x1
c001676b:	c7 04 8d 60 ec 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd13a0],0x0
c0016776:	d3 e0                	shl    eax,cl
c0016778:	89 c7                	mov    edi,eax
c001677a:	f7 d0                	not    eax
c001677c:	c1 ff 1f             	sar    edi,0x1f
c001677f:	21 05 40 ec 02 c0    	and    DWORD PTR ds:0xc002ec40,eax
c0016785:	89 fe                	mov    esi,edi
c0016787:	f7 d6                	not    esi
c0016789:	21 35 44 ec 02 c0    	and    DWORD PTR ds:0xc002ec44,esi
c001678f:	5e                   	pop    esi
c0016790:	5f                   	pop    edi
c0016791:	c3                   	ret    

c0016792 <LogicalDisk::read(unsigned long long, int, void*)>:
c0016792:	57                   	push   edi
c0016793:	56                   	push   esi
c0016794:	53                   	push   ebx
c0016795:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016799:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001679d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00167a1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00167a5:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00167ab:	77 41                	ja     c00167ee <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00167ad:	99                   	cdq    
c00167ae:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00167b4:	01 c8                	add    eax,ecx
c00167b6:	11 da                	adc    edx,ebx
c00167b8:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00167be:	19 d7                	sbb    edi,edx
c00167c0:	72 33                	jb     c00167f5 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00167c2:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00167c8:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00167ce:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00167d2:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00167d6:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00167dc:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00167e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00167e6:	5b                   	pop    ebx
c00167e7:	5e                   	pop    esi
c00167e8:	5f                   	pop    edi
c00167e9:	e9 b0 0a 00 00       	jmp    c001729e <VCache::read(unsigned long long, int, void*)>
c00167ee:	b8 05 00 00 00       	mov    eax,0x5
c00167f3:	eb 05                	jmp    c00167fa <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00167f5:	b8 07 00 00 00       	mov    eax,0x7
c00167fa:	5b                   	pop    ebx
c00167fb:	5e                   	pop    esi
c00167fc:	5f                   	pop    edi
c00167fd:	c3                   	ret    

c00167fe <LogicalDisk::write(unsigned long long, int, void*)>:
c00167fe:	57                   	push   edi
c00167ff:	56                   	push   esi
c0016800:	53                   	push   ebx
c0016801:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016805:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016809:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001680d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016811:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016817:	77 41                	ja     c001685a <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0016819:	99                   	cdq    
c001681a:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016820:	01 c8                	add    eax,ecx
c0016822:	11 da                	adc    edx,ebx
c0016824:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001682a:	19 d7                	sbb    edi,edx
c001682c:	72 33                	jb     c0016861 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c001682e:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016834:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001683a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001683e:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016842:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016848:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001684e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016852:	5b                   	pop    ebx
c0016853:	5e                   	pop    esi
c0016854:	5f                   	pop    edi
c0016855:	e9 4e 09 00 00       	jmp    c00171a8 <VCache::write(unsigned long long, int, void*)>
c001685a:	b8 05 00 00 00       	mov    eax,0x5
c001685f:	eb 05                	jmp    c0016866 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0016861:	b8 07 00 00 00       	mov    eax,0x7
c0016866:	5b                   	pop    ebx
c0016867:	5e                   	pop    esi
c0016868:	5f                   	pop    edi
c0016869:	c3                   	ret    

c001686a <Mouse::Mouse(char const*)>:
c001686a:	83 ec 0c             	sub    esp,0xc
c001686d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016871:	83 ec 08             	sub    esp,0x8
c0016874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016878:	50                   	push   eax
c0016879:	e8 0a dd ff ff       	call   c0014588 <Device::Device(char const*)>
c001687e:	83 c4 10             	add    esp,0x10
c0016881:	ba 30 b4 02 c0       	mov    edx,0xc002b430
c0016886:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001688a:	89 10                	mov    DWORD PTR [eax],edx
c001688c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016890:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c001689a:	90                   	nop
c001689b:	83 c4 0c             	add    esp,0xc
c001689e:	c3                   	ret    
c001689f:	90                   	nop

c00168a0 <Mouse::~Mouse()>:
c00168a0:	83 ec 0c             	sub    esp,0xc
c00168a3:	ba 30 b4 02 c0       	mov    edx,0xc002b430
c00168a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168ac:	89 10                	mov    DWORD PTR [eax],edx
c00168ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168b2:	83 ec 0c             	sub    esp,0xc
c00168b5:	50                   	push   eax
c00168b6:	e8 af d9 ff ff       	call   c001426a <Device::~Device()>
c00168bb:	83 c4 10             	add    esp,0x10
c00168be:	90                   	nop
c00168bf:	83 c4 0c             	add    esp,0xc
c00168c2:	c3                   	ret    
c00168c3:	90                   	nop

c00168c4 <Mouse::~Mouse()>:
c00168c4:	83 ec 0c             	sub    esp,0xc
c00168c7:	83 ec 0c             	sub    esp,0xc
c00168ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168ce:	e8 cd ff ff ff       	call   c00168a0 <Mouse::~Mouse()>
c00168d3:	83 c4 10             	add    esp,0x10
c00168d6:	83 ec 08             	sub    esp,0x8
c00168d9:	68 58 01 00 00       	push   0x158
c00168de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168e2:	e8 aa c5 ff ff       	call   c0012e91 <operator delete(void*, unsigned long)>
c00168e7:	83 c4 10             	add    esp,0x10
c00168ea:	83 c4 0c             	add    esp,0xc
c00168ed:	c3                   	ret    

c00168ee <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00168ee:	55                   	push   ebp
c00168ef:	57                   	push   edi
c00168f0:	56                   	push   esi
c00168f1:	53                   	push   ebx
c00168f2:	81 ec 28 01 00 00    	sub    esp,0x128
c00168f8:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00168ff:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0016906:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c001690d:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0016914:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016918:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001691c:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016923:	e8 5c dd ff ff       	call   c0014684 <Device::getName()>
c0016928:	5a                   	pop    edx
c0016929:	59                   	pop    ecx
c001692a:	50                   	push   eax
c001692b:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001692f:	55                   	push   ebp
c0016930:	e8 ff 9e fe ff       	call   c0000834 <strcpy>
c0016935:	5b                   	pop    ebx
c0016936:	58                   	pop    eax
c0016937:	68 54 b4 02 c0       	push   0xc002b454
c001693c:	55                   	push   ebp
c001693d:	e8 32 a0 fe ff       	call   c0000974 <strcat>
c0016942:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0016949:	e8 f2 8e ff ff       	call   c000f840 <malloc>
c001694e:	83 c4 0c             	add    esp,0xc
c0016951:	89 c3                	mov    ebx,eax
c0016953:	57                   	push   edi
c0016954:	56                   	push   esi
c0016955:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016959:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001695d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0016964:	55                   	push   ebp
c0016965:	50                   	push   eax
c0016966:	e8 cf fb ff ff       	call   c001653a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001696b:	83 c4 14             	add    esp,0x14
c001696e:	53                   	push   ebx
c001696f:	e8 7c fc ff ff       	call   c00165f0 <LogicalDisk::assignDriveLetter()>
c0016974:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016977:	89 c6                	mov    esi,eax
c0016979:	e8 28 fd ff ff       	call   c00166a6 <LogicalDisk::mount()>
c001697e:	58                   	pop    eax
c001697f:	5a                   	pop    edx
c0016980:	53                   	push   ebx
c0016981:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016988:	e8 0b da ff ff       	call   c0014398 <Device::addChild(Device*)>
c001698d:	59                   	pop    ecx
c001698e:	89 f0                	mov    eax,esi
c0016990:	5b                   	pop    ebx
c0016991:	0f be f0             	movsx  esi,al
c0016994:	56                   	push   esi
c0016995:	68 5f b4 02 c0       	push   0xc002b45f
c001699a:	e8 d2 c5 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001699f:	81 c4 2c 01 00 00    	add    esp,0x12c
c00169a5:	5b                   	pop    ebx
c00169a6:	5e                   	pop    esi
c00169a7:	5f                   	pop    edi
c00169a8:	5d                   	pop    ebp
c00169a9:	c3                   	ret    

c00169aa <createPartitionsForDisk(PhysicalDisk*)>:
c00169aa:	55                   	push   ebp
c00169ab:	57                   	push   edi
c00169ac:	56                   	push   esi
c00169ad:	53                   	push   ebx
c00169ae:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00169b4:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00169bb:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00169c1:	3d 00 02 00 00       	cmp    eax,0x200
c00169c6:	74 27                	je     c00169ef <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00169c8:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c00169ce:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c00169d4:	83 ec 10             	sub    esp,0x10
c00169d7:	0f a4 f7 0a          	shld   edi,esi,0xa
c00169db:	99                   	cdq    
c00169dc:	c1 e6 0a             	shl    esi,0xa
c00169df:	52                   	push   edx
c00169e0:	89 fd                	mov    ebp,edi
c00169e2:	50                   	push   eax
c00169e3:	55                   	push   ebp
c00169e4:	56                   	push   esi
c00169e5:	e8 42 00 01 00       	call   c0026a2c <__udivdi3>
c00169ea:	e9 b1 00 00 00       	jmp    c0016aa0 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00169ef:	83 ec 0c             	sub    esp,0xc
c00169f2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00169f4:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00169f8:	56                   	push   esi
c00169f9:	6a 01                	push   0x1
c00169fb:	6a 00                	push   0x0
c00169fd:	6a 00                	push   0x0
c00169ff:	53                   	push   ebx
c0016a00:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016a03:	83 c4 20             	add    esp,0x20
c0016a06:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016a0e:	75 0a                	jne    c0016a1a <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016a10:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016a18:	74 2c                	je     c0016a46 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016a1a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016a20:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016a26:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016a2c:	83 ec 10             	sub    esp,0x10
c0016a2f:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016a33:	89 f7                	mov    edi,esi
c0016a35:	c1 e0 0a             	shl    eax,0xa
c0016a38:	c1 ff 1f             	sar    edi,0x1f
c0016a3b:	57                   	push   edi
c0016a3c:	56                   	push   esi
c0016a3d:	52                   	push   edx
c0016a3e:	50                   	push   eax
c0016a3f:	e8 e8 ff 00 00       	call   c0026a2c <__udivdi3>
c0016a44:	eb 5a                	jmp    c0016aa0 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016a46:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016a4d:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016a54:	83 e1 7f             	and    ecx,0x7f
c0016a57:	83 e0 7f             	and    eax,0x7f
c0016a5a:	01 c1                	add    ecx,eax
c0016a5c:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016a63:	83 e0 7f             	and    eax,0x7f
c0016a66:	01 c1                	add    ecx,eax
c0016a68:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016a6f:	83 e0 7f             	and    eax,0x7f
c0016a72:	00 c1                	add    cl,al
c0016a74:	74 41                	je     c0016ab7 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016a76:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016a7c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016a82:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016a88:	83 ec 10             	sub    esp,0x10
c0016a8b:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016a8f:	89 f7                	mov    edi,esi
c0016a91:	c1 e0 0a             	shl    eax,0xa
c0016a94:	c1 ff 1f             	sar    edi,0x1f
c0016a97:	57                   	push   edi
c0016a98:	56                   	push   esi
c0016a99:	52                   	push   edx
c0016a9a:	50                   	push   eax
c0016a9b:	e8 8c ff 00 00       	call   c0026a2c <__udivdi3>
c0016aa0:	83 c4 14             	add    esp,0x14
c0016aa3:	52                   	push   edx
c0016aa4:	50                   	push   eax
c0016aa5:	6a 00                	push   0x0
c0016aa7:	6a 00                	push   0x0
c0016aa9:	53                   	push   ebx
c0016aaa:	e8 3f fe ff ff       	call   c00168ee <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016aaf:	83 c4 20             	add    esp,0x20
c0016ab2:	e9 79 01 00 00       	jmp    c0016c30 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016ab7:	89 f0                	mov    eax,esi
c0016ab9:	31 f6                	xor    esi,esi
c0016abb:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016ac2:	75 02                	jne    c0016ac6 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016ac4:	89 f1                	mov    ecx,esi
c0016ac6:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016acd:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016ad4:	c1 e2 08             	shl    edx,0x8
c0016ad7:	c1 e7 10             	shl    edi,0x10
c0016ada:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016ae2:	09 fa                	or     edx,edi
c0016ae4:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016aec:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016af3:	83 c0 10             	add    eax,0x10
c0016af6:	09 fa                	or     edx,edi
c0016af8:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016aff:	c1 e7 18             	shl    edi,0x18
c0016b02:	09 fa                	or     edx,edi
c0016b04:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016b0b:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016b0f:	c1 e7 10             	shl    edi,0x10
c0016b12:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016b19:	c1 e2 08             	shl    edx,0x8
c0016b1c:	09 fa                	or     edx,edi
c0016b1e:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016b25:	09 fa                	or     edx,edi
c0016b27:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016b2e:	c1 e7 18             	shl    edi,0x18
c0016b31:	09 fa                	or     edx,edi
c0016b33:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016b37:	46                   	inc    esi
c0016b38:	83 fe 04             	cmp    esi,0x4
c0016b3b:	0f 85 7a ff ff ff    	jne    c0016abb <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016b41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b45:	83 f0 01             	xor    eax,0x1
c0016b48:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016b4c:	75 57                	jne    c0016ba5 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016b4e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b52:	83 f0 01             	xor    eax,0x1
c0016b55:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016b59:	75 4a                	jne    c0016ba5 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016b5b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016b5f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016b67:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016b6f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016b75:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016b7b:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016b81:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016b85:	89 f7                	mov    edi,esi
c0016b87:	c1 e0 0a             	shl    eax,0xa
c0016b8a:	c1 ff 1f             	sar    edi,0x1f
c0016b8d:	57                   	push   edi
c0016b8e:	56                   	push   esi
c0016b8f:	52                   	push   edx
c0016b90:	50                   	push   eax
c0016b91:	e8 96 fe 00 00       	call   c0026a2c <__udivdi3>
c0016b96:	83 c4 10             	add    esp,0x10
c0016b99:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016b9d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016ba1:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016ba5:	84 c9                	test   cl,cl
c0016ba7:	74 53                	je     c0016bfc <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016ba9:	0f b6 c9             	movzx  ecx,cl
c0016bac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016bb4:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016bb8:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016bbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016bc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016bc4:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016bc8:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016bcc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016bd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016bd4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016bd8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016bdc:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016be0:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016be4:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016be8:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016bec:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016bf0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016bf4:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016bf8:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016bfc:	31 ed                	xor    ebp,ebp
c0016bfe:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016c02:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016c06:	89 f8                	mov    eax,edi
c0016c08:	09 f0                	or     eax,esi
c0016c0a:	74 1e                	je     c0016c2a <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016c0c:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016c10:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016c14:	89 d1                	mov    ecx,edx
c0016c16:	09 c1                	or     ecx,eax
c0016c18:	74 10                	je     c0016c2a <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016c1a:	83 ec 0c             	sub    esp,0xc
c0016c1d:	57                   	push   edi
c0016c1e:	56                   	push   esi
c0016c1f:	52                   	push   edx
c0016c20:	50                   	push   eax
c0016c21:	53                   	push   ebx
c0016c22:	e8 c7 fc ff ff       	call   c00168ee <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016c27:	83 c4 20             	add    esp,0x20
c0016c2a:	45                   	inc    ebp
c0016c2b:	83 fd 04             	cmp    ebp,0x4
c0016c2e:	75 ce                	jne    c0016bfe <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016c30:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016c36:	5b                   	pop    ebx
c0016c37:	5e                   	pop    esi
c0016c38:	5f                   	pop    edi
c0016c39:	5d                   	pop    ebp
c0016c3a:	c3                   	ret    
c0016c3b:	90                   	nop

c0016c3c <Serial::Serial(char const*)>:
c0016c3c:	83 ec 0c             	sub    esp,0xc
c0016c3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c43:	83 ec 08             	sub    esp,0x8
c0016c46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c4a:	50                   	push   eax
c0016c4b:	e8 38 d9 ff ff       	call   c0014588 <Device::Device(char const*)>
c0016c50:	83 c4 10             	add    esp,0x10
c0016c53:	ba 8c b4 02 c0       	mov    edx,0xc002b48c
c0016c58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c5c:	89 10                	mov    DWORD PTR [eax],edx
c0016c5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c62:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016c6c:	90                   	nop
c0016c6d:	83 c4 0c             	add    esp,0xc
c0016c70:	c3                   	ret    
c0016c71:	90                   	nop

c0016c72 <Serial::~Serial()>:
c0016c72:	83 ec 0c             	sub    esp,0xc
c0016c75:	ba 8c b4 02 c0       	mov    edx,0xc002b48c
c0016c7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c7e:	89 10                	mov    DWORD PTR [eax],edx
c0016c80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c84:	83 ec 0c             	sub    esp,0xc
c0016c87:	50                   	push   eax
c0016c88:	e8 dd d5 ff ff       	call   c001426a <Device::~Device()>
c0016c8d:	83 c4 10             	add    esp,0x10
c0016c90:	90                   	nop
c0016c91:	83 c4 0c             	add    esp,0xc
c0016c94:	c3                   	ret    
c0016c95:	90                   	nop

c0016c96 <Serial::~Serial()>:
c0016c96:	83 ec 0c             	sub    esp,0xc
c0016c99:	83 ec 0c             	sub    esp,0xc
c0016c9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ca0:	e8 cd ff ff ff       	call   c0016c72 <Serial::~Serial()>
c0016ca5:	83 c4 10             	add    esp,0x10
c0016ca8:	83 ec 08             	sub    esp,0x8
c0016cab:	68 58 01 00 00       	push   0x158
c0016cb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cb4:	e8 d8 c1 ff ff       	call   c0012e91 <operator delete(void*, unsigned long)>
c0016cb9:	83 c4 10             	add    esp,0x10
c0016cbc:	83 c4 0c             	add    esp,0xc
c0016cbf:	c3                   	ret    

c0016cc0 <Timer::Timer(char const*)>:
c0016cc0:	83 ec 0c             	sub    esp,0xc
c0016cc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cc7:	83 ec 08             	sub    esp,0x8
c0016cca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cce:	50                   	push   eax
c0016ccf:	e8 b4 d8 ff ff       	call   c0014588 <Device::Device(char const*)>
c0016cd4:	83 c4 10             	add    esp,0x10
c0016cd7:	ba d0 b4 02 c0       	mov    edx,0xc002b4d0
c0016cdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ce0:	89 10                	mov    DWORD PTR [eax],edx
c0016ce2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ce6:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016cf0:	90                   	nop
c0016cf1:	83 c4 0c             	add    esp,0xc
c0016cf4:	c3                   	ret    
c0016cf5:	90                   	nop

c0016cf6 <Timer::~Timer()>:
c0016cf6:	83 ec 0c             	sub    esp,0xc
c0016cf9:	ba d0 b4 02 c0       	mov    edx,0xc002b4d0
c0016cfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d02:	89 10                	mov    DWORD PTR [eax],edx
c0016d04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d08:	83 ec 0c             	sub    esp,0xc
c0016d0b:	50                   	push   eax
c0016d0c:	e8 59 d5 ff ff       	call   c001426a <Device::~Device()>
c0016d11:	83 c4 10             	add    esp,0x10
c0016d14:	90                   	nop
c0016d15:	83 c4 0c             	add    esp,0xc
c0016d18:	c3                   	ret    
c0016d19:	90                   	nop

c0016d1a <Timer::~Timer()>:
c0016d1a:	83 ec 0c             	sub    esp,0xc
c0016d1d:	83 ec 0c             	sub    esp,0xc
c0016d20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d24:	e8 cd ff ff ff       	call   c0016cf6 <Timer::~Timer()>
c0016d29:	83 c4 10             	add    esp,0x10
c0016d2c:	83 ec 08             	sub    esp,0x8
c0016d2f:	68 5c 01 00 00       	push   0x15c
c0016d34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d38:	e8 54 c1 ff ff       	call   c0012e91 <operator delete(void*, unsigned long)>
c0016d3d:	83 c4 10             	add    esp,0x10
c0016d40:	83 c4 0c             	add    esp,0xc
c0016d43:	c3                   	ret    

c0016d44 <Timer::read()>:
c0016d44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d48:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016d4e:	c3                   	ret    

c0016d4f <timerHandler(unsigned long long)>:
c0016d4f:	55                   	push   ebp
c0016d50:	57                   	push   edi
c0016d51:	56                   	push   esi
c0016d52:	53                   	push   ebx
c0016d53:	83 ec 0c             	sub    esp,0xc
c0016d56:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016d5a:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016d5e:	01 35 d0 ec 02 c0    	add    DWORD PTR ds:0xc002ecd0,esi
c0016d64:	11 3d d4 ec 02 c0    	adc    DWORD PTR ds:0xc002ecd4,edi
c0016d6a:	80 3d 4d e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e64d,0x0
c0016d71:	0f 84 07 01 00 00    	je     c0016e7e <timerHandler(unsigned long long)+0x12f>
c0016d77:	e8 f3 70 00 00       	call   c001de6f <lockStuff()>
c0016d7c:	83 ec 0c             	sub    esp,0xc
c0016d7f:	68 9c 1b 03 c0       	push   0xc0031b9c
c0016d84:	e8 15 1d 01 00       	call   c0028a9e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016d89:	c7 04 24 9c 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b9c
c0016d90:	89 c3                	mov    ebx,eax
c0016d92:	e8 0f 1d 01 00       	call   c0028aa6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016d97:	83 c4 10             	add    esp,0x10
c0016d9a:	84 c0                	test   al,al
c0016d9c:	74 60                	je     c0016dfe <timerHandler(unsigned long long)+0xaf>
c0016d9e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016da4:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0016da7:	85 c0                	test   eax,eax
c0016da9:	0f 85 91 00 00 00    	jne    c0016e40 <timerHandler(unsigned long long)+0xf1>
c0016daf:	e9 be 00 00 00       	jmp    c0016e72 <timerHandler(unsigned long long)+0x123>
c0016db4:	83 ec 0c             	sub    esp,0xc
c0016db7:	55                   	push   ebp
c0016db8:	e8 a3 76 00 00       	call   c001e460 <unblockTask(ThreadControlBlock*)>
c0016dbd:	83 c4 10             	add    esp,0x10
c0016dc0:	39 eb                	cmp    ebx,ebp
c0016dc2:	75 12                	jne    c0016dd6 <timerHandler(unsigned long long)+0x87>
c0016dc4:	83 ec 0c             	sub    esp,0xc
c0016dc7:	68 9c 1b 03 c0       	push   0xc0031b9c
c0016dcc:	e8 cd 1c 01 00       	call   c0028a9e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016dd1:	89 c3                	mov    ebx,eax
c0016dd3:	83 c4 10             	add    esp,0x10
c0016dd6:	83 ec 0c             	sub    esp,0xc
c0016dd9:	68 9c 1b 03 c0       	push   0xc0031b9c
c0016dde:	e8 c3 1c 01 00       	call   c0028aa6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016de3:	83 c4 10             	add    esp,0x10
c0016de6:	84 c0                	test   al,al
c0016de8:	75 b4                	jne    c0016d9e <timerHandler(unsigned long long)+0x4f>
c0016dea:	83 ec 0c             	sub    esp,0xc
c0016ded:	68 9c 1b 03 c0       	push   0xc0031b9c
c0016df2:	e8 a7 1c 01 00       	call   c0028a9e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016df7:	83 c4 10             	add    esp,0x10
c0016dfa:	39 d8                	cmp    eax,ebx
c0016dfc:	74 a0                	je     c0016d9e <timerHandler(unsigned long long)+0x4f>
c0016dfe:	83 ec 0c             	sub    esp,0xc
c0016e01:	68 9c 1b 03 c0       	push   0xc0031b9c
c0016e06:	e8 93 1c 01 00       	call   c0028a9e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e0b:	c7 04 24 9c 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b9c
c0016e12:	89 c5                	mov    ebp,eax
c0016e14:	e8 a9 1c 01 00       	call   c0028ac2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016e19:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016e1c:	83 c4 10             	add    esp,0x10
c0016e1f:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016e22:	39 15 d0 ec 02 c0    	cmp    DWORD PTR ds:0xc002ecd0,edx
c0016e28:	a1 d4 ec 02 c0       	mov    eax,ds:0xc002ecd4
c0016e2d:	19 c8                	sbb    eax,ecx
c0016e2f:	73 83                	jae    c0016db4 <timerHandler(unsigned long long)+0x65>
c0016e31:	50                   	push   eax
c0016e32:	50                   	push   eax
c0016e33:	55                   	push   ebp
c0016e34:	68 9c 1b 03 c0       	push   0xc0031b9c
c0016e39:	e8 32 1d 01 00       	call   c0028b70 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016e3e:	eb 93                	jmp    c0016dd3 <timerHandler(unsigned long long)+0x84>
c0016e40:	80 3d 4c e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e64c,0x0
c0016e47:	74 29                	je     c0016e72 <timerHandler(unsigned long long)+0x123>
c0016e49:	39 c6                	cmp    esi,eax
c0016e4b:	bb 00 00 00 00       	mov    ebx,0x0
c0016e50:	19 df                	sbb    edi,ebx
c0016e52:	72 19                	jb     c0016e6d <timerHandler(unsigned long long)+0x11e>
c0016e54:	e8 ef 6f 00 00       	call   c001de48 <lockScheduler()>
c0016e59:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e5e:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016e61:	e8 1e 73 00 00       	call   c001e184 <schedule()>
c0016e66:	e8 df 6f 00 00       	call   c001de4a <unlockScheduler()>
c0016e6b:	eb 05                	jmp    c0016e72 <timerHandler(unsigned long long)+0x123>
c0016e6d:	29 f0                	sub    eax,esi
c0016e6f:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0016e72:	83 c4 0c             	add    esp,0xc
c0016e75:	5b                   	pop    ebx
c0016e76:	5e                   	pop    esi
c0016e77:	5f                   	pop    edi
c0016e78:	5d                   	pop    ebp
c0016e79:	e9 8b 73 00 00       	jmp    c001e209 <unlockStuff()>
c0016e7e:	83 c4 0c             	add    esp,0xc
c0016e81:	5b                   	pop    ebx
c0016e82:	5e                   	pop    esi
c0016e83:	5f                   	pop    edi
c0016e84:	5d                   	pop    ebp
c0016e85:	c3                   	ret    

c0016e86 <setupTimer(int)>:
c0016e86:	57                   	push   edi
c0016e87:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c0016e8c:	56                   	push   esi
c0016e8d:	53                   	push   ebx
c0016e8e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016e92:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016e98:	83 ec 0c             	sub    esp,0xc
c0016e9b:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016ea1:	e8 de d7 ff ff       	call   c0014684 <Device::getName()>
c0016ea6:	83 c4 10             	add    esp,0x10
c0016ea9:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016eac:	0f 85 8d 00 00 00    	jne    c0016f3f <setupTimer(int)+0xb9>
c0016eb2:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c0016eb7:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016ebe:	74 7f                	je     c0016f3f <setupTimer(int)+0xb9>
c0016ec0:	83 ec 0c             	sub    esp,0xc
c0016ec3:	68 5c 01 00 00       	push   0x15c
c0016ec8:	e8 73 89 ff ff       	call   c000f840 <malloc>
c0016ecd:	89 04 24             	mov    DWORD PTR [esp],eax
c0016ed0:	89 c3                	mov    ebx,eax
c0016ed2:	e8 2b f7 00 00       	call   c0026602 <PIT::PIT()>
c0016ed7:	59                   	pop    ecx
c0016ed8:	5f                   	pop    edi
c0016ed9:	53                   	push   ebx
c0016eda:	ff 35 48 e6 02 c0    	push   DWORD PTR ds:0xc002e648
c0016ee0:	e8 b3 d4 ff ff       	call   c0014398 <Device::addChild(Device*)>
c0016ee5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016ee7:	6a 00                	push   0x0
c0016ee9:	6a 00                	push   0x0
c0016eeb:	56                   	push   esi
c0016eec:	53                   	push   ebx
c0016eed:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016ef0:	83 c4 14             	add    esp,0x14
c0016ef3:	68 60 01 00 00       	push   0x160
c0016ef8:	e8 43 89 ff ff       	call   c000f840 <malloc>
c0016efd:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f00:	89 c7                	mov    edi,eax
c0016f02:	e8 ab f5 00 00       	call   c00264b2 <APICTimer::APICTimer()>
c0016f07:	6a 00                	push   0x0
c0016f09:	6a 00                	push   0x0
c0016f0b:	56                   	push   esi
c0016f0c:	57                   	push   edi
c0016f0d:	e8 a2 f4 00 00       	call   c00263b4 <APICTimer::open(int, int, void*)>
c0016f12:	83 c4 20             	add    esp,0x20
c0016f15:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f17:	6a 00                	push   0x0
c0016f19:	6a 00                	push   0x0
c0016f1b:	6a 00                	push   0x0
c0016f1d:	53                   	push   ebx
c0016f1e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016f21:	58                   	pop    eax
c0016f22:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c0016f27:	5a                   	pop    edx
c0016f28:	57                   	push   edi
c0016f29:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016f2f:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016f35:	e8 5e d4 ff ff       	call   c0014398 <Device::addChild(Device*)>
c0016f3a:	83 c4 10             	add    esp,0x10
c0016f3d:	eb 33                	jmp    c0016f72 <setupTimer(int)+0xec>
c0016f3f:	83 ec 0c             	sub    esp,0xc
c0016f42:	68 5c 01 00 00       	push   0x15c
c0016f47:	e8 f4 88 ff ff       	call   c000f840 <malloc>
c0016f4c:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f4f:	89 c3                	mov    ebx,eax
c0016f51:	e8 ac f6 00 00       	call   c0026602 <PIT::PIT()>
c0016f56:	58                   	pop    eax
c0016f57:	5a                   	pop    edx
c0016f58:	53                   	push   ebx
c0016f59:	ff 35 48 e6 02 c0    	push   DWORD PTR ds:0xc002e648
c0016f5f:	e8 34 d4 ff ff       	call   c0014398 <Device::addChild(Device*)>
c0016f64:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f66:	6a 00                	push   0x0
c0016f68:	6a 00                	push   0x0
c0016f6a:	56                   	push   esi
c0016f6b:	53                   	push   ebx
c0016f6c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016f6f:	83 c4 20             	add    esp,0x20
c0016f72:	89 d8                	mov    eax,ebx
c0016f74:	5b                   	pop    ebx
c0016f75:	5e                   	pop    esi
c0016f76:	5f                   	pop    edi
c0016f77:	c3                   	ret    

c0016f78 <VCache::VCache(PhysicalDisk*)>:
c0016f78:	53                   	push   ebx
c0016f79:	83 ec 18             	sub    esp,0x18
c0016f7c:	ba 00 b5 02 c0       	mov    edx,0xc002b500
c0016f81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f85:	89 10                	mov    DWORD PTR [eax],edx
c0016f87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f8b:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016f92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f96:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fa1:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016fa8:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016faf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fb3:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016fba:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016fc1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fc5:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016fcc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fd0:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016fd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fd8:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016fdf:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016fe6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fea:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016fee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ff2:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016ff6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ffa:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016ffe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017002:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0017009:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0017011:	83 ec 0c             	sub    esp,0xc
c0017014:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017018:	e8 23 88 ff ff       	call   c000f840 <malloc>
c001701d:	83 c4 10             	add    esp,0x10
c0017020:	89 c3                	mov    ebx,eax
c0017022:	83 ec 0c             	sub    esp,0xc
c0017025:	53                   	push   ebx
c0017026:	e8 3d 6f 00 00       	call   c001df68 <Mutex::Mutex()>
c001702b:	83 c4 10             	add    esp,0x10
c001702e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017032:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0017035:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017039:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001703d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0017040:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017044:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c001704b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001704f:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0017055:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017059:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001705c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017060:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0017066:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001706c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0017070:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0017073:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0017076:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001707a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001707e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017082:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017088:	05 00 01 00 00       	add    eax,0x100
c001708d:	c1 e0 04             	shl    eax,0x4
c0017090:	83 ec 0c             	sub    esp,0xc
c0017093:	50                   	push   eax
c0017094:	e8 a7 87 ff ff       	call   c000f840 <malloc>
c0017099:	83 c4 10             	add    esp,0x10
c001709c:	89 c2                	mov    edx,eax
c001709e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170a2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00170a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170a9:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c00170b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170b4:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00170b8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00170bc:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00170c2:	c1 e0 07             	shl    eax,0x7
c00170c5:	83 ec 0c             	sub    esp,0xc
c00170c8:	50                   	push   eax
c00170c9:	e8 72 87 ff ff       	call   c000f840 <malloc>
c00170ce:	83 c4 10             	add    esp,0x10
c00170d1:	89 c2                	mov    edx,eax
c00170d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170d7:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00170da:	90                   	nop
c00170db:	83 c4 18             	add    esp,0x18
c00170de:	5b                   	pop    ebx
c00170df:	c3                   	ret    

c00170e0 <VCache::invalidateReadBuffer()>:
c00170e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170e4:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c00170ea:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c00170ee:	c3                   	ret    
c00170ef:	90                   	nop

c00170f0 <VCache::writeWriteBuffer()>:
c00170f0:	53                   	push   ebx
c00170f1:	83 ec 14             	sub    esp,0x14
c00170f4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00170f8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00170fb:	8b 10                	mov    edx,DWORD PTR [eax]
c00170fd:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0017100:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0017103:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0017106:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0017109:	50                   	push   eax
c001710a:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001710d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0017114:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c001711b:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c001711f:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0017126:	83 c4 28             	add    esp,0x28
c0017129:	5b                   	pop    ebx
c001712a:	c3                   	ret    
c001712b:	90                   	nop

c001712c <VCache::~VCache()>:
c001712c:	83 ec 0c             	sub    esp,0xc
c001712f:	ba 00 b5 02 c0       	mov    edx,0xc002b500
c0017134:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017138:	89 10                	mov    DWORD PTR [eax],edx
c001713a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001713e:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0017141:	84 c0                	test   al,al
c0017143:	74 0f                	je     c0017154 <VCache::~VCache()+0x28>
c0017145:	83 ec 0c             	sub    esp,0xc
c0017148:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001714c:	e8 9f ff ff ff       	call   c00170f0 <VCache::writeWriteBuffer()>
c0017151:	83 c4 10             	add    esp,0x10
c0017154:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017158:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001715b:	83 ec 0c             	sub    esp,0xc
c001715e:	50                   	push   eax
c001715f:	e8 ec 86 ff ff       	call   c000f850 <free>
c0017164:	83 c4 10             	add    esp,0x10
c0017167:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001716b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001716e:	83 ec 0c             	sub    esp,0xc
c0017171:	50                   	push   eax
c0017172:	e8 d9 86 ff ff       	call   c000f850 <free>
c0017177:	83 c4 10             	add    esp,0x10
c001717a:	90                   	nop
c001717b:	83 c4 0c             	add    esp,0xc
c001717e:	c3                   	ret    
c001717f:	90                   	nop

c0017180 <VCache::~VCache()>:
c0017180:	83 ec 0c             	sub    esp,0xc
c0017183:	83 ec 0c             	sub    esp,0xc
c0017186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001718a:	e8 9d ff ff ff       	call   c001712c <VCache::~VCache()>
c001718f:	83 c4 10             	add    esp,0x10
c0017192:	83 ec 08             	sub    esp,0x8
c0017195:	6a 44                	push   0x44
c0017197:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001719b:	e8 f1 bc ff ff       	call   c0012e91 <operator delete(void*, unsigned long)>
c00171a0:	83 c4 10             	add    esp,0x10
c00171a3:	83 c4 0c             	add    esp,0xc
c00171a6:	c3                   	ret    
c00171a7:	90                   	nop

c00171a8 <VCache::write(unsigned long long, int, void*)>:
c00171a8:	55                   	push   ebp
c00171a9:	57                   	push   edi
c00171aa:	56                   	push   esi
c00171ab:	53                   	push   ebx
c00171ac:	83 ec 28             	sub    esp,0x28
c00171af:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00171b3:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00171b7:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00171bb:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00171bf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00171c2:	e8 03 72 00 00       	call   c001e3ca <Semaphore::acquire()>
c00171c7:	83 c4 10             	add    esp,0x10
c00171ca:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c00171ce:	74 0c                	je     c00171dc <VCache::write(unsigned long long, int, void*)+0x34>
c00171d0:	83 ec 0c             	sub    esp,0xc
c00171d3:	53                   	push   ebx
c00171d4:	e8 07 ff ff ff       	call   c00170e0 <VCache::invalidateReadBuffer()>
c00171d9:	83 c4 10             	add    esp,0x10
c00171dc:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00171e0:	74 66                	je     c0017248 <VCache::write(unsigned long long, int, void*)+0xa0>
c00171e2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00171e5:	99                   	cdq    
c00171e6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00171ea:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00171ed:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00171f0:	89 c1                	mov    ecx,eax
c00171f2:	89 d0                	mov    eax,edx
c00171f4:	31 f1                	xor    ecx,esi
c00171f6:	31 f8                	xor    eax,edi
c00171f8:	89 ca                	mov    edx,ecx
c00171fa:	09 c2                	or     edx,eax
c00171fc:	75 3e                	jne    c001723c <VCache::write(unsigned long long, int, void*)+0x94>
c00171fe:	83 fd 01             	cmp    ebp,0x1
c0017201:	75 39                	jne    c001723c <VCache::write(unsigned long long, int, void*)+0x94>
c0017203:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017206:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001720c:	51                   	push   ecx
c001720d:	50                   	push   eax
c001720e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017212:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0017216:	0f af c8             	imul   ecx,eax
c0017219:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c001721c:	51                   	push   ecx
c001721d:	e8 22 95 fe ff       	call   c0000744 <memcpy>
c0017222:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017225:	83 c4 10             	add    esp,0x10
c0017228:	40                   	inc    eax
c0017229:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c001722c:	83 c0 80             	add    eax,0xffffff80
c001722f:	75 57                	jne    c0017288 <VCache::write(unsigned long long, int, void*)+0xe0>
c0017231:	83 ec 0c             	sub    esp,0xc
c0017234:	53                   	push   ebx
c0017235:	e8 b6 fe ff ff       	call   c00170f0 <VCache::writeWriteBuffer()>
c001723a:	eb 34                	jmp    c0017270 <VCache::write(unsigned long long, int, void*)+0xc8>
c001723c:	83 ec 0c             	sub    esp,0xc
c001723f:	53                   	push   ebx
c0017240:	e8 ab fe ff ff       	call   c00170f0 <VCache::writeWriteBuffer()>
c0017245:	83 c4 10             	add    esp,0x10
c0017248:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001724b:	83 fd 7f             	cmp    ebp,0x7f
c001724e:	7f 25                	jg     c0017275 <VCache::write(unsigned long long, int, void*)+0xcd>
c0017250:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0017253:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0017256:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0017259:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c001725d:	52                   	push   edx
c001725e:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0017264:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017268:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001726b:	e8 d4 94 fe ff       	call   c0000744 <memcpy>
c0017270:	83 c4 10             	add    esp,0x10
c0017273:	eb 13                	jmp    c0017288 <VCache::write(unsigned long long, int, void*)+0xe0>
c0017275:	83 ec 0c             	sub    esp,0xc
c0017278:	8b 10                	mov    edx,DWORD PTR [eax]
c001727a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001727e:	55                   	push   ebp
c001727f:	57                   	push   edi
c0017280:	56                   	push   esi
c0017281:	50                   	push   eax
c0017282:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0017285:	83 c4 20             	add    esp,0x20
c0017288:	83 ec 0c             	sub    esp,0xc
c001728b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001728e:	e8 e5 76 00 00       	call   c001e978 <Semaphore::release()>
c0017293:	83 c4 2c             	add    esp,0x2c
c0017296:	31 c0                	xor    eax,eax
c0017298:	5b                   	pop    ebx
c0017299:	5e                   	pop    esi
c001729a:	5f                   	pop    edi
c001729b:	5d                   	pop    ebp
c001729c:	c3                   	ret    
c001729d:	90                   	nop

c001729e <VCache::read(unsigned long long, int, void*)>:
c001729e:	55                   	push   ebp
c001729f:	57                   	push   edi
c00172a0:	56                   	push   esi
c00172a1:	53                   	push   ebx
c00172a2:	83 ec 28             	sub    esp,0x28
c00172a5:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00172a9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00172ad:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00172b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00172b5:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00172b9:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00172bd:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c00172c1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00172c4:	e8 01 71 00 00       	call   c001e3ca <Semaphore::acquire()>
c00172c9:	83 c4 10             	add    esp,0x10
c00172cc:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00172d0:	74 0c                	je     c00172de <VCache::read(unsigned long long, int, void*)+0x40>
c00172d2:	83 ec 0c             	sub    esp,0xc
c00172d5:	53                   	push   ebx
c00172d6:	e8 15 fe ff ff       	call   c00170f0 <VCache::writeWriteBuffer()>
c00172db:	83 c4 10             	add    esp,0x10
c00172de:	83 fe 01             	cmp    esi,0x1
c00172e1:	0f 85 80 00 00 00    	jne    c0017367 <VCache::read(unsigned long long, int, void*)+0xc9>
c00172e7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00172ea:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c00172f1:	75 74                	jne    c0017367 <VCache::read(unsigned long long, int, void*)+0xc9>
c00172f3:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00172f6:	89 d1                	mov    ecx,edx
c00172f8:	f7 d9                	neg    ecx
c00172fa:	89 cf                	mov    edi,ecx
c00172fc:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0017300:	c1 ff 1f             	sar    edi,0x1f
c0017303:	23 0c 24             	and    ecx,DWORD PTR [esp]
c0017306:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001730a:	89 ce                	mov    esi,ecx
c001730c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017310:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c0017314:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0017318:	89 cf                	mov    edi,ecx
c001731a:	74 0a                	je     c0017326 <VCache::read(unsigned long long, int, void*)+0x88>
c001731c:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c001731f:	75 05                	jne    c0017326 <VCache::read(unsigned long long, int, void*)+0x88>
c0017321:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c0017324:	74 1c                	je     c0017342 <VCache::read(unsigned long long, int, void*)+0xa4>
c0017326:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c001732a:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c001732d:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c0017330:	83 ec 0c             	sub    esp,0xc
c0017333:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017335:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0017338:	52                   	push   edx
c0017339:	57                   	push   edi
c001733a:	56                   	push   esi
c001733b:	50                   	push   eax
c001733c:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c001733f:	83 c4 20             	add    esp,0x20
c0017342:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017345:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001734b:	50                   	push   eax
c001734c:	52                   	push   edx
c001734d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017350:	48                   	dec    eax
c0017351:	23 44 24 08          	and    eax,DWORD PTR [esp+0x8]
c0017355:	0f af c2             	imul   eax,edx
c0017358:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001735b:	50                   	push   eax
c001735c:	55                   	push   ebp
c001735d:	e8 e2 93 fe ff       	call   c0000744 <memcpy>
c0017362:	83 c4 10             	add    esp,0x10
c0017365:	eb 21                	jmp    c0017388 <VCache::read(unsigned long long, int, void*)+0xea>
c0017367:	83 ec 0c             	sub    esp,0xc
c001736a:	53                   	push   ebx
c001736b:	e8 70 fd ff ff       	call   c00170e0 <VCache::invalidateReadBuffer()>
c0017370:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017373:	8b 10                	mov    edx,DWORD PTR [eax]
c0017375:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017378:	56                   	push   esi
c0017379:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001737d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017381:	50                   	push   eax
c0017382:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0017385:	83 c4 20             	add    esp,0x20
c0017388:	83 ec 0c             	sub    esp,0xc
c001738b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001738e:	e8 e5 75 00 00       	call   c001e978 <Semaphore::release()>
c0017393:	83 c4 2c             	add    esp,0x2c
c0017396:	31 c0                	xor    eax,eax
c0017398:	5b                   	pop    ebx
c0017399:	5e                   	pop    esi
c001739a:	5f                   	pop    edi
c001739b:	5d                   	pop    ebp
c001739c:	c3                   	ret    
c001739d:	90                   	nop

c001739e <Video::putrect(int, int, int, int, unsigned int)>:
c001739e:	55                   	push   ebp
c001739f:	57                   	push   edi
c00173a0:	56                   	push   esi
c00173a1:	53                   	push   ebx
c00173a2:	83 ec 1c             	sub    esp,0x1c
c00173a5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00173a9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00173ad:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00173b1:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00173b5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00173b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00173bd:	01 df                	add    edi,ebx
c00173bf:	39 fb                	cmp    ebx,edi
c00173c1:	7d 1f                	jge    c00173e2 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c00173c3:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00173c7:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00173cb:	7d 12                	jge    c00173df <Video::putrect(int, int, int, int, unsigned int)+0x41>
c00173cd:	8b 16                	mov    edx,DWORD PTR [esi]
c00173cf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00173d3:	53                   	push   ebx
c00173d4:	55                   	push   ebp
c00173d5:	45                   	inc    ebp
c00173d6:	56                   	push   esi
c00173d7:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00173da:	83 c4 10             	add    esp,0x10
c00173dd:	eb e8                	jmp    c00173c7 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c00173df:	43                   	inc    ebx
c00173e0:	eb dd                	jmp    c00173bf <Video::putrect(int, int, int, int, unsigned int)+0x21>
c00173e2:	83 c4 1c             	add    esp,0x1c
c00173e5:	5b                   	pop    ebx
c00173e6:	5e                   	pop    esi
c00173e7:	5f                   	pop    edi
c00173e8:	5d                   	pop    ebp
c00173e9:	c3                   	ret    

c00173ea <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c00173ea:	55                   	push   ebp
c00173eb:	57                   	push   edi
c00173ec:	31 ff                	xor    edi,edi
c00173ee:	56                   	push   esi
c00173ef:	53                   	push   ebx
c00173f0:	83 ec 1c             	sub    esp,0x1c
c00173f3:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00173f7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00173fb:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0017402:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0017407:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001740b:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c001740f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017413:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0017416:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001741a:	01 f9                	add    ecx,edi
c001741c:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0017420:	7d 2f                	jge    c0017451 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0017422:	31 f6                	xor    esi,esi
c0017424:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017428:	01 f2                	add    edx,esi
c001742a:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c001742e:	7d 1a                	jge    c001744a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0017430:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017433:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0017436:	46                   	inc    esi
c0017437:	51                   	push   ecx
c0017438:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001743c:	52                   	push   edx
c001743d:	55                   	push   ebp
c001743e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017441:	83 c4 10             	add    esp,0x10
c0017444:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017448:	eb da                	jmp    c0017424 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c001744a:	47                   	inc    edi
c001744b:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001744f:	eb c5                	jmp    c0017416 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0017451:	83 c4 1c             	add    esp,0x1c
c0017454:	5b                   	pop    ebx
c0017455:	5e                   	pop    esi
c0017456:	5f                   	pop    edi
c0017457:	5d                   	pop    ebp
c0017458:	c3                   	ret    
c0017459:	90                   	nop

c001745a <Video::blit(unsigned int*, int, int, int, int)>:
c001745a:	55                   	push   ebp
c001745b:	57                   	push   edi
c001745c:	56                   	push   esi
c001745d:	53                   	push   ebx
c001745e:	83 ec 1c             	sub    esp,0x1c
c0017461:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017465:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017469:	85 c0                	test   eax,eax
c001746b:	79 02                	jns    c001746f <Video::blit(unsigned int*, int, int, int, int)+0x15>
c001746d:	31 c0                	xor    eax,eax
c001746f:	c1 e0 02             	shl    eax,0x2
c0017472:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017476:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001747a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001747e:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0017482:	39 d8                	cmp    eax,ebx
c0017484:	7e 49                	jle    c00174cf <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0017486:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001748c:	7c 41                	jl     c00174cf <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001748e:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0017492:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017496:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001749a:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c001749e:	39 f9                	cmp    ecx,edi
c00174a0:	7e 22                	jle    c00174c4 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00174a2:	83 c5 04             	add    ebp,0x4
c00174a5:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00174ab:	7c 14                	jl     c00174c1 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c00174ad:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00174af:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c00174b2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00174b6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00174ba:	56                   	push   esi
c00174bb:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c00174be:	83 c4 10             	add    esp,0x10
c00174c1:	47                   	inc    edi
c00174c2:	eb d2                	jmp    c0017496 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c00174c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00174c8:	43                   	inc    ebx
c00174c9:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00174cd:	eb ab                	jmp    c001747a <Video::blit(unsigned int*, int, int, int, int)+0x20>
c00174cf:	83 c4 1c             	add    esp,0x1c
c00174d2:	5b                   	pop    ebx
c00174d3:	5e                   	pop    esi
c00174d4:	5f                   	pop    edi
c00174d5:	5d                   	pop    ebp
c00174d6:	c3                   	ret    
c00174d7:	90                   	nop

c00174d8 <Video::clearScreen(unsigned int)>:
c00174d8:	57                   	push   edi
c00174d9:	56                   	push   esi
c00174da:	53                   	push   ebx
c00174db:	31 db                	xor    ebx,ebx
c00174dd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00174e1:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00174e7:	7e 1f                	jle    c0017508 <Video::clearScreen(unsigned int)+0x30>
c00174e9:	31 ff                	xor    edi,edi
c00174eb:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00174f1:	7e 12                	jle    c0017505 <Video::clearScreen(unsigned int)+0x2d>
c00174f3:	8b 06                	mov    eax,DWORD PTR [esi]
c00174f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00174f9:	53                   	push   ebx
c00174fa:	57                   	push   edi
c00174fb:	47                   	inc    edi
c00174fc:	56                   	push   esi
c00174fd:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017500:	83 c4 10             	add    esp,0x10
c0017503:	eb e6                	jmp    c00174eb <Video::clearScreen(unsigned int)+0x13>
c0017505:	43                   	inc    ebx
c0017506:	eb d9                	jmp    c00174e1 <Video::clearScreen(unsigned int)+0x9>
c0017508:	5b                   	pop    ebx
c0017509:	5e                   	pop    esi
c001750a:	5f                   	pop    edi
c001750b:	c3                   	ret    

c001750c <Video::putpixel(int, int, unsigned int)>:
c001750c:	c7 44 24 04 08 b5 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b508
c0017514:	e9 0a 31 00 00       	jmp    c001a623 <Krnl::panic(char const*)>
c0017519:	90                   	nop

c001751a <Video::Video(char const*)>:
c001751a:	83 ec 0c             	sub    esp,0xc
c001751d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017521:	83 ec 08             	sub    esp,0x8
c0017524:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017528:	50                   	push   eax
c0017529:	e8 5a d0 ff ff       	call   c0014588 <Device::Device(char const*)>
c001752e:	83 c4 10             	add    esp,0x10
c0017531:	ba 8c b5 02 c0       	mov    edx,0xc002b58c
c0017536:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001753a:	89 10                	mov    DWORD PTR [eax],edx
c001753c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017540:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001754a:	90                   	nop
c001754b:	83 c4 0c             	add    esp,0xc
c001754e:	c3                   	ret    
c001754f:	90                   	nop

c0017550 <Video::~Video()>:
c0017550:	83 ec 0c             	sub    esp,0xc
c0017553:	ba 8c b5 02 c0       	mov    edx,0xc002b58c
c0017558:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001755c:	89 10                	mov    DWORD PTR [eax],edx
c001755e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017562:	83 ec 0c             	sub    esp,0xc
c0017565:	50                   	push   eax
c0017566:	e8 ff cc ff ff       	call   c001426a <Device::~Device()>
c001756b:	83 c4 10             	add    esp,0x10
c001756e:	90                   	nop
c001756f:	83 c4 0c             	add    esp,0xc
c0017572:	c3                   	ret    
c0017573:	90                   	nop

c0017574 <Video::~Video()>:
c0017574:	83 ec 0c             	sub    esp,0xc
c0017577:	83 ec 0c             	sub    esp,0xc
c001757a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001757e:	e8 cd ff ff ff       	call   c0017550 <Video::~Video()>
c0017583:	83 c4 10             	add    esp,0x10
c0017586:	83 ec 08             	sub    esp,0x8
c0017589:	68 64 01 00 00       	push   0x164
c001758e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017592:	e8 fa b8 ff ff       	call   c0012e91 <operator delete(void*, unsigned long)>
c0017597:	83 c4 10             	add    esp,0x10
c001759a:	83 c4 0c             	add    esp,0xc
c001759d:	c3                   	ret    

c001759e <Video::isMonochrome()>:
c001759e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00175a2:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00175a8:	c3                   	ret    
c00175a9:	90                   	nop

c00175aa <Video::getWidth()>:
c00175aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00175ae:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00175b4:	c3                   	ret    
c00175b5:	90                   	nop

c00175b6 <Video::getHeight()>:
c00175b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00175ba:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00175c0:	c3                   	ret    
c00175c1:	90                   	nop

c00175c2 <Video::drawCursor(int, int, unsigned char*, int)>:
c00175c2:	55                   	push   ebp
c00175c3:	57                   	push   edi
c00175c4:	56                   	push   esi
c00175c5:	53                   	push   ebx
c00175c6:	83 ec 2c             	sub    esp,0x2c
c00175c9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00175cd:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00175d1:	83 f8 01             	cmp    eax,0x1
c00175d4:	19 c9                	sbb    ecx,ecx
c00175d6:	31 db                	xor    ebx,ebx
c00175d8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00175dc:	89 cd                	mov    ebp,ecx
c00175de:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00175e6:	f7 d5                	not    ebp
c00175e8:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00175ee:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00175f2:	01 d8                	add    eax,ebx
c00175f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00175f8:	56                   	push   esi
c00175f9:	e8 b8 ff ff ff       	call   c00175b6 <Video::getHeight()>
c00175fe:	59                   	pop    ecx
c00175ff:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0017603:	7e 70                	jle    c0017675 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0017605:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017609:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001760d:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0017610:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017614:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017618:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c001761f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017623:	89 f8                	mov    eax,edi
c0017625:	83 c0 20             	add    eax,0x20
c0017628:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001762c:	56                   	push   esi
c001762d:	e8 78 ff ff ff       	call   c00175aa <Video::getWidth()>
c0017632:	5a                   	pop    edx
c0017633:	39 c7                	cmp    edi,eax
c0017635:	7d 34                	jge    c001766b <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0017637:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c001763c:	74 05                	je     c0017643 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c001763e:	8b 06                	mov    eax,DWORD PTR [esi]
c0017640:	55                   	push   ebp
c0017641:	eb 0d                	jmp    c0017650 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0017643:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0017648:	74 12                	je     c001765c <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c001764a:	8b 06                	mov    eax,DWORD PTR [esi]
c001764c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017650:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017654:	57                   	push   edi
c0017655:	56                   	push   esi
c0017656:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017659:	83 c4 10             	add    esp,0x10
c001765c:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0017660:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0017664:	47                   	inc    edi
c0017665:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0017669:	75 c1                	jne    c001762c <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c001766b:	43                   	inc    ebx
c001766c:	83 fb 20             	cmp    ebx,0x20
c001766f:	0f 85 79 ff ff ff    	jne    c00175ee <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0017675:	83 c4 2c             	add    esp,0x2c
c0017678:	5b                   	pop    ebx
c0017679:	5e                   	pop    esi
c001767a:	5f                   	pop    edi
c001767b:	5d                   	pop    ebp
c001767c:	c3                   	ret    
c001767d:	90                   	nop

c001767e <Video::tgaParse(unsigned char*, int, int*, int*)>:
c001767e:	55                   	push   ebp
c001767f:	57                   	push   edi
c0017680:	56                   	push   esi
c0017681:	53                   	push   ebx
c0017682:	83 ec 28             	sub    esp,0x28
c0017685:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0017689:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c001768d:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c0017691:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0017695:	c1 e7 08             	shl    edi,0x8
c0017698:	01 c7                	add    edi,eax
c001769a:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c001769e:	c1 e0 08             	shl    eax,0x8
c00176a1:	01 d0                	add    eax,edx
c00176a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00176a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00176ab:	0f af c7             	imul   eax,edi
c00176ae:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c00176b5:	50                   	push   eax
c00176b6:	e8 85 81 ff ff       	call   c000f840 <malloc>
c00176bb:	83 c4 10             	add    esp,0x10
c00176be:	89 c5                	mov    ebp,eax
c00176c0:	85 c0                	test   eax,eax
c00176c2:	75 15                	jne    c00176d9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c00176c4:	83 ec 0c             	sub    esp,0xc
c00176c7:	68 29 b5 02 c0       	push   0xc002b529
c00176cc:	e8 a0 b8 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c00176d1:	83 c4 10             	add    esp,0x10
c00176d4:	e9 1c 01 00 00       	jmp    c00177f5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00176d9:	be 12 00 00 00       	mov    esi,0x12
c00176de:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c00176e2:	74 11                	je     c00176f5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c00176e4:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c00176e8:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c00176ec:	c1 fe 03             	sar    esi,0x3
c00176ef:	0f af f0             	imul   esi,eax
c00176f2:	83 c6 12             	add    esi,0x12
c00176f5:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00176f9:	74 04                	je     c00176ff <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c00176fb:	85 ff                	test   edi,edi
c00176fd:	75 12                	jne    c0017711 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c00176ff:	83 ec 0c             	sub    esp,0xc
c0017702:	68 40 b5 02 c0       	push   0xc002b540
c0017707:	e8 65 b8 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001770c:	e9 ce 00 00 00       	jmp    c00177df <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c0017711:	52                   	push   edx
c0017712:	52                   	push   edx
c0017713:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c0017717:	50                   	push   eax
c0017718:	68 55 b5 02 c0       	push   0xc002b555
c001771d:	e8 4f b8 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0017722:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c0017726:	83 c4 10             	add    esp,0x10
c0017729:	80 fa 02             	cmp    dl,0x2
c001772c:	0f 85 98 00 00 00    	jne    c00177ca <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c0017732:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0017737:	75 10                	jne    c0017749 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017739:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c001773d:	75 0a                	jne    c0017749 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c001773f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0017742:	83 e8 18             	sub    eax,0x18
c0017745:	a8 f7                	test   al,0xf7
c0017747:	74 0a                	je     c0017753 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c0017749:	83 ec 0c             	sub    esp,0xc
c001774c:	68 62 b5 02 c0       	push   0xc002b562
c0017751:	eb 7f                	jmp    c00177d2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c0017753:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001775b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017763:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017767:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001776f:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0017773:	75 0c                	jne    c0017781 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c0017775:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c001777a:	c1 e0 18             	shl    eax,0x18
c001777d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017781:	41                   	inc    ecx
c0017782:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c0017787:	c1 e2 10             	shl    edx,0x10
c001778a:	89 d0                	mov    eax,edx
c001778c:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c0017791:	c1 e2 08             	shl    edx,0x8
c0017794:	09 c2                	or     edx,eax
c0017796:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c001779a:	09 c2                	or     edx,eax
c001779c:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c00177a0:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c00177a4:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c00177a8:	c1 f8 03             	sar    eax,0x3
c00177ab:	01 c6                	add    esi,eax
c00177ad:	89 c8                	mov    eax,ecx
c00177af:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00177b3:	39 c7                	cmp    edi,eax
c00177b5:	7f b0                	jg     c0017767 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c00177b7:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00177bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00177bf:	39 14 24             	cmp    DWORD PTR [esp],edx
c00177c2:	7e 22                	jle    c00177e6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c00177c4:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00177c8:	eb 99                	jmp    c0017763 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c00177ca:	50                   	push   eax
c00177cb:	50                   	push   eax
c00177cc:	52                   	push   edx
c00177cd:	68 70 b5 02 c0       	push   0xc002b570
c00177d2:	e8 9a b7 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c00177d7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00177da:	e8 71 80 ff ff       	call   c000f850 <free>
c00177df:	83 c4 10             	add    esp,0x10
c00177e2:	31 ed                	xor    ebp,ebp
c00177e4:	eb 0f                	jmp    c00177f5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00177e6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00177ea:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00177ed:	89 38                	mov    DWORD PTR [eax],edi
c00177ef:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00177f3:	89 08                	mov    DWORD PTR [eax],ecx
c00177f5:	83 c4 1c             	add    esp,0x1c
c00177f8:	89 e8                	mov    eax,ebp
c00177fa:	5b                   	pop    ebx
c00177fb:	5e                   	pop    esi
c00177fc:	5f                   	pop    edi
c00177fd:	5d                   	pop    ebp
c00177fe:	c3                   	ret    
c00177ff:	90                   	nop

c0017800 <Video::putTGA(int, int, unsigned char*, int)>:
c0017800:	55                   	push   ebp
c0017801:	57                   	push   edi
c0017802:	56                   	push   esi
c0017803:	53                   	push   ebx
c0017804:	83 ec 28             	sub    esp,0x28
c0017807:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001780b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001780f:	50                   	push   eax
c0017810:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017814:	50                   	push   eax
c0017815:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017819:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001781d:	56                   	push   esi
c001781e:	e8 5b fe ff ff       	call   c001767e <Video::tgaParse(unsigned char*, int, int*, int*)>
c0017823:	83 c4 20             	add    esp,0x20
c0017826:	85 c0                	test   eax,eax
c0017828:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001782c:	74 35                	je     c0017863 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001782e:	89 c7                	mov    edi,eax
c0017830:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017834:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0017838:	39 d8                	cmp    eax,ebx
c001783a:	7e 27                	jle    c0017863 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001783c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017840:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017844:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0017848:	39 e8                	cmp    eax,ebp
c001784a:	7e 14                	jle    c0017860 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c001784c:	8b 06                	mov    eax,DWORD PTR [esi]
c001784e:	83 c7 04             	add    edi,0x4
c0017851:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0017854:	53                   	push   ebx
c0017855:	55                   	push   ebp
c0017856:	45                   	inc    ebp
c0017857:	56                   	push   esi
c0017858:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001785b:	83 c4 10             	add    esp,0x10
c001785e:	eb e0                	jmp    c0017840 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0017860:	43                   	inc    ebx
c0017861:	eb cd                	jmp    c0017830 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0017863:	83 c4 1c             	add    esp,0x1c
c0017866:	5b                   	pop    ebx
c0017867:	5e                   	pop    esi
c0017868:	5f                   	pop    edi
c0017869:	5d                   	pop    ebp
c001786a:	c3                   	ret    
c001786b:	90                   	nop

c001786c <ACPI::close(int, int, void*)>:
c001786c:	83 ec 1c             	sub    esp,0x1c
c001786f:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0017877:	74 0a                	je     c0017883 <ACPI::close(int, int, void*)+0x17>
c0017879:	b8 00 00 00 00       	mov    eax,0x0
c001787e:	e9 9a 00 00 00       	jmp    c001791d <ACPI::close(int, int, void*)+0xb1>
c0017883:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0017888:	75 37                	jne    c00178c1 <ACPI::close(int, int, void*)+0x55>
c001788a:	83 ec 0c             	sub    esp,0xc
c001788d:	68 cc b5 02 c0       	push   0xc002b5cc
c0017892:	e8 da b6 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0017897:	83 c4 10             	add    esp,0x10
c001789a:	a1 08 0d 03 c0       	mov    eax,ds:0xc0030d08
c001789f:	85 c0                	test   eax,eax
c00178a1:	74 07                	je     c00178aa <ACPI::close(int, int, void*)+0x3e>
c00178a3:	a1 08 0d 03 c0       	mov    eax,ds:0xc0030d08
c00178a8:	ff d0                	call   eax
c00178aa:	83 ec 0c             	sub    esp,0xc
c00178ad:	68 f0 b6 02 c0       	push   0xc002b6f0
c00178b2:	e8 6c 2d 00 00       	call   c001a623 <Krnl::panic(char const*)>
c00178b7:	83 c4 10             	add    esp,0x10
c00178ba:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00178bf:	eb 5c                	jmp    c001791d <ACPI::close(int, int, void*)+0xb1>
c00178c1:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00178c6:	75 50                	jne    c0017918 <ACPI::close(int, int, void*)+0xac>
c00178c8:	a1 04 0d 03 c0       	mov    eax,ds:0xc0030d04
c00178cd:	85 c0                	test   eax,eax
c00178cf:	74 07                	je     c00178d8 <ACPI::close(int, int, void*)+0x6c>
c00178d1:	a1 04 0d 03 c0       	mov    eax,ds:0xc0030d04
c00178d6:	ff d0                	call   eax
c00178d8:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00178dd:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00178e2:	83 e0 02             	and    eax,0x2
c00178e5:	74 1c                	je     c0017903 <ACPI::close(int, int, void*)+0x97>
c00178e7:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00178ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00178f2:	89 c2                	mov    edx,eax
c00178f4:	ec                   	in     al,dx
c00178f5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00178f9:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00178fd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017901:	eb da                	jmp    c00178dd <ACPI::close(int, int, void*)+0x71>
c0017903:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c001790a:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c001790f:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0017913:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017917:	ee                   	out    dx,al
c0017918:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001791d:	83 c4 1c             	add    esp,0x1c
c0017920:	c3                   	ret    

c0017921 <findRSDP()>:
c0017921:	83 ec 1c             	sub    esp,0x1c
c0017924:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c0017929:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001792f:	83 e0 04             	and    eax,0x4
c0017932:	84 c0                	test   al,al
c0017934:	75 07                	jne    c001793d <findRSDP()+0x1c>
c0017936:	b8 00 00 00 00       	mov    eax,0x0
c001793b:	eb 6a                	jmp    c00179a7 <findRSDP()+0x86>
c001793d:	a1 94 e6 02 c0       	mov    eax,ds:0xc002e694
c0017942:	3d ff 07 00 00       	cmp    eax,0x7ff
c0017947:	7f 1b                	jg     c0017964 <findRSDP()+0x43>
c0017949:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c001794e:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017954:	83 e2 fb             	and    edx,0xfffffffb
c0017957:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001795d:	b8 00 00 00 00       	mov    eax,0x0
c0017962:	eb 43                	jmp    c00179a7 <findRSDP()+0x86>
c0017964:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001796c:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0017974:	77 2c                	ja     c00179a2 <findRSDP()+0x81>
c0017976:	83 ec 04             	sub    esp,0x4
c0017979:	6a 08                	push   0x8
c001797b:	68 d9 b5 02 c0       	push   0xc002b5d9
c0017980:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017984:	e8 b7 8c fe ff       	call   c0000640 <memcmp>
c0017989:	83 c4 10             	add    esp,0x10
c001798c:	85 c0                	test   eax,eax
c001798e:	0f 94 c0             	sete   al
c0017991:	84 c0                	test   al,al
c0017993:	74 06                	je     c001799b <findRSDP()+0x7a>
c0017995:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017999:	eb 0c                	jmp    c00179a7 <findRSDP()+0x86>
c001799b:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00179a0:	eb ca                	jmp    c001796c <findRSDP()+0x4b>
c00179a2:	b8 00 00 00 00       	mov    eax,0x0
c00179a7:	83 c4 1c             	add    esp,0x1c
c00179aa:	c3                   	ret    

c00179ab <loadACPITables(unsigned char*)>:
c00179ab:	56                   	push   esi
c00179ac:	53                   	push   ebx
c00179ad:	83 ec 44             	sub    esp,0x44
c00179b0:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c00179b5:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00179bb:	83 e0 04             	and    eax,0x4
c00179be:	84 c0                	test   al,al
c00179c0:	0f 84 05 02 00 00    	je     c0017bcb <loadACPITables(unsigned char*)+0x220>
c00179c6:	a0 20 0f 03 c0       	mov    al,ds:0xc0030f20
c00179cb:	84 c0                	test   al,al
c00179cd:	74 75                	je     c0017a44 <loadACPITables(unsigned char*)+0x99>
c00179cf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00179d3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00179d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00179db:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00179de:	83 e8 24             	sub    eax,0x24
c00179e1:	c1 e8 03             	shr    eax,0x3
c00179e4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00179e8:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00179f0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00179f4:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00179f8:	0f 8d b2 00 00 00    	jge    c0017ab0 <loadACPITables(unsigned char*)+0x105>
c00179fe:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a02:	83 c0 24             	add    eax,0x24
c0017a05:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017a09:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a0d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017a11:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017a15:	c1 e0 03             	shl    eax,0x3
c0017a18:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0017a1c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017a20:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017a23:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a25:	89 c1                	mov    ecx,eax
c0017a27:	a1 0c 0d 03 c0       	mov    eax,ds:0xc0030d0c
c0017a2c:	8d 50 01             	lea    edx,[eax+0x1]
c0017a2f:	89 15 0c 0d 03 c0    	mov    DWORD PTR ds:0xc0030d0c,edx
c0017a35:	89 ca                	mov    edx,ecx
c0017a37:	89 14 c5 24 0d 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf2dc],edx
c0017a3e:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0017a42:	eb ac                	jmp    c00179f0 <loadACPITables(unsigned char*)+0x45>
c0017a44:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a48:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017a4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a50:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a53:	83 e8 24             	sub    eax,0x24
c0017a56:	c1 e8 02             	shr    eax,0x2
c0017a59:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017a5d:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0017a65:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017a69:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0017a6d:	7d 41                	jge    c0017ab0 <loadACPITables(unsigned char*)+0x105>
c0017a6f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a73:	83 c0 24             	add    eax,0x24
c0017a76:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017a7a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017a7e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017a82:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017a86:	c1 e0 02             	shl    eax,0x2
c0017a89:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0017a8d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017a91:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017a93:	a1 0c 0d 03 c0       	mov    eax,ds:0xc0030d0c
c0017a98:	8d 50 01             	lea    edx,[eax+0x1]
c0017a9b:	89 15 0c 0d 03 c0    	mov    DWORD PTR ds:0xc0030d0c,edx
c0017aa1:	89 ca                	mov    edx,ecx
c0017aa3:	89 14 c5 24 0d 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf2dc],edx
c0017aaa:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0017aae:	eb b5                	jmp    c0017a65 <loadACPITables(unsigned char*)+0xba>
c0017ab0:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0017ab8:	a1 0c 0d 03 c0       	mov    eax,ds:0xc0030d0c
c0017abd:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0017ac1:	0f 8d 05 01 00 00    	jge    c0017bcc <loadACPITables(unsigned char*)+0x221>
c0017ac7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017acb:	8b 04 c5 24 0d 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf2dc]
c0017ad2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017ad6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ada:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017ade:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ae2:	25 ff 0f 00 00       	and    eax,0xfff
c0017ae7:	89 c6                	mov    esi,eax
c0017ae9:	e8 50 a3 ff ff       	call   c0011e3e <Virt::getAKernelVAS()>
c0017aee:	89 c3                	mov    ebx,eax
c0017af0:	83 ec 0c             	sub    esp,0xc
c0017af3:	6a 01                	push   0x1
c0017af5:	e8 a9 a0 ff ff       	call   c0011ba3 <Virt::allocateKernelVirtualPages(int)>
c0017afa:	83 c4 10             	add    esp,0x10
c0017afd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017b01:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017b07:	83 ec 0c             	sub    esp,0xc
c0017b0a:	6a 01                	push   0x1
c0017b0c:	6a 01                	push   0x1
c0017b0e:	50                   	push   eax
c0017b0f:	52                   	push   edx
c0017b10:	53                   	push   ebx
c0017b11:	e8 58 ab ff ff       	call   c001266e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017b16:	83 c4 20             	add    esp,0x20
c0017b19:	09 f0                	or     eax,esi
c0017b1b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017b1f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b23:	c1 e0 03             	shl    eax,0x3
c0017b26:	05 20 0d 03 c0       	add    eax,0xc0030d20
c0017b2b:	83 ec 04             	sub    esp,0x4
c0017b2e:	6a 04                	push   0x4
c0017b30:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017b34:	50                   	push   eax
c0017b35:	e8 0a 8c fe ff       	call   c0000744 <memcpy>
c0017b3a:	83 c4 10             	add    esp,0x10
c0017b3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b41:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b44:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017b48:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017b4c:	05 00 10 00 00       	add    eax,0x1000
c0017b51:	c1 e8 0c             	shr    eax,0xc
c0017b54:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017b58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b5c:	89 04 24             	mov    DWORD PTR [esp],eax
c0017b5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b63:	25 ff 0f 00 00       	and    eax,0xfff
c0017b68:	89 c6                	mov    esi,eax
c0017b6a:	e8 cf a2 ff ff       	call   c0011e3e <Virt::getAKernelVAS()>
c0017b6f:	89 c3                	mov    ebx,eax
c0017b71:	83 ec 0c             	sub    esp,0xc
c0017b74:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017b78:	e8 26 a0 ff ff       	call   c0011ba3 <Virt::allocateKernelVirtualPages(int)>
c0017b7d:	83 c4 10             	add    esp,0x10
c0017b80:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017b84:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017b8a:	83 ec 0c             	sub    esp,0xc
c0017b8d:	6a 01                	push   0x1
c0017b8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017b93:	50                   	push   eax
c0017b94:	52                   	push   edx
c0017b95:	53                   	push   ebx
c0017b96:	e8 d3 aa ff ff       	call   c001266e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017b9b:	83 c4 20             	add    esp,0x20
c0017b9e:	09 f0                	or     eax,esi
c0017ba0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017ba4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017ba7:	83 ec 0c             	sub    esp,0xc
c0017baa:	50                   	push   eax
c0017bab:	e8 63 a4 ff ff       	call   c0012013 <Virt::freeKernelVirtualPages(unsigned long)>
c0017bb0:	83 c4 10             	add    esp,0x10
c0017bb3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017bb7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017bbb:	89 14 c5 24 0d 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf2dc],edx
c0017bc2:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0017bc6:	e9 ed fe ff ff       	jmp    c0017ab8 <loadACPITables(unsigned char*)+0x10d>
c0017bcb:	90                   	nop
c0017bcc:	83 c4 44             	add    esp,0x44
c0017bcf:	5b                   	pop    ebx
c0017bd0:	5e                   	pop    esi
c0017bd1:	c3                   	ret    

c0017bd2 <findRSDT(unsigned char*)>:
c0017bd2:	56                   	push   esi
c0017bd3:	53                   	push   ebx
c0017bd4:	83 ec 44             	sub    esp,0x44
c0017bd7:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c0017bdc:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017be2:	83 e0 04             	and    eax,0x4
c0017be5:	84 c0                	test   al,al
c0017be7:	75 0a                	jne    c0017bf3 <findRSDT(unsigned char*)+0x21>
c0017be9:	b8 00 00 00 00       	mov    eax,0x0
c0017bee:	e9 f7 00 00 00       	jmp    c0017cea <findRSDT(unsigned char*)+0x118>
c0017bf3:	83 ec 04             	sub    esp,0x4
c0017bf6:	6a 24                	push   0x24
c0017bf8:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0017bfc:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017c00:	50                   	push   eax
c0017c01:	e8 3e 8b fe ff       	call   c0000744 <memcpy>
c0017c06:	83 c4 10             	add    esp,0x10
c0017c09:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017c0d:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0017c11:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017c19:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017c1d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c21:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017c25:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017c29:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017c2d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c31:	25 ff 0f 00 00       	and    eax,0xfff
c0017c36:	89 c6                	mov    esi,eax
c0017c38:	e8 01 a2 ff ff       	call   c0011e3e <Virt::getAKernelVAS()>
c0017c3d:	89 c3                	mov    ebx,eax
c0017c3f:	83 ec 0c             	sub    esp,0xc
c0017c42:	6a 02                	push   0x2
c0017c44:	e8 5a 9f ff ff       	call   c0011ba3 <Virt::allocateKernelVirtualPages(int)>
c0017c49:	83 c4 10             	add    esp,0x10
c0017c4c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017c50:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017c56:	83 ec 0c             	sub    esp,0xc
c0017c59:	6a 01                	push   0x1
c0017c5b:	6a 02                	push   0x2
c0017c5d:	50                   	push   eax
c0017c5e:	52                   	push   edx
c0017c5f:	53                   	push   ebx
c0017c60:	e8 09 aa ff ff       	call   c001266e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017c65:	83 c4 20             	add    esp,0x20
c0017c68:	09 f0                	or     eax,esi
c0017c6a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017c6e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c72:	25 ff 0f 00 00       	and    eax,0xfff
c0017c77:	89 c6                	mov    esi,eax
c0017c79:	e8 c0 a1 ff ff       	call   c0011e3e <Virt::getAKernelVAS()>
c0017c7e:	89 c3                	mov    ebx,eax
c0017c80:	83 ec 0c             	sub    esp,0xc
c0017c83:	6a 02                	push   0x2
c0017c85:	e8 19 9f ff ff       	call   c0011ba3 <Virt::allocateKernelVirtualPages(int)>
c0017c8a:	83 c4 10             	add    esp,0x10
c0017c8d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017c91:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017c97:	83 ec 0c             	sub    esp,0xc
c0017c9a:	6a 01                	push   0x1
c0017c9c:	6a 02                	push   0x2
c0017c9e:	50                   	push   eax
c0017c9f:	52                   	push   edx
c0017ca0:	53                   	push   ebx
c0017ca1:	e8 c8 a9 ff ff       	call   c001266e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017ca6:	83 c4 20             	add    esp,0x20
c0017ca9:	09 f0                	or     eax,esi
c0017cab:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017caf:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0017cb4:	75 11                	jne    c0017cc7 <findRSDT(unsigned char*)+0xf5>
c0017cb6:	c6 05 20 0f 03 c0 00 	mov    BYTE PTR ds:0xc0030f20,0x0
c0017cbd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017cc1:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017cc5:	eb 1f                	jmp    c0017ce6 <findRSDT(unsigned char*)+0x114>
c0017cc7:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0017ccc:	75 11                	jne    c0017cdf <findRSDT(unsigned char*)+0x10d>
c0017cce:	c6 05 20 0f 03 c0 01 	mov    BYTE PTR ds:0xc0030f20,0x1
c0017cd5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017cd9:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017cdd:	eb 07                	jmp    c0017ce6 <findRSDT(unsigned char*)+0x114>
c0017cdf:	b8 00 00 00 00       	mov    eax,0x0
c0017ce4:	eb 04                	jmp    c0017cea <findRSDT(unsigned char*)+0x118>
c0017ce6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017cea:	83 c4 44             	add    esp,0x44
c0017ced:	5b                   	pop    ebx
c0017cee:	5e                   	pop    esi
c0017cef:	c3                   	ret    

c0017cf0 <findDataTable(unsigned char*, char*)>:
c0017cf0:	83 ec 1c             	sub    esp,0x1c
c0017cf3:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c0017cf8:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017cfe:	83 e0 04             	and    eax,0x4
c0017d01:	84 c0                	test   al,al
c0017d03:	75 07                	jne    c0017d0c <findDataTable(unsigned char*, char*)+0x1c>
c0017d05:	b8 00 00 00 00       	mov    eax,0x0
c0017d0a:	eb 7c                	jmp    c0017d88 <findDataTable(unsigned char*, char*)+0x98>
c0017d0c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017d14:	a1 0c 0d 03 c0       	mov    eax,ds:0xc0030d0c
c0017d19:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017d1d:	7d 3a                	jge    c0017d59 <findDataTable(unsigned char*, char*)+0x69>
c0017d1f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d23:	c1 e0 03             	shl    eax,0x3
c0017d26:	05 20 0d 03 c0       	add    eax,0xc0030d20
c0017d2b:	83 ec 04             	sub    esp,0x4
c0017d2e:	6a 04                	push   0x4
c0017d30:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d34:	50                   	push   eax
c0017d35:	e8 06 89 fe ff       	call   c0000640 <memcmp>
c0017d3a:	83 c4 10             	add    esp,0x10
c0017d3d:	85 c0                	test   eax,eax
c0017d3f:	0f 94 c0             	sete   al
c0017d42:	84 c0                	test   al,al
c0017d44:	74 0d                	je     c0017d53 <findDataTable(unsigned char*, char*)+0x63>
c0017d46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d4a:	8b 04 c5 24 0d 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf2dc]
c0017d51:	eb 35                	jmp    c0017d88 <findDataTable(unsigned char*, char*)+0x98>
c0017d53:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017d57:	eb bb                	jmp    c0017d14 <findDataTable(unsigned char*, char*)+0x24>
c0017d59:	a0 20 0f 03 c0       	mov    al,ds:0xc0030f20
c0017d5e:	84 c0                	test   al,al
c0017d60:	74 07                	je     c0017d69 <findDataTable(unsigned char*, char*)+0x79>
c0017d62:	b8 58 00 00 00       	mov    eax,0x58
c0017d67:	eb 05                	jmp    c0017d6e <findDataTable(unsigned char*, char*)+0x7e>
c0017d69:	b8 52 00 00 00       	mov    eax,0x52
c0017d6e:	83 ec 04             	sub    esp,0x4
c0017d71:	50                   	push   eax
c0017d72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d76:	68 14 b7 02 c0       	push   0xc002b714
c0017d7b:	e8 f1 b1 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0017d80:	83 c4 10             	add    esp,0x10
c0017d83:	b8 00 00 00 00       	mov    eax,0x0
c0017d88:	83 c4 1c             	add    esp,0x1c
c0017d8b:	c3                   	ret    

c0017d8c <scanMADT()>:
c0017d8c:	53                   	push   ebx
c0017d8d:	83 ec 38             	sub    esp,0x38
c0017d90:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c0017d95:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017d9b:	83 e0 04             	and    eax,0x4
c0017d9e:	84 c0                	test   al,al
c0017da0:	0f 84 63 04 00 00    	je     c0018209 <scanMADT()+0x47d>
c0017da6:	e8 76 fb ff ff       	call   c0017921 <findRSDP()>
c0017dab:	a3 2c 0f 03 c0       	mov    ds:0xc0030f2c,eax
c0017db0:	a1 2c 0f 03 c0       	mov    eax,ds:0xc0030f2c
c0017db5:	85 c0                	test   eax,eax
c0017db7:	75 19                	jne    c0017dd2 <scanMADT()+0x46>
c0017db9:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c0017dbe:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017dc4:	83 e2 fb             	and    edx,0xfffffffb
c0017dc7:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017dcd:	e9 3b 04 00 00       	jmp    c001820d <scanMADT()+0x481>
c0017dd2:	a1 2c 0f 03 c0       	mov    eax,ds:0xc0030f2c
c0017dd7:	83 ec 0c             	sub    esp,0xc
c0017dda:	50                   	push   eax
c0017ddb:	e8 f2 fd ff ff       	call   c0017bd2 <findRSDT(unsigned char*)>
c0017de0:	83 c4 10             	add    esp,0x10
c0017de3:	a3 28 0f 03 c0       	mov    ds:0xc0030f28,eax
c0017de8:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c0017ded:	85 c0                	test   eax,eax
c0017def:	75 19                	jne    c0017e0a <scanMADT()+0x7e>
c0017df1:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c0017df6:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017dfc:	83 e2 fb             	and    edx,0xfffffffb
c0017dff:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017e05:	e9 03 04 00 00       	jmp    c001820d <scanMADT()+0x481>
c0017e0a:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c0017e0f:	83 ec 0c             	sub    esp,0xc
c0017e12:	50                   	push   eax
c0017e13:	e8 93 fb ff ff       	call   c00179ab <loadACPITables(unsigned char*)>
c0017e18:	83 c4 10             	add    esp,0x10
c0017e1b:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c0017e20:	83 ec 08             	sub    esp,0x8
c0017e23:	68 e2 b5 02 c0       	push   0xc002b5e2
c0017e28:	50                   	push   eax
c0017e29:	e8 c2 fe ff ff       	call   c0017cf0 <findDataTable(unsigned char*, char*)>
c0017e2e:	83 c4 10             	add    esp,0x10
c0017e31:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017e35:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017e3a:	75 19                	jne    c0017e55 <scanMADT()+0xc9>
c0017e3c:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c0017e41:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017e47:	83 e2 fe             	and    edx,0xfffffffe
c0017e4a:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017e50:	e9 b8 03 00 00       	jmp    c001820d <scanMADT()+0x481>
c0017e55:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017e5d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e61:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017e64:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017e68:	0f 87 9f 03 00 00    	ja     c001820d <scanMADT()+0x481>
c0017e6e:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017e76:	0f 87 91 03 00 00    	ja     c001820d <scanMADT()+0x481>
c0017e7c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e80:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017e84:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e88:	8d 50 01             	lea    edx,[eax+0x1]
c0017e8b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e8f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e93:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017e97:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017e9b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e9f:	8d 50 01             	lea    edx,[eax+0x1]
c0017ea2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ea6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017eaa:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017eae:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017eb2:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017eb7:	0f 86 4f 03 00 00    	jbe    c001820c <scanMADT()+0x480>
c0017ebd:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017ec2:	75 57                	jne    c0017f1b <scanMADT()+0x18f>
c0017ec4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ec8:	8d 50 01             	lea    edx,[eax+0x1]
c0017ecb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ecf:	8a 15 20 11 03 c0    	mov    dl,BYTE PTR ds:0xc0031120
c0017ed5:	0f b6 d2             	movzx  edx,dl
c0017ed8:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017edc:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017ee0:	88 82 60 11 03 c0    	mov    BYTE PTR [edx-0x3ffceea0],al
c0017ee6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017eea:	8d 50 01             	lea    edx,[eax+0x1]
c0017eed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ef1:	8a 15 20 11 03 c0    	mov    dl,BYTE PTR ds:0xc0031120
c0017ef7:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017efa:	88 0d 20 11 03 c0    	mov    BYTE PTR ds:0xc0031120,cl
c0017f00:	0f b6 d2             	movzx  edx,dl
c0017f03:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017f07:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017f0b:	88 82 40 11 03 c0    	mov    BYTE PTR [edx-0x3ffceec0],al
c0017f11:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017f16:	e9 da 02 00 00       	jmp    c00181f5 <scanMADT()+0x469>
c0017f1b:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017f20:	0f 85 14 01 00 00    	jne    c001803a <scanMADT()+0x2ae>
c0017f26:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f2a:	8d 50 01             	lea    edx,[eax+0x1]
c0017f2d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f31:	8a 15 e0 0f 03 c0    	mov    dl,BYTE PTR ds:0xc0030fe0
c0017f37:	0f b6 d2             	movzx  edx,dl
c0017f3a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017f3e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017f42:	88 82 00 10 03 c0    	mov    BYTE PTR [edx-0x3ffcf000],al
c0017f48:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017f4c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f50:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f54:	01 d0                	add    eax,edx
c0017f56:	83 c0 2c             	add    eax,0x2c
c0017f59:	8a 00                	mov    al,BYTE PTR [eax]
c0017f5b:	0f b6 d0             	movzx  edx,al
c0017f5e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f62:	8d 48 01             	lea    ecx,[eax+0x1]
c0017f65:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f69:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017f6d:	0f b6 c0             	movzx  eax,al
c0017f70:	c1 e0 08             	shl    eax,0x8
c0017f73:	89 d1                	mov    ecx,edx
c0017f75:	09 c1                	or     ecx,eax
c0017f77:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f7b:	8d 50 02             	lea    edx,[eax+0x2]
c0017f7e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f82:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017f86:	0f b6 c0             	movzx  eax,al
c0017f89:	c1 e0 10             	shl    eax,0x10
c0017f8c:	09 c1                	or     ecx,eax
c0017f8e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f92:	8d 50 03             	lea    edx,[eax+0x3]
c0017f95:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f99:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017f9d:	0f b6 c0             	movzx  eax,al
c0017fa0:	c1 e0 18             	shl    eax,0x18
c0017fa3:	09 c1                	or     ecx,eax
c0017fa5:	89 ca                	mov    edx,ecx
c0017fa7:	a0 e0 0f 03 c0       	mov    al,ds:0xc0030fe0
c0017fac:	0f b6 c0             	movzx  eax,al
c0017faf:	89 14 85 20 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcefe0],edx
c0017fb6:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017fbb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fbf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fc3:	01 d0                	add    eax,edx
c0017fc5:	83 c0 2c             	add    eax,0x2c
c0017fc8:	8a 00                	mov    al,BYTE PTR [eax]
c0017fca:	0f b6 d0             	movzx  edx,al
c0017fcd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fd1:	8d 48 01             	lea    ecx,[eax+0x1]
c0017fd4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fd8:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017fdc:	0f b6 c0             	movzx  eax,al
c0017fdf:	c1 e0 08             	shl    eax,0x8
c0017fe2:	89 d1                	mov    ecx,edx
c0017fe4:	09 c1                	or     ecx,eax
c0017fe6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fea:	8d 50 02             	lea    edx,[eax+0x2]
c0017fed:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ff1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017ff5:	0f b6 c0             	movzx  eax,al
c0017ff8:	c1 e0 10             	shl    eax,0x10
c0017ffb:	09 c1                	or     ecx,eax
c0017ffd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018001:	8d 50 03             	lea    edx,[eax+0x3]
c0018004:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018008:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001800c:	0f b6 c0             	movzx  eax,al
c001800f:	c1 e0 18             	shl    eax,0x18
c0018012:	09 c1                	or     ecx,eax
c0018014:	89 ca                	mov    edx,ecx
c0018016:	a0 e0 0f 03 c0       	mov    al,ds:0xc0030fe0
c001801b:	0f b6 c0             	movzx  eax,al
c001801e:	89 14 85 a0 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcef60],edx
c0018025:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001802a:	a0 e0 0f 03 c0       	mov    al,ds:0xc0030fe0
c001802f:	40                   	inc    eax
c0018030:	a2 e0 0f 03 c0       	mov    ds:0xc0030fe0,al
c0018035:	e9 bb 01 00 00       	jmp    c00181f5 <scanMADT()+0x469>
c001803a:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c001803f:	0f 85 e9 00 00 00    	jne    c001812e <scanMADT()+0x3a2>
c0018045:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018049:	8d 50 01             	lea    edx,[eax+0x1]
c001804c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018050:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018054:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018058:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c001805c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018060:	8d 50 01             	lea    edx,[eax+0x1]
c0018063:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018067:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001806b:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001806f:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018073:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018077:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001807b:	01 d0                	add    eax,edx
c001807d:	83 c0 2c             	add    eax,0x2c
c0018080:	8a 00                	mov    al,BYTE PTR [eax]
c0018082:	0f b6 d0             	movzx  edx,al
c0018085:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018089:	8d 48 01             	lea    ecx,[eax+0x1]
c001808c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018090:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018094:	0f b6 c0             	movzx  eax,al
c0018097:	c1 e0 08             	shl    eax,0x8
c001809a:	89 d1                	mov    ecx,edx
c001809c:	09 c1                	or     ecx,eax
c001809e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180a2:	8d 50 02             	lea    edx,[eax+0x2]
c00180a5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180a9:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00180ad:	0f b6 c0             	movzx  eax,al
c00180b0:	c1 e0 10             	shl    eax,0x10
c00180b3:	09 c1                	or     ecx,eax
c00180b5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180b9:	8d 50 03             	lea    edx,[eax+0x3]
c00180bc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180c0:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00180c4:	0f b6 c0             	movzx  eax,al
c00180c7:	c1 e0 18             	shl    eax,0x18
c00180ca:	09 c8                	or     eax,ecx
c00180cc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00180d0:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00180d5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180d9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180dd:	01 d0                	add    eax,edx
c00180df:	83 c0 2c             	add    eax,0x2c
c00180e2:	8a 00                	mov    al,BYTE PTR [eax]
c00180e4:	0f b6 c0             	movzx  eax,al
c00180e7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00180eb:	8d 4a 01             	lea    ecx,[edx+0x1]
c00180ee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180f2:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c00180f6:	0f b6 d2             	movzx  edx,dl
c00180f9:	c1 e2 08             	shl    edx,0x8
c00180fc:	09 d0                	or     eax,edx
c00180fe:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0018103:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0018108:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001810d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018111:	88 90 a0 d8 02 c0    	mov    BYTE PTR [eax-0x3ffd2760],dl
c0018117:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c001811c:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0018121:	66 89 84 12 c0 0f 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcf040],ax
c0018129:	e9 c7 00 00 00       	jmp    c00181f5 <scanMADT()+0x469>
c001812e:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0018133:	0f 85 b0 00 00 00    	jne    c00181e9 <scanMADT()+0x45d>
c0018139:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001813d:	8d 50 01             	lea    edx,[eax+0x1]
c0018140:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018144:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018148:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001814c:	0f b6 c0             	movzx  eax,al
c001814f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018153:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018157:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001815b:	01 d0                	add    eax,edx
c001815d:	83 c0 2c             	add    eax,0x2c
c0018160:	8a 00                	mov    al,BYTE PTR [eax]
c0018162:	0f b6 d0             	movzx  edx,al
c0018165:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018169:	8d 48 01             	lea    ecx,[eax+0x1]
c001816c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018170:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018174:	0f b6 c0             	movzx  eax,al
c0018177:	c1 e0 08             	shl    eax,0x8
c001817a:	09 d0                	or     eax,edx
c001817c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018180:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0018185:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018189:	8d 50 01             	lea    edx,[eax+0x1]
c001818c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018190:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018194:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018198:	0f b6 c0             	movzx  eax,al
c001819b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001819f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181a3:	c1 e0 08             	shl    eax,0x8
c00181a6:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00181aa:	89 c1                	mov    ecx,eax
c00181ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00181b0:	c1 e0 18             	shl    eax,0x18
c00181b3:	89 c3                	mov    ebx,eax
c00181b5:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c00181ba:	8d 50 01             	lea    edx,[eax+0x1]
c00181bd:	89 15 30 0f 03 c0    	mov    DWORD PTR ds:0xc0030f30,edx
c00181c3:	09 d9                	or     ecx,ebx
c00181c5:	89 ca                	mov    edx,ecx
c00181c7:	89 14 85 40 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf0c0],edx
c00181ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00181d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00181d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00181da:	68 44 b7 02 c0       	push   0xc002b744
c00181df:	e8 8d ad ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c00181e4:	83 c4 10             	add    esp,0x10
c00181e7:	eb 0c                	jmp    c00181f5 <scanMADT()+0x469>
c00181e9:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c00181ee:	75 05                	jne    c00181f5 <scanMADT()+0x469>
c00181f0:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c00181f5:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c00181fa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00181fe:	01 d0                	add    eax,edx
c0018200:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018204:	e9 54 fc ff ff       	jmp    c0017e5d <scanMADT()+0xd1>
c0018209:	90                   	nop
c001820a:	eb 01                	jmp    c001820d <scanMADT()+0x481>
c001820c:	90                   	nop
c001820d:	83 c4 38             	add    esp,0x38
c0018210:	5b                   	pop    ebx
c0018211:	c3                   	ret    

c0018212 <ACPI::ACPI()>:
c0018212:	83 ec 0c             	sub    esp,0xc
c0018215:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018219:	83 ec 08             	sub    esp,0x8
c001821c:	68 e7 b5 02 c0       	push   0xc002b5e7
c0018221:	50                   	push   eax
c0018222:	e8 61 c3 ff ff       	call   c0014588 <Device::Device(char const*)>
c0018227:	83 c4 10             	add    esp,0x10
c001822a:	ba b8 b7 02 c0       	mov    edx,0xc002b7b8
c001822f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018233:	89 10                	mov    DWORD PTR [eax],edx
c0018235:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018239:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0018240:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018244:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c001824e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018252:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c001825c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018260:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0018267:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001826b:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0018272:	e8 15 fb ff ff       	call   c0017d8c <scanMADT()>
c0018277:	90                   	nop
c0018278:	83 c4 0c             	add    esp,0xc
c001827b:	c3                   	ret    

c001827c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c001827c:	83 ec 2c             	sub    esp,0x2c
c001827f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0018283:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018287:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001828b:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001828f:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0018294:	88 d0                	mov    al,dl
c0018296:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001829a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001829f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00182a7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00182ab:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00182b1:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00182b5:	0f 8d 97 00 00 00    	jge    c0018352 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c00182bb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00182bf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00182c3:	83 c2 2a             	add    edx,0x2a
c00182c6:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c00182ca:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c00182cf:	75 78                	jne    c0018349 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00182d1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00182d5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00182d9:	83 c2 2a             	add    edx,0x2a
c00182dc:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c00182e0:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c00182e4:	75 63                	jne    c0018349 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00182e6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00182eb:	74 3a                	je     c0018327 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c00182ed:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00182f1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00182f5:	83 c2 2a             	add    edx,0x2a
c00182f8:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c00182fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018300:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0018303:	39 c2                	cmp    edx,eax
c0018305:	74 10                	je     c0018317 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0018307:	83 ec 0c             	sub    esp,0xc
c001830a:	68 80 b7 02 c0       	push   0xc002b780
c001830f:	e8 0f 23 00 00       	call   c001a623 <Krnl::panic(char const*)>
c0018314:	83 c4 10             	add    esp,0x10
c0018317:	83 ec 0c             	sub    esp,0xc
c001831a:	68 ec b5 02 c0       	push   0xc002b5ec
c001831f:	e8 ff 22 00 00       	call   c001a623 <Krnl::panic(char const*)>
c0018324:	83 c4 10             	add    esp,0x10
c0018327:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001832b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001832f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018333:	83 c2 2a             	add    edx,0x2a
c0018336:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c001833a:	8b 02                	mov    eax,DWORD PTR [edx]
c001833c:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001833f:	89 01                	mov    DWORD PTR [ecx],eax
c0018341:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018344:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0018349:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001834d:	e9 55 ff ff ff       	jmp    c00182a7 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0018352:	90                   	nop
c0018353:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018357:	83 c4 2c             	add    esp,0x2c
c001835a:	c2 04 00             	ret    0x4
c001835d:	90                   	nop

c001835e <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c001835e:	83 ec 1c             	sub    esp,0x1c
c0018361:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018365:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0018369:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001836d:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0018372:	88 c8                	mov    al,cl
c0018374:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018378:	88 d0                	mov    al,dl
c001837a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001837e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018382:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018388:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001838c:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001838f:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0018393:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0018397:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001839b:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00183a1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00183a5:	8d 48 2a             	lea    ecx,[eax+0x2a]
c00183a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00183ac:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c00183b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183b5:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00183bb:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00183bf:	8d 48 01             	lea    ecx,[eax+0x1]
c00183c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183c6:	83 c2 2a             	add    edx,0x2a
c00183c9:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c00183cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183d1:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00183d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183db:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00183de:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00183e2:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c00183e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183ea:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00183f0:	8d 50 01             	lea    edx,[eax+0x1]
c00183f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183f7:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c00183fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018401:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018407:	3d 00 02 00 00       	cmp    eax,0x200
c001840c:	75 10                	jne    c001841e <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c001840e:	83 ec 0c             	sub    esp,0xc
c0018411:	68 fb b5 02 c0       	push   0xc002b5fb
c0018416:	e8 08 22 00 00       	call   c001a623 <Krnl::panic(char const*)>
c001841b:	83 c4 10             	add    esp,0x10
c001841e:	90                   	nop
c001841f:	83 c4 1c             	add    esp,0x1c
c0018422:	c3                   	ret    
c0018423:	90                   	nop

c0018424 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0018424:	b8 00 00 00 00       	mov    eax,0x0
c0018429:	c3                   	ret    

c001842a <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001842a:	83 ec 1c             	sub    esp,0x1c
c001842d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018431:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0018434:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018438:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c001843d:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018442:	83 ec 08             	sub    esp,0x8
c0018445:	52                   	push   edx
c0018446:	50                   	push   eax
c0018447:	e8 0c 6a ff ff       	call   c000ee58 <Computer::readCMOS(unsigned char)>
c001844c:	83 c4 10             	add    esp,0x10
c001844f:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018453:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c0018458:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001845d:	83 ec 04             	sub    esp,0x4
c0018460:	6a 01                	push   0x1
c0018462:	52                   	push   edx
c0018463:	50                   	push   eax
c0018464:	e8 05 6b ff ff       	call   c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>
c0018469:	83 c4 10             	add    esp,0x10
c001846c:	90                   	nop
c001846d:	83 c4 1c             	add    esp,0x1c
c0018470:	c3                   	ret    
c0018471:	90                   	nop

c0018472 <ACPI::open(int, int, void*)>:
c0018472:	53                   	push   ebx
c0018473:	83 ec 28             	sub    esp,0x28
c0018476:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001847a:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0018481:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018485:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c001848c:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c0018491:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018497:	83 e0 04             	and    eax,0x4
c001849a:	84 c0                	test   al,al
c001849c:	74 47                	je     c00184e5 <ACPI::open(int, int, void*)+0x73>
c001849e:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c00184a3:	83 ec 08             	sub    esp,0x8
c00184a6:	68 18 b6 02 c0       	push   0xc002b618
c00184ab:	50                   	push   eax
c00184ac:	e8 3f f8 ff ff       	call   c0017cf0 <findDataTable(unsigned char*, char*)>
c00184b1:	83 c4 10             	add    esp,0x10
c00184b4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00184b8:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00184bd:	74 26                	je     c00184e5 <ACPI::open(int, int, void*)+0x73>
c00184bf:	83 ec 0c             	sub    esp,0xc
c00184c2:	68 1d b6 02 c0       	push   0xc002b61d
c00184c7:	e8 a5 aa ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c00184cc:	83 c4 10             	add    esp,0x10
c00184cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184d3:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00184da:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184de:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00184e5:	c7 44 24 18 5f 0c 00 00 	mov    DWORD PTR [esp+0x18],0xc5f
c00184ed:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00184f1:	8a 00                	mov    al,BYTE PTR [eax]
c00184f3:	3c 01                	cmp    al,0x1
c00184f5:	75 28                	jne    c001851f <ACPI::open(int, int, void*)+0xad>
c00184f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184fb:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018502:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018506:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c001850d:	83 ec 0c             	sub    esp,0xc
c0018510:	68 2e b6 02 c0       	push   0xc002b62e
c0018515:	e8 57 aa ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001851a:	83 c4 10             	add    esp,0x10
c001851d:	eb 25                	jmp    c0018544 <ACPI::open(int, int, void*)+0xd2>
c001851f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018523:	8a 00                	mov    al,BYTE PTR [eax]
c0018525:	3c 02                	cmp    al,0x2
c0018527:	75 1b                	jne    c0018544 <ACPI::open(int, int, void*)+0xd2>
c0018529:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001852d:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018534:	83 ec 0c             	sub    esp,0xc
c0018537:	68 36 b6 02 c0       	push   0xc002b636
c001853c:	e8 30 aa ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0018541:	83 c4 10             	add    esp,0x10
c0018544:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018548:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c001854e:	83 f0 01             	xor    eax,0x1
c0018551:	84 c0                	test   al,al
c0018553:	74 6a                	je     c00185bf <ACPI::open(int, int, void*)+0x14d>
c0018555:	83 ec 0c             	sub    esp,0xc
c0018558:	68 3e b6 02 c0       	push   0xc002b63e
c001855d:	e8 0f aa ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0018562:	83 c4 10             	add    esp,0x10
c0018565:	e8 e6 7b fe ff       	call   c0000150 <manualPCIProbe>
c001856a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001856e:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0018573:	75 28                	jne    c001859d <ACPI::open(int, int, void*)+0x12b>
c0018575:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018579:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018580:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018584:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c001858b:	83 ec 0c             	sub    esp,0xc
c001858e:	68 4c b6 02 c0       	push   0xc002b64c
c0018593:	e8 d9 a9 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0018598:	83 c4 10             	add    esp,0x10
c001859b:	eb 22                	jmp    c00185bf <ACPI::open(int, int, void*)+0x14d>
c001859d:	83 7c 24 14 02       	cmp    DWORD PTR [esp+0x14],0x2
c00185a2:	75 1b                	jne    c00185bf <ACPI::open(int, int, void*)+0x14d>
c00185a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185a8:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00185af:	83 ec 0c             	sub    esp,0xc
c00185b2:	68 56 b6 02 c0       	push   0xc002b656
c00185b7:	e8 b5 a9 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c00185bc:	83 c4 10             	add    esp,0x10
c00185bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185c3:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00185c9:	84 c0                	test   al,al
c00185cb:	74 13                	je     c00185e0 <ACPI::open(int, int, void*)+0x16e>
c00185cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185d1:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c00185d7:	83 f0 01             	xor    eax,0x1
c00185da:	0f b6 c0             	movzx  eax,al
c00185dd:	40                   	inc    eax
c00185de:	eb 05                	jmp    c00185e5 <ACPI::open(int, int, void*)+0x173>
c00185e0:	b8 00 00 00 00       	mov    eax,0x0
c00185e5:	83 ec 08             	sub    esp,0x8
c00185e8:	50                   	push   eax
c00185e9:	68 60 b6 02 c0       	push   0xc002b660
c00185ee:	e8 7e a9 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c00185f3:	83 c4 10             	add    esp,0x10
c00185f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185fa:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018600:	84 c0                	test   al,al
c0018602:	74 67                	je     c001866b <ACPI::open(int, int, void*)+0x1f9>
c0018604:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c001860c:	83 ec 0c             	sub    esp,0xc
c001860f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018613:	e8 28 72 ff ff       	call   c000f840 <malloc>
c0018618:	83 c4 10             	add    esp,0x10
c001861b:	89 c3                	mov    ebx,eax
c001861d:	83 ec 0c             	sub    esp,0xc
c0018620:	53                   	push   ebx
c0018621:	e8 26 a3 00 00       	call   c002294c <PCI::PCI()>
c0018626:	83 c4 10             	add    esp,0x10
c0018629:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001862d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018631:	83 ec 08             	sub    esp,0x8
c0018634:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018638:	50                   	push   eax
c0018639:	e8 5a bd ff ff       	call   c0014398 <Device::addChild(Device*)>
c001863e:	83 c4 10             	add    esp,0x10
c0018641:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018645:	8b 00                	mov    eax,DWORD PTR [eax]
c0018647:	83 c0 08             	add    eax,0x8
c001864a:	8b 00                	mov    eax,DWORD PTR [eax]
c001864c:	6a 00                	push   0x0
c001864e:	6a 00                	push   0x0
c0018650:	6a 00                	push   0x0
c0018652:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018656:	ff d0                	call   eax
c0018658:	83 c4 10             	add    esp,0x10
c001865b:	83 ec 0c             	sub    esp,0xc
c001865e:	68 69 b6 02 c0       	push   0xc002b669
c0018663:	e8 09 a9 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0018668:	83 c4 10             	add    esp,0x10
c001866b:	83 ec 0c             	sub    esp,0xc
c001866e:	68 74 b6 02 c0       	push   0xc002b674
c0018673:	e8 cb 46 00 00       	call   c001cd43 <Thr::loadKernelSymbolTable(char const*)>
c0018678:	83 c4 10             	add    esp,0x10
c001867b:	8b 1d 48 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e648
c0018681:	83 ec 08             	sub    esp,0x8
c0018684:	6a 01                	push   0x1
c0018686:	68 92 b6 02 c0       	push   0xc002b692
c001868b:	e8 10 51 00 00       	call   c001d7a0 <Thr::loadDLL(char const*, bool)>
c0018690:	83 c4 10             	add    esp,0x10
c0018693:	83 ec 08             	sub    esp,0x8
c0018696:	53                   	push   ebx
c0018697:	50                   	push   eax
c0018698:	e8 37 53 00 00       	call   c001d9d4 <Thr::executeDLL(unsigned long, void*)>
c001869d:	83 c4 10             	add    esp,0x10
c00186a0:	8b 1d 48 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e648
c00186a6:	83 ec 08             	sub    esp,0x8
c00186a9:	6a 01                	push   0x1
c00186ab:	68 af b6 02 c0       	push   0xc002b6af
c00186b0:	e8 eb 50 00 00       	call   c001d7a0 <Thr::loadDLL(char const*, bool)>
c00186b5:	83 c4 10             	add    esp,0x10
c00186b8:	83 ec 08             	sub    esp,0x8
c00186bb:	53                   	push   ebx
c00186bc:	50                   	push   eax
c00186bd:	e8 12 53 00 00       	call   c001d9d4 <Thr::executeDLL(unsigned long, void*)>
c00186c2:	83 c4 10             	add    esp,0x10
c00186c5:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c00186ca:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00186d0:	83 e0 04             	and    eax,0x4
c00186d3:	84 c0                	test   al,al
c00186d5:	0f 84 d2 00 00 00    	je     c00187ad <ACPI::open(int, int, void*)+0x33b>
c00186db:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00186e2:	83 ec 0c             	sub    esp,0xc
c00186e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00186e9:	e8 52 71 ff ff       	call   c000f840 <malloc>
c00186ee:	83 c4 10             	add    esp,0x10
c00186f1:	89 c3                	mov    ebx,eax
c00186f3:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c00186f8:	83 ec 04             	sub    esp,0x4
c00186fb:	50                   	push   eax
c00186fc:	68 cc b6 02 c0       	push   0xc002b6cc
c0018701:	53                   	push   ebx
c0018702:	e8 c3 ad ff ff       	call   c00134ca <File::File(char const*, Process*)>
c0018707:	83 c4 10             	add    esp,0x10
c001870a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001870e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018713:	74 17                	je     c001872c <ACPI::open(int, int, void*)+0x2ba>
c0018715:	83 ec 0c             	sub    esp,0xc
c0018718:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001871c:	e8 7b b0 ff ff       	call   c001379c <File::exists()>
c0018721:	83 c4 10             	add    esp,0x10
c0018724:	84 c0                	test   al,al
c0018726:	74 04                	je     c001872c <ACPI::open(int, int, void*)+0x2ba>
c0018728:	b0 01                	mov    al,0x1
c001872a:	eb 02                	jmp    c001872e <ACPI::open(int, int, void*)+0x2bc>
c001872c:	b0 00                	mov    al,0x0
c001872e:	84 c0                	test   al,al
c0018730:	74 22                	je     c0018754 <ACPI::open(int, int, void*)+0x2e2>
c0018732:	83 ec 08             	sub    esp,0x8
c0018735:	6a 01                	push   0x1
c0018737:	68 cc b6 02 c0       	push   0xc002b6cc
c001873c:	e8 5f 50 00 00       	call   c001d7a0 <Thr::loadDLL(char const*, bool)>
c0018741:	83 c4 10             	add    esp,0x10
c0018744:	83 ec 08             	sub    esp,0x8
c0018747:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001874b:	50                   	push   eax
c001874c:	e8 83 52 00 00       	call   c001d9d4 <Thr::executeDLL(unsigned long, void*)>
c0018751:	83 c4 10             	add    esp,0x10
c0018754:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018759:	74 1e                	je     c0018779 <ACPI::open(int, int, void*)+0x307>
c001875b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018760:	74 17                	je     c0018779 <ACPI::open(int, int, void*)+0x307>
c0018762:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018766:	8b 00                	mov    eax,DWORD PTR [eax]
c0018768:	83 c0 08             	add    eax,0x8
c001876b:	8b 00                	mov    eax,DWORD PTR [eax]
c001876d:	83 ec 0c             	sub    esp,0xc
c0018770:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018774:	ff d0                	call   eax
c0018776:	83 c4 10             	add    esp,0x10
c0018779:	a1 28 0f 03 c0       	mov    eax,ds:0xc0030f28
c001877e:	83 ec 08             	sub    esp,0x8
c0018781:	68 e9 b6 02 c0       	push   0xc002b6e9
c0018786:	50                   	push   eax
c0018787:	e8 64 f5 ff ff       	call   c0017cf0 <findDataTable(unsigned char*, char*)>
c001878c:	83 c4 10             	add    esp,0x10
c001878f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018793:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018798:	74 13                	je     c00187ad <ACPI::open(int, int, void*)+0x33b>
c001879a:	83 ec 08             	sub    esp,0x8
c001879d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00187a1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00187a5:	e8 80 fc ff ff       	call   c001842a <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00187aa:	83 c4 10             	add    esp,0x10
c00187ad:	b8 00 00 00 00       	mov    eax,0x0
c00187b2:	83 c4 28             	add    esp,0x28
c00187b5:	5b                   	pop    ebx
c00187b6:	c3                   	ret    
c00187b7:	90                   	nop

c00187b8 <ACPI::sleep()>:
c00187b8:	83 ec 0c             	sub    esp,0xc
c00187bb:	a1 00 0d 03 c0       	mov    eax,ds:0xc0030d00
c00187c0:	85 c0                	test   eax,eax
c00187c2:	74 07                	je     c00187cb <ACPI::sleep()+0x13>
c00187c4:	a1 00 0d 03 c0       	mov    eax,ds:0xc0030d00
c00187c9:	ff d0                	call   eax
c00187cb:	90                   	nop
c00187cc:	83 c4 0c             	add    esp,0xc
c00187cf:	c3                   	ret    

c00187d0 <CPU::close(int, int, void*)>:
c00187d0:	31 c0                	xor    eax,eax
c00187d2:	c3                   	ret    
c00187d3:	90                   	nop

c00187d4 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c00187d4:	55                   	push   ebp
c00187d5:	57                   	push   edi
c00187d6:	56                   	push   esi
c00187d7:	53                   	push   ebx
c00187d8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00187dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00187e0:	89 ce                	mov    esi,ecx
c00187e2:	89 d5                	mov    ebp,edx
c00187e4:	80 f9 04             	cmp    cl,0x4
c00187e7:	75 28                	jne    c0018811 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c00187e9:	8d 42 f9             	lea    eax,[edx-0x7]
c00187ec:	3c 03                	cmp    al,0x3
c00187ee:	0f 86 63 01 00 00    	jbe    c0018957 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00187f4:	80 fa 03             	cmp    dl,0x3
c00187f7:	0f 84 5a 01 00 00    	je     c0018957 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00187fd:	8d 7a f2             	lea    edi,[edx-0xe]
c0018800:	b8 70 da 02 c0       	mov    eax,0xc002da70
c0018805:	89 fb                	mov    ebx,edi
c0018807:	80 fb 01             	cmp    bl,0x1
c001880a:	77 4e                	ja     c001885a <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c001880c:	e9 52 01 00 00       	jmp    c0018963 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018811:	80 f9 05             	cmp    cl,0x5
c0018814:	75 4d                	jne    c0018863 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0018816:	b8 80 da 02 c0       	mov    eax,0xc002da80
c001881b:	80 fa 03             	cmp    dl,0x3
c001881e:	0f 86 3f 01 00 00    	jbe    c0018963 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018824:	8d 7a fa             	lea    edi,[edx-0x6]
c0018827:	b8 90 da 02 c0       	mov    eax,0xc002da90
c001882c:	89 fb                	mov    ebx,edi
c001882e:	80 fb 01             	cmp    bl,0x1
c0018831:	0f 86 2c 01 00 00    	jbe    c0018963 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018837:	b8 a0 da 02 c0       	mov    eax,0xc002daa0
c001883c:	80 fa 08             	cmp    dl,0x8
c001883f:	0f 84 1e 01 00 00    	je     c0018963 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018845:	89 d7                	mov    edi,edx
c0018847:	b8 b0 da 02 c0       	mov    eax,0xc002dab0
c001884c:	83 e7 fb             	and    edi,0xfffffffb
c001884f:	89 fb                	mov    ebx,edi
c0018851:	80 fb 09             	cmp    bl,0x9
c0018854:	0f 84 09 01 00 00    	je     c0018963 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001885a:	31 c0                	xor    eax,eax
c001885c:	89 eb                	mov    ebx,ebp
c001885e:	0f b6 fb             	movzx  edi,bl
c0018861:	eb 30                	jmp    c0018893 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0018863:	31 c0                	xor    eax,eax
c0018865:	80 f9 06             	cmp    cl,0x6
c0018868:	75 f2                	jne    c001885c <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001886a:	80 fa 0a             	cmp    dl,0xa
c001886d:	77 ed                	ja     c001885c <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001886f:	bf de 05 00 00       	mov    edi,0x5de
c0018874:	0f a3 d7             	bt     edi,edx
c0018877:	73 e3                	jae    c001885c <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018879:	b8 c0 da 02 c0       	mov    eax,0xc002dac0
c001887e:	e9 e0 00 00 00       	jmp    c0018963 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018883:	39 c7                	cmp    edi,eax
c0018885:	0f 84 d3 00 00 00    	je     c001895e <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001888b:	40                   	inc    eax
c001888c:	3d d0 00 00 00       	cmp    eax,0xd0
c0018891:	74 09                	je     c001889c <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0018893:	89 f3                	mov    ebx,esi
c0018895:	80 fb 0f             	cmp    bl,0xf
c0018898:	75 f1                	jne    c001888b <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c001889a:	eb e7                	jmp    c0018883 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c001889c:	80 f9 10             	cmp    cl,0x10
c001889f:	75 14                	jne    c00188b5 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c00188a1:	8d 42 fc             	lea    eax,[edx-0x4]
c00188a4:	83 e0 fb             	and    eax,0xfffffffb
c00188a7:	3c 02                	cmp    al,0x2
c00188a9:	76 34                	jbe    c00188df <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c00188ab:	b8 ce ba 02 c0       	mov    eax,0xc002bace
c00188b0:	80 fa 02             	cmp    dl,0x2
c00188b3:	eb 24                	jmp    c00188d9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c00188b5:	80 f9 11             	cmp    cl,0x11
c00188b8:	75 13                	jne    c00188cd <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c00188ba:	b8 ce ba 02 c0       	mov    eax,0xc002bace
c00188bf:	80 fa 03             	cmp    dl,0x3
c00188c2:	0f 85 9b 00 00 00    	jne    c0018963 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188c8:	e9 91 00 00 00       	jmp    c001895e <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00188cd:	80 f9 12             	cmp    cl,0x12
c00188d0:	75 14                	jne    c00188e6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c00188d2:	b8 ce ba 02 c0       	mov    eax,0xc002bace
c00188d7:	fe ca                	dec    dl
c00188d9:	0f 85 84 00 00 00    	jne    c0018963 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188df:	b8 e0 da 02 c0       	mov    eax,0xc002dae0
c00188e4:	eb 7d                	jmp    c0018963 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188e6:	80 f9 14             	cmp    cl,0x14
c00188e9:	75 12                	jne    c00188fd <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c00188eb:	4a                   	dec    edx
c00188ec:	b8 ce ba 02 c0       	mov    eax,0xc002bace
c00188f1:	80 fa 01             	cmp    dl,0x1
c00188f4:	77 6d                	ja     c0018963 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188f6:	b8 f0 da 02 c0       	mov    eax,0xc002daf0
c00188fb:	eb 66                	jmp    c0018963 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188fd:	80 f9 15             	cmp    cl,0x15
c0018900:	75 31                	jne    c0018933 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0018902:	b8 00 db 02 c0       	mov    eax,0xc002db00
c0018907:	80 fa 01             	cmp    dl,0x1
c001890a:	74 57                	je     c0018963 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001890c:	b8 ce ba 02 c0       	mov    eax,0xc002bace
c0018911:	80 fa 13             	cmp    dl,0x13
c0018914:	76 0c                	jbe    c0018922 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0018916:	80 fa 30             	cmp    dl,0x30
c0018919:	75 48                	jne    c0018963 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001891b:	b8 20 db 02 c0       	mov    eax,0xc002db20
c0018920:	eb 41                	jmp    c0018963 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018922:	b9 04 00 09 00       	mov    ecx,0x90004
c0018927:	0f a3 d1             	bt     ecx,edx
c001892a:	73 37                	jae    c0018963 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001892c:	b8 10 db 02 c0       	mov    eax,0xc002db10
c0018931:	eb 30                	jmp    c0018963 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018933:	b8 ce ba 02 c0       	mov    eax,0xc002bace
c0018938:	80 f9 16             	cmp    cl,0x16
c001893b:	75 26                	jne    c0018963 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001893d:	b8 30 db 02 c0       	mov    eax,0xc002db30
c0018942:	84 d2                	test   dl,dl
c0018944:	74 1d                	je     c0018963 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018946:	b8 ce ba 02 c0       	mov    eax,0xc002bace
c001894b:	80 fa 30             	cmp    dl,0x30
c001894e:	75 13                	jne    c0018963 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018950:	b8 40 db 02 c0       	mov    eax,0xc002db40
c0018955:	eb 0c                	jmp    c0018963 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018957:	b8 60 da 02 c0       	mov    eax,0xc002da60
c001895c:	eb 05                	jmp    c0018963 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001895e:	b8 d0 da 02 c0       	mov    eax,0xc002dad0
c0018963:	5b                   	pop    ebx
c0018964:	5e                   	pop    esi
c0018965:	5f                   	pop    edi
c0018966:	5d                   	pop    ebp
c0018967:	c3                   	ret    

c0018968 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0018968:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001896c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018970:	80 f9 04             	cmp    cl,0x4
c0018973:	75 6b                	jne    c00189e0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0018975:	b8 c0 d8 02 c0       	mov    eax,0xc002d8c0
c001897a:	80 fa 01             	cmp    dl,0x1
c001897d:	0f 86 92 02 00 00    	jbe    c0018c15 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018983:	b8 d0 d8 02 c0       	mov    eax,0xc002d8d0
c0018988:	80 fa 02             	cmp    dl,0x2
c001898b:	0f 84 84 02 00 00    	je     c0018c15 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018991:	b8 e0 d8 02 c0       	mov    eax,0xc002d8e0
c0018996:	80 fa 03             	cmp    dl,0x3
c0018999:	0f 84 76 02 00 00    	je     c0018c15 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001899f:	b8 f0 d8 02 c0       	mov    eax,0xc002d8f0
c00189a4:	80 fa 04             	cmp    dl,0x4
c00189a7:	0f 84 68 02 00 00    	je     c0018c15 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189ad:	b8 00 d9 02 c0       	mov    eax,0xc002d900
c00189b2:	80 fa 05             	cmp    dl,0x5
c00189b5:	0f 84 5a 02 00 00    	je     c0018c15 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189bb:	b8 e0 d8 02 c0       	mov    eax,0xc002d8e0
c00189c0:	80 fa 07             	cmp    dl,0x7
c00189c3:	0f 84 4c 02 00 00    	je     c0018c15 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189c9:	83 ea 08             	sub    edx,0x8
c00189cc:	b8 ce ba 02 c0       	mov    eax,0xc002bace
c00189d1:	80 fa 01             	cmp    dl,0x1
c00189d4:	0f 87 3b 02 00 00    	ja     c0018c15 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189da:	b8 10 d9 02 c0       	mov    eax,0xc002d910
c00189df:	c3                   	ret    
c00189e0:	80 f9 05             	cmp    cl,0x5
c00189e3:	75 45                	jne    c0018a2a <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c00189e5:	8d 4a ff             	lea    ecx,[edx-0x1]
c00189e8:	b8 20 d9 02 c0       	mov    eax,0xc002d920
c00189ed:	80 f9 02             	cmp    cl,0x2
c00189f0:	0f 86 1f 02 00 00    	jbe    c0018c15 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189f6:	80 fa 04             	cmp    dl,0x4
c00189f9:	0f 84 f3 01 00 00    	je     c0018bf2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c00189ff:	80 fa 07             	cmp    dl,0x7
c0018a02:	0f 84 0d 02 00 00    	je     c0018c15 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a08:	b8 30 d9 02 c0       	mov    eax,0xc002d930
c0018a0d:	80 fa 08             	cmp    dl,0x8
c0018a10:	0f 84 ff 01 00 00    	je     c0018c15 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a16:	b8 ce ba 02 c0       	mov    eax,0xc002bace
c0018a1b:	80 fa 09             	cmp    dl,0x9
c0018a1e:	0f 85 f1 01 00 00    	jne    c0018c15 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a24:	b8 40 d9 02 c0       	mov    eax,0xc002d940
c0018a29:	c3                   	ret    
c0018a2a:	80 f9 06             	cmp    cl,0x6
c0018a2d:	0f 85 85 01 00 00    	jne    c0018bb8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018a33:	b8 50 d9 02 c0       	mov    eax,0xc002d950
c0018a38:	80 fa 01             	cmp    dl,0x1
c0018a3b:	0f 84 d4 01 00 00    	je     c0018c15 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a41:	8d 42 fb             	lea    eax,[edx-0x5]
c0018a44:	3c 01                	cmp    al,0x1
c0018a46:	0f 86 ac 01 00 00    	jbe    c0018bf8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018a4c:	80 fa 03             	cmp    dl,0x3
c0018a4f:	0f 84 a3 01 00 00    	je     c0018bf8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018a55:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018a58:	b8 70 d9 02 c0       	mov    eax,0xc002d970
c0018a5d:	80 f9 01             	cmp    cl,0x1
c0018a60:	0f 86 af 01 00 00    	jbe    c0018c15 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a66:	80 fa 09             	cmp    dl,0x9
c0018a69:	0f 84 8f 01 00 00    	je     c0018bfe <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018a6f:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018a72:	80 f9 01             	cmp    cl,0x1
c0018a75:	0f 86 9a 01 00 00    	jbe    c0018c15 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a7b:	b8 80 d9 02 c0       	mov    eax,0xc002d980
c0018a80:	80 fa 0d             	cmp    dl,0xd
c0018a83:	0f 84 8c 01 00 00    	je     c0018c15 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a89:	b8 90 d9 02 c0       	mov    eax,0xc002d990
c0018a8e:	80 fa 0e             	cmp    dl,0xe
c0018a91:	0f 84 7e 01 00 00    	je     c0018c15 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a97:	b8 a0 d9 02 c0       	mov    eax,0xc002d9a0
c0018a9c:	80 fa 0f             	cmp    dl,0xf
c0018a9f:	0f 84 70 01 00 00    	je     c0018c15 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018aa5:	b8 80 d9 02 c0       	mov    eax,0xc002d980
c0018aaa:	80 fa 15             	cmp    dl,0x15
c0018aad:	0f 84 62 01 00 00    	je     c0018c15 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ab3:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018ab6:	b8 a0 d9 02 c0       	mov    eax,0xc002d9a0
c0018abb:	80 f9 01             	cmp    cl,0x1
c0018abe:	0f 86 51 01 00 00    	jbe    c0018c15 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ac4:	80 fa 1a             	cmp    dl,0x1a
c0018ac7:	0f 84 37 01 00 00    	je     c0018c04 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018acd:	80 fa 1c             	cmp    dl,0x1c
c0018ad0:	0f 84 34 01 00 00    	je     c0018c0a <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018ad6:	80 fa 1d             	cmp    dl,0x1d
c0018ad9:	0f 84 36 01 00 00    	je     c0018c15 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018adf:	b8 d0 d9 02 c0       	mov    eax,0xc002d9d0
c0018ae4:	80 fa 25             	cmp    dl,0x25
c0018ae7:	0f 84 28 01 00 00    	je     c0018c15 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018aed:	8d 4a da             	lea    ecx,[edx-0x26]
c0018af0:	b8 c0 d9 02 c0       	mov    eax,0xc002d9c0
c0018af5:	80 f9 01             	cmp    cl,0x1
c0018af8:	0f 86 17 01 00 00    	jbe    c0018c15 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018afe:	b8 e0 d9 02 c0       	mov    eax,0xc002d9e0
c0018b03:	80 fa 2a             	cmp    dl,0x2a
c0018b06:	0f 84 09 01 00 00    	je     c0018c15 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b0c:	b8 d0 d9 02 c0       	mov    eax,0xc002d9d0
c0018b11:	80 fa 2c             	cmp    dl,0x2c
c0018b14:	0f 84 fb 00 00 00    	je     c0018c15 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b1a:	b8 e0 d9 02 c0       	mov    eax,0xc002d9e0
c0018b1f:	80 fa 2d             	cmp    dl,0x2d
c0018b22:	0f 84 ed 00 00 00    	je     c0018c15 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b28:	b8 b0 d9 02 c0       	mov    eax,0xc002d9b0
c0018b2d:	80 fa 2e             	cmp    dl,0x2e
c0018b30:	0f 84 df 00 00 00    	je     c0018c15 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b36:	b8 d0 d9 02 c0       	mov    eax,0xc002d9d0
c0018b3b:	80 fa 2f             	cmp    dl,0x2f
c0018b3e:	0f 84 d1 00 00 00    	je     c0018c15 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b44:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018b47:	b8 c0 d9 02 c0       	mov    eax,0xc002d9c0
c0018b4c:	80 f9 01             	cmp    cl,0x1
c0018b4f:	0f 86 c0 00 00 00    	jbe    c0018c15 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b55:	b8 f0 d9 02 c0       	mov    eax,0xc002d9f0
c0018b5a:	80 fa 37             	cmp    dl,0x37
c0018b5d:	0f 84 b2 00 00 00    	je     c0018c15 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b63:	b8 00 da 02 c0       	mov    eax,0xc002da00
c0018b68:	80 fa 3a             	cmp    dl,0x3a
c0018b6b:	0f 84 a4 00 00 00    	je     c0018c15 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b71:	b8 10 da 02 c0       	mov    eax,0xc002da10
c0018b76:	80 fa 3c             	cmp    dl,0x3c
c0018b79:	0f 84 96 00 00 00    	je     c0018c15 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b7f:	b8 20 da 02 c0       	mov    eax,0xc002da20
c0018b84:	80 fa 3d             	cmp    dl,0x3d
c0018b87:	0f 84 88 00 00 00    	je     c0018c15 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b8d:	b8 00 da 02 c0       	mov    eax,0xc002da00
c0018b92:	80 fa 3e             	cmp    dl,0x3e
c0018b95:	74 7e                	je     c0018c15 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b97:	8d 42 bb             	lea    eax,[edx-0x45]
c0018b9a:	3c 01                	cmp    al,0x1
c0018b9c:	76 72                	jbe    c0018c10 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018b9e:	80 fa 3f             	cmp    dl,0x3f
c0018ba1:	74 6d                	je     c0018c10 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018ba3:	80 fa 4a             	cmp    dl,0x4a
c0018ba6:	74 0a                	je     c0018bb2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018ba8:	b8 ce ba 02 c0       	mov    eax,0xc002bace
c0018bad:	80 fa 4d             	cmp    dl,0x4d
c0018bb0:	75 63                	jne    c0018c15 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bb2:	b8 f0 d9 02 c0       	mov    eax,0xc002d9f0
c0018bb7:	c3                   	ret    
c0018bb8:	b8 ce ba 02 c0       	mov    eax,0xc002bace
c0018bbd:	80 f9 0b             	cmp    cl,0xb
c0018bc0:	75 0a                	jne    c0018bcc <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018bc2:	fe ca                	dec    dl
c0018bc4:	75 4f                	jne    c0018c15 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bc6:	b8 30 da 02 c0       	mov    eax,0xc002da30
c0018bcb:	c3                   	ret    
c0018bcc:	80 f9 0f             	cmp    cl,0xf
c0018bcf:	75 44                	jne    c0018c15 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bd1:	b8 40 da 02 c0       	mov    eax,0xc002da40
c0018bd6:	80 fa 02             	cmp    dl,0x2
c0018bd9:	76 3a                	jbe    c0018c15 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bdb:	8d 42 fd             	lea    eax,[edx-0x3]
c0018bde:	3c 01                	cmp    al,0x1
c0018be0:	76 0a                	jbe    c0018bec <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018be2:	b8 ce ba 02 c0       	mov    eax,0xc002bace
c0018be7:	80 fa 06             	cmp    dl,0x6
c0018bea:	75 29                	jne    c0018c15 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bec:	b8 50 da 02 c0       	mov    eax,0xc002da50
c0018bf1:	c3                   	ret    
c0018bf2:	b8 30 d9 02 c0       	mov    eax,0xc002d930
c0018bf7:	c3                   	ret    
c0018bf8:	b8 60 d9 02 c0       	mov    eax,0xc002d960
c0018bfd:	c3                   	ret    
c0018bfe:	b8 80 d9 02 c0       	mov    eax,0xc002d980
c0018c03:	c3                   	ret    
c0018c04:	b8 b0 d9 02 c0       	mov    eax,0xc002d9b0
c0018c09:	c3                   	ret    
c0018c0a:	b8 c0 d9 02 c0       	mov    eax,0xc002d9c0
c0018c0f:	c3                   	ret    
c0018c10:	b8 10 da 02 c0       	mov    eax,0xc002da10
c0018c15:	c3                   	ret    

c0018c16 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018c16:	60                   	pusha  
c0018c17:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018c1b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018c1f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018c23:	9c                   	pushf  
c0018c24:	fa                   	cli    
c0018c25:	0f 09                	wbinvd 
c0018c27:	0f 30                	wrmsr  
c0018c29:	9d                   	popf   
c0018c2a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018c2e:	89 02                	mov    DWORD PTR [edx],eax
c0018c30:	61                   	popa   
c0018c31:	c3                   	ret    

c0018c32 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018c32:	60                   	pusha  
c0018c33:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018c37:	9c                   	pushf  
c0018c38:	fa                   	cli    
c0018c39:	0f 09                	wbinvd 
c0018c3b:	31 c0                	xor    eax,eax
c0018c3d:	31 d2                	xor    edx,edx
c0018c3f:	0f 32                	rdmsr  
c0018c41:	9d                   	popf   
c0018c42:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018c46:	89 02                	mov    DWORD PTR [edx],eax
c0018c48:	61                   	popa   
c0018c49:	c3                   	ret    

c0018c4a <CPU::AMD_K6_writeback(int, int, int)>:
c0018c4a:	56                   	push   esi
c0018c4b:	53                   	push   ebx
c0018c4c:	83 ec 10             	sub    esp,0x10
c0018c4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018c53:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018c58:	75 5d                	jne    c0018cb7 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018c5a:	83 f8 08             	cmp    eax,0x8
c0018c5d:	75 09                	jne    c0018c68 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018c5f:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018c64:	7e 13                	jle    c0018c79 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018c66:	eb 30                	jmp    c0018c98 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018c68:	83 f8 06             	cmp    eax,0x6
c0018c6b:	7c 4a                	jl     c0018cb7 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018c6d:	83 f8 07             	cmp    eax,0x7
c0018c70:	7e 07                	jle    c0018c79 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018c72:	83 f8 09             	cmp    eax,0x9
c0018c75:	74 21                	je     c0018c98 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018c77:	eb 3e                	jmp    c0018cb7 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018c79:	89 e6                	mov    esi,esp
c0018c7b:	8b 1d 88 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e688
c0018c81:	56                   	push   esi
c0018c82:	c1 eb 15             	shr    ebx,0x15
c0018c85:	68 82 00 00 c0       	push   0xc0000082
c0018c8a:	83 e3 7e             	and    ebx,0x7e
c0018c8d:	e8 a0 ff ff ff       	call   c0018c32 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018c92:	56                   	push   esi
c0018c93:	6a 00                	push   0x0
c0018c95:	53                   	push   ebx
c0018c96:	eb 12                	jmp    c0018caa <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018c98:	89 e3                	mov    ebx,esp
c0018c9a:	53                   	push   ebx
c0018c9b:	68 82 00 00 c0       	push   0xc0000082
c0018ca0:	e8 8d ff ff ff       	call   c0018c32 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018ca5:	53                   	push   ebx
c0018ca6:	6a 00                	push   0x0
c0018ca8:	6a 00                	push   0x0
c0018caa:	68 82 00 00 c0       	push   0xc0000082
c0018caf:	e8 62 ff ff ff       	call   c0018c16 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018cb4:	83 c4 18             	add    esp,0x18
c0018cb7:	83 c4 10             	add    esp,0x10
c0018cba:	5b                   	pop    ebx
c0018cbb:	5e                   	pop    esi
c0018cbc:	c3                   	ret    
c0018cbd:	90                   	nop

c0018cbe <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018cbe:	55                   	push   ebp
c0018cbf:	57                   	push   edi
c0018cc0:	56                   	push   esi
c0018cc1:	53                   	push   ebx
c0018cc2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018cc6:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018cca:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018cce:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018cd2:	39 05 60 db 02 c0    	cmp    DWORD PTR ds:0xc002db60,eax
c0018cd8:	75 23                	jne    c0018cfd <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018cda:	a1 8c 11 03 c0       	mov    eax,ds:0xc003118c
c0018cdf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018ce3:	89 06                	mov    DWORD PTR [esi],eax
c0018ce5:	a1 88 11 03 c0       	mov    eax,ds:0xc0031188
c0018cea:	89 07                	mov    DWORD PTR [edi],eax
c0018cec:	a1 84 11 03 c0       	mov    eax,ds:0xc0031184
c0018cf1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018cf4:	a1 80 11 03 c0       	mov    eax,ds:0xc0031180
c0018cf9:	89 02                	mov    DWORD PTR [edx],eax
c0018cfb:	eb 3f                	jmp    c0018d3c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018cfd:	31 c9                	xor    ecx,ecx
c0018cff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d03:	0f a2                	cpuid  
c0018d05:	89 06                	mov    DWORD PTR [esi],eax
c0018d07:	89 1f                	mov    DWORD PTR [edi],ebx
c0018d09:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018d0d:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018d10:	89 10                	mov    DWORD PTR [eax],edx
c0018d12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d16:	a3 60 db 02 c0       	mov    ds:0xc002db60,eax
c0018d1b:	8b 06                	mov    eax,DWORD PTR [esi]
c0018d1d:	a3 8c 11 03 c0       	mov    ds:0xc003118c,eax
c0018d22:	8b 07                	mov    eax,DWORD PTR [edi]
c0018d24:	a3 88 11 03 c0       	mov    ds:0xc0031188,eax
c0018d29:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018d2c:	a3 84 11 03 c0       	mov    ds:0xc0031184,eax
c0018d31:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018d35:	8b 00                	mov    eax,DWORD PTR [eax]
c0018d37:	a3 80 11 03 c0       	mov    ds:0xc0031180,eax
c0018d3c:	5b                   	pop    ebx
c0018d3d:	5e                   	pop    esi
c0018d3e:	5f                   	pop    edi
c0018d3f:	5d                   	pop    ebp
c0018d40:	c3                   	ret    
c0018d41:	90                   	nop

c0018d42 <CPU::cpuidCheckEDX(unsigned int)>:
c0018d42:	83 ec 10             	sub    esp,0x10
c0018d45:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d49:	50                   	push   eax
c0018d4a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d4e:	50                   	push   eax
c0018d4f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d53:	50                   	push   eax
c0018d54:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d58:	50                   	push   eax
c0018d59:	6a 01                	push   0x1
c0018d5b:	e8 5e ff ff ff       	call   c0018cbe <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d60:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d64:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018d68:	0f 95 c0             	setne  al
c0018d6b:	83 c4 24             	add    esp,0x24
c0018d6e:	c3                   	ret    
c0018d6f:	90                   	nop

c0018d70 <CPU::cpuidCheckECX(unsigned int)>:
c0018d70:	83 ec 10             	sub    esp,0x10
c0018d73:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d77:	50                   	push   eax
c0018d78:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d7c:	50                   	push   eax
c0018d7d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d81:	50                   	push   eax
c0018d82:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d86:	50                   	push   eax
c0018d87:	6a 01                	push   0x1
c0018d89:	e8 30 ff ff ff       	call   c0018cbe <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d8e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d92:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018d96:	0f 95 c0             	setne  al
c0018d99:	83 c4 24             	add    esp,0x24
c0018d9c:	c3                   	ret    
c0018d9d:	90                   	nop

c0018d9e <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018d9e:	83 ec 10             	sub    esp,0x10
c0018da1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018da5:	50                   	push   eax
c0018da6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018daa:	50                   	push   eax
c0018dab:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018daf:	50                   	push   eax
c0018db0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018db4:	50                   	push   eax
c0018db5:	6a 07                	push   0x7
c0018db7:	e8 02 ff ff ff       	call   c0018cbe <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018dbc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018dc0:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018dc4:	0f 95 c0             	setne  al
c0018dc7:	83 c4 24             	add    esp,0x24
c0018dca:	c3                   	ret    
c0018dcb:	90                   	nop

c0018dcc <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018dcc:	83 ec 10             	sub    esp,0x10
c0018dcf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dd3:	50                   	push   eax
c0018dd4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dd8:	50                   	push   eax
c0018dd9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ddd:	50                   	push   eax
c0018dde:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018de2:	50                   	push   eax
c0018de3:	6a 07                	push   0x7
c0018de5:	e8 d4 fe ff ff       	call   c0018cbe <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018dea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018dee:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018df2:	0f 95 c0             	setne  al
c0018df5:	83 c4 24             	add    esp,0x24
c0018df8:	c3                   	ret    
c0018df9:	90                   	nop

c0018dfa <CPU::CPU()>:
c0018dfa:	83 ec 0c             	sub    esp,0xc
c0018dfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e01:	83 ec 08             	sub    esp,0x8
c0018e04:	68 ce ba 02 c0       	push   0xc002bace
c0018e09:	50                   	push   eax
c0018e0a:	e8 79 b7 ff ff       	call   c0014588 <Device::Device(char const*)>
c0018e0f:	83 c4 10             	add    esp,0x10
c0018e12:	ba a8 bb 02 c0       	mov    edx,0xc002bba8
c0018e17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e1b:	89 10                	mov    DWORD PTR [eax],edx
c0018e1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e21:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018e2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e2f:	05 78 01 00 00       	add    eax,0x178
c0018e34:	83 ec 0c             	sub    esp,0xc
c0018e37:	50                   	push   eax
c0018e38:	e8 1b 62 ff ff       	call   c000f058 <GDT::GDT()>
c0018e3d:	83 c4 10             	add    esp,0x10
c0018e40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e44:	05 7c 09 00 00       	add    eax,0x97c
c0018e49:	83 ec 0c             	sub    esp,0xc
c0018e4c:	50                   	push   eax
c0018e4d:	e8 68 64 ff ff       	call   c000f2ba <IDT::IDT()>
c0018e52:	83 c4 10             	add    esp,0x10
c0018e55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e59:	05 7c 11 00 00       	add    eax,0x117c
c0018e5e:	83 ec 0c             	sub    esp,0xc
c0018e61:	50                   	push   eax
c0018e62:	e8 6d 86 ff ff       	call   c00114d4 <TSS::TSS()>
c0018e67:	83 c4 10             	add    esp,0x10
c0018e6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e6e:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018e75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e79:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018e83:	90                   	nop
c0018e84:	83 c4 0c             	add    esp,0xc
c0018e87:	c3                   	ret    

c0018e88 <CPU::displayFeatures()>:
c0018e88:	53                   	push   ebx
c0018e89:	83 ec 10             	sub    esp,0x10
c0018e8c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018e90:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018e96:	68 dc b7 02 c0       	push   0xc002b7dc
c0018e9b:	e8 d1 a0 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0018ea0:	59                   	pop    ecx
c0018ea1:	58                   	pop    eax
c0018ea2:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018ea8:	50                   	push   eax
c0018ea9:	68 ed b7 02 c0       	push   0xc002b7ed
c0018eae:	e8 be a0 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0018eb3:	58                   	pop    eax
c0018eb4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018eba:	5a                   	pop    edx
c0018ebb:	c1 e8 0e             	shr    eax,0xe
c0018ebe:	0f b6 c0             	movzx  eax,al
c0018ec1:	50                   	push   eax
c0018ec2:	68 fe b7 02 c0       	push   0xc002b7fe
c0018ec7:	e8 a5 a0 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0018ecc:	59                   	pop    ecx
c0018ecd:	58                   	pop    eax
c0018ece:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018ed4:	66 c1 e8 06          	shr    ax,0x6
c0018ed8:	0f b6 c0             	movzx  eax,al
c0018edb:	50                   	push   eax
c0018edc:	68 0f b8 02 c0       	push   0xc002b80f
c0018ee1:	e8 8b a0 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0018ee6:	c7 04 24 bc bc 02 c0 	mov    DWORD PTR [esp],0xc002bcbc
c0018eed:	e8 7f a0 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0018ef2:	83 c4 10             	add    esp,0x10
c0018ef5:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c0018efa:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018f01:	74 05                	je     c0018f08 <CPU::displayFeatures()+0x80>
c0018f03:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c0018f08:	52                   	push   edx
c0018f09:	52                   	push   edx
c0018f0a:	50                   	push   eax
c0018f0b:	68 20 b8 02 c0       	push   0xc002b820
c0018f10:	e8 5c a0 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0018f15:	83 c4 10             	add    esp,0x10
c0018f18:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c0018f1d:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018f24:	78 05                	js     c0018f2b <CPU::displayFeatures()+0xa3>
c0018f26:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c0018f2b:	51                   	push   ecx
c0018f2c:	51                   	push   ecx
c0018f2d:	50                   	push   eax
c0018f2e:	68 37 b8 02 c0       	push   0xc002b837
c0018f33:	e8 39 a0 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0018f38:	83 c4 10             	add    esp,0x10
c0018f3b:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c0018f40:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018f47:	75 05                	jne    c0018f4e <CPU::displayFeatures()+0xc6>
c0018f49:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c0018f4e:	52                   	push   edx
c0018f4f:	52                   	push   edx
c0018f50:	50                   	push   eax
c0018f51:	68 4e b8 02 c0       	push   0xc002b84e
c0018f56:	e8 16 a0 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0018f5b:	83 c4 10             	add    esp,0x10
c0018f5e:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c0018f63:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018f6a:	75 05                	jne    c0018f71 <CPU::displayFeatures()+0xe9>
c0018f6c:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c0018f71:	51                   	push   ecx
c0018f72:	51                   	push   ecx
c0018f73:	50                   	push   eax
c0018f74:	68 65 b8 02 c0       	push   0xc002b865
c0018f79:	e8 f3 9f ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0018f7e:	83 c4 10             	add    esp,0x10
c0018f81:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c0018f86:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018f8d:	75 05                	jne    c0018f94 <CPU::displayFeatures()+0x10c>
c0018f8f:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c0018f94:	52                   	push   edx
c0018f95:	52                   	push   edx
c0018f96:	50                   	push   eax
c0018f97:	68 7c b8 02 c0       	push   0xc002b87c
c0018f9c:	e8 d0 9f ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0018fa1:	83 c4 10             	add    esp,0x10
c0018fa4:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c0018fa9:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018fb0:	75 05                	jne    c0018fb7 <CPU::displayFeatures()+0x12f>
c0018fb2:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c0018fb7:	51                   	push   ecx
c0018fb8:	51                   	push   ecx
c0018fb9:	50                   	push   eax
c0018fba:	68 93 b8 02 c0       	push   0xc002b893
c0018fbf:	e8 ad 9f ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0018fc4:	83 c4 10             	add    esp,0x10
c0018fc7:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c0018fcc:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0018fd3:	75 05                	jne    c0018fda <CPU::displayFeatures()+0x152>
c0018fd5:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c0018fda:	52                   	push   edx
c0018fdb:	52                   	push   edx
c0018fdc:	50                   	push   eax
c0018fdd:	68 aa b8 02 c0       	push   0xc002b8aa
c0018fe2:	e8 8a 9f ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0018fe7:	83 c4 10             	add    esp,0x10
c0018fea:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c0018fef:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0018ff6:	75 05                	jne    c0018ffd <CPU::displayFeatures()+0x175>
c0018ff8:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c0018ffd:	51                   	push   ecx
c0018ffe:	51                   	push   ecx
c0018fff:	50                   	push   eax
c0019000:	68 c1 b8 02 c0       	push   0xc002b8c1
c0019005:	e8 67 9f ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001900a:	83 c4 10             	add    esp,0x10
c001900d:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c0019012:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0019019:	75 05                	jne    c0019020 <CPU::displayFeatures()+0x198>
c001901b:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c0019020:	52                   	push   edx
c0019021:	52                   	push   edx
c0019022:	50                   	push   eax
c0019023:	68 d8 b8 02 c0       	push   0xc002b8d8
c0019028:	e8 44 9f ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001902d:	83 c4 10             	add    esp,0x10
c0019030:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c0019035:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c001903c:	75 05                	jne    c0019043 <CPU::displayFeatures()+0x1bb>
c001903e:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c0019043:	51                   	push   ecx
c0019044:	51                   	push   ecx
c0019045:	50                   	push   eax
c0019046:	68 ef b8 02 c0       	push   0xc002b8ef
c001904b:	e8 21 9f ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0019050:	83 c4 10             	add    esp,0x10
c0019053:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c0019058:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c001905f:	75 05                	jne    c0019066 <CPU::displayFeatures()+0x1de>
c0019061:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c0019066:	52                   	push   edx
c0019067:	52                   	push   edx
c0019068:	50                   	push   eax
c0019069:	68 06 b9 02 c0       	push   0xc002b906
c001906e:	e8 fe 9e ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0019073:	83 c4 10             	add    esp,0x10
c0019076:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c001907b:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0019082:	75 05                	jne    c0019089 <CPU::displayFeatures()+0x201>
c0019084:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c0019089:	51                   	push   ecx
c001908a:	51                   	push   ecx
c001908b:	50                   	push   eax
c001908c:	68 1d b9 02 c0       	push   0xc002b91d
c0019091:	e8 db 9e ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0019096:	83 c4 10             	add    esp,0x10
c0019099:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c001909e:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c00190a5:	75 05                	jne    c00190ac <CPU::displayFeatures()+0x224>
c00190a7:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c00190ac:	52                   	push   edx
c00190ad:	52                   	push   edx
c00190ae:	50                   	push   eax
c00190af:	68 34 b9 02 c0       	push   0xc002b934
c00190b4:	e8 b8 9e ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c00190b9:	83 c4 10             	add    esp,0x10
c00190bc:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c00190c1:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c00190c8:	78 05                	js     c00190cf <CPU::displayFeatures()+0x247>
c00190ca:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c00190cf:	51                   	push   ecx
c00190d0:	51                   	push   ecx
c00190d1:	50                   	push   eax
c00190d2:	68 4b b9 02 c0       	push   0xc002b94b
c00190d7:	e8 95 9e ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c00190dc:	83 c4 10             	add    esp,0x10
c00190df:	b8 92 a0 02 c0       	mov    eax,0xc002a092
c00190e4:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c00190eb:	75 05                	jne    c00190f2 <CPU::displayFeatures()+0x26a>
c00190ed:	b8 96 a0 02 c0       	mov    eax,0xc002a096
c00190f2:	52                   	push   edx
c00190f3:	52                   	push   edx
c00190f4:	50                   	push   eax
c00190f5:	68 62 b9 02 c0       	push   0xc002b962
c00190fa:	e8 72 9e ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c00190ff:	83 c4 18             	add    esp,0x18
c0019102:	5b                   	pop    ebx
c0019103:	c3                   	ret    

c0019104 <CPU::detectFeatures()>:
c0019104:	55                   	push   ebp
c0019105:	57                   	push   edi
c0019106:	56                   	push   esi
c0019107:	53                   	push   ebx
c0019108:	83 ec 50             	sub    esp,0x50
c001910b:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c001910f:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0019119:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0019120:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0019126:	6a 0d                	push   0xd
c0019128:	6a 00                	push   0x0
c001912a:	57                   	push   edi
c001912b:	e8 48 76 fe ff       	call   c0000778 <memset>
c0019130:	83 c4 10             	add    esp,0x10
c0019133:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c0019138:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c001913f:	0f 84 20 09 00 00    	je     c0019a65 <CPU::detectFeatures()+0x961>
c0019145:	83 ec 0c             	sub    esp,0xc
c0019148:	6a 10                	push   0x10
c001914a:	e8 f3 fb ff ff       	call   c0018d42 <CPU::cpuidCheckEDX(unsigned int)>
c001914f:	83 e0 01             	and    eax,0x1
c0019152:	8d 14 00             	lea    edx,[eax+eax*1]
c0019155:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001915b:	83 e0 fd             	and    eax,0xfffffffd
c001915e:	09 d0                	or     eax,edx
c0019160:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019166:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c001916d:	e8 d0 fb ff ff       	call   c0018d42 <CPU::cpuidCheckEDX(unsigned int)>
c0019172:	83 e0 01             	and    eax,0x1
c0019175:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001917c:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019182:	83 e0 fb             	and    eax,0xfffffffb
c0019185:	09 d0                	or     eax,edx
c0019187:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001918d:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0019194:	e8 a9 fb ff ff       	call   c0018d42 <CPU::cpuidCheckEDX(unsigned int)>
c0019199:	83 e0 01             	and    eax,0x1
c001919c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00191a3:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00191a9:	83 e0 f7             	and    eax,0xfffffff7
c00191ac:	09 d0                	or     eax,edx
c00191ae:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00191b4:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00191bb:	e8 82 fb ff ff       	call   c0018d42 <CPU::cpuidCheckEDX(unsigned int)>
c00191c0:	83 e0 01             	and    eax,0x1
c00191c3:	c1 e0 04             	shl    eax,0x4
c00191c6:	88 c2                	mov    dl,al
c00191c8:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00191ce:	83 e0 ef             	and    eax,0xffffffef
c00191d1:	09 d0                	or     eax,edx
c00191d3:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00191d9:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00191e0:	e8 5d fb ff ff       	call   c0018d42 <CPU::cpuidCheckEDX(unsigned int)>
c00191e5:	83 e0 01             	and    eax,0x1
c00191e8:	c1 e0 05             	shl    eax,0x5
c00191eb:	88 c2                	mov    dl,al
c00191ed:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00191f3:	83 e0 df             	and    eax,0xffffffdf
c00191f6:	09 d0                	or     eax,edx
c00191f8:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00191fe:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0019205:	e8 38 fb ff ff       	call   c0018d42 <CPU::cpuidCheckEDX(unsigned int)>
c001920a:	83 e0 01             	and    eax,0x1
c001920d:	8d 14 00             	lea    edx,[eax+eax*1]
c0019210:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019216:	83 e0 fd             	and    eax,0xfffffffd
c0019219:	09 d0                	or     eax,edx
c001921b:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019221:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0019228:	e8 15 fb ff ff       	call   c0018d42 <CPU::cpuidCheckEDX(unsigned int)>
c001922d:	83 e0 01             	and    eax,0x1
c0019230:	c1 e0 06             	shl    eax,0x6
c0019233:	88 c2                	mov    dl,al
c0019235:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001923b:	83 e0 bf             	and    eax,0xffffffbf
c001923e:	09 d0                	or     eax,edx
c0019240:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019246:	58                   	pop    eax
c0019247:	8d 74 24 28          	lea    esi,[esp+0x28]
c001924b:	56                   	push   esi
c001924c:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019250:	55                   	push   ebp
c0019251:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019255:	50                   	push   eax
c0019256:	8d 54 24 28          	lea    edx,[esp+0x28]
c001925a:	52                   	push   edx
c001925b:	6a 00                	push   0x0
c001925d:	e8 5c fa ff ff       	call   c0018cbe <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019262:	83 c4 1c             	add    esp,0x1c
c0019265:	6a 04                	push   0x4
c0019267:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001926b:	50                   	push   eax
c001926c:	57                   	push   edi
c001926d:	e8 d2 74 fe ff       	call   c0000744 <memcpy>
c0019272:	83 c4 0c             	add    esp,0xc
c0019275:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c001927b:	6a 04                	push   0x4
c001927d:	56                   	push   esi
c001927e:	50                   	push   eax
c001927f:	e8 c0 74 fe ff       	call   c0000744 <memcpy>
c0019284:	83 c4 0c             	add    esp,0xc
c0019287:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c001928d:	6a 04                	push   0x4
c001928f:	55                   	push   ebp
c0019290:	50                   	push   eax
c0019291:	e8 ae 74 fe ff       	call   c0000744 <memcpy>
c0019296:	58                   	pop    eax
c0019297:	5a                   	pop    edx
c0019298:	68 79 b9 02 c0       	push   0xc002b979
c001929d:	57                   	push   edi
c001929e:	e8 1d 76 fe ff       	call   c00008c0 <strcmp>
c00192a3:	83 c4 10             	add    esp,0x10
c00192a6:	85 c0                	test   eax,eax
c00192a8:	75 0f                	jne    c00192b9 <CPU::detectFeatures()+0x1b5>
c00192aa:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00192b4:	e9 22 02 00 00       	jmp    c00194db <CPU::detectFeatures()+0x3d7>
c00192b9:	50                   	push   eax
c00192ba:	50                   	push   eax
c00192bb:	68 86 b9 02 c0       	push   0xc002b986
c00192c0:	57                   	push   edi
c00192c1:	e8 fa 75 fe ff       	call   c00008c0 <strcmp>
c00192c6:	83 c4 10             	add    esp,0x10
c00192c9:	85 c0                	test   eax,eax
c00192cb:	74 dd                	je     c00192aa <CPU::detectFeatures()+0x1a6>
c00192cd:	51                   	push   ecx
c00192ce:	51                   	push   ecx
c00192cf:	68 93 b9 02 c0       	push   0xc002b993
c00192d4:	57                   	push   edi
c00192d5:	e8 e6 75 fe ff       	call   c00008c0 <strcmp>
c00192da:	83 c4 10             	add    esp,0x10
c00192dd:	85 c0                	test   eax,eax
c00192df:	74 2a                	je     c001930b <CPU::detectFeatures()+0x207>
c00192e1:	52                   	push   edx
c00192e2:	52                   	push   edx
c00192e3:	68 a0 b9 02 c0       	push   0xc002b9a0
c00192e8:	57                   	push   edi
c00192e9:	e8 d2 75 fe ff       	call   c00008c0 <strcmp>
c00192ee:	83 c4 10             	add    esp,0x10
c00192f1:	85 c0                	test   eax,eax
c00192f3:	74 16                	je     c001930b <CPU::detectFeatures()+0x207>
c00192f5:	50                   	push   eax
c00192f6:	50                   	push   eax
c00192f7:	68 ad b9 02 c0       	push   0xc002b9ad
c00192fc:	57                   	push   edi
c00192fd:	e8 be 75 fe ff       	call   c00008c0 <strcmp>
c0019302:	83 c4 10             	add    esp,0x10
c0019305:	85 c0                	test   eax,eax
c0019307:	74 48                	je     c0019351 <CPU::detectFeatures()+0x24d>
c0019309:	eb 0f                	jmp    c001931a <CPU::detectFeatures()+0x216>
c001930b:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0019315:	e9 c1 01 00 00       	jmp    c00194db <CPU::detectFeatures()+0x3d7>
c001931a:	50                   	push   eax
c001931b:	50                   	push   eax
c001931c:	68 ba b9 02 c0       	push   0xc002b9ba
c0019321:	57                   	push   edi
c0019322:	e8 99 75 fe ff       	call   c00008c0 <strcmp>
c0019327:	83 c4 10             	add    esp,0x10
c001932a:	85 c0                	test   eax,eax
c001932c:	74 23                	je     c0019351 <CPU::detectFeatures()+0x24d>
c001932e:	50                   	push   eax
c001932f:	50                   	push   eax
c0019330:	68 c7 b9 02 c0       	push   0xc002b9c7
c0019335:	57                   	push   edi
c0019336:	e8 85 75 fe ff       	call   c00008c0 <strcmp>
c001933b:	83 c4 10             	add    esp,0x10
c001933e:	85 c0                	test   eax,eax
c0019340:	75 1e                	jne    c0019360 <CPU::detectFeatures()+0x25c>
c0019342:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001934c:	e9 8a 01 00 00       	jmp    c00194db <CPU::detectFeatures()+0x3d7>
c0019351:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001935b:	e9 7b 01 00 00       	jmp    c00194db <CPU::detectFeatures()+0x3d7>
c0019360:	50                   	push   eax
c0019361:	50                   	push   eax
c0019362:	68 d4 b9 02 c0       	push   0xc002b9d4
c0019367:	57                   	push   edi
c0019368:	e8 53 75 fe ff       	call   c00008c0 <strcmp>
c001936d:	83 c4 10             	add    esp,0x10
c0019370:	85 c0                	test   eax,eax
c0019372:	75 0f                	jne    c0019383 <CPU::detectFeatures()+0x27f>
c0019374:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c001937e:	e9 58 01 00 00       	jmp    c00194db <CPU::detectFeatures()+0x3d7>
c0019383:	50                   	push   eax
c0019384:	50                   	push   eax
c0019385:	68 93 b9 02 c0       	push   0xc002b993
c001938a:	57                   	push   edi
c001938b:	e8 30 75 fe ff       	call   c00008c0 <strcmp>
c0019390:	83 c4 10             	add    esp,0x10
c0019393:	85 c0                	test   eax,eax
c0019395:	75 0f                	jne    c00193a6 <CPU::detectFeatures()+0x2a2>
c0019397:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00193a1:	e9 35 01 00 00       	jmp    c00194db <CPU::detectFeatures()+0x3d7>
c00193a6:	50                   	push   eax
c00193a7:	50                   	push   eax
c00193a8:	68 e1 b9 02 c0       	push   0xc002b9e1
c00193ad:	57                   	push   edi
c00193ae:	e8 0d 75 fe ff       	call   c00008c0 <strcmp>
c00193b3:	83 c4 10             	add    esp,0x10
c00193b6:	85 c0                	test   eax,eax
c00193b8:	75 0f                	jne    c00193c9 <CPU::detectFeatures()+0x2c5>
c00193ba:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00193c4:	e9 12 01 00 00       	jmp    c00194db <CPU::detectFeatures()+0x3d7>
c00193c9:	51                   	push   ecx
c00193ca:	51                   	push   ecx
c00193cb:	68 ee b9 02 c0       	push   0xc002b9ee
c00193d0:	57                   	push   edi
c00193d1:	e8 ea 74 fe ff       	call   c00008c0 <strcmp>
c00193d6:	83 c4 10             	add    esp,0x10
c00193d9:	85 c0                	test   eax,eax
c00193db:	75 0f                	jne    c00193ec <CPU::detectFeatures()+0x2e8>
c00193dd:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00193e7:	e9 ef 00 00 00       	jmp    c00194db <CPU::detectFeatures()+0x3d7>
c00193ec:	52                   	push   edx
c00193ed:	52                   	push   edx
c00193ee:	68 fb b9 02 c0       	push   0xc002b9fb
c00193f3:	57                   	push   edi
c00193f4:	e8 c7 74 fe ff       	call   c00008c0 <strcmp>
c00193f9:	83 c4 10             	add    esp,0x10
c00193fc:	85 c0                	test   eax,eax
c00193fe:	75 0f                	jne    c001940f <CPU::detectFeatures()+0x30b>
c0019400:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001940a:	e9 cc 00 00 00       	jmp    c00194db <CPU::detectFeatures()+0x3d7>
c001940f:	50                   	push   eax
c0019410:	50                   	push   eax
c0019411:	68 08 ba 02 c0       	push   0xc002ba08
c0019416:	57                   	push   edi
c0019417:	e8 a4 74 fe ff       	call   c00008c0 <strcmp>
c001941c:	83 c4 10             	add    esp,0x10
c001941f:	85 c0                	test   eax,eax
c0019421:	75 0f                	jne    c0019432 <CPU::detectFeatures()+0x32e>
c0019423:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001942d:	e9 a9 00 00 00       	jmp    c00194db <CPU::detectFeatures()+0x3d7>
c0019432:	50                   	push   eax
c0019433:	50                   	push   eax
c0019434:	68 15 ba 02 c0       	push   0xc002ba15
c0019439:	57                   	push   edi
c001943a:	e8 81 74 fe ff       	call   c00008c0 <strcmp>
c001943f:	83 c4 10             	add    esp,0x10
c0019442:	85 c0                	test   eax,eax
c0019444:	75 0f                	jne    c0019455 <CPU::detectFeatures()+0x351>
c0019446:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0019450:	e9 86 00 00 00       	jmp    c00194db <CPU::detectFeatures()+0x3d7>
c0019455:	50                   	push   eax
c0019456:	50                   	push   eax
c0019457:	68 22 ba 02 c0       	push   0xc002ba22
c001945c:	57                   	push   edi
c001945d:	e8 5e 74 fe ff       	call   c00008c0 <strcmp>
c0019462:	83 c4 10             	add    esp,0x10
c0019465:	85 c0                	test   eax,eax
c0019467:	75 0c                	jne    c0019475 <CPU::detectFeatures()+0x371>
c0019469:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0019473:	eb 66                	jmp    c00194db <CPU::detectFeatures()+0x3d7>
c0019475:	50                   	push   eax
c0019476:	50                   	push   eax
c0019477:	68 2f ba 02 c0       	push   0xc002ba2f
c001947c:	57                   	push   edi
c001947d:	e8 3e 74 fe ff       	call   c00008c0 <strcmp>
c0019482:	83 c4 10             	add    esp,0x10
c0019485:	85 c0                	test   eax,eax
c0019487:	75 0c                	jne    c0019495 <CPU::detectFeatures()+0x391>
c0019489:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0019493:	eb 46                	jmp    c00194db <CPU::detectFeatures()+0x3d7>
c0019495:	50                   	push   eax
c0019496:	50                   	push   eax
c0019497:	68 3c ba 02 c0       	push   0xc002ba3c
c001949c:	57                   	push   edi
c001949d:	e8 1e 74 fe ff       	call   c00008c0 <strcmp>
c00194a2:	83 c4 10             	add    esp,0x10
c00194a5:	85 c0                	test   eax,eax
c00194a7:	74 e0                	je     c0019489 <CPU::detectFeatures()+0x385>
c00194a9:	50                   	push   eax
c00194aa:	50                   	push   eax
c00194ab:	68 49 ba 02 c0       	push   0xc002ba49
c00194b0:	57                   	push   edi
c00194b1:	e8 0a 74 fe ff       	call   c00008c0 <strcmp>
c00194b6:	83 c4 10             	add    esp,0x10
c00194b9:	85 c0                	test   eax,eax
c00194bb:	74 cc                	je     c0019489 <CPU::detectFeatures()+0x385>
c00194bd:	51                   	push   ecx
c00194be:	51                   	push   ecx
c00194bf:	68 56 ba 02 c0       	push   0xc002ba56
c00194c4:	57                   	push   edi
c00194c5:	e8 f6 73 fe ff       	call   c00008c0 <strcmp>
c00194ca:	83 c4 10             	add    esp,0x10
c00194cd:	85 c0                	test   eax,eax
c00194cf:	74 b8                	je     c0019489 <CPU::detectFeatures()+0x385>
c00194d1:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00194db:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00194e0:	0f 86 be 00 00 00    	jbe    c00195a4 <CPU::detectFeatures()+0x4a0>
c00194e6:	83 ec 0c             	sub    esp,0xc
c00194e9:	68 80 00 00 00       	push   0x80
c00194ee:	e8 ab f8 ff ff       	call   c0018d9e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00194f3:	83 e0 01             	and    eax,0x1
c00194f6:	c1 e0 06             	shl    eax,0x6
c00194f9:	88 c2                	mov    dl,al
c00194fb:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019501:	83 e0 bf             	and    eax,0xffffffbf
c0019504:	09 d0                	or     eax,edx
c0019506:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001950c:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0019513:	e8 86 f8 ff ff       	call   c0018d9e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019518:	83 e0 01             	and    eax,0x1
c001951b:	c1 e0 04             	shl    eax,0x4
c001951e:	88 c2                	mov    dl,al
c0019520:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019526:	83 e0 ef             	and    eax,0xffffffef
c0019529:	09 d0                	or     eax,edx
c001952b:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019531:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0019538:	e8 61 f8 ff ff       	call   c0018d9e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001953d:	c1 e0 07             	shl    eax,0x7
c0019540:	88 c2                	mov    dl,al
c0019542:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019548:	83 e0 7f             	and    eax,0x7f
c001954b:	09 d0                	or     eax,edx
c001954d:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019553:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001955a:	e8 6d f8 ff ff       	call   c0018dcc <CPU::cpuidCheckExtendedECX(unsigned int)>
c001955f:	83 e0 01             	and    eax,0x1
c0019562:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0019569:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001956f:	83 e0 f7             	and    eax,0xfffffff7
c0019572:	09 d0                	or     eax,edx
c0019574:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001957a:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0019581:	e8 46 f8 ff ff       	call   c0018dcc <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019586:	83 c4 10             	add    esp,0x10
c0019589:	83 e0 01             	and    eax,0x1
c001958c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0019593:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019599:	83 e0 fb             	and    eax,0xfffffffb
c001959c:	09 d0                	or     eax,edx
c001959e:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00195a4:	83 ec 0c             	sub    esp,0xc
c00195a7:	56                   	push   esi
c00195a8:	55                   	push   ebp
c00195a9:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00195ad:	57                   	push   edi
c00195ae:	8d 44 24 28          	lea    eax,[esp+0x28]
c00195b2:	50                   	push   eax
c00195b3:	6a 01                	push   0x1
c00195b5:	e8 04 f7 ff ff       	call   c0018cbe <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00195ba:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00195be:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00195c4:	88 ca                	mov    dl,cl
c00195c6:	83 e0 f0             	and    eax,0xfffffff0
c00195c9:	83 e2 0f             	and    edx,0xf
c00195cc:	09 d0                	or     eax,edx
c00195ce:	88 ca                	mov    dl,cl
c00195d0:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00195d6:	c0 ea 04             	shr    dl,0x4
c00195d9:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00195dd:	0f b6 c2             	movzx  eax,dl
c00195e0:	83 c4 20             	add    esp,0x20
c00195e3:	c1 e0 06             	shl    eax,0x6
c00195e6:	89 c5                	mov    ebp,eax
c00195e8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00195ee:	66 25 3f c0          	and    ax,0xc03f
c00195f2:	09 e8                	or     eax,ebp
c00195f4:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00195fb:	89 c8                	mov    eax,ecx
c00195fd:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0019603:	c1 e8 08             	shr    eax,0x8
c0019606:	83 e2 3f             	and    edx,0x3f
c0019609:	83 e0 0f             	and    eax,0xf
c001960c:	89 c5                	mov    ebp,eax
c001960e:	c1 e5 06             	shl    ebp,0x6
c0019611:	09 d5                	or     ebp,edx
c0019613:	89 ea                	mov    edx,ebp
c0019615:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001961b:	88 c2                	mov    dl,al
c001961d:	c0 ea 02             	shr    dl,0x2
c0019620:	89 d5                	mov    ebp,edx
c0019622:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0019628:	83 e2 c0             	and    edx,0xffffffc0
c001962b:	09 d5                	or     ebp,edx
c001962d:	89 ea                	mov    edx,ebp
c001962f:	89 cd                	mov    ebp,ecx
c0019631:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0019637:	c1 ed 0c             	shr    ebp,0xc
c001963a:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0019640:	83 e5 03             	and    ebp,0x3
c0019643:	83 e2 cf             	and    edx,0xffffffcf
c0019646:	c1 e5 04             	shl    ebp,0x4
c0019649:	09 d5                	or     ebp,edx
c001964b:	3c 06                	cmp    al,0x6
c001964d:	89 ea                	mov    edx,ebp
c001964f:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0019655:	74 04                	je     c001965b <CPU::detectFeatures()+0x557>
c0019657:	3c 0f                	cmp    al,0xf
c0019659:	75 5c                	jne    c00196b7 <CPU::detectFeatures()+0x5b3>
c001965b:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001965f:	89 cd                	mov    ebp,ecx
c0019661:	c1 ed 10             	shr    ebp,0x10
c0019664:	c1 e5 04             	shl    ebp,0x4
c0019667:	09 ea                	or     edx,ebp
c0019669:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c001966f:	0f b6 d2             	movzx  edx,dl
c0019672:	66 81 e5 3f c0       	and    bp,0xc03f
c0019677:	c1 e2 06             	shl    edx,0x6
c001967a:	09 ea                	or     edx,ebp
c001967c:	3c 0f                	cmp    al,0xf
c001967e:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0019685:	75 30                	jne    c00196b7 <CPU::detectFeatures()+0x5b3>
c0019687:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c001968d:	c1 e9 14             	shr    ecx,0x14
c0019690:	83 e0 3f             	and    eax,0x3f
c0019693:	83 c1 0f             	add    ecx,0xf
c0019696:	88 ca                	mov    dl,cl
c0019698:	c0 e9 02             	shr    cl,0x2
c001969b:	c1 e2 06             	shl    edx,0x6
c001969e:	09 d0                	or     eax,edx
c00196a0:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00196a6:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00196ac:	83 e0 c0             	and    eax,0xffffffc0
c00196af:	09 c1                	or     ecx,eax
c00196b1:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00196b7:	83 ec 0c             	sub    esp,0xc
c00196ba:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00196c1:	56                   	push   esi
c00196c2:	8d 44 24 28          	lea    eax,[esp+0x28]
c00196c6:	50                   	push   eax
c00196c7:	57                   	push   edi
c00196c8:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00196cc:	55                   	push   ebp
c00196cd:	68 00 00 00 80       	push   0x80000000
c00196d2:	e8 e7 f5 ff ff       	call   c0018cbe <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00196d7:	83 c4 20             	add    esp,0x20
c00196da:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00196e2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00196e6:	76 1e                	jbe    c0019706 <CPU::detectFeatures()+0x602>
c00196e8:	83 ec 0c             	sub    esp,0xc
c00196eb:	56                   	push   esi
c00196ec:	50                   	push   eax
c00196ed:	57                   	push   edi
c00196ee:	55                   	push   ebp
c00196ef:	68 01 00 00 80       	push   0x80000001
c00196f4:	e8 c5 f5 ff ff       	call   c0018cbe <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00196f9:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0019703:	83 c4 20             	add    esp,0x20
c0019706:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001970c:	83 f8 01             	cmp    eax,0x1
c001970f:	75 6f                	jne    c0019780 <CPU::detectFeatures()+0x67c>
c0019711:	51                   	push   ecx
c0019712:	51                   	push   ecx
c0019713:	68 62 ba 02 c0       	push   0xc002ba62
c0019718:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001971c:	56                   	push   esi
c001971d:	e8 12 71 fe ff       	call   c0000834 <strcpy>
c0019722:	5f                   	pop    edi
c0019723:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019729:	5d                   	pop    ebp
c001972a:	66 c1 e8 06          	shr    ax,0x6
c001972e:	0f b6 c0             	movzx  eax,al
c0019731:	50                   	push   eax
c0019732:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019738:	c1 e8 0e             	shr    eax,0xe
c001973b:	0f b6 c0             	movzx  eax,al
c001973e:	50                   	push   eax
c001973f:	e8 24 f2 ff ff       	call   c0018968 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0019744:	5a                   	pop    edx
c0019745:	59                   	pop    ecx
c0019746:	50                   	push   eax
c0019747:	56                   	push   esi
c0019748:	e8 27 72 fe ff       	call   c0000974 <strcat>
c001974d:	5f                   	pop    edi
c001974e:	5d                   	pop    ebp
c001974f:	56                   	push   esi
c0019750:	53                   	push   ebx
c0019751:	e8 24 ae ff ff       	call   c001457a <Device::setName(char const*)>
c0019756:	58                   	pop    eax
c0019757:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001975d:	5a                   	pop    edx
c001975e:	68 69 ba 02 c0       	push   0xc002ba69
c0019763:	50                   	push   eax
c0019764:	e8 57 71 fe ff       	call   c00008c0 <strcmp>
c0019769:	83 c4 10             	add    esp,0x10
c001976c:	85 c0                	test   eax,eax
c001976e:	0f 85 71 03 00 00    	jne    c0019ae5 <CPU::detectFeatures()+0x9e1>
c0019774:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c001977b:	e9 65 03 00 00       	jmp    c0019ae5 <CPU::detectFeatures()+0x9e1>
c0019780:	83 f8 02             	cmp    eax,0x2
c0019783:	0f 85 b5 00 00 00    	jne    c001983e <CPU::detectFeatures()+0x73a>
c0019789:	57                   	push   edi
c001978a:	57                   	push   edi
c001978b:	68 7b ba 02 c0       	push   0xc002ba7b
c0019790:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019794:	56                   	push   esi
c0019795:	e8 9a 70 fe ff       	call   c0000834 <strcpy>
c001979a:	5d                   	pop    ebp
c001979b:	58                   	pop    eax
c001979c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00197a2:	66 c1 e8 06          	shr    ax,0x6
c00197a6:	0f b6 c0             	movzx  eax,al
c00197a9:	50                   	push   eax
c00197aa:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00197b0:	c1 e8 0e             	shr    eax,0xe
c00197b3:	0f b6 c0             	movzx  eax,al
c00197b6:	50                   	push   eax
c00197b7:	e8 18 f0 ff ff       	call   c00187d4 <CPU::lookupAMDName(unsigned char, unsigned char)>
c00197bc:	5a                   	pop    edx
c00197bd:	59                   	pop    ecx
c00197be:	50                   	push   eax
c00197bf:	56                   	push   esi
c00197c0:	e8 af 71 fe ff       	call   c0000974 <strcat>
c00197c5:	5f                   	pop    edi
c00197c6:	5d                   	pop    ebp
c00197c7:	56                   	push   esi
c00197c8:	53                   	push   ebx
c00197c9:	e8 ac ad ff ff       	call   c001457a <Device::setName(char const*)>
c00197ce:	58                   	pop    eax
c00197cf:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00197d5:	5a                   	pop    edx
c00197d6:	68 80 ba 02 c0       	push   0xc002ba80
c00197db:	50                   	push   eax
c00197dc:	e8 df 70 fe ff       	call   c00008c0 <strcmp>
c00197e1:	83 c4 10             	add    esp,0x10
c00197e4:	85 c0                	test   eax,eax
c00197e6:	75 20                	jne    c0019808 <CPU::detectFeatures()+0x704>
c00197e8:	8b 15 48 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e648
c00197ee:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00197f4:	a8 01                	test   al,0x1
c00197f6:	74 10                	je     c0019808 <CPU::detectFeatures()+0x704>
c00197f8:	83 e0 fe             	and    eax,0xfffffffe
c00197fb:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0019801:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0019808:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001980e:	c1 e8 0e             	shr    eax,0xe
c0019811:	3c 05                	cmp    al,0x5
c0019813:	0f 85 cc 02 00 00    	jne    c0019ae5 <CPU::detectFeatures()+0x9e1>
c0019819:	56                   	push   esi
c001981a:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019820:	83 e0 0f             	and    eax,0xf
c0019823:	50                   	push   eax
c0019824:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001982a:	66 c1 e8 06          	shr    ax,0x6
c001982e:	0f b6 c0             	movzx  eax,al
c0019831:	50                   	push   eax
c0019832:	6a 05                	push   0x5
c0019834:	e8 11 f4 ff ff       	call   c0018c4a <CPU::AMD_K6_writeback(int, int, int)>
c0019839:	e9 1f 02 00 00       	jmp    c0019a5d <CPU::detectFeatures()+0x959>
c001983e:	8d 50 fd             	lea    edx,[eax-0x3]
c0019841:	83 fa 01             	cmp    edx,0x1
c0019844:	76 09                	jbe    c001984f <CPU::detectFeatures()+0x74b>
c0019846:	83 f8 06             	cmp    eax,0x6
c0019849:	0f 85 91 01 00 00    	jne    c00199e0 <CPU::detectFeatures()+0x8dc>
c001984f:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019855:	c1 ea 0e             	shr    edx,0xe
c0019858:	80 fa 05             	cmp    dl,0x5
c001985b:	75 7b                	jne    c00198d8 <CPU::detectFeatures()+0x7d4>
c001985d:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019863:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019868:	66 81 fa 00 01       	cmp    dx,0x100
c001986d:	75 0c                	jne    c001987b <CPU::detectFeatures()+0x777>
c001986f:	51                   	push   ecx
c0019870:	51                   	push   ecx
c0019871:	68 87 ba 02 c0       	push   0xc002ba87
c0019876:	e9 dc 01 00 00       	jmp    c0019a57 <CPU::detectFeatures()+0x953>
c001987b:	66 81 fa 00 02       	cmp    dx,0x200
c0019880:	75 0c                	jne    c001988e <CPU::detectFeatures()+0x78a>
c0019882:	52                   	push   edx
c0019883:	52                   	push   edx
c0019884:	68 9a ba 02 c0       	push   0xc002ba9a
c0019889:	e9 c9 01 00 00       	jmp    c0019a57 <CPU::detectFeatures()+0x953>
c001988e:	66 81 fa 40 02       	cmp    dx,0x240
c0019893:	75 0c                	jne    c00198a1 <CPU::detectFeatures()+0x79d>
c0019895:	50                   	push   eax
c0019896:	50                   	push   eax
c0019897:	68 ac ba 02 c0       	push   0xc002baac
c001989c:	e9 b6 01 00 00       	jmp    c0019a57 <CPU::detectFeatures()+0x953>
c00198a1:	83 f8 06             	cmp    eax,0x6
c00198a4:	75 0c                	jne    c00198b2 <CPU::detectFeatures()+0x7ae>
c00198a6:	50                   	push   eax
c00198a7:	50                   	push   eax
c00198a8:	68 be ba 02 c0       	push   0xc002babe
c00198ad:	e9 a5 01 00 00       	jmp    c0019a57 <CPU::detectFeatures()+0x953>
c00198b2:	83 f8 04             	cmp    eax,0x4
c00198b5:	75 0c                	jne    c00198c3 <CPU::detectFeatures()+0x7bf>
c00198b7:	50                   	push   eax
c00198b8:	50                   	push   eax
c00198b9:	68 ca ba 02 c0       	push   0xc002baca
c00198be:	e9 94 01 00 00       	jmp    c0019a57 <CPU::detectFeatures()+0x953>
c00198c3:	83 f8 03             	cmp    eax,0x3
c00198c6:	0f 85 19 02 00 00    	jne    c0019ae5 <CPU::detectFeatures()+0x9e1>
c00198cc:	50                   	push   eax
c00198cd:	50                   	push   eax
c00198ce:	68 d2 ba 02 c0       	push   0xc002bad2
c00198d3:	e9 7f 01 00 00       	jmp    c0019a57 <CPU::detectFeatures()+0x953>
c00198d8:	80 fa 06             	cmp    dl,0x6
c00198db:	0f 85 db 00 00 00    	jne    c00199bc <CPU::detectFeatures()+0x8b8>
c00198e1:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00198e7:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00198ec:	66 81 fa 80 01       	cmp    dx,0x180
c00198f1:	75 0c                	jne    c00198ff <CPU::detectFeatures()+0x7fb>
c00198f3:	50                   	push   eax
c00198f4:	50                   	push   eax
c00198f5:	68 dd ba 02 c0       	push   0xc002badd
c00198fa:	e9 58 01 00 00       	jmp    c0019a57 <CPU::detectFeatures()+0x953>
c00198ff:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0019905:	66 f7 c1 80 ff       	test   cx,0xff80
c001990a:	75 0c                	jne    c0019918 <CPU::detectFeatures()+0x814>
c001990c:	50                   	push   eax
c001990d:	50                   	push   eax
c001990e:	68 ed ba 02 c0       	push   0xc002baed
c0019913:	e9 3f 01 00 00       	jmp    c0019a57 <CPU::detectFeatures()+0x953>
c0019918:	66 81 fa 40 02       	cmp    dx,0x240
c001991d:	75 0c                	jne    c001992b <CPU::detectFeatures()+0x827>
c001991f:	55                   	push   ebp
c0019920:	55                   	push   ebp
c0019921:	68 f4 ba 02 c0       	push   0xc002baf4
c0019926:	e9 2c 01 00 00       	jmp    c0019a57 <CPU::detectFeatures()+0x953>
c001992b:	66 81 fa 80 02       	cmp    dx,0x280
c0019930:	75 0c                	jne    c001993e <CPU::detectFeatures()+0x83a>
c0019932:	57                   	push   edi
c0019933:	57                   	push   edi
c0019934:	68 fd ba 02 c0       	push   0xc002bafd
c0019939:	e9 19 01 00 00       	jmp    c0019a57 <CPU::detectFeatures()+0x953>
c001993e:	66 81 fa 40 03       	cmp    dx,0x340
c0019943:	74 ed                	je     c0019932 <CPU::detectFeatures()+0x82e>
c0019945:	66 81 fa c0 03       	cmp    dx,0x3c0
c001994a:	75 0c                	jne    c0019958 <CPU::detectFeatures()+0x854>
c001994c:	56                   	push   esi
c001994d:	56                   	push   esi
c001994e:	68 04 bb 02 c0       	push   0xc002bb04
c0019953:	e9 ff 00 00 00       	jmp    c0019a57 <CPU::detectFeatures()+0x953>
c0019958:	83 f8 06             	cmp    eax,0x6
c001995b:	0f 84 45 ff ff ff    	je     c00198a6 <CPU::detectFeatures()+0x7a2>
c0019961:	83 f8 04             	cmp    eax,0x4
c0019964:	0f 84 4d ff ff ff    	je     c00198b7 <CPU::detectFeatures()+0x7b3>
c001996a:	83 f8 03             	cmp    eax,0x3
c001996d:	0f 85 72 01 00 00    	jne    c0019ae5 <CPU::detectFeatures()+0x9e1>
c0019973:	51                   	push   ecx
c0019974:	51                   	push   ecx
c0019975:	68 0d bb 02 c0       	push   0xc002bb0d
c001997a:	53                   	push   ebx
c001997b:	e8 fa ab ff ff       	call   c001457a <Device::setName(char const*)>
c0019980:	b1 c1                	mov    cl,0xc1
c0019982:	88 c8                	mov    al,cl
c0019984:	e6 22                	out    0x22,al
c0019986:	e4 23                	in     al,0x23
c0019988:	88 c2                	mov    dl,al
c001998a:	88 c8                	mov    al,cl
c001998c:	e6 22                	out    0x22,al
c001998e:	88 d0                	mov    al,dl
c0019990:	83 c8 10             	or     eax,0x10
c0019993:	e6 23                	out    0x23,al
c0019995:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001999c:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001999f:	89 d0                	mov    eax,edx
c00199a1:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00199a7:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c00199ab:	40                   	inc    eax
c00199ac:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00199b2:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00199b7:	e9 a1 00 00 00       	jmp    c0019a5d <CPU::detectFeatures()+0x959>
c00199bc:	83 f8 06             	cmp    eax,0x6
c00199bf:	0f 84 e1 fe ff ff    	je     c00198a6 <CPU::detectFeatures()+0x7a2>
c00199c5:	83 f8 04             	cmp    eax,0x4
c00199c8:	0f 84 e9 fe ff ff    	je     c00198b7 <CPU::detectFeatures()+0x7b3>
c00199ce:	83 f8 03             	cmp    eax,0x3
c00199d1:	0f 85 0e 01 00 00    	jne    c0019ae5 <CPU::detectFeatures()+0x9e1>
c00199d7:	52                   	push   edx
c00199d8:	52                   	push   edx
c00199d9:	68 18 bb 02 c0       	push   0xc002bb18
c00199de:	eb 77                	jmp    c0019a57 <CPU::detectFeatures()+0x953>
c00199e0:	83 f8 07             	cmp    eax,0x7
c00199e3:	75 09                	jne    c00199ee <CPU::detectFeatures()+0x8ea>
c00199e5:	50                   	push   eax
c00199e6:	50                   	push   eax
c00199e7:	68 22 bb 02 c0       	push   0xc002bb22
c00199ec:	eb 69                	jmp    c0019a57 <CPU::detectFeatures()+0x953>
c00199ee:	83 f8 0a             	cmp    eax,0xa
c00199f1:	75 09                	jne    c00199fc <CPU::detectFeatures()+0x8f8>
c00199f3:	50                   	push   eax
c00199f4:	50                   	push   eax
c00199f5:	68 2d bb 02 c0       	push   0xc002bb2d
c00199fa:	eb 5b                	jmp    c0019a57 <CPU::detectFeatures()+0x953>
c00199fc:	83 f8 0b             	cmp    eax,0xb
c00199ff:	75 09                	jne    c0019a0a <CPU::detectFeatures()+0x906>
c0019a01:	50                   	push   eax
c0019a02:	50                   	push   eax
c0019a03:	68 35 bb 02 c0       	push   0xc002bb35
c0019a08:	eb 4d                	jmp    c0019a57 <CPU::detectFeatures()+0x953>
c0019a0a:	83 f8 08             	cmp    eax,0x8
c0019a0d:	75 09                	jne    c0019a18 <CPU::detectFeatures()+0x914>
c0019a0f:	50                   	push   eax
c0019a10:	50                   	push   eax
c0019a11:	68 3e bb 02 c0       	push   0xc002bb3e
c0019a16:	eb 3f                	jmp    c0019a57 <CPU::detectFeatures()+0x953>
c0019a18:	83 f8 09             	cmp    eax,0x9
c0019a1b:	75 09                	jne    c0019a26 <CPU::detectFeatures()+0x922>
c0019a1d:	50                   	push   eax
c0019a1e:	50                   	push   eax
c0019a1f:	68 46 bb 02 c0       	push   0xc002bb46
c0019a24:	eb 31                	jmp    c0019a57 <CPU::detectFeatures()+0x953>
c0019a26:	83 f8 05             	cmp    eax,0x5
c0019a29:	75 09                	jne    c0019a34 <CPU::detectFeatures()+0x930>
c0019a2b:	50                   	push   eax
c0019a2c:	50                   	push   eax
c0019a2d:	68 4e bb 02 c0       	push   0xc002bb4e
c0019a32:	eb 23                	jmp    c0019a57 <CPU::detectFeatures()+0x953>
c0019a34:	83 f8 0c             	cmp    eax,0xc
c0019a37:	75 09                	jne    c0019a42 <CPU::detectFeatures()+0x93e>
c0019a39:	55                   	push   ebp
c0019a3a:	55                   	push   ebp
c0019a3b:	68 5c bb 02 c0       	push   0xc002bb5c
c0019a40:	eb 15                	jmp    c0019a57 <CPU::detectFeatures()+0x953>
c0019a42:	83 f8 0d             	cmp    eax,0xd
c0019a45:	75 09                	jne    c0019a50 <CPU::detectFeatures()+0x94c>
c0019a47:	57                   	push   edi
c0019a48:	57                   	push   edi
c0019a49:	68 67 bb 02 c0       	push   0xc002bb67
c0019a4e:	eb 07                	jmp    c0019a57 <CPU::detectFeatures()+0x953>
c0019a50:	56                   	push   esi
c0019a51:	56                   	push   esi
c0019a52:	68 7b bb 02 c0       	push   0xc002bb7b
c0019a57:	53                   	push   ebx
c0019a58:	e8 1d ab ff ff       	call   c001457a <Device::setName(char const*)>
c0019a5d:	83 c4 10             	add    esp,0x10
c0019a60:	e9 80 00 00 00       	jmp    c0019ae5 <CPU::detectFeatures()+0x9e1>
c0019a65:	51                   	push   ecx
c0019a66:	51                   	push   ecx
c0019a67:	68 c7 b9 02 c0       	push   0xc002b9c7
c0019a6c:	57                   	push   edi
c0019a6d:	e8 c2 6d fe ff       	call   c0000834 <strcpy>
c0019a72:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019a7c:	e8 2d 68 fe ff       	call   c00002ae <is486>
c0019a81:	83 c4 10             	add    esp,0x10
c0019a84:	85 c0                	test   eax,eax
c0019a86:	74 2b                	je     c0019ab3 <CPU::detectFeatures()+0x9af>
c0019a88:	52                   	push   edx
c0019a89:	52                   	push   edx
c0019a8a:	68 87 bb 02 c0       	push   0xc002bb87
c0019a8f:	53                   	push   ebx
c0019a90:	e8 e5 aa ff ff       	call   c001457a <Device::setName(char const*)>
c0019a95:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019a9c:	0f 20 c0             	mov    eax,cr0
c0019a9f:	83 e0 14             	and    eax,0x14
c0019aa2:	83 c4 10             	add    esp,0x10
c0019aa5:	83 f8 04             	cmp    eax,0x4
c0019aa8:	75 1f                	jne    c0019ac9 <CPU::detectFeatures()+0x9c5>
c0019aaa:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019ab1:	eb 32                	jmp    c0019ae5 <CPU::detectFeatures()+0x9e1>
c0019ab3:	50                   	push   eax
c0019ab4:	50                   	push   eax
c0019ab5:	68 92 bb 02 c0       	push   0xc002bb92
c0019aba:	53                   	push   ebx
c0019abb:	e8 ba aa ff ff       	call   c001457a <Device::setName(char const*)>
c0019ac0:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019ac7:	eb d3                	jmp    c0019a9c <CPU::detectFeatures()+0x998>
c0019ac9:	e8 bb 67 fe ff       	call   c0000289 <hasLegacyFPU>
c0019ace:	83 e0 01             	and    eax,0x1
c0019ad1:	8d 14 00             	lea    edx,[eax+eax*1]
c0019ad4:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019ada:	83 e0 fd             	and    eax,0xfffffffd
c0019add:	09 d0                	or     eax,edx
c0019adf:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019ae5:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019aec:	83 c4 4c             	add    esp,0x4c
c0019aef:	5b                   	pop    ebx
c0019af0:	5e                   	pop    esi
c0019af1:	5f                   	pop    edi
c0019af2:	5d                   	pop    ebp
c0019af3:	c3                   	ret    

c0019af4 <CPU::setupSMEP()>:
c0019af4:	0f 20 e0             	mov    eax,cr4
c0019af7:	0d 00 00 10 00       	or     eax,0x100000
c0019afc:	0f 22 e0             	mov    cr4,eax
c0019aff:	c3                   	ret    

c0019b00 <CPU::setupUMIP()>:
c0019b00:	0f 20 e0             	mov    eax,cr4
c0019b03:	80 cc 08             	or     ah,0x8
c0019b06:	0f 22 e0             	mov    cr4,eax
c0019b09:	c3                   	ret    

c0019b0a <CPU::setupTSC()>:
c0019b0a:	0f 20 e0             	mov    eax,cr4
c0019b0d:	83 c8 04             	or     eax,0x4
c0019b10:	0f 22 e0             	mov    cr4,eax
c0019b13:	c3                   	ret    

c0019b14 <CPU::setupLargePages()>:
c0019b14:	0f 20 e0             	mov    eax,cr4
c0019b17:	83 c8 10             	or     eax,0x10
c0019b1a:	0f 22 e0             	mov    cr4,eax
c0019b1d:	c3                   	ret    

c0019b1e <CPU::setupPAT()>:
c0019b1e:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c0019b23:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019b2a:	74 2c                	je     c0019b58 <CPU::setupPAT()+0x3a>
c0019b2c:	53                   	push   ebx
c0019b2d:	83 ec 10             	sub    esp,0x10
c0019b30:	68 77 02 00 00       	push   0x277
c0019b35:	50                   	push   eax
c0019b36:	e8 ad 52 ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019b3b:	83 e2 f8             	and    edx,0xfffffff8
c0019b3e:	83 ca 01             	or     edx,0x1
c0019b41:	52                   	push   edx
c0019b42:	50                   	push   eax
c0019b43:	68 77 02 00 00       	push   0x277
c0019b48:	ff 35 48 e6 02 c0    	push   DWORD PTR ds:0xc002e648
c0019b4e:	e8 c1 52 ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c0019b53:	83 c4 28             	add    esp,0x28
c0019b56:	5b                   	pop    ebx
c0019b57:	c3                   	ret    
c0019b58:	c3                   	ret    
c0019b59:	90                   	nop

c0019b5a <CPU::setupMTRR()>:
c0019b5a:	c3                   	ret    
c0019b5b:	90                   	nop

c0019b5c <CPU::setupGlobalPages()>:
c0019b5c:	0f 20 e0             	mov    eax,cr4
c0019b5f:	0c 80                	or     al,0x80
c0019b61:	0f 22 e0             	mov    cr4,eax
c0019b64:	c3                   	ret    
c0019b65:	90                   	nop

c0019b66 <CPU::allowUsermodeDataAccess()>:
c0019b66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b6a:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019b71:	74 03                	je     c0019b76 <CPU::allowUsermodeDataAccess()+0x10>
c0019b73:	0f 01 cb             	stac   
c0019b76:	c3                   	ret    
c0019b77:	90                   	nop

c0019b78 <CPU::prohibitUsermodeDataAccess()>:
c0019b78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b7c:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019b83:	74 03                	je     c0019b88 <CPU::prohibitUsermodeDataAccess()+0x10>
c0019b85:	0f 01 ca             	clac   
c0019b88:	c3                   	ret    
c0019b89:	90                   	nop

c0019b8a <CPU::setupSMAP()>:
c0019b8a:	0f 20 e0             	mov    eax,cr4
c0019b8d:	0d 00 00 20 00       	or     eax,0x200000
c0019b92:	0f 22 e0             	mov    cr4,eax
c0019b95:	eb e1                	jmp    c0019b78 <CPU::prohibitUsermodeDataAccess()>
c0019b97:	90                   	nop

c0019b98 <CPU::setupFeatures()>:
c0019b98:	83 ec 0c             	sub    esp,0xc
c0019b9b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019b9f:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019ba6:	74 07                	je     c0019baf <CPU::setupFeatures()+0x17>
c0019ba8:	52                   	push   edx
c0019ba9:	e8 46 ff ff ff       	call   c0019af4 <CPU::setupSMEP()>
c0019bae:	58                   	pop    eax
c0019baf:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019bb6:	74 07                	je     c0019bbf <CPU::setupFeatures()+0x27>
c0019bb8:	52                   	push   edx
c0019bb9:	e8 cc ff ff ff       	call   c0019b8a <CPU::setupSMAP()>
c0019bbe:	58                   	pop    eax
c0019bbf:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019bc6:	74 07                	je     c0019bcf <CPU::setupFeatures()+0x37>
c0019bc8:	52                   	push   edx
c0019bc9:	e8 32 ff ff ff       	call   c0019b00 <CPU::setupUMIP()>
c0019bce:	58                   	pop    eax
c0019bcf:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019bd6:	74 07                	je     c0019bdf <CPU::setupFeatures()+0x47>
c0019bd8:	52                   	push   edx
c0019bd9:	e8 2c ff ff ff       	call   c0019b0a <CPU::setupTSC()>
c0019bde:	58                   	pop    eax
c0019bdf:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019be6:	74 07                	je     c0019bef <CPU::setupFeatures()+0x57>
c0019be8:	52                   	push   edx
c0019be9:	e8 26 ff ff ff       	call   c0019b14 <CPU::setupLargePages()>
c0019bee:	59                   	pop    ecx
c0019bef:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019bf6:	74 07                	je     c0019bff <CPU::setupFeatures()+0x67>
c0019bf8:	52                   	push   edx
c0019bf9:	e8 5e ff ff ff       	call   c0019b5c <CPU::setupGlobalPages()>
c0019bfe:	58                   	pop    eax
c0019bff:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019c06:	74 0c                	je     c0019c14 <CPU::setupFeatures()+0x7c>
c0019c08:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019c0c:	83 c4 0c             	add    esp,0xc
c0019c0f:	e9 0a ff ff ff       	jmp    c0019b1e <CPU::setupPAT()>
c0019c14:	83 c4 0c             	add    esp,0xc
c0019c17:	c3                   	ret    

c0019c18 <CPU::open(int, int, void*)>:
c0019c18:	57                   	push   edi
c0019c19:	56                   	push   esi
c0019c1a:	53                   	push   ebx
c0019c1b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019c1f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019c23:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019c29:	83 ec 0c             	sub    esp,0xc
c0019c2c:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019c32:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019c38:	50                   	push   eax
c0019c39:	e8 96 54 ff ff       	call   c000f0d4 <GDT::setup()>
c0019c3e:	83 c4 0c             	add    esp,0xc
c0019c41:	6a 00                	push   0x0
c0019c43:	68 ef be ad de       	push   0xdeadbeef
c0019c48:	57                   	push   edi
c0019c49:	e8 c6 78 ff ff       	call   c0011514 <TSS::setup(unsigned long, unsigned long)>
c0019c4e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019c51:	e8 9e 78 ff ff       	call   c00114f4 <TSS::flush()>
c0019c56:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019c5c:	89 04 24             	mov    DWORD PTR [esp],eax
c0019c5f:	e8 cc 56 ff ff       	call   c000f330 <IDT::setup()>
c0019c64:	b8 00 04 00 00       	mov    eax,0x400
c0019c69:	0f 23 f8             	mov    db7,eax
c0019c6c:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019c76:	e8 67 62 ff ff       	call   c000fee2 <Phys::allocatePage()>
c0019c7b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019c81:	89 30                	mov    DWORD PTR [eax],esi
c0019c83:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019c89:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019c8c:	58                   	pop    eax
c0019c8d:	5a                   	pop    edx
c0019c8e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019c94:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019c98:	e8 b5 89 ff ff       	call   c0012652 <VAS::setCPUSpecific(unsigned long)>
c0019c9d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019ca0:	e8 5f f4 ff ff       	call   c0019104 <CPU::detectFeatures()>
c0019ca5:	e8 ce bc ff ff       	call   c0015978 <setupInterruptController()>
c0019caa:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019cb0:	a1 60 e6 02 c0       	mov    eax,ds:0xc002e660
c0019cb5:	83 e0 10             	and    eax,0x10
c0019cb8:	83 f8 01             	cmp    eax,0x1
c0019cbb:	19 c0                	sbb    eax,eax
c0019cbd:	83 e0 46             	and    eax,0x46
c0019cc0:	83 c0 1e             	add    eax,0x1e
c0019cc3:	89 04 24             	mov    DWORD PTR [esp],eax
c0019cc6:	e8 bb d1 ff ff       	call   c0016e86 <setupTimer(int)>
c0019ccb:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019cd1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019cd4:	e8 bf fe ff ff       	call   c0019b98 <CPU::setupFeatures()>
c0019cd9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019cdc:	e8 a7 f1 ff ff       	call   c0018e88 <CPU::displayFeatures()>
c0019ce1:	83 c4 10             	add    esp,0x10
c0019ce4:	31 c0                	xor    eax,eax
c0019ce6:	5b                   	pop    ebx
c0019ce7:	5e                   	pop    esi
c0019ce8:	5f                   	pop    edi
c0019ce9:	c3                   	ret    

c0019cea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019cea:	57                   	push   edi
c0019ceb:	56                   	push   esi
c0019cec:	53                   	push   ebx
c0019ced:	51                   	push   ecx
c0019cee:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019cf2:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019cf5:	0f 02 c0             	lar    eax,ax
c0019cf8:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019cfb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019cff:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019d02:	88 ca                	mov    dl,cl
c0019d04:	c0 ea 06             	shr    dl,0x6
c0019d07:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019d0b:	89 ca                	mov    edx,ecx
c0019d0d:	66 c1 ea 03          	shr    dx,0x3
c0019d11:	83 e2 07             	and    edx,0x7
c0019d14:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019d19:	88 17                	mov    BYTE PTR [edi],dl
c0019d1b:	0f 84 a6 01 00 00    	je     c0019ec7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019d21:	83 e1 07             	and    ecx,0x7
c0019d24:	80 f9 04             	cmp    cl,0x4
c0019d27:	0f 84 98 00 00 00    	je     c0019dc5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019d2d:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019d32:	0f 95 c0             	setne  al
c0019d35:	80 f9 05             	cmp    cl,0x5
c0019d38:	0f 95 c2             	setne  dl
c0019d3b:	08 c2                	or     dl,al
c0019d3d:	74 79                	je     c0019db8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019d3f:	84 c9                	test   cl,cl
c0019d41:	75 05                	jne    c0019d48 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019d43:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019d46:	eb 3c                	jmp    c0019d84 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d48:	80 f9 01             	cmp    cl,0x1
c0019d4b:	75 05                	jne    c0019d52 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019d4d:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019d50:	eb 32                	jmp    c0019d84 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d52:	80 f9 02             	cmp    cl,0x2
c0019d55:	75 05                	jne    c0019d5c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019d57:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019d5a:	eb 28                	jmp    c0019d84 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d5c:	31 c0                	xor    eax,eax
c0019d5e:	80 f9 03             	cmp    cl,0x3
c0019d61:	75 05                	jne    c0019d68 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019d63:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019d66:	eb 1c                	jmp    c0019d84 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d68:	80 f9 05             	cmp    cl,0x5
c0019d6b:	75 05                	jne    c0019d72 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019d6d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019d70:	eb 12                	jmp    c0019d84 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d72:	80 f9 06             	cmp    cl,0x6
c0019d75:	75 05                	jne    c0019d7c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019d77:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019d7a:	eb 08                	jmp    c0019d84 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d7c:	80 f9 07             	cmp    cl,0x7
c0019d7f:	75 03                	jne    c0019d84 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019d81:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019d84:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019d89:	75 10                	jne    c0019d9b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019d8b:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019d8f:	b9 03 00 00 00       	mov    ecx,0x3
c0019d94:	01 d0                	add    eax,edx
c0019d96:	e9 37 01 00 00       	jmp    c0019ed2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019d9b:	b9 02 00 00 00       	mov    ecx,0x2
c0019da0:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019da5:	0f 85 27 01 00 00    	jne    c0019ed2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019dab:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019dae:	b9 06 00 00 00       	mov    ecx,0x6
c0019db3:	e9 1a 01 00 00       	jmp    c0019ed2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019db8:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019dbb:	b9 06 00 00 00       	mov    ecx,0x6
c0019dc0:	e9 0f 01 00 00       	jmp    c0019ed4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019dc5:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019dc8:	88 ca                	mov    dl,cl
c0019dca:	c0 ea 06             	shr    dl,0x6
c0019dcd:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019dd1:	89 ca                	mov    edx,ecx
c0019dd3:	66 c1 ea 03          	shr    dx,0x3
c0019dd7:	83 e2 07             	and    edx,0x7
c0019dda:	80 e1 07             	and    cl,0x7
c0019ddd:	75 05                	jne    c0019de4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019ddf:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019de2:	eb 4c                	jmp    c0019e30 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019de4:	80 f9 01             	cmp    cl,0x1
c0019de7:	75 05                	jne    c0019dee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019de9:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019dec:	eb 42                	jmp    c0019e30 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019dee:	80 f9 02             	cmp    cl,0x2
c0019df1:	75 05                	jne    c0019df8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019df3:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019df6:	eb 38                	jmp    c0019e30 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019df8:	80 f9 03             	cmp    cl,0x3
c0019dfb:	75 05                	jne    c0019e02 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019dfd:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019e00:	eb 2e                	jmp    c0019e30 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e02:	80 f9 04             	cmp    cl,0x4
c0019e05:	75 12                	jne    c0019e19 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019e07:	f6 c4 60             	test   ah,0x60
c0019e0a:	75 08                	jne    c0019e14 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019e0c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019e0f:	8d 78 14             	lea    edi,[eax+0x14]
c0019e12:	eb 1c                	jmp    c0019e30 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e14:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019e17:	eb 17                	jmp    c0019e30 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e19:	80 f9 05             	cmp    cl,0x5
c0019e1c:	75 05                	jne    c0019e23 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019e1e:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019e21:	eb 0d                	jmp    c0019e30 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e23:	80 f9 06             	cmp    cl,0x6
c0019e26:	75 05                	jne    c0019e2d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019e28:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019e2b:	eb 03                	jmp    c0019e30 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e2d:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019e30:	84 d2                	test   dl,dl
c0019e32:	75 05                	jne    c0019e39 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019e34:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019e37:	eb 3c                	jmp    c0019e75 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e39:	80 fa 01             	cmp    dl,0x1
c0019e3c:	75 05                	jne    c0019e43 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019e3e:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019e41:	eb 32                	jmp    c0019e75 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e43:	80 fa 02             	cmp    dl,0x2
c0019e46:	75 05                	jne    c0019e4d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019e48:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019e4b:	eb 28                	jmp    c0019e75 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e4d:	80 fa 03             	cmp    dl,0x3
c0019e50:	75 05                	jne    c0019e57 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019e52:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019e55:	eb 1e                	jmp    c0019e75 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e57:	31 c0                	xor    eax,eax
c0019e59:	80 fa 04             	cmp    dl,0x4
c0019e5c:	74 17                	je     c0019e75 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e5e:	80 fa 05             	cmp    dl,0x5
c0019e61:	75 05                	jne    c0019e68 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019e63:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019e66:	eb 0d                	jmp    c0019e75 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e68:	80 fa 06             	cmp    dl,0x6
c0019e6b:	75 05                	jne    c0019e72 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019e6d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019e70:	eb 03                	jmp    c0019e75 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019e72:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019e75:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019e7a:	0f 94 c2             	sete   dl
c0019e7d:	80 f9 05             	cmp    cl,0x5
c0019e80:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019e84:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019e89:	d3 e0                	shl    eax,cl
c0019e8b:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019e8f:	74 0a                	je     c0019e9b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019e91:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019e94:	b9 07 00 00 00       	mov    ecx,0x7
c0019e99:	eb 37                	jmp    c0019ed2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019e9b:	01 f8                	add    eax,edi
c0019e9d:	b9 03 00 00 00       	mov    ecx,0x3
c0019ea2:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019ea7:	74 2b                	je     c0019ed4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019ea9:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019eae:	75 0d                	jne    c0019ebd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019eb0:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019eb4:	01 c8                	add    eax,ecx
c0019eb6:	b9 04 00 00 00       	mov    ecx,0x4
c0019ebb:	eb 17                	jmp    c0019ed4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019ebd:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019ec0:	b9 07 00 00 00       	mov    ecx,0x7
c0019ec5:	eb 0d                	jmp    c0019ed4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019ec7:	b9 02 00 00 00       	mov    ecx,0x2
c0019ecc:	b2 01                	mov    dl,0x1
c0019ece:	31 c0                	xor    eax,eax
c0019ed0:	eb 02                	jmp    c0019ed4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019ed2:	31 d2                	xor    edx,edx
c0019ed4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019ed8:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019eda:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019ede:	88 11                	mov    BYTE PTR [ecx],dl
c0019ee0:	5a                   	pop    edx
c0019ee1:	5b                   	pop    ebx
c0019ee2:	5e                   	pop    esi
c0019ee3:	5f                   	pop    edi
c0019ee4:	c3                   	ret    

c0019ee5 <Krnl::smpEntry()>:
c0019ee5:	eb fe                	jmp    c0019ee5 <Krnl::smpEntry()>

c0019ee7 <Krnl::startCPU(int)>:
c0019ee7:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c0019eec:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019ef3:	0f 84 36 01 00 00    	je     c001a02f <Krnl::startCPU(int)+0x148>
c0019ef9:	53                   	push   ebx
c0019efa:	83 ec 08             	sub    esp,0x8
c0019efd:	e8 46 3f 00 00       	call   c001de48 <lockScheduler()>
c0019f02:	52                   	push   edx
c0019f03:	52                   	push   edx
c0019f04:	6a 1b                	push   0x1b
c0019f06:	ff 35 48 e6 02 c0    	push   DWORD PTR ds:0xc002e648
c0019f0c:	e8 d7 4e ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019f11:	59                   	pop    ecx
c0019f12:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019f17:	89 c3                	mov    ebx,eax
c0019f19:	58                   	pop    eax
c0019f1a:	53                   	push   ebx
c0019f1b:	68 cc bb 02 c0       	push   0xc002bbcc
c0019f20:	e8 4c 90 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0019f25:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019f2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019f33:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019f3d:	c1 e0 18             	shl    eax,0x18
c0019f40:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019f46:	83 c4 10             	add    esp,0x10
c0019f49:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019f4f:	09 c2                	or     edx,eax
c0019f51:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019f57:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019f5d:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019f63:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019f69:	80 cd c5             	or     ch,0xc5
c0019f6c:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019f72:	f3 90                	pause  
c0019f74:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019f76:	0f ba e1 0c          	bt     ecx,0xc
c0019f7a:	72 f6                	jb     c0019f72 <Krnl::startCPU(int)+0x8b>
c0019f7c:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019f82:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019f88:	09 c1                	or     ecx,eax
c0019f8a:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019f90:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019f96:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019f9c:	80 cd 85             	or     ch,0x85
c0019f9f:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019fa5:	f3 90                	pause  
c0019fa7:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019fa9:	0f ba e1 0c          	bt     ecx,0xc
c0019fad:	72 f6                	jb     c0019fa5 <Krnl::startCPU(int)+0xbe>
c0019faf:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019fb9:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019fbf:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019fc5:	09 c1                	or     ecx,eax
c0019fc7:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019fcd:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019fd3:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019fd9:	81 c9 02 06 00 00    	or     ecx,0x602
c0019fdf:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019fe5:	f3 90                	pause  
c0019fe7:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019fe9:	0f ba e1 0c          	bt     ecx,0xc
c0019fed:	72 f6                	jb     c0019fe5 <Krnl::startCPU(int)+0xfe>
c0019fef:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019ff9:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019fff:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a005:	09 c8                	or     eax,ecx
c001a007:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c001a00d:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c001a013:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c001a018:	0d 02 06 00 00       	or     eax,0x602
c001a01d:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c001a023:	f3 90                	pause  
c001a025:	8b 02                	mov    eax,DWORD PTR [edx]
c001a027:	0f ba e0 0c          	bt     eax,0xc
c001a02b:	72 f6                	jb     c001a023 <Krnl::startCPU(int)+0x13c>
c001a02d:	eb fe                	jmp    c001a02d <Krnl::startCPU(int)+0x146>
c001a02f:	c3                   	ret    

c001a030 <Krnl::startCPUs()>:
c001a030:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c001a035:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001a03b:	88 c2                	mov    dl,al
c001a03d:	83 e2 0a             	and    edx,0xa
c001a040:	80 fa 0a             	cmp    dl,0xa
c001a043:	75 09                	jne    c001a04e <Krnl::startCPUs()+0x1e>
c001a045:	a8 01                	test   al,0x1
c001a047:	74 05                	je     c001a04e <Krnl::startCPUs()+0x1e>
c001a049:	e9 4d 61 fe ff       	jmp    c000019b <prepareTramp>
c001a04e:	c3                   	ret    
c001a04f:	90                   	nop

c001a050 <EnvVarContainer::getEnv(char const*)>:
c001a050:	57                   	push   edi
c001a051:	56                   	push   esi
c001a052:	53                   	push   ebx
c001a053:	31 db                	xor    ebx,ebx
c001a055:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a059:	39 1e                	cmp    DWORD PTR [esi],ebx
c001a05b:	7e 2b                	jle    c001a088 <EnvVarContainer::getEnv(char const*)+0x38>
c001a05d:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001a064:	50                   	push   eax
c001a065:	50                   	push   eax
c001a066:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a069:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001a06c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a070:	e8 4b 68 fe ff       	call   c00008c0 <strcmp>
c001a075:	83 c4 10             	add    esp,0x10
c001a078:	85 c0                	test   eax,eax
c001a07a:	75 09                	jne    c001a085 <EnvVarContainer::getEnv(char const*)+0x35>
c001a07c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a07f:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001a083:	eb 05                	jmp    c001a08a <EnvVarContainer::getEnv(char const*)+0x3a>
c001a085:	43                   	inc    ebx
c001a086:	eb d1                	jmp    c001a059 <EnvVarContainer::getEnv(char const*)+0x9>
c001a088:	31 c0                	xor    eax,eax
c001a08a:	5b                   	pop    ebx
c001a08b:	5e                   	pop    esi
c001a08c:	5f                   	pop    edi
c001a08d:	c3                   	ret    

c001a08e <EnvVarContainer::setEnv(char const*, char const*)>:
c001a08e:	57                   	push   edi
c001a08f:	56                   	push   esi
c001a090:	53                   	push   ebx
c001a091:	83 ec 1c             	sub    esp,0x1c
c001a094:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a098:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a09c:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a0a0:	57                   	push   edi
c001a0a1:	e8 ee 66 fe ff       	call   c0000794 <strlen>
c001a0a6:	40                   	inc    eax
c001a0a7:	89 04 24             	mov    DWORD PTR [esp],eax
c001a0aa:	e8 91 57 ff ff       	call   c000f840 <malloc>
c001a0af:	89 34 24             	mov    DWORD PTR [esp],esi
c001a0b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a0b6:	e8 d9 66 fe ff       	call   c0000794 <strlen>
c001a0bb:	40                   	inc    eax
c001a0bc:	89 04 24             	mov    DWORD PTR [esp],eax
c001a0bf:	e8 7c 57 ff ff       	call   c000f840 <malloc>
c001a0c4:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a0c7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a0cb:	e8 c4 66 fe ff       	call   c0000794 <strlen>
c001a0d0:	83 c4 0c             	add    esp,0xc
c001a0d3:	40                   	inc    eax
c001a0d4:	50                   	push   eax
c001a0d5:	6a 00                	push   0x0
c001a0d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a0db:	e8 98 66 fe ff       	call   c0000778 <memset>
c001a0e0:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a0e3:	e8 ac 66 fe ff       	call   c0000794 <strlen>
c001a0e8:	83 c4 0c             	add    esp,0xc
c001a0eb:	40                   	inc    eax
c001a0ec:	50                   	push   eax
c001a0ed:	57                   	push   edi
c001a0ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a0f2:	e8 4d 66 fe ff       	call   c0000744 <memcpy>
c001a0f7:	89 34 24             	mov    DWORD PTR [esp],esi
c001a0fa:	e8 95 66 fe ff       	call   c0000794 <strlen>
c001a0ff:	83 c4 0c             	add    esp,0xc
c001a102:	40                   	inc    eax
c001a103:	50                   	push   eax
c001a104:	6a 00                	push   0x0
c001a106:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a10a:	e8 69 66 fe ff       	call   c0000778 <memset>
c001a10f:	89 34 24             	mov    DWORD PTR [esp],esi
c001a112:	e8 7d 66 fe ff       	call   c0000794 <strlen>
c001a117:	83 c4 0c             	add    esp,0xc
c001a11a:	40                   	inc    eax
c001a11b:	50                   	push   eax
c001a11c:	56                   	push   esi
c001a11d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a121:	e8 1e 66 fe ff       	call   c0000744 <memcpy>
c001a126:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a128:	40                   	inc    eax
c001a129:	89 03                	mov    DWORD PTR [ebx],eax
c001a12b:	c1 e0 03             	shl    eax,0x3
c001a12e:	5a                   	pop    edx
c001a12f:	59                   	pop    ecx
c001a130:	50                   	push   eax
c001a131:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001a134:	e8 f3 56 ff ff       	call   c000f82c <realloc>
c001a139:	83 c4 0c             	add    esp,0xc
c001a13c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a13f:	6a 08                	push   0x8
c001a141:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a145:	52                   	push   edx
c001a146:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a148:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a14c:	50                   	push   eax
c001a14d:	e8 f2 65 fe ff       	call   c0000744 <memcpy>
c001a152:	83 c4 20             	add    esp,0x20
c001a155:	5b                   	pop    ebx
c001a156:	5e                   	pop    esi
c001a157:	5f                   	pop    edi
c001a158:	c3                   	ret    
c001a159:	90                   	nop

c001a15a <EnvVarContainer::deleteEnv(char const*)>:
c001a15a:	c3                   	ret    
c001a15b:	90                   	nop

c001a15c <EnvVarContainer::loadFrom(char const*, char const*)>:
c001a15c:	55                   	push   ebp
c001a15d:	57                   	push   edi
c001a15e:	56                   	push   esi
c001a15f:	53                   	push   ebx
c001a160:	81 ec 38 01 00 00    	sub    esp,0x138
c001a166:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c001a16d:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c001a174:	68 14 01 00 00       	push   0x114
c001a179:	e8 c2 56 ff ff       	call   c000f840 <malloc>
c001a17e:	83 c4 0c             	add    esp,0xc
c001a181:	89 c7                	mov    edi,eax
c001a183:	ff 76 08             	push   DWORD PTR [esi+0x8]
c001a186:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a18d:	50                   	push   eax
c001a18e:	e8 37 93 ff ff       	call   c00134ca <File::File(char const*, Process*)>
c001a193:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a196:	e8 01 96 ff ff       	call   c001379c <File::exists()>
c001a19b:	83 c4 10             	add    esp,0x10
c001a19e:	84 c0                	test   al,al
c001a1a0:	75 31                	jne    c001a1d3 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001a1a2:	51                   	push   ecx
c001a1a3:	51                   	push   ecx
c001a1a4:	6a 12                	push   0x12
c001a1a6:	57                   	push   edi
c001a1a7:	e8 82 93 ff ff       	call   c001352e <File::open(FileOpenMode)>
c001a1ac:	8b 07                	mov    eax,DWORD PTR [edi]
c001a1ae:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001a1b1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a1b4:	e8 db 65 fe ff       	call   c0000794 <strlen>
c001a1b9:	5a                   	pop    edx
c001a1ba:	31 d2                	xor    edx,edx
c001a1bc:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a1c0:	51                   	push   ecx
c001a1c1:	55                   	push   ebp
c001a1c2:	52                   	push   edx
c001a1c3:	50                   	push   eax
c001a1c4:	57                   	push   edi
c001a1c5:	ff d3                	call   ebx
c001a1c7:	83 c4 14             	add    esp,0x14
c001a1ca:	57                   	push   edi
c001a1cb:	e8 bc 93 ff ff       	call   c001358c <File::close()>
c001a1d0:	83 c4 10             	add    esp,0x10
c001a1d3:	31 db                	xor    ebx,ebx
c001a1d5:	50                   	push   eax
c001a1d6:	31 ed                	xor    ebp,ebp
c001a1d8:	68 00 01 00 00       	push   0x100
c001a1dd:	6a 00                	push   0x0
c001a1df:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a1e3:	50                   	push   eax
c001a1e4:	e8 8f 65 fe ff       	call   c0000778 <memset>
c001a1e9:	58                   	pop    eax
c001a1ea:	5a                   	pop    edx
c001a1eb:	6a 01                	push   0x1
c001a1ed:	57                   	push   edi
c001a1ee:	e8 3b 93 ff ff       	call   c001352e <File::open(FileOpenMode)>
c001a1f3:	83 c4 10             	add    esp,0x10
c001a1f6:	83 ec 0c             	sub    esp,0xc
c001a1f9:	8b 07                	mov    eax,DWORD PTR [edi]
c001a1fb:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a1ff:	51                   	push   ecx
c001a200:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a204:	52                   	push   edx
c001a205:	6a 00                	push   0x0
c001a207:	6a 01                	push   0x1
c001a209:	57                   	push   edi
c001a20a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a20d:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a211:	83 c4 20             	add    esp,0x20
c001a214:	3c 0d                	cmp    al,0xd
c001a216:	0f 84 12 01 00 00    	je     c001a32e <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a21c:	85 db                	test   ebx,ebx
c001a21e:	0f 84 fd 00 00 00    	je     c001a321 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a224:	3c 0a                	cmp    al,0xa
c001a226:	74 13                	je     c001a23b <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a228:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a22d:	74 0c                	je     c001a23b <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a22f:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c001a235:	0f 8e e6 00 00 00    	jle    c001a321 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a23b:	83 ec 0c             	sub    esp,0xc
c001a23e:	8d 53 01             	lea    edx,[ebx+0x1]
c001a241:	29 dd                	sub    ebp,ebx
c001a243:	52                   	push   edx
c001a244:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a248:	e8 f3 55 ff ff       	call   c000f840 <malloc>
c001a24d:	8d 4d 04             	lea    ecx,[ebp+0x4]
c001a250:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a254:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001a257:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001a25b:	e8 e0 55 ff ff       	call   c000f840 <malloc>
c001a260:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a264:	83 c4 0c             	add    esp,0xc
c001a267:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a26b:	52                   	push   edx
c001a26c:	6a 00                	push   0x0
c001a26e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a272:	e8 01 65 fe ff       	call   c0000778 <memset>
c001a277:	83 c4 0c             	add    esp,0xc
c001a27a:	53                   	push   ebx
c001a27b:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a27f:	55                   	push   ebp
c001a280:	01 eb                	add    ebx,ebp
c001a282:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a286:	e8 b9 64 fe ff       	call   c0000744 <memcpy>
c001a28b:	83 c4 0c             	add    esp,0xc
c001a28e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a292:	51                   	push   ecx
c001a293:	6a 00                	push   0x0
c001a295:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a299:	e8 da 64 fe ff       	call   c0000778 <memset>
c001a29e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a2a1:	e8 ee 64 fe ff       	call   c0000794 <strlen>
c001a2a6:	83 c4 0c             	add    esp,0xc
c001a2a9:	50                   	push   eax
c001a2aa:	53                   	push   ebx
c001a2ab:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a2af:	e8 90 64 fe ff       	call   c0000744 <memcpy>
c001a2b4:	5b                   	pop    ebx
c001a2b5:	58                   	pop    eax
c001a2b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a2ba:	68 dd bb 02 c0       	push   0xc002bbdd
c001a2bf:	e8 ad 8c ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001a2c4:	8b 06                	mov    eax,DWORD PTR [esi]
c001a2c6:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001a2c9:	40                   	inc    eax
c001a2ca:	83 c4 10             	add    esp,0x10
c001a2cd:	89 06                	mov    DWORD PTR [esi],eax
c001a2cf:	85 d2                	test   edx,edx
c001a2d1:	75 0c                	jne    c001a2df <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c001a2d3:	83 ec 0c             	sub    esp,0xc
c001a2d6:	6a 08                	push   0x8
c001a2d8:	e8 63 55 ff ff       	call   c000f840 <malloc>
c001a2dd:	eb 0c                	jmp    c001a2eb <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c001a2df:	c1 e0 03             	shl    eax,0x3
c001a2e2:	51                   	push   ecx
c001a2e3:	51                   	push   ecx
c001a2e4:	50                   	push   eax
c001a2e5:	52                   	push   edx
c001a2e6:	e8 41 55 ff ff       	call   c000f82c <realloc>
c001a2eb:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c001a2ee:	83 c4 10             	add    esp,0x10
c001a2f1:	31 db                	xor    ebx,ebx
c001a2f3:	52                   	push   edx
c001a2f4:	6a 08                	push   0x8
c001a2f6:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a2fa:	50                   	push   eax
c001a2fb:	8b 16                	mov    edx,DWORD PTR [esi]
c001a2fd:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a300:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a304:	50                   	push   eax
c001a305:	e8 3a 64 fe ff       	call   c0000744 <memcpy>
c001a30a:	83 c4 0c             	add    esp,0xc
c001a30d:	68 00 01 00 00       	push   0x100
c001a312:	6a 00                	push   0x0
c001a314:	55                   	push   ebp
c001a315:	31 ed                	xor    ebp,ebp
c001a317:	e8 5c 64 fe ff       	call   c0000778 <memset>
c001a31c:	83 c4 10             	add    esp,0x10
c001a31f:	eb 0d                	jmp    c001a32e <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a321:	3c 3d                	cmp    al,0x3d
c001a323:	74 07                	je     c001a32c <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c001a325:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c001a329:	45                   	inc    ebp
c001a32a:	eb 02                	jmp    c001a32e <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a32c:	89 eb                	mov    ebx,ebp
c001a32e:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a333:	0f 85 bd fe ff ff    	jne    c001a1f6 <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c001a339:	50                   	push   eax
c001a33a:	50                   	push   eax
c001a33b:	ff 36                	push   DWORD PTR [esi]
c001a33d:	68 eb bb 02 c0       	push   0xc002bbeb
c001a342:	e8 2a 8c ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001a347:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a34d:	5b                   	pop    ebx
c001a34e:	5e                   	pop    esi
c001a34f:	5f                   	pop    edi
c001a350:	5d                   	pop    ebp
c001a351:	c3                   	ret    

c001a352 <EnvVarContainer::__loadSystem()>:
c001a352:	83 ec 10             	sub    esp,0x10
c001a355:	68 80 db 02 c0       	push   0xc002db80
c001a35a:	68 16 bc 02 c0       	push   0xc002bc16
c001a35f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a363:	e8 f4 fd ff ff       	call   c001a15c <EnvVarContainer::loadFrom(char const*, char const*)>
c001a368:	83 c4 1c             	add    esp,0x1c
c001a36b:	c3                   	ret    

c001a36c <EnvVarContainer::__loadUser()>:
c001a36c:	c3                   	ret    
c001a36d:	90                   	nop

c001a36e <EnvVarContainer::EnvVarContainer(Process*)>:
c001a36e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a372:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a378:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a37c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a380:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a383:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a387:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a38e:	90                   	nop
c001a38f:	c3                   	ret    

c001a390 <EnvVarContainer::~EnvVarContainer()>:
c001a390:	83 ec 0c             	sub    esp,0xc
c001a393:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a397:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a39a:	85 c0                	test   eax,eax
c001a39c:	74 1d                	je     c001a3bb <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a39e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3a2:	8b 00                	mov    eax,DWORD PTR [eax]
c001a3a4:	85 c0                	test   eax,eax
c001a3a6:	74 13                	je     c001a3bb <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a3a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a3af:	83 ec 0c             	sub    esp,0xc
c001a3b2:	50                   	push   eax
c001a3b3:	e8 98 54 ff ff       	call   c000f850 <free>
c001a3b8:	83 c4 10             	add    esp,0x10
c001a3bb:	90                   	nop
c001a3bc:	83 c4 0c             	add    esp,0xc
c001a3bf:	c3                   	ret    

c001a3c0 <Krnl::getEnv(Process*, char const*)>:
c001a3c0:	53                   	push   ebx
c001a3c1:	83 ec 08             	sub    esp,0x8
c001a3c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3c8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a3cc:	39 05 b4 1b 03 c0    	cmp    DWORD PTR ds:0xc0031bb4,eax
c001a3d2:	74 04                	je     c001a3d8 <Krnl::getEnv(Process*, char const*)+0x18>
c001a3d4:	85 c0                	test   eax,eax
c001a3d6:	75 0b                	jne    c001a3e3 <Krnl::getEnv(Process*, char const*)+0x23>
c001a3d8:	a1 94 11 03 c0       	mov    eax,ds:0xc0031194
c001a3dd:	85 c0                	test   eax,eax
c001a3df:	75 19                	jne    c001a3fa <Krnl::getEnv(Process*, char const*)+0x3a>
c001a3e1:	eb 27                	jmp    c001a40a <Krnl::getEnv(Process*, char const*)+0x4a>
c001a3e3:	52                   	push   edx
c001a3e4:	52                   	push   edx
c001a3e5:	53                   	push   ebx
c001a3e6:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a3ec:	e8 5f fc ff ff       	call   c001a050 <EnvVarContainer::getEnv(char const*)>
c001a3f1:	83 c4 10             	add    esp,0x10
c001a3f4:	85 c0                	test   eax,eax
c001a3f6:	75 28                	jne    c001a420 <Krnl::getEnv(Process*, char const*)+0x60>
c001a3f8:	eb de                	jmp    c001a3d8 <Krnl::getEnv(Process*, char const*)+0x18>
c001a3fa:	52                   	push   edx
c001a3fb:	52                   	push   edx
c001a3fc:	53                   	push   ebx
c001a3fd:	50                   	push   eax
c001a3fe:	e8 4d fc ff ff       	call   c001a050 <EnvVarContainer::getEnv(char const*)>
c001a403:	83 c4 10             	add    esp,0x10
c001a406:	85 c0                	test   eax,eax
c001a408:	75 16                	jne    c001a420 <Krnl::getEnv(Process*, char const*)+0x60>
c001a40a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a40e:	a1 98 11 03 c0       	mov    eax,ds:0xc0031198
c001a413:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a417:	83 c4 08             	add    esp,0x8
c001a41a:	5b                   	pop    ebx
c001a41b:	e9 30 fc ff ff       	jmp    c001a050 <EnvVarContainer::getEnv(char const*)>
c001a420:	83 c4 08             	add    esp,0x8
c001a423:	5b                   	pop    ebx
c001a424:	c3                   	ret    

c001a425 <Krnl::setEnvSystem(char const*, char const*)>:
c001a425:	83 ec 10             	sub    esp,0x10
c001a428:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a42c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a430:	ff 35 98 11 03 c0    	push   DWORD PTR ds:0xc0031198
c001a436:	e8 53 fc ff ff       	call   c001a08e <EnvVarContainer::setEnv(char const*, char const*)>
c001a43b:	83 c4 1c             	add    esp,0x1c
c001a43e:	c3                   	ret    

c001a43f <Krnl::setEnvUser(char const*, char const*)>:
c001a43f:	a1 94 11 03 c0       	mov    eax,ds:0xc0031194
c001a444:	85 c0                	test   eax,eax
c001a446:	74 15                	je     c001a45d <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a448:	83 ec 10             	sub    esp,0x10
c001a44b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a44f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a453:	50                   	push   eax
c001a454:	e8 35 fc ff ff       	call   c001a08e <EnvVarContainer::setEnv(char const*, char const*)>
c001a459:	83 c4 1c             	add    esp,0x1c
c001a45c:	c3                   	ret    
c001a45d:	c3                   	ret    

c001a45e <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a45e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a462:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a468:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a46c:	e9 1d fc ff ff       	jmp    c001a08e <EnvVarContainer::setEnv(char const*, char const*)>

c001a471 <Krnl::deleteEnvSystem(char const*)>:
c001a471:	c3                   	ret    

c001a472 <Krnl::deleteEnvUser(char const*)>:
c001a472:	c3                   	ret    

c001a473 <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a473:	c3                   	ret    

c001a474 <Krnl::newProcessEnv(Process*)>:
c001a474:	83 ec 28             	sub    esp,0x28
c001a477:	6a 0c                	push   0xc
c001a479:	e8 c2 53 ff ff       	call   c000f840 <malloc>
c001a47e:	5a                   	pop    edx
c001a47f:	59                   	pop    ecx
c001a480:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a484:	50                   	push   eax
c001a485:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a489:	e8 e0 fe ff ff       	call   c001a36e <EnvVarContainer::EnvVarContainer(Process*)>
c001a48e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a492:	83 c4 2c             	add    esp,0x2c
c001a495:	c3                   	ret    

c001a496 <Krnl::copyProcessEnv(Process*, Process*)>:
c001a496:	56                   	push   esi
c001a497:	53                   	push   ebx
c001a498:	83 ec 10             	sub    esp,0x10
c001a49b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a49f:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c001a4a5:	6a 0c                	push   0xc
c001a4a7:	e8 94 53 ff ff       	call   c000f840 <malloc>
c001a4ac:	89 c3                	mov    ebx,eax
c001a4ae:	58                   	pop    eax
c001a4af:	5a                   	pop    edx
c001a4b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a4b4:	53                   	push   ebx
c001a4b5:	e8 b4 fe ff ff       	call   c001a36e <EnvVarContainer::EnvVarContainer(Process*)>
c001a4ba:	8b 06                	mov    eax,DWORD PTR [esi]
c001a4bc:	89 03                	mov    DWORD PTR [ebx],eax
c001a4be:	c1 e0 03             	shl    eax,0x3
c001a4c1:	89 04 24             	mov    DWORD PTR [esp],eax
c001a4c4:	e8 77 53 ff ff       	call   c000f840 <malloc>
c001a4c9:	83 c4 0c             	add    esp,0xc
c001a4cc:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a4cf:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a4d1:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c001a4d8:	52                   	push   edx
c001a4d9:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a4dc:	50                   	push   eax
c001a4dd:	e8 62 62 fe ff       	call   c0000744 <memcpy>
c001a4e2:	89 d8                	mov    eax,ebx
c001a4e4:	83 c4 14             	add    esp,0x14
c001a4e7:	5b                   	pop    ebx
c001a4e8:	5e                   	pop    esi
c001a4e9:	c3                   	ret    

c001a4ea <Krnl::loadSystemEnv()>:
c001a4ea:	53                   	push   ebx
c001a4eb:	83 ec 14             	sub    esp,0x14
c001a4ee:	6a 0c                	push   0xc
c001a4f0:	e8 4b 53 ff ff       	call   c000f840 <malloc>
c001a4f5:	89 c3                	mov    ebx,eax
c001a4f7:	58                   	pop    eax
c001a4f8:	5a                   	pop    edx
c001a4f9:	ff 35 b4 1b 03 c0    	push   DWORD PTR ds:0xc0031bb4
c001a4ff:	53                   	push   ebx
c001a500:	e8 69 fe ff ff       	call   c001a36e <EnvVarContainer::EnvVarContainer(Process*)>
c001a505:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a508:	89 1d 98 11 03 c0    	mov    DWORD PTR ds:0xc0031198,ebx
c001a50e:	e8 3f fe ff ff       	call   c001a352 <EnvVarContainer::__loadSystem()>
c001a513:	83 c4 18             	add    esp,0x18
c001a516:	5b                   	pop    ebx
c001a517:	c3                   	ret    

c001a518 <Krnl::loadUserEnv()>:
c001a518:	53                   	push   ebx
c001a519:	83 ec 14             	sub    esp,0x14
c001a51c:	6a 0c                	push   0xc
c001a51e:	e8 1d 53 ff ff       	call   c000f840 <malloc>
c001a523:	89 c3                	mov    ebx,eax
c001a525:	58                   	pop    eax
c001a526:	5a                   	pop    edx
c001a527:	ff 35 b4 1b 03 c0    	push   DWORD PTR ds:0xc0031bb4
c001a52d:	53                   	push   ebx
c001a52e:	e8 3b fe ff ff       	call   c001a36e <EnvVarContainer::EnvVarContainer(Process*)>
c001a533:	89 1d 94 11 03 c0    	mov    DWORD PTR ds:0xc0031194,ebx
c001a539:	83 c4 18             	add    esp,0x18
c001a53c:	5b                   	pop    ebx
c001a53d:	c3                   	ret    

c001a53e <Krnl::flushEnv()>:
c001a53e:	c3                   	ret    

c001a53f <Krnl::getProcessTotalEnvCount(Process*)>:
c001a53f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a543:	8b 15 94 11 03 c0    	mov    edx,DWORD PTR ds:0xc0031194
c001a549:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a54f:	a1 98 11 03 c0       	mov    eax,ds:0xc0031198
c001a554:	8b 00                	mov    eax,DWORD PTR [eax]
c001a556:	03 01                	add    eax,DWORD PTR [ecx]
c001a558:	85 d2                	test   edx,edx
c001a55a:	74 02                	je     c001a55e <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a55c:	03 02                	add    eax,DWORD PTR [edx]
c001a55e:	c3                   	ret    

c001a55f <Krnl::getProcessEnvPair(Process*, int)>:
c001a55f:	57                   	push   edi
c001a560:	8b 0d 94 11 03 c0    	mov    ecx,DWORD PTR ds:0xc0031194
c001a566:	56                   	push   esi
c001a567:	85 c9                	test   ecx,ecx
c001a569:	53                   	push   ebx
c001a56a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a56e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a572:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a578:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a57c:	8b 02                	mov    eax,DWORD PTR [edx]
c001a57e:	75 47                	jne    c001a5c7 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a580:	39 c3                	cmp    ebx,eax
c001a582:	7c 47                	jl     c001a5cb <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a584:	8b 15 98 11 03 c0    	mov    edx,DWORD PTR ds:0xc0031198
c001a58a:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a58c:	01 c1                	add    ecx,eax
c001a58e:	39 d9                	cmp    ecx,ebx
c001a590:	7e 6c                	jle    c001a5fe <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a592:	51                   	push   ecx
c001a593:	89 d9                	mov    ecx,ebx
c001a595:	29 c1                	sub    ecx,eax
c001a597:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a59a:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a59e:	53                   	push   ebx
c001a59f:	68 38 bc 02 c0       	push   0xc002bc38
c001a5a4:	e8 c8 89 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001a5a9:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a5af:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a5b1:	a1 98 11 03 c0       	mov    eax,ds:0xc0031198
c001a5b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a5b9:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a5bd:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a5c0:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a5c3:	89 06                	mov    DWORD PTR [esi],eax
c001a5c5:	eb 51                	jmp    c001a618 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a5c7:	39 c3                	cmp    ebx,eax
c001a5c9:	7d 05                	jge    c001a5d0 <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a5cb:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a5ce:	eb 20                	jmp    c001a5f0 <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a5d0:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a5d2:	8d 14 07             	lea    edx,[edi+eax*1]
c001a5d5:	39 da                	cmp    edx,ebx
c001a5d7:	7e 04                	jle    c001a5dd <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a5d9:	29 c3                	sub    ebx,eax
c001a5db:	eb 10                	jmp    c001a5ed <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a5dd:	8b 0d 98 11 03 c0    	mov    ecx,DWORD PTR ds:0xc0031198
c001a5e3:	03 11                	add    edx,DWORD PTR [ecx]
c001a5e5:	39 da                	cmp    edx,ebx
c001a5e7:	7e 15                	jle    c001a5fe <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a5e9:	29 c3                	sub    ebx,eax
c001a5eb:	29 fb                	sub    ebx,edi
c001a5ed:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a5f0:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a5f4:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a5f7:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a5fa:	89 06                	mov    DWORD PTR [esi],eax
c001a5fc:	eb 1d                	jmp    c001a61b <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a5fe:	83 ec 0c             	sub    esp,0xc
c001a601:	68 4c bc 02 c0       	push   0xc002bc4c
c001a606:	e8 18 00 00 00       	call   c001a623 <Krnl::panic(char const*)>
c001a60b:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a611:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a618:	83 c4 10             	add    esp,0x10
c001a61b:	89 f0                	mov    eax,esi
c001a61d:	5b                   	pop    ebx
c001a61e:	5e                   	pop    esi
c001a61f:	5f                   	pop    edi
c001a620:	c2 04 00             	ret    0x4

c001a623 <Krnl::panic(char const*)>:
c001a623:	55                   	push   ebp
c001a624:	89 e5                	mov    ebp,esp
c001a626:	53                   	push   ebx
c001a627:	83 ec 0c             	sub    esp,0xc
c001a62a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a62d:	fa                   	cli    
c001a62e:	c6 05 a4 11 03 c0 01 	mov    BYTE PTR ds:0xc00311a4,0x1
c001a635:	53                   	push   ebx
c001a636:	c6 05 84 d5 02 c0 00 	mov    BYTE PTR ds:0xc002d584,0x0
c001a63d:	68 66 bc 02 c0       	push   0xc002bc66
c001a642:	e8 2a 89 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001a647:	58                   	pop    eax
c001a648:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001a64d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a653:	e8 fd 66 ff ff       	call   c0010d55 <setActiveTerminal(VgaText*)>
c001a658:	83 c4 0c             	add    esp,0xc
c001a65b:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001a660:	6a 01                	push   0x1
c001a662:	6a 0f                	push   0xf
c001a664:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a66a:	e8 17 61 ff ff       	call   c0010786 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a66f:	58                   	pop    eax
c001a670:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001a675:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a67b:	e8 76 69 ff ff       	call   c0010ff6 <VgaText::clearScreen()>
c001a680:	58                   	pop    eax
c001a681:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001a686:	5a                   	pop    edx
c001a687:	68 7f bc 02 c0       	push   0xc002bc7f
c001a68c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a692:	e8 dd 6a ff ff       	call   c0011174 <VgaText::puts(char const*)>
c001a697:	59                   	pop    ecx
c001a698:	58                   	pop    eax
c001a699:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001a69e:	68 24 bd 02 c0       	push   0xc002bd24
c001a6a3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6a9:	e8 c6 6a ff ff       	call   c0011174 <VgaText::puts(char const*)>
c001a6ae:	58                   	pop    eax
c001a6af:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001a6b4:	5a                   	pop    edx
c001a6b5:	68 9b bc 02 c0       	push   0xc002bc9b
c001a6ba:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6c0:	e8 af 6a ff ff       	call   c0011174 <VgaText::puts(char const*)>
c001a6c5:	59                   	pop    ecx
c001a6c6:	58                   	pop    eax
c001a6c7:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001a6cc:	53                   	push   ebx
c001a6cd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6d3:	e8 9c 6a ff ff       	call   c0011174 <VgaText::puts(char const*)>
c001a6d8:	58                   	pop    eax
c001a6d9:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001a6de:	5a                   	pop    edx
c001a6df:	68 bb bc 02 c0       	push   0xc002bcbb
c001a6e4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6ea:	e8 85 6a ff ff       	call   c0011174 <VgaText::puts(char const*)>
c001a6ef:	a1 a0 11 03 c0       	mov    eax,ds:0xc00311a0
c001a6f4:	83 c4 10             	add    esp,0x10
c001a6f7:	85 c0                	test   eax,eax
c001a6f9:	74 02                	je     c001a6fd <Krnl::panic(char const*)+0xda>
c001a6fb:	ff d0                	call   eax
c001a6fd:	83 ec 0c             	sub    esp,0xc
c001a700:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a703:	e8 47 30 00 00       	call   c001d74f <Thr::getDriverNameFromAddress(unsigned long)>
c001a708:	83 c4 10             	add    esp,0x10
c001a70b:	89 c3                	mov    ebx,eax
c001a70d:	85 c0                	test   eax,eax
c001a70f:	0f 84 50 02 00 00    	je     c001a965 <Krnl::panic(char const*)+0x342>
c001a715:	83 ec 08             	sub    esp,0x8
c001a718:	8b 15 b4 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031bb4
c001a71e:	68 60 bd 02 c0       	push   0xc002bd60
c001a723:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a729:	e8 46 6a ff ff       	call   c0011174 <VgaText::puts(char const*)>
c001a72e:	58                   	pop    eax
c001a72f:	5a                   	pop    edx
c001a730:	8b 15 b4 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031bb4
c001a736:	68 9b bc 02 c0       	push   0xc002bc9b
c001a73b:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a741:	e8 2e 6a ff ff       	call   c0011174 <VgaText::puts(char const*)>
c001a746:	59                   	pop    ecx
c001a747:	58                   	pop    eax
c001a748:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001a74d:	53                   	push   ebx
c001a74e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a754:	e8 1b 6a ff ff       	call   c0011174 <VgaText::puts(char const*)>
c001a759:	83 c4 10             	add    esp,0x10
c001a75c:	83 ec 08             	sub    esp,0x8
c001a75f:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001a764:	68 ba bc 02 c0       	push   0xc002bcba
c001a769:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a76f:	e8 00 6a ff ff       	call   c0011174 <VgaText::puts(char const*)>
c001a774:	58                   	pop    eax
c001a775:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001a77a:	5a                   	pop    edx
c001a77b:	68 b8 bd 02 c0       	push   0xc002bdb8
c001a780:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a786:	e8 e9 69 ff ff       	call   c0011174 <VgaText::puts(char const*)>
c001a78b:	59                   	pop    ecx
c001a78c:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001a791:	5b                   	pop    ebx
c001a792:	68 f8 bd 02 c0       	push   0xc002bdf8
c001a797:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a79d:	e8 d2 69 ff ff       	call   c0011174 <VgaText::puts(char const*)>
c001a7a2:	58                   	pop    eax
c001a7a3:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001a7a8:	5a                   	pop    edx
c001a7a9:	68 a6 bc 02 c0       	push   0xc002bca6
c001a7ae:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7b4:	e8 bb 69 ff ff       	call   c0011174 <VgaText::puts(char const*)>
c001a7b9:	59                   	pop    ecx
c001a7ba:	5b                   	pop    ebx
c001a7bb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a7be:	68 be bc 02 c0       	push   0xc002bcbe
c001a7c3:	e8 a9 87 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001a7c8:	58                   	pop    eax
c001a7c9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a7cc:	5a                   	pop    edx
c001a7cd:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a7d0:	68 c7 bc 02 c0       	push   0xc002bcc7
c001a7d5:	e8 97 87 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001a7da:	59                   	pop    ecx
c001a7db:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a7de:	5b                   	pop    ebx
c001a7df:	8b 00                	mov    eax,DWORD PTR [eax]
c001a7e1:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a7e4:	68 d0 bc 02 c0       	push   0xc002bcd0
c001a7e9:	e8 83 87 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001a7ee:	58                   	pop    eax
c001a7ef:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001a7f4:	5a                   	pop    edx
c001a7f5:	68 3c be 02 c0       	push   0xc002be3c
c001a7fa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a800:	e8 6f 69 ff ff       	call   c0011174 <VgaText::puts(char const*)>
c001a805:	59                   	pop    ecx
c001a806:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001a80b:	5b                   	pop    ebx
c001a80c:	68 d9 bc 02 c0       	push   0xc002bcd9
c001a811:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a817:	e8 58 69 ff ff       	call   c0011174 <VgaText::puts(char const*)>
c001a81c:	0f 20 c0             	mov    eax,cr0
c001a81f:	5a                   	pop    edx
c001a820:	59                   	pop    ecx
c001a821:	50                   	push   eax
c001a822:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001a827:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a82d:	e8 68 69 ff ff       	call   c001119a <VgaText::putx(unsigned int)>
c001a832:	5b                   	pop    ebx
c001a833:	58                   	pop    eax
c001a834:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001a839:	68 e3 bc 02 c0       	push   0xc002bce3
c001a83e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a844:	e8 2b 69 ff ff       	call   c0011174 <VgaText::puts(char const*)>
c001a849:	0f 20 d0             	mov    eax,cr2
c001a84c:	5a                   	pop    edx
c001a84d:	59                   	pop    ecx
c001a84e:	50                   	push   eax
c001a84f:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001a854:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a85a:	e8 3b 69 ff ff       	call   c001119a <VgaText::putx(unsigned int)>
c001a85f:	5b                   	pop    ebx
c001a860:	58                   	pop    eax
c001a861:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001a866:	68 ed bc 02 c0       	push   0xc002bced
c001a86b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a871:	e8 fe 68 ff ff       	call   c0011174 <VgaText::puts(char const*)>
c001a876:	0f 20 d8             	mov    eax,cr3
c001a879:	5a                   	pop    edx
c001a87a:	59                   	pop    ecx
c001a87b:	50                   	push   eax
c001a87c:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001a881:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a887:	e8 0e 69 ff ff       	call   c001119a <VgaText::putx(unsigned int)>
c001a88c:	5b                   	pop    ebx
c001a88d:	58                   	pop    eax
c001a88e:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001a893:	68 00 bd 02 c0       	push   0xc002bd00
c001a898:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a89e:	e8 d1 68 ff ff       	call   c0011174 <VgaText::puts(char const*)>
c001a8a3:	0f 20 e0             	mov    eax,cr4
c001a8a6:	5a                   	pop    edx
c001a8a7:	59                   	pop    ecx
c001a8a8:	50                   	push   eax
c001a8a9:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001a8ae:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8b4:	e8 e1 68 ff ff       	call   c001119a <VgaText::putx(unsigned int)>
c001a8b9:	5b                   	pop    ebx
c001a8ba:	58                   	pop    eax
c001a8bb:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001a8c0:	68 0a bd 02 c0       	push   0xc002bd0a
c001a8c5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8cb:	e8 a4 68 ff ff       	call   c0011174 <VgaText::puts(char const*)>
c001a8d0:	5a                   	pop    edx
c001a8d1:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001a8d6:	59                   	pop    ecx
c001a8d7:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a8dd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a8e0:	50                   	push   eax
c001a8e1:	e8 b4 68 ff ff       	call   c001119a <VgaText::putx(unsigned int)>
c001a8e6:	5b                   	pop    ebx
c001a8e7:	58                   	pop    eax
c001a8e8:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001a8ed:	68 21 bd 02 c0       	push   0xc002bd21
c001a8f2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8f8:	e8 77 68 ff ff       	call   c0011174 <VgaText::puts(char const*)>
c001a8fd:	5a                   	pop    edx
c001a8fe:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001a903:	59                   	pop    ecx
c001a904:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a90a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a90d:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a910:	50                   	push   eax
c001a911:	e8 84 68 ff ff       	call   c001119a <VgaText::putx(unsigned int)>
c001a916:	5b                   	pop    ebx
c001a917:	58                   	pop    eax
c001a918:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001a91d:	68 21 bd 02 c0       	push   0xc002bd21
c001a922:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a928:	e8 47 68 ff ff       	call   c0011174 <VgaText::puts(char const*)>
c001a92d:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001a932:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a935:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a93b:	8b 12                	mov    edx,DWORD PTR [edx]
c001a93d:	59                   	pop    ecx
c001a93e:	5b                   	pop    ebx
c001a93f:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a942:	50                   	push   eax
c001a943:	e8 52 68 ff ff       	call   c001119a <VgaText::putx(unsigned int)>
c001a948:	83 c4 10             	add    esp,0x10
c001a94b:	b2 fe                	mov    dl,0xfe
c001a94d:	e4 60                	in     al,0x60
c001a94f:	3c 1c                	cmp    al,0x1c
c001a951:	74 04                	je     c001a957 <Krnl::panic(char const*)+0x334>
c001a953:	3c 5a                	cmp    al,0x5a
c001a955:	75 f6                	jne    c001a94d <Krnl::panic(char const*)+0x32a>
c001a957:	e4 64                	in     al,0x64
c001a959:	a8 02                	test   al,0x2
c001a95b:	75 fa                	jne    c001a957 <Krnl::panic(char const*)+0x334>
c001a95d:	88 d0                	mov    al,dl
c001a95f:	e6 64                	out    0x64,al
c001a961:	fa                   	cli    
c001a962:	f4                   	hlt    
c001a963:	eb e8                	jmp    c001a94d <Krnl::panic(char const*)+0x32a>
c001a965:	50                   	push   eax
c001a966:	50                   	push   eax
c001a967:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001a96c:	68 8c bd 02 c0       	push   0xc002bd8c
c001a971:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a977:	e8 f8 67 ff ff       	call   c0011174 <VgaText::puts(char const*)>
c001a97c:	58                   	pop    eax
c001a97d:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001a982:	5a                   	pop    edx
c001a983:	68 9b bc 02 c0       	push   0xc002bc9b
c001a988:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a98e:	e8 e1 67 ff ff       	call   c0011174 <VgaText::puts(char const*)>
c001a993:	59                   	pop    ecx
c001a994:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a999:	5b                   	pop    ebx
c001a99a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a99d:	83 c0 0c             	add    eax,0xc
c001a9a0:	50                   	push   eax
c001a9a1:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001a9a6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9ac:	e8 c3 67 ff ff       	call   c0011174 <VgaText::puts(char const*)>
c001a9b1:	83 c4 10             	add    esp,0x10
c001a9b4:	e9 a3 fd ff ff       	jmp    c001a75c <Krnl::panic(char const*)+0x139>

c001a9b9 <Net::switchEndian16(unsigned short)>:
c001a9b9:	83 ec 04             	sub    esp,0x4
c001a9bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a9c0:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a9c4:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a9c8:	c1 f8 08             	sar    eax,0x8
c001a9cb:	89 c2                	mov    edx,eax
c001a9cd:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a9d1:	c1 e0 08             	shl    eax,0x8
c001a9d4:	09 d0                	or     eax,edx
c001a9d6:	83 c4 04             	add    esp,0x4
c001a9d9:	c3                   	ret    

c001a9da <Net::switchEndian32(unsigned int)>:
c001a9da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9de:	c1 e8 18             	shr    eax,0x18
c001a9e1:	89 c2                	mov    edx,eax
c001a9e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9e7:	c1 e0 08             	shl    eax,0x8
c001a9ea:	25 00 00 ff 00       	and    eax,0xff0000
c001a9ef:	09 c2                	or     edx,eax
c001a9f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9f5:	c1 e8 08             	shr    eax,0x8
c001a9f8:	25 00 ff 00 00       	and    eax,0xff00
c001a9fd:	09 c2                	or     edx,eax
c001a9ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa03:	c1 e0 18             	shl    eax,0x18
c001aa06:	09 d0                	or     eax,edx
c001aa08:	c3                   	ret    

c001aa09 <Net::crc32Calc(unsigned char*, int)>:
c001aa09:	83 ec 10             	sub    esp,0x10
c001aa0c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001aa11:	75 07                	jne    c001aa1a <Net::crc32Calc(unsigned char*, int)+0x11>
c001aa13:	b8 00 00 00 00       	mov    eax,0x0
c001aa18:	eb 7c                	jmp    c001aa96 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001aa1a:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001aa1f:	7f 07                	jg     c001aa28 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001aa21:	b8 00 00 00 00       	mov    eax,0x0
c001aa26:	eb 6e                	jmp    c001aa96 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001aa28:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001aa30:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001aa38:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aa3c:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001aa40:	7d 4e                	jge    c001aa90 <Net::crc32Calc(unsigned char*, int)+0x87>
c001aa42:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001aa46:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aa4a:	01 d0                	add    eax,edx
c001aa4c:	8a 00                	mov    al,BYTE PTR [eax]
c001aa4e:	0f b6 c0             	movzx  eax,al
c001aa51:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001aa55:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aa5d:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001aa62:	7f 26                	jg     c001aa8a <Net::crc32Calc(unsigned char*, int)+0x81>
c001aa64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa68:	83 e0 01             	and    eax,0x1
c001aa6b:	74 0d                	je     c001aa7a <Net::crc32Calc(unsigned char*, int)+0x71>
c001aa6d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa71:	d1 e8                	shr    eax,1
c001aa73:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001aa78:	eb 06                	jmp    c001aa80 <Net::crc32Calc(unsigned char*, int)+0x77>
c001aa7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa7e:	d1 e8                	shr    eax,1
c001aa80:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aa84:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001aa88:	eb d3                	jmp    c001aa5d <Net::crc32Calc(unsigned char*, int)+0x54>
c001aa8a:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001aa8e:	eb a8                	jmp    c001aa38 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001aa90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa94:	f7 d0                	not    eax
c001aa96:	83 c4 10             	add    esp,0x10
c001aa99:	c3                   	ret    

c001aa9a <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001aa9a:	83 ec 1c             	sub    esp,0x1c
c001aa9d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aaa1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001aaa5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aaad:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c001aab2:	7f 14                	jg     c001aac8 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001aab4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aab8:	8d 50 01             	lea    edx,[eax+0x1]
c001aabb:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aabf:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001aac2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001aac6:	eb e5                	jmp    c001aaad <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001aac8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aacc:	8d 50 01             	lea    edx,[eax+0x1]
c001aacf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aad3:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001aad6:	83 ec 04             	sub    esp,0x4
c001aad9:	6a 06                	push   0x6
c001aadb:	8d 44 24 36          	lea    eax,[esp+0x36]
c001aadf:	50                   	push   eax
c001aae0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001aae4:	e8 5b 5c fe ff       	call   c0000744 <memcpy>
c001aae9:	83 c4 10             	add    esp,0x10
c001aaec:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001aaf1:	83 ec 04             	sub    esp,0x4
c001aaf4:	6a 06                	push   0x6
c001aaf6:	8d 44 24 30          	lea    eax,[esp+0x30]
c001aafa:	50                   	push   eax
c001aafb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001aaff:	e8 40 5c fe ff       	call   c0000744 <memcpy>
c001ab04:	83 c4 10             	add    esp,0x10
c001ab07:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001ab0c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab10:	0f b7 c0             	movzx  eax,ax
c001ab13:	c1 f8 08             	sar    eax,0x8
c001ab16:	89 c1                	mov    ecx,eax
c001ab18:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab1c:	8d 50 01             	lea    edx,[eax+0x1]
c001ab1f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab23:	88 ca                	mov    dl,cl
c001ab25:	88 10                	mov    BYTE PTR [eax],dl
c001ab27:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ab2b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab2f:	8d 48 01             	lea    ecx,[eax+0x1]
c001ab32:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001ab36:	88 10                	mov    BYTE PTR [eax],dl
c001ab38:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ab3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab40:	83 ec 04             	sub    esp,0x4
c001ab43:	52                   	push   edx
c001ab44:	50                   	push   eax
c001ab45:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ab49:	e8 f6 5b fe ff       	call   c0000744 <memcpy>
c001ab4e:	83 c4 10             	add    esp,0x10
c001ab51:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ab55:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001ab59:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab5d:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001ab61:	83 ec 08             	sub    esp,0x8
c001ab64:	50                   	push   eax
c001ab65:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ab69:	e8 9b fe ff ff       	call   c001aa09 <Net::crc32Calc(unsigned char*, int)>
c001ab6e:	83 c4 10             	add    esp,0x10
c001ab71:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ab75:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab79:	c1 e8 18             	shr    eax,0x18
c001ab7c:	89 c1                	mov    ecx,eax
c001ab7e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab82:	8d 50 01             	lea    edx,[eax+0x1]
c001ab85:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab89:	88 ca                	mov    dl,cl
c001ab8b:	88 10                	mov    BYTE PTR [eax],dl
c001ab8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab91:	c1 e8 10             	shr    eax,0x10
c001ab94:	89 c1                	mov    ecx,eax
c001ab96:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab9a:	8d 50 01             	lea    edx,[eax+0x1]
c001ab9d:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aba1:	88 ca                	mov    dl,cl
c001aba3:	88 10                	mov    BYTE PTR [eax],dl
c001aba5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aba9:	c1 e8 08             	shr    eax,0x8
c001abac:	89 c1                	mov    ecx,eax
c001abae:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001abb2:	8d 50 01             	lea    edx,[eax+0x1]
c001abb5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001abb9:	88 ca                	mov    dl,cl
c001abbb:	88 10                	mov    BYTE PTR [eax],dl
c001abbd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001abc1:	8d 50 01             	lea    edx,[eax+0x1]
c001abc4:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001abc8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001abcc:	88 10                	mov    BYTE PTR [eax],dl
c001abce:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001abd2:	83 c4 1c             	add    esp,0x1c
c001abd5:	c3                   	ret    

c001abd6 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001abd6:	83 ec 2c             	sub    esp,0x2c
c001abd9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001abdd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001abe1:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001abe6:	83 ec 04             	sub    esp,0x4
c001abe9:	6a 06                	push   0x6
c001abeb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001abef:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001abf3:	83 c0 0e             	add    eax,0xe
c001abf6:	50                   	push   eax
c001abf7:	e8 48 5b fe ff       	call   c0000744 <memcpy>
c001abfc:	83 c4 10             	add    esp,0x10
c001abff:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001ac04:	83 ec 04             	sub    esp,0x4
c001ac07:	6a 06                	push   0x6
c001ac09:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ac0d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ac11:	83 c0 08             	add    eax,0x8
c001ac14:	50                   	push   eax
c001ac15:	e8 2a 5b fe ff       	call   c0000744 <memcpy>
c001ac1a:	83 c4 10             	add    esp,0x10
c001ac1d:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001ac22:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac26:	8d 50 01             	lea    edx,[eax+0x1]
c001ac29:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac2d:	8a 00                	mov    al,BYTE PTR [eax]
c001ac2f:	0f b6 c0             	movzx  eax,al
c001ac32:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001ac37:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac3b:	8d 50 01             	lea    edx,[eax+0x1]
c001ac3e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ac42:	8a 00                	mov    al,BYTE PTR [eax]
c001ac44:	0f b6 c0             	movzx  eax,al
c001ac47:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001ac4c:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001ac51:	c1 e0 08             	shl    eax,0x8
c001ac54:	89 c2                	mov    edx,eax
c001ac56:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ac5a:	09 d0                	or     eax,edx
c001ac5c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ac60:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001ac64:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001ac69:	75 3a                	jne    c001aca5 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001ac6b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac6f:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ac72:	66 3d dc 05          	cmp    ax,0x5dc
c001ac76:	77 10                	ja     c001ac88 <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001ac78:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac7c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ac7f:	0f b7 c0             	movzx  eax,ax
c001ac82:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001ac86:	eb 1d                	jmp    c001aca5 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001ac88:	83 ec 0c             	sub    esp,0xc
c001ac8b:	68 64 be 02 c0       	push   0xc002be64
c001ac90:	e8 dc 82 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001ac95:	83 c4 10             	add    esp,0x10
c001ac98:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac9c:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001aca0:	e9 c0 00 00 00       	jmp    c001ad65 <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001aca5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001aca9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001acad:	8b 00                	mov    eax,DWORD PTR [eax]
c001acaf:	83 ec 04             	sub    esp,0x4
c001acb2:	52                   	push   edx
c001acb3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001acb7:	50                   	push   eax
c001acb8:	e8 87 5a fe ff       	call   c0000744 <memcpy>
c001acbd:	83 c4 10             	add    esp,0x10
c001acc0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001acc4:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001acc8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001accc:	8d 50 01             	lea    edx,[eax+0x1]
c001accf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001acd3:	8a 00                	mov    al,BYTE PTR [eax]
c001acd5:	0f b6 c0             	movzx  eax,al
c001acd8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001acdc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ace0:	8d 50 01             	lea    edx,[eax+0x1]
c001ace3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ace7:	8a 00                	mov    al,BYTE PTR [eax]
c001ace9:	0f b6 c0             	movzx  eax,al
c001acec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001acf0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001acf4:	8d 50 01             	lea    edx,[eax+0x1]
c001acf7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001acfb:	8a 00                	mov    al,BYTE PTR [eax]
c001acfd:	0f b6 c0             	movzx  eax,al
c001ad00:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ad04:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad08:	8d 50 01             	lea    edx,[eax+0x1]
c001ad0b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ad0f:	8a 00                	mov    al,BYTE PTR [eax]
c001ad11:	0f b6 c0             	movzx  eax,al
c001ad14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ad18:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ad1c:	c1 e0 18             	shl    eax,0x18
c001ad1f:	89 c2                	mov    edx,eax
c001ad21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad25:	c1 e0 10             	shl    eax,0x10
c001ad28:	09 c2                	or     edx,eax
c001ad2a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad2e:	c1 e0 08             	shl    eax,0x8
c001ad31:	09 d0                	or     eax,edx
c001ad33:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001ad37:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ad3b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad3f:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001ad43:	83 e8 04             	sub    eax,0x4
c001ad46:	83 ec 08             	sub    esp,0x8
c001ad49:	50                   	push   eax
c001ad4a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001ad4e:	e8 b6 fc ff ff       	call   c001aa09 <Net::crc32Calc(unsigned char*, int)>
c001ad53:	83 c4 10             	add    esp,0x10
c001ad56:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001ad5a:	0f 94 c2             	sete   dl
c001ad5d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad61:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001ad64:	90                   	nop
c001ad65:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad69:	83 c4 2c             	add    esp,0x2c
c001ad6c:	c2 04 00             	ret    0x4

c001ad6f <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001ad6f:	55                   	push   ebp
c001ad70:	57                   	push   edi
c001ad71:	56                   	push   esi
c001ad72:	53                   	push   ebx
c001ad73:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ad79:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001ad80:	8a 1e                	mov    bl,BYTE PTR [esi]
c001ad82:	8d 6e 01             	lea    ebp,[esi+0x1]
c001ad85:	80 fb 40             	cmp    bl,0x40
c001ad88:	75 1b                	jne    c001ada5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001ad8a:	8a 16                	mov    dl,BYTE PTR [esi]
c001ad8c:	84 d2                	test   dl,dl
c001ad8e:	0f 84 f1 00 00 00    	je     c001ae85 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad94:	8d 46 01             	lea    eax,[esi+0x1]
c001ad97:	80 fa 3a             	cmp    dl,0x3a
c001ad9a:	74 04                	je     c001ada0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001ad9c:	89 c6                	mov    esi,eax
c001ad9e:	eb ea                	jmp    c001ad8a <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001ada0:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ada3:	89 c6                	mov    esi,eax
c001ada5:	50                   	push   eax
c001ada6:	6a 40                	push   0x40
c001ada8:	6a 00                	push   0x0
c001adaa:	8d 44 24 24          	lea    eax,[esp+0x24]
c001adae:	50                   	push   eax
c001adaf:	e8 c4 59 fe ff       	call   c0000778 <memset>
c001adb4:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001adbb:	31 c0                	xor    eax,eax
c001adbd:	83 c4 10             	add    esp,0x10
c001adc0:	8a 0f                	mov    cl,BYTE PTR [edi]
c001adc2:	84 c9                	test   cl,cl
c001adc4:	0f 84 bb 00 00 00    	je     c001ae85 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001adca:	3d c7 00 00 00       	cmp    eax,0xc7
c001adcf:	0f 8f b0 00 00 00    	jg     c001ae85 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001add5:	80 f9 0a             	cmp    cl,0xa
c001add8:	0f 85 98 00 00 00    	jne    c001ae76 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001adde:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001ade3:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001ade7:	a8 df                	test   al,0xdf
c001ade9:	0f 94 c1             	sete   cl
c001adec:	3c 23                	cmp    al,0x23
c001adee:	0f 94 c2             	sete   dl
c001adf1:	08 d1                	or     cl,dl
c001adf3:	75 4a                	jne    c001ae3f <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001adf5:	8d 50 f7             	lea    edx,[eax-0x9]
c001adf8:	80 fa 01             	cmp    dl,0x1
c001adfb:	76 42                	jbe    c001ae3f <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001adfd:	3c 5b                	cmp    al,0x5b
c001adff:	75 42                	jne    c001ae43 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001ae01:	80 fb 40             	cmp    bl,0x40
c001ae04:	75 39                	jne    c001ae3f <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae06:	83 ec 0c             	sub    esp,0xc
c001ae09:	8d 54 24 65          	lea    edx,[esp+0x65]
c001ae0d:	52                   	push   edx
c001ae0e:	e8 81 59 fe ff       	call   c0000794 <strlen>
c001ae13:	83 c4 10             	add    esp,0x10
c001ae16:	83 f8 3f             	cmp    eax,0x3f
c001ae19:	77 6a                	ja     c001ae85 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae1b:	50                   	push   eax
c001ae1c:	50                   	push   eax
c001ae1d:	8d 54 24 61          	lea    edx,[esp+0x61]
c001ae21:	52                   	push   edx
c001ae22:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ae26:	52                   	push   edx
c001ae27:	e8 08 5a fe ff       	call   c0000834 <strcpy>
c001ae2c:	58                   	pop    eax
c001ae2d:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ae31:	52                   	push   edx
c001ae32:	e8 5d 59 fe ff       	call   c0000794 <strlen>
c001ae37:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001ae3c:	83 c4 10             	add    esp,0x10
c001ae3f:	31 d2                	xor    edx,edx
c001ae41:	eb 3a                	jmp    c001ae7d <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001ae43:	80 fb 40             	cmp    bl,0x40
c001ae46:	74 06                	je     c001ae4e <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001ae48:	8d 44 24 58          	lea    eax,[esp+0x58]
c001ae4c:	eb 20                	jmp    c001ae6e <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001ae4e:	50                   	push   eax
c001ae4f:	50                   	push   eax
c001ae50:	55                   	push   ebp
c001ae51:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ae55:	50                   	push   eax
c001ae56:	e8 65 5a fe ff       	call   c00008c0 <strcmp>
c001ae5b:	83 c4 10             	add    esp,0x10
c001ae5e:	85 c0                	test   eax,eax
c001ae60:	75 dd                	jne    c001ae3f <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae62:	eb e4                	jmp    c001ae48 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001ae64:	8d 50 01             	lea    edx,[eax+0x1]
c001ae67:	80 f9 3d             	cmp    cl,0x3d
c001ae6a:	74 1d                	je     c001ae89 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001ae6c:	89 d0                	mov    eax,edx
c001ae6e:	8a 08                	mov    cl,BYTE PTR [eax]
c001ae70:	84 c9                	test   cl,cl
c001ae72:	75 f0                	jne    c001ae64 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001ae74:	eb 0f                	jmp    c001ae85 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae76:	8d 50 01             	lea    edx,[eax+0x1]
c001ae79:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001ae7d:	47                   	inc    edi
c001ae7e:	89 d0                	mov    eax,edx
c001ae80:	e9 3b ff ff ff       	jmp    c001adc0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001ae85:	31 c0                	xor    eax,eax
c001ae87:	eb 33                	jmp    c001aebc <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001ae89:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ae8d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001ae90:	50                   	push   eax
c001ae91:	50                   	push   eax
c001ae92:	8d 44 24 60          	lea    eax,[esp+0x60]
c001ae96:	50                   	push   eax
c001ae97:	56                   	push   esi
c001ae98:	e8 23 5a fe ff       	call   c00008c0 <strcmp>
c001ae9d:	83 c4 10             	add    esp,0x10
c001aea0:	85 c0                	test   eax,eax
c001aea2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001aea6:	75 97                	jne    c001ae3f <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001aea8:	51                   	push   ecx
c001aea9:	51                   	push   ecx
c001aeaa:	52                   	push   edx
c001aeab:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001aeb2:	e8 7d 59 fe ff       	call   c0000834 <strcpy>
c001aeb7:	83 c4 10             	add    esp,0x10
c001aeba:	b0 01                	mov    al,0x1
c001aebc:	81 c4 2c 01 00 00    	add    esp,0x12c
c001aec2:	5b                   	pop    ebx
c001aec3:	5e                   	pop    esi
c001aec4:	5f                   	pop    edi
c001aec5:	5d                   	pop    ebp
c001aec6:	c3                   	ret    

c001aec7 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001aec7:	57                   	push   edi
c001aec8:	56                   	push   esi
c001aec9:	53                   	push   ebx
c001aeca:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001aed0:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001aed7:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001aede:	53                   	push   ebx
c001aedf:	e8 b0 58 fe ff       	call   c0000794 <strlen>
c001aee4:	89 34 24             	mov    DWORD PTR [esp],esi
c001aee7:	89 c7                	mov    edi,eax
c001aee9:	e8 a6 58 fe ff       	call   c0000794 <strlen>
c001aeee:	83 c4 10             	add    esp,0x10
c001aef1:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001aef5:	3d ff 00 00 00       	cmp    eax,0xff
c001aefa:	0f 87 d3 00 00 00    	ja     c001afd3 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001af00:	57                   	push   edi
c001af01:	57                   	push   edi
c001af02:	56                   	push   esi
c001af03:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001af07:	56                   	push   esi
c001af08:	e8 27 59 fe ff       	call   c0000834 <strcpy>
c001af0d:	58                   	pop    eax
c001af0e:	5a                   	pop    edx
c001af0f:	68 2d c4 02 c0       	push   0xc002c42d
c001af14:	56                   	push   esi
c001af15:	e8 5a 5a fe ff       	call   c0000974 <strcat>
c001af1a:	59                   	pop    ecx
c001af1b:	5f                   	pop    edi
c001af1c:	53                   	push   ebx
c001af1d:	56                   	push   esi
c001af1e:	e8 51 5a fe ff       	call   c0000974 <strcat>
c001af23:	58                   	pop    eax
c001af24:	5a                   	pop    edx
c001af25:	68 b0 be 02 c0       	push   0xc002beb0
c001af2a:	56                   	push   esi
c001af2b:	e8 44 5a fe ff       	call   c0000974 <strcat>
c001af30:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001af37:	e8 04 49 ff ff       	call   c000f840 <malloc>
c001af3c:	83 c4 0c             	add    esp,0xc
c001af3f:	89 c3                	mov    ebx,eax
c001af41:	ff 35 b4 1b 03 c0    	push   DWORD PTR ds:0xc0031bb4
c001af47:	56                   	push   esi
c001af48:	50                   	push   eax
c001af49:	e8 7c 85 ff ff       	call   c00134ca <File::File(char const*, Process*)>
c001af4e:	83 c4 10             	add    esp,0x10
c001af51:	85 db                	test   ebx,ebx
c001af53:	74 7e                	je     c001afd3 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001af55:	51                   	push   ecx
c001af56:	51                   	push   ecx
c001af57:	6a 01                	push   0x1
c001af59:	53                   	push   ebx
c001af5a:	e8 cf 85 ff ff       	call   c001352e <File::open(FileOpenMode)>
c001af5f:	83 c4 10             	add    esp,0x10
c001af62:	85 c0                	test   eax,eax
c001af64:	74 08                	je     c001af6e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001af66:	83 ec 0c             	sub    esp,0xc
c001af69:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af6b:	53                   	push   ebx
c001af6c:	eb 5f                	jmp    c001afcd <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001af6e:	52                   	push   edx
c001af6f:	8d 44 24 17          	lea    eax,[esp+0x17]
c001af73:	50                   	push   eax
c001af74:	8d 44 24 20          	lea    eax,[esp+0x20]
c001af78:	50                   	push   eax
c001af79:	53                   	push   ebx
c001af7a:	e8 5b 88 ff ff       	call   c00137da <File::stat(unsigned long long*, bool*)>
c001af7f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001af83:	83 c4 10             	add    esp,0x10
c001af86:	89 c1                	mov    ecx,eax
c001af88:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001af8c:	74 31                	je     c001afbf <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001af8e:	83 ec 0c             	sub    esp,0xc
c001af91:	50                   	push   eax
c001af92:	e8 a9 48 ff ff       	call   c000f840 <malloc>
c001af97:	89 c6                	mov    esi,eax
c001af99:	58                   	pop    eax
c001af9a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af9c:	8d 54 24 20          	lea    edx,[esp+0x20]
c001afa0:	52                   	push   edx
c001afa1:	56                   	push   esi
c001afa2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001afa6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001afaa:	53                   	push   ebx
c001afab:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001afae:	83 c4 20             	add    esp,0x20
c001afb1:	85 c0                	test   eax,eax
c001afb3:	75 0a                	jne    c001afbf <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001afb5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001afb9:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001afbd:	74 18                	je     c001afd7 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001afbf:	83 ec 0c             	sub    esp,0xc
c001afc2:	53                   	push   ebx
c001afc3:	e8 c4 85 ff ff       	call   c001358c <File::close()>
c001afc8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001afca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001afcd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001afd0:	83 c4 10             	add    esp,0x10
c001afd3:	31 c0                	xor    eax,eax
c001afd5:	eb 3b                	jmp    c001b012 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001afd7:	83 ec 0c             	sub    esp,0xc
c001afda:	53                   	push   ebx
c001afdb:	e8 ac 85 ff ff       	call   c001358c <File::close()>
c001afe0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001afe2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001afe5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001afe8:	83 c4 0c             	add    esp,0xc
c001afeb:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001aff2:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001aff9:	56                   	push   esi
c001affa:	e8 70 fd ff ff       	call   c001ad6f <Reg::findLineFromLoadedData(char*, char*, char*)>
c001afff:	89 34 24             	mov    DWORD PTR [esp],esi
c001b002:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b006:	e8 45 48 ff ff       	call   c000f850 <free>
c001b00b:	83 c4 10             	add    esp,0x10
c001b00e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b012:	81 c4 20 01 00 00    	add    esp,0x120
c001b018:	5b                   	pop    ebx
c001b019:	5e                   	pop    esi
c001b01a:	5f                   	pop    edi
c001b01b:	c3                   	ret    

c001b01c <Reg::getLine(char*, char*, char*)>:
c001b01c:	57                   	push   edi
c001b01d:	56                   	push   esi
c001b01e:	53                   	push   ebx
c001b01f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b023:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b027:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b02b:	57                   	push   edi
c001b02c:	56                   	push   esi
c001b02d:	53                   	push   ebx
c001b02e:	68 b5 be 02 c0       	push   0xc002beb5
c001b033:	e8 8f fe ff ff       	call   c001aec7 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b038:	83 c4 10             	add    esp,0x10
c001b03b:	84 c0                	test   al,al
c001b03d:	75 10                	jne    c001b04f <Reg::getLine(char*, char*, char*)+0x33>
c001b03f:	57                   	push   edi
c001b040:	56                   	push   esi
c001b041:	53                   	push   ebx
c001b042:	68 da be 02 c0       	push   0xc002beda
c001b047:	e8 7b fe ff ff       	call   c001aec7 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b04c:	83 c4 10             	add    esp,0x10
c001b04f:	5b                   	pop    ebx
c001b050:	5e                   	pop    esi
c001b051:	5f                   	pop    edi
c001b052:	c3                   	ret    

c001b053 <Reg::readInt(char*, char*, int*)>:
c001b053:	55                   	push   ebp
c001b054:	57                   	push   edi
c001b055:	56                   	push   esi
c001b056:	53                   	push   ebx
c001b057:	81 ec f0 00 00 00    	sub    esp,0xf0
c001b05d:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b061:	57                   	push   edi
c001b062:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b069:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b070:	e8 a7 ff ff ff       	call   c001b01c <Reg::getLine(char*, char*, char*)>
c001b075:	83 c4 10             	add    esp,0x10
c001b078:	84 c0                	test   al,al
c001b07a:	0f 84 b3 00 00 00    	je     c001b133 <Reg::readInt(char*, char*, int*)+0xe0>
c001b080:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001b084:	80 fa 2b             	cmp    dl,0x2b
c001b087:	74 0c                	je     c001b095 <Reg::readInt(char*, char*, int*)+0x42>
c001b089:	80 fa 2d             	cmp    dl,0x2d
c001b08c:	75 0e                	jne    c001b09c <Reg::readInt(char*, char*, int*)+0x49>
c001b08e:	ba 01 00 00 00       	mov    edx,0x1
c001b093:	eb 0b                	jmp    c001b0a0 <Reg::readInt(char*, char*, int*)+0x4d>
c001b095:	ba 01 00 00 00       	mov    edx,0x1
c001b09a:	eb 02                	jmp    c001b09e <Reg::readInt(char*, char*, int*)+0x4b>
c001b09c:	31 d2                	xor    edx,edx
c001b09e:	31 c0                	xor    eax,eax
c001b0a0:	be 0a 00 00 00       	mov    esi,0xa
c001b0a5:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001b0aa:	75 20                	jne    c001b0cc <Reg::readInt(char*, char*, int*)+0x79>
c001b0ac:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001b0b0:	80 f9 78             	cmp    cl,0x78
c001b0b3:	75 0a                	jne    c001b0bf <Reg::readInt(char*, char*, int*)+0x6c>
c001b0b5:	83 c2 02             	add    edx,0x2
c001b0b8:	be 10 00 00 00       	mov    esi,0x10
c001b0bd:	eb 0d                	jmp    c001b0cc <Reg::readInt(char*, char*, int*)+0x79>
c001b0bf:	80 f9 62             	cmp    cl,0x62
c001b0c2:	75 08                	jne    c001b0cc <Reg::readInt(char*, char*, int*)+0x79>
c001b0c4:	83 c2 02             	add    edx,0x2
c001b0c7:	be 02 00 00 00       	mov    esi,0x2
c001b0cc:	01 d7                	add    edi,edx
c001b0ce:	31 d2                	xor    edx,edx
c001b0d0:	8a 1f                	mov    bl,BYTE PTR [edi]
c001b0d2:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001b0d6:	80 fb 0d             	cmp    bl,0xd
c001b0d9:	0f 94 c3             	sete   bl
c001b0dc:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b0e1:	0f 94 c1             	sete   cl
c001b0e4:	08 cb                	or     bl,cl
c001b0e6:	75 3a                	jne    c001b122 <Reg::readInt(char*, char*, int*)+0xcf>
c001b0e8:	0f af d6             	imul   edx,esi
c001b0eb:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001b0f0:	83 fe 10             	cmp    esi,0x10
c001b0f3:	75 26                	jne    c001b11b <Reg::readInt(char*, char*, int*)+0xc8>
c001b0f5:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b0f9:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001b0fc:	89 e9                	mov    ecx,ebp
c001b0fe:	80 f9 05             	cmp    cl,0x5
c001b101:	77 06                	ja     c001b109 <Reg::readInt(char*, char*, int*)+0xb6>
c001b103:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b107:	eb 16                	jmp    c001b11f <Reg::readInt(char*, char*, int*)+0xcc>
c001b109:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b10d:	83 e9 61             	sub    ecx,0x61
c001b110:	80 f9 05             	cmp    cl,0x5
c001b113:	77 06                	ja     c001b11b <Reg::readInt(char*, char*, int*)+0xc8>
c001b115:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b119:	eb 04                	jmp    c001b11f <Reg::readInt(char*, char*, int*)+0xcc>
c001b11b:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b11f:	47                   	inc    edi
c001b120:	eb ae                	jmp    c001b0d0 <Reg::readInt(char*, char*, int*)+0x7d>
c001b122:	84 c0                	test   al,al
c001b124:	74 02                	je     c001b128 <Reg::readInt(char*, char*, int*)+0xd5>
c001b126:	f7 da                	neg    edx
c001b128:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b12f:	89 10                	mov    DWORD PTR [eax],edx
c001b131:	88 d8                	mov    al,bl
c001b133:	81 c4 ec 00 00 00    	add    esp,0xec
c001b139:	5b                   	pop    ebx
c001b13a:	5e                   	pop    esi
c001b13b:	5f                   	pop    edi
c001b13c:	5d                   	pop    ebp
c001b13d:	c3                   	ret    

c001b13e <Reg::readString(char*, char*, char*, int)>:
c001b13e:	57                   	push   edi
c001b13f:	56                   	push   esi
c001b140:	53                   	push   ebx
c001b141:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b147:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b14e:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b152:	57                   	push   edi
c001b153:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b15a:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b161:	e8 b6 fe ff ff       	call   c001b01c <Reg::getLine(char*, char*, char*)>
c001b166:	83 c4 10             	add    esp,0x10
c001b169:	89 c6                	mov    esi,eax
c001b16b:	84 c0                	test   al,al
c001b16d:	74 44                	je     c001b1b3 <Reg::readString(char*, char*, char*, int)+0x75>
c001b16f:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b176:	31 c0                	xor    eax,eax
c001b178:	4a                   	dec    edx
c001b179:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b17c:	84 c9                	test   cl,cl
c001b17e:	74 0f                	je     c001b18f <Reg::readString(char*, char*, char*, int)+0x51>
c001b180:	39 c2                	cmp    edx,eax
c001b182:	7e 0b                	jle    c001b18f <Reg::readString(char*, char*, char*, int)+0x51>
c001b184:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b187:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b18c:	40                   	inc    eax
c001b18d:	eb ea                	jmp    c001b179 <Reg::readString(char*, char*, char*, int)+0x3b>
c001b18f:	83 ec 0c             	sub    esp,0xc
c001b192:	53                   	push   ebx
c001b193:	e8 fc 55 fe ff       	call   c0000794 <strlen>
c001b198:	83 c4 10             	add    esp,0x10
c001b19b:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b1a0:	75 11                	jne    c001b1b3 <Reg::readString(char*, char*, char*, int)+0x75>
c001b1a2:	83 ec 0c             	sub    esp,0xc
c001b1a5:	53                   	push   ebx
c001b1a6:	e8 e9 55 fe ff       	call   c0000794 <strlen>
c001b1ab:	83 c4 10             	add    esp,0x10
c001b1ae:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b1b3:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b1b9:	89 f0                	mov    eax,esi
c001b1bb:	5b                   	pop    ebx
c001b1bc:	5e                   	pop    esi
c001b1bd:	5f                   	pop    edi
c001b1be:	c3                   	ret    

c001b1bf <Reg::readBool(char*, char*, bool*)>:
c001b1bf:	83 ec 20             	sub    esp,0x20
c001b1c2:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b1c6:	50                   	push   eax
c001b1c7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1cb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1cf:	e8 7f fe ff ff       	call   c001b053 <Reg::readInt(char*, char*, int*)>
c001b1d4:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b1d9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b1dd:	0f 95 02             	setne  BYTE PTR [edx]
c001b1e0:	83 c4 2c             	add    esp,0x2c
c001b1e3:	c3                   	ret    

c001b1e4 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b1e4:	53                   	push   ebx
c001b1e5:	83 ec 1c             	sub    esp,0x1c
c001b1e8:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b1ec:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b1f0:	50                   	push   eax
c001b1f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1f5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1f9:	e8 c1 ff ff ff       	call   c001b1bf <Reg::readBool(char*, char*, bool*)>
c001b1fe:	83 c4 10             	add    esp,0x10
c001b201:	84 c0                	test   al,al
c001b203:	74 04                	je     c001b209 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b205:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b209:	88 d8                	mov    al,bl
c001b20b:	83 c4 18             	add    esp,0x18
c001b20e:	5b                   	pop    ebx
c001b20f:	c3                   	ret    

c001b210 <Reg::readIntWithDefault(char*, char*, int)>:
c001b210:	53                   	push   ebx
c001b211:	83 ec 1c             	sub    esp,0x1c
c001b214:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b218:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b21c:	50                   	push   eax
c001b21d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b221:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b225:	e8 29 fe ff ff       	call   c001b053 <Reg::readInt(char*, char*, int*)>
c001b22a:	83 c4 10             	add    esp,0x10
c001b22d:	84 c0                	test   al,al
c001b22f:	74 04                	je     c001b235 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b231:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b235:	89 d8                	mov    eax,ebx
c001b237:	83 c4 18             	add    esp,0x18
c001b23a:	5b                   	pop    ebx
c001b23b:	c3                   	ret    

c001b23c <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b23c:	57                   	push   edi
c001b23d:	56                   	push   esi
c001b23e:	53                   	push   ebx
c001b23f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b243:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b247:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b24b:	56                   	push   esi
c001b24c:	53                   	push   ebx
c001b24d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b255:	e8 e4 fe ff ff       	call   c001b13e <Reg::readString(char*, char*, char*, int)>
c001b25a:	83 c4 10             	add    esp,0x10
c001b25d:	84 c0                	test   al,al
c001b25f:	75 1b                	jne    c001b27c <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001b261:	50                   	push   eax
c001b262:	56                   	push   esi
c001b263:	4e                   	dec    esi
c001b264:	6a 00                	push   0x0
c001b266:	53                   	push   ebx
c001b267:	e8 0c 55 fe ff       	call   c0000778 <memset>
c001b26c:	83 c4 0c             	add    esp,0xc
c001b26f:	56                   	push   esi
c001b270:	57                   	push   edi
c001b271:	53                   	push   ebx
c001b272:	89 fb                	mov    ebx,edi
c001b274:	e8 cb 54 fe ff       	call   c0000744 <memcpy>
c001b279:	83 c4 10             	add    esp,0x10
c001b27c:	89 d8                	mov    eax,ebx
c001b27e:	5b                   	pop    ebx
c001b27f:	5e                   	pop    esi
c001b280:	5f                   	pop    edi
c001b281:	c3                   	ret    

c001b282 <Sys::eject(regs*)>:
c001b282:	83 ec 0c             	sub    esp,0xc
c001b285:	83 ca ff             	or     edx,0xffffffff
c001b288:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b28c:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b28f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b294:	83 e9 41             	sub    ecx,0x41
c001b297:	83 f9 19             	cmp    ecx,0x19
c001b29a:	77 18                	ja     c001b2b4 <Sys::eject(regs*)+0x32>
c001b29c:	8b 0c 8d 60 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd13a0]
c001b2a3:	85 c9                	test   ecx,ecx
c001b2a5:	74 0d                	je     c001b2b4 <Sys::eject(regs*)+0x32>
c001b2a7:	83 ec 0c             	sub    esp,0xc
c001b2aa:	51                   	push   ecx
c001b2ab:	e8 78 b4 ff ff       	call   c0016728 <LogicalDisk::eject()>
c001b2b0:	83 c4 10             	add    esp,0x10
c001b2b3:	99                   	cdq    
c001b2b4:	83 c4 0c             	add    esp,0xc
c001b2b7:	c3                   	ret    

c001b2b8 <Sys::exit(regs*)>:
c001b2b8:	83 ec 18             	sub    esp,0x18
c001b2bb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b2bf:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b2c2:	e8 c4 35 00 00       	call   c001e88b <terminateTask(int)>
c001b2c7:	83 c8 ff             	or     eax,0xffffffff
c001b2ca:	83 c4 1c             	add    esp,0x1c
c001b2cd:	89 c2                	mov    edx,eax
c001b2cf:	c3                   	ret    

c001b2d0 <Sys::getCwd(regs*)>:
c001b2d0:	83 ec 10             	sub    esp,0x10
c001b2d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b2d7:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b2da:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b2dd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b2e2:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b2e5:	e8 e2 7f ff ff       	call   c00132cc <Fs::getcwd(Process*, char*, int)>
c001b2ea:	83 c4 1c             	add    esp,0x1c
c001b2ed:	99                   	cdq    
c001b2ee:	c3                   	ret    

c001b2ef <Sys::getPID(regs*)>:
c001b2ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b2f4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b2f7:	8b 00                	mov    eax,DWORD PTR [eax]
c001b2f9:	99                   	cdq    
c001b2fa:	c3                   	ret    

c001b2fb <Sys::getRAMData(regs*)>:
c001b2fb:	8b 0d 94 e6 02 c0    	mov    ecx,DWORD PTR ds:0xc002e694
c001b301:	6b 05 90 e6 02 c0 64 	imul   eax,DWORD PTR ds:0xc002e690,0x64
c001b308:	99                   	cdq    
c001b309:	f7 f9                	idiv   ecx
c001b30b:	c1 e0 18             	shl    eax,0x18
c001b30e:	09 c8                	or     eax,ecx
c001b310:	99                   	cdq    
c001b311:	c3                   	ret    

c001b312 <Sys::loadDLL(regs*)>:
c001b312:	56                   	push   esi
c001b313:	53                   	push   ebx
c001b314:	31 d2                	xor    edx,edx
c001b316:	51                   	push   ecx
c001b317:	b8 01 00 00 00       	mov    eax,0x1
c001b31c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b320:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b324:	0f 84 8c 00 00 00    	je     c001b3b6 <Sys::loadDLL(regs*)+0xa4>
c001b32a:	83 ec 0c             	sub    esp,0xc
c001b32d:	68 14 01 00 00       	push   0x114
c001b332:	e8 09 45 ff ff       	call   c000f840 <malloc>
c001b337:	83 c4 0c             	add    esp,0xc
c001b33a:	89 c3                	mov    ebx,eax
c001b33c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b341:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b344:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b347:	53                   	push   ebx
c001b348:	e8 7d 81 ff ff       	call   c00134ca <File::File(char const*, Process*)>
c001b34d:	83 c4 10             	add    esp,0x10
c001b350:	31 d2                	xor    edx,edx
c001b352:	b8 02 00 00 00       	mov    eax,0x2
c001b357:	85 db                	test   ebx,ebx
c001b359:	74 5b                	je     c001b3b6 <Sys::loadDLL(regs*)+0xa4>
c001b35b:	83 ec 0c             	sub    esp,0xc
c001b35e:	53                   	push   ebx
c001b35f:	e8 38 84 ff ff       	call   c001379c <File::exists()>
c001b364:	83 c4 10             	add    esp,0x10
c001b367:	84 c0                	test   al,al
c001b369:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b36b:	75 11                	jne    c001b37e <Sys::loadDLL(regs*)+0x6c>
c001b36d:	83 ec 0c             	sub    esp,0xc
c001b370:	53                   	push   ebx
c001b371:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b374:	83 c4 10             	add    esp,0x10
c001b377:	b8 03 00 00 00       	mov    eax,0x3
c001b37c:	eb 36                	jmp    c001b3b4 <Sys::loadDLL(regs*)+0xa2>
c001b37e:	83 ec 0c             	sub    esp,0xc
c001b381:	53                   	push   ebx
c001b382:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b385:	58                   	pop    eax
c001b386:	5a                   	pop    edx
c001b387:	6a 00                	push   0x0
c001b389:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b38c:	e8 0f 24 00 00       	call   c001d7a0 <Thr::loadDLL(char const*, bool)>
c001b391:	83 c4 10             	add    esp,0x10
c001b394:	89 c1                	mov    ecx,eax
c001b396:	31 d2                	xor    edx,edx
c001b398:	b8 04 00 00 00       	mov    eax,0x4
c001b39d:	85 c9                	test   ecx,ecx
c001b39f:	74 15                	je     c001b3b6 <Sys::loadDLL(regs*)+0xa4>
c001b3a1:	53                   	push   ebx
c001b3a2:	53                   	push   ebx
c001b3a3:	ff 35 48 e6 02 c0    	push   DWORD PTR ds:0xc002e648
c001b3a9:	51                   	push   ecx
c001b3aa:	e8 25 26 00 00       	call   c001d9d4 <Thr::executeDLL(unsigned long, void*)>
c001b3af:	83 c4 10             	add    esp,0x10
c001b3b2:	31 c0                	xor    eax,eax
c001b3b4:	31 d2                	xor    edx,edx
c001b3b6:	59                   	pop    ecx
c001b3b7:	5b                   	pop    ebx
c001b3b8:	5e                   	pop    esi
c001b3b9:	c3                   	ret    

c001b3ba <Sys::read(regs*)>:
c001b3ba:	57                   	push   edi
c001b3bb:	56                   	push   esi
c001b3bc:	53                   	push   ebx
c001b3bd:	83 ec 10             	sub    esp,0x10
c001b3c0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b3c4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b3c7:	83 f8 02             	cmp    eax,0x2
c001b3ca:	77 10                	ja     c001b3dc <Sys::read(regs*)+0x22>
c001b3cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b3d1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b3d4:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b3da:	eb 0e                	jmp    c001b3ea <Sys::read(regs*)+0x30>
c001b3dc:	83 ec 0c             	sub    esp,0xc
c001b3df:	50                   	push   eax
c001b3e0:	e8 68 66 ff ff       	call   c0011a4d <getFromFileDescriptor(int)>
c001b3e5:	83 c4 10             	add    esp,0x10
c001b3e8:	89 c1                	mov    ecx,eax
c001b3ea:	83 c8 ff             	or     eax,0xffffffff
c001b3ed:	85 c9                	test   ecx,ecx
c001b3ef:	89 c2                	mov    edx,eax
c001b3f1:	74 28                	je     c001b41b <Sys::read(regs*)+0x61>
c001b3f3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b3fb:	31 ff                	xor    edi,edi
c001b3fd:	83 ec 0c             	sub    esp,0xc
c001b400:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b402:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b406:	52                   	push   edx
c001b407:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b40a:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b40d:	57                   	push   edi
c001b40e:	56                   	push   esi
c001b40f:	51                   	push   ecx
c001b410:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b413:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b417:	83 c4 20             	add    esp,0x20
c001b41a:	99                   	cdq    
c001b41b:	83 c4 10             	add    esp,0x10
c001b41e:	5b                   	pop    ebx
c001b41f:	5e                   	pop    esi
c001b420:	5f                   	pop    edi
c001b421:	c3                   	ret    

c001b422 <Sys::sbrk(regs*)>:
c001b422:	56                   	push   esi
c001b423:	53                   	push   ebx
c001b424:	83 ec 0c             	sub    esp,0xc
c001b427:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b42b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b430:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b433:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001b439:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c001b43c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b43f:	68 f5 be 02 c0       	push   0xc002bef5
c001b444:	e8 28 7b ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001b449:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b44c:	83 c4 10             	add    esp,0x10
c001b44f:	85 c0                	test   eax,eax
c001b451:	75 0a                	jne    c001b45d <Sys::sbrk(regs*)+0x3b>
c001b453:	50                   	push   eax
c001b454:	50                   	push   eax
c001b455:	53                   	push   ebx
c001b456:	68 11 bf 02 c0       	push   0xc002bf11
c001b45b:	eb 54                	jmp    c001b4b1 <Sys::sbrk(regs*)+0x8f>
c001b45d:	79 0a                	jns    c001b469 <Sys::sbrk(regs*)+0x47>
c001b45f:	56                   	push   esi
c001b460:	56                   	push   esi
c001b461:	53                   	push   ebx
c001b462:	68 24 bf 02 c0       	push   0xc002bf24
c001b467:	eb 48                	jmp    c001b4b1 <Sys::sbrk(regs*)+0x8f>
c001b469:	3d 00 00 00 04       	cmp    eax,0x4000000
c001b46e:	76 17                	jbe    c001b487 <Sys::sbrk(regs*)+0x65>
c001b470:	51                   	push   ecx
c001b471:	51                   	push   ecx
c001b472:	53                   	push   ebx
c001b473:	68 36 bf 02 c0       	push   0xc002bf36
c001b478:	e8 f4 7a ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001b47d:	83 c8 ff             	or     eax,0xffffffff
c001b480:	83 c4 10             	add    esp,0x10
c001b483:	89 c2                	mov    edx,eax
c001b485:	eb 36                	jmp    c001b4bd <Sys::sbrk(regs*)+0x9b>
c001b487:	05 ff 0f 00 00       	add    eax,0xfff
c001b48c:	56                   	push   esi
c001b48d:	c1 e8 0c             	shr    eax,0xc
c001b490:	68 07 04 00 00       	push   0x407
c001b495:	50                   	push   eax
c001b496:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b49b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b49e:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001b4a4:	e8 d1 6f ff ff       	call   c001247a <VAS::allocatePages(int, int)>
c001b4a9:	58                   	pop    eax
c001b4aa:	5a                   	pop    edx
c001b4ab:	53                   	push   ebx
c001b4ac:	68 4f bf 02 c0       	push   0xc002bf4f
c001b4b1:	e8 bb 7a ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001b4b6:	89 d8                	mov    eax,ebx
c001b4b8:	31 d2                	xor    edx,edx
c001b4ba:	83 c4 10             	add    esp,0x10
c001b4bd:	59                   	pop    ecx
c001b4be:	5b                   	pop    ebx
c001b4bf:	5e                   	pop    esi
c001b4c0:	c3                   	ret    

c001b4c1 <Sys::setCwd(regs*)>:
c001b4c1:	83 ec 14             	sub    esp,0x14
c001b4c4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b4c8:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b4cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b4d0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b4d3:	e8 63 83 ff ff       	call   c001383b <Fs::setcwd(Process*, char*)>
c001b4d8:	83 c4 1c             	add    esp,0x1c
c001b4db:	99                   	cdq    
c001b4dc:	c3                   	ret    

c001b4dd <Sys::setTime(regs*)>:
c001b4dd:	55                   	push   ebp
c001b4de:	31 d2                	xor    edx,edx
c001b4e0:	57                   	push   edi
c001b4e1:	bf 18 00 00 00       	mov    edi,0x18
c001b4e6:	56                   	push   esi
c001b4e7:	53                   	push   ebx
c001b4e8:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b4ed:	83 ec 30             	sub    esp,0x30
c001b4f0:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b4f4:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b4f7:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b4fa:	f7 f3                	div    ebx
c001b4fc:	89 d6                	mov    esi,edx
c001b4fe:	31 d2                	xor    edx,edx
c001b500:	f7 f3                	div    ebx
c001b502:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b505:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b509:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b50e:	31 d2                	xor    edx,edx
c001b510:	f7 f3                	div    ebx
c001b512:	31 d2                	xor    edx,edx
c001b514:	bb 0c 00 00 00       	mov    ebx,0xc
c001b519:	f7 f7                	div    edi
c001b51b:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b51e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b522:	0f b7 cd             	movzx  ecx,bp
c001b525:	56                   	push   esi
c001b526:	89 c7                	mov    edi,eax
c001b528:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b52c:	c1 e6 10             	shl    esi,0x10
c001b52f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b533:	83 e7 1f             	and    edi,0x1f
c001b536:	51                   	push   ecx
c001b537:	47                   	inc    edi
c001b538:	c1 e8 05             	shr    eax,0x5
c001b53b:	31 d2                	xor    edx,edx
c001b53d:	f7 f3                	div    ebx
c001b53f:	31 db                	xor    ebx,ebx
c001b541:	52                   	push   edx
c001b542:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b546:	57                   	push   edi
c001b547:	68 75 bf 02 c0       	push   0xc002bf75
c001b54c:	e8 20 7a ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001b551:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b555:	89 f8                	mov    eax,edi
c001b557:	31 c9                	xor    ecx,ecx
c001b559:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b55d:	88 c1                	mov    cl,al
c001b55f:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b565:	88 d5                	mov    ch,dl
c001b567:	c1 e0 10             	shl    eax,0x10
c001b56a:	0f b7 d1             	movzx  edx,cx
c001b56d:	09 c2                	or     edx,eax
c001b56f:	89 d8                	mov    eax,ebx
c001b571:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b576:	09 f0                	or     eax,esi
c001b578:	89 c3                	mov    ebx,eax
c001b57a:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b57e:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b582:	83 c4 18             	add    esp,0x18
c001b585:	53                   	push   ebx
c001b586:	52                   	push   edx
c001b587:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b58b:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b58f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b593:	e8 bd 89 ff ff       	call   c0013f55 <datetimeToSeconds(datetime_t)>
c001b598:	83 c4 0c             	add    esp,0xc
c001b59b:	52                   	push   edx
c001b59c:	50                   	push   eax
c001b59d:	56                   	push   esi
c001b59e:	e8 39 8b ff ff       	call   c00140dc <secondsToDatetime(unsigned long long)>
c001b5a3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b5a7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b5ab:	51                   	push   ecx
c001b5ac:	89 d6                	mov    esi,edx
c001b5ae:	51                   	push   ecx
c001b5af:	c1 ee 10             	shr    esi,0x10
c001b5b2:	89 f3                	mov    ebx,esi
c001b5b4:	0f b6 f3             	movzx  esi,bl
c001b5b7:	56                   	push   esi
c001b5b8:	0f b6 f6             	movzx  esi,dh
c001b5bb:	0f b6 d2             	movzx  edx,dl
c001b5be:	56                   	push   esi
c001b5bf:	52                   	push   edx
c001b5c0:	89 c2                	mov    edx,eax
c001b5c2:	c1 ea 10             	shr    edx,0x10
c001b5c5:	52                   	push   edx
c001b5c6:	0f b6 d4             	movzx  edx,ah
c001b5c9:	0f b6 c0             	movzx  eax,al
c001b5cc:	52                   	push   edx
c001b5cd:	50                   	push   eax
c001b5ce:	68 91 bf 02 c0       	push   0xc002bf91
c001b5d3:	e8 99 79 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001b5d8:	83 c4 2c             	add    esp,0x2c
c001b5db:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c001b5e0:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b5e4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b5e8:	53                   	push   ebx
c001b5e9:	51                   	push   ecx
c001b5ea:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b5f0:	e8 87 8a ff ff       	call   c001407c <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b5f5:	83 f0 01             	xor    eax,0x1
c001b5f8:	31 d2                	xor    edx,edx
c001b5fa:	0f b6 c0             	movzx  eax,al
c001b5fd:	83 c4 3c             	add    esp,0x3c
c001b600:	5b                   	pop    ebx
c001b601:	5e                   	pop    esi
c001b602:	5f                   	pop    edi
c001b603:	5d                   	pop    ebp
c001b604:	c3                   	ret    

c001b605 <Sys::timezone(regs*)>:
c001b605:	53                   	push   ebx
c001b606:	83 ec 08             	sub    esp,0x8
c001b609:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b60d:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b611:	75 17                	jne    c001b62a <Sys::timezone(regs*)+0x25>
c001b613:	83 ec 0c             	sub    esp,0xc
c001b616:	68 ad bf 02 c0       	push   0xc002bfad
c001b61b:	e8 51 79 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001b620:	83 c8 ff             	or     eax,0xffffffff
c001b623:	83 c4 10             	add    esp,0x10
c001b626:	89 c2                	mov    edx,eax
c001b628:	eb 20                	jmp    c001b64a <Sys::timezone(regs*)+0x45>
c001b62a:	83 ec 0c             	sub    esp,0xc
c001b62d:	68 e5 bf 02 c0       	push   0xc002bfe5
c001b632:	e8 3a 79 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001b637:	58                   	pop    eax
c001b638:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b63b:	e8 9e 87 ff ff       	call   c0013dde <User::loadClockSettings(int)>
c001b640:	83 c4 10             	add    esp,0x10
c001b643:	b8 01 00 00 00       	mov    eax,0x1
c001b648:	31 d2                	xor    edx,edx
c001b64a:	83 c4 08             	add    esp,0x8
c001b64d:	5b                   	pop    ebx
c001b64e:	c3                   	ret    

c001b64f <Sys::write(regs*)>:
c001b64f:	57                   	push   edi
c001b650:	56                   	push   esi
c001b651:	53                   	push   ebx
c001b652:	83 ec 10             	sub    esp,0x10
c001b655:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b659:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b65c:	83 f8 02             	cmp    eax,0x2
c001b65f:	77 10                	ja     c001b671 <Sys::write(regs*)+0x22>
c001b661:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b666:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b669:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b66f:	eb 0e                	jmp    c001b67f <Sys::write(regs*)+0x30>
c001b671:	83 ec 0c             	sub    esp,0xc
c001b674:	50                   	push   eax
c001b675:	e8 d3 63 ff ff       	call   c0011a4d <getFromFileDescriptor(int)>
c001b67a:	83 c4 10             	add    esp,0x10
c001b67d:	89 c1                	mov    ecx,eax
c001b67f:	83 c8 ff             	or     eax,0xffffffff
c001b682:	85 c9                	test   ecx,ecx
c001b684:	89 c2                	mov    edx,eax
c001b686:	74 28                	je     c001b6b0 <Sys::write(regs*)+0x61>
c001b688:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b690:	31 ff                	xor    edi,edi
c001b692:	83 ec 0c             	sub    esp,0xc
c001b695:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b697:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b69b:	52                   	push   edx
c001b69c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b69f:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b6a2:	57                   	push   edi
c001b6a3:	56                   	push   esi
c001b6a4:	51                   	push   ecx
c001b6a5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b6a8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b6ac:	83 c4 20             	add    esp,0x20
c001b6af:	99                   	cdq    
c001b6b0:	83 c4 10             	add    esp,0x10
c001b6b3:	5b                   	pop    ebx
c001b6b4:	5e                   	pop    esi
c001b6b5:	5f                   	pop    edi
c001b6b6:	c3                   	ret    

c001b6b7 <Sys::wsbe(regs*)>:
c001b6b7:	57                   	push   edi
c001b6b8:	b9 0b 00 00 00       	mov    ecx,0xb
c001b6bd:	56                   	push   esi
c001b6be:	be 24 c0 02 c0       	mov    esi,0xc002c024
c001b6c3:	53                   	push   ebx
c001b6c4:	83 ec 30             	sub    esp,0x30
c001b6c7:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b6cb:	fc                   	cld    
c001b6cc:	83 ec 0c             	sub    esp,0xc
c001b6cf:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b6d1:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b6d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b6da:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b6dd:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b6e3:	8b 06                	mov    eax,DWORD PTR [esi]
c001b6e5:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b6e8:	57                   	push   edi
c001b6e9:	e8 a6 50 fe ff       	call   c0000794 <strlen>
c001b6ee:	5a                   	pop    edx
c001b6ef:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b6f3:	52                   	push   edx
c001b6f4:	31 d2                	xor    edx,edx
c001b6f6:	57                   	push   edi
c001b6f7:	52                   	push   edx
c001b6f8:	50                   	push   eax
c001b6f9:	56                   	push   esi
c001b6fa:	ff d3                	call   ebx
c001b6fc:	83 c4 14             	add    esp,0x14
c001b6ff:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b703:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b706:	e8 80 31 00 00       	call   c001e88b <terminateTask(int)>
c001b70b:	83 c4 40             	add    esp,0x40
c001b70e:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b713:	5b                   	pop    ebx
c001b714:	31 d2                	xor    edx,edx
c001b716:	5e                   	pop    esi
c001b717:	5f                   	pop    edi
c001b718:	c3                   	ret    

c001b719 <Sys::yield(regs*)>:
c001b719:	57                   	push   edi
c001b71a:	56                   	push   esi
c001b71b:	53                   	push   ebx
c001b71c:	e8 27 27 00 00       	call   c001de48 <lockScheduler()>
c001b721:	e8 5e 2a 00 00       	call   c001e184 <schedule()>
c001b726:	e8 1f 27 00 00       	call   c001de4a <unlockScheduler()>
c001b72b:	8b 35 d0 ec 02 c0    	mov    esi,DWORD PTR ds:0xc002ecd0
c001b731:	8b 3d d4 ec 02 c0    	mov    edi,DWORD PTR ds:0xc002ecd4
c001b737:	89 f0                	mov    eax,esi
c001b739:	89 fb                	mov    ebx,edi
c001b73b:	89 f1                	mov    ecx,esi
c001b73d:	c1 e0 07             	shl    eax,0x7
c001b740:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b744:	25 80 30 0f 00       	and    eax,0xf3080
c001b749:	c1 eb 17             	shr    ebx,0x17
c001b74c:	31 c8                	xor    eax,ecx
c001b74e:	89 da                	mov    edx,ebx
c001b750:	5b                   	pop    ebx
c001b751:	5e                   	pop    esi
c001b752:	5f                   	pop    edi
c001b753:	c3                   	ret    

c001b754 <sysCallSeekDir(regs*)>:
c001b754:	31 c0                	xor    eax,eax
c001b756:	31 d2                	xor    edx,edx
c001b758:	c3                   	ret    

c001b759 <sysCallTellDir(regs*)>:
c001b759:	31 c0                	xor    eax,eax
c001b75b:	31 d2                	xor    edx,edx
c001b75d:	c3                   	ret    

c001b75e <sysCallVerify(regs*)>:
c001b75e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b762:	31 d2                	xor    edx,edx
c001b764:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b767:	c3                   	ret    

c001b768 <sysFormatDisk(regs*)>:
c001b768:	56                   	push   esi
c001b769:	53                   	push   ebx
c001b76a:	53                   	push   ebx
c001b76b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b76f:	8b 1d cc e7 02 c0    	mov    ebx,DWORD PTR ds:0xc002e7cc
c001b775:	eb 25                	jmp    c001b79c <sysFormatDisk(regs*)+0x34>
c001b777:	83 ec 0c             	sub    esp,0xc
c001b77a:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b77d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b77f:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b782:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b785:	50                   	push   eax
c001b786:	ff 34 85 60 ec 02 c0 	push   DWORD PTR [eax*4-0x3ffd13a0]
c001b78d:	53                   	push   ebx
c001b78e:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b791:	83 c4 20             	add    esp,0x20
c001b794:	83 f8 08             	cmp    eax,0x8
c001b797:	75 12                	jne    c001b7ab <sysFormatDisk(regs*)+0x43>
c001b799:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b79c:	85 db                	test   ebx,ebx
c001b79e:	75 d7                	jne    c001b777 <sysFormatDisk(regs*)+0xf>
c001b7a0:	59                   	pop    ecx
c001b7a1:	b8 03 00 00 00       	mov    eax,0x3
c001b7a6:	31 d2                	xor    edx,edx
c001b7a8:	5b                   	pop    ebx
c001b7a9:	5e                   	pop    esi
c001b7aa:	c3                   	ret    
c001b7ab:	85 c0                	test   eax,eax
c001b7ad:	74 1b                	je     c001b7ca <sysFormatDisk(regs*)+0x62>
c001b7af:	83 f8 09             	cmp    eax,0x9
c001b7b2:	74 0b                	je     c001b7bf <sysFormatDisk(regs*)+0x57>
c001b7b4:	59                   	pop    ecx
c001b7b5:	b8 02 00 00 00       	mov    eax,0x2
c001b7ba:	31 d2                	xor    edx,edx
c001b7bc:	5b                   	pop    ebx
c001b7bd:	5e                   	pop    esi
c001b7be:	c3                   	ret    
c001b7bf:	59                   	pop    ecx
c001b7c0:	b8 01 00 00 00       	mov    eax,0x1
c001b7c5:	31 d2                	xor    edx,edx
c001b7c7:	5b                   	pop    ebx
c001b7c8:	5e                   	pop    esi
c001b7c9:	c3                   	ret    
c001b7ca:	59                   	pop    ecx
c001b7cb:	31 c0                	xor    eax,eax
c001b7cd:	31 d2                	xor    edx,edx
c001b7cf:	5b                   	pop    ebx
c001b7d0:	5e                   	pop    esi
c001b7d1:	c3                   	ret    

c001b7d2 <sysSetDiskVolumeLabel(regs*)>:
c001b7d2:	56                   	push   esi
c001b7d3:	53                   	push   ebx
c001b7d4:	53                   	push   ebx
c001b7d5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b7d9:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b7dc:	83 f8 19             	cmp    eax,0x19
c001b7df:	77 29                	ja     c001b80a <sysSetDiskVolumeLabel(regs*)+0x38>
c001b7e1:	8b 0c 85 60 ec 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd13a0]
c001b7e8:	85 c9                	test   ecx,ecx
c001b7ea:	74 1e                	je     c001b80a <sysSetDiskVolumeLabel(regs*)+0x38>
c001b7ec:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b7ef:	85 d2                	test   edx,edx
c001b7f1:	74 17                	je     c001b80a <sysSetDiskVolumeLabel(regs*)+0x38>
c001b7f3:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b7f9:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b7fb:	52                   	push   edx
c001b7fc:	50                   	push   eax
c001b7fd:	51                   	push   ecx
c001b7fe:	53                   	push   ebx
c001b7ff:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b802:	83 c4 10             	add    esp,0x10
c001b805:	99                   	cdq    
c001b806:	59                   	pop    ecx
c001b807:	5b                   	pop    ebx
c001b808:	5e                   	pop    esi
c001b809:	c3                   	ret    
c001b80a:	59                   	pop    ecx
c001b80b:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b810:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b815:	5b                   	pop    ebx
c001b816:	5e                   	pop    esi
c001b817:	c3                   	ret    

c001b818 <sysGetDiskVolumeLabel(regs*)>:
c001b818:	57                   	push   edi
c001b819:	56                   	push   esi
c001b81a:	53                   	push   ebx
c001b81b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b81f:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b822:	83 fa 19             	cmp    edx,0x19
c001b825:	77 34                	ja     c001b85b <sysGetDiskVolumeLabel(regs*)+0x43>
c001b827:	8b 0c 95 60 ec 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd13a0]
c001b82e:	85 c9                	test   ecx,ecx
c001b830:	74 29                	je     c001b85b <sysGetDiskVolumeLabel(regs*)+0x43>
c001b832:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b835:	85 db                	test   ebx,ebx
c001b837:	74 22                	je     c001b85b <sysGetDiskVolumeLabel(regs*)+0x43>
c001b839:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b83c:	85 c0                	test   eax,eax
c001b83e:	74 1b                	je     c001b85b <sysGetDiskVolumeLabel(regs*)+0x43>
c001b840:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b846:	83 ec 0c             	sub    esp,0xc
c001b849:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b84b:	50                   	push   eax
c001b84c:	53                   	push   ebx
c001b84d:	52                   	push   edx
c001b84e:	51                   	push   ecx
c001b84f:	56                   	push   esi
c001b850:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b853:	83 c4 20             	add    esp,0x20
c001b856:	99                   	cdq    
c001b857:	5b                   	pop    ebx
c001b858:	5e                   	pop    esi
c001b859:	5f                   	pop    edi
c001b85a:	c3                   	ret    
c001b85b:	5b                   	pop    ebx
c001b85c:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b861:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b866:	5e                   	pop    esi
c001b867:	5f                   	pop    edi
c001b868:	c3                   	ret    

c001b869 <sysShutdown(regs*)>:
c001b869:	83 ec 0c             	sub    esp,0xc
c001b86c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b870:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b873:	85 c0                	test   eax,eax
c001b875:	74 18                	je     c001b88f <sysShutdown(regs*)+0x26>
c001b877:	83 f8 01             	cmp    eax,0x1
c001b87a:	74 38                	je     c001b8b4 <sysShutdown(regs*)+0x4b>
c001b87c:	83 f8 02             	cmp    eax,0x2
c001b87f:	74 24                	je     c001b8a5 <sysShutdown(regs*)+0x3c>
c001b881:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b886:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b88b:	83 c4 0c             	add    esp,0xc
c001b88e:	c3                   	ret    
c001b88f:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c001b894:	8b 10                	mov    edx,DWORD PTR [eax]
c001b896:	6a 00                	push   0x0
c001b898:	6a 00                	push   0x0
c001b89a:	6a 00                	push   0x0
c001b89c:	50                   	push   eax
c001b89d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b8a0:	83 c4 10             	add    esp,0x10
c001b8a3:	eb dc                	jmp    c001b881 <sysShutdown(regs*)+0x18>
c001b8a5:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c001b8aa:	8b 10                	mov    edx,DWORD PTR [eax]
c001b8ac:	6a 00                	push   0x0
c001b8ae:	6a 00                	push   0x0
c001b8b0:	6a 01                	push   0x1
c001b8b2:	eb e8                	jmp    c001b89c <sysShutdown(regs*)+0x33>
c001b8b4:	a1 00 0d 03 c0       	mov    eax,ds:0xc0030d00
c001b8b9:	85 c0                	test   eax,eax
c001b8bb:	74 02                	je     c001b8bf <sysShutdown(regs*)+0x56>
c001b8bd:	ff d0                	call   eax
c001b8bf:	31 c0                	xor    eax,eax
c001b8c1:	31 d2                	xor    edx,edx
c001b8c3:	83 c4 0c             	add    esp,0xc
c001b8c6:	c3                   	ret    

c001b8c7 <sysCallRealpath(regs*)>:
c001b8c7:	83 ec 0c             	sub    esp,0xc
c001b8ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8ce:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b8d1:	85 d2                	test   edx,edx
c001b8d3:	74 07                	je     c001b8dc <sysCallRealpath(regs*)+0x15>
c001b8d5:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b8d8:	85 c0                	test   eax,eax
c001b8da:	75 0b                	jne    c001b8e7 <sysCallRealpath(regs*)+0x20>
c001b8dc:	b8 01 00 00 00       	mov    eax,0x1
c001b8e1:	31 d2                	xor    edx,edx
c001b8e3:	83 c4 0c             	add    esp,0xc
c001b8e6:	c3                   	ret    
c001b8e7:	51                   	push   ecx
c001b8e8:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b8ee:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b8f1:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b8f7:	51                   	push   ecx
c001b8f8:	52                   	push   edx
c001b8f9:	50                   	push   eax
c001b8fa:	e8 21 7a ff ff       	call   c0013320 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b8ff:	83 c4 10             	add    esp,0x10
c001b902:	31 c0                	xor    eax,eax
c001b904:	31 d2                	xor    edx,edx
c001b906:	83 c4 0c             	add    esp,0xc
c001b909:	c3                   	ret    

c001b90a <sysCallGetArgc(regs*)>:
c001b90a:	83 ec 14             	sub    esp,0x14
c001b90d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b912:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b915:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001b91b:	68 50 c0 02 c0       	push   0xc002c050
c001b920:	e8 4c 76 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001b925:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b92a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b92d:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b933:	83 c4 1c             	add    esp,0x1c
c001b936:	99                   	cdq    
c001b937:	c3                   	ret    

c001b938 <sysCallReadDir(regs*)>:
c001b938:	53                   	push   ebx
c001b939:	83 ec 18             	sub    esp,0x18
c001b93c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b940:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b943:	83 f8 02             	cmp    eax,0x2
c001b946:	76 53                	jbe    c001b99b <sysCallReadDir(regs*)+0x63>
c001b948:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b94b:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b951:	77 4f                	ja     c001b9a2 <sysCallReadDir(regs*)+0x6a>
c001b953:	83 ec 0c             	sub    esp,0xc
c001b956:	50                   	push   eax
c001b957:	e8 f1 60 ff ff       	call   c0011a4d <getFromFileDescriptor(int)>
c001b95c:	83 c4 10             	add    esp,0x10
c001b95f:	85 c0                	test   eax,eax
c001b961:	74 50                	je     c001b9b3 <sysCallReadDir(regs*)+0x7b>
c001b963:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b96b:	83 ec 0c             	sub    esp,0xc
c001b96e:	8b 10                	mov    edx,DWORD PTR [eax]
c001b970:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b974:	51                   	push   ecx
c001b975:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b978:	6a 00                	push   0x0
c001b97a:	68 10 01 00 00       	push   0x110
c001b97f:	50                   	push   eax
c001b980:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b983:	83 c4 20             	add    esp,0x20
c001b986:	85 c0                	test   eax,eax
c001b988:	74 38                	je     c001b9c2 <sysCallReadDir(regs*)+0x8a>
c001b98a:	83 f8 07             	cmp    eax,0x7
c001b98d:	74 0c                	je     c001b99b <sysCallReadDir(regs*)+0x63>
c001b98f:	b8 02 00 00 00       	mov    eax,0x2
c001b994:	31 d2                	xor    edx,edx
c001b996:	83 c4 18             	add    esp,0x18
c001b999:	5b                   	pop    ebx
c001b99a:	c3                   	ret    
c001b99b:	b8 01 00 00 00       	mov    eax,0x1
c001b9a0:	eb f2                	jmp    c001b994 <sysCallReadDir(regs*)+0x5c>
c001b9a2:	83 ec 08             	sub    esp,0x8
c001b9a5:	52                   	push   edx
c001b9a6:	68 68 c1 02 c0       	push   0xc002c168
c001b9ab:	e8 c1 75 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001b9b0:	83 c4 10             	add    esp,0x10
c001b9b3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b9b8:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b9bd:	83 c4 18             	add    esp,0x18
c001b9c0:	5b                   	pop    ebx
c001b9c1:	c3                   	ret    
c001b9c2:	31 c0                	xor    eax,eax
c001b9c4:	eb ce                	jmp    c001b994 <sysCallReadDir(regs*)+0x5c>

c001b9c6 <sysCallIsATTY(regs*)>:
c001b9c6:	83 ec 0c             	sub    esp,0xc
c001b9c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9cd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b9d0:	83 f8 02             	cmp    eax,0x2
c001b9d3:	76 07                	jbe    c001b9dc <sysCallIsATTY(regs*)+0x16>
c001b9d5:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b9da:	75 26                	jne    c001ba02 <sysCallIsATTY(regs*)+0x3c>
c001b9dc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9e1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b9e4:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b9ea:	85 c0                	test   eax,eax
c001b9ec:	74 24                	je     c001ba12 <sysCallIsATTY(regs*)+0x4c>
c001b9ee:	83 ec 0c             	sub    esp,0xc
c001b9f1:	8b 10                	mov    edx,DWORD PTR [eax]
c001b9f3:	50                   	push   eax
c001b9f4:	ff 12                	call   DWORD PTR [edx]
c001b9f6:	31 d2                	xor    edx,edx
c001b9f8:	0f b6 c0             	movzx  eax,al
c001b9fb:	83 c4 10             	add    esp,0x10
c001b9fe:	83 c4 0c             	add    esp,0xc
c001ba01:	c3                   	ret    
c001ba02:	83 ec 0c             	sub    esp,0xc
c001ba05:	50                   	push   eax
c001ba06:	e8 42 60 ff ff       	call   c0011a4d <getFromFileDescriptor(int)>
c001ba0b:	83 c4 10             	add    esp,0x10
c001ba0e:	85 c0                	test   eax,eax
c001ba10:	75 dc                	jne    c001b9ee <sysCallIsATTY(regs*)+0x28>
c001ba12:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba17:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba1c:	83 c4 0c             	add    esp,0xc
c001ba1f:	c3                   	ret    

c001ba20 <sysCallSeek(regs*)>:
c001ba20:	53                   	push   ebx
c001ba21:	83 ec 08             	sub    esp,0x8
c001ba24:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ba28:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ba2b:	83 f8 02             	cmp    eax,0x2
c001ba2e:	76 4a                	jbe    c001ba7a <sysCallSeek(regs*)+0x5a>
c001ba30:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ba35:	77 32                	ja     c001ba69 <sysCallSeek(regs*)+0x49>
c001ba37:	83 ec 0c             	sub    esp,0xc
c001ba3a:	50                   	push   eax
c001ba3b:	e8 0d 60 ff ff       	call   c0011a4d <getFromFileDescriptor(int)>
c001ba40:	83 c4 0c             	add    esp,0xc
c001ba43:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001ba46:	31 db                	xor    ebx,ebx
c001ba48:	53                   	push   ebx
c001ba49:	51                   	push   ecx
c001ba4a:	50                   	push   eax
c001ba4b:	e8 9c 7b ff ff       	call   c00135ec <File::seek(unsigned long long)>
c001ba50:	83 c4 10             	add    esp,0x10
c001ba53:	85 c0                	test   eax,eax
c001ba55:	0f 95 c0             	setne  al
c001ba58:	31 d2                	xor    edx,edx
c001ba5a:	0f b6 c0             	movzx  eax,al
c001ba5d:	f7 d8                	neg    eax
c001ba5f:	83 d2 00             	adc    edx,0x0
c001ba62:	83 c4 08             	add    esp,0x8
c001ba65:	f7 da                	neg    edx
c001ba67:	5b                   	pop    ebx
c001ba68:	c3                   	ret    
c001ba69:	83 ec 08             	sub    esp,0x8
c001ba6c:	50                   	push   eax
c001ba6d:	68 5b c0 02 c0       	push   0xc002c05b
c001ba72:	e8 fa 74 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001ba77:	83 c4 10             	add    esp,0x10
c001ba7a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba7f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba84:	83 c4 08             	add    esp,0x8
c001ba87:	5b                   	pop    ebx
c001ba88:	c3                   	ret    

c001ba89 <sysCallTell(regs*)>:
c001ba89:	53                   	push   ebx
c001ba8a:	83 ec 08             	sub    esp,0x8
c001ba8d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ba91:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ba94:	83 f8 02             	cmp    eax,0x2
c001ba97:	76 5e                	jbe    c001baf7 <sysCallTell(regs*)+0x6e>
c001ba99:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ba9e:	77 2d                	ja     c001bacd <sysCallTell(regs*)+0x44>
c001baa0:	83 ec 0c             	sub    esp,0xc
c001baa3:	50                   	push   eax
c001baa4:	e8 a4 5f ff ff       	call   c0011a4d <getFromFileDescriptor(int)>
c001baa9:	5a                   	pop    edx
c001baaa:	59                   	pop    ecx
c001baab:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001baae:	50                   	push   eax
c001baaf:	e8 8e 7b ff ff       	call   c0013642 <File::tell(unsigned long long*)>
c001bab4:	83 c4 10             	add    esp,0x10
c001bab7:	85 c0                	test   eax,eax
c001bab9:	0f 95 c0             	setne  al
c001babc:	31 d2                	xor    edx,edx
c001babe:	0f b6 c0             	movzx  eax,al
c001bac1:	f7 d8                	neg    eax
c001bac3:	83 d2 00             	adc    edx,0x0
c001bac6:	83 c4 08             	add    esp,0x8
c001bac9:	f7 da                	neg    edx
c001bacb:	5b                   	pop    ebx
c001bacc:	c3                   	ret    
c001bacd:	83 ec 08             	sub    esp,0x8
c001bad0:	50                   	push   eax
c001bad1:	68 75 c0 02 c0       	push   0xc002c075
c001bad6:	e8 96 74 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001badb:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bade:	83 c4 10             	add    esp,0x10
c001bae1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bae7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001baee:	31 d2                	xor    edx,edx
c001baf0:	31 c0                	xor    eax,eax
c001baf2:	83 c4 08             	add    esp,0x8
c001baf5:	5b                   	pop    ebx
c001baf6:	c3                   	ret    
c001baf7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bafc:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb01:	83 c4 08             	add    esp,0x8
c001bb04:	5b                   	pop    ebx
c001bb05:	c3                   	ret    

c001bb06 <sysCallSize(regs*)>:
c001bb06:	53                   	push   ebx
c001bb07:	83 ec 18             	sub    esp,0x18
c001bb0a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bb0e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bb11:	83 f8 02             	cmp    eax,0x2
c001bb14:	76 64                	jbe    c001bb7a <sysCallSize(regs*)+0x74>
c001bb16:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bb1b:	77 33                	ja     c001bb50 <sysCallSize(regs*)+0x4a>
c001bb1d:	83 ec 0c             	sub    esp,0xc
c001bb20:	50                   	push   eax
c001bb21:	e8 27 5f ff ff       	call   c0011a4d <getFromFileDescriptor(int)>
c001bb26:	83 c4 0c             	add    esp,0xc
c001bb29:	8d 54 24 13          	lea    edx,[esp+0x13]
c001bb2d:	52                   	push   edx
c001bb2e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bb31:	50                   	push   eax
c001bb32:	e8 a3 7c ff ff       	call   c00137da <File::stat(unsigned long long*, bool*)>
c001bb37:	83 c4 10             	add    esp,0x10
c001bb3a:	85 c0                	test   eax,eax
c001bb3c:	0f 95 c0             	setne  al
c001bb3f:	31 d2                	xor    edx,edx
c001bb41:	0f b6 c0             	movzx  eax,al
c001bb44:	f7 d8                	neg    eax
c001bb46:	83 d2 00             	adc    edx,0x0
c001bb49:	83 c4 18             	add    esp,0x18
c001bb4c:	f7 da                	neg    edx
c001bb4e:	5b                   	pop    ebx
c001bb4f:	c3                   	ret    
c001bb50:	83 ec 08             	sub    esp,0x8
c001bb53:	50                   	push   eax
c001bb54:	68 8f c0 02 c0       	push   0xc002c08f
c001bb59:	e8 13 74 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001bb5e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bb61:	83 c4 10             	add    esp,0x10
c001bb64:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bb6a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bb71:	31 d2                	xor    edx,edx
c001bb73:	31 c0                	xor    eax,eax
c001bb75:	83 c4 18             	add    esp,0x18
c001bb78:	5b                   	pop    ebx
c001bb79:	c3                   	ret    
c001bb7a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb7f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb84:	83 c4 18             	add    esp,0x18
c001bb87:	5b                   	pop    ebx
c001bb88:	c3                   	ret    

c001bb89 <sysCallSizeFromFilename(regs*)>:
c001bb89:	57                   	push   edi
c001bb8a:	56                   	push   esi
c001bb8b:	53                   	push   ebx
c001bb8c:	83 ec 20             	sub    esp,0x20
c001bb8f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bb93:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001bb96:	83 fb 02             	cmp    ebx,0x2
c001bb99:	0f 86 99 00 00 00    	jbe    c001bc38 <sysCallSizeFromFilename(regs*)+0xaf>
c001bb9f:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001bba5:	77 65                	ja     c001bc0c <sysCallSizeFromFilename(regs*)+0x83>
c001bba7:	83 ec 0c             	sub    esp,0xc
c001bbaa:	68 14 01 00 00       	push   0x114
c001bbaf:	e8 8c 3c ff ff       	call   c000f840 <malloc>
c001bbb4:	83 c4 0c             	add    esp,0xc
c001bbb7:	89 c6                	mov    esi,eax
c001bbb9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bbbe:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bbc1:	53                   	push   ebx
c001bbc2:	56                   	push   esi
c001bbc3:	e8 02 79 ff ff       	call   c00134ca <File::File(char const*, Process*)>
c001bbc8:	83 c4 0c             	add    esp,0xc
c001bbcb:	8d 44 24 23          	lea    eax,[esp+0x23]
c001bbcf:	50                   	push   eax
c001bbd0:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001bbd3:	56                   	push   esi
c001bbd4:	e8 01 7c ff ff       	call   c00137da <File::stat(unsigned long long*, bool*)>
c001bbd9:	83 c4 10             	add    esp,0x10
c001bbdc:	85 f6                	test   esi,esi
c001bbde:	74 14                	je     c001bbf4 <sysCallSizeFromFilename(regs*)+0x6b>
c001bbe0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bbe4:	8b 16                	mov    edx,DWORD PTR [esi]
c001bbe6:	83 ec 0c             	sub    esp,0xc
c001bbe9:	56                   	push   esi
c001bbea:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bbed:	83 c4 10             	add    esp,0x10
c001bbf0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bbf4:	85 c0                	test   eax,eax
c001bbf6:	0f 95 c0             	setne  al
c001bbf9:	31 d2                	xor    edx,edx
c001bbfb:	0f b6 c0             	movzx  eax,al
c001bbfe:	f7 d8                	neg    eax
c001bc00:	83 d2 00             	adc    edx,0x0
c001bc03:	83 c4 20             	add    esp,0x20
c001bc06:	f7 da                	neg    edx
c001bc08:	5b                   	pop    ebx
c001bc09:	5e                   	pop    esi
c001bc0a:	5f                   	pop    edi
c001bc0b:	c3                   	ret    
c001bc0c:	83 ec 08             	sub    esp,0x8
c001bc0f:	53                   	push   ebx
c001bc10:	68 8f c0 02 c0       	push   0xc002c08f
c001bc15:	e8 57 73 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001bc1a:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001bc1d:	83 c4 10             	add    esp,0x10
c001bc20:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bc26:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bc2d:	31 d2                	xor    edx,edx
c001bc2f:	83 c4 20             	add    esp,0x20
c001bc32:	31 c0                	xor    eax,eax
c001bc34:	5b                   	pop    ebx
c001bc35:	5e                   	pop    esi
c001bc36:	5f                   	pop    edi
c001bc37:	c3                   	ret    
c001bc38:	83 c4 20             	add    esp,0x20
c001bc3b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc40:	5b                   	pop    ebx
c001bc41:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc46:	5e                   	pop    esi
c001bc47:	5f                   	pop    edi
c001bc48:	c3                   	ret    

c001bc49 <sysCallClose(regs*)>:
c001bc49:	53                   	push   ebx
c001bc4a:	83 ec 08             	sub    esp,0x8
c001bc4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc51:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bc54:	83 f8 02             	cmp    eax,0x2
c001bc57:	76 50                	jbe    c001bca9 <sysCallClose(regs*)+0x60>
c001bc59:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bc5e:	74 58                	je     c001bcb8 <sysCallClose(regs*)+0x6f>
c001bc60:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bc65:	74 60                	je     c001bcc7 <sysCallClose(regs*)+0x7e>
c001bc67:	77 2f                	ja     c001bc98 <sysCallClose(regs*)+0x4f>
c001bc69:	83 ec 0c             	sub    esp,0xc
c001bc6c:	50                   	push   eax
c001bc6d:	e8 db 5d ff ff       	call   c0011a4d <getFromFileDescriptor(int)>
c001bc72:	89 c3                	mov    ebx,eax
c001bc74:	89 04 24             	mov    DWORD PTR [esp],eax
c001bc77:	e8 10 79 ff ff       	call   c001358c <File::close()>
c001bc7c:	83 c4 10             	add    esp,0x10
c001bc7f:	85 db                	test   ebx,ebx
c001bc81:	74 0c                	je     c001bc8f <sysCallClose(regs*)+0x46>
c001bc83:	83 ec 0c             	sub    esp,0xc
c001bc86:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bc88:	53                   	push   ebx
c001bc89:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bc8c:	83 c4 10             	add    esp,0x10
c001bc8f:	31 c0                	xor    eax,eax
c001bc91:	31 d2                	xor    edx,edx
c001bc93:	83 c4 08             	add    esp,0x8
c001bc96:	5b                   	pop    ebx
c001bc97:	c3                   	ret    
c001bc98:	83 ec 08             	sub    esp,0x8
c001bc9b:	50                   	push   eax
c001bc9c:	68 8c c1 02 c0       	push   0xc002c18c
c001bca1:	e8 cb 72 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001bca6:	83 c4 10             	add    esp,0x10
c001bca9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bcae:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bcb3:	83 c4 08             	add    esp,0x8
c001bcb6:	5b                   	pop    ebx
c001bcb7:	c3                   	ret    
c001bcb8:	83 ec 0c             	sub    esp,0xc
c001bcbb:	68 aa c0 02 c0       	push   0xc002c0aa
c001bcc0:	e8 ac 72 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001bcc5:	eb c5                	jmp    c001bc8c <sysCallClose(regs*)+0x43>
c001bcc7:	83 ec 0c             	sub    esp,0xc
c001bcca:	68 b8 c0 02 c0       	push   0xc002c0b8
c001bccf:	eb ef                	jmp    c001bcc0 <sysCallClose(regs*)+0x77>

c001bcd1 <sysCallOpenDir(regs*)>:
c001bcd1:	56                   	push   esi
c001bcd2:	53                   	push   ebx
c001bcd3:	53                   	push   ebx
c001bcd4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bcd8:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bcdb:	85 f6                	test   esi,esi
c001bcdd:	74 59                	je     c001bd38 <sysCallOpenDir(regs*)+0x67>
c001bcdf:	83 ec 0c             	sub    esp,0xc
c001bce2:	68 14 01 00 00       	push   0x114
c001bce7:	e8 54 3b ff ff       	call   c000f840 <malloc>
c001bcec:	83 c4 0c             	add    esp,0xc
c001bcef:	89 c6                	mov    esi,eax
c001bcf1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bcf6:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bcf9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bcfc:	56                   	push   esi
c001bcfd:	e8 74 7c ff ff       	call   c0013976 <Directory::Directory(char const*, Process*)>
c001bd02:	83 c4 10             	add    esp,0x10
c001bd05:	85 f6                	test   esi,esi
c001bd07:	74 2f                	je     c001bd38 <sysCallOpenDir(regs*)+0x67>
c001bd09:	83 ec 0c             	sub    esp,0xc
c001bd0c:	56                   	push   esi
c001bd0d:	e8 c8 7c ff ff       	call   c00139da <Directory::open()>
c001bd12:	83 c4 10             	add    esp,0x10
c001bd15:	85 c0                	test   eax,eax
c001bd17:	75 1f                	jne    c001bd38 <sysCallOpenDir(regs*)+0x67>
c001bd19:	83 ec 0c             	sub    esp,0xc
c001bd1c:	56                   	push   esi
c001bd1d:	e8 36 5a ff ff       	call   c0011758 <UnixFile::getFileDescriptor()>
c001bd22:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bd25:	83 c4 10             	add    esp,0x10
c001bd28:	89 02                	mov    DWORD PTR [edx],eax
c001bd2a:	c1 f8 1f             	sar    eax,0x1f
c001bd2d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bd30:	31 c0                	xor    eax,eax
c001bd32:	59                   	pop    ecx
c001bd33:	31 d2                	xor    edx,edx
c001bd35:	5b                   	pop    ebx
c001bd36:	5e                   	pop    esi
c001bd37:	c3                   	ret    
c001bd38:	59                   	pop    ecx
c001bd39:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd3e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd43:	5b                   	pop    ebx
c001bd44:	5e                   	pop    esi
c001bd45:	c3                   	ret    

c001bd46 <sysCallCloseDir(regs*)>:
c001bd46:	53                   	push   ebx
c001bd47:	83 ec 08             	sub    esp,0x8
c001bd4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd4e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bd51:	83 f8 02             	cmp    eax,0x2
c001bd54:	76 47                	jbe    c001bd9d <sysCallCloseDir(regs*)+0x57>
c001bd56:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bd5b:	77 2f                	ja     c001bd8c <sysCallCloseDir(regs*)+0x46>
c001bd5d:	83 ec 0c             	sub    esp,0xc
c001bd60:	50                   	push   eax
c001bd61:	e8 e7 5c ff ff       	call   c0011a4d <getFromFileDescriptor(int)>
c001bd66:	89 c3                	mov    ebx,eax
c001bd68:	89 04 24             	mov    DWORD PTR [esp],eax
c001bd6b:	e8 c6 7c ff ff       	call   c0013a36 <Directory::close()>
c001bd70:	83 c4 10             	add    esp,0x10
c001bd73:	85 db                	test   ebx,ebx
c001bd75:	74 0c                	je     c001bd83 <sysCallCloseDir(regs*)+0x3d>
c001bd77:	83 ec 0c             	sub    esp,0xc
c001bd7a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bd7c:	53                   	push   ebx
c001bd7d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bd80:	83 c4 10             	add    esp,0x10
c001bd83:	31 c0                	xor    eax,eax
c001bd85:	31 d2                	xor    edx,edx
c001bd87:	83 c4 08             	add    esp,0x8
c001bd8a:	5b                   	pop    ebx
c001bd8b:	c3                   	ret    
c001bd8c:	83 ec 08             	sub    esp,0x8
c001bd8f:	50                   	push   eax
c001bd90:	68 b4 c1 02 c0       	push   0xc002c1b4
c001bd95:	e8 d7 71 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001bd9a:	83 c4 10             	add    esp,0x10
c001bd9d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bda2:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bda7:	83 c4 08             	add    esp,0x8
c001bdaa:	5b                   	pop    ebx
c001bdab:	c3                   	ret    

c001bdac <sysCallMakeDir(regs*)>:
c001bdac:	56                   	push   esi
c001bdad:	53                   	push   ebx
c001bdae:	83 ec 10             	sub    esp,0x10
c001bdb1:	68 14 01 00 00       	push   0x114
c001bdb6:	e8 85 3a ff ff       	call   c000f840 <malloc>
c001bdbb:	83 c4 0c             	add    esp,0xc
c001bdbe:	89 c3                	mov    ebx,eax
c001bdc0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bdc5:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bdc8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bdcc:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bdcf:	53                   	push   ebx
c001bdd0:	e8 a1 7b ff ff       	call   c0013976 <Directory::Directory(char const*, Process*)>
c001bdd5:	83 c4 10             	add    esp,0x10
c001bdd8:	85 db                	test   ebx,ebx
c001bdda:	74 32                	je     c001be0e <sysCallMakeDir(regs*)+0x62>
c001bddc:	83 ec 0c             	sub    esp,0xc
c001bddf:	53                   	push   ebx
c001bde0:	e8 d5 7d ff ff       	call   c0013bba <Directory::create()>
c001bde5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bde8:	89 c6                	mov    esi,eax
c001bdea:	e8 47 7c ff ff       	call   c0013a36 <Directory::close()>
c001bdef:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bdf1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bdf4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bdf7:	83 c4 10             	add    esp,0x10
c001bdfa:	31 c0                	xor    eax,eax
c001bdfc:	59                   	pop    ecx
c001bdfd:	85 f6                	test   esi,esi
c001bdff:	5b                   	pop    ebx
c001be00:	0f 95 c0             	setne  al
c001be03:	5e                   	pop    esi
c001be04:	31 d2                	xor    edx,edx
c001be06:	f7 d8                	neg    eax
c001be08:	83 d2 00             	adc    edx,0x0
c001be0b:	f7 da                	neg    edx
c001be0d:	c3                   	ret    
c001be0e:	59                   	pop    ecx
c001be0f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001be14:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be19:	5b                   	pop    ebx
c001be1a:	5e                   	pop    esi
c001be1b:	c3                   	ret    

c001be1c <sysCallWait(regs*)>:
c001be1c:	83 ec 10             	sub    esp,0x10
c001be1f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001be23:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001be26:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001be29:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001be2c:	e8 ce 24 00 00       	call   c001e2ff <waitTask(int, int*, int)>
c001be31:	83 c4 1c             	add    esp,0x1c
c001be34:	99                   	cdq    
c001be35:	c3                   	ret    

c001be36 <sysCallNotImpl(regs*)>:
c001be36:	83 ec 18             	sub    esp,0x18
c001be39:	68 c6 c0 02 c0       	push   0xc002c0c6
c001be3e:	e8 e0 e7 ff ff       	call   c001a623 <Krnl::panic(char const*)>
c001be43:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001be48:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be4d:	83 c4 1c             	add    esp,0x1c
c001be50:	c3                   	ret    

c001be51 <sysPanic(regs*)>:
c001be51:	83 ec 18             	sub    esp,0x18
c001be54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001be58:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001be5b:	e8 c3 e7 ff ff       	call   c001a623 <Krnl::panic(char const*)>
c001be60:	c7 04 24 e0 c0 02 c0 	mov    DWORD PTR [esp],0xc002c0e0
c001be67:	e8 b7 e7 ff ff       	call   c001a623 <Krnl::panic(char const*)>
c001be6c:	b8 01 00 00 00       	mov    eax,0x1
c001be71:	31 d2                	xor    edx,edx
c001be73:	83 c4 1c             	add    esp,0x1c
c001be76:	c3                   	ret    

c001be77 <sysCallRmdir(regs*)>:
c001be77:	56                   	push   esi
c001be78:	53                   	push   ebx
c001be79:	83 ec 20             	sub    esp,0x20
c001be7c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001be80:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001be83:	68 14 01 00 00       	push   0x114
c001be88:	e8 b3 39 ff ff       	call   c000f840 <malloc>
c001be8d:	83 c4 0c             	add    esp,0xc
c001be90:	89 c3                	mov    ebx,eax
c001be92:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be97:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001be9a:	56                   	push   esi
c001be9b:	53                   	push   ebx
c001be9c:	e8 29 76 ff ff       	call   c00134ca <File::File(char const*, Process*)>
c001bea1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bea4:	e8 fd 77 ff ff       	call   c00136a6 <File::unlink()>
c001bea9:	83 c4 10             	add    esp,0x10
c001beac:	85 db                	test   ebx,ebx
c001beae:	74 14                	je     c001bec4 <sysCallRmdir(regs*)+0x4d>
c001beb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001beb4:	8b 13                	mov    edx,DWORD PTR [ebx]
c001beb6:	83 ec 0c             	sub    esp,0xc
c001beb9:	53                   	push   ebx
c001beba:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bebd:	83 c4 10             	add    esp,0x10
c001bec0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bec4:	85 c0                	test   eax,eax
c001bec6:	0f 95 c0             	setne  al
c001bec9:	31 d2                	xor    edx,edx
c001becb:	0f b6 c0             	movzx  eax,al
c001bece:	f7 d8                	neg    eax
c001bed0:	83 d2 00             	adc    edx,0x0
c001bed3:	83 c4 14             	add    esp,0x14
c001bed6:	f7 da                	neg    edx
c001bed8:	5b                   	pop    ebx
c001bed9:	5e                   	pop    esi
c001beda:	c3                   	ret    

c001bedb <sysCallUnlink(regs*)>:
c001bedb:	56                   	push   esi
c001bedc:	53                   	push   ebx
c001bedd:	83 ec 20             	sub    esp,0x20
c001bee0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bee4:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bee7:	68 14 01 00 00       	push   0x114
c001beec:	e8 4f 39 ff ff       	call   c000f840 <malloc>
c001bef1:	83 c4 0c             	add    esp,0xc
c001bef4:	89 c3                	mov    ebx,eax
c001bef6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001befb:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001befe:	56                   	push   esi
c001beff:	53                   	push   ebx
c001bf00:	e8 c5 75 ff ff       	call   c00134ca <File::File(char const*, Process*)>
c001bf05:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bf08:	e8 99 77 ff ff       	call   c00136a6 <File::unlink()>
c001bf0d:	83 c4 10             	add    esp,0x10
c001bf10:	85 db                	test   ebx,ebx
c001bf12:	74 14                	je     c001bf28 <sysCallUnlink(regs*)+0x4d>
c001bf14:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bf18:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bf1a:	83 ec 0c             	sub    esp,0xc
c001bf1d:	53                   	push   ebx
c001bf1e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bf21:	83 c4 10             	add    esp,0x10
c001bf24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bf28:	85 c0                	test   eax,eax
c001bf2a:	0f 95 c0             	setne  al
c001bf2d:	31 d2                	xor    edx,edx
c001bf2f:	0f b6 c0             	movzx  eax,al
c001bf32:	f7 d8                	neg    eax
c001bf34:	83 d2 00             	adc    edx,0x0
c001bf37:	83 c4 14             	add    esp,0x14
c001bf3a:	f7 da                	neg    edx
c001bf3c:	5b                   	pop    ebx
c001bf3d:	5e                   	pop    esi
c001bf3e:	c3                   	ret    

c001bf3f <sysCallGetArgv(regs*)>:
c001bf3f:	83 ec 0c             	sub    esp,0xc
c001bf42:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bf46:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001bf49:	85 c0                	test   eax,eax
c001bf4b:	78 2b                	js     c001bf78 <sysCallGetArgv(regs*)+0x39>
c001bf4d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bf53:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bf56:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001bf5c:	7d 1a                	jge    c001bf78 <sysCallGetArgv(regs*)+0x39>
c001bf5e:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001bf65:	85 c0                	test   eax,eax
c001bf67:	74 17                	je     c001bf80 <sysCallGetArgv(regs*)+0x41>
c001bf69:	83 ec 08             	sub    esp,0x8
c001bf6c:	50                   	push   eax
c001bf6d:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001bf70:	e8 bf 48 fe ff       	call   c0000834 <strcpy>
c001bf75:	83 c4 10             	add    esp,0x10
c001bf78:	31 c0                	xor    eax,eax
c001bf7a:	31 d2                	xor    edx,edx
c001bf7c:	83 c4 0c             	add    esp,0xc
c001bf7f:	c3                   	ret    
c001bf80:	b8 01 00 00 00       	mov    eax,0x1
c001bf85:	31 d2                	xor    edx,edx
c001bf87:	83 c4 0c             	add    esp,0xc
c001bf8a:	c3                   	ret    

c001bf8b <sysCallTTYName(regs*)>:
c001bf8b:	56                   	push   esi
c001bf8c:	53                   	push   ebx
c001bf8d:	53                   	push   ebx
c001bf8e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bf92:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001bf95:	85 c0                	test   eax,eax
c001bf97:	74 5f                	je     c001bff8 <sysCallTTYName(regs*)+0x6d>
c001bf99:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001bf9c:	83 f8 02             	cmp    eax,0x2
c001bf9f:	77 3e                	ja     c001bfdf <sysCallTTYName(regs*)+0x54>
c001bfa1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bfa6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bfa9:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001bfaf:	85 db                	test   ebx,ebx
c001bfb1:	74 45                	je     c001bff8 <sysCallTTYName(regs*)+0x6d>
c001bfb3:	83 ec 0c             	sub    esp,0xc
c001bfb6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bfb8:	53                   	push   ebx
c001bfb9:	ff 10                	call   DWORD PTR [eax]
c001bfbb:	83 c4 10             	add    esp,0x10
c001bfbe:	84 c0                	test   al,al
c001bfc0:	74 41                	je     c001c003 <sysCallTTYName(regs*)+0x78>
c001bfc2:	83 ec 08             	sub    esp,0x8
c001bfc5:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001bfcb:	53                   	push   ebx
c001bfcc:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001bfcf:	e8 60 48 fe ff       	call   c0000834 <strcpy>
c001bfd4:	83 c4 10             	add    esp,0x10
c001bfd7:	31 c0                	xor    eax,eax
c001bfd9:	59                   	pop    ecx
c001bfda:	31 d2                	xor    edx,edx
c001bfdc:	5b                   	pop    ebx
c001bfdd:	5e                   	pop    esi
c001bfde:	c3                   	ret    
c001bfdf:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bfe4:	74 bb                	je     c001bfa1 <sysCallTTYName(regs*)+0x16>
c001bfe6:	83 ec 0c             	sub    esp,0xc
c001bfe9:	50                   	push   eax
c001bfea:	e8 5e 5a ff ff       	call   c0011a4d <getFromFileDescriptor(int)>
c001bfef:	83 c4 10             	add    esp,0x10
c001bff2:	89 c3                	mov    ebx,eax
c001bff4:	85 db                	test   ebx,ebx
c001bff6:	75 bb                	jne    c001bfb3 <sysCallTTYName(regs*)+0x28>
c001bff8:	59                   	pop    ecx
c001bff9:	b8 01 00 00 00       	mov    eax,0x1
c001bffe:	31 d2                	xor    edx,edx
c001c000:	5b                   	pop    ebx
c001c001:	5e                   	pop    esi
c001c002:	c3                   	ret    
c001c003:	59                   	pop    ecx
c001c004:	b8 02 00 00 00       	mov    eax,0x2
c001c009:	31 d2                	xor    edx,edx
c001c00b:	5b                   	pop    ebx
c001c00c:	5e                   	pop    esi
c001c00d:	c3                   	ret    

c001c00e <sysCallUSleep(regs*)>:
c001c00e:	83 ec 14             	sub    esp,0x14
c001c011:	b8 e8 03 00 00       	mov    eax,0x3e8
c001c016:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c01a:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001c021:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001c024:	01 ca                	add    edx,ecx
c001c026:	52                   	push   edx
c001c027:	50                   	push   eax
c001c028:	e8 6b 23 00 00       	call   c001e398 <nanoSleep(unsigned long long)>
c001c02d:	31 c0                	xor    eax,eax
c001c02f:	31 d2                	xor    edx,edx
c001c031:	83 c4 1c             	add    esp,0x1c
c001c034:	c3                   	ret    

c001c035 <sysCallSpawn(regs*)>:
c001c035:	56                   	push   esi
c001c036:	53                   	push   ebx
c001c037:	53                   	push   ebx
c001c038:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c03c:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001c03f:	85 f6                	test   esi,esi
c001c041:	75 08                	jne    c001c04b <sysCallSpawn(regs*)+0x16>
c001c043:	59                   	pop    ecx
c001c044:	31 c0                	xor    eax,eax
c001c046:	31 d2                	xor    edx,edx
c001c048:	5b                   	pop    ebx
c001c049:	5e                   	pop    esi
c001c04a:	c3                   	ret    
c001c04b:	83 ec 0c             	sub    esp,0xc
c001c04e:	68 3f 07 00 00       	push   0x73f
c001c053:	e8 e8 37 ff ff       	call   c000f840 <malloc>
c001c058:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001c05b:	89 c6                	mov    esi,eax
c001c05d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c062:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c065:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c068:	56                   	push   esi
c001c069:	e8 2a 1a 00 00       	call   c001da98 <Process::Process(char const*, Process*, char**)>
c001c06e:	83 c4 20             	add    esp,0x20
c001c071:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001c078:	75 c9                	jne    c001c043 <sysCallSpawn(regs*)+0xe>
c001c07a:	83 ec 0c             	sub    esp,0xc
c001c07d:	56                   	push   esi
c001c07e:	e8 db 1f 00 00       	call   c001e05e <Process::createUserThread()>
c001c083:	8b 06                	mov    eax,DWORD PTR [esi]
c001c085:	83 c4 10             	add    esp,0x10
c001c088:	99                   	cdq    
c001c089:	59                   	pop    ecx
c001c08a:	5b                   	pop    ebx
c001c08b:	5e                   	pop    esi
c001c08c:	c3                   	ret    

c001c08d <sysCallGetEnv(regs*)>:
c001c08d:	55                   	push   ebp
c001c08e:	57                   	push   edi
c001c08f:	56                   	push   esi
c001c090:	53                   	push   ebx
c001c091:	83 ec 28             	sub    esp,0x28
c001c094:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c098:	68 ef c0 02 c0       	push   0xc002c0ef
c001c09d:	e8 cf 6e ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001c0a2:	5f                   	pop    edi
c001c0a3:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001c0a6:	5d                   	pop    ebp
c001c0a7:	53                   	push   ebx
c001c0a8:	68 1e c4 02 c0       	push   0xc002c41e
c001c0ad:	e8 bf 6e ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001c0b2:	58                   	pop    eax
c001c0b3:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001c0b6:	5a                   	pop    edx
c001c0b7:	57                   	push   edi
c001c0b8:	68 f8 c0 02 c0       	push   0xc002c0f8
c001c0bd:	e8 af 6e ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001c0c2:	59                   	pop    ecx
c001c0c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0c8:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c0cb:	e8 6f e4 ff ff       	call   c001a53f <Krnl::getProcessTotalEnvCount(Process*)>
c001c0d0:	5a                   	pop    edx
c001c0d1:	89 c5                	mov    ebp,eax
c001c0d3:	59                   	pop    ecx
c001c0d4:	50                   	push   eax
c001c0d5:	68 02 c1 02 c0       	push   0xc002c102
c001c0da:	e8 92 6e ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001c0df:	83 c4 10             	add    esp,0x10
c001c0e2:	39 ef                	cmp    edi,ebp
c001c0e4:	7c 15                	jl     c001c0fb <sysCallGetEnv(regs*)+0x6e>
c001c0e6:	85 db                	test   ebx,ebx
c001c0e8:	75 0c                	jne    c001c0f6 <sysCallGetEnv(regs*)+0x69>
c001c0ea:	83 c4 1c             	add    esp,0x1c
c001c0ed:	31 c0                	xor    eax,eax
c001c0ef:	5b                   	pop    ebx
c001c0f0:	31 d2                	xor    edx,edx
c001c0f2:	5e                   	pop    esi
c001c0f3:	5f                   	pop    edi
c001c0f4:	5d                   	pop    ebp
c001c0f5:	c3                   	ret    
c001c0f6:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c0f9:	eb ef                	jmp    c001c0ea <sysCallGetEnv(regs*)+0x5d>
c001c0fb:	83 ec 0c             	sub    esp,0xc
c001c0fe:	68 0e c1 02 c0       	push   0xc002c10e
c001c103:	e8 69 6e ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001c108:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c10c:	83 c4 0c             	add    esp,0xc
c001c10f:	57                   	push   edi
c001c110:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c116:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001c119:	50                   	push   eax
c001c11a:	e8 40 e4 ff ff       	call   c001a55f <Krnl::getProcessEnvPair(Process*, int)>
c001c11f:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c123:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c127:	68 9d c4 02 c0       	push   0xc002c49d
c001c12c:	e8 40 6e ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001c131:	83 c4 10             	add    esp,0x10
c001c134:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001c137:	85 f6                	test   esi,esi
c001c139:	75 47                	jne    c001c182 <sysCallGetEnv(regs*)+0xf5>
c001c13b:	83 ec 0c             	sub    esp,0xc
c001c13e:	55                   	push   ebp
c001c13f:	e8 50 46 fe ff       	call   c0000794 <strlen>
c001c144:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c147:	89 c3                	mov    ebx,eax
c001c149:	e8 46 46 fe ff       	call   c0000794 <strlen>
c001c14e:	5a                   	pop    edx
c001c14f:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c153:	59                   	pop    ecx
c001c154:	50                   	push   eax
c001c155:	68 11 c1 02 c0       	push   0xc002c111
c001c15a:	e8 12 6e ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001c15f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c162:	e8 2d 46 fe ff       	call   c0000794 <strlen>
c001c167:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c16a:	89 c3                	mov    ebx,eax
c001c16c:	e8 23 46 fe ff       	call   c0000794 <strlen>
c001c171:	83 c4 10             	add    esp,0x10
c001c174:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c178:	83 c4 1c             	add    esp,0x1c
c001c17b:	31 d2                	xor    edx,edx
c001c17d:	5b                   	pop    ebx
c001c17e:	5e                   	pop    esi
c001c17f:	5f                   	pop    edi
c001c180:	5d                   	pop    ebp
c001c181:	c3                   	ret    
c001c182:	83 ec 0c             	sub    esp,0xc
c001c185:	68 b7 c4 02 c0       	push   0xc002c4b7
c001c18a:	e8 e2 6d ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001c18f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c192:	58                   	pop    eax
c001c193:	5a                   	pop    edx
c001c194:	55                   	push   ebp
c001c195:	53                   	push   ebx
c001c196:	e8 99 46 fe ff       	call   c0000834 <strcpy>
c001c19b:	59                   	pop    ecx
c001c19c:	5e                   	pop    esi
c001c19d:	68 1b c1 02 c0       	push   0xc002c11b
c001c1a2:	53                   	push   ebx
c001c1a3:	e8 cc 47 fe ff       	call   c0000974 <strcat>
c001c1a8:	5d                   	pop    ebp
c001c1a9:	58                   	pop    eax
c001c1aa:	57                   	push   edi
c001c1ab:	53                   	push   ebx
c001c1ac:	e8 c3 47 fe ff       	call   c0000974 <strcat>
c001c1b1:	c7 04 24 d1 c4 02 c0 	mov    DWORD PTR [esp],0xc002c4d1
c001c1b8:	e8 b4 6d ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001c1bd:	83 c4 10             	add    esp,0x10
c001c1c0:	e9 25 ff ff ff       	jmp    c001c0ea <sysCallGetEnv(regs*)+0x5d>

c001c1c5 <sysAppSettings(regs*)>:
c001c1c5:	53                   	push   ebx
c001c1c6:	83 ec 08             	sub    esp,0x8
c001c1c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1cd:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001c1d0:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001c1d6:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c1db:	66 3d c0 09          	cmp    ax,0x9c0
c001c1df:	75 2f                	jne    c001c210 <sysAppSettings(regs*)+0x4b>
c001c1e1:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001c1e7:	83 e0 1f             	and    eax,0x1f
c001c1ea:	3c 01                	cmp    al,0x1
c001c1ec:	74 2e                	je     c001c21c <sysAppSettings(regs*)+0x57>
c001c1ee:	3c 07                	cmp    al,0x7
c001c1f0:	0f 84 bd 00 00 00    	je     c001c2b3 <sysAppSettings(regs*)+0xee>
c001c1f6:	84 c0                	test   al,al
c001c1f8:	0f 84 dc 00 00 00    	je     c001c2da <sysAppSettings(regs*)+0x115>
c001c1fe:	3c 08                	cmp    al,0x8
c001c200:	74 6d                	je     c001c26f <sysAppSettings(regs*)+0xaa>
c001c202:	0f b6 c0             	movzx  eax,al
c001c205:	83 c4 08             	add    esp,0x8
c001c208:	05 e8 03 00 00       	add    eax,0x3e8
c001c20d:	5b                   	pop    ebx
c001c20e:	99                   	cdq    
c001c20f:	c3                   	ret    
c001c210:	b8 01 00 00 00       	mov    eax,0x1
c001c215:	31 d2                	xor    edx,edx
c001c217:	83 c4 08             	add    esp,0x8
c001c21a:	5b                   	pop    ebx
c001c21b:	c3                   	ret    
c001c21c:	51                   	push   ecx
c001c21d:	68 00 01 00 00       	push   0x100
c001c222:	6a 00                	push   0x0
c001c224:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c229:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c22c:	83 c0 0c             	add    eax,0xc
c001c22f:	50                   	push   eax
c001c230:	e8 43 45 fe ff       	call   c0000778 <memset>
c001c235:	83 c4 0c             	add    esp,0xc
c001c238:	68 ff 00 00 00       	push   0xff
c001c23d:	53                   	push   ebx
c001c23e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c243:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c246:	83 c0 0c             	add    eax,0xc
c001c249:	50                   	push   eax
c001c24a:	e8 f5 44 fe ff       	call   c0000744 <memcpy>
c001c24f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c254:	5b                   	pop    ebx
c001c255:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c258:	5a                   	pop    edx
c001c259:	8d 50 0c             	lea    edx,[eax+0xc]
c001c25c:	52                   	push   edx
c001c25d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c263:	e8 60 49 ff ff       	call   c0010bc8 <VgaText::setTitle(char*)>
c001c268:	83 c4 10             	add    esp,0x10
c001c26b:	31 c0                	xor    eax,eax
c001c26d:	eb a6                	jmp    c001c215 <sysAppSettings(regs*)+0x50>
c001c26f:	83 ec 08             	sub    esp,0x8
c001c272:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c278:	83 e0 0f             	and    eax,0xf
c001c27b:	50                   	push   eax
c001c27c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c281:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c284:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c28a:	e8 29 49 ff ff       	call   c0010bb8 <VgaText::setTitleColour(VgaColour)>
c001c28f:	58                   	pop    eax
c001c290:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c296:	5a                   	pop    edx
c001c297:	c1 e8 04             	shr    eax,0x4
c001c29a:	83 e0 0f             	and    eax,0xf
c001c29d:	50                   	push   eax
c001c29e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2a3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2a6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c2ac:	e8 f7 48 ff ff       	call   c0010ba8 <VgaText::setTitleTextColour(VgaColour)>
c001c2b1:	eb b5                	jmp    c001c268 <sysAppSettings(regs*)+0xa3>
c001c2b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2b8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2bb:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c2c1:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001c2c7:	c0 e8 06             	shr    al,0x6
c001c2ca:	83 e0 01             	and    eax,0x1
c001c2cd:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001c2d3:	31 c0                	xor    eax,eax
c001c2d5:	e9 3b ff ff ff       	jmp    c001c215 <sysAppSettings(regs*)+0x50>
c001c2da:	b8 02 00 00 00       	mov    eax,0x2
c001c2df:	e9 31 ff ff ff       	jmp    c001c215 <sysAppSettings(regs*)+0x50>

c001c2e4 <sysSetFatAttrib(regs*)>:
c001c2e4:	57                   	push   edi
c001c2e5:	56                   	push   esi
c001c2e6:	53                   	push   ebx
c001c2e7:	83 ec 1c             	sub    esp,0x1c
c001c2ea:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c2ee:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c2f1:	68 14 01 00 00       	push   0x114
c001c2f6:	e8 45 35 ff ff       	call   c000f840 <malloc>
c001c2fb:	83 c4 0c             	add    esp,0xc
c001c2fe:	89 c3                	mov    ebx,eax
c001c300:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c305:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c308:	57                   	push   edi
c001c309:	53                   	push   ebx
c001c30a:	e8 bb 71 ff ff       	call   c00134ca <File::File(char const*, Process*)>
c001c30f:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c312:	83 c4 0c             	add    esp,0xc
c001c315:	0f b6 d4             	movzx  edx,ah
c001c318:	0f b6 c0             	movzx  eax,al
c001c31b:	52                   	push   edx
c001c31c:	50                   	push   eax
c001c31d:	53                   	push   ebx
c001c31e:	e8 1d 74 ff ff       	call   c0013740 <File::chfatattr(unsigned char, unsigned char)>
c001c323:	83 c4 10             	add    esp,0x10
c001c326:	85 db                	test   ebx,ebx
c001c328:	74 14                	je     c001c33e <sysSetFatAttrib(regs*)+0x5a>
c001c32a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c32e:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c330:	83 ec 0c             	sub    esp,0xc
c001c333:	53                   	push   ebx
c001c334:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c337:	83 c4 10             	add    esp,0x10
c001c33a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c33e:	85 c0                	test   eax,eax
c001c340:	0f 95 c0             	setne  al
c001c343:	31 d2                	xor    edx,edx
c001c345:	0f b6 c0             	movzx  eax,al
c001c348:	f7 d8                	neg    eax
c001c34a:	83 d2 00             	adc    edx,0x0
c001c34d:	83 c4 10             	add    esp,0x10
c001c350:	f7 da                	neg    edx
c001c352:	5b                   	pop    ebx
c001c353:	5e                   	pop    esi
c001c354:	5f                   	pop    edi
c001c355:	c3                   	ret    

c001c356 <sysPipe(regs*)>:
c001c356:	57                   	push   edi
c001c357:	56                   	push   esi
c001c358:	53                   	push   ebx
c001c359:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c35d:	83 ec 0c             	sub    esp,0xc
c001c360:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c363:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c366:	6a 20                	push   0x20
c001c368:	e8 d3 34 ff ff       	call   c000f840 <malloc>
c001c36d:	89 c3                	mov    ebx,eax
c001c36f:	58                   	pop    eax
c001c370:	5a                   	pop    edx
c001c371:	68 00 50 00 00       	push   0x5000
c001c376:	53                   	push   ebx
c001c377:	e8 7c 41 ff ff       	call   c00104f8 <Pipe::Pipe(int)>
c001c37c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c37f:	e8 d4 53 ff ff       	call   c0011758 <UnixFile::getFileDescriptor()>
c001c384:	89 07                	mov    DWORD PTR [edi],eax
c001c386:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c389:	e8 ca 53 ff ff       	call   c0011758 <UnixFile::getFileDescriptor()>
c001c38e:	83 c4 10             	add    esp,0x10
c001c391:	89 06                	mov    DWORD PTR [esi],eax
c001c393:	31 d2                	xor    edx,edx
c001c395:	5b                   	pop    ebx
c001c396:	31 c0                	xor    eax,eax
c001c398:	5e                   	pop    esi
c001c399:	5f                   	pop    edi
c001c39a:	c3                   	ret    

c001c39b <sysGetUnixTime(regs*)>:
c001c39b:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c001c3a0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c3a6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c3aa:	e9 05 7b ff ff       	jmp    c0013eb4 <Clock::timeInSecondsLocal()>

c001c3af <string_ends_with(char const*, char const*)>:
c001c3af:	57                   	push   edi
c001c3b0:	56                   	push   esi
c001c3b1:	53                   	push   ebx
c001c3b2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c3b6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c3ba:	83 ec 0c             	sub    esp,0xc
c001c3bd:	53                   	push   ebx
c001c3be:	e8 d1 43 fe ff       	call   c0000794 <strlen>
c001c3c3:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c3c6:	89 c6                	mov    esi,eax
c001c3c8:	e8 c7 43 fe ff       	call   c0000794 <strlen>
c001c3cd:	83 c4 10             	add    esp,0x10
c001c3d0:	39 c6                	cmp    esi,eax
c001c3d2:	7d 06                	jge    c001c3da <string_ends_with(char const*, char const*)+0x2b>
c001c3d4:	5b                   	pop    ebx
c001c3d5:	31 c0                	xor    eax,eax
c001c3d7:	5e                   	pop    esi
c001c3d8:	5f                   	pop    edi
c001c3d9:	c3                   	ret    
c001c3da:	83 ec 08             	sub    esp,0x8
c001c3dd:	29 c6                	sub    esi,eax
c001c3df:	57                   	push   edi
c001c3e0:	01 f3                	add    ebx,esi
c001c3e2:	53                   	push   ebx
c001c3e3:	e8 d8 44 fe ff       	call   c00008c0 <strcmp>
c001c3e8:	83 c4 10             	add    esp,0x10
c001c3eb:	85 c0                	test   eax,eax
c001c3ed:	5b                   	pop    ebx
c001c3ee:	0f 94 c0             	sete   al
c001c3f1:	5e                   	pop    esi
c001c3f2:	0f b6 c0             	movzx  eax,al
c001c3f5:	5f                   	pop    edi
c001c3f6:	c3                   	ret    

c001c3f7 <sysCallOpen(regs*)>:
c001c3f7:	56                   	push   esi
c001c3f8:	53                   	push   ebx
c001c3f9:	81 ec 04 01 00 00    	sub    esp,0x104
c001c3ff:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c406:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c409:	85 c9                	test   ecx,ecx
c001c40b:	0f 84 b3 00 00 00    	je     c001c4c4 <sysCallOpen(regs*)+0xcd>
c001c411:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c414:	85 c0                	test   eax,eax
c001c416:	0f 84 a8 00 00 00    	je     c001c4c4 <sysCallOpen(regs*)+0xcd>
c001c41c:	52                   	push   edx
c001c41d:	68 1d c1 02 c0       	push   0xc002c11d
c001c422:	50                   	push   eax
c001c423:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c427:	56                   	push   esi
c001c428:	e8 f3 6e ff ff       	call   c0013320 <Fs::standardiseFiles(char*, char const*, char const*)>
c001c42d:	89 34 24             	mov    DWORD PTR [esp],esi
c001c430:	e8 5f 43 fe ff       	call   c0000794 <strlen>
c001c435:	83 c4 10             	add    esp,0x10
c001c438:	48                   	dec    eax
c001c439:	74 1d                	je     c001c458 <sysCallOpen(regs*)+0x61>
c001c43b:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c43e:	eb 0f                	jmp    c001c44f <sysCallOpen(regs*)+0x58>
c001c440:	80 fa 3a             	cmp    dl,0x3a
c001c443:	74 0f                	je     c001c454 <sysCallOpen(regs*)+0x5d>
c001c445:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c449:	48                   	dec    eax
c001c44a:	74 0c                	je     c001c458 <sysCallOpen(regs*)+0x61>
c001c44c:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c44f:	80 fa 2e             	cmp    dl,0x2e
c001c452:	75 ec                	jne    c001c440 <sysCallOpen(regs*)+0x49>
c001c454:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c458:	83 ec 08             	sub    esp,0x8
c001c45b:	68 21 c1 02 c0       	push   0xc002c121
c001c460:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c463:	e8 47 ff ff ff       	call   c001c3af <string_ends_with(char const*, char const*)>
c001c468:	83 c4 10             	add    esp,0x10
c001c46b:	85 c0                	test   eax,eax
c001c46d:	75 17                	jne    c001c486 <sysCallOpen(regs*)+0x8f>
c001c46f:	83 ec 08             	sub    esp,0x8
c001c472:	68 42 c1 02 c0       	push   0xc002c142
c001c477:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c47a:	e8 30 ff ff ff       	call   c001c3af <string_ends_with(char const*, char const*)>
c001c47f:	83 c4 10             	add    esp,0x10
c001c482:	85 c0                	test   eax,eax
c001c484:	74 51                	je     c001c4d7 <sysCallOpen(regs*)+0xe0>
c001c486:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c489:	83 ec 08             	sub    esp,0x8
c001c48c:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c492:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c499:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c49c:	ff 30                	push   DWORD PTR [eax]
c001c49e:	68 26 c1 02 c0       	push   0xc002c126
c001c4a3:	e8 c9 6a ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001c4a8:	c7 04 24 35 c1 02 c0 	mov    DWORD PTR [esp],0xc002c135
c001c4af:	e8 bd 6a ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001c4b4:	83 c4 10             	add    esp,0x10
c001c4b7:	81 c4 04 01 00 00    	add    esp,0x104
c001c4bd:	31 c0                	xor    eax,eax
c001c4bf:	31 d2                	xor    edx,edx
c001c4c1:	5b                   	pop    ebx
c001c4c2:	5e                   	pop    esi
c001c4c3:	c3                   	ret    
c001c4c4:	81 c4 04 01 00 00    	add    esp,0x104
c001c4ca:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c4cf:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c4d4:	5b                   	pop    ebx
c001c4d5:	5e                   	pop    esi
c001c4d6:	c3                   	ret    
c001c4d7:	83 ec 08             	sub    esp,0x8
c001c4da:	68 22 c1 02 c0       	push   0xc002c122
c001c4df:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4e2:	e8 d9 43 fe ff       	call   c00008c0 <strcmp>
c001c4e7:	83 c4 10             	add    esp,0x10
c001c4ea:	85 c0                	test   eax,eax
c001c4ec:	74 98                	je     c001c486 <sysCallOpen(regs*)+0x8f>
c001c4ee:	83 ec 08             	sub    esp,0x8
c001c4f1:	68 21 c1 02 c0       	push   0xc002c121
c001c4f6:	56                   	push   esi
c001c4f7:	e8 b3 fe ff ff       	call   c001c3af <string_ends_with(char const*, char const*)>
c001c4fc:	83 c4 10             	add    esp,0x10
c001c4ff:	85 c0                	test   eax,eax
c001c501:	75 83                	jne    c001c486 <sysCallOpen(regs*)+0x8f>
c001c503:	83 ec 08             	sub    esp,0x8
c001c506:	68 47 c1 02 c0       	push   0xc002c147
c001c50b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c50e:	e8 9c fe ff ff       	call   c001c3af <string_ends_with(char const*, char const*)>
c001c513:	83 c4 10             	add    esp,0x10
c001c516:	85 c0                	test   eax,eax
c001c518:	0f 85 d9 00 00 00    	jne    c001c5f7 <sysCallOpen(regs*)+0x200>
c001c51e:	83 ec 08             	sub    esp,0x8
c001c521:	68 4c c1 02 c0       	push   0xc002c14c
c001c526:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c529:	e8 81 fe ff ff       	call   c001c3af <string_ends_with(char const*, char const*)>
c001c52e:	83 c4 10             	add    esp,0x10
c001c531:	85 c0                	test   eax,eax
c001c533:	0f 85 be 00 00 00    	jne    c001c5f7 <sysCallOpen(regs*)+0x200>
c001c539:	83 ec 08             	sub    esp,0x8
c001c53c:	68 48 c1 02 c0       	push   0xc002c148
c001c541:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c544:	e8 77 43 fe ff       	call   c00008c0 <strcmp>
c001c549:	83 c4 10             	add    esp,0x10
c001c54c:	85 c0                	test   eax,eax
c001c54e:	0f 84 a3 00 00 00    	je     c001c5f7 <sysCallOpen(regs*)+0x200>
c001c554:	83 ec 08             	sub    esp,0x8
c001c557:	68 47 c1 02 c0       	push   0xc002c147
c001c55c:	56                   	push   esi
c001c55d:	e8 4d fe ff ff       	call   c001c3af <string_ends_with(char const*, char const*)>
c001c562:	83 c4 10             	add    esp,0x10
c001c565:	85 c0                	test   eax,eax
c001c567:	0f 85 8a 00 00 00    	jne    c001c5f7 <sysCallOpen(regs*)+0x200>
c001c56d:	83 ec 0c             	sub    esp,0xc
c001c570:	68 14 01 00 00       	push   0x114
c001c575:	e8 c6 32 ff ff       	call   c000f840 <malloc>
c001c57a:	83 c4 0c             	add    esp,0xc
c001c57d:	89 c6                	mov    esi,eax
c001c57f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c584:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c587:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c58a:	56                   	push   esi
c001c58b:	e8 3a 6f ff ff       	call   c00134ca <File::File(char const*, Process*)>
c001c590:	83 c4 10             	add    esp,0x10
c001c593:	85 f6                	test   esi,esi
c001c595:	0f 84 29 ff ff ff    	je     c001c4c4 <sysCallOpen(regs*)+0xcd>
c001c59b:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c59e:	0f b6 c2             	movzx  eax,dl
c001c5a1:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c5a4:	89 d0                	mov    eax,edx
c001c5a6:	83 e0 01             	and    eax,0x1
c001c5a9:	f6 c2 02             	test   dl,0x2
c001c5ac:	74 03                	je     c001c5b1 <sysCallOpen(regs*)+0x1ba>
c001c5ae:	83 c8 02             	or     eax,0x2
c001c5b1:	f6 c2 04             	test   dl,0x4
c001c5b4:	74 03                	je     c001c5b9 <sysCallOpen(regs*)+0x1c2>
c001c5b6:	83 c8 04             	or     eax,0x4
c001c5b9:	f6 c2 08             	test   dl,0x8
c001c5bc:	74 03                	je     c001c5c1 <sysCallOpen(regs*)+0x1ca>
c001c5be:	83 c8 0a             	or     eax,0xa
c001c5c1:	83 e2 10             	and    edx,0x10
c001c5c4:	74 03                	je     c001c5c9 <sysCallOpen(regs*)+0x1d2>
c001c5c6:	83 c8 12             	or     eax,0x12
c001c5c9:	83 ec 08             	sub    esp,0x8
c001c5cc:	50                   	push   eax
c001c5cd:	56                   	push   esi
c001c5ce:	e8 5b 6f ff ff       	call   c001352e <File::open(FileOpenMode)>
c001c5d3:	83 c4 10             	add    esp,0x10
c001c5d6:	85 c0                	test   eax,eax
c001c5d8:	0f 85 e6 fe ff ff    	jne    c001c4c4 <sysCallOpen(regs*)+0xcd>
c001c5de:	83 ec 0c             	sub    esp,0xc
c001c5e1:	56                   	push   esi
c001c5e2:	e8 71 51 ff ff       	call   c0011758 <UnixFile::getFileDescriptor()>
c001c5e7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c5ea:	89 02                	mov    DWORD PTR [edx],eax
c001c5ec:	c1 f8 1f             	sar    eax,0x1f
c001c5ef:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c5f2:	e9 bd fe ff ff       	jmp    c001c4b4 <sysCallOpen(regs*)+0xbd>
c001c5f7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c5fa:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c600:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c607:	e9 ab fe ff ff       	jmp    c001c4b7 <sysCallOpen(regs*)+0xc0>

c001c60c <Sys::loadSyscalls()>:
c001c60c:	c7 05 c0 11 03 c0 19 b7 01 c0 	mov    DWORD PTR ds:0xc00311c0,0xc001b719
c001c616:	c7 05 c4 11 03 c0 b8 b2 01 c0 	mov    DWORD PTR ds:0xc00311c4,0xc001b2b8
c001c620:	c7 05 c8 11 03 c0 22 b4 01 c0 	mov    DWORD PTR ds:0xc00311c8,0xc001b422
c001c62a:	c7 05 cc 11 03 c0 4f b6 01 c0 	mov    DWORD PTR ds:0xc00311cc,0xc001b64f
c001c634:	c7 05 d0 11 03 c0 ba b3 01 c0 	mov    DWORD PTR ds:0xc00311d0,0xc001b3ba
c001c63e:	c7 05 d4 11 03 c0 ef b2 01 c0 	mov    DWORD PTR ds:0xc00311d4,0xc001b2ef
c001c648:	c7 05 d8 11 03 c0 d0 b2 01 c0 	mov    DWORD PTR ds:0xc00311d8,0xc001b2d0
c001c652:	c7 05 dc 11 03 c0 c1 b4 01 c0 	mov    DWORD PTR ds:0xc00311dc,0xc001b4c1
c001c65c:	c7 05 e4 11 03 c0 49 bc 01 c0 	mov    DWORD PTR ds:0xc00311e4,0xc001bc49
c001c666:	c7 05 e0 11 03 c0 f7 c3 01 c0 	mov    DWORD PTR ds:0xc00311e0,0xc001c3f7
c001c670:	c7 05 e8 11 03 c0 d1 bc 01 c0 	mov    DWORD PTR ds:0xc00311e8,0xc001bcd1
c001c67a:	c7 05 ec 11 03 c0 38 b9 01 c0 	mov    DWORD PTR ds:0xc00311ec,0xc001b938
c001c684:	c7 05 f0 11 03 c0 54 b7 01 c0 	mov    DWORD PTR ds:0xc00311f0,0xc001b754
c001c68e:	c7 05 f4 11 03 c0 59 b7 01 c0 	mov    DWORD PTR ds:0xc00311f4,0xc001b759
c001c698:	c7 05 f8 11 03 c0 ac bd 01 c0 	mov    DWORD PTR ds:0xc00311f8,0xc001bdac
c001c6a2:	c7 05 fc 11 03 c0 46 bd 01 c0 	mov    DWORD PTR ds:0xc00311fc,0xc001bd46
c001c6ac:	c7 05 00 12 03 c0 20 ba 01 c0 	mov    DWORD PTR ds:0xc0031200,0xc001ba20
c001c6b6:	c7 05 04 12 03 c0 89 ba 01 c0 	mov    DWORD PTR ds:0xc0031204,0xc001ba89
c001c6c0:	c7 05 08 12 03 c0 06 bb 01 c0 	mov    DWORD PTR ds:0xc0031208,0xc001bb06
c001c6ca:	c7 05 0c 12 03 c0 5e b7 01 c0 	mov    DWORD PTR ds:0xc003120c,0xc001b75e
c001c6d4:	c7 05 10 12 03 c0 1c be 01 c0 	mov    DWORD PTR ds:0xc0031210,0xc001be1c
c001c6de:	c7 05 14 12 03 c0 36 be 01 c0 	mov    DWORD PTR ds:0xc0031214,0xc001be36
c001c6e8:	c7 05 18 12 03 c0 36 be 01 c0 	mov    DWORD PTR ds:0xc0031218,0xc001be36
c001c6f2:	c7 05 1c 12 03 c0 77 be 01 c0 	mov    DWORD PTR ds:0xc003121c,0xc001be77
c001c6fc:	c7 05 20 12 03 c0 db be 01 c0 	mov    DWORD PTR ds:0xc0031220,0xc001bedb
c001c706:	c7 05 24 12 03 c0 0a b9 01 c0 	mov    DWORD PTR ds:0xc0031224,0xc001b90a
c001c710:	c7 05 28 12 03 c0 3f bf 01 c0 	mov    DWORD PTR ds:0xc0031228,0xc001bf3f
c001c71a:	c7 05 2c 12 03 c0 c7 b8 01 c0 	mov    DWORD PTR ds:0xc003122c,0xc001b8c7
c001c724:	c7 05 30 12 03 c0 8b bf 01 c0 	mov    DWORD PTR ds:0xc0031230,0xc001bf8b
c001c72e:	c7 05 34 12 03 c0 c6 b9 01 c0 	mov    DWORD PTR ds:0xc0031234,0xc001b9c6
c001c738:	c7 05 38 12 03 c0 0e c0 01 c0 	mov    DWORD PTR ds:0xc0031238,0xc001c00e
c001c742:	c7 05 3c 12 03 c0 89 bb 01 c0 	mov    DWORD PTR ds:0xc003123c,0xc001bb89
c001c74c:	c7 05 40 12 03 c0 35 c0 01 c0 	mov    DWORD PTR ds:0xc0031240,0xc001c035
c001c756:	c7 05 44 12 03 c0 8d c0 01 c0 	mov    DWORD PTR ds:0xc0031244,0xc001c08d
c001c760:	c7 05 48 12 03 c0 c5 c1 01 c0 	mov    DWORD PTR ds:0xc0031248,0xc001c1c5
c001c76a:	c7 05 4c 12 03 c0 68 b7 01 c0 	mov    DWORD PTR ds:0xc003124c,0xc001b768
c001c774:	c7 05 50 12 03 c0 d2 b7 01 c0 	mov    DWORD PTR ds:0xc0031250,0xc001b7d2
c001c77e:	c7 05 54 12 03 c0 18 b8 01 c0 	mov    DWORD PTR ds:0xc0031254,0xc001b818
c001c788:	c7 05 58 12 03 c0 e4 c2 01 c0 	mov    DWORD PTR ds:0xc0031258,0xc001c2e4
c001c792:	c7 05 5c 12 03 c0 51 be 01 c0 	mov    DWORD PTR ds:0xc003125c,0xc001be51
c001c79c:	c7 05 60 12 03 c0 69 b8 01 c0 	mov    DWORD PTR ds:0xc0031260,0xc001b869
c001c7a6:	c7 05 64 12 03 c0 56 c3 01 c0 	mov    DWORD PTR ds:0xc0031264,0xc001c356
c001c7b0:	c7 05 68 12 03 c0 9b c3 01 c0 	mov    DWORD PTR ds:0xc0031268,0xc001c39b
c001c7ba:	c7 05 6c 12 03 c0 12 b3 01 c0 	mov    DWORD PTR ds:0xc003126c,0xc001b312
c001c7c4:	c7 05 70 12 03 c0 dd b4 01 c0 	mov    DWORD PTR ds:0xc0031270,0xc001b4dd
c001c7ce:	c7 05 74 12 03 c0 05 b6 01 c0 	mov    DWORD PTR ds:0xc0031274,0xc001b605
c001c7d8:	c7 05 78 12 03 c0 82 b2 01 c0 	mov    DWORD PTR ds:0xc0031278,0xc001b282
c001c7e2:	c7 05 7c 12 03 c0 b7 b6 01 c0 	mov    DWORD PTR ds:0xc003127c,0xc001b6b7
c001c7ec:	c7 05 80 12 03 c0 fb b2 01 c0 	mov    DWORD PTR ds:0xc0031280,0xc001b2fb
c001c7f6:	c3                   	ret    

c001c7f7 <Sys::systemCall(regs*, void*)>:
c001c7f7:	53                   	push   ebx
c001c7f8:	83 ec 08             	sub    esp,0x8
c001c7fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c7ff:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c802:	83 f8 7f             	cmp    eax,0x7f
c001c805:	77 16                	ja     c001c81d <Sys::systemCall(regs*, void*)+0x26>
c001c807:	8b 14 85 c0 11 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcee40]
c001c80e:	85 d2                	test   edx,edx
c001c810:	74 0b                	je     c001c81d <Sys::systemCall(regs*, void*)+0x26>
c001c812:	83 ec 0c             	sub    esp,0xc
c001c815:	53                   	push   ebx
c001c816:	ff d2                	call   edx
c001c818:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c81b:	eb 0d                	jmp    c001c82a <Sys::systemCall(regs*, void*)+0x33>
c001c81d:	52                   	push   edx
c001c81e:	52                   	push   edx
c001c81f:	50                   	push   eax
c001c820:	68 51 c1 02 c0       	push   0xc002c151
c001c825:	e8 47 67 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001c82a:	83 c4 10             	add    esp,0x10
c001c82d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c832:	31 d2                	xor    edx,edx
c001c834:	83 c4 08             	add    esp,0x8
c001c837:	5b                   	pop    ebx
c001c838:	c3                   	ret    

c001c839 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c839:	55                   	push   ebp
c001c83a:	57                   	push   edi
c001c83b:	56                   	push   esi
c001c83c:	53                   	push   ebx
c001c83d:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c843:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c84a:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c851:	85 c0                	test   eax,eax
c001c853:	0f 95 c1             	setne  cl
c001c856:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c85e:	0f 94 c2             	sete   dl
c001c861:	84 d1                	test   cl,dl
c001c863:	74 23                	je     c001c888 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c865:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c86b:	74 1b                	je     c001c888 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c86d:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c873:	89 da                	mov    edx,ebx
c001c875:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c87b:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c881:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c888:	8b 8c 24 48 10 00 00 	mov    ecx,DWORD PTR [esp+0x1048]
c001c88f:	05 ff 0f 00 00       	add    eax,0xfff
c001c894:	83 ec 0c             	sub    esp,0xc
c001c897:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c89b:	8d a9 ff 0f 00 00    	lea    ebp,[ecx+0xfff]
c001c8a1:	c1 e8 0c             	shr    eax,0xc
c001c8a4:	89 ef                	mov    edi,ebp
c001c8a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c8aa:	c1 ef 0c             	shr    edi,0xc
c001c8ad:	6a 01                	push   0x1
c001c8af:	e8 ef 52 ff ff       	call   c0011ba3 <Virt::allocateKernelVirtualPages(int)>
c001c8b4:	89 c6                	mov    esi,eax
c001c8b6:	58                   	pop    eax
c001c8b7:	5a                   	pop    edx
c001c8b8:	57                   	push   edi
c001c8b9:	68 d7 c1 02 c0       	push   0xc002c1d7
c001c8be:	e8 ae 66 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001c8c3:	59                   	pop    ecx
c001c8c4:	58                   	pop    eax
c001c8c5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c8c9:	68 e9 c1 02 c0       	push   0xc002c1e9
c001c8ce:	e8 9e 66 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001c8d3:	83 c4 10             	add    esp,0x10
c001c8d6:	81 fd ff 0f 00 00    	cmp    ebp,0xfff
c001c8dc:	0f 86 24 01 00 00    	jbe    c001ca06 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cd>
c001c8e2:	c1 e7 0c             	shl    edi,0xc
c001c8e5:	8d 04 1f             	lea    eax,[edi+ebx*1]
c001c8e8:	89 df                	mov    edi,ebx
c001c8ea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c8ee:	8b ac 24 48 10 00 00 	mov    ebp,DWORD PTR [esp+0x1048]
c001c8f5:	01 dd                	add    ebp,ebx
c001c8f7:	29 fd                	sub    ebp,edi
c001c8f9:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c001c8fd:	0f 84 01 01 00 00    	je     c001ca04 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c903:	81 fd 00 10 00 00    	cmp    ebp,0x1000
c001c909:	76 05                	jbe    c001c910 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xd7>
c001c90b:	bd 00 10 00 00       	mov    ebp,0x1000
c001c910:	83 ec 0c             	sub    esp,0xc
c001c913:	31 d2                	xor    edx,edx
c001c915:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c91c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c91e:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c922:	50                   	push   eax
c001c923:	8d 44 24 30          	lea    eax,[esp+0x30]
c001c927:	50                   	push   eax
c001c928:	52                   	push   edx
c001c929:	55                   	push   ebp
c001c92a:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c931:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c934:	83 c4 20             	add    esp,0x20
c001c937:	85 c0                	test   eax,eax
c001c939:	74 0a                	je     c001c945 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x10c>
c001c93b:	53                   	push   ebx
c001c93c:	53                   	push   ebx
c001c93d:	50                   	push   eax
c001c93e:	68 fb c1 02 c0       	push   0xc002c1fb
c001c943:	eb 0f                	jmp    c001c954 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x11b>
c001c945:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c001c949:	74 20                	je     c001c96b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x132>
c001c94b:	51                   	push   ecx
c001c94c:	51                   	push   ecx
c001c94d:	6a 00                	push   0x0
c001c94f:	68 26 c2 02 c0       	push   0xc002c226
c001c954:	e8 18 66 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001c959:	89 34 24             	mov    DWORD PTR [esp],esi
c001c95c:	e8 b2 56 ff ff       	call   c0012013 <Virt::freeKernelVirtualPages(unsigned long)>
c001c961:	83 c4 10             	add    esp,0x10
c001c964:	31 c0                	xor    eax,eax
c001c966:	e9 55 01 00 00       	jmp    c001cac0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c001c96b:	e8 d8 14 00 00       	call   c001de48 <lockScheduler()>
c001c970:	e8 6d 35 ff ff       	call   c000fee2 <Phys::allocatePage()>
c001c975:	6a 07                	push   0x7
c001c977:	89 c5                	mov    ebp,eax
c001c979:	56                   	push   esi
c001c97a:	50                   	push   eax
c001c97b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c980:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c983:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c989:	e8 ec 59 ff ff       	call   c001237a <VAS::mapPage(unsigned long, unsigned long, int)>
c001c98e:	83 c4 0c             	add    esp,0xc
c001c991:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c998:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c99e:	6a 00                	push   0x0
c001c9a0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c9a5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c9a8:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9ae:	e8 31 58 ff ff       	call   c00121e4 <VAS::mapOtherVASIn(bool, VAS*)>
c001c9b3:	58                   	pop    eax
c001c9b4:	5a                   	pop    edx
c001c9b5:	68 07 0c 00 00       	push   0xc07
c001c9ba:	57                   	push   edi
c001c9bb:	81 c7 00 10 00 00    	add    edi,0x1000
c001c9c1:	55                   	push   ebp
c001c9c2:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c9c9:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9cf:	6a 00                	push   0x0
c001c9d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c9d6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c9d9:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9df:	e8 50 5d ff ff       	call   c0012734 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c9e4:	83 c4 1c             	add    esp,0x1c
c001c9e7:	68 00 10 00 00       	push   0x1000
c001c9ec:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c9f0:	50                   	push   eax
c001c9f1:	56                   	push   esi
c001c9f2:	e8 4d 3d fe ff       	call   c0000744 <memcpy>
c001c9f7:	e8 4e 14 00 00       	call   c001de4a <unlockScheduler()>
c001c9fc:	83 c4 10             	add    esp,0x10
c001c9ff:	e9 ea fe ff ff       	jmp    c001c8ee <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb5>
c001ca04:	89 fb                	mov    ebx,edi
c001ca06:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001ca0e:	0f 86 9e 00 00 00    	jbe    c001cab2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c001ca14:	e8 2f 14 00 00       	call   c001de48 <lockScheduler()>
c001ca19:	51                   	push   ecx
c001ca1a:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001ca21:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca27:	6a 00                	push   0x0
c001ca29:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca2e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca31:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca37:	e8 a8 57 ff ff       	call   c00121e4 <VAS::mapOtherVASIn(bool, VAS*)>
c001ca3c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ca40:	c1 e7 0c             	shl    edi,0xc
c001ca43:	01 df                	add    edi,ebx
c001ca45:	83 c4 10             	add    esp,0x10
c001ca48:	39 fb                	cmp    ebx,edi
c001ca4a:	74 61                	je     c001caad <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x274>
c001ca4c:	e8 91 34 ff ff       	call   c000fee2 <Phys::allocatePage()>
c001ca51:	6a 07                	push   0x7
c001ca53:	89 c5                	mov    ebp,eax
c001ca55:	56                   	push   esi
c001ca56:	50                   	push   eax
c001ca57:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca5c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca5f:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca65:	e8 10 59 ff ff       	call   c001237a <VAS::mapPage(unsigned long, unsigned long, int)>
c001ca6a:	58                   	pop    eax
c001ca6b:	5a                   	pop    edx
c001ca6c:	68 07 0c 00 00       	push   0xc07
c001ca71:	53                   	push   ebx
c001ca72:	81 c3 00 10 00 00    	add    ebx,0x1000
c001ca78:	55                   	push   ebp
c001ca79:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001ca80:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca86:	6a 00                	push   0x0
c001ca88:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca8d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca90:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca96:	e8 99 5c ff ff       	call   c0012734 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001ca9b:	83 c4 1c             	add    esp,0x1c
c001ca9e:	68 00 10 00 00       	push   0x1000
c001caa3:	6a 00                	push   0x0
c001caa5:	56                   	push   esi
c001caa6:	e8 cd 3c fe ff       	call   c0000778 <memset>
c001caab:	eb 98                	jmp    c001ca45 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x20c>
c001caad:	e8 98 13 00 00       	call   c001de4a <unlockScheduler()>
c001cab2:	83 ec 0c             	sub    esp,0xc
c001cab5:	56                   	push   esi
c001cab6:	e8 58 55 ff ff       	call   c0012013 <Virt::freeKernelVirtualPages(unsigned long)>
c001cabb:	83 c4 10             	add    esp,0x10
c001cabe:	b0 01                	mov    al,0x1
c001cac0:	81 c4 2c 10 00 00    	add    esp,0x102c
c001cac6:	5b                   	pop    ebx
c001cac7:	5e                   	pop    esi
c001cac8:	5f                   	pop    edi
c001cac9:	5d                   	pop    ebp
c001caca:	c3                   	ret    

c001cacb <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001cacb:	55                   	push   ebp
c001cacc:	57                   	push   edi
c001cacd:	56                   	push   esi
c001cace:	53                   	push   ebx
c001cacf:	83 ec 48             	sub    esp,0x48
c001cad2:	68 14 01 00 00       	push   0x114
c001cad7:	e8 64 2d ff ff       	call   c000f840 <malloc>
c001cadc:	83 c4 0c             	add    esp,0xc
c001cadf:	89 c6                	mov    esi,eax
c001cae1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001cae5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001cae9:	50                   	push   eax
c001caea:	e8 db 69 ff ff       	call   c00134ca <File::File(char const*, Process*)>
c001caef:	58                   	pop    eax
c001caf0:	5a                   	pop    edx
c001caf1:	6a 01                	push   0x1
c001caf3:	56                   	push   esi
c001caf4:	e8 35 6a ff ff       	call   c001352e <File::open(FileOpenMode)>
c001caf9:	83 c4 10             	add    esp,0x10
c001cafc:	85 c0                	test   eax,eax
c001cafe:	0f 85 47 01 00 00    	jne    c001cc4b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb04:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001cb0c:	83 ec 0c             	sub    esp,0xc
c001cb0f:	6a 34                	push   0x34
c001cb11:	e8 2a 2d ff ff       	call   c000f840 <malloc>
c001cb16:	89 c3                	mov    ebx,eax
c001cb18:	58                   	pop    eax
c001cb19:	8b 06                	mov    eax,DWORD PTR [esi]
c001cb1b:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001cb1f:	57                   	push   edi
c001cb20:	53                   	push   ebx
c001cb21:	6a 00                	push   0x0
c001cb23:	6a 34                	push   0x34
c001cb25:	56                   	push   esi
c001cb26:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cb29:	83 c4 20             	add    esp,0x20
c001cb2c:	85 c0                	test   eax,eax
c001cb2e:	0f 85 17 01 00 00    	jne    c001cc4b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb34:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001cb3a:	0f 85 0b 01 00 00    	jne    c001cc4b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb40:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001cb43:	85 c0                	test   eax,eax
c001cb45:	0f 84 00 01 00 00    	je     c001cc4b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb4b:	31 d2                	xor    edx,edx
c001cb4d:	55                   	push   ebp
c001cb4e:	52                   	push   edx
c001cb4f:	50                   	push   eax
c001cb50:	56                   	push   esi
c001cb51:	e8 96 6a ff ff       	call   c00135ec <File::seek(unsigned long long)>
c001cb56:	83 c4 10             	add    esp,0x10
c001cb59:	85 c0                	test   eax,eax
c001cb5b:	0f 85 ea 00 00 00    	jne    c001cc4b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb61:	83 ec 0c             	sub    esp,0xc
c001cb64:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001cb67:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cb6b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cb6f:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cb73:	0f af c2             	imul   eax,edx
c001cb76:	50                   	push   eax
c001cb77:	e8 c4 2c ff ff       	call   c000f840 <malloc>
c001cb7c:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cb7e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cb82:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cb85:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cb89:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cb8d:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cb91:	0f af c2             	imul   eax,edx
c001cb94:	99                   	cdq    
c001cb95:	52                   	push   edx
c001cb96:	50                   	push   eax
c001cb97:	56                   	push   esi
c001cb98:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cb9b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001cb9e:	83 c4 20             	add    esp,0x20
c001cba1:	85 c0                	test   eax,eax
c001cba3:	0f 84 a2 00 00 00    	je     c001cc4b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cba9:	31 d2                	xor    edx,edx
c001cbab:	51                   	push   ecx
c001cbac:	52                   	push   edx
c001cbad:	50                   	push   eax
c001cbae:	56                   	push   esi
c001cbaf:	e8 38 6a ff ff       	call   c00135ec <File::seek(unsigned long long)>
c001cbb4:	83 c4 10             	add    esp,0x10
c001cbb7:	85 c0                	test   eax,eax
c001cbb9:	0f 85 8c 00 00 00    	jne    c001cc4b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cbbf:	83 ec 0c             	sub    esp,0xc
c001cbc2:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cbc6:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cbca:	31 ed                	xor    ebp,ebp
c001cbcc:	0f af c2             	imul   eax,edx
c001cbcf:	50                   	push   eax
c001cbd0:	e8 6b 2c ff ff       	call   c000f840 <malloc>
c001cbd5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cbd7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cbdb:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cbde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbe2:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cbe6:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cbea:	0f af c2             	imul   eax,edx
c001cbed:	99                   	cdq    
c001cbee:	52                   	push   edx
c001cbef:	50                   	push   eax
c001cbf0:	56                   	push   esi
c001cbf1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cbf4:	83 c4 20             	add    esp,0x20
c001cbf7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001cbff:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001cc03:	0f 86 80 00 00 00    	jbe    c001cc89 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001cc09:	0f b7 fd             	movzx  edi,bp
c001cc0c:	c1 e7 05             	shl    edi,0x5
c001cc0f:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001cc13:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001cc16:	75 6b                	jne    c001cc83 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cc18:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001cc1b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cc1f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001cc22:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cc26:	52                   	push   edx
c001cc27:	31 d2                	xor    edx,edx
c001cc29:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001cc2c:	52                   	push   edx
c001cc2d:	50                   	push   eax
c001cc2e:	56                   	push   esi
c001cc2f:	e8 b8 69 ff ff       	call   c00135ec <File::seek(unsigned long long)>
c001cc34:	83 c4 10             	add    esp,0x10
c001cc37:	85 c0                	test   eax,eax
c001cc39:	74 17                	je     c001cc52 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001cc3b:	83 ec 0c             	sub    esp,0xc
c001cc3e:	68 52 c2 02 c0       	push   0xc002c252
c001cc43:	e8 29 63 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001cc48:	83 c4 10             	add    esp,0x10
c001cc4b:	31 c0                	xor    eax,eax
c001cc4d:	e9 87 00 00 00       	jmp    c001ccd9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001cc52:	83 ec 0c             	sub    esp,0xc
c001cc55:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001cc58:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001cc5b:	50                   	push   eax
c001cc5c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cc60:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cc64:	56                   	push   esi
c001cc65:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001cc69:	e8 cb fb ff ff       	call   c001c839 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001cc6e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cc72:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001cc76:	83 c4 20             	add    esp,0x20
c001cc79:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001cc7d:	73 04                	jae    c001cc83 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cc7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cc83:	45                   	inc    ebp
c001cc84:	e9 76 ff ff ff       	jmp    c001cbff <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001cc89:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001cc8d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cc91:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cc95:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001cc9b:	83 ec 0c             	sub    esp,0xc
c001cc9e:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001cca4:	25 00 f0 ff ff       	and    eax,0xfffff000
c001cca9:	05 00 10 00 00       	add    eax,0x1000
c001ccae:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001ccb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccb5:	e8 96 2b ff ff       	call   c000f850 <free>
c001ccba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ccbd:	e8 8e 2b ff ff       	call   c000f850 <free>
c001ccc2:	58                   	pop    eax
c001ccc3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ccc7:	e8 84 2b ff ff       	call   c000f850 <free>
c001cccc:	89 34 24             	mov    DWORD PTR [esp],esi
c001cccf:	e8 b8 68 ff ff       	call   c001358c <File::close()>
c001ccd4:	83 c4 10             	add    esp,0x10
c001ccd7:	b0 01                	mov    al,0x1
c001ccd9:	83 c4 3c             	add    esp,0x3c
c001ccdc:	5b                   	pop    ebx
c001ccdd:	5e                   	pop    esi
c001ccde:	5f                   	pop    edi
c001ccdf:	5d                   	pop    ebp
c001cce0:	c3                   	ret    

c001cce1 <Thr::runtimeReferenceHelper()>:
c001cce1:	83 ec 18             	sub    esp,0x18
c001cce4:	68 5a c2 02 c0       	push   0xc002c25a
c001cce9:	e8 83 62 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001ccee:	fa                   	cli    
c001ccef:	83 c4 10             	add    esp,0x10
c001ccf2:	eb fe                	jmp    c001ccf2 <Thr::runtimeReferenceHelper()+0x11>

c001ccf4 <Thr::getAddressOfKernelSymbol(char const*)>:
c001ccf4:	57                   	push   edi
c001ccf5:	56                   	push   esi
c001ccf6:	53                   	push   ebx
c001ccf7:	31 db                	xor    ebx,ebx
c001ccf9:	39 1d 60 1b 03 c0    	cmp    DWORD PTR ds:0xc0031b60,ebx
c001ccff:	7e 3c                	jle    c001cd3d <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001cd01:	8b 34 9d e0 1a 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffce520]
c001cd08:	31 ff                	xor    edi,edi
c001cd0a:	39 3c 9d e0 19 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffce620],edi
c001cd11:	7e 27                	jle    c001cd3a <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001cd13:	50                   	push   eax
c001cd14:	50                   	push   eax
c001cd15:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cd19:	8b 06                	mov    eax,DWORD PTR [esi]
c001cd1b:	03 04 9d 60 1a 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffce5a0]
c001cd22:	50                   	push   eax
c001cd23:	e8 98 3b fe ff       	call   c00008c0 <strcmp>
c001cd28:	83 c4 10             	add    esp,0x10
c001cd2b:	85 c0                	test   eax,eax
c001cd2d:	75 05                	jne    c001cd34 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001cd2f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001cd32:	eb 0b                	jmp    c001cd3f <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001cd34:	83 c6 10             	add    esi,0x10
c001cd37:	47                   	inc    edi
c001cd38:	eb d0                	jmp    c001cd0a <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001cd3a:	43                   	inc    ebx
c001cd3b:	eb bc                	jmp    c001ccf9 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001cd3d:	31 c0                	xor    eax,eax
c001cd3f:	5b                   	pop    ebx
c001cd40:	5e                   	pop    esi
c001cd41:	5f                   	pop    edi
c001cd42:	c3                   	ret    

c001cd43 <Thr::loadKernelSymbolTable(char const*)>:
c001cd43:	55                   	push   ebp
c001cd44:	57                   	push   edi
c001cd45:	56                   	push   esi
c001cd46:	53                   	push   ebx
c001cd47:	83 ec 68             	sub    esp,0x68
c001cd4a:	8b 35 b4 1b 03 c0    	mov    esi,DWORD PTR ds:0xc0031bb4
c001cd50:	68 14 01 00 00       	push   0x114
c001cd55:	e8 e6 2a ff ff       	call   c000f840 <malloc>
c001cd5a:	83 c4 0c             	add    esp,0xc
c001cd5d:	89 c3                	mov    ebx,eax
c001cd5f:	56                   	push   esi
c001cd60:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001cd64:	50                   	push   eax
c001cd65:	e8 60 67 ff ff       	call   c00134ca <File::File(char const*, Process*)>
c001cd6a:	5e                   	pop    esi
c001cd6b:	5f                   	pop    edi
c001cd6c:	6a 01                	push   0x1
c001cd6e:	53                   	push   ebx
c001cd6f:	e8 ba 67 ff ff       	call   c001352e <File::open(FileOpenMode)>
c001cd74:	83 c4 10             	add    esp,0x10
c001cd77:	85 c0                	test   eax,eax
c001cd79:	74 0a                	je     c001cd85 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001cd7b:	83 ec 0c             	sub    esp,0xc
c001cd7e:	68 7c c2 02 c0       	push   0xc002c27c
c001cd83:	eb 34                	jmp    c001cdb9 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001cd85:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001cd8d:	83 ec 0c             	sub    esp,0xc
c001cd90:	6a 34                	push   0x34
c001cd92:	e8 a9 2a ff ff       	call   c000f840 <malloc>
c001cd97:	59                   	pop    ecx
c001cd98:	89 c7                	mov    edi,eax
c001cd9a:	8d 74 24 34          	lea    esi,[esp+0x34]
c001cd9e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cda0:	56                   	push   esi
c001cda1:	57                   	push   edi
c001cda2:	6a 00                	push   0x0
c001cda4:	6a 34                	push   0x34
c001cda6:	53                   	push   ebx
c001cda7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cdaa:	83 c4 20             	add    esp,0x20
c001cdad:	85 c0                	test   eax,eax
c001cdaf:	74 17                	je     c001cdc8 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001cdb1:	83 ec 0c             	sub    esp,0xc
c001cdb4:	68 93 c2 02 c0       	push   0xc002c293
c001cdb9:	e8 65 d8 ff ff       	call   c001a623 <Krnl::panic(char const*)>
c001cdbe:	83 c4 10             	add    esp,0x10
c001cdc1:	31 c0                	xor    eax,eax
c001cdc3:	e9 31 02 00 00       	jmp    c001cff9 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001cdc8:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cdce:	75 e1                	jne    c001cdb1 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cdd0:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cdd3:	85 c0                	test   eax,eax
c001cdd5:	74 da                	je     c001cdb1 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cdd7:	52                   	push   edx
c001cdd8:	31 d2                	xor    edx,edx
c001cdda:	52                   	push   edx
c001cddb:	50                   	push   eax
c001cddc:	53                   	push   ebx
c001cddd:	e8 0a 68 ff ff       	call   c00135ec <File::seek(unsigned long long)>
c001cde2:	83 c4 10             	add    esp,0x10
c001cde5:	85 c0                	test   eax,eax
c001cde7:	75 c8                	jne    c001cdb1 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cde9:	83 ec 0c             	sub    esp,0xc
c001cdec:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cdf0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cdf4:	31 ed                	xor    ebp,ebp
c001cdf6:	0f af c2             	imul   eax,edx
c001cdf9:	50                   	push   eax
c001cdfa:	e8 41 2a ff ff       	call   c000f840 <malloc>
c001cdff:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001ce01:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ce05:	89 34 24             	mov    DWORD PTR [esp],esi
c001ce08:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ce0c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001ce10:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce14:	0f af c2             	imul   eax,edx
c001ce17:	99                   	cdq    
c001ce18:	52                   	push   edx
c001ce19:	50                   	push   eax
c001ce1a:	53                   	push   ebx
c001ce1b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ce1e:	83 c4 20             	add    esp,0x20
c001ce21:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ce29:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001ce31:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ce39:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ce41:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001ce45:	0f 86 aa 00 00 00    	jbe    c001cef5 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001ce4b:	0f b7 f5             	movzx  esi,bp
c001ce4e:	6b f6 28             	imul   esi,esi,0x28
c001ce51:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ce55:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ce58:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ce5c:	50                   	push   eax
c001ce5d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ce61:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001ce65:	8b 16                	mov    edx,DWORD PTR [esi]
c001ce67:	6b c0 28             	imul   eax,eax,0x28
c001ce6a:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001ce6e:	89 d0                	mov    eax,edx
c001ce70:	31 d2                	xor    edx,edx
c001ce72:	52                   	push   edx
c001ce73:	50                   	push   eax
c001ce74:	53                   	push   ebx
c001ce75:	e8 72 67 ff ff       	call   c00135ec <File::seek(unsigned long long)>
c001ce7a:	83 c4 0c             	add    esp,0xc
c001ce7d:	6a 20                	push   0x20
c001ce7f:	6a 00                	push   0x0
c001ce81:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001ce85:	52                   	push   edx
c001ce86:	e8 ed 38 fe ff       	call   c0000778 <memset>
c001ce8b:	58                   	pop    eax
c001ce8c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ce8e:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001ce92:	51                   	push   ecx
c001ce93:	8d 54 24 40          	lea    edx,[esp+0x40]
c001ce97:	52                   	push   edx
c001ce98:	6a 00                	push   0x0
c001ce9a:	6a 1f                	push   0x1f
c001ce9c:	53                   	push   ebx
c001ce9d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cea0:	83 c4 18             	add    esp,0x18
c001cea3:	68 aa c2 02 c0       	push   0xc002c2aa
c001cea8:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001ceac:	52                   	push   edx
c001cead:	e8 0e 3a fe ff       	call   c00008c0 <strcmp>
c001ceb2:	83 c4 10             	add    esp,0x10
c001ceb5:	85 c0                	test   eax,eax
c001ceb7:	75 0f                	jne    c001cec8 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001ceb9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cebc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cec0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cec4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cec8:	50                   	push   eax
c001cec9:	50                   	push   eax
c001ceca:	68 b2 c2 02 c0       	push   0xc002c2b2
c001cecf:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001ced3:	50                   	push   eax
c001ced4:	e8 e7 39 fe ff       	call   c00008c0 <strcmp>
c001ced9:	83 c4 10             	add    esp,0x10
c001cedc:	85 c0                	test   eax,eax
c001cede:	75 0f                	jne    c001ceef <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001cee0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cee3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cee7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ceeb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ceef:	45                   	inc    ebp
c001cef0:	e9 4c ff ff ff       	jmp    c001ce41 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001cef5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001cefa:	75 10                	jne    c001cf0c <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001cefc:	83 ec 0c             	sub    esp,0xc
c001ceff:	68 ba c2 02 c0       	push   0xc002c2ba
c001cf04:	e8 1a d7 ff ff       	call   c001a623 <Krnl::panic(char const*)>
c001cf09:	83 c4 10             	add    esp,0x10
c001cf0c:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001cf11:	75 10                	jne    c001cf23 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001cf13:	83 ec 0c             	sub    esp,0xc
c001cf16:	68 ba c2 02 c0       	push   0xc002c2ba
c001cf1b:	e8 03 d7 ff ff       	call   c001a623 <Krnl::panic(char const*)>
c001cf20:	83 c4 10             	add    esp,0x10
c001cf23:	31 d2                	xor    edx,edx
c001cf25:	50                   	push   eax
c001cf26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf2a:	52                   	push   edx
c001cf2b:	50                   	push   eax
c001cf2c:	53                   	push   ebx
c001cf2d:	e8 ba 66 ff ff       	call   c00135ec <File::seek(unsigned long long)>
c001cf32:	5a                   	pop    edx
c001cf33:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cf37:	e8 04 29 ff ff       	call   c000f840 <malloc>
c001cf3c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cf40:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cf44:	31 c9                	xor    ecx,ecx
c001cf46:	5e                   	pop    esi
c001cf47:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cf49:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001cf4d:	55                   	push   ebp
c001cf4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf52:	51                   	push   ecx
c001cf53:	52                   	push   edx
c001cf54:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001cf58:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001cf5c:	53                   	push   ebx
c001cf5d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cf60:	83 c4 14             	add    esp,0x14
c001cf63:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cf67:	e8 d4 28 ff ff       	call   c000f840 <malloc>
c001cf6c:	89 c6                	mov    esi,eax
c001cf6e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cf70:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf73:	56                   	push   esi
c001cf74:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cf78:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001cf7c:	51                   	push   ecx
c001cf7d:	52                   	push   edx
c001cf7e:	53                   	push   ebx
c001cf7f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cf82:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cf86:	8b 15 60 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031b60
c001cf8c:	83 c4 1c             	add    esp,0x1c
c001cf8f:	c1 e8 04             	shr    eax,0x4
c001cf92:	89 04 95 e0 19 03 c0 	mov    DWORD PTR [edx*4-0x3ffce620],eax
c001cf99:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cf9d:	31 d2                	xor    edx,edx
c001cf9f:	52                   	push   edx
c001cfa0:	50                   	push   eax
c001cfa1:	53                   	push   ebx
c001cfa2:	e8 45 66 ff ff       	call   c00135ec <File::seek(unsigned long long)>
c001cfa7:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cfa9:	31 d2                	xor    edx,edx
c001cfab:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cfae:	56                   	push   esi
c001cfaf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cfb3:	52                   	push   edx
c001cfb4:	50                   	push   eax
c001cfb5:	53                   	push   ebx
c001cfb6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cfb9:	83 c4 14             	add    esp,0x14
c001cfbc:	53                   	push   ebx
c001cfbd:	e8 ca 65 ff ff       	call   c001358c <File::close()>
c001cfc2:	5d                   	pop    ebp
c001cfc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cfc7:	e8 84 28 ff ff       	call   c000f850 <free>
c001cfcc:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cfcf:	e8 7c 28 ff ff       	call   c000f850 <free>
c001cfd4:	a1 60 1b 03 c0       	mov    eax,ds:0xc0031b60
c001cfd9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cfdd:	8d 50 01             	lea    edx,[eax+0x1]
c001cfe0:	89 0c 85 e0 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce520],ecx
c001cfe7:	89 34 85 60 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce5a0],esi
c001cfee:	89 15 60 1b 03 c0    	mov    DWORD PTR ds:0xc0031b60,edx
c001cff4:	83 c4 10             	add    esp,0x10
c001cff7:	b0 01                	mov    al,0x1
c001cff9:	83 c4 5c             	add    esp,0x5c
c001cffc:	5b                   	pop    ebx
c001cffd:	5e                   	pop    esi
c001cffe:	5f                   	pop    edi
c001cfff:	5d                   	pop    ebp
c001d000:	c3                   	ret    

c001d001 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001d001:	55                   	push   ebp
c001d002:	57                   	push   edi
c001d003:	56                   	push   esi
c001d004:	53                   	push   ebx
c001d005:	81 ec 68 03 00 00    	sub    esp,0x368
c001d00b:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001d012:	8b 1d b4 1b 03 c0    	mov    ebx,DWORD PTR ds:0xc0031bb4
c001d018:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001d01c:	68 14 01 00 00       	push   0x114
c001d021:	e8 1a 28 ff ff       	call   c000f840 <malloc>
c001d026:	83 c4 0c             	add    esp,0xc
c001d029:	89 c5                	mov    ebp,eax
c001d02b:	53                   	push   ebx
c001d02c:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001d033:	50                   	push   eax
c001d034:	e8 91 64 ff ff       	call   c00134ca <File::File(char const*, Process*)>
c001d039:	5e                   	pop    esi
c001d03a:	5f                   	pop    edi
c001d03b:	6a 01                	push   0x1
c001d03d:	55                   	push   ebp
c001d03e:	e8 eb 64 ff ff       	call   c001352e <File::open(FileOpenMode)>
c001d043:	83 c4 10             	add    esp,0x10
c001d046:	85 c0                	test   eax,eax
c001d048:	0f 85 8d 06 00 00    	jne    c001d6db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d04e:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001d056:	83 ec 0c             	sub    esp,0xc
c001d059:	6a 34                	push   0x34
c001d05b:	e8 e0 27 ff ff       	call   c000f840 <malloc>
c001d060:	5b                   	pop    ebx
c001d061:	89 c7                	mov    edi,eax
c001d063:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d067:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d06a:	53                   	push   ebx
c001d06b:	57                   	push   edi
c001d06c:	6a 00                	push   0x0
c001d06e:	6a 34                	push   0x34
c001d070:	55                   	push   ebp
c001d071:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d074:	83 c4 20             	add    esp,0x20
c001d077:	85 c0                	test   eax,eax
c001d079:	0f 85 5c 06 00 00    	jne    c001d6db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d07f:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d085:	0f 85 50 06 00 00    	jne    c001d6db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d08b:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d08e:	85 c0                	test   eax,eax
c001d090:	0f 84 45 06 00 00    	je     c001d6db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d096:	31 d2                	xor    edx,edx
c001d098:	51                   	push   ecx
c001d099:	52                   	push   edx
c001d09a:	50                   	push   eax
c001d09b:	55                   	push   ebp
c001d09c:	e8 4b 65 ff ff       	call   c00135ec <File::seek(unsigned long long)>
c001d0a1:	83 c4 10             	add    esp,0x10
c001d0a4:	85 c0                	test   eax,eax
c001d0a6:	0f 85 2f 06 00 00    	jne    c001d6db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d0ac:	83 ec 0c             	sub    esp,0xc
c001d0af:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001d0b2:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d0b6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001d0ba:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d0be:	0f af c2             	imul   eax,edx
c001d0c1:	50                   	push   eax
c001d0c2:	e8 79 27 ff ff       	call   c000f840 <malloc>
c001d0c7:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d0ca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d0ce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d0d1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d0d5:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d0d9:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d0dd:	0f af c2             	imul   eax,edx
c001d0e0:	99                   	cdq    
c001d0e1:	52                   	push   edx
c001d0e2:	50                   	push   eax
c001d0e3:	55                   	push   ebp
c001d0e4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d0e7:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001d0ea:	83 c4 20             	add    esp,0x20
c001d0ed:	85 c0                	test   eax,eax
c001d0ef:	0f 84 e6 05 00 00    	je     c001d6db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d0f5:	52                   	push   edx
c001d0f6:	31 d2                	xor    edx,edx
c001d0f8:	52                   	push   edx
c001d0f9:	50                   	push   eax
c001d0fa:	55                   	push   ebp
c001d0fb:	e8 ec 64 ff ff       	call   c00135ec <File::seek(unsigned long long)>
c001d100:	83 c4 10             	add    esp,0x10
c001d103:	85 c0                	test   eax,eax
c001d105:	0f 85 d0 05 00 00    	jne    c001d6db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d10b:	83 ec 0c             	sub    esp,0xc
c001d10e:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d112:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d116:	31 f6                	xor    esi,esi
c001d118:	0f af c2             	imul   eax,edx
c001d11b:	50                   	push   eax
c001d11c:	e8 1f 27 ff ff       	call   c000f840 <malloc>
c001d121:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d124:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d128:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d12b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d12f:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d133:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d137:	0f af c2             	imul   eax,edx
c001d13a:	99                   	cdq    
c001d13b:	52                   	push   edx
c001d13c:	50                   	push   eax
c001d13d:	55                   	push   ebp
c001d13e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d141:	83 c4 20             	add    esp,0x20
c001d144:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d148:	0f 86 8a 00 00 00    	jbe    c001d1d8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d14e:	0f b7 de             	movzx  ebx,si
c001d151:	c1 e3 05             	shl    ebx,0x5
c001d154:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d158:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d15b:	75 75                	jne    c001d1d2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d15d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d160:	31 d2                	xor    edx,edx
c001d162:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d166:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d169:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d16d:	50                   	push   eax
c001d16e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d171:	52                   	push   edx
c001d172:	50                   	push   eax
c001d173:	55                   	push   ebp
c001d174:	e8 73 64 ff ff       	call   c00135ec <File::seek(unsigned long long)>
c001d179:	83 c4 10             	add    esp,0x10
c001d17c:	85 c0                	test   eax,eax
c001d17e:	0f 85 57 05 00 00    	jne    c001d6db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d184:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d18b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d18e:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d192:	31 d2                	xor    edx,edx
c001d194:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d198:	83 ec 0c             	sub    esp,0xc
c001d19b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d19f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d1a6:	50                   	push   eax
c001d1a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d1ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1af:	52                   	push   edx
c001d1b0:	50                   	push   eax
c001d1b1:	55                   	push   ebp
c001d1b2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d1b5:	83 c4 1c             	add    esp,0x1c
c001d1b8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d1bb:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d1be:	50                   	push   eax
c001d1bf:	6a 00                	push   0x0
c001d1c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1c5:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d1c9:	50                   	push   eax
c001d1ca:	e8 a9 35 fe ff       	call   c0000778 <memset>
c001d1cf:	83 c4 10             	add    esp,0x10
c001d1d2:	46                   	inc    esi
c001d1d3:	e9 6c ff ff ff       	jmp    c001d144 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d1d8:	53                   	push   ebx
c001d1d9:	31 db                	xor    ebx,ebx
c001d1db:	68 00 01 00 00       	push   0x100
c001d1e0:	6a 00                	push   0x0
c001d1e2:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d1e6:	50                   	push   eax
c001d1e7:	e8 8c 35 fe ff       	call   c0000778 <memset>
c001d1ec:	83 c4 0c             	add    esp,0xc
c001d1ef:	68 00 01 00 00       	push   0x100
c001d1f4:	6a 00                	push   0x0
c001d1f6:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d1fd:	50                   	push   eax
c001d1fe:	e8 75 35 fe ff       	call   c0000778 <memset>
c001d203:	83 c4 10             	add    esp,0x10
c001d206:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d20e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d216:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d21e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d226:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d22e:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d232:	0f 86 30 01 00 00    	jbe    c001d368 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d238:	0f b7 f3             	movzx  esi,bx
c001d23b:	6b f6 28             	imul   esi,esi,0x28
c001d23e:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d242:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d245:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d249:	52                   	push   edx
c001d24a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d24e:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d252:	8b 06                	mov    eax,DWORD PTR [esi]
c001d254:	6b d2 28             	imul   edx,edx,0x28
c001d257:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d25b:	31 d2                	xor    edx,edx
c001d25d:	52                   	push   edx
c001d25e:	50                   	push   eax
c001d25f:	55                   	push   ebp
c001d260:	e8 87 63 ff ff       	call   c00135ec <File::seek(unsigned long long)>
c001d265:	83 c4 0c             	add    esp,0xc
c001d268:	6a 20                	push   0x20
c001d26a:	6a 00                	push   0x0
c001d26c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d273:	51                   	push   ecx
c001d274:	e8 ff 34 fe ff       	call   c0000778 <memset>
c001d279:	59                   	pop    ecx
c001d27a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d27d:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d281:	52                   	push   edx
c001d282:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d289:	51                   	push   ecx
c001d28a:	6a 00                	push   0x0
c001d28c:	6a 1f                	push   0x1f
c001d28e:	55                   	push   ebp
c001d28f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d292:	83 c4 1c             	add    esp,0x1c
c001d295:	6a 09                	push   0x9
c001d297:	68 d4 c2 02 c0       	push   0xc002c2d4
c001d29c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d2a3:	51                   	push   ecx
c001d2a4:	e8 97 33 fe ff       	call   c0000640 <memcmp>
c001d2a9:	83 c4 10             	add    esp,0x10
c001d2ac:	85 c0                	test   eax,eax
c001d2ae:	75 21                	jne    c001d2d1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d2b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d2b4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d2b8:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d2bc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d2c0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d2c3:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d2ca:	89 d0                	mov    eax,edx
c001d2cc:	40                   	inc    eax
c001d2cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d2d1:	50                   	push   eax
c001d2d2:	6a 09                	push   0x9
c001d2d4:	68 de c2 02 c0       	push   0xc002c2de
c001d2d9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d2e0:	50                   	push   eax
c001d2e1:	e8 5a 33 fe ff       	call   c0000640 <memcmp>
c001d2e6:	83 c4 10             	add    esp,0x10
c001d2e9:	85 c0                	test   eax,eax
c001d2eb:	75 21                	jne    c001d30e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d2ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d2f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d2f5:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d2f9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d2fd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d300:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d307:	89 d0                	mov    eax,edx
c001d309:	40                   	inc    eax
c001d30a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d30e:	50                   	push   eax
c001d30f:	50                   	push   eax
c001d310:	68 aa c2 02 c0       	push   0xc002c2aa
c001d315:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d31c:	50                   	push   eax
c001d31d:	e8 9e 35 fe ff       	call   c00008c0 <strcmp>
c001d322:	83 c4 10             	add    esp,0x10
c001d325:	85 c0                	test   eax,eax
c001d327:	75 0f                	jne    c001d338 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d329:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d32c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d330:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d334:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d338:	50                   	push   eax
c001d339:	50                   	push   eax
c001d33a:	68 b2 c2 02 c0       	push   0xc002c2b2
c001d33f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d346:	50                   	push   eax
c001d347:	e8 74 35 fe ff       	call   c00008c0 <strcmp>
c001d34c:	83 c4 10             	add    esp,0x10
c001d34f:	85 c0                	test   eax,eax
c001d351:	75 0f                	jne    c001d362 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d353:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d356:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d35a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d35e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d362:	43                   	inc    ebx
c001d363:	e9 c6 fe ff ff       	jmp    c001d22e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d368:	31 d2                	xor    edx,edx
c001d36a:	50                   	push   eax
c001d36b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d36f:	52                   	push   edx
c001d370:	50                   	push   eax
c001d371:	55                   	push   ebp
c001d372:	e8 75 62 ff ff       	call   c00135ec <File::seek(unsigned long long)>
c001d377:	58                   	pop    eax
c001d378:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d37c:	e8 bf 24 ff ff       	call   c000f840 <malloc>
c001d381:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d384:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d388:	31 d2                	xor    edx,edx
c001d38a:	58                   	pop    eax
c001d38b:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d38f:	53                   	push   ebx
c001d390:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d394:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d398:	52                   	push   edx
c001d399:	50                   	push   eax
c001d39a:	55                   	push   ebp
c001d39b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d39e:	83 c4 14             	add    esp,0x14
c001d3a1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d3a5:	e8 96 24 ff ff       	call   c000f840 <malloc>
c001d3aa:	31 d2                	xor    edx,edx
c001d3ac:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d3b0:	83 c4 0c             	add    esp,0xc
c001d3b3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d3b7:	52                   	push   edx
c001d3b8:	50                   	push   eax
c001d3b9:	55                   	push   ebp
c001d3ba:	e8 2d 62 ff ff       	call   c00135ec <File::seek(unsigned long long)>
c001d3bf:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d3c2:	31 d2                	xor    edx,edx
c001d3c4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d3c7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d3cb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d3cf:	52                   	push   edx
c001d3d0:	50                   	push   eax
c001d3d1:	55                   	push   ebp
c001d3d2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d3d5:	83 c4 20             	add    esp,0x20
c001d3d8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d3e0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d3e4:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d3e8:	0f 84 f1 02 00 00    	je     c001d6df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c001d3ee:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d3f5:	31 d2                	xor    edx,edx
c001d3f7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d3fb:	c1 e8 03             	shr    eax,0x3
c001d3fe:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d402:	51                   	push   ecx
c001d403:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d407:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d40b:	52                   	push   edx
c001d40c:	50                   	push   eax
c001d40d:	55                   	push   ebp
c001d40e:	e8 d9 61 ff ff       	call   c00135ec <File::seek(unsigned long long)>
c001d413:	5b                   	pop    ebx
c001d414:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d418:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d41f:	e8 1c 24 ff ff       	call   c000f840 <malloc>
c001d424:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d427:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d42b:	31 d2                	xor    edx,edx
c001d42d:	5e                   	pop    esi
c001d42e:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d432:	50                   	push   eax
c001d433:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d437:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d43b:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d442:	52                   	push   edx
c001d443:	50                   	push   eax
c001d444:	55                   	push   ebp
c001d445:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d448:	83 c4 20             	add    esp,0x20
c001d44b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d453:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d457:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d45b:	0f 8d 62 02 00 00    	jge    c001d6c3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c2>
c001d461:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d465:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d469:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d46e:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d471:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d475:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d479:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d47d:	89 d8                	mov    eax,ebx
c001d47f:	c1 e8 08             	shr    eax,0x8
c001d482:	89 c6                	mov    esi,eax
c001d484:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d488:	c1 e6 04             	shl    esi,0x4
c001d48b:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d48f:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d492:	85 d2                	test   edx,edx
c001d494:	0f 85 bf 00 00 00    	jne    c001d559 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d49a:	83 ec 0c             	sub    esp,0xc
c001d49d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d4a1:	03 06                	add    eax,DWORD PTR [esi]
c001d4a3:	50                   	push   eax
c001d4a4:	e8 4b f8 ff ff       	call   c001ccf4 <Thr::getAddressOfKernelSymbol(char const*)>
c001d4a9:	83 c4 10             	add    esp,0x10
c001d4ac:	89 c2                	mov    edx,eax
c001d4ae:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d4b3:	85 c0                	test   eax,eax
c001d4b5:	0f 85 9e 00 00 00    	jne    c001d559 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d4bb:	83 ec 0c             	sub    esp,0xc
c001d4be:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d4c2:	03 06                	add    eax,DWORD PTR [esi]
c001d4c4:	50                   	push   eax
c001d4c5:	e8 2b 10 ff ff       	call   c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>
c001d4ca:	83 c4 10             	add    esp,0x10
c001d4cd:	89 c2                	mov    edx,eax
c001d4cf:	85 c0                	test   eax,eax
c001d4d1:	0f 85 82 00 00 00    	jne    c001d559 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d4d7:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d4db:	50                   	push   eax
c001d4dc:	50                   	push   eax
c001d4dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4e1:	03 06                	add    eax,DWORD PTR [esi]
c001d4e3:	50                   	push   eax
c001d4e4:	68 e8 c2 02 c0       	push   0xc002c2e8
c001d4e9:	e8 83 5a ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001d4ee:	58                   	pop    eax
c001d4ef:	5a                   	pop    edx
c001d4f0:	68 02 c3 02 c0       	push   0xc002c302
c001d4f5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d4fc:	50                   	push   eax
c001d4fd:	e8 32 33 fe ff       	call   c0000834 <strcpy>
c001d502:	59                   	pop    ecx
c001d503:	58                   	pop    eax
c001d504:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d508:	03 06                	add    eax,DWORD PTR [esi]
c001d50a:	50                   	push   eax
c001d50b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d512:	50                   	push   eax
c001d513:	e8 5c 34 fe ff       	call   c0000974 <strcat>
c001d518:	58                   	pop    eax
c001d519:	5a                   	pop    edx
c001d51a:	68 98 c3 02 c0       	push   0xc002c398
c001d51f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d526:	50                   	push   eax
c001d527:	e8 48 34 fe ff       	call   c0000974 <strcat>
c001d52c:	83 c4 10             	add    esp,0x10
c001d52f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d534:	0f 84 43 01 00 00    	je     c001d67d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d53a:	83 ec 0c             	sub    esp,0xc
c001d53d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d544:	50                   	push   eax
c001d545:	e8 d9 d0 ff ff       	call   c001a623 <Krnl::panic(char const*)>
c001d54a:	83 c4 10             	add    esp,0x10
c001d54d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d551:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d555:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d559:	80 fb 01             	cmp    bl,0x1
c001d55c:	75 7d                	jne    c001d5db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5da>
c001d55e:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d565:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d569:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d56d:	01 ce                	add    esi,ecx
c001d56f:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d575:	0f 94 c0             	sete   al
c001d578:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d57e:	0f 94 c3             	sete   bl
c001d581:	09 c3                	or     ebx,eax
c001d583:	8b 06                	mov    eax,DWORD PTR [esi]
c001d585:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d58a:	74 36                	je     c001d5c2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c1>
c001d58c:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d58f:	84 db                	test   bl,bl
c001d591:	75 0a                	jne    c001d59d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59c>
c001d593:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d597:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d59b:	76 37                	jbe    c001d5d4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d59d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d5a1:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d5a6:	0f 84 d1 00 00 00    	je     c001d67d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d5ac:	83 ec 0c             	sub    esp,0xc
c001d5af:	68 19 c3 02 c0       	push   0xc002c319
c001d5b4:	e8 6a d0 ff ff       	call   c001a623 <Krnl::panic(char const*)>
c001d5b9:	83 c4 10             	add    esp,0x10
c001d5bc:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d5c0:	eb 12                	jmp    c001d5d4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d5c2:	01 c1                	add    ecx,eax
c001d5c4:	84 db                	test   bl,bl
c001d5c6:	75 0c                	jne    c001d5d4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d5c8:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d5cc:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d5d0:	77 02                	ja     c001d5d4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d5d2:	01 d1                	add    ecx,edx
c001d5d4:	89 0e                	mov    DWORD PTR [esi],ecx
c001d5d6:	e9 df 00 00 00       	jmp    c001d6ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d5db:	80 fb 02             	cmp    bl,0x2
c001d5de:	75 71                	jne    c001d651 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x650>
c001d5e0:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d5e7:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d5eb:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d5ef:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d5f5:	74 15                	je     c001d60c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d5f7:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d5fd:	74 0d                	je     c001d60c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d5ff:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d603:	83 e8 04             	sub    eax,0x4
c001d606:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d60a:	76 1f                	jbe    c001d62b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c001d60c:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d610:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d615:	74 66                	je     c001d67d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d617:	83 ec 0c             	sub    esp,0xc
c001d61a:	68 35 c3 02 c0       	push   0xc002c335
c001d61f:	e8 ff cf ff ff       	call   c001a623 <Krnl::panic(char const*)>
c001d624:	83 c4 10             	add    esp,0x10
c001d627:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d62b:	8b 06                	mov    eax,DWORD PTR [esi]
c001d62d:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d632:	74 13                	je     c001d647 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x646>
c001d634:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d638:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d63f:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d643:	01 c8                	add    eax,ecx
c001d645:	eb 04                	jmp    c001d64b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001d647:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d64b:	01 c2                	add    edx,eax
c001d64d:	89 16                	mov    DWORD PTR [esi],edx
c001d64f:	eb 69                	jmp    c001d6ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d651:	0f b6 db             	movzx  ebx,bl
c001d654:	50                   	push   eax
c001d655:	50                   	push   eax
c001d656:	53                   	push   ebx
c001d657:	68 51 c3 02 c0       	push   0xc002c351
c001d65c:	e8 10 59 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001d661:	83 c4 10             	add    esp,0x10
c001d664:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d669:	74 12                	je     c001d67d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d66b:	83 ec 0c             	sub    esp,0xc
c001d66e:	68 5c c3 02 c0       	push   0xc002c35c
c001d673:	e8 ab cf ff ff       	call   c001a623 <Krnl::panic(char const*)>
c001d678:	83 c4 10             	add    esp,0x10
c001d67b:	eb 3d                	jmp    c001d6ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d67d:	83 ec 0c             	sub    esp,0xc
c001d680:	55                   	push   ebp
c001d681:	e8 06 5f ff ff       	call   c001358c <File::close()>
c001d686:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d689:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d68c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d68f:	59                   	pop    ecx
c001d690:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d694:	e8 b7 21 ff ff       	call   c000f850 <free>
c001d699:	5b                   	pop    ebx
c001d69a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d69e:	e8 ad 21 ff ff       	call   c000f850 <free>
c001d6a3:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d6a6:	e8 a5 21 ff ff       	call   c000f850 <free>
c001d6ab:	5e                   	pop    esi
c001d6ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d6b0:	e8 9b 21 ff ff       	call   c000f850 <free>
c001d6b5:	83 c4 10             	add    esp,0x10
c001d6b8:	eb 21                	jmp    c001d6db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d6ba:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d6be:	e9 90 fd ff ff       	jmp    c001d453 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d6c3:	83 ec 0c             	sub    esp,0xc
c001d6c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d6ca:	e8 81 21 ff ff       	call   c000f850 <free>
c001d6cf:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d6d3:	83 c4 10             	add    esp,0x10
c001d6d6:	e9 05 fd ff ff       	jmp    c001d3e0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d6db:	31 c0                	xor    eax,eax
c001d6dd:	eb 33                	jmp    c001d712 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x711>
c001d6df:	83 ec 0c             	sub    esp,0xc
c001d6e2:	55                   	push   ebp
c001d6e3:	e8 a4 5e ff ff       	call   c001358c <File::close()>
c001d6e8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d6eb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d6ee:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d6f1:	58                   	pop    eax
c001d6f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d6f6:	e8 55 21 ff ff       	call   c000f850 <free>
c001d6fb:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d6fe:	e8 4d 21 ff ff       	call   c000f850 <free>
c001d703:	5a                   	pop    edx
c001d704:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d708:	e8 43 21 ff ff       	call   c000f850 <free>
c001d70d:	83 c4 10             	add    esp,0x10
c001d710:	b0 01                	mov    al,0x1
c001d712:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d718:	5b                   	pop    ebx
c001d719:	5e                   	pop    esi
c001d71a:	5f                   	pop    edi
c001d71b:	5d                   	pop    ebp
c001d71c:	c3                   	ret    

c001d71d <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d71d:	56                   	push   esi
c001d71e:	31 d2                	xor    edx,edx
c001d720:	53                   	push   ebx
c001d721:	8b 1d c0 13 03 c0    	mov    ebx,DWORD PTR ds:0xc00313c0
c001d727:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d72b:	39 d3                	cmp    ebx,edx
c001d72d:	7e 1b                	jle    c001d74a <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d72f:	8b 04 95 e0 15 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcea20]
c001d736:	39 c8                	cmp    eax,ecx
c001d738:	77 0d                	ja     c001d747 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d73a:	8b 34 95 e0 13 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcec20]
c001d741:	01 c6                	add    esi,eax
c001d743:	39 ce                	cmp    esi,ecx
c001d745:	77 05                	ja     c001d74c <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d747:	42                   	inc    edx
c001d748:	eb e1                	jmp    c001d72b <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d74a:	31 c0                	xor    eax,eax
c001d74c:	5b                   	pop    ebx
c001d74d:	5e                   	pop    esi
c001d74e:	c3                   	ret    

c001d74f <Thr::getDriverNameFromAddress(unsigned long)>:
c001d74f:	53                   	push   ebx
c001d750:	31 c0                	xor    eax,eax
c001d752:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d756:	8b 1d c0 13 03 c0    	mov    ebx,DWORD PTR ds:0xc00313c0
c001d75c:	39 c3                	cmp    ebx,eax
c001d75e:	7e 22                	jle    c001d782 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d760:	8b 14 85 e0 15 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcea20]
c001d767:	39 ca                	cmp    edx,ecx
c001d769:	77 14                	ja     c001d77f <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d76b:	03 14 85 e0 13 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcec20]
c001d772:	39 ca                	cmp    edx,ecx
c001d774:	76 09                	jbe    c001d77f <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d776:	8b 04 85 e0 17 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce820]
c001d77d:	eb 05                	jmp    c001d784 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d77f:	40                   	inc    eax
c001d780:	eb da                	jmp    c001d75c <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d782:	31 c0                	xor    eax,eax
c001d784:	5b                   	pop    ebx
c001d785:	c3                   	ret    

c001d786 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d786:	53                   	push   ebx
c001d787:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d78b:	53                   	push   ebx
c001d78c:	e8 8c ff ff ff       	call   c001d71d <Thr::getDriverBaseFromAddress(unsigned long)>
c001d791:	5a                   	pop    edx
c001d792:	31 d2                	xor    edx,edx
c001d794:	85 c0                	test   eax,eax
c001d796:	74 04                	je     c001d79c <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d798:	89 da                	mov    edx,ebx
c001d79a:	29 c2                	sub    edx,eax
c001d79c:	89 d0                	mov    eax,edx
c001d79e:	5b                   	pop    ebx
c001d79f:	c3                   	ret    

c001d7a0 <Thr::loadDLL(char const*, bool)>:
c001d7a0:	55                   	push   ebp
c001d7a1:	57                   	push   edi
c001d7a2:	56                   	push   esi
c001d7a3:	53                   	push   ebx
c001d7a4:	81 ec 34 01 00 00    	sub    esp,0x134
c001d7aa:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d7b1:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001d7b8:	56                   	push   esi
c001d7b9:	68 74 c3 02 c0       	push   0xc002c374
c001d7be:	e8 ae 57 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001d7c3:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d7ca:	e8 71 20 ff ff       	call   c000f840 <malloc>
c001d7cf:	83 c4 0c             	add    esp,0xc
c001d7d2:	89 c3                	mov    ebx,eax
c001d7d4:	ff 35 b4 1b 03 c0    	push   DWORD PTR ds:0xc0031bb4
c001d7da:	56                   	push   esi
c001d7db:	50                   	push   eax
c001d7dc:	e8 e9 5c ff ff       	call   c00134ca <File::File(char const*, Process*)>
c001d7e1:	83 c4 10             	add    esp,0x10
c001d7e4:	85 db                	test   ebx,ebx
c001d7e6:	75 3c                	jne    c001d824 <Thr::loadDLL(char const*, bool)+0x84>
c001d7e8:	89 e8                	mov    eax,ebp
c001d7ea:	84 c0                	test   al,al
c001d7ec:	0f 84 d5 01 00 00    	je     c001d9c7 <Thr::loadDLL(char const*, bool)+0x227>
c001d7f2:	57                   	push   edi
c001d7f3:	57                   	push   edi
c001d7f4:	68 85 c3 02 c0       	push   0xc002c385
c001d7f9:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001d7fd:	57                   	push   edi
c001d7fe:	e8 31 30 fe ff       	call   c0000834 <strcpy>
c001d803:	58                   	pop    eax
c001d804:	5a                   	pop    edx
c001d805:	56                   	push   esi
c001d806:	57                   	push   edi
c001d807:	e8 68 31 fe ff       	call   c0000974 <strcat>
c001d80c:	59                   	pop    ecx
c001d80d:	58                   	pop    eax
c001d80e:	68 98 c3 02 c0       	push   0xc002c398
c001d813:	57                   	push   edi
c001d814:	e8 5b 31 fe ff       	call   c0000974 <strcat>
c001d819:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d81c:	e8 02 ce ff ff       	call   c001a623 <Krnl::panic(char const*)>
c001d821:	83 c4 10             	add    esp,0x10
c001d824:	51                   	push   ecx
c001d825:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d829:	50                   	push   eax
c001d82a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d82e:	50                   	push   eax
c001d82f:	53                   	push   ebx
c001d830:	e8 a5 5f ff ff       	call   c00137da <File::stat(unsigned long long*, bool*)>
c001d835:	83 c4 10             	add    esp,0x10
c001d838:	85 db                	test   ebx,ebx
c001d83a:	74 0c                	je     c001d848 <Thr::loadDLL(char const*, bool)+0xa8>
c001d83c:	83 ec 0c             	sub    esp,0xc
c001d83f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d841:	53                   	push   ebx
c001d842:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d845:	83 c4 10             	add    esp,0x10
c001d848:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d84d:	75 0a                	jne    c001d859 <Thr::loadDLL(char const*, bool)+0xb9>
c001d84f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d853:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d857:	75 3c                	jne    c001d895 <Thr::loadDLL(char const*, bool)+0xf5>
c001d859:	89 e8                	mov    eax,ebp
c001d85b:	84 c0                	test   al,al
c001d85d:	0f 84 4c 01 00 00    	je     c001d9af <Thr::loadDLL(char const*, bool)+0x20f>
c001d863:	51                   	push   ecx
c001d864:	51                   	push   ecx
c001d865:	68 85 c3 02 c0       	push   0xc002c385
c001d86a:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d86e:	53                   	push   ebx
c001d86f:	e8 c0 2f fe ff       	call   c0000834 <strcpy>
c001d874:	5f                   	pop    edi
c001d875:	58                   	pop    eax
c001d876:	56                   	push   esi
c001d877:	53                   	push   ebx
c001d878:	e8 f7 30 fe ff       	call   c0000974 <strcat>
c001d87d:	58                   	pop    eax
c001d87e:	5a                   	pop    edx
c001d87f:	68 98 c3 02 c0       	push   0xc002c398
c001d884:	53                   	push   ebx
c001d885:	e8 ea 30 fe ff       	call   c0000974 <strcat>
c001d88a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d88d:	e8 91 cd ff ff       	call   c001a623 <Krnl::panic(char const*)>
c001d892:	83 c4 10             	add    esp,0x10
c001d895:	e8 a4 45 ff ff       	call   c0011e3e <Virt::getAKernelVAS()>
c001d89a:	51                   	push   ecx
c001d89b:	6a 03                	push   0x3
c001d89d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001d8a1:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d8a5:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001d8ab:	83 d3 00             	adc    ebx,0x0
c001d8ae:	89 ca                	mov    edx,ecx
c001d8b0:	89 d1                	mov    ecx,edx
c001d8b2:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001d8b6:	51                   	push   ecx
c001d8b7:	50                   	push   eax
c001d8b8:	e8 bd 4b ff ff       	call   c001247a <VAS::allocatePages(int, int)>
c001d8bd:	5f                   	pop    edi
c001d8be:	89 c3                	mov    ebx,eax
c001d8c0:	58                   	pop    eax
c001d8c1:	53                   	push   ebx
c001d8c2:	68 9a c3 02 c0       	push   0xc002c39a
c001d8c7:	e8 a5 56 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001d8cc:	89 34 24             	mov    DWORD PTR [esp],esi
c001d8cf:	e8 c0 2e fe ff       	call   c0000794 <strlen>
c001d8d4:	8b 3d c0 13 03 c0    	mov    edi,DWORD PTR ds:0xc00313c0
c001d8da:	40                   	inc    eax
c001d8db:	89 04 24             	mov    DWORD PTR [esp],eax
c001d8de:	e8 5d 1f ff ff       	call   c000f840 <malloc>
c001d8e3:	89 04 bd e0 17 03 c0 	mov    DWORD PTR [edi*4-0x3ffce820],eax
c001d8ea:	58                   	pop    eax
c001d8eb:	a1 c0 13 03 c0       	mov    eax,ds:0xc00313c0
c001d8f0:	5a                   	pop    edx
c001d8f1:	56                   	push   esi
c001d8f2:	ff 34 85 e0 17 03 c0 	push   DWORD PTR [eax*4-0x3ffce820]
c001d8f9:	e8 36 2f fe ff       	call   c0000834 <strcpy>
c001d8fe:	a1 c0 13 03 c0       	mov    eax,ds:0xc00313c0
c001d903:	8d 50 01             	lea    edx,[eax+0x1]
c001d906:	89 1c 85 e0 15 03 c0 	mov    DWORD PTR [eax*4-0x3ffcea20],ebx
c001d90d:	89 15 c0 13 03 c0    	mov    DWORD PTR ds:0xc00313c0,edx
c001d913:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d917:	83 c4 0c             	add    esp,0xc
c001d91a:	89 14 85 e0 13 03 c0 	mov    DWORD PTR [eax*4-0x3ffcec20],edx
c001d921:	6a 01                	push   0x1
c001d923:	53                   	push   ebx
c001d924:	56                   	push   esi
c001d925:	e8 d7 f6 ff ff       	call   c001d001 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d92a:	83 c4 10             	add    esp,0x10
c001d92d:	89 c7                	mov    edi,eax
c001d92f:	84 c0                	test   al,al
c001d931:	0f 85 8c 00 00 00    	jne    c001d9c3 <Thr::loadDLL(char const*, bool)+0x223>
c001d937:	89 e8                	mov    eax,ebp
c001d939:	84 c0                	test   al,al
c001d93b:	74 76                	je     c001d9b3 <Thr::loadDLL(char const*, bool)+0x213>
c001d93d:	83 ec 0c             	sub    esp,0xc
c001d940:	68 a7 c3 02 c0       	push   0xc002c3a7
c001d945:	e8 d9 cc ff ff       	call   c001a623 <Krnl::panic(char const*)>
c001d94a:	83 c4 10             	add    esp,0x10
c001d94d:	eb 64                	jmp    c001d9b3 <Thr::loadDLL(char const*, bool)+0x213>
c001d94f:	e8 ea 44 ff ff       	call   c0011e3e <Virt::getAKernelVAS()>
c001d954:	89 f5                	mov    ebp,esi
c001d956:	c1 e5 0c             	shl    ebp,0xc
c001d959:	52                   	push   edx
c001d95a:	01 dd                	add    ebp,ebx
c001d95c:	52                   	push   edx
c001d95d:	55                   	push   ebp
c001d95e:	50                   	push   eax
c001d95f:	e8 90 46 ff ff       	call   c0011ff4 <VAS::getPageTableEntry(unsigned long)>
c001d964:	83 c4 10             	add    esp,0x10
c001d967:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d96a:	75 0c                	jne    c001d978 <Thr::loadDLL(char const*, bool)+0x1d8>
c001d96c:	83 ec 0c             	sub    esp,0xc
c001d96f:	55                   	push   ebp
c001d970:	e8 e3 24 ff ff       	call   c000fe58 <Phys::freePage(unsigned long)>
c001d975:	83 c4 10             	add    esp,0x10
c001d978:	46                   	inc    esi
c001d979:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d97d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d981:	05 ff 0f 00 00       	add    eax,0xfff
c001d986:	83 d2 00             	adc    edx,0x0
c001d989:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d98d:	c1 ea 0c             	shr    edx,0xc
c001d990:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d994:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d998:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001d99c:	ba 00 00 00 00       	mov    edx,0x0
c001d9a1:	89 d0                	mov    eax,edx
c001d9a3:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001d9a7:	72 a6                	jb     c001d94f <Thr::loadDLL(char const*, bool)+0x1af>
c001d9a9:	89 f8                	mov    eax,edi
c001d9ab:	84 c0                	test   al,al
c001d9ad:	75 18                	jne    c001d9c7 <Thr::loadDLL(char const*, bool)+0x227>
c001d9af:	31 db                	xor    ebx,ebx
c001d9b1:	eb 14                	jmp    c001d9c7 <Thr::loadDLL(char const*, bool)+0x227>
c001d9b3:	83 ec 0c             	sub    esp,0xc
c001d9b6:	68 c6 c3 02 c0       	push   0xc002c3c6
c001d9bb:	e8 63 cc ff ff       	call   c001a623 <Krnl::panic(char const*)>
c001d9c0:	83 c4 10             	add    esp,0x10
c001d9c3:	31 f6                	xor    esi,esi
c001d9c5:	eb b2                	jmp    c001d979 <Thr::loadDLL(char const*, bool)+0x1d9>
c001d9c7:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d9cd:	89 d8                	mov    eax,ebx
c001d9cf:	5b                   	pop    ebx
c001d9d0:	5e                   	pop    esi
c001d9d1:	5f                   	pop    edi
c001d9d2:	5d                   	pop    ebp
c001d9d3:	c3                   	ret    

c001d9d4 <Thr::executeDLL(unsigned long, void*)>:
c001d9d4:	56                   	push   esi
c001d9d5:	53                   	push   ebx
c001d9d6:	52                   	push   edx
c001d9d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d9db:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d9df:	85 db                	test   ebx,ebx
c001d9e1:	75 10                	jne    c001d9f3 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d9e3:	83 ec 0c             	sub    esp,0xc
c001d9e6:	68 e2 c3 02 c0       	push   0xc002c3e2
c001d9eb:	e8 33 cc ff ff       	call   c001a623 <Krnl::panic(char const*)>
c001d9f0:	83 c4 10             	add    esp,0x10
c001d9f3:	50                   	push   eax
c001d9f4:	50                   	push   eax
c001d9f5:	53                   	push   ebx
c001d9f6:	68 0c c4 02 c0       	push   0xc002c40c
c001d9fb:	e8 71 55 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001da00:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001da04:	89 d8                	mov    eax,ebx
c001da06:	83 c4 14             	add    esp,0x14
c001da09:	5b                   	pop    ebx
c001da0a:	5e                   	pop    esi
c001da0b:	ff e0                	jmp    eax
c001da0d:	90                   	nop

c001da0e <changeTSS>:
c001da0e:	83 ec 14             	sub    esp,0x14
c001da11:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001da16:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001da19:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001da1e:	c1 e2 15             	shl    edx,0x15
c001da21:	29 d0                	sub    eax,edx
c001da23:	50                   	push   eax
c001da24:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c001da29:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001da2f:	05 7c 11 00 00       	add    eax,0x117c
c001da34:	50                   	push   eax
c001da35:	e8 a8 3a ff ff       	call   c00114e2 <TSS::setESP(unsigned long)>
c001da3a:	83 c4 1c             	add    esp,0x1c
c001da3d:	c3                   	ret    

c001da3e <Process::addArgs(char**)>:
c001da3e:	57                   	push   edi
c001da3f:	56                   	push   esi
c001da40:	53                   	push   ebx
c001da41:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001da45:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001da49:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001da53:	85 ff                	test   edi,edi
c001da55:	74 3d                	je     c001da94 <Process::addArgs(char**)+0x56>
c001da57:	8b 07                	mov    eax,DWORD PTR [edi]
c001da59:	85 c0                	test   eax,eax
c001da5b:	74 37                	je     c001da94 <Process::addArgs(char**)+0x56>
c001da5d:	31 db                	xor    ebx,ebx
c001da5f:	83 ec 0c             	sub    esp,0xc
c001da62:	50                   	push   eax
c001da63:	e8 2c 2d fe ff       	call   c0000794 <strlen>
c001da68:	40                   	inc    eax
c001da69:	89 04 24             	mov    DWORD PTR [esp],eax
c001da6c:	e8 cf 1d ff ff       	call   c000f840 <malloc>
c001da71:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001da78:	5a                   	pop    edx
c001da79:	59                   	pop    ecx
c001da7a:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001da7d:	43                   	inc    ebx
c001da7e:	50                   	push   eax
c001da7f:	e8 b0 2d fe ff       	call   c0000834 <strcpy>
c001da84:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001da8a:	83 c4 10             	add    esp,0x10
c001da8d:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001da90:	85 c0                	test   eax,eax
c001da92:	75 cb                	jne    c001da5f <Process::addArgs(char**)+0x21>
c001da94:	5b                   	pop    ebx
c001da95:	5e                   	pop    esi
c001da96:	5f                   	pop    edi
c001da97:	c3                   	ret    

c001da98 <Process::Process(char const*, Process*, char**)>:
c001da98:	56                   	push   esi
c001da99:	53                   	push   ebx
c001da9a:	83 ec 14             	sub    esp,0x14
c001da9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001daa1:	05 0c 02 00 00       	add    eax,0x20c
c001daa6:	bb 07 00 00 00       	mov    ebx,0x7
c001daab:	89 c6                	mov    esi,eax
c001daad:	85 db                	test   ebx,ebx
c001daaf:	78 12                	js     c001dac3 <Process::Process(char const*, Process*, char**)+0x2b>
c001dab1:	83 ec 0c             	sub    esp,0xc
c001dab4:	56                   	push   esi
c001dab5:	e8 28 b2 00 00       	call   c0028ce2 <ThreadControlBlock::ThreadControlBlock()>
c001daba:	83 c4 10             	add    esp,0x10
c001dabd:	83 c6 63             	add    esi,0x63
c001dac0:	4b                   	dec    ebx
c001dac1:	eb ea                	jmp    c001daad <Process::Process(char const*, Process*, char**)+0x15>
c001dac3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dac7:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001dace:	83 ec 0c             	sub    esp,0xc
c001dad1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dad5:	e8 9a c9 ff ff       	call   c001a474 <Krnl::newProcessEnv(Process*)>
c001dada:	83 c4 10             	add    esp,0x10
c001dadd:	89 c2                	mov    edx,eax
c001dadf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dae3:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001dae9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001daed:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001daf6:	a1 d0 db 02 c0       	mov    eax,ds:0xc002dbd0
c001dafb:	8d 50 01             	lea    edx,[eax+0x1]
c001dafe:	89 15 d0 db 02 c0    	mov    DWORD PTR ds:0xc002dbd0,edx
c001db04:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001db08:	89 02                	mov    DWORD PTR [edx],eax
c001db0a:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c001db12:	83 ec 0c             	sub    esp,0xc
c001db15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001db19:	e8 22 1d ff ff       	call   c000f840 <malloc>
c001db1e:	83 c4 10             	add    esp,0x10
c001db21:	89 c3                	mov    ebx,eax
c001db23:	83 ec 08             	sub    esp,0x8
c001db26:	6a 00                	push   0x0
c001db28:	53                   	push   ebx
c001db29:	e8 f4 4c ff ff       	call   c0012822 <VAS::VAS(bool)>
c001db2e:	83 c4 10             	add    esp,0x10
c001db31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db35:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001db3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db3f:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001db49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db4d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001db51:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001db57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db5b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db61:	85 c0                	test   eax,eax
c001db63:	74 42                	je     c001dba7 <Process::Process(char const*, Process*, char**)+0x10f>
c001db65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db69:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db6f:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001db75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db79:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001db7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db83:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db89:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001db8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db93:	05 0c 01 00 00       	add    eax,0x10c
c001db98:	83 ec 08             	sub    esp,0x8
c001db9b:	52                   	push   edx
c001db9c:	50                   	push   eax
c001db9d:	e8 92 2c fe ff       	call   c0000834 <strcpy>
c001dba2:	83 c4 10             	add    esp,0x10
c001dba5:	eb 63                	jmp    c001dc0a <Process::Process(char const*, Process*, char**)+0x172>
c001dba7:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001dbaf:	83 ec 0c             	sub    esp,0xc
c001dbb2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001dbb6:	e8 85 1c ff ff       	call   c000f840 <malloc>
c001dbbb:	83 c4 10             	add    esp,0x10
c001dbbe:	89 c3                	mov    ebx,eax
c001dbc0:	83 ec 08             	sub    esp,0x8
c001dbc3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbc7:	53                   	push   ebx
c001dbc8:	e8 13 36 ff ff       	call   c00111e0 <VgaText::VgaText(char const*)>
c001dbcd:	83 c4 10             	add    esp,0x10
c001dbd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbd4:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dbda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbde:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dbe4:	83 ec 0c             	sub    esp,0xc
c001dbe7:	50                   	push   eax
c001dbe8:	e8 e6 29 ff ff       	call   c00105d3 <addToTerminalCycle(VgaText*)>
c001dbed:	83 c4 10             	add    esp,0x10
c001dbf0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbf4:	05 0c 01 00 00       	add    eax,0x10c
c001dbf9:	83 ec 08             	sub    esp,0x8
c001dbfc:	68 2b c4 02 c0       	push   0xc002c42b
c001dc01:	50                   	push   eax
c001dc02:	e8 2d 2c fe ff       	call   c0000834 <strcpy>
c001dc07:	83 c4 10             	add    esp,0x10
c001dc0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc0e:	83 c0 0c             	add    eax,0xc
c001dc11:	83 ec 08             	sub    esp,0x8
c001dc14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc18:	50                   	push   eax
c001dc19:	e8 16 2c fe ff       	call   c0000834 <strcpy>
c001dc1e:	83 c4 10             	add    esp,0x10
c001dc21:	83 ec 08             	sub    esp,0x8
c001dc24:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001dc28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc2c:	e8 0d fe ff ff       	call   c001da3e <Process::addArgs(char**)>
c001dc31:	83 c4 10             	add    esp,0x10
c001dc34:	83 ec 08             	sub    esp,0x8
c001dc37:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc3b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc3f:	e8 87 ee ff ff       	call   c001cacb <Thr::loadProgramIntoMemory(Process*, char const*)>
c001dc44:	83 c4 10             	add    esp,0x10
c001dc47:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dc4b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001dc4f:	83 f0 01             	xor    eax,0x1
c001dc52:	88 c2                	mov    dl,al
c001dc54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc58:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001dc5e:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001dc63:	83 ec 08             	sub    esp,0x8
c001dc66:	50                   	push   eax
c001dc67:	68 28 c5 02 c0       	push   0xc002c528
c001dc6c:	e8 00 53 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001dc71:	83 c4 10             	add    esp,0x10
c001dc74:	90                   	nop
c001dc75:	83 c4 14             	add    esp,0x14
c001dc78:	5b                   	pop    ebx
c001dc79:	5e                   	pop    esi
c001dc7a:	c3                   	ret    
c001dc7b:	90                   	nop

c001dc7c <Process::Process(bool, char const*, Process*, char**)>:
c001dc7c:	56                   	push   esi
c001dc7d:	53                   	push   ebx
c001dc7e:	83 ec 24             	sub    esp,0x24
c001dc81:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dc85:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001dc89:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc8d:	05 0c 02 00 00       	add    eax,0x20c
c001dc92:	bb 07 00 00 00       	mov    ebx,0x7
c001dc97:	89 c6                	mov    esi,eax
c001dc99:	85 db                	test   ebx,ebx
c001dc9b:	78 12                	js     c001dcaf <Process::Process(bool, char const*, Process*, char**)+0x33>
c001dc9d:	83 ec 0c             	sub    esp,0xc
c001dca0:	56                   	push   esi
c001dca1:	e8 3c b0 00 00       	call   c0028ce2 <ThreadControlBlock::ThreadControlBlock()>
c001dca6:	83 c4 10             	add    esp,0x10
c001dca9:	83 c6 63             	add    esi,0x63
c001dcac:	4b                   	dec    ebx
c001dcad:	eb ea                	jmp    c001dc99 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001dcaf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcb3:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001dcba:	83 ec 0c             	sub    esp,0xc
c001dcbd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dcc1:	e8 ae c7 ff ff       	call   c001a474 <Krnl::newProcessEnv(Process*)>
c001dcc6:	83 c4 10             	add    esp,0x10
c001dcc9:	89 c2                	mov    edx,eax
c001dccb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dccf:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001dcd5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcd9:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001dce2:	a1 d0 db 02 c0       	mov    eax,ds:0xc002dbd0
c001dce7:	8d 50 01             	lea    edx,[eax+0x1]
c001dcea:	89 15 d0 db 02 c0    	mov    DWORD PTR ds:0xc002dbd0,edx
c001dcf0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dcf4:	89 02                	mov    DWORD PTR [edx],eax
c001dcf6:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c001dcfe:	83 ec 0c             	sub    esp,0xc
c001dd01:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001dd05:	e8 36 1b ff ff       	call   c000f840 <malloc>
c001dd0a:	83 c4 10             	add    esp,0x10
c001dd0d:	89 c3                	mov    ebx,eax
c001dd0f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001dd14:	83 ec 08             	sub    esp,0x8
c001dd17:	50                   	push   eax
c001dd18:	53                   	push   ebx
c001dd19:	e8 04 4b ff ff       	call   c0012822 <VAS::VAS(bool)>
c001dd1e:	83 c4 10             	add    esp,0x10
c001dd21:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd25:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001dd2b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd2f:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dd39:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd3d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dd41:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001dd47:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd4b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd51:	85 c0                	test   eax,eax
c001dd53:	74 42                	je     c001dd97 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001dd55:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd59:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd5f:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dd65:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd69:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001dd6f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd73:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd79:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dd7f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd83:	05 0c 01 00 00       	add    eax,0x10c
c001dd88:	83 ec 08             	sub    esp,0x8
c001dd8b:	52                   	push   edx
c001dd8c:	50                   	push   eax
c001dd8d:	e8 a2 2a fe ff       	call   c0000834 <strcpy>
c001dd92:	83 c4 10             	add    esp,0x10
c001dd95:	eb 63                	jmp    c001ddfa <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001dd97:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001dd9f:	83 ec 0c             	sub    esp,0xc
c001dda2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001dda6:	e8 95 1a ff ff       	call   c000f840 <malloc>
c001ddab:	83 c4 10             	add    esp,0x10
c001ddae:	89 c3                	mov    ebx,eax
c001ddb0:	83 ec 08             	sub    esp,0x8
c001ddb3:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001ddb7:	53                   	push   ebx
c001ddb8:	e8 23 34 ff ff       	call   c00111e0 <VgaText::VgaText(char const*)>
c001ddbd:	83 c4 10             	add    esp,0x10
c001ddc0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddc4:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001ddca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddce:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ddd4:	83 ec 0c             	sub    esp,0xc
c001ddd7:	50                   	push   eax
c001ddd8:	e8 f6 27 ff ff       	call   c00105d3 <addToTerminalCycle(VgaText*)>
c001dddd:	83 c4 10             	add    esp,0x10
c001dde0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dde4:	05 0c 01 00 00       	add    eax,0x10c
c001dde9:	83 ec 08             	sub    esp,0x8
c001ddec:	68 2b c4 02 c0       	push   0xc002c42b
c001ddf1:	50                   	push   eax
c001ddf2:	e8 3d 2a fe ff       	call   c0000834 <strcpy>
c001ddf7:	83 c4 10             	add    esp,0x10
c001ddfa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddfe:	83 c0 0c             	add    eax,0xc
c001de01:	83 ec 08             	sub    esp,0x8
c001de04:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001de08:	50                   	push   eax
c001de09:	e8 26 2a fe ff       	call   c0000834 <strcpy>
c001de0e:	83 c4 10             	add    esp,0x10
c001de11:	83 ec 08             	sub    esp,0x8
c001de14:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001de18:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001de1c:	e8 1d fc ff ff       	call   c001da3e <Process::addArgs(char**)>
c001de21:	83 c4 10             	add    esp,0x10
c001de24:	90                   	nop
c001de25:	83 c4 24             	add    esp,0x24
c001de28:	5b                   	pop    ebx
c001de29:	5e                   	pop    esi
c001de2a:	c3                   	ret    

c001de2b <disableIRQs()>:
c001de2b:	fa                   	cli    
c001de2c:	ff 05 8c 1b 03 c0    	inc    DWORD PTR ds:0xc0031b8c
c001de32:	c3                   	ret    

c001de33 <getIRQNestingLevel()>:
c001de33:	a1 8c 1b 03 c0       	mov    eax,ds:0xc0031b8c
c001de38:	c3                   	ret    

c001de39 <enableIRQs()>:
c001de39:	a1 8c 1b 03 c0       	mov    eax,ds:0xc0031b8c
c001de3e:	48                   	dec    eax
c001de3f:	a3 8c 1b 03 c0       	mov    ds:0xc0031b8c,eax
c001de44:	75 01                	jne    c001de47 <enableIRQs()+0xe>
c001de46:	fb                   	sti    
c001de47:	c3                   	ret    

c001de48 <lockScheduler()>:
c001de48:	eb e1                	jmp    c001de2b <disableIRQs()>

c001de4a <unlockScheduler()>:
c001de4a:	eb ed                	jmp    c001de39 <enableIRQs()>

c001de4c <userModeEntryPoint(void*)>:
c001de4c:	83 ec 0c             	sub    esp,0xc
c001de4f:	e8 f6 ff ff ff       	call   c001de4a <unlockScheduler()>
c001de54:	fb                   	sti    
c001de55:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de5a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001de5d:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001de63:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001de67:	83 c4 0c             	add    esp,0xc
c001de6a:	e9 bb 24 fe ff       	jmp    c000032a <goToUsermode>

c001de6f <lockStuff()>:
c001de6f:	e8 b7 ff ff ff       	call   c001de2b <disableIRQs()>
c001de74:	ff 05 88 1b 03 c0    	inc    DWORD PTR ds:0xc0031b88
c001de7a:	c3                   	ret    

c001de7b <taskStartupFunction>:
c001de7b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de80:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001de83:	c3                   	ret    

c001de84 <updateTimeUsed()>:
c001de84:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c001de89:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001de8f:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001de96:	74 50                	je     c001dee8 <updateTimeUsed()+0x64>
c001de98:	57                   	push   edi
c001de99:	56                   	push   esi
c001de9a:	53                   	push   ebx
c001de9b:	0f 31                	rdtsc  
c001de9d:	89 c1                	mov    ecx,eax
c001de9f:	a3 c8 1b 03 c0       	mov    ds:0xc0031bc8,eax
c001dea4:	2b 0d b8 1b 03 c0    	sub    ecx,DWORD PTR ds:0xc0031bb8
c001deaa:	89 d3                	mov    ebx,edx
c001deac:	89 0d c0 1b 03 c0    	mov    DWORD PTR ds:0xc0031bc0,ecx
c001deb2:	1b 1d bc 1b 03 c0    	sbb    ebx,DWORD PTR ds:0xc0031bbc
c001deb8:	a3 b8 1b 03 c0       	mov    ds:0xc0031bb8,eax
c001debd:	89 1d c4 1b 03 c0    	mov    DWORD PTR ds:0xc0031bc4,ebx
c001dec3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dec8:	89 15 cc 1b 03 c0    	mov    DWORD PTR ds:0xc0031bcc,edx
c001dece:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001ded1:	89 15 bc 1b 03 c0    	mov    DWORD PTR ds:0xc0031bbc,edx
c001ded7:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001deda:	01 f1                	add    ecx,esi
c001dedc:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001dedf:	11 fb                	adc    ebx,edi
c001dee1:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001dee4:	5b                   	pop    ebx
c001dee5:	5e                   	pop    esi
c001dee6:	5f                   	pop    edi
c001dee7:	c3                   	ret    
c001dee8:	c3                   	ret    

c001dee9 <switchToThread(ThreadControlBlock*)>:
c001dee9:	53                   	push   ebx
c001deea:	83 ec 08             	sub    esp,0x8
c001deed:	a1 88 1b 03 c0       	mov    eax,ds:0xc0031b88
c001def2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001def6:	85 c0                	test   eax,eax
c001def8:	75 30                	jne    c001df2a <switchToThread(ThreadControlBlock*)+0x41>
c001defa:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001defd:	3c ff                	cmp    al,0xff
c001deff:	74 25                	je     c001df26 <switchToThread(ThreadControlBlock*)+0x3d>
c001df01:	0f b6 d0             	movzx  edx,al
c001df04:	b8 84 03 00 00       	mov    eax,0x384
c001df09:	29 d0                	sub    eax,edx
c001df0b:	c1 e0 10             	shl    eax,0x10
c001df0e:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001df11:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001df14:	e8 6b ff ff ff       	call   c001de84 <updateTimeUsed()>
c001df19:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001df1d:	83 c4 08             	add    esp,0x8
c001df20:	5b                   	pop    ebx
c001df21:	e9 3c 24 fe ff       	jmp    c0000362 <switchToThreadASM>
c001df26:	31 c0                	xor    eax,eax
c001df28:	eb e7                	jmp    c001df11 <switchToThread(ThreadControlBlock*)+0x28>
c001df2a:	c7 05 84 1b 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031b84,0x1
c001df34:	83 c4 08             	add    esp,0x8
c001df37:	5b                   	pop    ebx
c001df38:	c3                   	ret    
c001df39:	90                   	nop

c001df3a <Semaphore::Semaphore(int)>:
c001df3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df3e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001df42:	89 10                	mov    DWORD PTR [eax],edx
c001df44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df48:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001df4f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df53:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001df5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df5e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001df65:	90                   	nop
c001df66:	c3                   	ret    
c001df67:	90                   	nop

c001df68 <Mutex::Mutex()>:
c001df68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df6c:	6a 01                	push   0x1
c001df6e:	50                   	push   eax
c001df6f:	e8 c6 ff ff ff       	call   c001df3a <Semaphore::Semaphore(int)>
c001df74:	83 c4 08             	add    esp,0x8
c001df77:	90                   	nop
c001df78:	c3                   	ret    
c001df79:	90                   	nop

c001df7a <Process::createThread(void (*)(void*), void*, int)>:
c001df7a:	55                   	push   ebp
c001df7b:	31 c9                	xor    ecx,ecx
c001df7d:	57                   	push   edi
c001df7e:	56                   	push   esi
c001df7f:	53                   	push   ebx
c001df80:	83 ec 1c             	sub    esp,0x1c
c001df83:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001df87:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001df8e:	89 f2                	mov    edx,esi
c001df90:	0f b7 c2             	movzx  eax,dx
c001df93:	83 e2 01             	and    edx,0x1
c001df96:	74 14                	je     c001dfac <Process::createThread(void (*)(void*), void*, int)+0x32>
c001df98:	d1 f8                	sar    eax,1
c001df9a:	41                   	inc    ecx
c001df9b:	89 c2                	mov    edx,eax
c001df9d:	83 f9 10             	cmp    ecx,0x10
c001dfa0:	75 ee                	jne    c001df90 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001dfa2:	83 c4 1c             	add    esp,0x1c
c001dfa5:	31 c0                	xor    eax,eax
c001dfa7:	5b                   	pop    ebx
c001dfa8:	5e                   	pop    esi
c001dfa9:	5f                   	pop    edi
c001dfaa:	5d                   	pop    ebp
c001dfab:	c3                   	ret    
c001dfac:	83 ec 08             	sub    esp,0x8
c001dfaf:	b8 01 00 00 00       	mov    eax,0x1
c001dfb4:	d3 e0                	shl    eax,cl
c001dfb6:	09 c6                	or     esi,eax
c001dfb8:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001dfbe:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001dfc5:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001dfc8:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001dfcb:	01 ce                	add    esi,ecx
c001dfcd:	89 f0                	mov    eax,esi
c001dfcf:	c1 e0 05             	shl    eax,0x5
c001dfd2:	01 c6                	add    esi,eax
c001dfd4:	8d 04 33             	lea    eax,[ebx+esi*1]
c001dfd7:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001dfdd:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001dfe3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001dfe7:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001dfed:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001dff3:	89 ca                	mov    edx,ecx
c001dff5:	f7 da                	neg    edx
c001dff7:	c1 e2 15             	shl    edx,0x15
c001dffa:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001e000:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001e006:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001e00a:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001e014:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001e01a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e01e:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001e024:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001e02e:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001e038:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001e03f:	50                   	push   eax
c001e040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e044:	68 a8 1b 03 c0       	push   0xc0031ba8
c001e049:	e8 22 ab 00 00       	call   c0028b70 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e04e:	83 c4 10             	add    esp,0x10
c001e051:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e055:	83 c4 1c             	add    esp,0x1c
c001e058:	5b                   	pop    ebx
c001e059:	5e                   	pop    esi
c001e05a:	5f                   	pop    edi
c001e05b:	5d                   	pop    ebp
c001e05c:	c3                   	ret    
c001e05d:	90                   	nop

c001e05e <Process::createUserThread()>:
c001e05e:	83 ec 0c             	sub    esp,0xc
c001e061:	68 80 00 00 00       	push   0x80
c001e066:	6a 00                	push   0x0
c001e068:	68 4c de 01 c0       	push   0xc001de4c
c001e06d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e071:	e8 04 ff ff ff       	call   c001df7a <Process::createThread(void (*)(void*), void*, int)>
c001e076:	83 c4 1c             	add    esp,0x1c
c001e079:	c3                   	ret    

c001e07a <setupMultitasking(void (*)())>:
c001e07a:	56                   	push   esi
c001e07b:	53                   	push   ebx
c001e07c:	53                   	push   ebx
c001e07d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e081:	eb 10                	jmp    c001e093 <setupMultitasking(void (*)())+0x19>
c001e083:	83 ec 0c             	sub    esp,0xc
c001e086:	68 a8 1b 03 c0       	push   0xc0031ba8
c001e08b:	e8 32 aa 00 00       	call   c0028ac2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e090:	83 c4 10             	add    esp,0x10
c001e093:	83 ec 0c             	sub    esp,0xc
c001e096:	68 a8 1b 03 c0       	push   0xc0031ba8
c001e09b:	e8 06 aa 00 00       	call   c0028aa6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e0a0:	83 c4 10             	add    esp,0x10
c001e0a3:	84 c0                	test   al,al
c001e0a5:	74 dc                	je     c001e083 <setupMultitasking(void (*)())+0x9>
c001e0a7:	83 ec 0c             	sub    esp,0xc
c001e0aa:	68 3f 07 00 00       	push   0x73f
c001e0af:	e8 8c 17 ff ff       	call   c000f840 <malloc>
c001e0b4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e0bb:	89 c3                	mov    ebx,eax
c001e0bd:	6a 00                	push   0x0
c001e0bf:	68 2f c4 02 c0       	push   0xc002c42f
c001e0c4:	6a 01                	push   0x1
c001e0c6:	50                   	push   eax
c001e0c7:	e8 b0 fb ff ff       	call   c001dc7c <Process::Process(bool, char const*, Process*, char**)>
c001e0cc:	83 c4 18             	add    esp,0x18
c001e0cf:	89 1d b4 1b 03 c0    	mov    DWORD PTR ds:0xc0031bb4,ebx
c001e0d5:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e0db:	68 50 c5 02 c0       	push   0xc002c550
c001e0e0:	e8 8c 4e ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001e0e5:	58                   	pop    eax
c001e0e6:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e0ec:	e8 64 2c ff ff       	call   c0010d55 <setActiveTerminal(VgaText*)>
c001e0f1:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001e0f9:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e0ff:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e102:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001e10c:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001e112:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001e118:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001e122:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e12c:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e136:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e13c:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e142:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e14c:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e152:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e15c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e162:	5a                   	pop    edx
c001e163:	59                   	pop    ecx
c001e164:	68 2b c4 02 c0       	push   0xc002c42b
c001e169:	50                   	push   eax
c001e16a:	e8 c5 26 fe ff       	call   c0000834 <strcpy>
c001e16f:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e176:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e17a:	83 c4 14             	add    esp,0x14
c001e17d:	5b                   	pop    ebx
c001e17e:	5e                   	pop    esi
c001e17f:	e9 d0 21 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e184 <schedule()>:
c001e184:	a1 88 1b 03 c0       	mov    eax,ds:0xc0031b88
c001e189:	85 c0                	test   eax,eax
c001e18b:	74 0b                	je     c001e198 <schedule()+0x14>
c001e18d:	c7 05 84 1b 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031b84,0x1
c001e197:	c3                   	ret    
c001e198:	53                   	push   ebx
c001e199:	83 ec 14             	sub    esp,0x14
c001e19c:	68 a8 1b 03 c0       	push   0xc0031ba8
c001e1a1:	e8 00 a9 00 00       	call   c0028aa6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e1a6:	83 c4 10             	add    esp,0x10
c001e1a9:	84 c0                	test   al,al
c001e1ab:	75 38                	jne    c001e1e5 <schedule()+0x61>
c001e1ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e1b2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e1b5:	4a                   	dec    edx
c001e1b6:	74 32                	je     c001e1ea <schedule()+0x66>
c001e1b8:	83 ec 0c             	sub    esp,0xc
c001e1bb:	68 a8 1b 03 c0       	push   0xc0031ba8
c001e1c0:	e8 d9 a8 00 00       	call   c0028a9e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e1c5:	c7 04 24 a8 1b 03 c0 	mov    DWORD PTR [esp],0xc0031ba8
c001e1cc:	89 c3                	mov    ebx,eax
c001e1ce:	e8 ef a8 00 00       	call   c0028ac2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e1d3:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e1da:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e1dd:	e8 07 fd ff ff       	call   c001dee9 <switchToThread(ThreadControlBlock*)>
c001e1e2:	83 c4 10             	add    esp,0x10
c001e1e5:	83 c4 08             	add    esp,0x8
c001e1e8:	5b                   	pop    ebx
c001e1e9:	c3                   	ret    
c001e1ea:	83 ec 08             	sub    esp,0x8
c001e1ed:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e1f4:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e1fa:	68 a8 1b 03 c0       	push   0xc0031ba8
c001e1ff:	e8 6c a9 00 00       	call   c0028b70 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e204:	83 c4 10             	add    esp,0x10
c001e207:	eb af                	jmp    c001e1b8 <schedule()+0x34>

c001e209 <unlockStuff()>:
c001e209:	a1 88 1b 03 c0       	mov    eax,ds:0xc0031b88
c001e20e:	48                   	dec    eax
c001e20f:	a3 88 1b 03 c0       	mov    ds:0xc0031b88,eax
c001e214:	75 09                	jne    c001e21f <unlockStuff()+0x16>
c001e216:	a1 84 1b 03 c0       	mov    eax,ds:0xc0031b84
c001e21b:	85 c0                	test   eax,eax
c001e21d:	75 05                	jne    c001e224 <unlockStuff()+0x1b>
c001e21f:	e9 15 fc ff ff       	jmp    c001de39 <enableIRQs()>
c001e224:	83 ec 0c             	sub    esp,0xc
c001e227:	c7 05 84 1b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031b84,0x0
c001e231:	e8 4e ff ff ff       	call   c001e184 <schedule()>
c001e236:	83 c4 0c             	add    esp,0xc
c001e239:	e9 fb fb ff ff       	jmp    c001de39 <enableIRQs()>

c001e23e <Semaphore::tryAcquire()>:
c001e23e:	83 ec 0c             	sub    esp,0xc
c001e241:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e245:	e8 25 fc ff ff       	call   c001de6f <lockStuff()>
c001e24a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e24d:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e24f:	7c 0b                	jl     c001e25c <Semaphore::tryAcquire()+0x1e>
c001e251:	e8 b3 ff ff ff       	call   c001e209 <unlockStuff()>
c001e256:	31 c0                	xor    eax,eax
c001e258:	83 c4 0c             	add    esp,0xc
c001e25b:	c3                   	ret    
c001e25c:	42                   	inc    edx
c001e25d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e260:	e8 a4 ff ff ff       	call   c001e209 <unlockStuff()>
c001e265:	b0 01                	mov    al,0x1
c001e267:	83 c4 0c             	add    esp,0xc
c001e26a:	c3                   	ret    
c001e26b:	90                   	nop

c001e26c <Semaphore::assertLocked(char const*)>:
c001e26c:	83 ec 0c             	sub    esp,0xc
c001e26f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e273:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e277:	e8 f3 fb ff ff       	call   c001de6f <lockStuff()>
c001e27c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e27e:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001e281:	7c 05                	jl     c001e288 <Semaphore::assertLocked(char const*)+0x1c>
c001e283:	83 c4 0c             	add    esp,0xc
c001e286:	eb 81                	jmp    c001e209 <unlockStuff()>
c001e288:	83 ec 0c             	sub    esp,0xc
c001e28b:	52                   	push   edx
c001e28c:	e8 92 c3 ff ff       	call   c001a623 <Krnl::panic(char const*)>
c001e291:	83 c4 10             	add    esp,0x10
c001e294:	83 c4 0c             	add    esp,0xc
c001e297:	e9 6d ff ff ff       	jmp    c001e209 <unlockStuff()>

c001e29c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e29c:	83 ec 0c             	sub    esp,0xc
c001e29f:	e8 8f fb ff ff       	call   c001de33 <getIRQNestingLevel()>
c001e2a4:	83 ec 08             	sub    esp,0x8
c001e2a7:	50                   	push   eax
c001e2a8:	68 84 c5 02 c0       	push   0xc002c584
c001e2ad:	e8 bf 4c ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001e2b2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e2b6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2bb:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e2be:	e8 c1 fe ff ff       	call   c001e184 <schedule()>
c001e2c3:	e8 82 fb ff ff       	call   c001de4a <unlockScheduler()>
c001e2c8:	e8 66 fb ff ff       	call   c001de33 <getIRQNestingLevel()>
c001e2cd:	5a                   	pop    edx
c001e2ce:	59                   	pop    ecx
c001e2cf:	50                   	push   eax
c001e2d0:	68 b8 c5 02 c0       	push   0xc002c5b8
c001e2d5:	e8 97 4c ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001e2da:	83 c4 1c             	add    esp,0x1c
c001e2dd:	c3                   	ret    

c001e2de <blockTask(TaskState)>:
c001e2de:	83 ec 0c             	sub    esp,0xc
c001e2e1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e2e5:	e8 5e fb ff ff       	call   c001de48 <lockScheduler()>
c001e2ea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2ef:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e2f2:	e8 8d fe ff ff       	call   c001e184 <schedule()>
c001e2f7:	83 c4 0c             	add    esp,0xc
c001e2fa:	e9 4b fb ff ff       	jmp    c001de4a <unlockScheduler()>

c001e2ff <waitTask(int, int*, int)>:
c001e2ff:	83 ec 18             	sub    esp,0x18
c001e302:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e307:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e30b:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e30e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e312:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e317:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e31a:	6a 07                	push   0x7
c001e31c:	e8 bd ff ff ff       	call   c001e2de <blockTask(TaskState)>
c001e321:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e326:	83 c4 10             	add    esp,0x10
c001e329:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e32c:	85 d2                	test   edx,edx
c001e32e:	74 0a                	je     c001e33a <waitTask(int, int*, int)+0x3b>
c001e330:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e333:	89 02                	mov    DWORD PTR [edx],eax
c001e335:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e33a:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e33d:	83 c4 0c             	add    esp,0xc
c001e340:	c3                   	ret    

c001e341 <nanoSleepUntil(unsigned long long)>:
c001e341:	83 ec 0c             	sub    esp,0xc
c001e344:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e348:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e34c:	3b 05 d0 ec 02 c0    	cmp    eax,DWORD PTR ds:0xc002ecd0
c001e352:	89 d1                	mov    ecx,edx
c001e354:	1b 0d d4 ec 02 c0    	sbb    ecx,DWORD PTR ds:0xc002ecd4
c001e35a:	73 04                	jae    c001e360 <nanoSleepUntil(unsigned long long)+0x1f>
c001e35c:	83 c4 0c             	add    esp,0xc
c001e35f:	c3                   	ret    
c001e360:	e8 0a fb ff ff       	call   c001de6f <lockStuff()>
c001e365:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e36b:	83 ec 08             	sub    esp,0x8
c001e36e:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e371:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e374:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e37a:	68 9c 1b 03 c0       	push   0xc0031b9c
c001e37f:	e8 ec a7 00 00       	call   c0028b70 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e384:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e38b:	e8 4e ff ff ff       	call   c001e2de <blockTask(TaskState)>
c001e390:	83 c4 1c             	add    esp,0x1c
c001e393:	e9 71 fe ff ff       	jmp    c001e209 <unlockStuff()>

c001e398 <nanoSleep(unsigned long long)>:
c001e398:	a1 d0 ec 02 c0       	mov    eax,ds:0xc002ecd0
c001e39d:	8b 15 d4 ec 02 c0    	mov    edx,DWORD PTR ds:0xc002ecd4
c001e3a3:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e3a7:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e3ab:	eb 94                	jmp    c001e341 <nanoSleepUntil(unsigned long long)>

c001e3ad <sleep(unsigned long long)>:
c001e3ad:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e3b5:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e3ba:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e3be:	01 ca                	add    edx,ecx
c001e3c0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e3c4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e3c8:	eb ce                	jmp    c001e398 <nanoSleep(unsigned long long)>

c001e3ca <Semaphore::acquire()>:
c001e3ca:	83 ec 0c             	sub    esp,0xc
c001e3cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3d1:	e8 99 fa ff ff       	call   c001de6f <lockStuff()>
c001e3d6:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e3d9:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e3db:	7d 0c                	jge    c001e3e9 <Semaphore::acquire()+0x1f>
c001e3dd:	42                   	inc    edx
c001e3de:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e3e1:	83 c4 0c             	add    esp,0xc
c001e3e4:	e9 20 fe ff ff       	jmp    c001e209 <unlockStuff()>
c001e3e9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e3ef:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001e3f6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e3f9:	85 d2                	test   edx,edx
c001e3fb:	74 2a                	je     c001e427 <Semaphore::acquire()+0x5d>
c001e3fd:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e400:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e406:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001e409:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e40f:	83 ec 0c             	sub    esp,0xc
c001e412:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e415:	6a 05                	push   0x5
c001e417:	e8 c2 fe ff ff       	call   c001e2de <blockTask(TaskState)>
c001e41c:	83 c4 10             	add    esp,0x10
c001e41f:	83 c4 0c             	add    esp,0xc
c001e422:	e9 e2 fd ff ff       	jmp    c001e209 <unlockStuff()>
c001e427:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e42d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e430:	eb d7                	jmp    c001e409 <Semaphore::acquire()+0x3f>

c001e432 <taskReturned>:
c001e432:	83 ec 18             	sub    esp,0x18
c001e435:	68 ec c5 02 c0       	push   0xc002c5ec
c001e43a:	e8 e4 c1 ff ff       	call   c001a623 <Krnl::panic(char const*)>
c001e43f:	83 c4 10             	add    esp,0x10
c001e442:	83 ec 0c             	sub    esp,0xc
c001e445:	6a 02                	push   0x2
c001e447:	e8 92 fe ff ff       	call   c001e2de <blockTask(TaskState)>
c001e44c:	e8 f7 f9 ff ff       	call   c001de48 <lockScheduler()>
c001e451:	e8 2e fd ff ff       	call   c001e184 <schedule()>
c001e456:	e8 ef f9 ff ff       	call   c001de4a <unlockScheduler()>
c001e45b:	83 c4 10             	add    esp,0x10
c001e45e:	eb e2                	jmp    c001e442 <taskReturned+0x10>

c001e460 <unblockTask(ThreadControlBlock*)>:
c001e460:	53                   	push   ebx
c001e461:	83 ec 08             	sub    esp,0x8
c001e464:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e468:	e8 db f9 ff ff       	call   c001de48 <lockScheduler()>
c001e46d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e470:	85 c0                	test   eax,eax
c001e472:	74 5c                	je     c001e4d0 <unblockTask(ThreadControlBlock*)+0x70>
c001e474:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e477:	48                   	dec    eax
c001e478:	74 31                	je     c001e4ab <unblockTask(ThreadControlBlock*)+0x4b>
c001e47a:	83 ec 0c             	sub    esp,0xc
c001e47d:	68 a8 1b 03 c0       	push   0xc0031ba8
c001e482:	e8 17 a6 00 00       	call   c0028a9e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e487:	83 c4 10             	add    esp,0x10
c001e48a:	85 c0                	test   eax,eax
c001e48c:	75 17                	jne    c001e4a5 <unblockTask(ThreadControlBlock*)+0x45>
c001e48e:	eb 65                	jmp    c001e4f5 <unblockTask(ThreadControlBlock*)+0x95>
c001e490:	83 ec 08             	sub    esp,0x8
c001e493:	50                   	push   eax
c001e494:	68 a8 1b 03 c0       	push   0xc0031ba8
c001e499:	e8 da a8 00 00       	call   c0028d78 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e49e:	83 c4 10             	add    esp,0x10
c001e4a1:	85 c0                	test   eax,eax
c001e4a3:	74 50                	je     c001e4f5 <unblockTask(ThreadControlBlock*)+0x95>
c001e4a5:	39 c3                	cmp    ebx,eax
c001e4a7:	75 e7                	jne    c001e490 <unblockTask(ThreadControlBlock*)+0x30>
c001e4a9:	eb 1c                	jmp    c001e4c7 <unblockTask(ThreadControlBlock*)+0x67>
c001e4ab:	83 ec 0c             	sub    esp,0xc
c001e4ae:	68 dc c6 02 c0       	push   0xc002c6dc
c001e4b3:	e8 b9 4a ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001e4b8:	c7 04 24 68 c6 02 c0 	mov    DWORD PTR [esp],0xc002c668
c001e4bf:	e8 ad 4a ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001e4c4:	83 c4 10             	add    esp,0x10
c001e4c7:	83 c4 08             	add    esp,0x8
c001e4ca:	5b                   	pop    ebx
c001e4cb:	e9 7a f9 ff ff       	jmp    c001de4a <unlockScheduler()>
c001e4d0:	83 ec 0c             	sub    esp,0xc
c001e4d3:	68 20 c6 02 c0       	push   0xc002c620
c001e4d8:	e8 94 4a ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001e4dd:	c7 04 24 68 c6 02 c0 	mov    DWORD PTR [esp],0xc002c668
c001e4e4:	e8 88 4a ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001e4e9:	83 c4 10             	add    esp,0x10
c001e4ec:	83 c4 08             	add    esp,0x8
c001e4ef:	5b                   	pop    ebx
c001e4f0:	e9 55 f9 ff ff       	jmp    c001de4a <unlockScheduler()>
c001e4f5:	83 ec 08             	sub    esp,0x8
c001e4f8:	53                   	push   ebx
c001e4f9:	68 a8 1b 03 c0       	push   0xc0031ba8
c001e4fe:	e8 6d a6 00 00       	call   c0028b70 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e503:	83 c4 10             	add    esp,0x10
c001e506:	83 c4 08             	add    esp,0x8
c001e509:	5b                   	pop    ebx
c001e50a:	e9 3b f9 ff ff       	jmp    c001de4a <unlockScheduler()>

c001e50f <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e50f:	55                   	push   ebp
c001e510:	57                   	push   edi
c001e511:	56                   	push   esi
c001e512:	53                   	push   ebx
c001e513:	83 ec 1c             	sub    esp,0x1c
c001e516:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e51a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e51d:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e523:	85 ff                	test   edi,edi
c001e525:	7e 20                	jle    c001e547 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e527:	31 f6                	xor    esi,esi
c001e529:	83 ec 0c             	sub    esp,0xc
c001e52c:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e533:	46                   	inc    esi
c001e534:	e8 17 13 ff ff       	call   c000f850 <free>
c001e539:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e53c:	83 c4 10             	add    esp,0x10
c001e53f:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e545:	7f e2                	jg     c001e529 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e547:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e551:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e556:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e559:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e55c:	d3 c0                	rol    eax,cl
c001e55e:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001e565:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e568:	89 f7                	mov    edi,esi
c001e56a:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e572:	0f 85 74 01 00 00    	jne    c001e6ec <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001e578:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e57e:	85 ed                	test   ebp,ebp
c001e580:	74 1b                	je     c001e59d <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e582:	83 ec 0c             	sub    esp,0xc
c001e585:	55                   	push   ebp
c001e586:	e8 05 be ff ff       	call   c001a390 <EnvVarContainer::~EnvVarContainer()>
c001e58b:	59                   	pop    ecx
c001e58c:	5e                   	pop    esi
c001e58d:	6a 0c                	push   0xc
c001e58f:	55                   	push   ebp
c001e590:	e8 fc 48 ff ff       	call   c0012e91 <operator delete(void*, unsigned long)>
c001e595:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e598:	83 c4 10             	add    esp,0x10
c001e59b:	89 f7                	mov    edi,esi
c001e59d:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e5a3:	85 c0                	test   eax,eax
c001e5a5:	0f 84 aa 00 00 00    	je     c001e655 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e5ab:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e5ae:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e5b2:	31 c9                	xor    ecx,ecx
c001e5b4:	eb 10                	jmp    c001e5c6 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e5b6:	41                   	inc    ecx
c001e5b7:	83 f9 10             	cmp    ecx,0x10
c001e5ba:	0f 84 95 00 00 00    	je     c001e655 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e5c0:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e5c6:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e5cd:	d3 fa                	sar    edx,cl
c001e5cf:	83 e2 01             	and    edx,0x1
c001e5d2:	74 e2                	je     c001e5b6 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e5d4:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e5d7:	01 ca                	add    edx,ecx
c001e5d9:	89 d5                	mov    ebp,edx
c001e5db:	c1 e5 05             	shl    ebp,0x5
c001e5de:	01 ea                	add    edx,ebp
c001e5e0:	01 d0                	add    eax,edx
c001e5e2:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e5e8:	83 fd 07             	cmp    ebp,0x7
c001e5eb:	75 c9                	jne    c001e5b6 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e5ed:	05 40 02 00 00       	add    eax,0x240
c001e5f2:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e5f5:	83 fd ff             	cmp    ebp,0xffffffff
c001e5f8:	0f 8c 08 01 00 00    	jl     c001e706 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e5fe:	0f 84 b9 01 00 00    	je     c001e7bd <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001e604:	85 ed                	test   ebp,ebp
c001e606:	0f 84 a0 01 00 00    	je     c001e7ac <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001e60c:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e60e:	75 a6                	jne    c001e5b6 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e610:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e616:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e61a:	01 d0                	add    eax,edx
c001e61c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e620:	83 ec 0c             	sub    esp,0xc
c001e623:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e629:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e62c:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e632:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e639:	50                   	push   eax
c001e63a:	e8 21 fe ff ff       	call   c001e460 <unblockTask(ThreadControlBlock*)>
c001e63f:	83 c4 10             	add    esp,0x10
c001e642:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e649:	89 f7                	mov    edi,esi
c001e64b:	41                   	inc    ecx
c001e64c:	83 f9 10             	cmp    ecx,0x10
c001e64f:	0f 85 6b ff ff ff    	jne    c001e5c0 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e655:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e65b:	85 c0                	test   eax,eax
c001e65d:	74 5d                	je     c001e6bc <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e65f:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e665:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e66b:	74 4f                	je     c001e6bc <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e66d:	83 ec 0c             	sub    esp,0xc
c001e670:	68 a8 1b 03 c0       	push   0xc0031ba8
c001e675:	e8 24 a4 00 00       	call   c0028a9e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e67a:	c7 04 24 a8 1b 03 c0 	mov    DWORD PTR [esp],0xc0031ba8
c001e681:	89 c7                	mov    edi,eax
c001e683:	e8 1e a4 00 00       	call   c0028aa6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e688:	83 c4 10             	add    esp,0x10
c001e68b:	84 c0                	test   al,al
c001e68d:	0f 84 e4 00 00 00    	je     c001e777 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001e693:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e696:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e69c:	85 d2                	test   edx,edx
c001e69e:	74 0f                	je     c001e6af <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e6a0:	83 ec 0c             	sub    esp,0xc
c001e6a3:	8b 02                	mov    eax,DWORD PTR [edx]
c001e6a5:	52                   	push   edx
c001e6a6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e6a9:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e6ac:	83 c4 10             	add    esp,0x10
c001e6af:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e6b9:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e6bc:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e6c2:	85 db                	test   ebx,ebx
c001e6c4:	74 16                	je     c001e6dc <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e6c6:	83 ec 0c             	sub    esp,0xc
c001e6c9:	53                   	push   ebx
c001e6ca:	e8 3f 3b ff ff       	call   c001220e <VAS::~VAS()>
c001e6cf:	58                   	pop    eax
c001e6d0:	5a                   	pop    edx
c001e6d1:	6a 10                	push   0x10
c001e6d3:	53                   	push   ebx
c001e6d4:	e8 b8 47 ff ff       	call   c0012e91 <operator delete(void*, unsigned long)>
c001e6d9:	83 c4 10             	add    esp,0x10
c001e6dc:	83 ec 0c             	sub    esp,0xc
c001e6df:	68 36 c4 02 c0       	push   0xc002c436
c001e6e4:	e8 88 48 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001e6e9:	83 c4 10             	add    esp,0x10
c001e6ec:	83 ec 08             	sub    esp,0x8
c001e6ef:	68 3f 07 00 00       	push   0x73f
c001e6f4:	68 44 c4 02 c0       	push   0xc002c444
c001e6f9:	e8 73 48 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001e6fe:	83 c4 2c             	add    esp,0x2c
c001e701:	5b                   	pop    ebx
c001e702:	5e                   	pop    esi
c001e703:	5f                   	pop    edi
c001e704:	5d                   	pop    ebp
c001e705:	c3                   	ret    
c001e706:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e70a:	83 ec 0c             	sub    esp,0xc
c001e70d:	68 20 c7 02 c0       	push   0xc002c720
c001e712:	e8 0c bf ff ff       	call   c001a623 <Krnl::panic(char const*)>
c001e717:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e71a:	83 c4 10             	add    esp,0x10
c001e71d:	89 f7                	mov    edi,esi
c001e71f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e723:	e9 8e fe ff ff       	jmp    c001e5b6 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e728:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e72e:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e734:	75 1c                	jne    c001e752 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e736:	83 ec 0c             	sub    esp,0xc
c001e739:	68 88 c7 02 c0       	push   0xc002c788
c001e73e:	e8 2e 48 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001e743:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e74a:	e8 8f fb ff ff       	call   c001e2de <blockTask(TaskState)>
c001e74f:	83 c4 10             	add    esp,0x10
c001e752:	83 ec 08             	sub    esp,0x8
c001e755:	56                   	push   esi
c001e756:	68 a8 1b 03 c0       	push   0xc0031ba8
c001e75b:	e8 10 a4 00 00       	call   c0028b70 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e760:	c7 04 24 a8 1b 03 c0 	mov    DWORD PTR [esp],0xc0031ba8
c001e767:	e8 32 a3 00 00       	call   c0028a9e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e76c:	83 c4 10             	add    esp,0x10
c001e76f:	39 f8                	cmp    eax,edi
c001e771:	0f 84 1c ff ff ff    	je     c001e693 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e777:	83 ec 0c             	sub    esp,0xc
c001e77a:	68 a8 1b 03 c0       	push   0xc0031ba8
c001e77f:	e8 1a a3 00 00       	call   c0028a9e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e784:	c7 04 24 a8 1b 03 c0 	mov    DWORD PTR [esp],0xc0031ba8
c001e78b:	89 c6                	mov    esi,eax
c001e78d:	e8 30 a3 00 00       	call   c0028ac2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e792:	83 c4 10             	add    esp,0x10
c001e795:	39 f3                	cmp    ebx,esi
c001e797:	74 b9                	je     c001e752 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e799:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e79c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e79f:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e7a5:	75 ab                	jne    c001e752 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e7a7:	e9 7c ff ff ff       	jmp    c001e728 <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001e7ac:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e7b0:	83 ec 0c             	sub    esp,0xc
c001e7b3:	68 54 c7 02 c0       	push   0xc002c754
c001e7b8:	e9 55 ff ff ff       	jmp    c001e712 <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001e7bd:	8b 36                	mov    esi,DWORD PTR [esi]
c001e7bf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e7c3:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e7c6:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e7c9:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e7cf:	01 d7                	add    edi,edx
c001e7d1:	89 f8                	mov    eax,edi
c001e7d3:	e9 44 fe ff ff       	jmp    c001e61c <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e7d8 <cleanerTaskFunction(void*)>:
c001e7d8:	53                   	push   ebx
c001e7d9:	83 ec 08             	sub    esp,0x8
c001e7dc:	e8 69 f6 ff ff       	call   c001de4a <unlockScheduler()>
c001e7e1:	e8 62 f6 ff ff       	call   c001de48 <lockScheduler()>
c001e7e6:	80 3d 6c 1b 03 c0 00 	cmp    BYTE PTR ds:0xc0031b6c,0x0
c001e7ed:	0f 85 8e 00 00 00    	jne    c001e881 <cleanerTaskFunction(void*)+0xa9>
c001e7f3:	83 ec 0c             	sub    esp,0xc
c001e7f6:	6a 02                	push   0x2
c001e7f8:	e8 9f fa ff ff       	call   c001e29c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e7fd:	83 c4 10             	add    esp,0x10
c001e800:	c6 05 6c 1b 03 c0 00 	mov    BYTE PTR ds:0xc0031b6c,0x0
c001e807:	e8 63 f6 ff ff       	call   c001de6f <lockStuff()>
c001e80c:	e8 37 f6 ff ff       	call   c001de48 <lockScheduler()>
c001e811:	83 ec 0c             	sub    esp,0xc
c001e814:	68 90 1b 03 c0       	push   0xc0031b90
c001e819:	e8 88 a2 00 00       	call   c0028aa6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e81e:	83 c4 10             	add    esp,0x10
c001e821:	84 c0                	test   al,al
c001e823:	75 40                	jne    c001e865 <cleanerTaskFunction(void*)+0x8d>
c001e825:	83 ec 0c             	sub    esp,0xc
c001e828:	68 90 1b 03 c0       	push   0xc0031b90
c001e82d:	e8 6c a2 00 00       	call   c0028a9e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e832:	c7 04 24 90 1b 03 c0 	mov    DWORD PTR [esp],0xc0031b90
c001e839:	89 c3                	mov    ebx,eax
c001e83b:	e8 82 a2 00 00       	call   c0028ac2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e840:	c7 04 24 5a c4 02 c0 	mov    DWORD PTR [esp],0xc002c45a
c001e847:	e8 25 47 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001e84c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e84f:	e8 bb fc ff ff       	call   c001e50f <cleanupTerminatedTask(ThreadControlBlock*)>
c001e854:	c7 04 24 73 c4 02 c0 	mov    DWORD PTR [esp],0xc002c473
c001e85b:	e8 11 47 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001e860:	83 c4 10             	add    esp,0x10
c001e863:	eb ac                	jmp    c001e811 <cleanerTaskFunction(void*)+0x39>
c001e865:	e8 e0 f5 ff ff       	call   c001de4a <unlockScheduler()>
c001e86a:	e8 9a f9 ff ff       	call   c001e209 <unlockStuff()>
c001e86f:	e8 d4 f5 ff ff       	call   c001de48 <lockScheduler()>
c001e874:	80 3d 6c 1b 03 c0 00 	cmp    BYTE PTR ds:0xc0031b6c,0x0
c001e87b:	0f 84 72 ff ff ff    	je     c001e7f3 <cleanerTaskFunction(void*)+0x1b>
c001e881:	e8 c4 f5 ff ff       	call   c001de4a <unlockScheduler()>
c001e886:	e9 75 ff ff ff       	jmp    c001e800 <cleanerTaskFunction(void*)+0x28>

c001e88b <terminateTask(int)>:
c001e88b:	83 ec 14             	sub    esp,0x14
c001e88e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e893:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001e896:	83 c0 0c             	add    eax,0xc
c001e899:	50                   	push   eax
c001e89a:	68 b0 c7 02 c0       	push   0xc002c7b0
c001e89f:	e8 cd 46 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001e8a4:	e8 c6 f5 ff ff       	call   c001de6f <lockStuff()>
c001e8a9:	e8 9a f5 ff ff       	call   c001de48 <lockScheduler()>
c001e8ae:	c7 04 24 86 c4 02 c0 	mov    DWORD PTR [esp],0xc002c486
c001e8b5:	e8 b7 46 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001e8ba:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e8be:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e8c3:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e8c6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e8cb:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e8ce:	5a                   	pop    edx
c001e8cf:	59                   	pop    ecx
c001e8d0:	50                   	push   eax
c001e8d1:	68 90 1b 03 c0       	push   0xc0031b90
c001e8d6:	e8 95 a2 00 00       	call   c0028b70 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e8db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e8e0:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e8e7:	c7 04 24 a0 c4 02 c0 	mov    DWORD PTR [esp],0xc002c4a0
c001e8ee:	e8 7e 46 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001e8f3:	83 c4 10             	add    esp,0x10
c001e8f6:	a1 68 1b 03 c0       	mov    eax,ds:0xc0031b68
c001e8fb:	85 c0                	test   eax,eax
c001e8fd:	74 5a                	je     c001e959 <terminateTask(int)+0xce>
c001e8ff:	83 ec 0c             	sub    esp,0xc
c001e902:	68 ba c4 02 c0       	push   0xc002c4ba
c001e907:	e8 65 46 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001e90c:	58                   	pop    eax
c001e90d:	c6 05 6c 1b 03 c0 01 	mov    BYTE PTR ds:0xc0031b6c,0x1
c001e914:	ff 35 68 1b 03 c0    	push   DWORD PTR ds:0xc0031b68
c001e91a:	e8 41 fb ff ff       	call   c001e460 <unblockTask(ThreadControlBlock*)>
c001e91f:	c7 04 24 d4 c4 02 c0 	mov    DWORD PTR [esp],0xc002c4d4
c001e926:	e8 46 46 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001e92b:	83 c4 10             	add    esp,0x10
c001e92e:	e8 17 f5 ff ff       	call   c001de4a <unlockScheduler()>
c001e933:	e8 d1 f8 ff ff       	call   c001e209 <unlockStuff()>
c001e938:	83 ec 0c             	sub    esp,0xc
c001e93b:	68 0c c5 02 c0       	push   0xc002c50c
c001e940:	e8 2c 46 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001e945:	83 c4 10             	add    esp,0x10
c001e948:	e8 fb f4 ff ff       	call   c001de48 <lockScheduler()>
c001e94d:	e8 32 f8 ff ff       	call   c001e184 <schedule()>
c001e952:	e8 f3 f4 ff ff       	call   c001de4a <unlockScheduler()>
c001e957:	eb ef                	jmp    c001e948 <terminateTask(int)+0xbd>
c001e959:	83 ec 0c             	sub    esp,0xc
c001e95c:	68 ee c4 02 c0       	push   0xc002c4ee
c001e961:	e8 0b 46 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001e966:	83 c4 10             	add    esp,0x10
c001e969:	eb c3                	jmp    c001e92e <terminateTask(int)+0xa3>

c001e96b <Thr::terminateFromIRQ(int)>:
c001e96b:	83 ec 18             	sub    esp,0x18
c001e96e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e972:	e8 14 ff ff ff       	call   c001e88b <terminateTask(int)>
c001e977:	90                   	nop

c001e978 <Semaphore::release()>:
c001e978:	83 ec 0c             	sub    esp,0xc
c001e97b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e97f:	e8 eb f4 ff ff       	call   c001de6f <lockStuff()>
c001e984:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e987:	85 d2                	test   edx,edx
c001e989:	74 1a                	je     c001e9a5 <Semaphore::release()+0x2d>
c001e98b:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001e98e:	83 ec 0c             	sub    esp,0xc
c001e991:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001e994:	52                   	push   edx
c001e995:	e8 c6 fa ff ff       	call   c001e460 <unblockTask(ThreadControlBlock*)>
c001e99a:	83 c4 10             	add    esp,0x10
c001e99d:	83 c4 0c             	add    esp,0xc
c001e9a0:	e9 64 f8 ff ff       	jmp    c001e209 <unlockStuff()>
c001e9a5:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001e9a8:	83 c4 0c             	add    esp,0xc
c001e9ab:	e9 59 f8 ff ff       	jmp    c001e209 <unlockStuff()>

c001e9b0 <__static_initialization_and_destruction_0(int, int)>:
c001e9b0:	83 ec 0c             	sub    esp,0xc
c001e9b3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e9b8:	0f 85 88 00 00 00    	jne    c001ea46 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e9be:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e9c6:	75 7e                	jne    c001ea46 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e9c8:	83 ec 0c             	sub    esp,0xc
c001e9cb:	68 a8 1b 03 c0       	push   0xc0031ba8
c001e9d0:	e8 4b a3 00 00       	call   c0028d20 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e9d5:	83 c4 10             	add    esp,0x10
c001e9d8:	83 ec 04             	sub    esp,0x4
c001e9db:	68 68 d5 02 c0       	push   0xc002d568
c001e9e0:	68 a8 1b 03 c0       	push   0xc0031ba8
c001e9e5:	68 e0 8c 02 c0       	push   0xc0028ce0
c001e9ea:	e8 1c 44 ff ff       	call   c0012e0b <__cxa_atexit>
c001e9ef:	83 c4 10             	add    esp,0x10
c001e9f2:	83 ec 0c             	sub    esp,0xc
c001e9f5:	68 9c 1b 03 c0       	push   0xc0031b9c
c001e9fa:	e8 21 a3 00 00       	call   c0028d20 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e9ff:	83 c4 10             	add    esp,0x10
c001ea02:	83 ec 04             	sub    esp,0x4
c001ea05:	68 68 d5 02 c0       	push   0xc002d568
c001ea0a:	68 9c 1b 03 c0       	push   0xc0031b9c
c001ea0f:	68 e0 8c 02 c0       	push   0xc0028ce0
c001ea14:	e8 f2 43 ff ff       	call   c0012e0b <__cxa_atexit>
c001ea19:	83 c4 10             	add    esp,0x10
c001ea1c:	83 ec 0c             	sub    esp,0xc
c001ea1f:	68 90 1b 03 c0       	push   0xc0031b90
c001ea24:	e8 f7 a2 00 00       	call   c0028d20 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ea29:	83 c4 10             	add    esp,0x10
c001ea2c:	83 ec 04             	sub    esp,0x4
c001ea2f:	68 68 d5 02 c0       	push   0xc002d568
c001ea34:	68 90 1b 03 c0       	push   0xc0031b90
c001ea39:	68 e0 8c 02 c0       	push   0xc0028ce0
c001ea3e:	e8 c8 43 ff ff       	call   c0012e0b <__cxa_atexit>
c001ea43:	83 c4 10             	add    esp,0x10
c001ea46:	90                   	nop
c001ea47:	83 c4 0c             	add    esp,0xc
c001ea4a:	c3                   	ret    

c001ea4b <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001ea4b:	83 ec 0c             	sub    esp,0xc
c001ea4e:	83 ec 08             	sub    esp,0x8
c001ea51:	68 ff ff 00 00       	push   0xffff
c001ea56:	6a 01                	push   0x1
c001ea58:	e8 53 ff ff ff       	call   c001e9b0 <__static_initialization_and_destruction_0(int, int)>
c001ea5d:	83 c4 10             	add    esp,0x10
c001ea60:	83 c4 0c             	add    esp,0xc
c001ea63:	c3                   	ret    

c001ea64 <Vm::inbv(unsigned short)>:
c001ea64:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ea68:	66 81 fa fe fe       	cmp    dx,0xfefe
c001ea6d:	75 06                	jne    c001ea75 <Vm::inbv(unsigned short)+0x11>
c001ea6f:	a0 ec 1b 03 c0       	mov    al,ds:0xc0031bec
c001ea74:	c3                   	ret    
c001ea75:	ec                   	in     al,dx
c001ea76:	c3                   	ret    

c001ea77 <Vm::outbv(unsigned short, unsigned char)>:
c001ea77:	53                   	push   ebx
c001ea78:	83 ec 08             	sub    esp,0x8
c001ea7b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ea7f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ea83:	66 81 fa fe fe       	cmp    dx,0xfefe
c001ea88:	75 38                	jne    c001eac2 <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001ea8a:	0f b6 c3             	movzx  eax,bl
c001ea8d:	51                   	push   ecx
c001ea8e:	51                   	push   ecx
c001ea8f:	50                   	push   eax
c001ea90:	68 cf c7 02 c0       	push   0xc002c7cf
c001ea95:	e8 d7 44 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001ea9a:	8b 15 ec 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031bec
c001eaa0:	83 c4 10             	add    esp,0x10
c001eaa3:	8d 42 01             	lea    eax,[edx+0x1]
c001eaa6:	88 9a 00 1c 03 c0    	mov    BYTE PTR [edx-0x3ffce400],bl
c001eaac:	a3 ec 1b 03 c0       	mov    ds:0xc0031bec,eax
c001eab1:	83 f8 20             	cmp    eax,0x20
c001eab4:	75 0f                	jne    c001eac5 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001eab6:	c7 05 ec 1b 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0031bec,0x1f
c001eac0:	eb 03                	jmp    c001eac5 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001eac2:	88 d8                	mov    al,bl
c001eac4:	ee                   	out    dx,al
c001eac5:	83 c4 08             	add    esp,0x8
c001eac8:	5b                   	pop    ebx
c001eac9:	c3                   	ret    

c001eaca <Vm::realToLinear(unsigned short, unsigned short)>:
c001eaca:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001eacf:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ead4:	c1 e0 04             	shl    eax,0x4
c001ead7:	01 d0                	add    eax,edx
c001ead9:	c3                   	ret    

c001eada <Vm::getSegment(unsigned int)>:
c001eada:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eade:	c1 e8 10             	shr    eax,0x10
c001eae1:	c3                   	ret    

c001eae2 <Vm::getOffset(unsigned int)>:
c001eae2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eae6:	c3                   	ret    

c001eae7 <Vm::mainloop2()>:
c001eae7:	83 ec 0c             	sub    esp,0xc
c001eaea:	e8 59 f3 ff ff       	call   c001de48 <lockScheduler()>
c001eaef:	83 ec 0c             	sub    esp,0xc
c001eaf2:	c6 05 e5 1b 03 c0 01 	mov    BYTE PTR ds:0xc0031be5,0x1
c001eaf9:	6a 02                	push   0x2
c001eafb:	e8 9c f7 ff ff       	call   c001e29c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001eb00:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eb05:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001eb09:	52                   	push   edx
c001eb0a:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001eb0e:	52                   	push   edx
c001eb0f:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001eb13:	52                   	push   edx
c001eb14:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001eb18:	50                   	push   eax
c001eb19:	e8 dc 17 fe ff       	call   c00002fa <goToVM86>
c001eb1e:	83 c4 2c             	add    esp,0x2c
c001eb21:	c3                   	ret    

c001eb22 <Vm::mainVm8086Loop(void*)>:
c001eb22:	83 ec 0c             	sub    esp,0xc
c001eb25:	e8 20 f3 ff ff       	call   c001de4a <unlockScheduler()>
c001eb2a:	83 c4 0c             	add    esp,0xc
c001eb2d:	eb b8                	jmp    c001eae7 <Vm::mainloop2()>

c001eb2f <Vm::mainloop3(unsigned long)>:
c001eb2f:	53                   	push   ebx
c001eb30:	83 ec 08             	sub    esp,0x8
c001eb33:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001eb37:	e8 0c f3 ff ff       	call   c001de48 <lockScheduler()>
c001eb3c:	83 ec 0c             	sub    esp,0xc
c001eb3f:	89 1d e0 1b 03 c0    	mov    DWORD PTR ds:0xc0031be0,ebx
c001eb45:	6a 02                	push   0x2
c001eb47:	c6 05 e4 1b 03 c0 01 	mov    BYTE PTR ds:0xc0031be4,0x1
c001eb4e:	e8 49 f7 ff ff       	call   c001e29c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001eb53:	83 c4 18             	add    esp,0x18
c001eb56:	5b                   	pop    ebx
c001eb57:	eb 8e                	jmp    c001eae7 <Vm::mainloop2()>

c001eb59 <Vm::initialise8086()>:
c001eb59:	83 ec 0c             	sub    esp,0xc
c001eb5c:	68 80 00 00 00       	push   0x80
c001eb61:	6a 00                	push   0x0
c001eb63:	68 22 eb 01 c0       	push   0xc001eb22
c001eb68:	ff 35 b4 1b 03 c0    	push   DWORD PTR ds:0xc0031bb4
c001eb6e:	e8 07 f4 ff ff       	call   c001df7a <Process::createThread(void (*)(void*), void*, int)>
c001eb73:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001eb7a:	a3 e8 1b 03 c0       	mov    ds:0xc0031be8,eax
c001eb7f:	68 00 01 00 00       	push   0x100
c001eb84:	a1 b4 1b 03 c0       	mov    eax,ds:0xc0031bb4
c001eb89:	6a 00                	push   0x0
c001eb8b:	6a 00                	push   0x0
c001eb8d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001eb93:	e8 d6 3a ff ff       	call   c001266e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001eb98:	83 c4 2c             	add    esp,0x2c
c001eb9b:	c3                   	ret    

c001eb9c <Vm::finish8086()>:
c001eb9c:	53                   	push   ebx
c001eb9d:	83 ec 08             	sub    esp,0x8
c001eba0:	e8 a3 f2 ff ff       	call   c001de48 <lockScheduler()>
c001eba5:	80 3d e4 1b 03 c0 00 	cmp    BYTE PTR ds:0xc0031be4,0x0
c001ebac:	75 0c                	jne    c001ebba <Vm::finish8086()+0x1e>
c001ebae:	e8 d1 f5 ff ff       	call   c001e184 <schedule()>
c001ebb3:	e8 92 f2 ff ff       	call   c001de4a <unlockScheduler()>
c001ebb8:	eb e6                	jmp    c001eba0 <Vm::finish8086()+0x4>
c001ebba:	83 ec 0c             	sub    esp,0xc
c001ebbd:	8b 1d e0 1b 03 c0    	mov    ebx,DWORD PTR ds:0xc0031be0
c001ebc3:	ff 35 e8 1b 03 c0    	push   DWORD PTR ds:0xc0031be8
c001ebc9:	c6 05 e4 1b 03 c0 00 	mov    BYTE PTR ds:0xc0031be4,0x0
c001ebd0:	e8 8b f8 ff ff       	call   c001e460 <unblockTask(ThreadControlBlock*)>
c001ebd5:	e8 70 f2 ff ff       	call   c001de4a <unlockScheduler()>
c001ebda:	89 d8                	mov    eax,ebx
c001ebdc:	83 c4 18             	add    esp,0x18
c001ebdf:	5b                   	pop    ebx
c001ebe0:	c3                   	ret    

c001ebe1 <Vm::getOutput8086(unsigned char*)>:
c001ebe1:	83 ec 10             	sub    esp,0x10
c001ebe4:	ff 35 ec 1b 03 c0    	push   DWORD PTR ds:0xc0031bec
c001ebea:	68 00 1c 03 c0       	push   0xc0031c00
c001ebef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ebf3:	e8 4c 1b fe ff       	call   c0000744 <memcpy>
c001ebf8:	a1 ec 1b 03 c0       	mov    eax,ds:0xc0031bec
c001ebfd:	c7 05 ec 1b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031bec,0x0
c001ec07:	83 c4 1c             	add    esp,0x1c
c001ec0a:	c3                   	ret    

c001ec0b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001ec0b:	55                   	push   ebp
c001ec0c:	57                   	push   edi
c001ec0d:	56                   	push   esi
c001ec0e:	53                   	push   ebx
c001ec0f:	83 ec 2c             	sub    esp,0x2c
c001ec12:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001ec16:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001ec1a:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001ec1e:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ec22:	e8 21 f2 ff ff       	call   c001de48 <lockScheduler()>
c001ec27:	a0 e5 1b 03 c0       	mov    al,ds:0xc0031be5
c001ec2c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ec30:	84 c0                	test   al,al
c001ec32:	75 0c                	jne    c001ec40 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001ec34:	e8 4b f5 ff ff       	call   c001e184 <schedule()>
c001ec39:	e8 0c f2 ff ff       	call   c001de4a <unlockScheduler()>
c001ec3e:	eb e2                	jmp    c001ec22 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001ec40:	a1 e8 1b 03 c0       	mov    eax,ds:0xc0031be8
c001ec45:	c7 05 ec 1b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031bec,0x0
c001ec4f:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001ec53:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001ec57:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001ec5b:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001ec5f:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001ec63:	50                   	push   eax
c001ec64:	6a 20                	push   0x20
c001ec66:	6a 00                	push   0x0
c001ec68:	68 00 1c 03 c0       	push   0xc0031c00
c001ec6d:	e8 06 1b fe ff       	call   c0000778 <memset>
c001ec72:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ec79:	e8 c2 0b ff ff       	call   c000f840 <malloc>
c001ec7e:	83 c4 0c             	add    esp,0xc
c001ec81:	89 c7                	mov    edi,eax
c001ec83:	ff 35 b4 1b 03 c0    	push   DWORD PTR ds:0xc0031bb4
c001ec89:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ec8d:	50                   	push   eax
c001ec8e:	e8 37 48 ff ff       	call   c00134ca <File::File(char const*, Process*)>
c001ec93:	83 c4 10             	add    esp,0x10
c001ec96:	85 ff                	test   edi,edi
c001ec98:	75 0a                	jne    c001eca4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001ec9a:	83 ec 0c             	sub    esp,0xc
c001ec9d:	68 eb c7 02 c0       	push   0xc002c7eb
c001eca2:	eb 27                	jmp    c001eccb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001eca4:	50                   	push   eax
c001eca5:	8d 44 24 17          	lea    eax,[esp+0x17]
c001eca9:	50                   	push   eax
c001ecaa:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ecae:	50                   	push   eax
c001ecaf:	57                   	push   edi
c001ecb0:	e8 25 4b ff ff       	call   c00137da <File::stat(unsigned long long*, bool*)>
c001ecb5:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001ecba:	83 c4 10             	add    esp,0x10
c001ecbd:	89 e8                	mov    eax,ebp
c001ecbf:	84 c0                	test   al,al
c001ecc1:	74 19                	je     c001ecdc <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001ecc3:	83 ec 0c             	sub    esp,0xc
c001ecc6:	68 ff c7 02 c0       	push   0xc002c7ff
c001eccb:	e8 53 b9 ff ff       	call   c001a623 <Krnl::panic(char const*)>
c001ecd0:	31 ed                	xor    ebp,ebp
c001ecd2:	e8 73 f1 ff ff       	call   c001de4a <unlockScheduler()>
c001ecd7:	83 c4 10             	add    esp,0x10
c001ecda:	eb 75                	jmp    c001ed51 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ecdc:	50                   	push   eax
c001ecdd:	50                   	push   eax
c001ecde:	6a 01                	push   0x1
c001ece0:	57                   	push   edi
c001ece1:	e8 48 48 ff ff       	call   c001352e <File::open(FileOpenMode)>
c001ece6:	83 c4 10             	add    esp,0x10
c001ece9:	85 c0                	test   eax,eax
c001eceb:	74 17                	je     c001ed04 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001eced:	83 ec 0c             	sub    esp,0xc
c001ecf0:	68 18 c8 02 c0       	push   0xc002c818
c001ecf5:	e8 29 b9 ff ff       	call   c001a623 <Krnl::panic(char const*)>
c001ecfa:	e8 4b f1 ff ff       	call   c001de4a <unlockScheduler()>
c001ecff:	83 c4 10             	add    esp,0x10
c001ed02:	eb 4d                	jmp    c001ed51 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ed04:	0f b7 f6             	movzx  esi,si
c001ed07:	50                   	push   eax
c001ed08:	0f b7 db             	movzx  ebx,bx
c001ed0b:	50                   	push   eax
c001ed0c:	56                   	push   esi
c001ed0d:	53                   	push   ebx
c001ed0e:	e8 b7 fd ff ff       	call   c001eaca <Vm::realToLinear(unsigned short, unsigned short)>
c001ed13:	5a                   	pop    edx
c001ed14:	8b 17                	mov    edx,DWORD PTR [edi]
c001ed16:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001ed1a:	51                   	push   ecx
c001ed1b:	50                   	push   eax
c001ed1c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ed20:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ed24:	57                   	push   edi
c001ed25:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001ed28:	83 c4 14             	add    esp,0x14
c001ed2b:	57                   	push   edi
c001ed2c:	e8 5b 48 ff ff       	call   c001358c <File::close()>
c001ed31:	c6 05 e5 1b 03 c0 00 	mov    BYTE PTR ds:0xc0031be5,0x0
c001ed38:	e8 0d f1 ff ff       	call   c001de4a <unlockScheduler()>
c001ed3d:	59                   	pop    ecx
c001ed3e:	ff 35 e8 1b 03 c0    	push   DWORD PTR ds:0xc0031be8
c001ed44:	e8 17 f7 ff ff       	call   c001e460 <unblockTask(ThreadControlBlock*)>
c001ed49:	83 c4 10             	add    esp,0x10
c001ed4c:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001ed51:	83 c4 2c             	add    esp,0x2c
c001ed54:	89 e8                	mov    eax,ebp
c001ed56:	5b                   	pop    ebx
c001ed57:	5e                   	pop    esi
c001ed58:	5f                   	pop    edi
c001ed59:	5d                   	pop    ebp
c001ed5a:	c3                   	ret    

c001ed5b <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001ed5b:	57                   	push   edi
c001ed5c:	56                   	push   esi
c001ed5d:	53                   	push   ebx
c001ed5e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ed62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed66:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ed6a:	83 e8 06             	sub    eax,0x6
c001ed6d:	0f b7 c0             	movzx  eax,ax
c001ed70:	50                   	push   eax
c001ed71:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001ed76:	50                   	push   eax
c001ed77:	e8 4e fd ff ff       	call   c001eaca <Vm::realToLinear(unsigned short, unsigned short)>
c001ed7c:	5a                   	pop    edx
c001ed7d:	5e                   	pop    esi
c001ed7e:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001ed81:	8d 56 fa             	lea    edx,[esi-0x6]
c001ed84:	81 e2 ff ff 00 00    	and    edx,0xffff
c001ed8a:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001ed8d:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001ed90:	83 c2 02             	add    edx,0x2
c001ed93:	66 89 10             	mov    WORD PTR [eax],dx
c001ed96:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001ed99:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001ed9d:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001eda0:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001eda4:	89 d6                	mov    esi,edx
c001eda6:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001edac:	66 81 e6 ff fd       	and    si,0xfdff
c001edb1:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001edb5:	74 07                	je     c001edbe <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001edb7:	89 d6                	mov    esi,edx
c001edb9:	66 81 ce 00 02       	or     si,0x200
c001edbe:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001edc2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001edc7:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001edcb:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001edd3:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001edd6:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001edde:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001ede1:	5b                   	pop    ebx
c001ede2:	5e                   	pop    esi
c001ede3:	5f                   	pop    edi
c001ede4:	c3                   	ret    

c001ede5 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001ede5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001edea:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001edef:	c1 e0 04             	shl    eax,0x4
c001edf2:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001edf5:	c3                   	ret    

c001edf6 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001edf6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001edfb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee00:	c1 e0 04             	shl    eax,0x4
c001ee03:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001ee07:	c3                   	ret    

c001ee08 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001ee08:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee0d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee12:	c1 e0 04             	shl    eax,0x4
c001ee15:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001ee18:	c3                   	ret    

c001ee19 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001ee19:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee1e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee23:	c1 e0 04             	shl    eax,0x4
c001ee26:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ee2a:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001ee2d:	c3                   	ret    

c001ee2e <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001ee2e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee33:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee38:	c1 e0 04             	shl    eax,0x4
c001ee3b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ee3f:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001ee43:	c3                   	ret    

c001ee44 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001ee44:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee49:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee4e:	c1 e0 04             	shl    eax,0x4
c001ee51:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ee55:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001ee58:	c3                   	ret    

c001ee59 <Vm::faultHandler(regs*)>:
c001ee59:	55                   	push   ebp
c001ee5a:	57                   	push   edi
c001ee5b:	56                   	push   esi
c001ee5c:	53                   	push   ebx
c001ee5d:	83 ec 1c             	sub    esp,0x1c
c001ee60:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ee64:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001ee67:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001ee6a:	0f b7 c1             	movzx  eax,cx
c001ee6d:	50                   	push   eax
c001ee6e:	0f b7 c3             	movzx  eax,bx
c001ee71:	c1 e3 04             	shl    ebx,0x4
c001ee74:	50                   	push   eax
c001ee75:	e8 50 fc ff ff       	call   c001eaca <Vm::realToLinear(unsigned short, unsigned short)>
c001ee7a:	5a                   	pop    edx
c001ee7b:	89 c5                	mov    ebp,eax
c001ee7d:	5e                   	pop    esi
c001ee7e:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001ee82:	50                   	push   eax
c001ee83:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001ee87:	50                   	push   eax
c001ee88:	e8 3d fc ff ff       	call   c001eaca <Vm::realToLinear(unsigned short, unsigned short)>
c001ee8d:	01 cb                	add    ebx,ecx
c001ee8f:	89 c6                	mov    esi,eax
c001ee91:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001ee95:	50                   	push   eax
c001ee96:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ee9a:	50                   	push   eax
c001ee9b:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ee9f:	50                   	push   eax
c001eea0:	55                   	push   ebp
c001eea1:	53                   	push   ebx
c001eea2:	b3 06                	mov    bl,0x6
c001eea4:	68 31 c8 02 c0       	push   0xc002c831
c001eea9:	e8 c3 40 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001eeae:	83 c4 20             	add    esp,0x20
c001eeb1:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001eeb6:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001eebb:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001eebf:	3c 9d                	cmp    al,0x9d
c001eec1:	0f 84 d7 02 00 00    	je     c001f19e <Vm::faultHandler(regs*)+0x345>
c001eec7:	0f 87 a3 00 00 00    	ja     c001ef70 <Vm::faultHandler(regs*)+0x117>
c001eecd:	3c 66                	cmp    al,0x66
c001eecf:	0f 84 15 02 00 00    	je     c001f0ea <Vm::faultHandler(regs*)+0x291>
c001eed5:	77 5f                	ja     c001ef36 <Vm::faultHandler(regs*)+0xdd>
c001eed7:	3c 36                	cmp    al,0x36
c001eed9:	0f 84 f1 01 00 00    	je     c001f0d0 <Vm::faultHandler(regs*)+0x277>
c001eedf:	77 28                	ja     c001ef09 <Vm::faultHandler(regs*)+0xb0>
c001eee1:	3c 26                	cmp    al,0x26
c001eee3:	0f 84 99 01 00 00    	je     c001f082 <Vm::faultHandler(regs*)+0x229>
c001eee9:	3c 2e                	cmp    al,0x2e
c001eeeb:	0f 85 3b 07 00 00    	jne    c001f62c <Vm::faultHandler(regs*)+0x7d3>
c001eef1:	83 ec 0c             	sub    esp,0xc
c001eef4:	31 db                	xor    ebx,ebx
c001eef6:	68 46 c8 02 c0       	push   0xc002c846
c001eefb:	e8 71 40 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001ef00:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef03:	83 c4 10             	add    esp,0x10
c001ef06:	45                   	inc    ebp
c001ef07:	eb b2                	jmp    c001eebb <Vm::faultHandler(regs*)+0x62>
c001ef09:	3c 64                	cmp    al,0x64
c001ef0b:	0f 84 8b 01 00 00    	je     c001f09c <Vm::faultHandler(regs*)+0x243>
c001ef11:	0f 87 9f 01 00 00    	ja     c001f0b6 <Vm::faultHandler(regs*)+0x25d>
c001ef17:	3c 3e                	cmp    al,0x3e
c001ef19:	0f 85 0d 07 00 00    	jne    c001f62c <Vm::faultHandler(regs*)+0x7d3>
c001ef1f:	83 ec 0c             	sub    esp,0xc
c001ef22:	b3 01                	mov    bl,0x1
c001ef24:	68 4a c8 02 c0       	push   0xc002c84a
c001ef29:	e8 43 40 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001ef2e:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef31:	83 c4 10             	add    esp,0x10
c001ef34:	eb d0                	jmp    c001ef06 <Vm::faultHandler(regs*)+0xad>
c001ef36:	3c 6d                	cmp    al,0x6d
c001ef38:	0f 84 af 03 00 00    	je     c001f2ed <Vm::faultHandler(regs*)+0x494>
c001ef3e:	77 15                	ja     c001ef55 <Vm::faultHandler(regs*)+0xfc>
c001ef40:	3c 67                	cmp    al,0x67
c001ef42:	0f 84 bf 01 00 00    	je     c001f107 <Vm::faultHandler(regs*)+0x2ae>
c001ef48:	3c 6c                	cmp    al,0x6c
c001ef4a:	0f 84 3f 03 00 00    	je     c001f28f <Vm::faultHandler(regs*)+0x436>
c001ef50:	e9 d7 06 00 00       	jmp    c001f62c <Vm::faultHandler(regs*)+0x7d3>
c001ef55:	3c 6f                	cmp    al,0x6f
c001ef57:	0f 84 a4 04 00 00    	je     c001f401 <Vm::faultHandler(regs*)+0x5a8>
c001ef5d:	0f 82 11 04 00 00    	jb     c001f374 <Vm::faultHandler(regs*)+0x51b>
c001ef63:	3c 9c                	cmp    al,0x9c
c001ef65:	0f 84 ba 01 00 00    	je     c001f125 <Vm::faultHandler(regs*)+0x2cc>
c001ef6b:	e9 bc 06 00 00       	jmp    c001f62c <Vm::faultHandler(regs*)+0x7d3>
c001ef70:	3c ec                	cmp    al,0xec
c001ef72:	0f 84 24 06 00 00    	je     c001f59c <Vm::faultHandler(regs*)+0x743>
c001ef78:	0f 87 93 00 00 00    	ja     c001f011 <Vm::faultHandler(regs*)+0x1b8>
c001ef7e:	3c e4                	cmp    al,0xe4
c001ef80:	0f 84 5c 05 00 00    	je     c001f4e2 <Vm::faultHandler(regs*)+0x689>
c001ef86:	77 6a                	ja     c001eff2 <Vm::faultHandler(regs*)+0x199>
c001ef88:	3c cd                	cmp    al,0xcd
c001ef8a:	0f 84 7e 02 00 00    	je     c001f20e <Vm::faultHandler(regs*)+0x3b5>
c001ef90:	3c cf                	cmp    al,0xcf
c001ef92:	0f 85 94 06 00 00    	jne    c001f62c <Vm::faultHandler(regs*)+0x7d3>
c001ef98:	83 ec 0c             	sub    esp,0xc
c001ef9b:	68 8e c8 02 c0       	push   0xc002c88e
c001efa0:	e8 cc 3f ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001efa5:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001efa8:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001efab:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001efaf:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001efb2:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001efb6:	0d 00 02 02 00       	or     eax,0x20200
c001efbb:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001efbe:	56                   	push   esi
c001efbf:	53                   	push   ebx
c001efc0:	52                   	push   edx
c001efc1:	68 94 c8 02 c0       	push   0xc002c894
c001efc6:	e8 a6 3f ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001efcb:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001efcf:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001efd5:	66 c1 e8 09          	shr    ax,0x9
c001efd9:	83 e0 01             	and    eax,0x1
c001efdc:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001efdf:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001efe2:	83 c0 06             	add    eax,0x6
c001efe5:	25 ff ff 00 00       	and    eax,0xffff
c001efea:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001efed:	e9 95 02 00 00       	jmp    c001f287 <Vm::faultHandler(regs*)+0x42e>
c001eff2:	3c e6                	cmp    al,0xe6
c001eff4:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001eff8:	0f 84 4e 05 00 00    	je     c001f54c <Vm::faultHandler(regs*)+0x6f3>
c001effe:	0f 82 0a 05 00 00    	jb     c001f50e <Vm::faultHandler(regs*)+0x6b5>
c001f004:	3c e7                	cmp    al,0xe7
c001f006:	0f 84 69 05 00 00    	je     c001f575 <Vm::faultHandler(regs*)+0x71c>
c001f00c:	e9 1b 06 00 00       	jmp    c001f62c <Vm::faultHandler(regs*)+0x7d3>
c001f011:	3c ef                	cmp    al,0xef
c001f013:	0f 84 e6 05 00 00    	je     c001f5ff <Vm::faultHandler(regs*)+0x7a6>
c001f019:	77 37                	ja     c001f052 <Vm::faultHandler(regs*)+0x1f9>
c001f01b:	3c ed                	cmp    al,0xed
c001f01d:	0f 84 a3 05 00 00    	je     c001f5c6 <Vm::faultHandler(regs*)+0x76d>
c001f023:	3c ee                	cmp    al,0xee
c001f025:	0f 85 01 06 00 00    	jne    c001f62c <Vm::faultHandler(regs*)+0x7d3>
c001f02b:	52                   	push   edx
c001f02c:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f02f:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f032:	68 2f c9 02 c0       	push   0xc002c92f
c001f037:	e8 35 3f ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001f03c:	59                   	pop    ecx
c001f03d:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f041:	5b                   	pop    ebx
c001f042:	50                   	push   eax
c001f043:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f047:	50                   	push   eax
c001f048:	e8 2a fa ff ff       	call   c001ea77 <Vm::outbv(unsigned short, unsigned char)>
c001f04d:	e9 a5 05 00 00       	jmp    c001f5f7 <Vm::faultHandler(regs*)+0x79e>
c001f052:	3c fa                	cmp    al,0xfa
c001f054:	0f 84 f7 01 00 00    	je     c001f251 <Vm::faultHandler(regs*)+0x3f8>
c001f05a:	3c fb                	cmp    al,0xfb
c001f05c:	0f 84 0a 02 00 00    	je     c001f26c <Vm::faultHandler(regs*)+0x413>
c001f062:	3c f3                	cmp    al,0xf3
c001f064:	0f 85 c2 05 00 00    	jne    c001f62c <Vm::faultHandler(regs*)+0x7d3>
c001f06a:	83 ec 0c             	sub    esp,0xc
c001f06d:	68 67 c8 02 c0       	push   0xc002c867
c001f072:	e8 fa 3e ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001f077:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f07a:	83 c4 10             	add    esp,0x10
c001f07d:	e9 84 fe ff ff       	jmp    c001ef06 <Vm::faultHandler(regs*)+0xad>
c001f082:	83 ec 0c             	sub    esp,0xc
c001f085:	b3 02                	mov    bl,0x2
c001f087:	68 42 c8 02 c0       	push   0xc002c842
c001f08c:	e8 e0 3e ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001f091:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f094:	83 c4 10             	add    esp,0x10
c001f097:	e9 6a fe ff ff       	jmp    c001ef06 <Vm::faultHandler(regs*)+0xad>
c001f09c:	83 ec 0c             	sub    esp,0xc
c001f09f:	b3 03                	mov    bl,0x3
c001f0a1:	68 4e c8 02 c0       	push   0xc002c84e
c001f0a6:	e8 c6 3e ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001f0ab:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0ae:	83 c4 10             	add    esp,0x10
c001f0b1:	e9 50 fe ff ff       	jmp    c001ef06 <Vm::faultHandler(regs*)+0xad>
c001f0b6:	83 ec 0c             	sub    esp,0xc
c001f0b9:	b3 04                	mov    bl,0x4
c001f0bb:	68 52 c8 02 c0       	push   0xc002c852
c001f0c0:	e8 ac 3e ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001f0c5:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0c8:	83 c4 10             	add    esp,0x10
c001f0cb:	e9 36 fe ff ff       	jmp    c001ef06 <Vm::faultHandler(regs*)+0xad>
c001f0d0:	83 ec 0c             	sub    esp,0xc
c001f0d3:	b3 05                	mov    bl,0x5
c001f0d5:	68 56 c8 02 c0       	push   0xc002c856
c001f0da:	e8 92 3e ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001f0df:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0e2:	83 c4 10             	add    esp,0x10
c001f0e5:	e9 1c fe ff ff       	jmp    c001ef06 <Vm::faultHandler(regs*)+0xad>
c001f0ea:	83 ec 0c             	sub    esp,0xc
c001f0ed:	68 5a c8 02 c0       	push   0xc002c85a
c001f0f2:	e8 7a 3e ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001f0f7:	83 c4 10             	add    esp,0x10
c001f0fa:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0fd:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f102:	e9 ff fd ff ff       	jmp    c001ef06 <Vm::faultHandler(regs*)+0xad>
c001f107:	50                   	push   eax
c001f108:	50                   	push   eax
c001f109:	6a 01                	push   0x1
c001f10b:	68 5f c8 02 c0       	push   0xc002c85f
c001f110:	e8 5c 3e ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001f115:	83 c4 10             	add    esp,0x10
c001f118:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f11b:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001f120:	e9 e1 fd ff ff       	jmp    c001ef06 <Vm::faultHandler(regs*)+0xad>
c001f125:	83 ec 0c             	sub    esp,0xc
c001f128:	68 6d c8 02 c0       	push   0xc002c86d
c001f12d:	e8 3f 3e ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001f132:	83 c4 10             	add    esp,0x10
c001f135:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001f138:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f13d:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001f140:	74 2f                	je     c001f171 <Vm::faultHandler(regs*)+0x318>
c001f142:	83 ea 04             	sub    edx,0x4
c001f145:	25 ff 0d 00 00       	and    eax,0xdff
c001f14a:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f150:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f153:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f156:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f15c:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f160:	0f 84 bf 04 00 00    	je     c001f625 <Vm::faultHandler(regs*)+0x7cc>
c001f166:	80 cc 02             	or     ah,0x2
c001f169:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f16c:	e9 b4 04 00 00       	jmp    c001f625 <Vm::faultHandler(regs*)+0x7cc>
c001f171:	83 ea 02             	sub    edx,0x2
c001f174:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f17a:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f17d:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f181:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f187:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f18b:	74 05                	je     c001f192 <Vm::faultHandler(regs*)+0x339>
c001f18d:	80 cc 02             	or     ah,0x2
c001f190:	eb 03                	jmp    c001f195 <Vm::faultHandler(regs*)+0x33c>
c001f192:	80 e4 fd             	and    ah,0xfd
c001f195:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f199:	e9 87 04 00 00       	jmp    c001f625 <Vm::faultHandler(regs*)+0x7cc>
c001f19e:	83 ec 0c             	sub    esp,0xc
c001f1a1:	68 74 c8 02 c0       	push   0xc002c874
c001f1a6:	e8 c6 3d ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001f1ab:	83 c4 10             	add    esp,0x10
c001f1ae:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f1b3:	74 28                	je     c001f1dd <Vm::faultHandler(regs*)+0x384>
c001f1b5:	8b 06                	mov    eax,DWORD PTR [esi]
c001f1b7:	25 ff 0d 00 00       	and    eax,0xdff
c001f1bc:	0d 00 02 02 00       	or     eax,0x20200
c001f1c1:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f1c4:	8b 06                	mov    eax,DWORD PTR [esi]
c001f1c6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f1cc:	c1 e8 09             	shr    eax,0x9
c001f1cf:	83 e0 01             	and    eax,0x1
c001f1d2:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f1d5:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f1d8:	83 c0 04             	add    eax,0x4
c001f1db:	eb 24                	jmp    c001f201 <Vm::faultHandler(regs*)+0x3a8>
c001f1dd:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f1e0:	0d 00 02 02 00       	or     eax,0x20200
c001f1e5:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f1e8:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f1eb:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f1f1:	66 c1 e8 09          	shr    ax,0x9
c001f1f5:	83 e0 01             	and    eax,0x1
c001f1f8:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f1fb:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f1fe:	83 c0 02             	add    eax,0x2
c001f201:	25 ff ff 00 00       	and    eax,0xffff
c001f206:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f209:	e9 17 04 00 00       	jmp    c001f625 <Vm::faultHandler(regs*)+0x7cc>
c001f20e:	53                   	push   ebx
c001f20f:	53                   	push   ebx
c001f210:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f214:	50                   	push   eax
c001f215:	68 7a c8 02 c0       	push   0xc002c87a
c001f21a:	e8 52 3d ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001f21f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f223:	83 c4 10             	add    esp,0x10
c001f226:	3c ee                	cmp    al,0xee
c001f228:	75 10                	jne    c001f23a <Vm::faultHandler(regs*)+0x3e1>
c001f22a:	83 ec 0c             	sub    esp,0xc
c001f22d:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f230:	e8 fa f8 ff ff       	call   c001eb2f <Vm::mainloop3(unsigned long)>
c001f235:	e9 c0 03 00 00       	jmp    c001f5fa <Vm::faultHandler(regs*)+0x7a1>
c001f23a:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001f23e:	83 ec 0c             	sub    esp,0xc
c001f241:	53                   	push   ebx
c001f242:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001f246:	53                   	push   ebx
c001f247:	55                   	push   ebp
c001f248:	50                   	push   eax
c001f249:	57                   	push   edi
c001f24a:	e8 0c fb ff ff       	call   c001ed5b <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f24f:	eb 36                	jmp    c001f287 <Vm::faultHandler(regs*)+0x42e>
c001f251:	83 ec 0c             	sub    esp,0xc
c001f254:	68 84 c8 02 c0       	push   0xc002c884
c001f259:	e8 13 3d ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001f25e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f263:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f267:	e9 8b 03 00 00       	jmp    c001f5f7 <Vm::faultHandler(regs*)+0x79e>
c001f26c:	83 ec 0c             	sub    esp,0xc
c001f26f:	68 89 c8 02 c0       	push   0xc002c889
c001f274:	e8 f8 3c ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001f279:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f27e:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f282:	e9 70 03 00 00       	jmp    c001f5f7 <Vm::faultHandler(regs*)+0x79e>
c001f287:	83 c4 20             	add    esp,0x20
c001f28a:	e9 99 03 00 00       	jmp    c001f628 <Vm::faultHandler(regs*)+0x7cf>
c001f28f:	83 ec 0c             	sub    esp,0xc
c001f292:	68 c7 c8 02 c0       	push   0xc002c8c7
c001f297:	e8 d5 3c ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001f29c:	83 c4 10             	add    esp,0x10
c001f29f:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f2a2:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f2a7:	74 0d                	je     c001f2b6 <Vm::faultHandler(regs*)+0x45d>
c001f2a9:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f2b0:	0f 87 9e 01 00 00    	ja     c001f454 <Vm::faultHandler(regs*)+0x5fb>
c001f2b6:	83 ec 0c             	sub    esp,0xc
c001f2b9:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f2bd:	0f b7 db             	movzx  ebx,bx
c001f2c0:	50                   	push   eax
c001f2c1:	e8 9e f7 ff ff       	call   c001ea64 <Vm::inbv(unsigned short)>
c001f2c6:	83 c4 0c             	add    esp,0xc
c001f2c9:	0f b6 c0             	movzx  eax,al
c001f2cc:	50                   	push   eax
c001f2cd:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001f2d1:	50                   	push   eax
c001f2d2:	53                   	push   ebx
c001f2d3:	e8 41 fb ff ff       	call   c001ee19 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f2d8:	83 c4 10             	add    esp,0x10
c001f2db:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f2de:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f2e2:	74 03                	je     c001f2e7 <Vm::faultHandler(regs*)+0x48e>
c001f2e4:	48                   	dec    eax
c001f2e5:	eb 01                	jmp    c001f2e8 <Vm::faultHandler(regs*)+0x48f>
c001f2e7:	40                   	inc    eax
c001f2e8:	0f b7 c0             	movzx  eax,ax
c001f2eb:	eb 7f                	jmp    c001f36c <Vm::faultHandler(regs*)+0x513>
c001f2ed:	83 ec 0c             	sub    esp,0xc
c001f2f0:	68 f9 c8 02 c0       	push   0xc002c8f9
c001f2f5:	e8 77 3c ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001f2fa:	83 c4 10             	add    esp,0x10
c001f2fd:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f300:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f305:	74 0d                	je     c001f314 <Vm::faultHandler(regs*)+0x4bb>
c001f307:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f30e:	0f 87 40 01 00 00    	ja     c001f454 <Vm::faultHandler(regs*)+0x5fb>
c001f314:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f317:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001f31b:	0f b7 db             	movzx  ebx,bx
c001f31e:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f323:	74 20                	je     c001f345 <Vm::faultHandler(regs*)+0x4ec>
c001f325:	ed                   	in     eax,dx
c001f326:	51                   	push   ecx
c001f327:	50                   	push   eax
c001f328:	56                   	push   esi
c001f329:	53                   	push   ebx
c001f32a:	e8 15 fb ff ff       	call   c001ee44 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f32f:	83 c4 10             	add    esp,0x10
c001f332:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f335:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f339:	74 05                	je     c001f340 <Vm::faultHandler(regs*)+0x4e7>
c001f33b:	83 e8 04             	sub    eax,0x4
c001f33e:	eb 27                	jmp    c001f367 <Vm::faultHandler(regs*)+0x50e>
c001f340:	83 c0 04             	add    eax,0x4
c001f343:	eb 22                	jmp    c001f367 <Vm::faultHandler(regs*)+0x50e>
c001f345:	66 ed                	in     ax,dx
c001f347:	0f b7 c0             	movzx  eax,ax
c001f34a:	52                   	push   edx
c001f34b:	50                   	push   eax
c001f34c:	56                   	push   esi
c001f34d:	53                   	push   ebx
c001f34e:	e8 db fa ff ff       	call   c001ee2e <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f353:	83 c4 10             	add    esp,0x10
c001f356:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f359:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f35d:	74 05                	je     c001f364 <Vm::faultHandler(regs*)+0x50b>
c001f35f:	83 e8 02             	sub    eax,0x2
c001f362:	eb 03                	jmp    c001f367 <Vm::faultHandler(regs*)+0x50e>
c001f364:	83 c0 02             	add    eax,0x2
c001f367:	25 ff ff 00 00       	and    eax,0xffff
c001f36c:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f36f:	e9 b1 02 00 00       	jmp    c001f625 <Vm::faultHandler(regs*)+0x7cc>
c001f374:	83 ec 0c             	sub    esp,0xc
c001f377:	4b                   	dec    ebx
c001f378:	68 ff c8 02 c0       	push   0xc002c8ff
c001f37d:	e8 ef 3b ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001f382:	83 c4 10             	add    esp,0x10
c001f385:	80 fb 05             	cmp    bl,0x5
c001f388:	77 0a                	ja     c001f394 <Vm::faultHandler(regs*)+0x53b>
c001f38a:	0f b6 db             	movzx  ebx,bl
c001f38d:	ff 24 9d 70 c9 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3690]
c001f394:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f398:	eb 1b                	jmp    c001f3b5 <Vm::faultHandler(regs*)+0x55c>
c001f39a:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f39e:	eb 15                	jmp    c001f3b5 <Vm::faultHandler(regs*)+0x55c>
c001f3a0:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f3a4:	eb 0f                	jmp    c001f3b5 <Vm::faultHandler(regs*)+0x55c>
c001f3a6:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f3aa:	eb 09                	jmp    c001f3b5 <Vm::faultHandler(regs*)+0x55c>
c001f3ac:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f3af:	eb 04                	jmp    c001f3b5 <Vm::faultHandler(regs*)+0x55c>
c001f3b1:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f3b5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f3ba:	74 0d                	je     c001f3c9 <Vm::faultHandler(regs*)+0x570>
c001f3bc:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001f3c3:	0f 87 8b 00 00 00    	ja     c001f454 <Vm::faultHandler(regs*)+0x5fb>
c001f3c9:	53                   	push   ebx
c001f3ca:	53                   	push   ebx
c001f3cb:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001f3cf:	52                   	push   edx
c001f3d0:	50                   	push   eax
c001f3d1:	e8 0f fa ff ff       	call   c001ede5 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f3d6:	5e                   	pop    esi
c001f3d7:	0f b6 c0             	movzx  eax,al
c001f3da:	5d                   	pop    ebp
c001f3db:	50                   	push   eax
c001f3dc:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f3e0:	50                   	push   eax
c001f3e1:	e8 91 f6 ff ff       	call   c001ea77 <Vm::outbv(unsigned short, unsigned char)>
c001f3e6:	83 c4 10             	add    esp,0x10
c001f3e9:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001f3ec:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f3f0:	74 03                	je     c001f3f5 <Vm::faultHandler(regs*)+0x59c>
c001f3f2:	48                   	dec    eax
c001f3f3:	eb 01                	jmp    c001f3f6 <Vm::faultHandler(regs*)+0x59d>
c001f3f5:	40                   	inc    eax
c001f3f6:	0f b7 c0             	movzx  eax,ax
c001f3f9:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001f3fc:	e9 24 02 00 00       	jmp    c001f625 <Vm::faultHandler(regs*)+0x7cc>
c001f401:	83 ec 0c             	sub    esp,0xc
c001f404:	4b                   	dec    ebx
c001f405:	68 ff c8 02 c0       	push   0xc002c8ff
c001f40a:	e8 62 3b ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001f40f:	83 c4 10             	add    esp,0x10
c001f412:	80 fb 05             	cmp    bl,0x5
c001f415:	77 0a                	ja     c001f421 <Vm::faultHandler(regs*)+0x5c8>
c001f417:	0f b6 db             	movzx  ebx,bl
c001f41a:	ff 24 9d 88 c9 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3678]
c001f421:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f425:	eb 1b                	jmp    c001f442 <Vm::faultHandler(regs*)+0x5e9>
c001f427:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f42b:	eb 15                	jmp    c001f442 <Vm::faultHandler(regs*)+0x5e9>
c001f42d:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f431:	eb 0f                	jmp    c001f442 <Vm::faultHandler(regs*)+0x5e9>
c001f433:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f437:	eb 09                	jmp    c001f442 <Vm::faultHandler(regs*)+0x5e9>
c001f439:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f43c:	eb 04                	jmp    c001f442 <Vm::faultHandler(regs*)+0x5e9>
c001f43e:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f442:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001f445:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f44a:	74 39                	je     c001f485 <Vm::faultHandler(regs*)+0x62c>
c001f44c:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001f452:	76 31                	jbe    c001f485 <Vm::faultHandler(regs*)+0x62c>
c001f454:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f458:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f45c:	51                   	push   ecx
c001f45d:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f461:	51                   	push   ecx
c001f462:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f466:	51                   	push   ecx
c001f467:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f46b:	51                   	push   ecx
c001f46c:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f470:	52                   	push   edx
c001f471:	50                   	push   eax
c001f472:	50                   	push   eax
c001f473:	68 cc c8 02 c0       	push   0xc002c8cc
c001f478:	e8 f4 3a ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001f47d:	83 c4 20             	add    esp,0x20
c001f480:	e9 fb 01 00 00       	jmp    c001f680 <Vm::faultHandler(regs*)+0x827>
c001f485:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001f488:	0f b7 d3             	movzx  edx,bx
c001f48b:	81 e6 00 04 00 00    	and    esi,0x400
c001f491:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001f494:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f499:	74 1d                	je     c001f4b8 <Vm::faultHandler(regs*)+0x65f>
c001f49b:	51                   	push   ecx
c001f49c:	51                   	push   ecx
c001f49d:	52                   	push   edx
c001f49e:	50                   	push   eax
c001f49f:	e8 64 f9 ff ff       	call   c001ee08 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f4a4:	83 c4 10             	add    esp,0x10
c001f4a7:	89 ea                	mov    edx,ebp
c001f4a9:	ef                   	out    dx,eax
c001f4aa:	85 f6                	test   esi,esi
c001f4ac:	74 05                	je     c001f4b3 <Vm::faultHandler(regs*)+0x65a>
c001f4ae:	83 eb 04             	sub    ebx,0x4
c001f4b1:	eb 21                	jmp    c001f4d4 <Vm::faultHandler(regs*)+0x67b>
c001f4b3:	83 c3 04             	add    ebx,0x4
c001f4b6:	eb 1c                	jmp    c001f4d4 <Vm::faultHandler(regs*)+0x67b>
c001f4b8:	51                   	push   ecx
c001f4b9:	51                   	push   ecx
c001f4ba:	52                   	push   edx
c001f4bb:	50                   	push   eax
c001f4bc:	e8 35 f9 ff ff       	call   c001edf6 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f4c1:	83 c4 10             	add    esp,0x10
c001f4c4:	89 ea                	mov    edx,ebp
c001f4c6:	66 ef                	out    dx,ax
c001f4c8:	85 f6                	test   esi,esi
c001f4ca:	74 05                	je     c001f4d1 <Vm::faultHandler(regs*)+0x678>
c001f4cc:	83 eb 02             	sub    ebx,0x2
c001f4cf:	eb 03                	jmp    c001f4d4 <Vm::faultHandler(regs*)+0x67b>
c001f4d1:	83 c3 02             	add    ebx,0x2
c001f4d4:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001f4da:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001f4dd:	e9 43 01 00 00       	jmp    c001f625 <Vm::faultHandler(regs*)+0x7cc>
c001f4e2:	53                   	push   ebx
c001f4e3:	53                   	push   ebx
c001f4e4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f4e8:	50                   	push   eax
c001f4e9:	68 05 c9 02 c0       	push   0xc002c905
c001f4ee:	e8 7e 3a ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001f4f3:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f4fa:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f4fe:	89 04 24             	mov    DWORD PTR [esp],eax
c001f501:	e8 5e f5 ff ff       	call   c001ea64 <Vm::inbv(unsigned short)>
c001f506:	0f b6 c0             	movzx  eax,al
c001f509:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f50c:	eb 5e                	jmp    c001f56c <Vm::faultHandler(regs*)+0x713>
c001f50e:	51                   	push   ecx
c001f50f:	51                   	push   ecx
c001f510:	53                   	push   ebx
c001f511:	68 0b c9 02 c0       	push   0xc002c90b
c001f516:	e8 56 3a ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001f51b:	83 c4 10             	add    esp,0x10
c001f51e:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f523:	74 07                	je     c001f52c <Vm::faultHandler(regs*)+0x6d3>
c001f525:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f529:	ed                   	in     eax,dx
c001f52a:	eb 14                	jmp    c001f540 <Vm::faultHandler(regs*)+0x6e7>
c001f52c:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001f52f:	66 31 db             	xor    bx,bx
c001f532:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001f535:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f539:	66 ed                	in     ax,dx
c001f53b:	0f b7 c0             	movzx  eax,ax
c001f53e:	09 d8                	or     eax,ebx
c001f540:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f543:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f547:	e9 dc 00 00 00       	jmp    c001f628 <Vm::faultHandler(regs*)+0x7cf>
c001f54c:	50                   	push   eax
c001f54d:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f550:	53                   	push   ebx
c001f551:	68 11 c9 02 c0       	push   0xc002c911
c001f556:	e8 16 3a ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001f55b:	58                   	pop    eax
c001f55c:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f560:	5a                   	pop    edx
c001f561:	50                   	push   eax
c001f562:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f566:	50                   	push   eax
c001f567:	e8 0b f5 ff ff       	call   c001ea77 <Vm::outbv(unsigned short, unsigned char)>
c001f56c:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f570:	e9 85 00 00 00       	jmp    c001f5fa <Vm::faultHandler(regs*)+0x7a1>
c001f575:	50                   	push   eax
c001f576:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f579:	53                   	push   ebx
c001f57a:	68 1a c9 02 c0       	push   0xc002c91a
c001f57f:	e8 ed 39 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001f584:	83 c4 10             	add    esp,0x10
c001f587:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f58b:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f590:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f593:	74 03                	je     c001f598 <Vm::faultHandler(regs*)+0x73f>
c001f595:	ef                   	out    dx,eax
c001f596:	eb ab                	jmp    c001f543 <Vm::faultHandler(regs*)+0x6ea>
c001f598:	66 ef                	out    dx,ax
c001f59a:	eb a7                	jmp    c001f543 <Vm::faultHandler(regs*)+0x6ea>
c001f59c:	55                   	push   ebp
c001f59d:	55                   	push   ebp
c001f59e:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f5a1:	68 23 c9 02 c0       	push   0xc002c923
c001f5a6:	e8 c6 39 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001f5ab:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f5b2:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f5b6:	89 04 24             	mov    DWORD PTR [esp],eax
c001f5b9:	e8 a6 f4 ff ff       	call   c001ea64 <Vm::inbv(unsigned short)>
c001f5be:	0f b6 c0             	movzx  eax,al
c001f5c1:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f5c4:	eb 31                	jmp    c001f5f7 <Vm::faultHandler(regs*)+0x79e>
c001f5c6:	56                   	push   esi
c001f5c7:	56                   	push   esi
c001f5c8:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f5cb:	68 29 c9 02 c0       	push   0xc002c929
c001f5d0:	e8 9c 39 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001f5d5:	83 c4 10             	add    esp,0x10
c001f5d8:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f5db:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f5e0:	74 03                	je     c001f5e5 <Vm::faultHandler(regs*)+0x78c>
c001f5e2:	ed                   	in     eax,dx
c001f5e3:	eb 0d                	jmp    c001f5f2 <Vm::faultHandler(regs*)+0x799>
c001f5e5:	66 ed                	in     ax,dx
c001f5e7:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001f5ea:	0f b7 c0             	movzx  eax,ax
c001f5ed:	66 31 d2             	xor    dx,dx
c001f5f0:	09 d0                	or     eax,edx
c001f5f2:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f5f5:	eb 2e                	jmp    c001f625 <Vm::faultHandler(regs*)+0x7cc>
c001f5f7:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f5fa:	83 c4 10             	add    esp,0x10
c001f5fd:	eb 29                	jmp    c001f628 <Vm::faultHandler(regs*)+0x7cf>
c001f5ff:	50                   	push   eax
c001f600:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f603:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f606:	68 38 c9 02 c0       	push   0xc002c938
c001f60b:	e8 61 39 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001f610:	83 c4 10             	add    esp,0x10
c001f613:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f616:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f61b:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f61e:	74 03                	je     c001f623 <Vm::faultHandler(regs*)+0x7ca>
c001f620:	ef                   	out    dx,eax
c001f621:	eb 02                	jmp    c001f625 <Vm::faultHandler(regs*)+0x7cc>
c001f623:	66 ef                	out    dx,ax
c001f625:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f628:	b0 01                	mov    al,0x1
c001f62a:	eb 56                	jmp    c001f682 <Vm::faultHandler(regs*)+0x829>
c001f62c:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f630:	51                   	push   ecx
c001f631:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f635:	51                   	push   ecx
c001f636:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f63a:	51                   	push   ecx
c001f63b:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f63f:	51                   	push   ecx
c001f640:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f644:	52                   	push   edx
c001f645:	50                   	push   eax
c001f646:	50                   	push   eax
c001f647:	68 41 c9 02 c0       	push   0xc002c941
c001f64c:	e8 20 39 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c001f651:	83 c4 20             	add    esp,0x20
c001f654:	83 ec 0c             	sub    esp,0xc
c001f657:	6a 60                	push   0x60
c001f659:	e8 06 f4 ff ff       	call   c001ea64 <Vm::inbv(unsigned short)>
c001f65e:	83 c4 10             	add    esp,0x10
c001f661:	3c 1c                	cmp    al,0x1c
c001f663:	74 04                	je     c001f669 <Vm::faultHandler(regs*)+0x810>
c001f665:	3c 5a                	cmp    al,0x5a
c001f667:	75 eb                	jne    c001f654 <Vm::faultHandler(regs*)+0x7fb>
c001f669:	3c 1c                	cmp    al,0x1c
c001f66b:	74 04                	je     c001f671 <Vm::faultHandler(regs*)+0x818>
c001f66d:	3c 5a                	cmp    al,0x5a
c001f66f:	75 0f                	jne    c001f680 <Vm::faultHandler(regs*)+0x827>
c001f671:	83 ec 0c             	sub    esp,0xc
c001f674:	6a 60                	push   0x60
c001f676:	e8 e9 f3 ff ff       	call   c001ea64 <Vm::inbv(unsigned short)>
c001f67b:	83 c4 10             	add    esp,0x10
c001f67e:	eb e9                	jmp    c001f669 <Vm::faultHandler(regs*)+0x810>
c001f680:	31 c0                	xor    eax,eax
c001f682:	83 c4 1c             	add    esp,0x1c
c001f685:	5b                   	pop    ebx
c001f686:	5e                   	pop    esi
c001f687:	5f                   	pop    edi
c001f688:	5d                   	pop    ebp
c001f689:	c3                   	ret    

c001f68a <Vm::fpuInternalTo32(unsigned long long)>:
c001f68a:	57                   	push   edi
c001f68b:	56                   	push   esi
c001f68c:	53                   	push   ebx
c001f68d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f691:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f695:	89 d6                	mov    esi,edx
c001f697:	89 d7                	mov    edi,edx
c001f699:	89 c1                	mov    ecx,eax
c001f69b:	c1 ef 14             	shr    edi,0x14
c001f69e:	89 d3                	mov    ebx,edx
c001f6a0:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f6a6:	31 d2                	xor    edx,edx
c001f6a8:	89 f8                	mov    eax,edi
c001f6aa:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f6b0:	bf ff 00 00 00       	mov    edi,0xff
c001f6b5:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f6ba:	83 d2 ff             	adc    edx,0xffffffff
c001f6bd:	39 c7                	cmp    edi,eax
c001f6bf:	bf 00 00 00 00       	mov    edi,0x0
c001f6c4:	19 d7                	sbb    edi,edx
c001f6c6:	72 15                	jb     c001f6dd <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f6c8:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f6cc:	c1 e0 17             	shl    eax,0x17
c001f6cf:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f6d5:	09 f1                	or     ecx,esi
c001f6d7:	09 c1                	or     ecx,eax
c001f6d9:	89 cf                	mov    edi,ecx
c001f6db:	eb 02                	jmp    c001f6df <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f6dd:	31 ff                	xor    edi,edi
c001f6df:	89 f8                	mov    eax,edi
c001f6e1:	5b                   	pop    ebx
c001f6e2:	5e                   	pop    esi
c001f6e3:	5f                   	pop    edi
c001f6e4:	c3                   	ret    

c001f6e5 <Vm::fpuInternalTo64(unsigned long long)>:
c001f6e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6e9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f6ed:	c3                   	ret    

c001f6ee <Vm::fpu32ToInternal(unsigned int)>:
c001f6ee:	57                   	push   edi
c001f6ef:	31 ff                	xor    edi,edi
c001f6f1:	56                   	push   esi
c001f6f2:	53                   	push   ebx
c001f6f3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f6f7:	89 cb                	mov    ebx,ecx
c001f6f9:	89 ce                	mov    esi,ecx
c001f6fb:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f701:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f707:	c1 e9 17             	shr    ecx,0x17
c001f70a:	89 f0                	mov    eax,esi
c001f70c:	0f b6 d1             	movzx  edx,cl
c001f70f:	81 c2 80 03 00 00    	add    edx,0x380
c001f715:	89 d1                	mov    ecx,edx
c001f717:	89 fa                	mov    edx,edi
c001f719:	c1 e1 14             	shl    ecx,0x14
c001f71c:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f720:	c1 e0 1d             	shl    eax,0x1d
c001f723:	89 d7                	mov    edi,edx
c001f725:	89 c6                	mov    esi,eax
c001f727:	89 ca                	mov    edx,ecx
c001f729:	89 f0                	mov    eax,esi
c001f72b:	09 fa                	or     edx,edi
c001f72d:	09 da                	or     edx,ebx
c001f72f:	5b                   	pop    ebx
c001f730:	5e                   	pop    esi
c001f731:	5f                   	pop    edi
c001f732:	c3                   	ret    

c001f733 <Vm::fpu64ToInternal(unsigned long long)>:
c001f733:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f737:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f73b:	c3                   	ret    

c001f73c <Vm::fpuFloatToLong(unsigned long long)>:
c001f73c:	57                   	push   edi
c001f73d:	31 c0                	xor    eax,eax
c001f73f:	56                   	push   esi
c001f740:	31 d2                	xor    edx,edx
c001f742:	53                   	push   ebx
c001f743:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f747:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f74b:	89 d9                	mov    ecx,ebx
c001f74d:	c1 e9 14             	shr    ecx,0x14
c001f750:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f756:	89 cf                	mov    edi,ecx
c001f758:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f75e:	78 33                	js     c001f793 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f760:	89 d9                	mov    ecx,ebx
c001f762:	89 f0                	mov    eax,esi
c001f764:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f76a:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f770:	89 ca                	mov    edx,ecx
c001f772:	b9 34 00 00 00       	mov    ecx,0x34
c001f777:	29 f9                	sub    ecx,edi
c001f779:	0f ad d0             	shrd   eax,edx,cl
c001f77c:	d3 fa                	sar    edx,cl
c001f77e:	f6 c1 20             	test   cl,0x20
c001f781:	74 05                	je     c001f788 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f783:	89 d0                	mov    eax,edx
c001f785:	c1 fa 1f             	sar    edx,0x1f
c001f788:	85 db                	test   ebx,ebx
c001f78a:	79 07                	jns    c001f793 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f78c:	f7 d8                	neg    eax
c001f78e:	83 d2 00             	adc    edx,0x0
c001f791:	f7 da                	neg    edx
c001f793:	5b                   	pop    ebx
c001f794:	5e                   	pop    esi
c001f795:	5f                   	pop    edi
c001f796:	c3                   	ret    

c001f797 <Vm::fpuULongToFloat(unsigned long long)>:
c001f797:	57                   	push   edi
c001f798:	31 c9                	xor    ecx,ecx
c001f79a:	56                   	push   esi
c001f79b:	53                   	push   ebx
c001f79c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f7a0:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f7a4:	0f ba e7 14          	bt     edi,0x14
c001f7a8:	72 07                	jb     c001f7b1 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f7aa:	01 f6                	add    esi,esi
c001f7ac:	11 ff                	adc    edi,edi
c001f7ae:	41                   	inc    ecx
c001f7af:	eb f3                	jmp    c001f7a4 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f7b1:	89 fa                	mov    edx,edi
c001f7b3:	89 f0                	mov    eax,esi
c001f7b5:	bb 33 04 00 00       	mov    ebx,0x433
c001f7ba:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f7c0:	29 cb                	sub    ebx,ecx
c001f7c2:	89 d9                	mov    ecx,ebx
c001f7c4:	5b                   	pop    ebx
c001f7c5:	c1 e1 14             	shl    ecx,0x14
c001f7c8:	5e                   	pop    esi
c001f7c9:	09 ca                	or     edx,ecx
c001f7cb:	5f                   	pop    edi
c001f7cc:	c3                   	ret    

c001f7cd <Vm::fpuLongToFloat(long long)>:
c001f7cd:	56                   	push   esi
c001f7ce:	31 c0                	xor    eax,eax
c001f7d0:	53                   	push   ebx
c001f7d1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f7d5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f7d9:	39 c8                	cmp    eax,ecx
c001f7db:	19 d8                	sbb    eax,ebx
c001f7dd:	7d 04                	jge    c001f7e3 <Vm::fpuLongToFloat(long long)+0x16>
c001f7df:	31 f6                	xor    esi,esi
c001f7e1:	eb 0c                	jmp    c001f7ef <Vm::fpuLongToFloat(long long)+0x22>
c001f7e3:	f7 d9                	neg    ecx
c001f7e5:	be 01 00 00 00       	mov    esi,0x1
c001f7ea:	83 d3 00             	adc    ebx,0x0
c001f7ed:	f7 db                	neg    ebx
c001f7ef:	31 c0                	xor    eax,eax
c001f7f1:	0f ba e3 14          	bt     ebx,0x14
c001f7f5:	72 07                	jb     c001f7fe <Vm::fpuLongToFloat(long long)+0x31>
c001f7f7:	01 c9                	add    ecx,ecx
c001f7f9:	11 db                	adc    ebx,ebx
c001f7fb:	40                   	inc    eax
c001f7fc:	eb f3                	jmp    c001f7f1 <Vm::fpuLongToFloat(long long)+0x24>
c001f7fe:	ba 33 04 00 00       	mov    edx,0x433
c001f803:	29 c2                	sub    edx,eax
c001f805:	89 c8                	mov    eax,ecx
c001f807:	c1 e2 14             	shl    edx,0x14
c001f80a:	89 d9                	mov    ecx,ebx
c001f80c:	89 f3                	mov    ebx,esi
c001f80e:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f814:	09 ca                	or     edx,ecx
c001f816:	84 db                	test   bl,bl
c001f818:	74 06                	je     c001f820 <Vm::fpuLongToFloat(long long)+0x53>
c001f81a:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f820:	5b                   	pop    ebx
c001f821:	5e                   	pop    esi
c001f822:	c3                   	ret    

c001f823 <Vm::fpuGet0()>:
c001f823:	31 c0                	xor    eax,eax
c001f825:	31 d2                	xor    edx,edx
c001f827:	c3                   	ret    

c001f828 <Vm::fpuGet1()>:
c001f828:	b8 01 00 00 00       	mov    eax,0x1
c001f82d:	31 d2                	xor    edx,edx
c001f82f:	c3                   	ret    

c001f830 <Vm::fpuGetPi()>:
c001f830:	b8 03 00 00 00       	mov    eax,0x3
c001f835:	31 d2                	xor    edx,edx
c001f837:	c3                   	ret    

c001f838 <Vm::fpuGetLog2E()>:
c001f838:	83 ec 18             	sub    esp,0x18
c001f83b:	68 a0 c9 02 c0       	push   0xc002c9a0
c001f840:	e8 de ad ff ff       	call   c001a623 <Krnl::panic(char const*)>
c001f845:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f84a:	31 d2                	xor    edx,edx
c001f84c:	83 c4 1c             	add    esp,0x1c
c001f84f:	c3                   	ret    

c001f850 <Vm::fpuGetLogE2()>:
c001f850:	83 ec 18             	sub    esp,0x18
c001f853:	68 ac c9 02 c0       	push   0xc002c9ac
c001f858:	e8 c6 ad ff ff       	call   c001a623 <Krnl::panic(char const*)>
c001f85d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f862:	31 d2                	xor    edx,edx
c001f864:	83 c4 1c             	add    esp,0x1c
c001f867:	c3                   	ret    

c001f868 <Vm::fpuGetLog210()>:
c001f868:	83 ec 18             	sub    esp,0x18
c001f86b:	68 b8 c9 02 c0       	push   0xc002c9b8
c001f870:	e8 ae ad ff ff       	call   c001a623 <Krnl::panic(char const*)>
c001f875:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f87a:	31 d2                	xor    edx,edx
c001f87c:	83 c4 1c             	add    esp,0x1c
c001f87f:	c3                   	ret    

c001f880 <Vm::fpuGetLog102()>:
c001f880:	83 ec 18             	sub    esp,0x18
c001f883:	68 c5 c9 02 c0       	push   0xc002c9c5
c001f888:	e8 96 ad ff ff       	call   c001a623 <Krnl::panic(char const*)>
c001f88d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f892:	31 d2                	xor    edx,edx
c001f894:	83 c4 1c             	add    esp,0x1c
c001f897:	c3                   	ret    

c001f898 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f898:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f89c:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f8a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f8a4:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f8a8:	0f 92 c0             	setb   al
c001f8ab:	c3                   	ret    

c001f8ac <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f8ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f8b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8b4:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f8b8:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f8bc:	09 c2                	or     edx,eax
c001f8be:	0f 94 c0             	sete   al
c001f8c1:	c3                   	ret    

c001f8c2 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f8c2:	57                   	push   edi
c001f8c3:	56                   	push   esi
c001f8c4:	53                   	push   ebx
c001f8c5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f8c9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f8cd:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f8d1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f8d5:	57                   	push   edi
c001f8d6:	56                   	push   esi
c001f8d7:	53                   	push   ebx
c001f8d8:	51                   	push   ecx
c001f8d9:	e8 ce ff ff ff       	call   c001f8ac <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f8de:	83 c4 10             	add    esp,0x10
c001f8e1:	88 c2                	mov    dl,al
c001f8e3:	31 c0                	xor    eax,eax
c001f8e5:	84 d2                	test   dl,dl
c001f8e7:	75 0c                	jne    c001f8f5 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f8e9:	57                   	push   edi
c001f8ea:	56                   	push   esi
c001f8eb:	53                   	push   ebx
c001f8ec:	51                   	push   ecx
c001f8ed:	e8 a6 ff ff ff       	call   c001f898 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f8f2:	83 c4 10             	add    esp,0x10
c001f8f5:	83 e0 01             	and    eax,0x1
c001f8f8:	5b                   	pop    ebx
c001f8f9:	88 c1                	mov    cl,al
c001f8fb:	83 e2 01             	and    edx,0x1
c001f8fe:	a0 21 1c 03 c0       	mov    al,ds:0xc0031c21
c001f903:	c1 e2 06             	shl    edx,0x6
c001f906:	83 e0 ba             	and    eax,0xffffffba
c001f909:	5e                   	pop    esi
c001f90a:	09 c8                	or     eax,ecx
c001f90c:	5f                   	pop    edi
c001f90d:	09 d0                	or     eax,edx
c001f90f:	a2 21 1c 03 c0       	mov    ds:0xc0031c21,al
c001f914:	c3                   	ret    

c001f915 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f915:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f919:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f91d:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f921:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f925:	c3                   	ret    

c001f926 <Vm::fpuAbs(unsigned long long)>:
c001f926:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f92a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f92e:	c3                   	ret    

c001f92f <Vm::fpuChs(unsigned long long)>:
c001f92f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f933:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f937:	f7 d8                	neg    eax
c001f939:	83 d2 00             	adc    edx,0x0
c001f93c:	f7 da                	neg    edx
c001f93e:	c3                   	ret    

c001f93f <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f93f:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f943:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f948:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f94c:	eb c7                	jmp    c001f915 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f94e <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f94e:	53                   	push   ebx
c001f94f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f953:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f957:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f95b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f95f:	0f af ca             	imul   ecx,edx
c001f962:	0f af d8             	imul   ebx,eax
c001f965:	f7 e2                	mul    edx
c001f967:	01 d9                	add    ecx,ebx
c001f969:	5b                   	pop    ebx
c001f96a:	01 ca                	add    edx,ecx
c001f96c:	c3                   	ret    

c001f96d <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f96d:	83 ec 0c             	sub    esp,0xc
c001f970:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f974:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f978:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f97c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f980:	e8 a7 70 00 00       	call   c0026a2c <__udivdi3>
c001f985:	83 c4 1c             	add    esp,0x1c
c001f988:	c3                   	ret    

c001f989 <Vm::fpuSquare(unsigned long long)>:
c001f989:	50                   	push   eax
c001f98a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f98e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f992:	52                   	push   edx
c001f993:	50                   	push   eax
c001f994:	52                   	push   edx
c001f995:	50                   	push   eax
c001f996:	e8 b3 ff ff ff       	call   c001f94e <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f99b:	83 c4 14             	add    esp,0x14
c001f99e:	c3                   	ret    

c001f99f <Vm::fpuGetReg(int)>:
c001f99f:	83 ec 0c             	sub    esp,0xc
c001f9a2:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f9a7:	76 10                	jbe    c001f9b9 <Vm::fpuGetReg(int)+0x1a>
c001f9a9:	83 ec 0c             	sub    esp,0xc
c001f9ac:	68 d2 c9 02 c0       	push   0xc002c9d2
c001f9b1:	e8 6d ac ff ff       	call   c001a623 <Krnl::panic(char const*)>
c001f9b6:	83 c4 10             	add    esp,0x10
c001f9b9:	a0 21 1c 03 c0       	mov    al,ds:0xc0031c21
c001f9be:	b9 08 00 00 00       	mov    ecx,0x8
c001f9c3:	c0 e8 03             	shr    al,0x3
c001f9c6:	83 e0 07             	and    eax,0x7
c001f9c9:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f9cd:	99                   	cdq    
c001f9ce:	f7 f9                	idiv   ecx
c001f9d0:	8b 04 d5 24 1c 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffce3dc]
c001f9d7:	8b 14 d5 28 1c 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffce3d8]
c001f9de:	83 c4 0c             	add    esp,0xc
c001f9e1:	c3                   	ret    

c001f9e2 <Vm::fpuSetReg(int, unsigned long long)>:
c001f9e2:	57                   	push   edi
c001f9e3:	56                   	push   esi
c001f9e4:	52                   	push   edx
c001f9e5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f9e9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f9ed:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f9f2:	76 10                	jbe    c001fa04 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f9f4:	83 ec 0c             	sub    esp,0xc
c001f9f7:	68 e5 c9 02 c0       	push   0xc002c9e5
c001f9fc:	e8 22 ac ff ff       	call   c001a623 <Krnl::panic(char const*)>
c001fa01:	83 c4 10             	add    esp,0x10
c001fa04:	a0 21 1c 03 c0       	mov    al,ds:0xc0031c21
c001fa09:	b9 08 00 00 00       	mov    ecx,0x8
c001fa0e:	c0 e8 03             	shr    al,0x3
c001fa11:	83 e0 07             	and    eax,0x7
c001fa14:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001fa18:	99                   	cdq    
c001fa19:	f7 f9                	idiv   ecx
c001fa1b:	89 34 d5 24 1c 03 c0 	mov    DWORD PTR [edx*8-0x3ffce3dc],esi
c001fa22:	89 3c d5 28 1c 03 c0 	mov    DWORD PTR [edx*8-0x3ffce3d8],edi
c001fa29:	58                   	pop    eax
c001fa2a:	5e                   	pop    esi
c001fa2b:	5f                   	pop    edi
c001fa2c:	c3                   	ret    

c001fa2d <Vm::fpuPush(unsigned long long)>:
c001fa2d:	a0 21 1c 03 c0       	mov    al,ds:0xc0031c21
c001fa32:	c0 e8 03             	shr    al,0x3
c001fa35:	83 e0 07             	and    eax,0x7
c001fa38:	83 c0 07             	add    eax,0x7
c001fa3b:	88 c2                	mov    dl,al
c001fa3d:	83 e0 07             	and    eax,0x7
c001fa40:	83 e2 07             	and    edx,0x7
c001fa43:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001fa4a:	8a 15 21 1c 03 c0    	mov    dl,BYTE PTR ds:0xc0031c21
c001fa50:	83 e2 c7             	and    edx,0xffffffc7
c001fa53:	09 ca                	or     edx,ecx
c001fa55:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fa59:	88 15 21 1c 03 c0    	mov    BYTE PTR ds:0xc0031c21,dl
c001fa5f:	89 0c c5 28 1c 03 c0 	mov    DWORD PTR [eax*8-0x3ffce3d8],ecx
c001fa66:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fa6a:	89 14 c5 24 1c 03 c0 	mov    DWORD PTR [eax*8-0x3ffce3dc],edx
c001fa71:	a1 64 1c 03 c0       	mov    eax,ds:0xc0031c64
c001fa76:	83 f8 08             	cmp    eax,0x8
c001fa79:	75 08                	jne    c001fa83 <Vm::fpuPush(unsigned long long)+0x56>
c001fa7b:	80 0d 20 1c 03 c0 40 	or     BYTE PTR ds:0xc0031c20,0x40
c001fa82:	c3                   	ret    
c001fa83:	40                   	inc    eax
c001fa84:	a3 64 1c 03 c0       	mov    ds:0xc0031c64,eax
c001fa89:	c3                   	ret    

c001fa8a <Vm::fpuPop()>:
c001fa8a:	8a 0d 21 1c 03 c0    	mov    cl,BYTE PTR ds:0xc0031c21
c001fa90:	53                   	push   ebx
c001fa91:	c0 e9 03             	shr    cl,0x3
c001fa94:	8a 1d 21 1c 03 c0    	mov    bl,BYTE PTR ds:0xc0031c21
c001fa9a:	83 e1 07             	and    ecx,0x7
c001fa9d:	83 e3 c7             	and    ebx,0xffffffc7
c001faa0:	8b 04 cd 24 1c 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffce3dc]
c001faa7:	8b 14 cd 28 1c 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffce3d8]
c001faae:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001fab5:	83 e1 38             	and    ecx,0x38
c001fab8:	09 d9                	or     ecx,ebx
c001faba:	88 0d 21 1c 03 c0    	mov    BYTE PTR ds:0xc0031c21,cl
c001fac0:	8b 0d 64 1c 03 c0    	mov    ecx,DWORD PTR ds:0xc0031c64
c001fac6:	85 c9                	test   ecx,ecx
c001fac8:	74 09                	je     c001fad3 <Vm::fpuPop()+0x49>
c001faca:	49                   	dec    ecx
c001facb:	89 0d 64 1c 03 c0    	mov    DWORD PTR ds:0xc0031c64,ecx
c001fad1:	eb 07                	jmp    c001fada <Vm::fpuPop()+0x50>
c001fad3:	80 0d 20 1c 03 c0 40 	or     BYTE PTR ds:0xc0031c20,0x40
c001fada:	5b                   	pop    ebx
c001fadb:	c3                   	ret    

c001fadc <Vm::x87Handler(regs*)>:
c001fadc:	55                   	push   ebp
c001fadd:	57                   	push   edi
c001fade:	56                   	push   esi
c001fadf:	53                   	push   ebx
c001fae0:	83 ec 1c             	sub    esp,0x1c
c001fae3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001fae7:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001faec:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001faef:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001faf7:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001fafb:	50                   	push   eax
c001fafc:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001fb00:	50                   	push   eax
c001fb01:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fb05:	50                   	push   eax
c001fb06:	53                   	push   ebx
c001fb07:	e8 de a1 ff ff       	call   c0019cea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001fb0c:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001fb0f:	83 c4 10             	add    esp,0x10
c001fb12:	89 c6                	mov    esi,eax
c001fb14:	80 fa d9             	cmp    dl,0xd9
c001fb17:	0f 85 52 01 00 00    	jne    c001fc6f <Vm::x87Handler(regs*)+0x193>
c001fb1d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb21:	8d 50 20             	lea    edx,[eax+0x20]
c001fb24:	80 fa 0e             	cmp    dl,0xe
c001fb27:	0f 87 86 00 00 00    	ja     c001fbb3 <Vm::x87Handler(regs*)+0xd7>
c001fb2d:	0f b6 d2             	movzx  edx,dl
c001fb30:	ff 24 95 f8 c9 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd3608]
c001fb37:	e8 e7 fc ff ff       	call   c001f823 <Vm::fpuGet0()>
c001fb3c:	eb 05                	jmp    c001fb43 <Vm::x87Handler(regs*)+0x67>
c001fb3e:	e8 e5 fc ff ff       	call   c001f828 <Vm::fpuGet1()>
c001fb43:	57                   	push   edi
c001fb44:	57                   	push   edi
c001fb45:	52                   	push   edx
c001fb46:	50                   	push   eax
c001fb47:	e8 e1 fe ff ff       	call   c001fa2d <Vm::fpuPush(unsigned long long)>
c001fb4c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fb50:	83 c4 10             	add    esp,0x10
c001fb53:	b0 01                	mov    al,0x1
c001fb55:	e9 e3 09 00 00       	jmp    c002053d <Vm::x87Handler(regs*)+0xa61>
c001fb5a:	83 ec 0c             	sub    esp,0xc
c001fb5d:	6a 00                	push   0x0
c001fb5f:	e8 3b fe ff ff       	call   c001f99f <Vm::fpuGetReg(int)>
c001fb64:	59                   	pop    ecx
c001fb65:	5e                   	pop    esi
c001fb66:	52                   	push   edx
c001fb67:	50                   	push   eax
c001fb68:	e8 c2 fd ff ff       	call   c001f92f <Vm::fpuChs(unsigned long long)>
c001fb6d:	eb 13                	jmp    c001fb82 <Vm::x87Handler(regs*)+0xa6>
c001fb6f:	83 ec 0c             	sub    esp,0xc
c001fb72:	6a 00                	push   0x0
c001fb74:	e8 26 fe ff ff       	call   c001f99f <Vm::fpuGetReg(int)>
c001fb79:	5f                   	pop    edi
c001fb7a:	5d                   	pop    ebp
c001fb7b:	52                   	push   edx
c001fb7c:	50                   	push   eax
c001fb7d:	e8 a4 fd ff ff       	call   c001f926 <Vm::fpuAbs(unsigned long long)>
c001fb82:	83 c4 0c             	add    esp,0xc
c001fb85:	52                   	push   edx
c001fb86:	50                   	push   eax
c001fb87:	6a 00                	push   0x0
c001fb89:	e8 54 fe ff ff       	call   c001f9e2 <Vm::fpuSetReg(int, unsigned long long)>
c001fb8e:	eb bc                	jmp    c001fb4c <Vm::x87Handler(regs*)+0x70>
c001fb90:	e8 d3 fc ff ff       	call   c001f868 <Vm::fpuGetLog210()>
c001fb95:	eb ac                	jmp    c001fb43 <Vm::x87Handler(regs*)+0x67>
c001fb97:	e8 9c fc ff ff       	call   c001f838 <Vm::fpuGetLog2E()>
c001fb9c:	eb a5                	jmp    c001fb43 <Vm::x87Handler(regs*)+0x67>
c001fb9e:	e8 8d fc ff ff       	call   c001f830 <Vm::fpuGetPi()>
c001fba3:	eb 9e                	jmp    c001fb43 <Vm::x87Handler(regs*)+0x67>
c001fba5:	e8 d6 fc ff ff       	call   c001f880 <Vm::fpuGetLog102()>
c001fbaa:	eb 97                	jmp    c001fb43 <Vm::x87Handler(regs*)+0x67>
c001fbac:	e8 9f fc ff ff       	call   c001f850 <Vm::fpuGetLogE2()>
c001fbb1:	eb 90                	jmp    c001fb43 <Vm::x87Handler(regs*)+0x67>
c001fbb3:	8d 50 40             	lea    edx,[eax+0x40]
c001fbb6:	80 fa 07             	cmp    dl,0x7
c001fbb9:	77 15                	ja     c001fbd0 <Vm::x87Handler(regs*)+0xf4>
c001fbbb:	83 ec 0c             	sub    esp,0xc
c001fbbe:	2d c0 00 00 00       	sub    eax,0xc0
c001fbc3:	50                   	push   eax
c001fbc4:	e8 d6 fd ff ff       	call   c001f99f <Vm::fpuGetReg(int)>
c001fbc9:	59                   	pop    ecx
c001fbca:	5e                   	pop    esi
c001fbcb:	e9 75 ff ff ff       	jmp    c001fb45 <Vm::x87Handler(regs*)+0x69>
c001fbd0:	8d 50 38             	lea    edx,[eax+0x38]
c001fbd3:	80 fa 07             	cmp    dl,0x7
c001fbd6:	77 3c                	ja     c001fc14 <Vm::x87Handler(regs*)+0x138>
c001fbd8:	83 ec 0c             	sub    esp,0xc
c001fbdb:	2d c8 00 00 00       	sub    eax,0xc8
c001fbe0:	50                   	push   eax
c001fbe1:	e8 b9 fd ff ff       	call   c001f99f <Vm::fpuGetReg(int)>
c001fbe6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fbed:	89 c6                	mov    esi,eax
c001fbef:	89 d7                	mov    edi,edx
c001fbf1:	e8 a9 fd ff ff       	call   c001f99f <Vm::fpuGetReg(int)>
c001fbf6:	83 c4 0c             	add    esp,0xc
c001fbf9:	52                   	push   edx
c001fbfa:	50                   	push   eax
c001fbfb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fbff:	2d c8 00 00 00       	sub    eax,0xc8
c001fc04:	50                   	push   eax
c001fc05:	e8 d8 fd ff ff       	call   c001f9e2 <Vm::fpuSetReg(int, unsigned long long)>
c001fc0a:	83 c4 0c             	add    esp,0xc
c001fc0d:	57                   	push   edi
c001fc0e:	56                   	push   esi
c001fc0f:	e9 73 ff ff ff       	jmp    c001fb87 <Vm::x87Handler(regs*)+0xab>
c001fc14:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fc18:	84 d2                	test   dl,dl
c001fc1a:	75 0f                	jne    c001fc2b <Vm::x87Handler(regs*)+0x14f>
c001fc1c:	83 ec 0c             	sub    esp,0xc
c001fc1f:	ff 36                	push   DWORD PTR [esi]
c001fc21:	e8 c8 fa ff ff       	call   c001f6ee <Vm::fpu32ToInternal(unsigned int)>
c001fc26:	e9 bf 00 00 00       	jmp    c001fcea <Vm::x87Handler(regs*)+0x20e>
c001fc2b:	80 fa 03             	cmp    dl,0x3
c001fc2e:	75 13                	jne    c001fc43 <Vm::x87Handler(regs*)+0x167>
c001fc30:	e8 55 fe ff ff       	call   c001fa8a <Vm::fpuPop()>
c001fc35:	55                   	push   ebp
c001fc36:	55                   	push   ebp
c001fc37:	52                   	push   edx
c001fc38:	50                   	push   eax
c001fc39:	e8 4c fa ff ff       	call   c001f68a <Vm::fpuInternalTo32(unsigned long long)>
c001fc3e:	e9 88 00 00 00       	jmp    c001fccb <Vm::x87Handler(regs*)+0x1ef>
c001fc43:	80 fa 05             	cmp    dl,0x5
c001fc46:	75 0e                	jne    c001fc56 <Vm::x87Handler(regs*)+0x17a>
c001fc48:	66 8b 06             	mov    ax,WORD PTR [esi]
c001fc4b:	66 a3 22 1c 03 c0    	mov    ds:0xc0031c22,ax
c001fc51:	e9 df 00 00 00       	jmp    c001fd35 <Vm::x87Handler(regs*)+0x259>
c001fc56:	31 c0                	xor    eax,eax
c001fc58:	80 fa 07             	cmp    dl,0x7
c001fc5b:	0f 85 dc 08 00 00    	jne    c002053d <Vm::x87Handler(regs*)+0xa61>
c001fc61:	66 a1 22 1c 03 c0    	mov    ax,ds:0xc0031c22
c001fc67:	66 89 06             	mov    WORD PTR [esi],ax
c001fc6a:	e9 c6 00 00 00       	jmp    c001fd35 <Vm::x87Handler(regs*)+0x259>
c001fc6f:	80 fa d8             	cmp    dl,0xd8
c001fc72:	0f 84 c9 00 00 00    	je     c001fd41 <Vm::x87Handler(regs*)+0x265>
c001fc78:	80 fa dc             	cmp    dl,0xdc
c001fc7b:	0f 84 0d 02 00 00    	je     c001fe8e <Vm::x87Handler(regs*)+0x3b2>
c001fc81:	80 fa de             	cmp    dl,0xde
c001fc84:	0f 84 cd 02 00 00    	je     c001ff57 <Vm::x87Handler(regs*)+0x47b>
c001fc8a:	80 fa dd             	cmp    dl,0xdd
c001fc8d:	0f 84 5f 04 00 00    	je     c00200f2 <Vm::x87Handler(regs*)+0x616>
c001fc93:	80 fa da             	cmp    dl,0xda
c001fc96:	0f 84 24 05 00 00    	je     c00201c0 <Vm::x87Handler(regs*)+0x6e4>
c001fc9c:	80 fa df             	cmp    dl,0xdf
c001fc9f:	0f 84 68 05 00 00    	je     c002020d <Vm::x87Handler(regs*)+0x731>
c001fca5:	31 c0                	xor    eax,eax
c001fca7:	80 fa db             	cmp    dl,0xdb
c001fcaa:	0f 85 8d 08 00 00    	jne    c002053d <Vm::x87Handler(regs*)+0xa61>
c001fcb0:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fcb4:	80 fa 03             	cmp    dl,0x3
c001fcb7:	0f 85 70 06 00 00    	jne    c002032d <Vm::x87Handler(regs*)+0x851>
c001fcbd:	e8 c8 fd ff ff       	call   c001fa8a <Vm::fpuPop()>
c001fcc2:	55                   	push   ebp
c001fcc3:	55                   	push   ebp
c001fcc4:	52                   	push   edx
c001fcc5:	50                   	push   eax
c001fcc6:	e8 71 fa ff ff       	call   c001f73c <Vm::fpuFloatToLong(unsigned long long)>
c001fccb:	83 c4 10             	add    esp,0x10
c001fcce:	89 06                	mov    DWORD PTR [esi],eax
c001fcd0:	eb 63                	jmp    c001fd35 <Vm::x87Handler(regs*)+0x259>
c001fcd2:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fcd6:	84 d2                	test   dl,dl
c001fcd8:	0f 85 e6 05 00 00    	jne    c00202c4 <Vm::x87Handler(regs*)+0x7e8>
c001fcde:	57                   	push   edi
c001fcdf:	57                   	push   edi
c001fce0:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fce3:	ff 36                	push   DWORD PTR [esi]
c001fce5:	e8 49 fa ff ff       	call   c001f733 <Vm::fpu64ToInternal(unsigned long long)>
c001fcea:	5e                   	pop    esi
c001fceb:	5f                   	pop    edi
c001fcec:	52                   	push   edx
c001fced:	50                   	push   eax
c001fcee:	e8 3a fd ff ff       	call   c001fa2d <Vm::fpuPush(unsigned long long)>
c001fcf3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fcf7:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fcfa:	e9 51 fe ff ff       	jmp    c001fb50 <Vm::x87Handler(regs*)+0x74>
c001fcff:	80 fa 03             	cmp    dl,0x3
c001fd02:	0f 85 d7 06 00 00    	jne    c00203df <Vm::x87Handler(regs*)+0x903>
c001fd08:	57                   	push   edi
c001fd09:	57                   	push   edi
c001fd0a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd0d:	ff 36                	push   DWORD PTR [esi]
c001fd0f:	e8 1f fa ff ff       	call   c001f733 <Vm::fpu64ToInternal(unsigned long long)>
c001fd14:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd1b:	89 c6                	mov    esi,eax
c001fd1d:	89 d7                	mov    edi,edx
c001fd1f:	e8 7b fc ff ff       	call   c001f99f <Vm::fpuGetReg(int)>
c001fd24:	57                   	push   edi
c001fd25:	56                   	push   esi
c001fd26:	52                   	push   edx
c001fd27:	50                   	push   eax
c001fd28:	e8 95 fb ff ff       	call   c001f8c2 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fd2d:	83 c4 20             	add    esp,0x20
c001fd30:	e8 55 fd ff ff       	call   c001fa8a <Vm::fpuPop()>
c001fd35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fd39:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fd3c:	e9 12 fe ff ff       	jmp    c001fb53 <Vm::x87Handler(regs*)+0x77>
c001fd41:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd45:	8d 50 40             	lea    edx,[eax+0x40]
c001fd48:	80 fa 07             	cmp    dl,0x7
c001fd4b:	77 29                	ja     c001fd76 <Vm::x87Handler(regs*)+0x29a>
c001fd4d:	83 ec 0c             	sub    esp,0xc
c001fd50:	2d c0 00 00 00       	sub    eax,0xc0
c001fd55:	50                   	push   eax
c001fd56:	e8 44 fc ff ff       	call   c001f99f <Vm::fpuGetReg(int)>
c001fd5b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd62:	89 c6                	mov    esi,eax
c001fd64:	89 d7                	mov    edi,edx
c001fd66:	e8 34 fc ff ff       	call   c001f99f <Vm::fpuGetReg(int)>
c001fd6b:	57                   	push   edi
c001fd6c:	56                   	push   esi
c001fd6d:	52                   	push   edx
c001fd6e:	50                   	push   eax
c001fd6f:	e8 a1 fb ff ff       	call   c001f915 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fd74:	eb 2f                	jmp    c001fda5 <Vm::x87Handler(regs*)+0x2c9>
c001fd76:	8d 50 38             	lea    edx,[eax+0x38]
c001fd79:	80 fa 07             	cmp    dl,0x7
c001fd7c:	77 2f                	ja     c001fdad <Vm::x87Handler(regs*)+0x2d1>
c001fd7e:	83 ec 0c             	sub    esp,0xc
c001fd81:	2d c8 00 00 00       	sub    eax,0xc8
c001fd86:	50                   	push   eax
c001fd87:	e8 13 fc ff ff       	call   c001f99f <Vm::fpuGetReg(int)>
c001fd8c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd93:	89 c6                	mov    esi,eax
c001fd95:	89 d7                	mov    edi,edx
c001fd97:	e8 03 fc ff ff       	call   c001f99f <Vm::fpuGetReg(int)>
c001fd9c:	57                   	push   edi
c001fd9d:	56                   	push   esi
c001fd9e:	52                   	push   edx
c001fd9f:	50                   	push   eax
c001fda0:	e8 a9 fb ff ff       	call   c001f94e <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fda5:	83 c4 1c             	add    esp,0x1c
c001fda8:	e9 d8 fd ff ff       	jmp    c001fb85 <Vm::x87Handler(regs*)+0xa9>
c001fdad:	8d 50 30             	lea    edx,[eax+0x30]
c001fdb0:	80 fa 07             	cmp    dl,0x7
c001fdb3:	77 0d                	ja     c001fdc2 <Vm::x87Handler(regs*)+0x2e6>
c001fdb5:	83 ec 0c             	sub    esp,0xc
c001fdb8:	2d d0 00 00 00       	sub    eax,0xd0
c001fdbd:	e9 99 03 00 00       	jmp    c002015b <Vm::x87Handler(regs*)+0x67f>
c001fdc2:	8d 50 28             	lea    edx,[eax+0x28]
c001fdc5:	80 fa 07             	cmp    dl,0x7
c001fdc8:	77 0d                	ja     c001fdd7 <Vm::x87Handler(regs*)+0x2fb>
c001fdca:	83 ec 0c             	sub    esp,0xc
c001fdcd:	2d d8 00 00 00       	sub    eax,0xd8
c001fdd2:	e9 c0 03 00 00       	jmp    c0020197 <Vm::x87Handler(regs*)+0x6bb>
c001fdd7:	8d 50 20             	lea    edx,[eax+0x20]
c001fdda:	80 fa 07             	cmp    dl,0x7
c001fddd:	77 1b                	ja     c001fdfa <Vm::x87Handler(regs*)+0x31e>
c001fddf:	83 ec 0c             	sub    esp,0xc
c001fde2:	2d e0 00 00 00       	sub    eax,0xe0
c001fde7:	50                   	push   eax
c001fde8:	e8 b2 fb ff ff       	call   c001f99f <Vm::fpuGetReg(int)>
c001fded:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fdf4:	89 c6                	mov    esi,eax
c001fdf6:	89 d7                	mov    edi,edx
c001fdf8:	eb 22                	jmp    c001fe1c <Vm::x87Handler(regs*)+0x340>
c001fdfa:	8d 50 18             	lea    edx,[eax+0x18]
c001fdfd:	80 fa 07             	cmp    dl,0x7
c001fe00:	77 2d                	ja     c001fe2f <Vm::x87Handler(regs*)+0x353>
c001fe02:	83 ec 0c             	sub    esp,0xc
c001fe05:	6a 00                	push   0x0
c001fe07:	e8 93 fb ff ff       	call   c001f99f <Vm::fpuGetReg(int)>
c001fe0c:	89 c6                	mov    esi,eax
c001fe0e:	89 d7                	mov    edi,edx
c001fe10:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe14:	2d e8 00 00 00       	sub    eax,0xe8
c001fe19:	89 04 24             	mov    DWORD PTR [esp],eax
c001fe1c:	e8 7e fb ff ff       	call   c001f99f <Vm::fpuGetReg(int)>
c001fe21:	57                   	push   edi
c001fe22:	56                   	push   esi
c001fe23:	52                   	push   edx
c001fe24:	50                   	push   eax
c001fe25:	e8 15 fb ff ff       	call   c001f93f <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fe2a:	e9 76 ff ff ff       	jmp    c001fda5 <Vm::x87Handler(regs*)+0x2c9>
c001fe2f:	8d 50 10             	lea    edx,[eax+0x10]
c001fe32:	80 fa 07             	cmp    dl,0x7
c001fe35:	77 1b                	ja     c001fe52 <Vm::x87Handler(regs*)+0x376>
c001fe37:	83 ec 0c             	sub    esp,0xc
c001fe3a:	2d f0 00 00 00       	sub    eax,0xf0
c001fe3f:	50                   	push   eax
c001fe40:	e8 5a fb ff ff       	call   c001f99f <Vm::fpuGetReg(int)>
c001fe45:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe4c:	89 c6                	mov    esi,eax
c001fe4e:	89 d7                	mov    edi,edx
c001fe50:	eb 22                	jmp    c001fe74 <Vm::x87Handler(regs*)+0x398>
c001fe52:	3c f7                	cmp    al,0xf7
c001fe54:	0f 86 d1 03 00 00    	jbe    c002022b <Vm::x87Handler(regs*)+0x74f>
c001fe5a:	83 ec 0c             	sub    esp,0xc
c001fe5d:	6a 00                	push   0x0
c001fe5f:	e8 3b fb ff ff       	call   c001f99f <Vm::fpuGetReg(int)>
c001fe64:	89 c6                	mov    esi,eax
c001fe66:	89 d7                	mov    edi,edx
c001fe68:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe6c:	2d f8 00 00 00       	sub    eax,0xf8
c001fe71:	89 04 24             	mov    DWORD PTR [esp],eax
c001fe74:	e8 26 fb ff ff       	call   c001f99f <Vm::fpuGetReg(int)>
c001fe79:	57                   	push   edi
c001fe7a:	56                   	push   esi
c001fe7b:	52                   	push   edx
c001fe7c:	50                   	push   eax
c001fe7d:	e8 eb fa ff ff       	call   c001f96d <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fe82:	83 c4 1c             	add    esp,0x1c
c001fe85:	52                   	push   edx
c001fe86:	50                   	push   eax
c001fe87:	6a 00                	push   0x0
c001fe89:	e9 51 02 00 00       	jmp    c00200df <Vm::x87Handler(regs*)+0x603>
c001fe8e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe92:	8d 50 40             	lea    edx,[eax+0x40]
c001fe95:	80 fa 07             	cmp    dl,0x7
c001fe98:	77 37                	ja     c001fed1 <Vm::x87Handler(regs*)+0x3f5>
c001fe9a:	83 ec 0c             	sub    esp,0xc
c001fe9d:	2d c0 00 00 00       	sub    eax,0xc0
c001fea2:	50                   	push   eax
c001fea3:	e8 f7 fa ff ff       	call   c001f99f <Vm::fpuGetReg(int)>
c001fea8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001feaf:	89 c6                	mov    esi,eax
c001feb1:	89 d7                	mov    edi,edx
c001feb3:	e8 e7 fa ff ff       	call   c001f99f <Vm::fpuGetReg(int)>
c001feb8:	57                   	push   edi
c001feb9:	56                   	push   esi
c001feba:	52                   	push   edx
c001febb:	50                   	push   eax
c001febc:	e8 54 fa ff ff       	call   c001f915 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fec1:	83 c4 1c             	add    esp,0x1c
c001fec4:	52                   	push   edx
c001fec5:	50                   	push   eax
c001fec6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001feca:	2d c0 00 00 00       	sub    eax,0xc0
c001fecf:	eb 3d                	jmp    c001ff0e <Vm::x87Handler(regs*)+0x432>
c001fed1:	8d 50 38             	lea    edx,[eax+0x38]
c001fed4:	80 fa 07             	cmp    dl,0x7
c001fed7:	77 3b                	ja     c001ff14 <Vm::x87Handler(regs*)+0x438>
c001fed9:	83 ec 0c             	sub    esp,0xc
c001fedc:	2d c8 00 00 00       	sub    eax,0xc8
c001fee1:	50                   	push   eax
c001fee2:	e8 b8 fa ff ff       	call   c001f99f <Vm::fpuGetReg(int)>
c001fee7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001feee:	89 c6                	mov    esi,eax
c001fef0:	89 d7                	mov    edi,edx
c001fef2:	e8 a8 fa ff ff       	call   c001f99f <Vm::fpuGetReg(int)>
c001fef7:	57                   	push   edi
c001fef8:	56                   	push   esi
c001fef9:	52                   	push   edx
c001fefa:	50                   	push   eax
c001fefb:	e8 4e fa ff ff       	call   c001f94e <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ff00:	83 c4 1c             	add    esp,0x1c
c001ff03:	52                   	push   edx
c001ff04:	50                   	push   eax
c001ff05:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff09:	2d c8 00 00 00       	sub    eax,0xc8
c001ff0e:	50                   	push   eax
c001ff0f:	e9 75 fc ff ff       	jmp    c001fb89 <Vm::x87Handler(regs*)+0xad>
c001ff14:	83 c0 18             	add    eax,0x18
c001ff17:	3c 07                	cmp    al,0x7
c001ff19:	0f 87 3b 04 00 00    	ja     c002035a <Vm::x87Handler(regs*)+0x87e>
c001ff1f:	83 ec 0c             	sub    esp,0xc
c001ff22:	6a 00                	push   0x0
c001ff24:	e8 76 fa ff ff       	call   c001f99f <Vm::fpuGetReg(int)>
c001ff29:	89 c6                	mov    esi,eax
c001ff2b:	89 d7                	mov    edi,edx
c001ff2d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff31:	2d e8 00 00 00       	sub    eax,0xe8
c001ff36:	89 04 24             	mov    DWORD PTR [esp],eax
c001ff39:	e8 61 fa ff ff       	call   c001f99f <Vm::fpuGetReg(int)>
c001ff3e:	57                   	push   edi
c001ff3f:	56                   	push   esi
c001ff40:	52                   	push   edx
c001ff41:	50                   	push   eax
c001ff42:	e8 f8 f9 ff ff       	call   c001f93f <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ff47:	83 c4 1c             	add    esp,0x1c
c001ff4a:	52                   	push   edx
c001ff4b:	50                   	push   eax
c001ff4c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff50:	2d e8 00 00 00       	sub    eax,0xe8
c001ff55:	eb b7                	jmp    c001ff0e <Vm::x87Handler(regs*)+0x432>
c001ff57:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff5b:	8d 50 40             	lea    edx,[eax+0x40]
c001ff5e:	80 fa 07             	cmp    dl,0x7
c001ff61:	77 3a                	ja     c001ff9d <Vm::x87Handler(regs*)+0x4c1>
c001ff63:	83 ec 0c             	sub    esp,0xc
c001ff66:	2d c0 00 00 00       	sub    eax,0xc0
c001ff6b:	50                   	push   eax
c001ff6c:	e8 2e fa ff ff       	call   c001f99f <Vm::fpuGetReg(int)>
c001ff71:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff78:	89 c6                	mov    esi,eax
c001ff7a:	89 d7                	mov    edi,edx
c001ff7c:	e8 1e fa ff ff       	call   c001f99f <Vm::fpuGetReg(int)>
c001ff81:	57                   	push   edi
c001ff82:	56                   	push   esi
c001ff83:	52                   	push   edx
c001ff84:	50                   	push   eax
c001ff85:	e8 8b f9 ff ff       	call   c001f915 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ff8a:	83 c4 1c             	add    esp,0x1c
c001ff8d:	52                   	push   edx
c001ff8e:	50                   	push   eax
c001ff8f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff93:	2d c0 00 00 00       	sub    eax,0xc0
c001ff98:	e9 9e 01 00 00       	jmp    c002013b <Vm::x87Handler(regs*)+0x65f>
c001ff9d:	8d 50 20             	lea    edx,[eax+0x20]
c001ffa0:	80 fa 07             	cmp    dl,0x7
c001ffa3:	77 3a                	ja     c001ffdf <Vm::x87Handler(regs*)+0x503>
c001ffa5:	83 ec 0c             	sub    esp,0xc
c001ffa8:	2d e0 00 00 00       	sub    eax,0xe0
c001ffad:	50                   	push   eax
c001ffae:	e8 ec f9 ff ff       	call   c001f99f <Vm::fpuGetReg(int)>
c001ffb3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ffba:	89 c6                	mov    esi,eax
c001ffbc:	89 d7                	mov    edi,edx
c001ffbe:	e8 dc f9 ff ff       	call   c001f99f <Vm::fpuGetReg(int)>
c001ffc3:	57                   	push   edi
c001ffc4:	56                   	push   esi
c001ffc5:	52                   	push   edx
c001ffc6:	50                   	push   eax
c001ffc7:	e8 73 f9 ff ff       	call   c001f93f <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ffcc:	83 c4 1c             	add    esp,0x1c
c001ffcf:	52                   	push   edx
c001ffd0:	50                   	push   eax
c001ffd1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffd5:	2d e0 00 00 00       	sub    eax,0xe0
c001ffda:	e9 5c 01 00 00       	jmp    c002013b <Vm::x87Handler(regs*)+0x65f>
c001ffdf:	8d 50 18             	lea    edx,[eax+0x18]
c001ffe2:	80 fa 07             	cmp    dl,0x7
c001ffe5:	77 3b                	ja     c0020022 <Vm::x87Handler(regs*)+0x546>
c001ffe7:	83 ec 0c             	sub    esp,0xc
c001ffea:	6a 00                	push   0x0
c001ffec:	e8 ae f9 ff ff       	call   c001f99f <Vm::fpuGetReg(int)>
c001fff1:	89 c6                	mov    esi,eax
c001fff3:	89 d7                	mov    edi,edx
c001fff5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fff9:	2d e8 00 00 00       	sub    eax,0xe8
c001fffe:	89 04 24             	mov    DWORD PTR [esp],eax
c0020001:	e8 99 f9 ff ff       	call   c001f99f <Vm::fpuGetReg(int)>
c0020006:	57                   	push   edi
c0020007:	56                   	push   esi
c0020008:	52                   	push   edx
c0020009:	50                   	push   eax
c002000a:	e8 30 f9 ff ff       	call   c001f93f <Vm::fpuSub(unsigned long long, unsigned long long)>
c002000f:	83 c4 1c             	add    esp,0x1c
c0020012:	52                   	push   edx
c0020013:	50                   	push   eax
c0020014:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020018:	2d e8 00 00 00       	sub    eax,0xe8
c002001d:	e9 19 01 00 00       	jmp    c002013b <Vm::x87Handler(regs*)+0x65f>
c0020022:	8d 50 38             	lea    edx,[eax+0x38]
c0020025:	80 fa 07             	cmp    dl,0x7
c0020028:	77 37                	ja     c0020061 <Vm::x87Handler(regs*)+0x585>
c002002a:	83 ec 0c             	sub    esp,0xc
c002002d:	2d c8 00 00 00       	sub    eax,0xc8
c0020032:	50                   	push   eax
c0020033:	e8 67 f9 ff ff       	call   c001f99f <Vm::fpuGetReg(int)>
c0020038:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002003f:	89 c6                	mov    esi,eax
c0020041:	89 d7                	mov    edi,edx
c0020043:	e8 57 f9 ff ff       	call   c001f99f <Vm::fpuGetReg(int)>
c0020048:	57                   	push   edi
c0020049:	56                   	push   esi
c002004a:	52                   	push   edx
c002004b:	50                   	push   eax
c002004c:	e8 fd f8 ff ff       	call   c001f94e <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020051:	83 c4 1c             	add    esp,0x1c
c0020054:	52                   	push   edx
c0020055:	50                   	push   eax
c0020056:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002005a:	2d c8 00 00 00       	sub    eax,0xc8
c002005f:	eb 7d                	jmp    c00200de <Vm::x87Handler(regs*)+0x602>
c0020061:	3c f7                	cmp    al,0xf7
c0020063:	76 38                	jbe    c002009d <Vm::x87Handler(regs*)+0x5c1>
c0020065:	83 ec 0c             	sub    esp,0xc
c0020068:	6a 00                	push   0x0
c002006a:	e8 30 f9 ff ff       	call   c001f99f <Vm::fpuGetReg(int)>
c002006f:	89 c6                	mov    esi,eax
c0020071:	89 d7                	mov    edi,edx
c0020073:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020077:	2d f8 00 00 00       	sub    eax,0xf8
c002007c:	89 04 24             	mov    DWORD PTR [esp],eax
c002007f:	e8 1b f9 ff ff       	call   c001f99f <Vm::fpuGetReg(int)>
c0020084:	57                   	push   edi
c0020085:	56                   	push   esi
c0020086:	52                   	push   edx
c0020087:	50                   	push   eax
c0020088:	e8 e0 f8 ff ff       	call   c001f96d <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002008d:	83 c4 1c             	add    esp,0x1c
c0020090:	52                   	push   edx
c0020091:	50                   	push   eax
c0020092:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020096:	2d f8 00 00 00       	sub    eax,0xf8
c002009b:	eb 41                	jmp    c00200de <Vm::x87Handler(regs*)+0x602>
c002009d:	8d 50 10             	lea    edx,[eax+0x10]
c00200a0:	80 fa 07             	cmp    dl,0x7
c00200a3:	0f 87 5a 01 00 00    	ja     c0020203 <Vm::x87Handler(regs*)+0x727>
c00200a9:	83 ec 0c             	sub    esp,0xc
c00200ac:	2d f0 00 00 00       	sub    eax,0xf0
c00200b1:	50                   	push   eax
c00200b2:	e8 e8 f8 ff ff       	call   c001f99f <Vm::fpuGetReg(int)>
c00200b7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00200be:	89 c6                	mov    esi,eax
c00200c0:	89 d7                	mov    edi,edx
c00200c2:	e8 d8 f8 ff ff       	call   c001f99f <Vm::fpuGetReg(int)>
c00200c7:	57                   	push   edi
c00200c8:	56                   	push   esi
c00200c9:	52                   	push   edx
c00200ca:	50                   	push   eax
c00200cb:	e8 9d f8 ff ff       	call   c001f96d <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00200d0:	83 c4 1c             	add    esp,0x1c
c00200d3:	52                   	push   edx
c00200d4:	50                   	push   eax
c00200d5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200d9:	2d f0 00 00 00       	sub    eax,0xf0
c00200de:	50                   	push   eax
c00200df:	e8 fe f8 ff ff       	call   c001f9e2 <Vm::fpuSetReg(int, unsigned long long)>
c00200e4:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00200e8:	e8 9d f9 ff ff       	call   c001fa8a <Vm::fpuPop()>
c00200ed:	e9 5e fa ff ff       	jmp    c001fb50 <Vm::x87Handler(regs*)+0x74>
c00200f2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200f6:	8d 50 30             	lea    edx,[eax+0x30]
c00200f9:	80 fa 07             	cmp    dl,0x7
c00200fc:	77 1d                	ja     c002011b <Vm::x87Handler(regs*)+0x63f>
c00200fe:	83 ec 0c             	sub    esp,0xc
c0020101:	6a 00                	push   0x0
c0020103:	e8 97 f8 ff ff       	call   c001f99f <Vm::fpuGetReg(int)>
c0020108:	83 c4 0c             	add    esp,0xc
c002010b:	52                   	push   edx
c002010c:	50                   	push   eax
c002010d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020111:	2d d0 00 00 00       	sub    eax,0xd0
c0020116:	e9 f3 fd ff ff       	jmp    c001ff0e <Vm::x87Handler(regs*)+0x432>
c002011b:	8d 50 28             	lea    edx,[eax+0x28]
c002011e:	80 fa 07             	cmp    dl,0x7
c0020121:	77 28                	ja     c002014b <Vm::x87Handler(regs*)+0x66f>
c0020123:	83 ec 0c             	sub    esp,0xc
c0020126:	6a 00                	push   0x0
c0020128:	e8 72 f8 ff ff       	call   c001f99f <Vm::fpuGetReg(int)>
c002012d:	83 c4 0c             	add    esp,0xc
c0020130:	52                   	push   edx
c0020131:	50                   	push   eax
c0020132:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020136:	2d d8 00 00 00       	sub    eax,0xd8
c002013b:	50                   	push   eax
c002013c:	e8 a1 f8 ff ff       	call   c001f9e2 <Vm::fpuSetReg(int, unsigned long long)>
c0020141:	e8 44 f9 ff ff       	call   c001fa8a <Vm::fpuPop()>
c0020146:	e9 01 fa ff ff       	jmp    c001fb4c <Vm::x87Handler(regs*)+0x70>
c002014b:	8d 50 20             	lea    edx,[eax+0x20]
c002014e:	80 fa 07             	cmp    dl,0x7
c0020151:	77 30                	ja     c0020183 <Vm::x87Handler(regs*)+0x6a7>
c0020153:	83 ec 0c             	sub    esp,0xc
c0020156:	2d e0 00 00 00       	sub    eax,0xe0
c002015b:	50                   	push   eax
c002015c:	e8 3e f8 ff ff       	call   c001f99f <Vm::fpuGetReg(int)>
c0020161:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020168:	89 c6                	mov    esi,eax
c002016a:	89 d7                	mov    edi,edx
c002016c:	e8 2e f8 ff ff       	call   c001f99f <Vm::fpuGetReg(int)>
c0020171:	57                   	push   edi
c0020172:	56                   	push   esi
c0020173:	52                   	push   edx
c0020174:	50                   	push   eax
c0020175:	e8 48 f7 ff ff       	call   c001f8c2 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002017a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002017e:	e9 54 02 00 00       	jmp    c00203d7 <Vm::x87Handler(regs*)+0x8fb>
c0020183:	8d 50 18             	lea    edx,[eax+0x18]
c0020186:	80 fa 07             	cmp    dl,0x7
c0020189:	0f 87 43 fb ff ff    	ja     c001fcd2 <Vm::x87Handler(regs*)+0x1f6>
c002018f:	83 ec 0c             	sub    esp,0xc
c0020192:	2d e8 00 00 00       	sub    eax,0xe8
c0020197:	50                   	push   eax
c0020198:	e8 02 f8 ff ff       	call   c001f99f <Vm::fpuGetReg(int)>
c002019d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00201a4:	89 c6                	mov    esi,eax
c00201a6:	89 d7                	mov    edi,edx
c00201a8:	e8 f2 f7 ff ff       	call   c001f99f <Vm::fpuGetReg(int)>
c00201ad:	57                   	push   edi
c00201ae:	56                   	push   esi
c00201af:	52                   	push   edx
c00201b0:	50                   	push   eax
c00201b1:	e8 0c f7 ff ff       	call   c001f8c2 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00201b6:	83 c4 20             	add    esp,0x20
c00201b9:	e8 cc f8 ff ff       	call   c001fa8a <Vm::fpuPop()>
c00201be:	eb 62                	jmp    c0020222 <Vm::x87Handler(regs*)+0x746>
c00201c0:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c00201c4:	0f 85 0f 01 00 00    	jne    c00202d9 <Vm::x87Handler(regs*)+0x7fd>
c00201ca:	83 ec 0c             	sub    esp,0xc
c00201cd:	6a 01                	push   0x1
c00201cf:	e8 cb f7 ff ff       	call   c001f99f <Vm::fpuGetReg(int)>
c00201d4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00201db:	89 c6                	mov    esi,eax
c00201dd:	89 d7                	mov    edi,edx
c00201df:	e8 bb f7 ff ff       	call   c001f99f <Vm::fpuGetReg(int)>
c00201e4:	57                   	push   edi
c00201e5:	56                   	push   esi
c00201e6:	52                   	push   edx
c00201e7:	50                   	push   eax
c00201e8:	e8 d5 f6 ff ff       	call   c001f8c2 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00201ed:	83 c4 20             	add    esp,0x20
c00201f0:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00201f4:	e8 91 f8 ff ff       	call   c001fa8a <Vm::fpuPop()>
c00201f9:	e8 8c f8 ff ff       	call   c001fa8a <Vm::fpuPop()>
c00201fe:	e9 50 f9 ff ff       	jmp    c001fb53 <Vm::x87Handler(regs*)+0x77>
c0020203:	3c d9                	cmp    al,0xd9
c0020205:	0f 85 b5 02 00 00    	jne    c00204c0 <Vm::x87Handler(regs*)+0x9e4>
c002020b:	eb bd                	jmp    c00201ca <Vm::x87Handler(regs*)+0x6ee>
c002020d:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c0020211:	0f 85 ea 02 00 00    	jne    c0020501 <Vm::x87Handler(regs*)+0xa25>
c0020217:	0f b7 05 20 1c 03 c0 	movzx  eax,WORD PTR ds:0xc0031c20
c002021e:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c0020222:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020226:	e9 28 f9 ff ff       	jmp    c001fb53 <Vm::x87Handler(regs*)+0x77>
c002022b:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002022f:	84 d2                	test   dl,dl
c0020231:	75 0f                	jne    c0020242 <Vm::x87Handler(regs*)+0x766>
c0020233:	83 ec 0c             	sub    esp,0xc
c0020236:	ff 36                	push   DWORD PTR [esi]
c0020238:	e8 b1 f4 ff ff       	call   c001f6ee <Vm::fpu32ToInternal(unsigned int)>
c002023d:	e9 2c 01 00 00       	jmp    c002036e <Vm::x87Handler(regs*)+0x892>
c0020242:	80 fa 01             	cmp    dl,0x1
c0020245:	75 0f                	jne    c0020256 <Vm::x87Handler(regs*)+0x77a>
c0020247:	83 ec 0c             	sub    esp,0xc
c002024a:	ff 36                	push   DWORD PTR [esi]
c002024c:	e8 9d f4 ff ff       	call   c001f6ee <Vm::fpu32ToInternal(unsigned int)>
c0020251:	e9 81 02 00 00       	jmp    c00204d7 <Vm::x87Handler(regs*)+0x9fb>
c0020256:	80 fa 04             	cmp    dl,0x4
c0020259:	75 0f                	jne    c002026a <Vm::x87Handler(regs*)+0x78e>
c002025b:	83 ec 0c             	sub    esp,0xc
c002025e:	ff 36                	push   DWORD PTR [esi]
c0020260:	e8 89 f4 ff ff       	call   c001f6ee <Vm::fpu32ToInternal(unsigned int)>
c0020265:	e9 86 01 00 00       	jmp    c00203f0 <Vm::x87Handler(regs*)+0x914>
c002026a:	80 fa 05             	cmp    dl,0x5
c002026d:	75 1b                	jne    c002028a <Vm::x87Handler(regs*)+0x7ae>
c002026f:	83 ec 0c             	sub    esp,0xc
c0020272:	6a 00                	push   0x0
c0020274:	e8 26 f7 ff ff       	call   c001f99f <Vm::fpuGetReg(int)>
c0020279:	89 c7                	mov    edi,eax
c002027b:	89 d5                	mov    ebp,edx
c002027d:	58                   	pop    eax
c002027e:	ff 36                	push   DWORD PTR [esi]
c0020280:	e8 69 f4 ff ff       	call   c001f6ee <Vm::fpu32ToInternal(unsigned int)>
c0020285:	e9 a3 01 00 00       	jmp    c002042d <Vm::x87Handler(regs*)+0x951>
c002028a:	80 fa 06             	cmp    dl,0x6
c002028d:	75 0f                	jne    c002029e <Vm::x87Handler(regs*)+0x7c2>
c002028f:	83 ec 0c             	sub    esp,0xc
c0020292:	ff 36                	push   DWORD PTR [esi]
c0020294:	e8 55 f4 ff ff       	call   c001f6ee <Vm::fpu32ToInternal(unsigned int)>
c0020299:	e9 ae 01 00 00       	jmp    c002044c <Vm::x87Handler(regs*)+0x970>
c002029e:	31 c0                	xor    eax,eax
c00202a0:	80 fa 07             	cmp    dl,0x7
c00202a3:	0f 85 94 02 00 00    	jne    c002053d <Vm::x87Handler(regs*)+0xa61>
c00202a9:	83 ec 0c             	sub    esp,0xc
c00202ac:	6a 00                	push   0x0
c00202ae:	e8 ec f6 ff ff       	call   c001f99f <Vm::fpuGetReg(int)>
c00202b3:	89 c7                	mov    edi,eax
c00202b5:	89 d5                	mov    ebp,edx
c00202b7:	58                   	pop    eax
c00202b8:	ff 36                	push   DWORD PTR [esi]
c00202ba:	e8 2f f4 ff ff       	call   c001f6ee <Vm::fpu32ToInternal(unsigned int)>
c00202bf:	e9 cb 01 00 00       	jmp    c002048f <Vm::x87Handler(regs*)+0x9b3>
c00202c4:	80 fa 03             	cmp    dl,0x3
c00202c7:	0f 85 d3 01 00 00    	jne    c00204a0 <Vm::x87Handler(regs*)+0x9c4>
c00202cd:	e8 b8 f7 ff ff       	call   c001fa8a <Vm::fpuPop()>
c00202d2:	51                   	push   ecx
c00202d3:	51                   	push   ecx
c00202d4:	e9 de 01 00 00       	jmp    c00204b7 <Vm::x87Handler(regs*)+0x9db>
c00202d9:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00202dd:	80 fa 01             	cmp    dl,0x1
c00202e0:	75 09                	jne    c00202eb <Vm::x87Handler(regs*)+0x80f>
c00202e2:	57                   	push   edi
c00202e3:	57                   	push   edi
c00202e4:	8b 06                	mov    eax,DWORD PTR [esi]
c00202e6:	e9 e3 01 00 00       	jmp    c00204ce <Vm::x87Handler(regs*)+0x9f2>
c00202eb:	80 fa 04             	cmp    dl,0x4
c00202ee:	75 12                	jne    c0020302 <Vm::x87Handler(regs*)+0x826>
c00202f0:	31 d2                	xor    edx,edx
c00202f2:	51                   	push   ecx
c00202f3:	51                   	push   ecx
c00202f4:	8b 06                	mov    eax,DWORD PTR [esi]
c00202f6:	52                   	push   edx
c00202f7:	50                   	push   eax
c00202f8:	e8 d0 f4 ff ff       	call   c001f7cd <Vm::fpuLongToFloat(long long)>
c00202fd:	e9 ee 00 00 00       	jmp    c00203f0 <Vm::x87Handler(regs*)+0x914>
c0020302:	31 c0                	xor    eax,eax
c0020304:	80 fa 07             	cmp    dl,0x7
c0020307:	0f 85 30 02 00 00    	jne    c002053d <Vm::x87Handler(regs*)+0xa61>
c002030d:	83 ec 0c             	sub    esp,0xc
c0020310:	6a 00                	push   0x0
c0020312:	e8 88 f6 ff ff       	call   c001f99f <Vm::fpuGetReg(int)>
c0020317:	89 c7                	mov    edi,eax
c0020319:	89 d5                	mov    ebp,edx
c002031b:	58                   	pop    eax
c002031c:	8b 06                	mov    eax,DWORD PTR [esi]
c002031e:	5a                   	pop    edx
c002031f:	31 d2                	xor    edx,edx
c0020321:	52                   	push   edx
c0020322:	50                   	push   eax
c0020323:	e8 a5 f4 ff ff       	call   c001f7cd <Vm::fpuLongToFloat(long long)>
c0020328:	e9 62 01 00 00       	jmp    c002048f <Vm::x87Handler(regs*)+0x9b3>
c002032d:	84 d2                	test   dl,dl
c002032f:	75 0d                	jne    c002033e <Vm::x87Handler(regs*)+0x862>
c0020331:	31 d2                	xor    edx,edx
c0020333:	55                   	push   ebp
c0020334:	55                   	push   ebp
c0020335:	8b 06                	mov    eax,DWORD PTR [esi]
c0020337:	52                   	push   edx
c0020338:	50                   	push   eax
c0020339:	e9 d3 01 00 00       	jmp    c0020511 <Vm::x87Handler(regs*)+0xa35>
c002033e:	31 c0                	xor    eax,eax
c0020340:	80 fa 02             	cmp    dl,0x2
c0020343:	0f 85 f4 01 00 00    	jne    c002053d <Vm::x87Handler(regs*)+0xa61>
c0020349:	83 ec 0c             	sub    esp,0xc
c002034c:	6a 00                	push   0x0
c002034e:	e8 4c f6 ff ff       	call   c001f99f <Vm::fpuGetReg(int)>
c0020353:	59                   	pop    ecx
c0020354:	5f                   	pop    edi
c0020355:	e9 6a f9 ff ff       	jmp    c001fcc4 <Vm::x87Handler(regs*)+0x1e8>
c002035a:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002035e:	84 d2                	test   dl,dl
c0020360:	75 2a                	jne    c002038c <Vm::x87Handler(regs*)+0x8b0>
c0020362:	50                   	push   eax
c0020363:	50                   	push   eax
c0020364:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020367:	ff 36                	push   DWORD PTR [esi]
c0020369:	e8 c5 f3 ff ff       	call   c001f733 <Vm::fpu64ToInternal(unsigned long long)>
c002036e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020375:	89 c6                	mov    esi,eax
c0020377:	89 d7                	mov    edi,edx
c0020379:	e8 21 f6 ff ff       	call   c001f99f <Vm::fpuGetReg(int)>
c002037e:	57                   	push   edi
c002037f:	56                   	push   esi
c0020380:	52                   	push   edx
c0020381:	50                   	push   eax
c0020382:	e8 8e f5 ff ff       	call   c001f915 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020387:	e9 64 01 00 00       	jmp    c00204f0 <Vm::x87Handler(regs*)+0xa14>
c002038c:	80 fa 01             	cmp    dl,0x1
c002038f:	75 11                	jne    c00203a2 <Vm::x87Handler(regs*)+0x8c6>
c0020391:	50                   	push   eax
c0020392:	50                   	push   eax
c0020393:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020396:	ff 36                	push   DWORD PTR [esi]
c0020398:	e8 96 f3 ff ff       	call   c001f733 <Vm::fpu64ToInternal(unsigned long long)>
c002039d:	e9 35 01 00 00       	jmp    c00204d7 <Vm::x87Handler(regs*)+0x9fb>
c00203a2:	80 fa 02             	cmp    dl,0x2
c00203a5:	0f 85 54 f9 ff ff    	jne    c001fcff <Vm::x87Handler(regs*)+0x223>
c00203ab:	55                   	push   ebp
c00203ac:	55                   	push   ebp
c00203ad:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203b0:	ff 36                	push   DWORD PTR [esi]
c00203b2:	e8 7c f3 ff ff       	call   c001f733 <Vm::fpu64ToInternal(unsigned long long)>
c00203b7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00203be:	89 c6                	mov    esi,eax
c00203c0:	89 d7                	mov    edi,edx
c00203c2:	e8 d8 f5 ff ff       	call   c001f99f <Vm::fpuGetReg(int)>
c00203c7:	57                   	push   edi
c00203c8:	56                   	push   esi
c00203c9:	52                   	push   edx
c00203ca:	50                   	push   eax
c00203cb:	e8 f2 f4 ff ff       	call   c001f8c2 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00203d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00203d4:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c00203d7:	83 c4 20             	add    esp,0x20
c00203da:	e9 74 f7 ff ff       	jmp    c001fb53 <Vm::x87Handler(regs*)+0x77>
c00203df:	80 fa 04             	cmp    dl,0x4
c00203e2:	75 2a                	jne    c002040e <Vm::x87Handler(regs*)+0x932>
c00203e4:	51                   	push   ecx
c00203e5:	51                   	push   ecx
c00203e6:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203e9:	ff 36                	push   DWORD PTR [esi]
c00203eb:	e8 43 f3 ff ff       	call   c001f733 <Vm::fpu64ToInternal(unsigned long long)>
c00203f0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00203f7:	89 c6                	mov    esi,eax
c00203f9:	89 d7                	mov    edi,edx
c00203fb:	e8 9f f5 ff ff       	call   c001f99f <Vm::fpuGetReg(int)>
c0020400:	57                   	push   edi
c0020401:	56                   	push   esi
c0020402:	52                   	push   edx
c0020403:	50                   	push   eax
c0020404:	e8 36 f5 ff ff       	call   c001f93f <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020409:	e9 e2 00 00 00       	jmp    c00204f0 <Vm::x87Handler(regs*)+0xa14>
c002040e:	80 fa 05             	cmp    dl,0x5
c0020411:	75 28                	jne    c002043b <Vm::x87Handler(regs*)+0x95f>
c0020413:	83 ec 0c             	sub    esp,0xc
c0020416:	6a 00                	push   0x0
c0020418:	e8 82 f5 ff ff       	call   c001f99f <Vm::fpuGetReg(int)>
c002041d:	89 c7                	mov    edi,eax
c002041f:	89 d5                	mov    ebp,edx
c0020421:	58                   	pop    eax
c0020422:	5a                   	pop    edx
c0020423:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020426:	ff 36                	push   DWORD PTR [esi]
c0020428:	e8 06 f3 ff ff       	call   c001f733 <Vm::fpu64ToInternal(unsigned long long)>
c002042d:	83 c4 10             	add    esp,0x10
c0020430:	55                   	push   ebp
c0020431:	57                   	push   edi
c0020432:	52                   	push   edx
c0020433:	50                   	push   eax
c0020434:	e8 06 f5 ff ff       	call   c001f93f <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020439:	eb 60                	jmp    c002049b <Vm::x87Handler(regs*)+0x9bf>
c002043b:	80 fa 06             	cmp    dl,0x6
c002043e:	75 2a                	jne    c002046a <Vm::x87Handler(regs*)+0x98e>
c0020440:	51                   	push   ecx
c0020441:	51                   	push   ecx
c0020442:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020445:	ff 36                	push   DWORD PTR [esi]
c0020447:	e8 e7 f2 ff ff       	call   c001f733 <Vm::fpu64ToInternal(unsigned long long)>
c002044c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020453:	89 c6                	mov    esi,eax
c0020455:	89 d7                	mov    edi,edx
c0020457:	e8 43 f5 ff ff       	call   c001f99f <Vm::fpuGetReg(int)>
c002045c:	57                   	push   edi
c002045d:	56                   	push   esi
c002045e:	52                   	push   edx
c002045f:	50                   	push   eax
c0020460:	e8 08 f5 ff ff       	call   c001f96d <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020465:	e9 86 00 00 00       	jmp    c00204f0 <Vm::x87Handler(regs*)+0xa14>
c002046a:	31 c0                	xor    eax,eax
c002046c:	80 fa 07             	cmp    dl,0x7
c002046f:	0f 85 c8 00 00 00    	jne    c002053d <Vm::x87Handler(regs*)+0xa61>
c0020475:	83 ec 0c             	sub    esp,0xc
c0020478:	6a 00                	push   0x0
c002047a:	e8 20 f5 ff ff       	call   c001f99f <Vm::fpuGetReg(int)>
c002047f:	89 c7                	mov    edi,eax
c0020481:	89 d5                	mov    ebp,edx
c0020483:	58                   	pop    eax
c0020484:	5a                   	pop    edx
c0020485:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020488:	ff 36                	push   DWORD PTR [esi]
c002048a:	e8 a4 f2 ff ff       	call   c001f733 <Vm::fpu64ToInternal(unsigned long long)>
c002048f:	83 c4 10             	add    esp,0x10
c0020492:	55                   	push   ebp
c0020493:	57                   	push   edi
c0020494:	52                   	push   edx
c0020495:	50                   	push   eax
c0020496:	e8 d2 f4 ff ff       	call   c001f96d <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002049b:	83 c4 0c             	add    esp,0xc
c002049e:	eb 53                	jmp    c00204f3 <Vm::x87Handler(regs*)+0xa17>
c00204a0:	31 c0                	xor    eax,eax
c00204a2:	80 fa 02             	cmp    dl,0x2
c00204a5:	0f 85 92 00 00 00    	jne    c002053d <Vm::x87Handler(regs*)+0xa61>
c00204ab:	83 ec 0c             	sub    esp,0xc
c00204ae:	6a 00                	push   0x0
c00204b0:	e8 ea f4 ff ff       	call   c001f99f <Vm::fpuGetReg(int)>
c00204b5:	59                   	pop    ecx
c00204b6:	5f                   	pop    edi
c00204b7:	52                   	push   edx
c00204b8:	50                   	push   eax
c00204b9:	e8 27 f2 ff ff       	call   c001f6e5 <Vm::fpuInternalTo64(unsigned long long)>
c00204be:	eb 70                	jmp    c0020530 <Vm::x87Handler(regs*)+0xa54>
c00204c0:	31 c0                	xor    eax,eax
c00204c2:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c00204c7:	75 74                	jne    c002053d <Vm::x87Handler(regs*)+0xa61>
c00204c9:	50                   	push   eax
c00204ca:	50                   	push   eax
c00204cb:	0f b7 06             	movzx  eax,WORD PTR [esi]
c00204ce:	31 d2                	xor    edx,edx
c00204d0:	52                   	push   edx
c00204d1:	50                   	push   eax
c00204d2:	e8 f6 f2 ff ff       	call   c001f7cd <Vm::fpuLongToFloat(long long)>
c00204d7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00204de:	89 c6                	mov    esi,eax
c00204e0:	89 d7                	mov    edi,edx
c00204e2:	e8 b8 f4 ff ff       	call   c001f99f <Vm::fpuGetReg(int)>
c00204e7:	57                   	push   edi
c00204e8:	56                   	push   esi
c00204e9:	52                   	push   edx
c00204ea:	50                   	push   eax
c00204eb:	e8 5e f4 ff ff       	call   c001f94e <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00204f0:	83 c4 1c             	add    esp,0x1c
c00204f3:	52                   	push   edx
c00204f4:	50                   	push   eax
c00204f5:	6a 00                	push   0x0
c00204f7:	e8 e6 f4 ff ff       	call   c001f9e2 <Vm::fpuSetReg(int, unsigned long long)>
c00204fc:	e9 f2 f7 ff ff       	jmp    c001fcf3 <Vm::x87Handler(regs*)+0x217>
c0020501:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020505:	80 fa 05             	cmp    dl,0x5
c0020508:	75 11                	jne    c002051b <Vm::x87Handler(regs*)+0xa3f>
c002050a:	55                   	push   ebp
c002050b:	55                   	push   ebp
c002050c:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002050f:	ff 36                	push   DWORD PTR [esi]
c0020511:	e8 81 f2 ff ff       	call   c001f797 <Vm::fpuULongToFloat(unsigned long long)>
c0020516:	e9 cf f7 ff ff       	jmp    c001fcea <Vm::x87Handler(regs*)+0x20e>
c002051b:	31 c0                	xor    eax,eax
c002051d:	80 fa 07             	cmp    dl,0x7
c0020520:	75 1b                	jne    c002053d <Vm::x87Handler(regs*)+0xa61>
c0020522:	e8 63 f5 ff ff       	call   c001fa8a <Vm::fpuPop()>
c0020527:	51                   	push   ecx
c0020528:	51                   	push   ecx
c0020529:	52                   	push   edx
c002052a:	50                   	push   eax
c002052b:	e8 0c f2 ff ff       	call   c001f73c <Vm::fpuFloatToLong(unsigned long long)>
c0020530:	83 c4 10             	add    esp,0x10
c0020533:	89 06                	mov    DWORD PTR [esi],eax
c0020535:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0020538:	e9 f8 f7 ff ff       	jmp    c001fd35 <Vm::x87Handler(regs*)+0x259>
c002053d:	83 c4 1c             	add    esp,0x1c
c0020540:	5b                   	pop    ebx
c0020541:	5e                   	pop    esi
c0020542:	5f                   	pop    edi
c0020543:	5d                   	pop    ebp
c0020544:	c3                   	ret    

c0020545 <__static_initialization_and_destruction_0(int, int)>:
c0020545:	83 ec 0c             	sub    esp,0xc
c0020548:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c002054d:	75 1a                	jne    c0020569 <__static_initialization_and_destruction_0(int, int)+0x24>
c002054f:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0020557:	75 10                	jne    c0020569 <__static_initialization_and_destruction_0(int, int)+0x24>
c0020559:	83 ec 0c             	sub    esp,0xc
c002055c:	68 20 1c 03 c0       	push   0xc0031c20
c0020561:	e8 1a 88 00 00       	call   c0028d80 <Vm::_FPUState::_FPUState()>
c0020566:	83 c4 10             	add    esp,0x10
c0020569:	90                   	nop
c002056a:	83 c4 0c             	add    esp,0xc
c002056d:	c3                   	ret    

c002056e <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c002056e:	83 ec 0c             	sub    esp,0xc
c0020571:	83 ec 08             	sub    esp,0x8
c0020574:	68 ff ff 00 00       	push   0xffff
c0020579:	6a 01                	push   0x1
c002057b:	e8 c5 ff ff ff       	call   c0020545 <__static_initialization_and_destruction_0(int, int)>
c0020580:	83 c4 10             	add    esp,0x10
c0020583:	83 c4 0c             	add    esp,0xc
c0020586:	c3                   	ret    
c0020587:	90                   	nop

c0020588 <FAT::getName()>:
c0020588:	b8 34 ca 02 c0       	mov    eax,0xc002ca34
c002058d:	c3                   	ret    

c002058e <FAT::tell(void*, unsigned long long*)>:
c002058e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020593:	75 06                	jne    c002059b <FAT::tell(void*, unsigned long long*)+0xd>
c0020595:	b8 04 00 00 00       	mov    eax,0x4
c002059a:	c3                   	ret    
c002059b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00205a0:	75 06                	jne    c00205a8 <FAT::tell(void*, unsigned long long*)+0x1a>
c00205a2:	b8 04 00 00 00       	mov    eax,0x4
c00205a7:	c3                   	ret    
c00205a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00205ac:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c00205af:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00205b2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00205b6:	89 01                	mov    DWORD PTR [ecx],eax
c00205b8:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00205bb:	b8 00 00 00 00       	mov    eax,0x0
c00205c0:	c3                   	ret    
c00205c1:	90                   	nop

c00205c2 <FAT::stat(void*, unsigned long long*)>:
c00205c2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00205c7:	75 06                	jne    c00205cf <FAT::stat(void*, unsigned long long*)+0xd>
c00205c9:	b8 04 00 00 00       	mov    eax,0x4
c00205ce:	c3                   	ret    
c00205cf:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00205d4:	75 06                	jne    c00205dc <FAT::stat(void*, unsigned long long*)+0x1a>
c00205d6:	b8 04 00 00 00       	mov    eax,0x4
c00205db:	c3                   	ret    
c00205dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00205e0:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00205e3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00205e6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00205ea:	89 01                	mov    DWORD PTR [ecx],eax
c00205ec:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00205ef:	b8 00 00 00 00       	mov    eax,0x0
c00205f4:	c3                   	ret    
c00205f5:	90                   	nop

c00205f6 <FAT::~FAT()>:
c00205f6:	83 ec 0c             	sub    esp,0xc
c00205f9:	ba b8 ca 02 c0       	mov    edx,0xc002cab8
c00205fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020602:	89 10                	mov    DWORD PTR [eax],edx
c0020604:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020608:	83 ec 0c             	sub    esp,0xc
c002060b:	50                   	push   eax
c002060c:	e8 89 2c ff ff       	call   c001329a <Filesystem::~Filesystem()>
c0020611:	83 c4 10             	add    esp,0x10
c0020614:	90                   	nop
c0020615:	83 c4 0c             	add    esp,0xc
c0020618:	c3                   	ret    
c0020619:	90                   	nop

c002061a <FAT::~FAT()>:
c002061a:	83 ec 0c             	sub    esp,0xc
c002061d:	83 ec 0c             	sub    esp,0xc
c0020620:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020624:	e8 cd ff ff ff       	call   c00205f6 <FAT::~FAT()>
c0020629:	83 c4 10             	add    esp,0x10
c002062c:	83 ec 08             	sub    esp,0x8
c002062f:	6a 08                	push   0x8
c0020631:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020635:	e8 57 28 ff ff       	call   c0012e91 <operator delete(void*, unsigned long)>
c002063a:	83 c4 10             	add    esp,0x10
c002063d:	83 c4 0c             	add    esp,0xc
c0020640:	c3                   	ret    
c0020641:	90                   	nop

c0020642 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0020642:	83 ec 1c             	sub    esp,0x1c
c0020645:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c002064c:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0020651:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020655:	8b 04 85 a0 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce360]
c002065c:	83 f8 ff             	cmp    eax,0xffffffff
c002065f:	75 34                	jne    c0020695 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0020661:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020665:	88 c2                	mov    dl,al
c0020667:	a1 80 1c 03 c0       	mov    eax,ds:0xc0031c80
c002066c:	01 d0                	add    eax,edx
c002066e:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020672:	8b 15 80 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031c80
c0020678:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002067c:	89 14 85 a0 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce360],edx
c0020683:	a1 80 1c 03 c0       	mov    eax,ds:0xc0031c80
c0020688:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002068c:	89 14 85 20 1d 03 c0 	mov    DWORD PTR [eax*4-0x3ffce2e0],edx
c0020693:	eb 17                	jmp    c00206ac <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0020695:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020699:	88 c2                	mov    dl,al
c002069b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002069f:	8b 04 85 a0 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce360]
c00206a6:	01 d0                	add    eax,edx
c00206a8:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00206ac:	83 ec 04             	sub    esp,0x4
c00206af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00206b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00206b7:	8d 44 24 15          	lea    eax,[esp+0x15]
c00206bb:	50                   	push   eax
c00206bc:	e8 77 66 fe ff       	call   c0006d38 <f_getlabel>
c00206c1:	83 c4 10             	add    esp,0x10
c00206c4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00206c8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00206cd:	75 07                	jne    c00206d6 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c00206cf:	b8 00 00 00 00       	mov    eax,0x0
c00206d4:	eb 05                	jmp    c00206db <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c00206d6:	b8 01 00 00 00       	mov    eax,0x1
c00206db:	83 c4 1c             	add    esp,0x1c
c00206de:	c3                   	ret    
c00206df:	90                   	nop

c00206e0 <FAT::setlabel(LogicalDisk*, int, char*)>:
c00206e0:	57                   	push   edi
c00206e1:	83 ec 58             	sub    esp,0x58
c00206e4:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c00206ec:	8d 54 24 10          	lea    edx,[esp+0x10]
c00206f0:	b9 0f 00 00 00       	mov    ecx,0xf
c00206f5:	b8 00 00 00 00       	mov    eax,0x0
c00206fa:	fc                   	cld    
c00206fb:	89 d7                	mov    edi,edx
c00206fd:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00206ff:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020703:	8b 04 85 a0 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce360]
c002070a:	83 f8 ff             	cmp    eax,0xffffffff
c002070d:	75 34                	jne    c0020743 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c002070f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020713:	88 c2                	mov    dl,al
c0020715:	a1 80 1c 03 c0       	mov    eax,ds:0xc0031c80
c002071a:	01 d0                	add    eax,edx
c002071c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020720:	8b 15 80 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031c80
c0020726:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002072a:	89 14 85 a0 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce360],edx
c0020731:	a1 80 1c 03 c0       	mov    eax,ds:0xc0031c80
c0020736:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c002073a:	89 14 85 20 1d 03 c0 	mov    DWORD PTR [eax*4-0x3ffce2e0],edx
c0020741:	eb 17                	jmp    c002075a <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0020743:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020747:	88 c2                	mov    dl,al
c0020749:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002074d:	8b 04 85 a0 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce360]
c0020754:	01 d0                	add    eax,edx
c0020756:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002075a:	83 ec 08             	sub    esp,0x8
c002075d:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0020761:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020765:	50                   	push   eax
c0020766:	e8 09 02 fe ff       	call   c0000974 <strcat>
c002076b:	83 c4 10             	add    esp,0x10
c002076e:	83 ec 0c             	sub    esp,0xc
c0020771:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020775:	50                   	push   eax
c0020776:	e8 ab 67 fe ff       	call   c0006f26 <f_setlabel>
c002077b:	83 c4 10             	add    esp,0x10
c002077e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020782:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0020787:	75 07                	jne    c0020790 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0020789:	b8 00 00 00 00       	mov    eax,0x0
c002078e:	eb 05                	jmp    c0020795 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0020790:	b8 01 00 00 00       	mov    eax,0x1
c0020795:	83 c4 58             	add    esp,0x58
c0020798:	5f                   	pop    edi
c0020799:	c3                   	ret    

c002079a <FAT::format(LogicalDisk*, int, char const*, int)>:
c002079a:	83 ec 2c             	sub    esp,0x2c
c002079d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00207a5:	83 ec 08             	sub    esp,0x8
c00207a8:	68 58 ca 02 c0       	push   0xc002ca58
c00207ad:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00207b1:	e8 0a 01 fe ff       	call   c00008c0 <strcmp>
c00207b6:	83 c4 10             	add    esp,0x10
c00207b9:	85 c0                	test   eax,eax
c00207bb:	0f 94 c0             	sete   al
c00207be:	84 c0                	test   al,al
c00207c0:	74 0d                	je     c00207cf <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c00207c2:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00207ca:	e9 a6 00 00 00       	jmp    c0020875 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00207cf:	83 ec 08             	sub    esp,0x8
c00207d2:	68 4a ca 02 c0       	push   0xc002ca4a
c00207d7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00207db:	e8 e0 00 fe ff       	call   c00008c0 <strcmp>
c00207e0:	83 c4 10             	add    esp,0x10
c00207e3:	85 c0                	test   eax,eax
c00207e5:	0f 94 c0             	sete   al
c00207e8:	84 c0                	test   al,al
c00207ea:	74 0a                	je     c00207f6 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c00207ec:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00207f4:	eb 7f                	jmp    c0020875 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00207f6:	83 ec 08             	sub    esp,0x8
c00207f9:	68 50 ca 02 c0       	push   0xc002ca50
c00207fe:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020802:	e8 b9 00 fe ff       	call   c00008c0 <strcmp>
c0020807:	83 c4 10             	add    esp,0x10
c002080a:	85 c0                	test   eax,eax
c002080c:	0f 94 c0             	sete   al
c002080f:	84 c0                	test   al,al
c0020811:	74 0a                	je     c002081d <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0020813:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002081b:	eb 58                	jmp    c0020875 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002081d:	83 ec 08             	sub    esp,0x8
c0020820:	68 ec 94 02 c0       	push   0xc00294ec
c0020825:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020829:	e8 92 00 fe ff       	call   c00008c0 <strcmp>
c002082e:	83 c4 10             	add    esp,0x10
c0020831:	85 c0                	test   eax,eax
c0020833:	0f 94 c0             	sete   al
c0020836:	84 c0                	test   al,al
c0020838:	74 0a                	je     c0020844 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c002083a:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0020842:	eb 31                	jmp    c0020875 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020844:	83 ec 08             	sub    esp,0x8
c0020847:	68 56 ca 02 c0       	push   0xc002ca56
c002084c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020850:	e8 6b 00 fe ff       	call   c00008c0 <strcmp>
c0020855:	83 c4 10             	add    esp,0x10
c0020858:	85 c0                	test   eax,eax
c002085a:	0f 94 c0             	sete   al
c002085d:	84 c0                	test   al,al
c002085f:	74 0a                	je     c002086b <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0020861:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0020869:	eb 0a                	jmp    c0020875 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002086b:	b8 08 00 00 00       	mov    eax,0x8
c0020870:	e9 04 01 00 00       	jmp    c0020979 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020875:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c002087c:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0020881:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020885:	8b 04 85 a0 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce360]
c002088c:	83 f8 ff             	cmp    eax,0xffffffff
c002088f:	75 34                	jne    c00208c5 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0020891:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020895:	88 c2                	mov    dl,al
c0020897:	a1 80 1c 03 c0       	mov    eax,ds:0xc0031c80
c002089c:	01 d0                	add    eax,edx
c002089e:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00208a2:	8b 15 80 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031c80
c00208a8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00208ac:	89 14 85 a0 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce360],edx
c00208b3:	a1 80 1c 03 c0       	mov    eax,ds:0xc0031c80
c00208b8:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00208bc:	89 14 85 20 1d 03 c0 	mov    DWORD PTR [eax*4-0x3ffce2e0],edx
c00208c3:	eb 17                	jmp    c00208dc <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c00208c5:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00208c9:	88 c2                	mov    dl,al
c00208cb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00208cf:	8b 04 85 a0 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce360]
c00208d6:	01 d0                	add    eax,edx
c00208d8:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00208dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00208e0:	88 04 24             	mov    BYTE PTR [esp],al
c00208e3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00208e7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00208eb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00208f3:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00208f8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020900:	83 ec 0c             	sub    esp,0xc
c0020903:	68 00 20 00 00       	push   0x2000
c0020908:	e8 33 ef fe ff       	call   c000f840 <malloc>
c002090d:	83 c4 10             	add    esp,0x10
c0020910:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020914:	68 00 20 00 00       	push   0x2000
c0020919:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002091d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020921:	50                   	push   eax
c0020922:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0020926:	50                   	push   eax
c0020927:	e8 45 6a fe ff       	call   c0007371 <f_mkfs>
c002092c:	83 c4 10             	add    esp,0x10
c002092f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020933:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020938:	75 07                	jne    c0020941 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c002093a:	b8 00 00 00 00       	mov    eax,0x0
c002093f:	eb 38                	jmp    c0020979 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020941:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0020946:	75 17                	jne    c002095f <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c0020948:	83 ec 0c             	sub    esp,0xc
c002094b:	68 88 ca 02 c0       	push   0xc002ca88
c0020950:	e8 1c 26 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0020955:	83 c4 10             	add    esp,0x10
c0020958:	b8 09 00 00 00       	mov    eax,0x9
c002095d:	eb 1a                	jmp    c0020979 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c002095f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020963:	83 ec 08             	sub    esp,0x8
c0020966:	50                   	push   eax
c0020967:	68 5c ca 02 c0       	push   0xc002ca5c
c002096c:	e8 00 26 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0020971:	83 c4 10             	add    esp,0x10
c0020974:	b8 01 00 00 00       	mov    eax,0x1
c0020979:	83 c4 2c             	add    esp,0x2c
c002097c:	c3                   	ret    
c002097d:	90                   	nop

c002097e <FAT::tryMount(LogicalDisk*, int)>:
c002097e:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0020984:	a1 80 1c 03 c0       	mov    eax,ds:0xc0031c80
c0020989:	83 f8 14             	cmp    eax,0x14
c002098c:	75 17                	jne    c00209a5 <FAT::tryMount(LogicalDisk*, int)+0x27>
c002098e:	83 ec 0c             	sub    esp,0xc
c0020991:	68 6e ca 02 c0       	push   0xc002ca6e
c0020996:	e8 88 9c ff ff       	call   c001a623 <Krnl::panic(char const*)>
c002099b:	83 c4 10             	add    esp,0x10
c002099e:	b0 00                	mov    al,0x0
c00209a0:	e9 d7 01 00 00       	jmp    c0020b7c <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00209a5:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00209ac:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00209b2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00209b8:	3d 00 02 00 00       	cmp    eax,0x200
c00209bd:	74 07                	je     c00209c6 <FAT::tryMount(LogicalDisk*, int)+0x48>
c00209bf:	b0 00                	mov    al,0x0
c00209c1:	e9 b6 01 00 00       	jmp    c0020b7c <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00209c6:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c00209ce:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00209d5:	8b 04 85 a0 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce360]
c00209dc:	83 f8 ff             	cmp    eax,0xffffffff
c00209df:	74 07                	je     c00209e8 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c00209e1:	b0 01                	mov    al,0x1
c00209e3:	e9 94 01 00 00       	jmp    c0020b7c <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00209e8:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c00209f2:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c00209fa:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0020a01:	88 c2                	mov    dl,al
c0020a03:	a1 80 1c 03 c0       	mov    eax,ds:0xc0031c80
c0020a08:	01 d0                	add    eax,edx
c0020a0a:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0020a11:	8b 15 80 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031c80
c0020a17:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020a1e:	89 14 85 a0 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce360],edx
c0020a25:	a1 80 1c 03 c0       	mov    eax,ds:0xc0031c80
c0020a2a:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0020a31:	89 14 85 20 1d 03 c0 	mov    DWORD PTR [eax*4-0x3ffce2e0],edx
c0020a38:	83 ec 0c             	sub    esp,0xc
c0020a3b:	68 54 02 00 00       	push   0x254
c0020a40:	e8 fb ed fe ff       	call   c000f840 <malloc>
c0020a45:	83 c4 10             	add    esp,0x10
c0020a48:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0020a4f:	83 ec 04             	sub    esp,0x4
c0020a52:	6a 00                	push   0x0
c0020a54:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020a5b:	50                   	push   eax
c0020a5c:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020a63:	e8 c7 44 fe ff       	call   c0004f2f <f_mount>
c0020a68:	83 c4 10             	add    esp,0x10
c0020a6b:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020a72:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020a7a:	74 19                	je     c0020a95 <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020a7c:	83 ec 0c             	sub    esp,0xc
c0020a7f:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020a86:	e8 d5 ed fe ff       	call   c000f860 <rfree>
c0020a8b:	83 c4 10             	add    esp,0x10
c0020a8e:	b0 00                	mov    al,0x0
c0020a90:	e9 e7 00 00 00       	jmp    c0020b7c <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020a95:	83 ec 04             	sub    esp,0x4
c0020a98:	68 00 01 00 00       	push   0x100
c0020a9d:	6a 00                	push   0x0
c0020a9f:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020aa6:	50                   	push   eax
c0020aa7:	e8 cc fc fd ff       	call   c0000778 <memset>
c0020aac:	83 c4 10             	add    esp,0x10
c0020aaf:	83 ec 08             	sub    esp,0x8
c0020ab2:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020ab9:	50                   	push   eax
c0020aba:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020ac1:	50                   	push   eax
c0020ac2:	e8 ad fe fd ff       	call   c0000974 <strcat>
c0020ac7:	83 c4 10             	add    esp,0x10
c0020aca:	83 ec 08             	sub    esp,0x8
c0020acd:	68 7c ca 02 c0       	push   0xc002ca7c
c0020ad2:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020ad9:	50                   	push   eax
c0020ada:	e8 95 fe fd ff       	call   c0000974 <strcat>
c0020adf:	83 c4 10             	add    esp,0x10
c0020ae2:	83 ec 04             	sub    esp,0x4
c0020ae5:	6a 01                	push   0x1
c0020ae7:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020aee:	50                   	push   eax
c0020aef:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020af3:	50                   	push   eax
c0020af4:	e8 98 44 fe ff       	call   c0004f91 <f_open>
c0020af9:	83 c4 10             	add    esp,0x10
c0020afc:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020b03:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020b0a:	85 c0                	test   eax,eax
c0020b0c:	74 0a                	je     c0020b18 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020b0e:	78 2d                	js     c0020b3d <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020b10:	83 e8 04             	sub    eax,0x4
c0020b13:	83 f8 01             	cmp    eax,0x1
c0020b16:	77 25                	ja     c0020b3d <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020b18:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020b20:	83 ec 0c             	sub    esp,0xc
c0020b23:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020b27:	50                   	push   eax
c0020b28:	e8 b6 4f fe ff       	call   c0005ae3 <f_close>
c0020b2d:	83 c4 10             	add    esp,0x10
c0020b30:	90                   	nop
c0020b31:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020b39:	74 3a                	je     c0020b75 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020b3b:	eb 2d                	jmp    c0020b6a <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020b3d:	83 ec 0c             	sub    esp,0xc
c0020b40:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020b47:	e8 14 ed fe ff       	call   c000f860 <rfree>
c0020b4c:	83 c4 10             	add    esp,0x10
c0020b4f:	83 ec 04             	sub    esp,0x4
c0020b52:	6a 00                	push   0x0
c0020b54:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020b5b:	50                   	push   eax
c0020b5c:	6a 00                	push   0x0
c0020b5e:	e8 cc 43 fe ff       	call   c0004f2f <f_mount>
c0020b63:	83 c4 10             	add    esp,0x10
c0020b66:	b0 00                	mov    al,0x0
c0020b68:	eb 12                	jmp    c0020b7c <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020b6a:	a1 80 1c 03 c0       	mov    eax,ds:0xc0031c80
c0020b6f:	40                   	inc    eax
c0020b70:	a3 80 1c 03 c0       	mov    ds:0xc0031c80,eax
c0020b75:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020b7c:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020b82:	c3                   	ret    
c0020b83:	90                   	nop

c0020b84 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020b84:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0020b8a:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0020b92:	74 0a                	je     c0020b9e <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c0020b94:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c0020b9c:	75 0a                	jne    c0020ba8 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c0020b9e:	b8 04 00 00 00       	mov    eax,0x4
c0020ba3:	e9 db 00 00 00       	jmp    c0020c83 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020ba8:	83 ec 08             	sub    esp,0x8
c0020bab:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020bb2:	50                   	push   eax
c0020bb3:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c0020bba:	e8 2e 55 fe ff       	call   c00060ed <f_readdir>
c0020bbf:	83 c4 10             	add    esp,0x10
c0020bc2:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0020bc9:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0020bcf:	83 ec 0c             	sub    esp,0xc
c0020bd2:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020bd9:	83 c0 1a             	add    eax,0x1a
c0020bdc:	50                   	push   eax
c0020bdd:	e8 b2 fb fd ff       	call   c0000794 <strlen>
c0020be2:	83 c4 10             	add    esp,0x10
c0020be5:	ba 00 00 00 00       	mov    edx,0x0
c0020bea:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020bee:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020bf2:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c0020bf9:	0f b6 c0             	movzx  eax,al
c0020bfc:	83 e0 10             	and    eax,0x10
c0020bff:	74 07                	je     c0020c08 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c0020c01:	b8 02 00 00 00       	mov    eax,0x2
c0020c06:	eb 05                	jmp    c0020c0d <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c0020c08:	b8 01 00 00 00       	mov    eax,0x1
c0020c0d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c11:	83 ec 08             	sub    esp,0x8
c0020c14:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020c1b:	83 c0 1a             	add    eax,0x1a
c0020c1e:	50                   	push   eax
c0020c1f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020c23:	83 c0 10             	add    eax,0x10
c0020c26:	50                   	push   eax
c0020c27:	e8 08 fc fd ff       	call   c0000834 <strcpy>
c0020c2c:	83 c4 10             	add    esp,0x10
c0020c2f:	83 ec 04             	sub    esp,0x4
c0020c32:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c0020c39:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020c3d:	50                   	push   eax
c0020c3e:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0020c45:	e8 fa fa fd ff       	call   c0000744 <memcpy>
c0020c4a:	83 c4 10             	add    esp,0x10
c0020c4d:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c0020c54:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020c5a:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c0020c61:	84 c0                	test   al,al
c0020c63:	75 07                	jne    c0020c6c <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c0020c65:	b8 07 00 00 00       	mov    eax,0x7
c0020c6a:	eb 17                	jmp    c0020c83 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020c6c:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0020c73:	85 c0                	test   eax,eax
c0020c75:	75 07                	jne    c0020c7e <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c0020c77:	b8 00 00 00 00       	mov    eax,0x0
c0020c7c:	eb 05                	jmp    c0020c83 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020c7e:	b8 01 00 00 00       	mov    eax,0x1
c0020c83:	81 c4 3c 02 00 00    	add    esp,0x23c
c0020c89:	c3                   	ret    

c0020c8a <FAT::read(void*, unsigned long, void*, int*)>:
c0020c8a:	83 ec 1c             	sub    esp,0x1c
c0020c8d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020c92:	74 07                	je     c0020c9b <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020c94:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020c99:	75 07                	jne    c0020ca2 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020c9b:	b8 04 00 00 00       	mov    eax,0x4
c0020ca0:	eb 3d                	jmp    c0020cdf <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020ca2:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020ca6:	50                   	push   eax
c0020ca7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020cab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020caf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020cb3:	e8 15 47 fe ff       	call   c00053cd <f_read>
c0020cb8:	83 c4 10             	add    esp,0x10
c0020cbb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020cbf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020cc3:	89 c2                	mov    edx,eax
c0020cc5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020cc9:	89 10                	mov    DWORD PTR [eax],edx
c0020ccb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020ccf:	85 c0                	test   eax,eax
c0020cd1:	75 07                	jne    c0020cda <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020cd3:	b8 00 00 00 00       	mov    eax,0x0
c0020cd8:	eb 05                	jmp    c0020cdf <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020cda:	b8 01 00 00 00       	mov    eax,0x1
c0020cdf:	83 c4 1c             	add    esp,0x1c
c0020ce2:	c3                   	ret    
c0020ce3:	90                   	nop

c0020ce4 <FAT::write(void*, unsigned long, void*, int*)>:
c0020ce4:	83 ec 1c             	sub    esp,0x1c
c0020ce7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020cec:	74 07                	je     c0020cf5 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020cee:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020cf3:	75 07                	jne    c0020cfc <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020cf5:	b8 04 00 00 00       	mov    eax,0x4
c0020cfa:	eb 3d                	jmp    c0020d39 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020cfc:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020d00:	50                   	push   eax
c0020d01:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020d05:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020d09:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d0d:	e8 3b 49 fe ff       	call   c000564d <f_write>
c0020d12:	83 c4 10             	add    esp,0x10
c0020d15:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d19:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020d1d:	89 c2                	mov    edx,eax
c0020d1f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020d23:	89 10                	mov    DWORD PTR [eax],edx
c0020d25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d29:	85 c0                	test   eax,eax
c0020d2b:	75 07                	jne    c0020d34 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020d2d:	b8 00 00 00 00       	mov    eax,0x0
c0020d32:	eb 05                	jmp    c0020d39 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020d34:	b8 01 00 00 00       	mov    eax,0x1
c0020d39:	83 c4 1c             	add    esp,0x1c
c0020d3c:	c3                   	ret    
c0020d3d:	90                   	nop

c0020d3e <FAT::close(void*)>:
c0020d3e:	83 ec 1c             	sub    esp,0x1c
c0020d41:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020d46:	75 07                	jne    c0020d4f <FAT::close(void*)+0x11>
c0020d48:	b8 04 00 00 00       	mov    eax,0x4
c0020d4d:	eb 36                	jmp    c0020d85 <FAT::close(void*)+0x47>
c0020d4f:	83 ec 0c             	sub    esp,0xc
c0020d52:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d56:	e8 88 4d fe ff       	call   c0005ae3 <f_close>
c0020d5b:	83 c4 10             	add    esp,0x10
c0020d5e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d62:	83 ec 0c             	sub    esp,0xc
c0020d65:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d69:	e8 e2 ea fe ff       	call   c000f850 <free>
c0020d6e:	83 c4 10             	add    esp,0x10
c0020d71:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d75:	85 c0                	test   eax,eax
c0020d77:	75 07                	jne    c0020d80 <FAT::close(void*)+0x42>
c0020d79:	b8 00 00 00 00       	mov    eax,0x0
c0020d7e:	eb 05                	jmp    c0020d85 <FAT::close(void*)+0x47>
c0020d80:	b8 01 00 00 00       	mov    eax,0x1
c0020d85:	83 c4 1c             	add    esp,0x1c
c0020d88:	c3                   	ret    
c0020d89:	90                   	nop

c0020d8a <FAT::closeDir(void*)>:
c0020d8a:	83 ec 1c             	sub    esp,0x1c
c0020d8d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020d92:	75 07                	jne    c0020d9b <FAT::closeDir(void*)+0x11>
c0020d94:	b8 04 00 00 00       	mov    eax,0x4
c0020d99:	eb 36                	jmp    c0020dd1 <FAT::closeDir(void*)+0x47>
c0020d9b:	83 ec 0c             	sub    esp,0xc
c0020d9e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020da2:	e8 24 53 fe ff       	call   c00060cb <f_closedir>
c0020da7:	83 c4 10             	add    esp,0x10
c0020daa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020dae:	83 ec 0c             	sub    esp,0xc
c0020db1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020db5:	e8 96 ea fe ff       	call   c000f850 <free>
c0020dba:	83 c4 10             	add    esp,0x10
c0020dbd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020dc1:	85 c0                	test   eax,eax
c0020dc3:	75 07                	jne    c0020dcc <FAT::closeDir(void*)+0x42>
c0020dc5:	b8 00 00 00 00       	mov    eax,0x0
c0020dca:	eb 05                	jmp    c0020dd1 <FAT::closeDir(void*)+0x47>
c0020dcc:	b8 01 00 00 00       	mov    eax,0x1
c0020dd1:	83 c4 1c             	add    esp,0x1c
c0020dd4:	c3                   	ret    
c0020dd5:	90                   	nop

c0020dd6 <FAT::seek(void*, unsigned long long)>:
c0020dd6:	83 ec 2c             	sub    esp,0x2c
c0020dd9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020ddd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020de1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020de5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020de9:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020dee:	75 07                	jne    c0020df7 <FAT::seek(void*, unsigned long long)+0x21>
c0020df0:	b8 04 00 00 00       	mov    eax,0x4
c0020df5:	eb 2f                	jmp    c0020e26 <FAT::seek(void*, unsigned long long)+0x50>
c0020df7:	83 ec 04             	sub    esp,0x4
c0020dfa:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020dfe:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020e02:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020e06:	e8 07 4d fe ff       	call   c0005b12 <f_lseek>
c0020e0b:	83 c4 10             	add    esp,0x10
c0020e0e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020e12:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020e16:	85 c0                	test   eax,eax
c0020e18:	75 07                	jne    c0020e21 <FAT::seek(void*, unsigned long long)+0x4b>
c0020e1a:	b8 00 00 00 00       	mov    eax,0x0
c0020e1f:	eb 05                	jmp    c0020e26 <FAT::seek(void*, unsigned long long)+0x50>
c0020e21:	b8 01 00 00 00       	mov    eax,0x1
c0020e26:	83 c4 2c             	add    esp,0x2c
c0020e29:	c3                   	ret    

c0020e2a <fatWrapperReadDisk>:
c0020e2a:	83 ec 1c             	sub    esp,0x1c
c0020e2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020e31:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020e35:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020e39:	89 04 24             	mov    DWORD PTR [esp],eax
c0020e3c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020e40:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020e44:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e49:	8b 04 85 60 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd13a0]
c0020e50:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020e54:	83 ec 0c             	sub    esp,0xc
c0020e57:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020e5b:	52                   	push   edx
c0020e5c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e60:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e64:	50                   	push   eax
c0020e65:	e8 28 59 ff ff       	call   c0016792 <LogicalDisk::read(unsigned long long, int, void*)>
c0020e6a:	83 c4 20             	add    esp,0x20
c0020e6d:	83 c4 1c             	add    esp,0x1c
c0020e70:	c3                   	ret    

c0020e71 <fatWrapperWriteDisk>:
c0020e71:	83 ec 1c             	sub    esp,0x1c
c0020e74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020e78:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020e7c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020e80:	89 04 24             	mov    DWORD PTR [esp],eax
c0020e83:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020e87:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020e8b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e90:	8b 04 85 60 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd13a0]
c0020e97:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020e9b:	83 ec 0c             	sub    esp,0xc
c0020e9e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020ea2:	52                   	push   edx
c0020ea3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020ea7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020eab:	50                   	push   eax
c0020eac:	e8 4d 59 ff ff       	call   c00167fe <LogicalDisk::write(unsigned long long, int, void*)>
c0020eb1:	83 c4 20             	add    esp,0x20
c0020eb4:	83 c4 1c             	add    esp,0x1c
c0020eb7:	c3                   	ret    

c0020eb8 <fatWrapperIoctl>:
c0020eb8:	53                   	push   ebx
c0020eb9:	83 ec 28             	sub    esp,0x28
c0020ebc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020ec0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020ec4:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020ec8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020ecc:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020ed1:	75 31                	jne    c0020f04 <fatWrapperIoctl+0x4c>
c0020ed3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020ed7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020edb:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020ee0:	8b 04 85 60 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd13a0]
c0020ee7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020eed:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020ef3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020ef7:	66 89 02             	mov    WORD PTR [edx],ax
c0020efa:	b8 00 00 00 00       	mov    eax,0x0
c0020eff:	e9 b2 00 00 00       	jmp    c0020fb6 <fatWrapperIoctl+0xfe>
c0020f04:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020f09:	75 6a                	jne    c0020f75 <fatWrapperIoctl+0xbd>
c0020f0b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020f0f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020f13:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020f18:	8b 04 85 60 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd13a0]
c0020f1f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020f25:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020f2b:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020f31:	89 c8                	mov    eax,ecx
c0020f33:	89 da                	mov    edx,ebx
c0020f35:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020f39:	c1 e0 0a             	shl    eax,0xa
c0020f3c:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020f41:	8b 0c 8d 60 ec 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd13a0]
c0020f48:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020f4e:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020f54:	89 cb                	mov    ebx,ecx
c0020f56:	c1 fb 1f             	sar    ebx,0x1f
c0020f59:	53                   	push   ebx
c0020f5a:	51                   	push   ecx
c0020f5b:	52                   	push   edx
c0020f5c:	50                   	push   eax
c0020f5d:	e8 ca 5a 00 00       	call   c0026a2c <__udivdi3>
c0020f62:	83 c4 10             	add    esp,0x10
c0020f65:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020f69:	89 01                	mov    DWORD PTR [ecx],eax
c0020f6b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020f6e:	b8 00 00 00 00       	mov    eax,0x0
c0020f73:	eb 41                	jmp    c0020fb6 <fatWrapperIoctl+0xfe>
c0020f75:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020f7a:	75 07                	jne    c0020f83 <fatWrapperIoctl+0xcb>
c0020f7c:	b8 00 00 00 00       	mov    eax,0x0
c0020f81:	eb 33                	jmp    c0020fb6 <fatWrapperIoctl+0xfe>
c0020f83:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020f88:	75 19                	jne    c0020fa3 <fatWrapperIoctl+0xeb>
c0020f8a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020f8e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020f92:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020f96:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020f9c:	b8 00 00 00 00       	mov    eax,0x0
c0020fa1:	eb 13                	jmp    c0020fb6 <fatWrapperIoctl+0xfe>
c0020fa3:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020fa8:	75 07                	jne    c0020fb1 <fatWrapperIoctl+0xf9>
c0020faa:	b8 00 00 00 00       	mov    eax,0x0
c0020faf:	eb 05                	jmp    c0020fb6 <fatWrapperIoctl+0xfe>
c0020fb1:	b8 04 00 00 00       	mov    eax,0x4
c0020fb6:	83 c4 28             	add    esp,0x28
c0020fb9:	5b                   	pop    ebx
c0020fba:	c3                   	ret    
c0020fbb:	90                   	nop

c0020fbc <FAT::FAT()>:
c0020fbc:	83 ec 1c             	sub    esp,0x1c
c0020fbf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020fc3:	83 ec 0c             	sub    esp,0xc
c0020fc6:	50                   	push   eax
c0020fc7:	e8 aa 22 ff ff       	call   c0013276 <Filesystem::Filesystem()>
c0020fcc:	83 c4 10             	add    esp,0x10
c0020fcf:	ba b8 ca 02 c0       	mov    edx,0xc002cab8
c0020fd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020fd8:	89 10                	mov    DWORD PTR [eax],edx
c0020fda:	c7 05 80 1c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031c80,0x0
c0020fe4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020fec:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020ff1:	7f 15                	jg     c0021008 <FAT::FAT()+0x4c>
c0020ff3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020ff7:	c7 04 85 a0 1c 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffce360],0xffffffff
c0021002:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021006:	eb e4                	jmp    c0020fec <FAT::FAT()+0x30>
c0021008:	90                   	nop
c0021009:	83 c4 1c             	add    esp,0x1c
c002100c:	c3                   	ret    
c002100d:	90                   	nop

c002100e <FAT::fixFilepath(char*)>:
c002100e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021012:	8a 00                	mov    al,BYTE PTR [eax]
c0021014:	3c 40                	cmp    al,0x40
c0021016:	7e 2c                	jle    c0021044 <FAT::fixFilepath(char*)+0x36>
c0021018:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002101c:	8a 00                	mov    al,BYTE PTR [eax]
c002101e:	83 e8 41             	sub    eax,0x41
c0021021:	88 c2                	mov    dl,al
c0021023:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021027:	88 10                	mov    BYTE PTR [eax],dl
c0021029:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002102d:	8a 00                	mov    al,BYTE PTR [eax]
c002102f:	0f be c0             	movsx  eax,al
c0021032:	8b 04 85 a0 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce360]
c0021039:	83 c0 30             	add    eax,0x30
c002103c:	88 c2                	mov    dl,al
c002103e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021042:	88 10                	mov    BYTE PTR [eax],dl
c0021044:	90                   	nop
c0021045:	c3                   	ret    

c0021046 <FAT::open(char const*, void**, FileOpenMode)>:
c0021046:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002104c:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021054:	74 0a                	je     c0021060 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0021056:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c002105e:	75 0a                	jne    c002106a <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0021060:	b8 04 00 00 00       	mov    eax,0x4
c0021065:	e9 fd 00 00 00       	jmp    c0021167 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c002106a:	83 ec 08             	sub    esp,0x8
c002106d:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021074:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021078:	50                   	push   eax
c0021079:	e8 b6 f7 fd ff       	call   c0000834 <strcpy>
c002107e:	83 c4 10             	add    esp,0x10
c0021081:	83 ec 08             	sub    esp,0x8
c0021084:	8d 44 24 10          	lea    eax,[esp+0x10]
c0021088:	50                   	push   eax
c0021089:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021090:	e8 79 ff ff ff       	call   c002100e <FAT::fixFilepath(char*)>
c0021095:	83 c4 10             	add    esp,0x10
c0021098:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c00210a0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00210a7:	83 e0 01             	and    eax,0x1
c00210aa:	74 08                	je     c00210b4 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c00210ac:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c00210b4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00210bb:	83 e0 04             	and    eax,0x4
c00210be:	74 10                	je     c00210d0 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c00210c0:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c00210c8:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00210d0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00210d7:	83 e0 02             	and    eax,0x2
c00210da:	74 08                	je     c00210e4 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c00210dc:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00210e4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00210eb:	83 e0 08             	and    eax,0x8
c00210ee:	74 08                	je     c00210f8 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c00210f0:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c00210f8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00210ff:	83 e0 10             	and    eax,0x10
c0021102:	74 08                	je     c002110c <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0021104:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c002110c:	83 ec 0c             	sub    esp,0xc
c002110f:	68 50 02 00 00       	push   0x250
c0021114:	e8 27 e7 fe ff       	call   c000f840 <malloc>
c0021119:	83 c4 10             	add    esp,0x10
c002111c:	89 c2                	mov    edx,eax
c002111e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021125:	89 10                	mov    DWORD PTR [eax],edx
c0021127:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c002112f:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021136:	8b 00                	mov    eax,DWORD PTR [eax]
c0021138:	83 ec 04             	sub    esp,0x4
c002113b:	52                   	push   edx
c002113c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0021140:	52                   	push   edx
c0021141:	50                   	push   eax
c0021142:	e8 4a 3e fe ff       	call   c0004f91 <f_open>
c0021147:	83 c4 10             	add    esp,0x10
c002114a:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0021151:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0021159:	74 07                	je     c0021162 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c002115b:	b8 01 00 00 00       	mov    eax,0x1
c0021160:	eb 05                	jmp    c0021167 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0021162:	b8 00 00 00 00       	mov    eax,0x0
c0021167:	81 c4 1c 01 00 00    	add    esp,0x11c
c002116d:	c3                   	ret    

c002116e <FAT::openDir(char const*, void**)>:
c002116e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021174:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002117c:	74 0a                	je     c0021188 <FAT::openDir(char const*, void**)+0x1a>
c002117e:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0021186:	75 07                	jne    c002118f <FAT::openDir(char const*, void**)+0x21>
c0021188:	b8 04 00 00 00       	mov    eax,0x4
c002118d:	eb 7d                	jmp    c002120c <FAT::openDir(char const*, void**)+0x9e>
c002118f:	83 ec 08             	sub    esp,0x8
c0021192:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021199:	8d 44 24 18          	lea    eax,[esp+0x18]
c002119d:	50                   	push   eax
c002119e:	e8 91 f6 fd ff       	call   c0000834 <strcpy>
c00211a3:	83 c4 10             	add    esp,0x10
c00211a6:	83 ec 08             	sub    esp,0x8
c00211a9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00211ad:	50                   	push   eax
c00211ae:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00211b5:	e8 54 fe ff ff       	call   c002100e <FAT::fixFilepath(char*)>
c00211ba:	83 c4 10             	add    esp,0x10
c00211bd:	83 ec 0c             	sub    esp,0xc
c00211c0:	6a 4c                	push   0x4c
c00211c2:	e8 79 e6 fe ff       	call   c000f840 <malloc>
c00211c7:	83 c4 10             	add    esp,0x10
c00211ca:	89 c2                	mov    edx,eax
c00211cc:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00211d3:	89 10                	mov    DWORD PTR [eax],edx
c00211d5:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00211dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00211de:	83 ec 08             	sub    esp,0x8
c00211e1:	8d 54 24 14          	lea    edx,[esp+0x14]
c00211e5:	52                   	push   edx
c00211e6:	50                   	push   eax
c00211e7:	e8 dd 4d fe ff       	call   c0005fc9 <f_opendir>
c00211ec:	83 c4 10             	add    esp,0x10
c00211ef:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00211f6:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00211fe:	74 07                	je     c0021207 <FAT::openDir(char const*, void**)+0x99>
c0021200:	b8 01 00 00 00       	mov    eax,0x1
c0021205:	eb 05                	jmp    c002120c <FAT::openDir(char const*, void**)+0x9e>
c0021207:	b8 00 00 00 00       	mov    eax,0x0
c002120c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021212:	c3                   	ret    
c0021213:	90                   	nop

c0021214 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0021214:	81 ec 2c 02 00 00    	sub    esp,0x22c
c002121a:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0021222:	75 0a                	jne    c002122e <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0021224:	b8 04 00 00 00       	mov    eax,0x4
c0021229:	e9 c9 00 00 00       	jmp    c00212f7 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002122e:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0021236:	75 0a                	jne    c0021242 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0021238:	b8 04 00 00 00       	mov    eax,0x4
c002123d:	e9 b5 00 00 00       	jmp    c00212f7 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021242:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c002124a:	75 0a                	jne    c0021256 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c002124c:	b8 04 00 00 00       	mov    eax,0x4
c0021251:	e9 a1 00 00 00       	jmp    c00212f7 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021256:	83 ec 08             	sub    esp,0x8
c0021259:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021260:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021267:	50                   	push   eax
c0021268:	e8 c7 f5 fd ff       	call   c0000834 <strcpy>
c002126d:	83 c4 10             	add    esp,0x10
c0021270:	83 ec 08             	sub    esp,0x8
c0021273:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c002127a:	50                   	push   eax
c002127b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021282:	e8 87 fd ff ff       	call   c002100e <FAT::fixFilepath(char*)>
c0021287:	83 c4 10             	add    esp,0x10
c002128a:	83 ec 08             	sub    esp,0x8
c002128d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021291:	50                   	push   eax
c0021292:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021299:	50                   	push   eax
c002129a:	e8 e9 4e fe ff       	call   c0006188 <f_stat>
c002129f:	83 c4 10             	add    esp,0x10
c00212a2:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00212a9:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00212b0:	85 c0                	test   eax,eax
c00212b2:	74 07                	je     c00212bb <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c00212b4:	83 f8 04             	cmp    eax,0x4
c00212b7:	74 32                	je     c00212eb <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c00212b9:	eb 37                	jmp    c00212f2 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c00212bb:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00212bf:	0f b6 c0             	movzx  eax,al
c00212c2:	83 e0 10             	and    eax,0x10
c00212c5:	0f 95 c2             	setne  dl
c00212c8:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c00212cf:	88 10                	mov    BYTE PTR [eax],dl
c00212d1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00212d4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00212d8:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c00212df:	89 01                	mov    DWORD PTR [ecx],eax
c00212e1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00212e4:	b8 00 00 00 00       	mov    eax,0x0
c00212e9:	eb 0c                	jmp    c00212f7 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00212eb:	b8 02 00 00 00       	mov    eax,0x2
c00212f0:	eb 05                	jmp    c00212f7 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00212f2:	b8 01 00 00 00       	mov    eax,0x1
c00212f7:	81 c4 2c 02 00 00    	add    esp,0x22c
c00212fd:	c3                   	ret    

c00212fe <FAT::unlink(char const*)>:
c00212fe:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021304:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002130c:	75 07                	jne    c0021315 <FAT::unlink(char const*)+0x17>
c002130e:	b8 04 00 00 00       	mov    eax,0x4
c0021313:	eb 5c                	jmp    c0021371 <FAT::unlink(char const*)+0x73>
c0021315:	83 ec 08             	sub    esp,0x8
c0021318:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002131f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021323:	50                   	push   eax
c0021324:	e8 0b f5 fd ff       	call   c0000834 <strcpy>
c0021329:	83 c4 10             	add    esp,0x10
c002132c:	83 ec 08             	sub    esp,0x8
c002132f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021333:	50                   	push   eax
c0021334:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002133b:	e8 ce fc ff ff       	call   c002100e <FAT::fixFilepath(char*)>
c0021340:	83 c4 10             	add    esp,0x10
c0021343:	83 ec 0c             	sub    esp,0xc
c0021346:	8d 44 24 18          	lea    eax,[esp+0x18]
c002134a:	50                   	push   eax
c002134b:	e8 8a 51 fe ff       	call   c00064da <f_unlink>
c0021350:	83 c4 10             	add    esp,0x10
c0021353:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002135a:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021361:	85 c0                	test   eax,eax
c0021363:	75 07                	jne    c002136c <FAT::unlink(char const*)+0x6e>
c0021365:	b8 00 00 00 00       	mov    eax,0x0
c002136a:	eb 05                	jmp    c0021371 <FAT::unlink(char const*)+0x73>
c002136c:	b8 01 00 00 00       	mov    eax,0x1
c0021371:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021377:	c3                   	ret    

c0021378 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0021378:	81 ec 2c 01 00 00    	sub    esp,0x12c
c002137e:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0021385:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c002138c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0021390:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0021394:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c002139c:	75 0a                	jne    c00213a8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c002139e:	b8 04 00 00 00       	mov    eax,0x4
c00213a3:	e9 1c 01 00 00       	jmp    c00214c4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00213a8:	83 ec 08             	sub    esp,0x8
c00213ab:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00213b2:	8d 44 24 24          	lea    eax,[esp+0x24]
c00213b6:	50                   	push   eax
c00213b7:	e8 78 f4 fd ff       	call   c0000834 <strcpy>
c00213bc:	83 c4 10             	add    esp,0x10
c00213bf:	83 ec 08             	sub    esp,0x8
c00213c2:	8d 44 24 20          	lea    eax,[esp+0x20]
c00213c6:	50                   	push   eax
c00213c7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00213ce:	e8 3b fc ff ff       	call   c002100e <FAT::fixFilepath(char*)>
c00213d3:	83 c4 10             	add    esp,0x10
c00213d6:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00213de:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c00213e6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00213eb:	83 e0 01             	and    eax,0x1
c00213ee:	74 08                	je     c00213f8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c00213f0:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c00213f8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00213fd:	83 e0 02             	and    eax,0x2
c0021400:	74 08                	je     c002140a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0021402:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c002140a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002140f:	83 e0 04             	and    eax,0x4
c0021412:	74 08                	je     c002141c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0021414:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c002141c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021421:	83 e0 08             	and    eax,0x8
c0021424:	74 08                	je     c002142e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0021426:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c002142e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021433:	83 e0 01             	and    eax,0x1
c0021436:	74 08                	je     c0021440 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0021438:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0021440:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021445:	83 e0 02             	and    eax,0x2
c0021448:	74 08                	je     c0021452 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c002144a:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0021452:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021457:	83 e0 04             	and    eax,0x4
c002145a:	74 08                	je     c0021464 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c002145c:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0021464:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021469:	83 e0 08             	and    eax,0x8
c002146c:	74 08                	je     c0021476 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c002146e:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0021476:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c002147d:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0021484:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c002148c:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0021494:	83 ec 04             	sub    esp,0x4
c0021497:	52                   	push   edx
c0021498:	50                   	push   eax
c0021499:	8d 44 24 24          	lea    eax,[esp+0x24]
c002149d:	50                   	push   eax
c002149e:	e8 d9 56 fe ff       	call   c0006b7c <f_chmod>
c00214a3:	83 c4 10             	add    esp,0x10
c00214a6:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00214ad:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c00214b4:	85 c0                	test   eax,eax
c00214b6:	75 07                	jne    c00214bf <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c00214b8:	b8 00 00 00 00       	mov    eax,0x0
c00214bd:	eb 05                	jmp    c00214c4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00214bf:	b8 01 00 00 00       	mov    eax,0x1
c00214c4:	81 c4 2c 01 00 00    	add    esp,0x12c
c00214ca:	c3                   	ret    
c00214cb:	90                   	nop

c00214cc <FAT::rename(char const*, char const*)>:
c00214cc:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00214d2:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00214da:	74 0a                	je     c00214e6 <FAT::rename(char const*, char const*)+0x1a>
c00214dc:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00214e4:	75 0a                	jne    c00214f0 <FAT::rename(char const*, char const*)+0x24>
c00214e6:	b8 04 00 00 00       	mov    eax,0x4
c00214eb:	e9 98 00 00 00       	jmp    c0021588 <FAT::rename(char const*, char const*)+0xbc>
c00214f0:	83 ec 08             	sub    esp,0x8
c00214f3:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00214fa:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021501:	50                   	push   eax
c0021502:	e8 2d f3 fd ff       	call   c0000834 <strcpy>
c0021507:	83 c4 10             	add    esp,0x10
c002150a:	83 ec 08             	sub    esp,0x8
c002150d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0021514:	50                   	push   eax
c0021515:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002151c:	e8 ed fa ff ff       	call   c002100e <FAT::fixFilepath(char*)>
c0021521:	83 c4 10             	add    esp,0x10
c0021524:	83 ec 08             	sub    esp,0x8
c0021527:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c002152e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021532:	50                   	push   eax
c0021533:	e8 fc f2 fd ff       	call   c0000834 <strcpy>
c0021538:	83 c4 10             	add    esp,0x10
c002153b:	83 ec 08             	sub    esp,0x8
c002153e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021542:	50                   	push   eax
c0021543:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002154a:	e8 bf fa ff ff       	call   c002100e <FAT::fixFilepath(char*)>
c002154f:	83 c4 10             	add    esp,0x10
c0021552:	83 ec 08             	sub    esp,0x8
c0021555:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021559:	50                   	push   eax
c002155a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021561:	50                   	push   eax
c0021562:	e8 22 53 fe ff       	call   c0006889 <f_rename>
c0021567:	83 c4 10             	add    esp,0x10
c002156a:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0021571:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0021578:	85 c0                	test   eax,eax
c002157a:	75 07                	jne    c0021583 <FAT::rename(char const*, char const*)+0xb7>
c002157c:	b8 00 00 00 00       	mov    eax,0x0
c0021581:	eb 05                	jmp    c0021588 <FAT::rename(char const*, char const*)+0xbc>
c0021583:	b8 01 00 00 00       	mov    eax,0x1
c0021588:	81 c4 1c 02 00 00    	add    esp,0x21c
c002158e:	c3                   	ret    
c002158f:	90                   	nop

c0021590 <FAT::mkdir(char const*)>:
c0021590:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021596:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002159e:	75 07                	jne    c00215a7 <FAT::mkdir(char const*)+0x17>
c00215a0:	b8 04 00 00 00       	mov    eax,0x4
c00215a5:	eb 5c                	jmp    c0021603 <FAT::mkdir(char const*)+0x73>
c00215a7:	83 ec 08             	sub    esp,0x8
c00215aa:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00215b1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00215b5:	50                   	push   eax
c00215b6:	e8 79 f2 fd ff       	call   c0000834 <strcpy>
c00215bb:	83 c4 10             	add    esp,0x10
c00215be:	83 ec 08             	sub    esp,0x8
c00215c1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00215c5:	50                   	push   eax
c00215c6:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00215cd:	e8 3c fa ff ff       	call   c002100e <FAT::fixFilepath(char*)>
c00215d2:	83 c4 10             	add    esp,0x10
c00215d5:	83 ec 0c             	sub    esp,0xc
c00215d8:	8d 44 24 18          	lea    eax,[esp+0x18]
c00215dc:	50                   	push   eax
c00215dd:	e8 7b 50 fe ff       	call   c000665d <f_mkdir>
c00215e2:	83 c4 10             	add    esp,0x10
c00215e5:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00215ec:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00215f3:	85 c0                	test   eax,eax
c00215f5:	75 07                	jne    c00215fe <FAT::mkdir(char const*)+0x6e>
c00215f7:	b8 00 00 00 00       	mov    eax,0x0
c00215fc:	eb 05                	jmp    c0021603 <FAT::mkdir(char const*)+0x73>
c00215fe:	b8 01 00 00 00       	mov    eax,0x1
c0021603:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021609:	c3                   	ret    

c002160a <FAT::exists(char const*)>:
c002160a:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021610:	83 ec 08             	sub    esp,0x8
c0021613:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002161a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002161e:	50                   	push   eax
c002161f:	e8 10 f2 fd ff       	call   c0000834 <strcpy>
c0021624:	83 c4 10             	add    esp,0x10
c0021627:	83 ec 08             	sub    esp,0x8
c002162a:	8d 44 24 08          	lea    eax,[esp+0x8]
c002162e:	50                   	push   eax
c002162f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021636:	e8 d3 f9 ff ff       	call   c002100e <FAT::fixFilepath(char*)>
c002163b:	83 c4 10             	add    esp,0x10
c002163e:	83 ec 08             	sub    esp,0x8
c0021641:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0021648:	50                   	push   eax
c0021649:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002164d:	50                   	push   eax
c002164e:	e8 35 4b fe ff       	call   c0006188 <f_stat>
c0021653:	83 c4 10             	add    esp,0x10
c0021656:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c002165d:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021664:	85 c0                	test   eax,eax
c0021666:	75 04                	jne    c002166c <FAT::exists(char const*)+0x62>
c0021668:	b0 01                	mov    al,0x1
c002166a:	eb 02                	jmp    c002166e <FAT::exists(char const*)+0x64>
c002166c:	b0 00                	mov    al,0x0
c002166e:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021674:	c3                   	ret    
c0021675:	90                   	nop

c0021676 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0021676:	b8 08 00 00 00       	mov    eax,0x8
c002167b:	c3                   	ret    

c002167c <ISO9660::seek(void*, unsigned long long)>:
c002167c:	53                   	push   ebx
c002167d:	b8 04 00 00 00       	mov    eax,0x4
c0021682:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021686:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002168a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002168e:	85 d2                	test   edx,edx
c0021690:	74 17                	je     c00216a9 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021692:	89 c8                	mov    eax,ecx
c0021694:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0021697:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c002169a:	b8 01 00 00 00       	mov    eax,0x1
c002169f:	73 08                	jae    c00216a9 <ISO9660::seek(void*, unsigned long long)+0x2d>
c00216a1:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c00216a4:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c00216a7:	31 c0                	xor    eax,eax
c00216a9:	5b                   	pop    ebx
c00216aa:	c3                   	ret    
c00216ab:	90                   	nop

c00216ac <ISO9660::tell(void*, unsigned long long*)>:
c00216ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00216b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00216b4:	85 d2                	test   edx,edx
c00216b6:	74 12                	je     c00216ca <ISO9660::tell(void*, unsigned long long*)+0x1e>
c00216b8:	85 c0                	test   eax,eax
c00216ba:	74 0e                	je     c00216ca <ISO9660::tell(void*, unsigned long long*)+0x1e>
c00216bc:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00216bf:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c00216c2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00216c5:	89 10                	mov    DWORD PTR [eax],edx
c00216c7:	31 c0                	xor    eax,eax
c00216c9:	c3                   	ret    
c00216ca:	b8 04 00 00 00       	mov    eax,0x4
c00216cf:	c3                   	ret    

c00216d0 <ISO9660::getName()>:
c00216d0:	b8 14 cb 02 c0       	mov    eax,0xc002cb14
c00216d5:	c3                   	ret    

c00216d6 <ISO9660::stat(void*, unsigned long long*)>:
c00216d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00216da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00216de:	85 d2                	test   edx,edx
c00216e0:	74 12                	je     c00216f4 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00216e2:	85 c0                	test   eax,eax
c00216e4:	74 0e                	je     c00216f4 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00216e6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00216e9:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00216ec:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00216ef:	89 10                	mov    DWORD PTR [eax],edx
c00216f1:	31 c0                	xor    eax,eax
c00216f3:	c3                   	ret    
c00216f4:	b8 04 00 00 00       	mov    eax,0x4
c00216f9:	c3                   	ret    

c00216fa <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00216fa:	b8 01 00 00 00       	mov    eax,0x1
c00216ff:	c3                   	ret    

c0021700 <ISO9660::unlink(char const*)>:
c0021700:	b8 01 00 00 00       	mov    eax,0x1
c0021705:	c3                   	ret    

c0021706 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0021706:	b8 01 00 00 00       	mov    eax,0x1
c002170b:	c3                   	ret    

c002170c <ISO9660::rename(char const*, char const*)>:
c002170c:	b8 01 00 00 00       	mov    eax,0x1
c0021711:	c3                   	ret    

c0021712 <ISO9660::mkdir(char const*)>:
c0021712:	b8 01 00 00 00       	mov    eax,0x1
c0021717:	c3                   	ret    

c0021718 <ISO9660::close(void*)>:
c0021718:	83 ec 0c             	sub    esp,0xc
c002171b:	b8 04 00 00 00       	mov    eax,0x4
c0021720:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021724:	85 d2                	test   edx,edx
c0021726:	74 0e                	je     c0021736 <ISO9660::close(void*)+0x1e>
c0021728:	83 ec 0c             	sub    esp,0xc
c002172b:	52                   	push   edx
c002172c:	e8 1f e1 fe ff       	call   c000f850 <free>
c0021731:	83 c4 10             	add    esp,0x10
c0021734:	31 c0                	xor    eax,eax
c0021736:	83 c4 0c             	add    esp,0xc
c0021739:	c3                   	ret    

c002173a <ISO9660::closeDir(void*)>:
c002173a:	83 ec 0c             	sub    esp,0xc
c002173d:	b8 04 00 00 00       	mov    eax,0x4
c0021742:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021746:	85 d2                	test   edx,edx
c0021748:	74 0e                	je     c0021758 <ISO9660::closeDir(void*)+0x1e>
c002174a:	83 ec 0c             	sub    esp,0xc
c002174d:	52                   	push   edx
c002174e:	e8 fd e0 fe ff       	call   c000f850 <free>
c0021753:	83 c4 10             	add    esp,0x10
c0021756:	31 c0                	xor    eax,eax
c0021758:	83 c4 0c             	add    esp,0xc
c002175b:	c3                   	ret    

c002175c <ISO9660::~ISO9660()>:
c002175c:	83 ec 0c             	sub    esp,0xc
c002175f:	ba 78 cb 02 c0       	mov    edx,0xc002cb78
c0021764:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021768:	89 10                	mov    DWORD PTR [eax],edx
c002176a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002176e:	83 ec 0c             	sub    esp,0xc
c0021771:	50                   	push   eax
c0021772:	e8 23 1b ff ff       	call   c001329a <Filesystem::~Filesystem()>
c0021777:	83 c4 10             	add    esp,0x10
c002177a:	90                   	nop
c002177b:	83 c4 0c             	add    esp,0xc
c002177e:	c3                   	ret    
c002177f:	90                   	nop

c0021780 <ISO9660::~ISO9660()>:
c0021780:	83 ec 0c             	sub    esp,0xc
c0021783:	83 ec 0c             	sub    esp,0xc
c0021786:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002178a:	e8 cd ff ff ff       	call   c002175c <ISO9660::~ISO9660()>
c002178f:	83 c4 10             	add    esp,0x10
c0021792:	83 ec 08             	sub    esp,0x8
c0021795:	6a 08                	push   0x8
c0021797:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002179b:	e8 f1 16 ff ff       	call   c0012e91 <operator delete(void*, unsigned long)>
c00217a0:	83 c4 10             	add    esp,0x10
c00217a3:	83 c4 0c             	add    esp,0xc
c00217a6:	c3                   	ret    

c00217a7 <__memmem(unsigned char*, int, unsigned char*, int)>:
c00217a7:	55                   	push   ebp
c00217a8:	31 c9                	xor    ecx,ecx
c00217aa:	57                   	push   edi
c00217ab:	56                   	push   esi
c00217ac:	53                   	push   ebx
c00217ad:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00217b1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00217b5:	89 eb                	mov    ebx,ebp
c00217b7:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c00217bb:	39 ce                	cmp    esi,ecx
c00217bd:	7e 17                	jle    c00217d6 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c00217bf:	31 d2                	xor    edx,edx
c00217c1:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c00217c5:	7d 13                	jge    c00217da <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c00217c7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00217cb:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00217ce:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c00217d1:	75 0d                	jne    c00217e0 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c00217d3:	42                   	inc    edx
c00217d4:	eb eb                	jmp    c00217c1 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c00217d6:	31 c0                	xor    eax,eax
c00217d8:	eb 0a                	jmp    c00217e4 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00217da:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00217de:	eb 04                	jmp    c00217e4 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00217e0:	41                   	inc    ecx
c00217e1:	43                   	inc    ebx
c00217e2:	eb d7                	jmp    c00217bb <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c00217e4:	5b                   	pop    ebx
c00217e5:	5e                   	pop    esi
c00217e6:	5f                   	pop    edi
c00217e7:	5d                   	pop    ebp
c00217e8:	c3                   	ret    

c00217e9 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c00217e9:	56                   	push   esi
c00217ea:	53                   	push   ebx
c00217eb:	52                   	push   edx
c00217ec:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00217f0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00217f4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00217f8:	39 0d 80 1d 03 c0    	cmp    DWORD PTR ds:0xc0031d80,ecx
c00217fe:	75 08                	jne    c0021808 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0021800:	38 05 d4 db 02 c0    	cmp    BYTE PTR ds:0xc002dbd4,al
c0021806:	74 2b                	je     c0021833 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c0021808:	83 ec 0c             	sub    esp,0xc
c002180b:	a2 d4 db 02 c0       	mov    ds:0xc002dbd4,al
c0021810:	68 a0 1d 03 c0       	push   0xc0031da0
c0021815:	0f be c0             	movsx  eax,al
c0021818:	6a 01                	push   0x1
c002181a:	89 0d 80 1d 03 c0    	mov    DWORD PTR ds:0xc0031d80,ecx
c0021820:	31 db                	xor    ebx,ebx
c0021822:	53                   	push   ebx
c0021823:	51                   	push   ecx
c0021824:	ff 34 85 5c eb 02 c0 	push   DWORD PTR [eax*4-0x3ffd14a4]
c002182b:	e8 62 4f ff ff       	call   c0016792 <LogicalDisk::read(unsigned long long, int, void*)>
c0021830:	83 c4 20             	add    esp,0x20
c0021833:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c002183b:	c7 44 24 14 a0 1d 03 c0 	mov    DWORD PTR [esp+0x14],0xc0031da0
c0021843:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0021847:	58                   	pop    eax
c0021848:	5b                   	pop    ebx
c0021849:	5e                   	pop    esi
c002184a:	e9 f5 ee fd ff       	jmp    c0000744 <memcpy>
c002184f:	90                   	nop

c0021850 <ISO9660::tryMount(LogicalDisk*, int)>:
c0021850:	81 ec 10 08 00 00    	sub    esp,0x810
c0021856:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c002185d:	83 c0 41             	add    eax,0x41
c0021860:	0f be c0             	movsx  eax,al
c0021863:	50                   	push   eax
c0021864:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021868:	50                   	push   eax
c0021869:	6a 10                	push   0x10
c002186b:	e8 79 ff ff ff       	call   c00217e9 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021870:	83 c4 10             	add    esp,0x10
c0021873:	31 c0                	xor    eax,eax
c0021875:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c002187a:	75 1d                	jne    c0021899 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002187c:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0021881:	75 16                	jne    c0021899 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021883:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0021888:	75 0f                	jne    c0021899 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002188a:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c002188f:	75 08                	jne    c0021899 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021891:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0021896:	0f 94 c0             	sete   al
c0021899:	81 c4 0c 08 00 00    	add    esp,0x80c
c002189f:	c3                   	ret    

c00218a0 <ISO9660::read(void*, unsigned long, void*, int*)>:
c00218a0:	55                   	push   ebp
c00218a1:	57                   	push   edi
c00218a2:	56                   	push   esi
c00218a3:	53                   	push   ebx
c00218a4:	81 ec 2c 08 00 00    	sub    esp,0x82c
c00218aa:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c00218b1:	85 ed                	test   ebp,ebp
c00218b3:	0f 84 d6 01 00 00    	je     c0021a8f <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c00218b9:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c00218c1:	0f 84 c8 01 00 00    	je     c0021a8f <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c00218c7:	b8 01 00 00 00       	mov    eax,0x1
c00218cc:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c00218d0:	0f 85 be 01 00 00    	jne    c0021a94 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c00218d6:	31 d2                	xor    edx,edx
c00218d8:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c00218df:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00218e2:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c00218e5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00218e9:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c00218ec:	89 04 24             	mov    DWORD PTR [esp],eax
c00218ef:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00218f3:	01 f0                	add    eax,esi
c00218f5:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00218f8:	11 fa                	adc    edx,edi
c00218fa:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00218fe:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0021902:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0021906:	19 d1                	sbb    ecx,edx
c0021908:	72 0a                	jb     c0021914 <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c002190a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002190e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021912:	eb 13                	jmp    c0021927 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0021914:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021918:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002191c:	29 f0                	sub    eax,esi
c002191e:	19 fa                	sbb    edx,edi
c0021920:	89 04 24             	mov    DWORD PTR [esp],eax
c0021923:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021927:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002192a:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c002192d:	0f a4 c2 0b          	shld   edx,eax,0xb
c0021931:	51                   	push   ecx
c0021932:	c1 e0 0b             	shl    eax,0xb
c0021935:	01 c6                	add    esi,eax
c0021937:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002193b:	11 d7                	adc    edi,edx
c002193d:	50                   	push   eax
c002193e:	89 fa                	mov    edx,edi
c0021940:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0021944:	89 f0                	mov    eax,esi
c0021946:	53                   	push   ebx
c0021947:	0f ac d0 0b          	shrd   eax,edx,0xb
c002194b:	50                   	push   eax
c002194c:	e8 98 fe ff ff       	call   c00217e9 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021951:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021955:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0021958:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c002195c:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0021962:	83 c4 10             	add    esp,0x10
c0021965:	b8 00 08 00 00       	mov    eax,0x800
c002196a:	29 d0                	sub    eax,edx
c002196c:	39 c1                	cmp    ecx,eax
c002196e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0021972:	83 d9 00             	sbb    ecx,0x0
c0021975:	7d 1c                	jge    c0021993 <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c0021977:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c002197c:	75 12                	jne    c0021990 <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c002197e:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021985:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002198b:	e9 fb 00 00 00       	jmp    c0021a8b <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c0021990:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021993:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c0021996:	31 d2                	xor    edx,edx
c0021998:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c002199c:	39 c2                	cmp    edx,eax
c002199e:	7d 14                	jge    c00219b4 <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c00219a0:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c00219a7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00219ab:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c00219ae:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00219b1:	42                   	inc    edx
c00219b2:	eb e8                	jmp    c002199c <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c00219b4:	89 c3                	mov    ebx,eax
c00219b6:	85 c0                	test   eax,eax
c00219b8:	79 02                	jns    c00219bc <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c00219ba:	31 db                	xor    ebx,ebx
c00219bc:	99                   	cdq    
c00219bd:	01 c3                	add    ebx,eax
c00219bf:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c00219c6:	01 c6                	add    esi,eax
c00219c8:	11 d7                	adc    edi,edx
c00219ca:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00219ce:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00219d2:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00219d5:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00219d9:	29 c6                	sub    esi,eax
c00219db:	19 d7                	sbb    edi,edx
c00219dd:	89 34 24             	mov    DWORD PTR [esp],esi
c00219e0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00219e4:	b8 ff 07 00 00       	mov    eax,0x7ff
c00219e9:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00219ec:	b8 00 00 00 00       	mov    eax,0x0
c00219f1:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00219f5:	7d 3e                	jge    c0021a35 <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c00219f7:	52                   	push   edx
c00219f8:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00219fc:	50                   	push   eax
c00219fd:	53                   	push   ebx
c00219fe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021a02:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021a06:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021a0a:	50                   	push   eax
c0021a0b:	e8 d9 fd ff ff       	call   c00217e9 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021a10:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0021a18:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0021a1d:	81 c3 00 08 00 00    	add    ebx,0x800
c0021a23:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0021a2b:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0021a30:	83 c4 10             	add    esp,0x10
c0021a33:	eb af                	jmp    c00219e4 <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c0021a35:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a39:	0b 04 24             	or     eax,DWORD PTR [esp]
c0021a3c:	74 32                	je     c0021a70 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c0021a3e:	50                   	push   eax
c0021a3f:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021a43:	50                   	push   eax
c0021a44:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021a48:	50                   	push   eax
c0021a49:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0021a4d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0021a51:	0f ac fe 0b          	shrd   esi,edi,0xb
c0021a55:	56                   	push   esi
c0021a56:	e8 8e fd ff ff       	call   c00217e9 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021a5b:	83 c4 0c             	add    esp,0xc
c0021a5e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0021a62:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021a66:	50                   	push   eax
c0021a67:	53                   	push   ebx
c0021a68:	e8 d7 ec fd ff       	call   c0000744 <memcpy>
c0021a6d:	83 c4 10             	add    esp,0x10
c0021a70:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021a77:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021a7b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021a7f:	89 38                	mov    DWORD PTR [eax],edi
c0021a81:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021a85:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021a88:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021a8b:	31 c0                	xor    eax,eax
c0021a8d:	eb 05                	jmp    c0021a94 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021a8f:	b8 04 00 00 00       	mov    eax,0x4
c0021a94:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021a9a:	5b                   	pop    ebx
c0021a9b:	5e                   	pop    esi
c0021a9c:	5f                   	pop    edi
c0021a9d:	5d                   	pop    ebp
c0021a9e:	c3                   	ret    
c0021a9f:	90                   	nop

c0021aa0 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021aa0:	55                   	push   ebp
c0021aa1:	57                   	push   edi
c0021aa2:	56                   	push   esi
c0021aa3:	53                   	push   ebx
c0021aa4:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021aaa:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c0021ab1:	85 f6                	test   esi,esi
c0021ab3:	0f 84 64 02 00 00    	je     c0021d1d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021ab9:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021ac1:	0f 84 56 02 00 00    	je     c0021d1d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021ac7:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0021aca:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c0021acd:	75 0a                	jne    c0021ad9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021acf:	b8 07 00 00 00       	mov    eax,0x7
c0021ad4:	e9 49 02 00 00       	jmp    c0021d22 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021ad9:	50                   	push   eax
c0021ada:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021ade:	50                   	push   eax
c0021adf:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021ae6:	53                   	push   ebx
c0021ae7:	8b 06                	mov    eax,DWORD PTR [esi]
c0021ae9:	c1 e0 0b             	shl    eax,0xb
c0021aec:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0021aef:	c1 e8 0b             	shr    eax,0xb
c0021af2:	50                   	push   eax
c0021af3:	e8 f1 fc ff ff       	call   c00217e9 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021af8:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021afb:	83 c4 10             	add    esp,0x10
c0021afe:	89 c1                	mov    ecx,eax
c0021b00:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0021b03:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021b09:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021b0c:	84 db                	test   bl,bl
c0021b0e:	0f 85 90 00 00 00    	jne    c0021ba4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0021b14:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0021b1a:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021b20:	29 c7                	sub    edi,eax
c0021b22:	89 fb                	mov    ebx,edi
c0021b24:	c1 fb 1f             	sar    ebx,0x1f
c0021b27:	01 f8                	add    eax,edi
c0021b29:	11 da                	adc    edx,ebx
c0021b2b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021b2f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021b33:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0021b36:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c0021b39:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021b3c:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021b3f:	89 04 24             	mov    DWORD PTR [esp],eax
c0021b42:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021b46:	89 d8                	mov    eax,ebx
c0021b48:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0021b4b:	ba 00 00 00 00       	mov    edx,0x0
c0021b50:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021b54:	b8 00 00 00 00       	mov    eax,0x0
c0021b59:	73 0b                	jae    c0021b66 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0021b5b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021b5e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021b62:	29 f8                	sub    eax,edi
c0021b64:	19 da                	sbb    edx,ebx
c0021b66:	89 d3                	mov    ebx,edx
c0021b68:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021b6b:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021b6e:	09 c3                	or     ebx,eax
c0021b70:	0f 84 59 ff ff ff    	je     c0021acf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021b76:	55                   	push   ebp
c0021b77:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021b7b:	50                   	push   eax
c0021b7c:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021b83:	53                   	push   ebx
c0021b84:	8b 06                	mov    eax,DWORD PTR [esi]
c0021b86:	c1 e0 0b             	shl    eax,0xb
c0021b89:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0021b8d:	c1 e8 0b             	shr    eax,0xb
c0021b90:	50                   	push   eax
c0021b91:	e8 53 fc ff ff       	call   c00217e9 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021b96:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021b99:	83 c4 10             	add    esp,0x10
c0021b9c:	25 ff 07 00 00       	and    eax,0x7ff
c0021ba1:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021ba4:	57                   	push   edi
c0021ba5:	6a 28                	push   0x28
c0021ba7:	6a 00                	push   0x0
c0021ba9:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021bad:	50                   	push   eax
c0021bae:	e8 c5 eb fd ff       	call   c0000778 <memset>
c0021bb3:	31 d2                	xor    edx,edx
c0021bb5:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0021bb8:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021bbe:	89 f8                	mov    eax,edi
c0021bc0:	83 c0 21             	add    eax,0x21
c0021bc3:	83 d2 00             	adc    edx,0x0
c0021bc6:	89 c7                	mov    edi,eax
c0021bc8:	89 d5                	mov    ebp,edx
c0021bca:	83 c4 10             	add    esp,0x10
c0021bcd:	31 c9                	xor    ecx,ecx
c0021bcf:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0021bd6:	83 f9 28             	cmp    ecx,0x28
c0021bd9:	88 04 24             	mov    BYTE PTR [esp],al
c0021bdc:	0f 94 c2             	sete   dl
c0021bdf:	88 d0                	mov    al,dl
c0021be1:	ba ff 07 00 00       	mov    edx,0x7ff
c0021be6:	39 fa                	cmp    edx,edi
c0021be8:	ba 00 00 00 00       	mov    edx,0x0
c0021bed:	19 ea                	sbb    edx,ebp
c0021bef:	0f 92 c2             	setb   dl
c0021bf2:	09 c2                	or     edx,eax
c0021bf4:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021bf8:	0f 94 c0             	sete   al
c0021bfb:	08 d0                	or     al,dl
c0021bfd:	75 16                	jne    c0021c15 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021bff:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021c03:	74 10                	je     c0021c15 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021c05:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021c08:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021c0c:	41                   	inc    ecx
c0021c0d:	83 c7 01             	add    edi,0x1
c0021c10:	83 d5 00             	adc    ebp,0x0
c0021c13:	eb ba                	jmp    c0021bcf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0021c15:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021c1c:	83 ec 0c             	sub    esp,0xc
c0021c1f:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0021c23:	57                   	push   edi
c0021c24:	e8 6b eb fd ff       	call   c0000794 <strlen>
c0021c29:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021c31:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021c35:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0021c3c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021c3f:	5a                   	pop    edx
c0021c40:	25 ff 07 00 00       	and    eax,0x7ff
c0021c45:	01 c8                	add    eax,ecx
c0021c47:	59                   	pop    ecx
c0021c48:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021c4e:	83 e0 02             	and    eax,0x2
c0021c51:	3c 01                	cmp    al,0x1
c0021c53:	19 c0                	sbb    eax,eax
c0021c55:	83 c0 02             	add    eax,0x2
c0021c58:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021c5c:	57                   	push   edi
c0021c5d:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021c61:	50                   	push   eax
c0021c62:	e8 cd eb fd ff       	call   c0000834 <strcpy>
c0021c67:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021c6b:	83 c4 10             	add    esp,0x10
c0021c6e:	84 c0                	test   al,al
c0021c70:	75 21                	jne    c0021c93 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0021c72:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021c7a:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021c82:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021c8a:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021c91:	eb 28                	jmp    c0021cbb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021c93:	fe c8                	dec    al
c0021c95:	75 24                	jne    c0021cbb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021c97:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021c9f:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021ca7:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021caf:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021cb6:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021cbb:	0f b6 fb             	movzx  edi,bl
c0021cbe:	31 db                	xor    ebx,ebx
c0021cc0:	50                   	push   eax
c0021cc1:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0021cc8:	8d 44 24 48          	lea    eax,[esp+0x48]
c0021ccc:	50                   	push   eax
c0021ccd:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0021cd4:	e8 6b ea fd ff       	call   c0000744 <memcpy>
c0021cd9:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0021ce0:	89 f9                	mov    ecx,edi
c0021ce2:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021ce8:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0021ceb:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021cee:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0021cf1:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021cf4:	83 c4 10             	add    esp,0x10
c0021cf7:	39 c7                	cmp    edi,eax
c0021cf9:	89 df                	mov    edi,ebx
c0021cfb:	19 d7                	sbb    edi,edx
c0021cfd:	72 10                	jb     c0021d0f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021cff:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0021d06:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0021d0d:	eb 0a                	jmp    c0021d19 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0021d0f:	29 c8                	sub    eax,ecx
c0021d11:	19 da                	sbb    edx,ebx
c0021d13:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021d16:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021d19:	31 c0                	xor    eax,eax
c0021d1b:	eb 05                	jmp    c0021d22 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021d1d:	b8 04 00 00 00       	mov    eax,0x4
c0021d22:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021d28:	5b                   	pop    ebx
c0021d29:	5e                   	pop    esi
c0021d2a:	5f                   	pop    edi
c0021d2b:	5d                   	pop    ebp
c0021d2c:	c3                   	ret    

c0021d2d <readRoot(unsigned int*, unsigned int*, char)>:
c0021d2d:	81 ec 40 08 00 00    	sub    esp,0x840
c0021d33:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021d3b:	50                   	push   eax
c0021d3c:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021d40:	50                   	push   eax
c0021d41:	6a 10                	push   0x10
c0021d43:	e8 a1 fa ff ff       	call   c00217e9 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021d48:	83 c4 0c             	add    esp,0xc
c0021d4b:	6a 22                	push   0x22
c0021d4d:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0021d54:	50                   	push   eax
c0021d55:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0021d59:	50                   	push   eax
c0021d5a:	e8 e5 e9 fd ff       	call   c0000744 <memcpy>
c0021d5f:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021d66:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021d6a:	89 10                	mov    DWORD PTR [eax],edx
c0021d6c:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021d73:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021d77:	89 10                	mov    DWORD PTR [eax],edx
c0021d79:	b0 01                	mov    al,0x1
c0021d7b:	81 c4 4c 08 00 00    	add    esp,0x84c
c0021d81:	c3                   	ret    

c0021d82 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021d82:	55                   	push   ebp
c0021d83:	57                   	push   edi
c0021d84:	56                   	push   esi
c0021d85:	53                   	push   ebx
c0021d86:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021d8c:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021d93:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021d9a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021d9e:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021da2:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021da6:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021daa:	75 03                	jne    c0021daf <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021dac:	83 c3 02             	add    ebx,0x2
c0021daf:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021db2:	75 03                	jne    c0021db7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021db4:	43                   	inc    ebx
c0021db5:	eb f8                	jmp    c0021daf <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021db7:	51                   	push   ecx
c0021db8:	68 00 01 00 00       	push   0x100
c0021dbd:	6a 00                	push   0x0
c0021dbf:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021dc3:	50                   	push   eax
c0021dc4:	e8 af e9 fd ff       	call   c0000778 <memset>
c0021dc9:	83 c4 10             	add    esp,0x10
c0021dcc:	31 d2                	xor    edx,edx
c0021dce:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021dd1:	84 c0                	test   al,al
c0021dd3:	74 21                	je     c0021df6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021dd5:	3c 2f                	cmp    al,0x2f
c0021dd7:	75 0b                	jne    c0021de4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021dd9:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021ddd:	bd 01 00 00 00       	mov    ebp,0x1
c0021de2:	eb 14                	jmp    c0021df8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021de4:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021de7:	80 f9 19             	cmp    cl,0x19
c0021dea:	77 03                	ja     c0021def <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021dec:	83 e8 20             	sub    eax,0x20
c0021def:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021df3:	42                   	inc    edx
c0021df4:	eb d8                	jmp    c0021dce <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021df6:	31 ed                	xor    ebp,ebp
c0021df8:	83 ec 0c             	sub    esp,0xc
c0021dfb:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021e02:	e8 39 da fe ff       	call   c000f840 <malloc>
c0021e07:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021e0e:	89 c6                	mov    esi,eax
c0021e10:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021e16:	c1 ef 0b             	shr    edi,0xb
c0021e19:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021e20:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021e24:	83 c4 10             	add    esp,0x10
c0021e27:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021e2c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021e30:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021e37:	74 28                	je     c0021e61 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021e39:	52                   	push   edx
c0021e3a:	57                   	push   edi
c0021e3b:	50                   	push   eax
c0021e3c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021e40:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021e47:	e8 9d f9 ff ff       	call   c00217e9 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021e4c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021e50:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021e57:	05 00 08 00 00       	add    eax,0x800
c0021e5c:	83 c4 10             	add    esp,0x10
c0021e5f:	eb cb                	jmp    c0021e2c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021e61:	83 ec 0c             	sub    esp,0xc
c0021e64:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021e68:	57                   	push   edi
c0021e69:	e8 26 e9 fd ff       	call   c0000794 <strlen>
c0021e6e:	50                   	push   eax
c0021e6f:	57                   	push   edi
c0021e70:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021e77:	56                   	push   esi
c0021e78:	e8 2a f9 ff ff       	call   c00217a7 <__memmem(unsigned char*, int, unsigned char*, int)>
c0021e7d:	83 c4 20             	add    esp,0x20
c0021e80:	85 c0                	test   eax,eax
c0021e82:	75 13                	jne    c0021e97 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021e84:	83 ec 0c             	sub    esp,0xc
c0021e87:	56                   	push   esi
c0021e88:	e8 c3 d9 fe ff       	call   c000f850 <free>
c0021e8d:	83 c4 10             	add    esp,0x10
c0021e90:	31 c0                	xor    eax,eax
c0021e92:	e9 b3 00 00 00       	jmp    c0021f4a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021e97:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021e9b:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021e9f:	c1 e7 08             	shl    edi,0x8
c0021ea2:	c1 e2 10             	shl    edx,0x10
c0021ea5:	09 d7                	or     edi,edx
c0021ea7:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021eab:	09 d7                	or     edi,edx
c0021ead:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021eb1:	c1 e2 18             	shl    edx,0x18
c0021eb4:	09 d7                	or     edi,edx
c0021eb6:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021eba:	89 d1                	mov    ecx,edx
c0021ebc:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021ec0:	c1 e1 08             	shl    ecx,0x8
c0021ec3:	c1 e2 10             	shl    edx,0x10
c0021ec6:	09 ca                	or     edx,ecx
c0021ec8:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021ecc:	09 ca                	or     edx,ecx
c0021ece:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021ed2:	c1 e1 18             	shl    ecx,0x18
c0021ed5:	09 ca                	or     edx,ecx
c0021ed7:	89 e9                	mov    ecx,ebp
c0021ed9:	84 c9                	test   cl,cl
c0021edb:	74 3c                	je     c0021f19 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021edd:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021ee1:	83 ec 0c             	sub    esp,0xc
c0021ee4:	56                   	push   esi
c0021ee5:	e8 66 d9 fe ff       	call   c000f850 <free>
c0021eea:	83 c4 0c             	add    esp,0xc
c0021eed:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021ef4:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021ef9:	50                   	push   eax
c0021efa:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021f01:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021f08:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021f0c:	52                   	push   edx
c0021f0d:	57                   	push   edi
c0021f0e:	53                   	push   ebx
c0021f0f:	e8 6e fe ff ff       	call   c0021d82 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021f14:	83 c4 20             	add    esp,0x20
c0021f17:	eb 31                	jmp    c0021f4a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021f19:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021f1c:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021f23:	d0 e8                	shr    al,1
c0021f25:	89 3b                	mov    DWORD PTR [ebx],edi
c0021f27:	83 e0 01             	and    eax,0x1
c0021f2a:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021f31:	83 ec 0c             	sub    esp,0xc
c0021f34:	89 13                	mov    DWORD PTR [ebx],edx
c0021f36:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021f3d:	89 03                	mov    DWORD PTR [ebx],eax
c0021f3f:	56                   	push   esi
c0021f40:	e8 0b d9 fe ff       	call   c000f850 <free>
c0021f45:	83 c4 10             	add    esp,0x10
c0021f48:	b0 01                	mov    al,0x1
c0021f4a:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021f50:	5b                   	pop    ebx
c0021f51:	5e                   	pop    esi
c0021f52:	5f                   	pop    edi
c0021f53:	5d                   	pop    ebp
c0021f54:	c3                   	ret    

c0021f55 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021f55:	55                   	push   ebp
c0021f56:	57                   	push   edi
c0021f57:	56                   	push   esi
c0021f58:	53                   	push   ebx
c0021f59:	83 ec 20             	sub    esp,0x20
c0021f5c:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021f60:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021f64:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021f68:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021f70:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021f78:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021f7d:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021f83:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0021f89:	57                   	push   edi
c0021f8a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021f8e:	50                   	push   eax
c0021f8f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021f93:	50                   	push   eax
c0021f94:	e8 94 fd ff ff       	call   c0021d2d <readRoot(unsigned int*, unsigned int*, char)>
c0021f99:	5a                   	pop    edx
c0021f9a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021f9e:	e8 f1 e7 fd ff       	call   c0000794 <strlen>
c0021fa3:	83 c4 10             	add    esp,0x10
c0021fa6:	83 f8 03             	cmp    eax,0x3
c0021fa9:	77 17                	ja     c0021fc2 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021fab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021faf:	89 03                	mov    DWORD PTR [ebx],eax
c0021fb1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021fb5:	89 06                	mov    DWORD PTR [esi],eax
c0021fb7:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021fbe:	b0 01                	mov    al,0x1
c0021fc0:	eb 19                	jmp    c0021fdb <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0021fc2:	50                   	push   eax
c0021fc3:	55                   	push   ebp
c0021fc4:	57                   	push   edi
c0021fc5:	56                   	push   esi
c0021fc6:	53                   	push   ebx
c0021fc7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021fcb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021fcf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021fd3:	e8 aa fd ff ff       	call   c0021d82 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021fd8:	83 c4 20             	add    esp,0x20
c0021fdb:	83 c4 1c             	add    esp,0x1c
c0021fde:	5b                   	pop    ebx
c0021fdf:	5e                   	pop    esi
c0021fe0:	5f                   	pop    edi
c0021fe1:	5d                   	pop    ebp
c0021fe2:	c3                   	ret    
c0021fe3:	90                   	nop

c0021fe4 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021fe4:	57                   	push   edi
c0021fe5:	56                   	push   esi
c0021fe6:	53                   	push   ebx
c0021fe7:	83 ec 10             	sub    esp,0x10
c0021fea:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021fee:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021ff2:	85 ff                	test   edi,edi
c0021ff4:	0f 84 9d 00 00 00    	je     c0022097 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021ffa:	85 f6                	test   esi,esi
c0021ffc:	0f 84 95 00 00 00    	je     c0022097 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0022002:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0022007:	74 17                	je     c0022020 <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c0022009:	83 ec 0c             	sub    esp,0xc
c002200c:	68 2f cb 02 c0       	push   0xc002cb2f
c0022011:	e8 5b 0f ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0022016:	83 c4 10             	add    esp,0x10
c0022019:	b8 03 00 00 00       	mov    eax,0x3
c002201e:	eb 7c                	jmp    c002209c <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022020:	83 ec 0c             	sub    esp,0xc
c0022023:	6a 1c                	push   0x1c
c0022025:	e8 16 d8 fe ff       	call   c000f840 <malloc>
c002202a:	89 07                	mov    DWORD PTR [edi],eax
c002202c:	89 c3                	mov    ebx,eax
c002202e:	58                   	pop    eax
c002202f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022033:	50                   	push   eax
c0022034:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0022037:	50                   	push   eax
c0022038:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002203c:	50                   	push   eax
c002203d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022041:	50                   	push   eax
c0022042:	56                   	push   esi
c0022043:	e8 0d ff ff ff       	call   c0021f55 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022048:	83 c4 20             	add    esp,0x20
c002204b:	84 c0                	test   al,al
c002204d:	74 07                	je     c0022056 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c002204f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0022054:	74 0b                	je     c0022061 <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c0022056:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c002205a:	b8 01 00 00 00       	mov    eax,0x1
c002205f:	eb 3b                	jmp    c002209c <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022061:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022065:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022069:	89 03                	mov    DWORD PTR [ebx],eax
c002206b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0022072:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022076:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c002207d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022084:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022087:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002208e:	8a 06                	mov    al,BYTE PTR [esi]
c0022090:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0022093:	31 c0                	xor    eax,eax
c0022095:	eb 05                	jmp    c002209c <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022097:	b8 04 00 00 00       	mov    eax,0x4
c002209c:	83 c4 10             	add    esp,0x10
c002209f:	5b                   	pop    ebx
c00220a0:	5e                   	pop    esi
c00220a1:	5f                   	pop    edi
c00220a2:	c3                   	ret    
c00220a3:	90                   	nop

c00220a4 <ISO9660::exists(char const*)>:
c00220a4:	83 ec 28             	sub    esp,0x28
c00220a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00220ab:	8d 54 24 18          	lea    edx,[esp+0x18]
c00220af:	52                   	push   edx
c00220b0:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00220b3:	52                   	push   edx
c00220b4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00220b8:	52                   	push   edx
c00220b9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00220bd:	52                   	push   edx
c00220be:	50                   	push   eax
c00220bf:	e8 91 fe ff ff       	call   c0021f55 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00220c4:	83 c4 3c             	add    esp,0x3c
c00220c7:	c3                   	ret    

c00220c8 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c00220c8:	56                   	push   esi
c00220c9:	53                   	push   ebx
c00220ca:	83 ec 14             	sub    esp,0x14
c00220cd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00220d1:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00220d5:	85 db                	test   ebx,ebx
c00220d7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00220db:	0f 94 c2             	sete   dl
c00220de:	85 f6                	test   esi,esi
c00220e0:	0f 94 c0             	sete   al
c00220e3:	08 c2                	or     dl,al
c00220e5:	75 68                	jne    c002214f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00220e7:	85 c9                	test   ecx,ecx
c00220e9:	74 64                	je     c002214f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00220eb:	83 ec 0c             	sub    esp,0xc
c00220ee:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00220f1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00220f5:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00220fb:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022102:	50                   	push   eax
c0022103:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0022106:	50                   	push   eax
c0022107:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002210b:	50                   	push   eax
c002210c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022110:	50                   	push   eax
c0022111:	51                   	push   ecx
c0022112:	e8 3e fe ff ff       	call   c0021f55 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022117:	83 c4 20             	add    esp,0x20
c002211a:	ba 01 00 00 00       	mov    edx,0x1
c002211f:	84 c0                	test   al,al
c0022121:	74 31                	je     c0022154 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022123:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022127:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002212e:	89 03                	mov    DWORD PTR [ebx],eax
c0022130:	ba 00 00 00 00       	mov    edx,0x0
c0022135:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022139:	85 c0                	test   eax,eax
c002213b:	0f 95 06             	setne  BYTE PTR [esi]
c002213e:	74 14                	je     c0022154 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022140:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022146:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002214d:	eb 05                	jmp    c0022154 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002214f:	ba 04 00 00 00       	mov    edx,0x4
c0022154:	83 c4 14             	add    esp,0x14
c0022157:	89 d0                	mov    eax,edx
c0022159:	5b                   	pop    ebx
c002215a:	5e                   	pop    esi
c002215b:	c3                   	ret    

c002215c <ISO9660::openDir(char const*, void**)>:
c002215c:	57                   	push   edi
c002215d:	56                   	push   esi
c002215e:	53                   	push   ebx
c002215f:	83 ec 10             	sub    esp,0x10
c0022162:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0022166:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002216a:	85 ff                	test   edi,edi
c002216c:	0f 84 95 00 00 00    	je     c0022207 <ISO9660::openDir(char const*, void**)+0xab>
c0022172:	85 f6                	test   esi,esi
c0022174:	0f 84 8d 00 00 00    	je     c0022207 <ISO9660::openDir(char const*, void**)+0xab>
c002217a:	83 ec 0c             	sub    esp,0xc
c002217d:	6a 1c                	push   0x1c
c002217f:	e8 bc d6 fe ff       	call   c000f840 <malloc>
c0022184:	89 07                	mov    DWORD PTR [edi],eax
c0022186:	89 c3                	mov    ebx,eax
c0022188:	59                   	pop    ecx
c0022189:	8d 44 24 18          	lea    eax,[esp+0x18]
c002218d:	50                   	push   eax
c002218e:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0022191:	50                   	push   eax
c0022192:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022196:	50                   	push   eax
c0022197:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002219b:	50                   	push   eax
c002219c:	56                   	push   esi
c002219d:	e8 b3 fd ff ff       	call   c0021f55 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00221a2:	83 c4 20             	add    esp,0x20
c00221a5:	84 c0                	test   al,al
c00221a7:	74 07                	je     c00221b0 <ISO9660::openDir(char const*, void**)+0x54>
c00221a9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00221ae:	75 21                	jne    c00221d1 <ISO9660::openDir(char const*, void**)+0x75>
c00221b0:	0f b6 c0             	movzx  eax,al
c00221b3:	52                   	push   edx
c00221b4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00221b8:	50                   	push   eax
c00221b9:	68 55 cb 02 c0       	push   0xc002cb55
c00221be:	e8 ae 0d ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c00221c3:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00221c7:	83 c4 10             	add    esp,0x10
c00221ca:	b8 01 00 00 00       	mov    eax,0x1
c00221cf:	eb 3b                	jmp    c002220c <ISO9660::openDir(char const*, void**)+0xb0>
c00221d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221d5:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00221d9:	89 03                	mov    DWORD PTR [ebx],eax
c00221db:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00221e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00221e6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00221ed:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00221f4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00221f7:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00221fe:	8a 06                	mov    al,BYTE PTR [esi]
c0022200:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0022203:	31 c0                	xor    eax,eax
c0022205:	eb 05                	jmp    c002220c <ISO9660::openDir(char const*, void**)+0xb0>
c0022207:	b8 04 00 00 00       	mov    eax,0x4
c002220c:	83 c4 10             	add    esp,0x10
c002220f:	5b                   	pop    ebx
c0022210:	5e                   	pop    esi
c0022211:	5f                   	pop    edi
c0022212:	c3                   	ret    
c0022213:	90                   	nop

c0022214 <ISO9660::ISO9660()>:
c0022214:	83 ec 0c             	sub    esp,0xc
c0022217:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002221b:	83 ec 0c             	sub    esp,0xc
c002221e:	50                   	push   eax
c002221f:	e8 52 10 ff ff       	call   c0013276 <Filesystem::Filesystem()>
c0022224:	83 c4 10             	add    esp,0x10
c0022227:	ba 78 cb 02 c0       	mov    edx,0xc002cb78
c002222c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022230:	89 10                	mov    DWORD PTR [eax],edx
c0022232:	90                   	nop
c0022233:	83 c4 0c             	add    esp,0xc
c0022236:	c3                   	ret    
c0022237:	90                   	nop

c0022238 <SoundChannel::~SoundChannel()>:
c0022238:	83 ec 0c             	sub    esp,0xc
c002223b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002223f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0022242:	83 ec 0c             	sub    esp,0xc
c0022245:	50                   	push   eax
c0022246:	e8 05 d6 fe ff       	call   c000f850 <free>
c002224b:	83 c4 10             	add    esp,0x10
c002224e:	90                   	nop
c002224f:	83 c4 0c             	add    esp,0xc
c0022252:	c3                   	ret    
c0022253:	90                   	nop

c0022254 <SoundChannel::setSpeed(float)>:
c0022254:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022258:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002225c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c002225f:	c3                   	ret    

c0022260 <SoundChannel::getSpeed()>:
c0022260:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022264:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0022267:	c3                   	ret    

c0022268 <SoundChannel::setVolume(int)>:
c0022268:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002226c:	83 f8 64             	cmp    eax,0x64
c002226f:	7e 05                	jle    c0022276 <SoundChannel::setVolume(int)+0xe>
c0022271:	b8 64 00 00 00       	mov    eax,0x64
c0022276:	85 c0                	test   eax,eax
c0022278:	79 02                	jns    c002227c <SoundChannel::setVolume(int)+0x14>
c002227a:	31 c0                	xor    eax,eax
c002227c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022280:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0022283:	c3                   	ret    

c0022284 <SoundChannel::getVolume()>:
c0022284:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022288:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c002228b:	c3                   	ret    

c002228c <SoundChannel::pause()>:
c002228c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022290:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c0022294:	c3                   	ret    
c0022295:	90                   	nop

c0022296 <SoundChannel::SoundChannel(int, int, int, int)>:
c0022296:	83 ec 1c             	sub    esp,0x1c
c0022299:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002229d:	e8 ea ff ff ff       	call   c002228c <SoundChannel::pause()>
c00222a2:	83 c4 04             	add    esp,0x4
c00222a5:	6a 50                	push   0x50
c00222a7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00222ab:	e8 b8 ff ff ff       	call   c0022268 <SoundChannel::setVolume(int)>
c00222b0:	83 c4 08             	add    esp,0x8
c00222b3:	a1 f0 cb 02 c0       	mov    eax,ds:0xc002cbf0
c00222b8:	50                   	push   eax
c00222b9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00222bd:	e8 92 ff ff ff       	call   c0022254 <SoundChannel::setSpeed(float)>
c00222c2:	83 c4 08             	add    esp,0x8
c00222c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222c9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00222cd:	89 10                	mov    DWORD PTR [eax],edx
c00222cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222d3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00222d7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00222da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222de:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00222e2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00222e5:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c00222ea:	75 23                	jne    c002230f <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c00222ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222f0:	8b 10                	mov    edx,DWORD PTR [eax]
c00222f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00222f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00222f9:	0f af c2             	imul   eax,edx
c00222fc:	85 c0                	test   eax,eax
c00222fe:	79 03                	jns    c0022303 <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c0022300:	83 c0 03             	add    eax,0x3
c0022303:	c1 f8 02             	sar    eax,0x2
c0022306:	05 a0 0f 00 00       	add    eax,0xfa0
c002230b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002230f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022313:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022317:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c002231a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002231e:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0022325:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022329:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0022330:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022334:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022337:	c1 e0 02             	shl    eax,0x2
c002233a:	83 ec 0c             	sub    esp,0xc
c002233d:	50                   	push   eax
c002233e:	e8 fd d4 fe ff       	call   c000f840 <malloc>
c0022343:	83 c4 10             	add    esp,0x10
c0022346:	89 c2                	mov    edx,eax
c0022348:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002234c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c002234f:	83 ec 04             	sub    esp,0x4
c0022352:	8d 44 24 08          	lea    eax,[esp+0x8]
c0022356:	50                   	push   eax
c0022357:	6a 01                	push   0x1
c0022359:	6a 04                	push   0x4
c002235b:	e8 3f 68 fe ff       	call   c0008b9f <src_new>
c0022360:	83 c4 10             	add    esp,0x10
c0022363:	89 c2                	mov    edx,eax
c0022365:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022369:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c002236c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022370:	85 c0                	test   eax,eax
c0022372:	74 10                	je     c0022384 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c0022374:	83 ec 0c             	sub    esp,0xc
c0022377:	68 d4 cb 02 c0       	push   0xc002cbd4
c002237c:	e8 a2 82 ff ff       	call   c001a623 <Krnl::panic(char const*)>
c0022381:	83 c4 10             	add    esp,0x10
c0022384:	a0 a0 29 03 c0       	mov    al,ds:0xc00329a0
c0022389:	83 f0 01             	xor    eax,0x1
c002238c:	84 c0                	test   al,al
c002238e:	74 57                	je     c00223e7 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c0022390:	a1 f4 cb 02 c0       	mov    eax,ds:0xc002cbf4
c0022395:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022399:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00223a1:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00223a9:	7f 35                	jg     c00223e0 <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c00223ab:	83 ec 0c             	sub    esp,0xc
c00223ae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00223b2:	e8 a0 4f 00 00       	call   c0027357 <__floatsisf>
c00223b7:	83 c4 10             	add    esp,0x10
c00223ba:	8b 15 f4 cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cbf4
c00223c0:	83 ec 08             	sub    esp,0x8
c00223c3:	52                   	push   edx
c00223c4:	50                   	push   eax
c00223c5:	e8 9f 4b 00 00       	call   c0026f69 <__mulsf3>
c00223ca:	83 c4 10             	add    esp,0x10
c00223cd:	89 c2                	mov    edx,eax
c00223cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00223d3:	89 14 85 a0 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcda60],edx
c00223da:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00223de:	eb c1                	jmp    c00223a1 <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c00223e0:	c6 05 a0 29 03 c0 01 	mov    BYTE PTR ds:0xc00329a0,0x1
c00223e7:	90                   	nop
c00223e8:	83 c4 1c             	add    esp,0x1c
c00223eb:	c3                   	ret    

c00223ec <SoundChannel::play()>:
c00223ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223f0:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c00223f4:	c3                   	ret    
c00223f5:	90                   	nop

c00223f6 <SoundChannel::paused()>:
c00223f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223fa:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c00223fd:	c3                   	ret    

c00223fe <SoundChannel::getSampleRate()>:
c00223fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022402:	8b 00                	mov    eax,DWORD PTR [eax]
c0022404:	c3                   	ret    
c0022405:	90                   	nop

c0022406 <SoundChannel::getBits()>:
c0022406:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002240a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002240d:	c3                   	ret    

c002240e <SoundChannel::getBufferUsed()>:
c002240e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022412:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0022415:	c3                   	ret    

c0022416 <SoundChannel::getBufferSize()>:
c0022416:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002241a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c002241d:	c3                   	ret    

c002241e <SoundChannel::unbuffer(float*, int, int)>:
c002241e:	56                   	push   esi
c002241f:	53                   	push   ebx
c0022420:	83 ec 40             	sub    esp,0x40
c0022423:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0022427:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c002242a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002242e:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0022431:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022435:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0022439:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002243d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0022441:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022445:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022449:	e8 09 4f 00 00       	call   c0027357 <__floatsisf>
c002244e:	5a                   	pop    edx
c002244f:	89 c6                	mov    esi,eax
c0022451:	ff 33                	push   DWORD PTR [ebx]
c0022453:	e8 ff 4e 00 00       	call   c0027357 <__floatsisf>
c0022458:	59                   	pop    ecx
c0022459:	5a                   	pop    edx
c002245a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c002245d:	50                   	push   eax
c002245e:	e8 06 4b 00 00       	call   c0026f69 <__mulsf3>
c0022463:	59                   	pop    ecx
c0022464:	5a                   	pop    edx
c0022465:	50                   	push   eax
c0022466:	56                   	push   esi
c0022467:	e8 c0 4c 00 00       	call   c002712c <__divsf3>
c002246c:	89 04 24             	mov    DWORD PTR [esp],eax
c002246f:	e8 b3 61 00 00       	call   c0028627 <__extendsfdf2>
c0022474:	59                   	pop    ecx
c0022475:	5e                   	pop    esi
c0022476:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002247a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c002247e:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0022486:	8d 44 24 14          	lea    eax,[esp+0x14]
c002248a:	50                   	push   eax
c002248b:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c002248e:	e8 01 63 fe ff       	call   c0008794 <src_process>
c0022493:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022497:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c002249a:	83 c4 0c             	add    esp,0xc
c002249d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00224a0:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c00224a3:	29 d0                	sub    eax,edx
c00224a5:	c1 e0 02             	shl    eax,0x2
c00224a8:	50                   	push   eax
c00224a9:	8d 04 91             	lea    eax,[ecx+edx*4]
c00224ac:	50                   	push   eax
c00224ad:	51                   	push   ecx
c00224ae:	e8 c9 e1 fd ff       	call   c000067c <memmove>
c00224b3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00224b7:	83 c4 44             	add    esp,0x44
c00224ba:	5b                   	pop    ebx
c00224bb:	5e                   	pop    esi
c00224bc:	c3                   	ret    
c00224bd:	90                   	nop

c00224be <SoundChannel::buffer8(unsigned char*, int)>:
c00224be:	55                   	push   ebp
c00224bf:	57                   	push   edi
c00224c0:	56                   	push   esi
c00224c1:	53                   	push   ebx
c00224c2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00224c6:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00224ca:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00224cd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00224d1:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00224d4:	74 7a                	je     c0022550 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00224d6:	85 ff                	test   edi,edi
c00224d8:	7e 76                	jle    c0022550 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00224da:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c00224de:	8d 70 01             	lea    esi,[eax+0x1]
c00224e1:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c00224e4:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00224e7:	8b 1c 9d a0 25 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcda60]
c00224ee:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c00224f1:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00224f4:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00224f7:	74 5e                	je     c0022557 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c00224f9:	83 ff 01             	cmp    edi,0x1
c00224fc:	74 4b                	je     c0022549 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c00224fe:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0022502:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022505:	8d 70 01             	lea    esi,[eax+0x1]
c0022508:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002250b:	8b 1c 9d a0 25 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcda60]
c0022512:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022515:	b8 02 00 00 00       	mov    eax,0x2
c002251a:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c002251d:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022520:	75 23                	jne    c0022545 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0022522:	eb 27                	jmp    c002254b <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022524:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0022529:	8d 71 01             	lea    esi,[ecx+0x1]
c002252c:	40                   	inc    eax
c002252d:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022530:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0022533:	8b 1c 9d a0 25 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcda60]
c002253a:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c002253d:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022540:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022543:	74 06                	je     c002254b <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022545:	39 c7                	cmp    edi,eax
c0022547:	75 db                	jne    c0022524 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0022549:	89 f8                	mov    eax,edi
c002254b:	5b                   	pop    ebx
c002254c:	5e                   	pop    esi
c002254d:	5f                   	pop    edi
c002254e:	5d                   	pop    ebp
c002254f:	c3                   	ret    
c0022550:	5b                   	pop    ebx
c0022551:	31 c0                	xor    eax,eax
c0022553:	5e                   	pop    esi
c0022554:	5f                   	pop    edi
c0022555:	5d                   	pop    ebp
c0022556:	c3                   	ret    
c0022557:	b8 01 00 00 00       	mov    eax,0x1
c002255c:	eb ed                	jmp    c002254b <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c002255e <SoundDevice::SoundDevice(char const*)>:
c002255e:	83 ec 1c             	sub    esp,0x1c
c0022561:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022565:	83 ec 08             	sub    esp,0x8
c0022568:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002256c:	50                   	push   eax
c002256d:	e8 16 20 ff ff       	call   c0014588 <Device::Device(char const*)>
c0022572:	83 c4 10             	add    esp,0x10
c0022575:	ba 00 cc 02 c0       	mov    edx,0xc002cc00
c002257a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002257e:	89 10                	mov    DWORD PTR [eax],edx
c0022580:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022584:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c002258e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022592:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c002259c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00225a4:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00225a9:	7f 19                	jg     c00225c4 <SoundDevice::SoundDevice(char const*)+0x66>
c00225ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225af:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00225b3:	83 c2 54             	add    edx,0x54
c00225b6:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c00225be:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00225c2:	eb e0                	jmp    c00225a4 <SoundDevice::SoundDevice(char const*)+0x46>
c00225c4:	90                   	nop
c00225c5:	83 c4 1c             	add    esp,0x1c
c00225c8:	c3                   	ret    
c00225c9:	90                   	nop

c00225ca <SoundDevice::~SoundDevice()>:
c00225ca:	53                   	push   ebx
c00225cb:	83 ec 18             	sub    esp,0x18
c00225ce:	ba 00 cc 02 c0       	mov    edx,0xc002cc00
c00225d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225d7:	89 10                	mov    DWORD PTR [eax],edx
c00225d9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00225e1:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00225e6:	7f 46                	jg     c002262e <SoundDevice::~SoundDevice()+0x64>
c00225e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225ec:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00225f0:	83 c2 54             	add    edx,0x54
c00225f3:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c00225f7:	85 c0                	test   eax,eax
c00225f9:	74 2d                	je     c0022628 <SoundDevice::~SoundDevice()+0x5e>
c00225fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225ff:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022603:	83 c2 54             	add    edx,0x54
c0022606:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c002260a:	85 db                	test   ebx,ebx
c002260c:	74 1a                	je     c0022628 <SoundDevice::~SoundDevice()+0x5e>
c002260e:	83 ec 0c             	sub    esp,0xc
c0022611:	53                   	push   ebx
c0022612:	e8 21 fc ff ff       	call   c0022238 <SoundChannel::~SoundChannel()>
c0022617:	83 c4 10             	add    esp,0x10
c002261a:	83 ec 08             	sub    esp,0x8
c002261d:	6a 2c                	push   0x2c
c002261f:	53                   	push   ebx
c0022620:	e8 6c 08 ff ff       	call   c0012e91 <operator delete(void*, unsigned long)>
c0022625:	83 c4 10             	add    esp,0x10
c0022628:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002262c:	eb b3                	jmp    c00225e1 <SoundDevice::~SoundDevice()+0x17>
c002262e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022632:	83 ec 0c             	sub    esp,0xc
c0022635:	50                   	push   eax
c0022636:	e8 2f 1c ff ff       	call   c001426a <Device::~Device()>
c002263b:	83 c4 10             	add    esp,0x10
c002263e:	90                   	nop
c002263f:	83 c4 18             	add    esp,0x18
c0022642:	5b                   	pop    ebx
c0022643:	c3                   	ret    

c0022644 <SoundDevice::~SoundDevice()>:
c0022644:	83 ec 0c             	sub    esp,0xc
c0022647:	83 ec 0c             	sub    esp,0xc
c002264a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002264e:	e8 77 ff ff ff       	call   c00225ca <SoundDevice::~SoundDevice()>
c0022653:	83 c4 10             	add    esp,0x10
c0022656:	83 ec 08             	sub    esp,0x8
c0022659:	68 e4 01 00 00       	push   0x1e4
c002265e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022662:	e8 2a 08 ff ff       	call   c0012e91 <operator delete(void*, unsigned long)>
c0022667:	83 c4 10             	add    esp,0x10
c002266a:	83 c4 0c             	add    esp,0xc
c002266d:	c3                   	ret    

c002266e <SoundDevice::getFreeChannelNum()>:
c002266e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022672:	31 c0                	xor    eax,eax
c0022674:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c002267c:	74 09                	je     c0022687 <SoundDevice::getFreeChannelNum()+0x19>
c002267e:	40                   	inc    eax
c002267f:	83 f8 20             	cmp    eax,0x20
c0022682:	75 f0                	jne    c0022674 <SoundDevice::getFreeChannelNum()+0x6>
c0022684:	83 c8 ff             	or     eax,0xffffffff
c0022687:	c3                   	ret    

c0022688 <SoundDevice::addChannel(SoundChannel*)>:
c0022688:	56                   	push   esi
c0022689:	53                   	push   ebx
c002268a:	51                   	push   ecx
c002268b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002268f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0022693:	53                   	push   ebx
c0022694:	e8 d5 ff ff ff       	call   c002266e <SoundDevice::getFreeChannelNum()>
c0022699:	5a                   	pop    edx
c002269a:	83 f8 ff             	cmp    eax,0xffffffff
c002269d:	74 51                	je     c00226f0 <SoundDevice::addChannel(SoundChannel*)+0x68>
c002269f:	85 f6                	test   esi,esi
c00226a1:	74 4d                	je     c00226f0 <SoundDevice::addChannel(SoundChannel*)+0x68>
c00226a3:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c00226aa:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c00226b1:	75 30                	jne    c00226e3 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c00226b3:	83 ec 0c             	sub    esp,0xc
c00226b6:	56                   	push   esi
c00226b7:	e8 42 fd ff ff       	call   c00223fe <SoundChannel::getSampleRate()>
c00226bc:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c00226c2:	89 34 24             	mov    DWORD PTR [esp],esi
c00226c5:	e8 3c fd ff ff       	call   c0022406 <SoundChannel::getBits()>
c00226ca:	83 c4 0c             	add    esp,0xc
c00226cd:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c00226d3:	8b 13                	mov    edx,DWORD PTR [ebx]
c00226d5:	50                   	push   eax
c00226d6:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c00226dc:	53                   	push   ebx
c00226dd:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00226e0:	83 c4 10             	add    esp,0x10
c00226e3:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c00226e9:	b8 01 00 00 00       	mov    eax,0x1
c00226ee:	eb 03                	jmp    c00226f3 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c00226f0:	83 c8 ff             	or     eax,0xffffffff
c00226f3:	5a                   	pop    edx
c00226f4:	5b                   	pop    ebx
c00226f5:	5e                   	pop    esi
c00226f6:	c3                   	ret    
c00226f7:	90                   	nop

c00226f8 <SoundDevice::removeChannel(int)>:
c00226f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00226fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022700:	83 fa 1f             	cmp    edx,0x1f
c0022703:	77 23                	ja     c0022728 <SoundDevice::removeChannel(int)+0x30>
c0022705:	8d 14 90             	lea    edx,[eax+edx*4]
c0022708:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c002270f:	74 17                	je     c0022728 <SoundDevice::removeChannel(int)+0x30>
c0022711:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c002271b:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0022721:	75 05                	jne    c0022728 <SoundDevice::removeChannel(int)+0x30>
c0022723:	8b 00                	mov    eax,DWORD PTR [eax]
c0022725:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c0022728:	c3                   	ret    
c0022729:	90                   	nop

c002272a <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c002272a:	57                   	push   edi
c002272b:	56                   	push   esi
c002272c:	53                   	push   ebx
c002272d:	31 db                	xor    ebx,ebx
c002272f:	83 ec 10             	sub    esp,0x10
c0022732:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022736:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c002273a:	0f 8d cb 00 00 00    	jge    c002280b <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0022740:	83 ec 0c             	sub    esp,0xc
c0022743:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022747:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c002274a:	e8 d8 5e 00 00       	call   c0028627 <__extendsfdf2>
c002274f:	83 c4 10             	add    esp,0x10
c0022752:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022756:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002275a:	68 00 00 f0 3f       	push   0x3ff00000
c002275f:	6a 00                	push   0x0
c0022761:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022765:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022769:	e8 45 4e 00 00       	call   c00275b3 <__adddf3>
c002276e:	83 c4 10             	add    esp,0x10
c0022771:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022775:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022779:	68 00 00 e0 3f       	push   0x3fe00000
c002277e:	6a 00                	push   0x0
c0022780:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022784:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022788:	e8 a3 54 00 00       	call   c0027c30 <__muldf3>
c002278d:	83 c4 10             	add    esp,0x10
c0022790:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022794:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022798:	68 00 00 60 40       	push   0x40600000
c002279d:	6a 00                	push   0x0
c002279f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227a7:	e8 84 54 00 00       	call   c0027c30 <__muldf3>
c00227ac:	59                   	pop    ecx
c00227ad:	5f                   	pop    edi
c00227ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00227b2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00227b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227be:	e8 40 5d 00 00       	call   c0028503 <__truncdfsf2>
c00227c3:	5a                   	pop    edx
c00227c4:	89 c7                	mov    edi,eax
c00227c6:	59                   	pop    ecx
c00227c7:	68 00 00 fe 42       	push   0x42fe0000
c00227cc:	50                   	push   eax
c00227cd:	e8 db 4d 00 00       	call   c00275ad <__gesf2>
c00227d2:	83 c4 10             	add    esp,0x10
c00227d5:	85 c0                	test   eax,eax
c00227d7:	78 06                	js     c00227df <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c00227d9:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c00227dd:	eb 26                	jmp    c0022805 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00227df:	50                   	push   eax
c00227e0:	50                   	push   eax
c00227e1:	6a 00                	push   0x0
c00227e3:	57                   	push   edi
c00227e4:	e8 c8 4d 00 00       	call   c00275b1 <__lesf2>
c00227e9:	83 c4 10             	add    esp,0x10
c00227ec:	85 c0                	test   eax,eax
c00227ee:	7f 06                	jg     c00227f6 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c00227f0:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c00227f4:	eb 0f                	jmp    c0022805 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00227f6:	83 ec 0c             	sub    esp,0xc
c00227f9:	57                   	push   edi
c00227fa:	e8 bd 5e 00 00       	call   c00286bc <lrintf>
c00227ff:	83 c4 10             	add    esp,0x10
c0022802:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022805:	43                   	inc    ebx
c0022806:	e9 2b ff ff ff       	jmp    c0022736 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c002280b:	83 c4 10             	add    esp,0x10
c002280e:	5b                   	pop    ebx
c002280f:	5e                   	pop    esi
c0022810:	5f                   	pop    edi
c0022811:	c3                   	ret    

c0022812 <SoundDevice::getAudio(int, float*, float*)>:
c0022812:	55                   	push   ebp
c0022813:	57                   	push   edi
c0022814:	56                   	push   esi
c0022815:	53                   	push   ebx
c0022816:	31 db                	xor    ebx,ebx
c0022818:	83 ec 20             	sub    esp,0x20
c002281b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002281f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0022823:	c1 e0 02             	shl    eax,0x2
c0022826:	50                   	push   eax
c0022827:	6a 00                	push   0x0
c0022829:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002282d:	e8 46 df fd ff       	call   c0000778 <memset>
c0022832:	83 c4 10             	add    esp,0x10
c0022835:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0022839:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c0022840:	85 c0                	test   eax,eax
c0022842:	0f 84 d7 00 00 00    	je     c002291f <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022848:	83 ec 0c             	sub    esp,0xc
c002284b:	50                   	push   eax
c002284c:	e8 a5 fb ff ff       	call   c00223f6 <SoundChannel::paused()>
c0022851:	83 c4 10             	add    esp,0x10
c0022854:	84 c0                	test   al,al
c0022856:	0f 85 c3 00 00 00    	jne    c002291f <SoundDevice::getAudio(int, float*, float*)+0x10d>
c002285c:	83 ec 0c             	sub    esp,0xc
c002285f:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022866:	e8 19 fa ff ff       	call   c0022284 <SoundChannel::getVolume()>
c002286b:	83 c4 10             	add    esp,0x10
c002286e:	85 c0                	test   eax,eax
c0022870:	0f 84 a9 00 00 00    	je     c002291f <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022876:	83 ec 0c             	sub    esp,0xc
c0022879:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022880:	e8 ff f9 ff ff       	call   c0022284 <SoundChannel::getVolume()>
c0022885:	83 ec 0c             	sub    esp,0xc
c0022888:	50                   	push   eax
c0022889:	e8 c9 4a 00 00       	call   c0027357 <__floatsisf>
c002288e:	59                   	pop    ecx
c002288f:	5d                   	pop    ebp
c0022890:	31 ed                	xor    ebp,ebp
c0022892:	68 00 00 c8 42       	push   0x42c80000
c0022897:	50                   	push   eax
c0022898:	e8 8f 48 00 00       	call   c002712c <__divsf3>
c002289d:	83 c4 10             	add    esp,0x10
c00228a0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00228a4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00228a8:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c00228ae:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00228b2:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00228b9:	e8 60 fb ff ff       	call   c002241e <SoundChannel::unbuffer(float*, int, int)>
c00228be:	83 c4 20             	add    esp,0x20
c00228c1:	89 c1                	mov    ecx,eax
c00228c3:	39 cd                	cmp    ebp,ecx
c00228c5:	7d 52                	jge    c0022919 <SoundDevice::getAudio(int, float*, float*)+0x107>
c00228c7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00228cb:	50                   	push   eax
c00228cc:	50                   	push   eax
c00228cd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00228d1:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c00228d4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00228d8:	e8 8c 46 00 00       	call   c0026f69 <__mulsf3>
c00228dd:	5a                   	pop    edx
c00228de:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00228e2:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c00228e8:	e8 6a 4a 00 00       	call   c0027357 <__floatsisf>
c00228ed:	59                   	pop    ecx
c00228ee:	5a                   	pop    edx
c00228ef:	50                   	push   eax
c00228f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00228f4:	e8 33 48 00 00       	call   c002712c <__divsf3>
c00228f9:	59                   	pop    ecx
c00228fa:	5a                   	pop    edx
c00228fb:	50                   	push   eax
c00228fc:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0022900:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0022903:	e8 3e 43 00 00       	call   c0026c46 <__addsf3>
c0022908:	83 c4 10             	add    esp,0x10
c002290b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002290f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0022913:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c0022916:	45                   	inc    ebp
c0022917:	eb aa                	jmp    c00228c3 <SoundDevice::getAudio(int, float*, float*)+0xb1>
c0022919:	39 cf                	cmp    edi,ecx
c002291b:	7e 02                	jle    c002291f <SoundDevice::getAudio(int, float*, float*)+0x10d>
c002291d:	89 cf                	mov    edi,ecx
c002291f:	43                   	inc    ebx
c0022920:	83 fb 20             	cmp    ebx,0x20
c0022923:	0f 85 10 ff ff ff    	jne    c0022839 <SoundDevice::getAudio(int, float*, float*)+0x27>
c0022929:	83 c4 1c             	add    esp,0x1c
c002292c:	89 f8                	mov    eax,edi
c002292e:	5b                   	pop    ebx
c002292f:	5e                   	pop    esi
c0022930:	5f                   	pop    edi
c0022931:	5d                   	pop    ebp
c0022932:	c3                   	ret    
c0022933:	90                   	nop

c0022934 <PCI::open(int, int, void*)>:
c0022934:	83 ec 18             	sub    esp,0x18
c0022937:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002293b:	8b 10                	mov    edx,DWORD PTR [eax]
c002293d:	50                   	push   eax
c002293e:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0022941:	31 c0                	xor    eax,eax
c0022943:	83 c4 1c             	add    esp,0x1c
c0022946:	c3                   	ret    
c0022947:	90                   	nop

c0022948 <PCI::close(int, int, void*)>:
c0022948:	31 c0                	xor    eax,eax
c002294a:	c3                   	ret    
c002294b:	90                   	nop

c002294c <PCI::PCI()>:
c002294c:	83 ec 0c             	sub    esp,0xc
c002294f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022953:	83 ec 08             	sub    esp,0x8
c0022956:	68 30 cc 02 c0       	push   0xc002cc30
c002295b:	50                   	push   eax
c002295c:	e8 ab 12 ff ff       	call   c0013c0c <Bus::Bus(char const*)>
c0022961:	83 c4 10             	add    esp,0x10
c0022964:	ba 9c cc 02 c0       	mov    edx,0xc002cc9c
c0022969:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002296d:	89 10                	mov    DWORD PTR [eax],edx
c002296f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022973:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022979:	0f b6 d0             	movzx  edx,al
c002297c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022980:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0022987:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002298b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022991:	0f b6 d0             	movzx  edx,al
c0022994:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022998:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c002299d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229a1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00229a7:	8d 50 01             	lea    edx,[eax+0x1]
c00229aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00229ae:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00229b4:	0f b6 d0             	movzx  edx,al
c00229b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229bb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00229bf:	83 c9 c0             	or     ecx,0xffffffc0
c00229c2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00229c6:	90                   	nop
c00229c7:	83 c4 0c             	add    esp,0xc
c00229ca:	c3                   	ret    
c00229cb:	90                   	nop

c00229cc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00229cc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00229d0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00229d5:	89 ca                	mov    edx,ecx
c00229d7:	c1 e0 10             	shl    eax,0x10
c00229da:	81 e2 fc 00 00 00    	and    edx,0xfc
c00229e0:	09 d0                	or     eax,edx
c00229e2:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00229e7:	c1 e2 08             	shl    edx,0x8
c00229ea:	09 d0                	or     eax,edx
c00229ec:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c00229f1:	c1 e2 0b             	shl    edx,0xb
c00229f4:	09 d0                	or     eax,edx
c00229f6:	ba f8 0c 00 00       	mov    edx,0xcf8
c00229fb:	0d 00 00 00 80       	or     eax,0x80000000
c0022a00:	ef                   	out    dx,eax
c0022a01:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022a06:	ed                   	in     eax,dx
c0022a07:	83 e1 02             	and    ecx,0x2
c0022a0a:	0f b6 c9             	movzx  ecx,cl
c0022a0d:	c1 e1 03             	shl    ecx,0x3
c0022a10:	d3 e8                	shr    eax,cl
c0022a12:	c3                   	ret    
c0022a13:	90                   	nop

c0022a14 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0022a14:	6a 00                	push   0x0
c0022a16:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a1b:	50                   	push   eax
c0022a1c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a21:	50                   	push   eax
c0022a22:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a27:	50                   	push   eax
c0022a28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a2c:	e8 9b ff ff ff       	call   c00229cc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a31:	83 c4 14             	add    esp,0x14
c0022a34:	c3                   	ret    
c0022a35:	90                   	nop

c0022a36 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0022a36:	6a 0e                	push   0xe
c0022a38:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a3d:	50                   	push   eax
c0022a3e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a43:	50                   	push   eax
c0022a44:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a49:	50                   	push   eax
c0022a4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a4e:	e8 79 ff ff ff       	call   c00229cc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a53:	83 c4 14             	add    esp,0x14
c0022a56:	0f b6 c0             	movzx  eax,al
c0022a59:	c3                   	ret    

c0022a5a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0022a5a:	55                   	push   ebp
c0022a5b:	57                   	push   edi
c0022a5c:	56                   	push   esi
c0022a5d:	53                   	push   ebx
c0022a5e:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c0022a63:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c0022a68:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c0022a6d:	6a 0a                	push   0xa
c0022a6f:	56                   	push   esi
c0022a70:	55                   	push   ebp
c0022a71:	57                   	push   edi
c0022a72:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022a76:	e8 51 ff ff ff       	call   c00229cc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a7b:	6a 0a                	push   0xa
c0022a7d:	89 c3                	mov    ebx,eax
c0022a7f:	56                   	push   esi
c0022a80:	0f b6 db             	movzx  ebx,bl
c0022a83:	55                   	push   ebp
c0022a84:	57                   	push   edi
c0022a85:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022a89:	e8 3e ff ff ff       	call   c00229cc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a8e:	83 c4 28             	add    esp,0x28
c0022a91:	25 00 ff 00 00       	and    eax,0xff00
c0022a96:	09 d8                	or     eax,ebx
c0022a98:	5b                   	pop    ebx
c0022a99:	5e                   	pop    esi
c0022a9a:	5f                   	pop    edi
c0022a9b:	5d                   	pop    ebp
c0022a9c:	c3                   	ret    
c0022a9d:	90                   	nop

c0022a9e <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022a9e:	6a 08                	push   0x8
c0022aa0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022aa5:	50                   	push   eax
c0022aa6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022aab:	50                   	push   eax
c0022aac:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022ab1:	50                   	push   eax
c0022ab2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022ab6:	e8 11 ff ff ff       	call   c00229cc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022abb:	83 c4 14             	add    esp,0x14
c0022abe:	0f b6 c4             	movzx  eax,ah
c0022ac1:	c3                   	ret    

c0022ac2 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022ac2:	6a 08                	push   0x8
c0022ac4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022ac9:	50                   	push   eax
c0022aca:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022acf:	50                   	push   eax
c0022ad0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022ad5:	50                   	push   eax
c0022ad6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022ada:	e8 ed fe ff ff       	call   c00229cc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022adf:	83 c4 14             	add    esp,0x14
c0022ae2:	c3                   	ret    
c0022ae3:	90                   	nop

c0022ae4 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0022ae4:	6a 3c                	push   0x3c
c0022ae6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022aeb:	50                   	push   eax
c0022aec:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022af1:	50                   	push   eax
c0022af2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022af7:	50                   	push   eax
c0022af8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022afc:	e8 cb fe ff ff       	call   c00229cc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b01:	83 c4 14             	add    esp,0x14
c0022b04:	c3                   	ret    
c0022b05:	90                   	nop

c0022b06 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0022b06:	6a 18                	push   0x18
c0022b08:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b0d:	50                   	push   eax
c0022b0e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b13:	50                   	push   eax
c0022b14:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b19:	50                   	push   eax
c0022b1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b1e:	e8 a9 fe ff ff       	call   c00229cc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b23:	83 c4 14             	add    esp,0x14
c0022b26:	0f b6 c4             	movzx  eax,ah
c0022b29:	c3                   	ret    

c0022b2a <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022b2a:	55                   	push   ebp
c0022b2b:	57                   	push   edi
c0022b2c:	56                   	push   esi
c0022b2d:	53                   	push   ebx
c0022b2e:	50                   	push   eax
c0022b2f:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0022b33:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0022b38:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022b3d:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0022b42:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0022b49:	8d 43 12             	lea    eax,[ebx+0x12]
c0022b4c:	83 c3 10             	add    ebx,0x10
c0022b4f:	0f b6 c0             	movzx  eax,al
c0022b52:	0f b6 db             	movzx  ebx,bl
c0022b55:	50                   	push   eax
c0022b56:	51                   	push   ecx
c0022b57:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022b5b:	57                   	push   edi
c0022b5c:	55                   	push   ebp
c0022b5d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0022b61:	e8 66 fe ff ff       	call   c00229cc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b66:	53                   	push   ebx
c0022b67:	89 c6                	mov    esi,eax
c0022b69:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0022b6d:	c1 e6 10             	shl    esi,0x10
c0022b70:	51                   	push   ecx
c0022b71:	57                   	push   edi
c0022b72:	55                   	push   ebp
c0022b73:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022b77:	e8 50 fe ff ff       	call   c00229cc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b7c:	83 c4 2c             	add    esp,0x2c
c0022b7f:	0f b7 c0             	movzx  eax,ax
c0022b82:	5b                   	pop    ebx
c0022b83:	09 f0                	or     eax,esi
c0022b85:	5e                   	pop    esi
c0022b86:	5f                   	pop    edi
c0022b87:	5d                   	pop    ebp
c0022b88:	c3                   	ret    
c0022b89:	90                   	nop

c0022b8a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022b8a:	53                   	push   ebx
c0022b8b:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022b90:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0022b95:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022b99:	c1 e1 10             	shl    ecx,0x10
c0022b9c:	25 fc 00 00 00       	and    eax,0xfc
c0022ba1:	09 c1                	or     ecx,eax
c0022ba3:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022ba8:	c1 e0 08             	shl    eax,0x8
c0022bab:	09 c1                	or     ecx,eax
c0022bad:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0022bb2:	c1 e0 0b             	shl    eax,0xb
c0022bb5:	09 c1                	or     ecx,eax
c0022bb7:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022bbd:	89 c8                	mov    eax,ecx
c0022bbf:	ef                   	out    dx,eax
c0022bc0:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022bc5:	ed                   	in     eax,dx
c0022bc6:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0022bcb:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0022bd0:	74 0a                	je     c0022bdc <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0022bd2:	0f b7 d8             	movzx  ebx,ax
c0022bd5:	89 d0                	mov    eax,edx
c0022bd7:	c1 e0 10             	shl    eax,0x10
c0022bda:	eb 05                	jmp    c0022be1 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0022bdc:	66 31 c0             	xor    ax,ax
c0022bdf:	89 d3                	mov    ebx,edx
c0022be1:	09 c3                	or     ebx,eax
c0022be3:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022be8:	89 c8                	mov    eax,ecx
c0022bea:	ef                   	out    dx,eax
c0022beb:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022bf0:	89 d8                	mov    eax,ebx
c0022bf2:	ef                   	out    dx,eax
c0022bf3:	5b                   	pop    ebx
c0022bf4:	c3                   	ret    
c0022bf5:	90                   	nop

c0022bf6 <PCI::checkBus(unsigned char)>:
c0022bf6:	56                   	push   esi
c0022bf7:	53                   	push   ebx
c0022bf8:	31 db                	xor    ebx,ebx
c0022bfa:	51                   	push   ecx
c0022bfb:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022c00:	52                   	push   edx
c0022c01:	53                   	push   ebx
c0022c02:	43                   	inc    ebx
c0022c03:	56                   	push   esi
c0022c04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022c08:	e8 2b 03 00 00       	call   c0022f38 <PCI::checkDevice(unsigned char, unsigned char)>
c0022c0d:	83 c4 10             	add    esp,0x10
c0022c10:	83 fb 20             	cmp    ebx,0x20
c0022c13:	75 eb                	jne    c0022c00 <PCI::checkBus(unsigned char)+0xa>
c0022c15:	58                   	pop    eax
c0022c16:	5b                   	pop    ebx
c0022c17:	5e                   	pop    esi
c0022c18:	c3                   	ret    
c0022c19:	90                   	nop

c0022c1a <PCI::foundDevice(PCIDeviceInfo)>:
c0022c1a:	55                   	push   ebp
c0022c1b:	57                   	push   edi
c0022c1c:	56                   	push   esi
c0022c1d:	53                   	push   ebx
c0022c1e:	83 ec 1c             	sub    esp,0x1c
c0022c21:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022c25:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022c2b:	0f 84 52 01 00 00    	je     c0022d83 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022c31:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022c35:	66 81 f9 06 04       	cmp    cx,0x406
c0022c3a:	75 2c                	jne    c0022c68 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022c3c:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022c41:	50                   	push   eax
c0022c42:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022c47:	50                   	push   eax
c0022c48:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022c4d:	50                   	push   eax
c0022c4e:	56                   	push   esi
c0022c4f:	e8 b2 fe ff ff       	call   c0022b06 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022c54:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022c58:	0f b6 c0             	movzx  eax,al
c0022c5b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022c5f:	83 c4 2c             	add    esp,0x2c
c0022c62:	5b                   	pop    ebx
c0022c63:	5e                   	pop    esi
c0022c64:	5f                   	pop    edi
c0022c65:	5d                   	pop    ebp
c0022c66:	eb 8e                	jmp    c0022bf6 <PCI::checkBus(unsigned char)>
c0022c68:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022c6c:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022c72:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022c76:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022c7a:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022c7e:	88 d3                	mov    bl,dl
c0022c80:	85 c0                	test   eax,eax
c0022c82:	74 33                	je     c0022cb7 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022c84:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022c87:	85 d2                	test   edx,edx
c0022c89:	74 28                	je     c0022cb3 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022c8b:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022c91:	31 ef                	xor    edi,ebp
c0022c93:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022c99:	75 18                	jne    c0022cb3 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022c9b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022c9f:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022ca5:	75 0c                	jne    c0022cb3 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022ca7:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022cad:	0f 84 d0 00 00 00    	je     c0022d83 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022cb3:	8b 00                	mov    eax,DWORD PTR [eax]
c0022cb5:	eb c9                	jmp    c0022c80 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022cb7:	66 81 f9 01 06       	cmp    cx,0x601
c0022cbc:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022cc0:	75 19                	jne    c0022cdb <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022cc2:	83 ec 0c             	sub    esp,0xc
c0022cc5:	68 64 01 00 00       	push   0x164
c0022cca:	e8 71 cb fe ff       	call   c000f840 <malloc>
c0022ccf:	89 c5                	mov    ebp,eax
c0022cd1:	89 04 24             	mov    DWORD PTR [esp],eax
c0022cd4:	e8 95 0f 00 00       	call   c0023c6e <SATABus::SATABus()>
c0022cd9:	eb 1e                	jmp    c0022cf9 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022cdb:	66 81 f9 01 01       	cmp    cx,0x101
c0022ce0:	75 60                	jne    c0022d42 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022ce2:	83 ec 0c             	sub    esp,0xc
c0022ce5:	68 70 02 00 00       	push   0x270
c0022cea:	e8 51 cb fe ff       	call   c000f840 <malloc>
c0022cef:	89 c5                	mov    ebp,eax
c0022cf1:	89 04 24             	mov    DWORD PTR [esp],eax
c0022cf4:	e8 03 03 00 00       	call   c0022ffc <IDE::IDE()>
c0022cf9:	58                   	pop    eax
c0022cfa:	5a                   	pop    edx
c0022cfb:	55                   	push   ebp
c0022cfc:	56                   	push   esi
c0022cfd:	e8 96 16 ff ff       	call   c0014398 <Device::addChild(Device*)>
c0022d02:	83 ec 1c             	sub    esp,0x1c
c0022d05:	b9 09 00 00 00       	mov    ecx,0x9
c0022d0a:	fc                   	cld    
c0022d0b:	89 e7                	mov    edi,esp
c0022d0d:	89 de                	mov    esi,ebx
c0022d0f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022d11:	55                   	push   ebp
c0022d12:	e8 8b 15 ff ff       	call   c00142a2 <Device::preOpenPCI(PCIDeviceInfo)>
c0022d17:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022d1a:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022d1e:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022d26:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022d2e:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022d36:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022d39:	83 c4 4c             	add    esp,0x4c
c0022d3c:	5b                   	pop    ebx
c0022d3d:	5e                   	pop    esi
c0022d3e:	5f                   	pop    edi
c0022d3f:	5d                   	pop    ebp
c0022d40:	ff e0                	jmp    eax
c0022d42:	83 ec 0c             	sub    esp,0xc
c0022d45:	68 58 01 00 00       	push   0x158
c0022d4a:	e8 f1 ca fe ff       	call   c000f840 <malloc>
c0022d4f:	89 c5                	mov    ebp,eax
c0022d51:	58                   	pop    eax
c0022d52:	5a                   	pop    edx
c0022d53:	68 38 cc 02 c0       	push   0xc002cc38
c0022d58:	55                   	push   ebp
c0022d59:	e8 30 19 ff ff       	call   c001468e <DriverlessDevice::DriverlessDevice(char const*)>
c0022d5e:	59                   	pop    ecx
c0022d5f:	5f                   	pop    edi
c0022d60:	55                   	push   ebp
c0022d61:	56                   	push   esi
c0022d62:	e8 31 16 ff ff       	call   c0014398 <Device::addChild(Device*)>
c0022d67:	b9 09 00 00 00       	mov    ecx,0x9
c0022d6c:	fc                   	cld    
c0022d6d:	89 df                	mov    edi,ebx
c0022d6f:	89 de                	mov    esi,ebx
c0022d71:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022d73:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022d77:	83 c4 2c             	add    esp,0x2c
c0022d7a:	5b                   	pop    ebx
c0022d7b:	5e                   	pop    esi
c0022d7c:	5f                   	pop    edi
c0022d7d:	5d                   	pop    ebp
c0022d7e:	e9 1f 15 ff ff       	jmp    c00142a2 <Device::preOpenPCI(PCIDeviceInfo)>
c0022d83:	83 c4 1c             	add    esp,0x1c
c0022d86:	5b                   	pop    ebx
c0022d87:	5e                   	pop    esi
c0022d88:	5f                   	pop    edi
c0022d89:	5d                   	pop    ebp
c0022d8a:	c3                   	ret    
c0022d8b:	90                   	nop

c0022d8c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022d8c:	55                   	push   ebp
c0022d8d:	57                   	push   edi
c0022d8e:	56                   	push   esi
c0022d8f:	53                   	push   ebx
c0022d90:	83 ec 5c             	sub    esp,0x5c
c0022d93:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0022d97:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022d9b:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0022d9f:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0022da4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022da8:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0022dac:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0022db1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022db5:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0022dba:	6a 0c                	push   0xc
c0022dbc:	55                   	push   ebp
c0022dbd:	53                   	push   ebx
c0022dbe:	57                   	push   edi
c0022dbf:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0022dc6:	e8 01 fc ff ff       	call   c00229cc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022dcb:	55                   	push   ebp
c0022dcc:	53                   	push   ebx
c0022dcd:	57                   	push   edi
c0022dce:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022dd5:	e8 80 fc ff ff       	call   c0022a5a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022dda:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0022ddf:	83 c4 24             	add    esp,0x24
c0022de2:	55                   	push   ebp
c0022de3:	53                   	push   ebx
c0022de4:	57                   	push   edi
c0022de5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022de9:	e8 f6 fc ff ff       	call   c0022ae4 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022dee:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0022df2:	6a 3c                	push   0x3c
c0022df4:	55                   	push   ebp
c0022df5:	53                   	push   ebx
c0022df6:	57                   	push   edi
c0022df7:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022dfe:	e8 c9 fb ff ff       	call   c00229cc <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022e03:	0f b6 c4             	movzx  eax,ah
c0022e06:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022e0a:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022e0e:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0022e12:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c0022e17:	83 c4 24             	add    esp,0x24
c0022e1a:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022e20:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022e27:	74 6c                	je     c0022e95 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022e29:	31 f6                	xor    esi,esi
c0022e2b:	8b 15 48 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e648
c0022e31:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022e37:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c0022e3d:	7e 56                	jle    c0022e95 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022e3f:	8d 14 f2             	lea    edx,[edx+esi*8]
c0022e42:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022e49:	39 cb                	cmp    ebx,ecx
c0022e4b:	75 45                	jne    c0022e92 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022e4d:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022e54:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0022e58:	75 38                	jne    c0022e92 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022e5a:	83 ec 0c             	sub    esp,0xc
c0022e5d:	68 52 cc 02 c0       	push   0xc002cc52
c0022e62:	e8 0a 01 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0022e67:	8b 15 48 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e648
c0022e6d:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022e73:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0022e7b:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0022e7f:	52                   	push   edx
c0022e80:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022e84:	53                   	push   ebx
c0022e85:	68 77 cc 02 c0       	push   0xc002cc77
c0022e8a:	e8 e2 00 ff ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0022e8f:	83 c4 20             	add    esp,0x20
c0022e92:	46                   	inc    esi
c0022e93:	eb 96                	jmp    c0022e2b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0022e95:	31 d2                	xor    edx,edx
c0022e97:	83 ec 0c             	sub    esp,0xc
c0022e9a:	55                   	push   ebp
c0022e9b:	53                   	push   ebx
c0022e9c:	57                   	push   edi
c0022e9d:	52                   	push   edx
c0022e9e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022ea2:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022ea9:	e8 7c fc ff ff       	call   c0022b2a <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022eae:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0022eb2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022eb6:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022eba:	42                   	inc    edx
c0022ebb:	83 c4 20             	add    esp,0x20
c0022ebe:	83 fa 06             	cmp    edx,0x6
c0022ec1:	75 d4                	jne    c0022e97 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0022ec3:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0022ec7:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0022ecb:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0022ecf:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0022ed3:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0022ed7:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0022edb:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0022ee0:	86 e0                	xchg   al,ah
c0022ee2:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0022ee7:	55                   	push   ebp
c0022ee8:	53                   	push   ebx
c0022ee9:	57                   	push   edi
c0022eea:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022eee:	e8 ab fb ff ff       	call   c0022a9e <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022ef3:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022ef7:	55                   	push   ebp
c0022ef8:	53                   	push   ebx
c0022ef9:	57                   	push   edi
c0022efa:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022f01:	e8 0e fb ff ff       	call   c0022a14 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f06:	83 ec 0c             	sub    esp,0xc
c0022f09:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0022f0e:	b9 09 00 00 00       	mov    ecx,0x9
c0022f13:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0022f17:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0022f1b:	fc                   	cld    
c0022f1c:	89 e7                	mov    edi,esp
c0022f1e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022f20:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022f27:	e8 ee fc ff ff       	call   c0022c1a <PCI::foundDevice(PCIDeviceInfo)>
c0022f2c:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022f32:	5b                   	pop    ebx
c0022f33:	5e                   	pop    esi
c0022f34:	5f                   	pop    edi
c0022f35:	5d                   	pop    ebp
c0022f36:	c3                   	ret    
c0022f37:	90                   	nop

c0022f38 <PCI::checkDevice(unsigned char, unsigned char)>:
c0022f38:	55                   	push   ebp
c0022f39:	57                   	push   edi
c0022f3a:	56                   	push   esi
c0022f3b:	53                   	push   ebx
c0022f3c:	83 ec 0c             	sub    esp,0xc
c0022f3f:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022f43:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022f48:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022f4d:	6a 00                	push   0x0
c0022f4f:	56                   	push   esi
c0022f50:	57                   	push   edi
c0022f51:	55                   	push   ebp
c0022f52:	e8 bd fa ff ff       	call   c0022a14 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f57:	6a 00                	push   0x0
c0022f59:	56                   	push   esi
c0022f5a:	57                   	push   edi
c0022f5b:	55                   	push   ebp
c0022f5c:	e8 2b fe ff ff       	call   c0022d8c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022f61:	83 c4 20             	add    esp,0x20
c0022f64:	6a 00                	push   0x0
c0022f66:	56                   	push   esi
c0022f67:	57                   	push   edi
c0022f68:	55                   	push   ebp
c0022f69:	e8 c8 fa ff ff       	call   c0022a36 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022f6e:	83 c4 10             	add    esp,0x10
c0022f71:	84 c0                	test   al,al
c0022f73:	79 27                	jns    c0022f9c <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022f75:	bb 01 00 00 00       	mov    ebx,0x1
c0022f7a:	53                   	push   ebx
c0022f7b:	56                   	push   esi
c0022f7c:	57                   	push   edi
c0022f7d:	55                   	push   ebp
c0022f7e:	e8 91 fa ff ff       	call   c0022a14 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f83:	83 c4 10             	add    esp,0x10
c0022f86:	66 40                	inc    ax
c0022f88:	74 0c                	je     c0022f96 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022f8a:	53                   	push   ebx
c0022f8b:	56                   	push   esi
c0022f8c:	57                   	push   edi
c0022f8d:	55                   	push   ebp
c0022f8e:	e8 f9 fd ff ff       	call   c0022d8c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022f93:	83 c4 10             	add    esp,0x10
c0022f96:	43                   	inc    ebx
c0022f97:	83 fb 08             	cmp    ebx,0x8
c0022f9a:	75 de                	jne    c0022f7a <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022f9c:	83 c4 0c             	add    esp,0xc
c0022f9f:	5b                   	pop    ebx
c0022fa0:	5e                   	pop    esi
c0022fa1:	5f                   	pop    edi
c0022fa2:	5d                   	pop    ebp
c0022fa3:	c3                   	ret    

c0022fa4 <PCI::detect()>:
c0022fa4:	56                   	push   esi
c0022fa5:	53                   	push   ebx
c0022fa6:	53                   	push   ebx
c0022fa7:	31 db                	xor    ebx,ebx
c0022fa9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022fad:	6a 00                	push   0x0
c0022faf:	6a 00                	push   0x0
c0022fb1:	6a 00                	push   0x0
c0022fb3:	56                   	push   esi
c0022fb4:	e8 7d fa ff ff       	call   c0022a36 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022fb9:	83 c4 10             	add    esp,0x10
c0022fbc:	a8 80                	test   al,0x80
c0022fbe:	75 21                	jne    c0022fe1 <PCI::detect()+0x3d>
c0022fc0:	51                   	push   ecx
c0022fc1:	51                   	push   ecx
c0022fc2:	6a 00                	push   0x0
c0022fc4:	56                   	push   esi
c0022fc5:	e8 2c fc ff ff       	call   c0022bf6 <PCI::checkBus(unsigned char)>
c0022fca:	83 c4 10             	add    esp,0x10
c0022fcd:	eb 24                	jmp    c0022ff3 <PCI::detect()+0x4f>
c0022fcf:	52                   	push   edx
c0022fd0:	52                   	push   edx
c0022fd1:	53                   	push   ebx
c0022fd2:	43                   	inc    ebx
c0022fd3:	56                   	push   esi
c0022fd4:	e8 1d fc ff ff       	call   c0022bf6 <PCI::checkBus(unsigned char)>
c0022fd9:	83 c4 10             	add    esp,0x10
c0022fdc:	83 fb 08             	cmp    ebx,0x8
c0022fdf:	74 12                	je     c0022ff3 <PCI::detect()+0x4f>
c0022fe1:	53                   	push   ebx
c0022fe2:	6a 00                	push   0x0
c0022fe4:	6a 00                	push   0x0
c0022fe6:	56                   	push   esi
c0022fe7:	e8 28 fa ff ff       	call   c0022a14 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022fec:	83 c4 10             	add    esp,0x10
c0022fef:	66 40                	inc    ax
c0022ff1:	74 dc                	je     c0022fcf <PCI::detect()+0x2b>
c0022ff3:	58                   	pop    eax
c0022ff4:	5b                   	pop    ebx
c0022ff5:	5e                   	pop    esi
c0022ff6:	c3                   	ret    
c0022ff7:	90                   	nop

c0022ff8 <IDE::close(int, int, void*)>:
c0022ff8:	83 c8 ff             	or     eax,0xffffffff
c0022ffb:	c3                   	ret    

c0022ffc <IDE::IDE()>:
c0022ffc:	83 ec 0c             	sub    esp,0xc
c0022fff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023003:	83 ec 08             	sub    esp,0x8
c0023006:	68 c0 cc 02 c0       	push   0xc002ccc0
c002300b:	50                   	push   eax
c002300c:	e8 13 17 ff ff       	call   c0014724 <HardDiskController::HardDiskController(char const*)>
c0023011:	83 c4 10             	add    esp,0x10
c0023014:	ba 00 cf 02 c0       	mov    edx,0xc002cf00
c0023019:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002301d:	89 10                	mov    DWORD PTR [eax],edx
c002301f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023023:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c002302a:	90                   	nop
c002302b:	83 c4 0c             	add    esp,0xc
c002302e:	c3                   	ret    
c002302f:	90                   	nop

c0023030 <IDE::prepareInterrupt(unsigned char)>:
c0023030:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0023035:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023039:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0023041:	c3                   	ret    

c0023042 <selectDrive(unsigned char, unsigned char)>:
c0023042:	c3                   	ret    
c0023043:	90                   	nop

c0023044 <IDE::getBase(unsigned char)>:
c0023044:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0023049:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002304d:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0023055:	c3                   	ret    

c0023056 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0023056:	55                   	push   ebp
c0023057:	57                   	push   edi
c0023058:	56                   	push   esi
c0023059:	53                   	push   ebx
c002305a:	83 ec 1c             	sub    esp,0x1c
c002305d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0023061:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023065:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0023068:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002306c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023070:	80 f9 03             	cmp    cl,0x3
c0023073:	77 51                	ja     c00230c6 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0023075:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023079:	0f b6 f2             	movzx  esi,dl
c002307c:	0f b6 db             	movzx  ebx,bl
c002307f:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023082:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0023086:	83 ca 80             	or     edx,0xffffff80
c0023089:	0f b6 d2             	movzx  edx,dl
c002308c:	52                   	push   edx
c002308d:	6a 0c                	push   0xc
c002308f:	56                   	push   esi
c0023090:	57                   	push   edi
c0023091:	e8 c0 ff ff ff       	call   c0023056 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023096:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c002309b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002309f:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c00230a3:	ee                   	out    dx,al
c00230a4:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c00230a9:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c00230ad:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00230b1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00230b5:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00230bd:	83 c4 2c             	add    esp,0x2c
c00230c0:	5b                   	pop    ebx
c00230c1:	5e                   	pop    esi
c00230c2:	5f                   	pop    edi
c00230c3:	5d                   	pop    ebp
c00230c4:	eb 90                	jmp    c0023056 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00230c6:	80 fb 07             	cmp    bl,0x7
c00230c9:	77 12                	ja     c00230dd <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c00230cb:	0f b6 d2             	movzx  edx,dl
c00230ce:	0f b6 db             	movzx  ebx,bl
c00230d1:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c00230d9:	89 da                	mov    edx,ebx
c00230db:	eb 2f                	jmp    c002310c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00230dd:	80 fb 0d             	cmp    bl,0xd
c00230e0:	77 13                	ja     c00230f5 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c00230e2:	0f b6 d2             	movzx  edx,dl
c00230e5:	0f b6 db             	movzx  ebx,bl
c00230e8:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c00230ef:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c00230f3:	eb 17                	jmp    c002310c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00230f5:	80 fb 15             	cmp    bl,0x15
c00230f8:	77 13                	ja     c002310d <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c00230fa:	0f b6 d2             	movzx  edx,dl
c00230fd:	0f b6 db             	movzx  ebx,bl
c0023100:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0023108:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c002310c:	ee                   	out    dx,al
c002310d:	83 c4 1c             	add    esp,0x1c
c0023110:	5b                   	pop    ebx
c0023111:	5e                   	pop    esi
c0023112:	5f                   	pop    edi
c0023113:	5d                   	pop    ebp
c0023114:	c3                   	ret    
c0023115:	90                   	nop

c0023116 <IDE::read(unsigned char, unsigned char)>:
c0023116:	55                   	push   ebp
c0023117:	57                   	push   edi
c0023118:	56                   	push   esi
c0023119:	53                   	push   ebx
c002311a:	83 ec 1c             	sub    esp,0x1c
c002311d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0023121:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023125:	8d 43 f8             	lea    eax,[ebx-0x8]
c0023128:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002312c:	3c 03                	cmp    al,0x3
c002312e:	77 43                	ja     c0023173 <IDE::read(unsigned char, unsigned char)+0x5d>
c0023130:	0f b6 f2             	movzx  esi,dl
c0023133:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023136:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c002313a:	83 c8 80             	or     eax,0xffffff80
c002313d:	0f b6 c0             	movzx  eax,al
c0023140:	50                   	push   eax
c0023141:	6a 0c                	push   0xc
c0023143:	56                   	push   esi
c0023144:	57                   	push   edi
c0023145:	e8 0c ff ff ff       	call   c0023056 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002314a:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c002314f:	0f b6 c3             	movzx  eax,bl
c0023152:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0023156:	ec                   	in     al,dx
c0023157:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c002315b:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0023160:	52                   	push   edx
c0023161:	6a 0c                	push   0xc
c0023163:	56                   	push   esi
c0023164:	57                   	push   edi
c0023165:	e8 ec fe ff ff       	call   c0023056 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002316a:	83 c4 20             	add    esp,0x20
c002316d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0023171:	eb 49                	jmp    c00231bc <IDE::read(unsigned char, unsigned char)+0xa6>
c0023173:	80 fb 07             	cmp    bl,0x7
c0023176:	77 12                	ja     c002318a <IDE::read(unsigned char, unsigned char)+0x74>
c0023178:	0f b6 d2             	movzx  edx,dl
c002317b:	0f b6 c3             	movzx  eax,bl
c002317e:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0023186:	89 c2                	mov    edx,eax
c0023188:	eb 31                	jmp    c00231bb <IDE::read(unsigned char, unsigned char)+0xa5>
c002318a:	80 fb 0d             	cmp    bl,0xd
c002318d:	77 13                	ja     c00231a2 <IDE::read(unsigned char, unsigned char)+0x8c>
c002318f:	0f b6 d2             	movzx  edx,dl
c0023192:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0023199:	0f b6 d3             	movzx  edx,bl
c002319c:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c00231a0:	eb 19                	jmp    c00231bb <IDE::read(unsigned char, unsigned char)+0xa5>
c00231a2:	31 c0                	xor    eax,eax
c00231a4:	80 fb 15             	cmp    bl,0x15
c00231a7:	77 13                	ja     c00231bc <IDE::read(unsigned char, unsigned char)+0xa6>
c00231a9:	0f b6 d2             	movzx  edx,dl
c00231ac:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c00231b4:	0f b6 d3             	movzx  edx,bl
c00231b7:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c00231bb:	ec                   	in     al,dx
c00231bc:	83 c4 1c             	add    esp,0x1c
c00231bf:	5b                   	pop    ebx
c00231c0:	5e                   	pop    esi
c00231c1:	5f                   	pop    edi
c00231c2:	5d                   	pop    ebp
c00231c3:	c3                   	ret    

c00231c4 <IDE::waitInterrupt(unsigned char)>:
c00231c4:	55                   	push   ebp
c00231c5:	57                   	push   edi
c00231c6:	56                   	push   esi
c00231c7:	53                   	push   ebx
c00231c8:	31 db                	xor    ebx,ebx
c00231ca:	83 ec 0c             	sub    esp,0xc
c00231cd:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00231d1:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c00231d6:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c00231de:	89 e8                	mov    eax,ebp
c00231e0:	84 c0                	test   al,al
c00231e2:	75 34                	jne    c0023218 <IDE::waitInterrupt(unsigned char)+0x54>
c00231e4:	52                   	push   edx
c00231e5:	6a 0c                	push   0xc
c00231e7:	56                   	push   esi
c00231e8:	57                   	push   edi
c00231e9:	e8 28 ff ff ff       	call   c0023116 <IDE::read(unsigned char, unsigned char)>
c00231ee:	83 c4 10             	add    esp,0x10
c00231f1:	a8 01                	test   al,0x1
c00231f3:	75 2b                	jne    c0023220 <IDE::waitInterrupt(unsigned char)+0x5c>
c00231f5:	f6 c3 04             	test   bl,0x4
c00231f8:	75 16                	jne    c0023210 <IDE::waitInterrupt(unsigned char)+0x4c>
c00231fa:	83 fb 32             	cmp    ebx,0x32
c00231fd:	7e 11                	jle    c0023210 <IDE::waitInterrupt(unsigned char)+0x4c>
c00231ff:	50                   	push   eax
c0023200:	50                   	push   eax
c0023201:	6a 00                	push   0x0
c0023203:	68 80 96 98 00       	push   0x989680
c0023208:	e8 8b b1 ff ff       	call   c001e398 <nanoSleep(unsigned long long)>
c002320d:	83 c4 10             	add    esp,0x10
c0023210:	83 fb 3c             	cmp    ebx,0x3c
c0023213:	74 0b                	je     c0023220 <IDE::waitInterrupt(unsigned char)+0x5c>
c0023215:	43                   	inc    ebx
c0023216:	eb be                	jmp    c00231d6 <IDE::waitInterrupt(unsigned char)+0x12>
c0023218:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0023220:	83 c4 0c             	add    esp,0xc
c0023223:	89 e8                	mov    eax,ebp
c0023225:	5b                   	pop    ebx
c0023226:	5e                   	pop    esi
c0023227:	5f                   	pop    edi
c0023228:	5d                   	pop    ebp
c0023229:	c3                   	ret    

c002322a <ideChannel0IRQHandler(regs*, void*)>:
c002322a:	83 ec 10             	sub    esp,0x10
c002322d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023231:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0023238:	6a 07                	push   0x7
c002323a:	6a 00                	push   0x0
c002323c:	50                   	push   eax
c002323d:	e8 d4 fe ff ff       	call   c0023116 <IDE::read(unsigned char, unsigned char)>
c0023242:	83 c4 1c             	add    esp,0x1c
c0023245:	c3                   	ret    

c0023246 <ideChannel1IRQHandler(regs*, void*)>:
c0023246:	83 ec 10             	sub    esp,0x10
c0023249:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002324d:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0023254:	6a 07                	push   0x7
c0023256:	6a 01                	push   0x1
c0023258:	50                   	push   eax
c0023259:	e8 b8 fe ff ff       	call   c0023116 <IDE::read(unsigned char, unsigned char)>
c002325e:	83 c4 1c             	add    esp,0x1c
c0023261:	c3                   	ret    

c0023262 <IDE::enableIRQs(unsigned char, bool)>:
c0023262:	57                   	push   edi
c0023263:	56                   	push   esi
c0023264:	be 04 00 00 00       	mov    esi,0x4
c0023269:	53                   	push   ebx
c002326a:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c002326f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023273:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0023278:	0f 94 c0             	sete   al
c002327b:	d1 e0                	shl    eax,1
c002327d:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0023284:	0f b6 c0             	movzx  eax,al
c0023287:	50                   	push   eax
c0023288:	6a 0c                	push   0xc
c002328a:	57                   	push   edi
c002328b:	53                   	push   ebx
c002328c:	e8 c5 fd ff ff       	call   c0023056 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023291:	83 c4 10             	add    esp,0x10
c0023294:	50                   	push   eax
c0023295:	6a 0c                	push   0xc
c0023297:	57                   	push   edi
c0023298:	53                   	push   ebx
c0023299:	e8 78 fe ff ff       	call   c0023116 <IDE::read(unsigned char, unsigned char)>
c002329e:	83 c4 10             	add    esp,0x10
c00232a1:	4e                   	dec    esi
c00232a2:	75 f0                	jne    c0023294 <IDE::enableIRQs(unsigned char, bool)+0x32>
c00232a4:	5b                   	pop    ebx
c00232a5:	5e                   	pop    esi
c00232a6:	5f                   	pop    edi
c00232a7:	c3                   	ret    

c00232a8 <IDE::open(int, int, void*)>:
c00232a8:	55                   	push   ebp
c00232a9:	57                   	push   edi
c00232aa:	56                   	push   esi
c00232ab:	53                   	push   ebx
c00232ac:	83 ec 1c             	sub    esp,0x1c
c00232af:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00232b3:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c00232bc:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c00232c5:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c00232cc:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c00232d3:	0f 85 b0 02 00 00    	jne    c0023589 <IDE::open(int, int, void*)+0x2e1>
c00232d9:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c00232df:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00232e3:	83 e0 7f             	and    eax,0x7f
c00232e6:	3c 05                	cmp    al,0x5
c00232e8:	74 04                	je     c00232ee <IDE::open(int, int, void*)+0x46>
c00232ea:	3c 0f                	cmp    al,0xf
c00232ec:	75 32                	jne    c0023320 <IDE::open(int, int, void*)+0x78>
c00232ee:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c00232f4:	83 e0 fc             	and    eax,0xfffffffc
c00232f7:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00232fe:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023304:	83 e0 fc             	and    eax,0xfffffffc
c0023307:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002330e:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0023314:	83 e0 fc             	and    eax,0xfffffffc
c0023317:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002331e:	eb 14                	jmp    c0023334 <IDE::open(int, int, void*)+0x8c>
c0023320:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c002332a:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023334:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c002333b:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0023342:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023346:	89 c6                	mov    esi,eax
c0023348:	bf f8 0c 00 00       	mov    edi,0xcf8
c002334d:	c1 e6 10             	shl    esi,0x10
c0023350:	89 e8                	mov    eax,ebp
c0023352:	89 fa                	mov    edx,edi
c0023354:	c1 e0 0b             	shl    eax,0xb
c0023357:	09 f0                	or     eax,esi
c0023359:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0023360:	c1 e6 08             	shl    esi,0x8
c0023363:	09 c6                	or     esi,eax
c0023365:	89 f0                	mov    eax,esi
c0023367:	0d 08 00 00 80       	or     eax,0x80000008
c002336c:	ef                   	out    dx,eax
c002336d:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0023372:	89 ca                	mov    edx,ecx
c0023374:	ed                   	in     eax,dx
c0023375:	c1 e8 10             	shr    eax,0x10
c0023378:	3d ff ff 00 00       	cmp    eax,0xffff
c002337d:	0f 84 f5 00 00 00    	je     c0023478 <IDE::open(int, int, void*)+0x1d0>
c0023383:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0023389:	89 fa                	mov    edx,edi
c002338b:	89 f0                	mov    eax,esi
c002338d:	ef                   	out    dx,eax
c002338e:	b0 fe                	mov    al,0xfe
c0023390:	89 ca                	mov    edx,ecx
c0023392:	ee                   	out    dx,al
c0023393:	89 f0                	mov    eax,esi
c0023395:	89 fa                	mov    edx,edi
c0023397:	ef                   	out    dx,eax
c0023398:	89 ca                	mov    edx,ecx
c002339a:	ed                   	in     eax,dx
c002339b:	3c fe                	cmp    al,0xfe
c002339d:	0f 85 a9 00 00 00    	jne    c002344c <IDE::open(int, int, void*)+0x1a4>
c00233a3:	8b 15 48 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e648
c00233a9:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c00233b0:	74 33                	je     c00233e5 <IDE::open(int, int, void*)+0x13d>
c00233b2:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c00233b8:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c00233bc:	40                   	inc    eax
c00233bd:	83 ec 0c             	sub    esp,0xc
c00233c0:	0f b6 c0             	movzx  eax,al
c00233c3:	50                   	push   eax
c00233c4:	55                   	push   ebp
c00233c5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00233c9:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c00233cf:	51                   	push   ecx
c00233d0:	e8 a7 4e ff ff       	call   c001827c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c00233d5:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c00233da:	83 c4 1c             	add    esp,0x1c
c00233dd:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00233e3:	eb 0a                	jmp    c00233ef <IDE::open(int, int, void*)+0x147>
c00233e5:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c00233ef:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c00233f6:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c00233fd:	c1 e1 10             	shl    ecx,0x10
c0023400:	c1 e0 08             	shl    eax,0x8
c0023403:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023408:	09 c1                	or     ecx,eax
c002340a:	89 fa                	mov    edx,edi
c002340c:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0023413:	c1 e0 0b             	shl    eax,0xb
c0023416:	09 c1                	or     ecx,eax
c0023418:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c002341e:	89 c8                	mov    eax,ecx
c0023420:	ef                   	out    dx,eax
c0023421:	be fc 0c 00 00       	mov    esi,0xcfc
c0023426:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c002342c:	89 f2                	mov    edx,esi
c002342e:	ee                   	out    dx,al
c002342f:	89 c8                	mov    eax,ecx
c0023431:	89 fa                	mov    edx,edi
c0023433:	ef                   	out    dx,eax
c0023434:	89 f2                	mov    edx,esi
c0023436:	ed                   	in     eax,dx
c0023437:	0f b6 c0             	movzx  eax,al
c002343a:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0023440:	74 46                	je     c0023488 <IDE::open(int, int, void*)+0x1e0>
c0023442:	83 ec 0c             	sub    esp,0xc
c0023445:	68 d8 cc 02 c0       	push   0xc002ccd8
c002344a:	eb 34                	jmp    c0023480 <IDE::open(int, int, void*)+0x1d8>
c002344c:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0023455:	75 17                	jne    c002346e <IDE::open(int, int, void*)+0x1c6>
c0023457:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c002345c:	74 07                	je     c0023465 <IDE::open(int, int, void*)+0x1bd>
c002345e:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0023463:	75 09                	jne    c002346e <IDE::open(int, int, void*)+0x1c6>
c0023465:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002346c:	eb 1a                	jmp    c0023488 <IDE::open(int, int, void*)+0x1e0>
c002346e:	83 ec 0c             	sub    esp,0xc
c0023471:	68 e0 cc 02 c0       	push   0xc002cce0
c0023476:	eb 08                	jmp    c0023480 <IDE::open(int, int, void*)+0x1d8>
c0023478:	83 ec 0c             	sub    esp,0xc
c002347b:	68 11 cd 02 c0       	push   0xc002cd11
c0023480:	e8 9e 71 ff ff       	call   c001a623 <Krnl::panic(char const*)>
c0023485:	83 c4 10             	add    esp,0x10
c0023488:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c002348f:	79 1a                	jns    c00234ab <IDE::open(int, int, void*)+0x203>
c0023491:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0023497:	83 e0 fc             	and    eax,0xfffffffc
c002349a:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c00234a1:	83 c0 08             	add    eax,0x8
c00234a4:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c00234ab:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00234b1:	89 c2                	mov    edx,eax
c00234b3:	83 e2 0f             	and    edx,0xf
c00234b6:	66 83 fa 08          	cmp    dx,0x8
c00234ba:	75 0a                	jne    c00234c6 <IDE::open(int, int, void*)+0x21e>
c00234bc:	83 e8 02             	sub    eax,0x2
c00234bf:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00234c6:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c00234cc:	89 c2                	mov    edx,eax
c00234ce:	83 e2 0f             	and    edx,0xf
c00234d1:	66 83 fa 08          	cmp    dx,0x8
c00234d5:	75 0a                	jne    c00234e1 <IDE::open(int, int, void*)+0x239>
c00234d7:	83 e8 02             	sub    eax,0x2
c00234da:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00234e1:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00234e8:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c00234ef:	89 d0                	mov    eax,edx
c00234f1:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00234f4:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00234f8:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c00234fc:	8d 4a 01             	lea    ecx,[edx+0x1]
c00234ff:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023504:	0f b6 c9             	movzx  ecx,cl
c0023507:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c002350e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023511:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023515:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0023519:	8d 50 02             	lea    edx,[eax+0x2]
c002351c:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023521:	0f b6 d2             	movzx  edx,dl
c0023524:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c002352a:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002352d:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023531:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0023535:	8d 48 03             	lea    ecx,[eax+0x3]
c0023538:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002353d:	0f b6 c9             	movzx  ecx,cl
c0023540:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0023546:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023549:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002354d:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0023551:	8d 50 04             	lea    edx,[eax+0x4]
c0023554:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c002355a:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c002355f:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0023566:	66 85 f6             	test   si,si
c0023569:	74 3e                	je     c00235a9 <IDE::open(int, int, void*)+0x301>
c002356b:	0f b6 d2             	movzx  edx,dl
c002356e:	83 c0 05             	add    eax,0x5
c0023571:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023574:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023578:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c002357c:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0023582:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023587:	eb 20                	jmp    c00235a9 <IDE::open(int, int, void*)+0x301>
c0023589:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023593:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c002359d:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00235a4:	e9 02 ff ff ff       	jmp    c00234ab <IDE::open(int, int, void*)+0x203>
c00235a9:	52                   	push   edx
c00235aa:	52                   	push   edx
c00235ab:	6a 00                	push   0x0
c00235ad:	53                   	push   ebx
c00235ae:	e8 7d fa ff ff       	call   c0023030 <IDE::prepareInterrupt(unsigned char)>
c00235b3:	59                   	pop    ecx
c00235b4:	5e                   	pop    esi
c00235b5:	6a 01                	push   0x1
c00235b7:	53                   	push   ebx
c00235b8:	e8 73 fa ff ff       	call   c0023030 <IDE::prepareInterrupt(unsigned char)>
c00235bd:	83 c4 0c             	add    esp,0xc
c00235c0:	6a 00                	push   0x0
c00235c2:	6a 00                	push   0x0
c00235c4:	53                   	push   ebx
c00235c5:	e8 98 fc ff ff       	call   c0023262 <IDE::enableIRQs(unsigned char, bool)>
c00235ca:	83 c4 0c             	add    esp,0xc
c00235cd:	6a 00                	push   0x0
c00235cf:	6a 01                	push   0x1
c00235d1:	53                   	push   ebx
c00235d2:	e8 8b fc ff ff       	call   c0023262 <IDE::enableIRQs(unsigned char, bool)>
c00235d7:	83 c4 10             	add    esp,0x10
c00235da:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00235e1:	74 40                	je     c0023623 <IDE::open(int, int, void*)+0x37b>
c00235e3:	83 ec 0c             	sub    esp,0xc
c00235e6:	68 3b cd 02 c0       	push   0xc002cd3b
c00235eb:	e8 81 f9 fe ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c00235f0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00235f3:	6a 01                	push   0x1
c00235f5:	68 2a 32 02 c0       	push   0xc002322a
c00235fa:	6a 0e                	push   0xe
c00235fc:	53                   	push   ebx
c00235fd:	e8 1a 0d ff ff       	call   c001431c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023602:	83 c4 14             	add    esp,0x14
c0023605:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002360b:	53                   	push   ebx
c002360c:	6a 01                	push   0x1
c002360e:	68 46 32 02 c0       	push   0xc0023246
c0023613:	6a 0f                	push   0xf
c0023615:	53                   	push   ebx
c0023616:	e8 01 0d ff ff       	call   c001431c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002361b:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0023621:	eb 4a                	jmp    c002366d <IDE::open(int, int, void*)+0x3c5>
c0023623:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c002362d:	50                   	push   eax
c002362e:	6a 0f                	push   0xf
c0023630:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023636:	68 57 cd 02 c0       	push   0xc002cd57
c002363b:	e8 31 f9 fe ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0023640:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023643:	6a 00                	push   0x0
c0023645:	68 2a 32 02 c0       	push   0xc002322a
c002364a:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023650:	53                   	push   ebx
c0023651:	e8 c6 0c ff ff       	call   c001431c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023656:	83 c4 14             	add    esp,0x14
c0023659:	53                   	push   ebx
c002365a:	6a 00                	push   0x0
c002365c:	68 46 32 02 c0       	push   0xc0023246
c0023661:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0023667:	53                   	push   ebx
c0023668:	e8 af 0c ff ff       	call   c001431c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002366d:	8b 03                	mov    eax,DWORD PTR [ebx]
c002366f:	83 c4 20             	add    esp,0x20
c0023672:	83 ec 0c             	sub    esp,0xc
c0023675:	53                   	push   ebx
c0023676:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0023679:	83 c4 0c             	add    esp,0xc
c002367c:	6a 07                	push   0x7
c002367e:	6a 00                	push   0x0
c0023680:	53                   	push   ebx
c0023681:	e8 90 fa ff ff       	call   c0023116 <IDE::read(unsigned char, unsigned char)>
c0023686:	83 c4 0c             	add    esp,0xc
c0023689:	6a 07                	push   0x7
c002368b:	6a 01                	push   0x1
c002368d:	53                   	push   ebx
c002368e:	e8 83 fa ff ff       	call   c0023116 <IDE::read(unsigned char, unsigned char)>
c0023693:	83 c4 0c             	add    esp,0xc
c0023696:	6a 01                	push   0x1
c0023698:	6a 00                	push   0x0
c002369a:	53                   	push   ebx
c002369b:	e8 c2 fb ff ff       	call   c0023262 <IDE::enableIRQs(unsigned char, bool)>
c00236a0:	83 c4 0c             	add    esp,0xc
c00236a3:	6a 01                	push   0x1
c00236a5:	6a 01                	push   0x1
c00236a7:	53                   	push   ebx
c00236a8:	e8 b5 fb ff ff       	call   c0023262 <IDE::enableIRQs(unsigned char, bool)>
c00236ad:	83 c4 2c             	add    esp,0x2c
c00236b0:	31 c0                	xor    eax,eax
c00236b2:	5b                   	pop    ebx
c00236b3:	5e                   	pop    esi
c00236b4:	5f                   	pop    edi
c00236b5:	5d                   	pop    ebp
c00236b6:	c3                   	ret    
c00236b7:	90                   	nop

c00236b8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c00236b8:	55                   	push   ebp
c00236b9:	57                   	push   edi
c00236ba:	56                   	push   esi
c00236bb:	53                   	push   ebx
c00236bc:	83 ec 1c             	sub    esp,0x1c
c00236bf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00236c3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00236c7:	8d 50 f8             	lea    edx,[eax-0x8]
c00236ca:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00236ce:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00236d2:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00236d6:	80 fa 03             	cmp    dl,0x3
c00236d9:	77 5d                	ja     c0023738 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c00236db:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00236df:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00236e3:	0f b6 db             	movzx  ebx,bl
c00236e6:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c00236e9:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c00236ed:	83 ca 80             	or     edx,0xffffff80
c00236f0:	0f b6 d2             	movzx  edx,dl
c00236f3:	52                   	push   edx
c00236f4:	6a 0c                	push   0xc
c00236f6:	53                   	push   ebx
c00236f7:	56                   	push   esi
c00236f8:	e8 59 f9 ff ff       	call   c0023056 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00236fd:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0023702:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023706:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002370a:	0f b6 c0             	movzx  eax,al
c002370d:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0023711:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023713:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0023718:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c002371c:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0023720:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023724:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002372c:	83 c4 2c             	add    esp,0x2c
c002372f:	5b                   	pop    ebx
c0023730:	5e                   	pop    esi
c0023731:	5f                   	pop    edi
c0023732:	5d                   	pop    ebp
c0023733:	e9 1e f9 ff ff       	jmp    c0023056 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023738:	3c 07                	cmp    al,0x7
c002373a:	77 10                	ja     c002374c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c002373c:	0f b6 db             	movzx  ebx,bl
c002373f:	0f b6 d0             	movzx  edx,al
c0023742:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c002374a:	eb 2d                	jmp    c0023779 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c002374c:	3c 0d                	cmp    al,0xd
c002374e:	77 13                	ja     c0023763 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0023750:	0f b6 db             	movzx  ebx,bl
c0023753:	0f b6 c0             	movzx  eax,al
c0023756:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c002375d:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0023761:	eb 16                	jmp    c0023779 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023763:	3c 15                	cmp    al,0x15
c0023765:	77 14                	ja     c002377b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0023767:	0f b6 db             	movzx  ebx,bl
c002376a:	0f b6 c0             	movzx  eax,al
c002376d:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0023775:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0023779:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002377b:	83 c4 1c             	add    esp,0x1c
c002377e:	5b                   	pop    ebx
c002377f:	5e                   	pop    esi
c0023780:	5f                   	pop    edi
c0023781:	5d                   	pop    ebp
c0023782:	c3                   	ret    
c0023783:	90                   	nop

c0023784 <IDE::detect()>:
c0023784:	55                   	push   ebp
c0023785:	57                   	push   edi
c0023786:	56                   	push   esi
c0023787:	53                   	push   ebx
c0023788:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002378e:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0023795:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c002379c:	0f 85 be 02 00 00    	jne    c0023a60 <IDE::detect()+0x2dc>
c00237a2:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c00237a9:	31 f6                	xor    esi,esi
c00237ab:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00237b3:	31 ed                	xor    ebp,ebp
c00237b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00237b9:	c1 e0 06             	shl    eax,0x6
c00237bc:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c00237c4:	89 e8                	mov    eax,ebp
c00237c6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00237ca:	c1 e0 04             	shl    eax,0x4
c00237cd:	83 c8 a0             	or     eax,0xffffffa0
c00237d0:	0f b6 c0             	movzx  eax,al
c00237d3:	50                   	push   eax
c00237d4:	6a 06                	push   0x6
c00237d6:	56                   	push   esi
c00237d7:	53                   	push   ebx
c00237d8:	e8 79 f8 ff ff       	call   c0023056 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00237dd:	83 c4 0c             	add    esp,0xc
c00237e0:	6a 0c                	push   0xc
c00237e2:	56                   	push   esi
c00237e3:	53                   	push   ebx
c00237e4:	e8 2d f9 ff ff       	call   c0023116 <IDE::read(unsigned char, unsigned char)>
c00237e9:	83 c4 0c             	add    esp,0xc
c00237ec:	6a 0c                	push   0xc
c00237ee:	56                   	push   esi
c00237ef:	53                   	push   ebx
c00237f0:	e8 21 f9 ff ff       	call   c0023116 <IDE::read(unsigned char, unsigned char)>
c00237f5:	83 c4 0c             	add    esp,0xc
c00237f8:	6a 0c                	push   0xc
c00237fa:	56                   	push   esi
c00237fb:	53                   	push   ebx
c00237fc:	e8 15 f9 ff ff       	call   c0023116 <IDE::read(unsigned char, unsigned char)>
c0023801:	83 c4 0c             	add    esp,0xc
c0023804:	6a 0c                	push   0xc
c0023806:	56                   	push   esi
c0023807:	53                   	push   ebx
c0023808:	e8 09 f9 ff ff       	call   c0023116 <IDE::read(unsigned char, unsigned char)>
c002380d:	68 ec 00 00 00       	push   0xec
c0023812:	6a 07                	push   0x7
c0023814:	56                   	push   esi
c0023815:	53                   	push   ebx
c0023816:	e8 3b f8 ff ff       	call   c0023056 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002381b:	83 c4 1c             	add    esp,0x1c
c002381e:	6a 0c                	push   0xc
c0023820:	56                   	push   esi
c0023821:	53                   	push   ebx
c0023822:	e8 ef f8 ff ff       	call   c0023116 <IDE::read(unsigned char, unsigned char)>
c0023827:	83 c4 0c             	add    esp,0xc
c002382a:	6a 0c                	push   0xc
c002382c:	56                   	push   esi
c002382d:	53                   	push   ebx
c002382e:	e8 e3 f8 ff ff       	call   c0023116 <IDE::read(unsigned char, unsigned char)>
c0023833:	83 c4 0c             	add    esp,0xc
c0023836:	6a 0c                	push   0xc
c0023838:	56                   	push   esi
c0023839:	53                   	push   ebx
c002383a:	e8 d7 f8 ff ff       	call   c0023116 <IDE::read(unsigned char, unsigned char)>
c002383f:	83 c4 0c             	add    esp,0xc
c0023842:	6a 0c                	push   0xc
c0023844:	56                   	push   esi
c0023845:	53                   	push   ebx
c0023846:	e8 cb f8 ff ff       	call   c0023116 <IDE::read(unsigned char, unsigned char)>
c002384b:	83 c4 0c             	add    esp,0xc
c002384e:	6a 0c                	push   0xc
c0023850:	56                   	push   esi
c0023851:	53                   	push   ebx
c0023852:	e8 bf f8 ff ff       	call   c0023116 <IDE::read(unsigned char, unsigned char)>
c0023857:	83 c4 10             	add    esp,0x10
c002385a:	84 c0                	test   al,al
c002385c:	0f 84 8b 01 00 00    	je     c00239ed <IDE::detect()+0x269>
c0023862:	31 ff                	xor    edi,edi
c0023864:	50                   	push   eax
c0023865:	6a 0c                	push   0xc
c0023867:	56                   	push   esi
c0023868:	53                   	push   ebx
c0023869:	e8 a8 f8 ff ff       	call   c0023116 <IDE::read(unsigned char, unsigned char)>
c002386e:	83 c4 10             	add    esp,0x10
c0023871:	a8 01                	test   al,0x1
c0023873:	0f 85 8e 01 00 00    	jne    c0023a07 <IDE::detect()+0x283>
c0023879:	84 c0                	test   al,al
c002387b:	78 04                	js     c0023881 <IDE::detect()+0xfd>
c002387d:	a8 08                	test   al,0x8
c002387f:	75 27                	jne    c00238a8 <IDE::detect()+0x124>
c0023881:	47                   	inc    edi
c0023882:	81 ff 17 01 00 00    	cmp    edi,0x117
c0023888:	7e da                	jle    c0023864 <IDE::detect()+0xe0>
c002388a:	50                   	push   eax
c002388b:	50                   	push   eax
c002388c:	6a 00                	push   0x0
c002388e:	68 40 4b 4c 00       	push   0x4c4b40
c0023893:	e8 00 ab ff ff       	call   c001e398 <nanoSleep(unsigned long long)>
c0023898:	83 c4 10             	add    esp,0x10
c002389b:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c00238a1:	75 c1                	jne    c0023864 <IDE::detect()+0xe0>
c00238a3:	e9 5f 01 00 00       	jmp    c0023a07 <IDE::detect()+0x283>
c00238a8:	31 c9                	xor    ecx,ecx
c00238aa:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00238ae:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00238b2:	83 ec 0c             	sub    esp,0xc
c00238b5:	68 80 00 00 00       	push   0x80
c00238ba:	57                   	push   edi
c00238bb:	6a 00                	push   0x0
c00238bd:	56                   	push   esi
c00238be:	53                   	push   ebx
c00238bf:	e8 f4 fd ff ff       	call   c00236b8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c00238c4:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c00238c9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00238cd:	89 d1                	mov    ecx,edx
c00238cf:	c1 e0 06             	shl    eax,0x6
c00238d2:	01 d8                	add    eax,ebx
c00238d4:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c00238db:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c00238e2:	89 f2                	mov    edx,esi
c00238e4:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c00238ea:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00238ee:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c00238f4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00238f8:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c00238ff:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0023907:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c002390e:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0023916:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c002391c:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0023923:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0023929:	8d 54 24 58          	lea    edx,[esp+0x58]
c002392d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0023931:	83 c4 20             	add    esp,0x20
c0023934:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0023937:	83 c0 02             	add    eax,0x2
c002393a:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0023940:	83 c7 02             	add    edi,0x2
c0023943:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0023946:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c002394c:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0023950:	75 e2                	jne    c0023934 <IDE::detect()+0x1b0>
c0023952:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023956:	c1 e0 06             	shl    eax,0x6
c0023959:	01 d8                	add    eax,ebx
c002395b:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0023961:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0023968:	66 c1 ea 09          	shr    dx,0x9
c002396c:	83 e2 01             	and    edx,0x1
c002396f:	84 c9                	test   cl,cl
c0023971:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0023977:	75 2f                	jne    c00239a8 <IDE::detect()+0x224>
c0023979:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c002397f:	85 c0                	test   eax,eax
c0023981:	74 66                	je     c00239e9 <IDE::detect()+0x265>
c0023983:	50                   	push   eax
c0023984:	55                   	push   ebp
c0023985:	56                   	push   esi
c0023986:	68 73 cd 02 c0       	push   0xc002cd73
c002398b:	e8 e1 f5 fe ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0023990:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023997:	e8 a4 be fe ff       	call   c000f840 <malloc>
c002399c:	89 c7                	mov    edi,eax
c002399e:	89 04 24             	mov    DWORD PTR [esp],eax
c00239a1:	e8 78 06 00 00       	call   c002401e <ATA::ATA()>
c00239a6:	eb 28                	jmp    c00239d0 <IDE::detect()+0x24c>
c00239a8:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c00239ae:	55                   	push   ebp
c00239af:	56                   	push   esi
c00239b0:	68 a2 cd 02 c0       	push   0xc002cda2
c00239b5:	e8 b7 f5 fe ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c00239ba:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c00239c1:	e8 7a be fe ff       	call   c000f840 <malloc>
c00239c6:	89 c7                	mov    edi,eax
c00239c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00239cb:	e8 8e 0c 00 00       	call   c002465e <ATAPI::ATAPI()>
c00239d0:	5a                   	pop    edx
c00239d1:	59                   	pop    ecx
c00239d2:	57                   	push   edi
c00239d3:	53                   	push   ebx
c00239d4:	e8 bf 09 ff ff       	call   c0014398 <Device::addChild(Device*)>
c00239d9:	8b 07                	mov    eax,DWORD PTR [edi]
c00239db:	53                   	push   ebx
c00239dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00239e0:	6a 00                	push   0x0
c00239e2:	57                   	push   edi
c00239e3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00239e6:	83 c4 20             	add    esp,0x20
c00239e9:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00239ed:	4d                   	dec    ebp
c00239ee:	74 0a                	je     c00239fa <IDE::detect()+0x276>
c00239f0:	bd 01 00 00 00       	mov    ebp,0x1
c00239f5:	e9 bb fd ff ff       	jmp    c00237b5 <IDE::detect()+0x31>
c00239fa:	4e                   	dec    esi
c00239fb:	74 63                	je     c0023a60 <IDE::detect()+0x2dc>
c00239fd:	be 01 00 00 00       	mov    esi,0x1
c0023a02:	e9 ac fd ff ff       	jmp    c00237b3 <IDE::detect()+0x2f>
c0023a07:	50                   	push   eax
c0023a08:	6a 04                	push   0x4
c0023a0a:	56                   	push   esi
c0023a0b:	53                   	push   ebx
c0023a0c:	e8 05 f7 ff ff       	call   c0023116 <IDE::read(unsigned char, unsigned char)>
c0023a11:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023a15:	83 c4 0c             	add    esp,0xc
c0023a18:	6a 05                	push   0x5
c0023a1a:	56                   	push   esi
c0023a1b:	53                   	push   ebx
c0023a1c:	e8 f5 f6 ff ff       	call   c0023116 <IDE::read(unsigned char, unsigned char)>
c0023a21:	83 c4 10             	add    esp,0x10
c0023a24:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0023a28:	80 fa 14             	cmp    dl,0x14
c0023a2b:	75 04                	jne    c0023a31 <IDE::detect()+0x2ad>
c0023a2d:	3c eb                	cmp    al,0xeb
c0023a2f:	eb 07                	jmp    c0023a38 <IDE::detect()+0x2b4>
c0023a31:	3c 96                	cmp    al,0x96
c0023a33:	75 b8                	jne    c00239ed <IDE::detect()+0x269>
c0023a35:	80 fa 69             	cmp    dl,0x69
c0023a38:	75 b3                	jne    c00239ed <IDE::detect()+0x269>
c0023a3a:	68 a1 00 00 00       	push   0xa1
c0023a3f:	6a 07                	push   0x7
c0023a41:	56                   	push   esi
c0023a42:	53                   	push   ebx
c0023a43:	e8 0e f6 ff ff       	call   c0023056 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a48:	5f                   	pop    edi
c0023a49:	58                   	pop    eax
c0023a4a:	6a 00                	push   0x0
c0023a4c:	68 40 42 0f 00       	push   0xf4240
c0023a51:	e8 42 a9 ff ff       	call   c001e398 <nanoSleep(unsigned long long)>
c0023a56:	83 c4 10             	add    esp,0x10
c0023a59:	b1 01                	mov    cl,0x1
c0023a5b:	e9 4a fe ff ff       	jmp    c00238aa <IDE::detect()+0x126>
c0023a60:	81 c4 1c 02 00 00    	add    esp,0x21c
c0023a66:	5b                   	pop    ebx
c0023a67:	5e                   	pop    esi
c0023a68:	5f                   	pop    edi
c0023a69:	5d                   	pop    ebp
c0023a6a:	c3                   	ret    
c0023a6b:	90                   	nop

c0023a6c <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0023a6c:	55                   	push   ebp
c0023a6d:	57                   	push   edi
c0023a6e:	56                   	push   esi
c0023a6f:	53                   	push   ebx
c0023a70:	83 ec 1c             	sub    esp,0x1c
c0023a73:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023a77:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023a7b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023a7f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0023a83:	88 c3                	mov    bl,al
c0023a85:	84 c0                	test   al,al
c0023a87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023a8b:	0f 84 67 01 00 00    	je     c0023bf8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0023a91:	83 ec 0c             	sub    esp,0xc
c0023a94:	68 d3 cd 02 c0       	push   0xc002cdd3
c0023a99:	e8 d3 f4 fe ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0023a9e:	83 c4 10             	add    esp,0x10
c0023aa1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023aa5:	3c 01                	cmp    al,0x1
c0023aa7:	75 17                	jne    c0023ac0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0023aa9:	83 ec 0c             	sub    esp,0xc
c0023aac:	b3 13                	mov    bl,0x13
c0023aae:	68 df cd 02 c0       	push   0xc002cddf
c0023ab3:	e8 b9 f4 fe ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0023ab8:	83 c4 10             	add    esp,0x10
c0023abb:	e9 25 01 00 00       	jmp    c0023be5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023ac0:	3c 02                	cmp    al,0x2
c0023ac2:	0f 85 ef 00 00 00    	jne    c0023bb7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0023ac8:	d1 e6                	shl    esi,1
c0023aca:	09 ee                	or     esi,ebp
c0023acc:	52                   	push   edx
c0023acd:	89 f0                	mov    eax,esi
c0023acf:	6a 01                	push   0x1
c0023ad1:	0f b6 f0             	movzx  esi,al
c0023ad4:	c1 e6 06             	shl    esi,0x6
c0023ad7:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023adf:	50                   	push   eax
c0023ae0:	57                   	push   edi
c0023ae1:	e8 30 f6 ff ff       	call   c0023116 <IDE::read(unsigned char, unsigned char)>
c0023ae6:	83 c4 10             	add    esp,0x10
c0023ae9:	89 c6                	mov    esi,eax
c0023aeb:	a8 01                	test   al,0x1
c0023aed:	74 12                	je     c0023b01 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0023aef:	83 ec 0c             	sub    esp,0xc
c0023af2:	b3 07                	mov    bl,0x7
c0023af4:	68 f4 cd 02 c0       	push   0xc002cdf4
c0023af9:	e8 73 f4 fe ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0023afe:	83 c4 10             	add    esp,0x10
c0023b01:	f7 c6 02 00 00 00    	test   esi,0x2
c0023b07:	74 12                	je     c0023b1b <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0023b09:	83 ec 0c             	sub    esp,0xc
c0023b0c:	b3 03                	mov    bl,0x3
c0023b0e:	68 12 ce 02 c0       	push   0xc002ce12
c0023b13:	e8 59 f4 fe ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0023b18:	83 c4 10             	add    esp,0x10
c0023b1b:	f7 c6 04 00 00 00    	test   esi,0x4
c0023b21:	74 12                	je     c0023b35 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0023b23:	83 ec 0c             	sub    esp,0xc
c0023b26:	b3 14                	mov    bl,0x14
c0023b28:	68 32 ce 02 c0       	push   0xc002ce32
c0023b2d:	e8 3f f4 fe ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0023b32:	83 c4 10             	add    esp,0x10
c0023b35:	f7 c6 08 00 00 00    	test   esi,0x8
c0023b3b:	74 12                	je     c0023b4f <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0023b3d:	83 ec 0c             	sub    esp,0xc
c0023b40:	b3 03                	mov    bl,0x3
c0023b42:	68 12 ce 02 c0       	push   0xc002ce12
c0023b47:	e8 25 f4 fe ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0023b4c:	83 c4 10             	add    esp,0x10
c0023b4f:	f7 c6 10 00 00 00    	test   esi,0x10
c0023b55:	74 12                	je     c0023b69 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0023b57:	83 ec 0c             	sub    esp,0xc
c0023b5a:	b3 15                	mov    bl,0x15
c0023b5c:	68 4a ce 02 c0       	push   0xc002ce4a
c0023b61:	e8 0b f4 fe ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0023b66:	83 c4 10             	add    esp,0x10
c0023b69:	f7 c6 20 00 00 00    	test   esi,0x20
c0023b6f:	74 12                	je     c0023b83 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0023b71:	83 ec 0c             	sub    esp,0xc
c0023b74:	b3 03                	mov    bl,0x3
c0023b76:	68 12 ce 02 c0       	push   0xc002ce12
c0023b7b:	e8 f1 f3 fe ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0023b80:	83 c4 10             	add    esp,0x10
c0023b83:	f7 c6 40 00 00 00    	test   esi,0x40
c0023b89:	74 12                	je     c0023b9d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0023b8b:	83 ec 0c             	sub    esp,0xc
c0023b8e:	b3 16                	mov    bl,0x16
c0023b90:	68 64 ce 02 c0       	push   0xc002ce64
c0023b95:	e8 d7 f3 fe ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0023b9a:	83 c4 10             	add    esp,0x10
c0023b9d:	89 f0                	mov    eax,esi
c0023b9f:	84 c0                	test   al,al
c0023ba1:	79 42                	jns    c0023be5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023ba3:	83 ec 0c             	sub    esp,0xc
c0023ba6:	b3 0d                	mov    bl,0xd
c0023ba8:	68 85 ce 02 c0       	push   0xc002ce85
c0023bad:	e8 bf f3 fe ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0023bb2:	83 c4 10             	add    esp,0x10
c0023bb5:	eb 2e                	jmp    c0023be5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023bb7:	3c 03                	cmp    al,0x3
c0023bb9:	75 14                	jne    c0023bcf <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0023bbb:	83 ec 0c             	sub    esp,0xc
c0023bbe:	b3 17                	mov    bl,0x17
c0023bc0:	68 99 ce 02 c0       	push   0xc002ce99
c0023bc5:	e8 a7 f3 fe ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0023bca:	83 c4 10             	add    esp,0x10
c0023bcd:	eb 16                	jmp    c0023be5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023bcf:	3c 04                	cmp    al,0x4
c0023bd1:	75 12                	jne    c0023be5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023bd3:	83 ec 0c             	sub    esp,0xc
c0023bd6:	b3 08                	mov    bl,0x8
c0023bd8:	68 af ce 02 c0       	push   0xc002ceaf
c0023bdd:	e8 8f f3 fe ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0023be2:	83 c4 10             	add    esp,0x10
c0023be5:	50                   	push   eax
c0023be6:	50                   	push   eax
c0023be7:	0f b6 c3             	movzx  eax,bl
c0023bea:	50                   	push   eax
c0023beb:	68 c7 ce 02 c0       	push   0xc002cec7
c0023bf0:	e8 7c f3 fe ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0023bf5:	83 c4 10             	add    esp,0x10
c0023bf8:	83 c4 1c             	add    esp,0x1c
c0023bfb:	88 d8                	mov    al,bl
c0023bfd:	5b                   	pop    ebx
c0023bfe:	5e                   	pop    esi
c0023bff:	5f                   	pop    edi
c0023c00:	5d                   	pop    ebp
c0023c01:	c3                   	ret    

c0023c02 <IDE::polling(unsigned char, unsigned int)>:
c0023c02:	57                   	push   edi
c0023c03:	56                   	push   esi
c0023c04:	53                   	push   ebx
c0023c05:	bb 04 00 00 00       	mov    ebx,0x4
c0023c0a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023c0e:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023c13:	52                   	push   edx
c0023c14:	6a 0c                	push   0xc
c0023c16:	56                   	push   esi
c0023c17:	57                   	push   edi
c0023c18:	e8 f9 f4 ff ff       	call   c0023116 <IDE::read(unsigned char, unsigned char)>
c0023c1d:	83 c4 10             	add    esp,0x10
c0023c20:	4b                   	dec    ebx
c0023c21:	75 f0                	jne    c0023c13 <IDE::polling(unsigned char, unsigned int)+0x11>
c0023c23:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023c28:	50                   	push   eax
c0023c29:	6a 0c                	push   0xc
c0023c2b:	56                   	push   esi
c0023c2c:	57                   	push   edi
c0023c2d:	e8 e4 f4 ff ff       	call   c0023116 <IDE::read(unsigned char, unsigned char)>
c0023c32:	83 c4 10             	add    esp,0x10
c0023c35:	a8 01                	test   al,0x1
c0023c37:	74 12                	je     c0023c4b <IDE::polling(unsigned char, unsigned int)+0x49>
c0023c39:	83 ec 0c             	sub    esp,0xc
c0023c3c:	68 e1 ce 02 c0       	push   0xc002cee1
c0023c41:	e8 2b f3 fe ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0023c46:	83 c4 10             	add    esp,0x10
c0023c49:	eb 17                	jmp    c0023c62 <IDE::polling(unsigned char, unsigned int)+0x60>
c0023c4b:	a8 20                	test   al,0x20
c0023c4d:	75 0f                	jne    c0023c5e <IDE::polling(unsigned char, unsigned int)+0x5c>
c0023c4f:	4b                   	dec    ebx
c0023c50:	74 10                	je     c0023c62 <IDE::polling(unsigned char, unsigned int)+0x60>
c0023c52:	84 c0                	test   al,al
c0023c54:	78 d2                	js     c0023c28 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023c56:	a8 08                	test   al,0x8
c0023c58:	74 ce                	je     c0023c28 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023c5a:	31 c0                	xor    eax,eax
c0023c5c:	eb 06                	jmp    c0023c64 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023c5e:	b0 01                	mov    al,0x1
c0023c60:	eb 02                	jmp    c0023c64 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023c62:	b0 02                	mov    al,0x2
c0023c64:	5b                   	pop    ebx
c0023c65:	5e                   	pop    esi
c0023c66:	5f                   	pop    edi
c0023c67:	c3                   	ret    

c0023c68 <SATABus::close(int, int, void*)>:
c0023c68:	31 c0                	xor    eax,eax
c0023c6a:	c3                   	ret    
c0023c6b:	90                   	nop

c0023c6c <SATABus::detect()>:
c0023c6c:	c3                   	ret    
c0023c6d:	90                   	nop

c0023c6e <SATABus::SATABus()>:
c0023c6e:	83 ec 0c             	sub    esp,0xc
c0023c71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c75:	83 ec 08             	sub    esp,0x8
c0023c78:	68 24 cf 02 c0       	push   0xc002cf24
c0023c7d:	50                   	push   eax
c0023c7e:	e8 a1 0a ff ff       	call   c0014724 <HardDiskController::HardDiskController(char const*)>
c0023c83:	83 c4 10             	add    esp,0x10
c0023c86:	ba e0 cf 02 c0       	mov    edx,0xc002cfe0
c0023c8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c8f:	89 10                	mov    DWORD PTR [eax],edx
c0023c91:	83 ec 0c             	sub    esp,0xc
c0023c94:	6a 50                	push   0x50
c0023c96:	e8 8e c3 fe ff       	call   c0010029 <Phys::allocateContiguousPages(int)>
c0023c9b:	83 c4 10             	add    esp,0x10
c0023c9e:	89 c2                	mov    edx,eax
c0023ca0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ca4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023caa:	83 ec 0c             	sub    esp,0xc
c0023cad:	6a 50                	push   0x50
c0023caf:	e8 ef de fe ff       	call   c0011ba3 <Virt::allocateKernelVirtualPages(int)>
c0023cb4:	83 c4 10             	add    esp,0x10
c0023cb7:	89 c2                	mov    edx,eax
c0023cb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cbd:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023cc3:	e8 76 e1 fe ff       	call   c0011e3e <Virt::getAKernelVAS()>
c0023cc8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023ccc:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023cd2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023cd6:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023cdc:	83 ec 0c             	sub    esp,0xc
c0023cdf:	6a 03                	push   0x3
c0023ce1:	6a 50                	push   0x50
c0023ce3:	51                   	push   ecx
c0023ce4:	52                   	push   edx
c0023ce5:	50                   	push   eax
c0023ce6:	e8 83 e9 fe ff       	call   c001266e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023ceb:	83 c4 20             	add    esp,0x20
c0023cee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cf2:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0023cf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cfc:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0023d02:	83 ec 04             	sub    esp,0x4
c0023d05:	52                   	push   edx
c0023d06:	50                   	push   eax
c0023d07:	68 48 cf 02 c0       	push   0xc002cf48
c0023d0c:	e8 60 f2 fe ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0023d11:	83 c4 10             	add    esp,0x10
c0023d14:	90                   	nop
c0023d15:	83 c4 0c             	add    esp,0xc
c0023d18:	c3                   	ret    
c0023d19:	90                   	nop

c0023d1a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023d1a:	83 ec 0c             	sub    esp,0xc
c0023d1d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023d21:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023d24:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023d27:	09 c2                	or     edx,eax
c0023d29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d2d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023d33:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023d35:	31 c0                	xor    eax,eax
c0023d37:	c1 e9 08             	shr    ecx,0x8
c0023d3a:	83 e1 0f             	and    ecx,0xf
c0023d3d:	39 c8                	cmp    eax,ecx
c0023d3f:	74 0a                	je     c0023d4b <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023d41:	f6 c2 01             	test   dl,0x1
c0023d44:	74 18                	je     c0023d5e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023d46:	d1 ea                	shr    edx,1
c0023d48:	40                   	inc    eax
c0023d49:	eb f2                	jmp    c0023d3d <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023d4b:	83 ec 0c             	sub    esp,0xc
c0023d4e:	68 6c cf 02 c0       	push   0xc002cf6c
c0023d53:	e8 cb 68 ff ff       	call   c001a623 <Krnl::panic(char const*)>
c0023d58:	83 c4 10             	add    esp,0x10
c0023d5b:	83 c8 ff             	or     eax,0xffffffff
c0023d5e:	83 c4 0c             	add    esp,0xc
c0023d61:	c3                   	ret    

c0023d62 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023d62:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023d66:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023d69:	89 c2                	mov    edx,eax
c0023d6b:	c1 ea 08             	shr    edx,0x8
c0023d6e:	83 e2 0f             	and    edx,0xf
c0023d71:	fe ca                	dec    dl
c0023d73:	75 31                	jne    c0023da6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023d75:	83 e0 0f             	and    eax,0xf
c0023d78:	3c 03                	cmp    al,0x3
c0023d7a:	75 2a                	jne    c0023da6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023d7c:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023d7f:	b8 02 00 00 00       	mov    eax,0x2
c0023d84:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023d8a:	74 1c                	je     c0023da8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023d8c:	b8 04 00 00 00       	mov    eax,0x4
c0023d91:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023d97:	74 0f                	je     c0023da8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023d99:	31 c0                	xor    eax,eax
c0023d9b:	83 fa 03             	cmp    edx,0x3
c0023d9e:	0f 94 c0             	sete   al
c0023da1:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023da5:	c3                   	ret    
c0023da6:	31 c0                	xor    eax,eax
c0023da8:	c3                   	ret    
c0023da9:	90                   	nop

c0023daa <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023daa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023dae:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023db1:	0f ba e2 0f          	bt     edx,0xf
c0023db5:	72 f7                	jb     c0023dae <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023db7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023dba:	83 ca 10             	or     edx,0x10
c0023dbd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023dc0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023dc3:	83 ca 01             	or     edx,0x1
c0023dc6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023dc9:	c3                   	ret    

c0023dca <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023dca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023dce:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023dd1:	83 e2 fe             	and    edx,0xfffffffe
c0023dd4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023dd7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023dda:	83 e2 ef             	and    edx,0xffffffef
c0023ddd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023de0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023de3:	0f ba e2 0e          	bt     edx,0xe
c0023de7:	72 f7                	jb     c0023de0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023de9:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023dec:	0f ba e2 0f          	bt     edx,0xf
c0023df0:	72 ee                	jb     c0023de0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023df2:	c3                   	ret    
c0023df3:	90                   	nop

c0023df4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023df4:	55                   	push   ebp
c0023df5:	57                   	push   edi
c0023df6:	56                   	push   esi
c0023df7:	53                   	push   ebx
c0023df8:	83 ec 1c             	sub    esp,0x1c
c0023dfb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023dff:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023e03:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023e07:	53                   	push   ebx
c0023e08:	89 fd                	mov    ebp,edi
c0023e0a:	56                   	push   esi
c0023e0b:	c1 e5 0a             	shl    ebp,0xa
c0023e0e:	e8 b7 ff ff ff       	call   c0023dca <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023e13:	83 ec 0c             	sub    esp,0xc
c0023e16:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023e1c:	01 e8                	add    eax,ebp
c0023e1e:	89 03                	mov    DWORD PTR [ebx],eax
c0023e20:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023e22:	68 00 04 00 00       	push   0x400
c0023e27:	6a 00                	push   0x0
c0023e29:	50                   	push   eax
c0023e2a:	e8 49 c9 fd ff       	call   c0000778 <memset>
c0023e2f:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023e35:	89 fa                	mov    edx,edi
c0023e37:	01 e8                	add    eax,ebp
c0023e39:	c1 e7 0d             	shl    edi,0xd
c0023e3c:	89 03                	mov    DWORD PTR [ebx],eax
c0023e3e:	c1 e2 08             	shl    edx,0x8
c0023e41:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023e48:	81 c2 00 80 00 00    	add    edx,0x8000
c0023e4e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023e52:	89 d0                	mov    eax,edx
c0023e54:	83 c4 1c             	add    esp,0x1c
c0023e57:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023e5d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023e60:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023e63:	68 00 01 00 00       	push   0x100
c0023e68:	6a 00                	push   0x0
c0023e6a:	50                   	push   eax
c0023e6b:	e8 08 c9 fd ff       	call   c0000778 <memset>
c0023e70:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023e74:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023e7a:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023e80:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023e84:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023e87:	83 c4 10             	add    esp,0x10
c0023e8a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023e91:	31 ff                	xor    edi,edi
c0023e93:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023e99:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023e9f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023ea3:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023ea9:	83 c5 20             	add    ebp,0x20
c0023eac:	01 f8                	add    eax,edi
c0023eae:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023eb1:	52                   	push   edx
c0023eb2:	68 00 01 00 00       	push   0x100
c0023eb7:	6a 00                	push   0x0
c0023eb9:	50                   	push   eax
c0023eba:	e8 b9 c8 fd ff       	call   c0000778 <memset>
c0023ebf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023ec3:	83 c4 10             	add    esp,0x10
c0023ec6:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023ecc:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023ed3:	01 f8                	add    eax,edi
c0023ed5:	81 c7 00 01 00 00    	add    edi,0x100
c0023edb:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023ede:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023ee4:	75 b3                	jne    c0023e99 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023ee6:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023eea:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023eee:	83 c4 1c             	add    esp,0x1c
c0023ef1:	5b                   	pop    ebx
c0023ef2:	5e                   	pop    esi
c0023ef3:	5f                   	pop    edi
c0023ef4:	5d                   	pop    ebp
c0023ef5:	e9 b0 fe ff ff       	jmp    c0023daa <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023efa <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023efa:	55                   	push   ebp
c0023efb:	57                   	push   edi
c0023efc:	56                   	push   esi
c0023efd:	53                   	push   ebx
c0023efe:	31 db                	xor    ebx,ebx
c0023f00:	83 ec 0c             	sub    esp,0xc
c0023f03:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023f07:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023f0b:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023f0e:	f7 c7 01 00 00 00    	test   edi,0x1
c0023f14:	0f 84 aa 00 00 00    	je     c0023fc4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023f1a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023f1e:	89 d8                	mov    eax,ebx
c0023f20:	c1 e0 07             	shl    eax,0x7
c0023f23:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0023f2a:	55                   	push   ebp
c0023f2b:	56                   	push   esi
c0023f2c:	e8 31 fe ff ff       	call   c0023d62 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023f31:	5a                   	pop    edx
c0023f32:	83 f8 01             	cmp    eax,0x1
c0023f35:	59                   	pop    ecx
c0023f36:	75 30                	jne    c0023f68 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0023f38:	50                   	push   eax
c0023f39:	50                   	push   eax
c0023f3a:	53                   	push   ebx
c0023f3b:	68 91 cf 02 c0       	push   0xc002cf91
c0023f40:	e8 2c f0 fe ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0023f45:	83 c4 0c             	add    esp,0xc
c0023f48:	53                   	push   ebx
c0023f49:	55                   	push   ebp
c0023f4a:	56                   	push   esi
c0023f4b:	e8 a4 fe ff ff       	call   c0023df4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023f50:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023f57:	e8 e4 b8 fe ff       	call   c000f840 <malloc>
c0023f5c:	89 c5                	mov    ebp,eax
c0023f5e:	89 04 24             	mov    DWORD PTR [esp],eax
c0023f61:	e8 60 0d 00 00       	call   c0024cc6 <SATA::SATA()>
c0023f66:	eb 33                	jmp    c0023f9b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c0023f68:	83 f8 04             	cmp    eax,0x4
c0023f6b:	75 47                	jne    c0023fb4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c0023f6d:	50                   	push   eax
c0023f6e:	50                   	push   eax
c0023f6f:	53                   	push   ebx
c0023f70:	68 a8 cf 02 c0       	push   0xc002cfa8
c0023f75:	e8 f7 ef fe ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0023f7a:	83 c4 0c             	add    esp,0xc
c0023f7d:	53                   	push   ebx
c0023f7e:	55                   	push   ebp
c0023f7f:	56                   	push   esi
c0023f80:	e8 6f fe ff ff       	call   c0023df4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023f85:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023f8c:	e8 af b8 fe ff       	call   c000f840 <malloc>
c0023f91:	89 c5                	mov    ebp,eax
c0023f93:	89 04 24             	mov    DWORD PTR [esp],eax
c0023f96:	e8 d7 10 00 00       	call   c0025072 <SATAPI::SATAPI()>
c0023f9b:	5a                   	pop    edx
c0023f9c:	59                   	pop    ecx
c0023f9d:	55                   	push   ebp
c0023f9e:	56                   	push   esi
c0023f9f:	e8 f4 03 ff ff       	call   c0014398 <Device::addChild(Device*)>
c0023fa4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023fa7:	56                   	push   esi
c0023fa8:	6a 00                	push   0x0
c0023faa:	53                   	push   ebx
c0023fab:	55                   	push   ebp
c0023fac:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023faf:	83 c4 20             	add    esp,0x20
c0023fb2:	eb 10                	jmp    c0023fc4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023fb4:	50                   	push   eax
c0023fb5:	50                   	push   eax
c0023fb6:	53                   	push   ebx
c0023fb7:	68 c1 cf 02 c0       	push   0xc002cfc1
c0023fbc:	e8 b0 ef fe ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0023fc1:	83 c4 10             	add    esp,0x10
c0023fc4:	d1 ef                	shr    edi,1
c0023fc6:	43                   	inc    ebx
c0023fc7:	83 fb 20             	cmp    ebx,0x20
c0023fca:	0f 85 3e ff ff ff    	jne    c0023f0e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023fd0:	83 c4 0c             	add    esp,0xc
c0023fd3:	5b                   	pop    ebx
c0023fd4:	5e                   	pop    esi
c0023fd5:	5f                   	pop    edi
c0023fd6:	5d                   	pop    ebp
c0023fd7:	c3                   	ret    

c0023fd8 <SATABus::open(int, int, void*)>:
c0023fd8:	83 ec 14             	sub    esp,0x14
c0023fdb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023fdf:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023fe5:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023feb:	52                   	push   edx
c0023fec:	50                   	push   eax
c0023fed:	e8 08 ff ff ff       	call   c0023efa <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023ff2:	31 c0                	xor    eax,eax
c0023ff4:	83 c4 1c             	add    esp,0x1c
c0023ff7:	c3                   	ret    

c0023ff8 <ATA::close(int, int, void*)>:
c0023ff8:	83 ec 0c             	sub    esp,0xc
c0023ffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023fff:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024005:	85 c0                	test   eax,eax
c0024007:	74 0c                	je     c0024015 <ATA::close(int, int, void*)+0x1d>
c0024009:	83 ec 0c             	sub    esp,0xc
c002400c:	8b 10                	mov    edx,DWORD PTR [eax]
c002400e:	50                   	push   eax
c002400f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024012:	83 c4 10             	add    esp,0x10
c0024015:	31 c0                	xor    eax,eax
c0024017:	83 c4 0c             	add    esp,0xc
c002401a:	c3                   	ret    
c002401b:	90                   	nop

c002401c <ATA::powerSaving(PowerSavingLevel)>:
c002401c:	c3                   	ret    
c002401d:	90                   	nop

c002401e <ATA::ATA()>:
c002401e:	83 ec 0c             	sub    esp,0xc
c0024021:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024025:	83 ec 04             	sub    esp,0x4
c0024028:	68 00 02 00 00       	push   0x200
c002402d:	68 a9 d0 02 c0       	push   0xc002d0a9
c0024032:	50                   	push   eax
c0024033:	e8 84 07 ff ff       	call   c00147bc <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024038:	83 c4 10             	add    esp,0x10
c002403b:	ba 2c d0 02 c0       	mov    edx,0xc002d02c
c0024040:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024044:	89 10                	mov    DWORD PTR [eax],edx
c0024046:	90                   	nop
c0024047:	83 c4 0c             	add    esp,0xc
c002404a:	c3                   	ret    
c002404b:	90                   	nop

c002404c <ATA::flush(bool)>:
c002404c:	53                   	push   ebx
c002404d:	83 ec 08             	sub    esp,0x8
c0024050:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0024055:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024059:	19 c0                	sbb    eax,eax
c002405b:	83 e0 fd             	and    eax,0xfffffffd
c002405e:	05 ea 00 00 00       	add    eax,0xea
c0024063:	50                   	push   eax
c0024064:	6a 07                	push   0x7
c0024066:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002406d:	50                   	push   eax
c002406e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024074:	e8 dd ef ff ff       	call   c0023056 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024079:	83 c4 0c             	add    esp,0xc
c002407c:	6a 00                	push   0x0
c002407e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024085:	50                   	push   eax
c0024086:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002408c:	e8 71 fb ff ff       	call   c0023c02 <IDE::polling(unsigned char, unsigned int)>
c0024091:	83 c4 18             	add    esp,0x18
c0024094:	5b                   	pop    ebx
c0024095:	c3                   	ret    

c0024096 <ATA::readyForCommand()>:
c0024096:	56                   	push   esi
c0024097:	53                   	push   ebx
c0024098:	31 db                	xor    ebx,ebx
c002409a:	50                   	push   eax
c002409b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002409f:	50                   	push   eax
c00240a0:	6a 0c                	push   0xc
c00240a2:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00240a9:	50                   	push   eax
c00240aa:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00240b0:	e8 61 f0 ff ff       	call   c0023116 <IDE::read(unsigned char, unsigned char)>
c00240b5:	83 c4 10             	add    esp,0x10
c00240b8:	a8 88                	test   al,0x88
c00240ba:	74 23                	je     c00240df <ATA::readyForCommand()+0x49>
c00240bc:	43                   	inc    ebx
c00240bd:	83 fb 63             	cmp    ebx,0x63
c00240c0:	7e dd                	jle    c002409f <ATA::readyForCommand()+0x9>
c00240c2:	51                   	push   ecx
c00240c3:	51                   	push   ecx
c00240c4:	6a 00                	push   0x0
c00240c6:	68 40 42 0f 00       	push   0xf4240
c00240cb:	e8 c8 a2 ff ff       	call   c001e398 <nanoSleep(unsigned long long)>
c00240d0:	83 c4 10             	add    esp,0x10
c00240d3:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00240d9:	75 c4                	jne    c002409f <ATA::readyForCommand()+0x9>
c00240db:	31 c0                	xor    eax,eax
c00240dd:	eb 02                	jmp    c00240e1 <ATA::readyForCommand()+0x4b>
c00240df:	b0 01                	mov    al,0x1
c00240e1:	5a                   	pop    edx
c00240e2:	5b                   	pop    ebx
c00240e3:	5e                   	pop    esi
c00240e4:	c3                   	ret    
c00240e5:	90                   	nop

c00240e6 <ATA::access(unsigned long long, int, void*, bool)>:
c00240e6:	55                   	push   ebp
c00240e7:	57                   	push   edi
c00240e8:	56                   	push   esi
c00240e9:	53                   	push   ebx
c00240ea:	83 ec 2c             	sub    esp,0x2c
c00240ed:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00240f1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00240f5:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00240f9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00240fd:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0024101:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0024105:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024109:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002410f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024113:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024119:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002411d:	c1 e0 06             	shl    eax,0x6
c0024120:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0024128:	74 5d                	je     c0024187 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c002412a:	89 fa                	mov    edx,edi
c002412c:	89 f0                	mov    eax,esi
c002412e:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0024132:	c1 ea 1c             	shr    edx,0x1c
c0024135:	89 d1                	mov    ecx,edx
c0024137:	09 c1                	or     ecx,eax
c0024139:	74 25                	je     c0024160 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c002413b:	31 ed                	xor    ebp,ebp
c002413d:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0024144:	89 fa                	mov    edx,edi
c0024146:	89 f0                	mov    eax,esi
c0024148:	0f ad d0             	shrd   eax,edx,cl
c002414b:	d3 ea                	shr    edx,cl
c002414d:	f6 c1 20             	test   cl,0x20
c0024150:	74 02                	je     c0024154 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0024152:	89 d0                	mov    eax,edx
c0024154:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0024158:	45                   	inc    ebp
c0024159:	83 fd 06             	cmp    ebp,0x6
c002415c:	75 df                	jne    c002413d <ATA::access(unsigned long long, int, void*, bool)+0x57>
c002415e:	eb 76                	jmp    c00241d6 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0024160:	89 f0                	mov    eax,esi
c0024162:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0024167:	89 fa                	mov    edx,edi
c0024169:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024170:	0f ac d0 10          	shrd   eax,edx,0x10
c0024174:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024179:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002417d:	c1 ee 18             	shr    esi,0x18
c0024180:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0024185:	eb 56                	jmp    c00241dd <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024187:	6a 00                	push   0x0
c0024189:	6a 3f                	push   0x3f
c002418b:	57                   	push   edi
c002418c:	56                   	push   esi
c002418d:	e8 9a 29 00 00       	call   c0026b2c <__umoddi3>
c0024192:	83 c4 10             	add    esp,0x10
c0024195:	40                   	inc    eax
c0024196:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c002419a:	6a 00                	push   0x0
c002419c:	68 f0 03 00 00       	push   0x3f0
c00241a1:	57                   	push   edi
c00241a2:	56                   	push   esi
c00241a3:	e8 84 28 00 00       	call   c0026a2c <__udivdi3>
c00241a8:	83 c4 10             	add    esp,0x10
c00241ab:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c00241b0:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00241b7:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00241bc:	6a 00                	push   0x0
c00241be:	6a 3f                	push   0x3f
c00241c0:	57                   	push   edi
c00241c1:	56                   	push   esi
c00241c2:	e8 65 28 00 00       	call   c0026a2c <__udivdi3>
c00241c7:	83 c4 10             	add    esp,0x10
c00241ca:	89 c6                	mov    esi,eax
c00241cc:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c00241d1:	83 e6 0f             	and    esi,0xf
c00241d4:	eb 07                	jmp    c00241dd <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00241d6:	31 f6                	xor    esi,esi
c00241d8:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c00241dd:	bf 01 00 00 00       	mov    edi,0x1
c00241e2:	50                   	push   eax
c00241e3:	6a 00                	push   0x0
c00241e5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241ec:	50                   	push   eax
c00241ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00241f1:	e8 6c f0 ff ff       	call   c0023262 <IDE::enableIRQs(unsigned char, bool)>
c00241f6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00241f9:	e8 98 fe ff ff       	call   c0024096 <ATA::readyForCommand()>
c00241fe:	83 c4 10             	add    esp,0x10
c0024201:	84 c0                	test   al,al
c0024203:	0f 84 5a 02 00 00    	je     c0024463 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024209:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002420f:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024215:	c1 e0 04             	shl    eax,0x4
c0024218:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c002421f:	09 c6                	or     esi,eax
c0024221:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0024226:	75 05                	jne    c002422d <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0024228:	83 ce a0             	or     esi,0xffffffa0
c002422b:	eb 03                	jmp    c0024230 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c002422d:	83 ce e0             	or     esi,0xffffffe0
c0024230:	89 f0                	mov    eax,esi
c0024232:	0f b6 f0             	movzx  esi,al
c0024235:	56                   	push   esi
c0024236:	6a 06                	push   0x6
c0024238:	51                   	push   ecx
c0024239:	52                   	push   edx
c002423a:	e8 17 ee ff ff       	call   c0023056 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002423f:	83 c4 10             	add    esp,0x10
c0024242:	6a 00                	push   0x0
c0024244:	6a 01                	push   0x1
c0024246:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002424d:	50                   	push   eax
c002424e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024254:	e8 fd ed ff ff       	call   c0023056 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024259:	83 c4 10             	add    esp,0x10
c002425c:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024261:	75 6e                	jne    c00242d1 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0024263:	6a 00                	push   0x0
c0024265:	6a 08                	push   0x8
c0024267:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002426e:	50                   	push   eax
c002426f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024275:	e8 dc ed ff ff       	call   c0023056 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002427a:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c002427f:	50                   	push   eax
c0024280:	6a 09                	push   0x9
c0024282:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024289:	50                   	push   eax
c002428a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024290:	e8 c1 ed ff ff       	call   c0023056 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024295:	83 c4 20             	add    esp,0x20
c0024298:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c002429d:	50                   	push   eax
c002429e:	6a 0a                	push   0xa
c00242a0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242a7:	50                   	push   eax
c00242a8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242ae:	e8 a3 ed ff ff       	call   c0023056 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242b3:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c00242b8:	50                   	push   eax
c00242b9:	6a 0b                	push   0xb
c00242bb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242c2:	50                   	push   eax
c00242c3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242c9:	e8 88 ed ff ff       	call   c0023056 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242ce:	83 c4 20             	add    esp,0x20
c00242d1:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c00242d6:	50                   	push   eax
c00242d7:	6a 02                	push   0x2
c00242d9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242e0:	50                   	push   eax
c00242e1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242e7:	e8 6a ed ff ff       	call   c0023056 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242ec:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c00242f1:	50                   	push   eax
c00242f2:	6a 03                	push   0x3
c00242f4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242fb:	50                   	push   eax
c00242fc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024302:	e8 4f ed ff ff       	call   c0023056 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024307:	83 c4 20             	add    esp,0x20
c002430a:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c002430f:	50                   	push   eax
c0024310:	6a 04                	push   0x4
c0024312:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024319:	50                   	push   eax
c002431a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024320:	e8 31 ed ff ff       	call   c0023056 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024325:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002432a:	50                   	push   eax
c002432b:	6a 05                	push   0x5
c002432d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024334:	50                   	push   eax
c0024335:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002433b:	e8 16 ed ff ff       	call   c0023056 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024340:	83 c4 20             	add    esp,0x20
c0024343:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024348:	0f 94 c0             	sete   al
c002434b:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024350:	74 09                	je     c002435b <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0024352:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0024359:	eb 07                	jmp    c0024362 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c002435b:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0024362:	0f b6 c0             	movzx  eax,al
c0024365:	50                   	push   eax
c0024366:	6a 07                	push   0x7
c0024368:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002436f:	50                   	push   eax
c0024370:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024376:	e8 db ec ff ff       	call   c0023056 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002437b:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c002437f:	83 c4 10             	add    esp,0x10
c0024382:	85 f6                	test   esi,esi
c0024384:	0f 84 ba 00 00 00    	je     c0024444 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c002438a:	50                   	push   eax
c002438b:	6a 01                	push   0x1
c002438d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024394:	50                   	push   eax
c0024395:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002439b:	e8 62 f8 ff ff       	call   c0023c02 <IDE::polling(unsigned char, unsigned int)>
c00243a0:	83 c4 10             	add    esp,0x10
c00243a3:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c00243a9:	84 c0                	test   al,al
c00243ab:	74 2c                	je     c00243d9 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c00243ad:	0f b6 f8             	movzx  edi,al
c00243b0:	0f b6 d2             	movzx  edx,dl
c00243b3:	57                   	push   edi
c00243b4:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c00243bb:	50                   	push   eax
c00243bc:	52                   	push   edx
c00243bd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243c3:	e8 a4 f6 ff ff       	call   c0023a6c <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00243c8:	c7 04 24 04 d0 02 c0 	mov    DWORD PTR [esp],0xc002d004
c00243cf:	e8 9d eb fe ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c00243d4:	e9 87 00 00 00       	jmp    c0024460 <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c00243d9:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00243de:	74 33                	je     c0024413 <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c00243e0:	31 ed                	xor    ebp,ebp
c00243e2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00243e6:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c00243ea:	50                   	push   eax
c00243eb:	50                   	push   eax
c00243ec:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00243f3:	50                   	push   eax
c00243f4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243fa:	e8 45 ec ff ff       	call   c0023044 <IDE::getBase(unsigned char)>
c00243ff:	89 c2                	mov    edx,eax
c0024401:	89 f8                	mov    eax,edi
c0024403:	66 ef                	out    dx,ax
c0024405:	45                   	inc    ebp
c0024406:	83 c4 10             	add    esp,0x10
c0024409:	81 fd 00 01 00 00    	cmp    ebp,0x100
c002440f:	75 d1                	jne    c00243e2 <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c0024411:	eb 23                	jmp    c0024436 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c0024413:	0f b6 d2             	movzx  edx,dl
c0024416:	51                   	push   ecx
c0024417:	51                   	push   ecx
c0024418:	52                   	push   edx
c0024419:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002441f:	e8 20 ec ff ff       	call   c0023044 <IDE::getBase(unsigned char)>
c0024424:	b9 00 01 00 00       	mov    ecx,0x100
c0024429:	89 c2                	mov    edx,eax
c002442b:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c002442f:	fc                   	cld    
c0024430:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0024433:	83 c4 10             	add    esp,0x10
c0024436:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c002443e:	4e                   	dec    esi
c002443f:	e9 3e ff ff ff       	jmp    c0024382 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0024444:	31 ff                	xor    edi,edi
c0024446:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002444b:	74 16                	je     c0024463 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c002444d:	50                   	push   eax
c002444e:	50                   	push   eax
c002444f:	31 c0                	xor    eax,eax
c0024451:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0024456:	0f 94 c0             	sete   al
c0024459:	50                   	push   eax
c002445a:	53                   	push   ebx
c002445b:	e8 ec fb ff ff       	call   c002404c <ATA::flush(bool)>
c0024460:	83 c4 10             	add    esp,0x10
c0024463:	83 c4 2c             	add    esp,0x2c
c0024466:	89 f8                	mov    eax,edi
c0024468:	5b                   	pop    ebx
c0024469:	5e                   	pop    esi
c002446a:	5f                   	pop    edi
c002446b:	5d                   	pop    ebp
c002446c:	c3                   	ret    
c002446d:	90                   	nop

c002446e <ATA::read(unsigned long long, int, void*)>:
c002446e:	57                   	push   edi
c002446f:	b8 04 00 00 00       	mov    eax,0x4
c0024474:	56                   	push   esi
c0024475:	53                   	push   ebx
c0024476:	83 ec 10             	sub    esp,0x10
c0024479:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002447d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024481:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024484:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024488:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002448c:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024492:	77 3b                	ja     c00244cf <ATA::read(unsigned long long, int, void*)+0x61>
c0024494:	b8 06 00 00 00       	mov    eax,0x6
c0024499:	85 d2                	test   edx,edx
c002449b:	74 32                	je     c00244cf <ATA::read(unsigned long long, int, void*)+0x61>
c002449d:	50                   	push   eax
c002449e:	50                   	push   eax
c002449f:	6a 00                	push   0x0
c00244a1:	52                   	push   edx
c00244a2:	53                   	push   ebx
c00244a3:	57                   	push   edi
c00244a4:	56                   	push   esi
c00244a5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00244a9:	e8 38 fc ff ff       	call   c00240e6 <ATA::access(unsigned long long, int, void*, bool)>
c00244ae:	83 c4 20             	add    esp,0x20
c00244b1:	85 c0                	test   eax,eax
c00244b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00244b7:	75 11                	jne    c00244ca <ATA::read(unsigned long long, int, void*)+0x5c>
c00244b9:	01 1d a8 29 03 c0    	add    DWORD PTR ds:0xc00329a8,ebx
c00244bf:	e8 34 c5 fe ff       	call   c00109f8 <VgaText::updateDiskUsage()>
c00244c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00244c8:	eb 05                	jmp    c00244cf <ATA::read(unsigned long long, int, void*)+0x61>
c00244ca:	b8 01 00 00 00       	mov    eax,0x1
c00244cf:	83 c4 10             	add    esp,0x10
c00244d2:	5b                   	pop    ebx
c00244d3:	5e                   	pop    esi
c00244d4:	5f                   	pop    edi
c00244d5:	c3                   	ret    

c00244d6 <ATA::write(unsigned long long, int, void*)>:
c00244d6:	57                   	push   edi
c00244d7:	b8 04 00 00 00       	mov    eax,0x4
c00244dc:	56                   	push   esi
c00244dd:	53                   	push   ebx
c00244de:	83 ec 10             	sub    esp,0x10
c00244e1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00244e5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00244e9:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00244ec:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00244f0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00244f4:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00244fa:	77 3b                	ja     c0024537 <ATA::write(unsigned long long, int, void*)+0x61>
c00244fc:	b8 06 00 00 00       	mov    eax,0x6
c0024501:	85 d2                	test   edx,edx
c0024503:	74 32                	je     c0024537 <ATA::write(unsigned long long, int, void*)+0x61>
c0024505:	50                   	push   eax
c0024506:	50                   	push   eax
c0024507:	6a 01                	push   0x1
c0024509:	52                   	push   edx
c002450a:	53                   	push   ebx
c002450b:	57                   	push   edi
c002450c:	56                   	push   esi
c002450d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024511:	e8 d0 fb ff ff       	call   c00240e6 <ATA::access(unsigned long long, int, void*, bool)>
c0024516:	83 c4 20             	add    esp,0x20
c0024519:	85 c0                	test   eax,eax
c002451b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002451f:	75 11                	jne    c0024532 <ATA::write(unsigned long long, int, void*)+0x5c>
c0024521:	01 1d a4 29 03 c0    	add    DWORD PTR ds:0xc00329a4,ebx
c0024527:	e8 cc c4 fe ff       	call   c00109f8 <VgaText::updateDiskUsage()>
c002452c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024530:	eb 05                	jmp    c0024537 <ATA::write(unsigned long long, int, void*)+0x61>
c0024532:	b8 01 00 00 00       	mov    eax,0x1
c0024537:	83 c4 10             	add    esp,0x10
c002453a:	5b                   	pop    ebx
c002453b:	5e                   	pop    esi
c002453c:	5f                   	pop    edi
c002453d:	c3                   	ret    

c002453e <ATA::detectCHS()>:
c002453e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024542:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0024548:	c1 e0 06             	shl    eax,0x6
c002454b:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0024551:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c002455b:	c7 44 24 04 0f d0 02 c0 	mov    DWORD PTR [esp+0x4],0xc002d00f
c0024563:	e9 bb 60 ff ff       	jmp    c001a623 <Krnl::panic(char const*)>

c0024568 <ATA::open(int, int, void*)>:
c0024568:	53                   	push   ebx
c0024569:	83 ec 08             	sub    esp,0x8
c002456c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024570:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024574:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024578:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002457e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024584:	c1 e0 06             	shl    eax,0x6
c0024587:	01 d0                	add    eax,edx
c0024589:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0024590:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0024596:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c002459d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00245a7:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c00245ad:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00245b4:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c00245bb:	75 0c                	jne    c00245c9 <ATA::open(int, int, void*)+0x61>
c00245bd:	83 ec 0c             	sub    esp,0xc
c00245c0:	53                   	push   ebx
c00245c1:	e8 78 ff ff ff       	call   c002453e <ATA::detectCHS()>
c00245c6:	83 c4 10             	add    esp,0x10
c00245c9:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00245cf:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00245d5:	c1 e0 06             	shl    eax,0x6
c00245d8:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c00245df:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00245e9:	d1 e8                	shr    eax,1
c00245eb:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c00245f1:	6a 04                	push   0x4
c00245f3:	6a 0c                	push   0xc
c00245f5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00245fc:	50                   	push   eax
c00245fd:	52                   	push   edx
c00245fe:	e8 53 ea ff ff       	call   c0023056 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024603:	90                   	nop
c0024604:	90                   	nop
c0024605:	6a 00                	push   0x0
c0024607:	6a 0c                	push   0xc
c0024609:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024610:	50                   	push   eax
c0024611:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024617:	e8 3a ea ff ff       	call   c0023056 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002461c:	83 c4 14             	add    esp,0x14
c002461f:	53                   	push   ebx
c0024620:	e8 ff 01 ff ff       	call   c0014824 <PhysicalDisk::startCache()>
c0024625:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024628:	e8 7d 23 ff ff       	call   c00169aa <createPartitionsForDisk(PhysicalDisk*)>
c002462d:	31 c0                	xor    eax,eax
c002462f:	83 c4 18             	add    esp,0x18
c0024632:	5b                   	pop    ebx
c0024633:	c3                   	ret    

c0024634 <ATAPI::write(unsigned long long, int, void*)>:
c0024634:	b8 03 00 00 00       	mov    eax,0x3
c0024639:	c3                   	ret    

c002463a <ATAPI::close(int, int, void*)>:
c002463a:	83 ec 0c             	sub    esp,0xc
c002463d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024641:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024647:	85 c0                	test   eax,eax
c0024649:	74 0c                	je     c0024657 <ATAPI::close(int, int, void*)+0x1d>
c002464b:	83 ec 0c             	sub    esp,0xc
c002464e:	8b 10                	mov    edx,DWORD PTR [eax]
c0024650:	50                   	push   eax
c0024651:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024654:	83 c4 10             	add    esp,0x10
c0024657:	31 c0                	xor    eax,eax
c0024659:	83 c4 0c             	add    esp,0xc
c002465c:	c3                   	ret    
c002465d:	90                   	nop

c002465e <ATAPI::ATAPI()>:
c002465e:	83 ec 0c             	sub    esp,0xc
c0024661:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024665:	83 ec 04             	sub    esp,0x4
c0024668:	68 00 08 00 00       	push   0x800
c002466d:	68 49 d1 02 c0       	push   0xc002d149
c0024672:	50                   	push   eax
c0024673:	e8 44 01 ff ff       	call   c00147bc <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024678:	83 c4 10             	add    esp,0x10
c002467b:	ba 64 d0 02 c0       	mov    edx,0xc002d064
c0024680:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024684:	89 10                	mov    DWORD PTR [eax],edx
c0024686:	90                   	nop
c0024687:	83 c4 0c             	add    esp,0xc
c002468a:	c3                   	ret    
c002468b:	90                   	nop

c002468c <ATAPI::readyForCommand()>:
c002468c:	56                   	push   esi
c002468d:	53                   	push   ebx
c002468e:	31 db                	xor    ebx,ebx
c0024690:	50                   	push   eax
c0024691:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024695:	50                   	push   eax
c0024696:	6a 0c                	push   0xc
c0024698:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002469f:	50                   	push   eax
c00246a0:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00246a6:	e8 6b ea ff ff       	call   c0023116 <IDE::read(unsigned char, unsigned char)>
c00246ab:	83 c4 10             	add    esp,0x10
c00246ae:	a8 88                	test   al,0x88
c00246b0:	74 23                	je     c00246d5 <ATAPI::readyForCommand()+0x49>
c00246b2:	43                   	inc    ebx
c00246b3:	83 fb 63             	cmp    ebx,0x63
c00246b6:	7e dd                	jle    c0024695 <ATAPI::readyForCommand()+0x9>
c00246b8:	51                   	push   ecx
c00246b9:	51                   	push   ecx
c00246ba:	6a 00                	push   0x0
c00246bc:	68 40 42 0f 00       	push   0xf4240
c00246c1:	e8 d2 9c ff ff       	call   c001e398 <nanoSleep(unsigned long long)>
c00246c6:	83 c4 10             	add    esp,0x10
c00246c9:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00246cf:	75 c4                	jne    c0024695 <ATAPI::readyForCommand()+0x9>
c00246d1:	31 c0                	xor    eax,eax
c00246d3:	eb 02                	jmp    c00246d7 <ATAPI::readyForCommand()+0x4b>
c00246d5:	b0 01                	mov    al,0x1
c00246d7:	5a                   	pop    edx
c00246d8:	5b                   	pop    ebx
c00246d9:	5e                   	pop    esi
c00246da:	c3                   	ret    
c00246db:	90                   	nop

c00246dc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c00246dc:	55                   	push   ebp
c00246dd:	57                   	push   edi
c00246de:	56                   	push   esi
c00246df:	53                   	push   ebx
c00246e0:	83 ec 20             	sub    esp,0x20
c00246e3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00246e7:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00246eb:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00246ef:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00246f3:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00246f7:	6a 01                	push   0x1
c00246f9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024700:	50                   	push   eax
c0024701:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024707:	e8 56 eb ff ff       	call   c0023262 <IDE::enableIRQs(unsigned char, bool)>
c002470c:	5e                   	pop    esi
c002470d:	58                   	pop    eax
c002470e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024715:	50                   	push   eax
c0024716:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002471c:	e8 0f e9 ff ff       	call   c0023030 <IDE::prepareInterrupt(unsigned char)>
c0024721:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024724:	e8 63 ff ff ff       	call   c002468c <ATAPI::readyForCommand()>
c0024729:	83 c4 10             	add    esp,0x10
c002472c:	84 c0                	test   al,al
c002472e:	75 0a                	jne    c002473a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0024730:	bb 01 00 00 00       	mov    ebx,0x1
c0024735:	e9 57 02 00 00       	jmp    c0024991 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002473a:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0024740:	c1 e0 04             	shl    eax,0x4
c0024743:	0f b6 c0             	movzx  eax,al
c0024746:	50                   	push   eax
c0024747:	6a 06                	push   0x6
c0024749:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024750:	50                   	push   eax
c0024751:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024757:	e8 fa e8 ff ff       	call   c0023056 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002475c:	6a 00                	push   0x0
c002475e:	6a 01                	push   0x1
c0024760:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024767:	50                   	push   eax
c0024768:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002476e:	e8 e3 e8 ff ff       	call   c0023056 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024773:	83 c4 20             	add    esp,0x20
c0024776:	0f b6 c3             	movzx  eax,bl
c0024779:	0f b6 df             	movzx  ebx,bh
c002477c:	50                   	push   eax
c002477d:	6a 04                	push   0x4
c002477f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024786:	50                   	push   eax
c0024787:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002478d:	e8 c4 e8 ff ff       	call   c0023056 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024792:	53                   	push   ebx
c0024793:	6a 05                	push   0x5
c0024795:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002479c:	50                   	push   eax
c002479d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247a3:	e8 ae e8 ff ff       	call   c0023056 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00247a8:	83 c4 20             	add    esp,0x20
c00247ab:	68 a0 00 00 00       	push   0xa0
c00247b0:	6a 07                	push   0x7
c00247b2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247b9:	50                   	push   eax
c00247ba:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247c0:	e8 91 e8 ff ff       	call   c0023056 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00247c5:	83 c4 0c             	add    esp,0xc
c00247c8:	6a 01                	push   0x1
c00247ca:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247d1:	50                   	push   eax
c00247d2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247d8:	e8 25 f4 ff ff       	call   c0023c02 <IDE::polling(unsigned char, unsigned int)>
c00247dd:	83 c4 10             	add    esp,0x10
c00247e0:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c00247e6:	84 c0                	test   al,al
c00247e8:	74 23                	je     c002480d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c00247ea:	0f b6 d8             	movzx  ebx,al
c00247ed:	0f b6 d2             	movzx  edx,dl
c00247f0:	53                   	push   ebx
c00247f1:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c00247f8:	50                   	push   eax
c00247f9:	52                   	push   edx
c00247fa:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024800:	e8 67 f2 ff ff       	call   c0023a6c <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024805:	83 c4 10             	add    esp,0x10
c0024808:	e9 84 01 00 00       	jmp    c0024991 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002480d:	0f b6 d2             	movzx  edx,dl
c0024810:	53                   	push   ebx
c0024811:	53                   	push   ebx
c0024812:	52                   	push   edx
c0024813:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024819:	e8 26 e8 ff ff       	call   c0023044 <IDE::getBase(unsigned char)>
c002481e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024822:	b9 06 00 00 00       	mov    ecx,0x6
c0024827:	89 c2                	mov    edx,eax
c0024829:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c002482c:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0024830:	83 c4 10             	add    esp,0x10
c0024833:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024839:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024840:	85 db                	test   ebx,ebx
c0024842:	0f 84 ec 00 00 00    	je     c0024934 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0024848:	51                   	push   ecx
c0024849:	51                   	push   ecx
c002484a:	52                   	push   edx
c002484b:	50                   	push   eax
c002484c:	e8 73 e9 ff ff       	call   c00231c4 <IDE::waitInterrupt(unsigned char)>
c0024851:	83 c4 10             	add    esp,0x10
c0024854:	84 c0                	test   al,al
c0024856:	0f 84 d4 fe ff ff    	je     c0024730 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002485c:	56                   	push   esi
c002485d:	56                   	push   esi
c002485e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024865:	50                   	push   eax
c0024866:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002486c:	e8 bf e7 ff ff       	call   c0023030 <IDE::prepareInterrupt(unsigned char)>
c0024871:	83 c4 0c             	add    esp,0xc
c0024874:	6a 04                	push   0x4
c0024876:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002487d:	50                   	push   eax
c002487e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024884:	e8 8d e8 ff ff       	call   c0023116 <IDE::read(unsigned char, unsigned char)>
c0024889:	83 c4 0c             	add    esp,0xc
c002488c:	89 c6                	mov    esi,eax
c002488e:	6a 05                	push   0x5
c0024890:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024897:	50                   	push   eax
c0024898:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002489e:	e8 73 e8 ff ff       	call   c0023116 <IDE::read(unsigned char, unsigned char)>
c00248a3:	89 f1                	mov    ecx,esi
c00248a5:	0f b6 c0             	movzx  eax,al
c00248a8:	0f b6 f1             	movzx  esi,cl
c00248ab:	c1 e0 08             	shl    eax,0x8
c00248ae:	09 c6                	or     esi,eax
c00248b0:	d1 fe                	sar    esi,1
c00248b2:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00248b6:	83 c4 10             	add    esp,0x10
c00248b9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00248be:	74 41                	je     c0024901 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c00248c0:	31 c9                	xor    ecx,ecx
c00248c2:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00248c8:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00248cf:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c00248d3:	75 0a                	jne    c00248df <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c00248d5:	01 c9                	add    ecx,ecx
c00248d7:	01 cd                	add    ebp,ecx
c00248d9:	4b                   	dec    ebx
c00248da:	e9 54 ff ff ff       	jmp    c0024833 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c00248df:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c00248e4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00248e8:	51                   	push   ecx
c00248e9:	51                   	push   ecx
c00248ea:	52                   	push   edx
c00248eb:	50                   	push   eax
c00248ec:	e8 53 e7 ff ff       	call   c0023044 <IDE::getBase(unsigned char)>
c00248f1:	89 c2                	mov    edx,eax
c00248f3:	89 f0                	mov    eax,esi
c00248f5:	66 ef                	out    dx,ax
c00248f7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00248fb:	83 c4 10             	add    esp,0x10
c00248fe:	41                   	inc    ecx
c00248ff:	eb c1                	jmp    c00248c2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0024901:	31 f6                	xor    esi,esi
c0024903:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024909:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024910:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0024914:	75 06                	jne    c002491c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0024916:	01 f6                	add    esi,esi
c0024918:	01 f5                	add    ebp,esi
c002491a:	eb bd                	jmp    c00248d9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c002491c:	51                   	push   ecx
c002491d:	51                   	push   ecx
c002491e:	52                   	push   edx
c002491f:	50                   	push   eax
c0024920:	e8 1f e7 ff ff       	call   c0023044 <IDE::getBase(unsigned char)>
c0024925:	89 c2                	mov    edx,eax
c0024927:	66 ed                	in     ax,dx
c0024929:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c002492e:	83 c4 10             	add    esp,0x10
c0024931:	46                   	inc    esi
c0024932:	eb cf                	jmp    c0024903 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0024934:	51                   	push   ecx
c0024935:	51                   	push   ecx
c0024936:	52                   	push   edx
c0024937:	50                   	push   eax
c0024938:	e8 87 e8 ff ff       	call   c00231c4 <IDE::waitInterrupt(unsigned char)>
c002493d:	83 c4 10             	add    esp,0x10
c0024940:	84 c0                	test   al,al
c0024942:	0f 84 e8 fd ff ff    	je     c0024730 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024948:	bb a0 86 01 00       	mov    ebx,0x186a0
c002494d:	52                   	push   edx
c002494e:	52                   	push   edx
c002494f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024956:	50                   	push   eax
c0024957:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002495d:	e8 ce e6 ff ff       	call   c0023030 <IDE::prepareInterrupt(unsigned char)>
c0024962:	83 c4 10             	add    esp,0x10
c0024965:	50                   	push   eax
c0024966:	50                   	push   eax
c0024967:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002496e:	50                   	push   eax
c002496f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024975:	e8 ca e6 ff ff       	call   c0023044 <IDE::getBase(unsigned char)>
c002497a:	8d 50 07             	lea    edx,[eax+0x7]
c002497d:	ec                   	in     al,dx
c002497e:	83 c4 10             	add    esp,0x10
c0024981:	a8 88                	test   al,0x88
c0024983:	74 0a                	je     c002498f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0024985:	4b                   	dec    ebx
c0024986:	75 dd                	jne    c0024965 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0024988:	bb 02 00 00 00       	mov    ebx,0x2
c002498d:	eb 02                	jmp    c0024991 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002498f:	31 db                	xor    ebx,ebx
c0024991:	83 c4 1c             	add    esp,0x1c
c0024994:	89 d8                	mov    eax,ebx
c0024996:	5b                   	pop    ebx
c0024997:	5e                   	pop    esi
c0024998:	5f                   	pop    edi
c0024999:	5d                   	pop    ebp
c002499a:	c3                   	ret    
c002499b:	90                   	nop

c002499c <ATAPI::diskRemoved()>:
c002499c:	83 ec 18             	sub    esp,0x18
c002499f:	68 55 d1 02 c0       	push   0xc002d155
c00249a4:	e8 c8 e5 fe ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c00249a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00249ad:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c00249b4:	83 c4 1c             	add    esp,0x1c
c00249b7:	c3                   	ret    

c00249b8 <ATAPI::eject()>:
c00249b8:	57                   	push   edi
c00249b9:	b9 03 00 00 00       	mov    ecx,0x3
c00249be:	53                   	push   ebx
c00249bf:	83 ec 14             	sub    esp,0x14
c00249c2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00249c6:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00249ca:	fc                   	cld    
c00249cb:	31 c0                	xor    eax,eax
c00249cd:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00249cf:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00249d4:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00249d9:	50                   	push   eax
c00249da:	50                   	push   eax
c00249db:	6a 00                	push   0x0
c00249dd:	6a 00                	push   0x0
c00249df:	6a 00                	push   0x0
c00249e1:	6a 02                	push   0x2
c00249e3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00249e7:	50                   	push   eax
c00249e8:	53                   	push   ebx
c00249e9:	e8 ee fc ff ff       	call   c00246dc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00249ee:	83 c4 14             	add    esp,0x14
c00249f1:	53                   	push   ebx
c00249f2:	e8 a5 ff ff ff       	call   c002499c <ATAPI::diskRemoved()>
c00249f7:	83 c4 24             	add    esp,0x24
c00249fa:	31 c0                	xor    eax,eax
c00249fc:	5b                   	pop    ebx
c00249fd:	5f                   	pop    edi
c00249fe:	c3                   	ret    
c00249ff:	90                   	nop

c0024a00 <ATAPI::diskInserted()>:
c0024a00:	53                   	push   ebx
c0024a01:	83 ec 14             	sub    esp,0x14
c0024a04:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024a08:	68 6c d1 02 c0       	push   0xc002d16c
c0024a0d:	e8 5f e5 fe ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0024a12:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0024a19:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024a1c:	e8 03 fe fe ff       	call   c0014824 <PhysicalDisk::startCache()>
c0024a21:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024a25:	83 c4 18             	add    esp,0x18
c0024a28:	5b                   	pop    ebx
c0024a29:	e9 7c 1f ff ff       	jmp    c00169aa <createPartitionsForDisk(PhysicalDisk*)>

c0024a2e <ATAPI::detectMedia()>:
c0024a2e:	56                   	push   esi
c0024a2f:	53                   	push   ebx
c0024a30:	83 ec 28             	sub    esp,0x28
c0024a33:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024a37:	6a 0c                	push   0xc
c0024a39:	6a 00                	push   0x0
c0024a3b:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024a3f:	56                   	push   esi
c0024a40:	e8 33 bd fd ff       	call   c0000778 <memset>
c0024a45:	58                   	pop    eax
c0024a46:	5a                   	pop    edx
c0024a47:	6a 00                	push   0x0
c0024a49:	6a 00                	push   0x0
c0024a4b:	6a 00                	push   0x0
c0024a4d:	6a 00                	push   0x0
c0024a4f:	56                   	push   esi
c0024a50:	53                   	push   ebx
c0024a51:	e8 86 fc ff ff       	call   c00246dc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024a56:	83 c4 1c             	add    esp,0x1c
c0024a59:	6a 0c                	push   0xc
c0024a5b:	6a 00                	push   0x0
c0024a5d:	56                   	push   esi
c0024a5e:	e8 15 bd fd ff       	call   c0000778 <memset>
c0024a63:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024a68:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024a6d:	59                   	pop    ecx
c0024a6e:	58                   	pop    eax
c0024a6f:	6a 01                	push   0x1
c0024a71:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0024a75:	50                   	push   eax
c0024a76:	6a 00                	push   0x0
c0024a78:	6a 12                	push   0x12
c0024a7a:	56                   	push   esi
c0024a7b:	53                   	push   ebx
c0024a7c:	e8 5b fc ff ff       	call   c00246dc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024a81:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024a85:	83 c4 20             	add    esp,0x20
c0024a88:	83 e0 7f             	and    eax,0x7f
c0024a8b:	3c 70                	cmp    al,0x70
c0024a8d:	74 15                	je     c0024aa4 <ATAPI::detectMedia()+0x76>
c0024a8f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024a96:	75 0c                	jne    c0024aa4 <ATAPI::detectMedia()+0x76>
c0024a98:	83 ec 0c             	sub    esp,0xc
c0024a9b:	53                   	push   ebx
c0024a9c:	e8 5f ff ff ff       	call   c0024a00 <ATAPI::diskInserted()>
c0024aa1:	83 c4 10             	add    esp,0x10
c0024aa4:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024aa8:	83 e0 0f             	and    eax,0xf
c0024aab:	3c 02                	cmp    al,0x2
c0024aad:	75 1b                	jne    c0024aca <ATAPI::detectMedia()+0x9c>
c0024aaf:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024ab4:	75 2d                	jne    c0024ae3 <ATAPI::detectMedia()+0xb5>
c0024ab6:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024abd:	74 24                	je     c0024ae3 <ATAPI::detectMedia()+0xb5>
c0024abf:	83 ec 0c             	sub    esp,0xc
c0024ac2:	53                   	push   ebx
c0024ac3:	e8 d4 fe ff ff       	call   c002499c <ATAPI::diskRemoved()>
c0024ac8:	eb 16                	jmp    c0024ae0 <ATAPI::detectMedia()+0xb2>
c0024aca:	84 c0                	test   al,al
c0024acc:	75 15                	jne    c0024ae3 <ATAPI::detectMedia()+0xb5>
c0024ace:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024ad5:	75 0c                	jne    c0024ae3 <ATAPI::detectMedia()+0xb5>
c0024ad7:	83 ec 0c             	sub    esp,0xc
c0024ada:	53                   	push   ebx
c0024adb:	e8 20 ff ff ff       	call   c0024a00 <ATAPI::diskInserted()>
c0024ae0:	83 c4 10             	add    esp,0x10
c0024ae3:	83 c4 24             	add    esp,0x24
c0024ae6:	5b                   	pop    ebx
c0024ae7:	5e                   	pop    esi
c0024ae8:	c3                   	ret    
c0024ae9:	90                   	nop

c0024aea <ATAPI::open(int, int, void*)>:
c0024aea:	53                   	push   ebx
c0024aeb:	83 ec 08             	sub    esp,0x8
c0024aee:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024af2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024af6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024afa:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024b00:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024b06:	c1 e0 06             	shl    eax,0x6
c0024b09:	01 d0                	add    eax,edx
c0024b0b:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024b12:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024b18:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024b1f:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024b29:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024b2f:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024b36:	6a 04                	push   0x4
c0024b38:	6a 0c                	push   0xc
c0024b3a:	51                   	push   ecx
c0024b3b:	52                   	push   edx
c0024b3c:	e8 15 e5 ff ff       	call   c0023056 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b41:	90                   	nop
c0024b42:	90                   	nop
c0024b43:	6a 00                	push   0x0
c0024b45:	6a 0c                	push   0xc
c0024b47:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b4e:	50                   	push   eax
c0024b4f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b55:	e8 fc e4 ff ff       	call   c0023056 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b5a:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024b61:	83 c4 14             	add    esp,0x14
c0024b64:	53                   	push   ebx
c0024b65:	e8 c4 fe ff ff       	call   c0024a2e <ATAPI::detectMedia()>
c0024b6a:	31 c0                	xor    eax,eax
c0024b6c:	83 c4 18             	add    esp,0x18
c0024b6f:	5b                   	pop    ebx
c0024b70:	c3                   	ret    
c0024b71:	90                   	nop

c0024b72 <ATAPI::read(unsigned long long, int, void*)>:
c0024b72:	55                   	push   ebp
c0024b73:	57                   	push   edi
c0024b74:	56                   	push   esi
c0024b75:	53                   	push   ebx
c0024b76:	83 ec 1c             	sub    esp,0x1c
c0024b79:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024b7d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024b81:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024b85:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024b8c:	74 41                	je     c0024bcf <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024b8e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024b92:	b9 03 00 00 00       	mov    ecx,0x3
c0024b97:	fc                   	cld    
c0024b98:	31 c0                	xor    eax,eax
c0024b9a:	86 fb                	xchg   bl,bh
c0024b9c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024b9e:	c1 c3 10             	rol    ebx,0x10
c0024ba1:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024ba6:	89 e8                	mov    eax,ebp
c0024ba8:	86 fb                	xchg   bl,bh
c0024baa:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024bae:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0024bb2:	50                   	push   eax
c0024bb3:	50                   	push   eax
c0024bb4:	55                   	push   ebp
c0024bb5:	c1 e5 0b             	shl    ebp,0xb
c0024bb8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024bbc:	6a 00                	push   0x0
c0024bbe:	55                   	push   ebp
c0024bbf:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024bc3:	50                   	push   eax
c0024bc4:	56                   	push   esi
c0024bc5:	e8 12 fb ff ff       	call   c00246dc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024bca:	83 c4 20             	add    esp,0x20
c0024bcd:	eb 1a                	jmp    c0024be9 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024bcf:	83 ec 0c             	sub    esp,0xc
c0024bd2:	56                   	push   esi
c0024bd3:	e8 56 fe ff ff       	call   c0024a2e <ATAPI::detectMedia()>
c0024bd8:	83 c4 10             	add    esp,0x10
c0024bdb:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024be2:	75 aa                	jne    c0024b8e <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024be4:	b8 02 00 00 00       	mov    eax,0x2
c0024be9:	83 c4 1c             	add    esp,0x1c
c0024bec:	5b                   	pop    ebx
c0024bed:	5e                   	pop    esi
c0024bee:	5f                   	pop    edi
c0024bef:	5d                   	pop    ebp
c0024bf0:	c3                   	ret    
c0024bf1:	90                   	nop

c0024bf2 <SATA::close(int, int, void*)>:
c0024bf2:	83 ec 0c             	sub    esp,0xc
c0024bf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024bf9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024bff:	85 c0                	test   eax,eax
c0024c01:	74 0c                	je     c0024c0f <SATA::close(int, int, void*)+0x1d>
c0024c03:	83 ec 0c             	sub    esp,0xc
c0024c06:	8b 10                	mov    edx,DWORD PTR [eax]
c0024c08:	50                   	push   eax
c0024c09:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024c0c:	83 c4 10             	add    esp,0x10
c0024c0f:	31 c0                	xor    eax,eax
c0024c11:	83 c4 0c             	add    esp,0xc
c0024c14:	c3                   	ret    
c0024c15:	90                   	nop

c0024c16 <SATA::powerSaving(PowerSavingLevel)>:
c0024c16:	c3                   	ret    
c0024c17:	90                   	nop

c0024c18 <SATA::open(int, int, void*)>:
c0024c18:	56                   	push   esi
c0024c19:	53                   	push   ebx
c0024c1a:	50                   	push   eax
c0024c1b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024c1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024c23:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024c2d:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024c33:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024c3d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024c41:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024c4b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024c51:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024c58:	e8 85 b2 fe ff       	call   c000fee2 <Phys::allocatePage()>
c0024c5d:	89 c6                	mov    esi,eax
c0024c5f:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024c65:	81 c6 00 10 00 00    	add    esi,0x1000
c0024c6b:	e8 72 b2 fe ff       	call   c000fee2 <Phys::allocatePage()>
c0024c70:	39 c6                	cmp    esi,eax
c0024c72:	74 10                	je     c0024c84 <SATA::open(int, int, void*)+0x6c>
c0024c74:	83 ec 0c             	sub    esp,0xc
c0024c77:	68 94 d0 02 c0       	push   0xc002d094
c0024c7c:	e8 a2 59 ff ff       	call   c001a623 <Krnl::panic(char const*)>
c0024c81:	83 c4 10             	add    esp,0x10
c0024c84:	83 ec 0c             	sub    esp,0xc
c0024c87:	6a 02                	push   0x2
c0024c89:	e8 15 cf fe ff       	call   c0011ba3 <Virt::allocateKernelVirtualPages(int)>
c0024c8e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024c94:	e8 a5 d1 fe ff       	call   c0011e3e <Virt::getAKernelVAS()>
c0024c99:	6a 03                	push   0x3
c0024c9b:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0024ca1:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0024ca7:	50                   	push   eax
c0024ca8:	e8 cd d6 fe ff       	call   c001237a <VAS::mapPage(unsigned long, unsigned long, int)>
c0024cad:	83 c4 14             	add    esp,0x14
c0024cb0:	53                   	push   ebx
c0024cb1:	e8 6e fb fe ff       	call   c0014824 <PhysicalDisk::startCache()>
c0024cb6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024cb9:	e8 ec 1c ff ff       	call   c00169aa <createPartitionsForDisk(PhysicalDisk*)>
c0024cbe:	83 c4 14             	add    esp,0x14
c0024cc1:	31 c0                	xor    eax,eax
c0024cc3:	5b                   	pop    ebx
c0024cc4:	5e                   	pop    esi
c0024cc5:	c3                   	ret    

c0024cc6 <SATA::SATA()>:
c0024cc6:	83 ec 0c             	sub    esp,0xc
c0024cc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ccd:	83 ec 04             	sub    esp,0x4
c0024cd0:	68 00 02 00 00       	push   0x200
c0024cd5:	68 a8 d0 02 c0       	push   0xc002d0a8
c0024cda:	50                   	push   eax
c0024cdb:	e8 dc fa fe ff       	call   c00147bc <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024ce0:	83 c4 10             	add    esp,0x10
c0024ce3:	ba 18 d1 02 c0       	mov    edx,0xc002d118
c0024ce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024cec:	89 10                	mov    DWORD PTR [eax],edx
c0024cee:	90                   	nop
c0024cef:	83 c4 0c             	add    esp,0xc
c0024cf2:	c3                   	ret    
c0024cf3:	90                   	nop

c0024cf4 <SATA::access(unsigned long long, int, void*, bool)>:
c0024cf4:	55                   	push   ebp
c0024cf5:	57                   	push   edi
c0024cf6:	56                   	push   esi
c0024cf7:	53                   	push   ebx
c0024cf8:	83 ec 2c             	sub    esp,0x2c
c0024cfb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024cff:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0024d03:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024d07:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0024d0b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024d0f:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024d14:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024d18:	7e 10                	jle    c0024d2a <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024d1a:	83 ec 0c             	sub    esp,0xc
c0024d1d:	68 b8 d0 02 c0       	push   0xc002d0b8
c0024d22:	e8 fc 58 ff ff       	call   c001a623 <Krnl::panic(char const*)>
c0024d27:	83 c4 10             	add    esp,0x10
c0024d2a:	8b b5 6c 01 00 00    	mov    esi,DWORD PTR [ebp+0x16c]
c0024d30:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024d36:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024d3c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024d40:	89 f0                	mov    eax,esi
c0024d42:	c1 e0 07             	shl    eax,0x7
c0024d45:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024d49:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024d53:	53                   	push   ebx
c0024d54:	8d 46 02             	lea    eax,[esi+0x2]
c0024d57:	53                   	push   ebx
c0024d58:	c1 e0 07             	shl    eax,0x7
c0024d5b:	bb 01 00 00 00       	mov    ebx,0x1
c0024d60:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0024d64:	50                   	push   eax
c0024d65:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024d6b:	e8 aa ef ff ff       	call   c0023d1a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024d70:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0024d74:	83 c4 10             	add    esp,0x10
c0024d77:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0024d7c:	0f 84 ce 01 00 00    	je     c0024f50 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024d82:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024d86:	c1 e0 09             	shl    eax,0x9
c0024d89:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024d8e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024d92:	74 17                	je     c0024dab <SATA::access(unsigned long long, int, void*, bool)+0xb7>
c0024d94:	51                   	push   ecx
c0024d95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024d99:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0024d9d:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024da3:	e8 9c b9 fd ff       	call   c0000744 <memcpy>
c0024da8:	83 c4 10             	add    esp,0x10
c0024dab:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024db1:	8d 46 02             	lea    eax,[esi+0x2]
c0024db4:	c1 e0 07             	shl    eax,0x7
c0024db7:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024dbb:	8b 00                	mov    eax,DWORD PTR [eax]
c0024dbd:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024dc3:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024dc9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024dcd:	c1 e1 05             	shl    ecx,0x5
c0024dd0:	01 c8                	add    eax,ecx
c0024dd2:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024dd6:	8a 18                	mov    bl,BYTE PTR [eax]
c0024dd8:	83 e1 01             	and    ecx,0x1
c0024ddb:	83 e3 bf             	and    ebx,0xffffffbf
c0024dde:	c1 e1 06             	shl    ecx,0x6
c0024de1:	09 d9                	or     ecx,ebx
c0024de3:	88 08                	mov    BYTE PTR [eax],cl
c0024de5:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024de7:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024ded:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024df3:	89 08                	mov    DWORD PTR [eax],ecx
c0024df5:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024dfb:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024e01:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024e07:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024e0a:	52                   	push   edx
c0024e0b:	68 90 00 00 00       	push   0x90
c0024e10:	6a 00                	push   0x0
c0024e12:	53                   	push   ebx
c0024e13:	e8 60 b9 fd ff       	call   c0000778 <memset>
c0024e18:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c0024e1e:	66 89 7b 04          	mov    WORD PTR [ebx+0x4],di
c0024e22:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024e28:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024e2c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024e30:	83 c4 10             	add    esp,0x10
c0024e33:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024e36:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024e3c:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0024e42:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024e47:	09 c8                	or     eax,ecx
c0024e49:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024e4f:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024e52:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024e59:	66 25 00 7f          	and    ax,0x7f00
c0024e5d:	66 0d 27 80          	or     ax,0x8027
c0024e61:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c0024e66:	66 89 03             	mov    WORD PTR [ebx],ax
c0024e69:	19 c0                	sbb    eax,eax
c0024e6b:	83 e0 f0             	and    eax,0xfffffff0
c0024e6e:	83 c0 35             	add    eax,0x35
c0024e71:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c0024e74:	89 f8                	mov    eax,edi
c0024e76:	c1 e8 10             	shr    eax,0x10
c0024e79:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024e7c:	89 f8                	mov    eax,edi
c0024e7e:	c1 e8 18             	shr    eax,0x18
c0024e81:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0024e84:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0024e88:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024e8b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024e8f:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024e92:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024e96:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024e9a:	89 f3                	mov    ebx,esi
c0024e9c:	31 c0                	xor    eax,eax
c0024e9e:	c1 e3 07             	shl    ebx,0x7
c0024ea1:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0024ea5:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c0024eab:	80 e1 88             	and    cl,0x88
c0024eae:	74 0a                	je     c0024eba <SATA::access(unsigned long long, int, void*, bool)+0x1c6>
c0024eb0:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024eb5:	74 0a                	je     c0024ec1 <SATA::access(unsigned long long, int, void*, bool)+0x1cd>
c0024eb7:	40                   	inc    eax
c0024eb8:	eb eb                	jmp    c0024ea5 <SATA::access(unsigned long long, int, void*, bool)+0x1b1>
c0024eba:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024ebf:	75 0a                	jne    c0024ecb <SATA::access(unsigned long long, int, void*, bool)+0x1d7>
c0024ec1:	83 ec 0c             	sub    esp,0xc
c0024ec4:	68 f1 d0 02 c0       	push   0xc002d0f1
c0024ec9:	eb 56                	jmp    c0024f21 <SATA::access(unsigned long long, int, void*, bool)+0x22d>
c0024ecb:	b8 01 00 00 00       	mov    eax,0x1
c0024ed0:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
c0024ed4:	c1 e6 07             	shl    esi,0x7
c0024ed7:	d3 e0                	shl    eax,cl
c0024ed9:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0024edd:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c0024ee3:	8b 8e 38 01 00 00    	mov    ecx,DWORD PTR [esi+0x138]
c0024ee9:	85 c8                	test   eax,ecx
c0024eeb:	74 20                	je     c0024f0d <SATA::access(unsigned long long, int, void*, bool)+0x219>
c0024eed:	8b 8e 10 01 00 00    	mov    ecx,DWORD PTR [esi+0x110]
c0024ef3:	0f ba e1 1e          	bt     ecx,0x1e
c0024ef7:	73 ea                	jae    c0024ee3 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c0024ef9:	83 ec 0c             	sub    esp,0xc
c0024efc:	31 db                	xor    ebx,ebx
c0024efe:	68 ff d0 02 c0       	push   0xc002d0ff
c0024f03:	e8 1b 57 ff ff       	call   c001a623 <Krnl::panic(char const*)>
c0024f08:	83 c4 10             	add    esp,0x10
c0024f0b:	eb 43                	jmp    c0024f50 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024f0d:	8b 86 10 01 00 00    	mov    eax,DWORD PTR [esi+0x110]
c0024f13:	0f ba e0 1e          	bt     eax,0x1e
c0024f17:	73 17                	jae    c0024f30 <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c0024f19:	83 ec 0c             	sub    esp,0xc
c0024f1c:	68 ff d0 02 c0       	push   0xc002d0ff
c0024f21:	e8 fd 56 ff ff       	call   c001a623 <Krnl::panic(char const*)>
c0024f26:	bb 01 00 00 00       	mov    ebx,0x1
c0024f2b:	83 c4 10             	add    esp,0x10
c0024f2e:	eb 20                	jmp    c0024f50 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024f30:	31 db                	xor    ebx,ebx
c0024f32:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024f37:	75 17                	jne    c0024f50 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024f39:	50                   	push   eax
c0024f3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024f3e:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024f44:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0024f48:	e8 f7 b7 fd ff       	call   c0000744 <memcpy>
c0024f4d:	83 c4 10             	add    esp,0x10
c0024f50:	83 c4 2c             	add    esp,0x2c
c0024f53:	89 d8                	mov    eax,ebx
c0024f55:	5b                   	pop    ebx
c0024f56:	5e                   	pop    esi
c0024f57:	5f                   	pop    edi
c0024f58:	5d                   	pop    ebp
c0024f59:	c3                   	ret    

c0024f5a <SATA::read(unsigned long long, int, void*)>:
c0024f5a:	57                   	push   edi
c0024f5b:	b8 04 00 00 00       	mov    eax,0x4
c0024f60:	56                   	push   esi
c0024f61:	53                   	push   ebx
c0024f62:	83 ec 10             	sub    esp,0x10
c0024f65:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024f69:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024f6d:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024f70:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024f74:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024f78:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024f7e:	77 3b                	ja     c0024fbb <SATA::read(unsigned long long, int, void*)+0x61>
c0024f80:	b8 06 00 00 00       	mov    eax,0x6
c0024f85:	85 d2                	test   edx,edx
c0024f87:	74 32                	je     c0024fbb <SATA::read(unsigned long long, int, void*)+0x61>
c0024f89:	50                   	push   eax
c0024f8a:	50                   	push   eax
c0024f8b:	6a 00                	push   0x0
c0024f8d:	52                   	push   edx
c0024f8e:	53                   	push   ebx
c0024f8f:	57                   	push   edi
c0024f90:	56                   	push   esi
c0024f91:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024f95:	e8 5a fd ff ff       	call   c0024cf4 <SATA::access(unsigned long long, int, void*, bool)>
c0024f9a:	83 c4 20             	add    esp,0x20
c0024f9d:	85 c0                	test   eax,eax
c0024f9f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024fa3:	75 11                	jne    c0024fb6 <SATA::read(unsigned long long, int, void*)+0x5c>
c0024fa5:	01 1d a8 29 03 c0    	add    DWORD PTR ds:0xc00329a8,ebx
c0024fab:	e8 48 ba fe ff       	call   c00109f8 <VgaText::updateDiskUsage()>
c0024fb0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024fb4:	eb 05                	jmp    c0024fbb <SATA::read(unsigned long long, int, void*)+0x61>
c0024fb6:	b8 01 00 00 00       	mov    eax,0x1
c0024fbb:	83 c4 10             	add    esp,0x10
c0024fbe:	5b                   	pop    ebx
c0024fbf:	5e                   	pop    esi
c0024fc0:	5f                   	pop    edi
c0024fc1:	c3                   	ret    

c0024fc2 <SATA::write(unsigned long long, int, void*)>:
c0024fc2:	55                   	push   ebp
c0024fc3:	b8 04 00 00 00       	mov    eax,0x4
c0024fc8:	57                   	push   edi
c0024fc9:	56                   	push   esi
c0024fca:	53                   	push   ebx
c0024fcb:	83 ec 1c             	sub    esp,0x1c
c0024fce:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024fd2:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0024fd6:	8d 75 ff             	lea    esi,[ebp-0x1]
c0024fd9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0024fdd:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0024fe1:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0024fe7:	77 56                	ja     c002503f <SATA::write(unsigned long long, int, void*)+0x7d>
c0024fe9:	b8 06 00 00 00       	mov    eax,0x6
c0024fee:	85 ff                	test   edi,edi
c0024ff0:	74 4d                	je     c002503f <SATA::write(unsigned long long, int, void*)+0x7d>
c0024ff2:	89 ee                	mov    esi,ebp
c0024ff4:	c1 e6 09             	shl    esi,0x9
c0024ff7:	01 fe                	add    esi,edi
c0024ff9:	89 c8                	mov    eax,ecx
c0024ffb:	89 da                	mov    edx,ebx
c0024ffd:	83 c0 01             	add    eax,0x1
c0025000:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025004:	83 d2 00             	adc    edx,0x0
c0025007:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002500b:	50                   	push   eax
c002500c:	50                   	push   eax
c002500d:	6a 01                	push   0x1
c002500f:	57                   	push   edi
c0025010:	81 c7 00 02 00 00    	add    edi,0x200
c0025016:	6a 01                	push   0x1
c0025018:	53                   	push   ebx
c0025019:	51                   	push   ecx
c002501a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002501e:	e8 d1 fc ff ff       	call   c0024cf4 <SATA::access(unsigned long long, int, void*, bool)>
c0025023:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0025027:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002502b:	83 c4 20             	add    esp,0x20
c002502e:	39 f7                	cmp    edi,esi
c0025030:	75 c7                	jne    c0024ff9 <SATA::write(unsigned long long, int, void*)+0x37>
c0025032:	01 2d a4 29 03 c0    	add    DWORD PTR ds:0xc00329a4,ebp
c0025038:	e8 bb b9 fe ff       	call   c00109f8 <VgaText::updateDiskUsage()>
c002503d:	31 c0                	xor    eax,eax
c002503f:	83 c4 1c             	add    esp,0x1c
c0025042:	5b                   	pop    ebx
c0025043:	5e                   	pop    esi
c0025044:	5f                   	pop    edi
c0025045:	5d                   	pop    ebp
c0025046:	c3                   	ret    
c0025047:	90                   	nop

c0025048 <SATAPI::write(unsigned long long, int, void*)>:
c0025048:	b8 03 00 00 00       	mov    eax,0x3
c002504d:	c3                   	ret    

c002504e <SATAPI::close(int, int, void*)>:
c002504e:	83 ec 0c             	sub    esp,0xc
c0025051:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025055:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002505b:	85 c0                	test   eax,eax
c002505d:	74 0c                	je     c002506b <SATAPI::close(int, int, void*)+0x1d>
c002505f:	83 ec 0c             	sub    esp,0xc
c0025062:	8b 10                	mov    edx,DWORD PTR [eax]
c0025064:	50                   	push   eax
c0025065:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0025068:	83 c4 10             	add    esp,0x10
c002506b:	31 c0                	xor    eax,eax
c002506d:	83 c4 0c             	add    esp,0xc
c0025070:	c3                   	ret    
c0025071:	90                   	nop

c0025072 <SATAPI::SATAPI()>:
c0025072:	83 ec 0c             	sub    esp,0xc
c0025075:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025079:	83 ec 04             	sub    esp,0x4
c002507c:	68 00 08 00 00       	push   0x800
c0025081:	68 48 d1 02 c0       	push   0xc002d148
c0025086:	50                   	push   eax
c0025087:	e8 30 f7 fe ff       	call   c00147bc <PhysicalDisk::PhysicalDisk(char const*, int)>
c002508c:	83 c4 10             	add    esp,0x10
c002508f:	ba f4 d1 02 c0       	mov    edx,0xc002d1f4
c0025094:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025098:	89 10                	mov    DWORD PTR [eax],edx
c002509a:	90                   	nop
c002509b:	83 c4 0c             	add    esp,0xc
c002509e:	c3                   	ret    
c002509f:	90                   	nop

c00250a0 <SATAPI::diskRemoved()>:
c00250a0:	83 ec 18             	sub    esp,0x18
c00250a3:	68 54 d1 02 c0       	push   0xc002d154
c00250a8:	e8 c4 de fe ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c00250ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00250b1:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c00250b8:	83 c4 1c             	add    esp,0x1c
c00250bb:	c3                   	ret    

c00250bc <SATAPI::diskInserted()>:
c00250bc:	53                   	push   ebx
c00250bd:	83 ec 14             	sub    esp,0x14
c00250c0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00250c4:	68 6b d1 02 c0       	push   0xc002d16b
c00250c9:	e8 a3 de fe ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c00250ce:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c00250d5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00250d8:	e8 47 f7 fe ff       	call   c0014824 <PhysicalDisk::startCache()>
c00250dd:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00250e1:	83 c4 18             	add    esp,0x18
c00250e4:	5b                   	pop    ebx
c00250e5:	e9 c0 18 ff ff       	jmp    c00169aa <createPartitionsForDisk(PhysicalDisk*)>

c00250ea <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c00250ea:	55                   	push   ebp
c00250eb:	57                   	push   edi
c00250ec:	56                   	push   esi
c00250ed:	53                   	push   ebx
c00250ee:	83 ec 24             	sub    esp,0x24
c00250f1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00250f5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00250f9:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c00250ff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025103:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0025107:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c002510d:	8d 5f 02             	lea    ebx,[edi+0x2]
c0025110:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025116:	c1 e3 07             	shl    ebx,0x7
c0025119:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002511d:	89 f8                	mov    eax,edi
c002511f:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0025123:	c1 e0 07             	shl    eax,0x7
c0025126:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002512a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002512e:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0025138:	53                   	push   ebx
c0025139:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c002513f:	e8 d6 eb ff ff       	call   c0023d1a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0025144:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025148:	83 c4 10             	add    esp,0x10
c002514b:	b8 01 00 00 00       	mov    eax,0x1
c0025150:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0025155:	0f 84 8a 01 00 00    	je     c00252e5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c002515b:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c0025161:	8b 03                	mov    eax,DWORD PTR [ebx]
c0025163:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0025169:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002516f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0025173:	c1 e1 05             	shl    ecx,0x5
c0025176:	01 c8                	add    eax,ecx
c0025178:	8b 08                	mov    ecx,DWORD PTR [eax]
c002517a:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0025180:	81 c9 25 00 01 00    	or     ecx,0x10025
c0025186:	89 08                	mov    DWORD PTR [eax],ecx
c0025188:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c002518e:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0025194:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c002519a:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c002519d:	52                   	push   edx
c002519e:	68 90 00 00 00       	push   0x90
c00251a3:	6a 00                	push   0x0
c00251a5:	53                   	push   ebx
c00251a6:	e8 cd b5 fd ff       	call   c0000778 <memset>
c00251ab:	83 c4 0c             	add    esp,0xc
c00251ae:	8d 43 40             	lea    eax,[ebx+0x40]
c00251b1:	6a 0c                	push   0xc
c00251b3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00251b7:	50                   	push   eax
c00251b8:	e8 87 b5 fd ff       	call   c0000744 <memcpy>
c00251bd:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c00251c3:	89 ea                	mov    edx,ebp
c00251c5:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c00251cb:	c1 ea 18             	shr    edx,0x18
c00251ce:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00251d2:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c00251d5:	8d 48 ff             	lea    ecx,[eax-0x1]
c00251d8:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c00251dc:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c00251e2:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c00251e8:	25 00 00 c0 ff       	and    eax,0xffc00000
c00251ed:	66 89 6b 04          	mov    WORD PTR [ebx+0x4],bp
c00251f1:	09 c8                	or     eax,ecx
c00251f3:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c00251f7:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c00251fd:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0025200:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0025207:	66 25 00 7f          	and    ax,0x7f00
c002520b:	66 0d 27 80          	or     ax,0x8027
c002520f:	66 89 03             	mov    WORD PTR [ebx],ax
c0025212:	89 e8                	mov    eax,ebp
c0025214:	c1 e8 10             	shr    eax,0x10
c0025217:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c002521a:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c002521e:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0025221:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025225:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0025228:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002522c:	83 c4 10             	add    esp,0x10
c002522f:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0025233:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025237:	31 c0                	xor    eax,eax
c0025239:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c002523f:	80 e1 88             	and    cl,0x88
c0025242:	74 0a                	je     c002524e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x164>
c0025244:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025249:	74 0a                	je     c0025255 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c002524b:	40                   	inc    eax
c002524c:	eb eb                	jmp    c0025239 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x14f>
c002524e:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025253:	75 0f                	jne    c0025264 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17a>
c0025255:	83 ec 0c             	sub    esp,0xc
c0025258:	68 f1 d0 02 c0       	push   0xc002d0f1
c002525d:	e8 c1 53 ff ff       	call   c001a623 <Krnl::panic(char const*)>
c0025262:	eb 3a                	jmp    c002529e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b4>
c0025264:	b8 01 00 00 00       	mov    eax,0x1
c0025269:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c002526d:	c1 e7 07             	shl    edi,0x7
c0025270:	d3 e0                	shl    eax,cl
c0025272:	03 3c 24             	add    edi,DWORD PTR [esp]
c0025275:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c002527b:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c0025281:	85 d0                	test   eax,edx
c0025283:	74 23                	je     c00252a8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1be>
c0025285:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c002528b:	0f ba e2 1e          	bt     edx,0x1e
c002528f:	73 ea                	jae    c002527b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x191>
c0025291:	83 ec 0c             	sub    esp,0xc
c0025294:	68 83 d1 02 c0       	push   0xc002d183
c0025299:	e8 d3 dc fe ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c002529e:	83 c4 10             	add    esp,0x10
c00252a1:	b8 01 00 00 00       	mov    eax,0x1
c00252a6:	eb 3d                	jmp    c00252e5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c00252a8:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c00252ae:	0f ba e0 1e          	bt     eax,0x1e
c00252b2:	73 0a                	jae    c00252be <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d4>
c00252b4:	83 ec 0c             	sub    esp,0xc
c00252b7:	68 96 d1 02 c0       	push   0xc002d196
c00252bc:	eb db                	jmp    c0025299 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1af>
c00252be:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00252c3:	74 1e                	je     c00252e3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c00252c5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00252ca:	74 17                	je     c00252e3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c00252cc:	50                   	push   eax
c00252cd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00252d1:	ff b6 7c 01 00 00    	push   DWORD PTR [esi+0x17c]
c00252d7:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00252db:	e8 64 b4 fd ff       	call   c0000744 <memcpy>
c00252e0:	83 c4 10             	add    esp,0x10
c00252e3:	31 c0                	xor    eax,eax
c00252e5:	83 c4 1c             	add    esp,0x1c
c00252e8:	5b                   	pop    ebx
c00252e9:	5e                   	pop    esi
c00252ea:	5f                   	pop    edi
c00252eb:	5d                   	pop    ebp
c00252ec:	c3                   	ret    
c00252ed:	90                   	nop

c00252ee <SATAPI::eject()>:
c00252ee:	57                   	push   edi
c00252ef:	b9 03 00 00 00       	mov    ecx,0x3
c00252f4:	53                   	push   ebx
c00252f5:	83 ec 14             	sub    esp,0x14
c00252f8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00252fc:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025300:	fc                   	cld    
c0025301:	31 c0                	xor    eax,eax
c0025303:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025305:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002530a:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002530f:	50                   	push   eax
c0025310:	6a 00                	push   0x0
c0025312:	6a 00                	push   0x0
c0025314:	6a 00                	push   0x0
c0025316:	6a 00                	push   0x0
c0025318:	6a 02                	push   0x2
c002531a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002531e:	50                   	push   eax
c002531f:	53                   	push   ebx
c0025320:	e8 c5 fd ff ff       	call   c00250ea <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025325:	83 c4 14             	add    esp,0x14
c0025328:	53                   	push   ebx
c0025329:	e8 72 fd ff ff       	call   c00250a0 <SATAPI::diskRemoved()>
c002532e:	83 c4 24             	add    esp,0x24
c0025331:	31 c0                	xor    eax,eax
c0025333:	5b                   	pop    ebx
c0025334:	5f                   	pop    edi
c0025335:	c3                   	ret    

c0025336 <SATAPI::detectMedia()>:
c0025336:	56                   	push   esi
c0025337:	53                   	push   ebx
c0025338:	83 ec 28             	sub    esp,0x28
c002533b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002533f:	6a 0c                	push   0xc
c0025341:	6a 00                	push   0x0
c0025343:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025347:	56                   	push   esi
c0025348:	e8 2b b4 fd ff       	call   c0000778 <memset>
c002534d:	83 c4 0c             	add    esp,0xc
c0025350:	6a 00                	push   0x0
c0025352:	6a 00                	push   0x0
c0025354:	6a 00                	push   0x0
c0025356:	6a 00                	push   0x0
c0025358:	6a 00                	push   0x0
c002535a:	56                   	push   esi
c002535b:	53                   	push   ebx
c002535c:	e8 89 fd ff ff       	call   c00250ea <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025361:	83 c4 1c             	add    esp,0x1c
c0025364:	6a 0c                	push   0xc
c0025366:	6a 00                	push   0x0
c0025368:	56                   	push   esi
c0025369:	e8 0a b4 fd ff       	call   c0000778 <memset>
c002536e:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0025373:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025378:	83 c4 0c             	add    esp,0xc
c002537b:	6a 01                	push   0x1
c002537d:	8d 44 24 16          	lea    eax,[esp+0x16]
c0025381:	50                   	push   eax
c0025382:	6a 00                	push   0x0
c0025384:	6a 00                	push   0x0
c0025386:	6a 12                	push   0x12
c0025388:	56                   	push   esi
c0025389:	53                   	push   ebx
c002538a:	e8 5b fd ff ff       	call   c00250ea <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002538f:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025393:	83 c4 20             	add    esp,0x20
c0025396:	83 e0 7f             	and    eax,0x7f
c0025399:	3c 70                	cmp    al,0x70
c002539b:	74 15                	je     c00253b2 <SATAPI::detectMedia()+0x7c>
c002539d:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00253a4:	75 0c                	jne    c00253b2 <SATAPI::detectMedia()+0x7c>
c00253a6:	83 ec 0c             	sub    esp,0xc
c00253a9:	53                   	push   ebx
c00253aa:	e8 0d fd ff ff       	call   c00250bc <SATAPI::diskInserted()>
c00253af:	83 c4 10             	add    esp,0x10
c00253b2:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00253b6:	83 e0 0f             	and    eax,0xf
c00253b9:	3c 02                	cmp    al,0x2
c00253bb:	75 1b                	jne    c00253d8 <SATAPI::detectMedia()+0xa2>
c00253bd:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00253c2:	75 2d                	jne    c00253f1 <SATAPI::detectMedia()+0xbb>
c00253c4:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00253cb:	74 24                	je     c00253f1 <SATAPI::detectMedia()+0xbb>
c00253cd:	83 ec 0c             	sub    esp,0xc
c00253d0:	53                   	push   ebx
c00253d1:	e8 ca fc ff ff       	call   c00250a0 <SATAPI::diskRemoved()>
c00253d6:	eb 16                	jmp    c00253ee <SATAPI::detectMedia()+0xb8>
c00253d8:	84 c0                	test   al,al
c00253da:	75 15                	jne    c00253f1 <SATAPI::detectMedia()+0xbb>
c00253dc:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00253e3:	75 0c                	jne    c00253f1 <SATAPI::detectMedia()+0xbb>
c00253e5:	83 ec 0c             	sub    esp,0xc
c00253e8:	53                   	push   ebx
c00253e9:	e8 ce fc ff ff       	call   c00250bc <SATAPI::diskInserted()>
c00253ee:	83 c4 10             	add    esp,0x10
c00253f1:	83 c4 24             	add    esp,0x24
c00253f4:	5b                   	pop    ebx
c00253f5:	5e                   	pop    esi
c00253f6:	c3                   	ret    
c00253f7:	90                   	nop

c00253f8 <SATAPI::open(int, int, void*)>:
c00253f8:	56                   	push   esi
c00253f9:	53                   	push   ebx
c00253fa:	50                   	push   eax
c00253fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00253ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025403:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002540d:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025413:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002541d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025421:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002542b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0025431:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025438:	e8 a5 aa fe ff       	call   c000fee2 <Phys::allocatePage()>
c002543d:	89 c6                	mov    esi,eax
c002543f:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025445:	81 c6 00 10 00 00    	add    esi,0x1000
c002544b:	e8 92 aa fe ff       	call   c000fee2 <Phys::allocatePage()>
c0025450:	39 c6                	cmp    esi,eax
c0025452:	74 10                	je     c0025464 <SATAPI::open(int, int, void*)+0x6c>
c0025454:	83 ec 0c             	sub    esp,0xc
c0025457:	68 ab d1 02 c0       	push   0xc002d1ab
c002545c:	e8 c2 51 ff ff       	call   c001a623 <Krnl::panic(char const*)>
c0025461:	83 c4 10             	add    esp,0x10
c0025464:	83 ec 0c             	sub    esp,0xc
c0025467:	6a 02                	push   0x2
c0025469:	e8 35 c7 fe ff       	call   c0011ba3 <Virt::allocateKernelVirtualPages(int)>
c002546e:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0025474:	e8 c5 c9 fe ff       	call   c0011e3e <Virt::getAKernelVAS()>
c0025479:	6a 03                	push   0x3
c002547b:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0025481:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0025487:	50                   	push   eax
c0025488:	e8 ed ce fe ff       	call   c001237a <VAS::mapPage(unsigned long, unsigned long, int)>
c002548d:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0025494:	83 c4 14             	add    esp,0x14
c0025497:	53                   	push   ebx
c0025498:	e8 99 fe ff ff       	call   c0025336 <SATAPI::detectMedia()>
c002549d:	83 c4 14             	add    esp,0x14
c00254a0:	31 c0                	xor    eax,eax
c00254a2:	5b                   	pop    ebx
c00254a3:	5e                   	pop    esi
c00254a4:	c3                   	ret    
c00254a5:	90                   	nop

c00254a6 <SATAPI::read(unsigned long long, int, void*)>:
c00254a6:	55                   	push   ebp
c00254a7:	57                   	push   edi
c00254a8:	56                   	push   esi
c00254a9:	53                   	push   ebx
c00254aa:	83 ec 1c             	sub    esp,0x1c
c00254ad:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00254b1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00254b5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00254b9:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c00254c0:	74 19                	je     c00254db <SATAPI::read(unsigned long long, int, void*)+0x35>
c00254c2:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c00254c7:	7e 2e                	jle    c00254f7 <SATAPI::read(unsigned long long, int, void*)+0x51>
c00254c9:	83 ec 0c             	sub    esp,0xc
c00254cc:	68 c1 d1 02 c0       	push   0xc002d1c1
c00254d1:	e8 4d 51 ff ff       	call   c001a623 <Krnl::panic(char const*)>
c00254d6:	83 c4 10             	add    esp,0x10
c00254d9:	eb 1c                	jmp    c00254f7 <SATAPI::read(unsigned long long, int, void*)+0x51>
c00254db:	83 ec 0c             	sub    esp,0xc
c00254de:	55                   	push   ebp
c00254df:	e8 52 fe ff ff       	call   c0025336 <SATAPI::detectMedia()>
c00254e4:	83 c4 10             	add    esp,0x10
c00254e7:	b8 02 00 00 00       	mov    eax,0x2
c00254ec:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c00254f3:	75 cd                	jne    c00254c2 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c00254f5:	eb 49                	jmp    c0025540 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c00254f7:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00254fb:	b9 03 00 00 00       	mov    ecx,0x3
c0025500:	fc                   	cld    
c0025501:	31 c0                	xor    eax,eax
c0025503:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025505:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c002550a:	89 d8                	mov    eax,ebx
c002550c:	86 e0                	xchg   al,ah
c002550e:	c1 c0 10             	rol    eax,0x10
c0025511:	86 e0                	xchg   al,ah
c0025513:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0025517:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c002551b:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002551f:	50                   	push   eax
c0025520:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025524:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025528:	56                   	push   esi
c0025529:	53                   	push   ebx
c002552a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002552e:	c1 e0 0b             	shl    eax,0xb
c0025531:	50                   	push   eax
c0025532:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025536:	50                   	push   eax
c0025537:	55                   	push   ebp
c0025538:	e8 ad fb ff ff       	call   c00250ea <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002553d:	83 c4 20             	add    esp,0x20
c0025540:	83 c4 1c             	add    esp,0x1c
c0025543:	5b                   	pop    ebx
c0025544:	5e                   	pop    esi
c0025545:	5f                   	pop    edi
c0025546:	5d                   	pop    ebp
c0025547:	c3                   	ret    

c0025548 <AVX::open(int, int, void*)>:
c0025548:	83 ec 0c             	sub    esp,0xc
c002554b:	e8 48 11 00 00       	call   c0026698 <avxInit>
c0025550:	b8 00 00 00 00       	mov    eax,0x0
c0025555:	83 c4 0c             	add    esp,0xc
c0025558:	c3                   	ret    
c0025559:	90                   	nop

c002555a <AVX::close(int, int, void*)>:
c002555a:	83 ec 0c             	sub    esp,0xc
c002555d:	e8 37 11 00 00       	call   c0026699 <avxClose>
c0025562:	b8 00 00 00 00       	mov    eax,0x0
c0025567:	83 c4 0c             	add    esp,0xc
c002556a:	c3                   	ret    
c002556b:	90                   	nop

c002556c <AVX::available()>:
c002556c:	83 ec 0c             	sub    esp,0xc
c002556f:	e8 1c 11 00 00       	call   c0026690 <avxDetect>
c0025574:	85 c0                	test   eax,eax
c0025576:	0f 95 c0             	setne  al
c0025579:	83 c4 0c             	add    esp,0xc
c002557c:	c3                   	ret    
c002557d:	90                   	nop

c002557e <AVX::save(void*)>:
c002557e:	83 ec 0c             	sub    esp,0xc
c0025581:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025585:	83 ec 0c             	sub    esp,0xc
c0025588:	50                   	push   eax
c0025589:	e8 08 11 00 00       	call   c0026696 <avxSave>
c002558e:	83 c4 10             	add    esp,0x10
c0025591:	90                   	nop
c0025592:	83 c4 0c             	add    esp,0xc
c0025595:	c3                   	ret    

c0025596 <AVX::load(void*)>:
c0025596:	83 ec 0c             	sub    esp,0xc
c0025599:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002559d:	83 ec 0c             	sub    esp,0xc
c00255a0:	50                   	push   eax
c00255a1:	e8 f1 10 00 00       	call   c0026697 <avxLoad>
c00255a6:	83 c4 10             	add    esp,0x10
c00255a9:	90                   	nop
c00255aa:	83 c4 0c             	add    esp,0xc
c00255ad:	c3                   	ret    

c00255ae <AVX::AVX()>:
c00255ae:	83 ec 0c             	sub    esp,0xc
c00255b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255b5:	83 ec 08             	sub    esp,0x8
c00255b8:	68 24 d2 02 c0       	push   0xc002d224
c00255bd:	50                   	push   eax
c00255be:	e8 d7 f2 fe ff       	call   c001489a <FPU::FPU(char const*)>
c00255c3:	83 c4 10             	add    esp,0x10
c00255c6:	ba 34 d2 02 c0       	mov    edx,0xc002d234
c00255cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255cf:	89 10                	mov    DWORD PTR [eax],edx
c00255d1:	90                   	nop
c00255d2:	83 c4 0c             	add    esp,0xc
c00255d5:	c3                   	ret    

c00255d6 <MMX::available()>:
c00255d6:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c00255db:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00255e1:	83 e0 20             	and    eax,0x20
c00255e4:	84 c0                	test   al,al
c00255e6:	0f 95 c0             	setne  al
c00255e9:	c3                   	ret    

c00255ea <MMX::open(int, int, void*)>:
c00255ea:	83 ec 0c             	sub    esp,0xc
c00255ed:	e8 2a 11 00 00       	call   c002671c <x87Init>
c00255f2:	b8 00 00 00 00       	mov    eax,0x0
c00255f7:	83 c4 0c             	add    esp,0xc
c00255fa:	c3                   	ret    
c00255fb:	90                   	nop

c00255fc <MMX::close(int, int, void*)>:
c00255fc:	83 ec 0c             	sub    esp,0xc
c00255ff:	e8 32 11 00 00       	call   c0026736 <x87Close>
c0025604:	b8 00 00 00 00       	mov    eax,0x0
c0025609:	83 c4 0c             	add    esp,0xc
c002560c:	c3                   	ret    
c002560d:	90                   	nop

c002560e <MMX::save(void*)>:
c002560e:	83 ec 0c             	sub    esp,0xc
c0025611:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025615:	83 ec 0c             	sub    esp,0xc
c0025618:	50                   	push   eax
c0025619:	e8 f3 10 00 00       	call   c0026711 <x87Save>
c002561e:	83 c4 10             	add    esp,0x10
c0025621:	90                   	nop
c0025622:	83 c4 0c             	add    esp,0xc
c0025625:	c3                   	ret    

c0025626 <MMX::load(void*)>:
c0025626:	83 ec 0c             	sub    esp,0xc
c0025629:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002562d:	83 ec 0c             	sub    esp,0xc
c0025630:	50                   	push   eax
c0025631:	e8 e1 10 00 00       	call   c0026717 <x87Load>
c0025636:	83 c4 10             	add    esp,0x10
c0025639:	90                   	nop
c002563a:	83 c4 0c             	add    esp,0xc
c002563d:	c3                   	ret    

c002563e <MMX::MMX()>:
c002563e:	83 ec 0c             	sub    esp,0xc
c0025641:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025645:	83 ec 08             	sub    esp,0x8
c0025648:	68 64 d2 02 c0       	push   0xc002d264
c002564d:	50                   	push   eax
c002564e:	e8 47 f2 fe ff       	call   c001489a <FPU::FPU(char const*)>
c0025653:	83 c4 10             	add    esp,0x10
c0025656:	ba 74 d2 02 c0       	mov    edx,0xc002d274
c002565b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002565f:	89 10                	mov    DWORD PTR [eax],edx
c0025661:	90                   	nop
c0025662:	83 c4 0c             	add    esp,0xc
c0025665:	c3                   	ret    

c0025666 <SSE::open(int, int, void*)>:
c0025666:	83 ec 0c             	sub    esp,0xc
c0025669:	e8 66 10 00 00       	call   c00266d4 <sseInit>
c002566e:	b8 00 00 00 00       	mov    eax,0x0
c0025673:	83 c4 0c             	add    esp,0xc
c0025676:	c3                   	ret    
c0025677:	90                   	nop

c0025678 <SSE::close(int, int, void*)>:
c0025678:	83 ec 0c             	sub    esp,0xc
c002567b:	e8 64 10 00 00       	call   c00266e4 <sseClose>
c0025680:	b8 00 00 00 00       	mov    eax,0x0
c0025685:	83 c4 0c             	add    esp,0xc
c0025688:	c3                   	ret    
c0025689:	90                   	nop

c002568a <SSE::available()>:
c002568a:	83 ec 1c             	sub    esp,0x1c
c002568d:	e8 1e 10 00 00       	call   c00266b0 <absolutelyNoChanceInHell>
c0025692:	85 c0                	test   eax,eax
c0025694:	0f 95 c0             	setne  al
c0025697:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002569b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002569f:	83 c4 1c             	add    esp,0x1c
c00256a2:	c3                   	ret    
c00256a3:	90                   	nop

c00256a4 <SSE::save(void*)>:
c00256a4:	83 ec 0c             	sub    esp,0xc
c00256a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00256ab:	83 ec 0c             	sub    esp,0xc
c00256ae:	50                   	push   eax
c00256af:	e8 14 10 00 00       	call   c00266c8 <sseSave>
c00256b4:	83 c4 10             	add    esp,0x10
c00256b7:	90                   	nop
c00256b8:	83 c4 0c             	add    esp,0xc
c00256bb:	c3                   	ret    

c00256bc <SSE::load(void*)>:
c00256bc:	83 ec 0c             	sub    esp,0xc
c00256bf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00256c3:	83 ec 0c             	sub    esp,0xc
c00256c6:	50                   	push   eax
c00256c7:	e8 02 10 00 00       	call   c00266ce <sseLoad>
c00256cc:	83 c4 10             	add    esp,0x10
c00256cf:	90                   	nop
c00256d0:	83 c4 0c             	add    esp,0xc
c00256d3:	c3                   	ret    

c00256d4 <SSE::SSE()>:
c00256d4:	83 ec 0c             	sub    esp,0xc
c00256d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256db:	83 ec 08             	sub    esp,0x8
c00256de:	68 a4 d2 02 c0       	push   0xc002d2a4
c00256e3:	50                   	push   eax
c00256e4:	e8 b1 f1 fe ff       	call   c001489a <FPU::FPU(char const*)>
c00256e9:	83 c4 10             	add    esp,0x10
c00256ec:	ba b4 d2 02 c0       	mov    edx,0xc002d2b4
c00256f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256f5:	89 10                	mov    DWORD PTR [eax],edx
c00256f7:	90                   	nop
c00256f8:	83 c4 0c             	add    esp,0xc
c00256fb:	c3                   	ret    

c00256fc <x87::open(int, int, void*)>:
c00256fc:	83 ec 0c             	sub    esp,0xc
c00256ff:	e8 18 10 00 00       	call   c002671c <x87Init>
c0025704:	b8 00 00 00 00       	mov    eax,0x0
c0025709:	83 c4 0c             	add    esp,0xc
c002570c:	c3                   	ret    
c002570d:	90                   	nop

c002570e <x87::close(int, int, void*)>:
c002570e:	83 ec 0c             	sub    esp,0xc
c0025711:	e8 20 10 00 00       	call   c0026736 <x87Close>
c0025716:	b8 00 00 00 00       	mov    eax,0x0
c002571b:	83 c4 0c             	add    esp,0xc
c002571e:	c3                   	ret    
c002571f:	90                   	nop

c0025720 <x87::available()>:
c0025720:	83 ec 0c             	sub    esp,0xc
c0025723:	e8 ce 0f 00 00       	call   c00266f6 <x87Detect>
c0025728:	85 c0                	test   eax,eax
c002572a:	0f 95 c0             	setne  al
c002572d:	83 c4 0c             	add    esp,0xc
c0025730:	c3                   	ret    
c0025731:	90                   	nop

c0025732 <x87::save(void*)>:
c0025732:	83 ec 0c             	sub    esp,0xc
c0025735:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025739:	83 ec 0c             	sub    esp,0xc
c002573c:	50                   	push   eax
c002573d:	e8 cf 0f 00 00       	call   c0026711 <x87Save>
c0025742:	83 c4 10             	add    esp,0x10
c0025745:	90                   	nop
c0025746:	83 c4 0c             	add    esp,0xc
c0025749:	c3                   	ret    

c002574a <x87::load(void*)>:
c002574a:	83 ec 0c             	sub    esp,0xc
c002574d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025751:	83 ec 0c             	sub    esp,0xc
c0025754:	50                   	push   eax
c0025755:	e8 bd 0f 00 00       	call   c0026717 <x87Load>
c002575a:	83 c4 10             	add    esp,0x10
c002575d:	90                   	nop
c002575e:	83 c4 0c             	add    esp,0xc
c0025761:	c3                   	ret    

c0025762 <x87::x87()>:
c0025762:	83 ec 0c             	sub    esp,0xc
c0025765:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025769:	83 ec 08             	sub    esp,0x8
c002576c:	68 e4 d2 02 c0       	push   0xc002d2e4
c0025771:	50                   	push   eax
c0025772:	e8 23 f1 fe ff       	call   c001489a <FPU::FPU(char const*)>
c0025777:	83 c4 10             	add    esp,0x10
c002577a:	ba f4 d2 02 c0       	mov    edx,0xc002d2f4
c002577f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025783:	89 10                	mov    DWORD PTR [eax],edx
c0025785:	90                   	nop
c0025786:	83 c4 0c             	add    esp,0xc
c0025789:	c3                   	ret    

c002578a <APIC::disable()>:
c002578a:	90                   	nop
c002578b:	c3                   	ret    

c002578c <APIC::close(int, int, void*)>:
c002578c:	55                   	push   ebp
c002578d:	89 e5                	mov    ebp,esp
c002578f:	83 ec 08             	sub    esp,0x8
c0025792:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025795:	8b 00                	mov    eax,DWORD PTR [eax]
c0025797:	83 c0 3c             	add    eax,0x3c
c002579a:	8b 00                	mov    eax,DWORD PTR [eax]
c002579c:	83 ec 0c             	sub    esp,0xc
c002579f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00257a2:	ff d0                	call   eax
c00257a4:	83 c4 10             	add    esp,0x10
c00257a7:	b8 00 00 00 00       	mov    eax,0x0
c00257ac:	c9                   	leave  
c00257ad:	c3                   	ret    

c00257ae <IOAPIC::close(int, int, void*)>:
c00257ae:	b8 00 00 00 00       	mov    eax,0x0
c00257b3:	c3                   	ret    

c00257b4 <APIC::io_wait()>:
c00257b4:	eb 00                	jmp    c00257b6 <APIC::io_wait()+0x2>
c00257b6:	eb 00                	jmp    c00257b8 <APIC::io_wait()+0x4>
c00257b8:	90                   	nop
c00257b9:	c3                   	ret    

c00257ba <APIC::getBase()>:
c00257ba:	55                   	push   ebp
c00257bb:	89 e5                	mov    ebp,esp
c00257bd:	83 ec 18             	sub    esp,0x18
c00257c0:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c00257c5:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00257cb:	83 e0 08             	and    eax,0x8
c00257ce:	84 c0                	test   al,al
c00257d0:	75 07                	jne    c00257d9 <APIC::getBase()+0x1f>
c00257d2:	b8 00 00 00 00       	mov    eax,0x0
c00257d7:	eb 21                	jmp    c00257fa <APIC::getBase()+0x40>
c00257d9:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c00257de:	83 ec 08             	sub    esp,0x8
c00257e1:	6a 1b                	push   0x1b
c00257e3:	50                   	push   eax
c00257e4:	e8 ff 95 fe ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c00257e9:	83 c4 10             	add    esp,0x10
c00257ec:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00257ef:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00257f2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00257f5:	25 00 f0 ff ff       	and    eax,0xfffff000
c00257fa:	c9                   	leave  
c00257fb:	c3                   	ret    

c00257fc <APIC::eoi(unsigned char)>:
c00257fc:	55                   	push   ebp
c00257fd:	89 e5                	mov    ebp,esp
c00257ff:	83 ec 28             	sub    esp,0x28
c0025802:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025805:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025808:	83 ec 0c             	sub    esp,0xc
c002580b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002580e:	e8 a7 ff ff ff       	call   c00257ba <APIC::getBase()>
c0025813:	83 c4 10             	add    esp,0x10
c0025816:	05 b0 00 00 00       	add    eax,0xb0
c002581b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002581e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025821:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0025827:	90                   	nop
c0025828:	c9                   	leave  
c0025829:	c3                   	ret    

c002582a <APIC::open(int, int, void*)>:
c002582a:	55                   	push   ebp
c002582b:	89 e5                	mov    ebp,esp
c002582d:	57                   	push   edi
c002582e:	56                   	push   esi
c002582f:	53                   	push   ebx
c0025830:	83 ec 2c             	sub    esp,0x2c
c0025833:	83 ec 0c             	sub    esp,0xc
c0025836:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025839:	e8 7c ff ff ff       	call   c00257ba <APIC::getBase()>
c002583e:	83 c4 10             	add    esp,0x10
c0025841:	89 c2                	mov    edx,eax
c0025843:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025846:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002584c:	0f b6 f8             	movzx  edi,al
c002584f:	89 d0                	mov    eax,edx
c0025851:	ba 00 00 00 00       	mov    edx,0x0
c0025856:	89 c1                	mov    ecx,eax
c0025858:	80 e5 ff             	and    ch,0xff
c002585b:	89 cb                	mov    ebx,ecx
c002585d:	0f b6 f2             	movzx  esi,dl
c0025860:	89 d8                	mov    eax,ebx
c0025862:	89 f2                	mov    edx,esi
c0025864:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025867:	8d 5f 08             	lea    ebx,[edi+0x8]
c002586a:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002586e:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025872:	83 e0 00             	and    eax,0x0
c0025875:	09 d0                	or     eax,edx
c0025877:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002587b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002587e:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025884:	8d 50 01             	lea    edx,[eax+0x1]
c0025887:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002588a:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025890:	0f b6 d0             	movzx  edx,al
c0025893:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025896:	83 c2 08             	add    edx,0x8
c0025899:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002589d:	0f b6 c9             	movzx  ecx,cl
c00258a0:	81 c9 00 00 01 00    	or     ecx,0x10000
c00258a6:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00258aa:	83 ec 0c             	sub    esp,0xc
c00258ad:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00258b0:	e8 05 ff ff ff       	call   c00257ba <APIC::getBase()>
c00258b5:	83 c4 10             	add    esp,0x10
c00258b8:	05 f0 00 00 00       	add    eax,0xf0
c00258bd:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00258c0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00258c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00258c5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00258c8:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c00258cf:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c00258d6:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00258d9:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00258dc:	89 10                	mov    DWORD PTR [eax],edx
c00258de:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c00258e5:	a1 30 0f 03 c0       	mov    eax,ds:0xc0030f30
c00258ea:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c00258ed:	7d 7c                	jge    c002596b <APIC::open(int, int, void*)+0x141>
c00258ef:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00258f2:	8b 04 85 40 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf0c0]
c00258f9:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c00258fc:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00258ff:	8b 04 85 40 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf0c0]
c0025906:	c1 e8 08             	shr    eax,0x8
c0025909:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c002590d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025910:	8b 04 85 40 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf0c0]
c0025917:	c1 e8 18             	shr    eax,0x18
c002591a:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c002591d:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0025921:	75 40                	jne    c0025963 <APIC::open(int, int, void*)+0x139>
c0025923:	83 ec 0c             	sub    esp,0xc
c0025926:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025929:	e8 8c fe ff ff       	call   c00257ba <APIC::getBase()>
c002592e:	83 c4 10             	add    esp,0x10
c0025931:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0025935:	75 07                	jne    c002593e <APIC::open(int, int, void*)+0x114>
c0025937:	ba 60 03 00 00       	mov    edx,0x360
c002593c:	eb 05                	jmp    c0025943 <APIC::open(int, int, void*)+0x119>
c002593e:	ba 50 03 00 00       	mov    edx,0x350
c0025943:	01 d0                	add    eax,edx
c0025945:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025948:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002594b:	8b 00                	mov    eax,DWORD PTR [eax]
c002594d:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0025950:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0025957:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c002595b:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002595e:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025961:	89 10                	mov    DWORD PTR [eax],edx
c0025963:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0025966:	e9 7a ff ff ff       	jmp    c00258e5 <APIC::open(int, int, void*)+0xbb>
c002596b:	b8 00 00 00 00       	mov    eax,0x0
c0025970:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025973:	5b                   	pop    ebx
c0025974:	5e                   	pop    esi
c0025975:	5f                   	pop    edi
c0025976:	5d                   	pop    ebp
c0025977:	c3                   	ret    

c0025978 <IOAPIC::IOAPIC()>:
c0025978:	83 ec 0c             	sub    esp,0xc
c002597b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002597f:	83 ec 08             	sub    esp,0x8
c0025982:	68 24 d3 02 c0       	push   0xc002d324
c0025987:	50                   	push   eax
c0025988:	e8 fb eb fe ff       	call   c0014588 <Device::Device(char const*)>
c002598d:	83 c4 10             	add    esp,0x10
c0025990:	ba 4c d4 02 c0       	mov    edx,0xc002d44c
c0025995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025999:	89 10                	mov    DWORD PTR [eax],edx
c002599b:	90                   	nop
c002599c:	83 c4 0c             	add    esp,0xc
c002599f:	c3                   	ret    

c00259a0 <APIC::APIC()>:
c00259a0:	53                   	push   ebx
c00259a1:	83 ec 18             	sub    esp,0x18
c00259a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00259a8:	83 ec 08             	sub    esp,0x8
c00259ab:	68 2c d3 02 c0       	push   0xc002d32c
c00259b0:	50                   	push   eax
c00259b1:	e8 3e f3 fe ff       	call   c0014cf4 <InterruptController::InterruptController(char const*)>
c00259b6:	83 c4 10             	add    esp,0x10
c00259b9:	ba 04 d4 02 c0       	mov    edx,0xc002d404
c00259be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00259c2:	89 10                	mov    DWORD PTR [eax],edx
c00259c4:	a0 00 2a 03 c0       	mov    al,ds:0xc0032a00
c00259c9:	83 f0 01             	xor    eax,0x1
c00259cc:	84 c0                	test   al,al
c00259ce:	0f 84 a1 00 00 00    	je     c0025a75 <APIC::APIC()+0xd5>
c00259d4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00259d9:	a0 e0 0f 03 c0       	mov    al,ds:0xc0030fe0
c00259de:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c00259e2:	0f 83 86 00 00 00    	jae    c0025a6e <APIC::APIC()+0xce>
c00259e8:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c00259f0:	83 ec 0c             	sub    esp,0xc
c00259f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00259f7:	e8 44 9e fe ff       	call   c000f840 <malloc>
c00259fc:	83 c4 10             	add    esp,0x10
c00259ff:	89 c3                	mov    ebx,eax
c0025a01:	83 ec 0c             	sub    esp,0xc
c0025a04:	53                   	push   ebx
c0025a05:	e8 6e ff ff ff       	call   c0025978 <IOAPIC::IOAPIC()>
c0025a0a:	83 c4 10             	add    esp,0x10
c0025a0d:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0025a11:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0025a16:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025a1a:	89 14 85 e0 29 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd620],edx
c0025a21:	a1 c0 29 03 c0       	mov    eax,ds:0xc00329c0
c0025a26:	40                   	inc    eax
c0025a27:	a3 c0 29 03 c0       	mov    ds:0xc00329c0,eax
c0025a2c:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c0025a31:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0025a37:	83 ec 08             	sub    esp,0x8
c0025a3a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025a3e:	50                   	push   eax
c0025a3f:	e8 54 e9 fe ff       	call   c0014398 <Device::addChild(Device*)>
c0025a44:	83 c4 10             	add    esp,0x10
c0025a47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025a4b:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a4d:	83 c0 08             	add    eax,0x8
c0025a50:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a52:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0025a57:	6a 00                	push   0x0
c0025a59:	6a 00                	push   0x0
c0025a5b:	52                   	push   edx
c0025a5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0025a60:	ff d0                	call   eax
c0025a62:	83 c4 10             	add    esp,0x10
c0025a65:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0025a69:	e9 6b ff ff ff       	jmp    c00259d9 <APIC::APIC()+0x39>
c0025a6e:	c6 05 00 2a 03 c0 01 	mov    BYTE PTR ds:0xc0032a00,0x1
c0025a75:	90                   	nop
c0025a76:	83 c4 18             	add    esp,0x18
c0025a79:	5b                   	pop    ebx
c0025a7a:	c3                   	ret    
c0025a7b:	90                   	nop

c0025a7c <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0025a7c:	55                   	push   ebp
c0025a7d:	89 e5                	mov    ebp,esp
c0025a7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a82:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025a88:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025a8b:	72 1d                	jb     c0025aaa <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025a8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a90:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0025a96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a99:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0025a9f:	01 d0                	add    eax,edx
c0025aa1:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025aa4:	73 04                	jae    c0025aaa <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025aa6:	b0 01                	mov    al,0x1
c0025aa8:	eb 02                	jmp    c0025aac <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025aaa:	b0 00                	mov    al,0x0
c0025aac:	5d                   	pop    ebp
c0025aad:	c3                   	ret    

c0025aae <IOAPIC::read(int)>:
c0025aae:	55                   	push   ebp
c0025aaf:	89 e5                	mov    ebp,esp
c0025ab1:	83 ec 10             	sub    esp,0x10
c0025ab4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ab7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025abd:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025ac0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025ac3:	0f b6 d0             	movzx  edx,al
c0025ac6:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025ac9:	89 10                	mov    DWORD PTR [eax],edx
c0025acb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025ace:	83 c0 10             	add    eax,0x10
c0025ad1:	8b 00                	mov    eax,DWORD PTR [eax]
c0025ad3:	c9                   	leave  
c0025ad4:	c3                   	ret    
c0025ad5:	90                   	nop

c0025ad6 <IOAPIC::open(int, int, void*)>:
c0025ad6:	55                   	push   ebp
c0025ad7:	89 e5                	mov    ebp,esp
c0025ad9:	57                   	push   edi
c0025ada:	56                   	push   esi
c0025adb:	53                   	push   ebx
c0025adc:	83 ec 0c             	sub    esp,0xc
c0025adf:	83 ec 0c             	sub    esp,0xc
c0025ae2:	68 57 d3 02 c0       	push   0xc002d357
c0025ae7:	e8 85 d4 fe ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0025aec:	83 c4 10             	add    esp,0x10
c0025aef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025af2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025af5:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025afb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025afe:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025b04:	8b 14 85 20 10 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcefe0]
c0025b0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b0e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025b14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b17:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025b1d:	8b 14 85 a0 10 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcef60]
c0025b24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b27:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025b2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b30:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025b36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b39:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025b3f:	0f b6 f8             	movzx  edi,al
c0025b42:	89 d0                	mov    eax,edx
c0025b44:	ba 00 00 00 00       	mov    edx,0x0
c0025b49:	89 c1                	mov    ecx,eax
c0025b4b:	80 e5 ff             	and    ch,0xff
c0025b4e:	89 cb                	mov    ebx,ecx
c0025b50:	0f b6 f2             	movzx  esi,dl
c0025b53:	89 d8                	mov    eax,ebx
c0025b55:	89 f2                	mov    edx,esi
c0025b57:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025b5a:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025b5d:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025b61:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025b65:	83 e0 00             	and    eax,0x0
c0025b68:	09 d0                	or     eax,edx
c0025b6a:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025b6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b71:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025b77:	8d 50 01             	lea    edx,[eax+0x1]
c0025b7a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025b7d:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025b83:	0f b6 d0             	movzx  edx,al
c0025b86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b89:	83 c2 08             	add    edx,0x8
c0025b8c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025b90:	0f b6 c9             	movzx  ecx,cl
c0025b93:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025b99:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025b9d:	83 ec 08             	sub    esp,0x8
c0025ba0:	6a 01                	push   0x1
c0025ba2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ba5:	e8 04 ff ff ff       	call   c0025aae <IOAPIC::read(int)>
c0025baa:	83 c4 10             	add    esp,0x10
c0025bad:	c1 f8 10             	sar    eax,0x10
c0025bb0:	0f b6 c0             	movzx  eax,al
c0025bb3:	8d 50 01             	lea    edx,[eax+0x1]
c0025bb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025bb9:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025bbf:	b8 00 00 00 00       	mov    eax,0x0
c0025bc4:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025bc7:	5b                   	pop    ebx
c0025bc8:	5e                   	pop    esi
c0025bc9:	5f                   	pop    edi
c0025bca:	5d                   	pop    ebp
c0025bcb:	c3                   	ret    

c0025bcc <IOAPIC::write(int, int)>:
c0025bcc:	55                   	push   ebp
c0025bcd:	89 e5                	mov    ebp,esp
c0025bcf:	83 ec 10             	sub    esp,0x10
c0025bd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025bd5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025bdb:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025bde:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025be1:	0f b6 d0             	movzx  edx,al
c0025be4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025be7:	89 10                	mov    DWORD PTR [eax],edx
c0025be9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025bec:	8d 50 10             	lea    edx,[eax+0x10]
c0025bef:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025bf2:	89 02                	mov    DWORD PTR [edx],eax
c0025bf4:	90                   	nop
c0025bf5:	c9                   	leave  
c0025bf6:	c3                   	ret    
c0025bf7:	90                   	nop

c0025bf8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025bf8:	55                   	push   ebp
c0025bf9:	89 e5                	mov    ebp,esp
c0025bfb:	53                   	push   ebx
c0025bfc:	83 ec 2c             	sub    esp,0x2c
c0025bff:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c02:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025c05:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025c08:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025c0b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025c0e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025c11:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025c14:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025c17:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025c1a:	88 d8                	mov    al,bl
c0025c1c:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025c1f:	88 c8                	mov    al,cl
c0025c21:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025c24:	88 d0                	mov    al,dl
c0025c26:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025c29:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025c2d:	83 c0 08             	add    eax,0x8
c0025c30:	01 c0                	add    eax,eax
c0025c32:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025c35:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025c39:	83 c0 08             	add    eax,0x8
c0025c3c:	01 c0                	add    eax,eax
c0025c3e:	40                   	inc    eax
c0025c3f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025c42:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025c45:	50                   	push   eax
c0025c46:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c49:	e8 60 fe ff ff       	call   c0025aae <IOAPIC::read(int)>
c0025c4e:	83 c4 08             	add    esp,0x8
c0025c51:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025c54:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025c5b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025c5e:	c1 e0 18             	shl    eax,0x18
c0025c61:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025c64:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025c67:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025c6a:	52                   	push   edx
c0025c6b:	50                   	push   eax
c0025c6c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c6f:	e8 58 ff ff ff       	call   c0025bcc <IOAPIC::write(int, int)>
c0025c74:	83 c4 0c             	add    esp,0xc
c0025c77:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025c7a:	50                   	push   eax
c0025c7b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c7e:	e8 2b fe ff ff       	call   c0025aae <IOAPIC::read(int)>
c0025c83:	83 c4 08             	add    esp,0x8
c0025c86:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025c89:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025c90:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025c97:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025c9e:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025ca2:	74 09                	je     c0025cad <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025ca4:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025cab:	eb 07                	jmp    c0025cb4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025cad:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0025cb4:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0025cb8:	74 09                	je     c0025cc3 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025cba:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0025cc1:	eb 07                	jmp    c0025cca <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0025cc3:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025cca:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0025cd1:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0025cd5:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0025cd8:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025cdb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025cde:	52                   	push   edx
c0025cdf:	50                   	push   eax
c0025ce0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ce3:	e8 e4 fe ff ff       	call   c0025bcc <IOAPIC::write(int, int)>
c0025ce8:	83 c4 0c             	add    esp,0xc
c0025ceb:	90                   	nop
c0025cec:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025cef:	c9                   	leave  
c0025cf0:	c3                   	ret    
c0025cf1:	90                   	nop

c0025cf2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025cf2:	55                   	push   ebp
c0025cf3:	89 e5                	mov    ebp,esp
c0025cf5:	57                   	push   edi
c0025cf6:	56                   	push   esi
c0025cf7:	53                   	push   ebx
c0025cf8:	83 ec 2c             	sub    esp,0x2c
c0025cfb:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025cfe:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025d01:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025d05:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025d09:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025d0d:	74 5a                	je     c0025d69 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025d0f:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025d13:	7f 44                	jg     c0025d59 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025d15:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d18:	05 a0 d8 02 c0       	add    eax,0xc002d8a0
c0025d1d:	8a 00                	mov    al,BYTE PTR [eax]
c0025d1f:	0f b6 c0             	movzx  eax,al
c0025d22:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025d25:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d28:	66 8b 84 00 c0 0f 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf040]
c0025d30:	0f b7 c0             	movzx  eax,ax
c0025d33:	83 e0 02             	and    eax,0x2
c0025d36:	85 c0                	test   eax,eax
c0025d38:	74 04                	je     c0025d3e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025d3a:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025d3e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d41:	66 8b 84 00 c0 0f 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf040]
c0025d49:	0f b7 c0             	movzx  eax,ax
c0025d4c:	83 e0 08             	and    eax,0x8
c0025d4f:	85 c0                	test   eax,eax
c0025d51:	74 16                	je     c0025d69 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025d53:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025d57:	eb 10                	jmp    c0025d69 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025d59:	83 ec 0c             	sub    esp,0xc
c0025d5c:	68 68 d3 02 c0       	push   0xc002d368
c0025d61:	e8 bd 48 ff ff       	call   c001a623 <Krnl::panic(char const*)>
c0025d66:	83 c4 10             	add    esp,0x10
c0025d69:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025d6d:	a1 c0 29 03 c0       	mov    eax,ds:0xc00329c0
c0025d72:	83 ec 08             	sub    esp,0x8
c0025d75:	50                   	push   eax
c0025d76:	68 a0 d3 02 c0       	push   0xc002d3a0
c0025d7b:	e8 f1 d1 fe ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0025d80:	83 c4 10             	add    esp,0x10
c0025d83:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025d8a:	a1 c0 29 03 c0       	mov    eax,ds:0xc00329c0
c0025d8f:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025d92:	7d 67                	jge    c0025dfb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025d94:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025d97:	8b 04 85 e0 29 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd620]
c0025d9e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025da1:	83 ec 08             	sub    esp,0x8
c0025da4:	52                   	push   edx
c0025da5:	50                   	push   eax
c0025da6:	e8 d1 fc ff ff       	call   c0025a7c <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025dab:	83 c4 10             	add    esp,0x10
c0025dae:	84 c0                	test   al,al
c0025db0:	74 44                	je     c0025df6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025db2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025db5:	8b 1c 85 e0 29 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcd620]
c0025dbc:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025dc0:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025dc3:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025dc7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025dca:	83 c0 20             	add    eax,0x20
c0025dcd:	0f b6 f0             	movzx  esi,al
c0025dd0:	b8 00 00 00 00       	mov    eax,0x0
c0025dd5:	99                   	cdq    
c0025dd6:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025dd9:	0f b6 c9             	movzx  ecx,cl
c0025ddc:	83 ec 04             	sub    esp,0x4
c0025ddf:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025de2:	57                   	push   edi
c0025de3:	56                   	push   esi
c0025de4:	52                   	push   edx
c0025de5:	50                   	push   eax
c0025de6:	51                   	push   ecx
c0025de7:	53                   	push   ebx
c0025de8:	e8 0b fe ff ff       	call   c0025bf8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025ded:	83 c4 20             	add    esp,0x20
c0025df0:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025df4:	eb 05                	jmp    c0025dfb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025df6:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025df9:	eb 8f                	jmp    c0025d8a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025dfb:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025dfe:	83 f0 01             	xor    eax,0x1
c0025e01:	84 c0                	test   al,al
c0025e03:	74 10                	je     c0025e15 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025e05:	83 ec 0c             	sub    esp,0xc
c0025e08:	68 b7 d3 02 c0       	push   0xc002d3b7
c0025e0d:	e8 11 48 ff ff       	call   c001a623 <Krnl::panic(char const*)>
c0025e12:	83 c4 10             	add    esp,0x10
c0025e15:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025e19:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025e20:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025e24:	7f 65                	jg     c0025e8b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025e26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e29:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025e2c:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025e33:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025e36:	01 ca                	add    edx,ecx
c0025e38:	83 c2 54             	add    edx,0x54
c0025e3b:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025e3f:	85 c0                	test   eax,eax
c0025e41:	75 43                	jne    c0025e86 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025e43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e46:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025e49:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025e50:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025e53:	01 ca                	add    edx,ecx
c0025e55:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025e58:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025e5b:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025e5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e62:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025e65:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025e6c:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025e6f:	01 ca                	add    edx,ecx
c0025e71:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025e77:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025e7a:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025e7e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025e81:	83 e8 20             	sub    eax,0x20
c0025e84:	eb 1a                	jmp    c0025ea0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025e86:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025e89:	eb 95                	jmp    c0025e20 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025e8b:	83 ec 0c             	sub    esp,0xc
c0025e8e:	68 c4 d3 02 c0       	push   0xc002d3c4
c0025e93:	e8 8b 47 ff ff       	call   c001a623 <Krnl::panic(char const*)>
c0025e98:	83 c4 10             	add    esp,0x10
c0025e9b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025ea0:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025ea3:	5b                   	pop    ebx
c0025ea4:	5e                   	pop    esi
c0025ea5:	5f                   	pop    edi
c0025ea6:	5d                   	pop    ebp
c0025ea7:	c3                   	ret    

c0025ea8 <PIC::disable()>:
c0025ea8:	55                   	push   ebp
c0025ea9:	89 e5                	mov    ebp,esp
c0025eab:	83 ec 10             	sub    esp,0x10
c0025eae:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025eb4:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025eb8:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025ebb:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025ebf:	ee                   	out    dx,al
c0025ec0:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025ec6:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025eca:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025ecd:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025ed1:	ee                   	out    dx,al
c0025ed2:	90                   	nop
c0025ed3:	c9                   	leave  
c0025ed4:	c3                   	ret    
c0025ed5:	90                   	nop

c0025ed6 <PIC::close(int, int, void*)>:
c0025ed6:	55                   	push   ebp
c0025ed7:	89 e5                	mov    ebp,esp
c0025ed9:	83 ec 08             	sub    esp,0x8
c0025edc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025edf:	8b 00                	mov    eax,DWORD PTR [eax]
c0025ee1:	83 c0 3c             	add    eax,0x3c
c0025ee4:	8b 00                	mov    eax,DWORD PTR [eax]
c0025ee6:	83 ec 0c             	sub    esp,0xc
c0025ee9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025eec:	ff d0                	call   eax
c0025eee:	83 c4 10             	add    esp,0x10
c0025ef1:	b8 00 00 00 00       	mov    eax,0x0
c0025ef6:	c9                   	leave  
c0025ef7:	c3                   	ret    

c0025ef8 <PIC::PIC()>:
c0025ef8:	83 ec 0c             	sub    esp,0xc
c0025efb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025eff:	83 ec 08             	sub    esp,0x8
c0025f02:	68 70 d4 02 c0       	push   0xc002d470
c0025f07:	50                   	push   eax
c0025f08:	e8 e7 ed fe ff       	call   c0014cf4 <InterruptController::InterruptController(char const*)>
c0025f0d:	83 c4 10             	add    esp,0x10
c0025f10:	ba 9c d4 02 c0       	mov    edx,0xc002d49c
c0025f15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f19:	89 10                	mov    DWORD PTR [eax],edx
c0025f1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f1f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f25:	0f b6 d0             	movzx  edx,al
c0025f28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f2c:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025f33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f37:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f3d:	0f b6 d0             	movzx  edx,al
c0025f40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f44:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025f49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f4d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f53:	8d 50 01             	lea    edx,[eax+0x1]
c0025f56:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025f5a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025f60:	0f b6 d0             	movzx  edx,al
c0025f63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f67:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025f6b:	83 e1 3f             	and    ecx,0x3f
c0025f6e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025f72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f76:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f7c:	0f b6 d0             	movzx  edx,al
c0025f7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f83:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025f8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f8e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f94:	0f b6 d0             	movzx  edx,al
c0025f97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f9b:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025fa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fa4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025faa:	8d 50 01             	lea    edx,[eax+0x1]
c0025fad:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025fb1:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025fb7:	0f b6 d0             	movzx  edx,al
c0025fba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fbe:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025fc2:	83 e1 3f             	and    ecx,0x3f
c0025fc5:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025fc9:	90                   	nop
c0025fca:	83 c4 0c             	add    esp,0xc
c0025fcd:	c3                   	ret    

c0025fce <PIC::ioWait()>:
c0025fce:	eb 00                	jmp    c0025fd0 <PIC::ioWait()+0x2>
c0025fd0:	eb 00                	jmp    c0025fd2 <PIC::ioWait()+0x4>
c0025fd2:	90                   	nop
c0025fd3:	c3                   	ret    

c0025fd4 <PIC::getIRQReg(int)>:
c0025fd4:	55                   	push   ebp
c0025fd5:	89 e5                	mov    ebp,esp
c0025fd7:	83 ec 10             	sub    esp,0x10
c0025fda:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025fdd:	0f b6 c0             	movzx  eax,al
c0025fe0:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025fe6:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0025fe9:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025fec:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025ff0:	ee                   	out    dx,al
c0025ff1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025ff4:	0f b6 c0             	movzx  eax,al
c0025ff7:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025ffd:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0026000:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026003:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026007:	ee                   	out    dx,al
c0026008:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c002600e:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0026012:	89 c2                	mov    edx,eax
c0026014:	ec                   	in     al,dx
c0026015:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0026018:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c002601b:	0f b6 c0             	movzx  eax,al
c002601e:	c1 e0 08             	shl    eax,0x8
c0026021:	89 c1                	mov    ecx,eax
c0026023:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0026029:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c002602d:	89 c2                	mov    edx,eax
c002602f:	ec                   	in     al,dx
c0026030:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0026033:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0026036:	0f b6 c0             	movzx  eax,al
c0026039:	09 c8                	or     eax,ecx
c002603b:	c9                   	leave  
c002603c:	c3                   	ret    
c002603d:	90                   	nop

c002603e <PIC::eoi(unsigned char)>:
c002603e:	55                   	push   ebp
c002603f:	89 e5                	mov    ebp,esp
c0026041:	83 ec 14             	sub    esp,0x14
c0026044:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026047:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c002604a:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c002604e:	75 1e                	jne    c002606e <PIC::eoi(unsigned char)+0x30>
c0026050:	6a 0b                	push   0xb
c0026052:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026055:	e8 7a ff ff ff       	call   c0025fd4 <PIC::getIRQReg(int)>
c002605a:	83 c4 08             	add    esp,0x8
c002605d:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0026061:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0026065:	25 80 00 00 00       	and    eax,0x80
c002606a:	85 c0                	test   eax,eax
c002606c:	74 5f                	je     c00260cd <PIC::eoi(unsigned char)+0x8f>
c002606e:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0026072:	75 2d                	jne    c00260a1 <PIC::eoi(unsigned char)+0x63>
c0026074:	6a 0b                	push   0xb
c0026076:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026079:	e8 56 ff ff ff       	call   c0025fd4 <PIC::getIRQReg(int)>
c002607e:	83 c4 08             	add    esp,0x8
c0026081:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0026085:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026088:	66 85 c0             	test   ax,ax
c002608b:	78 14                	js     c00260a1 <PIC::eoi(unsigned char)+0x63>
c002608d:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0026093:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0026097:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c002609a:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c002609e:	ee                   	out    dx,al
c002609f:	eb 2d                	jmp    c00260ce <PIC::eoi(unsigned char)+0x90>
c00260a1:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00260a5:	76 12                	jbe    c00260b9 <PIC::eoi(unsigned char)+0x7b>
c00260a7:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00260ad:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c00260b1:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00260b4:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00260b8:	ee                   	out    dx,al
c00260b9:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c00260bf:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c00260c3:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00260c6:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00260ca:	ee                   	out    dx,al
c00260cb:	eb 01                	jmp    c00260ce <PIC::eoi(unsigned char)+0x90>
c00260cd:	90                   	nop
c00260ce:	c9                   	leave  
c00260cf:	c3                   	ret    

c00260d0 <PIC::remap()>:
c00260d0:	55                   	push   ebp
c00260d1:	89 e5                	mov    ebp,esp
c00260d3:	83 ec 48             	sub    esp,0x48
c00260d6:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c00260dd:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c00260e4:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c00260ea:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c00260ed:	89 c2                	mov    edx,eax
c00260ef:	ec                   	in     al,dx
c00260f0:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c00260f3:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c00260f6:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00260f9:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c00260ff:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0026102:	89 c2                	mov    edx,eax
c0026104:	ec                   	in     al,dx
c0026105:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0026108:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c002610b:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c002610e:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0026114:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0026118:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c002611b:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c002611e:	ee                   	out    dx,al
c002611f:	83 ec 0c             	sub    esp,0xc
c0026122:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026125:	e8 a4 fe ff ff       	call   c0025fce <PIC::ioWait()>
c002612a:	83 c4 10             	add    esp,0x10
c002612d:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0026133:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0026137:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c002613a:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002613d:	ee                   	out    dx,al
c002613e:	83 ec 0c             	sub    esp,0xc
c0026141:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026144:	e8 85 fe ff ff       	call   c0025fce <PIC::ioWait()>
c0026149:	83 c4 10             	add    esp,0x10
c002614c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002614f:	0f b6 c0             	movzx  eax,al
c0026152:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0026158:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c002615b:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c002615e:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0026161:	ee                   	out    dx,al
c0026162:	83 ec 0c             	sub    esp,0xc
c0026165:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026168:	e8 61 fe ff ff       	call   c0025fce <PIC::ioWait()>
c002616d:	83 c4 10             	add    esp,0x10
c0026170:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026173:	0f b6 c0             	movzx  eax,al
c0026176:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c002617c:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c002617f:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0026182:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0026185:	ee                   	out    dx,al
c0026186:	83 ec 0c             	sub    esp,0xc
c0026189:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002618c:	e8 3d fe ff ff       	call   c0025fce <PIC::ioWait()>
c0026191:	83 c4 10             	add    esp,0x10
c0026194:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c002619a:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c002619e:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c00261a1:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c00261a4:	ee                   	out    dx,al
c00261a5:	83 ec 0c             	sub    esp,0xc
c00261a8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261ab:	e8 1e fe ff ff       	call   c0025fce <PIC::ioWait()>
c00261b0:	83 c4 10             	add    esp,0x10
c00261b3:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c00261b9:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c00261bd:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c00261c0:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00261c3:	ee                   	out    dx,al
c00261c4:	83 ec 0c             	sub    esp,0xc
c00261c7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261ca:	e8 ff fd ff ff       	call   c0025fce <PIC::ioWait()>
c00261cf:	83 c4 10             	add    esp,0x10
c00261d2:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c00261d8:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c00261dc:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c00261df:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00261e2:	ee                   	out    dx,al
c00261e3:	83 ec 0c             	sub    esp,0xc
c00261e6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261e9:	e8 e0 fd ff ff       	call   c0025fce <PIC::ioWait()>
c00261ee:	83 c4 10             	add    esp,0x10
c00261f1:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c00261f7:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c00261fb:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c00261fe:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026201:	ee                   	out    dx,al
c0026202:	83 ec 0c             	sub    esp,0xc
c0026205:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026208:	e8 c1 fd ff ff       	call   c0025fce <PIC::ioWait()>
c002620d:	83 c4 10             	add    esp,0x10
c0026210:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0026214:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c002621a:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c002621d:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0026220:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026223:	ee                   	out    dx,al
c0026224:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0026228:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c002622e:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0026231:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0026234:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0026237:	ee                   	out    dx,al
c0026238:	90                   	nop
c0026239:	c9                   	leave  
c002623a:	c3                   	ret    
c002623b:	90                   	nop

c002623c <PIC::open(int, int, void*)>:
c002623c:	55                   	push   ebp
c002623d:	89 e5                	mov    ebp,esp
c002623f:	83 ec 18             	sub    esp,0x18
c0026242:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0026248:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c002624c:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002624f:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026253:	ee                   	out    dx,al
c0026254:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c002625a:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c002625e:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026261:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026265:	ee                   	out    dx,al
c0026266:	83 ec 0c             	sub    esp,0xc
c0026269:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002626c:	e8 5f fe ff ff       	call   c00260d0 <PIC::remap()>
c0026271:	83 c4 10             	add    esp,0x10
c0026274:	b8 00 00 00 00       	mov    eax,0x0
c0026279:	c9                   	leave  
c002627a:	c3                   	ret    
c002627b:	90                   	nop

c002627c <APICTimer::close(int, int, void*)>:
c002627c:	b8 00 00 00 00       	mov    eax,0x0
c0026281:	c3                   	ret    

c0026282 <apicTimerHandler(regs*, void*)>:
c0026282:	83 ec 0c             	sub    esp,0xc
c0026285:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026289:	8b 00                	mov    eax,DWORD PTR [eax]
c002628b:	99                   	cdq    
c002628c:	52                   	push   edx
c002628d:	50                   	push   eax
c002628e:	6a 00                	push   0x0
c0026290:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026295:	e8 92 07 00 00       	call   c0026a2c <__udivdi3>
c002629a:	83 c4 10             	add    esp,0x10
c002629d:	83 ec 08             	sub    esp,0x8
c00262a0:	52                   	push   edx
c00262a1:	50                   	push   eax
c00262a2:	e8 a8 0a ff ff       	call   c0016d4f <timerHandler(unsigned long long)>
c00262a7:	83 c4 10             	add    esp,0x10
c00262aa:	90                   	nop
c00262ab:	83 c4 0c             	add    esp,0xc
c00262ae:	c3                   	ret    
c00262af:	90                   	nop

c00262b0 <APICTimer::write(int)>:
c00262b0:	53                   	push   ebx
c00262b1:	83 ec 28             	sub    esp,0x28
c00262b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00262b8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00262bc:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00262c2:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c00262c7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00262cd:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00262d3:	83 ec 0c             	sub    esp,0xc
c00262d6:	50                   	push   eax
c00262d7:	e8 de f4 ff ff       	call   c00257ba <APIC::getBase()>
c00262dc:	83 c4 10             	add    esp,0x10
c00262df:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00262e3:	a1 d0 ec 02 c0       	mov    eax,ds:0xc002ecd0
c00262e8:	8b 15 d4 ec 02 c0    	mov    edx,DWORD PTR ds:0xc002ecd4
c00262ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00262f2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00262f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00262fa:	05 e0 03 00 00       	add    eax,0x3e0
c00262ff:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026305:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026309:	05 80 03 00 00       	add    eax,0x380
c002630e:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0026314:	fb                   	sti    
c0026315:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026319:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002631d:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0026322:	83 d2 00             	adc    edx,0x0
c0026325:	89 c1                	mov    ecx,eax
c0026327:	89 d3                	mov    ebx,edx
c0026329:	a1 d0 ec 02 c0       	mov    eax,ds:0xc002ecd0
c002632e:	8b 15 d4 ec 02 c0    	mov    edx,DWORD PTR ds:0xc002ecd4
c0026334:	39 c8                	cmp    eax,ecx
c0026336:	89 d0                	mov    eax,edx
c0026338:	19 d8                	sbb    eax,ebx
c002633a:	73 02                	jae    c002633e <APICTimer::write(int)+0x8e>
c002633c:	eb d7                	jmp    c0026315 <APICTimer::write(int)+0x65>
c002633e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026342:	05 20 03 00 00       	add    eax,0x320
c0026347:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c002634d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026351:	05 90 03 00 00       	add    eax,0x390
c0026356:	8b 00                	mov    eax,DWORD PTR [eax]
c0026358:	f7 d0                	not    eax
c002635a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002635e:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026362:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026366:	ba 00 00 00 00       	mov    edx,0x0
c002636b:	f7 f3                	div    ebx
c002636d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026371:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026375:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002637b:	0d 00 00 02 00       	or     eax,0x20000
c0026380:	89 c2                	mov    edx,eax
c0026382:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026386:	05 20 03 00 00       	add    eax,0x320
c002638b:	89 10                	mov    DWORD PTR [eax],edx
c002638d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026391:	05 e0 03 00 00       	add    eax,0x3e0
c0026396:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c002639c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00263a0:	05 80 03 00 00       	add    eax,0x380
c00263a5:	89 c2                	mov    edx,eax
c00263a7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00263ab:	89 02                	mov    DWORD PTR [edx],eax
c00263ad:	90                   	nop
c00263ae:	83 c4 28             	add    esp,0x28
c00263b1:	5b                   	pop    ebx
c00263b2:	c3                   	ret    
c00263b3:	90                   	nop

c00263b4 <APICTimer::open(int, int, void*)>:
c00263b4:	57                   	push   edi
c00263b5:	56                   	push   esi
c00263b6:	53                   	push   ebx
c00263b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00263bd:	83 c0 24             	add    eax,0x24
c00263c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00263c2:	83 ec 08             	sub    esp,0x8
c00263c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00263c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00263cd:	ff d0                	call   eax
c00263cf:	83 c4 10             	add    esp,0x10
c00263d2:	a1 48 e6 02 c0       	mov    eax,ds:0xc002e648
c00263d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00263dd:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00263e3:	83 ec 0c             	sub    esp,0xc
c00263e6:	50                   	push   eax
c00263e7:	e8 ce f3 ff ff       	call   c00257ba <APIC::getBase()>
c00263ec:	83 c4 10             	add    esp,0x10
c00263ef:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c00263f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263f9:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00263ff:	0f b6 f8             	movzx  edi,al
c0026402:	89 d0                	mov    eax,edx
c0026404:	ba 00 00 00 00       	mov    edx,0x0
c0026409:	89 c1                	mov    ecx,eax
c002640b:	80 e5 ff             	and    ch,0xff
c002640e:	89 cb                	mov    ebx,ecx
c0026410:	0f b6 f2             	movzx  esi,dl
c0026413:	89 d8                	mov    eax,ebx
c0026415:	89 f2                	mov    edx,esi
c0026417:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002641b:	8d 5f 08             	lea    ebx,[edi+0x8]
c002641e:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026422:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026426:	83 e0 00             	and    eax,0x0
c0026429:	09 d0                	or     eax,edx
c002642b:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002642f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026433:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026439:	8d 50 01             	lea    edx,[eax+0x1]
c002643c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026440:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026446:	0f b6 d0             	movzx  edx,al
c0026449:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002644d:	83 c2 08             	add    edx,0x8
c0026450:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026454:	0f b6 c9             	movzx  ecx,cl
c0026457:	81 c9 00 00 01 00    	or     ecx,0x10000
c002645d:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026461:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026465:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026469:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002646f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026473:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026477:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c002647d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026481:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0026487:	83 ec 0c             	sub    esp,0xc
c002648a:	51                   	push   ecx
c002648b:	6a 01                	push   0x1
c002648d:	68 82 62 02 c0       	push   0xc0026282
c0026492:	52                   	push   edx
c0026493:	50                   	push   eax
c0026494:	e8 83 de fe ff       	call   c001431c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026499:	83 c4 20             	add    esp,0x20
c002649c:	89 c2                	mov    edx,eax
c002649e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264a2:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00264a8:	b8 00 00 00 00       	mov    eax,0x0
c00264ad:	5b                   	pop    ebx
c00264ae:	5e                   	pop    esi
c00264af:	5f                   	pop    edi
c00264b0:	c3                   	ret    
c00264b1:	90                   	nop

c00264b2 <APICTimer::APICTimer()>:
c00264b2:	83 ec 0c             	sub    esp,0xc
c00264b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264b9:	83 ec 08             	sub    esp,0x8
c00264bc:	68 dc d4 02 c0       	push   0xc002d4dc
c00264c1:	50                   	push   eax
c00264c2:	e8 f9 07 ff ff       	call   c0016cc0 <Timer::Timer(char const*)>
c00264c7:	83 c4 10             	add    esp,0x10
c00264ca:	ba f0 d4 02 c0       	mov    edx,0xc002d4f0
c00264cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264d3:	89 10                	mov    DWORD PTR [eax],edx
c00264d5:	90                   	nop
c00264d6:	83 c4 0c             	add    esp,0xc
c00264d9:	c3                   	ret    

c00264da <PIT::write(int)>:
c00264da:	83 ec 10             	sub    esp,0x10
c00264dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00264e1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00264e5:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00264eb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00264ef:	a3 04 2a 03 c0       	mov    ds:0xc0032a04,eax
c00264f4:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00264f9:	99                   	cdq    
c00264fa:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c00264fe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026502:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0026509:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c002650e:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0026512:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0026517:	ee                   	out    dx,al
c0026518:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002651c:	0f b6 c0             	movzx  eax,al
c002651f:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0026526:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c002652a:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c002652e:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0026533:	ee                   	out    dx,al
c0026534:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026538:	c1 f8 08             	sar    eax,0x8
c002653b:	0f b6 c0             	movzx  eax,al
c002653e:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0026545:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0026549:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002654d:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0026552:	ee                   	out    dx,al
c0026553:	90                   	nop
c0026554:	83 c4 10             	add    esp,0x10
c0026557:	c3                   	ret    

c0026558 <pitHandler(regs*, void*)>:
c0026558:	83 ec 0c             	sub    esp,0xc
c002655b:	a1 04 2a 03 c0       	mov    eax,ds:0xc0032a04
c0026560:	99                   	cdq    
c0026561:	52                   	push   edx
c0026562:	50                   	push   eax
c0026563:	6a 00                	push   0x0
c0026565:	68 00 ca 9a 3b       	push   0x3b9aca00
c002656a:	e8 bd 04 00 00       	call   c0026a2c <__udivdi3>
c002656f:	83 c4 10             	add    esp,0x10
c0026572:	83 ec 08             	sub    esp,0x8
c0026575:	52                   	push   edx
c0026576:	50                   	push   eax
c0026577:	e8 d3 07 ff ff       	call   c0016d4f <timerHandler(unsigned long long)>
c002657c:	83 c4 10             	add    esp,0x10
c002657f:	90                   	nop
c0026580:	83 c4 0c             	add    esp,0xc
c0026583:	c3                   	ret    

c0026584 <PIT::open(int, int, void*)>:
c0026584:	83 ec 0c             	sub    esp,0xc
c0026587:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002658b:	8b 00                	mov    eax,DWORD PTR [eax]
c002658d:	83 c0 24             	add    eax,0x24
c0026590:	8b 00                	mov    eax,DWORD PTR [eax]
c0026592:	83 ec 08             	sub    esp,0x8
c0026595:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026599:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002659d:	ff d0                	call   eax
c002659f:	83 c4 10             	add    esp,0x10
c00265a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265a6:	83 ec 0c             	sub    esp,0xc
c00265a9:	6a 00                	push   0x0
c00265ab:	6a 01                	push   0x1
c00265ad:	68 58 65 02 c0       	push   0xc0026558
c00265b2:	6a 00                	push   0x0
c00265b4:	50                   	push   eax
c00265b5:	e8 62 dd fe ff       	call   c001431c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00265ba:	83 c4 20             	add    esp,0x20
c00265bd:	89 c2                	mov    edx,eax
c00265bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265c3:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00265c9:	b8 00 00 00 00       	mov    eax,0x0
c00265ce:	83 c4 0c             	add    esp,0xc
c00265d1:	c3                   	ret    

c00265d2 <PIT::close(int, int, void*)>:
c00265d2:	83 ec 0c             	sub    esp,0xc
c00265d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265d9:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00265e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265e7:	6a 01                	push   0x1
c00265e9:	68 58 65 02 c0       	push   0xc0026558
c00265ee:	6a 00                	push   0x0
c00265f0:	50                   	push   eax
c00265f1:	e8 64 dd fe ff       	call   c001435a <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c00265f6:	83 c4 10             	add    esp,0x10
c00265f9:	b8 00 00 00 00       	mov    eax,0x0
c00265fe:	83 c4 0c             	add    esp,0xc
c0026601:	c3                   	ret    

c0026602 <PIT::PIT()>:
c0026602:	83 ec 0c             	sub    esp,0xc
c0026605:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026609:	83 ec 08             	sub    esp,0x8
c002660c:	68 18 d5 02 c0       	push   0xc002d518
c0026611:	50                   	push   eax
c0026612:	e8 a9 06 ff ff       	call   c0016cc0 <Timer::Timer(char const*)>
c0026617:	83 c4 10             	add    esp,0x10
c002661a:	ba 40 d5 02 c0       	mov    edx,0xc002d540
c002661f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026623:	89 10                	mov    DWORD PTR [eax],edx
c0026625:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026629:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002662f:	0f b6 d0             	movzx  edx,al
c0026632:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026636:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c002663d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026641:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026647:	0f b6 d0             	movzx  edx,al
c002664a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002664e:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0026653:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026657:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002665d:	8d 50 01             	lea    edx,[eax+0x1]
c0026660:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026664:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002666a:	0f b6 d0             	movzx  edx,al
c002666d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026671:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026675:	83 e1 3f             	and    ecx,0x3f
c0026678:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002667c:	90                   	nop
c002667d:	83 c4 0c             	add    esp,0xc
c0026680:	c3                   	ret    
c0026681:	66 90                	xchg   ax,ax
c0026683:	66 90                	xchg   ax,ax
c0026685:	66 90                	xchg   ax,ax
c0026687:	66 90                	xchg   ax,ax
c0026689:	66 90                	xchg   ax,ax
c002668b:	66 90                	xchg   ax,ax
c002668d:	66 90                	xchg   ax,ax
c002668f:	90                   	nop

c0026690 <avxDetect>:
c0026690:	b8 00 00 00 00       	mov    eax,0x0
c0026695:	c3                   	ret    

c0026696 <avxSave>:
c0026696:	c3                   	ret    

c0026697 <avxLoad>:
c0026697:	c3                   	ret    

c0026698 <avxInit>:
c0026698:	c3                   	ret    

c0026699 <avxClose>:
c0026699:	c3                   	ret    

c002669a <wouldSheSayYes>:
c002669a:	c3                   	ret    
c002669b:	49                   	dec    ecx
c002669c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c00266a0:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c00266a4:	75 20                	jne    c00266c6 <sseDetect.noSSE+0x1>
c00266a6:	4e                   	dec    esi
c00266a7:	79 61                	jns    c002670a <x87Detect+0x14>
c00266a9:	68 2e 2e 2e 00       	push   0x2e2e2e
c00266ae:	66 90                	xchg   ax,ax

c00266b0 <absolutelyNoChanceInHell>:
c00266b0:	b8 01 00 00 00       	mov    eax,0x1
c00266b5:	0f a2                	cpuid  
c00266b7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c00266bd:	74 06                	je     c00266c5 <sseDetect.noSSE>
c00266bf:	b8 01 00 00 00       	mov    eax,0x1
c00266c4:	c3                   	ret    

c00266c5 <sseDetect.noSSE>:
c00266c5:	31 c0                	xor    eax,eax
c00266c7:	c3                   	ret    

c00266c8 <sseSave>:
c00266c8:	0f ae 44 24 08       	fxsave [esp+0x8]
c00266cd:	c3                   	ret    

c00266ce <sseLoad>:
c00266ce:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c00266d3:	c3                   	ret    

c00266d4 <sseInit>:
c00266d4:	e8 43 00 00 00       	call   c002671c <x87Init>
c00266d9:	0f 20 e0             	mov    eax,cr4
c00266dc:	66 0d 00 06          	or     ax,0x600
c00266e0:	0f 22 e0             	mov    cr4,eax
c00266e3:	c3                   	ret    

c00266e4 <sseClose>:
c00266e4:	c3                   	ret    
c00266e5:	66 90                	xchg   ax,ax
c00266e7:	66 90                	xchg   ax,ax
c00266e9:	66 90                	xchg   ax,ax
c00266eb:	66 90                	xchg   ax,ax
c00266ed:	66 90                	xchg   ax,ax
c00266ef:	90                   	nop

c00266f0 <value_37F>:
c00266f0:	7f 03                	jg     c00266f5 <value_37A+0x1>

c00266f2 <value_37E>:
c00266f2:	7e 03                	jle    c00266f7 <x87Detect+0x1>

c00266f4 <value_37A>:
c00266f4:	7a 03                	jp     c00266f9 <x87Detect+0x3>

c00266f6 <x87Detect>:
c00266f6:	b8 01 00 00 00       	mov    eax,0x1
c00266fb:	0f a2                	cpuid  
c00266fd:	f7 c2 01 00 00 00    	test   edx,0x1
c0026703:	74 06                	je     c002670b <x87Detect.nox87>
c0026705:	b8 01 00 00 00       	mov    eax,0x1
c002670a:	c3                   	ret    

c002670b <x87Detect.nox87>:
c002670b:	b8 00 00 00 00       	mov    eax,0x0
c0026710:	c3                   	ret    

c0026711 <x87Save>:
c0026711:	9b dd 74 24 08       	fsave  [esp+0x8]
c0026716:	c3                   	ret    

c0026717 <x87Load>:
c0026717:	dd 64 24 08          	frstor [esp+0x8]
c002671b:	c3                   	ret    

c002671c <x87Init>:
c002671c:	9b db e3             	finit  
c002671f:	0f 20 c0             	mov    eax,cr0
c0026722:	66 25 fb ff          	and    ax,0xfffb
c0026726:	66 0d 22 00          	or     ax,0x22
c002672a:	0f 22 c0             	mov    cr0,eax
c002672d:	0f 06                	clts   
c002672f:	d9 2d f4 66 02 c0    	fldcw  WORD PTR ds:0xc00266f4
c0026735:	c3                   	ret    

c0026736 <x87Close>:
c0026736:	c3                   	ret    
c0026737:	90                   	nop

c0026738 <__do_global_ctors_aux>:
c0026738:	a1 7c 92 02 c0       	mov    eax,ds:0xc002927c
c002673d:	83 f8 ff             	cmp    eax,0xffffffff
c0026740:	74 1a                	je     c002675c <__do_global_ctors_aux+0x24>
c0026742:	55                   	push   ebp
c0026743:	89 e5                	mov    ebp,esp
c0026745:	53                   	push   ebx
c0026746:	52                   	push   edx
c0026747:	bb 7c 92 02 c0       	mov    ebx,0xc002927c
c002674c:	ff d0                	call   eax
c002674e:	83 eb 04             	sub    ebx,0x4
c0026751:	8b 03                	mov    eax,DWORD PTR [ebx]
c0026753:	83 f8 ff             	cmp    eax,0xffffffff
c0026756:	75 f4                	jne    c002674c <__do_global_ctors_aux+0x14>
c0026758:	58                   	pop    eax
c0026759:	5b                   	pop    ebx
c002675a:	5d                   	pop    ebp
c002675b:	c3                   	ret    
c002675c:	c3                   	ret    
c002675d:	66 90                	xchg   ax,ax
c002675f:	90                   	nop

c0026760 <__divdi3>:
c0026760:	55                   	push   ebp
c0026761:	57                   	push   edi
c0026762:	56                   	push   esi
c0026763:	53                   	push   ebx
c0026764:	83 ec 1c             	sub    esp,0x1c
c0026767:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002676b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002676f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026772:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026776:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002677a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002677e:	85 db                	test   ebx,ebx
c0026780:	0f 88 8e 00 00 00    	js     c0026814 <__divdi3+0xb4>
c0026786:	89 dd                	mov    ebp,ebx
c0026788:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026790:	89 d3                	mov    ebx,edx
c0026792:	85 d2                	test   edx,edx
c0026794:	79 0d                	jns    c00267a3 <__divdi3+0x43>
c0026796:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002679a:	f7 d8                	neg    eax
c002679c:	83 d2 00             	adc    edx,0x0
c002679f:	f7 da                	neg    edx
c00267a1:	89 d3                	mov    ebx,edx
c00267a3:	89 c7                	mov    edi,eax
c00267a5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00267a8:	85 db                	test   ebx,ebx
c00267aa:	75 48                	jne    c00267f4 <__divdi3+0x94>
c00267ac:	39 ef                	cmp    edi,ebp
c00267ae:	76 24                	jbe    c00267d4 <__divdi3+0x74>
c00267b0:	89 ea                	mov    edx,ebp
c00267b2:	f7 f7                	div    edi
c00267b4:	89 c1                	mov    ecx,eax
c00267b6:	31 f6                	xor    esi,esi
c00267b8:	89 c8                	mov    eax,ecx
c00267ba:	89 f2                	mov    edx,esi
c00267bc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00267c0:	85 c9                	test   ecx,ecx
c00267c2:	74 07                	je     c00267cb <__divdi3+0x6b>
c00267c4:	f7 d8                	neg    eax
c00267c6:	83 d2 00             	adc    edx,0x0
c00267c9:	f7 da                	neg    edx
c00267cb:	83 c4 1c             	add    esp,0x1c
c00267ce:	5b                   	pop    ebx
c00267cf:	5e                   	pop    esi
c00267d0:	5f                   	pop    edi
c00267d1:	5d                   	pop    ebp
c00267d2:	c3                   	ret    
c00267d3:	90                   	nop
c00267d4:	85 ff                	test   edi,edi
c00267d6:	75 0b                	jne    c00267e3 <__divdi3+0x83>
c00267d8:	b8 01 00 00 00       	mov    eax,0x1
c00267dd:	31 d2                	xor    edx,edx
c00267df:	f7 f3                	div    ebx
c00267e1:	89 c7                	mov    edi,eax
c00267e3:	31 d2                	xor    edx,edx
c00267e5:	89 e8                	mov    eax,ebp
c00267e7:	f7 f7                	div    edi
c00267e9:	89 c6                	mov    esi,eax
c00267eb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00267ee:	f7 f7                	div    edi
c00267f0:	89 c1                	mov    ecx,eax
c00267f2:	eb c4                	jmp    c00267b8 <__divdi3+0x58>
c00267f4:	39 eb                	cmp    ebx,ebp
c00267f6:	77 3c                	ja     c0026834 <__divdi3+0xd4>
c00267f8:	0f bd f3             	bsr    esi,ebx
c00267fb:	83 f6 1f             	xor    esi,0x1f
c00267fe:	75 40                	jne    c0026840 <__divdi3+0xe0>
c0026800:	39 eb                	cmp    ebx,ebp
c0026802:	72 09                	jb     c002680d <__divdi3+0xad>
c0026804:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0026807:	0f 87 97 00 00 00    	ja     c00268a4 <__divdi3+0x144>
c002680d:	b9 01 00 00 00       	mov    ecx,0x1
c0026812:	eb a4                	jmp    c00267b8 <__divdi3+0x58>
c0026814:	f7 d9                	neg    ecx
c0026816:	83 d3 00             	adc    ebx,0x0
c0026819:	f7 db                	neg    ebx
c002681b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002681e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026822:	89 dd                	mov    ebp,ebx
c0026824:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c002682c:	e9 5f ff ff ff       	jmp    c0026790 <__divdi3+0x30>
c0026831:	8d 76 00             	lea    esi,[esi+0x0]
c0026834:	31 f6                	xor    esi,esi
c0026836:	31 c9                	xor    ecx,ecx
c0026838:	e9 7b ff ff ff       	jmp    c00267b8 <__divdi3+0x58>
c002683d:	8d 76 00             	lea    esi,[esi+0x0]
c0026840:	b8 20 00 00 00       	mov    eax,0x20
c0026845:	29 f0                	sub    eax,esi
c0026847:	89 f1                	mov    ecx,esi
c0026849:	d3 e3                	shl    ebx,cl
c002684b:	89 fa                	mov    edx,edi
c002684d:	88 c1                	mov    cl,al
c002684f:	d3 ea                	shr    edx,cl
c0026851:	09 da                	or     edx,ebx
c0026853:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026857:	89 f1                	mov    ecx,esi
c0026859:	d3 e7                	shl    edi,cl
c002685b:	89 eb                	mov    ebx,ebp
c002685d:	88 c1                	mov    cl,al
c002685f:	d3 eb                	shr    ebx,cl
c0026861:	89 f1                	mov    ecx,esi
c0026863:	d3 e5                	shl    ebp,cl
c0026865:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0026868:	88 c1                	mov    cl,al
c002686a:	d3 ea                	shr    edx,cl
c002686c:	09 d5                	or     ebp,edx
c002686e:	89 e8                	mov    eax,ebp
c0026870:	89 da                	mov    edx,ebx
c0026872:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0026876:	89 d3                	mov    ebx,edx
c0026878:	89 c5                	mov    ebp,eax
c002687a:	f7 e7                	mul    edi
c002687c:	39 d3                	cmp    ebx,edx
c002687e:	72 18                	jb     c0026898 <__divdi3+0x138>
c0026880:	74 0a                	je     c002688c <__divdi3+0x12c>
c0026882:	89 e9                	mov    ecx,ebp
c0026884:	31 f6                	xor    esi,esi
c0026886:	e9 2d ff ff ff       	jmp    c00267b8 <__divdi3+0x58>
c002688b:	90                   	nop
c002688c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002688f:	89 f1                	mov    ecx,esi
c0026891:	d3 e7                	shl    edi,cl
c0026893:	39 c7                	cmp    edi,eax
c0026895:	73 eb                	jae    c0026882 <__divdi3+0x122>
c0026897:	90                   	nop
c0026898:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002689b:	31 f6                	xor    esi,esi
c002689d:	e9 16 ff ff ff       	jmp    c00267b8 <__divdi3+0x58>
c00268a2:	66 90                	xchg   ax,ax
c00268a4:	31 c9                	xor    ecx,ecx
c00268a6:	e9 0d ff ff ff       	jmp    c00267b8 <__divdi3+0x58>
c00268ab:	90                   	nop

c00268ac <__moddi3>:
c00268ac:	55                   	push   ebp
c00268ad:	57                   	push   edi
c00268ae:	56                   	push   esi
c00268af:	53                   	push   ebx
c00268b0:	83 ec 2c             	sub    esp,0x2c
c00268b3:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00268b7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00268bb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00268bf:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00268c3:	85 db                	test   ebx,ebx
c00268c5:	0f 88 85 00 00 00    	js     c0026950 <__moddi3+0xa4>
c00268cb:	89 de                	mov    esi,ebx
c00268cd:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00268d5:	89 d7                	mov    edi,edx
c00268d7:	85 d2                	test   edx,edx
c00268d9:	79 09                	jns    c00268e4 <__moddi3+0x38>
c00268db:	f7 d8                	neg    eax
c00268dd:	83 d2 00             	adc    edx,0x0
c00268e0:	f7 da                	neg    edx
c00268e2:	89 d7                	mov    edi,edx
c00268e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00268e8:	89 cd                	mov    ebp,ecx
c00268ea:	85 ff                	test   edi,edi
c00268ec:	75 52                	jne    c0026940 <__moddi3+0x94>
c00268ee:	89 c3                	mov    ebx,eax
c00268f0:	39 f0                	cmp    eax,esi
c00268f2:	76 24                	jbe    c0026918 <__moddi3+0x6c>
c00268f4:	89 c8                	mov    eax,ecx
c00268f6:	89 f2                	mov    edx,esi
c00268f8:	f7 f3                	div    ebx
c00268fa:	89 d6                	mov    esi,edx
c00268fc:	89 f0                	mov    eax,esi
c00268fe:	31 d2                	xor    edx,edx
c0026900:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026904:	85 c9                	test   ecx,ecx
c0026906:	74 07                	je     c002690f <__moddi3+0x63>
c0026908:	f7 d8                	neg    eax
c002690a:	83 d2 00             	adc    edx,0x0
c002690d:	f7 da                	neg    edx
c002690f:	83 c4 2c             	add    esp,0x2c
c0026912:	5b                   	pop    ebx
c0026913:	5e                   	pop    esi
c0026914:	5f                   	pop    edi
c0026915:	5d                   	pop    ebp
c0026916:	c3                   	ret    
c0026917:	90                   	nop
c0026918:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002691c:	85 db                	test   ebx,ebx
c002691e:	75 0d                	jne    c002692d <__moddi3+0x81>
c0026920:	b8 01 00 00 00       	mov    eax,0x1
c0026925:	31 d2                	xor    edx,edx
c0026927:	f7 f7                	div    edi
c0026929:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002692d:	89 f0                	mov    eax,esi
c002692f:	31 d2                	xor    edx,edx
c0026931:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026935:	f7 f7                	div    edi
c0026937:	89 e8                	mov    eax,ebp
c0026939:	f7 f7                	div    edi
c002693b:	89 d6                	mov    esi,edx
c002693d:	eb bd                	jmp    c00268fc <__moddi3+0x50>
c002693f:	90                   	nop
c0026940:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026944:	39 f7                	cmp    edi,esi
c0026946:	76 20                	jbe    c0026968 <__moddi3+0xbc>
c0026948:	89 c8                	mov    eax,ecx
c002694a:	89 f2                	mov    edx,esi
c002694c:	eb b2                	jmp    c0026900 <__moddi3+0x54>
c002694e:	66 90                	xchg   ax,ax
c0026950:	f7 d9                	neg    ecx
c0026952:	83 d3 00             	adc    ebx,0x0
c0026955:	f7 db                	neg    ebx
c0026957:	89 de                	mov    esi,ebx
c0026959:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0026961:	e9 6f ff ff ff       	jmp    c00268d5 <__moddi3+0x29>
c0026966:	66 90                	xchg   ax,ax
c0026968:	0f bd c7             	bsr    eax,edi
c002696b:	83 f0 1f             	xor    eax,0x1f
c002696e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0026972:	75 24                	jne    c0026998 <__moddi3+0xec>
c0026974:	39 f7                	cmp    edi,esi
c0026976:	72 06                	jb     c002697e <__moddi3+0xd2>
c0026978:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c002697c:	77 0c                	ja     c002698a <__moddi3+0xde>
c002697e:	89 e9                	mov    ecx,ebp
c0026980:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0026984:	19 fe                	sbb    esi,edi
c0026986:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002698a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002698e:	89 f2                	mov    edx,esi
c0026990:	e9 6b ff ff ff       	jmp    c0026900 <__moddi3+0x54>
c0026995:	8d 76 00             	lea    esi,[esi+0x0]
c0026998:	b8 20 00 00 00       	mov    eax,0x20
c002699d:	89 c2                	mov    edx,eax
c002699f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00269a3:	29 da                	sub    edx,ebx
c00269a5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00269a9:	88 d9                	mov    cl,bl
c00269ab:	d3 e7                	shl    edi,cl
c00269ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00269b1:	88 d1                	mov    cl,dl
c00269b3:	d3 e8                	shr    eax,cl
c00269b5:	09 c7                	or     edi,eax
c00269b7:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00269bb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00269bf:	89 d8                	mov    eax,ebx
c00269c1:	88 d9                	mov    cl,bl
c00269c3:	d3 e7                	shl    edi,cl
c00269c5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00269c9:	89 f3                	mov    ebx,esi
c00269cb:	88 d1                	mov    cl,dl
c00269cd:	d3 eb                	shr    ebx,cl
c00269cf:	89 c7                	mov    edi,eax
c00269d1:	88 c1                	mov    cl,al
c00269d3:	d3 e6                	shl    esi,cl
c00269d5:	89 e8                	mov    eax,ebp
c00269d7:	88 d1                	mov    cl,dl
c00269d9:	d3 e8                	shr    eax,cl
c00269db:	09 f0                	or     eax,esi
c00269dd:	89 f9                	mov    ecx,edi
c00269df:	d3 e5                	shl    ebp,cl
c00269e1:	89 da                	mov    edx,ebx
c00269e3:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c00269e7:	89 d3                	mov    ebx,edx
c00269e9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00269ed:	89 c6                	mov    esi,eax
c00269ef:	89 d1                	mov    ecx,edx
c00269f1:	39 d3                	cmp    ebx,edx
c00269f3:	72 27                	jb     c0026a1c <__moddi3+0x170>
c00269f5:	74 21                	je     c0026a18 <__moddi3+0x16c>
c00269f7:	29 f5                	sub    ebp,esi
c00269f9:	19 cb                	sbb    ebx,ecx
c00269fb:	89 de                	mov    esi,ebx
c00269fd:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0026a01:	d3 e6                	shl    esi,cl
c0026a03:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0026a07:	89 f9                	mov    ecx,edi
c0026a09:	d3 ed                	shr    ebp,cl
c0026a0b:	09 ee                	or     esi,ebp
c0026a0d:	89 f0                	mov    eax,esi
c0026a0f:	d3 eb                	shr    ebx,cl
c0026a11:	89 da                	mov    edx,ebx
c0026a13:	e9 e8 fe ff ff       	jmp    c0026900 <__moddi3+0x54>
c0026a18:	39 c5                	cmp    ebp,eax
c0026a1a:	73 db                	jae    c00269f7 <__moddi3+0x14b>
c0026a1c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026a20:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0026a24:	89 d1                	mov    ecx,edx
c0026a26:	89 c6                	mov    esi,eax
c0026a28:	eb cd                	jmp    c00269f7 <__moddi3+0x14b>
c0026a2a:	66 90                	xchg   ax,ax

c0026a2c <__udivdi3>:
c0026a2c:	55                   	push   ebp
c0026a2d:	57                   	push   edi
c0026a2e:	56                   	push   esi
c0026a2f:	53                   	push   ebx
c0026a30:	83 ec 1c             	sub    esp,0x1c
c0026a33:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0026a37:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0026a3b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026a3f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026a43:	85 d2                	test   edx,edx
c0026a45:	75 41                	jne    c0026a88 <__udivdi3+0x5c>
c0026a47:	39 f7                	cmp    edi,esi
c0026a49:	76 15                	jbe    c0026a60 <__udivdi3+0x34>
c0026a4b:	89 e8                	mov    eax,ebp
c0026a4d:	89 f2                	mov    edx,esi
c0026a4f:	f7 f7                	div    edi
c0026a51:	31 db                	xor    ebx,ebx
c0026a53:	89 da                	mov    edx,ebx
c0026a55:	83 c4 1c             	add    esp,0x1c
c0026a58:	5b                   	pop    ebx
c0026a59:	5e                   	pop    esi
c0026a5a:	5f                   	pop    edi
c0026a5b:	5d                   	pop    ebp
c0026a5c:	c3                   	ret    
c0026a5d:	8d 76 00             	lea    esi,[esi+0x0]
c0026a60:	89 f9                	mov    ecx,edi
c0026a62:	85 ff                	test   edi,edi
c0026a64:	75 0b                	jne    c0026a71 <__udivdi3+0x45>
c0026a66:	b8 01 00 00 00       	mov    eax,0x1
c0026a6b:	31 d2                	xor    edx,edx
c0026a6d:	f7 f7                	div    edi
c0026a6f:	89 c1                	mov    ecx,eax
c0026a71:	31 d2                	xor    edx,edx
c0026a73:	89 f0                	mov    eax,esi
c0026a75:	f7 f1                	div    ecx
c0026a77:	89 c3                	mov    ebx,eax
c0026a79:	89 e8                	mov    eax,ebp
c0026a7b:	f7 f1                	div    ecx
c0026a7d:	89 da                	mov    edx,ebx
c0026a7f:	83 c4 1c             	add    esp,0x1c
c0026a82:	5b                   	pop    ebx
c0026a83:	5e                   	pop    esi
c0026a84:	5f                   	pop    edi
c0026a85:	5d                   	pop    ebp
c0026a86:	c3                   	ret    
c0026a87:	90                   	nop
c0026a88:	39 f2                	cmp    edx,esi
c0026a8a:	77 1c                	ja     c0026aa8 <__udivdi3+0x7c>
c0026a8c:	0f bd da             	bsr    ebx,edx
c0026a8f:	83 f3 1f             	xor    ebx,0x1f
c0026a92:	75 24                	jne    c0026ab8 <__udivdi3+0x8c>
c0026a94:	39 f2                	cmp    edx,esi
c0026a96:	72 08                	jb     c0026aa0 <__udivdi3+0x74>
c0026a98:	39 ef                	cmp    edi,ebp
c0026a9a:	0f 87 84 00 00 00    	ja     c0026b24 <__udivdi3+0xf8>
c0026aa0:	b8 01 00 00 00       	mov    eax,0x1
c0026aa5:	eb ac                	jmp    c0026a53 <__udivdi3+0x27>
c0026aa7:	90                   	nop
c0026aa8:	31 db                	xor    ebx,ebx
c0026aaa:	31 c0                	xor    eax,eax
c0026aac:	89 da                	mov    edx,ebx
c0026aae:	83 c4 1c             	add    esp,0x1c
c0026ab1:	5b                   	pop    ebx
c0026ab2:	5e                   	pop    esi
c0026ab3:	5f                   	pop    edi
c0026ab4:	5d                   	pop    ebp
c0026ab5:	c3                   	ret    
c0026ab6:	66 90                	xchg   ax,ax
c0026ab8:	b8 20 00 00 00       	mov    eax,0x20
c0026abd:	29 d8                	sub    eax,ebx
c0026abf:	88 d9                	mov    cl,bl
c0026ac1:	d3 e2                	shl    edx,cl
c0026ac3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0026ac7:	89 fa                	mov    edx,edi
c0026ac9:	88 c1                	mov    cl,al
c0026acb:	d3 ea                	shr    edx,cl
c0026acd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026ad1:	09 d1                	or     ecx,edx
c0026ad3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026ad7:	88 d9                	mov    cl,bl
c0026ad9:	d3 e7                	shl    edi,cl
c0026adb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026adf:	89 f7                	mov    edi,esi
c0026ae1:	88 c1                	mov    cl,al
c0026ae3:	d3 ef                	shr    edi,cl
c0026ae5:	88 d9                	mov    cl,bl
c0026ae7:	d3 e6                	shl    esi,cl
c0026ae9:	89 ea                	mov    edx,ebp
c0026aeb:	88 c1                	mov    cl,al
c0026aed:	d3 ea                	shr    edx,cl
c0026aef:	09 d6                	or     esi,edx
c0026af1:	89 f0                	mov    eax,esi
c0026af3:	89 fa                	mov    edx,edi
c0026af5:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026af9:	89 d7                	mov    edi,edx
c0026afb:	89 c6                	mov    esi,eax
c0026afd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026b01:	39 d7                	cmp    edi,edx
c0026b03:	72 13                	jb     c0026b18 <__udivdi3+0xec>
c0026b05:	74 09                	je     c0026b10 <__udivdi3+0xe4>
c0026b07:	89 f0                	mov    eax,esi
c0026b09:	31 db                	xor    ebx,ebx
c0026b0b:	e9 43 ff ff ff       	jmp    c0026a53 <__udivdi3+0x27>
c0026b10:	88 d9                	mov    cl,bl
c0026b12:	d3 e5                	shl    ebp,cl
c0026b14:	39 c5                	cmp    ebp,eax
c0026b16:	73 ef                	jae    c0026b07 <__udivdi3+0xdb>
c0026b18:	8d 46 ff             	lea    eax,[esi-0x1]
c0026b1b:	31 db                	xor    ebx,ebx
c0026b1d:	e9 31 ff ff ff       	jmp    c0026a53 <__udivdi3+0x27>
c0026b22:	66 90                	xchg   ax,ax
c0026b24:	31 c0                	xor    eax,eax
c0026b26:	e9 28 ff ff ff       	jmp    c0026a53 <__udivdi3+0x27>
c0026b2b:	90                   	nop

c0026b2c <__umoddi3>:
c0026b2c:	55                   	push   ebp
c0026b2d:	57                   	push   edi
c0026b2e:	56                   	push   esi
c0026b2f:	53                   	push   ebx
c0026b30:	83 ec 1c             	sub    esp,0x1c
c0026b33:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0026b37:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026b3b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026b3f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026b43:	89 da                	mov    edx,ebx
c0026b45:	85 c0                	test   eax,eax
c0026b47:	75 37                	jne    c0026b80 <__umoddi3+0x54>
c0026b49:	39 df                	cmp    edi,ebx
c0026b4b:	76 13                	jbe    c0026b60 <__umoddi3+0x34>
c0026b4d:	89 f0                	mov    eax,esi
c0026b4f:	f7 f7                	div    edi
c0026b51:	89 d0                	mov    eax,edx
c0026b53:	31 d2                	xor    edx,edx
c0026b55:	83 c4 1c             	add    esp,0x1c
c0026b58:	5b                   	pop    ebx
c0026b59:	5e                   	pop    esi
c0026b5a:	5f                   	pop    edi
c0026b5b:	5d                   	pop    ebp
c0026b5c:	c3                   	ret    
c0026b5d:	8d 76 00             	lea    esi,[esi+0x0]
c0026b60:	89 fd                	mov    ebp,edi
c0026b62:	85 ff                	test   edi,edi
c0026b64:	75 0b                	jne    c0026b71 <__umoddi3+0x45>
c0026b66:	b8 01 00 00 00       	mov    eax,0x1
c0026b6b:	31 d2                	xor    edx,edx
c0026b6d:	f7 f7                	div    edi
c0026b6f:	89 c5                	mov    ebp,eax
c0026b71:	89 d8                	mov    eax,ebx
c0026b73:	31 d2                	xor    edx,edx
c0026b75:	f7 f5                	div    ebp
c0026b77:	89 f0                	mov    eax,esi
c0026b79:	f7 f5                	div    ebp
c0026b7b:	89 d0                	mov    eax,edx
c0026b7d:	eb d4                	jmp    c0026b53 <__umoddi3+0x27>
c0026b7f:	90                   	nop
c0026b80:	89 f1                	mov    ecx,esi
c0026b82:	39 d8                	cmp    eax,ebx
c0026b84:	76 0a                	jbe    c0026b90 <__umoddi3+0x64>
c0026b86:	89 f0                	mov    eax,esi
c0026b88:	83 c4 1c             	add    esp,0x1c
c0026b8b:	5b                   	pop    ebx
c0026b8c:	5e                   	pop    esi
c0026b8d:	5f                   	pop    edi
c0026b8e:	5d                   	pop    ebp
c0026b8f:	c3                   	ret    
c0026b90:	0f bd e8             	bsr    ebp,eax
c0026b93:	83 f5 1f             	xor    ebp,0x1f
c0026b96:	75 1c                	jne    c0026bb4 <__umoddi3+0x88>
c0026b98:	39 d8                	cmp    eax,ebx
c0026b9a:	72 04                	jb     c0026ba0 <__umoddi3+0x74>
c0026b9c:	39 f7                	cmp    edi,esi
c0026b9e:	77 08                	ja     c0026ba8 <__umoddi3+0x7c>
c0026ba0:	89 da                	mov    edx,ebx
c0026ba2:	29 fe                	sub    esi,edi
c0026ba4:	19 c2                	sbb    edx,eax
c0026ba6:	89 f1                	mov    ecx,esi
c0026ba8:	89 c8                	mov    eax,ecx
c0026baa:	83 c4 1c             	add    esp,0x1c
c0026bad:	5b                   	pop    ebx
c0026bae:	5e                   	pop    esi
c0026baf:	5f                   	pop    edi
c0026bb0:	5d                   	pop    ebp
c0026bb1:	c3                   	ret    
c0026bb2:	66 90                	xchg   ax,ax
c0026bb4:	ba 20 00 00 00       	mov    edx,0x20
c0026bb9:	29 ea                	sub    edx,ebp
c0026bbb:	89 e9                	mov    ecx,ebp
c0026bbd:	d3 e0                	shl    eax,cl
c0026bbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026bc3:	89 f8                	mov    eax,edi
c0026bc5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026bc9:	88 d1                	mov    cl,dl
c0026bcb:	d3 e8                	shr    eax,cl
c0026bcd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026bd1:	09 c1                	or     ecx,eax
c0026bd3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026bd7:	89 e9                	mov    ecx,ebp
c0026bd9:	d3 e7                	shl    edi,cl
c0026bdb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026bdf:	89 d8                	mov    eax,ebx
c0026be1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026be5:	88 d1                	mov    cl,dl
c0026be7:	d3 e8                	shr    eax,cl
c0026be9:	89 c7                	mov    edi,eax
c0026beb:	89 e9                	mov    ecx,ebp
c0026bed:	d3 e3                	shl    ebx,cl
c0026bef:	89 f0                	mov    eax,esi
c0026bf1:	88 d1                	mov    cl,dl
c0026bf3:	d3 e8                	shr    eax,cl
c0026bf5:	09 d8                	or     eax,ebx
c0026bf7:	89 e9                	mov    ecx,ebp
c0026bf9:	d3 e6                	shl    esi,cl
c0026bfb:	89 f3                	mov    ebx,esi
c0026bfd:	89 fa                	mov    edx,edi
c0026bff:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026c03:	89 d1                	mov    ecx,edx
c0026c05:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026c09:	89 c6                	mov    esi,eax
c0026c0b:	89 d7                	mov    edi,edx
c0026c0d:	39 d1                	cmp    ecx,edx
c0026c0f:	72 27                	jb     c0026c38 <__umoddi3+0x10c>
c0026c11:	74 21                	je     c0026c34 <__umoddi3+0x108>
c0026c13:	89 ca                	mov    edx,ecx
c0026c15:	29 f3                	sub    ebx,esi
c0026c17:	19 fa                	sbb    edx,edi
c0026c19:	89 d0                	mov    eax,edx
c0026c1b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026c1f:	d3 e0                	shl    eax,cl
c0026c21:	89 e9                	mov    ecx,ebp
c0026c23:	d3 eb                	shr    ebx,cl
c0026c25:	09 d8                	or     eax,ebx
c0026c27:	d3 ea                	shr    edx,cl
c0026c29:	83 c4 1c             	add    esp,0x1c
c0026c2c:	5b                   	pop    ebx
c0026c2d:	5e                   	pop    esi
c0026c2e:	5f                   	pop    edi
c0026c2f:	5d                   	pop    ebp
c0026c30:	c3                   	ret    
c0026c31:	8d 76 00             	lea    esi,[esi+0x0]
c0026c34:	39 c3                	cmp    ebx,eax
c0026c36:	73 db                	jae    c0026c13 <__umoddi3+0xe7>
c0026c38:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026c3c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026c40:	89 d7                	mov    edi,edx
c0026c42:	89 c6                	mov    esi,eax
c0026c44:	eb cd                	jmp    c0026c13 <__umoddi3+0xe7>

c0026c46 <__addsf3>:
c0026c46:	55                   	push   ebp
c0026c47:	89 e5                	mov    ebp,esp
c0026c49:	57                   	push   edi
c0026c4a:	56                   	push   esi
c0026c4b:	53                   	push   ebx
c0026c4c:	83 ec 08             	sub    esp,0x8
c0026c4f:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026c52:	89 fa                	mov    edx,edi
c0026c54:	89 f8                	mov    eax,edi
c0026c56:	c1 f8 17             	sar    eax,0x17
c0026c59:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026c5c:	c1 e2 08             	shl    edx,0x8
c0026c5f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026c65:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026c68:	89 de                	mov    esi,ebx
c0026c6a:	c1 fe 17             	sar    esi,0x17
c0026c6d:	c1 e3 08             	shl    ebx,0x8
c0026c70:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026c76:	31 f0                	xor    eax,esi
c0026c78:	0f 88 3b 01 00 00    	js     c0026db9 <__addsf3+0x173>
c0026c7e:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026c81:	29 f1                	sub    ecx,esi
c0026c83:	85 c9                	test   ecx,ecx
c0026c85:	7e 54                	jle    c0026cdb <__addsf3+0x95>
c0026c87:	89 f0                	mov    eax,esi
c0026c89:	84 c0                	test   al,al
c0026c8b:	75 10                	jne    c0026c9d <__addsf3+0x57>
c0026c8d:	85 db                	test   ebx,ebx
c0026c8f:	0f 84 aa 02 00 00    	je     c0026f3f <__addsf3+0x2f9>
c0026c95:	49                   	dec    ecx
c0026c96:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026c99:	74 38                	je     c0026cd3 <__addsf3+0x8d>
c0026c9b:	eb 13                	jmp    c0026cb0 <__addsf3+0x6a>
c0026c9d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026ca0:	f7 d0                	not    eax
c0026ca2:	84 c0                	test   al,al
c0026ca4:	0f 84 95 02 00 00    	je     c0026f3f <__addsf3+0x2f9>
c0026caa:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026cb0:	83 f9 1f             	cmp    ecx,0x1f
c0026cb3:	0f 8f 86 02 00 00    	jg     c0026f3f <__addsf3+0x2f9>
c0026cb9:	89 de                	mov    esi,ebx
c0026cbb:	d3 ee                	shr    esi,cl
c0026cbd:	b8 20 00 00 00       	mov    eax,0x20
c0026cc2:	29 c8                	sub    eax,ecx
c0026cc4:	89 c1                	mov    ecx,eax
c0026cc6:	d3 e3                	shl    ebx,cl
c0026cc8:	31 c0                	xor    eax,eax
c0026cca:	85 db                	test   ebx,ebx
c0026ccc:	0f 95 c0             	setne  al
c0026ccf:	09 f0                	or     eax,esi
c0026cd1:	01 d0                	add    eax,edx
c0026cd3:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026cd6:	e9 b6 00 00 00       	jmp    c0026d91 <__addsf3+0x14b>
c0026cdb:	74 5c                	je     c0026d39 <__addsf3+0xf3>
c0026cdd:	89 f1                	mov    ecx,esi
c0026cdf:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0026ce2:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026ce5:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026ce9:	75 14                	jne    c0026cff <__addsf3+0xb9>
c0026ceb:	85 d2                	test   edx,edx
c0026ced:	0f 84 4c 02 00 00    	je     c0026f3f <__addsf3+0x2f9>
c0026cf3:	49                   	dec    ecx
c0026cf4:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026cf7:	0f 84 94 00 00 00    	je     c0026d91 <__addsf3+0x14b>
c0026cfd:	eb 12                	jmp    c0026d11 <__addsf3+0xcb>
c0026cff:	89 f0                	mov    eax,esi
c0026d01:	f7 d0                	not    eax
c0026d03:	84 c0                	test   al,al
c0026d05:	0f 84 34 02 00 00    	je     c0026f3f <__addsf3+0x2f9>
c0026d0b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026d11:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026d14:	83 f9 1f             	cmp    ecx,0x1f
c0026d17:	0f 8f 22 02 00 00    	jg     c0026f3f <__addsf3+0x2f9>
c0026d1d:	89 d7                	mov    edi,edx
c0026d1f:	d3 ef                	shr    edi,cl
c0026d21:	b8 20 00 00 00       	mov    eax,0x20
c0026d26:	29 c8                	sub    eax,ecx
c0026d28:	89 c1                	mov    ecx,eax
c0026d2a:	d3 e2                	shl    edx,cl
c0026d2c:	31 c0                	xor    eax,eax
c0026d2e:	85 d2                	test   edx,edx
c0026d30:	0f 95 c0             	setne  al
c0026d33:	09 f8                	or     eax,edi
c0026d35:	01 d8                	add    eax,ebx
c0026d37:	eb 58                	jmp    c0026d91 <__addsf3+0x14b>
c0026d39:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026d3c:	8d 70 01             	lea    esi,[eax+0x1]
c0026d3f:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026d45:	75 32                	jne    c0026d79 <__addsf3+0x133>
c0026d47:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026d4b:	75 1f                	jne    c0026d6c <__addsf3+0x126>
c0026d4d:	85 d2                	test   edx,edx
c0026d4f:	0f 84 e0 01 00 00    	je     c0026f35 <__addsf3+0x2ef>
c0026d55:	85 db                	test   ebx,ebx
c0026d57:	0f 84 e2 01 00 00    	je     c0026f3f <__addsf3+0x2f9>
c0026d5d:	89 d0                	mov    eax,edx
c0026d5f:	01 d8                	add    eax,ebx
c0026d61:	0f 89 a9 01 00 00    	jns    c0026f10 <__addsf3+0x2ca>
c0026d67:	e9 9d 01 00 00       	jmp    c0026f09 <__addsf3+0x2c3>
c0026d6c:	85 d2                	test   edx,edx
c0026d6e:	0f 85 cb 01 00 00    	jne    c0026f3f <__addsf3+0x2f9>
c0026d74:	e9 bc 01 00 00       	jmp    c0026f35 <__addsf3+0x2ef>
c0026d79:	31 c0                	xor    eax,eax
c0026d7b:	89 f1                	mov    ecx,esi
c0026d7d:	f7 d1                	not    ecx
c0026d7f:	84 c9                	test   cl,cl
c0026d81:	0f 84 90 01 00 00    	je     c0026f17 <__addsf3+0x2d1>
c0026d87:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026d8a:	d1 e8                	shr    eax,1
c0026d8c:	e9 86 01 00 00       	jmp    c0026f17 <__addsf3+0x2d1>
c0026d91:	85 c0                	test   eax,eax
c0026d93:	0f 89 7e 01 00 00    	jns    c0026f17 <__addsf3+0x2d1>
c0026d99:	46                   	inc    esi
c0026d9a:	89 f2                	mov    edx,esi
c0026d9c:	f7 d2                	not    edx
c0026d9e:	84 d2                	test   dl,dl
c0026da0:	0f 84 6f 01 00 00    	je     c0026f15 <__addsf3+0x2cf>
c0026da6:	89 c2                	mov    edx,eax
c0026da8:	83 e2 01             	and    edx,0x1
c0026dab:	d1 e8                	shr    eax,1
c0026dad:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026db2:	09 d0                	or     eax,edx
c0026db4:	e9 5e 01 00 00       	jmp    c0026f17 <__addsf3+0x2d1>
c0026db9:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026dbd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026dc0:	89 f0                	mov    eax,esi
c0026dc2:	0f b6 c0             	movzx  eax,al
c0026dc5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026dc8:	29 c1                	sub    ecx,eax
c0026dca:	85 c9                	test   ecx,ecx
c0026dcc:	7e 55                	jle    c0026e23 <__addsf3+0x1dd>
c0026dce:	85 c0                	test   eax,eax
c0026dd0:	75 11                	jne    c0026de3 <__addsf3+0x19d>
c0026dd2:	85 db                	test   ebx,ebx
c0026dd4:	0f 84 65 01 00 00    	je     c0026f3f <__addsf3+0x2f9>
c0026dda:	49                   	dec    ecx
c0026ddb:	75 19                	jne    c0026df6 <__addsf3+0x1b0>
c0026ddd:	89 d0                	mov    eax,edx
c0026ddf:	29 d8                	sub    eax,ebx
c0026de1:	eb 38                	jmp    c0026e1b <__addsf3+0x1d5>
c0026de3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026de6:	f7 d0                	not    eax
c0026de8:	84 c0                	test   al,al
c0026dea:	0f 84 4f 01 00 00    	je     c0026f3f <__addsf3+0x2f9>
c0026df0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026df6:	83 f9 1f             	cmp    ecx,0x1f
c0026df9:	0f 8f 40 01 00 00    	jg     c0026f3f <__addsf3+0x2f9>
c0026dff:	89 de                	mov    esi,ebx
c0026e01:	d3 ee                	shr    esi,cl
c0026e03:	b8 20 00 00 00       	mov    eax,0x20
c0026e08:	29 c8                	sub    eax,ecx
c0026e0a:	89 c1                	mov    ecx,eax
c0026e0c:	d3 e3                	shl    ebx,cl
c0026e0e:	31 c0                	xor    eax,eax
c0026e10:	85 db                	test   ebx,ebx
c0026e12:	0f 95 c0             	setne  al
c0026e15:	09 f0                	or     eax,esi
c0026e17:	29 c2                	sub    edx,eax
c0026e19:	89 d0                	mov    eax,edx
c0026e1b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026e1e:	e9 af 00 00 00       	jmp    c0026ed2 <__addsf3+0x28c>
c0026e23:	74 5c                	je     c0026e81 <__addsf3+0x23b>
c0026e25:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026e28:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026e2b:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026e2f:	75 14                	jne    c0026e45 <__addsf3+0x1ff>
c0026e31:	85 d2                	test   edx,edx
c0026e33:	0f 84 06 01 00 00    	je     c0026f3f <__addsf3+0x2f9>
c0026e39:	48                   	dec    eax
c0026e3a:	75 1b                	jne    c0026e57 <__addsf3+0x211>
c0026e3c:	89 d8                	mov    eax,ebx
c0026e3e:	29 d0                	sub    eax,edx
c0026e40:	e9 8d 00 00 00       	jmp    c0026ed2 <__addsf3+0x28c>
c0026e45:	89 f1                	mov    ecx,esi
c0026e47:	f7 d1                	not    ecx
c0026e49:	84 c9                	test   cl,cl
c0026e4b:	0f 84 ee 00 00 00    	je     c0026f3f <__addsf3+0x2f9>
c0026e51:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026e57:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026e5a:	83 f8 1f             	cmp    eax,0x1f
c0026e5d:	0f 8f dc 00 00 00    	jg     c0026f3f <__addsf3+0x2f9>
c0026e63:	89 d7                	mov    edi,edx
c0026e65:	88 c1                	mov    cl,al
c0026e67:	d3 ef                	shr    edi,cl
c0026e69:	b9 20 00 00 00       	mov    ecx,0x20
c0026e6e:	29 c1                	sub    ecx,eax
c0026e70:	d3 e2                	shl    edx,cl
c0026e72:	31 c0                	xor    eax,eax
c0026e74:	85 d2                	test   edx,edx
c0026e76:	0f 95 c0             	setne  al
c0026e79:	09 f8                	or     eax,edi
c0026e7b:	29 c3                	sub    ebx,eax
c0026e7d:	89 d8                	mov    eax,ebx
c0026e7f:	eb 51                	jmp    c0026ed2 <__addsf3+0x28c>
c0026e81:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026e84:	40                   	inc    eax
c0026e85:	a8 fe                	test   al,0xfe
c0026e87:	75 3d                	jne    c0026ec6 <__addsf3+0x280>
c0026e89:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026e8d:	0f 85 a7 00 00 00    	jne    c0026f3a <__addsf3+0x2f4>
c0026e93:	85 d2                	test   edx,edx
c0026e95:	75 12                	jne    c0026ea9 <__addsf3+0x263>
c0026e97:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026e9a:	85 db                	test   ebx,ebx
c0026e9c:	0f 85 9d 00 00 00    	jne    c0026f3f <__addsf3+0x2f9>
c0026ea2:	31 ff                	xor    edi,edi
c0026ea4:	e9 96 00 00 00       	jmp    c0026f3f <__addsf3+0x2f9>
c0026ea9:	85 db                	test   ebx,ebx
c0026eab:	0f 84 8e 00 00 00    	je     c0026f3f <__addsf3+0x2f9>
c0026eb1:	89 d0                	mov    eax,edx
c0026eb3:	29 d8                	sub    eax,ebx
c0026eb5:	79 06                	jns    c0026ebd <__addsf3+0x277>
c0026eb7:	89 d8                	mov    eax,ebx
c0026eb9:	29 d0                	sub    eax,edx
c0026ebb:	eb 5a                	jmp    c0026f17 <__addsf3+0x2d1>
c0026ebd:	bf 00 00 00 00       	mov    edi,0x0
c0026ec2:	74 7b                	je     c0026f3f <__addsf3+0x2f9>
c0026ec4:	eb 4a                	jmp    c0026f10 <__addsf3+0x2ca>
c0026ec6:	89 d0                	mov    eax,edx
c0026ec8:	29 d8                	sub    eax,ebx
c0026eca:	79 12                	jns    c0026ede <__addsf3+0x298>
c0026ecc:	89 d8                	mov    eax,ebx
c0026ece:	29 d0                	sub    eax,edx
c0026ed0:	eb 09                	jmp    c0026edb <__addsf3+0x295>
c0026ed2:	85 c0                	test   eax,eax
c0026ed4:	79 41                	jns    c0026f17 <__addsf3+0x2d1>
c0026ed6:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026edb:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026ede:	31 f6                	xor    esi,esi
c0026ee0:	85 c0                	test   eax,eax
c0026ee2:	74 33                	je     c0026f17 <__addsf3+0x2d1>
c0026ee4:	0f bd c8             	bsr    ecx,eax
c0026ee7:	83 f1 1f             	xor    ecx,0x1f
c0026eea:	d3 e0                	shl    eax,cl
c0026eec:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026ef0:	39 ca                	cmp    edx,ecx
c0026ef2:	7f 10                	jg     c0026f04 <__addsf3+0x2be>
c0026ef4:	29 d1                	sub    ecx,edx
c0026ef6:	41                   	inc    ecx
c0026ef7:	d3 e8                	shr    eax,cl
c0026ef9:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026efc:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026f02:	eb 13                	jmp    c0026f17 <__addsf3+0x2d1>
c0026f04:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026f07:	29 ce                	sub    esi,ecx
c0026f09:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026f0e:	eb 07                	jmp    c0026f17 <__addsf3+0x2d1>
c0026f10:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026f13:	eb 02                	jmp    c0026f17 <__addsf3+0x2d1>
c0026f15:	31 c0                	xor    eax,eax
c0026f17:	89 c2                	mov    edx,eax
c0026f19:	c1 ea 08             	shr    edx,0x8
c0026f1c:	a8 7f                	test   al,0x7f
c0026f1e:	0f 95 c1             	setne  cl
c0026f21:	09 d1                	or     ecx,edx
c0026f23:	83 e1 01             	and    ecx,0x1
c0026f26:	c1 e8 07             	shr    eax,0x7
c0026f29:	21 c8                	and    eax,ecx
c0026f2b:	c1 e6 17             	shl    esi,0x17
c0026f2e:	09 d6                	or     esi,edx
c0026f30:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026f33:	eb 0a                	jmp    c0026f3f <__addsf3+0x2f9>
c0026f35:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026f38:	eb 05                	jmp    c0026f3f <__addsf3+0x2f9>
c0026f3a:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026f3f:	89 f8                	mov    eax,edi
c0026f41:	5a                   	pop    edx
c0026f42:	59                   	pop    ecx
c0026f43:	5b                   	pop    ebx
c0026f44:	5e                   	pop    esi
c0026f45:	5f                   	pop    edi
c0026f46:	5d                   	pop    ebp
c0026f47:	c3                   	ret    

c0026f48 <__subsf3>:
c0026f48:	55                   	push   ebp
c0026f49:	89 e5                	mov    ebp,esp
c0026f4b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026f4e:	05 00 00 00 80       	add    eax,0x80000000
c0026f53:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026f56:	5d                   	pop    ebp
c0026f57:	e9 ea fc ff ff       	jmp    c0026c46 <__addsf3>

c0026f5c <__negsf2>:
c0026f5c:	55                   	push   ebp
c0026f5d:	89 e5                	mov    ebp,esp
c0026f5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026f62:	05 00 00 00 80       	add    eax,0x80000000
c0026f67:	5d                   	pop    ebp
c0026f68:	c3                   	ret    

c0026f69 <__mulsf3>:
c0026f69:	55                   	push   ebp
c0026f6a:	89 e5                	mov    ebp,esp
c0026f6c:	57                   	push   edi
c0026f6d:	56                   	push   esi
c0026f6e:	53                   	push   ebx
c0026f6f:	83 ec 1c             	sub    esp,0x1c
c0026f72:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026f75:	89 f0                	mov    eax,esi
c0026f77:	89 f1                	mov    ecx,esi
c0026f79:	c1 f9 17             	sar    ecx,0x17
c0026f7c:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026f7f:	c1 e0 08             	shl    eax,0x8
c0026f82:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026f87:	89 c1                	mov    ecx,eax
c0026f89:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026f8c:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026f8f:	89 c7                	mov    edi,eax
c0026f91:	c1 ff 17             	sar    edi,0x17
c0026f94:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026f98:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026f9b:	89 f8                	mov    eax,edi
c0026f9d:	0f b6 c0             	movzx  eax,al
c0026fa0:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026fa3:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026fa7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026faa:	42                   	inc    edx
c0026fab:	80 e2 fe             	and    dl,0xfe
c0026fae:	75 7b                	jne    c002702b <__mulsf3+0xc2>
c0026fb0:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026fb4:	74 54                	je     c002700a <__mulsf3+0xa1>
c0026fb6:	85 c9                	test   ecx,ecx
c0026fb8:	0f 85 64 01 00 00    	jne    c0027122 <__mulsf3+0x1b9>
c0026fbe:	8d 57 01             	lea    edx,[edi+0x1]
c0026fc1:	80 e2 fe             	and    dl,0xfe
c0026fc4:	75 1f                	jne    c0026fe5 <__mulsf3+0x7c>
c0026fc6:	85 c0                	test   eax,eax
c0026fc8:	b8 00 00 00 00       	mov    eax,0x0
c0026fcd:	74 29                	je     c0026ff8 <__mulsf3+0x8f>
c0026fcf:	53                   	push   ebx
c0026fd0:	53                   	push   ebx
c0026fd1:	50                   	push   eax
c0026fd2:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026fd5:	e8 96 05 00 00       	call   c0027570 <__nesf2>
c0026fda:	83 c4 10             	add    esp,0x10
c0026fdd:	85 c0                	test   eax,eax
c0026fdf:	0f 85 3a 01 00 00    	jne    c002711f <__mulsf3+0x1b6>
c0026fe5:	85 ff                	test   edi,edi
c0026fe7:	0f 89 35 01 00 00    	jns    c0027122 <__mulsf3+0x1b9>
c0026fed:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026ff3:	e9 2a 01 00 00       	jmp    c0027122 <__mulsf3+0x1b9>
c0026ff8:	51                   	push   ecx
c0026ff9:	51                   	push   ecx
c0026ffa:	50                   	push   eax
c0026ffb:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026ffe:	e8 6d 05 00 00       	call   c0027570 <__nesf2>
c0027003:	83 c4 10             	add    esp,0x10
c0027006:	85 c0                	test   eax,eax
c0027008:	eb 15                	jmp    c002701f <__mulsf3+0xb6>
c002700a:	85 c9                	test   ecx,ecx
c002700c:	74 0b                	je     c0027019 <__mulsf3+0xb0>
c002700e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0027011:	01 c9                	add    ecx,ecx
c0027013:	78 16                	js     c002702b <__mulsf3+0xc2>
c0027015:	89 d3                	mov    ebx,edx
c0027017:	eb f5                	jmp    c002700e <__mulsf3+0xa5>
c0027019:	89 f8                	mov    eax,edi
c002701b:	f7 d0                	not    eax
c002701d:	84 c0                	test   al,al
c002701f:	75 c4                	jne    c0026fe5 <__mulsf3+0x7c>
c0027021:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0027026:	e9 f7 00 00 00       	jmp    c0027122 <__mulsf3+0x1b9>
c002702b:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002702e:	c1 e6 08             	shl    esi,0x8
c0027031:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0027037:	8d 57 01             	lea    edx,[edi+0x1]
c002703a:	80 e2 fe             	and    dl,0xfe
c002703d:	75 63                	jne    c00270a2 <__mulsf3+0x139>
c002703f:	85 c0                	test   eax,eax
c0027041:	74 2f                	je     c0027072 <__mulsf3+0x109>
c0027043:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027047:	0f 89 d2 00 00 00    	jns    c002711f <__mulsf3+0x1b6>
c002704d:	52                   	push   edx
c002704e:	52                   	push   edx
c002704f:	6a 00                	push   0x0
c0027051:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027054:	e8 dc 04 00 00       	call   c0027535 <__eqsf2>
c0027059:	83 c4 10             	add    esp,0x10
c002705c:	85 c0                	test   eax,eax
c002705e:	0f 85 bb 00 00 00    	jne    c002711f <__mulsf3+0x1b6>
c0027064:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027067:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c002706d:	e9 b0 00 00 00       	jmp    c0027122 <__mulsf3+0x1b9>
c0027072:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027075:	50                   	push   eax
c0027076:	50                   	push   eax
c0027077:	6a 00                	push   0x0
c0027079:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002707c:	e8 b4 04 00 00       	call   c0027535 <__eqsf2>
c0027081:	83 c4 10             	add    esp,0x10
c0027084:	85 c0                	test   eax,eax
c0027086:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027089:	75 0c                	jne    c0027097 <__mulsf3+0x12e>
c002708b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c002708f:	0f 89 8a 00 00 00    	jns    c002711f <__mulsf3+0x1b6>
c0027095:	eb cd                	jmp    c0027064 <__mulsf3+0xfb>
c0027097:	8d 43 ff             	lea    eax,[ebx-0x1]
c002709a:	01 f6                	add    esi,esi
c002709c:	78 04                	js     c00270a2 <__mulsf3+0x139>
c002709e:	89 c3                	mov    ebx,eax
c00270a0:	eb f5                	jmp    c0027097 <__mulsf3+0x12e>
c00270a2:	89 c8                	mov    eax,ecx
c00270a4:	0d 00 00 00 80       	or     eax,0x80000000
c00270a9:	81 ce 00 00 00 80    	or     esi,0x80000000
c00270af:	f7 e6                	mul    esi
c00270b1:	85 c0                	test   eax,eax
c00270b3:	0f 95 c0             	setne  al
c00270b6:	0f b6 c0             	movzx  eax,al
c00270b9:	09 c2                	or     edx,eax
c00270bb:	78 03                	js     c00270c0 <__mulsf3+0x157>
c00270bd:	01 d2                	add    edx,edx
c00270bf:	4b                   	dec    ebx
c00270c0:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c00270c6:	7f 22                	jg     c00270ea <__mulsf3+0x181>
c00270c8:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00270ce:	85 db                	test   ebx,ebx
c00270d0:	7f 23                	jg     c00270f5 <__mulsf3+0x18c>
c00270d2:	83 fb e9             	cmp    ebx,0xffffffe9
c00270d5:	7c 1a                	jl     c00270f1 <__mulsf3+0x188>
c00270d7:	81 ca 00 00 00 80    	or     edx,0x80000000
c00270dd:	b9 01 00 00 00       	mov    ecx,0x1
c00270e2:	29 d9                	sub    ecx,ebx
c00270e4:	d3 ea                	shr    edx,cl
c00270e6:	31 db                	xor    ebx,ebx
c00270e8:	eb 0b                	jmp    c00270f5 <__mulsf3+0x18c>
c00270ea:	bb ff 00 00 00       	mov    ebx,0xff
c00270ef:	eb 02                	jmp    c00270f3 <__mulsf3+0x18a>
c00270f1:	31 db                	xor    ebx,ebx
c00270f3:	31 d2                	xor    edx,edx
c00270f5:	89 d0                	mov    eax,edx
c00270f7:	c1 e8 08             	shr    eax,0x8
c00270fa:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c00270fd:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027103:	09 fb                	or     ebx,edi
c0027105:	c1 e3 17             	shl    ebx,0x17
c0027108:	09 c3                	or     ebx,eax
c002710a:	f6 c2 7f             	test   dl,0x7f
c002710d:	0f 95 c1             	setne  cl
c0027110:	09 c8                	or     eax,ecx
c0027112:	83 e0 01             	and    eax,0x1
c0027115:	c1 ea 07             	shr    edx,0x7
c0027118:	21 c2                	and    edx,eax
c002711a:	8d 34 13             	lea    esi,[ebx+edx*1]
c002711d:	eb 03                	jmp    c0027122 <__mulsf3+0x1b9>
c002711f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0027122:	89 f0                	mov    eax,esi
c0027124:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027127:	5b                   	pop    ebx
c0027128:	5e                   	pop    esi
c0027129:	5f                   	pop    edi
c002712a:	5d                   	pop    ebp
c002712b:	c3                   	ret    

c002712c <__divsf3>:
c002712c:	55                   	push   ebp
c002712d:	89 e5                	mov    ebp,esp
c002712f:	57                   	push   edi
c0027130:	56                   	push   esi
c0027131:	53                   	push   ebx
c0027132:	83 ec 1c             	sub    esp,0x1c
c0027135:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027138:	89 d8                	mov    eax,ebx
c002713a:	89 d9                	mov    ecx,ebx
c002713c:	c1 f9 17             	sar    ecx,0x17
c002713f:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0027142:	c1 e0 08             	shl    eax,0x8
c0027145:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002714a:	89 c1                	mov    ecx,eax
c002714c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002714f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027152:	89 c7                	mov    edi,eax
c0027154:	c1 ff 17             	sar    edi,0x17
c0027157:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002715b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002715e:	89 f8                	mov    eax,edi
c0027160:	0f b6 c0             	movzx  eax,al
c0027163:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027166:	29 c6                	sub    esi,eax
c0027168:	83 c6 7f             	add    esi,0x7f
c002716b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002716e:	42                   	inc    edx
c002716f:	80 e2 fe             	and    dl,0xfe
c0027172:	0f 85 9c 00 00 00    	jne    c0027214 <__divsf3+0xe8>
c0027178:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002717c:	74 33                	je     c00271b1 <__divsf3+0x85>
c002717e:	85 c9                	test   ecx,ecx
c0027180:	0f 85 c7 01 00 00    	jne    c002734d <__divsf3+0x221>
c0027186:	8d 57 01             	lea    edx,[edi+0x1]
c0027189:	80 e2 fe             	and    dl,0xfe
c002718c:	75 2f                	jne    c00271bd <__divsf3+0x91>
c002718e:	85 c0                	test   eax,eax
c0027190:	74 2b                	je     c00271bd <__divsf3+0x91>
c0027192:	51                   	push   ecx
c0027193:	51                   	push   ecx
c0027194:	6a 00                	push   0x0
c0027196:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027199:	e8 d2 03 00 00       	call   c0027570 <__nesf2>
c002719e:	83 c4 10             	add    esp,0x10
c00271a1:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00271a4:	85 c0                	test   eax,eax
c00271a6:	0f 85 a1 01 00 00    	jne    c002734d <__divsf3+0x221>
c00271ac:	e9 92 01 00 00       	jmp    c0027343 <__divsf3+0x217>
c00271b1:	85 c9                	test   ecx,ecx
c00271b3:	75 1b                	jne    c00271d0 <__divsf3+0xa4>
c00271b5:	8d 57 01             	lea    edx,[edi+0x1]
c00271b8:	80 e2 fe             	and    dl,0xfe
c00271bb:	74 1e                	je     c00271db <__divsf3+0xaf>
c00271bd:	85 ff                	test   edi,edi
c00271bf:	0f 89 88 01 00 00    	jns    c002734d <__divsf3+0x221>
c00271c5:	81 c3 00 00 00 80    	add    ebx,0x80000000
c00271cb:	e9 7d 01 00 00       	jmp    c002734d <__divsf3+0x221>
c00271d0:	8d 56 ff             	lea    edx,[esi-0x1]
c00271d3:	01 c9                	add    ecx,ecx
c00271d5:	78 3d                	js     c0027214 <__divsf3+0xe8>
c00271d7:	89 d6                	mov    esi,edx
c00271d9:	eb f5                	jmp    c00271d0 <__divsf3+0xa4>
c00271db:	85 c0                	test   eax,eax
c00271dd:	b8 00 00 00 00       	mov    eax,0x0
c00271e2:	74 18                	je     c00271fc <__divsf3+0xd0>
c00271e4:	52                   	push   edx
c00271e5:	52                   	push   edx
c00271e6:	50                   	push   eax
c00271e7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00271ea:	e8 81 03 00 00       	call   c0027570 <__nesf2>
c00271ef:	83 c4 10             	add    esp,0x10
c00271f2:	85 c0                	test   eax,eax
c00271f4:	0f 85 50 01 00 00    	jne    c002734a <__divsf3+0x21e>
c00271fa:	eb c1                	jmp    c00271bd <__divsf3+0x91>
c00271fc:	56                   	push   esi
c00271fd:	56                   	push   esi
c00271fe:	50                   	push   eax
c00271ff:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027202:	e8 69 03 00 00       	call   c0027570 <__nesf2>
c0027207:	83 c4 10             	add    esp,0x10
c002720a:	85 c0                	test   eax,eax
c002720c:	0f 84 31 01 00 00    	je     c0027343 <__divsf3+0x217>
c0027212:	eb a9                	jmp    c00271bd <__divsf3+0x91>
c0027214:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0027217:	c1 e3 08             	shl    ebx,0x8
c002721a:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027220:	8d 57 01             	lea    edx,[edi+0x1]
c0027223:	80 e2 fe             	and    dl,0xfe
c0027226:	75 71                	jne    c0027299 <__divsf3+0x16d>
c0027228:	85 c0                	test   eax,eax
c002722a:	ba 00 00 00 00       	mov    edx,0x0
c002722f:	74 2f                	je     c0027260 <__divsf3+0x134>
c0027231:	51                   	push   ecx
c0027232:	51                   	push   ecx
c0027233:	52                   	push   edx
c0027234:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027237:	e8 f9 02 00 00       	call   c0027535 <__eqsf2>
c002723c:	83 c4 10             	add    esp,0x10
c002723f:	85 c0                	test   eax,eax
c0027241:	0f 85 03 01 00 00    	jne    c002734a <__divsf3+0x21e>
c0027247:	31 d2                	xor    edx,edx
c0027249:	89 d3                	mov    ebx,edx
c002724b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002724e:	31 f8                	xor    eax,edi
c0027250:	0f 89 f7 00 00 00    	jns    c002734d <__divsf3+0x221>
c0027256:	bb 00 00 00 80       	mov    ebx,0x80000000
c002725b:	e9 ed 00 00 00       	jmp    c002734d <__divsf3+0x221>
c0027260:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027263:	50                   	push   eax
c0027264:	50                   	push   eax
c0027265:	52                   	push   edx
c0027266:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027269:	e8 c7 02 00 00       	call   c0027535 <__eqsf2>
c002726e:	83 c4 10             	add    esp,0x10
c0027271:	85 c0                	test   eax,eax
c0027273:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027276:	75 16                	jne    c002728e <__divsf3+0x162>
c0027278:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002727b:	31 fb                	xor    ebx,edi
c002727d:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0027283:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027289:	e9 bf 00 00 00       	jmp    c002734d <__divsf3+0x221>
c002728e:	8d 46 01             	lea    eax,[esi+0x1]
c0027291:	01 db                	add    ebx,ebx
c0027293:	78 04                	js     c0027299 <__divsf3+0x16d>
c0027295:	89 c6                	mov    esi,eax
c0027297:	eb f5                	jmp    c002728e <__divsf3+0x162>
c0027299:	89 c8                	mov    eax,ecx
c002729b:	0d 00 00 00 80       	or     eax,0x80000000
c00272a0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00272a6:	31 d2                	xor    edx,edx
c00272a8:	39 d8                	cmp    eax,ebx
c00272aa:	72 07                	jb     c00272b3 <__divsf3+0x187>
c00272ac:	29 d8                	sub    eax,ebx
c00272ae:	ba 01 00 00 00       	mov    edx,0x1
c00272b3:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c00272ba:	01 d2                	add    edx,edx
c00272bc:	89 c1                	mov    ecx,eax
c00272be:	01 c0                	add    eax,eax
c00272c0:	85 c9                	test   ecx,ecx
c00272c2:	78 04                	js     c00272c8 <__divsf3+0x19c>
c00272c4:	39 c3                	cmp    ebx,eax
c00272c6:	77 05                	ja     c00272cd <__divsf3+0x1a1>
c00272c8:	29 d8                	sub    eax,ebx
c00272ca:	83 ca 01             	or     edx,0x1
c00272cd:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c00272d0:	75 e8                	jne    c00272ba <__divsf3+0x18e>
c00272d2:	85 c0                	test   eax,eax
c00272d4:	0f 95 c0             	setne  al
c00272d7:	0f b6 c0             	movzx  eax,al
c00272da:	c1 e2 06             	shl    edx,0x6
c00272dd:	09 c2                	or     edx,eax
c00272df:	78 03                	js     c00272e4 <__divsf3+0x1b8>
c00272e1:	01 d2                	add    edx,edx
c00272e3:	4e                   	dec    esi
c00272e4:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00272ea:	7f 22                	jg     c002730e <__divsf3+0x1e2>
c00272ec:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00272f2:	85 f6                	test   esi,esi
c00272f4:	7f 23                	jg     c0027319 <__divsf3+0x1ed>
c00272f6:	83 fe e9             	cmp    esi,0xffffffe9
c00272f9:	7c 1a                	jl     c0027315 <__divsf3+0x1e9>
c00272fb:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027301:	b9 01 00 00 00       	mov    ecx,0x1
c0027306:	29 f1                	sub    ecx,esi
c0027308:	d3 ea                	shr    edx,cl
c002730a:	31 f6                	xor    esi,esi
c002730c:	eb 0b                	jmp    c0027319 <__divsf3+0x1ed>
c002730e:	be ff 00 00 00       	mov    esi,0xff
c0027313:	eb 02                	jmp    c0027317 <__divsf3+0x1eb>
c0027315:	31 f6                	xor    esi,esi
c0027317:	31 d2                	xor    edx,edx
c0027319:	89 d0                	mov    eax,edx
c002731b:	c1 e8 08             	shr    eax,0x8
c002731e:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027321:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027327:	09 fe                	or     esi,edi
c0027329:	c1 e6 17             	shl    esi,0x17
c002732c:	09 c6                	or     esi,eax
c002732e:	f6 c2 7f             	test   dl,0x7f
c0027331:	0f 95 c1             	setne  cl
c0027334:	09 c8                	or     eax,ecx
c0027336:	83 e0 01             	and    eax,0x1
c0027339:	c1 ea 07             	shr    edx,0x7
c002733c:	21 c2                	and    edx,eax
c002733e:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027341:	eb 0a                	jmp    c002734d <__divsf3+0x221>
c0027343:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027348:	eb 03                	jmp    c002734d <__divsf3+0x221>
c002734a:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002734d:	89 d8                	mov    eax,ebx
c002734f:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027352:	5b                   	pop    ebx
c0027353:	5e                   	pop    esi
c0027354:	5f                   	pop    edi
c0027355:	5d                   	pop    ebp
c0027356:	c3                   	ret    

c0027357 <__floatsisf>:
c0027357:	55                   	push   ebp
c0027358:	89 e5                	mov    ebp,esp
c002735a:	53                   	push   ebx
c002735b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002735e:	85 d2                	test   edx,edx
c0027360:	7e 2b                	jle    c002738d <__floatsisf+0x36>
c0027362:	0f bd ca             	bsr    ecx,edx
c0027365:	83 f1 1f             	xor    ecx,0x1f
c0027368:	d3 e2                	shl    edx,cl
c002736a:	89 d0                	mov    eax,edx
c002736c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027371:	89 c3                	mov    ebx,eax
c0027373:	c1 eb 08             	shr    ebx,0x8
c0027376:	80 e2 7f             	and    dl,0x7f
c0027379:	0f 95 c2             	setne  dl
c002737c:	09 da                	or     edx,ebx
c002737e:	83 e2 01             	and    edx,0x1
c0027381:	c1 e8 07             	shr    eax,0x7
c0027384:	21 c2                	and    edx,eax
c0027386:	b8 9e 00 00 00       	mov    eax,0x9e
c002738b:	eb 32                	jmp    c00273bf <__floatsisf+0x68>
c002738d:	b8 00 00 00 00       	mov    eax,0x0
c0027392:	74 34                	je     c00273c8 <__floatsisf+0x71>
c0027394:	f7 da                	neg    edx
c0027396:	0f bd ca             	bsr    ecx,edx
c0027399:	83 f1 1f             	xor    ecx,0x1f
c002739c:	d3 e2                	shl    edx,cl
c002739e:	89 d0                	mov    eax,edx
c00273a0:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00273a5:	89 c3                	mov    ebx,eax
c00273a7:	c1 eb 08             	shr    ebx,0x8
c00273aa:	80 e2 7f             	and    dl,0x7f
c00273ad:	0f 95 c2             	setne  dl
c00273b0:	09 da                	or     edx,ebx
c00273b2:	83 e2 01             	and    edx,0x1
c00273b5:	c1 e8 07             	shr    eax,0x7
c00273b8:	21 c2                	and    edx,eax
c00273ba:	b8 9e 01 00 00       	mov    eax,0x19e
c00273bf:	29 c8                	sub    eax,ecx
c00273c1:	c1 e0 17             	shl    eax,0x17
c00273c4:	09 d8                	or     eax,ebx
c00273c6:	01 d0                	add    eax,edx
c00273c8:	5b                   	pop    ebx
c00273c9:	5d                   	pop    ebp
c00273ca:	c3                   	ret    

c00273cb <__floatunsisf>:
c00273cb:	55                   	push   ebp
c00273cc:	89 e5                	mov    ebp,esp
c00273ce:	53                   	push   ebx
c00273cf:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00273d2:	31 c0                	xor    eax,eax
c00273d4:	85 d2                	test   edx,edx
c00273d6:	74 32                	je     c002740a <__floatunsisf+0x3f>
c00273d8:	0f bd ca             	bsr    ecx,edx
c00273db:	83 f1 1f             	xor    ecx,0x1f
c00273de:	d3 e2                	shl    edx,cl
c00273e0:	89 d0                	mov    eax,edx
c00273e2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00273e7:	89 c3                	mov    ebx,eax
c00273e9:	c1 eb 08             	shr    ebx,0x8
c00273ec:	80 e2 7f             	and    dl,0x7f
c00273ef:	0f 95 c2             	setne  dl
c00273f2:	09 da                	or     edx,ebx
c00273f4:	83 e2 01             	and    edx,0x1
c00273f7:	c1 e8 07             	shr    eax,0x7
c00273fa:	21 c2                	and    edx,eax
c00273fc:	b8 9e 00 00 00       	mov    eax,0x9e
c0027401:	29 c8                	sub    eax,ecx
c0027403:	c1 e0 17             	shl    eax,0x17
c0027406:	09 d8                	or     eax,ebx
c0027408:	01 d0                	add    eax,edx
c002740a:	5b                   	pop    ebx
c002740b:	5d                   	pop    ebp
c002740c:	c3                   	ret    

c002740d <__fixsfsi>:
c002740d:	55                   	push   ebp
c002740e:	89 e5                	mov    ebp,esp
c0027410:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027413:	89 d1                	mov    ecx,edx
c0027415:	c1 e1 08             	shl    ecx,0x8
c0027418:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c002741e:	c1 fa 17             	sar    edx,0x17
c0027421:	78 1c                	js     c002743f <__fixsfsi+0x32>
c0027423:	83 ea 7f             	sub    edx,0x7f
c0027426:	31 c0                	xor    eax,eax
c0027428:	83 fa 1e             	cmp    edx,0x1e
c002742b:	77 40                	ja     c002746d <__fixsfsi+0x60>
c002742d:	89 c8                	mov    eax,ecx
c002742f:	0d 00 00 00 80       	or     eax,0x80000000
c0027434:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027439:	29 d1                	sub    ecx,edx
c002743b:	d3 e8                	shr    eax,cl
c002743d:	eb 2e                	jmp    c002746d <__fixsfsi+0x60>
c002743f:	31 c0                	xor    eax,eax
c0027441:	81 c2 81 00 00 00    	add    edx,0x81
c0027447:	78 24                	js     c002746d <__fixsfsi+0x60>
c0027449:	83 fa 1e             	cmp    edx,0x1e
c002744c:	7e 09                	jle    c0027457 <__fixsfsi+0x4a>
c002744e:	83 fa 1f             	cmp    edx,0x1f
c0027451:	75 18                	jne    c002746b <__fixsfsi+0x5e>
c0027453:	85 c9                	test   ecx,ecx
c0027455:	75 14                	jne    c002746b <__fixsfsi+0x5e>
c0027457:	89 c8                	mov    eax,ecx
c0027459:	0d 00 00 00 80       	or     eax,0x80000000
c002745e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027463:	29 d1                	sub    ecx,edx
c0027465:	d3 e8                	shr    eax,cl
c0027467:	f7 d8                	neg    eax
c0027469:	eb 02                	jmp    c002746d <__fixsfsi+0x60>
c002746b:	31 c0                	xor    eax,eax
c002746d:	5d                   	pop    ebp
c002746e:	c3                   	ret    

c002746f <__fixunssfsi>:
c002746f:	55                   	push   ebp
c0027470:	89 e5                	mov    ebp,esp
c0027472:	53                   	push   ebx
c0027473:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027476:	89 d3                	mov    ebx,edx
c0027478:	c1 fb 17             	sar    ebx,0x17
c002747b:	83 eb 7f             	sub    ebx,0x7f
c002747e:	31 c0                	xor    eax,eax
c0027480:	83 fb 1f             	cmp    ebx,0x1f
c0027483:	77 18                	ja     c002749d <__fixunssfsi+0x2e>
c0027485:	89 d0                	mov    eax,edx
c0027487:	c1 e0 08             	shl    eax,0x8
c002748a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002748f:	0d 00 00 00 80       	or     eax,0x80000000
c0027494:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027499:	29 d9                	sub    ecx,ebx
c002749b:	d3 e8                	shr    eax,cl
c002749d:	5b                   	pop    ebx
c002749e:	5d                   	pop    ebp
c002749f:	c3                   	ret    

c00274a0 <__cmpsf2>:
c00274a0:	55                   	push   ebp
c00274a1:	89 e5                	mov    ebp,esp
c00274a3:	57                   	push   edi
c00274a4:	56                   	push   esi
c00274a5:	53                   	push   ebx
c00274a6:	83 ec 24             	sub    esp,0x24
c00274a9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00274ac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00274af:	e8 4f 10 00 00       	call   c0028503 <__truncdfsf2>
c00274b4:	5a                   	pop    edx
c00274b5:	59                   	pop    ecx
c00274b6:	89 c3                	mov    ebx,eax
c00274b8:	c1 e8 17             	shr    eax,0x17
c00274bb:	0f b6 f0             	movzx  esi,al
c00274be:	89 d8                	mov    eax,ebx
c00274c0:	c1 e8 1f             	shr    eax,0x1f
c00274c3:	31 c6                	xor    esi,eax
c00274c5:	c1 e3 08             	shl    ebx,0x8
c00274c8:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00274cb:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00274ce:	e8 30 10 00 00       	call   c0028503 <__truncdfsf2>
c00274d3:	83 c4 10             	add    esp,0x10
c00274d6:	89 c1                	mov    ecx,eax
c00274d8:	c1 e9 17             	shr    ecx,0x17
c00274db:	0f b6 c9             	movzx  ecx,cl
c00274de:	89 c7                	mov    edi,eax
c00274e0:	c1 ef 1f             	shr    edi,0x1f
c00274e3:	89 ca                	mov    edx,ecx
c00274e5:	31 fa                	xor    edx,edi
c00274e7:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00274ea:	c1 e0 08             	shl    eax,0x8
c00274ed:	89 c2                	mov    edx,eax
c00274ef:	89 d8                	mov    eax,ebx
c00274f1:	09 d0                	or     eax,edx
c00274f3:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00274f8:	09 f0                	or     eax,esi
c00274fa:	75 08                	jne    c0027504 <__cmpsf2+0x64>
c00274fc:	31 c0                	xor    eax,eax
c00274fe:	39 f9                	cmp    ecx,edi
c0027500:	75 0c                	jne    c002750e <__cmpsf2+0x6e>
c0027502:	eb 29                	jmp    c002752d <__cmpsf2+0x8d>
c0027504:	b8 01 00 00 00       	mov    eax,0x1
c0027509:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c002750c:	7f 1f                	jg     c002752d <__cmpsf2+0x8d>
c002750e:	83 c8 ff             	or     eax,0xffffffff
c0027511:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027514:	7c 17                	jl     c002752d <__cmpsf2+0x8d>
c0027516:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002751c:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0027522:	b8 01 00 00 00       	mov    eax,0x1
c0027527:	39 d3                	cmp    ebx,edx
c0027529:	77 02                	ja     c002752d <__cmpsf2+0x8d>
c002752b:	19 c0                	sbb    eax,eax
c002752d:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027530:	5b                   	pop    ebx
c0027531:	5e                   	pop    esi
c0027532:	5f                   	pop    edi
c0027533:	5d                   	pop    ebp
c0027534:	c3                   	ret    

c0027535 <__eqsf2>:
c0027535:	55                   	push   ebp
c0027536:	89 e5                	mov    ebp,esp
c0027538:	83 ec 24             	sub    esp,0x24
c002753b:	6a 01                	push   0x1
c002753d:	83 ec 0c             	sub    esp,0xc
c0027540:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027543:	e8 df 10 00 00       	call   c0028627 <__extendsfdf2>
c0027548:	83 c4 10             	add    esp,0x10
c002754b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002754e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027551:	52                   	push   edx
c0027552:	50                   	push   eax
c0027553:	50                   	push   eax
c0027554:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027557:	e8 cb 10 00 00       	call   c0028627 <__extendsfdf2>
c002755c:	59                   	pop    ecx
c002755d:	59                   	pop    ecx
c002755e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027561:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027564:	52                   	push   edx
c0027565:	50                   	push   eax
c0027566:	e8 35 ff ff ff       	call   c00274a0 <__cmpsf2>
c002756b:	83 c4 20             	add    esp,0x20
c002756e:	c9                   	leave  
c002756f:	c3                   	ret    

c0027570 <__nesf2>:
c0027570:	eb c3                	jmp    c0027535 <__eqsf2>

c0027572 <__gtsf2>:
c0027572:	55                   	push   ebp
c0027573:	89 e5                	mov    ebp,esp
c0027575:	83 ec 24             	sub    esp,0x24
c0027578:	6a ff                	push   0xffffffff
c002757a:	83 ec 0c             	sub    esp,0xc
c002757d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027580:	e8 a2 10 00 00       	call   c0028627 <__extendsfdf2>
c0027585:	83 c4 10             	add    esp,0x10
c0027588:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002758b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002758e:	52                   	push   edx
c002758f:	50                   	push   eax
c0027590:	50                   	push   eax
c0027591:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027594:	e8 8e 10 00 00       	call   c0028627 <__extendsfdf2>
c0027599:	59                   	pop    ecx
c002759a:	59                   	pop    ecx
c002759b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002759e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00275a1:	52                   	push   edx
c00275a2:	50                   	push   eax
c00275a3:	e8 f8 fe ff ff       	call   c00274a0 <__cmpsf2>
c00275a8:	83 c4 20             	add    esp,0x20
c00275ab:	c9                   	leave  
c00275ac:	c3                   	ret    

c00275ad <__gesf2>:
c00275ad:	eb c3                	jmp    c0027572 <__gtsf2>

c00275af <__ltsf2>:
c00275af:	eb 84                	jmp    c0027535 <__eqsf2>

c00275b1 <__lesf2>:
c00275b1:	eb 82                	jmp    c0027535 <__eqsf2>

c00275b3 <__adddf3>:
c00275b3:	55                   	push   ebp
c00275b4:	89 e5                	mov    ebp,esp
c00275b6:	57                   	push   edi
c00275b7:	56                   	push   esi
c00275b8:	53                   	push   ebx
c00275b9:	83 ec 24             	sub    esp,0x24
c00275bc:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00275bf:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00275c2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00275c5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00275c8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00275cb:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00275ce:	89 c8                	mov    eax,ecx
c00275d0:	89 ce                	mov    esi,ecx
c00275d2:	c1 fe 14             	sar    esi,0x14
c00275d5:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c00275d8:	89 fb                	mov    ebx,edi
c00275da:	89 fa                	mov    edx,edi
c00275dc:	c1 e2 0b             	shl    edx,0xb
c00275df:	c1 e0 0b             	shl    eax,0xb
c00275e2:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00275e7:	c1 eb 15             	shr    ebx,0x15
c00275ea:	09 d8                	or     eax,ebx
c00275ec:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00275ef:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00275f2:	c1 fe 14             	sar    esi,0x14
c00275f5:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00275f8:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00275fb:	89 f3                	mov    ebx,esi
c00275fd:	c1 e3 0b             	shl    ebx,0xb
c0027600:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027603:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027606:	c1 e3 0b             	shl    ebx,0xb
c0027609:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c002760f:	c1 ee 15             	shr    esi,0x15
c0027612:	09 f3                	or     ebx,esi
c0027614:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0027617:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002761a:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c002761d:	0f 88 5f 02 00 00    	js     c0027882 <__adddf3+0x2cf>
c0027623:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027626:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027629:	85 db                	test   ebx,ebx
c002762b:	0f 8e c7 00 00 00    	jle    c00276f8 <__adddf3+0x145>
c0027631:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027638:	75 1a                	jne    c0027654 <__adddf3+0xa1>
c002763a:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002763d:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027640:	0f 84 b2 05 00 00    	je     c0027bf8 <__adddf3+0x645>
c0027646:	4b                   	dec    ebx
c0027647:	75 23                	jne    c002766c <__adddf3+0xb9>
c0027649:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002764c:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c002764f:	e9 99 00 00 00       	jmp    c00276ed <__adddf3+0x13a>
c0027654:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027657:	f7 d6                	not    esi
c0027659:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002765f:	0f 84 93 05 00 00    	je     c0027bf8 <__adddf3+0x645>
c0027665:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002766c:	83 fb 1f             	cmp    ebx,0x1f
c002766f:	7e 42                	jle    c00276b3 <__adddf3+0x100>
c0027671:	83 fb 3f             	cmp    ebx,0x3f
c0027674:	0f 8f 7e 05 00 00    	jg     c0027bf8 <__adddf3+0x645>
c002767a:	83 e3 1f             	and    ebx,0x1f
c002767d:	89 d9                	mov    ecx,ebx
c002767f:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027682:	d3 ef                	shr    edi,cl
c0027684:	31 db                	xor    ebx,ebx
c0027686:	85 c9                	test   ecx,ecx
c0027688:	74 15                	je     c002769f <__adddf3+0xec>
c002768a:	be 20 00 00 00       	mov    esi,0x20
c002768f:	29 ce                	sub    esi,ecx
c0027691:	89 f1                	mov    ecx,esi
c0027693:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027696:	d3 e6                	shl    esi,cl
c0027698:	31 db                	xor    ebx,ebx
c002769a:	85 f6                	test   esi,esi
c002769c:	0f 95 c3             	setne  bl
c002769f:	31 c9                	xor    ecx,ecx
c00276a1:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00276a5:	0f 95 c1             	setne  cl
c00276a8:	09 cf                	or     edi,ecx
c00276aa:	09 fb                	or     ebx,edi
c00276ac:	01 da                	add    edx,ebx
c00276ae:	83 d0 00             	adc    eax,0x0
c00276b1:	eb 3a                	jmp    c00276ed <__adddf3+0x13a>
c00276b3:	bf 20 00 00 00       	mov    edi,0x20
c00276b8:	29 df                	sub    edi,ebx
c00276ba:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00276bd:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00276c0:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00276c3:	d3 e6                	shl    esi,cl
c00276c5:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00276c8:	88 d9                	mov    cl,bl
c00276ca:	d3 ef                	shr    edi,cl
c00276cc:	09 fe                	or     esi,edi
c00276ce:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00276d1:	88 d9                	mov    cl,bl
c00276d3:	d3 ef                	shr    edi,cl
c00276d5:	89 fb                	mov    ebx,edi
c00276d7:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00276da:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00276dd:	d3 e7                	shl    edi,cl
c00276df:	85 ff                	test   edi,edi
c00276e1:	0f 95 c1             	setne  cl
c00276e4:	0f b6 c9             	movzx  ecx,cl
c00276e7:	09 ce                	or     esi,ecx
c00276e9:	01 f2                	add    edx,esi
c00276eb:	11 d8                	adc    eax,ebx
c00276ed:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00276f0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00276f3:	e9 52 01 00 00       	jmp    c002784a <__adddf3+0x297>
c00276f8:	0f 84 d5 00 00 00    	je     c00277d3 <__adddf3+0x220>
c00276fe:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027701:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0027704:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027707:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002770a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027711:	75 20                	jne    c0027733 <__adddf3+0x180>
c0027713:	89 d6                	mov    esi,edx
c0027715:	09 c6                	or     esi,eax
c0027717:	0f 84 db 04 00 00    	je     c0027bf8 <__adddf3+0x645>
c002771d:	4b                   	dec    ebx
c002771e:	75 29                	jne    c0027749 <__adddf3+0x196>
c0027720:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027723:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027726:	01 d1                	add    ecx,edx
c0027728:	11 c6                	adc    esi,eax
c002772a:	89 f0                	mov    eax,esi
c002772c:	89 ca                	mov    edx,ecx
c002772e:	e9 17 01 00 00       	jmp    c002784a <__adddf3+0x297>
c0027733:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027736:	f7 d6                	not    esi
c0027738:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002773e:	0f 84 b4 04 00 00    	je     c0027bf8 <__adddf3+0x645>
c0027744:	0d 00 00 00 80       	or     eax,0x80000000
c0027749:	83 fb 1f             	cmp    ebx,0x1f
c002774c:	7e 48                	jle    c0027796 <__adddf3+0x1e3>
c002774e:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027751:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027754:	83 fb 3f             	cmp    ebx,0x3f
c0027757:	0f 8f 9b 04 00 00    	jg     c0027bf8 <__adddf3+0x645>
c002775d:	83 e3 1f             	and    ebx,0x1f
c0027760:	89 d9                	mov    ecx,ebx
c0027762:	89 c7                	mov    edi,eax
c0027764:	d3 ef                	shr    edi,cl
c0027766:	31 db                	xor    ebx,ebx
c0027768:	85 c9                	test   ecx,ecx
c002776a:	74 12                	je     c002777e <__adddf3+0x1cb>
c002776c:	be 20 00 00 00       	mov    esi,0x20
c0027771:	29 ce                	sub    esi,ecx
c0027773:	89 f1                	mov    ecx,esi
c0027775:	d3 e0                	shl    eax,cl
c0027777:	31 db                	xor    ebx,ebx
c0027779:	85 c0                	test   eax,eax
c002777b:	0f 95 c3             	setne  bl
c002777e:	31 c0                	xor    eax,eax
c0027780:	85 d2                	test   edx,edx
c0027782:	0f 95 c0             	setne  al
c0027785:	09 c7                	or     edi,eax
c0027787:	09 fb                	or     ebx,edi
c0027789:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002778c:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002778f:	01 da                	add    edx,ebx
c0027791:	83 d6 00             	adc    esi,0x0
c0027794:	eb 39                	jmp    c00277cf <__adddf3+0x21c>
c0027796:	be 20 00 00 00       	mov    esi,0x20
c002779b:	29 de                	sub    esi,ebx
c002779d:	89 c7                	mov    edi,eax
c002779f:	89 f1                	mov    ecx,esi
c00277a1:	d3 e7                	shl    edi,cl
c00277a3:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00277a6:	89 d7                	mov    edi,edx
c00277a8:	88 d9                	mov    cl,bl
c00277aa:	d3 ef                	shr    edi,cl
c00277ac:	89 f9                	mov    ecx,edi
c00277ae:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00277b1:	09 cf                	or     edi,ecx
c00277b3:	88 d9                	mov    cl,bl
c00277b5:	d3 e8                	shr    eax,cl
c00277b7:	89 f1                	mov    ecx,esi
c00277b9:	d3 e2                	shl    edx,cl
c00277bb:	85 d2                	test   edx,edx
c00277bd:	0f 95 c2             	setne  dl
c00277c0:	0f b6 d2             	movzx  edx,dl
c00277c3:	09 d7                	or     edi,edx
c00277c5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00277c8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00277cb:	01 fa                	add    edx,edi
c00277cd:	11 c6                	adc    esi,eax
c00277cf:	89 f0                	mov    eax,esi
c00277d1:	eb 77                	jmp    c002784a <__adddf3+0x297>
c00277d3:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00277d6:	46                   	inc    esi
c00277d7:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00277da:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00277e0:	75 41                	jne    c0027823 <__adddf3+0x270>
c00277e2:	89 d3                	mov    ebx,edx
c00277e4:	09 c3                	or     ebx,eax
c00277e6:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00277ed:	75 27                	jne    c0027816 <__adddf3+0x263>
c00277ef:	85 db                	test   ebx,ebx
c00277f1:	0f 84 fb 03 00 00    	je     c0027bf2 <__adddf3+0x63f>
c00277f7:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00277fa:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00277fd:	0f 84 f5 03 00 00    	je     c0027bf8 <__adddf3+0x645>
c0027803:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027806:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027809:	85 c0                	test   eax,eax
c002780b:	0f 89 91 03 00 00    	jns    c0027ba2 <__adddf3+0x5ef>
c0027811:	e9 85 03 00 00       	jmp    c0027b9b <__adddf3+0x5e8>
c0027816:	85 db                	test   ebx,ebx
c0027818:	0f 85 da 03 00 00    	jne    c0027bf8 <__adddf3+0x645>
c002781e:	e9 cf 03 00 00       	jmp    c0027bf2 <__adddf3+0x63f>
c0027823:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027826:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027829:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002782c:	f7 d1                	not    ecx
c002782e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027834:	0f 84 70 03 00 00    	je     c0027baa <__adddf3+0x5f7>
c002783a:	d1 ea                	shr    edx,1
c002783c:	89 c1                	mov    ecx,eax
c002783e:	c1 e1 1f             	shl    ecx,0x1f
c0027841:	09 ca                	or     edx,ecx
c0027843:	d1 e8                	shr    eax,1
c0027845:	e9 6f 03 00 00       	jmp    c0027bb9 <__adddf3+0x606>
c002784a:	85 c0                	test   eax,eax
c002784c:	0f 89 67 03 00 00    	jns    c0027bb9 <__adddf3+0x606>
c0027852:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0027855:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027858:	f7 d1                	not    ecx
c002785a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027860:	0f 84 44 03 00 00    	je     c0027baa <__adddf3+0x5f7>
c0027866:	89 d1                	mov    ecx,edx
c0027868:	d1 e9                	shr    ecx,1
c002786a:	83 e2 01             	and    edx,0x1
c002786d:	09 ca                	or     edx,ecx
c002786f:	89 c1                	mov    ecx,eax
c0027871:	c1 e1 1f             	shl    ecx,0x1f
c0027874:	09 ca                	or     edx,ecx
c0027876:	d1 e8                	shr    eax,1
c0027878:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002787d:	e9 37 03 00 00       	jmp    c0027bb9 <__adddf3+0x606>
c0027882:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027885:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002788b:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c002788e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027891:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027897:	29 de                	sub    esi,ebx
c0027899:	85 f6                	test   esi,esi
c002789b:	0f 8e bd 00 00 00    	jle    c002795e <__adddf3+0x3ab>
c00278a1:	85 db                	test   ebx,ebx
c00278a3:	75 17                	jne    c00278bc <__adddf3+0x309>
c00278a5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00278a8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00278ab:	0f 84 47 03 00 00    	je     c0027bf8 <__adddf3+0x645>
c00278b1:	4e                   	dec    esi
c00278b2:	75 20                	jne    c00278d4 <__adddf3+0x321>
c00278b4:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00278b7:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00278ba:	eb 5b                	jmp    c0027917 <__adddf3+0x364>
c00278bc:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00278bf:	f7 d3                	not    ebx
c00278c1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00278c7:	0f 84 2b 03 00 00    	je     c0027bf8 <__adddf3+0x645>
c00278cd:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00278d4:	83 fe 1f             	cmp    esi,0x1f
c00278d7:	7e 49                	jle    c0027922 <__adddf3+0x36f>
c00278d9:	83 fe 3f             	cmp    esi,0x3f
c00278dc:	0f 8f 16 03 00 00    	jg     c0027bf8 <__adddf3+0x645>
c00278e2:	83 e6 1f             	and    esi,0x1f
c00278e5:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00278e8:	89 f1                	mov    ecx,esi
c00278ea:	d3 ef                	shr    edi,cl
c00278ec:	31 db                	xor    ebx,ebx
c00278ee:	85 f6                	test   esi,esi
c00278f0:	74 13                	je     c0027905 <__adddf3+0x352>
c00278f2:	b9 20 00 00 00       	mov    ecx,0x20
c00278f7:	29 f1                	sub    ecx,esi
c00278f9:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00278fc:	d3 e6                	shl    esi,cl
c00278fe:	31 db                	xor    ebx,ebx
c0027900:	85 f6                	test   esi,esi
c0027902:	0f 95 c3             	setne  bl
c0027905:	31 c9                	xor    ecx,ecx
c0027907:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002790b:	0f 95 c1             	setne  cl
c002790e:	09 cf                	or     edi,ecx
c0027910:	09 fb                	or     ebx,edi
c0027912:	29 da                	sub    edx,ebx
c0027914:	83 d8 00             	sbb    eax,0x0
c0027917:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002791a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002791d:	e9 aa 01 00 00       	jmp    c0027acc <__adddf3+0x519>
c0027922:	bf 20 00 00 00       	mov    edi,0x20
c0027927:	29 f7                	sub    edi,esi
c0027929:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002792c:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002792f:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027932:	d3 e3                	shl    ebx,cl
c0027934:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027937:	89 f1                	mov    ecx,esi
c0027939:	d3 ef                	shr    edi,cl
c002793b:	09 fb                	or     ebx,edi
c002793d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027940:	89 f1                	mov    ecx,esi
c0027942:	d3 ef                	shr    edi,cl
c0027944:	89 fe                	mov    esi,edi
c0027946:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027949:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002794c:	d3 e7                	shl    edi,cl
c002794e:	85 ff                	test   edi,edi
c0027950:	0f 95 c1             	setne  cl
c0027953:	0f b6 c9             	movzx  ecx,cl
c0027956:	09 cb                	or     ebx,ecx
c0027958:	29 da                	sub    edx,ebx
c002795a:	19 f0                	sbb    eax,esi
c002795c:	eb b9                	jmp    c0027917 <__adddf3+0x364>
c002795e:	0f 84 cd 00 00 00    	je     c0027a31 <__adddf3+0x47e>
c0027964:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c0027967:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002796a:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002796d:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027971:	75 1b                	jne    c002798e <__adddf3+0x3db>
c0027973:	89 d6                	mov    esi,edx
c0027975:	09 c6                	or     esi,eax
c0027977:	0f 84 7b 02 00 00    	je     c0027bf8 <__adddf3+0x645>
c002797d:	4b                   	dec    ebx
c002797e:	75 24                	jne    c00279a4 <__adddf3+0x3f1>
c0027980:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027983:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027986:	29 d1                	sub    ecx,edx
c0027988:	19 c6                	sbb    esi,eax
c002798a:	89 ca                	mov    edx,ecx
c002798c:	eb 61                	jmp    c00279ef <__adddf3+0x43c>
c002798e:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027991:	f7 d6                	not    esi
c0027993:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027999:	0f 84 59 02 00 00    	je     c0027bf8 <__adddf3+0x645>
c002799f:	0d 00 00 00 80       	or     eax,0x80000000
c00279a4:	83 fb 1f             	cmp    ebx,0x1f
c00279a7:	7e 4d                	jle    c00279f6 <__adddf3+0x443>
c00279a9:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00279ac:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00279af:	83 fb 3f             	cmp    ebx,0x3f
c00279b2:	0f 8f 40 02 00 00    	jg     c0027bf8 <__adddf3+0x645>
c00279b8:	83 e3 1f             	and    ebx,0x1f
c00279bb:	89 d9                	mov    ecx,ebx
c00279bd:	89 c7                	mov    edi,eax
c00279bf:	d3 ef                	shr    edi,cl
c00279c1:	31 db                	xor    ebx,ebx
c00279c3:	85 c9                	test   ecx,ecx
c00279c5:	74 12                	je     c00279d9 <__adddf3+0x426>
c00279c7:	be 20 00 00 00       	mov    esi,0x20
c00279cc:	29 ce                	sub    esi,ecx
c00279ce:	89 f1                	mov    ecx,esi
c00279d0:	d3 e0                	shl    eax,cl
c00279d2:	31 db                	xor    ebx,ebx
c00279d4:	85 c0                	test   eax,eax
c00279d6:	0f 95 c3             	setne  bl
c00279d9:	31 c0                	xor    eax,eax
c00279db:	85 d2                	test   edx,edx
c00279dd:	0f 95 c0             	setne  al
c00279e0:	09 c7                	or     edi,eax
c00279e2:	09 fb                	or     ebx,edi
c00279e4:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00279e7:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00279ea:	29 da                	sub    edx,ebx
c00279ec:	83 de 00             	sbb    esi,0x0
c00279ef:	89 f0                	mov    eax,esi
c00279f1:	e9 d6 00 00 00       	jmp    c0027acc <__adddf3+0x519>
c00279f6:	be 20 00 00 00       	mov    esi,0x20
c00279fb:	29 de                	sub    esi,ebx
c00279fd:	89 c7                	mov    edi,eax
c00279ff:	89 f1                	mov    ecx,esi
c0027a01:	d3 e7                	shl    edi,cl
c0027a03:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027a06:	89 d7                	mov    edi,edx
c0027a08:	88 d9                	mov    cl,bl
c0027a0a:	d3 ef                	shr    edi,cl
c0027a0c:	89 f9                	mov    ecx,edi
c0027a0e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027a11:	09 cf                	or     edi,ecx
c0027a13:	88 d9                	mov    cl,bl
c0027a15:	d3 e8                	shr    eax,cl
c0027a17:	89 f1                	mov    ecx,esi
c0027a19:	d3 e2                	shl    edx,cl
c0027a1b:	85 d2                	test   edx,edx
c0027a1d:	0f 95 c2             	setne  dl
c0027a20:	0f b6 d2             	movzx  edx,dl
c0027a23:	09 d7                	or     edi,edx
c0027a25:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027a28:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027a2b:	29 fa                	sub    edx,edi
c0027a2d:	19 c6                	sbb    esi,eax
c0027a2f:	eb be                	jmp    c00279ef <__adddf3+0x43c>
c0027a31:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027a34:	8d 5e 01             	lea    ebx,[esi+0x1]
c0027a37:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0027a3d:	75 6a                	jne    c0027aa9 <__adddf3+0x4f6>
c0027a3f:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027a43:	75 58                	jne    c0027a9d <__adddf3+0x4ea>
c0027a45:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027a48:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027a4b:	89 d6                	mov    esi,edx
c0027a4d:	09 c6                	or     esi,eax
c0027a4f:	75 17                	jne    c0027a68 <__adddf3+0x4b5>
c0027a51:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027a54:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027a57:	85 db                	test   ebx,ebx
c0027a59:	0f 85 99 01 00 00    	jne    c0027bf8 <__adddf3+0x645>
c0027a5f:	31 ff                	xor    edi,edi
c0027a61:	31 c9                	xor    ecx,ecx
c0027a63:	e9 90 01 00 00       	jmp    c0027bf8 <__adddf3+0x645>
c0027a68:	85 db                	test   ebx,ebx
c0027a6a:	0f 84 88 01 00 00    	je     c0027bf8 <__adddf3+0x645>
c0027a70:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027a73:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027a76:	85 c0                	test   eax,eax
c0027a78:	79 10                	jns    c0027a8a <__adddf3+0x4d7>
c0027a7a:	31 c9                	xor    ecx,ecx
c0027a7c:	f7 da                	neg    edx
c0027a7e:	0f 95 c1             	setne  cl
c0027a81:	01 c8                	add    eax,ecx
c0027a83:	f7 d8                	neg    eax
c0027a85:	e9 2f 01 00 00       	jmp    c0027bb9 <__adddf3+0x606>
c0027a8a:	31 ff                	xor    edi,edi
c0027a8c:	31 c9                	xor    ecx,ecx
c0027a8e:	89 c3                	mov    ebx,eax
c0027a90:	09 d3                	or     ebx,edx
c0027a92:	0f 84 60 01 00 00    	je     c0027bf8 <__adddf3+0x645>
c0027a98:	e9 05 01 00 00       	jmp    c0027ba2 <__adddf3+0x5ef>
c0027a9d:	31 ff                	xor    edi,edi
c0027a9f:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027aa4:	e9 4f 01 00 00       	jmp    c0027bf8 <__adddf3+0x645>
c0027aa9:	89 c1                	mov    ecx,eax
c0027aab:	89 d0                	mov    eax,edx
c0027aad:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027ab0:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0027ab3:	89 ca                	mov    edx,ecx
c0027ab5:	85 c9                	test   ecx,ecx
c0027ab7:	79 2c                	jns    c0027ae5 <__adddf3+0x532>
c0027ab9:	31 c9                	xor    ecx,ecx
c0027abb:	f7 d8                	neg    eax
c0027abd:	0f 95 c1             	setne  cl
c0027ac0:	01 ca                	add    edx,ecx
c0027ac2:	f7 da                	neg    edx
c0027ac4:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027ac7:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027aca:	eb 19                	jmp    c0027ae5 <__adddf3+0x532>
c0027acc:	85 c0                	test   eax,eax
c0027ace:	0f 89 e5 00 00 00    	jns    c0027bb9 <__adddf3+0x606>
c0027ad4:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027ad9:	89 c1                	mov    ecx,eax
c0027adb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027ade:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027ae1:	89 d0                	mov    eax,edx
c0027ae3:	89 ca                	mov    edx,ecx
c0027ae5:	85 d2                	test   edx,edx
c0027ae7:	74 59                	je     c0027b42 <__adddf3+0x58f>
c0027ae9:	0f bd da             	bsr    ebx,edx
c0027aec:	83 f3 1f             	xor    ebx,0x1f
c0027aef:	88 d9                	mov    cl,bl
c0027af1:	d3 e2                	shl    edx,cl
c0027af3:	bf 20 00 00 00       	mov    edi,0x20
c0027af8:	89 f9                	mov    ecx,edi
c0027afa:	29 d9                	sub    ecx,ebx
c0027afc:	89 c6                	mov    esi,eax
c0027afe:	d3 ee                	shr    esi,cl
c0027b00:	09 d6                	or     esi,edx
c0027b02:	88 d9                	mov    cl,bl
c0027b04:	d3 e0                	shl    eax,cl
c0027b06:	89 c2                	mov    edx,eax
c0027b08:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027b0b:	25 ff 07 00 00       	and    eax,0x7ff
c0027b10:	39 d8                	cmp    eax,ebx
c0027b12:	7f 22                	jg     c0027b36 <__adddf3+0x583>
c0027b14:	29 c3                	sub    ebx,eax
c0027b16:	43                   	inc    ebx
c0027b17:	88 d9                	mov    cl,bl
c0027b19:	d3 ea                	shr    edx,cl
c0027b1b:	29 df                	sub    edi,ebx
c0027b1d:	89 f9                	mov    ecx,edi
c0027b1f:	89 f0                	mov    eax,esi
c0027b21:	d3 e0                	shl    eax,cl
c0027b23:	09 c2                	or     edx,eax
c0027b25:	89 f0                	mov    eax,esi
c0027b27:	88 d9                	mov    cl,bl
c0027b29:	d3 e8                	shr    eax,cl
c0027b2b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b2e:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0027b34:	eb 6f                	jmp    c0027ba5 <__adddf3+0x5f2>
c0027b36:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027b39:	29 d8                	sub    eax,ebx
c0027b3b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027b3e:	89 f0                	mov    eax,esi
c0027b40:	eb 59                	jmp    c0027b9b <__adddf3+0x5e8>
c0027b42:	85 c0                	test   eax,eax
c0027b44:	74 6a                	je     c0027bb0 <__adddf3+0x5fd>
c0027b46:	0f bd c8             	bsr    ecx,eax
c0027b49:	83 f1 1f             	xor    ecx,0x1f
c0027b4c:	d3 e0                	shl    eax,cl
c0027b4e:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027b51:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027b57:	83 c1 20             	add    ecx,0x20
c0027b5a:	39 cb                	cmp    ebx,ecx
c0027b5c:	7f 35                	jg     c0027b93 <__adddf3+0x5e0>
c0027b5e:	29 d9                	sub    ecx,ebx
c0027b60:	8d 71 01             	lea    esi,[ecx+0x1]
c0027b63:	83 fe 1f             	cmp    esi,0x1f
c0027b66:	7e 09                	jle    c0027b71 <__adddf3+0x5be>
c0027b68:	83 e9 1f             	sub    ecx,0x1f
c0027b6b:	d3 e8                	shr    eax,cl
c0027b6d:	89 c3                	mov    ebx,eax
c0027b6f:	eb 11                	jmp    c0027b82 <__adddf3+0x5cf>
c0027b71:	b9 20 00 00 00       	mov    ecx,0x20
c0027b76:	29 f1                	sub    ecx,esi
c0027b78:	89 c3                	mov    ebx,eax
c0027b7a:	d3 e3                	shl    ebx,cl
c0027b7c:	89 f1                	mov    ecx,esi
c0027b7e:	d3 e8                	shr    eax,cl
c0027b80:	89 c2                	mov    edx,eax
c0027b82:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027b85:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027b8a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027b8d:	89 d0                	mov    eax,edx
c0027b8f:	89 da                	mov    edx,ebx
c0027b91:	eb 26                	jmp    c0027bb9 <__adddf3+0x606>
c0027b93:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b96:	29 cf                	sub    edi,ecx
c0027b98:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027b9b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027ba0:	eb 17                	jmp    c0027bb9 <__adddf3+0x606>
c0027ba2:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027ba5:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027ba8:	eb 0f                	jmp    c0027bb9 <__adddf3+0x606>
c0027baa:	31 d2                	xor    edx,edx
c0027bac:	31 c0                	xor    eax,eax
c0027bae:	eb 09                	jmp    c0027bb9 <__adddf3+0x606>
c0027bb0:	89 c2                	mov    edx,eax
c0027bb2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027bb9:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027bbc:	c1 e1 14             	shl    ecx,0x14
c0027bbf:	89 c3                	mov    ebx,eax
c0027bc1:	c1 eb 0b             	shr    ebx,0xb
c0027bc4:	09 d9                	or     ecx,ebx
c0027bc6:	89 d3                	mov    ebx,edx
c0027bc8:	c1 eb 0b             	shr    ebx,0xb
c0027bcb:	c1 e0 15             	shl    eax,0x15
c0027bce:	09 d8                	or     eax,ebx
c0027bd0:	89 c7                	mov    edi,eax
c0027bd2:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027bd8:	0f 95 c0             	setne  al
c0027bdb:	89 c6                	mov    esi,eax
c0027bdd:	09 f3                	or     ebx,esi
c0027bdf:	83 e3 01             	and    ebx,0x1
c0027be2:	c1 ea 0a             	shr    edx,0xa
c0027be5:	21 da                	and    edx,ebx
c0027be7:	89 f8                	mov    eax,edi
c0027be9:	01 d0                	add    eax,edx
c0027beb:	83 d1 00             	adc    ecx,0x0
c0027bee:	89 c7                	mov    edi,eax
c0027bf0:	eb 06                	jmp    c0027bf8 <__adddf3+0x645>
c0027bf2:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027bf5:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027bf8:	89 f8                	mov    eax,edi
c0027bfa:	89 ca                	mov    edx,ecx
c0027bfc:	83 c4 24             	add    esp,0x24
c0027bff:	5b                   	pop    ebx
c0027c00:	5e                   	pop    esi
c0027c01:	5f                   	pop    edi
c0027c02:	5d                   	pop    ebp
c0027c03:	c3                   	ret    

c0027c04 <__subdf3>:
c0027c04:	55                   	push   ebp
c0027c05:	89 e5                	mov    ebp,esp
c0027c07:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027c0a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027c0d:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027c13:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027c16:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027c19:	5d                   	pop    ebp
c0027c1a:	e9 94 f9 ff ff       	jmp    c00275b3 <__adddf3>

c0027c1f <__negdf2>:
c0027c1f:	55                   	push   ebp
c0027c20:	89 e5                	mov    ebp,esp
c0027c22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027c25:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027c28:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027c2e:	5d                   	pop    ebp
c0027c2f:	c3                   	ret    

c0027c30 <__muldf3>:
c0027c30:	55                   	push   ebp
c0027c31:	89 e5                	mov    ebp,esp
c0027c33:	57                   	push   edi
c0027c34:	56                   	push   esi
c0027c35:	53                   	push   ebx
c0027c36:	83 ec 24             	sub    esp,0x24
c0027c39:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027c3c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027c3f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027c42:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027c45:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027c48:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027c4b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027c4e:	89 c8                	mov    eax,ecx
c0027c50:	c1 f8 14             	sar    eax,0x14
c0027c53:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027c56:	89 f8                	mov    eax,edi
c0027c58:	89 fb                	mov    ebx,edi
c0027c5a:	c1 e3 0b             	shl    ebx,0xb
c0027c5d:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027c60:	c1 e1 0b             	shl    ecx,0xb
c0027c63:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027c69:	c1 e8 15             	shr    eax,0x15
c0027c6c:	09 c1                	or     ecx,eax
c0027c6e:	89 d6                	mov    esi,edx
c0027c70:	89 d0                	mov    eax,edx
c0027c72:	c1 f8 14             	sar    eax,0x14
c0027c75:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027c78:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027c7b:	89 c3                	mov    ebx,eax
c0027c7d:	c1 e3 0b             	shl    ebx,0xb
c0027c80:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027c83:	c1 e6 0b             	shl    esi,0xb
c0027c86:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027c8c:	c1 e8 15             	shr    eax,0x15
c0027c8f:	09 c6                	or     esi,eax
c0027c91:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027c94:	25 ff 07 00 00       	and    eax,0x7ff
c0027c99:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027c9c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027c9f:	25 ff 07 00 00       	and    eax,0x7ff
c0027ca4:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027ca7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027caa:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027cad:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0027cb4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027cb7:	40                   	inc    eax
c0027cb8:	a9 fe 07 00 00       	test   eax,0x7fe
c0027cbd:	0f 85 8d 00 00 00    	jne    c0027d50 <__muldf3+0x120>
c0027cc3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027cc6:	09 c8                	or     eax,ecx
c0027cc8:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0027ccc:	74 44                	je     c0027d12 <__muldf3+0xe2>
c0027cce:	85 c0                	test   eax,eax
c0027cd0:	0f 85 31 02 00 00    	jne    c0027f07 <__muldf3+0x2d7>
c0027cd6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027cd9:	40                   	inc    eax
c0027cda:	a9 fe 07 00 00       	test   eax,0x7fe
c0027cdf:	75 13                	jne    c0027cf4 <__muldf3+0xc4>
c0027ce1:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027ce4:	09 f1                	or     ecx,esi
c0027ce6:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027cea:	74 22                	je     c0027d0e <__muldf3+0xde>
c0027cec:	85 c9                	test   ecx,ecx
c0027cee:	0f 85 0d 02 00 00    	jne    c0027f01 <__muldf3+0x2d1>
c0027cf4:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027cf8:	0f 89 09 02 00 00    	jns    c0027f07 <__muldf3+0x2d7>
c0027cfe:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027d01:	05 00 00 00 80       	add    eax,0x80000000
c0027d06:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027d09:	e9 f9 01 00 00       	jmp    c0027f07 <__muldf3+0x2d7>
c0027d0e:	85 c9                	test   ecx,ecx
c0027d10:	eb 2e                	jmp    c0027d40 <__muldf3+0x110>
c0027d12:	85 c0                	test   eax,eax
c0027d14:	74 20                	je     c0027d36 <__muldf3+0x106>
c0027d16:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027d19:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027d1c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027d1f:	c1 ef 1f             	shr    edi,0x1f
c0027d22:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027d25:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027d28:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027d2b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027d2e:	09 f9                	or     ecx,edi
c0027d30:	78 1e                	js     c0027d50 <__muldf3+0x120>
c0027d32:	89 c3                	mov    ebx,eax
c0027d34:	eb e0                	jmp    c0027d16 <__muldf3+0xe6>
c0027d36:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027d39:	f7 d0                	not    eax
c0027d3b:	a9 ff 07 00 00       	test   eax,0x7ff
c0027d40:	75 b2                	jne    c0027cf4 <__muldf3+0xc4>
c0027d42:	31 ff                	xor    edi,edi
c0027d44:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027d4b:	e9 b7 01 00 00       	jmp    c0027f07 <__muldf3+0x2d7>
c0027d50:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027d53:	40                   	inc    eax
c0027d54:	a9 fe 07 00 00       	test   eax,0x7fe
c0027d59:	75 57                	jne    c0027db2 <__muldf3+0x182>
c0027d5b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027d5e:	09 f0                	or     eax,esi
c0027d60:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027d64:	74 23                	je     c0027d89 <__muldf3+0x159>
c0027d66:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027d6a:	0f 89 91 01 00 00    	jns    c0027f01 <__muldf3+0x2d1>
c0027d70:	85 c0                	test   eax,eax
c0027d72:	0f 85 89 01 00 00    	jne    c0027f01 <__muldf3+0x2d1>
c0027d78:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027d7b:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027d81:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027d84:	e9 7e 01 00 00       	jmp    c0027f07 <__muldf3+0x2d7>
c0027d89:	85 c0                	test   eax,eax
c0027d8b:	75 0c                	jne    c0027d99 <__muldf3+0x169>
c0027d8d:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027d91:	0f 89 6a 01 00 00    	jns    c0027f01 <__muldf3+0x2d1>
c0027d97:	eb df                	jmp    c0027d78 <__muldf3+0x148>
c0027d99:	01 f6                	add    esi,esi
c0027d9b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027d9e:	c1 ea 1f             	shr    edx,0x1f
c0027da1:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027da4:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027da7:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027daa:	09 d6                	or     esi,edx
c0027dac:	78 04                	js     c0027db2 <__muldf3+0x182>
c0027dae:	89 c3                	mov    ebx,eax
c0027db0:	eb e7                	jmp    c0027d99 <__muldf3+0x169>
c0027db2:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027db8:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027dbe:	89 c8                	mov    eax,ecx
c0027dc0:	f7 e6                	mul    esi
c0027dc2:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027dc5:	89 c7                	mov    edi,eax
c0027dc7:	89 c8                	mov    eax,ecx
c0027dc9:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027dcc:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027dcf:	89 c1                	mov    ecx,eax
c0027dd1:	89 f0                	mov    eax,esi
c0027dd3:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027dd6:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027dd9:	89 c6                	mov    esi,eax
c0027ddb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027dde:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027de1:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027de4:	31 c0                	xor    eax,eax
c0027de6:	01 f1                	add    ecx,esi
c0027de8:	0f 92 c0             	setb   al
c0027deb:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027dee:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027df1:	83 d6 00             	adc    esi,0x0
c0027df4:	01 c7                	add    edi,eax
c0027df6:	83 d6 00             	adc    esi,0x0
c0027df9:	01 ca                	add    edx,ecx
c0027dfb:	0f 92 c1             	setb   cl
c0027dfe:	0f b6 c9             	movzx  ecx,cl
c0027e01:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027e04:	83 d6 00             	adc    esi,0x0
c0027e07:	01 cf                	add    edi,ecx
c0027e09:	83 d6 00             	adc    esi,0x0
c0027e0c:	31 c9                	xor    ecx,ecx
c0027e0e:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027e11:	0f 95 c1             	setne  cl
c0027e14:	09 cf                	or     edi,ecx
c0027e16:	85 f6                	test   esi,esi
c0027e18:	78 0c                	js     c0027e26 <__muldf3+0x1f6>
c0027e1a:	01 f6                	add    esi,esi
c0027e1c:	89 f8                	mov    eax,edi
c0027e1e:	c1 e8 1f             	shr    eax,0x1f
c0027e21:	09 c6                	or     esi,eax
c0027e23:	01 ff                	add    edi,edi
c0027e25:	4b                   	dec    ebx
c0027e26:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027e2c:	0f 8f 85 00 00 00    	jg     c0027eb7 <__muldf3+0x287>
c0027e32:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027e38:	85 db                	test   ebx,ebx
c0027e3a:	0f 8f 84 00 00 00    	jg     c0027ec4 <__muldf3+0x294>
c0027e40:	83 fb cc             	cmp    ebx,0xffffffcc
c0027e43:	7c 79                	jl     c0027ebe <__muldf3+0x28e>
c0027e45:	ba 01 00 00 00       	mov    edx,0x1
c0027e4a:	29 da                	sub    edx,ebx
c0027e4c:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027e52:	83 fa 1f             	cmp    edx,0x1f
c0027e55:	7e 30                	jle    c0027e87 <__muldf3+0x257>
c0027e57:	83 fa 20             	cmp    edx,0x20
c0027e5a:	75 0b                	jne    c0027e67 <__muldf3+0x237>
c0027e5c:	31 c0                	xor    eax,eax
c0027e5e:	85 ff                	test   edi,edi
c0027e60:	0f 95 c0             	setne  al
c0027e63:	89 c7                	mov    edi,eax
c0027e65:	eb 1a                	jmp    c0027e81 <__muldf3+0x251>
c0027e67:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027e6a:	89 f0                	mov    eax,esi
c0027e6c:	d3 e0                	shl    eax,cl
c0027e6e:	09 f8                	or     eax,edi
c0027e70:	0f 95 c0             	setne  al
c0027e73:	0f b6 c0             	movzx  eax,al
c0027e76:	89 c7                	mov    edi,eax
c0027e78:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027e7d:	29 d9                	sub    ecx,ebx
c0027e7f:	d3 ee                	shr    esi,cl
c0027e81:	09 f7                	or     edi,esi
c0027e83:	31 db                	xor    ebx,ebx
c0027e85:	eb 3b                	jmp    c0027ec2 <__muldf3+0x292>
c0027e87:	83 c3 1f             	add    ebx,0x1f
c0027e8a:	89 f0                	mov    eax,esi
c0027e8c:	88 d9                	mov    cl,bl
c0027e8e:	d3 e0                	shl    eax,cl
c0027e90:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027e93:	89 f8                	mov    eax,edi
c0027e95:	88 d1                	mov    cl,dl
c0027e97:	d3 e8                	shr    eax,cl
c0027e99:	89 c1                	mov    ecx,eax
c0027e9b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027e9e:	09 c8                	or     eax,ecx
c0027ea0:	88 d9                	mov    cl,bl
c0027ea2:	d3 e7                	shl    edi,cl
c0027ea4:	31 db                	xor    ebx,ebx
c0027ea6:	85 ff                	test   edi,edi
c0027ea8:	0f 95 c3             	setne  bl
c0027eab:	89 df                	mov    edi,ebx
c0027ead:	09 c7                	or     edi,eax
c0027eaf:	88 d1                	mov    cl,dl
c0027eb1:	d3 ee                	shr    esi,cl
c0027eb3:	31 db                	xor    ebx,ebx
c0027eb5:	eb 0d                	jmp    c0027ec4 <__muldf3+0x294>
c0027eb7:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027ebc:	eb 02                	jmp    c0027ec0 <__muldf3+0x290>
c0027ebe:	31 db                	xor    ebx,ebx
c0027ec0:	31 ff                	xor    edi,edi
c0027ec2:	31 f6                	xor    esi,esi
c0027ec4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027ec7:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027eca:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027ecf:	09 c3                	or     ebx,eax
c0027ed1:	c1 e3 14             	shl    ebx,0x14
c0027ed4:	89 f0                	mov    eax,esi
c0027ed6:	c1 e8 0b             	shr    eax,0xb
c0027ed9:	09 c3                	or     ebx,eax
c0027edb:	89 f8                	mov    eax,edi
c0027edd:	c1 e8 0b             	shr    eax,0xb
c0027ee0:	c1 e6 15             	shl    esi,0x15
c0027ee3:	09 c6                	or     esi,eax
c0027ee5:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027eeb:	0f 95 c1             	setne  cl
c0027eee:	09 c8                	or     eax,ecx
c0027ef0:	83 e0 01             	and    eax,0x1
c0027ef3:	c1 ef 0a             	shr    edi,0xa
c0027ef6:	21 c7                	and    edi,eax
c0027ef8:	01 f7                	add    edi,esi
c0027efa:	83 d3 00             	adc    ebx,0x0
c0027efd:	89 da                	mov    edx,ebx
c0027eff:	eb 03                	jmp    c0027f04 <__muldf3+0x2d4>
c0027f01:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027f04:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027f07:	89 f8                	mov    eax,edi
c0027f09:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027f0c:	83 c4 24             	add    esp,0x24
c0027f0f:	5b                   	pop    ebx
c0027f10:	5e                   	pop    esi
c0027f11:	5f                   	pop    edi
c0027f12:	5d                   	pop    ebp
c0027f13:	c3                   	ret    

c0027f14 <__divdf3>:
c0027f14:	55                   	push   ebp
c0027f15:	89 e5                	mov    ebp,esp
c0027f17:	57                   	push   edi
c0027f18:	56                   	push   esi
c0027f19:	53                   	push   ebx
c0027f1a:	83 ec 2c             	sub    esp,0x2c
c0027f1d:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027f20:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027f23:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027f26:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027f29:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027f2c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027f2f:	89 ce                	mov    esi,ecx
c0027f31:	89 c8                	mov    eax,ecx
c0027f33:	c1 f8 14             	sar    eax,0x14
c0027f36:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027f39:	89 f8                	mov    eax,edi
c0027f3b:	89 fb                	mov    ebx,edi
c0027f3d:	c1 e3 0b             	shl    ebx,0xb
c0027f40:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027f43:	c1 e6 0b             	shl    esi,0xb
c0027f46:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027f4c:	c1 e8 15             	shr    eax,0x15
c0027f4f:	09 c6                	or     esi,eax
c0027f51:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027f54:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027f57:	89 c2                	mov    edx,eax
c0027f59:	c1 fa 14             	sar    edx,0x14
c0027f5c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027f5f:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027f62:	89 de                	mov    esi,ebx
c0027f64:	c1 e6 0b             	shl    esi,0xb
c0027f67:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027f6a:	c1 e0 0b             	shl    eax,0xb
c0027f6d:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027f72:	c1 eb 15             	shr    ebx,0x15
c0027f75:	09 d8                	or     eax,ebx
c0027f77:	89 c2                	mov    edx,eax
c0027f79:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027f7c:	25 ff 07 00 00       	and    eax,0x7ff
c0027f81:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027f84:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027f87:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027f8d:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027f90:	29 d8                	sub    eax,ebx
c0027f92:	05 ff 03 00 00       	add    eax,0x3ff
c0027f97:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027f9a:	46                   	inc    esi
c0027f9b:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027fa1:	0f 85 a5 00 00 00    	jne    c002804c <__divdf3+0x138>
c0027fa7:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027faa:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027fad:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027fb1:	74 2a                	je     c0027fdd <__divdf3+0xc9>
c0027fb3:	85 f6                	test   esi,esi
c0027fb5:	0f 85 cc 02 00 00    	jne    c0028287 <__divdf3+0x373>
c0027fbb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027fbe:	40                   	inc    eax
c0027fbf:	a9 fe 07 00 00       	test   eax,0x7fe
c0027fc4:	75 26                	jne    c0027fec <__divdf3+0xd8>
c0027fc6:	85 db                	test   ebx,ebx
c0027fc8:	74 22                	je     c0027fec <__divdf3+0xd8>
c0027fca:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027fcd:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027fd0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027fd3:	09 d0                	or     eax,edx
c0027fd5:	0f 85 ac 02 00 00    	jne    c0028287 <__divdf3+0x373>
c0027fdb:	eb 63                	jmp    c0028040 <__divdf3+0x12c>
c0027fdd:	85 f6                	test   esi,esi
c0027fdf:	75 22                	jne    c0028003 <__divdf3+0xef>
c0027fe1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027fe4:	40                   	inc    eax
c0027fe5:	a9 fe 07 00 00       	test   eax,0x7fe
c0027fea:	74 36                	je     c0028022 <__divdf3+0x10e>
c0027fec:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027ff0:	0f 89 91 02 00 00    	jns    c0028287 <__divdf3+0x373>
c0027ff6:	89 f8                	mov    eax,edi
c0027ff8:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027ffe:	e9 80 02 00 00       	jmp    c0028283 <__divdf3+0x36f>
c0028003:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028006:	01 f6                	add    esi,esi
c0028008:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002800b:	c1 ef 1f             	shr    edi,0x1f
c002800e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028011:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0028014:	8d 48 ff             	lea    ecx,[eax-0x1]
c0028017:	09 f7                	or     edi,esi
c0028019:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c002801c:	78 2e                	js     c002804c <__divdf3+0x138>
c002801e:	89 c8                	mov    eax,ecx
c0028020:	eb e1                	jmp    c0028003 <__divdf3+0xef>
c0028022:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028025:	09 d0                	or     eax,edx
c0028027:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c002802b:	74 0f                	je     c002803c <__divdf3+0x128>
c002802d:	85 c0                	test   eax,eax
c002802f:	74 bb                	je     c0027fec <__divdf3+0xd8>
c0028031:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028034:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028037:	e9 4b 02 00 00       	jmp    c0028287 <__divdf3+0x373>
c002803c:	85 c0                	test   eax,eax
c002803e:	75 ac                	jne    c0027fec <__divdf3+0xd8>
c0028040:	31 ff                	xor    edi,edi
c0028042:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0028047:	e9 3b 02 00 00       	jmp    c0028287 <__divdf3+0x373>
c002804c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002804f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0028052:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0028058:	75 6b                	jne    c00280c5 <__divdf3+0x1b1>
c002805a:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002805d:	09 d6                	or     esi,edx
c002805f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0028063:	74 28                	je     c002808d <__divdf3+0x179>
c0028065:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028068:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c002806b:	85 f6                	test   esi,esi
c002806d:	0f 85 14 02 00 00    	jne    c0028287 <__divdf3+0x373>
c0028073:	31 ff                	xor    edi,edi
c0028075:	31 c9                	xor    ecx,ecx
c0028077:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002807a:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c002807d:	0f 89 04 02 00 00    	jns    c0028287 <__divdf3+0x373>
c0028083:	b9 00 00 00 80       	mov    ecx,0x80000000
c0028088:	e9 fa 01 00 00       	jmp    c0028287 <__divdf3+0x373>
c002808d:	85 f6                	test   esi,esi
c002808f:	75 1b                	jne    c00280ac <__divdf3+0x198>
c0028091:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028094:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0028097:	25 00 00 00 80       	and    eax,0x80000000
c002809c:	31 c9                	xor    ecx,ecx
c002809e:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c00280a3:	89 cf                	mov    edi,ecx
c00280a5:	89 c1                	mov    ecx,eax
c00280a7:	e9 db 01 00 00       	jmp    c0028287 <__divdf3+0x373>
c00280ac:	01 d2                	add    edx,edx
c00280ae:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00280b1:	c1 eb 1f             	shr    ebx,0x1f
c00280b4:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00280b7:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c00280ba:	8d 48 01             	lea    ecx,[eax+0x1]
c00280bd:	09 da                	or     edx,ebx
c00280bf:	78 04                	js     c00280c5 <__divdf3+0x1b1>
c00280c1:	89 c8                	mov    eax,ecx
c00280c3:	eb e7                	jmp    c00280ac <__divdf3+0x198>
c00280c5:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00280c8:	81 ce 00 00 00 80    	or     esi,0x80000000
c00280ce:	81 ca 00 00 00 80    	or     edx,0x80000000
c00280d4:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c00280d7:	39 d6                	cmp    esi,edx
c00280d9:	77 0d                	ja     c00280e8 <__divdf3+0x1d4>
c00280db:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00280de:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c00280e1:	72 1b                	jb     c00280fe <__divdf3+0x1ea>
c00280e3:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c00280e6:	75 16                	jne    c00280fe <__divdf3+0x1ea>
c00280e8:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00280eb:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00280ee:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c00280f1:	83 de 00             	sbb    esi,0x0
c00280f4:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c00280f7:	ba 01 00 00 00       	mov    edx,0x1
c00280fc:	eb 02                	jmp    c0028100 <__divdf3+0x1ec>
c00280fe:	31 d2                	xor    edx,edx
c0028100:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0028107:	31 ff                	xor    edi,edi
c0028109:	01 ff                	add    edi,edi
c002810b:	89 d1                	mov    ecx,edx
c002810d:	c1 e9 1f             	shr    ecx,0x1f
c0028110:	09 cf                	or     edi,ecx
c0028112:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0028115:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0028118:	89 da                	mov    edx,ebx
c002811a:	89 f3                	mov    ebx,esi
c002811c:	8d 34 36             	lea    esi,[esi+esi*1]
c002811f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028122:	c1 e9 1f             	shr    ecx,0x1f
c0028125:	09 ce                	or     esi,ecx
c0028127:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002812a:	01 c9                	add    ecx,ecx
c002812c:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c002812f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0028132:	85 db                	test   ebx,ebx
c0028134:	78 29                	js     c002815f <__divdf3+0x24b>
c0028136:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0028139:	72 07                	jb     c0028142 <__divdf3+0x22e>
c002813b:	75 3c                	jne    c0028179 <__divdf3+0x265>
c002813d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028140:	77 37                	ja     c0028179 <__divdf3+0x265>
c0028142:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028145:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0028148:	31 d2                	xor    edx,edx
c002814a:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c002814d:	0f 97 c2             	seta   dl
c0028150:	29 d6                	sub    esi,edx
c0028152:	89 d9                	mov    ecx,ebx
c0028154:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0028157:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c002815a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002815d:	eb 17                	jmp    c0028176 <__divdf3+0x262>
c002815f:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028162:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028165:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028168:	0f 97 c1             	seta   cl
c002816b:	0f b6 c9             	movzx  ecx,cl
c002816e:	29 ce                	sub    esi,ecx
c0028170:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0028173:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0028176:	83 ca 01             	or     edx,0x1
c0028179:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c002817c:	75 8b                	jne    c0028109 <__divdf3+0x1f5>
c002817e:	c1 e7 09             	shl    edi,0x9
c0028181:	89 d1                	mov    ecx,edx
c0028183:	c1 e9 17             	shr    ecx,0x17
c0028186:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028189:	09 f3                	or     ebx,esi
c002818b:	0f 95 c3             	setne  bl
c002818e:	0f b6 db             	movzx  ebx,bl
c0028191:	c1 e2 09             	shl    edx,0x9
c0028194:	09 d3                	or     ebx,edx
c0028196:	89 ca                	mov    edx,ecx
c0028198:	09 fa                	or     edx,edi
c002819a:	78 0c                	js     c00281a8 <__divdf3+0x294>
c002819c:	01 d2                	add    edx,edx
c002819e:	89 d9                	mov    ecx,ebx
c00281a0:	c1 e9 1f             	shr    ecx,0x1f
c00281a3:	09 ca                	or     edx,ecx
c00281a5:	01 db                	add    ebx,ebx
c00281a7:	48                   	dec    eax
c00281a8:	3d fe 07 00 00       	cmp    eax,0x7fe
c00281ad:	0f 8f 83 00 00 00    	jg     c0028236 <__divdf3+0x322>
c00281b3:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00281b9:	85 c0                	test   eax,eax
c00281bb:	0f 8f 82 00 00 00    	jg     c0028243 <__divdf3+0x32f>
c00281c1:	83 f8 cc             	cmp    eax,0xffffffcc
c00281c4:	7c 77                	jl     c002823d <__divdf3+0x329>
c00281c6:	be 01 00 00 00       	mov    esi,0x1
c00281cb:	29 c6                	sub    esi,eax
c00281cd:	81 ca 00 00 00 80    	or     edx,0x80000000
c00281d3:	83 fe 1f             	cmp    esi,0x1f
c00281d6:	7e 2f                	jle    c0028207 <__divdf3+0x2f3>
c00281d8:	83 fe 20             	cmp    esi,0x20
c00281db:	75 0a                	jne    c00281e7 <__divdf3+0x2d3>
c00281dd:	85 db                	test   ebx,ebx
c00281df:	0f 95 c3             	setne  bl
c00281e2:	0f b6 db             	movzx  ebx,bl
c00281e5:	eb 1a                	jmp    c0028201 <__divdf3+0x2ed>
c00281e7:	8d 48 3f             	lea    ecx,[eax+0x3f]
c00281ea:	89 d7                	mov    edi,edx
c00281ec:	d3 e7                	shl    edi,cl
c00281ee:	89 f9                	mov    ecx,edi
c00281f0:	09 d9                	or     ecx,ebx
c00281f2:	0f 95 c3             	setne  bl
c00281f5:	0f b6 db             	movzx  ebx,bl
c00281f8:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c00281fd:	29 c1                	sub    ecx,eax
c00281ff:	d3 ea                	shr    edx,cl
c0028201:	09 d3                	or     ebx,edx
c0028203:	31 c0                	xor    eax,eax
c0028205:	eb 3a                	jmp    c0028241 <__divdf3+0x32d>
c0028207:	83 c0 1f             	add    eax,0x1f
c002820a:	89 d7                	mov    edi,edx
c002820c:	88 c1                	mov    cl,al
c002820e:	d3 e7                	shl    edi,cl
c0028210:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028213:	89 df                	mov    edi,ebx
c0028215:	89 f1                	mov    ecx,esi
c0028217:	d3 ef                	shr    edi,cl
c0028219:	89 f9                	mov    ecx,edi
c002821b:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002821e:	09 cf                	or     edi,ecx
c0028220:	88 c1                	mov    cl,al
c0028222:	d3 e3                	shl    ebx,cl
c0028224:	85 db                	test   ebx,ebx
c0028226:	0f 95 c3             	setne  bl
c0028229:	0f b6 db             	movzx  ebx,bl
c002822c:	09 fb                	or     ebx,edi
c002822e:	89 f1                	mov    ecx,esi
c0028230:	d3 ea                	shr    edx,cl
c0028232:	31 c0                	xor    eax,eax
c0028234:	eb 0d                	jmp    c0028243 <__divdf3+0x32f>
c0028236:	b8 ff 07 00 00       	mov    eax,0x7ff
c002823b:	eb 02                	jmp    c002823f <__divdf3+0x32b>
c002823d:	31 c0                	xor    eax,eax
c002823f:	31 db                	xor    ebx,ebx
c0028241:	31 d2                	xor    edx,edx
c0028243:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0028246:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0028249:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c002824f:	09 c8                	or     eax,ecx
c0028251:	c1 e0 14             	shl    eax,0x14
c0028254:	89 d1                	mov    ecx,edx
c0028256:	c1 e9 0b             	shr    ecx,0xb
c0028259:	09 c8                	or     eax,ecx
c002825b:	89 c6                	mov    esi,eax
c002825d:	89 d9                	mov    ecx,ebx
c002825f:	c1 e9 0b             	shr    ecx,0xb
c0028262:	c1 e2 15             	shl    edx,0x15
c0028265:	09 ca                	or     edx,ecx
c0028267:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c002826d:	0f 95 c0             	setne  al
c0028270:	09 c1                	or     ecx,eax
c0028272:	83 e1 01             	and    ecx,0x1
c0028275:	c1 eb 0a             	shr    ebx,0xa
c0028278:	21 cb                	and    ebx,ecx
c002827a:	01 d3                	add    ebx,edx
c002827c:	89 d8                	mov    eax,ebx
c002827e:	83 d6 00             	adc    esi,0x0
c0028281:	89 f2                	mov    edx,esi
c0028283:	89 c7                	mov    edi,eax
c0028285:	89 d1                	mov    ecx,edx
c0028287:	89 f8                	mov    eax,edi
c0028289:	89 ca                	mov    edx,ecx
c002828b:	83 c4 2c             	add    esp,0x2c
c002828e:	5b                   	pop    ebx
c002828f:	5e                   	pop    esi
c0028290:	5f                   	pop    edi
c0028291:	5d                   	pop    ebp
c0028292:	c3                   	ret    

c0028293 <__floatsidf>:
c0028293:	55                   	push   ebp
c0028294:	89 e5                	mov    ebp,esp
c0028296:	56                   	push   esi
c0028297:	53                   	push   ebx
c0028298:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002829b:	85 db                	test   ebx,ebx
c002829d:	7e 15                	jle    c00282b4 <__floatsidf+0x21>
c002829f:	0f bd cb             	bsr    ecx,ebx
c00282a2:	83 f1 1f             	xor    ecx,0x1f
c00282a5:	d3 e3                	shl    ebx,cl
c00282a7:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00282ad:	b8 1e 04 00 00       	mov    eax,0x41e
c00282b2:	eb 21                	jmp    c00282d5 <__floatsidf+0x42>
c00282b4:	b8 00 00 00 00       	mov    eax,0x0
c00282b9:	ba 00 00 00 00       	mov    edx,0x0
c00282be:	74 2a                	je     c00282ea <__floatsidf+0x57>
c00282c0:	f7 db                	neg    ebx
c00282c2:	0f bd cb             	bsr    ecx,ebx
c00282c5:	83 f1 1f             	xor    ecx,0x1f
c00282c8:	d3 e3                	shl    ebx,cl
c00282ca:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00282d0:	b8 1e 0c 00 00       	mov    eax,0xc1e
c00282d5:	29 c8                	sub    eax,ecx
c00282d7:	c1 e0 14             	shl    eax,0x14
c00282da:	89 c1                	mov    ecx,eax
c00282dc:	89 de                	mov    esi,ebx
c00282de:	c1 ee 0b             	shr    esi,0xb
c00282e1:	09 f1                	or     ecx,esi
c00282e3:	89 ca                	mov    edx,ecx
c00282e5:	c1 e3 15             	shl    ebx,0x15
c00282e8:	89 d8                	mov    eax,ebx
c00282ea:	5b                   	pop    ebx
c00282eb:	5e                   	pop    esi
c00282ec:	5d                   	pop    ebp
c00282ed:	c3                   	ret    

c00282ee <__floatunsidf>:
c00282ee:	55                   	push   ebp
c00282ef:	89 e5                	mov    ebp,esp
c00282f1:	56                   	push   esi
c00282f2:	53                   	push   ebx
c00282f3:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00282f6:	85 db                	test   ebx,ebx
c00282f8:	74 2a                	je     c0028324 <__floatunsidf+0x36>
c00282fa:	0f bd cb             	bsr    ecx,ebx
c00282fd:	83 f1 1f             	xor    ecx,0x1f
c0028300:	d3 e3                	shl    ebx,cl
c0028302:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028308:	b8 1e 04 00 00       	mov    eax,0x41e
c002830d:	29 c8                	sub    eax,ecx
c002830f:	c1 e0 14             	shl    eax,0x14
c0028312:	89 c1                	mov    ecx,eax
c0028314:	89 de                	mov    esi,ebx
c0028316:	c1 ee 0b             	shr    esi,0xb
c0028319:	09 f1                	or     ecx,esi
c002831b:	89 ca                	mov    edx,ecx
c002831d:	c1 e3 15             	shl    ebx,0x15
c0028320:	89 d8                	mov    eax,ebx
c0028322:	eb 04                	jmp    c0028328 <__floatunsidf+0x3a>
c0028324:	31 c0                	xor    eax,eax
c0028326:	31 d2                	xor    edx,edx
c0028328:	5b                   	pop    ebx
c0028329:	5e                   	pop    esi
c002832a:	5d                   	pop    ebp
c002832b:	c3                   	ret    

c002832c <__fixdfsi>:
c002832c:	55                   	push   ebp
c002832d:	89 e5                	mov    ebp,esp
c002832f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028332:	89 d1                	mov    ecx,edx
c0028334:	c1 e1 0b             	shl    ecx,0xb
c0028337:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002833d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028340:	c1 e8 15             	shr    eax,0x15
c0028343:	09 c1                	or     ecx,eax
c0028345:	c1 fa 14             	sar    edx,0x14
c0028348:	78 1f                	js     c0028369 <__fixdfsi+0x3d>
c002834a:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028350:	31 c0                	xor    eax,eax
c0028352:	83 fa 1e             	cmp    edx,0x1e
c0028355:	77 40                	ja     c0028397 <__fixdfsi+0x6b>
c0028357:	89 c8                	mov    eax,ecx
c0028359:	0d 00 00 00 80       	or     eax,0x80000000
c002835e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028363:	29 d1                	sub    ecx,edx
c0028365:	d3 e8                	shr    eax,cl
c0028367:	eb 2e                	jmp    c0028397 <__fixdfsi+0x6b>
c0028369:	31 c0                	xor    eax,eax
c002836b:	81 c2 01 04 00 00    	add    edx,0x401
c0028371:	78 24                	js     c0028397 <__fixdfsi+0x6b>
c0028373:	83 fa 1e             	cmp    edx,0x1e
c0028376:	7e 09                	jle    c0028381 <__fixdfsi+0x55>
c0028378:	83 fa 1f             	cmp    edx,0x1f
c002837b:	75 18                	jne    c0028395 <__fixdfsi+0x69>
c002837d:	85 c9                	test   ecx,ecx
c002837f:	75 14                	jne    c0028395 <__fixdfsi+0x69>
c0028381:	89 c8                	mov    eax,ecx
c0028383:	0d 00 00 00 80       	or     eax,0x80000000
c0028388:	b9 1f 00 00 00       	mov    ecx,0x1f
c002838d:	29 d1                	sub    ecx,edx
c002838f:	d3 e8                	shr    eax,cl
c0028391:	f7 d8                	neg    eax
c0028393:	eb 02                	jmp    c0028397 <__fixdfsi+0x6b>
c0028395:	31 c0                	xor    eax,eax
c0028397:	5d                   	pop    ebp
c0028398:	c3                   	ret    

c0028399 <__fixunsdfsi>:
c0028399:	55                   	push   ebp
c002839a:	89 e5                	mov    ebp,esp
c002839c:	53                   	push   ebx
c002839d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00283a0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00283a3:	89 d3                	mov    ebx,edx
c00283a5:	c1 fb 14             	sar    ebx,0x14
c00283a8:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c00283ae:	31 c0                	xor    eax,eax
c00283b0:	83 fb 1f             	cmp    ebx,0x1f
c00283b3:	77 1d                	ja     c00283d2 <__fixunsdfsi+0x39>
c00283b5:	89 d0                	mov    eax,edx
c00283b7:	c1 e0 0b             	shl    eax,0xb
c00283ba:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00283bf:	c1 e9 15             	shr    ecx,0x15
c00283c2:	09 c8                	or     eax,ecx
c00283c4:	0d 00 00 00 80       	or     eax,0x80000000
c00283c9:	b9 1f 00 00 00       	mov    ecx,0x1f
c00283ce:	29 d9                	sub    ecx,ebx
c00283d0:	d3 e8                	shr    eax,cl
c00283d2:	5b                   	pop    ebx
c00283d3:	5d                   	pop    ebp
c00283d4:	c3                   	ret    

c00283d5 <__cmpdf2>:
c00283d5:	55                   	push   ebp
c00283d6:	89 e5                	mov    ebp,esp
c00283d8:	57                   	push   edi
c00283d9:	56                   	push   esi
c00283da:	53                   	push   ebx
c00283db:	83 ec 0c             	sub    esp,0xc
c00283de:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00283e1:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00283e4:	89 ca                	mov    edx,ecx
c00283e6:	c1 ea 14             	shr    edx,0x14
c00283e9:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00283ef:	89 cb                	mov    ebx,ecx
c00283f1:	c1 fb 1f             	sar    ebx,0x1f
c00283f4:	31 da                	xor    edx,ebx
c00283f6:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00283f9:	89 df                	mov    edi,ebx
c00283fb:	c1 e7 0b             	shl    edi,0xb
c00283fe:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028401:	c1 e1 0b             	shl    ecx,0xb
c0028404:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002840a:	c1 eb 15             	shr    ebx,0x15
c002840d:	09 d9                	or     ecx,ebx
c002840f:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0028412:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028415:	89 ce                	mov    esi,ecx
c0028417:	c1 ee 14             	shr    esi,0x14
c002841a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028420:	89 cb                	mov    ebx,ecx
c0028422:	c1 fb 1f             	sar    ebx,0x1f
c0028425:	31 de                	xor    esi,ebx
c0028427:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c002842a:	89 df                	mov    edi,ebx
c002842c:	c1 e7 0b             	shl    edi,0xb
c002842f:	c1 e1 0b             	shl    ecx,0xb
c0028432:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028438:	c1 eb 15             	shr    ebx,0x15
c002843b:	09 d9                	or     ecx,ebx
c002843d:	89 d3                	mov    ebx,edx
c002843f:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028445:	43                   	inc    ebx
c0028446:	83 fb 01             	cmp    ebx,0x1
c0028449:	77 08                	ja     c0028453 <__cmpdf2+0x7e>
c002844b:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c002844e:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028451:	75 68                	jne    c00284bb <__cmpdf2+0xe6>
c0028453:	89 f3                	mov    ebx,esi
c0028455:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c002845b:	43                   	inc    ebx
c002845c:	83 fb 01             	cmp    ebx,0x1
c002845f:	77 06                	ja     c0028467 <__cmpdf2+0x92>
c0028461:	89 fb                	mov    ebx,edi
c0028463:	09 cb                	or     ebx,ecx
c0028465:	75 54                	jne    c00284bb <__cmpdf2+0xe6>
c0028467:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002846a:	09 f8                	or     eax,edi
c002846c:	09 c8                	or     eax,ecx
c002846e:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028471:	75 12                	jne    c0028485 <__cmpdf2+0xb0>
c0028473:	8d 42 01             	lea    eax,[edx+0x1]
c0028476:	83 f8 01             	cmp    eax,0x1
c0028479:	77 0a                	ja     c0028485 <__cmpdf2+0xb0>
c002847b:	8d 5e 01             	lea    ebx,[esi+0x1]
c002847e:	31 c0                	xor    eax,eax
c0028480:	83 fb 01             	cmp    ebx,0x1
c0028483:	76 36                	jbe    c00284bb <__cmpdf2+0xe6>
c0028485:	b8 01 00 00 00       	mov    eax,0x1
c002848a:	39 f2                	cmp    edx,esi
c002848c:	7f 2d                	jg     c00284bb <__cmpdf2+0xe6>
c002848e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0028493:	7c 26                	jl     c00284bb <__cmpdf2+0xe6>
c0028495:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028498:	77 07                	ja     c00284a1 <__cmpdf2+0xcc>
c002849a:	72 16                	jb     c00284b2 <__cmpdf2+0xdd>
c002849c:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c002849f:	76 0a                	jbe    c00284ab <__cmpdf2+0xd6>
c00284a1:	89 d0                	mov    eax,edx
c00284a3:	c1 f8 1f             	sar    eax,0x1f
c00284a6:	83 c8 01             	or     eax,0x1
c00284a9:	eb 10                	jmp    c00284bb <__cmpdf2+0xe6>
c00284ab:	b8 00 00 00 00       	mov    eax,0x0
c00284b0:	73 09                	jae    c00284bb <__cmpdf2+0xe6>
c00284b2:	89 d0                	mov    eax,edx
c00284b4:	c1 f8 1f             	sar    eax,0x1f
c00284b7:	83 e0 02             	and    eax,0x2
c00284ba:	48                   	dec    eax
c00284bb:	83 c4 0c             	add    esp,0xc
c00284be:	5b                   	pop    ebx
c00284bf:	5e                   	pop    esi
c00284c0:	5f                   	pop    edi
c00284c1:	5d                   	pop    ebp
c00284c2:	c3                   	ret    

c00284c3 <__eqdf2>:
c00284c3:	55                   	push   ebp
c00284c4:	89 e5                	mov    ebp,esp
c00284c6:	50                   	push   eax
c00284c7:	6a 01                	push   0x1
c00284c9:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00284cc:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00284cf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00284d2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00284d5:	e8 fb fe ff ff       	call   c00283d5 <__cmpdf2>
c00284da:	83 c4 18             	add    esp,0x18
c00284dd:	c9                   	leave  
c00284de:	c3                   	ret    

c00284df <__nedf2>:
c00284df:	eb e2                	jmp    c00284c3 <__eqdf2>

c00284e1 <__gtdf2>:
c00284e1:	55                   	push   ebp
c00284e2:	89 e5                	mov    ebp,esp
c00284e4:	50                   	push   eax
c00284e5:	6a ff                	push   0xffffffff
c00284e7:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00284ea:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00284ed:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00284f0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00284f3:	e8 dd fe ff ff       	call   c00283d5 <__cmpdf2>
c00284f8:	83 c4 18             	add    esp,0x18
c00284fb:	c9                   	leave  
c00284fc:	c3                   	ret    

c00284fd <__gedf2>:
c00284fd:	eb e2                	jmp    c00284e1 <__gtdf2>

c00284ff <__ltdf2>:
c00284ff:	eb c2                	jmp    c00284c3 <__eqdf2>

c0028501 <__ledf2>:
c0028501:	eb c0                	jmp    c00284c3 <__eqdf2>

c0028503 <__truncdfsf2>:
c0028503:	55                   	push   ebp
c0028504:	89 e5                	mov    ebp,esp
c0028506:	57                   	push   edi
c0028507:	56                   	push   esi
c0028508:	53                   	push   ebx
c0028509:	83 ec 0c             	sub    esp,0xc
c002850c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002850f:	89 d1                	mov    ecx,edx
c0028511:	c1 f9 14             	sar    ecx,0x14
c0028514:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028517:	89 df                	mov    edi,ebx
c0028519:	c1 e7 0b             	shl    edi,0xb
c002851c:	89 d0                	mov    eax,edx
c002851e:	c1 e0 0b             	shl    eax,0xb
c0028521:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028526:	c1 eb 15             	shr    ebx,0x15
c0028529:	09 d8                	or     eax,ebx
c002852b:	89 cb                	mov    ebx,ecx
c002852d:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028533:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028539:	81 fe fd 00 00 00    	cmp    esi,0xfd
c002853f:	0f 86 9e 00 00 00    	jbe    c00285e3 <__truncdfsf2+0xe0>
c0028545:	85 db                	test   ebx,ebx
c0028547:	75 0a                	jne    c0028553 <__truncdfsf2+0x50>
c0028549:	c1 fa 17             	sar    edx,0x17
c002854c:	30 d2                	xor    dl,dl
c002854e:	e9 84 00 00 00       	jmp    c00285d7 <__truncdfsf2+0xd4>
c0028553:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028559:	83 fe 83             	cmp    esi,0xffffff83
c002855c:	7d 4b                	jge    c00285a9 <__truncdfsf2+0xa6>
c002855e:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0028563:	29 f1                	sub    ecx,esi
c0028565:	83 f9 1f             	cmp    ecx,0x1f
c0028568:	7f 6b                	jg     c00285d5 <__truncdfsf2+0xd2>
c002856a:	0d 00 00 00 80       	or     eax,0x80000000
c002856f:	89 c3                	mov    ebx,eax
c0028571:	d3 eb                	shr    ebx,cl
c0028573:	be 01 00 00 00       	mov    esi,0x1
c0028578:	d3 e6                	shl    esi,cl
c002857a:	4e                   	dec    esi
c002857b:	21 f0                	and    eax,esi
c002857d:	09 f8                	or     eax,edi
c002857f:	0f 95 c0             	setne  al
c0028582:	0f b6 c0             	movzx  eax,al
c0028585:	09 c3                	or     ebx,eax
c0028587:	89 d9                	mov    ecx,ebx
c0028589:	c1 e9 08             	shr    ecx,0x8
c002858c:	f6 c3 7f             	test   bl,0x7f
c002858f:	0f 95 c0             	setne  al
c0028592:	09 c8                	or     eax,ecx
c0028594:	83 e0 01             	and    eax,0x1
c0028597:	c1 eb 07             	shr    ebx,0x7
c002859a:	21 c3                	and    ebx,eax
c002859c:	81 e2 00 00 00 80    	and    edx,0x80000000
c00285a2:	09 d1                	or     ecx,edx
c00285a4:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c00285a7:	eb 76                	jmp    c002861f <__truncdfsf2+0x11c>
c00285a9:	83 c6 80             	add    esi,0xffffff80
c00285ac:	7e 1d                	jle    c00285cb <__truncdfsf2+0xc8>
c00285ae:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c00285b4:	75 0b                	jne    c00285c1 <__truncdfsf2+0xbe>
c00285b6:	09 f8                	or     eax,edi
c00285b8:	74 09                	je     c00285c3 <__truncdfsf2+0xc0>
c00285ba:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c00285bf:	eb 02                	jmp    c00285c3 <__truncdfsf2+0xc0>
c00285c1:	31 c0                	xor    eax,eax
c00285c3:	c1 fa 17             	sar    edx,0x17
c00285c6:	80 ca ff             	or     dl,0xff
c00285c9:	eb 0e                	jmp    c00285d9 <__truncdfsf2+0xd6>
c00285cb:	c1 fa 1f             	sar    edx,0x1f
c00285ce:	c1 e2 08             	shl    edx,0x8
c00285d1:	09 ca                	or     edx,ecx
c00285d3:	eb 04                	jmp    c00285d9 <__truncdfsf2+0xd6>
c00285d5:	31 d2                	xor    edx,edx
c00285d7:	31 c0                	xor    eax,eax
c00285d9:	c1 e2 17             	shl    edx,0x17
c00285dc:	c1 e8 08             	shr    eax,0x8
c00285df:	09 d0                	or     eax,edx
c00285e1:	eb 3c                	jmp    c002861f <__truncdfsf2+0x11c>
c00285e3:	81 e9 80 03 00 00    	sub    ecx,0x380
c00285e9:	89 ca                	mov    edx,ecx
c00285eb:	c1 fa 0b             	sar    edx,0xb
c00285ee:	c1 e2 08             	shl    edx,0x8
c00285f1:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00285f4:	31 db                	xor    ebx,ebx
c00285f6:	85 ff                	test   edi,edi
c00285f8:	0f 95 c3             	setne  bl
c00285fb:	09 d8                	or     eax,ebx
c00285fd:	89 c3                	mov    ebx,eax
c00285ff:	c1 eb 08             	shr    ebx,0x8
c0028602:	a8 7f                	test   al,0x7f
c0028604:	0f 95 c2             	setne  dl
c0028607:	89 d6                	mov    esi,edx
c0028609:	09 de                	or     esi,ebx
c002860b:	83 e6 01             	and    esi,0x1
c002860e:	c1 e8 07             	shr    eax,0x7
c0028611:	21 f0                	and    eax,esi
c0028613:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028616:	09 ca                	or     edx,ecx
c0028618:	c1 e2 17             	shl    edx,0x17
c002861b:	09 da                	or     edx,ebx
c002861d:	01 d0                	add    eax,edx
c002861f:	83 c4 0c             	add    esp,0xc
c0028622:	5b                   	pop    ebx
c0028623:	5e                   	pop    esi
c0028624:	5f                   	pop    edi
c0028625:	5d                   	pop    ebp
c0028626:	c3                   	ret    

c0028627 <__extendsfdf2>:
c0028627:	55                   	push   ebp
c0028628:	89 e5                	mov    ebp,esp
c002862a:	57                   	push   edi
c002862b:	56                   	push   esi
c002862c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002862f:	89 d1                	mov    ecx,edx
c0028631:	c1 f9 17             	sar    ecx,0x17
c0028634:	c1 e2 08             	shl    edx,0x8
c0028637:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002863d:	89 c8                	mov    eax,ecx
c002863f:	80 e4 f8             	and    ah,0xf8
c0028642:	8d 71 01             	lea    esi,[ecx+0x1]
c0028645:	81 e6 fe 00 00 00    	and    esi,0xfe
c002864b:	75 27                	jne    c0028674 <__extendsfdf2+0x4d>
c002864d:	81 e1 ff 00 00 00    	and    ecx,0xff
c0028653:	75 18                	jne    c002866d <__extendsfdf2+0x46>
c0028655:	85 d2                	test   edx,edx
c0028657:	74 20                	je     c0028679 <__extendsfdf2+0x52>
c0028659:	41                   	inc    ecx
c002865a:	01 d2                	add    edx,edx
c002865c:	79 fb                	jns    c0028659 <__extendsfdf2+0x32>
c002865e:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028664:	29 c8                	sub    eax,ecx
c0028666:	05 81 03 00 00       	add    eax,0x381
c002866b:	eb 0c                	jmp    c0028679 <__extendsfdf2+0x52>
c002866d:	05 00 07 00 00       	add    eax,0x700
c0028672:	eb 05                	jmp    c0028679 <__extendsfdf2+0x52>
c0028674:	05 80 03 00 00       	add    eax,0x380
c0028679:	c1 e0 14             	shl    eax,0x14
c002867c:	89 c1                	mov    ecx,eax
c002867e:	89 d0                	mov    eax,edx
c0028680:	c1 e8 0b             	shr    eax,0xb
c0028683:	09 c1                	or     ecx,eax
c0028685:	c1 e2 15             	shl    edx,0x15
c0028688:	89 d0                	mov    eax,edx
c002868a:	89 ca                	mov    edx,ecx
c002868c:	5e                   	pop    esi
c002868d:	5f                   	pop    edi
c002868e:	5d                   	pop    ebp
c002868f:	c3                   	ret    

c0028690 <fabs>:
c0028690:	83 ec 0c             	sub    esp,0xc
c0028693:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028697:	89 04 24             	mov    DWORD PTR [esp],eax
c002869a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002869e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00286a3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00286a7:	dd 04 24             	fld    QWORD PTR [esp]
c00286aa:	83 c4 0c             	add    esp,0xc
c00286ad:	c3                   	ret    
c00286ae:	66 90                	xchg   ax,ax

c00286b0 <lrint>:
c00286b0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c00286b4:	83 ec 04             	sub    esp,0x4
c00286b7:	db 1c 24             	fistp  DWORD PTR [esp]
c00286ba:	58                   	pop    eax
c00286bb:	c3                   	ret    

c00286bc <lrintf>:
c00286bc:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c00286c0:	83 ec 04             	sub    esp,0x4
c00286c3:	db 1c 24             	fistp  DWORD PTR [esp]
c00286c6:	58                   	pop    eax
c00286c7:	c3                   	ret    

Disassembly of section .init:

c00286c8 <_init>:
c00286c8:	55                   	push   ebp
c00286c9:	89 e5                	mov    ebp,esp
c00286cb:	e8 48 7a fd ff       	call   c0000118 <frame_dummy>
c00286d0:	e8 63 e0 ff ff       	call   c0026738 <__do_global_ctors_aux>
c00286d5:	5d                   	pop    ebp
c00286d6:	c3                   	ret    

Disassembly of section .fini:

c00286d7 <_fini>:
c00286d7:	55                   	push   ebp
c00286d8:	89 e5                	mov    ebp,esp
c00286da:	e8 c9 79 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c00286df:	5d                   	pop    ebp
c00286e0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00286e2 <Computer::~Computer()>:
c00286e2:	83 ec 0c             	sub    esp,0xc
c00286e5:	ba 28 a2 02 c0       	mov    edx,0xc002a228
c00286ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286ee:	89 10                	mov    DWORD PTR [eax],edx
c00286f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286f4:	83 ec 0c             	sub    esp,0xc
c00286f7:	50                   	push   eax
c00286f8:	e8 6d bb fe ff       	call   c001426a <Device::~Device()>
c00286fd:	83 c4 10             	add    esp,0x10
c0028700:	90                   	nop
c0028701:	83 c4 0c             	add    esp,0xc
c0028704:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028706 <Computer::~Computer()>:
c0028706:	83 ec 0c             	sub    esp,0xc
c0028709:	83 ec 0c             	sub    esp,0xc
c002870c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028710:	e8 cd ff ff ff       	call   c00286e2 <Computer::~Computer()>
c0028715:	83 c4 10             	add    esp,0x10
c0028718:	83 ec 08             	sub    esp,0x8
c002871b:	68 ec 01 00 00       	push   0x1ec
c0028720:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028724:	e8 68 a7 fe ff       	call   c0012e91 <operator delete(void*, unsigned long)>
c0028729:	83 c4 10             	add    esp,0x10
c002872c:	83 c4 0c             	add    esp,0xc
c002872f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028730 <idleCommon()>:
c0028730:	83 ec 0c             	sub    esp,0xc
c0028733:	e8 10 57 ff ff       	call   c001de48 <lockScheduler()>
c0028738:	e8 47 5a ff ff       	call   c001e184 <schedule()>
c002873d:	83 c4 0c             	add    esp,0xc
c0028740:	e9 05 57 ff ff       	jmp    c001de4a <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028746 <LinkedList<UnixFile>::~LinkedList()>:
c0028746:	90                   	nop
c0028747:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028748 <LinkedList<UnixFile>::LinkedList()>:
c0028748:	83 ec 0c             	sub    esp,0xc
c002874b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002874f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028755:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028759:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028760:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028764:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002876b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002876f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028775:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028779:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028780:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028784:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002878b:	83 ec 0c             	sub    esp,0xc
c002878e:	68 fa a4 02 c0       	push   0xc002a4fa
c0028793:	e8 d9 a7 fe ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0028798:	83 c4 10             	add    esp,0x10
c002879b:	90                   	nop
c002879c:	83 c4 0c             	add    esp,0xc
c002879f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00287a0 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00287a0:	83 ec 0c             	sub    esp,0xc
c00287a3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00287a8:	75 10                	jne    c00287ba <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00287aa:	83 ec 0c             	sub    esp,0xc
c00287ad:	68 14 a5 02 c0       	push   0xc002a514
c00287b2:	e8 6c 1e ff ff       	call   c001a623 <Krnl::panic(char const*)>
c00287b7:	83 c4 10             	add    esp,0x10
c00287ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287be:	8b 00                	mov    eax,DWORD PTR [eax]
c00287c0:	85 c0                	test   eax,eax
c00287c2:	74 34                	je     c00287f8 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00287c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287cb:	85 c0                	test   eax,eax
c00287cd:	74 29                	je     c00287f8 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00287cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287d3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287d6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287da:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00287dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287e1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287e5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00287e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287ef:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00287f6:	eb 65                	jmp    c002885d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00287f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00287fe:	85 c0                	test   eax,eax
c0028800:	75 4b                	jne    c002884d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028802:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028806:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028809:	85 c0                	test   eax,eax
c002880b:	75 40                	jne    c002884d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002880d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028811:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028815:	89 10                	mov    DWORD PTR [eax],edx
c0028817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002881b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002881f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028822:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028826:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028829:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028830:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028834:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028837:	85 c0                	test   eax,eax
c0028839:	74 22                	je     c002885d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002883b:	83 ec 0c             	sub    esp,0xc
c002883e:	68 36 a5 02 c0       	push   0xc002a536
c0028843:	e8 db 1d ff ff       	call   c001a623 <Krnl::panic(char const*)>
c0028848:	83 c4 10             	add    esp,0x10
c002884b:	eb 10                	jmp    c002885d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002884d:	83 ec 0c             	sub    esp,0xc
c0028850:	68 40 a5 02 c0       	push   0xc002a540
c0028855:	e8 c9 1d ff ff       	call   c001a623 <Krnl::panic(char const*)>
c002885a:	83 c4 10             	add    esp,0x10
c002885d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028861:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028864:	8d 50 01             	lea    edx,[eax+0x1]
c0028867:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002886b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002886e:	90                   	nop
c002886f:	83 c4 0c             	add    esp,0xc
c0028872:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0028874 <LinkedList<UnixFile>::getFirstElement()>:
c0028874:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028878:	8b 00                	mov    eax,DWORD PTR [eax]
c002887a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002887c <LinkedList<UnixFile>::removeFirst()>:
c002887c:	83 ec 0c             	sub    esp,0xc
c002887f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028883:	8b 00                	mov    eax,DWORD PTR [eax]
c0028885:	85 c0                	test   eax,eax
c0028887:	75 12                	jne    c002889b <LinkedList<UnixFile>::removeFirst()+0x1f>
c0028889:	83 ec 0c             	sub    esp,0xc
c002888c:	68 4c a5 02 c0       	push   0xc002a54c
c0028891:	e8 8d 1d ff ff       	call   c001a623 <Krnl::panic(char const*)>
c0028896:	83 c4 10             	add    esp,0x10
c0028899:	eb 7e                	jmp    c0028919 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002889b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002889f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288a2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288a5:	85 c0                	test   eax,eax
c00288a7:	74 10                	je     c00288b9 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00288a9:	83 ec 0c             	sub    esp,0xc
c00288ac:	68 97 a5 02 c0       	push   0xc002a597
c00288b1:	e8 6d 1d ff ff       	call   c001a623 <Krnl::panic(char const*)>
c00288b6:	83 c4 10             	add    esp,0x10
c00288b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00288bf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288c2:	85 c0                	test   eax,eax
c00288c4:	75 33                	jne    c00288f9 <LinkedList<UnixFile>::removeFirst()+0x7d>
c00288c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288ca:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00288d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288d4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00288db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288df:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288e2:	83 f8 01             	cmp    eax,0x1
c00288e5:	74 21                	je     c0028908 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00288e7:	83 ec 0c             	sub    esp,0xc
c00288ea:	68 70 a5 02 c0       	push   0xc002a570
c00288ef:	e8 2f 1d ff ff       	call   c001a623 <Krnl::panic(char const*)>
c00288f4:	83 c4 10             	add    esp,0x10
c00288f7:	eb 0f                	jmp    c0028908 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00288f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00288ff:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028902:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028906:	89 10                	mov    DWORD PTR [eax],edx
c0028908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002890c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002890f:	8d 50 ff             	lea    edx,[eax-0x1]
c0028912:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028916:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028919:	83 c4 0c             	add    esp,0xc
c002891c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002891e <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002891e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028922:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028925:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0028926 <DriverlessDevice::~DriverlessDevice()>:
c0028926:	ba 64 ae 02 c0       	mov    edx,0xc002ae64
c002892b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002892f:	89 10                	mov    DWORD PTR [eax],edx
c0028931:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028935:	50                   	push   eax
c0028936:	e8 2f b9 fe ff       	call   c001426a <Device::~Device()>
c002893b:	83 c4 04             	add    esp,0x4
c002893e:	90                   	nop
c002893f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028940 <DriverlessDevice::~DriverlessDevice()>:
c0028940:	83 ec 0c             	sub    esp,0xc
c0028943:	83 ec 0c             	sub    esp,0xc
c0028946:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002894a:	e8 d7 ff ff ff       	call   c0028926 <DriverlessDevice::~DriverlessDevice()>
c002894f:	83 c4 10             	add    esp,0x10
c0028952:	83 ec 08             	sub    esp,0x8
c0028955:	68 58 01 00 00       	push   0x158
c002895a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002895e:	e8 2e a5 fe ff       	call   c0012e91 <operator delete(void*, unsigned long)>
c0028963:	83 c4 10             	add    esp,0x10
c0028966:	83 c4 0c             	add    esp,0xc
c0028969:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002896a <LinkedList<Device>::addElement(Device*)>:
c002896a:	83 ec 0c             	sub    esp,0xc
c002896d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028972:	75 10                	jne    c0028984 <LinkedList<Device>::addElement(Device*)+0x1a>
c0028974:	83 ec 0c             	sub    esp,0xc
c0028977:	68 14 a5 02 c0       	push   0xc002a514
c002897c:	e8 a2 1c ff ff       	call   c001a623 <Krnl::panic(char const*)>
c0028981:	83 c4 10             	add    esp,0x10
c0028984:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028988:	8b 00                	mov    eax,DWORD PTR [eax]
c002898a:	85 c0                	test   eax,eax
c002898c:	74 3a                	je     c00289c8 <LinkedList<Device>::addElement(Device*)+0x5e>
c002898e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028992:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028995:	85 c0                	test   eax,eax
c0028997:	74 2f                	je     c00289c8 <LinkedList<Device>::addElement(Device*)+0x5e>
c0028999:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002899d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289a0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00289a4:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00289aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289ae:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00289b2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00289b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289b9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289bc:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00289c6:	eb 68                	jmp    c0028a30 <LinkedList<Device>::addElement(Device*)+0xc6>
c00289c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00289ce:	85 c0                	test   eax,eax
c00289d0:	75 4e                	jne    c0028a20 <LinkedList<Device>::addElement(Device*)+0xb6>
c00289d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289d9:	85 c0                	test   eax,eax
c00289db:	75 43                	jne    c0028a20 <LinkedList<Device>::addElement(Device*)+0xb6>
c00289dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289e1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00289e5:	89 10                	mov    DWORD PTR [eax],edx
c00289e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289eb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00289ef:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00289f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289f9:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028a03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a07:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a0a:	85 c0                	test   eax,eax
c0028a0c:	74 22                	je     c0028a30 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028a0e:	83 ec 0c             	sub    esp,0xc
c0028a11:	68 36 a5 02 c0       	push   0xc002a536
c0028a16:	e8 08 1c ff ff       	call   c001a623 <Krnl::panic(char const*)>
c0028a1b:	83 c4 10             	add    esp,0x10
c0028a1e:	eb 10                	jmp    c0028a30 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028a20:	83 ec 0c             	sub    esp,0xc
c0028a23:	68 40 a5 02 c0       	push   0xc002a540
c0028a28:	e8 f6 1b ff ff       	call   c001a623 <Krnl::panic(char const*)>
c0028a2d:	83 c4 10             	add    esp,0x10
c0028a30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a34:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a37:	8d 50 01             	lea    edx,[eax+0x1]
c0028a3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a3e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028a41:	90                   	nop
c0028a42:	83 c4 0c             	add    esp,0xc
c0028a45:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0028a46 <LinkedList<Device>::LinkedList()>:
c0028a46:	83 ec 0c             	sub    esp,0xc
c0028a49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a4d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028a53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a57:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028a5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a62:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028a69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a6d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028a73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a77:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028a7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a82:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028a89:	83 ec 0c             	sub    esp,0xc
c0028a8c:	68 fa a4 02 c0       	push   0xc002a4fa
c0028a91:	e8 db a4 fe ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0028a96:	83 c4 10             	add    esp,0x10
c0028a99:	90                   	nop
c0028a9a:	83 c4 0c             	add    esp,0xc
c0028a9d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0028a9e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0028a9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028aa2:	8b 00                	mov    eax,DWORD PTR [eax]
c0028aa4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0028aa6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0028aa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028aaa:	8b 00                	mov    eax,DWORD PTR [eax]
c0028aac:	85 c0                	test   eax,eax
c0028aae:	75 0e                	jne    c0028abe <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028ab0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ab4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028ab7:	85 c0                	test   eax,eax
c0028ab9:	75 03                	jne    c0028abe <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028abb:	b0 01                	mov    al,0x1
c0028abd:	c3                   	ret    
c0028abe:	b0 00                	mov    al,0x0
c0028ac0:	90                   	nop
c0028ac1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028ac2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028ac2:	83 ec 0c             	sub    esp,0xc
c0028ac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ac9:	8b 00                	mov    eax,DWORD PTR [eax]
c0028acb:	85 c0                	test   eax,eax
c0028acd:	75 15                	jne    c0028ae4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c0028acf:	83 ec 0c             	sub    esp,0xc
c0028ad2:	68 4c a5 02 c0       	push   0xc002a54c
c0028ad7:	e8 47 1b ff ff       	call   c001a623 <Krnl::panic(char const*)>
c0028adc:	83 c4 10             	add    esp,0x10
c0028adf:	e9 88 00 00 00       	jmp    c0028b6c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028ae4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ae8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028aeb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028aee:	85 c0                	test   eax,eax
c0028af0:	0f 95 c0             	setne  al
c0028af3:	84 c0                	test   al,al
c0028af5:	74 10                	je     c0028b07 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028af7:	83 ec 0c             	sub    esp,0xc
c0028afa:	68 97 a5 02 c0       	push   0xc002a597
c0028aff:	e8 1f 1b ff ff       	call   c001a623 <Krnl::panic(char const*)>
c0028b04:	83 c4 10             	add    esp,0x10
c0028b07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b0b:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b0d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028b10:	85 c0                	test   eax,eax
c0028b12:	0f 94 c0             	sete   al
c0028b15:	84 c0                	test   al,al
c0028b17:	74 33                	je     c0028b4c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028b19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b1d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028b23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b27:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028b2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b32:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028b35:	83 f8 01             	cmp    eax,0x1
c0028b38:	74 21                	je     c0028b5b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028b3a:	83 ec 0c             	sub    esp,0xc
c0028b3d:	68 70 a5 02 c0       	push   0xc002a570
c0028b42:	e8 dc 1a ff ff       	call   c001a623 <Krnl::panic(char const*)>
c0028b47:	83 c4 10             	add    esp,0x10
c0028b4a:	eb 0f                	jmp    c0028b5b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028b4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b50:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b52:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028b55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b59:	89 10                	mov    DWORD PTR [eax],edx
c0028b5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b5f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028b62:	8d 50 ff             	lea    edx,[eax-0x1]
c0028b65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b69:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028b6c:	83 c4 0c             	add    esp,0xc
c0028b6f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028b70 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028b70:	83 ec 0c             	sub    esp,0xc
c0028b73:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028b78:	75 10                	jne    c0028b8a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0028b7a:	83 ec 0c             	sub    esp,0xc
c0028b7d:	68 14 a5 02 c0       	push   0xc002a514
c0028b82:	e8 9c 1a ff ff       	call   c001a623 <Krnl::panic(char const*)>
c0028b87:	83 c4 10             	add    esp,0x10
c0028b8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b90:	85 c0                	test   eax,eax
c0028b92:	74 34                	je     c0028bc8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028b94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b98:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b9b:	85 c0                	test   eax,eax
c0028b9d:	74 29                	je     c0028bc8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028b9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ba3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028ba6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028baa:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0028bad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bb1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028bb5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028bb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028bbf:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028bc6:	eb 65                	jmp    c0028c2d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028bc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bcc:	8b 00                	mov    eax,DWORD PTR [eax]
c0028bce:	85 c0                	test   eax,eax
c0028bd0:	75 4b                	jne    c0028c1d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028bd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bd6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028bd9:	85 c0                	test   eax,eax
c0028bdb:	75 40                	jne    c0028c1d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028bdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028be1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028be5:	89 10                	mov    DWORD PTR [eax],edx
c0028be7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028beb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028bef:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028bf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bf6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028bf9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028c00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c04:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028c07:	85 c0                	test   eax,eax
c0028c09:	74 22                	je     c0028c2d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028c0b:	83 ec 0c             	sub    esp,0xc
c0028c0e:	68 36 a5 02 c0       	push   0xc002a536
c0028c13:	e8 0b 1a ff ff       	call   c001a623 <Krnl::panic(char const*)>
c0028c18:	83 c4 10             	add    esp,0x10
c0028c1b:	eb 10                	jmp    c0028c2d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028c1d:	83 ec 0c             	sub    esp,0xc
c0028c20:	68 40 a5 02 c0       	push   0xc002a540
c0028c25:	e8 f9 19 ff ff       	call   c001a623 <Krnl::panic(char const*)>
c0028c2a:	83 c4 10             	add    esp,0x10
c0028c2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c31:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028c34:	8d 50 01             	lea    edx,[eax+0x1]
c0028c37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c3b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028c3e:	90                   	nop
c0028c3f:	83 c4 0c             	add    esp,0xc
c0028c42:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028c44 <ACPI::~ACPI()>:
c0028c44:	83 ec 0c             	sub    esp,0xc
c0028c47:	ba b8 b7 02 c0       	mov    edx,0xc002b7b8
c0028c4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c50:	89 10                	mov    DWORD PTR [eax],edx
c0028c52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c56:	83 ec 0c             	sub    esp,0xc
c0028c59:	50                   	push   eax
c0028c5a:	e8 0b b6 fe ff       	call   c001426a <Device::~Device()>
c0028c5f:	83 c4 10             	add    esp,0x10
c0028c62:	90                   	nop
c0028c63:	83 c4 0c             	add    esp,0xc
c0028c66:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028c68 <ACPI::~ACPI()>:
c0028c68:	83 ec 0c             	sub    esp,0xc
c0028c6b:	83 ec 0c             	sub    esp,0xc
c0028c6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c72:	e8 cd ff ff ff       	call   c0028c44 <ACPI::~ACPI()>
c0028c77:	83 c4 10             	add    esp,0x10
c0028c7a:	83 ec 08             	sub    esp,0x8
c0028c7d:	68 68 12 00 00       	push   0x1268
c0028c82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c86:	e8 06 a2 fe ff       	call   c0012e91 <operator delete(void*, unsigned long)>
c0028c8b:	83 c4 10             	add    esp,0x10
c0028c8e:	83 c4 0c             	add    esp,0xc
c0028c91:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028c92 <CPU::~CPU()>:
c0028c92:	83 ec 0c             	sub    esp,0xc
c0028c95:	ba a8 bb 02 c0       	mov    edx,0xc002bba8
c0028c9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c9e:	89 10                	mov    DWORD PTR [eax],edx
c0028ca0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ca4:	83 ec 0c             	sub    esp,0xc
c0028ca7:	50                   	push   eax
c0028ca8:	e8 bd b5 fe ff       	call   c001426a <Device::~Device()>
c0028cad:	83 c4 10             	add    esp,0x10
c0028cb0:	90                   	nop
c0028cb1:	83 c4 0c             	add    esp,0xc
c0028cb4:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028cb6 <CPU::~CPU()>:
c0028cb6:	83 ec 0c             	sub    esp,0xc
c0028cb9:	83 ec 0c             	sub    esp,0xc
c0028cbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cc0:	e8 cd ff ff ff       	call   c0028c92 <CPU::~CPU()>
c0028cc5:	83 c4 10             	add    esp,0x10
c0028cc8:	83 ec 08             	sub    esp,0x8
c0028ccb:	68 98 11 00 00       	push   0x1198
c0028cd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cd4:	e8 b8 a1 fe ff       	call   c0012e91 <operator delete(void*, unsigned long)>
c0028cd9:	83 c4 10             	add    esp,0x10
c0028cdc:	83 c4 0c             	add    esp,0xc
c0028cdf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028ce0 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028ce0:	90                   	nop
c0028ce1:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028ce2 <ThreadControlBlock::ThreadControlBlock()>:
c0028ce2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ce6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028ced:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cf1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028cf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028cfc:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028d03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d07:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028d0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d12:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028d16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d1a:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0028d1e:	90                   	nop
c0028d1f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028d20 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028d20:	83 ec 0c             	sub    esp,0xc
c0028d23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d27:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d31:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028d38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d3c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028d43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d47:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028d4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d51:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028d58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d5c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028d63:	83 ec 0c             	sub    esp,0xc
c0028d66:	68 fa a4 02 c0       	push   0xc002a4fa
c0028d6b:	e8 01 a2 fe ff       	call   c0012f71 <Dbg::kprintf(char const*, ...)>
c0028d70:	83 c4 10             	add    esp,0x10
c0028d73:	90                   	nop
c0028d74:	83 c4 0c             	add    esp,0xc
c0028d77:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028d78 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028d78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028d7c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028d7f:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028d80 <Vm::_FPUState::_FPUState()>:
c0028d80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d84:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028d8b:	90                   	nop
c0028d8c:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028d8e <PCI::~PCI()>:
c0028d8e:	83 ec 0c             	sub    esp,0xc
c0028d91:	ba 9c cc 02 c0       	mov    edx,0xc002cc9c
c0028d96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d9a:	89 10                	mov    DWORD PTR [eax],edx
c0028d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028da0:	83 ec 0c             	sub    esp,0xc
c0028da3:	50                   	push   eax
c0028da4:	e8 99 ae fe ff       	call   c0013c42 <Bus::~Bus()>
c0028da9:	83 c4 10             	add    esp,0x10
c0028dac:	90                   	nop
c0028dad:	83 c4 0c             	add    esp,0xc
c0028db0:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028db2 <PCI::~PCI()>:
c0028db2:	83 ec 0c             	sub    esp,0xc
c0028db5:	83 ec 0c             	sub    esp,0xc
c0028db8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dbc:	e8 cd ff ff ff       	call   c0028d8e <PCI::~PCI()>
c0028dc1:	83 c4 10             	add    esp,0x10
c0028dc4:	83 ec 08             	sub    esp,0x8
c0028dc7:	68 58 01 00 00       	push   0x158
c0028dcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dd0:	e8 bc a0 fe ff       	call   c0012e91 <operator delete(void*, unsigned long)>
c0028dd5:	83 c4 10             	add    esp,0x10
c0028dd8:	83 c4 0c             	add    esp,0xc
c0028ddb:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028ddc <IDE::~IDE()>:
c0028ddc:	83 ec 0c             	sub    esp,0xc
c0028ddf:	ba 00 cf 02 c0       	mov    edx,0xc002cf00
c0028de4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028de8:	89 10                	mov    DWORD PTR [eax],edx
c0028dea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dee:	83 ec 0c             	sub    esp,0xc
c0028df1:	50                   	push   eax
c0028df2:	e8 63 b9 fe ff       	call   c001475a <HardDiskController::~HardDiskController()>
c0028df7:	83 c4 10             	add    esp,0x10
c0028dfa:	90                   	nop
c0028dfb:	83 c4 0c             	add    esp,0xc
c0028dfe:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028e00 <IDE::~IDE()>:
c0028e00:	83 ec 0c             	sub    esp,0xc
c0028e03:	83 ec 0c             	sub    esp,0xc
c0028e06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e0a:	e8 cd ff ff ff       	call   c0028ddc <IDE::~IDE()>
c0028e0f:	83 c4 10             	add    esp,0x10
c0028e12:	83 ec 08             	sub    esp,0x8
c0028e15:	68 70 02 00 00       	push   0x270
c0028e1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e1e:	e8 6e a0 fe ff       	call   c0012e91 <operator delete(void*, unsigned long)>
c0028e23:	83 c4 10             	add    esp,0x10
c0028e26:	83 c4 0c             	add    esp,0xc
c0028e29:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028e2a <SATABus::~SATABus()>:
c0028e2a:	83 ec 0c             	sub    esp,0xc
c0028e2d:	ba e0 cf 02 c0       	mov    edx,0xc002cfe0
c0028e32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e36:	89 10                	mov    DWORD PTR [eax],edx
c0028e38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e3c:	83 ec 0c             	sub    esp,0xc
c0028e3f:	50                   	push   eax
c0028e40:	e8 15 b9 fe ff       	call   c001475a <HardDiskController::~HardDiskController()>
c0028e45:	83 c4 10             	add    esp,0x10
c0028e48:	90                   	nop
c0028e49:	83 c4 0c             	add    esp,0xc
c0028e4c:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028e4e <SATABus::~SATABus()>:
c0028e4e:	83 ec 0c             	sub    esp,0xc
c0028e51:	83 ec 0c             	sub    esp,0xc
c0028e54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e58:	e8 cd ff ff ff       	call   c0028e2a <SATABus::~SATABus()>
c0028e5d:	83 c4 10             	add    esp,0x10
c0028e60:	83 ec 08             	sub    esp,0x8
c0028e63:	68 64 01 00 00       	push   0x164
c0028e68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e6c:	e8 20 a0 fe ff       	call   c0012e91 <operator delete(void*, unsigned long)>
c0028e71:	83 c4 10             	add    esp,0x10
c0028e74:	83 c4 0c             	add    esp,0xc
c0028e77:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028e78 <ATA::~ATA()>:
c0028e78:	83 ec 0c             	sub    esp,0xc
c0028e7b:	ba 2c d0 02 c0       	mov    edx,0xc002d02c
c0028e80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e84:	89 10                	mov    DWORD PTR [eax],edx
c0028e86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e8a:	83 ec 0c             	sub    esp,0xc
c0028e8d:	50                   	push   eax
c0028e8e:	e8 b9 b9 fe ff       	call   c001484c <PhysicalDisk::~PhysicalDisk()>
c0028e93:	83 c4 10             	add    esp,0x10
c0028e96:	90                   	nop
c0028e97:	83 c4 0c             	add    esp,0xc
c0028e9a:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028e9c <ATA::~ATA()>:
c0028e9c:	83 ec 0c             	sub    esp,0xc
c0028e9f:	83 ec 0c             	sub    esp,0xc
c0028ea2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ea6:	e8 cd ff ff ff       	call   c0028e78 <ATA::~ATA()>
c0028eab:	83 c4 10             	add    esp,0x10
c0028eae:	83 ec 08             	sub    esp,0x8
c0028eb1:	68 7c 01 00 00       	push   0x17c
c0028eb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028eba:	e8 d2 9f fe ff       	call   c0012e91 <operator delete(void*, unsigned long)>
c0028ebf:	83 c4 10             	add    esp,0x10
c0028ec2:	83 c4 0c             	add    esp,0xc
c0028ec5:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028ec6 <ATAPI::~ATAPI()>:
c0028ec6:	83 ec 0c             	sub    esp,0xc
c0028ec9:	ba 64 d0 02 c0       	mov    edx,0xc002d064
c0028ece:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ed2:	89 10                	mov    DWORD PTR [eax],edx
c0028ed4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ed8:	83 ec 0c             	sub    esp,0xc
c0028edb:	50                   	push   eax
c0028edc:	e8 6b b9 fe ff       	call   c001484c <PhysicalDisk::~PhysicalDisk()>
c0028ee1:	83 c4 10             	add    esp,0x10
c0028ee4:	90                   	nop
c0028ee5:	83 c4 0c             	add    esp,0xc
c0028ee8:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028eea <ATAPI::~ATAPI()>:
c0028eea:	83 ec 0c             	sub    esp,0xc
c0028eed:	83 ec 0c             	sub    esp,0xc
c0028ef0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ef4:	e8 cd ff ff ff       	call   c0028ec6 <ATAPI::~ATAPI()>
c0028ef9:	83 c4 10             	add    esp,0x10
c0028efc:	83 ec 08             	sub    esp,0x8
c0028eff:	68 80 01 00 00       	push   0x180
c0028f04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f08:	e8 84 9f fe ff       	call   c0012e91 <operator delete(void*, unsigned long)>
c0028f0d:	83 c4 10             	add    esp,0x10
c0028f10:	83 c4 0c             	add    esp,0xc
c0028f13:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028f14 <SATA::~SATA()>:
c0028f14:	83 ec 0c             	sub    esp,0xc
c0028f17:	ba 18 d1 02 c0       	mov    edx,0xc002d118
c0028f1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f20:	89 10                	mov    DWORD PTR [eax],edx
c0028f22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f26:	83 ec 0c             	sub    esp,0xc
c0028f29:	50                   	push   eax
c0028f2a:	e8 1d b9 fe ff       	call   c001484c <PhysicalDisk::~PhysicalDisk()>
c0028f2f:	83 c4 10             	add    esp,0x10
c0028f32:	90                   	nop
c0028f33:	83 c4 0c             	add    esp,0xc
c0028f36:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028f38 <SATA::~SATA()>:
c0028f38:	83 ec 0c             	sub    esp,0xc
c0028f3b:	83 ec 0c             	sub    esp,0xc
c0028f3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f42:	e8 cd ff ff ff       	call   c0028f14 <SATA::~SATA()>
c0028f47:	83 c4 10             	add    esp,0x10
c0028f4a:	83 ec 08             	sub    esp,0x8
c0028f4d:	68 7c 01 00 00       	push   0x17c
c0028f52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f56:	e8 36 9f fe ff       	call   c0012e91 <operator delete(void*, unsigned long)>
c0028f5b:	83 c4 10             	add    esp,0x10
c0028f5e:	83 c4 0c             	add    esp,0xc
c0028f61:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028f62 <SATAPI::~SATAPI()>:
c0028f62:	83 ec 0c             	sub    esp,0xc
c0028f65:	ba f4 d1 02 c0       	mov    edx,0xc002d1f4
c0028f6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f6e:	89 10                	mov    DWORD PTR [eax],edx
c0028f70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f74:	83 ec 0c             	sub    esp,0xc
c0028f77:	50                   	push   eax
c0028f78:	e8 cf b8 fe ff       	call   c001484c <PhysicalDisk::~PhysicalDisk()>
c0028f7d:	83 c4 10             	add    esp,0x10
c0028f80:	90                   	nop
c0028f81:	83 c4 0c             	add    esp,0xc
c0028f84:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028f86 <SATAPI::~SATAPI()>:
c0028f86:	83 ec 0c             	sub    esp,0xc
c0028f89:	83 ec 0c             	sub    esp,0xc
c0028f8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f90:	e8 cd ff ff ff       	call   c0028f62 <SATAPI::~SATAPI()>
c0028f95:	83 c4 10             	add    esp,0x10
c0028f98:	83 ec 08             	sub    esp,0x8
c0028f9b:	68 80 01 00 00       	push   0x180
c0028fa0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fa4:	e8 e8 9e fe ff       	call   c0012e91 <operator delete(void*, unsigned long)>
c0028fa9:	83 c4 10             	add    esp,0x10
c0028fac:	83 c4 0c             	add    esp,0xc
c0028faf:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028fb0 <AVX::~AVX()>:
c0028fb0:	83 ec 0c             	sub    esp,0xc
c0028fb3:	ba 34 d2 02 c0       	mov    edx,0xc002d234
c0028fb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fbc:	89 10                	mov    DWORD PTR [eax],edx
c0028fbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fc2:	83 ec 0c             	sub    esp,0xc
c0028fc5:	50                   	push   eax
c0028fc6:	e8 05 b9 fe ff       	call   c00148d0 <FPU::~FPU()>
c0028fcb:	83 c4 10             	add    esp,0x10
c0028fce:	90                   	nop
c0028fcf:	83 c4 0c             	add    esp,0xc
c0028fd2:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0028fd4 <AVX::~AVX()>:
c0028fd4:	83 ec 0c             	sub    esp,0xc
c0028fd7:	83 ec 0c             	sub    esp,0xc
c0028fda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fde:	e8 cd ff ff ff       	call   c0028fb0 <AVX::~AVX()>
c0028fe3:	83 c4 10             	add    esp,0x10
c0028fe6:	83 ec 08             	sub    esp,0x8
c0028fe9:	68 58 01 00 00       	push   0x158
c0028fee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ff2:	e8 9a 9e fe ff       	call   c0012e91 <operator delete(void*, unsigned long)>
c0028ff7:	83 c4 10             	add    esp,0x10
c0028ffa:	83 c4 0c             	add    esp,0xc
c0028ffd:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0028ffe <MMX::~MMX()>:
c0028ffe:	83 ec 0c             	sub    esp,0xc
c0029001:	ba 74 d2 02 c0       	mov    edx,0xc002d274
c0029006:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002900a:	89 10                	mov    DWORD PTR [eax],edx
c002900c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029010:	83 ec 0c             	sub    esp,0xc
c0029013:	50                   	push   eax
c0029014:	e8 b7 b8 fe ff       	call   c00148d0 <FPU::~FPU()>
c0029019:	83 c4 10             	add    esp,0x10
c002901c:	90                   	nop
c002901d:	83 c4 0c             	add    esp,0xc
c0029020:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0029022 <MMX::~MMX()>:
c0029022:	83 ec 0c             	sub    esp,0xc
c0029025:	83 ec 0c             	sub    esp,0xc
c0029028:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002902c:	e8 cd ff ff ff       	call   c0028ffe <MMX::~MMX()>
c0029031:	83 c4 10             	add    esp,0x10
c0029034:	83 ec 08             	sub    esp,0x8
c0029037:	68 58 01 00 00       	push   0x158
c002903c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029040:	e8 4c 9e fe ff       	call   c0012e91 <operator delete(void*, unsigned long)>
c0029045:	83 c4 10             	add    esp,0x10
c0029048:	83 c4 0c             	add    esp,0xc
c002904b:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c002904c <SSE::~SSE()>:
c002904c:	83 ec 0c             	sub    esp,0xc
c002904f:	ba b4 d2 02 c0       	mov    edx,0xc002d2b4
c0029054:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029058:	89 10                	mov    DWORD PTR [eax],edx
c002905a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002905e:	83 ec 0c             	sub    esp,0xc
c0029061:	50                   	push   eax
c0029062:	e8 69 b8 fe ff       	call   c00148d0 <FPU::~FPU()>
c0029067:	83 c4 10             	add    esp,0x10
c002906a:	90                   	nop
c002906b:	83 c4 0c             	add    esp,0xc
c002906e:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0029070 <SSE::~SSE()>:
c0029070:	83 ec 0c             	sub    esp,0xc
c0029073:	83 ec 0c             	sub    esp,0xc
c0029076:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002907a:	e8 cd ff ff ff       	call   c002904c <SSE::~SSE()>
c002907f:	83 c4 10             	add    esp,0x10
c0029082:	83 ec 08             	sub    esp,0x8
c0029085:	68 58 01 00 00       	push   0x158
c002908a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002908e:	e8 fe 9d fe ff       	call   c0012e91 <operator delete(void*, unsigned long)>
c0029093:	83 c4 10             	add    esp,0x10
c0029096:	83 c4 0c             	add    esp,0xc
c0029099:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c002909a <x87::~x87()>:
c002909a:	83 ec 0c             	sub    esp,0xc
c002909d:	ba f4 d2 02 c0       	mov    edx,0xc002d2f4
c00290a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290a6:	89 10                	mov    DWORD PTR [eax],edx
c00290a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290ac:	83 ec 0c             	sub    esp,0xc
c00290af:	50                   	push   eax
c00290b0:	e8 1b b8 fe ff       	call   c00148d0 <FPU::~FPU()>
c00290b5:	83 c4 10             	add    esp,0x10
c00290b8:	90                   	nop
c00290b9:	83 c4 0c             	add    esp,0xc
c00290bc:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c00290be <x87::~x87()>:
c00290be:	83 ec 0c             	sub    esp,0xc
c00290c1:	83 ec 0c             	sub    esp,0xc
c00290c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290c8:	e8 cd ff ff ff       	call   c002909a <x87::~x87()>
c00290cd:	83 c4 10             	add    esp,0x10
c00290d0:	83 ec 08             	sub    esp,0x8
c00290d3:	68 58 01 00 00       	push   0x158
c00290d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290dc:	e8 b0 9d fe ff       	call   c0012e91 <operator delete(void*, unsigned long)>
c00290e1:	83 c4 10             	add    esp,0x10
c00290e4:	83 c4 0c             	add    esp,0xc
c00290e7:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c00290e8 <IOAPIC::~IOAPIC()>:
c00290e8:	83 ec 0c             	sub    esp,0xc
c00290eb:	ba 4c d4 02 c0       	mov    edx,0xc002d44c
c00290f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290f4:	89 10                	mov    DWORD PTR [eax],edx
c00290f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290fa:	83 ec 0c             	sub    esp,0xc
c00290fd:	50                   	push   eax
c00290fe:	e8 67 b1 fe ff       	call   c001426a <Device::~Device()>
c0029103:	83 c4 10             	add    esp,0x10
c0029106:	90                   	nop
c0029107:	83 c4 0c             	add    esp,0xc
c002910a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002910c <IOAPIC::~IOAPIC()>:
c002910c:	83 ec 0c             	sub    esp,0xc
c002910f:	83 ec 0c             	sub    esp,0xc
c0029112:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029116:	e8 cd ff ff ff       	call   c00290e8 <IOAPIC::~IOAPIC()>
c002911b:	83 c4 10             	add    esp,0x10
c002911e:	83 ec 08             	sub    esp,0x8
c0029121:	68 68 01 00 00       	push   0x168
c0029126:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002912a:	e8 62 9d fe ff       	call   c0012e91 <operator delete(void*, unsigned long)>
c002912f:	83 c4 10             	add    esp,0x10
c0029132:	83 c4 0c             	add    esp,0xc
c0029135:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0029136 <APIC::~APIC()>:
c0029136:	83 ec 0c             	sub    esp,0xc
c0029139:	ba 04 d4 02 c0       	mov    edx,0xc002d404
c002913e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029142:	89 10                	mov    DWORD PTR [eax],edx
c0029144:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029148:	83 ec 0c             	sub    esp,0xc
c002914b:	50                   	push   eax
c002914c:	e8 49 bc fe ff       	call   c0014d9a <InterruptController::~InterruptController()>
c0029151:	83 c4 10             	add    esp,0x10
c0029154:	90                   	nop
c0029155:	83 c4 0c             	add    esp,0xc
c0029158:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c002915a <APIC::~APIC()>:
c002915a:	83 ec 0c             	sub    esp,0xc
c002915d:	83 ec 0c             	sub    esp,0xc
c0029160:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029164:	e8 cd ff ff ff       	call   c0029136 <APIC::~APIC()>
c0029169:	83 c4 10             	add    esp,0x10
c002916c:	83 ec 08             	sub    esp,0x8
c002916f:	68 58 21 00 00       	push   0x2158
c0029174:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029178:	e8 14 9d fe ff       	call   c0012e91 <operator delete(void*, unsigned long)>
c002917d:	83 c4 10             	add    esp,0x10
c0029180:	83 c4 0c             	add    esp,0xc
c0029183:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0029184 <PIC::~PIC()>:
c0029184:	83 ec 0c             	sub    esp,0xc
c0029187:	ba 9c d4 02 c0       	mov    edx,0xc002d49c
c002918c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029190:	89 10                	mov    DWORD PTR [eax],edx
c0029192:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029196:	83 ec 0c             	sub    esp,0xc
c0029199:	50                   	push   eax
c002919a:	e8 fb bb fe ff       	call   c0014d9a <InterruptController::~InterruptController()>
c002919f:	83 c4 10             	add    esp,0x10
c00291a2:	90                   	nop
c00291a3:	83 c4 0c             	add    esp,0xc
c00291a6:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c00291a8 <PIC::~PIC()>:
c00291a8:	83 ec 0c             	sub    esp,0xc
c00291ab:	83 ec 0c             	sub    esp,0xc
c00291ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291b2:	e8 cd ff ff ff       	call   c0029184 <PIC::~PIC()>
c00291b7:	83 c4 10             	add    esp,0x10
c00291ba:	83 ec 08             	sub    esp,0x8
c00291bd:	68 58 21 00 00       	push   0x2158
c00291c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291c6:	e8 c6 9c fe ff       	call   c0012e91 <operator delete(void*, unsigned long)>
c00291cb:	83 c4 10             	add    esp,0x10
c00291ce:	83 c4 0c             	add    esp,0xc
c00291d1:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c00291d2 <APICTimer::~APICTimer()>:
c00291d2:	83 ec 0c             	sub    esp,0xc
c00291d5:	ba f0 d4 02 c0       	mov    edx,0xc002d4f0
c00291da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291de:	89 10                	mov    DWORD PTR [eax],edx
c00291e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291e4:	83 ec 0c             	sub    esp,0xc
c00291e7:	50                   	push   eax
c00291e8:	e8 09 db fe ff       	call   c0016cf6 <Timer::~Timer()>
c00291ed:	83 c4 10             	add    esp,0x10
c00291f0:	90                   	nop
c00291f1:	83 c4 0c             	add    esp,0xc
c00291f4:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c00291f6 <APICTimer::~APICTimer()>:
c00291f6:	83 ec 0c             	sub    esp,0xc
c00291f9:	83 ec 0c             	sub    esp,0xc
c00291fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029200:	e8 cd ff ff ff       	call   c00291d2 <APICTimer::~APICTimer()>
c0029205:	83 c4 10             	add    esp,0x10
c0029208:	83 ec 08             	sub    esp,0x8
c002920b:	68 60 01 00 00       	push   0x160
c0029210:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029214:	e8 78 9c fe ff       	call   c0012e91 <operator delete(void*, unsigned long)>
c0029219:	83 c4 10             	add    esp,0x10
c002921c:	83 c4 0c             	add    esp,0xc
c002921f:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0029220 <PIT::~PIT()>:
c0029220:	83 ec 0c             	sub    esp,0xc
c0029223:	ba 40 d5 02 c0       	mov    edx,0xc002d540
c0029228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002922c:	89 10                	mov    DWORD PTR [eax],edx
c002922e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029232:	83 ec 0c             	sub    esp,0xc
c0029235:	50                   	push   eax
c0029236:	e8 bb da fe ff       	call   c0016cf6 <Timer::~Timer()>
c002923b:	83 c4 10             	add    esp,0x10
c002923e:	90                   	nop
c002923f:	83 c4 0c             	add    esp,0xc
c0029242:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0029244 <PIT::~PIT()>:
c0029244:	83 ec 0c             	sub    esp,0xc
c0029247:	83 ec 0c             	sub    esp,0xc
c002924a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002924e:	e8 cd ff ff ff       	call   c0029220 <PIT::~PIT()>
c0029253:	83 c4 10             	add    esp,0x10
c0029256:	83 ec 08             	sub    esp,0x8
c0029259:	68 5c 01 00 00       	push   0x15c
c002925e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029262:	e8 2a 9c fe ff       	call   c0012e91 <operator delete(void*, unsigned long)>
c0029267:	83 c4 10             	add    esp,0x10
c002926a:	83 c4 0c             	add    esp,0xc
c002926d:	c3                   	ret    
