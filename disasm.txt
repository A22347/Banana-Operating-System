
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 f5 f3 00 00       	call   c000f415 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 b3 51 02 00       	call   c00251d8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 82 5d 02 c0       	mov    ebx,0xc0025d82
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 90 5d 02 c0    	cmp    ebx,0xc0025d90
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 cc 9b 02 c0       	mov    eax,0xc0029bcc
c0000049:	3d cc 9b 02 c0       	cmp    eax,0xc0029bcc
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 cc 9b 02 c0       	push   0xc0029bcc
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 cc 9b 02 c0       	mov    eax,0xc0029bcc
c0000075:	2d cc 9b 02 c0       	sub    eax,0xc0029bcc
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 cc 9b 02 c0       	push   0xc0029bcc
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d fc a1 02 c0 00 	cmp    BYTE PTR ds:0xc002a1fc,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 98 5d 02 c0       	mov    ebx,0xc0025d98
c00000bb:	81 eb 94 5d 02 c0    	sub    ebx,0xc0025d94
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 94 5d 02 c0       	mov    esi,0xc0025d94
c00000ca:	a1 00 a2 02 c0       	mov    eax,ds:0xc002a200
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 00 a2 02 c0       	mov    ds:0xc002a200,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 00 a2 02 c0       	mov    eax,ds:0xc002a200
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 cc 9b 02 c0       	push   0xc0029bcc
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 fc a1 02 c0 01 	mov    BYTE PTR ds:0xc002a1fc,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 04 a2 02 c0       	push   0xc002a204
c000012c:	68 cc 9b 02 c0       	push   0xc0029bcc
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <prepareTramp>:
c0000150:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000157:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c000015e:	50                   	push   eax
c000015f:	0f 20 d8             	mov    eax,cr3
c0000162:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000167:	58                   	pop    eax
c0000168:	c3                   	ret    

c0000169 <voodooXADD>:
c0000169:	55                   	push   ebp
c000016a:	89 e5                	mov    ebp,esp
c000016c:	60                   	pusha  
c000016d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000170:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0000173:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0000176:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c0000179:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000017c:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c000017f:	0f 02 ff             	lar    edi,di
c0000182:	c1 ef 0d             	shr    edi,0xd
c0000185:	66 81 e7 03 00       	and    di,0x3
c000018a:	75 09                	jne    c0000195 <voodooXADD.usermode>
c000018c:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c000018f:	81 c4 14 00 00 00    	add    esp,0x14

c0000195 <voodooXADD.usermode>:
c0000195:	89 35 30 02 00 c0    	mov    DWORD PTR ds:0xc0000230,esi
c000019b:	89 25 2c 02 00 c0    	mov    DWORD PTR ds:0xc000022c,esp
c00001a1:	60                   	pusha  
c00001a2:	b0 90                	mov    al,0x90
c00001a4:	b9 20 00 00 00       	mov    ecx,0x20
c00001a9:	bf 03 02 00 c0       	mov    edi,0xc0000203
c00001ae:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001b0:	61                   	popa   
c00001b1:	60                   	pusha  
c00001b2:	89 d6                	mov    esi,edx
c00001b4:	bf 03 02 00 c0       	mov    edi,0xc0000203
c00001b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00001bb:	61                   	popa   
c00001bc:	60                   	pusha  
c00001bd:	89 d6                	mov    esi,edx
c00001bf:	bf 13 02 00 c0       	mov    edi,0xc0000213
c00001c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00001c6:	61                   	popa   
c00001c7:	b1 90                	mov    cl,0x90
c00001c9:	85 db                	test   ebx,ebx
c00001cb:	74 06                	je     c00001d3 <voodooXADD.skipChange>
c00001cd:	8a 8b 02 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdfe]

c00001d3 <voodooXADD.skipChange>:
c00001d3:	88 8b 03 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdfd],cl
c00001d9:	80 ab 04 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdfc],0x3a
c00001e0:	88 8b 13 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffded],cl
c00001e6:	80 ab 14 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffdec],0xbe
c00001ed:	89 c4                	mov    esp,eax
c00001ef:	81 c4 10 00 00 00    	add    esp,0x10
c00001f5:	5f                   	pop    edi
c00001f6:	5e                   	pop    esi
c00001f7:	5d                   	pop    ebp
c00001f8:	5b                   	pop    ebx
c00001f9:	5b                   	pop    ebx
c00001fa:	5a                   	pop    edx
c00001fb:	59                   	pop    ecx
c00001fc:	58                   	pop    eax
c00001fd:	8b 25 30 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000230

c0000203 <voodooXADD.helper>:
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	90                   	nop
c0000217:	90                   	nop
c0000218:	90                   	nop
c0000219:	90                   	nop
c000021a:	90                   	nop
c000021b:	90                   	nop
c000021c:	90                   	nop
c000021d:	90                   	nop
c000021e:	90                   	nop
c000021f:	90                   	nop
c0000220:	90                   	nop
c0000221:	90                   	nop
c0000222:	90                   	nop
c0000223:	8b 25 2c 02 00 c0    	mov    esp,DWORD PTR ds:0xc000022c
c0000229:	61                   	popa   
c000022a:	c9                   	leave  
c000022b:	c3                   	ret    

c000022c <voodooXADD.oldStack>:
c000022c:	00 00                	add    BYTE PTR [eax],al
	...

c0000230 <voodooXADD.newStack>:
c0000230:	00 00                	add    BYTE PTR [eax],al
	...

c0000234 <doTPAUSE>:
c0000234:	fb                   	sti    
c0000235:	31 c0                	xor    eax,eax
c0000237:	31 d2                	xor    edx,edx
c0000239:	66 0f ae f0          	tpause eax
c000023d:	c3                   	ret    

c000023e <hasLegacyFPU>:
c000023e:	0f 20 c2             	mov    edx,cr0
c0000241:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000247:	0f 22 c2             	mov    cr0,edx
c000024a:	db e3                	fninit 
c000024c:	dd 3d 61 02 00 c0    	fnstsw WORD PTR ds:0xc0000261
c0000252:	31 c0                	xor    eax,eax
c0000254:	66 81 3d 61 02 00 c0 00 00 	cmp    WORD PTR ds:0xc0000261,0x0
c000025d:	75 01                	jne    c0000260 <hasLegacyFPU.nofpu>

c000025f <hasLegacyFPU.hasfpu>:
c000025f:	40                   	inc    eax

c0000260 <hasLegacyFPU.nofpu>:
c0000260:	c3                   	ret    

c0000261 <testword>:
c0000261:	aa                   	stos   BYTE PTR es:[edi],al
c0000262:	55                   	push   ebp

c0000263 <is486>:
c0000263:	0f 09                	wbinvd 
c0000265:	31 c0                	xor    eax,eax
c0000267:	40                   	inc    eax
c0000268:	c3                   	ret    
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	90                   	nop
c000026f:	90                   	nop
c0000270:	90                   	nop
c0000271:	90                   	nop
c0000272:	90                   	nop
c0000273:	90                   	nop
c0000274:	90                   	nop
c0000275:	90                   	nop
c0000276:	90                   	nop
c0000277:	90                   	nop
c0000278:	90                   	nop
c0000279:	90                   	nop
c000027a:	90                   	nop
c000027b:	90                   	nop
c000027c:	90                   	nop
c000027d:	90                   	nop
c000027e:	90                   	nop
c000027f:	90                   	nop
c0000280:	90                   	nop
c0000281:	90                   	nop
c0000282:	90                   	nop
c0000283:	90                   	nop
c0000284:	90                   	nop
c0000285:	90                   	nop
c0000286:	90                   	nop
c0000287:	90                   	nop
c0000288:	90                   	nop
c0000289:	90                   	nop
c000028a:	90                   	nop
c000028b:	90                   	nop
c000028c:	90                   	nop
c000028d:	90                   	nop
c000028e:	90                   	nop
c000028f:	90                   	nop
c0000290:	90                   	nop
c0000291:	90                   	nop
c0000292:	90                   	nop
c0000293:	90                   	nop
c0000294:	90                   	nop
c0000295:	90                   	nop
c0000296:	31 c0                	xor    eax,eax
c0000298:	c3                   	ret    

c0000299 <detectCPUID>:
c0000299:	9c                   	pushf  
c000029a:	9c                   	pushf  
c000029b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002a2:	9d                   	popf   
c00002a3:	9c                   	pushf  
c00002a4:	58                   	pop    eax
c00002a5:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002a8:	9d                   	popf   
c00002a9:	25 00 00 20 00       	and    eax,0x200000
c00002ae:	c3                   	ret    

c00002af <goToVM86>:
c00002af:	fa                   	cli    
c00002b0:	55                   	push   ebp
c00002b1:	89 e5                	mov    ebp,esp
c00002b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00002b6:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00002b9:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00002bc:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00002bf:	25 ff ff 00 00       	and    eax,0xffff
c00002c4:	81 e3 ff ff 00 00    	and    ebx,0xffff
c00002ca:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00002d0:	81 e2 ff ff 00 00    	and    edx,0xffff
c00002d6:	52                   	push   edx
c00002d7:	51                   	push   ecx
c00002d8:	68 02 02 02 00       	push   0x20202
c00002dd:	53                   	push   ebx
c00002de:	50                   	push   eax
c00002df:	cf                   	iret   

c00002e0 <goToUsermode>:
c00002e0:	fa                   	cli    
c00002e1:	55                   	push   ebp
c00002e2:	89 e5                	mov    ebp,esp
c00002e4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00002e7:	66 b8 23 00          	mov    ax,0x23
c00002eb:	66 8e d8             	mov    ds,ax
c00002ee:	66 8e c0             	mov    es,ax
c00002f1:	66 8e e0             	mov    fs,ax
c00002f4:	66 8e e8             	mov    gs,ax
c00002f7:	89 e0                	mov    eax,esp
c00002f9:	68 23 00 00 00       	push   0x23
c00002fe:	50                   	push   eax
c00002ff:	68 02 02 00 00       	push   0x202
c0000304:	68 1b 00 00 00       	push   0x1b
c0000309:	53                   	push   ebx
c000030a:	cf                   	iret   

c000030b <switchToThreadASMFirstTime>:
c000030b:	9c                   	pushf  
c000030c:	fa                   	cli    
c000030d:	50                   	push   eax
c000030e:	53                   	push   ebx
c000030f:	51                   	push   ecx
c0000310:	52                   	push   edx
c0000311:	56                   	push   esi
c0000312:	57                   	push   edi
c0000313:	55                   	push   ebp
c0000314:	e9 11 00 00 00       	jmp    c000032a <commonThreadSwitch>

c0000319 <switchToThreadASM>:
c0000319:	9c                   	pushf  
c000031a:	50                   	push   eax
c000031b:	53                   	push   ebx
c000031c:	51                   	push   ecx
c000031d:	52                   	push   edx
c000031e:	56                   	push   esi
c000031f:	57                   	push   edi
c0000320:	55                   	push   ebp
c0000321:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000327:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c000032a <commonThreadSwitch>:
c000032a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000032e:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000334:	8b 06                	mov    eax,DWORD PTR [esi]
c0000336:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000339:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000033c:	0f 20 d9             	mov    ecx,cr3
c000033f:	39 c8                	cmp    eax,ecx
c0000341:	74 03                	je     c0000346 <commonThreadSwitch.doneVAS>
c0000343:	0f 22 d8             	mov    cr3,eax

c0000346 <commonThreadSwitch.doneVAS>:
c0000346:	85 d2                	test   edx,edx
c0000348:	75 11                	jne    c000035b <commonThreadSwitch.firstTime>
c000034a:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000034d:	e8 c8 b2 01 00       	call   c001b61a <changeTSS>
c0000352:	5d                   	pop    ebp
c0000353:	5f                   	pop    edi
c0000354:	5e                   	pop    esi
c0000355:	5a                   	pop    edx
c0000356:	59                   	pop    ecx
c0000357:	5b                   	pop    ebx
c0000358:	58                   	pop    eax
c0000359:	9d                   	popf   
c000035a:	c3                   	ret    

c000035b <commonThreadSwitch.firstTime>:
c000035b:	fa                   	cli    
c000035c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000035f:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c0000364:	60                   	pusha  
c0000365:	e8 9a 1c 01 00       	call   c0012004 <mapVASFirstTime>
c000036a:	61                   	popa   
c000036b:	89 c4                	mov    esp,eax
c000036d:	56                   	push   esi
c000036e:	52                   	push   edx
c000036f:	e8 a6 b2 01 00       	call   c001b61a <changeTSS>
c0000374:	5a                   	pop    edx
c0000375:	5e                   	pop    esi
c0000376:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c000037d:	5d                   	pop    ebp
c000037e:	5f                   	pop    edi
c000037f:	5e                   	pop    esi
c0000380:	59                   	pop    ecx
c0000381:	59                   	pop    ecx
c0000382:	5b                   	pop    ebx
c0000383:	58                   	pop    eax
c0000384:	81 c4 04 00 00 00    	add    esp,0x4
c000038a:	6a 02                	push   0x2
c000038c:	9d                   	popf   
c000038d:	52                   	push   edx
c000038e:	e8 9a b6 01 00       	call   c001ba2d <taskStartupFunction>
c0000393:	5a                   	pop    edx
c0000394:	50                   	push   eax
c0000395:	ff d2                	call   edx
c0000397:	e8 40 bc 01 00       	call   c001bfdc <taskReturned>
c000039c:	e9 fb ff ff ff       	jmp    c000039c <commonThreadSwitch.firstTime+0x41>

c00003a1 <asmQuickAcquireLock>:
c00003a1:	55                   	push   ebp
c00003a2:	89 e5                	mov    ebp,esp
c00003a4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003a7 <asmQuickAcquireLock.retry>:
c00003a7:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003ac:	72 02                	jb     c00003b0 <asmQuickAcquireLock.spin_with_pause>
c00003ae:	fa                   	cli    
c00003af:	c3                   	ret    

c00003b0 <asmQuickAcquireLock.spin_with_pause>:
c00003b0:	f3 90                	pause  
c00003b2:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003b8:	75 f6                	jne    c00003b0 <asmQuickAcquireLock.spin_with_pause>
c00003ba:	e9 e8 ff ff ff       	jmp    c00003a7 <asmQuickAcquireLock.retry>

c00003bf <asmQuickReleaseLock>:
c00003bf:	55                   	push   ebp
c00003c0:	89 e5                	mov    ebp,esp
c00003c2:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00003c9:	5d                   	pop    ebp
c00003ca:	c3                   	ret    

c00003cb <asmAcquireLock>:
c00003cb:	55                   	push   ebp
c00003cc:	89 e5                	mov    ebp,esp
c00003ce:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003d1 <asmAcquireLock.retry>:
c00003d1:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003d6:	72 05                	jb     c00003dd <asmAcquireLock.spin_with_pause>
c00003d8:	9c                   	pushf  
c00003d9:	58                   	pop    eax
c00003da:	fa                   	cli    
c00003db:	5d                   	pop    ebp
c00003dc:	c3                   	ret    

c00003dd <asmAcquireLock.spin_with_pause>:
c00003dd:	f3 90                	pause  
c00003df:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003e5:	75 f6                	jne    c00003dd <asmAcquireLock.spin_with_pause>
c00003e7:	e9 e5 ff ff ff       	jmp    c00003d1 <asmAcquireLock.retry>

c00003ec <asmReleaseLock>:
c00003ec:	55                   	push   ebp
c00003ed:	89 e5                	mov    ebp,esp
c00003ef:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00003f2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00003f5:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00003fb:	52                   	push   edx
c00003fc:	9d                   	popf   
c00003fd:	5d                   	pop    ebp
c00003fe:	c3                   	ret    

c00003ff <loadGDT>:
c00003ff:	0f 01 15 30 a6 02 c0 	lgdtd  ds:0xc002a630
c0000406:	66 b8 10 00          	mov    ax,0x10
c000040a:	66 8e d8             	mov    ds,ax
c000040d:	66 8e c0             	mov    es,ax
c0000410:	66 8e e0             	mov    fs,ax
c0000413:	66 8e e8             	mov    gs,ax
c0000416:	66 8e d0             	mov    ss,ax
c0000419:	e9 00 00 00 00       	jmp    c000041e <flush2>

c000041e <flush2>:
c000041e:	c3                   	ret    

c000041f <isr0>:
c000041f:	fa                   	cli    
c0000420:	68 00 00 00 00       	push   0x0
c0000425:	68 00 00 00 00       	push   0x0
c000042a:	e9 44 01 00 00       	jmp    c0000573 <int_common_stub>

c000042f <isr1>:
c000042f:	fa                   	cli    
c0000430:	6a 00                	push   0x0
c0000432:	6a 01                	push   0x1
c0000434:	e9 3a 01 00 00       	jmp    c0000573 <int_common_stub>

c0000439 <isr2>:
c0000439:	fa                   	cli    
c000043a:	6a 00                	push   0x0
c000043c:	6a 02                	push   0x2
c000043e:	e9 30 01 00 00       	jmp    c0000573 <int_common_stub>

c0000443 <isr3>:
c0000443:	fa                   	cli    
c0000444:	6a 00                	push   0x0
c0000446:	6a 03                	push   0x3
c0000448:	e9 26 01 00 00       	jmp    c0000573 <int_common_stub>

c000044d <isr4>:
c000044d:	fa                   	cli    
c000044e:	6a 00                	push   0x0
c0000450:	6a 04                	push   0x4
c0000452:	e9 1c 01 00 00       	jmp    c0000573 <int_common_stub>

c0000457 <isr5>:
c0000457:	fa                   	cli    
c0000458:	6a 00                	push   0x0
c000045a:	6a 05                	push   0x5
c000045c:	e9 12 01 00 00       	jmp    c0000573 <int_common_stub>

c0000461 <isr6>:
c0000461:	fa                   	cli    
c0000462:	6a 00                	push   0x0
c0000464:	6a 06                	push   0x6
c0000466:	e9 08 01 00 00       	jmp    c0000573 <int_common_stub>

c000046b <isr7>:
c000046b:	fa                   	cli    
c000046c:	6a 00                	push   0x0
c000046e:	6a 07                	push   0x7
c0000470:	e9 fe 00 00 00       	jmp    c0000573 <int_common_stub>

c0000475 <isr8>:
c0000475:	fa                   	cli    
c0000476:	6a 08                	push   0x8
c0000478:	e9 f6 00 00 00       	jmp    c0000573 <int_common_stub>

c000047d <isr9>:
c000047d:	fa                   	cli    
c000047e:	6a 00                	push   0x0
c0000480:	6a 09                	push   0x9
c0000482:	e9 ec 00 00 00       	jmp    c0000573 <int_common_stub>

c0000487 <isr10>:
c0000487:	fa                   	cli    
c0000488:	6a 0a                	push   0xa
c000048a:	e9 e4 00 00 00       	jmp    c0000573 <int_common_stub>

c000048f <isr11>:
c000048f:	fa                   	cli    
c0000490:	6a 0b                	push   0xb
c0000492:	e9 dc 00 00 00       	jmp    c0000573 <int_common_stub>

c0000497 <isr12>:
c0000497:	fa                   	cli    
c0000498:	6a 0c                	push   0xc
c000049a:	e9 d4 00 00 00       	jmp    c0000573 <int_common_stub>

c000049f <isr13>:
c000049f:	fa                   	cli    
c00004a0:	6a 0d                	push   0xd
c00004a2:	e9 cc 00 00 00       	jmp    c0000573 <int_common_stub>

c00004a7 <isr14>:
c00004a7:	fa                   	cli    
c00004a8:	6a 0e                	push   0xe
c00004aa:	e9 c4 00 00 00       	jmp    c0000573 <int_common_stub>

c00004af <isr15>:
c00004af:	fa                   	cli    
c00004b0:	6a 00                	push   0x0
c00004b2:	6a 0f                	push   0xf
c00004b4:	e9 ba 00 00 00       	jmp    c0000573 <int_common_stub>

c00004b9 <isr16>:
c00004b9:	fa                   	cli    
c00004ba:	6a 00                	push   0x0
c00004bc:	6a 10                	push   0x10
c00004be:	e9 b0 00 00 00       	jmp    c0000573 <int_common_stub>

c00004c3 <isr17>:
c00004c3:	fa                   	cli    
c00004c4:	6a 00                	push   0x0
c00004c6:	6a 11                	push   0x11
c00004c8:	e9 a6 00 00 00       	jmp    c0000573 <int_common_stub>

c00004cd <isr18>:
c00004cd:	fa                   	cli    
c00004ce:	6a 00                	push   0x0
c00004d0:	6a 12                	push   0x12
c00004d2:	e9 9c 00 00 00       	jmp    c0000573 <int_common_stub>

c00004d7 <irq3>:
c00004d7:	fa                   	cli    
c00004d8:	6a 00                	push   0x0
c00004da:	6a 23                	push   0x23
c00004dc:	e9 92 00 00 00       	jmp    c0000573 <int_common_stub>

c00004e1 <irq4>:
c00004e1:	fa                   	cli    
c00004e2:	6a 00                	push   0x0
c00004e4:	6a 24                	push   0x24
c00004e6:	e9 88 00 00 00       	jmp    c0000573 <int_common_stub>

c00004eb <irq5>:
c00004eb:	fa                   	cli    
c00004ec:	6a 00                	push   0x0
c00004ee:	6a 25                	push   0x25
c00004f0:	e9 7e 00 00 00       	jmp    c0000573 <int_common_stub>

c00004f5 <irq6>:
c00004f5:	fa                   	cli    
c00004f6:	6a 00                	push   0x0
c00004f8:	6a 26                	push   0x26
c00004fa:	e9 74 00 00 00       	jmp    c0000573 <int_common_stub>

c00004ff <irq7>:
c00004ff:	fa                   	cli    
c0000500:	6a 00                	push   0x0
c0000502:	6a 27                	push   0x27
c0000504:	e9 6a 00 00 00       	jmp    c0000573 <int_common_stub>

c0000509 <irq8>:
c0000509:	fa                   	cli    
c000050a:	6a 00                	push   0x0
c000050c:	6a 28                	push   0x28
c000050e:	e9 60 00 00 00       	jmp    c0000573 <int_common_stub>

c0000513 <irq9>:
c0000513:	fa                   	cli    
c0000514:	6a 00                	push   0x0
c0000516:	6a 29                	push   0x29
c0000518:	e9 56 00 00 00       	jmp    c0000573 <int_common_stub>

c000051d <irq10>:
c000051d:	fa                   	cli    
c000051e:	6a 00                	push   0x0
c0000520:	6a 2a                	push   0x2a
c0000522:	e9 4c 00 00 00       	jmp    c0000573 <int_common_stub>

c0000527 <irq11>:
c0000527:	fa                   	cli    
c0000528:	6a 00                	push   0x0
c000052a:	6a 2b                	push   0x2b
c000052c:	e9 42 00 00 00       	jmp    c0000573 <int_common_stub>

c0000531 <irq12>:
c0000531:	fa                   	cli    
c0000532:	6a 00                	push   0x0
c0000534:	6a 2c                	push   0x2c
c0000536:	e9 38 00 00 00       	jmp    c0000573 <int_common_stub>

c000053b <irq13>:
c000053b:	fa                   	cli    
c000053c:	6a 00                	push   0x0
c000053e:	6a 2d                	push   0x2d
c0000540:	e9 2e 00 00 00       	jmp    c0000573 <int_common_stub>

c0000545 <irq14>:
c0000545:	fa                   	cli    
c0000546:	6a 00                	push   0x0
c0000548:	6a 2e                	push   0x2e
c000054a:	e9 24 00 00 00       	jmp    c0000573 <int_common_stub>

c000054f <irq15>:
c000054f:	fa                   	cli    
c0000550:	6a 00                	push   0x0
c0000552:	6a 2f                	push   0x2f
c0000554:	e9 1a 00 00 00       	jmp    c0000573 <int_common_stub>

c0000559 <irq1>:
c0000559:	fa                   	cli    
c000055a:	6a 00                	push   0x0
c000055c:	6a 21                	push   0x21
c000055e:	eb 13                	jmp    c0000573 <int_common_stub>

c0000560 <irq2>:
c0000560:	fa                   	cli    
c0000561:	6a 00                	push   0x0
c0000563:	6a 22                	push   0x22
c0000565:	eb 0c                	jmp    c0000573 <int_common_stub>

c0000567 <isr96>:
c0000567:	6a 00                	push   0x0
c0000569:	6a 60                	push   0x60
c000056b:	fb                   	sti    
c000056c:	eb 05                	jmp    c0000573 <int_common_stub>

c000056e <irq0>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 20                	push   0x20

c0000573 <int_common_stub>:
c0000573:	60                   	pusha  
c0000574:	1e                   	push   ds
c0000575:	06                   	push   es
c0000576:	0f a0                	push   fs
c0000578:	0f a8                	push   gs
c000057a:	54                   	push   esp
c000057b:	e8 67 39 01 00       	call   c0013ee7 <int_handler>
c0000580:	81 c4 04 00 00 00    	add    esp,0x4
c0000586:	0f a9                	pop    gs
c0000588:	0f a1                	pop    fs
c000058a:	07                   	pop    es
c000058b:	1f                   	pop    ds
c000058c:	61                   	popa   
c000058d:	81 c4 08 00 00 00    	add    esp,0x8
c0000593:	cf                   	iret   

c0000594 <irq16>:
c0000594:	fa                   	cli    
c0000595:	6a 00                	push   0x0
c0000597:	6a 30                	push   0x30
c0000599:	e9 d5 ff ff ff       	jmp    c0000573 <int_common_stub>

c000059e <irq17>:
c000059e:	fa                   	cli    
c000059f:	6a 00                	push   0x0
c00005a1:	6a 31                	push   0x31
c00005a3:	e9 cb ff ff ff       	jmp    c0000573 <int_common_stub>

c00005a8 <irq18>:
c00005a8:	fa                   	cli    
c00005a9:	6a 00                	push   0x0
c00005ab:	6a 32                	push   0x32
c00005ad:	e9 c1 ff ff ff       	jmp    c0000573 <int_common_stub>

c00005b2 <irq19>:
c00005b2:	fa                   	cli    
c00005b3:	6a 00                	push   0x0
c00005b5:	6a 33                	push   0x33
c00005b7:	e9 b7 ff ff ff       	jmp    c0000573 <int_common_stub>

c00005bc <irq20>:
c00005bc:	fa                   	cli    
c00005bd:	6a 00                	push   0x0
c00005bf:	6a 34                	push   0x34
c00005c1:	e9 ad ff ff ff       	jmp    c0000573 <int_common_stub>

c00005c6 <irq21>:
c00005c6:	fa                   	cli    
c00005c7:	6a 00                	push   0x0
c00005c9:	6a 35                	push   0x35
c00005cb:	e9 a3 ff ff ff       	jmp    c0000573 <int_common_stub>

c00005d0 <irq22>:
c00005d0:	fa                   	cli    
c00005d1:	6a 00                	push   0x0
c00005d3:	6a 36                	push   0x36
c00005d5:	e9 99 ff ff ff       	jmp    c0000573 <int_common_stub>

c00005da <irq23>:
c00005da:	fa                   	cli    
c00005db:	6a 00                	push   0x0
c00005dd:	6a 37                	push   0x37
c00005df:	e9 8f ff ff ff       	jmp    c0000573 <int_common_stub>

c00005e4 <memcmp>:
c00005e4:	56                   	push   esi
c00005e5:	53                   	push   ebx
c00005e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00005ea:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00005ee:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00005f2:	01 d6                	add    esi,edx
c00005f4:	39 f2                	cmp    edx,esi
c00005f6:	74 0e                	je     c0000606 <memcmp+0x22>
c00005f8:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c00005fb:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00005fe:	38 c8                	cmp    al,cl
c0000600:	75 08                	jne    c000060a <memcmp+0x26>
c0000602:	42                   	inc    edx
c0000603:	43                   	inc    ebx
c0000604:	eb ee                	jmp    c00005f4 <memcmp+0x10>
c0000606:	31 c0                	xor    eax,eax
c0000608:	eb 02                	jmp    c000060c <memcmp+0x28>
c000060a:	29 c8                	sub    eax,ecx
c000060c:	5b                   	pop    ebx
c000060d:	5e                   	pop    esi
c000060e:	c3                   	ret    

c000060f <memmove>:
c000060f:	56                   	push   esi
c0000610:	53                   	push   ebx
c0000611:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000615:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000619:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000061d:	39 c8                	cmp    eax,ecx
c000061f:	73 12                	jae    c0000633 <memmove+0x24>
c0000621:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000624:	89 c3                	mov    ebx,eax
c0000626:	39 f1                	cmp    ecx,esi
c0000628:	74 1a                	je     c0000644 <memmove+0x35>
c000062a:	8a 11                	mov    dl,BYTE PTR [ecx]
c000062c:	43                   	inc    ebx
c000062d:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c0000630:	41                   	inc    ecx
c0000631:	eb f3                	jmp    c0000626 <memmove+0x17>
c0000633:	76 0f                	jbe    c0000644 <memmove+0x35>
c0000635:	85 d2                	test   edx,edx
c0000637:	74 0b                	je     c0000644 <memmove+0x35>
c0000639:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c000063d:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c0000641:	4a                   	dec    edx
c0000642:	eb f1                	jmp    c0000635 <memmove+0x26>
c0000644:	5b                   	pop    ebx
c0000645:	5e                   	pop    esi
c0000646:	c3                   	ret    

c0000647 <memcpy>:
c0000647:	57                   	push   edi
c0000648:	56                   	push   esi
c0000649:	53                   	push   ebx
c000064a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000064e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000652:	89 da                	mov    edx,ebx
c0000654:	89 d9                	mov    ecx,ebx
c0000656:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000065a:	83 e2 fc             	and    edx,0xfffffffc
c000065d:	c1 e9 02             	shr    ecx,0x2
c0000660:	89 c7                	mov    edi,eax
c0000662:	fc                   	cld    
c0000663:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000665:	8d 0c 16             	lea    ecx,[esi+edx*1]
c0000668:	01 c2                	add    edx,eax
c000066a:	01 de                	add    esi,ebx
c000066c:	39 f1                	cmp    ecx,esi
c000066e:	74 09                	je     c0000679 <memcpy+0x32>
c0000670:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000672:	42                   	inc    edx
c0000673:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000676:	41                   	inc    ecx
c0000677:	eb f3                	jmp    c000066c <memcpy+0x25>
c0000679:	5b                   	pop    ebx
c000067a:	5e                   	pop    esi
c000067b:	5f                   	pop    edi
c000067c:	c3                   	ret    

c000067d <memset>:
c000067d:	53                   	push   ebx
c000067e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000682:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000686:	89 c2                	mov    edx,eax
c0000688:	01 c1                	add    ecx,eax
c000068a:	39 ca                	cmp    edx,ecx
c000068c:	74 0a                	je     c0000698 <memset+0x1b>
c000068e:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0000692:	42                   	inc    edx
c0000693:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000696:	eb f2                	jmp    c000068a <memset+0xd>
c0000698:	5b                   	pop    ebx
c0000699:	c3                   	ret    

c000069a <strlen>:
c000069a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000069e:	31 c0                	xor    eax,eax
c00006a0:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006a4:	74 03                	je     c00006a9 <strlen+0xf>
c00006a6:	40                   	inc    eax
c00006a7:	eb f7                	jmp    c00006a0 <strlen+0x6>
c00006a9:	c3                   	ret    

c00006aa <strpbrk>:
c00006aa:	53                   	push   ebx
c00006ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006af:	8a 08                	mov    cl,BYTE PTR [eax]
c00006b1:	84 c9                	test   cl,cl
c00006b3:	74 14                	je     c00006c9 <strpbrk+0x1f>
c00006b5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00006b9:	8a 1a                	mov    bl,BYTE PTR [edx]
c00006bb:	84 db                	test   bl,bl
c00006bd:	74 07                	je     c00006c6 <strpbrk+0x1c>
c00006bf:	38 cb                	cmp    bl,cl
c00006c1:	74 08                	je     c00006cb <strpbrk+0x21>
c00006c3:	42                   	inc    edx
c00006c4:	eb f3                	jmp    c00006b9 <strpbrk+0xf>
c00006c6:	40                   	inc    eax
c00006c7:	eb e6                	jmp    c00006af <strpbrk+0x5>
c00006c9:	31 c0                	xor    eax,eax
c00006cb:	5b                   	pop    ebx
c00006cc:	c3                   	ret    

c00006cd <strtok>:
c00006cd:	56                   	push   esi
c00006ce:	53                   	push   ebx
c00006cf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00006d3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006d7:	85 db                	test   ebx,ebx
c00006d9:	75 0e                	jne    c00006e9 <strtok+0x1c>
c00006db:	8b 1d 1c a2 02 c0    	mov    ebx,DWORD PTR ds:0xc002a21c
c00006e1:	85 db                	test   ebx,ebx
c00006e3:	75 04                	jne    c00006e9 <strtok+0x1c>
c00006e5:	31 db                	xor    ebx,ebx
c00006e7:	eb 2e                	jmp    c0000717 <strtok+0x4a>
c00006e9:	56                   	push   esi
c00006ea:	53                   	push   ebx
c00006eb:	e8 ba ff ff ff       	call   c00006aa <strpbrk>
c00006f0:	5a                   	pop    edx
c00006f1:	a3 1c a2 02 c0       	mov    ds:0xc002a21c,eax
c00006f6:	59                   	pop    ecx
c00006f7:	a1 1c a2 02 c0       	mov    eax,ds:0xc002a21c
c00006fc:	39 d8                	cmp    eax,ebx
c00006fe:	75 07                	jne    c0000707 <strtok+0x3a>
c0000700:	43                   	inc    ebx
c0000701:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000705:	eb e2                	jmp    c00006e9 <strtok+0x1c>
c0000707:	85 c0                	test   eax,eax
c0000709:	74 da                	je     c00006e5 <strtok+0x18>
c000070b:	8d 50 01             	lea    edx,[eax+0x1]
c000070e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000711:	89 15 1c a2 02 c0    	mov    DWORD PTR ds:0xc002a21c,edx
c0000717:	89 d8                	mov    eax,ebx
c0000719:	5b                   	pop    ebx
c000071a:	5e                   	pop    esi
c000071b:	c3                   	ret    

c000071c <strcpy>:
c000071c:	53                   	push   ebx
c000071d:	31 d2                	xor    edx,edx
c000071f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000723:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000727:	8d 1c 10             	lea    ebx,[eax+edx*1]
c000072a:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c000072d:	84 c9                	test   cl,cl
c000072f:	74 06                	je     c0000737 <strcpy+0x1b>
c0000731:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0000734:	42                   	inc    edx
c0000735:	eb ec                	jmp    c0000723 <strcpy+0x7>
c0000737:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000073a:	5b                   	pop    ebx
c000073b:	c3                   	ret    

c000073c <strncpy>:
c000073c:	56                   	push   esi
c000073d:	53                   	push   ebx
c000073e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000742:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000746:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000074a:	89 c3                	mov    ebx,eax
c000074c:	85 c9                	test   ecx,ecx
c000074e:	74 1a                	je     c000076a <strncpy+0x2e>
c0000750:	46                   	inc    esi
c0000751:	43                   	inc    ebx
c0000752:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c0000755:	49                   	dec    ecx
c0000756:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c0000759:	84 d2                	test   dl,dl
c000075b:	75 ef                	jne    c000074c <strncpy+0x10>
c000075d:	31 d2                	xor    edx,edx
c000075f:	39 d1                	cmp    ecx,edx
c0000761:	74 07                	je     c000076a <strncpy+0x2e>
c0000763:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c0000767:	42                   	inc    edx
c0000768:	eb f5                	jmp    c000075f <strncpy+0x23>
c000076a:	5b                   	pop    ebx
c000076b:	5e                   	pop    esi
c000076c:	c3                   	ret    

c000076d <strcmp>:
c000076d:	31 c9                	xor    ecx,ecx
c000076f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000773:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0000777:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c000077b:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c000077f:	38 d0                	cmp    al,dl
c0000781:	75 08                	jne    c000078b <strcmp+0x1e>
c0000783:	41                   	inc    ecx
c0000784:	84 c0                	test   al,al
c0000786:	75 e7                	jne    c000076f <strcmp+0x2>
c0000788:	31 c0                	xor    eax,eax
c000078a:	c3                   	ret    
c000078b:	29 d0                	sub    eax,edx
c000078d:	c3                   	ret    

c000078e <strchr>:
c000078e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000792:	8a 10                	mov    dl,BYTE PTR [eax]
c0000794:	84 d2                	test   dl,dl
c0000796:	74 09                	je     c00007a1 <strchr+0x13>
c0000798:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c000079c:	74 05                	je     c00007a3 <strchr+0x15>
c000079e:	40                   	inc    eax
c000079f:	eb f1                	jmp    c0000792 <strchr+0x4>
c00007a1:	31 c0                	xor    eax,eax
c00007a3:	c3                   	ret    

c00007a4 <strncmp>:
c00007a4:	56                   	push   esi
c00007a5:	53                   	push   ebx
c00007a6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00007aa:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007b2:	01 d6                	add    esi,edx
c00007b4:	39 f2                	cmp    edx,esi
c00007b6:	74 12                	je     c00007ca <strncmp+0x26>
c00007b8:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c00007bb:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007be:	38 c8                	cmp    al,cl
c00007c0:	75 0c                	jne    c00007ce <strncmp+0x2a>
c00007c2:	42                   	inc    edx
c00007c3:	84 c0                	test   al,al
c00007c5:	74 03                	je     c00007ca <strncmp+0x26>
c00007c7:	43                   	inc    ebx
c00007c8:	eb ea                	jmp    c00007b4 <strncmp+0x10>
c00007ca:	31 c0                	xor    eax,eax
c00007cc:	eb 02                	jmp    c00007d0 <strncmp+0x2c>
c00007ce:	29 c8                	sub    eax,ecx
c00007d0:	5b                   	pop    ebx
c00007d1:	5e                   	pop    esi
c00007d2:	c3                   	ret    

c00007d3 <strcat>:
c00007d3:	53                   	push   ebx
c00007d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d8:	89 c1                	mov    ecx,eax
c00007da:	8d 51 01             	lea    edx,[ecx+0x1]
c00007dd:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007e1:	74 04                	je     c00007e7 <strcat+0x14>
c00007e3:	89 d1                	mov    ecx,edx
c00007e5:	eb f3                	jmp    c00007da <strcat+0x7>
c00007e7:	31 d2                	xor    edx,edx
c00007e9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007ed:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c00007f0:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c00007f3:	42                   	inc    edx
c00007f4:	84 db                	test   bl,bl
c00007f6:	75 f1                	jne    c00007e9 <strcat+0x16>
c00007f8:	5b                   	pop    ebx
c00007f9:	c3                   	ret    

c00007fa <strncat>:
c00007fa:	56                   	push   esi
c00007fb:	53                   	push   ebx
c00007fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000800:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000804:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000808:	89 c2                	mov    edx,eax
c000080a:	85 db                	test   ebx,ebx
c000080c:	74 23                	je     c0000831 <strncat+0x37>
c000080e:	8d 72 01             	lea    esi,[edx+0x1]
c0000811:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c0000815:	74 04                	je     c000081b <strncat+0x21>
c0000817:	89 f2                	mov    edx,esi
c0000819:	eb f3                	jmp    c000080e <strncat+0x14>
c000081b:	8d 34 19             	lea    esi,[ecx+ebx*1]
c000081e:	41                   	inc    ecx
c000081f:	42                   	inc    edx
c0000820:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000823:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000826:	84 db                	test   bl,bl
c0000828:	74 07                	je     c0000831 <strncat+0x37>
c000082a:	39 f1                	cmp    ecx,esi
c000082c:	75 f0                	jne    c000081e <strncat+0x24>
c000082e:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000831:	5b                   	pop    ebx
c0000832:	5e                   	pop    esi
c0000833:	c3                   	ret    

c0000834 <strstr>:
c0000834:	57                   	push   edi
c0000835:	56                   	push   esi
c0000836:	53                   	push   ebx
c0000837:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000083b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000083f:	57                   	push   edi
c0000840:	e8 55 fe ff ff       	call   c000069a <strlen>
c0000845:	59                   	pop    ecx
c0000846:	89 c6                	mov    esi,eax
c0000848:	85 c0                	test   eax,eax
c000084a:	74 1f                	je     c000086b <strstr+0x37>
c000084c:	53                   	push   ebx
c000084d:	e8 48 fe ff ff       	call   c000069a <strlen>
c0000852:	5a                   	pop    edx
c0000853:	39 f0                	cmp    eax,esi
c0000855:	72 12                	jb     c0000869 <strstr+0x35>
c0000857:	56                   	push   esi
c0000858:	57                   	push   edi
c0000859:	53                   	push   ebx
c000085a:	e8 85 fd ff ff       	call   c00005e4 <memcmp>
c000085f:	83 c4 0c             	add    esp,0xc
c0000862:	85 c0                	test   eax,eax
c0000864:	74 05                	je     c000086b <strstr+0x37>
c0000866:	43                   	inc    ebx
c0000867:	eb e3                	jmp    c000084c <strstr+0x18>
c0000869:	31 db                	xor    ebx,ebx
c000086b:	89 d8                	mov    eax,ebx
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	5f                   	pop    edi
c0000870:	c3                   	ret    

c0000871 <toupper>:
c0000871:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000875:	0f b6 d0             	movzx  edx,al
c0000878:	f6 82 a0 5d 02 c0 02 	test   BYTE PTR [edx-0x3ffda260],0x2
c000087f:	74 03                	je     c0000884 <toupper+0x13>
c0000881:	83 e8 20             	sub    eax,0x20
c0000884:	c3                   	ret    

c0000885 <tolower>:
c0000885:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000889:	0f b6 d0             	movzx  edx,al
c000088c:	f6 82 a0 5d 02 c0 01 	test   BYTE PTR [edx-0x3ffda260],0x1
c0000893:	74 03                	je     c0000898 <tolower+0x13>
c0000895:	83 c0 20             	add    eax,0x20
c0000898:	c3                   	ret    

c0000899 <simple_strtoul>:
c0000899:	55                   	push   ebp
c000089a:	57                   	push   edi
c000089b:	56                   	push   esi
c000089c:	53                   	push   ebx
c000089d:	83 ec 08             	sub    esp,0x8
c00008a0:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008a4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008a8:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00008ab:	f6 82 a0 5d 02 c0 08 	test   BYTE PTR [edx-0x3ffda260],0x8
c00008b2:	74 03                	je     c00008b7 <simple_strtoul+0x1e>
c00008b4:	41                   	inc    ecx
c00008b5:	eb f1                	jmp    c00008a8 <simple_strtoul+0xf>
c00008b7:	80 fa 09             	cmp    dl,0x9
c00008ba:	74 f8                	je     c00008b4 <simple_strtoul+0x1b>
c00008bc:	80 fa 2d             	cmp    dl,0x2d
c00008bf:	75 0b                	jne    c00008cc <simple_strtoul+0x33>
c00008c1:	41                   	inc    ecx
c00008c2:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00008ca:	eb 0e                	jmp    c00008da <simple_strtoul+0x41>
c00008cc:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00008d4:	80 fa 2b             	cmp    dl,0x2b
c00008d7:	75 01                	jne    c00008da <simple_strtoul+0x41>
c00008d9:	41                   	inc    ecx
c00008da:	85 f6                	test   esi,esi
c00008dc:	75 22                	jne    c0000900 <simple_strtoul+0x67>
c00008de:	be 0a 00 00 00       	mov    esi,0xa
c00008e3:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c00008e6:	75 5a                	jne    c0000942 <simple_strtoul+0xa9>
c00008e8:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c00008ec:	50                   	push   eax
c00008ed:	e8 93 ff ff ff       	call   c0000885 <tolower>
c00008f2:	5a                   	pop    edx
c00008f3:	83 f8 78             	cmp    eax,0x78
c00008f6:	74 03                	je     c00008fb <simple_strtoul+0x62>
c00008f8:	41                   	inc    ecx
c00008f9:	eb 16                	jmp    c0000911 <simple_strtoul+0x78>
c00008fb:	83 c1 02             	add    ecx,0x2
c00008fe:	eb 22                	jmp    c0000922 <simple_strtoul+0x89>
c0000900:	8d 46 fe             	lea    eax,[esi-0x2]
c0000903:	83 f8 22             	cmp    eax,0x22
c0000906:	0f 87 b7 00 00 00    	ja     c00009c3 <simple_strtoul+0x12a>
c000090c:	83 fe 08             	cmp    esi,0x8
c000090f:	75 0c                	jne    c000091d <simple_strtoul+0x84>
c0000911:	be 08 00 00 00       	mov    esi,0x8
c0000916:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000919:	75 27                	jne    c0000942 <simple_strtoul+0xa9>
c000091b:	eb 1f                	jmp    c000093c <simple_strtoul+0xa3>
c000091d:	83 fe 10             	cmp    esi,0x10
c0000920:	75 20                	jne    c0000942 <simple_strtoul+0xa9>
c0000922:	be 10 00 00 00       	mov    esi,0x10
c0000927:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c000092a:	75 16                	jne    c0000942 <simple_strtoul+0xa9>
c000092c:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000930:	50                   	push   eax
c0000931:	e8 4f ff ff ff       	call   c0000885 <tolower>
c0000936:	5d                   	pop    ebp
c0000937:	83 f8 78             	cmp    eax,0x78
c000093a:	74 03                	je     c000093f <simple_strtoul+0xa6>
c000093c:	41                   	inc    ecx
c000093d:	eb 03                	jmp    c0000942 <simple_strtoul+0xa9>
c000093f:	83 c1 02             	add    ecx,0x2
c0000942:	31 ed                	xor    ebp,ebp
c0000944:	31 db                	xor    ebx,ebx
c0000946:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000094d:	8a 11                	mov    dl,BYTE PTR [ecx]
c000094f:	84 d2                	test   dl,dl
c0000951:	74 27                	je     c000097a <simple_strtoul+0xe1>
c0000953:	0f b6 fa             	movzx  edi,dl
c0000956:	f6 87 a0 5d 02 c0 04 	test   BYTE PTR [edi-0x3ffda260],0x4
c000095d:	74 05                	je     c0000964 <simple_strtoul+0xcb>
c000095f:	83 ef 30             	sub    edi,0x30
c0000962:	eb 22                	jmp    c0000986 <simple_strtoul+0xed>
c0000964:	0f be d2             	movsx  edx,dl
c0000967:	52                   	push   edx
c0000968:	e8 04 ff ff ff       	call   c0000871 <toupper>
c000096d:	5f                   	pop    edi
c000096e:	0f b6 d0             	movzx  edx,al
c0000971:	f6 82 a0 5d 02 c0 01 	test   BYTE PTR [edx-0x3ffda260],0x1
c0000978:	75 09                	jne    c0000983 <simple_strtoul+0xea>
c000097a:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000097f:	75 2d                	jne    c00009ae <simple_strtoul+0x115>
c0000981:	eb 57                	jmp    c00009da <simple_strtoul+0x141>
c0000983:	8d 78 c9             	lea    edi,[eax-0x37]
c0000986:	39 f7                	cmp    edi,esi
c0000988:	73 f0                	jae    c000097a <simple_strtoul+0xe1>
c000098a:	31 d2                	xor    edx,edx
c000098c:	89 f8                	mov    eax,edi
c000098e:	f7 d0                	not    eax
c0000990:	f7 f6                	div    esi
c0000992:	39 d8                	cmp    eax,ebx
c0000994:	72 0e                	jb     c00009a4 <simple_strtoul+0x10b>
c0000996:	0f af de             	imul   ebx,esi
c0000999:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009a0:	01 fb                	add    ebx,edi
c00009a2:	eb 07                	jmp    c00009ab <simple_strtoul+0x112>
c00009a4:	bd 01 00 00 00       	mov    ebp,0x1
c00009a9:	31 db                	xor    ebx,ebx
c00009ab:	41                   	inc    ecx
c00009ac:	eb 9f                	jmp    c000094d <simple_strtoul+0xb4>
c00009ae:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009b1:	09 d8                	or     eax,ebx
c00009b3:	75 1f                	jne    c00009d4 <simple_strtoul+0x13b>
c00009b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009b9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00009bd:	31 db                	xor    ebx,ebx
c00009bf:	89 38                	mov    DWORD PTR [eax],edi
c00009c1:	eb 17                	jmp    c00009da <simple_strtoul+0x141>
c00009c3:	31 db                	xor    ebx,ebx
c00009c5:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00009ca:	74 14                	je     c00009e0 <simple_strtoul+0x147>
c00009cc:	31 ed                	xor    ebp,ebp
c00009ce:	85 c9                	test   ecx,ecx
c00009d0:	75 e3                	jne    c00009b5 <simple_strtoul+0x11c>
c00009d2:	31 db                	xor    ebx,ebx
c00009d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009d8:	89 08                	mov    DWORD PTR [eax],ecx
c00009da:	4d                   	dec    ebp
c00009db:	75 03                	jne    c00009e0 <simple_strtoul+0x147>
c00009dd:	83 cb ff             	or     ebx,0xffffffff
c00009e0:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00009e5:	75 02                	jne    c00009e9 <simple_strtoul+0x150>
c00009e7:	f7 db                	neg    ebx
c00009e9:	83 c4 08             	add    esp,0x8
c00009ec:	89 d8                	mov    eax,ebx
c00009ee:	5b                   	pop    ebx
c00009ef:	5e                   	pop    esi
c00009f0:	5f                   	pop    edi
c00009f1:	5d                   	pop    ebp
c00009f2:	c3                   	ret    

c00009f3 <largebin_index>:
c00009f3:	89 c2                	mov    edx,eax
c00009f5:	c1 ea 08             	shr    edx,0x8
c00009f8:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00009fe:	77 10                	ja     c0000a10 <largebin_index+0x1d>
c0000a00:	0f bd d2             	bsr    edx,edx
c0000a03:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000a06:	d3 e8                	shr    eax,cl
c0000a08:	83 e0 03             	and    eax,0x3
c0000a0b:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000a0f:	c3                   	ret    
c0000a10:	b8 5f 00 00 00       	mov    eax,0x5f
c0000a15:	c3                   	ret    

c0000a16 <malloc_init_state>:
c0000a16:	53                   	push   ebx
c0000a17:	8d 50 34             	lea    edx,[eax+0x34]
c0000a1a:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000a20:	89 d1                	mov    ecx,edx
c0000a22:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000a25:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000a28:	83 c2 08             	add    edx,0x8
c0000a2b:	39 da                	cmp    edx,ebx
c0000a2d:	75 f3                	jne    c0000a22 <malloc_init_state+0xc>
c0000a2f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a31:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000a3b:	83 e2 03             	and    edx,0x3
c0000a3e:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000a48:	83 ca 48             	or     edx,0x48
c0000a4b:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000a55:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000a5f:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000a66:	89 10                	mov    DWORD PTR [eax],edx
c0000a68:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000a6b:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000a75:	5b                   	pop    ebx
c0000a76:	c3                   	ret    

c0000a77 <malloc_consolidate>:
c0000a77:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a79:	85 d2                	test   edx,edx
c0000a7b:	0f 84 d8 00 00 00    	je     c0000b59 <malloc_consolidate+0xe2>
c0000a81:	55                   	push   ebp
c0000a82:	83 e2 fd             	and    edx,0xfffffffd
c0000a85:	57                   	push   edi
c0000a86:	89 c5                	mov    ebp,eax
c0000a88:	56                   	push   esi
c0000a89:	8d 78 34             	lea    edi,[eax+0x34]
c0000a8c:	53                   	push   ebx
c0000a8d:	83 ec 10             	sub    esp,0x10
c0000a90:	89 10                	mov    DWORD PTR [eax],edx
c0000a92:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000a96:	c1 ea 03             	shr    edx,0x3
c0000a99:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000a9d:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000aa1:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	0f 84 98 00 00 00    	je     c0000b44 <malloc_consolidate+0xcd>
c0000aac:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ab3:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000ab6:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ab9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000abd:	89 f9                	mov    ecx,edi
c0000abf:	83 e1 fe             	and    ecx,0xfffffffe
c0000ac2:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ac5:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000ac8:	83 e3 fc             	and    ebx,0xfffffffc
c0000acb:	83 e7 01             	and    edi,0x1
c0000ace:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000ad1:	75 14                	jne    c0000ae7 <malloc_consolidate+0x70>
c0000ad3:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000ad5:	29 fa                	sub    edx,edi
c0000ad7:	01 f9                	add    ecx,edi
c0000ad9:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000adc:	89 fb                	mov    ebx,edi
c0000ade:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000ae1:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000ae4:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000ae7:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000aea:	74 40                	je     c0000b2c <malloc_consolidate+0xb5>
c0000aec:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000aef:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000af2:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000af6:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000af9:	83 e7 01             	and    edi,0x1
c0000afc:	75 0e                	jne    c0000b0c <malloc_consolidate+0x95>
c0000afe:	01 d9                	add    ecx,ebx
c0000b00:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000b03:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000b06:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000b09:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000b0c:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000b0f:	89 ce                	mov    esi,ecx
c0000b11:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000b14:	83 ce 01             	or     esi,0x1
c0000b17:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000b1a:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000b1d:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000b20:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000b24:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000b27:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000b2a:	eb 0c                	jmp    c0000b38 <malloc_consolidate+0xc1>
c0000b2c:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000b2f:	83 c9 01             	or     ecx,0x1
c0000b32:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000b35:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000b38:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000b3c:	85 d2                	test   edx,edx
c0000b3e:	0f 85 6f ff ff ff    	jne    c0000ab3 <malloc_consolidate+0x3c>
c0000b44:	83 c5 04             	add    ebp,0x4
c0000b47:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000b4b:	0f 85 50 ff ff ff    	jne    c0000aa1 <malloc_consolidate+0x2a>
c0000b51:	83 c4 10             	add    esp,0x10
c0000b54:	5b                   	pop    ebx
c0000b55:	5e                   	pop    esi
c0000b56:	5f                   	pop    edi
c0000b57:	5d                   	pop    ebp
c0000b58:	c3                   	ret    
c0000b59:	e9 b8 fe ff ff       	jmp    c0000a16 <malloc_init_state>

c0000b5e <dlfree>:
c0000b5e:	57                   	push   edi
c0000b5f:	56                   	push   esi
c0000b60:	53                   	push   ebx
c0000b61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000b65:	85 db                	test   ebx,ebx
c0000b67:	0f 84 e2 00 00 00    	je     c0000c4f <dlfree+0xf1>
c0000b6d:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000b70:	8b 0d 20 a2 02 c0    	mov    ecx,DWORD PTR ds:0xc002a220
c0000b76:	89 f0                	mov    eax,esi
c0000b78:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000b7b:	83 e0 fc             	and    eax,0xfffffffc
c0000b7e:	39 c1                	cmp    ecx,eax
c0000b80:	72 24                	jb     c0000ba6 <dlfree+0x48>
c0000b82:	83 c9 03             	or     ecx,0x3
c0000b85:	c1 e8 03             	shr    eax,0x3
c0000b88:	89 0d 20 a2 02 c0    	mov    DWORD PTR ds:0xc002a220,ecx
c0000b8e:	83 e8 02             	sub    eax,0x2
c0000b91:	8b 0c 85 24 a2 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd5ddc]
c0000b98:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000b9a:	89 14 85 24 a2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5ddc],edx
c0000ba1:	e9 a9 00 00 00       	jmp    c0000c4f <dlfree+0xf1>
c0000ba6:	83 e6 02             	and    esi,0x2
c0000ba9:	0f 85 a0 00 00 00    	jne    c0000c4f <dlfree+0xf1>
c0000baf:	83 c9 01             	or     ecx,0x1
c0000bb2:	8d 34 02             	lea    esi,[edx+eax*1]
c0000bb5:	89 0d 20 a2 02 c0    	mov    DWORD PTR ds:0xc002a220,ecx
c0000bbb:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000bbe:	83 e1 fc             	and    ecx,0xfffffffc
c0000bc1:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000bc5:	75 13                	jne    c0000bda <dlfree+0x7c>
c0000bc7:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000bca:	29 da                	sub    edx,ebx
c0000bcc:	01 d8                	add    eax,ebx
c0000bce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000bd1:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000bd4:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000bd7:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000bda:	39 35 4c a2 02 c0    	cmp    DWORD PTR ds:0xc002a24c,esi
c0000be0:	74 40                	je     c0000c22 <dlfree+0xc4>
c0000be2:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000be6:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000be9:	80 e3 01             	and    bl,0x1
c0000bec:	75 0e                	jne    c0000bfc <dlfree+0x9e>
c0000bee:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000bf1:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000bf4:	01 c8                	add    eax,ecx
c0000bf6:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000bf9:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000bfc:	8b 0d 5c a2 02 c0    	mov    ecx,DWORD PTR ds:0xc002a25c
c0000c02:	c7 42 0c 54 a2 02 c0 	mov    DWORD PTR [edx+0xc],0xc002a254
c0000c09:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000c0c:	89 15 5c a2 02 c0    	mov    DWORD PTR ds:0xc002a25c,edx
c0000c12:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000c15:	89 c1                	mov    ecx,eax
c0000c17:	83 c9 01             	or     ecx,0x1
c0000c1a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c1d:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000c20:	eb 10                	jmp    c0000c32 <dlfree+0xd4>
c0000c22:	01 c8                	add    eax,ecx
c0000c24:	89 c1                	mov    ecx,eax
c0000c26:	83 c9 01             	or     ecx,0x1
c0000c29:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c2c:	89 15 4c a2 02 c0    	mov    DWORD PTR ds:0xc002a24c,edx
c0000c32:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000c37:	76 16                	jbe    c0000c4f <dlfree+0xf1>
c0000c39:	f6 05 20 a2 02 c0 02 	test   BYTE PTR ds:0xc002a220,0x2
c0000c40:	74 0d                	je     c0000c4f <dlfree+0xf1>
c0000c42:	5b                   	pop    ebx
c0000c43:	b8 20 a2 02 c0       	mov    eax,0xc002a220
c0000c48:	5e                   	pop    esi
c0000c49:	5f                   	pop    edi
c0000c4a:	e9 28 fe ff ff       	jmp    c0000a77 <malloc_consolidate>
c0000c4f:	5b                   	pop    ebx
c0000c50:	5e                   	pop    esi
c0000c51:	5f                   	pop    edi
c0000c52:	c3                   	ret    

c0000c53 <sYSMALLOc>:
c0000c53:	55                   	push   ebp
c0000c54:	57                   	push   edi
c0000c55:	56                   	push   esi
c0000c56:	53                   	push   ebx
c0000c57:	89 d3                	mov    ebx,edx
c0000c59:	83 ec 2c             	sub    esp,0x2c
c0000c5c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000c60:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000c66:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000c69:	8d 42 ff             	lea    eax,[edx-0x1]
c0000c6c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000c70:	74 1f                	je     c0000c91 <sYSMALLOc+0x3e>
c0000c72:	89 d8                	mov    eax,ebx
c0000c74:	e8 fe fd ff ff       	call   c0000a77 <malloc_consolidate>
c0000c79:	83 ec 0c             	sub    esp,0xc
c0000c7c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000c80:	83 e8 07             	sub    eax,0x7
c0000c83:	50                   	push   eax
c0000c84:	e8 30 02 00 00       	call   c0000eb9 <dlmalloc>
c0000c89:	83 c4 10             	add    esp,0x10
c0000c8c:	e9 20 02 00 00       	jmp    c0000eb1 <sYSMALLOc+0x25e>
c0000c91:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000c94:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000c9a:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000c9d:	83 e0 fc             	and    eax,0xfffffffc
c0000ca0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ca4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ca8:	83 c0 10             	add    eax,0x10
c0000cab:	01 c1                	add    ecx,eax
c0000cad:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000cb1:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000cb8:	74 04                	je     c0000cbe <sYSMALLOc+0x6b>
c0000cba:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000cbe:	f7 da                	neg    edx
c0000cc0:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000cc4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000cc8:	21 d1                	and    ecx,edx
c0000cca:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000cce:	7f 07                	jg     c0000cd7 <sYSMALLOc+0x84>
c0000cd0:	31 c0                	xor    eax,eax
c0000cd2:	e9 da 01 00 00       	jmp    c0000eb1 <sYSMALLOc+0x25e>
c0000cd7:	83 ec 0c             	sub    esp,0xc
c0000cda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000cde:	e8 90 e2 00 00       	call   c000ef73 <sbrk>
c0000ce3:	83 c4 10             	add    esp,0x10
c0000ce6:	89 c6                	mov    esi,eax
c0000ce8:	83 f8 ff             	cmp    eax,0xffffffff
c0000ceb:	74 e3                	je     c0000cd0 <sYSMALLOc+0x7d>
c0000ced:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000cf1:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000cf5:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000cf8:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000cfe:	39 f1                	cmp    ecx,esi
c0000d00:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000d06:	75 13                	jne    c0000d1b <sYSMALLOc+0xc8>
c0000d08:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d0c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d10:	83 c8 01             	or     eax,0x1
c0000d13:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000d16:	e9 3e 01 00 00       	jmp    c0000e59 <sYSMALLOc+0x206>
c0000d1b:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000d21:	88 d0                	mov    al,dl
c0000d23:	83 e0 01             	and    eax,0x1
c0000d26:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d2b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000d2f:	0f 95 c0             	setne  al
c0000d32:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000d36:	39 f1                	cmp    ecx,esi
c0000d38:	76 12                	jbe    c0000d4c <sYSMALLOc+0xf9>
c0000d3a:	84 c0                	test   al,al
c0000d3c:	74 0e                	je     c0000d4c <sYSMALLOc+0xf9>
c0000d3e:	83 e2 fe             	and    edx,0xfffffffe
c0000d41:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000d47:	e9 83 00 00 00       	jmp    c0000dcf <sYSMALLOc+0x17c>
c0000d4c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000d51:	74 7c                	je     c0000dcf <sYSMALLOc+0x17c>
c0000d53:	84 c0                	test   al,al
c0000d55:	74 0c                	je     c0000d63 <sYSMALLOc+0x110>
c0000d57:	89 f0                	mov    eax,esi
c0000d59:	29 c8                	sub    eax,ecx
c0000d5b:	01 e8                	add    eax,ebp
c0000d5d:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000d63:	89 f2                	mov    edx,esi
c0000d65:	83 e2 07             	and    edx,0x7
c0000d68:	74 0c                	je     c0000d76 <sYSMALLOc+0x123>
c0000d6a:	b8 08 00 00 00       	mov    eax,0x8
c0000d6f:	29 d0                	sub    eax,edx
c0000d71:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000d74:	eb 04                	jmp    c0000d7a <sYSMALLOc+0x127>
c0000d76:	89 f5                	mov    ebp,esi
c0000d78:	31 c0                	xor    eax,eax
c0000d7a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d7e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d82:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d86:	01 c1                	add    ecx,eax
c0000d88:	83 ec 0c             	sub    esp,0xc
c0000d8b:	01 f1                	add    ecx,esi
c0000d8d:	01 ca                	add    edx,ecx
c0000d8f:	29 c8                	sub    eax,ecx
c0000d91:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000d95:	01 c2                	add    edx,eax
c0000d97:	52                   	push   edx
c0000d98:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000d9c:	e8 d2 e1 00 00       	call   c000ef73 <sbrk>
c0000da1:	83 c4 10             	add    esp,0x10
c0000da4:	83 f8 ff             	cmp    eax,0xffffffff
c0000da7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000dab:	75 0f                	jne    c0000dbc <sYSMALLOc+0x169>
c0000dad:	83 ec 0c             	sub    esp,0xc
c0000db0:	6a 00                	push   0x0
c0000db2:	e8 bc e1 00 00       	call   c000ef73 <sbrk>
c0000db7:	83 c4 10             	add    esp,0x10
c0000dba:	eb 30                	jmp    c0000dec <sYSMALLOc+0x199>
c0000dbc:	39 c6                	cmp    esi,eax
c0000dbe:	76 33                	jbe    c0000df3 <sYSMALLOc+0x1a0>
c0000dc0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000dc4:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000dcb:	01 f0                	add    eax,esi
c0000dcd:	eb 1d                	jmp    c0000dec <sYSMALLOc+0x199>
c0000dcf:	83 ec 0c             	sub    esp,0xc
c0000dd2:	89 f5                	mov    ebp,esi
c0000dd4:	6a 00                	push   0x0
c0000dd6:	e8 98 e1 00 00       	call   c000ef73 <sbrk>
c0000ddb:	89 c2                	mov    edx,eax
c0000ddd:	29 f2                	sub    edx,esi
c0000ddf:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000de3:	83 c4 10             	add    esp,0x10
c0000de6:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000dec:	31 d2                	xor    edx,edx
c0000dee:	83 f8 ff             	cmp    eax,0xffffffff
c0000df1:	74 66                	je     c0000e59 <sYSMALLOc+0x206>
c0000df3:	29 e8                	sub    eax,ebp
c0000df5:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000df8:	01 d0                	add    eax,edx
c0000dfa:	83 c8 01             	or     eax,0x1
c0000dfd:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000e00:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e06:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e0b:	74 4c                	je     c0000e59 <sYSMALLOc+0x206>
c0000e0d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e11:	83 e8 0c             	sub    eax,0xc
c0000e14:	83 e0 f8             	and    eax,0xfffffff8
c0000e17:	89 c2                	mov    edx,eax
c0000e19:	83 ca 01             	or     edx,0x1
c0000e1c:	83 f8 0f             	cmp    eax,0xf
c0000e1f:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000e22:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000e2a:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000e32:	76 25                	jbe    c0000e59 <sYSMALLOc+0x206>
c0000e34:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000e3a:	83 ec 0c             	sub    esp,0xc
c0000e3d:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000e47:	83 c7 08             	add    edi,0x8
c0000e4a:	57                   	push   edi
c0000e4b:	e8 0e fd ff ff       	call   c0000b5e <dlfree>
c0000e50:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000e56:	83 c4 10             	add    esp,0x10
c0000e59:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000e5f:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000e65:	73 06                	jae    c0000e6d <sYSMALLOc+0x21a>
c0000e67:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000e6d:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000e73:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000e79:	73 06                	jae    c0000e81 <sYSMALLOc+0x22e>
c0000e7b:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000e81:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000e84:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000e87:	83 e2 fc             	and    edx,0xfffffffc
c0000e8a:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000e8e:	0f 82 3c fe ff ff    	jb     c0000cd0 <sYSMALLOc+0x7d>
c0000e94:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000e98:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000e9b:	29 fa                	sub    edx,edi
c0000e9d:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000ea0:	83 ca 01             	or     edx,0x1
c0000ea3:	89 fb                	mov    ebx,edi
c0000ea5:	83 c0 08             	add    eax,0x8
c0000ea8:	83 cb 01             	or     ebx,0x1
c0000eab:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000eae:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000eb1:	83 c4 2c             	add    esp,0x2c
c0000eb4:	5b                   	pop    ebx
c0000eb5:	5e                   	pop    esi
c0000eb6:	5f                   	pop    edi
c0000eb7:	5d                   	pop    ebp
c0000eb8:	c3                   	ret    

c0000eb9 <dlmalloc>:
c0000eb9:	55                   	push   ebp
c0000eba:	57                   	push   edi
c0000ebb:	56                   	push   esi
c0000ebc:	53                   	push   ebx
c0000ebd:	83 ec 1c             	sub    esp,0x1c
c0000ec0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000ec4:	83 f8 df             	cmp    eax,0xffffffdf
c0000ec7:	0f 87 70 03 00 00    	ja     c000123d <dlmalloc+0x384>
c0000ecd:	83 c0 0b             	add    eax,0xb
c0000ed0:	be 10 00 00 00       	mov    esi,0x10
c0000ed5:	83 f8 0f             	cmp    eax,0xf
c0000ed8:	76 05                	jbe    c0000edf <dlmalloc+0x26>
c0000eda:	83 e0 f8             	and    eax,0xfffffff8
c0000edd:	89 c6                	mov    esi,eax
c0000edf:	8b 3d 20 a2 02 c0    	mov    edi,DWORD PTR ds:0xc002a220
c0000ee5:	f7 c7 01 00 00 00    	test   edi,0x1
c0000eeb:	75 17                	jne    c0000f04 <dlmalloc+0x4b>
c0000eed:	85 ff                	test   edi,edi
c0000eef:	0f 85 05 03 00 00    	jne    c00011fa <dlmalloc+0x341>
c0000ef5:	b8 20 a2 02 c0       	mov    eax,0xc002a220
c0000efa:	e8 78 fb ff ff       	call   c0000a77 <malloc_consolidate>
c0000eff:	e9 f6 02 00 00       	jmp    c00011fa <dlmalloc+0x341>
c0000f04:	39 f7                	cmp    edi,esi
c0000f06:	72 1f                	jb     c0000f27 <dlmalloc+0x6e>
c0000f08:	89 f2                	mov    edx,esi
c0000f0a:	c1 ea 03             	shr    edx,0x3
c0000f0d:	83 ea 02             	sub    edx,0x2
c0000f10:	8b 04 95 24 a2 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5ddc]
c0000f17:	85 c0                	test   eax,eax
c0000f19:	74 0c                	je     c0000f27 <dlmalloc+0x6e>
c0000f1b:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000f1e:	89 0c 95 24 a2 02 c0 	mov    DWORD PTR [edx*4-0x3ffd5ddc],ecx
c0000f25:	eb 30                	jmp    c0000f57 <dlmalloc+0x9e>
c0000f27:	89 f0                	mov    eax,esi
c0000f29:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f2f:	77 2e                	ja     c0000f5f <dlmalloc+0xa6>
c0000f31:	c1 e8 03             	shr    eax,0x3
c0000f34:	8d 14 c5 54 a2 02 c0 	lea    edx,[eax*8-0x3ffd5dac]
c0000f3b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f3f:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000f42:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000f45:	39 c3                	cmp    ebx,eax
c0000f47:	74 2e                	je     c0000f77 <dlmalloc+0xbe>
c0000f49:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000f4c:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000f51:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000f54:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000f57:	83 c0 08             	add    eax,0x8
c0000f5a:	e9 e0 02 00 00       	jmp    c000123f <dlmalloc+0x386>
c0000f5f:	e8 8f fa ff ff       	call   c00009f3 <largebin_index>
c0000f64:	83 e7 02             	and    edi,0x2
c0000f67:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f6b:	74 0a                	je     c0000f77 <dlmalloc+0xbe>
c0000f6d:	b8 20 a2 02 c0       	mov    eax,0xc002a220
c0000f72:	e8 00 fb ff ff       	call   c0000a77 <malloc_consolidate>
c0000f77:	8d 46 10             	lea    eax,[esi+0x10]
c0000f7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000f7e:	8b 1d 60 a2 02 c0    	mov    ebx,DWORD PTR ds:0xc002a260
c0000f84:	81 fb 54 a2 02 c0    	cmp    ebx,0xc002a254
c0000f8a:	0f 84 13 01 00 00    	je     c00010a3 <dlmalloc+0x1ea>
c0000f90:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000f93:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000f96:	83 e7 fc             	and    edi,0xfffffffc
c0000f99:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f9f:	77 4c                	ja     c0000fed <dlmalloc+0x134>
c0000fa1:	3d 54 a2 02 c0       	cmp    eax,0xc002a254
c0000fa6:	75 45                	jne    c0000fed <dlmalloc+0x134>
c0000fa8:	39 1d 50 a2 02 c0    	cmp    DWORD PTR ds:0xc002a250,ebx
c0000fae:	75 3d                	jne    c0000fed <dlmalloc+0x134>
c0000fb0:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000fb4:	73 37                	jae    c0000fed <dlmalloc+0x134>
c0000fb6:	8d 04 33             	lea    eax,[ebx+esi*1]
c0000fb9:	89 fa                	mov    edx,edi
c0000fbb:	a3 5c a2 02 c0       	mov    ds:0xc002a25c,eax
c0000fc0:	a3 60 a2 02 c0       	mov    ds:0xc002a260,eax
c0000fc5:	a3 50 a2 02 c0       	mov    ds:0xc002a250,eax
c0000fca:	29 f2                	sub    edx,esi
c0000fcc:	c7 40 08 54 a2 02 c0 	mov    DWORD PTR [eax+0x8],0xc002a254
c0000fd3:	c7 40 0c 54 a2 02 c0 	mov    DWORD PTR [eax+0xc],0xc002a254
c0000fda:	83 ce 01             	or     esi,0x1
c0000fdd:	89 d1                	mov    ecx,edx
c0000fdf:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0000fe2:	83 c9 01             	or     ecx,0x1
c0000fe5:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0000fe8:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0000feb:	eb 15                	jmp    c0001002 <dlmalloc+0x149>
c0000fed:	a3 60 a2 02 c0       	mov    ds:0xc002a260,eax
c0000ff2:	39 fe                	cmp    esi,edi
c0000ff4:	c7 40 08 54 a2 02 c0 	mov    DWORD PTR [eax+0x8],0xc002a254
c0000ffb:	75 0d                	jne    c000100a <dlmalloc+0x151>
c0000ffd:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001002:	8d 43 08             	lea    eax,[ebx+0x8]
c0001005:	e9 35 02 00 00       	jmp    c000123f <dlmalloc+0x386>
c000100a:	89 f8                	mov    eax,edi
c000100c:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001012:	77 19                	ja     c000102d <dlmalloc+0x174>
c0001014:	c1 e8 03             	shr    eax,0x3
c0001017:	8d 14 00             	lea    edx,[eax+eax*1]
c000101a:	83 c2 0d             	add    edx,0xd
c000101d:	8d 2c 95 18 a2 02 c0 	lea    ebp,[edx*4-0x3ffd5de8]
c0001024:	8b 14 95 20 a2 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5de0]
c000102b:	eb 46                	jmp    c0001073 <dlmalloc+0x1ba>
c000102d:	e8 c1 f9 ff ff       	call   c00009f3 <largebin_index>
c0001032:	8d 14 00             	lea    edx,[eax+eax*1]
c0001035:	83 c2 0d             	add    edx,0xd
c0001038:	8d 0c 95 20 a2 02 c0 	lea    ecx,[edx*4-0x3ffd5de0]
c000103f:	8b 14 95 20 a2 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5de0]
c0001046:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001049:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000104d:	89 d5                	mov    ebp,edx
c000104f:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001053:	74 1e                	je     c0001073 <dlmalloc+0x1ba>
c0001055:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001058:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c000105b:	77 12                	ja     c000106f <dlmalloc+0x1b6>
c000105d:	83 cf 01             	or     edi,0x1
c0001060:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001063:	76 05                	jbe    c000106a <dlmalloc+0x1b1>
c0001065:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001068:	eb f6                	jmp    c0001060 <dlmalloc+0x1a7>
c000106a:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c000106d:	eb 04                	jmp    c0001073 <dlmalloc+0x1ba>
c000106f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001073:	89 c7                	mov    edi,eax
c0001075:	88 c1                	mov    cl,al
c0001077:	c1 ff 05             	sar    edi,0x5
c000107a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000107e:	bf 01 00 00 00       	mov    edi,0x1
c0001083:	d3 e7                	shl    edi,cl
c0001085:	89 f8                	mov    eax,edi
c0001087:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000108b:	09 04 bd 54 a5 02 c0 	or     DWORD PTR [edi*4-0x3ffd5aac],eax
c0001092:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001095:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001098:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000109b:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c000109e:	e9 db fe ff ff       	jmp    c0000f7e <dlmalloc+0xc5>
c00010a3:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010a9:	76 78                	jbe    c0001123 <dlmalloc+0x26a>
c00010ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00010af:	8d 04 c5 54 a2 02 c0 	lea    eax,[eax*8-0x3ffd5dac]
c00010b6:	8d 48 f8             	lea    ecx,[eax-0x8]
c00010b9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bc:	39 ca                	cmp    edx,ecx
c00010be:	74 63                	je     c0001123 <dlmalloc+0x26a>
c00010c0:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00010c3:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00010c6:	83 e3 fc             	and    ebx,0xfffffffc
c00010c9:	39 de                	cmp    esi,ebx
c00010cb:	77 52                	ja     c000111f <dlmalloc+0x266>
c00010cd:	89 df                	mov    edi,ebx
c00010cf:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00010d2:	29 f7                	sub    edi,esi
c00010d4:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00010d7:	01 d3                	add    ebx,edx
c00010d9:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00010dc:	83 ff 0f             	cmp    edi,0xf
c00010df:	8d 42 08             	lea    eax,[edx+0x8]
c00010e2:	77 09                	ja     c00010ed <dlmalloc+0x234>
c00010e4:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00010e8:	e9 52 01 00 00       	jmp    c000123f <dlmalloc+0x386>
c00010ed:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00010f0:	83 ce 01             	or     esi,0x1
c00010f3:	89 0d 5c a2 02 c0    	mov    DWORD PTR ds:0xc002a25c,ecx
c00010f9:	89 0d 60 a2 02 c0    	mov    DWORD PTR ds:0xc002a260,ecx
c00010ff:	c7 41 08 54 a2 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002a254
c0001106:	c7 41 0c 54 a2 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002a254
c000110d:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001110:	89 fa                	mov    edx,edi
c0001112:	83 ca 01             	or     edx,0x1
c0001115:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001118:	89 3b                	mov    DWORD PTR [ebx],edi
c000111a:	e9 20 01 00 00       	jmp    c000123f <dlmalloc+0x386>
c000111f:	89 c2                	mov    edx,eax
c0001121:	eb 99                	jmp    c00010bc <dlmalloc+0x203>
c0001123:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001127:	b8 01 00 00 00       	mov    eax,0x1
c000112c:	41                   	inc    ecx
c000112d:	89 cb                	mov    ebx,ecx
c000112f:	8d 14 cd 4c a2 02 c0 	lea    edx,[ecx*8-0x3ffd5db4]
c0001136:	c1 eb 05             	shr    ebx,0x5
c0001139:	d3 e0                	shl    eax,cl
c000113b:	8b 3c 9d 54 a5 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd5aac]
c0001142:	39 f8                	cmp    eax,edi
c0001144:	77 04                	ja     c000114a <dlmalloc+0x291>
c0001146:	85 c0                	test   eax,eax
c0001148:	75 26                	jne    c0001170 <dlmalloc+0x2b7>
c000114a:	43                   	inc    ebx
c000114b:	83 fb 02             	cmp    ebx,0x2
c000114e:	0f 87 a6 00 00 00    	ja     c00011fa <dlmalloc+0x341>
c0001154:	8b 3c 9d 54 a5 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd5aac]
c000115b:	85 ff                	test   edi,edi
c000115d:	74 eb                	je     c000114a <dlmalloc+0x291>
c000115f:	89 d8                	mov    eax,ebx
c0001161:	c1 e0 06             	shl    eax,0x6
c0001164:	8d 14 85 4c a2 02 c0 	lea    edx,[eax*4-0x3ffd5db4]
c000116b:	b8 01 00 00 00       	mov    eax,0x1
c0001170:	85 f8                	test   eax,edi
c0001172:	75 07                	jne    c000117b <dlmalloc+0x2c2>
c0001174:	83 c2 08             	add    edx,0x8
c0001177:	01 c0                	add    eax,eax
c0001179:	eb f5                	jmp    c0001170 <dlmalloc+0x2b7>
c000117b:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c000117e:	39 ca                	cmp    edx,ecx
c0001180:	75 14                	jne    c0001196 <dlmalloc+0x2dd>
c0001182:	89 c1                	mov    ecx,eax
c0001184:	83 c2 08             	add    edx,0x8
c0001187:	f7 d1                	not    ecx
c0001189:	01 c0                	add    eax,eax
c000118b:	21 cf                	and    edi,ecx
c000118d:	89 3c 9d 54 a5 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd5aac],edi
c0001194:	eb ac                	jmp    c0001142 <dlmalloc+0x289>
c0001196:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001199:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000119c:	83 e0 fc             	and    eax,0xfffffffc
c000119f:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00011a2:	89 c3                	mov    ebx,eax
c00011a4:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00011a7:	29 f3                	sub    ebx,esi
c00011a9:	8d 14 01             	lea    edx,[ecx+eax*1]
c00011ac:	83 fb 0f             	cmp    ebx,0xf
c00011af:	8d 41 08             	lea    eax,[ecx+0x8]
c00011b2:	77 09                	ja     c00011bd <dlmalloc+0x304>
c00011b4:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00011b8:	e9 82 00 00 00       	jmp    c000123f <dlmalloc+0x386>
c00011bd:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00011c0:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011c6:	89 3d 5c a2 02 c0    	mov    DWORD PTR ds:0xc002a25c,edi
c00011cc:	89 3d 60 a2 02 c0    	mov    DWORD PTR ds:0xc002a260,edi
c00011d2:	c7 47 08 54 a2 02 c0 	mov    DWORD PTR [edi+0x8],0xc002a254
c00011d9:	c7 47 0c 54 a2 02 c0 	mov    DWORD PTR [edi+0xc],0xc002a254
c00011e0:	77 06                	ja     c00011e8 <dlmalloc+0x32f>
c00011e2:	89 3d 50 a2 02 c0    	mov    DWORD PTR ds:0xc002a250,edi
c00011e8:	83 ce 01             	or     esi,0x1
c00011eb:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00011ee:	89 d9                	mov    ecx,ebx
c00011f0:	83 c9 01             	or     ecx,0x1
c00011f3:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c00011f6:	89 1a                	mov    DWORD PTR [edx],ebx
c00011f8:	eb 45                	jmp    c000123f <dlmalloc+0x386>
c00011fa:	a1 4c a2 02 c0       	mov    eax,ds:0xc002a24c
c00011ff:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001202:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001205:	83 e2 fc             	and    edx,0xfffffffc
c0001208:	39 d1                	cmp    ecx,edx
c000120a:	77 1e                	ja     c000122a <dlmalloc+0x371>
c000120c:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000120f:	89 f3                	mov    ebx,esi
c0001211:	89 0d 4c a2 02 c0    	mov    DWORD PTR ds:0xc002a24c,ecx
c0001217:	83 cb 01             	or     ebx,0x1
c000121a:	29 f2                	sub    edx,esi
c000121c:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000121f:	83 ca 01             	or     edx,0x1
c0001222:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001225:	e9 2d fd ff ff       	jmp    c0000f57 <dlmalloc+0x9e>
c000122a:	83 c4 1c             	add    esp,0x1c
c000122d:	89 f0                	mov    eax,esi
c000122f:	5b                   	pop    ebx
c0001230:	ba 20 a2 02 c0       	mov    edx,0xc002a220
c0001235:	5e                   	pop    esi
c0001236:	5f                   	pop    edi
c0001237:	5d                   	pop    ebp
c0001238:	e9 16 fa ff ff       	jmp    c0000c53 <sYSMALLOc>
c000123d:	31 c0                	xor    eax,eax
c000123f:	83 c4 1c             	add    esp,0x1c
c0001242:	5b                   	pop    ebx
c0001243:	5e                   	pop    esi
c0001244:	5f                   	pop    edi
c0001245:	5d                   	pop    ebp
c0001246:	c3                   	ret    

c0001247 <iALLOc>:
c0001247:	55                   	push   ebp
c0001248:	89 c5                	mov    ebp,eax
c000124a:	57                   	push   edi
c000124b:	56                   	push   esi
c000124c:	53                   	push   ebx
c000124d:	83 ec 2c             	sub    esp,0x2c
c0001250:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001254:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001258:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000125c:	83 3d 20 a2 02 c0 00 	cmp    DWORD PTR ds:0xc002a220,0x0
c0001263:	75 12                	jne    c0001277 <iALLOc+0x30>
c0001265:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001269:	b8 20 a2 02 c0       	mov    eax,0xc002a220
c000126e:	e8 04 f8 ff ff       	call   c0000a77 <malloc_consolidate>
c0001273:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001277:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000127c:	74 12                	je     c0001290 <iALLOc+0x49>
c000127e:	85 ed                	test   ebp,ebp
c0001280:	0f 84 64 01 00 00    	je     c00013ea <iALLOc+0x1a3>
c0001286:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000128e:	eb 33                	jmp    c00012c3 <iALLOc+0x7c>
c0001290:	85 ed                	test   ebp,ebp
c0001292:	75 14                	jne    c00012a8 <iALLOc+0x61>
c0001294:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000129c:	83 c4 2c             	add    esp,0x2c
c000129f:	5b                   	pop    ebx
c00012a0:	5e                   	pop    esi
c00012a1:	5f                   	pop    edi
c00012a2:	5d                   	pop    ebp
c00012a3:	e9 11 fc ff ff       	jmp    c0000eb9 <dlmalloc>
c00012a8:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00012af:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00012b7:	83 f8 0f             	cmp    eax,0xf
c00012ba:	76 07                	jbe    c00012c3 <iALLOc+0x7c>
c00012bc:	83 e0 f8             	and    eax,0xfffffff8
c00012bf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00012c3:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00012c8:	75 09                	jne    c00012d3 <iALLOc+0x8c>
c00012ca:	89 d0                	mov    eax,edx
c00012cc:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00012cf:	31 f6                	xor    esi,esi
c00012d1:	eb 3b                	jmp    c000130e <iALLOc+0xc7>
c00012d3:	8b 02                	mov    eax,DWORD PTR [edx]
c00012d5:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00012dd:	83 c0 0b             	add    eax,0xb
c00012e0:	83 f8 0f             	cmp    eax,0xf
c00012e3:	76 07                	jbe    c00012ec <iALLOc+0xa5>
c00012e5:	83 e0 f8             	and    eax,0xfffffff8
c00012e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00012ec:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00012f0:	0f af f5             	imul   esi,ebp
c00012f3:	eb 25                	jmp    c000131a <iALLOc+0xd3>
c00012f5:	8b 18                	mov    ebx,DWORD PTR [eax]
c00012f7:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c00012fa:	bb 10 00 00 00       	mov    ebx,0x10
c00012ff:	83 f9 0f             	cmp    ecx,0xf
c0001302:	76 05                	jbe    c0001309 <iALLOc+0xc2>
c0001304:	83 e1 f8             	and    ecx,0xfffffff8
c0001307:	89 cb                	mov    ebx,ecx
c0001309:	01 de                	add    esi,ebx
c000130b:	83 c0 04             	add    eax,0x4
c000130e:	39 c7                	cmp    edi,eax
c0001310:	75 e3                	jne    c00012f5 <iALLOc+0xae>
c0001312:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000131a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000131e:	8b 1d 74 a5 02 c0    	mov    ebx,DWORD PTR ds:0xc002a574
c0001324:	83 ec 0c             	sub    esp,0xc
c0001327:	c7 05 74 a5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a574,0x0
c0001331:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001335:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001339:	50                   	push   eax
c000133a:	e8 7a fb ff ff       	call   c0000eb9 <dlmalloc>
c000133f:	83 c4 10             	add    esp,0x10
c0001342:	89 1d 74 a5 02 c0    	mov    DWORD PTR ds:0xc002a574,ebx
c0001348:	85 c0                	test   eax,eax
c000134a:	0f 84 92 00 00 00    	je     c00013e2 <iALLOc+0x19b>
c0001350:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001353:	8d 78 f8             	lea    edi,[eax-0x8]
c0001356:	83 e3 fc             	and    ebx,0xfffffffc
c0001359:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000135d:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001362:	74 1e                	je     c0001382 <iALLOc+0x13b>
c0001364:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001368:	89 d9                	mov    ecx,ebx
c000136a:	52                   	push   edx
c000136b:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000136f:	83 e9 04             	sub    ecx,0x4
c0001372:	51                   	push   ecx
c0001373:	6a 00                	push   0x0
c0001375:	50                   	push   eax
c0001376:	e8 02 f3 ff ff       	call   c000067d <memset>
c000137b:	83 c4 10             	add    esp,0x10
c000137e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001382:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001387:	75 14                	jne    c000139d <iALLOc+0x156>
c0001389:	8d 04 37             	lea    eax,[edi+esi*1]
c000138c:	29 f3                	sub    ebx,esi
c000138e:	8d 48 08             	lea    ecx,[eax+0x8]
c0001391:	83 cb 01             	or     ebx,0x1
c0001394:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001398:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000139b:	89 f3                	mov    ebx,esi
c000139d:	31 c0                	xor    eax,eax
c000139f:	4d                   	dec    ebp
c00013a0:	8d 4f 08             	lea    ecx,[edi+0x8]
c00013a3:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00013a7:	39 c5                	cmp    ebp,eax
c00013a9:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00013ac:	74 2c                	je     c00013da <iALLOc+0x193>
c00013ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00013b2:	85 c9                	test   ecx,ecx
c00013b4:	75 15                	jne    c00013cb <iALLOc+0x184>
c00013b6:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00013b9:	8d 71 0b             	lea    esi,[ecx+0xb]
c00013bc:	b9 10 00 00 00       	mov    ecx,0x10
c00013c1:	83 fe 0f             	cmp    esi,0xf
c00013c4:	76 05                	jbe    c00013cb <iALLOc+0x184>
c00013c6:	83 e6 f8             	and    esi,0xfffffff8
c00013c9:	89 f1                	mov    ecx,esi
c00013cb:	89 ce                	mov    esi,ecx
c00013cd:	29 cb                	sub    ebx,ecx
c00013cf:	83 ce 01             	or     esi,0x1
c00013d2:	40                   	inc    eax
c00013d3:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00013d6:	01 cf                	add    edi,ecx
c00013d8:	eb c6                	jmp    c00013a0 <iALLOc+0x159>
c00013da:	83 cb 01             	or     ebx,0x1
c00013dd:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00013e0:	eb 08                	jmp    c00013ea <iALLOc+0x1a3>
c00013e2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00013ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00013ee:	83 c4 2c             	add    esp,0x2c
c00013f1:	5b                   	pop    ebx
c00013f2:	5e                   	pop    esi
c00013f3:	5f                   	pop    edi
c00013f4:	5d                   	pop    ebp
c00013f5:	c3                   	ret    

c00013f6 <dlrealloc>:
c00013f6:	55                   	push   ebp
c00013f7:	57                   	push   edi
c00013f8:	56                   	push   esi
c00013f9:	53                   	push   ebx
c00013fa:	83 ec 1c             	sub    esp,0x1c
c00013fd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001401:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001405:	85 db                	test   ebx,ebx
c0001407:	75 10                	jne    c0001419 <dlrealloc+0x23>
c0001409:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000140d:	83 c4 1c             	add    esp,0x1c
c0001410:	5b                   	pop    ebx
c0001411:	5e                   	pop    esi
c0001412:	5f                   	pop    edi
c0001413:	5d                   	pop    ebp
c0001414:	e9 a0 fa ff ff       	jmp    c0000eb9 <dlmalloc>
c0001419:	83 f8 df             	cmp    eax,0xffffffdf
c000141c:	76 07                	jbe    c0001425 <dlrealloc+0x2f>
c000141e:	31 db                	xor    ebx,ebx
c0001420:	e9 7c 01 00 00       	jmp    c00015a1 <dlrealloc+0x1ab>
c0001425:	83 c0 0b             	add    eax,0xb
c0001428:	bf 10 00 00 00       	mov    edi,0x10
c000142d:	83 f8 0f             	cmp    eax,0xf
c0001430:	76 05                	jbe    c0001437 <dlrealloc+0x41>
c0001432:	83 e0 f8             	and    eax,0xfffffff8
c0001435:	89 c7                	mov    edi,eax
c0001437:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000143a:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000143d:	89 c6                	mov    esi,eax
c000143f:	83 e6 fc             	and    esi,0xfffffffc
c0001442:	a8 02                	test   al,0x2
c0001444:	75 d8                	jne    c000141e <dlrealloc+0x28>
c0001446:	39 f7                	cmp    edi,esi
c0001448:	0f 86 15 01 00 00    	jbe    c0001563 <dlrealloc+0x16d>
c000144e:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c0001452:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001455:	39 15 4c a2 02 c0    	cmp    DWORD PTR ds:0xc002a24c,edx
c000145b:	75 33                	jne    c0001490 <dlrealloc+0x9a>
c000145d:	83 e1 fc             	and    ecx,0xfffffffc
c0001460:	01 f1                	add    ecx,esi
c0001462:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001466:	8d 4f 10             	lea    ecx,[edi+0x10]
c0001469:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000146d:	77 49                	ja     c00014b8 <dlrealloc+0xc2>
c000146f:	01 fd                	add    ebp,edi
c0001471:	83 e0 01             	and    eax,0x1
c0001474:	09 f8                	or     eax,edi
c0001476:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0001479:	89 2d 4c a2 02 c0    	mov    DWORD PTR ds:0xc002a24c,ebp
c000147f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001483:	29 f8                	sub    eax,edi
c0001485:	83 c8 01             	or     eax,0x1
c0001488:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000148b:	e9 11 01 00 00       	jmp    c00015a1 <dlrealloc+0x1ab>
c0001490:	89 c8                	mov    eax,ecx
c0001492:	83 e0 fe             	and    eax,0xfffffffe
c0001495:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c000149a:	75 1c                	jne    c00014b8 <dlrealloc+0xc2>
c000149c:	83 e1 fc             	and    ecx,0xfffffffc
c000149f:	01 f1                	add    ecx,esi
c00014a1:	39 cf                	cmp    edi,ecx
c00014a3:	77 13                	ja     c00014b8 <dlrealloc+0xc2>
c00014a5:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00014a8:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00014ab:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00014ae:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00014b1:	89 ce                	mov    esi,ecx
c00014b3:	e9 ab 00 00 00       	jmp    c0001563 <dlrealloc+0x16d>
c00014b8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00014bc:	8d 47 f9             	lea    eax,[edi-0x7]
c00014bf:	83 ec 0c             	sub    esp,0xc
c00014c2:	50                   	push   eax
c00014c3:	e8 f1 f9 ff ff       	call   c0000eb9 <dlmalloc>
c00014c8:	83 c4 10             	add    esp,0x10
c00014cb:	89 c1                	mov    ecx,eax
c00014cd:	85 c0                	test   eax,eax
c00014cf:	0f 84 49 ff ff ff    	je     c000141e <dlrealloc+0x28>
c00014d5:	8d 40 f8             	lea    eax,[eax-0x8]
c00014d8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00014dc:	39 c2                	cmp    edx,eax
c00014de:	75 0a                	jne    c00014ea <dlrealloc+0xf4>
c00014e0:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00014e3:	83 e0 fc             	and    eax,0xfffffffc
c00014e6:	01 c6                	add    esi,eax
c00014e8:	eb 79                	jmp    c0001563 <dlrealloc+0x16d>
c00014ea:	83 ee 04             	sub    esi,0x4
c00014ed:	83 fe 27             	cmp    esi,0x27
c00014f0:	76 16                	jbe    c0001508 <dlrealloc+0x112>
c00014f2:	50                   	push   eax
c00014f3:	56                   	push   esi
c00014f4:	53                   	push   ebx
c00014f5:	51                   	push   ecx
c00014f6:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00014fa:	e8 48 f1 ff ff       	call   c0000647 <memcpy>
c00014ff:	83 c4 10             	add    esp,0x10
c0001502:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001506:	eb 43                	jmp    c000154b <dlrealloc+0x155>
c0001508:	8b 03                	mov    eax,DWORD PTR [ebx]
c000150a:	83 fe 13             	cmp    esi,0x13
c000150d:	89 01                	mov    DWORD PTR [ecx],eax
c000150f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001512:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001515:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001518:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000151b:	76 2e                	jbe    c000154b <dlrealloc+0x155>
c000151d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001520:	83 fe 1b             	cmp    esi,0x1b
c0001523:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001526:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001529:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000152c:	76 1d                	jbe    c000154b <dlrealloc+0x155>
c000152e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0001531:	83 fe 23             	cmp    esi,0x23
c0001534:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001537:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000153a:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000153d:	76 0c                	jbe    c000154b <dlrealloc+0x155>
c000153f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0001542:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c0001545:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0001548:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c000154b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000154f:	83 ec 0c             	sub    esp,0xc
c0001552:	53                   	push   ebx
c0001553:	e8 06 f6 ff ff       	call   c0000b5e <dlfree>
c0001558:	83 c4 10             	add    esp,0x10
c000155b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000155f:	89 cb                	mov    ebx,ecx
c0001561:	eb 3e                	jmp    c00015a1 <dlrealloc+0x1ab>
c0001563:	89 f2                	mov    edx,esi
c0001565:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001568:	29 fa                	sub    edx,edi
c000156a:	83 e1 01             	and    ecx,0x1
c000156d:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c0001571:	83 fa 0f             	cmp    edx,0xf
c0001574:	77 0b                	ja     c0001581 <dlrealloc+0x18b>
c0001576:	09 ce                	or     esi,ecx
c0001578:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000157b:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000157f:	eb 20                	jmp    c00015a1 <dlrealloc+0x1ab>
c0001581:	01 fd                	add    ebp,edi
c0001583:	83 ec 0c             	sub    esp,0xc
c0001586:	09 cf                	or     edi,ecx
c0001588:	83 ca 01             	or     edx,0x1
c000158b:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c000158e:	83 c5 08             	add    ebp,0x8
c0001591:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c0001594:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001598:	55                   	push   ebp
c0001599:	e8 c0 f5 ff ff       	call   c0000b5e <dlfree>
c000159e:	83 c4 10             	add    esp,0x10
c00015a1:	83 c4 1c             	add    esp,0x1c
c00015a4:	89 d8                	mov    eax,ebx
c00015a6:	5b                   	pop    ebx
c00015a7:	5e                   	pop    esi
c00015a8:	5f                   	pop    edi
c00015a9:	5d                   	pop    ebp
c00015aa:	c3                   	ret    

c00015ab <dlmemalign>:
c00015ab:	55                   	push   ebp
c00015ac:	57                   	push   edi
c00015ad:	56                   	push   esi
c00015ae:	53                   	push   ebx
c00015af:	83 ec 0c             	sub    esp,0xc
c00015b2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00015b6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00015ba:	83 fa 08             	cmp    edx,0x8
c00015bd:	77 10                	ja     c00015cf <dlmemalign+0x24>
c00015bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00015c3:	83 c4 0c             	add    esp,0xc
c00015c6:	5b                   	pop    ebx
c00015c7:	5e                   	pop    esi
c00015c8:	5f                   	pop    edi
c00015c9:	5d                   	pop    ebp
c00015ca:	e9 ea f8 ff ff       	jmp    c0000eb9 <dlmalloc>
c00015cf:	bf 10 00 00 00       	mov    edi,0x10
c00015d4:	83 fa 0f             	cmp    edx,0xf
c00015d7:	76 13                	jbe    c00015ec <dlmemalign+0x41>
c00015d9:	8d 4a ff             	lea    ecx,[edx-0x1]
c00015dc:	85 d1                	test   ecx,edx
c00015de:	75 04                	jne    c00015e4 <dlmemalign+0x39>
c00015e0:	89 d7                	mov    edi,edx
c00015e2:	eb 08                	jmp    c00015ec <dlmemalign+0x41>
c00015e4:	39 d7                	cmp    edi,edx
c00015e6:	73 04                	jae    c00015ec <dlmemalign+0x41>
c00015e8:	01 ff                	add    edi,edi
c00015ea:	eb f8                	jmp    c00015e4 <dlmemalign+0x39>
c00015ec:	83 f8 df             	cmp    eax,0xffffffdf
c00015ef:	76 07                	jbe    c00015f8 <dlmemalign+0x4d>
c00015f1:	31 c0                	xor    eax,eax
c00015f3:	e9 ce 00 00 00       	jmp    c00016c6 <dlmemalign+0x11b>
c00015f8:	83 c0 0b             	add    eax,0xb
c00015fb:	bd 10 00 00 00       	mov    ebp,0x10
c0001600:	83 f8 0f             	cmp    eax,0xf
c0001603:	76 05                	jbe    c000160a <dlmemalign+0x5f>
c0001605:	83 e0 f8             	and    eax,0xfffffff8
c0001608:	89 c5                	mov    ebp,eax
c000160a:	83 ec 0c             	sub    esp,0xc
c000160d:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001611:	50                   	push   eax
c0001612:	e8 a2 f8 ff ff       	call   c0000eb9 <dlmalloc>
c0001617:	83 c4 10             	add    esp,0x10
c000161a:	89 c1                	mov    ecx,eax
c000161c:	85 c0                	test   eax,eax
c000161e:	74 d1                	je     c00015f1 <dlmemalign+0x46>
c0001620:	31 d2                	xor    edx,edx
c0001622:	8d 70 f8             	lea    esi,[eax-0x8]
c0001625:	f7 f7                	div    edi
c0001627:	85 d2                	test   edx,edx
c0001629:	74 62                	je     c000168d <dlmemalign+0xe2>
c000162b:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000162f:	89 f8                	mov    eax,edi
c0001631:	f7 d8                	neg    eax
c0001633:	21 c3                	and    ebx,eax
c0001635:	83 eb 08             	sub    ebx,0x8
c0001638:	89 d8                	mov    eax,ebx
c000163a:	29 f0                	sub    eax,esi
c000163c:	83 f8 0f             	cmp    eax,0xf
c000163f:	77 02                	ja     c0001643 <dlmemalign+0x98>
c0001641:	01 fb                	add    ebx,edi
c0001643:	89 d8                	mov    eax,ebx
c0001645:	29 f0                	sub    eax,esi
c0001647:	89 c6                	mov    esi,eax
c0001649:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000164c:	89 c2                	mov    edx,eax
c000164e:	83 e2 fc             	and    edx,0xfffffffc
c0001651:	29 f2                	sub    edx,esi
c0001653:	a8 02                	test   al,0x2
c0001655:	74 10                	je     c0001667 <dlmemalign+0xbc>
c0001657:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000165a:	83 ca 02             	or     edx,0x2
c000165d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001660:	89 33                	mov    DWORD PTR [ebx],esi
c0001662:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001665:	eb 5f                	jmp    c00016c6 <dlmemalign+0x11b>
c0001667:	83 ec 0c             	sub    esp,0xc
c000166a:	89 d0                	mov    eax,edx
c000166c:	83 c8 01             	or     eax,0x1
c000166f:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001672:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001677:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000167a:	83 e0 01             	and    eax,0x1
c000167d:	09 f0                	or     eax,esi
c000167f:	89 de                	mov    esi,ebx
c0001681:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001684:	51                   	push   ecx
c0001685:	e8 d4 f4 ff ff       	call   c0000b5e <dlfree>
c000168a:	83 c4 10             	add    esp,0x10
c000168d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001690:	a8 02                	test   al,0x2
c0001692:	75 2f                	jne    c00016c3 <dlmemalign+0x118>
c0001694:	83 e0 fc             	and    eax,0xfffffffc
c0001697:	8d 55 10             	lea    edx,[ebp+0x10]
c000169a:	39 c2                	cmp    edx,eax
c000169c:	73 25                	jae    c00016c3 <dlmemalign+0x118>
c000169e:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00016a1:	83 ec 0c             	sub    esp,0xc
c00016a4:	29 e8                	sub    eax,ebp
c00016a6:	83 c2 08             	add    edx,0x8
c00016a9:	83 c8 01             	or     eax,0x1
c00016ac:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00016af:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016b2:	83 e0 01             	and    eax,0x1
c00016b5:	09 c5                	or     ebp,eax
c00016b7:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00016ba:	52                   	push   edx
c00016bb:	e8 9e f4 ff ff       	call   c0000b5e <dlfree>
c00016c0:	83 c4 10             	add    esp,0x10
c00016c3:	8d 46 08             	lea    eax,[esi+0x8]
c00016c6:	83 c4 0c             	add    esp,0xc
c00016c9:	5b                   	pop    ebx
c00016ca:	5e                   	pop    esi
c00016cb:	5f                   	pop    edi
c00016cc:	5d                   	pop    ebp
c00016cd:	c3                   	ret    

c00016ce <dlcalloc>:
c00016ce:	53                   	push   ebx
c00016cf:	83 ec 14             	sub    esp,0x14
c00016d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00016d6:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00016db:	50                   	push   eax
c00016dc:	e8 d8 f7 ff ff       	call   c0000eb9 <dlmalloc>
c00016e1:	83 c4 10             	add    esp,0x10
c00016e4:	89 c3                	mov    ebx,eax
c00016e6:	85 c0                	test   eax,eax
c00016e8:	74 77                	je     c0001761 <dlcalloc+0x93>
c00016ea:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00016ed:	89 d0                	mov    eax,edx
c00016ef:	83 e0 fc             	and    eax,0xfffffffc
c00016f2:	80 e2 02             	and    dl,0x2
c00016f5:	75 5a                	jne    c0001751 <dlcalloc+0x83>
c00016f7:	83 e8 04             	sub    eax,0x4
c00016fa:	83 f8 27             	cmp    eax,0x27
c00016fd:	76 03                	jbe    c0001702 <dlcalloc+0x34>
c00016ff:	51                   	push   ecx
c0001700:	eb 53                	jmp    c0001755 <dlcalloc+0x87>
c0001702:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001708:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000170f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001716:	83 f8 13             	cmp    eax,0x13
c0001719:	76 46                	jbe    c0001761 <dlcalloc+0x93>
c000171b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001722:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001729:	83 f8 1b             	cmp    eax,0x1b
c000172c:	76 33                	jbe    c0001761 <dlcalloc+0x93>
c000172e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001735:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000173c:	83 f8 23             	cmp    eax,0x23
c000173f:	76 20                	jbe    c0001761 <dlcalloc+0x93>
c0001741:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001748:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000174f:	eb 10                	jmp    c0001761 <dlcalloc+0x93>
c0001751:	83 e8 08             	sub    eax,0x8
c0001754:	52                   	push   edx
c0001755:	50                   	push   eax
c0001756:	6a 00                	push   0x0
c0001758:	53                   	push   ebx
c0001759:	e8 1f ef ff ff       	call   c000067d <memset>
c000175e:	83 c4 10             	add    esp,0x10
c0001761:	89 d8                	mov    eax,ebx
c0001763:	83 c4 08             	add    esp,0x8
c0001766:	5b                   	pop    ebx
c0001767:	c3                   	ret    

c0001768 <dlcfree>:
c0001768:	e9 f1 f3 ff ff       	jmp    c0000b5e <dlfree>

c000176d <dlindependent_calloc>:
c000176d:	83 ec 28             	sub    esp,0x28
c0001770:	b9 03 00 00 00       	mov    ecx,0x3
c0001775:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001779:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000177d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001781:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001785:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001789:	e8 b9 fa ff ff       	call   c0001247 <iALLOc>
c000178e:	83 c4 2c             	add    esp,0x2c
c0001791:	c3                   	ret    

c0001792 <dlindependent_comalloc>:
c0001792:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001796:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000179a:	31 c9                	xor    ecx,ecx
c000179c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00017a0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00017a4:	e9 9e fa ff ff       	jmp    c0001247 <iALLOc>

c00017a9 <dlvalloc>:
c00017a9:	83 ec 0c             	sub    esp,0xc
c00017ac:	83 3d 20 a2 02 c0 00 	cmp    DWORD PTR ds:0xc002a220,0x0
c00017b3:	75 0a                	jne    c00017bf <dlvalloc+0x16>
c00017b5:	b8 20 a2 02 c0       	mov    eax,0xc002a220
c00017ba:	e8 b8 f2 ff ff       	call   c0000a77 <malloc_consolidate>
c00017bf:	50                   	push   eax
c00017c0:	50                   	push   eax
c00017c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00017c5:	ff 35 7c a5 02 c0    	push   DWORD PTR ds:0xc002a57c
c00017cb:	e8 db fd ff ff       	call   c00015ab <dlmemalign>
c00017d0:	83 c4 1c             	add    esp,0x1c
c00017d3:	c3                   	ret    

c00017d4 <dlpvalloc>:
c00017d4:	83 ec 0c             	sub    esp,0xc
c00017d7:	83 3d 20 a2 02 c0 00 	cmp    DWORD PTR ds:0xc002a220,0x0
c00017de:	75 0a                	jne    c00017ea <dlpvalloc+0x16>
c00017e0:	b8 20 a2 02 c0       	mov    eax,0xc002a220
c00017e5:	e8 8d f2 ff ff       	call   c0000a77 <malloc_consolidate>
c00017ea:	a1 7c a5 02 c0       	mov    eax,ds:0xc002a57c
c00017ef:	89 c1                	mov    ecx,eax
c00017f1:	52                   	push   edx
c00017f2:	f7 d9                	neg    ecx
c00017f4:	52                   	push   edx
c00017f5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00017f9:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c00017fd:	21 ca                	and    edx,ecx
c00017ff:	52                   	push   edx
c0001800:	50                   	push   eax
c0001801:	e8 a5 fd ff ff       	call   c00015ab <dlmemalign>
c0001806:	83 c4 1c             	add    esp,0x1c
c0001809:	c3                   	ret    

c000180a <dlmalloc_trim>:
c000180a:	b8 20 a2 02 c0       	mov    eax,0xc002a220
c000180f:	e8 63 f2 ff ff       	call   c0000a77 <malloc_consolidate>
c0001814:	31 c0                	xor    eax,eax
c0001816:	c3                   	ret    

c0001817 <dlmalloc_usable_size>:
c0001817:	53                   	push   ebx
c0001818:	31 c0                	xor    eax,eax
c000181a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000181e:	85 c9                	test   ecx,ecx
c0001820:	74 24                	je     c0001846 <dlmalloc_usable_size+0x2f>
c0001822:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001825:	f6 c2 02             	test   dl,0x2
c0001828:	74 08                	je     c0001832 <dlmalloc_usable_size+0x1b>
c000182a:	83 e2 fc             	and    edx,0xfffffffc
c000182d:	8d 42 f8             	lea    eax,[edx-0x8]
c0001830:	eb 14                	jmp    c0001846 <dlmalloc_usable_size+0x2f>
c0001832:	89 d3                	mov    ebx,edx
c0001834:	31 c0                	xor    eax,eax
c0001836:	83 e3 fe             	and    ebx,0xfffffffe
c0001839:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c000183e:	74 06                	je     c0001846 <dlmalloc_usable_size+0x2f>
c0001840:	83 e2 fc             	and    edx,0xfffffffc
c0001843:	8d 42 fc             	lea    eax,[edx-0x4]
c0001846:	5b                   	pop    ebx
c0001847:	c3                   	ret    

c0001848 <dlmallinfo>:
c0001848:	55                   	push   ebp
c0001849:	57                   	push   edi
c000184a:	56                   	push   esi
c000184b:	53                   	push   ebx
c000184c:	83 ec 08             	sub    esp,0x8
c000184f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001853:	83 3d 4c a2 02 c0 00 	cmp    DWORD PTR ds:0xc002a24c,0x0
c000185a:	75 0a                	jne    c0001866 <dlmallinfo+0x1e>
c000185c:	b8 20 a2 02 c0       	mov    eax,0xc002a220
c0001861:	e8 11 f2 ff ff       	call   c0000a77 <malloc_consolidate>
c0001866:	a1 4c a2 02 c0       	mov    eax,ds:0xc002a24c
c000186b:	31 ed                	xor    ebp,ebp
c000186d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001870:	31 c9                	xor    ecx,ecx
c0001872:	83 e0 fc             	and    eax,0xfffffffc
c0001875:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001879:	31 c0                	xor    eax,eax
c000187b:	8b 14 85 24 a2 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5ddc]
c0001882:	85 d2                	test   edx,edx
c0001884:	74 0e                	je     c0001894 <dlmallinfo+0x4c>
c0001886:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001889:	45                   	inc    ebp
c000188a:	83 e6 fc             	and    esi,0xfffffffc
c000188d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001890:	01 f1                	add    ecx,esi
c0001892:	eb ee                	jmp    c0001882 <dlmallinfo+0x3a>
c0001894:	40                   	inc    eax
c0001895:	83 f8 0a             	cmp    eax,0xa
c0001898:	75 e1                	jne    c000187b <dlmallinfo+0x33>
c000189a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000189e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00018a5:	8d 14 01             	lea    edx,[ecx+eax*1]
c00018a8:	b8 54 a2 02 c0       	mov    eax,0xc002a254
c00018ad:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00018b0:	39 f0                	cmp    eax,esi
c00018b2:	74 10                	je     c00018c4 <dlmallinfo+0x7c>
c00018b4:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00018b7:	ff 04 24             	inc    DWORD PTR [esp]
c00018ba:	83 e7 fc             	and    edi,0xfffffffc
c00018bd:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00018c0:	01 fa                	add    edx,edi
c00018c2:	eb ec                	jmp    c00018b0 <dlmallinfo+0x68>
c00018c4:	83 c0 08             	add    eax,0x8
c00018c7:	3d 4c a5 02 c0       	cmp    eax,0xc002a54c
c00018cc:	75 df                	jne    c00018ad <dlmallinfo+0x65>
c00018ce:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c00018d1:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00018d4:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c00018d7:	a1 88 a5 02 c0       	mov    eax,ds:0xc002a588
c00018dc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00018df:	89 03                	mov    DWORD PTR [ebx],eax
c00018e1:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c00018e4:	8b 35 70 a5 02 c0    	mov    esi,DWORD PTR ds:0xc002a570
c00018ea:	29 d0                	sub    eax,edx
c00018ec:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c00018ef:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00018f2:	8b 35 84 a5 02 c0    	mov    esi,DWORD PTR ds:0xc002a584
c00018f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018fc:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c00018ff:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001902:	8b 35 94 a5 02 c0    	mov    esi,DWORD PTR ds:0xc002a594
c0001908:	89 d8                	mov    eax,ebx
c000190a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000190d:	83 c4 08             	add    esp,0x8
c0001910:	5b                   	pop    ebx
c0001911:	5e                   	pop    esi
c0001912:	5f                   	pop    edi
c0001913:	5d                   	pop    ebp
c0001914:	c2 04 00             	ret    0x4

c0001917 <dlmalloc_stats>:
c0001917:	83 ec 30             	sub    esp,0x30
c000191a:	8d 44 24 08          	lea    eax,[esp+0x8]
c000191e:	50                   	push   eax
c000191f:	e8 24 ff ff ff       	call   c0001848 <dlmallinfo>
c0001924:	83 c4 30             	add    esp,0x30
c0001927:	c3                   	ret    

c0001928 <dlmallopt>:
c0001928:	56                   	push   esi
c0001929:	b8 20 a2 02 c0       	mov    eax,0xc002a220
c000192e:	53                   	push   ebx
c000192f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001933:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001937:	e8 3b f1 ff ff       	call   c0000a77 <malloc_consolidate>
c000193c:	8d 46 04             	lea    eax,[esi+0x4]
c000193f:	83 f8 05             	cmp    eax,0x5
c0001942:	77 67                	ja     c00019ab <dlmallopt+0x83>
c0001944:	ff 24 85 a4 5e 02 c0 	jmp    DWORD PTR [eax*4-0x3ffda15c]
c000194b:	83 fb 50             	cmp    ebx,0x50
c000194e:	77 5b                	ja     c00019ab <dlmallopt+0x83>
c0001950:	ba 08 00 00 00       	mov    edx,0x8
c0001955:	85 db                	test   ebx,ebx
c0001957:	74 12                	je     c000196b <dlmallopt+0x43>
c0001959:	83 c3 0b             	add    ebx,0xb
c000195c:	ba 10 00 00 00       	mov    edx,0x10
c0001961:	83 fb 0f             	cmp    ebx,0xf
c0001964:	76 05                	jbe    c000196b <dlmallopt+0x43>
c0001966:	89 da                	mov    edx,ebx
c0001968:	83 e2 f8             	and    edx,0xfffffff8
c000196b:	a1 20 a2 02 c0       	mov    eax,ds:0xc002a220
c0001970:	83 e0 03             	and    eax,0x3
c0001973:	09 d0                	or     eax,edx
c0001975:	a3 20 a2 02 c0       	mov    ds:0xc002a220,eax
c000197a:	eb 31                	jmp    c00019ad <dlmallopt+0x85>
c000197c:	89 1d 64 a5 02 c0    	mov    DWORD PTR ds:0xc002a564,ebx
c0001982:	eb 06                	jmp    c000198a <dlmallopt+0x62>
c0001984:	89 1d 68 a5 02 c0    	mov    DWORD PTR ds:0xc002a568,ebx
c000198a:	be 01 00 00 00       	mov    esi,0x1
c000198f:	eb 1c                	jmp    c00019ad <dlmallopt+0x85>
c0001991:	89 1d 6c a5 02 c0    	mov    DWORD PTR ds:0xc002a56c,ebx
c0001997:	eb f1                	jmp    c000198a <dlmallopt+0x62>
c0001999:	31 f6                	xor    esi,esi
c000199b:	85 db                	test   ebx,ebx
c000199d:	75 0e                	jne    c00019ad <dlmallopt+0x85>
c000199f:	c7 05 74 a5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a574,0x0
c00019a9:	eb df                	jmp    c000198a <dlmallopt+0x62>
c00019ab:	31 f6                	xor    esi,esi
c00019ad:	89 f0                	mov    eax,esi
c00019af:	5b                   	pop    ebx
c00019b0:	5e                   	pop    esi
c00019b1:	c3                   	ret    

c00019b2 <disk_status>:
c00019b2:	31 c0                	xor    eax,eax
c00019b4:	c3                   	ret    

c00019b5 <disk_initialize>:
c00019b5:	31 c0                	xor    eax,eax
c00019b7:	c3                   	ret    

c00019b8 <disk_read>:
c00019b8:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00019bd:	0f b6 04 85 60 bc 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd43a0]
c00019c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019c9:	e9 78 cc 01 00       	jmp    c001e646 <fatWrapperReadDisk>

c00019ce <disk_write>:
c00019ce:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00019d3:	0f b6 04 85 60 bc 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd43a0]
c00019db:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019df:	e9 a9 cc 01 00       	jmp    c001e68d <fatWrapperWriteDisk>

c00019e4 <disk_ioctl>:
c00019e4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00019e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00019ed:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00019f2:	0f b6 04 85 60 bc 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd43a0]
c00019fa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019fe:	e9 d1 cc 01 00       	jmp    c001e6d4 <fatWrapperIoctl>

c0001a03 <ld_word>:
c0001a03:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a07:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a0a:	c1 e2 08             	shl    edx,0x8
c0001a0d:	09 d0                	or     eax,edx
c0001a0f:	c3                   	ret    

c0001a10 <ld_dword>:
c0001a10:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001a14:	89 d1                	mov    ecx,edx
c0001a16:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a1a:	c1 e1 08             	shl    ecx,0x8
c0001a1d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a20:	09 ca                	or     edx,ecx
c0001a22:	c1 e2 08             	shl    edx,0x8
c0001a25:	09 d0                	or     eax,edx
c0001a27:	c3                   	ret    

c0001a28 <ld_qword>:
c0001a28:	57                   	push   edi
c0001a29:	56                   	push   esi
c0001a2a:	53                   	push   ebx
c0001a2b:	31 db                	xor    ebx,ebx
c0001a2d:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001a30:	89 df                	mov    edi,ebx
c0001a32:	89 ce                	mov    esi,ecx
c0001a34:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001a38:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a3c:	c1 e6 08             	shl    esi,0x8
c0001a3f:	09 f2                	or     edx,esi
c0001a41:	89 d6                	mov    esi,edx
c0001a43:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001a47:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a4b:	c1 e6 08             	shl    esi,0x8
c0001a4e:	09 f2                	or     edx,esi
c0001a50:	89 d6                	mov    esi,edx
c0001a52:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a56:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a5a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a5d:	c1 e6 08             	shl    esi,0x8
c0001a60:	89 fb                	mov    ebx,edi
c0001a62:	09 f2                	or     edx,esi
c0001a64:	89 d1                	mov    ecx,edx
c0001a66:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001a6a:	c1 e1 08             	shl    ecx,0x8
c0001a6d:	89 da                	mov    edx,ebx
c0001a6f:	09 c8                	or     eax,ecx
c0001a71:	5b                   	pop    ebx
c0001a72:	5e                   	pop    esi
c0001a73:	5f                   	pop    edi
c0001a74:	c3                   	ret    

c0001a75 <st_word>:
c0001a75:	66 89 10             	mov    WORD PTR [eax],dx
c0001a78:	c3                   	ret    

c0001a79 <st_dword>:
c0001a79:	89 10                	mov    DWORD PTR [eax],edx
c0001a7b:	c3                   	ret    

c0001a7c <st_qword>:
c0001a7c:	89 10                	mov    DWORD PTR [eax],edx
c0001a7e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001a81:	c3                   	ret    

c0001a82 <mem_cpy>:
c0001a82:	85 c9                	test   ecx,ecx
c0001a84:	74 10                	je     c0001a96 <mem_cpy+0x14>
c0001a86:	57                   	push   edi
c0001a87:	01 c1                	add    ecx,eax
c0001a89:	56                   	push   esi
c0001a8a:	89 c7                	mov    edi,eax
c0001a8c:	89 d6                	mov    esi,edx
c0001a8e:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001a8f:	39 f9                	cmp    ecx,edi
c0001a91:	75 fb                	jne    c0001a8e <mem_cpy+0xc>
c0001a93:	5e                   	pop    esi
c0001a94:	5f                   	pop    edi
c0001a95:	c3                   	ret    
c0001a96:	c3                   	ret    

c0001a97 <mem_set>:
c0001a97:	01 c1                	add    ecx,eax
c0001a99:	40                   	inc    eax
c0001a9a:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001a9d:	39 c8                	cmp    eax,ecx
c0001a9f:	75 f8                	jne    c0001a99 <mem_set+0x2>
c0001aa1:	c3                   	ret    

c0001aa2 <mem_cmp>:
c0001aa2:	57                   	push   edi
c0001aa3:	56                   	push   esi
c0001aa4:	89 c6                	mov    esi,eax
c0001aa6:	53                   	push   ebx
c0001aa7:	46                   	inc    esi
c0001aa8:	42                   	inc    edx
c0001aa9:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001aad:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001ab1:	29 fb                	sub    ebx,edi
c0001ab3:	89 cf                	mov    edi,ecx
c0001ab5:	29 f7                	sub    edi,esi
c0001ab7:	01 c7                	add    edi,eax
c0001ab9:	74 04                	je     c0001abf <mem_cmp+0x1d>
c0001abb:	85 db                	test   ebx,ebx
c0001abd:	74 e8                	je     c0001aa7 <mem_cmp+0x5>
c0001abf:	89 d8                	mov    eax,ebx
c0001ac1:	5b                   	pop    ebx
c0001ac2:	5e                   	pop    esi
c0001ac3:	5f                   	pop    edi
c0001ac4:	c3                   	ret    

c0001ac5 <chk_chr>:
c0001ac5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001ac8:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001acb:	74 07                	je     c0001ad4 <chk_chr+0xf>
c0001acd:	39 d1                	cmp    ecx,edx
c0001acf:	74 03                	je     c0001ad4 <chk_chr+0xf>
c0001ad1:	40                   	inc    eax
c0001ad2:	eb f1                	jmp    c0001ac5 <chk_chr>
c0001ad4:	89 c8                	mov    eax,ecx
c0001ad6:	c3                   	ret    

c0001ad7 <dbc_1st>:
c0001ad7:	31 c0                	xor    eax,eax
c0001ad9:	c3                   	ret    

c0001ada <dbc_2nd>:
c0001ada:	31 c0                	xor    eax,eax
c0001adc:	c3                   	ret    

c0001add <tchar2uni>:
c0001add:	57                   	push   edi
c0001ade:	89 c7                	mov    edi,eax
c0001ae0:	56                   	push   esi
c0001ae1:	53                   	push   ebx
c0001ae2:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001ae4:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001ae6:	8d 73 01             	lea    esi,[ebx+0x1]
c0001ae9:	84 c9                	test   cl,cl
c0001aeb:	78 0a                	js     c0001af7 <tchar2uni+0x1a>
c0001aed:	0f b6 d1             	movzx  edx,cl
c0001af0:	89 f3                	mov    ebx,esi
c0001af2:	e9 9f 00 00 00       	jmp    c0001b96 <tchar2uni+0xb9>
c0001af7:	88 ca                	mov    dl,cl
c0001af9:	83 e2 e0             	and    edx,0xffffffe0
c0001afc:	80 fa c0             	cmp    dl,0xc0
c0001aff:	75 0c                	jne    c0001b0d <tchar2uni+0x30>
c0001b01:	89 ca                	mov    edx,ecx
c0001b03:	b9 01 00 00 00       	mov    ecx,0x1
c0001b08:	83 e2 1f             	and    edx,0x1f
c0001b0b:	eb 2e                	jmp    c0001b3b <tchar2uni+0x5e>
c0001b0d:	88 ca                	mov    dl,cl
c0001b0f:	83 e2 f0             	and    edx,0xfffffff0
c0001b12:	80 fa e0             	cmp    dl,0xe0
c0001b15:	75 0c                	jne    c0001b23 <tchar2uni+0x46>
c0001b17:	89 ca                	mov    edx,ecx
c0001b19:	b9 02 00 00 00       	mov    ecx,0x2
c0001b1e:	83 e2 0f             	and    edx,0xf
c0001b21:	eb 18                	jmp    c0001b3b <tchar2uni+0x5e>
c0001b23:	88 ca                	mov    dl,cl
c0001b25:	83 e2 f8             	and    edx,0xfffffff8
c0001b28:	88 d0                	mov    al,dl
c0001b2a:	83 ca ff             	or     edx,0xffffffff
c0001b2d:	3c f0                	cmp    al,0xf0
c0001b2f:	75 6c                	jne    c0001b9d <tchar2uni+0xc0>
c0001b31:	89 ca                	mov    edx,ecx
c0001b33:	b9 03 00 00 00       	mov    ecx,0x3
c0001b38:	83 e2 07             	and    edx,0x7
c0001b3b:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001b3f:	46                   	inc    esi
c0001b40:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001b43:	88 c8                	mov    al,cl
c0001b45:	83 e0 c0             	and    eax,0xffffffc0
c0001b48:	3c 80                	cmp    al,0x80
c0001b4a:	75 4e                	jne    c0001b9a <tchar2uni+0xbd>
c0001b4c:	c1 e2 06             	shl    edx,0x6
c0001b4f:	83 e1 3f             	and    ecx,0x3f
c0001b52:	09 ca                	or     edx,ecx
c0001b54:	39 de                	cmp    esi,ebx
c0001b56:	75 e7                	jne    c0001b3f <tchar2uni+0x62>
c0001b58:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001b5b:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001b61:	77 37                	ja     c0001b9a <tchar2uni+0xbd>
c0001b63:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001b69:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001b6f:	76 29                	jbe    c0001b9a <tchar2uni+0xbd>
c0001b71:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001b77:	76 1d                	jbe    c0001b96 <tchar2uni+0xb9>
c0001b79:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001b7f:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001b85:	c1 e1 06             	shl    ecx,0x6
c0001b88:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001b8e:	09 ca                	or     edx,ecx
c0001b90:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001b96:	89 1f                	mov    DWORD PTR [edi],ebx
c0001b98:	eb 03                	jmp    c0001b9d <tchar2uni+0xc0>
c0001b9a:	83 ca ff             	or     edx,0xffffffff
c0001b9d:	5b                   	pop    ebx
c0001b9e:	89 d0                	mov    eax,edx
c0001ba0:	5e                   	pop    esi
c0001ba1:	5f                   	pop    edi
c0001ba2:	c3                   	ret    

c0001ba3 <put_utf>:
c0001ba3:	53                   	push   ebx
c0001ba4:	83 f8 7f             	cmp    eax,0x7f
c0001ba7:	89 c3                	mov    ebx,eax
c0001ba9:	b0 00                	mov    al,0x0
c0001bab:	77 11                	ja     c0001bbe <put_utf+0x1b>
c0001bad:	85 c9                	test   ecx,ecx
c0001baf:	0f 84 e5 00 00 00    	je     c0001c9a <put_utf+0xf7>
c0001bb5:	88 1a                	mov    BYTE PTR [edx],bl
c0001bb7:	b0 01                	mov    al,0x1
c0001bb9:	e9 dc 00 00 00       	jmp    c0001c9a <put_utf+0xf7>
c0001bbe:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001bc4:	77 23                	ja     c0001be9 <put_utf+0x46>
c0001bc6:	83 f9 01             	cmp    ecx,0x1
c0001bc9:	0f 86 cb 00 00 00    	jbe    c0001c9a <put_utf+0xf7>
c0001bcf:	89 d8                	mov    eax,ebx
c0001bd1:	83 e3 3f             	and    ebx,0x3f
c0001bd4:	c1 e8 06             	shr    eax,0x6
c0001bd7:	83 cb 80             	or     ebx,0xffffff80
c0001bda:	83 c8 c0             	or     eax,0xffffffc0
c0001bdd:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001be0:	88 02                	mov    BYTE PTR [edx],al
c0001be2:	b0 02                	mov    al,0x2
c0001be4:	e9 b1 00 00 00       	jmp    c0001c9a <put_utf+0xf7>
c0001be9:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001bef:	77 40                	ja     c0001c31 <put_utf+0x8e>
c0001bf1:	83 f9 02             	cmp    ecx,0x2
c0001bf4:	0f 86 a0 00 00 00    	jbe    c0001c9a <put_utf+0xf7>
c0001bfa:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001c00:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001c06:	0f 86 8e 00 00 00    	jbe    c0001c9a <put_utf+0xf7>
c0001c0c:	89 d8                	mov    eax,ebx
c0001c0e:	c1 e8 0c             	shr    eax,0xc
c0001c11:	83 c8 e0             	or     eax,0xffffffe0
c0001c14:	88 02                	mov    BYTE PTR [edx],al
c0001c16:	89 d8                	mov    eax,ebx
c0001c18:	83 e3 3f             	and    ebx,0x3f
c0001c1b:	c1 e8 06             	shr    eax,0x6
c0001c1e:	83 cb 80             	or     ebx,0xffffff80
c0001c21:	83 e0 3f             	and    eax,0x3f
c0001c24:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001c27:	83 c8 80             	or     eax,0xffffff80
c0001c2a:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c2d:	b0 03                	mov    al,0x3
c0001c2f:	eb 69                	jmp    c0001c9a <put_utf+0xf7>
c0001c31:	83 f9 03             	cmp    ecx,0x3
c0001c34:	76 64                	jbe    c0001c9a <put_utf+0xf7>
c0001c36:	89 d9                	mov    ecx,ebx
c0001c38:	0f b7 c3             	movzx  eax,bx
c0001c3b:	66 31 c9             	xor    cx,cx
c0001c3e:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001c44:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001c4a:	c1 e9 06             	shr    ecx,0x6
c0001c4d:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001c53:	77 43                	ja     c0001c98 <put_utf+0xf5>
c0001c55:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001c5b:	77 3b                	ja     c0001c98 <put_utf+0xf5>
c0001c5d:	09 cb                	or     ebx,ecx
c0001c5f:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001c65:	89 d8                	mov    eax,ebx
c0001c67:	c1 e8 12             	shr    eax,0x12
c0001c6a:	83 c8 f0             	or     eax,0xfffffff0
c0001c6d:	88 02                	mov    BYTE PTR [edx],al
c0001c6f:	89 d8                	mov    eax,ebx
c0001c71:	c1 e8 0c             	shr    eax,0xc
c0001c74:	83 e0 3f             	and    eax,0x3f
c0001c77:	83 c8 80             	or     eax,0xffffff80
c0001c7a:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c7d:	89 d8                	mov    eax,ebx
c0001c7f:	83 e3 3f             	and    ebx,0x3f
c0001c82:	c1 e8 06             	shr    eax,0x6
c0001c85:	83 cb 80             	or     ebx,0xffffff80
c0001c88:	83 e0 3f             	and    eax,0x3f
c0001c8b:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001c8e:	83 c8 80             	or     eax,0xffffff80
c0001c91:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001c94:	b0 04                	mov    al,0x4
c0001c96:	eb 02                	jmp    c0001c9a <put_utf+0xf7>
c0001c98:	31 c0                	xor    eax,eax
c0001c9a:	5b                   	pop    ebx
c0001c9b:	c3                   	ret    

c0001c9c <clst2sect>:
c0001c9c:	89 c1                	mov    ecx,eax
c0001c9e:	83 ea 02             	sub    edx,0x2
c0001ca1:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ca4:	83 e8 02             	sub    eax,0x2
c0001ca7:	39 d0                	cmp    eax,edx
c0001ca9:	76 0d                	jbe    c0001cb8 <clst2sect+0x1c>
c0001cab:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001caf:	f7 e2                	mul    edx
c0001cb1:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001cb4:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001cb7:	c3                   	ret    
c0001cb8:	31 c0                	xor    eax,eax
c0001cba:	31 d2                	xor    edx,edx
c0001cbc:	c3                   	ret    

c0001cbd <clmt_clust>:
c0001cbd:	57                   	push   edi
c0001cbe:	89 cf                	mov    edi,ecx
c0001cc0:	56                   	push   esi
c0001cc1:	89 d6                	mov    esi,edx
c0001cc3:	53                   	push   ebx
c0001cc4:	0f ac fe 09          	shrd   esi,edi,0x9
c0001cc8:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001ccb:	89 f2                	mov    edx,esi
c0001ccd:	8b 00                	mov    eax,DWORD PTR [eax]
c0001ccf:	c1 ef 09             	shr    edi,0x9
c0001cd2:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001cd6:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001cd9:	89 f9                	mov    ecx,edi
c0001cdb:	31 ff                	xor    edi,edi
c0001cdd:	57                   	push   edi
c0001cde:	56                   	push   esi
c0001cdf:	51                   	push   ecx
c0001ce0:	52                   	push   edx
c0001ce1:	e8 56 18 02 00       	call   c002353c <__udivdi3>
c0001ce6:	83 c4 10             	add    esp,0x10
c0001ce9:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001ceb:	85 d2                	test   edx,edx
c0001ced:	74 10                	je     c0001cff <clmt_clust+0x42>
c0001cef:	39 d0                	cmp    eax,edx
c0001cf1:	72 07                	jb     c0001cfa <clmt_clust+0x3d>
c0001cf3:	29 d0                	sub    eax,edx
c0001cf5:	83 c3 08             	add    ebx,0x8
c0001cf8:	eb ef                	jmp    c0001ce9 <clmt_clust+0x2c>
c0001cfa:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001cfd:	89 c2                	mov    edx,eax
c0001cff:	5b                   	pop    ebx
c0001d00:	89 d0                	mov    eax,edx
c0001d02:	5e                   	pop    esi
c0001d03:	5f                   	pop    edi
c0001d04:	c3                   	ret    

c0001d05 <pick_lfn>:
c0001d05:	55                   	push   ebp
c0001d06:	57                   	push   edi
c0001d07:	56                   	push   esi
c0001d08:	89 d6                	mov    esi,edx
c0001d0a:	53                   	push   ebx
c0001d0b:	89 c3                	mov    ebx,eax
c0001d0d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d10:	e8 ee fc ff ff       	call   c0001a03 <ld_word>
c0001d15:	66 85 c0             	test   ax,ax
c0001d18:	74 04                	je     c0001d1e <pick_lfn+0x19>
c0001d1a:	31 c0                	xor    eax,eax
c0001d1c:	eb 5c                	jmp    c0001d7a <pick_lfn+0x75>
c0001d1e:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001d21:	bd 01 00 00 00       	mov    ebp,0x1
c0001d26:	83 e1 bf             	and    ecx,0xffffffbf
c0001d29:	31 ff                	xor    edi,edi
c0001d2b:	49                   	dec    ecx
c0001d2c:	6b c9 0d             	imul   ecx,ecx,0xd
c0001d2f:	0f b6 87 c0 5f 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffda040]
c0001d36:	01 f0                	add    eax,esi
c0001d38:	e8 c6 fc ff ff       	call   c0001a03 <ld_word>
c0001d3d:	66 85 ed             	test   bp,bp
c0001d40:	74 11                	je     c0001d53 <pick_lfn+0x4e>
c0001d42:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d48:	77 d0                	ja     c0001d1a <pick_lfn+0x15>
c0001d4a:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001d4e:	89 c5                	mov    ebp,eax
c0001d50:	41                   	inc    ecx
c0001d51:	eb 04                	jmp    c0001d57 <pick_lfn+0x52>
c0001d53:	66 40                	inc    ax
c0001d55:	75 c3                	jne    c0001d1a <pick_lfn+0x15>
c0001d57:	47                   	inc    edi
c0001d58:	83 ff 0d             	cmp    edi,0xd
c0001d5b:	75 d2                	jne    c0001d2f <pick_lfn+0x2a>
c0001d5d:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001d60:	74 13                	je     c0001d75 <pick_lfn+0x70>
c0001d62:	66 85 ed             	test   bp,bp
c0001d65:	74 0e                	je     c0001d75 <pick_lfn+0x70>
c0001d67:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d6d:	77 ab                	ja     c0001d1a <pick_lfn+0x15>
c0001d6f:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001d75:	b8 01 00 00 00       	mov    eax,0x1
c0001d7a:	5b                   	pop    ebx
c0001d7b:	5e                   	pop    esi
c0001d7c:	5f                   	pop    edi
c0001d7d:	5d                   	pop    ebp
c0001d7e:	c3                   	ret    

c0001d7f <put_lfn>:
c0001d7f:	55                   	push   ebp
c0001d80:	31 ed                	xor    ebp,ebp
c0001d82:	57                   	push   edi
c0001d83:	89 d7                	mov    edi,edx
c0001d85:	56                   	push   esi
c0001d86:	31 f6                	xor    esi,esi
c0001d88:	53                   	push   ebx
c0001d89:	83 ec 08             	sub    esp,0x8
c0001d8c:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d8f:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001d93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001d97:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001d9d:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001da0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001da3:	31 d2                	xor    edx,edx
c0001da5:	e8 cb fc ff ff       	call   c0001a75 <st_word>
c0001daa:	0f b6 d9             	movzx  ebx,cl
c0001dad:	4b                   	dec    ebx
c0001dae:	6b db 0d             	imul   ebx,ebx,0xd
c0001db1:	66 83 fe ff          	cmp    si,0xffff
c0001db5:	74 08                	je     c0001dbf <put_lfn+0x40>
c0001db7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001dba:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001dbe:	43                   	inc    ebx
c0001dbf:	0f b6 85 c0 5f 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffda040]
c0001dc6:	0f b7 d6             	movzx  edx,si
c0001dc9:	01 f8                	add    eax,edi
c0001dcb:	e8 a5 fc ff ff       	call   c0001a75 <st_word>
c0001dd0:	66 85 f6             	test   si,si
c0001dd3:	75 03                	jne    c0001dd8 <put_lfn+0x59>
c0001dd5:	83 ce ff             	or     esi,0xffffffff
c0001dd8:	45                   	inc    ebp
c0001dd9:	83 fd 0d             	cmp    ebp,0xd
c0001ddc:	75 d3                	jne    c0001db1 <put_lfn+0x32>
c0001dde:	66 46                	inc    si
c0001de0:	74 0a                	je     c0001dec <put_lfn+0x6d>
c0001de2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001de5:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001dea:	75 09                	jne    c0001df5 <put_lfn+0x76>
c0001dec:	88 c8                	mov    al,cl
c0001dee:	83 c8 40             	or     eax,0x40
c0001df1:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001df5:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001df9:	88 07                	mov    BYTE PTR [edi],al
c0001dfb:	83 c4 08             	add    esp,0x8
c0001dfe:	5b                   	pop    ebx
c0001dff:	5e                   	pop    esi
c0001e00:	5f                   	pop    edi
c0001e01:	5d                   	pop    ebp
c0001e02:	c3                   	ret    

c0001e03 <gen_numname>:
c0001e03:	57                   	push   edi
c0001e04:	89 cf                	mov    edi,ecx
c0001e06:	56                   	push   esi
c0001e07:	b9 0b 00 00 00       	mov    ecx,0xb
c0001e0c:	53                   	push   ebx
c0001e0d:	89 c6                	mov    esi,eax
c0001e0f:	83 ec 10             	sub    esp,0x10
c0001e12:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001e16:	e8 67 fc ff ff       	call   c0001a82 <mem_cpy>
c0001e1b:	83 fb 05             	cmp    ebx,0x5
c0001e1e:	76 2d                	jbe    c0001e4d <gen_numname+0x4a>
c0001e20:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001e23:	66 85 c0             	test   ax,ax
c0001e26:	74 25                	je     c0001e4d <gen_numname+0x4a>
c0001e28:	83 c7 02             	add    edi,0x2
c0001e2b:	ba 10 00 00 00       	mov    edx,0x10
c0001e30:	01 db                	add    ebx,ebx
c0001e32:	89 c1                	mov    ecx,eax
c0001e34:	66 d1 e8             	shr    ax,1
c0001e37:	83 e1 01             	and    ecx,0x1
c0001e3a:	01 cb                	add    ebx,ecx
c0001e3c:	0f ba e3 10          	bt     ebx,0x10
c0001e40:	73 06                	jae    c0001e48 <gen_numname+0x45>
c0001e42:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001e48:	4a                   	dec    edx
c0001e49:	75 e5                	jne    c0001e30 <gen_numname+0x2d>
c0001e4b:	eb d3                	jmp    c0001e20 <gen_numname+0x1d>
c0001e4d:	b8 07 00 00 00       	mov    eax,0x7
c0001e52:	88 d9                	mov    cl,bl
c0001e54:	83 e1 0f             	and    ecx,0xf
c0001e57:	8d 51 30             	lea    edx,[ecx+0x30]
c0001e5a:	80 fa 39             	cmp    dl,0x39
c0001e5d:	76 03                	jbe    c0001e62 <gen_numname+0x5f>
c0001e5f:	8d 51 37             	lea    edx,[ecx+0x37]
c0001e62:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001e65:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001e69:	89 da                	mov    edx,ebx
c0001e6b:	c1 ea 04             	shr    edx,0x4
c0001e6e:	83 fb 0f             	cmp    ebx,0xf
c0001e71:	76 06                	jbe    c0001e79 <gen_numname+0x76>
c0001e73:	89 c8                	mov    eax,ecx
c0001e75:	89 d3                	mov    ebx,edx
c0001e77:	eb d9                	jmp    c0001e52 <gen_numname+0x4f>
c0001e79:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001e7e:	31 d2                	xor    edx,edx
c0001e80:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001e83:	8d 04 16             	lea    eax,[esi+edx*1]
c0001e86:	39 ca                	cmp    edx,ecx
c0001e88:	73 18                	jae    c0001ea2 <gen_numname+0x9f>
c0001e8a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e8d:	3c 20                	cmp    al,0x20
c0001e8f:	74 11                	je     c0001ea2 <gen_numname+0x9f>
c0001e91:	e8 41 fc ff ff       	call   c0001ad7 <dbc_1st>
c0001e96:	85 c0                	test   eax,eax
c0001e98:	74 05                	je     c0001e9f <gen_numname+0x9c>
c0001e9a:	39 d3                	cmp    ebx,edx
c0001e9c:	74 04                	je     c0001ea2 <gen_numname+0x9f>
c0001e9e:	42                   	inc    edx
c0001e9f:	42                   	inc    edx
c0001ea0:	eb e1                	jmp    c0001e83 <gen_numname+0x80>
c0001ea2:	b0 20                	mov    al,0x20
c0001ea4:	83 f9 07             	cmp    ecx,0x7
c0001ea7:	77 05                	ja     c0001eae <gen_numname+0xab>
c0001ea9:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001ead:	41                   	inc    ecx
c0001eae:	42                   	inc    edx
c0001eaf:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001eb3:	83 fa 07             	cmp    edx,0x7
c0001eb6:	76 ea                	jbe    c0001ea2 <gen_numname+0x9f>
c0001eb8:	83 c4 10             	add    esp,0x10
c0001ebb:	5b                   	pop    ebx
c0001ebc:	5e                   	pop    esi
c0001ebd:	5f                   	pop    edi
c0001ebe:	c3                   	ret    

c0001ebf <sum_sfn>:
c0001ebf:	31 c9                	xor    ecx,ecx
c0001ec1:	31 d2                	xor    edx,edx
c0001ec3:	d0 ca                	ror    dl,1
c0001ec5:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001ec8:	41                   	inc    ecx
c0001ec9:	83 f9 0b             	cmp    ecx,0xb
c0001ecc:	75 f5                	jne    c0001ec3 <sum_sfn+0x4>
c0001ece:	88 d0                	mov    al,dl
c0001ed0:	c3                   	ret    

c0001ed1 <xdir_sum>:
c0001ed1:	56                   	push   esi
c0001ed2:	31 c9                	xor    ecx,ecx
c0001ed4:	53                   	push   ebx
c0001ed5:	31 d2                	xor    edx,edx
c0001ed7:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001edb:	43                   	inc    ebx
c0001edc:	c1 e3 05             	shl    ebx,0x5
c0001edf:	83 fa 02             	cmp    edx,0x2
c0001ee2:	74 0b                	je     c0001eef <xdir_sum+0x1e>
c0001ee4:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001ee8:	66 d1 c9             	ror    cx,1
c0001eeb:	01 f1                	add    ecx,esi
c0001eed:	eb 05                	jmp    c0001ef4 <xdir_sum+0x23>
c0001eef:	ba 03 00 00 00       	mov    edx,0x3
c0001ef4:	42                   	inc    edx
c0001ef5:	39 d3                	cmp    ebx,edx
c0001ef7:	77 e6                	ja     c0001edf <xdir_sum+0xe>
c0001ef9:	89 c8                	mov    eax,ecx
c0001efb:	5b                   	pop    ebx
c0001efc:	5e                   	pop    esi
c0001efd:	c3                   	ret    

c0001efe <xsum32>:
c0001efe:	d1 ca                	ror    edx,1
c0001f00:	0f b6 c0             	movzx  eax,al
c0001f03:	01 d0                	add    eax,edx
c0001f05:	c3                   	ret    

c0001f06 <get_xfileinfo>:
c0001f06:	55                   	push   ebp
c0001f07:	31 c9                	xor    ecx,ecx
c0001f09:	57                   	push   edi
c0001f0a:	bd 40 00 00 00       	mov    ebp,0x40
c0001f0f:	56                   	push   esi
c0001f10:	31 ff                	xor    edi,edi
c0001f12:	53                   	push   ebx
c0001f13:	89 c6                	mov    esi,eax
c0001f15:	83 ec 0c             	sub    esp,0xc
c0001f18:	89 d3                	mov    ebx,edx
c0001f1a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001f21:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001f25:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001f28:	76 6d                	jbe    c0001f97 <get_xfileinfo+0x91>
c0001f2a:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001f30:	76 0b                	jbe    c0001f3d <get_xfileinfo+0x37>
c0001f32:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001f36:	bf 01 00 00 00       	mov    edi,0x1
c0001f3b:	eb 63                	jmp    c0001fa0 <get_xfileinfo+0x9a>
c0001f3d:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001f43:	75 03                	jne    c0001f48 <get_xfileinfo+0x42>
c0001f45:	83 c5 02             	add    ebp,0x2
c0001f48:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001f4b:	83 c5 02             	add    ebp,0x2
c0001f4e:	e8 b0 fa ff ff       	call   c0001a03 <ld_word>
c0001f53:	ff 04 24             	inc    DWORD PTR [esp]
c0001f56:	66 85 c9             	test   cx,cx
c0001f59:	75 0d                	jne    c0001f68 <get_xfileinfo+0x62>
c0001f5b:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001f61:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001f66:	76 2b                	jbe    c0001f93 <get_xfileinfo+0x8d>
c0001f68:	c1 e1 10             	shl    ecx,0x10
c0001f6b:	ba ff 00 00 00       	mov    edx,0xff
c0001f70:	0f b7 c0             	movzx  eax,ax
c0001f73:	29 fa                	sub    edx,edi
c0001f75:	09 c8                	or     eax,ecx
c0001f77:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001f7b:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001f7f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001f83:	e8 1b fc ff ff       	call   c0001ba3 <put_utf>
c0001f88:	84 c0                	test   al,al
c0001f8a:	74 a6                	je     c0001f32 <get_xfileinfo+0x2c>
c0001f8c:	0f b6 c0             	movzx  eax,al
c0001f8f:	01 c7                	add    edi,eax
c0001f91:	31 c0                	xor    eax,eax
c0001f93:	89 c1                	mov    ecx,eax
c0001f95:	eb 8a                	jmp    c0001f21 <get_xfileinfo+0x1b>
c0001f97:	85 ff                	test   edi,edi
c0001f99:	74 97                	je     c0001f32 <get_xfileinfo+0x2c>
c0001f9b:	66 85 c9             	test   cx,cx
c0001f9e:	75 92                	jne    c0001f32 <get_xfileinfo+0x2c>
c0001fa0:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001fa5:	31 c0                	xor    eax,eax
c0001fa7:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001fab:	31 d2                	xor    edx,edx
c0001fad:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001fb0:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001fb3:	80 e1 10             	and    cl,0x10
c0001fb6:	75 08                	jne    c0001fc0 <get_xfileinfo+0xba>
c0001fb8:	8d 46 38             	lea    eax,[esi+0x38]
c0001fbb:	e8 68 fa ff ff       	call   c0001a28 <ld_qword>
c0001fc0:	89 03                	mov    DWORD PTR [ebx],eax
c0001fc2:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001fc5:	8d 46 0c             	lea    eax,[esi+0xc]
c0001fc8:	e8 36 fa ff ff       	call   c0001a03 <ld_word>
c0001fcd:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0001fd1:	8d 46 0e             	lea    eax,[esi+0xe]
c0001fd4:	e8 2a fa ff ff       	call   c0001a03 <ld_word>
c0001fd9:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0001fdd:	83 c4 0c             	add    esp,0xc
c0001fe0:	5b                   	pop    ebx
c0001fe1:	5e                   	pop    esi
c0001fe2:	5f                   	pop    edi
c0001fe3:	5d                   	pop    ebp
c0001fe4:	c3                   	ret    

c0001fe5 <get_ldnumber>:
c0001fe5:	8b 10                	mov    edx,DWORD PTR [eax]
c0001fe7:	85 d2                	test   edx,edx
c0001fe9:	74 14                	je     c0001fff <get_ldnumber+0x1a>
c0001feb:	56                   	push   esi
c0001fec:	53                   	push   ebx
c0001fed:	89 d3                	mov    ebx,edx
c0001fef:	43                   	inc    ebx
c0001ff0:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0001ff3:	80 f9 1f             	cmp    cl,0x1f
c0001ff6:	76 0d                	jbe    c0002005 <get_ldnumber+0x20>
c0001ff8:	80 f9 3a             	cmp    cl,0x3a
c0001ffb:	75 f2                	jne    c0001fef <get_ldnumber+0xa>
c0001ffd:	eb 0a                	jmp    c0002009 <get_ldnumber+0x24>
c0001fff:	83 c9 ff             	or     ecx,0xffffffff
c0002002:	89 c8                	mov    eax,ecx
c0002004:	c3                   	ret    
c0002005:	31 c9                	xor    ecx,ecx
c0002007:	eb 24                	jmp    c000202d <get_ldnumber+0x48>
c0002009:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000200c:	8d 4e d0             	lea    ecx,[esi-0x30]
c000200f:	80 f9 09             	cmp    cl,0x9
c0002012:	77 16                	ja     c000202a <get_ldnumber+0x45>
c0002014:	83 c2 02             	add    edx,0x2
c0002017:	83 c9 ff             	or     ecx,0xffffffff
c000201a:	39 d3                	cmp    ebx,edx
c000201c:	75 0f                	jne    c000202d <get_ldnumber+0x48>
c000201e:	89 f2                	mov    edx,esi
c0002020:	89 18                	mov    DWORD PTR [eax],ebx
c0002022:	0f be ca             	movsx  ecx,dl
c0002025:	83 e9 30             	sub    ecx,0x30
c0002028:	eb 03                	jmp    c000202d <get_ldnumber+0x48>
c000202a:	83 c9 ff             	or     ecx,0xffffffff
c000202d:	89 c8                	mov    eax,ecx
c000202f:	5b                   	pop    ebx
c0002030:	5e                   	pop    esi
c0002031:	c3                   	ret    

c0002032 <crc32>:
c0002032:	56                   	push   esi
c0002033:	89 d6                	mov    esi,edx
c0002035:	53                   	push   ebx
c0002036:	b2 01                	mov    dl,0x1
c0002038:	bb 08 00 00 00       	mov    ebx,0x8
c000203d:	89 f1                	mov    ecx,esi
c000203f:	84 d1                	test   cl,dl
c0002041:	0f 95 c1             	setne  cl
c0002044:	0f b6 c9             	movzx  ecx,cl
c0002047:	31 c1                	xor    ecx,eax
c0002049:	89 c8                	mov    eax,ecx
c000204b:	d1 e8                	shr    eax,1
c000204d:	80 e1 01             	and    cl,0x1
c0002050:	74 05                	je     c0002057 <crc32+0x25>
c0002052:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0002057:	d1 e2                	shl    edx,1
c0002059:	4b                   	dec    ebx
c000205a:	75 e1                	jne    c000203d <crc32+0xb>
c000205c:	5b                   	pop    ebx
c000205d:	5e                   	pop    esi
c000205e:	c3                   	ret    

c000205f <test_gpt_header>:
c000205f:	55                   	push   ebp
c0002060:	b9 10 00 00 00       	mov    ecx,0x10
c0002065:	57                   	push   edi
c0002066:	ba c0 5e 02 c0       	mov    edx,0xc0025ec0
c000206b:	56                   	push   esi
c000206c:	31 ff                	xor    edi,edi
c000206e:	53                   	push   ebx
c000206f:	89 c3                	mov    ebx,eax
c0002071:	e8 2c fa ff ff       	call   c0001aa2 <mem_cmp>
c0002076:	85 c0                	test   eax,eax
c0002078:	75 55                	jne    c00020cf <test_gpt_header+0x70>
c000207a:	89 c7                	mov    edi,eax
c000207c:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c0002081:	83 ce ff             	or     esi,0xffffffff
c0002084:	31 d2                	xor    edx,edx
c0002086:	83 fd 03             	cmp    ebp,0x3
c0002089:	76 05                	jbe    c0002090 <test_gpt_header+0x31>
c000208b:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c0002090:	89 f0                	mov    eax,esi
c0002092:	45                   	inc    ebp
c0002093:	e8 9a ff ff ff       	call   c0002032 <crc32>
c0002098:	83 fd 4c             	cmp    ebp,0x4c
c000209b:	89 c6                	mov    esi,eax
c000209d:	75 e5                	jne    c0002084 <test_gpt_header+0x25>
c000209f:	8d 43 10             	lea    eax,[ebx+0x10]
c00020a2:	f7 d6                	not    esi
c00020a4:	e8 67 f9 ff ff       	call   c0001a10 <ld_dword>
c00020a9:	39 c6                	cmp    esi,eax
c00020ab:	75 22                	jne    c00020cf <test_gpt_header+0x70>
c00020ad:	8d 43 54             	lea    eax,[ebx+0x54]
c00020b0:	e8 5b f9 ff ff       	call   c0001a10 <ld_dword>
c00020b5:	83 c0 80             	add    eax,0xffffff80
c00020b8:	75 15                	jne    c00020cf <test_gpt_header+0x70>
c00020ba:	8d 43 50             	lea    eax,[ebx+0x50]
c00020bd:	e8 4e f9 ff ff       	call   c0001a10 <ld_dword>
c00020c2:	3d 80 00 00 00       	cmp    eax,0x80
c00020c7:	0f 96 c0             	setbe  al
c00020ca:	0f b6 c0             	movzx  eax,al
c00020cd:	89 c7                	mov    edi,eax
c00020cf:	5b                   	pop    ebx
c00020d0:	89 f8                	mov    eax,edi
c00020d2:	5e                   	pop    esi
c00020d3:	5f                   	pop    edi
c00020d4:	5d                   	pop    ebp
c00020d5:	c3                   	ret    

c00020d6 <make_rand>:
c00020d6:	56                   	push   esi
c00020d7:	85 c0                	test   eax,eax
c00020d9:	53                   	push   ebx
c00020da:	75 05                	jne    c00020e1 <make_rand+0xb>
c00020dc:	b8 01 00 00 00       	mov    eax,0x1
c00020e1:	01 d1                	add    ecx,edx
c00020e3:	bb 08 00 00 00       	mov    ebx,0x8
c00020e8:	89 c6                	mov    esi,eax
c00020ea:	d1 e8                	shr    eax,1
c00020ec:	83 e6 01             	and    esi,0x1
c00020ef:	85 f6                	test   esi,esi
c00020f1:	74 05                	je     c00020f8 <make_rand+0x22>
c00020f3:	35 00 00 00 a3       	xor    eax,0xa3000000
c00020f8:	4b                   	dec    ebx
c00020f9:	75 ed                	jne    c00020e8 <make_rand+0x12>
c00020fb:	42                   	inc    edx
c00020fc:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c00020ff:	39 ca                	cmp    edx,ecx
c0002101:	75 e0                	jne    c00020e3 <make_rand+0xd>
c0002103:	5b                   	pop    ebx
c0002104:	5e                   	pop    esi
c0002105:	c3                   	ret    

c0002106 <validate>:
c0002106:	56                   	push   esi
c0002107:	53                   	push   ebx
c0002108:	89 d6                	mov    esi,edx
c000210a:	51                   	push   ecx
c000210b:	85 c0                	test   eax,eax
c000210d:	75 09                	jne    c0002118 <validate+0x12>
c000210f:	b8 09 00 00 00       	mov    eax,0x9
c0002114:	31 c9                	xor    ecx,ecx
c0002116:	eb 2f                	jmp    c0002147 <validate+0x41>
c0002118:	89 c3                	mov    ebx,eax
c000211a:	8b 00                	mov    eax,DWORD PTR [eax]
c000211c:	85 c0                	test   eax,eax
c000211e:	74 ef                	je     c000210f <validate+0x9>
c0002120:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002123:	74 ea                	je     c000210f <validate+0x9>
c0002125:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002129:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000212d:	75 e0                	jne    c000210f <validate+0x9>
c000212f:	83 ec 0c             	sub    esp,0xc
c0002132:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002136:	50                   	push   eax
c0002137:	e8 76 f8 ff ff       	call   c00019b2 <disk_status>
c000213c:	83 c4 10             	add    esp,0x10
c000213f:	a8 01                	test   al,0x1
c0002141:	75 cc                	jne    c000210f <validate+0x9>
c0002143:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002145:	31 c0                	xor    eax,eax
c0002147:	89 0e                	mov    DWORD PTR [esi],ecx
c0002149:	5a                   	pop    edx
c000214a:	5b                   	pop    ebx
c000214b:	5e                   	pop    esi
c000214c:	c3                   	ret    

c000214d <sync_window>:
c000214d:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002151:	0f 84 85 00 00 00    	je     c00021dc <sync_window+0x8f>
c0002157:	55                   	push   ebp
c0002158:	8d 68 54             	lea    ebp,[eax+0x54]
c000215b:	57                   	push   edi
c000215c:	56                   	push   esi
c000215d:	53                   	push   ebx
c000215e:	89 c3                	mov    ebx,eax
c0002160:	83 ec 28             	sub    esp,0x28
c0002163:	6a 01                	push   0x1
c0002165:	ff 70 50             	push   DWORD PTR [eax+0x50]
c0002168:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c000216b:	55                   	push   ebp
c000216c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002170:	50                   	push   eax
c0002171:	e8 58 f8 ff ff       	call   c00019ce <disk_write>
c0002176:	83 c4 20             	add    esp,0x20
c0002179:	ba 01 00 00 00       	mov    edx,0x1
c000217e:	85 c0                	test   eax,eax
c0002180:	75 50                	jne    c00021d2 <sync_window+0x85>
c0002182:	31 ff                	xor    edi,edi
c0002184:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0002187:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000218b:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000218f:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0002192:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c0002195:	89 c6                	mov    esi,eax
c0002197:	89 d7                	mov    edi,edx
c0002199:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c000219c:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00021a0:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00021a3:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00021a7:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00021ab:	73 23                	jae    c00021d0 <sync_window+0x83>
c00021ad:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00021b1:	75 1d                	jne    c00021d0 <sync_window+0x83>
c00021b3:	83 ec 0c             	sub    esp,0xc
c00021b6:	6a 01                	push   0x1
c00021b8:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00021bc:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00021c0:	52                   	push   edx
c00021c1:	50                   	push   eax
c00021c2:	55                   	push   ebp
c00021c3:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00021c7:	50                   	push   eax
c00021c8:	e8 01 f8 ff ff       	call   c00019ce <disk_write>
c00021cd:	83 c4 20             	add    esp,0x20
c00021d0:	31 d2                	xor    edx,edx
c00021d2:	83 c4 1c             	add    esp,0x1c
c00021d5:	89 d0                	mov    eax,edx
c00021d7:	5b                   	pop    ebx
c00021d8:	5e                   	pop    esi
c00021d9:	5f                   	pop    edi
c00021da:	5d                   	pop    ebp
c00021db:	c3                   	ret    
c00021dc:	31 d2                	xor    edx,edx
c00021de:	89 d0                	mov    eax,edx
c00021e0:	c3                   	ret    

c00021e1 <move_window>:
c00021e1:	56                   	push   esi
c00021e2:	53                   	push   ebx
c00021e3:	89 c3                	mov    ebx,eax
c00021e5:	83 ec 14             	sub    esp,0x14
c00021e8:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c00021eb:	75 07                	jne    c00021f4 <move_window+0x13>
c00021ed:	31 f6                	xor    esi,esi
c00021ef:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c00021f2:	74 59                	je     c000224d <move_window+0x6c>
c00021f4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00021f8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00021fc:	89 d8                	mov    eax,ebx
c00021fe:	e8 4a ff ff ff       	call   c000214d <sync_window>
c0002203:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002207:	89 c6                	mov    esi,eax
c0002209:	85 c0                	test   eax,eax
c000220b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000220f:	75 3c                	jne    c000224d <move_window+0x6c>
c0002211:	83 ec 0c             	sub    esp,0xc
c0002214:	8d 43 54             	lea    eax,[ebx+0x54]
c0002217:	6a 01                	push   0x1
c0002219:	51                   	push   ecx
c000221a:	52                   	push   edx
c000221b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000221f:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002223:	50                   	push   eax
c0002224:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002228:	50                   	push   eax
c0002229:	e8 8a f7 ff ff       	call   c00019b8 <disk_read>
c000222e:	83 c4 20             	add    esp,0x20
c0002231:	85 c0                	test   eax,eax
c0002233:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002237:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000223b:	74 0a                	je     c0002247 <move_window+0x66>
c000223d:	83 ca ff             	or     edx,0xffffffff
c0002240:	be 01 00 00 00       	mov    esi,0x1
c0002245:	89 d1                	mov    ecx,edx
c0002247:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000224a:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c000224d:	89 f0                	mov    eax,esi
c000224f:	83 c4 14             	add    esp,0x14
c0002252:	5b                   	pop    ebx
c0002253:	5e                   	pop    esi
c0002254:	c3                   	ret    

c0002255 <check_fs>:
c0002255:	53                   	push   ebx
c0002256:	89 c3                	mov    ebx,eax
c0002258:	83 ec 08             	sub    esp,0x8
c000225b:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000225f:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c0002266:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c000226d:	e8 6f ff ff ff       	call   c00021e1 <move_window>
c0002272:	ba 04 00 00 00       	mov    edx,0x4
c0002277:	85 c0                	test   eax,eax
c0002279:	0f 85 89 00 00 00    	jne    c0002308 <check_fs+0xb3>
c000227f:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0002285:	e8 79 f7 ff ff       	call   c0001a03 <ld_word>
c000228a:	ba 03 00 00 00       	mov    edx,0x3
c000228f:	66 3d 55 aa          	cmp    ax,0xaa55
c0002293:	75 73                	jne    c0002308 <check_fs+0xb3>
c0002295:	ba e0 5f 02 c0       	mov    edx,0xc0025fe0
c000229a:	8d 43 54             	lea    eax,[ebx+0x54]
c000229d:	b9 0b 00 00 00       	mov    ecx,0xb
c00022a2:	e8 fb f7 ff ff       	call   c0001aa2 <mem_cmp>
c00022a7:	ba 01 00 00 00       	mov    edx,0x1
c00022ac:	85 c0                	test   eax,eax
c00022ae:	74 58                	je     c0002308 <check_fs+0xb3>
c00022b0:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00022b3:	8d 50 18             	lea    edx,[eax+0x18]
c00022b6:	80 fa 01             	cmp    dl,0x1
c00022b9:	76 09                	jbe    c00022c4 <check_fs+0x6f>
c00022bb:	ba 02 00 00 00       	mov    edx,0x2
c00022c0:	3c eb                	cmp    al,0xeb
c00022c2:	75 44                	jne    c0002308 <check_fs+0xb3>
c00022c4:	ba d4 8c 02 c0       	mov    edx,0xc0028cd4
c00022c9:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00022cf:	b9 03 00 00 00       	mov    ecx,0x3
c00022d4:	e8 c9 f7 ff ff       	call   c0001aa2 <mem_cmp>
c00022d9:	31 d2                	xor    edx,edx
c00022db:	85 c0                	test   eax,eax
c00022dd:	74 29                	je     c0002308 <check_fs+0xb3>
c00022df:	ba ec 5f 02 c0       	mov    edx,0xc0025fec
c00022e4:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c00022ea:	b9 05 00 00 00       	mov    ecx,0x5
c00022ef:	e8 ae f7 ff ff       	call   c0001aa2 <mem_cmp>
c00022f4:	31 d2                	xor    edx,edx
c00022f6:	85 c0                	test   eax,eax
c00022f8:	74 0e                	je     c0002308 <check_fs+0xb3>
c00022fa:	31 d2                	xor    edx,edx
c00022fc:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002303:	0f 95 c2             	setne  dl
c0002306:	01 d2                	add    edx,edx
c0002308:	89 d0                	mov    eax,edx
c000230a:	83 c4 08             	add    esp,0x8
c000230d:	5b                   	pop    ebx
c000230e:	c3                   	ret    

c000230f <find_volume>:
c000230f:	55                   	push   ebp
c0002310:	31 c9                	xor    ecx,ecx
c0002312:	57                   	push   edi
c0002313:	56                   	push   esi
c0002314:	89 d6                	mov    esi,edx
c0002316:	53                   	push   ebx
c0002317:	31 d2                	xor    edx,edx
c0002319:	83 ec 3c             	sub    esp,0x3c
c000231c:	89 c3                	mov    ebx,eax
c000231e:	e8 32 ff ff ff       	call   c0002255 <check_fs>
c0002323:	83 f8 02             	cmp    eax,0x2
c0002326:	74 0e                	je     c0002336 <find_volume+0x27>
c0002328:	0f 87 5d 01 00 00    	ja     c000248b <find_volume+0x17c>
c000232e:	85 f6                	test   esi,esi
c0002330:	0f 84 55 01 00 00    	je     c000248b <find_volume+0x17c>
c0002336:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000233d:	0f 85 dd 00 00 00    	jne    c0002420 <find_volume+0x111>
c0002343:	31 c9                	xor    ecx,ecx
c0002345:	ba 01 00 00 00       	mov    edx,0x1
c000234a:	89 d8                	mov    eax,ebx
c000234c:	e8 90 fe ff ff       	call   c00021e1 <move_window>
c0002351:	85 c0                	test   eax,eax
c0002353:	74 0a                	je     c000235f <find_volume+0x50>
c0002355:	b8 04 00 00 00       	mov    eax,0x4
c000235a:	e9 2c 01 00 00       	jmp    c000248b <find_volume+0x17c>
c000235f:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002362:	89 e8                	mov    eax,ebp
c0002364:	e8 f6 fc ff ff       	call   c000205f <test_gpt_header>
c0002369:	85 c0                	test   eax,eax
c000236b:	75 0a                	jne    c0002377 <find_volume+0x68>
c000236d:	b8 03 00 00 00       	mov    eax,0x3
c0002372:	e9 14 01 00 00       	jmp    c000248b <find_volume+0x17c>
c0002377:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c000237d:	e8 8e f6 ff ff       	call   c0001a10 <ld_dword>
c0002382:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002386:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c000238c:	e8 97 f6 ff ff       	call   c0001a28 <ld_qword>
c0002391:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0002399:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000239d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00023a1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00023a9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00023ad:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00023b1:	74 ba                	je     c000236d <find_volume+0x5e>
c00023b3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00023b7:	31 c9                	xor    ecx,ecx
c00023b9:	c1 e7 07             	shl    edi,0x7
c00023bc:	89 d8                	mov    eax,ebx
c00023be:	89 fa                	mov    edx,edi
c00023c0:	c1 ea 09             	shr    edx,0x9
c00023c3:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00023c7:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00023cb:	e8 11 fe ff ff       	call   c00021e1 <move_window>
c00023d0:	85 c0                	test   eax,eax
c00023d2:	75 81                	jne    c0002355 <find_volume+0x46>
c00023d4:	81 e7 80 01 00 00    	and    edi,0x180
c00023da:	b9 10 00 00 00       	mov    ecx,0x10
c00023df:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c00023e3:	ba d0 5f 02 c0       	mov    edx,0xc0025fd0
c00023e8:	e8 b5 f6 ff ff       	call   c0001aa2 <mem_cmp>
c00023ed:	85 c0                	test   eax,eax
c00023ef:	75 29                	jne    c000241a <find_volume+0x10b>
c00023f1:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c00023f5:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c00023f9:	e8 2a f6 ff ff       	call   c0001a28 <ld_qword>
c00023fe:	89 d1                	mov    ecx,edx
c0002400:	89 c2                	mov    edx,eax
c0002402:	89 d8                	mov    eax,ebx
c0002404:	e8 4c fe ff ff       	call   c0002255 <check_fs>
c0002409:	85 f6                	test   esi,esi
c000240b:	75 07                	jne    c0002414 <find_volume+0x105>
c000240d:	83 f8 01             	cmp    eax,0x1
c0002410:	77 08                	ja     c000241a <find_volume+0x10b>
c0002412:	eb 77                	jmp    c000248b <find_volume+0x17c>
c0002414:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002418:	74 71                	je     c000248b <find_volume+0x17c>
c000241a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000241e:	eb 89                	jmp    c00023a9 <find_volume+0x9a>
c0002420:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002424:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000242a:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002430:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002434:	89 cd                	mov    ebp,ecx
c0002436:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000243a:	89 f8                	mov    eax,edi
c000243c:	83 c7 10             	add    edi,0x10
c000243f:	e8 cc f5 ff ff       	call   c0001a10 <ld_dword>
c0002444:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002448:	89 01                	mov    DWORD PTR [ecx],eax
c000244a:	83 c1 04             	add    ecx,0x4
c000244d:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002451:	75 e3                	jne    c0002436 <find_volume+0x127>
c0002453:	31 ff                	xor    edi,edi
c0002455:	85 f6                	test   esi,esi
c0002457:	74 03                	je     c000245c <find_volume+0x14d>
c0002459:	8d 7e ff             	lea    edi,[esi-0x1]
c000245c:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c0002460:	85 d2                	test   edx,edx
c0002462:	74 14                	je     c0002478 <find_volume+0x169>
c0002464:	31 c9                	xor    ecx,ecx
c0002466:	89 d8                	mov    eax,ebx
c0002468:	e8 e8 fd ff ff       	call   c0002255 <check_fs>
c000246d:	83 f8 01             	cmp    eax,0x1
c0002470:	76 19                	jbe    c000248b <find_volume+0x17c>
c0002472:	85 f6                	test   esi,esi
c0002474:	74 0f                	je     c0002485 <find_volume+0x176>
c0002476:	eb 13                	jmp    c000248b <find_volume+0x17c>
c0002478:	85 f6                	test   esi,esi
c000247a:	0f 85 ed fe ff ff    	jne    c000236d <find_volume+0x5e>
c0002480:	b8 03 00 00 00       	mov    eax,0x3
c0002485:	47                   	inc    edi
c0002486:	83 ff 03             	cmp    edi,0x3
c0002489:	76 d1                	jbe    c000245c <find_volume+0x14d>
c000248b:	83 c4 3c             	add    esp,0x3c
c000248e:	5b                   	pop    ebx
c000248f:	5e                   	pop    esi
c0002490:	5f                   	pop    edi
c0002491:	5d                   	pop    ebp
c0002492:	c3                   	ret    

c0002493 <mount_volume>:
c0002493:	55                   	push   ebp
c0002494:	57                   	push   edi
c0002495:	89 cf                	mov    edi,ecx
c0002497:	56                   	push   esi
c0002498:	53                   	push   ebx
c0002499:	bb 0b 00 00 00       	mov    ebx,0xb
c000249e:	83 ec 3c             	sub    esp,0x3c
c00024a1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024a7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00024ab:	e8 35 fb ff ff       	call   c0001fe5 <get_ldnumber>
c00024b0:	85 c0                	test   eax,eax
c00024b2:	0f 88 3a 05 00 00    	js     c00029f2 <mount_volume+0x55f>
c00024b8:	8b 2c 85 c0 a5 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd5a40]
c00024bf:	89 c6                	mov    esi,eax
c00024c1:	bb 0c 00 00 00       	mov    ebx,0xc
c00024c6:	85 ed                	test   ebp,ebp
c00024c8:	0f 84 24 05 00 00    	je     c00029f2 <mount_volume+0x55f>
c00024ce:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00024d2:	83 e7 fe             	and    edi,0xfffffffe
c00024d5:	89 2a                	mov    DWORD PTR [edx],ebp
c00024d7:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00024db:	74 32                	je     c000250f <mount_volume+0x7c>
c00024dd:	83 ec 0c             	sub    esp,0xc
c00024e0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00024e4:	50                   	push   eax
c00024e5:	e8 c8 f4 ff ff       	call   c00019b2 <disk_status>
c00024ea:	83 c4 10             	add    esp,0x10
c00024ed:	a8 01                	test   al,0x1
c00024ef:	75 1e                	jne    c000250f <mount_volume+0x7c>
c00024f1:	31 db                	xor    ebx,ebx
c00024f3:	89 f9                	mov    ecx,edi
c00024f5:	84 c9                	test   cl,cl
c00024f7:	0f 84 f5 04 00 00    	je     c00029f2 <mount_volume+0x55f>
c00024fd:	a8 04                	test   al,0x4
c00024ff:	0f 84 ed 04 00 00    	je     c00029f2 <mount_volume+0x55f>
c0002505:	bb 0a 00 00 00       	mov    ebx,0xa
c000250a:	e9 e3 04 00 00       	jmp    c00029f2 <mount_volume+0x55f>
c000250f:	83 ec 0c             	sub    esp,0xc
c0002512:	89 f0                	mov    eax,esi
c0002514:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002518:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000251b:	0f b6 f0             	movzx  esi,al
c000251e:	bb 03 00 00 00       	mov    ebx,0x3
c0002523:	56                   	push   esi
c0002524:	e8 8c f4 ff ff       	call   c00019b5 <disk_initialize>
c0002529:	83 c4 10             	add    esp,0x10
c000252c:	a8 01                	test   al,0x1
c000252e:	0f 85 be 04 00 00    	jne    c00029f2 <mount_volume+0x55f>
c0002534:	89 f9                	mov    ecx,edi
c0002536:	84 c9                	test   cl,cl
c0002538:	74 04                	je     c000253e <mount_volume+0xab>
c000253a:	a8 04                	test   al,0x4
c000253c:	75 c7                	jne    c0002505 <mount_volume+0x72>
c000253e:	31 d2                	xor    edx,edx
c0002540:	89 e8                	mov    eax,ebp
c0002542:	e8 c8 fd ff ff       	call   c000230f <find_volume>
c0002547:	83 f8 04             	cmp    eax,0x4
c000254a:	75 0a                	jne    c0002556 <mount_volume+0xc3>
c000254c:	bb 01 00 00 00       	mov    ebx,0x1
c0002551:	e9 9c 04 00 00       	jmp    c00029f2 <mount_volume+0x55f>
c0002556:	83 f8 01             	cmp    eax,0x1
c0002559:	76 0a                	jbe    c0002565 <mount_volume+0xd2>
c000255b:	bb 0d 00 00 00       	mov    ebx,0xd
c0002560:	e9 8d 04 00 00       	jmp    c00029f2 <mount_volume+0x55f>
c0002565:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c0002568:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c000256b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000256f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002573:	75 17                	jne    c000258c <mount_volume+0xf9>
c0002575:	b8 0b 00 00 00       	mov    eax,0xb
c000257a:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c000257f:	75 da                	jne    c000255b <mount_volume+0xc8>
c0002581:	40                   	inc    eax
c0002582:	83 f8 40             	cmp    eax,0x40
c0002585:	75 f3                	jne    c000257a <mount_volume+0xe7>
c0002587:	e9 5a 02 00 00       	jmp    c00027e6 <mount_volume+0x353>
c000258c:	8d 45 5f             	lea    eax,[ebp+0x5f]
c000258f:	e8 6f f4 ff ff       	call   c0001a03 <ld_word>
c0002594:	66 3d 00 02          	cmp    ax,0x200
c0002598:	75 c1                	jne    c000255b <mount_volume+0xc8>
c000259a:	8d 45 6a             	lea    eax,[ebp+0x6a]
c000259d:	e8 61 f4 ff ff       	call   c0001a03 <ld_word>
c00025a2:	0f b7 c0             	movzx  eax,ax
c00025a5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025a9:	85 c0                	test   eax,eax
c00025ab:	75 0c                	jne    c00025b9 <mount_volume+0x126>
c00025ad:	8d 45 78             	lea    eax,[ebp+0x78]
c00025b0:	e8 5b f4 ff ff       	call   c0001a10 <ld_dword>
c00025b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00025bd:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00025c0:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00025c3:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00025c7:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00025ca:	48                   	dec    eax
c00025cb:	3c 01                	cmp    al,0x1
c00025cd:	77 8c                	ja     c000255b <mount_volume+0xc8>
c00025cf:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00025d3:	89 c3                	mov    ebx,eax
c00025d5:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00025d9:	66 85 c0             	test   ax,ax
c00025dc:	0f 84 79 ff ff ff    	je     c000255b <mount_volume+0xc8>
c00025e2:	8d 40 ff             	lea    eax,[eax-0x1]
c00025e5:	85 d8                	test   eax,ebx
c00025e7:	0f 85 6e ff ff ff    	jne    c000255b <mount_volume+0xc8>
c00025ed:	8d 45 65             	lea    eax,[ebp+0x65]
c00025f0:	e8 0e f4 ff ff       	call   c0001a03 <ld_word>
c00025f5:	89 c7                	mov    edi,eax
c00025f7:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c00025fb:	a8 0f                	test   al,0xf
c00025fd:	0f 85 58 ff ff ff    	jne    c000255b <mount_volume+0xc8>
c0002603:	8d 45 67             	lea    eax,[ebp+0x67]
c0002606:	e8 f8 f3 ff ff       	call   c0001a03 <ld_word>
c000260b:	0f b7 f0             	movzx  esi,ax
c000260e:	85 f6                	test   esi,esi
c0002610:	75 0a                	jne    c000261c <mount_volume+0x189>
c0002612:	8d 45 74             	lea    eax,[ebp+0x74]
c0002615:	e8 f6 f3 ff ff       	call   c0001a10 <ld_dword>
c000261a:	89 c6                	mov    esi,eax
c000261c:	8d 45 62             	lea    eax,[ebp+0x62]
c000261f:	e8 df f3 ff ff       	call   c0001a03 <ld_word>
c0002624:	66 85 c0             	test   ax,ax
c0002627:	0f 84 2e ff ff ff    	je     c000255b <mount_volume+0xc8>
c000262d:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002632:	0f b7 c8             	movzx  ecx,ax
c0002635:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000263a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000263e:	89 fa                	mov    edx,edi
c0002640:	66 c1 ea 04          	shr    dx,0x4
c0002644:	0f b7 d2             	movzx  edx,dx
c0002647:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000264b:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000264e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002652:	39 c6                	cmp    esi,eax
c0002654:	0f 82 01 ff ff ff    	jb     c000255b <mount_volume+0xc8>
c000265a:	29 c6                	sub    esi,eax
c000265c:	31 d2                	xor    edx,edx
c000265e:	89 f0                	mov    eax,esi
c0002660:	f7 f3                	div    ebx
c0002662:	39 de                	cmp    esi,ebx
c0002664:	0f 82 f1 fe ff ff    	jb     c000255b <mount_volume+0xc8>
c000266a:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000266f:	0f 87 e6 fe ff ff    	ja     c000255b <mount_volume+0xc8>
c0002675:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000267a:	0f 86 63 03 00 00    	jbe    c00029e3 <mount_volume+0x550>
c0002680:	bb 03 00 00 00       	mov    ebx,0x3
c0002685:	8d 70 02             	lea    esi,[eax+0x2]
c0002688:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000268c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002690:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002693:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002696:	31 d2                	xor    edx,edx
c0002698:	89 c8                	mov    eax,ecx
c000269a:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c000269d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026a1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026a5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00026a9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00026ad:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00026b0:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00026b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00026b7:	31 d2                	xor    edx,edx
c00026b9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026bd:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026c1:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00026c4:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00026c7:	83 fb 03             	cmp    ebx,0x3
c00026ca:	75 2b                	jne    c00026f7 <mount_volume+0x264>
c00026cc:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00026cf:	e8 2f f3 ff ff       	call   c0001a03 <ld_word>
c00026d4:	66 09 c7             	or     di,ax
c00026d7:	0f 85 7e fe ff ff    	jne    c000255b <mount_volume+0xc8>
c00026dd:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c00026e3:	c1 e6 02             	shl    esi,0x2
c00026e6:	e8 25 f3 ff ff       	call   c0001a10 <ld_dword>
c00026eb:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c00026f2:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c00026f5:	eb 30                	jmp    c0002727 <mount_volume+0x294>
c00026f7:	66 85 ff             	test   di,di
c00026fa:	0f 84 5b fe ff ff    	je     c000255b <mount_volume+0xc8>
c0002700:	31 d2                	xor    edx,edx
c0002702:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002706:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000270a:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000270e:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002711:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002714:	83 fb 02             	cmp    ebx,0x2
c0002717:	75 04                	jne    c000271d <mount_volume+0x28a>
c0002719:	01 f6                	add    esi,esi
c000271b:	eb 0a                	jmp    c0002727 <mount_volume+0x294>
c000271d:	8d 04 76             	lea    eax,[esi+esi*2]
c0002720:	83 e6 01             	and    esi,0x1
c0002723:	d1 e8                	shr    eax,1
c0002725:	01 c6                	add    esi,eax
c0002727:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000272d:	c1 ee 09             	shr    esi,0x9
c0002730:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002734:	0f 87 21 fe ff ff    	ja     c000255b <mount_volume+0xc8>
c000273a:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002741:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002748:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c000274c:	83 fb 03             	cmp    ebx,0x3
c000274f:	75 7a                	jne    c00027cb <mount_volume+0x338>
c0002751:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c0002757:	e8 a7 f2 ff ff       	call   c0001a03 <ld_word>
c000275c:	66 48                	dec    ax
c000275e:	75 6b                	jne    c00027cb <mount_volume+0x338>
c0002760:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002764:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002768:	83 c2 01             	add    edx,0x1
c000276b:	89 e8                	mov    eax,ebp
c000276d:	83 d1 00             	adc    ecx,0x0
c0002770:	e8 6c fa ff ff       	call   c00021e1 <move_window>
c0002775:	85 c0                	test   eax,eax
c0002777:	75 52                	jne    c00027cb <mount_volume+0x338>
c0002779:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c000277d:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c0002783:	e8 7b f2 ff ff       	call   c0001a03 <ld_word>
c0002788:	66 3d 55 aa          	cmp    ax,0xaa55
c000278c:	75 3d                	jne    c00027cb <mount_volume+0x338>
c000278e:	8d 45 54             	lea    eax,[ebp+0x54]
c0002791:	e8 7a f2 ff ff       	call   c0001a10 <ld_dword>
c0002796:	3d 52 52 61 41       	cmp    eax,0x41615252
c000279b:	75 2e                	jne    c00027cb <mount_volume+0x338>
c000279d:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00027a3:	e8 68 f2 ff ff       	call   c0001a10 <ld_dword>
c00027a8:	3d 72 72 41 61       	cmp    eax,0x61417272
c00027ad:	75 1c                	jne    c00027cb <mount_volume+0x338>
c00027af:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00027b5:	e8 56 f2 ff ff       	call   c0001a10 <ld_dword>
c00027ba:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00027bd:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00027c3:	e8 48 f2 ff ff       	call   c0001a10 <ld_dword>
c00027c8:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00027cb:	66 a1 a0 a5 02 c0    	mov    ax,ds:0xc002a5a0
c00027d1:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00027d4:	40                   	inc    eax
c00027d5:	31 db                	xor    ebx,ebx
c00027d7:	66 a3 a0 a5 02 c0    	mov    ds:0xc002a5a0,ax
c00027dd:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c00027e1:	e9 0c 02 00 00       	jmp    c00029f2 <mount_volume+0x55f>
c00027e6:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c00027ec:	e8 12 f2 ff ff       	call   c0001a03 <ld_word>
c00027f1:	66 3d 00 01          	cmp    ax,0x100
c00027f5:	0f 85 60 fd ff ff    	jne    c000255b <mount_volume+0xc8>
c00027fb:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002802:	0f 85 53 fd ff ff    	jne    c000255b <mount_volume+0xc8>
c0002808:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c000280e:	e8 15 f2 ff ff       	call   c0001a28 <ld_qword>
c0002813:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002817:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000281b:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002821:	e8 ea f1 ff ff       	call   c0001a10 <ld_dword>
c0002826:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002829:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c000282f:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002832:	fe c8                	dec    al
c0002834:	0f 85 21 fd ff ff    	jne    c000255b <mount_volume+0xc8>
c000283a:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002841:	bb 01 00 00 00       	mov    ebx,0x1
c0002846:	d3 e3                	shl    ebx,cl
c0002848:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c000284c:	66 85 db             	test   bx,bx
c000284f:	0f 84 06 fd ff ff    	je     c000255b <mount_volume+0xc8>
c0002855:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c000285b:	e8 b0 f1 ff ff       	call   c0001a10 <ld_dword>
c0002860:	89 c6                	mov    esi,eax
c0002862:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002867:	0f 87 ee fc ff ff    	ja     c000255b <mount_volume+0xc8>
c000286d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002871:	8d 40 02             	lea    eax,[eax+0x2]
c0002874:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002877:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c000287a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000287e:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002881:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002887:	e8 84 f1 ff ff       	call   c0001a10 <ld_dword>
c000288c:	31 d2                	xor    edx,edx
c000288e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002892:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002896:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000289a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000289e:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028a1:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028a4:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c00028aa:	e8 61 f1 ff ff       	call   c0001a10 <ld_dword>
c00028af:	31 d2                	xor    edx,edx
c00028b1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00028b5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028b9:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028bd:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028c0:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028c3:	0f b7 c3             	movzx  eax,bx
c00028c6:	31 d2                	xor    edx,edx
c00028c8:	0f af f0             	imul   esi,eax
c00028cb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00028cf:	89 f0                	mov    eax,esi
c00028d1:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00028d5:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c00028d9:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c00028dd:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c00028e1:	39 c1                	cmp    ecx,eax
c00028e3:	89 df                	mov    edi,ebx
c00028e5:	19 d7                	sbb    edi,edx
c00028e7:	0f 82 6e fc ff ff    	jb     c000255b <mount_volume+0xc8>
c00028ed:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c00028f3:	31 db                	xor    ebx,ebx
c00028f5:	e8 16 f1 ff ff       	call   c0001a10 <ld_dword>
c00028fa:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002901:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002904:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000290c:	85 db                	test   ebx,ebx
c000290e:	75 39                	jne    c0002949 <mount_volume+0x4b6>
c0002910:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002914:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002918:	0f 86 3d fc ff ff    	jbe    c000255b <mount_volume+0xc8>
c000291e:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002921:	31 ff                	xor    edi,edi
c0002923:	89 e8                	mov    eax,ebp
c0002925:	e8 72 f3 ff ff       	call   c0001c9c <clst2sect>
c000292a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000292e:	01 c6                	add    esi,eax
c0002930:	89 e8                	mov    eax,ebp
c0002932:	11 d7                	adc    edi,edx
c0002934:	89 f2                	mov    edx,esi
c0002936:	89 f9                	mov    ecx,edi
c0002938:	e8 a4 f8 ff ff       	call   c00021e1 <move_window>
c000293d:	85 c0                	test   eax,eax
c000293f:	0f 85 07 fc ff ff    	jne    c000254c <mount_volume+0xb9>
c0002945:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002949:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c000294e:	74 0b                	je     c000295b <mount_volume+0x4c8>
c0002950:	83 c3 20             	add    ebx,0x20
c0002953:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002959:	eb b1                	jmp    c000290c <mount_volume+0x479>
c000295b:	8d 75 54             	lea    esi,[ebp+0x54]
c000295e:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002962:	e8 a9 f0 ff ff       	call   c0001a10 <ld_dword>
c0002967:	89 c3                	mov    ebx,eax
c0002969:	83 f8 01             	cmp    eax,0x1
c000296c:	0f 86 e9 fb ff ff    	jbe    c000255b <mount_volume+0xc8>
c0002972:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002975:	0f 86 e0 fb ff ff    	jbe    c000255b <mount_volume+0xc8>
c000297b:	8d 53 fe             	lea    edx,[ebx-0x2]
c000297e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002982:	0f af c2             	imul   eax,edx
c0002985:	31 d2                	xor    edx,edx
c0002987:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c000298a:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c000298d:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002990:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002993:	31 c9                	xor    ecx,ecx
c0002995:	89 da                	mov    edx,ebx
c0002997:	89 e8                	mov    eax,ebp
c0002999:	c1 ea 07             	shr    edx,0x7
c000299c:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c000299f:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c00029a2:	e8 3a f8 ff ff       	call   c00021e1 <move_window>
c00029a7:	85 c0                	test   eax,eax
c00029a9:	0f 85 9d fb ff ff    	jne    c000254c <mount_volume+0xb9>
c00029af:	89 d8                	mov    eax,ebx
c00029b1:	83 e0 7f             	and    eax,0x7f
c00029b4:	8d 04 86             	lea    eax,[esi+eax*4]
c00029b7:	e8 54 f0 ff ff       	call   c0001a10 <ld_dword>
c00029bc:	83 f8 ff             	cmp    eax,0xffffffff
c00029bf:	74 0a                	je     c00029cb <mount_volume+0x538>
c00029c1:	43                   	inc    ebx
c00029c2:	39 d8                	cmp    eax,ebx
c00029c4:	74 cd                	je     c0002993 <mount_volume+0x500>
c00029c6:	e9 90 fb ff ff       	jmp    c000255b <mount_volume+0xc8>
c00029cb:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00029d2:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029d9:	bb 04 00 00 00       	mov    ebx,0x4
c00029de:	e9 e8 fd ff ff       	jmp    c00027cb <mount_volume+0x338>
c00029e3:	3d f6 0f 00 00       	cmp    eax,0xff6
c00029e8:	19 db                	sbb    ebx,ebx
c00029ea:	83 c3 02             	add    ebx,0x2
c00029ed:	e9 93 fc ff ff       	jmp    c0002685 <mount_volume+0x1f2>
c00029f2:	83 c4 3c             	add    esp,0x3c
c00029f5:	89 d8                	mov    eax,ebx
c00029f7:	5b                   	pop    ebx
c00029f8:	5e                   	pop    esi
c00029f9:	5f                   	pop    edi
c00029fa:	5d                   	pop    ebp
c00029fb:	c3                   	ret    

c00029fc <find_bitmap>:
c00029fc:	55                   	push   ebp
c00029fd:	57                   	push   edi
c00029fe:	89 c7                	mov    edi,eax
c0002a00:	56                   	push   esi
c0002a01:	8d 72 fe             	lea    esi,[edx-0x2]
c0002a04:	53                   	push   ebx
c0002a05:	83 ec 1c             	sub    esp,0x1c
c0002a08:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002a0b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002a0f:	83 e8 02             	sub    eax,0x2
c0002a12:	39 f0                	cmp    eax,esi
c0002a14:	77 02                	ja     c0002a18 <find_bitmap+0x1c>
c0002a16:	31 f6                	xor    esi,esi
c0002a18:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002a1c:	89 f3                	mov    ebx,esi
c0002a1e:	31 ed                	xor    ebp,ebp
c0002a20:	31 c9                	xor    ecx,ecx
c0002a22:	89 da                	mov    edx,ebx
c0002a24:	89 f8                	mov    eax,edi
c0002a26:	c1 ea 0c             	shr    edx,0xc
c0002a29:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002a2c:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002a2f:	e8 ad f7 ff ff       	call   c00021e1 <move_window>
c0002a34:	85 c0                	test   eax,eax
c0002a36:	75 68                	jne    c0002aa0 <find_bitmap+0xa4>
c0002a38:	89 da                	mov    edx,ebx
c0002a3a:	89 d9                	mov    ecx,ebx
c0002a3c:	c1 ea 03             	shr    edx,0x3
c0002a3f:	83 e1 07             	and    ecx,0x7
c0002a42:	b8 01 00 00 00       	mov    eax,0x1
c0002a47:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002a4d:	d3 e0                	shl    eax,cl
c0002a4f:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002a52:	83 e9 02             	sub    ecx,0x2
c0002a55:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002a59:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002a5d:	43                   	inc    ebx
c0002a5e:	21 c1                	and    ecx,eax
c0002a60:	d1 e0                	shl    eax,1
c0002a62:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002a66:	77 09                	ja     c0002a71 <find_bitmap+0x75>
c0002a68:	31 db                	xor    ebx,ebx
c0002a6a:	ba 00 02 00 00       	mov    edx,0x200
c0002a6f:	31 c0                	xor    eax,eax
c0002a71:	84 c9                	test   cl,cl
c0002a73:	75 10                	jne    c0002a85 <find_bitmap+0x89>
c0002a75:	45                   	inc    ebp
c0002a76:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002a7a:	75 0f                	jne    c0002a8b <find_bitmap+0x8f>
c0002a7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002a80:	83 c0 02             	add    eax,0x2
c0002a83:	eb 22                	jmp    c0002aa7 <find_bitmap+0xab>
c0002a85:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002a89:	31 ed                	xor    ebp,ebp
c0002a8b:	39 de                	cmp    esi,ebx
c0002a8d:	74 16                	je     c0002aa5 <find_bitmap+0xa9>
c0002a8f:	84 c0                	test   al,al
c0002a91:	75 c6                	jne    c0002a59 <find_bitmap+0x5d>
c0002a93:	42                   	inc    edx
c0002a94:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002a9a:	77 84                	ja     c0002a20 <find_bitmap+0x24>
c0002a9c:	b0 01                	mov    al,0x1
c0002a9e:	eb b9                	jmp    c0002a59 <find_bitmap+0x5d>
c0002aa0:	83 c8 ff             	or     eax,0xffffffff
c0002aa3:	eb 02                	jmp    c0002aa7 <find_bitmap+0xab>
c0002aa5:	31 c0                	xor    eax,eax
c0002aa7:	83 c4 1c             	add    esp,0x1c
c0002aaa:	5b                   	pop    ebx
c0002aab:	5e                   	pop    esi
c0002aac:	5f                   	pop    edi
c0002aad:	5d                   	pop    ebp
c0002aae:	c3                   	ret    

c0002aaf <change_bitmap>:
c0002aaf:	55                   	push   ebp
c0002ab0:	89 cd                	mov    ebp,ecx
c0002ab2:	57                   	push   edi
c0002ab3:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002ab6:	56                   	push   esi
c0002ab7:	89 c7                	mov    edi,eax
c0002ab9:	53                   	push   ebx
c0002aba:	89 c8                	mov    eax,ecx
c0002abc:	83 ec 1c             	sub    esp,0x1c
c0002abf:	31 d2                	xor    edx,edx
c0002ac1:	89 ce                	mov    esi,ecx
c0002ac3:	c1 e8 0c             	shr    eax,0xc
c0002ac6:	bb 01 00 00 00       	mov    ebx,0x1
c0002acb:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002ace:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002ad1:	c1 ee 03             	shr    esi,0x3
c0002ad4:	83 e1 07             	and    ecx,0x7
c0002ad7:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002add:	d3 e3                	shl    ebx,cl
c0002adf:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002ae3:	89 c1                	mov    ecx,eax
c0002ae5:	89 d3                	mov    ebx,edx
c0002ae7:	83 c1 01             	add    ecx,0x1
c0002aea:	83 d3 00             	adc    ebx,0x0
c0002aed:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002af1:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002af5:	89 d1                	mov    ecx,edx
c0002af7:	89 c2                	mov    edx,eax
c0002af9:	89 f8                	mov    eax,edi
c0002afb:	e8 e1 f6 ff ff       	call   c00021e1 <move_window>
c0002b00:	89 c1                	mov    ecx,eax
c0002b02:	85 c0                	test   eax,eax
c0002b04:	75 48                	jne    c0002b4e <change_bitmap+0x9f>
c0002b06:	31 d2                	xor    edx,edx
c0002b08:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002b0c:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002b10:	0f 95 c2             	setne  dl
c0002b13:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002b17:	74 3c                	je     c0002b55 <change_bitmap+0xa6>
c0002b19:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002b1d:	4d                   	dec    ebp
c0002b1e:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002b22:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002b26:	74 32                	je     c0002b5a <change_bitmap+0xab>
c0002b28:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002b2c:	75 d8                	jne    c0002b06 <change_bitmap+0x57>
c0002b2e:	8d 46 01             	lea    eax,[esi+0x1]
c0002b31:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002b36:	89 c3                	mov    ebx,eax
c0002b38:	31 f6                	xor    esi,esi
c0002b3a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b3e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b42:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b48:	74 99                	je     c0002ae3 <change_bitmap+0x34>
c0002b4a:	89 de                	mov    esi,ebx
c0002b4c:	eb b8                	jmp    c0002b06 <change_bitmap+0x57>
c0002b4e:	b9 01 00 00 00       	mov    ecx,0x1
c0002b53:	eb 05                	jmp    c0002b5a <change_bitmap+0xab>
c0002b55:	b9 02 00 00 00       	mov    ecx,0x2
c0002b5a:	83 c4 1c             	add    esp,0x1c
c0002b5d:	89 c8                	mov    eax,ecx
c0002b5f:	5b                   	pop    ebx
c0002b60:	5e                   	pop    esi
c0002b61:	5f                   	pop    edi
c0002b62:	5d                   	pop    ebp
c0002b63:	c3                   	ret    

c0002b64 <put_fat>:
c0002b64:	83 fa 01             	cmp    edx,0x1
c0002b67:	0f 86 7b 01 00 00    	jbe    c0002ce8 <put_fat+0x184>
c0002b6d:	55                   	push   ebp
c0002b6e:	57                   	push   edi
c0002b6f:	89 cf                	mov    edi,ecx
c0002b71:	56                   	push   esi
c0002b72:	b9 02 00 00 00       	mov    ecx,0x2
c0002b77:	53                   	push   ebx
c0002b78:	89 c6                	mov    esi,eax
c0002b7a:	83 ec 1c             	sub    esp,0x1c
c0002b7d:	89 d3                	mov    ebx,edx
c0002b7f:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002b82:	0f 86 68 01 00 00    	jbe    c0002cf0 <put_fat+0x18c>
c0002b88:	8a 00                	mov    al,BYTE PTR [eax]
c0002b8a:	3c 02                	cmp    al,0x2
c0002b8c:	0f 84 c7 00 00 00    	je     c0002c59 <put_fat+0xf5>
c0002b92:	77 09                	ja     c0002b9d <put_fat+0x39>
c0002b94:	fe c8                	dec    al
c0002b96:	74 17                	je     c0002baf <put_fat+0x4b>
c0002b98:	e9 53 01 00 00       	jmp    c0002cf0 <put_fat+0x18c>
c0002b9d:	b9 02 00 00 00       	mov    ecx,0x2
c0002ba2:	3c 04                	cmp    al,0x4
c0002ba4:	0f 86 e1 00 00 00    	jbe    c0002c8b <put_fat+0x127>
c0002baa:	e9 41 01 00 00       	jmp    c0002cf0 <put_fat+0x18c>
c0002baf:	89 d5                	mov    ebp,edx
c0002bb1:	31 c9                	xor    ecx,ecx
c0002bb3:	d1 ed                	shr    ebp,1
c0002bb5:	89 f0                	mov    eax,esi
c0002bb7:	01 d5                	add    ebp,edx
c0002bb9:	89 ea                	mov    edx,ebp
c0002bbb:	c1 ea 09             	shr    edx,0x9
c0002bbe:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002bc1:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002bc4:	e8 18 f6 ff ff       	call   c00021e1 <move_window>
c0002bc9:	89 c1                	mov    ecx,eax
c0002bcb:	85 c0                	test   eax,eax
c0002bcd:	0f 85 1d 01 00 00    	jne    c0002cf0 <put_fat+0x18c>
c0002bd3:	8d 46 54             	lea    eax,[esi+0x54]
c0002bd6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bda:	8d 45 01             	lea    eax,[ebp+0x1]
c0002bdd:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002be3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002be7:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002beb:	89 f8                	mov    eax,edi
c0002bed:	83 e3 01             	and    ebx,0x1
c0002bf0:	74 0d                	je     c0002bff <put_fat+0x9b>
c0002bf2:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002bf5:	89 fa                	mov    edx,edi
c0002bf7:	83 e0 0f             	and    eax,0xf
c0002bfa:	c1 e2 04             	shl    edx,0x4
c0002bfd:	09 d0                	or     eax,edx
c0002bff:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002c02:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c06:	31 c9                	xor    ecx,ecx
c0002c08:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c0c:	c1 ea 09             	shr    edx,0x9
c0002c0f:	89 f0                	mov    eax,esi
c0002c11:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c14:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c17:	e8 c5 f5 ff ff       	call   c00021e1 <move_window>
c0002c1c:	89 c1                	mov    ecx,eax
c0002c1e:	85 c0                	test   eax,eax
c0002c20:	0f 85 ca 00 00 00    	jne    c0002cf0 <put_fat+0x18c>
c0002c26:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002c2a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c30:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c34:	85 db                	test   ebx,ebx
c0002c36:	74 07                	je     c0002c3f <put_fat+0xdb>
c0002c38:	c1 ef 04             	shr    edi,0x4
c0002c3b:	89 fa                	mov    edx,edi
c0002c3d:	eb 0e                	jmp    c0002c4d <put_fat+0xe9>
c0002c3f:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002c42:	c1 ef 08             	shr    edi,0x8
c0002c45:	83 e2 f0             	and    edx,0xfffffff0
c0002c48:	83 e7 0f             	and    edi,0xf
c0002c4b:	09 fa                	or     edx,edi
c0002c4d:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002c50:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c54:	e9 97 00 00 00       	jmp    c0002cf0 <put_fat+0x18c>
c0002c59:	31 c9                	xor    ecx,ecx
c0002c5b:	c1 ea 08             	shr    edx,0x8
c0002c5e:	89 f0                	mov    eax,esi
c0002c60:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c63:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c66:	e8 76 f5 ff ff       	call   c00021e1 <move_window>
c0002c6b:	89 c1                	mov    ecx,eax
c0002c6d:	85 c0                	test   eax,eax
c0002c6f:	75 7f                	jne    c0002cf0 <put_fat+0x18c>
c0002c71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c75:	01 db                	add    ebx,ebx
c0002c77:	0f b7 d7             	movzx  edx,di
c0002c7a:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002c80:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002c84:	e8 ec ed ff ff       	call   c0001a75 <st_word>
c0002c89:	eb 53                	jmp    c0002cde <put_fat+0x17a>
c0002c8b:	31 c9                	xor    ecx,ecx
c0002c8d:	c1 ea 07             	shr    edx,0x7
c0002c90:	89 f0                	mov    eax,esi
c0002c92:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c95:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c98:	e8 44 f5 ff ff       	call   c00021e1 <move_window>
c0002c9d:	89 c1                	mov    ecx,eax
c0002c9f:	85 c0                	test   eax,eax
c0002ca1:	75 4d                	jne    c0002cf0 <put_fat+0x18c>
c0002ca3:	c1 e3 02             	shl    ebx,0x2
c0002ca6:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002cac:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002caf:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002cb3:	74 1c                	je     c0002cd1 <put_fat+0x16d>
c0002cb5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cb9:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002cbf:	89 d8                	mov    eax,ebx
c0002cc1:	e8 4a ed ff ff       	call   c0001a10 <ld_dword>
c0002cc6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002cca:	25 00 00 00 f0       	and    eax,0xf0000000
c0002ccf:	09 c7                	or     edi,eax
c0002cd1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cd5:	89 fa                	mov    edx,edi
c0002cd7:	89 d8                	mov    eax,ebx
c0002cd9:	e8 9b ed ff ff       	call   c0001a79 <st_dword>
c0002cde:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002ce2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002ce6:	eb 08                	jmp    c0002cf0 <put_fat+0x18c>
c0002ce8:	b9 02 00 00 00       	mov    ecx,0x2
c0002ced:	89 c8                	mov    eax,ecx
c0002cef:	c3                   	ret    
c0002cf0:	83 c4 1c             	add    esp,0x1c
c0002cf3:	89 c8                	mov    eax,ecx
c0002cf5:	5b                   	pop    ebx
c0002cf6:	5e                   	pop    esi
c0002cf7:	5f                   	pop    edi
c0002cf8:	5d                   	pop    ebp
c0002cf9:	c3                   	ret    

c0002cfa <fill_last_frag>:
c0002cfa:	57                   	push   edi
c0002cfb:	89 cf                	mov    edi,ecx
c0002cfd:	56                   	push   esi
c0002cfe:	89 d6                	mov    esi,edx
c0002d00:	53                   	push   ebx
c0002d01:	89 c3                	mov    ebx,eax
c0002d03:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002d06:	85 c0                	test   eax,eax
c0002d08:	74 21                	je     c0002d2b <fill_last_frag+0x31>
c0002d0a:	89 f9                	mov    ecx,edi
c0002d0c:	83 f8 01             	cmp    eax,0x1
c0002d0f:	76 05                	jbe    c0002d16 <fill_last_frag+0x1c>
c0002d11:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002d14:	29 c1                	sub    ecx,eax
c0002d16:	8d 56 01             	lea    edx,[esi+0x1]
c0002d19:	29 c2                	sub    edx,eax
c0002d1b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d1d:	e8 42 fe ff ff       	call   c0002b64 <put_fat>
c0002d22:	85 c0                	test   eax,eax
c0002d24:	75 05                	jne    c0002d2b <fill_last_frag+0x31>
c0002d26:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002d29:	eb d8                	jmp    c0002d03 <fill_last_frag+0x9>
c0002d2b:	5b                   	pop    ebx
c0002d2c:	5e                   	pop    esi
c0002d2d:	5f                   	pop    edi
c0002d2e:	c3                   	ret    

c0002d2f <fill_first_frag>:
c0002d2f:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002d33:	75 2d                	jne    c0002d62 <fill_first_frag+0x33>
c0002d35:	57                   	push   edi
c0002d36:	56                   	push   esi
c0002d37:	53                   	push   ebx
c0002d38:	89 c3                	mov    ebx,eax
c0002d3a:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002d3d:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002d40:	01 d7                	add    edi,edx
c0002d42:	39 fa                	cmp    edx,edi
c0002d44:	74 14                	je     c0002d5a <fill_first_frag+0x2b>
c0002d46:	8d 72 01             	lea    esi,[edx+0x1]
c0002d49:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d4b:	89 f1                	mov    ecx,esi
c0002d4d:	e8 12 fe ff ff       	call   c0002b64 <put_fat>
c0002d52:	89 f2                	mov    edx,esi
c0002d54:	85 c0                	test   eax,eax
c0002d56:	74 ea                	je     c0002d42 <fill_first_frag+0x13>
c0002d58:	eb 0b                	jmp    c0002d65 <fill_first_frag+0x36>
c0002d5a:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002d5e:	31 c0                	xor    eax,eax
c0002d60:	eb 03                	jmp    c0002d65 <fill_first_frag+0x36>
c0002d62:	31 c0                	xor    eax,eax
c0002d64:	c3                   	ret    
c0002d65:	5b                   	pop    ebx
c0002d66:	5e                   	pop    esi
c0002d67:	5f                   	pop    edi
c0002d68:	c3                   	ret    

c0002d69 <get_fat>:
c0002d69:	83 fa 01             	cmp    edx,0x1
c0002d6c:	0f 86 db 01 00 00    	jbe    c0002f4d <get_fat+0x1e4>
c0002d72:	55                   	push   ebp
c0002d73:	b9 01 00 00 00       	mov    ecx,0x1
c0002d78:	57                   	push   edi
c0002d79:	56                   	push   esi
c0002d7a:	53                   	push   ebx
c0002d7b:	83 ec 1c             	sub    esp,0x1c
c0002d7e:	8b 38                	mov    edi,DWORD PTR [eax]
c0002d80:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002d83:	0f 86 cc 01 00 00    	jbe    c0002f55 <get_fat+0x1ec>
c0002d89:	89 c3                	mov    ebx,eax
c0002d8b:	89 d6                	mov    esi,edx
c0002d8d:	8a 07                	mov    al,BYTE PTR [edi]
c0002d8f:	3c 02                	cmp    al,0x2
c0002d91:	0f 84 99 00 00 00    	je     c0002e30 <get_fat+0xc7>
c0002d97:	77 09                	ja     c0002da2 <get_fat+0x39>
c0002d99:	fe c8                	dec    al
c0002d9b:	74 1a                	je     c0002db7 <get_fat+0x4e>
c0002d9d:	e9 b3 01 00 00       	jmp    c0002f55 <get_fat+0x1ec>
c0002da2:	3c 03                	cmp    al,0x3
c0002da4:	0f 84 b5 00 00 00    	je     c0002e5f <get_fat+0xf6>
c0002daa:	3c 04                	cmp    al,0x4
c0002dac:	0f 84 e3 00 00 00    	je     c0002e95 <get_fat+0x12c>
c0002db2:	e9 9e 01 00 00       	jmp    c0002f55 <get_fat+0x1ec>
c0002db7:	89 d3                	mov    ebx,edx
c0002db9:	31 c9                	xor    ecx,ecx
c0002dbb:	d1 eb                	shr    ebx,1
c0002dbd:	89 f8                	mov    eax,edi
c0002dbf:	01 d3                	add    ebx,edx
c0002dc1:	89 da                	mov    edx,ebx
c0002dc3:	c1 ea 09             	shr    edx,0x9
c0002dc6:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002dc9:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002dcc:	e8 10 f4 ff ff       	call   c00021e1 <move_window>
c0002dd1:	85 c0                	test   eax,eax
c0002dd3:	74 08                	je     c0002ddd <get_fat+0x74>
c0002dd5:	83 c9 ff             	or     ecx,0xffffffff
c0002dd8:	e9 78 01 00 00       	jmp    c0002f55 <get_fat+0x1ec>
c0002ddd:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002de0:	31 c9                	xor    ecx,ecx
c0002de2:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002de8:	89 ea                	mov    edx,ebp
c0002dea:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002dee:	c1 ea 09             	shr    edx,0x9
c0002df1:	89 f8                	mov    eax,edi
c0002df3:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002df6:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002df9:	e8 e3 f3 ff ff       	call   c00021e1 <move_window>
c0002dfe:	85 c0                	test   eax,eax
c0002e00:	75 d3                	jne    c0002dd5 <get_fat+0x6c>
c0002e02:	0f b6 c3             	movzx  eax,bl
c0002e05:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e0b:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002e10:	c1 e3 08             	shl    ebx,0x8
c0002e13:	09 c3                	or     ebx,eax
c0002e15:	89 d9                	mov    ecx,ebx
c0002e17:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002e1d:	83 e6 01             	and    esi,0x1
c0002e20:	0f 84 2f 01 00 00    	je     c0002f55 <get_fat+0x1ec>
c0002e26:	89 d9                	mov    ecx,ebx
c0002e28:	c1 e9 04             	shr    ecx,0x4
c0002e2b:	e9 25 01 00 00       	jmp    c0002f55 <get_fat+0x1ec>
c0002e30:	31 c9                	xor    ecx,ecx
c0002e32:	c1 ea 08             	shr    edx,0x8
c0002e35:	89 f8                	mov    eax,edi
c0002e37:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e3a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e3d:	e8 9f f3 ff ff       	call   c00021e1 <move_window>
c0002e42:	85 c0                	test   eax,eax
c0002e44:	75 8f                	jne    c0002dd5 <get_fat+0x6c>
c0002e46:	01 f6                	add    esi,esi
c0002e48:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002e4e:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e52:	e8 ac eb ff ff       	call   c0001a03 <ld_word>
c0002e57:	0f b7 c8             	movzx  ecx,ax
c0002e5a:	e9 f6 00 00 00       	jmp    c0002f55 <get_fat+0x1ec>
c0002e5f:	31 c9                	xor    ecx,ecx
c0002e61:	c1 ea 07             	shr    edx,0x7
c0002e64:	89 f8                	mov    eax,edi
c0002e66:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e69:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e6c:	e8 70 f3 ff ff       	call   c00021e1 <move_window>
c0002e71:	85 c0                	test   eax,eax
c0002e73:	0f 85 5c ff ff ff    	jne    c0002dd5 <get_fat+0x6c>
c0002e79:	c1 e6 02             	shl    esi,0x2
c0002e7c:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002e82:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e86:	e8 85 eb ff ff       	call   c0001a10 <ld_dword>
c0002e8b:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002e90:	e9 b4 00 00 00       	jmp    c0002f49 <get_fat+0x1e0>
c0002e95:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002e98:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e9b:	89 d1                	mov    ecx,edx
c0002e9d:	09 c1                	or     ecx,eax
c0002e9f:	74 06                	je     c0002ea7 <get_fat+0x13e>
c0002ea1:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002ea5:	75 0f                	jne    c0002eb6 <get_fat+0x14d>
c0002ea7:	b9 01 00 00 00       	mov    ecx,0x1
c0002eac:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002eb0:	0f 85 9f 00 00 00    	jne    c0002f55 <get_fat+0x1ec>
c0002eb6:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002eba:	89 f5                	mov    ebp,esi
c0002ebc:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002ec1:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002ec4:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002ec7:	80 f9 02             	cmp    cl,0x2
c0002eca:	75 35                	jne    c0002f01 <get_fat+0x198>
c0002ecc:	83 c0 ff             	add    eax,0xffffffff
c0002ecf:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002ed4:	83 d2 ff             	adc    edx,0xffffffff
c0002ed7:	31 db                	xor    ebx,ebx
c0002ed9:	0f ac d0 09          	shrd   eax,edx,0x9
c0002edd:	53                   	push   ebx
c0002ede:	c1 ea 09             	shr    edx,0x9
c0002ee1:	51                   	push   ecx
c0002ee2:	52                   	push   edx
c0002ee3:	50                   	push   eax
c0002ee4:	e8 53 06 02 00       	call   c002353c <__udivdi3>
c0002ee9:	83 c4 10             	add    esp,0x10
c0002eec:	b9 01 00 00 00       	mov    ecx,0x1
c0002ef1:	39 c5                	cmp    ebp,eax
c0002ef3:	77 60                	ja     c0002f55 <get_fat+0x1ec>
c0002ef5:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002efa:	74 59                	je     c0002f55 <get_fat+0x1ec>
c0002efc:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002eff:	eb 54                	jmp    c0002f55 <get_fat+0x1ec>
c0002f01:	80 f9 03             	cmp    cl,0x3
c0002f04:	75 05                	jne    c0002f0b <get_fat+0x1a2>
c0002f06:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002f09:	77 f1                	ja     c0002efc <get_fat+0x193>
c0002f0b:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f10:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002f14:	75 3f                	jne    c0002f55 <get_fat+0x1ec>
c0002f16:	31 c9                	xor    ecx,ecx
c0002f18:	89 f2                	mov    edx,esi
c0002f1a:	89 f8                	mov    eax,edi
c0002f1c:	c1 ea 07             	shr    edx,0x7
c0002f1f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f22:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f25:	e8 b7 f2 ff ff       	call   c00021e1 <move_window>
c0002f2a:	85 c0                	test   eax,eax
c0002f2c:	0f 85 a3 fe ff ff    	jne    c0002dd5 <get_fat+0x6c>
c0002f32:	c1 e6 02             	shl    esi,0x2
c0002f35:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002f3b:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002f3f:	e8 cc ea ff ff       	call   c0001a10 <ld_dword>
c0002f44:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002f49:	89 c1                	mov    ecx,eax
c0002f4b:	eb 08                	jmp    c0002f55 <get_fat+0x1ec>
c0002f4d:	b9 01 00 00 00       	mov    ecx,0x1
c0002f52:	89 c8                	mov    eax,ecx
c0002f54:	c3                   	ret    
c0002f55:	83 c4 1c             	add    esp,0x1c
c0002f58:	89 c8                	mov    eax,ecx
c0002f5a:	5b                   	pop    ebx
c0002f5b:	5e                   	pop    esi
c0002f5c:	5f                   	pop    edi
c0002f5d:	5d                   	pop    ebp
c0002f5e:	c3                   	ret    

c0002f5f <dir_sdi>:
c0002f5f:	55                   	push   ebp
c0002f60:	57                   	push   edi
c0002f61:	56                   	push   esi
c0002f62:	53                   	push   ebx
c0002f63:	89 c3                	mov    ebx,eax
c0002f65:	83 ec 1c             	sub    esp,0x1c
c0002f68:	8b 38                	mov    edi,DWORD PTR [eax]
c0002f6a:	31 c0                	xor    eax,eax
c0002f6c:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002f6f:	0f 94 c0             	sete   al
c0002f72:	48                   	dec    eax
c0002f73:	25 00 00 20 f0       	and    eax,0xf0200000
c0002f78:	05 00 00 00 10       	add    eax,0x10000000
c0002f7d:	39 d0                	cmp    eax,edx
c0002f7f:	77 0a                	ja     c0002f8b <dir_sdi+0x2c>
c0002f81:	b8 02 00 00 00       	mov    eax,0x2
c0002f86:	e9 c4 00 00 00       	jmp    c000304f <dir_sdi+0xf0>
c0002f8b:	89 d6                	mov    esi,edx
c0002f8d:	f6 c2 1f             	test   dl,0x1f
c0002f90:	75 ef                	jne    c0002f81 <dir_sdi+0x22>
c0002f92:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002f95:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002f98:	85 c9                	test   ecx,ecx
c0002f9a:	75 2d                	jne    c0002fc9 <dir_sdi+0x6a>
c0002f9c:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002f9f:	77 1b                	ja     c0002fbc <dir_sdi+0x5d>
c0002fa1:	89 f2                	mov    edx,esi
c0002fa3:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002fa7:	c1 ea 05             	shr    edx,0x5
c0002faa:	39 c2                	cmp    edx,eax
c0002fac:	73 d3                	jae    c0002f81 <dir_sdi+0x22>
c0002fae:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002fb1:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002fb4:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fb7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002fba:	eb 4b                	jmp    c0003007 <dir_sdi+0xa8>
c0002fbc:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002fbf:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fc3:	85 c0                	test   eax,eax
c0002fc5:	74 da                	je     c0002fa1 <dir_sdi+0x42>
c0002fc7:	89 c1                	mov    ecx,eax
c0002fc9:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0002fcd:	c1 e5 09             	shl    ebp,0x9
c0002fd0:	89 ca                	mov    edx,ecx
c0002fd2:	39 ee                	cmp    esi,ebp
c0002fd4:	72 1c                	jb     c0002ff2 <dir_sdi+0x93>
c0002fd6:	89 d8                	mov    eax,ebx
c0002fd8:	e8 8c fd ff ff       	call   c0002d69 <get_fat>
c0002fdd:	89 c1                	mov    ecx,eax
c0002fdf:	83 f8 ff             	cmp    eax,0xffffffff
c0002fe2:	74 66                	je     c000304a <dir_sdi+0xeb>
c0002fe4:	83 f8 01             	cmp    eax,0x1
c0002fe7:	76 98                	jbe    c0002f81 <dir_sdi+0x22>
c0002fe9:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0002fec:	76 93                	jbe    c0002f81 <dir_sdi+0x22>
c0002fee:	29 ee                	sub    esi,ebp
c0002ff0:	eb de                	jmp    c0002fd0 <dir_sdi+0x71>
c0002ff2:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ff6:	89 f8                	mov    eax,edi
c0002ff8:	e8 9f ec ff ff       	call   c0001c9c <clst2sect>
c0002ffd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003001:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003004:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003007:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000300a:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000300d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003010:	89 d1                	mov    ecx,edx
c0003012:	09 c1                	or     ecx,eax
c0003014:	0f 84 67 ff ff ff    	je     c0002f81 <dir_sdi+0x22>
c000301a:	89 f1                	mov    ecx,esi
c000301c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003024:	c1 e9 09             	shr    ecx,0x9
c0003027:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000302b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000302f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003033:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003036:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000303c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000303f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003043:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003046:	31 c0                	xor    eax,eax
c0003048:	eb 05                	jmp    c000304f <dir_sdi+0xf0>
c000304a:	b8 01 00 00 00       	mov    eax,0x1
c000304f:	83 c4 1c             	add    esp,0x1c
c0003052:	5b                   	pop    ebx
c0003053:	5e                   	pop    esi
c0003054:	5f                   	pop    edi
c0003055:	5d                   	pop    ebp
c0003056:	c3                   	ret    

c0003057 <create_chain>:
c0003057:	55                   	push   ebp
c0003058:	89 c5                	mov    ebp,eax
c000305a:	57                   	push   edi
c000305b:	56                   	push   esi
c000305c:	53                   	push   ebx
c000305d:	83 ec 1c             	sub    esp,0x1c
c0003060:	85 d2                	test   edx,edx
c0003062:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003066:	8b 30                	mov    esi,DWORD PTR [eax]
c0003068:	75 0e                	jne    c0003078 <create_chain+0x21>
c000306a:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c000306d:	85 ff                	test   edi,edi
c000306f:	74 39                	je     c00030aa <create_chain+0x53>
c0003071:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003074:	77 39                	ja     c00030af <create_chain+0x58>
c0003076:	eb 32                	jmp    c00030aa <create_chain+0x53>
c0003078:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000307c:	e8 e8 fc ff ff       	call   c0002d69 <get_fat>
c0003081:	89 c3                	mov    ebx,eax
c0003083:	83 f8 01             	cmp    eax,0x1
c0003086:	77 0a                	ja     c0003092 <create_chain+0x3b>
c0003088:	bb 01 00 00 00       	mov    ebx,0x1
c000308d:	e9 ba 01 00 00       	jmp    c000324c <create_chain+0x1f5>
c0003092:	83 f8 ff             	cmp    eax,0xffffffff
c0003095:	0f 84 62 01 00 00    	je     c00031fd <create_chain+0x1a6>
c000309b:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c000309e:	0f 87 a8 01 00 00    	ja     c000324c <create_chain+0x1f5>
c00030a4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00030a8:	eb 05                	jmp    c00030af <create_chain+0x58>
c00030aa:	bf 01 00 00 00       	mov    edi,0x1
c00030af:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00030b3:	75 07                	jne    c00030bc <create_chain+0x65>
c00030b5:	31 db                	xor    ebx,ebx
c00030b7:	e9 90 01 00 00       	jmp    c000324c <create_chain+0x1f5>
c00030bc:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00030bf:	75 74                	jne    c0003135 <create_chain+0xde>
c00030c1:	b9 01 00 00 00       	mov    ecx,0x1
c00030c6:	89 fa                	mov    edx,edi
c00030c8:	89 f0                	mov    eax,esi
c00030ca:	e8 2d f9 ff ff       	call   c00029fc <find_bitmap>
c00030cf:	89 c3                	mov    ebx,eax
c00030d1:	8d 40 ff             	lea    eax,[eax-0x1]
c00030d4:	83 f8 fd             	cmp    eax,0xfffffffd
c00030d7:	0f 87 6f 01 00 00    	ja     c000324c <create_chain+0x1f5>
c00030dd:	83 ec 0c             	sub    esp,0xc
c00030e0:	b9 01 00 00 00       	mov    ecx,0x1
c00030e5:	6a 01                	push   0x1
c00030e7:	89 da                	mov    edx,ebx
c00030e9:	89 f0                	mov    eax,esi
c00030eb:	e8 bf f9 ff ff       	call   c0002aaf <change_bitmap>
c00030f0:	83 c4 10             	add    esp,0x10
c00030f3:	83 f8 02             	cmp    eax,0x2
c00030f6:	74 90                	je     c0003088 <create_chain+0x31>
c00030f8:	83 f8 01             	cmp    eax,0x1
c00030fb:	0f 84 fc 00 00 00    	je     c00031fd <create_chain+0x1a6>
c0003101:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003106:	75 09                	jne    c0003111 <create_chain+0xba>
c0003108:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000310c:	e9 0c 01 00 00       	jmp    c000321d <create_chain+0x1c6>
c0003111:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003115:	0f 85 e7 00 00 00    	jne    c0003202 <create_chain+0x1ab>
c000311b:	8d 57 01             	lea    edx,[edi+0x1]
c000311e:	39 da                	cmp    edx,ebx
c0003120:	0f 84 f7 00 00 00    	je     c000321d <create_chain+0x1c6>
c0003126:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003129:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000312d:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003130:	e9 cd 00 00 00       	jmp    c0003202 <create_chain+0x1ab>
c0003135:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003139:	75 41                	jne    c000317c <create_chain+0x125>
c000313b:	8d 5f 01             	lea    ebx,[edi+0x1]
c000313e:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003141:	77 05                	ja     c0003148 <create_chain+0xf1>
c0003143:	bb 02 00 00 00       	mov    ebx,0x2
c0003148:	89 da                	mov    edx,ebx
c000314a:	89 e8                	mov    eax,ebp
c000314c:	e8 18 fc ff ff       	call   c0002d69 <get_fat>
c0003151:	83 f8 01             	cmp    eax,0x1
c0003154:	0f 84 2e ff ff ff    	je     c0003088 <create_chain+0x31>
c000315a:	83 f8 ff             	cmp    eax,0xffffffff
c000315d:	0f 84 9a 00 00 00    	je     c00031fd <create_chain+0x1a6>
c0003163:	85 c0                	test   eax,eax
c0003165:	74 11                	je     c0003178 <create_chain+0x121>
c0003167:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000316a:	83 f8 01             	cmp    eax,0x1
c000316d:	76 0d                	jbe    c000317c <create_chain+0x125>
c000316f:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003172:	76 08                	jbe    c000317c <create_chain+0x125>
c0003174:	89 c7                	mov    edi,eax
c0003176:	eb 04                	jmp    c000317c <create_chain+0x125>
c0003178:	85 db                	test   ebx,ebx
c000317a:	75 38                	jne    c00031b4 <create_chain+0x15d>
c000317c:	89 fb                	mov    ebx,edi
c000317e:	43                   	inc    ebx
c000317f:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003182:	77 0e                	ja     c0003192 <create_chain+0x13b>
c0003184:	83 ff 01             	cmp    edi,0x1
c0003187:	0f 86 28 ff ff ff    	jbe    c00030b5 <create_chain+0x5e>
c000318d:	bb 02 00 00 00       	mov    ebx,0x2
c0003192:	89 da                	mov    edx,ebx
c0003194:	89 e8                	mov    eax,ebp
c0003196:	e8 ce fb ff ff       	call   c0002d69 <get_fat>
c000319b:	85 c0                	test   eax,eax
c000319d:	74 15                	je     c00031b4 <create_chain+0x15d>
c000319f:	83 f8 01             	cmp    eax,0x1
c00031a2:	0f 84 e0 fe ff ff    	je     c0003088 <create_chain+0x31>
c00031a8:	40                   	inc    eax
c00031a9:	74 52                	je     c00031fd <create_chain+0x1a6>
c00031ab:	39 fb                	cmp    ebx,edi
c00031ad:	75 cf                	jne    c000317e <create_chain+0x127>
c00031af:	e9 01 ff ff ff       	jmp    c00030b5 <create_chain+0x5e>
c00031b4:	83 c9 ff             	or     ecx,0xffffffff
c00031b7:	89 da                	mov    edx,ebx
c00031b9:	89 f0                	mov    eax,esi
c00031bb:	e8 a4 f9 ff ff       	call   c0002b64 <put_fat>
c00031c0:	85 c0                	test   eax,eax
c00031c2:	75 32                	jne    c00031f6 <create_chain+0x19f>
c00031c4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00031c9:	74 11                	je     c00031dc <create_chain+0x185>
c00031cb:	89 d9                	mov    ecx,ebx
c00031cd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031d1:	89 f0                	mov    eax,esi
c00031d3:	e8 8c f9 ff ff       	call   c0002b64 <put_fat>
c00031d8:	85 c0                	test   eax,eax
c00031da:	75 1a                	jne    c00031f6 <create_chain+0x19f>
c00031dc:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00031df:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c00031e2:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c00031e5:	8d 51 fe             	lea    edx,[ecx-0x2]
c00031e8:	39 d0                	cmp    eax,edx
c00031ea:	77 04                	ja     c00031f0 <create_chain+0x199>
c00031ec:	48                   	dec    eax
c00031ed:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00031f0:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c00031f4:	eb 56                	jmp    c000324c <create_chain+0x1f5>
c00031f6:	48                   	dec    eax
c00031f7:	0f 85 8b fe ff ff    	jne    c0003088 <create_chain+0x31>
c00031fd:	83 cb ff             	or     ebx,0xffffffff
c0003200:	eb 4a                	jmp    c000324c <create_chain+0x1f5>
c0003202:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003206:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003209:	41                   	inc    ecx
c000320a:	39 d9                	cmp    ecx,ebx
c000320c:	75 19                	jne    c0003227 <create_chain+0x1d0>
c000320e:	b9 02 00 00 00       	mov    ecx,0x2
c0003213:	85 d2                	test   edx,edx
c0003215:	74 03                	je     c000321a <create_chain+0x1c3>
c0003217:	8d 4a 01             	lea    ecx,[edx+0x1]
c000321a:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000321d:	85 c0                	test   eax,eax
c000321f:	0f 85 63 fe ff ff    	jne    c0003088 <create_chain+0x31>
c0003225:	eb b5                	jmp    c00031dc <create_chain+0x185>
c0003227:	85 d2                	test   edx,edx
c0003229:	75 07                	jne    c0003232 <create_chain+0x1db>
c000322b:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003232:	89 d9                	mov    ecx,ebx
c0003234:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003238:	89 e8                	mov    eax,ebp
c000323a:	e8 bb fa ff ff       	call   c0002cfa <fill_last_frag>
c000323f:	85 c0                	test   eax,eax
c0003241:	75 b3                	jne    c00031f6 <create_chain+0x19f>
c0003243:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000324a:	eb 90                	jmp    c00031dc <create_chain+0x185>
c000324c:	83 c4 1c             	add    esp,0x1c
c000324f:	89 d8                	mov    eax,ebx
c0003251:	5b                   	pop    ebx
c0003252:	5e                   	pop    esi
c0003253:	5f                   	pop    edi
c0003254:	5d                   	pop    ebp
c0003255:	c3                   	ret    

c0003256 <remove_chain>:
c0003256:	55                   	push   ebp
c0003257:	57                   	push   edi
c0003258:	56                   	push   esi
c0003259:	53                   	push   ebx
c000325a:	83 ec 1c             	sub    esp,0x1c
c000325d:	83 fa 01             	cmp    edx,0x1
c0003260:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003264:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003266:	77 0a                	ja     c0003272 <remove_chain+0x1c>
c0003268:	b8 02 00 00 00       	mov    eax,0x2
c000326d:	e9 24 01 00 00       	jmp    c0003396 <remove_chain+0x140>
c0003272:	89 d6                	mov    esi,edx
c0003274:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c0003277:	76 ef                	jbe    c0003268 <remove_chain+0x12>
c0003279:	89 c7                	mov    edi,eax
c000327b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003280:	75 06                	jne    c0003288 <remove_chain+0x32>
c0003282:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003286:	eb 54                	jmp    c00032dc <remove_chain+0x86>
c0003288:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000328b:	75 06                	jne    c0003293 <remove_chain+0x3d>
c000328d:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c0003291:	74 ef                	je     c0003282 <remove_chain+0x2c>
c0003293:	83 c9 ff             	or     ecx,0xffffffff
c0003296:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000329a:	89 d8                	mov    eax,ebx
c000329c:	e8 c3 f8 ff ff       	call   c0002b64 <put_fat>
c00032a1:	85 c0                	test   eax,eax
c00032a3:	74 dd                	je     c0003282 <remove_chain+0x2c>
c00032a5:	e9 ec 00 00 00       	jmp    c0003396 <remove_chain+0x140>
c00032aa:	83 f8 01             	cmp    eax,0x1
c00032ad:	74 b9                	je     c0003268 <remove_chain+0x12>
c00032af:	83 f8 ff             	cmp    eax,0xffffffff
c00032b2:	74 6d                	je     c0003321 <remove_chain+0xcb>
c00032b4:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032b7:	75 6f                	jne    c0003328 <remove_chain+0xd2>
c00032b9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00032bc:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00032bf:	8d 51 fe             	lea    edx,[ecx-0x2]
c00032c2:	39 d0                	cmp    eax,edx
c00032c4:	73 08                	jae    c00032ce <remove_chain+0x78>
c00032c6:	40                   	inc    eax
c00032c7:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00032cb:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00032ce:	8d 4e 01             	lea    ecx,[esi+0x1]
c00032d1:	39 e9                	cmp    ecx,ebp
c00032d3:	75 64                	jne    c0003339 <remove_chain+0xe3>
c00032d5:	89 ee                	mov    esi,ebp
c00032d7:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00032da:	76 0f                	jbe    c00032eb <remove_chain+0x95>
c00032dc:	89 f2                	mov    edx,esi
c00032de:	89 f8                	mov    eax,edi
c00032e0:	e8 84 fa ff ff       	call   c0002d69 <get_fat>
c00032e5:	89 c5                	mov    ebp,eax
c00032e7:	85 c0                	test   eax,eax
c00032e9:	75 bf                	jne    c00032aa <remove_chain+0x54>
c00032eb:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032ee:	0f 85 a0 00 00 00    	jne    c0003394 <remove_chain+0x13e>
c00032f4:	eb 6c                	jmp    c0003362 <remove_chain+0x10c>
c00032f6:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c00032f9:	84 c0                	test   al,al
c00032fb:	75 7d                	jne    c000337a <remove_chain+0x124>
c00032fd:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003300:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003304:	0f 84 86 00 00 00    	je     c0003390 <remove_chain+0x13a>
c000330a:	89 da                	mov    edx,ebx
c000330c:	89 f8                	mov    eax,edi
c000330e:	e8 56 fa ff ff       	call   c0002d69 <get_fat>
c0003313:	83 f8 01             	cmp    eax,0x1
c0003316:	0f 86 4c ff ff ff    	jbe    c0003268 <remove_chain+0x12>
c000331c:	83 f8 ff             	cmp    eax,0xffffffff
c000331f:	75 4e                	jne    c000336f <remove_chain+0x119>
c0003321:	b8 01 00 00 00       	mov    eax,0x1
c0003326:	eb 6e                	jmp    c0003396 <remove_chain+0x140>
c0003328:	31 c9                	xor    ecx,ecx
c000332a:	89 f2                	mov    edx,esi
c000332c:	89 d8                	mov    eax,ebx
c000332e:	e8 31 f8 ff ff       	call   c0002b64 <put_fat>
c0003333:	85 c0                	test   eax,eax
c0003335:	74 82                	je     c00032b9 <remove_chain+0x63>
c0003337:	eb 5d                	jmp    c0003396 <remove_chain+0x140>
c0003339:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000333c:	75 1b                	jne    c0003359 <remove_chain+0x103>
c000333e:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003342:	89 d8                	mov    eax,ebx
c0003344:	83 ec 0c             	sub    esp,0xc
c0003347:	6a 00                	push   0x0
c0003349:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000334d:	e8 5d f7 ff ff       	call   c0002aaf <change_bitmap>
c0003352:	83 c4 10             	add    esp,0x10
c0003355:	85 c0                	test   eax,eax
c0003357:	75 3d                	jne    c0003396 <remove_chain+0x140>
c0003359:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c000335d:	e9 73 ff ff ff       	jmp    c00032d5 <remove_chain+0x7f>
c0003362:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003367:	75 8d                	jne    c00032f6 <remove_chain+0xa0>
c0003369:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c000336d:	eb 25                	jmp    c0003394 <remove_chain+0x13e>
c000336f:	8d 53 01             	lea    edx,[ebx+0x1]
c0003372:	89 c3                	mov    ebx,eax
c0003374:	39 c2                	cmp    edx,eax
c0003376:	74 88                	je     c0003300 <remove_chain+0xaa>
c0003378:	eb 1a                	jmp    c0003394 <remove_chain+0x13e>
c000337a:	3c 03                	cmp    al,0x3
c000337c:	75 16                	jne    c0003394 <remove_chain+0x13e>
c000337e:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0003381:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003385:	77 0d                	ja     c0003394 <remove_chain+0x13e>
c0003387:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c000338a:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000338e:	72 04                	jb     c0003394 <remove_chain+0x13e>
c0003390:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c0003394:	31 c0                	xor    eax,eax
c0003396:	83 c4 1c             	add    esp,0x1c
c0003399:	5b                   	pop    ebx
c000339a:	5e                   	pop    esi
c000339b:	5f                   	pop    edi
c000339c:	5d                   	pop    ebp
c000339d:	c3                   	ret    

c000339e <dir_clear>:
c000339e:	55                   	push   ebp
c000339f:	57                   	push   edi
c00033a0:	56                   	push   esi
c00033a1:	89 c6                	mov    esi,eax
c00033a3:	53                   	push   ebx
c00033a4:	83 ec 1c             	sub    esp,0x1c
c00033a7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00033ab:	e8 9d ed ff ff       	call   c000214d <sync_window>
c00033b0:	85 c0                	test   eax,eax
c00033b2:	0f 85 de 00 00 00    	jne    c0003496 <dir_clear+0xf8>
c00033b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033bc:	89 f0                	mov    eax,esi
c00033be:	8d 6e 54             	lea    ebp,[esi+0x54]
c00033c1:	e8 d6 e8 ff ff       	call   c0001c9c <clst2sect>
c00033c6:	b9 00 02 00 00       	mov    ecx,0x200
c00033cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00033cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00033d3:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00033d6:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00033d9:	89 e8                	mov    eax,ebp
c00033db:	31 d2                	xor    edx,edx
c00033dd:	e8 b5 e6 ff ff       	call   c0001a97 <mem_set>
c00033e2:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c00033e6:	c1 e3 09             	shl    ebx,0x9
c00033e9:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c00033ef:	76 1f                	jbe    c0003410 <dir_clear+0x72>
c00033f1:	bb 00 80 00 00       	mov    ebx,0x8000
c00033f6:	eb 18                	jmp    c0003410 <dir_clear+0x72>
c00033f8:	83 ec 0c             	sub    esp,0xc
c00033fb:	53                   	push   ebx
c00033fc:	e8 35 4e 00 00       	call   c0008236 <ff_memalloc>
c0003401:	83 c4 10             	add    esp,0x10
c0003404:	89 c7                	mov    edi,eax
c0003406:	85 c0                	test   eax,eax
c0003408:	0f 85 8f 00 00 00    	jne    c000349d <dir_clear+0xff>
c000340e:	d1 eb                	shr    ebx,1
c0003410:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003416:	77 e0                	ja     c00033f8 <dir_clear+0x5a>
c0003418:	31 db                	xor    ebx,ebx
c000341a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000341e:	39 d8                	cmp    eax,ebx
c0003420:	76 66                	jbe    c0003488 <dir_clear+0xea>
c0003422:	83 ec 0c             	sub    esp,0xc
c0003425:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003429:	6a 01                	push   0x1
c000342b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000342f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003433:	55                   	push   ebp
c0003434:	50                   	push   eax
c0003435:	e8 94 e5 ff ff       	call   c00019ce <disk_write>
c000343a:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000343f:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003444:	83 c4 20             	add    esp,0x20
c0003447:	85 c0                	test   eax,eax
c0003449:	75 3d                	jne    c0003488 <dir_clear+0xea>
c000344b:	43                   	inc    ebx
c000344c:	eb cc                	jmp    c000341a <dir_clear+0x7c>
c000344e:	83 ec 0c             	sub    esp,0xc
c0003451:	31 d2                	xor    edx,edx
c0003453:	55                   	push   ebp
c0003454:	89 d8                	mov    eax,ebx
c0003456:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000345a:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000345e:	52                   	push   edx
c000345f:	50                   	push   eax
c0003460:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003464:	57                   	push   edi
c0003465:	50                   	push   eax
c0003466:	e8 63 e5 ff ff       	call   c00019ce <disk_write>
c000346b:	83 c4 20             	add    esp,0x20
c000346e:	85 c0                	test   eax,eax
c0003470:	75 0a                	jne    c000347c <dir_clear+0xde>
c0003472:	01 eb                	add    ebx,ebp
c0003474:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003478:	39 d8                	cmp    eax,ebx
c000347a:	77 d2                	ja     c000344e <dir_clear+0xb0>
c000347c:	83 ec 0c             	sub    esp,0xc
c000347f:	57                   	push   edi
c0003480:	e8 c7 4d 00 00       	call   c000824c <ff_memfree>
c0003485:	83 c4 10             	add    esp,0x10
c0003488:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000348c:	39 d8                	cmp    eax,ebx
c000348e:	0f 95 c0             	setne  al
c0003491:	0f b6 c0             	movzx  eax,al
c0003494:	eb 19                	jmp    c00034af <dir_clear+0x111>
c0003496:	b8 01 00 00 00       	mov    eax,0x1
c000349b:	eb 12                	jmp    c00034af <dir_clear+0x111>
c000349d:	89 d9                	mov    ecx,ebx
c000349f:	31 d2                	xor    edx,edx
c00034a1:	c1 eb 09             	shr    ebx,0x9
c00034a4:	e8 ee e5 ff ff       	call   c0001a97 <mem_set>
c00034a9:	89 dd                	mov    ebp,ebx
c00034ab:	31 db                	xor    ebx,ebx
c00034ad:	eb c5                	jmp    c0003474 <dir_clear+0xd6>
c00034af:	83 c4 1c             	add    esp,0x1c
c00034b2:	5b                   	pop    ebx
c00034b3:	5e                   	pop    esi
c00034b4:	5f                   	pop    edi
c00034b5:	5d                   	pop    ebp
c00034b6:	c3                   	ret    

c00034b7 <dir_next>:
c00034b7:	55                   	push   ebp
c00034b8:	57                   	push   edi
c00034b9:	56                   	push   esi
c00034ba:	53                   	push   ebx
c00034bb:	89 c3                	mov    ebx,eax
c00034bd:	83 ec 1c             	sub    esp,0x1c
c00034c0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034c2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00034c6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00034c9:	8d 78 20             	lea    edi,[eax+0x20]
c00034cc:	31 c0                	xor    eax,eax
c00034ce:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00034d2:	0f 94 c0             	sete   al
c00034d5:	48                   	dec    eax
c00034d6:	25 00 00 20 f0       	and    eax,0xf0200000
c00034db:	05 00 00 00 10       	add    eax,0x10000000
c00034e0:	39 f8                	cmp    eax,edi
c00034e2:	77 0e                	ja     c00034f2 <dir_next+0x3b>
c00034e4:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00034eb:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00034f2:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00034f5:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00034f8:	b8 04 00 00 00       	mov    eax,0x4
c00034fd:	89 ce                	mov    esi,ecx
c00034ff:	09 d6                	or     esi,edx
c0003501:	0f 84 da 00 00 00    	je     c00035e1 <dir_next+0x12a>
c0003507:	89 f8                	mov    eax,edi
c0003509:	25 ff 01 00 00       	and    eax,0x1ff
c000350e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003512:	0f 85 b9 00 00 00    	jne    c00035d1 <dir_next+0x11a>
c0003518:	83 c2 01             	add    edx,0x1
c000351b:	83 d1 00             	adc    ecx,0x0
c000351e:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003521:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003524:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003527:	85 d2                	test   edx,edx
c0003529:	75 29                	jne    c0003554 <dir_next+0x9d>
c000352b:	89 fa                	mov    edx,edi
c000352d:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003531:	c1 ea 05             	shr    edx,0x5
c0003534:	39 c2                	cmp    edx,eax
c0003536:	0f 82 95 00 00 00    	jb     c00035d1 <dir_next+0x11a>
c000353c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003543:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000354a:	b8 04 00 00 00       	mov    eax,0x4
c000354f:	e9 8d 00 00 00       	jmp    c00035e1 <dir_next+0x12a>
c0003554:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003558:	89 f9                	mov    ecx,edi
c000355a:	48                   	dec    eax
c000355b:	c1 e9 09             	shr    ecx,0x9
c000355e:	85 c8                	test   eax,ecx
c0003560:	75 6f                	jne    c00035d1 <dir_next+0x11a>
c0003562:	89 d8                	mov    eax,ebx
c0003564:	e8 00 f8 ff ff       	call   c0002d69 <get_fat>
c0003569:	89 c6                	mov    esi,eax
c000356b:	83 f8 01             	cmp    eax,0x1
c000356e:	77 07                	ja     c0003577 <dir_next+0xc0>
c0003570:	b8 02 00 00 00       	mov    eax,0x2
c0003575:	eb 6a                	jmp    c00035e1 <dir_next+0x12a>
c0003577:	83 f8 ff             	cmp    eax,0xffffffff
c000357a:	75 07                	jne    c0003583 <dir_next+0xcc>
c000357c:	b8 01 00 00 00       	mov    eax,0x1
c0003581:	eb 5e                	jmp    c00035e1 <dir_next+0x12a>
c0003583:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0003586:	77 37                	ja     c00035bf <dir_next+0x108>
c0003588:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000358d:	74 ad                	je     c000353c <dir_next+0x85>
c000358f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003592:	89 d8                	mov    eax,ebx
c0003594:	e8 be fa ff ff       	call   c0003057 <create_chain>
c0003599:	89 c6                	mov    esi,eax
c000359b:	b8 07 00 00 00       	mov    eax,0x7
c00035a0:	85 f6                	test   esi,esi
c00035a2:	74 3d                	je     c00035e1 <dir_next+0x12a>
c00035a4:	83 fe 01             	cmp    esi,0x1
c00035a7:	74 c7                	je     c0003570 <dir_next+0xb9>
c00035a9:	83 fe ff             	cmp    esi,0xffffffff
c00035ac:	74 ce                	je     c000357c <dir_next+0xc5>
c00035ae:	89 f2                	mov    edx,esi
c00035b0:	89 e8                	mov    eax,ebp
c00035b2:	e8 e7 fd ff ff       	call   c000339e <dir_clear>
c00035b7:	85 c0                	test   eax,eax
c00035b9:	75 c1                	jne    c000357c <dir_next+0xc5>
c00035bb:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00035bf:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00035c2:	89 f2                	mov    edx,esi
c00035c4:	89 e8                	mov    eax,ebp
c00035c6:	e8 d1 e6 ff ff       	call   c0001c9c <clst2sect>
c00035cb:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00035ce:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00035d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00035d5:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00035d8:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c00035dc:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00035df:	31 c0                	xor    eax,eax
c00035e1:	83 c4 1c             	add    esp,0x1c
c00035e4:	5b                   	pop    ebx
c00035e5:	5e                   	pop    esi
c00035e6:	5f                   	pop    edi
c00035e7:	5d                   	pop    ebp
c00035e8:	c3                   	ret    

c00035e9 <load_xdir>:
c00035e9:	55                   	push   ebp
c00035ea:	57                   	push   edi
c00035eb:	56                   	push   esi
c00035ec:	89 c6                	mov    esi,eax
c00035ee:	53                   	push   ebx
c00035ef:	83 ec 1c             	sub    esp,0x1c
c00035f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00035f4:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00035f7:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035fa:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00035fd:	e8 df eb ff ff       	call   c00021e1 <move_window>
c0003602:	89 c3                	mov    ebx,eax
c0003604:	85 c0                	test   eax,eax
c0003606:	0f 85 0c 01 00 00    	jne    c0003718 <load_xdir+0x12f>
c000360c:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000360f:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003612:	0f 85 fb 00 00 00    	jne    c0003713 <load_xdir+0x12a>
c0003618:	89 f8                	mov    eax,edi
c000361a:	b9 20 00 00 00       	mov    ecx,0x20
c000361f:	e8 5e e4 ff ff       	call   c0001a82 <mem_cpy>
c0003624:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003628:	40                   	inc    eax
c0003629:	c1 e0 05             	shl    eax,0x5
c000362c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003630:	83 e8 60             	sub    eax,0x60
c0003633:	3d 00 02 00 00       	cmp    eax,0x200
c0003638:	0f 87 d5 00 00 00    	ja     c0003713 <load_xdir+0x12a>
c000363e:	31 d2                	xor    edx,edx
c0003640:	89 f0                	mov    eax,esi
c0003642:	e8 70 fe ff ff       	call   c00034b7 <dir_next>
c0003647:	89 c3                	mov    ebx,eax
c0003649:	83 f8 04             	cmp    eax,0x4
c000364c:	0f 84 c1 00 00 00    	je     c0003713 <load_xdir+0x12a>
c0003652:	85 c0                	test   eax,eax
c0003654:	0f 85 be 00 00 00    	jne    c0003718 <load_xdir+0x12f>
c000365a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000365d:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003660:	8b 06                	mov    eax,DWORD PTR [esi]
c0003662:	e8 7a eb ff ff       	call   c00021e1 <move_window>
c0003667:	89 c3                	mov    ebx,eax
c0003669:	85 c0                	test   eax,eax
c000366b:	0f 85 a7 00 00 00    	jne    c0003718 <load_xdir+0x12f>
c0003671:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003674:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c0003677:	0f 85 96 00 00 00    	jne    c0003713 <load_xdir+0x12a>
c000367d:	8d 47 20             	lea    eax,[edi+0x20]
c0003680:	b9 20 00 00 00       	mov    ecx,0x20
c0003685:	e8 f8 e3 ff ff       	call   c0001a82 <mem_cpy>
c000368a:	31 d2                	xor    edx,edx
c000368c:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c0003690:	b9 0f 00 00 00       	mov    ecx,0xf
c0003695:	83 c0 2c             	add    eax,0x2c
c0003698:	f7 f1                	div    ecx
c000369a:	c1 e0 05             	shl    eax,0x5
c000369d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00036a1:	77 70                	ja     c0003713 <load_xdir+0x12a>
c00036a3:	bd 40 00 00 00       	mov    ebp,0x40
c00036a8:	31 d2                	xor    edx,edx
c00036aa:	89 f0                	mov    eax,esi
c00036ac:	e8 06 fe ff ff       	call   c00034b7 <dir_next>
c00036b1:	89 c3                	mov    ebx,eax
c00036b3:	83 f8 04             	cmp    eax,0x4
c00036b6:	74 5b                	je     c0003713 <load_xdir+0x12a>
c00036b8:	85 c0                	test   eax,eax
c00036ba:	75 5c                	jne    c0003718 <load_xdir+0x12f>
c00036bc:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00036bf:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00036c2:	8b 06                	mov    eax,DWORD PTR [esi]
c00036c4:	e8 18 eb ff ff       	call   c00021e1 <move_window>
c00036c9:	89 c3                	mov    ebx,eax
c00036cb:	85 c0                	test   eax,eax
c00036cd:	75 49                	jne    c0003718 <load_xdir+0x12f>
c00036cf:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00036d2:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00036d5:	75 3c                	jne    c0003713 <load_xdir+0x12a>
c00036d7:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c00036dd:	77 0d                	ja     c00036ec <load_xdir+0x103>
c00036df:	8d 04 2f             	lea    eax,[edi+ebp*1]
c00036e2:	b9 20 00 00 00       	mov    ecx,0x20
c00036e7:	e8 96 e3 ff ff       	call   c0001a82 <mem_cpy>
c00036ec:	83 c5 20             	add    ebp,0x20
c00036ef:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c00036f3:	77 b3                	ja     c00036a8 <load_xdir+0xbf>
c00036f5:	81 fd 60 02 00 00    	cmp    ebp,0x260
c00036fb:	77 1b                	ja     c0003718 <load_xdir+0x12f>
c00036fd:	89 f8                	mov    eax,edi
c00036ff:	e8 cd e7 ff ff       	call   c0001ed1 <xdir_sum>
c0003704:	89 c1                	mov    ecx,eax
c0003706:	8d 47 02             	lea    eax,[edi+0x2]
c0003709:	e8 f5 e2 ff ff       	call   c0001a03 <ld_word>
c000370e:	66 39 c1             	cmp    cx,ax
c0003711:	74 05                	je     c0003718 <load_xdir+0x12f>
c0003713:	bb 02 00 00 00       	mov    ebx,0x2
c0003718:	83 c4 1c             	add    esp,0x1c
c000371b:	89 d8                	mov    eax,ebx
c000371d:	5b                   	pop    ebx
c000371e:	5e                   	pop    esi
c000371f:	5f                   	pop    edi
c0003720:	5d                   	pop    ebp
c0003721:	c3                   	ret    

c0003722 <load_obj_xdir>:
c0003722:	53                   	push   ebx
c0003723:	89 c3                	mov    ebx,eax
c0003725:	83 ec 08             	sub    esp,0x8
c0003728:	8b 02                	mov    eax,DWORD PTR [edx]
c000372a:	89 03                	mov    DWORD PTR [ebx],eax
c000372c:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000372f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003732:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003735:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003738:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000373b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003742:	30 c0                	xor    al,al
c0003744:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000374b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000374e:	89 d8                	mov    eax,ebx
c0003750:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003753:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c0003756:	e8 04 f8 ff ff       	call   c0002f5f <dir_sdi>
c000375b:	85 c0                	test   eax,eax
c000375d:	75 0b                	jne    c000376a <load_obj_xdir+0x48>
c000375f:	89 d8                	mov    eax,ebx
c0003761:	83 c4 08             	add    esp,0x8
c0003764:	5b                   	pop    ebx
c0003765:	e9 7f fe ff ff       	jmp    c00035e9 <load_xdir>
c000376a:	83 c4 08             	add    esp,0x8
c000376d:	5b                   	pop    ebx
c000376e:	c3                   	ret    

c000376f <dir_read>:
c000376f:	55                   	push   ebp
c0003770:	bd 04 00 00 00       	mov    ebp,0x4
c0003775:	57                   	push   edi
c0003776:	56                   	push   esi
c0003777:	be ff ff ff ff       	mov    esi,0xffffffff
c000377c:	53                   	push   ebx
c000377d:	89 c3                	mov    ebx,eax
c000377f:	83 ec 1c             	sub    esp,0x1c
c0003782:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003786:	8b 38                	mov    edi,DWORD PTR [eax]
c0003788:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000378d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003790:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003793:	89 c8                	mov    eax,ecx
c0003795:	09 d0                	or     eax,edx
c0003797:	0f 84 25 01 00 00    	je     c00038c2 <dir_read+0x153>
c000379d:	89 f8                	mov    eax,edi
c000379f:	e8 3d ea ff ff       	call   c00021e1 <move_window>
c00037a4:	89 c5                	mov    ebp,eax
c00037a6:	85 c0                	test   eax,eax
c00037a8:	0f 85 23 01 00 00    	jne    c00038d1 <dir_read+0x162>
c00037ae:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00037b1:	8a 0a                	mov    cl,BYTE PTR [edx]
c00037b3:	84 c9                	test   cl,cl
c00037b5:	0f 84 11 01 00 00    	je     c00038cc <dir_read+0x15d>
c00037bb:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00037be:	75 48                	jne    c0003808 <dir_read+0x99>
c00037c0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037c5:	74 10                	je     c00037d7 <dir_read+0x68>
c00037c7:	80 f9 83             	cmp    cl,0x83
c00037ca:	0f 85 dd 00 00 00    	jne    c00038ad <dir_read+0x13e>
c00037d0:	31 ed                	xor    ebp,ebp
c00037d2:	e9 08 01 00 00       	jmp    c00038df <dir_read+0x170>
c00037d7:	80 f9 85             	cmp    cl,0x85
c00037da:	0f 85 cd 00 00 00    	jne    c00038ad <dir_read+0x13e>
c00037e0:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00037e3:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00037e6:	89 d8                	mov    eax,ebx
c00037e8:	e8 fc fd ff ff       	call   c00035e9 <load_xdir>
c00037ed:	89 c5                	mov    ebp,eax
c00037ef:	85 c0                	test   eax,eax
c00037f1:	0f 85 da 00 00 00    	jne    c00038d1 <dir_read+0x162>
c00037f7:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00037fa:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c00037fd:	83 e0 3f             	and    eax,0x3f
c0003800:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003803:	e9 d7 00 00 00       	jmp    c00038df <dir_read+0x170>
c0003808:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000380b:	83 e0 3f             	and    eax,0x3f
c000380e:	80 f9 2e             	cmp    cl,0x2e
c0003811:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003815:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003818:	0f 84 8a 00 00 00    	je     c00038a8 <dir_read+0x139>
c000381e:	80 f9 e5             	cmp    cl,0xe5
c0003821:	0f 84 81 00 00 00    	je     c00038a8 <dir_read+0x139>
c0003827:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000382b:	83 e0 1f             	and    eax,0x1f
c000382e:	83 f8 08             	cmp    eax,0x8
c0003831:	0f 94 c0             	sete   al
c0003834:	0f b6 c0             	movzx  eax,al
c0003837:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000383b:	75 6b                	jne    c00038a8 <dir_read+0x139>
c000383d:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003842:	75 44                	jne    c0003888 <dir_read+0x119>
c0003844:	f6 c1 40             	test   cl,0x40
c0003847:	74 12                	je     c000385b <dir_read+0xec>
c0003849:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000384c:	83 e1 bf             	and    ecx,0xffffffbf
c000384f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003853:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003856:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003859:	eb 06                	jmp    c0003861 <dir_read+0xf2>
c000385b:	89 f0                	mov    eax,esi
c000385d:	38 c8                	cmp    al,cl
c000385f:	75 47                	jne    c00038a8 <dir_read+0x139>
c0003861:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003865:	be ff ff ff ff       	mov    esi,0xffffffff
c000386a:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c000386d:	75 3e                	jne    c00038ad <dir_read+0x13e>
c000386f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003873:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003876:	e8 8a e4 ff ff       	call   c0001d05 <pick_lfn>
c000387b:	85 c0                	test   eax,eax
c000387d:	74 2e                	je     c00038ad <dir_read+0x13e>
c000387f:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003883:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003886:	eb 25                	jmp    c00038ad <dir_read+0x13e>
c0003888:	89 f0                	mov    eax,esi
c000388a:	84 c0                	test   al,al
c000388c:	75 11                	jne    c000389f <dir_read+0x130>
c000388e:	89 d0                	mov    eax,edx
c0003890:	e8 2a e6 ff ff       	call   c0001ebf <sum_sfn>
c0003895:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003899:	0f 84 31 ff ff ff    	je     c00037d0 <dir_read+0x61>
c000389f:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00038a6:	eb 37                	jmp    c00038df <dir_read+0x170>
c00038a8:	be ff ff ff ff       	mov    esi,0xffffffff
c00038ad:	31 d2                	xor    edx,edx
c00038af:	89 d8                	mov    eax,ebx
c00038b1:	e8 01 fc ff ff       	call   c00034b7 <dir_next>
c00038b6:	89 c5                	mov    ebp,eax
c00038b8:	85 c0                	test   eax,eax
c00038ba:	0f 84 cd fe ff ff    	je     c000378d <dir_read+0x1e>
c00038c0:	eb 0f                	jmp    c00038d1 <dir_read+0x162>
c00038c2:	85 ed                	test   ebp,ebp
c00038c4:	0f 84 06 ff ff ff    	je     c00037d0 <dir_read+0x61>
c00038ca:	eb 05                	jmp    c00038d1 <dir_read+0x162>
c00038cc:	bd 04 00 00 00       	mov    ebp,0x4
c00038d1:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00038d8:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00038df:	83 c4 1c             	add    esp,0x1c
c00038e2:	89 e8                	mov    eax,ebp
c00038e4:	5b                   	pop    ebx
c00038e5:	5e                   	pop    esi
c00038e6:	5f                   	pop    edi
c00038e7:	5d                   	pop    ebp
c00038e8:	c3                   	ret    

c00038e9 <dir_alloc>:
c00038e9:	55                   	push   ebp
c00038ea:	89 d5                	mov    ebp,edx
c00038ec:	57                   	push   edi
c00038ed:	31 d2                	xor    edx,edx
c00038ef:	56                   	push   esi
c00038f0:	53                   	push   ebx
c00038f1:	89 c3                	mov    ebx,eax
c00038f3:	83 ec 0c             	sub    esp,0xc
c00038f6:	8b 38                	mov    edi,DWORD PTR [eax]
c00038f8:	e8 62 f6 ff ff       	call   c0002f5f <dir_sdi>
c00038fd:	85 c0                	test   eax,eax
c00038ff:	75 4e                	jne    c000394f <dir_alloc+0x66>
c0003901:	31 f6                	xor    esi,esi
c0003903:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003906:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003909:	89 f8                	mov    eax,edi
c000390b:	e8 d1 e8 ff ff       	call   c00021e1 <move_window>
c0003910:	85 c0                	test   eax,eax
c0003912:	75 3b                	jne    c000394f <dir_alloc+0x66>
c0003914:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003917:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c000391a:	8a 12                	mov    dl,BYTE PTR [edx]
c000391c:	75 07                	jne    c0003925 <dir_alloc+0x3c>
c000391e:	f7 d2                	not    edx
c0003920:	c0 ea 07             	shr    dl,0x7
c0003923:	eb 0d                	jmp    c0003932 <dir_alloc+0x49>
c0003925:	84 d2                	test   dl,dl
c0003927:	0f 94 c1             	sete   cl
c000392a:	80 fa e5             	cmp    dl,0xe5
c000392d:	0f 94 c2             	sete   dl
c0003930:	09 ca                	or     edx,ecx
c0003932:	84 d2                	test   dl,dl
c0003934:	74 07                	je     c000393d <dir_alloc+0x54>
c0003936:	46                   	inc    esi
c0003937:	39 ee                	cmp    esi,ebp
c0003939:	75 04                	jne    c000393f <dir_alloc+0x56>
c000393b:	eb 1c                	jmp    c0003959 <dir_alloc+0x70>
c000393d:	31 f6                	xor    esi,esi
c000393f:	ba 01 00 00 00       	mov    edx,0x1
c0003944:	89 d8                	mov    eax,ebx
c0003946:	e8 6c fb ff ff       	call   c00034b7 <dir_next>
c000394b:	85 c0                	test   eax,eax
c000394d:	74 b4                	je     c0003903 <dir_alloc+0x1a>
c000394f:	83 f8 04             	cmp    eax,0x4
c0003952:	75 05                	jne    c0003959 <dir_alloc+0x70>
c0003954:	b8 07 00 00 00       	mov    eax,0x7
c0003959:	83 c4 0c             	add    esp,0xc
c000395c:	5b                   	pop    ebx
c000395d:	5e                   	pop    esi
c000395e:	5f                   	pop    edi
c000395f:	5d                   	pop    ebp
c0003960:	c3                   	ret    

c0003961 <store_xdir>:
c0003961:	55                   	push   ebp
c0003962:	57                   	push   edi
c0003963:	89 c7                	mov    edi,eax
c0003965:	56                   	push   esi
c0003966:	53                   	push   ebx
c0003967:	83 ec 0c             	sub    esp,0xc
c000396a:	8b 00                	mov    eax,DWORD PTR [eax]
c000396c:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c000396f:	89 e8                	mov    eax,ebp
c0003971:	e8 5b e5 ff ff       	call   c0001ed1 <xdir_sum>
c0003976:	0f b7 d0             	movzx  edx,ax
c0003979:	8d 45 02             	lea    eax,[ebp+0x2]
c000397c:	e8 f4 e0 ff ff       	call   c0001a75 <st_word>
c0003981:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003985:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003988:	89 f8                	mov    eax,edi
c000398a:	e8 d0 f5 ff ff       	call   c0002f5f <dir_sdi>
c000398f:	89 c6                	mov    esi,eax
c0003991:	85 f6                	test   esi,esi
c0003993:	75 3d                	jne    c00039d2 <store_xdir+0x71>
c0003995:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003998:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c000399b:	8b 07                	mov    eax,DWORD PTR [edi]
c000399d:	e8 3f e8 ff ff       	call   c00021e1 <move_window>
c00039a2:	89 c6                	mov    esi,eax
c00039a4:	85 c0                	test   eax,eax
c00039a6:	75 2a                	jne    c00039d2 <store_xdir+0x71>
c00039a8:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c00039ab:	b9 20 00 00 00       	mov    ecx,0x20
c00039b0:	89 ea                	mov    edx,ebp
c00039b2:	e8 cb e0 ff ff       	call   c0001a82 <mem_cpy>
c00039b7:	8b 07                	mov    eax,DWORD PTR [edi]
c00039b9:	85 db                	test   ebx,ebx
c00039bb:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00039bf:	74 11                	je     c00039d2 <store_xdir+0x71>
c00039c1:	31 d2                	xor    edx,edx
c00039c3:	89 f8                	mov    eax,edi
c00039c5:	83 c5 20             	add    ebp,0x20
c00039c8:	e8 ea fa ff ff       	call   c00034b7 <dir_next>
c00039cd:	4b                   	dec    ebx
c00039ce:	89 c6                	mov    esi,eax
c00039d0:	eb bf                	jmp    c0003991 <store_xdir+0x30>
c00039d2:	89 f0                	mov    eax,esi
c00039d4:	83 fe 02             	cmp    esi,0x2
c00039d7:	76 05                	jbe    c00039de <store_xdir+0x7d>
c00039d9:	b8 02 00 00 00       	mov    eax,0x2
c00039de:	83 c4 0c             	add    esp,0xc
c00039e1:	5b                   	pop    ebx
c00039e2:	5e                   	pop    esi
c00039e3:	5f                   	pop    edi
c00039e4:	5d                   	pop    ebp
c00039e5:	c3                   	ret    

c00039e6 <dir_remove>:
c00039e6:	57                   	push   edi
c00039e7:	56                   	push   esi
c00039e8:	53                   	push   ebx
c00039e9:	89 c3                	mov    ebx,eax
c00039eb:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00039ee:	8b 30                	mov    esi,DWORD PTR [eax]
c00039f0:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c00039f3:	83 fa ff             	cmp    edx,0xffffffff
c00039f6:	74 09                	je     c0003a01 <dir_remove+0x1b>
c00039f8:	e8 62 f5 ff ff       	call   c0002f5f <dir_sdi>
c00039fd:	85 c0                	test   eax,eax
c00039ff:	75 41                	jne    c0003a42 <dir_remove+0x5c>
c0003a01:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a04:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a07:	89 f0                	mov    eax,esi
c0003a09:	e8 d3 e7 ff ff       	call   c00021e1 <move_window>
c0003a0e:	85 c0                	test   eax,eax
c0003a10:	75 26                	jne    c0003a38 <dir_remove+0x52>
c0003a12:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a15:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003a18:	75 05                	jne    c0003a1f <dir_remove+0x39>
c0003a1a:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003a1d:	eb 03                	jmp    c0003a22 <dir_remove+0x3c>
c0003a1f:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a22:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a26:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003a29:	73 17                	jae    c0003a42 <dir_remove+0x5c>
c0003a2b:	31 d2                	xor    edx,edx
c0003a2d:	89 d8                	mov    eax,ebx
c0003a2f:	e8 83 fa ff ff       	call   c00034b7 <dir_next>
c0003a34:	85 c0                	test   eax,eax
c0003a36:	74 c9                	je     c0003a01 <dir_remove+0x1b>
c0003a38:	83 f8 04             	cmp    eax,0x4
c0003a3b:	75 05                	jne    c0003a42 <dir_remove+0x5c>
c0003a3d:	b8 02 00 00 00       	mov    eax,0x2
c0003a42:	5b                   	pop    ebx
c0003a43:	5e                   	pop    esi
c0003a44:	5f                   	pop    edi
c0003a45:	c3                   	ret    

c0003a46 <create_name>:
c0003a46:	55                   	push   ebp
c0003a47:	89 d5                	mov    ebp,edx
c0003a49:	57                   	push   edi
c0003a4a:	89 c7                	mov    edi,eax
c0003a4c:	56                   	push   esi
c0003a4d:	31 f6                	xor    esi,esi
c0003a4f:	53                   	push   ebx
c0003a50:	83 ec 3c             	sub    esp,0x3c
c0003a53:	8b 02                	mov    eax,DWORD PTR [edx]
c0003a55:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003a59:	8b 07                	mov    eax,DWORD PTR [edi]
c0003a5b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003a5e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003a62:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003a66:	e8 72 e0 ff ff       	call   c0001add <tchar2uni>
c0003a6b:	89 c3                	mov    ebx,eax
c0003a6d:	83 f8 ff             	cmp    eax,0xffffffff
c0003a70:	75 0a                	jne    c0003a7c <create_name+0x36>
c0003a72:	b8 06 00 00 00       	mov    eax,0x6
c0003a77:	e9 9e 02 00 00       	jmp    c0003d1a <create_name+0x2d4>
c0003a7c:	3d ff ff 00 00       	cmp    eax,0xffff
c0003a81:	76 0c                	jbe    c0003a8f <create_name+0x49>
c0003a83:	c1 e8 10             	shr    eax,0x10
c0003a86:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003a8a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003a8e:	46                   	inc    esi
c0003a8f:	66 83 fb 1f          	cmp    bx,0x1f
c0003a93:	76 4f                	jbe    c0003ae4 <create_name+0x9e>
c0003a95:	66 83 fb 5c          	cmp    bx,0x5c
c0003a99:	74 35                	je     c0003ad0 <create_name+0x8a>
c0003a9b:	66 83 fb 2f          	cmp    bx,0x2f
c0003a9f:	74 2f                	je     c0003ad0 <create_name+0x8a>
c0003aa1:	66 83 fb 7f          	cmp    bx,0x7f
c0003aa5:	77 11                	ja     c0003ab8 <create_name+0x72>
c0003aa7:	0f b7 d3             	movzx  edx,bx
c0003aaa:	b8 f2 5f 02 c0       	mov    eax,0xc0025ff2
c0003aaf:	e8 11 e0 ff ff       	call   c0001ac5 <chk_chr>
c0003ab4:	85 c0                	test   eax,eax
c0003ab6:	75 ba                	jne    c0003a72 <create_name+0x2c>
c0003ab8:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003abe:	77 b2                	ja     c0003a72 <create_name+0x2c>
c0003ac0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ac4:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003ac8:	46                   	inc    esi
c0003ac9:	eb 97                	jmp    c0003a62 <create_name+0x1c>
c0003acb:	40                   	inc    eax
c0003acc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ad0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003ad4:	8a 10                	mov    dl,BYTE PTR [eax]
c0003ad6:	80 fa 2f             	cmp    dl,0x2f
c0003ad9:	74 f0                	je     c0003acb <create_name+0x85>
c0003adb:	80 fa 5c             	cmp    dl,0x5c
c0003ade:	74 eb                	je     c0003acb <create_name+0x85>
c0003ae0:	31 db                	xor    ebx,ebx
c0003ae2:	eb 02                	jmp    c0003ae6 <create_name+0xa0>
c0003ae4:	b3 04                	mov    bl,0x4
c0003ae6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003aea:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003aed:	85 f6                	test   esi,esi
c0003aef:	74 18                	je     c0003b09 <create_name+0xc3>
c0003af1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003af5:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003afa:	66 83 f8 20          	cmp    ax,0x20
c0003afe:	74 06                	je     c0003b06 <create_name+0xc0>
c0003b00:	66 83 f8 2e          	cmp    ax,0x2e
c0003b04:	75 03                	jne    c0003b09 <create_name+0xc3>
c0003b06:	4e                   	dec    esi
c0003b07:	eb e4                	jmp    c0003aed <create_name+0xa7>
c0003b09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b0d:	31 ed                	xor    ebp,ebp
c0003b0f:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003b15:	85 f6                	test   esi,esi
c0003b17:	0f 84 55 ff ff ff    	je     c0003a72 <create_name+0x2c>
c0003b1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b21:	8d 55 01             	lea    edx,[ebp+0x1]
c0003b24:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003b28:	66 83 f8 20          	cmp    ax,0x20
c0003b2c:	75 04                	jne    c0003b32 <create_name+0xec>
c0003b2e:	89 d5                	mov    ebp,edx
c0003b30:	eb eb                	jmp    c0003b1d <create_name+0xd7>
c0003b32:	85 ed                	test   ebp,ebp
c0003b34:	75 06                	jne    c0003b3c <create_name+0xf6>
c0003b36:	66 83 f8 2e          	cmp    ax,0x2e
c0003b3a:	75 08                	jne    c0003b44 <create_name+0xfe>
c0003b3c:	83 cb 03             	or     ebx,0x3
c0003b3f:	eb 03                	jmp    c0003b44 <create_name+0xfe>
c0003b41:	4e                   	dec    esi
c0003b42:	74 0c                	je     c0003b50 <create_name+0x10a>
c0003b44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b48:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003b4e:	75 f1                	jne    c0003b41 <create_name+0xfb>
c0003b50:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b55:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003b58:	ba 20 00 00 00       	mov    edx,0x20
c0003b5d:	e8 35 df ff ff       	call   c0001a97 <mem_set>
c0003b62:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003b6a:	31 c9                	xor    ecx,ecx
c0003b6c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003b71:	8d 45 01             	lea    eax,[ebp+0x1]
c0003b74:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003b78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b7c:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003b80:	66 85 ed             	test   bp,bp
c0003b83:	0f 84 30 01 00 00    	je     c0003cb9 <create_name+0x273>
c0003b89:	66 83 fd 20          	cmp    bp,0x20
c0003b8d:	74 10                	je     c0003b9f <create_name+0x159>
c0003b8f:	66 83 fd 2e          	cmp    bp,0x2e
c0003b93:	75 13                	jne    c0003ba8 <create_name+0x162>
c0003b95:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b99:	0f 84 6b 01 00 00    	je     c0003d0a <create_name+0x2c4>
c0003b9f:	83 cb 03             	or     ebx,0x3
c0003ba2:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003ba6:	eb c9                	jmp    c0003b71 <create_name+0x12b>
c0003ba8:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003bac:	73 0b                	jae    c0003bb9 <create_name+0x173>
c0003bae:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003bb2:	75 47                	jne    c0003bfb <create_name+0x1b5>
c0003bb4:	e9 51 01 00 00       	jmp    c0003d0a <create_name+0x2c4>
c0003bb9:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003bbe:	75 10                	jne    c0003bd0 <create_name+0x18a>
c0003bc0:	83 cb 03             	or     ebx,0x3
c0003bc3:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003bcb:	e9 e9 00 00 00       	jmp    c0003cb9 <create_name+0x273>
c0003bd0:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003bd4:	74 0d                	je     c0003be3 <create_name+0x19d>
c0003bd6:	83 cb 03             	or     ebx,0x3
c0003bd9:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003bdd:	0f 87 d6 00 00 00    	ja     c0003cb9 <create_name+0x273>
c0003be3:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003be8:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003bec:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003bf4:	b9 08 00 00 00       	mov    ecx,0x8
c0003bf9:	eb a7                	jmp    c0003ba2 <create_name+0x15c>
c0003bfb:	66 83 fd 7f          	cmp    bp,0x7f
c0003bff:	76 68                	jbe    c0003c69 <create_name+0x223>
c0003c01:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003c05:	88 da                	mov    dl,bl
c0003c07:	83 ca 02             	or     edx,0x2
c0003c0a:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003c0e:	50                   	push   eax
c0003c0f:	50                   	push   eax
c0003c10:	68 b5 01 00 00       	push   0x1b5
c0003c15:	55                   	push   ebp
c0003c16:	e8 48 46 00 00       	call   c0008263 <ff_uni2oem>
c0003c1b:	83 c4 10             	add    esp,0x10
c0003c1e:	89 c5                	mov    ebp,eax
c0003c20:	a8 80                	test   al,0x80
c0003c22:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003c26:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003c2a:	74 0c                	je     c0003c38 <create_name+0x1f2>
c0003c2c:	83 e5 7f             	and    ebp,0x7f
c0003c2f:	0f b6 ad 40 5f 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffda0c0]
c0003c36:	eb 2a                	jmp    c0003c62 <create_name+0x21c>
c0003c38:	66 3d ff 00          	cmp    ax,0xff
c0003c3c:	76 24                	jbe    c0003c62 <create_name+0x21c>
c0003c3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003c42:	48                   	dec    eax
c0003c43:	39 c8                	cmp    eax,ecx
c0003c45:	77 0c                	ja     c0003c53 <create_name+0x20d>
c0003c47:	83 cb 03             	or     ebx,0x3
c0003c4a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003c4e:	e9 4f ff ff ff       	jmp    c0003ba2 <create_name+0x15c>
c0003c53:	89 e8                	mov    eax,ebp
c0003c55:	88 d3                	mov    bl,dl
c0003c57:	66 c1 e8 08          	shr    ax,0x8
c0003c5b:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003c5f:	41                   	inc    ecx
c0003c60:	eb 4b                	jmp    c0003cad <create_name+0x267>
c0003c62:	88 d3                	mov    bl,dl
c0003c64:	66 85 ed             	test   bp,bp
c0003c67:	74 19                	je     c0003c82 <create_name+0x23c>
c0003c69:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003c6d:	0f b7 d5             	movzx  edx,bp
c0003c70:	b8 fb 5f 02 c0       	mov    eax,0xc0025ffb
c0003c75:	e8 4b de ff ff       	call   c0001ac5 <chk_chr>
c0003c7a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003c7e:	85 c0                	test   eax,eax
c0003c80:	74 0a                	je     c0003c8c <create_name+0x246>
c0003c82:	83 cb 03             	or     ebx,0x3
c0003c85:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003c8a:	eb 21                	jmp    c0003cad <create_name+0x267>
c0003c8c:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003c8f:	66 83 f8 19          	cmp    ax,0x19
c0003c93:	77 07                	ja     c0003c9c <create_name+0x256>
c0003c95:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003c9a:	eb 11                	jmp    c0003cad <create_name+0x267>
c0003c9c:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003c9f:	66 83 f8 19          	cmp    ax,0x19
c0003ca3:	77 08                	ja     c0003cad <create_name+0x267>
c0003ca5:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003caa:	83 ed 20             	sub    ebp,0x20
c0003cad:	89 e8                	mov    eax,ebp
c0003caf:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003cb3:	41                   	inc    ecx
c0003cb4:	e9 e9 fe ff ff       	jmp    c0003ba2 <create_name+0x15c>
c0003cb9:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003cbd:	75 04                	jne    c0003cc3 <create_name+0x27d>
c0003cbf:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003cc3:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003cc8:	75 05                	jne    c0003ccf <create_name+0x289>
c0003cca:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003ccf:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003cd3:	83 e0 0c             	and    eax,0xc
c0003cd6:	3c 0c                	cmp    al,0xc
c0003cd8:	74 0b                	je     c0003ce5 <create_name+0x29f>
c0003cda:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003cde:	83 e0 03             	and    eax,0x3
c0003ce1:	3c 03                	cmp    al,0x3
c0003ce3:	75 05                	jne    c0003cea <create_name+0x2a4>
c0003ce5:	83 cb 02             	or     ebx,0x2
c0003ce8:	eb 19                	jmp    c0003d03 <create_name+0x2bd>
c0003cea:	f6 c3 02             	test   bl,0x2
c0003ced:	75 14                	jne    c0003d03 <create_name+0x2bd>
c0003cef:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003cf4:	74 03                	je     c0003cf9 <create_name+0x2b3>
c0003cf6:	83 cb 10             	or     ebx,0x10
c0003cf9:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003cfe:	74 03                	je     c0003d03 <create_name+0x2bd>
c0003d00:	83 cb 08             	or     ebx,0x8
c0003d03:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003d06:	31 c0                	xor    eax,eax
c0003d08:	eb 10                	jmp    c0003d1a <create_name+0x2d4>
c0003d0a:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d0f:	0f 85 ce fe ff ff    	jne    c0003be3 <create_name+0x19d>
c0003d15:	e9 a6 fe ff ff       	jmp    c0003bc0 <create_name+0x17a>
c0003d1a:	83 c4 3c             	add    esp,0x3c
c0003d1d:	5b                   	pop    ebx
c0003d1e:	5e                   	pop    esi
c0003d1f:	5f                   	pop    edi
c0003d20:	5d                   	pop    ebp
c0003d21:	c3                   	ret    

c0003d22 <xname_sum>:
c0003d22:	56                   	push   esi
c0003d23:	53                   	push   ebx
c0003d24:	89 c6                	mov    esi,eax
c0003d26:	51                   	push   ecx
c0003d27:	31 db                	xor    ebx,ebx
c0003d29:	83 c6 02             	add    esi,0x2
c0003d2c:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003d30:	66 85 c0             	test   ax,ax
c0003d33:	74 1f                	je     c0003d54 <xname_sum+0x32>
c0003d35:	83 ec 0c             	sub    esp,0xc
c0003d38:	66 d1 cb             	ror    bx,1
c0003d3b:	50                   	push   eax
c0003d3c:	e8 1e 46 00 00       	call   c000835f <ff_wtoupper>
c0003d41:	83 c4 10             	add    esp,0x10
c0003d44:	0f b6 d0             	movzx  edx,al
c0003d47:	66 c1 e8 08          	shr    ax,0x8
c0003d4b:	01 d3                	add    ebx,edx
c0003d4d:	66 d1 cb             	ror    bx,1
c0003d50:	01 c3                	add    ebx,eax
c0003d52:	eb d5                	jmp    c0003d29 <xname_sum+0x7>
c0003d54:	89 d8                	mov    eax,ebx
c0003d56:	5a                   	pop    edx
c0003d57:	5b                   	pop    ebx
c0003d58:	5e                   	pop    esi
c0003d59:	c3                   	ret    

c0003d5a <create_xdir>:
c0003d5a:	55                   	push   ebp
c0003d5b:	b9 40 00 00 00       	mov    ecx,0x40
c0003d60:	57                   	push   edi
c0003d61:	bd 01 00 00 00       	mov    ebp,0x1
c0003d66:	56                   	push   esi
c0003d67:	31 ff                	xor    edi,edi
c0003d69:	53                   	push   ebx
c0003d6a:	be 40 00 00 00       	mov    esi,0x40
c0003d6f:	89 c3                	mov    ebx,eax
c0003d71:	83 ec 1c             	sub    esp,0x1c
c0003d74:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003d78:	31 d2                	xor    edx,edx
c0003d7a:	e8 18 dd ff ff       	call   c0001a97 <mem_set>
c0003d7f:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003d82:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003d86:	31 c9                	xor    ecx,ecx
c0003d88:	8d 46 01             	lea    eax,[esi+0x1]
c0003d8b:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003d8f:	83 c6 02             	add    esi,0x2
c0003d92:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003d96:	66 85 ed             	test   bp,bp
c0003d99:	74 12                	je     c0003dad <create_xdir+0x53>
c0003d9b:	0f b6 c1             	movzx  eax,cl
c0003d9e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003da2:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003da6:	66 83 fd 01          	cmp    bp,0x1
c0003daa:	80 d9 ff             	sbb    cl,0xff
c0003dad:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003db0:	0f b7 d5             	movzx  edx,bp
c0003db3:	83 c6 02             	add    esi,0x2
c0003db6:	e8 ba dc ff ff       	call   c0001a75 <st_word>
c0003dbb:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003dc1:	75 d3                	jne    c0003d96 <create_xdir+0x3c>
c0003dc3:	8d 47 01             	lea    eax,[edi+0x1]
c0003dc6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003dca:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003dce:	0f b6 c1             	movzx  eax,cl
c0003dd1:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003dd6:	74 07                	je     c0003ddf <create_xdir+0x85>
c0003dd8:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003ddd:	eb a9                	jmp    c0003d88 <create_xdir+0x2e>
c0003ddf:	8d 47 02             	lea    eax,[edi+0x2]
c0003de2:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003de5:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003de8:	89 d0                	mov    eax,edx
c0003dea:	e8 33 ff ff ff       	call   c0003d22 <xname_sum>
c0003def:	83 c4 1c             	add    esp,0x1c
c0003df2:	0f b7 d0             	movzx  edx,ax
c0003df5:	8d 43 24             	lea    eax,[ebx+0x24]
c0003df8:	5b                   	pop    ebx
c0003df9:	5e                   	pop    esi
c0003dfa:	5f                   	pop    edi
c0003dfb:	5d                   	pop    ebp
c0003dfc:	e9 74 dc ff ff       	jmp    c0001a75 <st_word>

c0003e01 <cmp_lfn>:
c0003e01:	55                   	push   ebp
c0003e02:	57                   	push   edi
c0003e03:	89 d7                	mov    edi,edx
c0003e05:	56                   	push   esi
c0003e06:	53                   	push   ebx
c0003e07:	83 ec 1c             	sub    esp,0x1c
c0003e0a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e0e:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003e11:	e8 ed db ff ff       	call   c0001a03 <ld_word>
c0003e16:	66 85 c0             	test   ax,ax
c0003e19:	74 07                	je     c0003e22 <cmp_lfn+0x21>
c0003e1b:	31 c0                	xor    eax,eax
c0003e1d:	e9 9a 00 00 00       	jmp    c0003ebc <cmp_lfn+0xbb>
c0003e22:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003e24:	bd 01 00 00 00       	mov    ebp,0x1
c0003e29:	83 e3 3f             	and    ebx,0x3f
c0003e2c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003e34:	4b                   	dec    ebx
c0003e35:	6b db 0d             	imul   ebx,ebx,0xd
c0003e38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003e3c:	0f b6 80 c0 5f 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffda040]
c0003e43:	01 f8                	add    eax,edi
c0003e45:	e8 b9 db ff ff       	call   c0001a03 <ld_word>
c0003e4a:	66 85 ed             	test   bp,bp
c0003e4d:	89 c6                	mov    esi,eax
c0003e4f:	74 3c                	je     c0003e8d <cmp_lfn+0x8c>
c0003e51:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003e57:	77 c2                	ja     c0003e1b <cmp_lfn+0x1a>
c0003e59:	83 ec 0c             	sub    esp,0xc
c0003e5c:	0f b7 c0             	movzx  eax,ax
c0003e5f:	50                   	push   eax
c0003e60:	e8 fa 44 00 00       	call   c000835f <ff_wtoupper>
c0003e65:	89 c5                	mov    ebp,eax
c0003e67:	8d 43 01             	lea    eax,[ebx+0x1]
c0003e6a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003e6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003e72:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003e76:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e79:	e8 e1 44 00 00       	call   c000835f <ff_wtoupper>
c0003e7e:	83 c4 10             	add    esp,0x10
c0003e81:	39 c5                	cmp    ebp,eax
c0003e83:	75 96                	jne    c0003e1b <cmp_lfn+0x1a>
c0003e85:	89 f5                	mov    ebp,esi
c0003e87:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003e8b:	eb 04                	jmp    c0003e91 <cmp_lfn+0x90>
c0003e8d:	66 46                	inc    si
c0003e8f:	75 8a                	jne    c0003e1b <cmp_lfn+0x1a>
c0003e91:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003e95:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003e9a:	75 9c                	jne    c0003e38 <cmp_lfn+0x37>
c0003e9c:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003e9f:	74 16                	je     c0003eb7 <cmp_lfn+0xb6>
c0003ea1:	66 85 ed             	test   bp,bp
c0003ea4:	74 11                	je     c0003eb7 <cmp_lfn+0xb6>
c0003ea6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003eaa:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003eaf:	0f 94 c0             	sete   al
c0003eb2:	0f b6 c0             	movzx  eax,al
c0003eb5:	eb 05                	jmp    c0003ebc <cmp_lfn+0xbb>
c0003eb7:	b8 01 00 00 00       	mov    eax,0x1
c0003ebc:	83 c4 1c             	add    esp,0x1c
c0003ebf:	5b                   	pop    ebx
c0003ec0:	5e                   	pop    esi
c0003ec1:	5f                   	pop    edi
c0003ec2:	5d                   	pop    ebp
c0003ec3:	c3                   	ret    

c0003ec4 <dir_find>:
c0003ec4:	55                   	push   ebp
c0003ec5:	31 d2                	xor    edx,edx
c0003ec7:	57                   	push   edi
c0003ec8:	56                   	push   esi
c0003ec9:	53                   	push   ebx
c0003eca:	89 c3                	mov    ebx,eax
c0003ecc:	83 ec 1c             	sub    esp,0x1c
c0003ecf:	8b 30                	mov    esi,DWORD PTR [eax]
c0003ed1:	e8 89 f0 ff ff       	call   c0002f5f <dir_sdi>
c0003ed6:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ed9:	85 c0                	test   eax,eax
c0003edb:	0f 85 9e 01 00 00    	jne    c000407f <dir_find+0x1bb>
c0003ee1:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003ee4:	0f 85 8d 00 00 00    	jne    c0003f77 <dir_find+0xb3>
c0003eea:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003eed:	e8 30 fe ff ff       	call   c0003d22 <xname_sum>
c0003ef2:	89 c7                	mov    edi,eax
c0003ef4:	31 d2                	xor    edx,edx
c0003ef6:	89 d8                	mov    eax,ebx
c0003ef8:	e8 72 f8 ff ff       	call   c000376f <dir_read>
c0003efd:	85 c0                	test   eax,eax
c0003eff:	0f 85 5e 01 00 00    	jne    c0004063 <dir_find+0x19f>
c0003f05:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003f08:	8d 41 24             	lea    eax,[ecx+0x24]
c0003f0b:	e8 f3 da ff ff       	call   c0001a03 <ld_word>
c0003f10:	66 39 f8             	cmp    ax,di
c0003f13:	75 df                	jne    c0003ef4 <dir_find+0x30>
c0003f15:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0003f18:	31 ed                	xor    ebp,ebp
c0003f1a:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003f1e:	ba 40 00 00 00       	mov    edx,0x40
c0003f23:	89 e9                	mov    ecx,ebp
c0003f25:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0003f29:	0f 84 42 01 00 00    	je     c0004071 <dir_find+0x1ad>
c0003f2f:	f6 c2 1f             	test   dl,0x1f
c0003f32:	75 03                	jne    c0003f37 <dir_find+0x73>
c0003f34:	83 c2 02             	add    edx,0x2
c0003f37:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003f3b:	89 d0                	mov    eax,edx
c0003f3d:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003f40:	e8 be da ff ff       	call   c0001a03 <ld_word>
c0003f45:	83 ec 0c             	sub    esp,0xc
c0003f48:	0f b7 c0             	movzx  eax,ax
c0003f4b:	50                   	push   eax
c0003f4c:	e8 0e 44 00 00       	call   c000835f <ff_wtoupper>
c0003f51:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003f55:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f58:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0003f5c:	89 04 24             	mov    DWORD PTR [esp],eax
c0003f5f:	e8 fb 43 00 00       	call   c000835f <ff_wtoupper>
c0003f64:	83 c4 10             	add    esp,0x10
c0003f67:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003f6b:	75 87                	jne    c0003ef4 <dir_find+0x30>
c0003f6d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003f71:	45                   	inc    ebp
c0003f72:	83 c2 02             	add    edx,0x2
c0003f75:	eb ac                	jmp    c0003f23 <dir_find+0x5f>
c0003f77:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003f7e:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003f83:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f88:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003f8b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003f8e:	89 f0                	mov    eax,esi
c0003f90:	e8 4c e2 ff ff       	call   c00021e1 <move_window>
c0003f95:	85 c0                	test   eax,eax
c0003f97:	0f 85 c6 00 00 00    	jne    c0004063 <dir_find+0x19f>
c0003f9d:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003fa0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003fa3:	84 c9                	test   cl,cl
c0003fa5:	0f 84 bd 00 00 00    	je     c0004068 <dir_find+0x1a4>
c0003fab:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003fae:	88 d0                	mov    al,dl
c0003fb0:	83 e0 3f             	and    eax,0x3f
c0003fb3:	80 f9 e5             	cmp    cl,0xe5
c0003fb6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003fb9:	0f 84 87 00 00 00    	je     c0004046 <dir_find+0x182>
c0003fbf:	80 e2 08             	and    dl,0x8
c0003fc2:	74 06                	je     c0003fca <dir_find+0x106>
c0003fc4:	3c 0f                	cmp    al,0xf
c0003fc6:	75 7e                	jne    c0004046 <dir_find+0x182>
c0003fc8:	eb 04                	jmp    c0003fce <dir_find+0x10a>
c0003fca:	3c 0f                	cmp    al,0xf
c0003fcc:	75 4c                	jne    c000401a <dir_find+0x156>
c0003fce:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0003fd2:	75 7e                	jne    c0004052 <dir_find+0x18e>
c0003fd4:	f6 c1 40             	test   cl,0x40
c0003fd7:	74 12                	je     c0003feb <dir_find+0x127>
c0003fd9:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003fdc:	83 e1 bf             	and    ecx,0xffffffbf
c0003fdf:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0003fe3:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003fe6:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003fe9:	eb 06                	jmp    c0003ff1 <dir_find+0x12d>
c0003feb:	89 f8                	mov    eax,edi
c0003fed:	38 c8                	cmp    al,cl
c0003fef:	75 5c                	jne    c000404d <dir_find+0x189>
c0003ff1:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0003ff5:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003ffa:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003ffd:	75 53                	jne    c0004052 <dir_find+0x18e>
c0003fff:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004003:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004006:	89 ea                	mov    edx,ebp
c0004008:	e8 f4 fd ff ff       	call   c0003e01 <cmp_lfn>
c000400d:	85 c0                	test   eax,eax
c000400f:	74 41                	je     c0004052 <dir_find+0x18e>
c0004011:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004015:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004018:	eb 38                	jmp    c0004052 <dir_find+0x18e>
c000401a:	89 f8                	mov    eax,edi
c000401c:	84 c0                	test   al,al
c000401e:	75 0d                	jne    c000402d <dir_find+0x169>
c0004020:	89 e8                	mov    eax,ebp
c0004022:	e8 98 de ff ff       	call   c0001ebf <sum_sfn>
c0004027:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000402b:	74 52                	je     c000407f <dir_find+0x1bb>
c000402d:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004031:	75 13                	jne    c0004046 <dir_find+0x182>
c0004033:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004036:	b9 0b 00 00 00       	mov    ecx,0xb
c000403b:	89 e8                	mov    eax,ebp
c000403d:	e8 60 da ff ff       	call   c0001aa2 <mem_cmp>
c0004042:	85 c0                	test   eax,eax
c0004044:	74 39                	je     c000407f <dir_find+0x1bb>
c0004046:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c000404d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004052:	31 d2                	xor    edx,edx
c0004054:	89 d8                	mov    eax,ebx
c0004056:	e8 5c f4 ff ff       	call   c00034b7 <dir_next>
c000405b:	85 c0                	test   eax,eax
c000405d:	0f 84 25 ff ff ff    	je     c0003f88 <dir_find+0xc4>
c0004063:	89 04 24             	mov    DWORD PTR [esp],eax
c0004066:	eb 17                	jmp    c000407f <dir_find+0x1bb>
c0004068:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000406f:	eb 0e                	jmp    c000407f <dir_find+0x1bb>
c0004071:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004074:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c0004079:	0f 85 75 fe ff ff    	jne    c0003ef4 <dir_find+0x30>
c000407f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004082:	83 c4 1c             	add    esp,0x1c
c0004085:	5b                   	pop    ebx
c0004086:	5e                   	pop    esi
c0004087:	5f                   	pop    edi
c0004088:	5d                   	pop    ebp
c0004089:	c3                   	ret    

c000408a <dir_register>:
c000408a:	55                   	push   ebp
c000408b:	57                   	push   edi
c000408c:	56                   	push   esi
c000408d:	be 06 00 00 00       	mov    esi,0x6
c0004092:	53                   	push   ebx
c0004093:	83 ec 6c             	sub    esp,0x6c
c0004096:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c000409a:	0f 85 62 02 00 00    	jne    c0004302 <dir_register+0x278>
c00040a0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00040a2:	31 ff                	xor    edi,edi
c00040a4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00040a7:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00040ac:	74 03                	je     c00040b1 <dir_register+0x27>
c00040ae:	47                   	inc    edi
c00040af:	eb f6                	jmp    c00040a7 <dir_register+0x1d>
c00040b1:	89 c3                	mov    ebx,eax
c00040b3:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00040b7:	0f 85 e1 00 00 00    	jne    c000419e <dir_register+0x114>
c00040bd:	83 c7 0e             	add    edi,0xe
c00040c0:	b9 0f 00 00 00       	mov    ecx,0xf
c00040c5:	89 f8                	mov    eax,edi
c00040c7:	31 d2                	xor    edx,edx
c00040c9:	f7 f1                	div    ecx
c00040cb:	8d 50 02             	lea    edx,[eax+0x2]
c00040ce:	89 c7                	mov    edi,eax
c00040d0:	89 d8                	mov    eax,ebx
c00040d2:	e8 12 f8 ff ff       	call   c00038e9 <dir_alloc>
c00040d7:	89 c6                	mov    esi,eax
c00040d9:	85 c0                	test   eax,eax
c00040db:	0f 85 21 02 00 00    	jne    c0004302 <dir_register+0x278>
c00040e1:	81 c7 01 00 00 08    	add    edi,0x8000001
c00040e7:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00040ea:	c1 e7 05             	shl    edi,0x5
c00040ed:	29 f8                	sub    eax,edi
c00040ef:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00040f2:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00040f5:	a8 04                	test   al,0x4
c00040f7:	0f 84 91 00 00 00    	je     c000418e <dir_register+0x104>
c00040fd:	83 e0 fb             	and    eax,0xfffffffb
c0004100:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004103:	89 d8                	mov    eax,ebx
c0004105:	e8 25 ec ff ff       	call   c0002d2f <fill_first_frag>
c000410a:	85 c0                	test   eax,eax
c000410c:	0f 85 ee 01 00 00    	jne    c0004300 <dir_register+0x276>
c0004112:	83 c9 ff             	or     ecx,0xffffffff
c0004115:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004118:	89 d8                	mov    eax,ebx
c000411a:	e8 db eb ff ff       	call   c0002cfa <fill_last_frag>
c000411f:	85 c0                	test   eax,eax
c0004121:	0f 85 d9 01 00 00    	jne    c0004300 <dir_register+0x276>
c0004127:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000412b:	74 61                	je     c000418e <dir_register+0x104>
c000412d:	89 da                	mov    edx,ebx
c000412f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004133:	e8 ea f5 ff ff       	call   c0003722 <load_obj_xdir>
c0004138:	85 c0                	test   eax,eax
c000413a:	0f 85 c0 01 00 00    	jne    c0004300 <dir_register+0x276>
c0004140:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004144:	31 c9                	xor    ecx,ecx
c0004146:	c1 e2 09             	shl    edx,0x9
c0004149:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c000414c:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c000414f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004152:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004155:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004158:	83 c0 38             	add    eax,0x38
c000415b:	e8 1c d9 ff ff       	call   c0001a7c <st_qword>
c0004160:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004163:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004166:	83 c0 28             	add    eax,0x28
c0004169:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000416c:	e8 0b d9 ff ff       	call   c0001a7c <st_qword>
c0004171:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004174:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0004177:	83 c8 01             	or     eax,0x1
c000417a:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c000417d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004181:	e8 db f7 ff ff       	call   c0003961 <store_xdir>
c0004186:	85 c0                	test   eax,eax
c0004188:	0f 85 72 01 00 00    	jne    c0004300 <dir_register+0x276>
c000418e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004191:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004194:	e8 c1 fb ff ff       	call   c0003d5a <create_xdir>
c0004199:	e9 64 01 00 00       	jmp    c0004302 <dir_register+0x278>
c000419e:	8d 40 3c             	lea    eax,[eax+0x3c]
c00041a1:	b9 0c 00 00 00       	mov    ecx,0xc
c00041a6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00041aa:	89 c2                	mov    edx,eax
c00041ac:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041b0:	e8 cd d8 ff ff       	call   c0001a82 <mem_cpy>
c00041b5:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00041ba:	74 58                	je     c0004214 <dir_register+0x18a>
c00041bc:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00041c0:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00041c8:	83 ec 0c             	sub    esp,0xc
c00041cb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00041ce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00041d2:	8d 54 24 24          	lea    edx,[esp+0x24]
c00041d6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00041da:	e8 24 dc ff ff       	call   c0001e03 <gen_numname>
c00041df:	89 d8                	mov    eax,ebx
c00041e1:	e8 de fc ff ff       	call   c0003ec4 <dir_find>
c00041e6:	83 c4 10             	add    esp,0x10
c00041e9:	89 c6                	mov    esi,eax
c00041eb:	85 c0                	test   eax,eax
c00041ed:	75 15                	jne    c0004204 <dir_register+0x17a>
c00041ef:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00041f3:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c00041f8:	75 ce                	jne    c00041c8 <dir_register+0x13e>
c00041fa:	be 07 00 00 00       	mov    esi,0x7
c00041ff:	e9 fe 00 00 00       	jmp    c0004302 <dir_register+0x278>
c0004204:	83 f8 04             	cmp    eax,0x4
c0004207:	0f 85 f5 00 00 00    	jne    c0004302 <dir_register+0x278>
c000420d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004211:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004214:	b9 01 00 00 00       	mov    ecx,0x1
c0004219:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000421e:	74 0f                	je     c000422f <dir_register+0x1a5>
c0004220:	b9 0d 00 00 00       	mov    ecx,0xd
c0004225:	8d 47 0c             	lea    eax,[edi+0xc]
c0004228:	31 d2                	xor    edx,edx
c000422a:	f7 f1                	div    ecx
c000422c:	8d 48 01             	lea    ecx,[eax+0x1]
c000422f:	89 ca                	mov    edx,ecx
c0004231:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004235:	89 d8                	mov    eax,ebx
c0004237:	e8 ad f6 ff ff       	call   c00038e9 <dir_alloc>
c000423c:	89 c6                	mov    esi,eax
c000423e:	85 c0                	test   eax,eax
c0004240:	0f 85 bc 00 00 00    	jne    c0004302 <dir_register+0x278>
c0004246:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000424a:	49                   	dec    ecx
c000424b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000424f:	74 6a                	je     c00042bb <dir_register+0x231>
c0004251:	89 c8                	mov    eax,ecx
c0004253:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004256:	c1 e0 05             	shl    eax,0x5
c0004259:	29 c2                	sub    edx,eax
c000425b:	89 d8                	mov    eax,ebx
c000425d:	e8 fd ec ff ff       	call   c0002f5f <dir_sdi>
c0004262:	89 c6                	mov    esi,eax
c0004264:	85 c0                	test   eax,eax
c0004266:	0f 85 96 00 00 00    	jne    c0004302 <dir_register+0x278>
c000426c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004270:	e8 4a dc ff ff       	call   c0001ebf <sum_sfn>
c0004275:	0f b6 f8             	movzx  edi,al
c0004278:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000427b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000427e:	89 e8                	mov    eax,ebp
c0004280:	e8 5c df ff ff       	call   c00021e1 <move_window>
c0004285:	89 c6                	mov    esi,eax
c0004287:	85 c0                	test   eax,eax
c0004289:	75 77                	jne    c0004302 <dir_register+0x278>
c000428b:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0004290:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004293:	83 ec 0c             	sub    esp,0xc
c0004296:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0004299:	57                   	push   edi
c000429a:	e8 e0 da ff ff       	call   c0001d7f <put_lfn>
c000429f:	31 d2                	xor    edx,edx
c00042a1:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00042a5:	89 d8                	mov    eax,ebx
c00042a7:	e8 0b f2 ff ff       	call   c00034b7 <dir_next>
c00042ac:	83 c4 10             	add    esp,0x10
c00042af:	89 c6                	mov    esi,eax
c00042b1:	85 c0                	test   eax,eax
c00042b3:	75 4d                	jne    c0004302 <dir_register+0x278>
c00042b5:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00042b9:	75 bd                	jne    c0004278 <dir_register+0x1ee>
c00042bb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00042be:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00042c1:	89 e8                	mov    eax,ebp
c00042c3:	e8 19 df ff ff       	call   c00021e1 <move_window>
c00042c8:	89 c6                	mov    esi,eax
c00042ca:	85 c0                	test   eax,eax
c00042cc:	75 34                	jne    c0004302 <dir_register+0x278>
c00042ce:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00042d1:	b9 20 00 00 00       	mov    ecx,0x20
c00042d6:	31 d2                	xor    edx,edx
c00042d8:	e8 ba d7 ff ff       	call   c0001a97 <mem_set>
c00042dd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00042e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00042e4:	b9 0b 00 00 00       	mov    ecx,0xb
c00042e9:	e8 94 d7 ff ff       	call   c0001a82 <mem_cpy>
c00042ee:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c00042f1:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00042f4:	83 e0 18             	and    eax,0x18
c00042f7:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c00042fa:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00042fe:	eb 02                	jmp    c0004302 <dir_register+0x278>
c0004300:	89 c6                	mov    esi,eax
c0004302:	83 c4 6c             	add    esp,0x6c
c0004305:	89 f0                	mov    eax,esi
c0004307:	5b                   	pop    ebx
c0004308:	5e                   	pop    esi
c0004309:	5f                   	pop    edi
c000430a:	5d                   	pop    ebp
c000430b:	c3                   	ret    

c000430c <sync_fs>:
c000430c:	56                   	push   esi
c000430d:	53                   	push   ebx
c000430e:	53                   	push   ebx
c000430f:	89 c3                	mov    ebx,eax
c0004311:	e8 37 de ff ff       	call   c000214d <sync_window>
c0004316:	85 c0                	test   eax,eax
c0004318:	0f 85 b1 00 00 00    	jne    c00043cf <sync_fs+0xc3>
c000431e:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004321:	0f 85 8e 00 00 00    	jne    c00043b5 <sync_fs+0xa9>
c0004327:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000432b:	0f 85 84 00 00 00    	jne    c00043b5 <sync_fs+0xa9>
c0004331:	b9 00 02 00 00       	mov    ecx,0x200
c0004336:	8d 73 54             	lea    esi,[ebx+0x54]
c0004339:	31 d2                	xor    edx,edx
c000433b:	89 f0                	mov    eax,esi
c000433d:	e8 55 d7 ff ff       	call   c0001a97 <mem_set>
c0004342:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0004348:	ba 55 aa 00 00       	mov    edx,0xaa55
c000434d:	e8 23 d7 ff ff       	call   c0001a75 <st_word>
c0004352:	ba 52 52 61 41       	mov    edx,0x41615252
c0004357:	89 f0                	mov    eax,esi
c0004359:	e8 1b d7 ff ff       	call   c0001a79 <st_dword>
c000435e:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004364:	ba 72 72 41 61       	mov    edx,0x61417272
c0004369:	e8 0b d7 ff ff       	call   c0001a79 <st_dword>
c000436e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004371:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c0004377:	e8 fd d6 ff ff       	call   c0001a79 <st_dword>
c000437c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000437f:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c0004385:	e8 ef d6 ff ff       	call   c0001a79 <st_dword>
c000438a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000438d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004390:	83 c0 01             	add    eax,0x1
c0004393:	83 d2 00             	adc    edx,0x0
c0004396:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c0004399:	83 ec 0c             	sub    esp,0xc
c000439c:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c000439f:	6a 01                	push   0x1
c00043a1:	52                   	push   edx
c00043a2:	50                   	push   eax
c00043a3:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043a7:	56                   	push   esi
c00043a8:	50                   	push   eax
c00043a9:	e8 20 d6 ff ff       	call   c00019ce <disk_write>
c00043ae:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00043b2:	83 c4 20             	add    esp,0x20
c00043b5:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043b9:	51                   	push   ecx
c00043ba:	6a 00                	push   0x0
c00043bc:	6a 00                	push   0x0
c00043be:	50                   	push   eax
c00043bf:	e8 20 d6 ff ff       	call   c00019e4 <disk_ioctl>
c00043c4:	83 c4 10             	add    esp,0x10
c00043c7:	85 c0                	test   eax,eax
c00043c9:	0f 95 c0             	setne  al
c00043cc:	0f b6 c0             	movzx  eax,al
c00043cf:	5a                   	pop    edx
c00043d0:	5b                   	pop    ebx
c00043d1:	5e                   	pop    esi
c00043d2:	c3                   	ret    

c00043d3 <create_partition>:
c00043d3:	55                   	push   ebp
c00043d4:	0f b6 c0             	movzx  eax,al
c00043d7:	57                   	push   edi
c00043d8:	56                   	push   esi
c00043d9:	53                   	push   ebx
c00043da:	83 ec 60             	sub    esp,0x60
c00043dd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00043e1:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c00043e5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00043e9:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00043ed:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c00043f1:	50                   	push   eax
c00043f2:	6a 01                	push   0x1
c00043f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00043f8:	e8 e7 d5 ff ff       	call   c00019e4 <disk_ioctl>
c00043fd:	83 c4 10             	add    esp,0x10
c0004400:	85 c0                	test   eax,eax
c0004402:	74 0a                	je     c000440e <create_partition+0x3b>
c0004404:	b8 01 00 00 00       	mov    eax,0x1
c0004409:	e9 67 05 00 00       	jmp    c0004975 <create_partition+0x5a2>
c000440e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004412:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004416:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000441a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000441e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004423:	0f 86 ed 03 00 00    	jbe    c0004816 <create_partition+0x443>
c0004429:	83 c0 df             	add    eax,0xffffffdf
c000442c:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004434:	83 d2 ff             	adc    edx,0xffffffff
c0004437:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000443b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000443f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004443:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004447:	83 c0 bd             	add    eax,0xffffffbd
c000444a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004451:	83 d2 ff             	adc    edx,0xffffffff
c0004454:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0004458:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000445c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004464:	be 22 00 00 00       	mov    esi,0x22
c0004469:	31 ff                	xor    edi,edi
c000446b:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004473:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c000447b:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0004483:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004487:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000448d:	75 0e                	jne    c000449d <create_partition+0xca>
c000448f:	b9 00 02 00 00       	mov    ecx,0x200
c0004494:	31 d2                	xor    edx,edx
c0004496:	89 d8                	mov    eax,ebx
c0004498:	e8 fa d5 ff ff       	call   c0001a97 <mem_set>
c000449d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00044a1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00044a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044a9:	0b 04 24             	or     eax,DWORD PTR [esp]
c00044ac:	0f 84 23 01 00 00    	je     c00045d5 <create_partition+0x202>
c00044b2:	89 f0                	mov    eax,esi
c00044b4:	89 fa                	mov    edx,edi
c00044b6:	05 ff 07 00 00       	add    eax,0x7ff
c00044bb:	83 d2 00             	adc    edx,0x0
c00044be:	89 c1                	mov    ecx,eax
c00044c0:	89 d7                	mov    edi,edx
c00044c2:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00044c8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00044cc:	89 ce                	mov    esi,ecx
c00044ce:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00044d2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00044d6:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00044da:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c00044dd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00044e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00044e4:	b8 64 00 00 00       	mov    eax,0x64
c00044e9:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00044ec:	b8 00 00 00 00       	mov    eax,0x0
c00044f1:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00044f5:	72 41                	jb     c0004538 <create_partition+0x165>
c00044f7:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00044fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044ff:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004503:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004508:	01 c1                	add    ecx,eax
c000450a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000450e:	f7 24 24             	mul    DWORD PTR [esp]
c0004511:	6a 00                	push   0x0
c0004513:	01 ca                	add    edx,ecx
c0004515:	6a 64                	push   0x64
c0004517:	52                   	push   edx
c0004518:	50                   	push   eax
c0004519:	e8 1e f0 01 00       	call   c002353c <__udivdi3>
c000451e:	83 c4 10             	add    esp,0x10
c0004521:	05 ff 07 00 00       	add    eax,0x7ff
c0004526:	83 d2 00             	adc    edx,0x0
c0004529:	89 c1                	mov    ecx,eax
c000452b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000452f:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004535:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004538:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000453b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000453f:	01 f0                	add    eax,esi
c0004541:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004545:	11 fa                	adc    edx,edi
c0004547:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000454b:	19 d1                	sbb    ecx,edx
c000454d:	73 2e                	jae    c000457d <create_partition+0x1aa>
c000454f:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004553:	89 f8                	mov    eax,edi
c0004555:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000455c:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004560:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004568:	73 6b                	jae    c00045d5 <create_partition+0x202>
c000456a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000456e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004572:	29 f0                	sub    eax,esi
c0004574:	19 fa                	sbb    edx,edi
c0004576:	89 04 24             	mov    DWORD PTR [esp],eax
c0004579:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000457d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004581:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004584:	74 4f                	je     c00045d5 <create_partition+0x202>
c0004586:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0004589:	b9 10 00 00 00       	mov    ecx,0x10
c000458e:	ba d0 5f 02 c0       	mov    edx,0xc0025fd0
c0004593:	e8 ea d4 ff ff       	call   c0001a82 <mem_cpy>
c0004598:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c000459c:	b9 10 00 00 00       	mov    ecx,0x10
c00045a1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00045a5:	e8 2c db ff ff       	call   c00020d6 <make_rand>
c00045aa:	89 f2                	mov    edx,esi
c00045ac:	89 f9                	mov    ecx,edi
c00045ae:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00045b2:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00045b6:	e8 c1 d4 ff ff       	call   c0001a7c <st_qword>
c00045bb:	03 34 24             	add    esi,DWORD PTR [esp]
c00045be:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00045c2:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00045c6:	89 f2                	mov    edx,esi
c00045c8:	89 f9                	mov    ecx,edi
c00045ca:	83 c2 ff             	add    edx,0xffffffff
c00045cd:	83 d1 ff             	adc    ecx,0xffffffff
c00045d0:	e8 a7 d4 ff ff       	call   c0001a7c <st_qword>
c00045d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00045d9:	83 e8 80             	sub    eax,0xffffff80
c00045dc:	89 c5                	mov    ebp,eax
c00045de:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00045e2:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00045e8:	75 6b                	jne    c0004655 <create_partition+0x282>
c00045ea:	45                   	inc    ebp
c00045eb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045ef:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c00045f4:	e8 39 da ff ff       	call   c0002032 <crc32>
c00045f9:	81 fd 00 02 00 00    	cmp    ebp,0x200
c00045ff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004603:	75 e5                	jne    c00045ea <create_partition+0x217>
c0004605:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004609:	31 d2                	xor    edx,edx
c000460b:	83 ec 0c             	sub    esp,0xc
c000460e:	c1 ed 09             	shr    ebp,0x9
c0004611:	6a 01                	push   0x1
c0004613:	8d 45 02             	lea    eax,[ebp+0x2]
c0004616:	52                   	push   edx
c0004617:	50                   	push   eax
c0004618:	53                   	push   ebx
c0004619:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000461d:	e8 ac d3 ff ff       	call   c00019ce <disk_write>
c0004622:	83 c4 20             	add    esp,0x20
c0004625:	85 c0                	test   eax,eax
c0004627:	0f 85 d7 fd ff ff    	jne    c0004404 <create_partition+0x31>
c000462d:	83 ec 0c             	sub    esp,0xc
c0004630:	31 d2                	xor    edx,edx
c0004632:	6a 01                	push   0x1
c0004634:	89 e8                	mov    eax,ebp
c0004636:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000463a:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000463e:	52                   	push   edx
c000463f:	50                   	push   eax
c0004640:	53                   	push   ebx
c0004641:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004645:	e8 84 d3 ff ff       	call   c00019ce <disk_write>
c000464a:	83 c4 20             	add    esp,0x20
c000464d:	85 c0                	test   eax,eax
c000464f:	0f 85 af fd ff ff    	jne    c0004404 <create_partition+0x31>
c0004655:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004659:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000465d:	3d 00 40 00 00       	cmp    eax,0x4000
c0004662:	74 0d                	je     c0004671 <create_partition+0x29e>
c0004664:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0004668:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000466c:	e9 12 fe ff ff       	jmp    c0004483 <create_partition+0xb0>
c0004671:	31 d2                	xor    edx,edx
c0004673:	b9 00 02 00 00       	mov    ecx,0x200
c0004678:	89 d8                	mov    eax,ebx
c000467a:	8d 6b 20             	lea    ebp,[ebx+0x20]
c000467d:	e8 15 d4 ff ff       	call   c0001a97 <mem_set>
c0004682:	8d 7b 48             	lea    edi,[ebx+0x48]
c0004685:	b9 10 00 00 00       	mov    ecx,0x10
c000468a:	ba c0 5e 02 c0       	mov    edx,0xc0025ec0
c000468f:	89 d8                	mov    eax,ebx
c0004691:	e8 ec d3 ff ff       	call   c0001a82 <mem_cpy>
c0004696:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000469a:	8d 43 58             	lea    eax,[ebx+0x58]
c000469d:	f7 d2                	not    edx
c000469f:	e8 d5 d3 ff ff       	call   c0001a79 <st_dword>
c00046a4:	8d 43 18             	lea    eax,[ebx+0x18]
c00046a7:	31 c9                	xor    ecx,ecx
c00046a9:	89 04 24             	mov    DWORD PTR [esp],eax
c00046ac:	ba 01 00 00 00       	mov    edx,0x1
c00046b1:	e8 c6 d3 ff ff       	call   c0001a7c <st_qword>
c00046b6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00046ba:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00046be:	83 c2 ff             	add    edx,0xffffffff
c00046c1:	89 e8                	mov    eax,ebp
c00046c3:	83 d1 ff             	adc    ecx,0xffffffff
c00046c6:	e8 b1 d3 ff ff       	call   c0001a7c <st_qword>
c00046cb:	31 c9                	xor    ecx,ecx
c00046cd:	8d 43 28             	lea    eax,[ebx+0x28]
c00046d0:	ba 22 00 00 00       	mov    edx,0x22
c00046d5:	e8 a2 d3 ff ff       	call   c0001a7c <st_qword>
c00046da:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00046de:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00046e2:	83 c2 de             	add    edx,0xffffffde
c00046e5:	8d 43 30             	lea    eax,[ebx+0x30]
c00046e8:	83 d1 ff             	adc    ecx,0xffffffff
c00046eb:	31 f6                	xor    esi,esi
c00046ed:	e8 8a d3 ff ff       	call   c0001a7c <st_qword>
c00046f2:	8d 43 54             	lea    eax,[ebx+0x54]
c00046f5:	ba 80 00 00 00       	mov    edx,0x80
c00046fa:	e8 7a d3 ff ff       	call   c0001a79 <st_dword>
c00046ff:	8d 43 50             	lea    eax,[ebx+0x50]
c0004702:	ba 80 00 00 00       	mov    edx,0x80
c0004707:	e8 6d d3 ff ff       	call   c0001a79 <st_dword>
c000470c:	ba 02 00 00 00       	mov    edx,0x2
c0004711:	89 f8                	mov    eax,edi
c0004713:	e8 61 d3 ff ff       	call   c0001a79 <st_dword>
c0004718:	8d 53 38             	lea    edx,[ebx+0x38]
c000471b:	b9 10 00 00 00       	mov    ecx,0x10
c0004720:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004724:	e8 ad d9 ff ff       	call   c00020d6 <make_rand>
c0004729:	83 c8 ff             	or     eax,0xffffffff
c000472c:	46                   	inc    esi
c000472d:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004732:	e8 fb d8 ff ff       	call   c0002032 <crc32>
c0004737:	83 fe 5c             	cmp    esi,0x5c
c000473a:	75 f0                	jne    c000472c <create_partition+0x359>
c000473c:	f7 d0                	not    eax
c000473e:	8d 73 10             	lea    esi,[ebx+0x10]
c0004741:	89 c2                	mov    edx,eax
c0004743:	89 f0                	mov    eax,esi
c0004745:	e8 2f d3 ff ff       	call   c0001a79 <st_dword>
c000474a:	83 ec 0c             	sub    esp,0xc
c000474d:	6a 01                	push   0x1
c000474f:	6a 00                	push   0x0
c0004751:	6a 01                	push   0x1
c0004753:	53                   	push   ebx
c0004754:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004758:	e8 71 d2 ff ff       	call   c00019ce <disk_write>
c000475d:	83 c4 20             	add    esp,0x20
c0004760:	85 c0                	test   eax,eax
c0004762:	0f 85 9c fc ff ff    	jne    c0004404 <create_partition+0x31>
c0004768:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000476c:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004770:	83 c2 ff             	add    edx,0xffffffff
c0004773:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004776:	83 d1 ff             	adc    ecx,0xffffffff
c0004779:	e8 fe d2 ff ff       	call   c0001a7c <st_qword>
c000477e:	ba 01 00 00 00       	mov    edx,0x1
c0004783:	31 c9                	xor    ecx,ecx
c0004785:	89 e8                	mov    eax,ebp
c0004787:	e8 f0 d2 ff ff       	call   c0001a7c <st_qword>
c000478c:	89 f8                	mov    eax,edi
c000478e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0004792:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004796:	31 ff                	xor    edi,edi
c0004798:	e8 df d2 ff ff       	call   c0001a7c <st_qword>
c000479d:	89 f0                	mov    eax,esi
c000479f:	31 d2                	xor    edx,edx
c00047a1:	e8 d3 d2 ff ff       	call   c0001a79 <st_dword>
c00047a6:	83 c8 ff             	or     eax,0xffffffff
c00047a9:	47                   	inc    edi
c00047aa:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00047af:	e8 7e d8 ff ff       	call   c0002032 <crc32>
c00047b4:	83 ff 5c             	cmp    edi,0x5c
c00047b7:	75 f0                	jne    c00047a9 <create_partition+0x3d6>
c00047b9:	f7 d0                	not    eax
c00047bb:	89 c2                	mov    edx,eax
c00047bd:	89 f0                	mov    eax,esi
c00047bf:	e8 b5 d2 ff ff       	call   c0001a79 <st_dword>
c00047c4:	83 ec 0c             	sub    esp,0xc
c00047c7:	6a 01                	push   0x1
c00047c9:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00047cd:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00047d1:	83 c0 ff             	add    eax,0xffffffff
c00047d4:	83 d2 ff             	adc    edx,0xffffffff
c00047d7:	52                   	push   edx
c00047d8:	50                   	push   eax
c00047d9:	53                   	push   ebx
c00047da:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00047de:	e8 eb d1 ff ff       	call   c00019ce <disk_write>
c00047e3:	83 c4 20             	add    esp,0x20
c00047e6:	85 c0                	test   eax,eax
c00047e8:	0f 85 16 fc ff ff    	jne    c0004404 <create_partition+0x31>
c00047ee:	31 d2                	xor    edx,edx
c00047f0:	89 d8                	mov    eax,ebx
c00047f2:	b9 00 02 00 00       	mov    ecx,0x200
c00047f7:	e8 9b d2 ff ff       	call   c0001a97 <mem_set>
c00047fc:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004802:	b9 10 00 00 00       	mov    ecx,0x10
c0004807:	ba d0 5e 02 c0       	mov    edx,0xc0025ed0
c000480c:	e8 71 d2 ff ff       	call   c0001a82 <mem_cpy>
c0004811:	e9 21 01 00 00       	jmp    c0004937 <create_partition+0x564>
c0004816:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000481a:	b9 05 00 00 00       	mov    ecx,0x5
c000481f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004822:	bf 08 00 00 00       	mov    edi,0x8
c0004827:	89 f8                	mov    eax,edi
c0004829:	31 d2                	xor    edx,edx
c000482b:	0f b6 f0             	movzx  esi,al
c000482e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004831:	f7 f6                	div    esi
c0004833:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004838:	76 0a                	jbe    c0004844 <create_partition+0x471>
c000483a:	d1 e7                	shl    edi,1
c000483c:	49                   	dec    ecx
c000483d:	75 e8                	jne    c0004827 <create_partition+0x454>
c000483f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004844:	b9 00 02 00 00       	mov    ecx,0x200
c0004849:	31 d2                	xor    edx,edx
c000484b:	89 d8                	mov    eax,ebx
c000484d:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004853:	e8 3f d2 ff ff       	call   c0001a97 <mem_set>
c0004858:	b9 64 00 00 00       	mov    ecx,0x64
c000485d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004860:	31 d2                	xor    edx,edx
c0004862:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000486a:	f7 f1                	div    ecx
c000486c:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004871:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004875:	89 f8                	mov    eax,edi
c0004877:	0f b6 c0             	movzx  eax,al
c000487a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000487e:	e9 80 00 00 00       	jmp    c0004903 <create_partition+0x530>
c0004883:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004886:	29 cf                	sub    edi,ecx
c0004888:	89 ca                	mov    edx,ecx
c000488a:	89 f0                	mov    eax,esi
c000488c:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004891:	e8 e3 d1 ff ff       	call   c0001a79 <st_dword>
c0004896:	8d 46 04             	lea    eax,[esi+0x4]
c0004899:	89 fa                	mov    edx,edi
c000489b:	83 c6 10             	add    esi,0x10
c000489e:	e8 d6 d1 ff ff       	call   c0001a79 <st_dword>
c00048a3:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00048a7:	31 d2                	xor    edx,edx
c00048a9:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c00048ac:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c00048b0:	89 c8                	mov    eax,ecx
c00048b2:	01 f9                	add    ecx,edi
c00048b4:	f7 f5                	div    ebp
c00048b6:	89 d5                	mov    ebp,edx
c00048b8:	31 d2                	xor    edx,edx
c00048ba:	45                   	inc    ebp
c00048bb:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c00048bf:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c00048c2:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c00048c5:	89 c2                	mov    edx,eax
c00048c7:	8d 41 ff             	lea    eax,[ecx-0x1]
c00048ca:	c1 ea 02             	shr    edx,0x2
c00048cd:	83 e2 c0             	and    edx,0xffffffc0
c00048d0:	09 ea                	or     edx,ebp
c00048d2:	bd 3f 00 00 00       	mov    ebp,0x3f
c00048d7:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c00048da:	31 d2                	xor    edx,edx
c00048dc:	f7 f5                	div    ebp
c00048de:	89 d7                	mov    edi,edx
c00048e0:	31 d2                	xor    edx,edx
c00048e2:	47                   	inc    edi
c00048e3:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c00048e7:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c00048ea:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c00048ed:	89 c5                	mov    ebp,eax
c00048ef:	c1 ed 02             	shr    ebp,0x2
c00048f2:	83 e5 c0             	and    ebp,0xffffffc0
c00048f5:	09 ef                	or     edi,ebp
c00048f7:	89 fa                	mov    edx,edi
c00048f9:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c00048fc:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004901:	74 34                	je     c0004937 <create_partition+0x564>
c0004903:	85 c9                	test   ecx,ecx
c0004905:	74 30                	je     c0004937 <create_partition+0x564>
c0004907:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000490a:	76 2b                	jbe    c0004937 <create_partition+0x564>
c000490c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004910:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004914:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004917:	83 ff 64             	cmp    edi,0x64
c000491a:	76 4b                	jbe    c0004967 <create_partition+0x594>
c000491c:	89 f8                	mov    eax,edi
c000491e:	01 c8                	add    eax,ecx
c0004920:	0f 82 5d ff ff ff    	jb     c0004883 <create_partition+0x4b0>
c0004926:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004929:	0f 87 54 ff ff ff    	ja     c0004883 <create_partition+0x4b0>
c000492f:	85 ff                	test   edi,edi
c0004931:	0f 85 51 ff ff ff    	jne    c0004888 <create_partition+0x4b5>
c0004937:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000493d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004942:	e8 2e d1 ff ff       	call   c0001a75 <st_word>
c0004947:	83 ec 0c             	sub    esp,0xc
c000494a:	6a 01                	push   0x1
c000494c:	6a 00                	push   0x0
c000494e:	6a 00                	push   0x0
c0004950:	53                   	push   ebx
c0004951:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004955:	e8 74 d0 ff ff       	call   c00019ce <disk_write>
c000495a:	83 c4 20             	add    esp,0x20
c000495d:	85 c0                	test   eax,eax
c000495f:	0f 95 c0             	setne  al
c0004962:	0f b6 c0             	movzx  eax,al
c0004965:	eb 0e                	jmp    c0004975 <create_partition+0x5a2>
c0004967:	74 07                	je     c0004970 <create_partition+0x59d>
c0004969:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c000496e:	eb ac                	jmp    c000491c <create_partition+0x549>
c0004970:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004973:	eb a7                	jmp    c000491c <create_partition+0x549>
c0004975:	83 c4 5c             	add    esp,0x5c
c0004978:	5b                   	pop    ebx
c0004979:	5e                   	pop    esi
c000497a:	5f                   	pop    edi
c000497b:	5d                   	pop    ebp
c000497c:	c3                   	ret    

c000497d <get_fileinfo>:
c000497d:	55                   	push   ebp
c000497e:	57                   	push   edi
c000497f:	56                   	push   esi
c0004980:	53                   	push   ebx
c0004981:	83 ec 1c             	sub    esp,0x1c
c0004984:	8b 30                	mov    esi,DWORD PTR [eax]
c0004986:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c000498a:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000498e:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004991:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004994:	0f 84 dc 01 00 00    	je     c0004b76 <get_fileinfo+0x1f9>
c000499a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000499d:	75 0f                	jne    c00049ae <get_fileinfo+0x31>
c000499f:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00049a2:	83 c4 1c             	add    esp,0x1c
c00049a5:	5b                   	pop    ebx
c00049a6:	5e                   	pop    esi
c00049a7:	5f                   	pop    edi
c00049a8:	5d                   	pop    ebp
c00049a9:	e9 58 d5 ff ff       	jmp    c0001f06 <get_xfileinfo>
c00049ae:	89 d3                	mov    ebx,edx
c00049b0:	89 c6                	mov    esi,eax
c00049b2:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c00049b6:	74 6a                	je     c0004a22 <get_fileinfo+0xa5>
c00049b8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00049c0:	31 ed                	xor    ebp,ebp
c00049c2:	31 ff                	xor    edi,edi
c00049c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00049c8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049cc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00049cf:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c00049d3:	66 85 d2             	test   dx,dx
c00049d6:	74 3e                	je     c0004a16 <get_fileinfo+0x99>
c00049d8:	66 85 ed             	test   bp,bp
c00049db:	75 0c                	jne    c00049e9 <get_fileinfo+0x6c>
c00049dd:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c00049e3:	66 3d ff 07          	cmp    ax,0x7ff
c00049e7:	76 22                	jbe    c0004a0b <get_fileinfo+0x8e>
c00049e9:	b9 ff 00 00 00       	mov    ecx,0xff
c00049ee:	89 e8                	mov    eax,ebp
c00049f0:	29 f9                	sub    ecx,edi
c00049f2:	c1 e0 10             	shl    eax,0x10
c00049f5:	09 d0                	or     eax,edx
c00049f7:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00049fb:	e8 a3 d1 ff ff       	call   c0001ba3 <put_utf>
c0004a00:	84 c0                	test   al,al
c0004a02:	74 10                	je     c0004a14 <get_fileinfo+0x97>
c0004a04:	0f b6 c0             	movzx  eax,al
c0004a07:	31 d2                	xor    edx,edx
c0004a09:	01 c7                	add    edi,eax
c0004a0b:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004a10:	89 d5                	mov    ebp,edx
c0004a12:	eb b0                	jmp    c00049c4 <get_fileinfo+0x47>
c0004a14:	31 ff                	xor    edi,edi
c0004a16:	66 85 ed             	test   bp,bp
c0004a19:	74 02                	je     c0004a1d <get_fileinfo+0xa0>
c0004a1b:	31 ff                	xor    edi,edi
c0004a1d:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004a22:	31 ff                	xor    edi,edi
c0004a24:	31 c9                	xor    ecx,ecx
c0004a26:	83 f9 0a             	cmp    ecx,0xa
c0004a29:	0f 87 ad 00 00 00    	ja     c0004adc <get_fileinfo+0x15f>
c0004a2f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a32:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004a35:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004a39:	66 83 fa 20          	cmp    dx,0x20
c0004a3d:	0f 84 92 00 00 00    	je     c0004ad5 <get_fileinfo+0x158>
c0004a43:	66 83 fa 05          	cmp    dx,0x5
c0004a47:	75 05                	jne    c0004a4e <get_fileinfo+0xd1>
c0004a49:	ba e5 00 00 00       	mov    edx,0xe5
c0004a4e:	83 ff 0b             	cmp    edi,0xb
c0004a51:	77 0b                	ja     c0004a5e <get_fileinfo+0xe1>
c0004a53:	83 fd 09             	cmp    ebp,0x9
c0004a56:	75 06                	jne    c0004a5e <get_fileinfo+0xe1>
c0004a58:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004a5d:	47                   	inc    edi
c0004a5e:	0f b7 c2             	movzx  eax,dx
c0004a61:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a65:	e8 6d d0 ff ff       	call   c0001ad7 <dbc_1st>
c0004a6a:	85 c0                	test   eax,eax
c0004a6c:	74 2f                	je     c0004a9d <get_fileinfo+0x120>
c0004a6e:	83 fd 08             	cmp    ebp,0x8
c0004a71:	74 2a                	je     c0004a9d <get_fileinfo+0x120>
c0004a73:	83 fd 0b             	cmp    ebp,0xb
c0004a76:	74 25                	je     c0004a9d <get_fileinfo+0x120>
c0004a78:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a7b:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004a7f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004a83:	e8 52 d0 ff ff       	call   c0001ada <dbc_2nd>
c0004a88:	85 c0                	test   eax,eax
c0004a8a:	74 11                	je     c0004a9d <get_fileinfo+0x120>
c0004a8c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a90:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004a95:	c1 e2 08             	shl    edx,0x8
c0004a98:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004a9b:	09 c2                	or     edx,eax
c0004a9d:	0f b7 d2             	movzx  edx,dx
c0004aa0:	50                   	push   eax
c0004aa1:	50                   	push   eax
c0004aa2:	68 b5 01 00 00       	push   0x1b5
c0004aa7:	52                   	push   edx
c0004aa8:	e8 46 38 00 00       	call   c00082f3 <ff_oem2uni>
c0004aad:	83 c4 10             	add    esp,0x10
c0004ab0:	66 85 c0             	test   ax,ax
c0004ab3:	75 04                	jne    c0004ab9 <get_fileinfo+0x13c>
c0004ab5:	31 ff                	xor    edi,edi
c0004ab7:	eb 23                	jmp    c0004adc <get_fileinfo+0x15f>
c0004ab9:	b9 0c 00 00 00       	mov    ecx,0xc
c0004abe:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ac2:	29 f9                	sub    ecx,edi
c0004ac4:	0f b7 c0             	movzx  eax,ax
c0004ac7:	e8 d7 d0 ff ff       	call   c0001ba3 <put_utf>
c0004acc:	84 c0                	test   al,al
c0004ace:	74 e5                	je     c0004ab5 <get_fileinfo+0x138>
c0004ad0:	0f b6 c0             	movzx  eax,al
c0004ad3:	01 c7                	add    edi,eax
c0004ad5:	89 e9                	mov    ecx,ebp
c0004ad7:	e9 4a ff ff ff       	jmp    c0004a26 <get_fileinfo+0xa9>
c0004adc:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004ae1:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004ae5:	75 54                	jne    c0004b3b <get_fileinfo+0x1be>
c0004ae7:	85 ff                	test   edi,edi
c0004ae9:	75 0b                	jne    c0004af6 <get_fileinfo+0x179>
c0004aeb:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004aef:	ba 01 00 00 00       	mov    edx,0x1
c0004af4:	eb 33                	jmp    c0004b29 <get_fileinfo+0x1ac>
c0004af6:	b1 08                	mov    cl,0x8
c0004af8:	31 d2                	xor    edx,edx
c0004afa:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004b00:	84 c0                	test   al,al
c0004b02:	74 25                	je     c0004b29 <get_fileinfo+0x1ac>
c0004b04:	66 83 f8 2e          	cmp    ax,0x2e
c0004b08:	74 16                	je     c0004b20 <get_fileinfo+0x1a3>
c0004b0a:	8d 78 bf             	lea    edi,[eax-0x41]
c0004b0d:	66 83 ff 19          	cmp    di,0x19
c0004b11:	77 0f                	ja     c0004b22 <get_fileinfo+0x1a5>
c0004b13:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004b16:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004b19:	74 07                	je     c0004b22 <get_fileinfo+0x1a5>
c0004b1b:	83 c0 20             	add    eax,0x20
c0004b1e:	eb 02                	jmp    c0004b22 <get_fileinfo+0x1a5>
c0004b20:	b1 10                	mov    cl,0x10
c0004b22:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004b26:	42                   	inc    edx
c0004b27:	eb d1                	jmp    c0004afa <get_fileinfo+0x17d>
c0004b29:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004b2e:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b31:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004b35:	75 04                	jne    c0004b3b <get_fileinfo+0x1be>
c0004b37:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004b3b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b3e:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004b41:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004b44:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b47:	83 c0 1c             	add    eax,0x1c
c0004b4a:	e8 c1 ce ff ff       	call   c0001a10 <ld_dword>
c0004b4f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004b56:	89 03                	mov    DWORD PTR [ebx],eax
c0004b58:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b5b:	83 c0 16             	add    eax,0x16
c0004b5e:	e8 a0 ce ff ff       	call   c0001a03 <ld_word>
c0004b63:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004b67:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b6a:	83 c0 18             	add    eax,0x18
c0004b6d:	e8 91 ce ff ff       	call   c0001a03 <ld_word>
c0004b72:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004b76:	83 c4 1c             	add    esp,0x1c
c0004b79:	5b                   	pop    ebx
c0004b7a:	5e                   	pop    esi
c0004b7b:	5f                   	pop    edi
c0004b7c:	5d                   	pop    ebp
c0004b7d:	c3                   	ret    

c0004b7e <ld_clust.isra.0>:
c0004b7e:	56                   	push   esi
c0004b7f:	89 c6                	mov    esi,eax
c0004b81:	53                   	push   ebx
c0004b82:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004b85:	89 d3                	mov    ebx,edx
c0004b87:	e8 77 ce ff ff       	call   c0001a03 <ld_word>
c0004b8c:	0f b7 c8             	movzx  ecx,ax
c0004b8f:	89 f0                	mov    eax,esi
c0004b91:	3c 03                	cmp    al,0x3
c0004b93:	75 0d                	jne    c0004ba2 <ld_clust.isra.0+0x24>
c0004b95:	8d 43 14             	lea    eax,[ebx+0x14]
c0004b98:	e8 66 ce ff ff       	call   c0001a03 <ld_word>
c0004b9d:	c1 e0 10             	shl    eax,0x10
c0004ba0:	09 c1                	or     ecx,eax
c0004ba2:	89 c8                	mov    eax,ecx
c0004ba4:	5b                   	pop    ebx
c0004ba5:	5e                   	pop    esi
c0004ba6:	c3                   	ret    

c0004ba7 <st_clust.isra.1>:
c0004ba7:	56                   	push   esi
c0004ba8:	89 c6                	mov    esi,eax
c0004baa:	53                   	push   ebx
c0004bab:	89 d3                	mov    ebx,edx
c0004bad:	0f b7 d1             	movzx  edx,cx
c0004bb0:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004bb3:	e8 bd ce ff ff       	call   c0001a75 <st_word>
c0004bb8:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004bbb:	75 0f                	jne    c0004bcc <st_clust.isra.1+0x25>
c0004bbd:	c1 e9 10             	shr    ecx,0x10
c0004bc0:	8d 43 14             	lea    eax,[ebx+0x14]
c0004bc3:	89 ca                	mov    edx,ecx
c0004bc5:	5b                   	pop    ebx
c0004bc6:	5e                   	pop    esi
c0004bc7:	e9 a9 ce ff ff       	jmp    c0001a75 <st_word>
c0004bcc:	5b                   	pop    ebx
c0004bcd:	5e                   	pop    esi
c0004bce:	c3                   	ret    

c0004bcf <init_alloc_info.isra.2>:
c0004bcf:	56                   	push   esi
c0004bd0:	53                   	push   ebx
c0004bd1:	89 c6                	mov    esi,eax
c0004bd3:	89 d3                	mov    ebx,edx
c0004bd5:	51                   	push   ecx
c0004bd6:	8b 00                	mov    eax,DWORD PTR [eax]
c0004bd8:	83 c0 34             	add    eax,0x34
c0004bdb:	e8 30 ce ff ff       	call   c0001a10 <ld_dword>
c0004be0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004be3:	8b 06                	mov    eax,DWORD PTR [esi]
c0004be5:	83 c0 38             	add    eax,0x38
c0004be8:	e8 3b ce ff ff       	call   c0001a28 <ld_qword>
c0004bed:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004bf0:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004bf3:	8b 06                	mov    eax,DWORD PTR [esi]
c0004bf5:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004bf8:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004bff:	83 e0 02             	and    eax,0x2
c0004c02:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004c05:	5b                   	pop    ebx
c0004c06:	5b                   	pop    ebx
c0004c07:	5e                   	pop    esi
c0004c08:	c3                   	ret    

c0004c09 <follow_path>:
c0004c09:	56                   	push   esi
c0004c0a:	53                   	push   ebx
c0004c0b:	89 c3                	mov    ebx,eax
c0004c0d:	83 ec 14             	sub    esp,0x14
c0004c10:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004c14:	8b 30                	mov    esi,DWORD PTR [eax]
c0004c16:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c1a:	8a 10                	mov    dl,BYTE PTR [eax]
c0004c1c:	80 fa 5c             	cmp    dl,0x5c
c0004c1f:	75 07                	jne    c0004c28 <follow_path+0x1f>
c0004c21:	40                   	inc    eax
c0004c22:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c26:	eb ee                	jmp    c0004c16 <follow_path+0xd>
c0004c28:	80 fa 2f             	cmp    dl,0x2f
c0004c2b:	74 f4                	je     c0004c21 <follow_path+0x18>
c0004c2d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004c34:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c3b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004c3e:	77 52                	ja     c0004c92 <follow_path+0x89>
c0004c40:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004c44:	31 d2                	xor    edx,edx
c0004c46:	89 d8                	mov    eax,ebx
c0004c48:	e8 12 e3 ff ff       	call   c0002f5f <dir_sdi>
c0004c4d:	eb 7c                	jmp    c0004ccb <follow_path+0xc2>
c0004c4f:	89 d8                	mov    eax,ebx
c0004c51:	e8 6e f2 ff ff       	call   c0003ec4 <dir_find>
c0004c56:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004c59:	85 c0                	test   eax,eax
c0004c5b:	75 46                	jne    c0004ca3 <follow_path+0x9a>
c0004c5d:	80 e2 04             	and    dl,0x4
c0004c60:	75 69                	jne    c0004ccb <follow_path+0xc2>
c0004c62:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004c66:	74 5e                	je     c0004cc6 <follow_path+0xbd>
c0004c68:	8a 06                	mov    al,BYTE PTR [esi]
c0004c6a:	3c 04                	cmp    al,0x4
c0004c6c:	75 41                	jne    c0004caf <follow_path+0xa6>
c0004c6e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004c71:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004c75:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004c78:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004c7b:	30 c0                	xor    al,al
c0004c7d:	09 d0                	or     eax,edx
c0004c7f:	89 da                	mov    edx,ebx
c0004c81:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004c84:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004c87:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004c8a:	8d 46 10             	lea    eax,[esi+0x10]
c0004c8d:	e8 3d ff ff ff       	call   c0004bcf <init_alloc_info.isra.2>
c0004c92:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004c96:	89 d8                	mov    eax,ebx
c0004c98:	e8 a9 ed ff ff       	call   c0003a46 <create_name>
c0004c9d:	85 c0                	test   eax,eax
c0004c9f:	74 ae                	je     c0004c4f <follow_path+0x46>
c0004ca1:	eb 28                	jmp    c0004ccb <follow_path+0xc2>
c0004ca3:	83 f8 04             	cmp    eax,0x4
c0004ca6:	75 23                	jne    c0004ccb <follow_path+0xc2>
c0004ca8:	80 e2 04             	and    dl,0x4
c0004cab:	74 19                	je     c0004cc6 <follow_path+0xbd>
c0004cad:	eb 1c                	jmp    c0004ccb <follow_path+0xc2>
c0004caf:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004cb2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004cb8:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004cbc:	e8 bd fe ff ff       	call   c0004b7e <ld_clust.isra.0>
c0004cc1:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004cc4:	eb cc                	jmp    c0004c92 <follow_path+0x89>
c0004cc6:	b8 05 00 00 00       	mov    eax,0x5
c0004ccb:	83 c4 14             	add    esp,0x14
c0004cce:	5b                   	pop    ebx
c0004ccf:	5e                   	pop    esi
c0004cd0:	c3                   	ret    

c0004cd1 <f_mount>:
c0004cd1:	53                   	push   ebx
c0004cd2:	83 ec 18             	sub    esp,0x18
c0004cd5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004cd9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004cdd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ce1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004ce5:	e8 fb d2 ff ff       	call   c0001fe5 <get_ldnumber>
c0004cea:	89 c2                	mov    edx,eax
c0004cec:	b8 0b 00 00 00       	mov    eax,0xb
c0004cf1:	85 d2                	test   edx,edx
c0004cf3:	78 39                	js     c0004d2e <f_mount+0x5d>
c0004cf5:	8b 04 95 c0 a5 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5a40]
c0004cfc:	85 c0                	test   eax,eax
c0004cfe:	74 03                	je     c0004d03 <f_mount+0x32>
c0004d00:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d07:	85 c0                	test   eax,eax
c0004d09:	74 03                	je     c0004d0e <f_mount+0x3d>
c0004d0b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d12:	89 04 95 c0 a5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd5a40],eax
c0004d19:	31 c0                	xor    eax,eax
c0004d1b:	84 db                	test   bl,bl
c0004d1d:	74 0f                	je     c0004d2e <f_mount+0x5d>
c0004d1f:	31 c9                	xor    ecx,ecx
c0004d21:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d25:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d29:	e8 65 d7 ff ff       	call   c0002493 <mount_volume>
c0004d2e:	83 c4 18             	add    esp,0x18
c0004d31:	5b                   	pop    ebx
c0004d32:	c3                   	ret    

c0004d33 <f_open>:
c0004d33:	55                   	push   ebp
c0004d34:	bd 09 00 00 00       	mov    ebp,0x9
c0004d39:	57                   	push   edi
c0004d3a:	56                   	push   esi
c0004d3b:	53                   	push   ebx
c0004d3c:	83 ec 7c             	sub    esp,0x7c
c0004d3f:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004d46:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004d4d:	85 db                	test   ebx,ebx
c0004d4f:	0f 84 10 04 00 00    	je     c0005165 <f_open+0x432>
c0004d55:	89 fe                	mov    esi,edi
c0004d57:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d5b:	83 e6 3f             	and    esi,0x3f
c0004d5e:	89 f0                	mov    eax,esi
c0004d60:	0f b6 c8             	movzx  ecx,al
c0004d63:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004d6a:	e8 24 d7 ff ff       	call   c0002493 <mount_volume>
c0004d6f:	89 c5                	mov    ebp,eax
c0004d71:	85 c0                	test   eax,eax
c0004d73:	0f 85 e6 03 00 00    	jne    c000515f <f_open+0x42c>
c0004d79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d7d:	bd 11 00 00 00       	mov    ebp,0x11
c0004d82:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d86:	83 ec 0c             	sub    esp,0xc
c0004d89:	68 60 04 00 00       	push   0x460
c0004d8e:	e8 a3 34 00 00       	call   c0008236 <ff_memalloc>
c0004d93:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d97:	83 c4 10             	add    esp,0x10
c0004d9a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004d9f:	0f 84 c0 03 00 00    	je     c0005165 <f_open+0x432>
c0004da5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004da9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004dad:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004db3:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004db6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004db9:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004dc0:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004dc4:	e8 40 fe ff ff       	call   c0004c09 <follow_path>
c0004dc9:	89 c5                	mov    ebp,eax
c0004dcb:	85 c0                	test   eax,eax
c0004dcd:	75 0c                	jne    c0004ddb <f_open+0xa8>
c0004dcf:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004dd4:	79 05                	jns    c0004ddb <f_open+0xa8>
c0004dd6:	bd 06 00 00 00       	mov    ebp,0x6
c0004ddb:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004de1:	0f 84 84 01 00 00    	je     c0004f6b <f_open+0x238>
c0004de7:	85 ed                	test   ebp,ebp
c0004de9:	74 20                	je     c0004e0b <f_open+0xd8>
c0004deb:	83 fd 04             	cmp    ebp,0x4
c0004dee:	0f 85 58 03 00 00    	jne    c000514c <f_open+0x419>
c0004df4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004df8:	83 ce 08             	or     esi,0x8
c0004dfb:	e8 8a f2 ff ff       	call   c000408a <dir_register>
c0004e00:	89 c5                	mov    ebp,eax
c0004e02:	85 c0                	test   eax,eax
c0004e04:	74 2f                	je     c0004e35 <f_open+0x102>
c0004e06:	e9 41 03 00 00       	jmp    c000514c <f_open+0x419>
c0004e0b:	bd 07 00 00 00       	mov    ebp,0x7
c0004e10:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004e15:	0f 85 31 03 00 00    	jne    c000514c <f_open+0x419>
c0004e1b:	bd 08 00 00 00       	mov    ebp,0x8
c0004e20:	f7 c7 04 00 00 00    	test   edi,0x4
c0004e26:	0f 85 20 03 00 00    	jne    c000514c <f_open+0x419>
c0004e2c:	83 e7 08             	and    edi,0x8
c0004e2f:	0f 84 65 01 00 00    	je     c0004f9a <f_open+0x267>
c0004e35:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e39:	8a 02                	mov    al,BYTE PTR [edx]
c0004e3b:	3c 04                	cmp    al,0x4
c0004e3d:	0f 85 97 00 00 00    	jne    c0004eda <f_open+0x1a7>
c0004e43:	8d 42 10             	lea    eax,[edx+0x10]
c0004e46:	89 13                	mov    DWORD PTR [ebx],edx
c0004e48:	89 da                	mov    edx,ebx
c0004e4a:	e8 80 fd ff ff       	call   c0004bcf <init_alloc_info.isra.2>
c0004e4f:	31 d2                	xor    edx,edx
c0004e51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e55:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004e5a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e5d:	83 c0 02             	add    eax,0x2
c0004e60:	e8 32 cc ff ff       	call   c0001a97 <mem_set>
c0004e65:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004e6a:	31 d2                	xor    edx,edx
c0004e6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e70:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e73:	83 c0 26             	add    eax,0x26
c0004e76:	e8 1c cc ff ff       	call   c0001a97 <mem_set>
c0004e7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e7f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004e82:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004e86:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e8b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e8e:	83 c0 08             	add    eax,0x8
c0004e91:	e8 e3 cb ff ff       	call   c0001a79 <st_dword>
c0004e96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e9a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e9d:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ea1:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ea5:	e8 b7 ea ff ff       	call   c0003961 <store_xdir>
c0004eaa:	89 c5                	mov    ebp,eax
c0004eac:	85 c0                	test   eax,eax
c0004eae:	0f 85 98 02 00 00    	jne    c000514c <f_open+0x419>
c0004eb4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004eb7:	85 d2                	test   edx,edx
c0004eb9:	0f 84 db 00 00 00    	je     c0004f9a <f_open+0x267>
c0004ebf:	31 c9                	xor    ecx,ecx
c0004ec1:	89 d8                	mov    eax,ebx
c0004ec3:	e8 8e e3 ff ff       	call   c0003256 <remove_chain>
c0004ec8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004ecc:	89 c5                	mov    ebp,eax
c0004ece:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ed1:	48                   	dec    eax
c0004ed2:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004ed5:	e9 b8 00 00 00       	jmp    c0004f92 <f_open+0x25f>
c0004eda:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004ede:	89 ea                	mov    edx,ebp
c0004ee0:	e8 99 fc ff ff       	call   c0004b7e <ld_clust.isra.0>
c0004ee5:	ba 00 00 21 50       	mov    edx,0x50210000
c0004eea:	89 c7                	mov    edi,eax
c0004eec:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004eef:	e8 85 cb ff ff       	call   c0001a79 <st_dword>
c0004ef4:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004ef8:	31 c9                	xor    ecx,ecx
c0004efa:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004efe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f02:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f06:	e8 9c fc ff ff       	call   c0004ba7 <st_clust.isra.1>
c0004f0b:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f0f:	31 d2                	xor    edx,edx
c0004f11:	83 c0 1c             	add    eax,0x1c
c0004f14:	e8 60 cb ff ff       	call   c0001a79 <st_dword>
c0004f19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f1d:	85 ff                	test   edi,edi
c0004f1f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f23:	74 75                	je     c0004f9a <f_open+0x267>
c0004f25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f29:	31 c9                	xor    ecx,ecx
c0004f2b:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004f2e:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004f31:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004f35:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004f39:	89 fa                	mov    edx,edi
c0004f3b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f3f:	e8 12 e3 ff ff       	call   c0003256 <remove_chain>
c0004f44:	89 c5                	mov    ebp,eax
c0004f46:	85 c0                	test   eax,eax
c0004f48:	0f 85 fe 01 00 00    	jne    c000514c <f_open+0x419>
c0004f4e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004f52:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004f56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f5a:	4f                   	dec    edi
c0004f5b:	e8 81 d2 ff ff       	call   c00021e1 <move_window>
c0004f60:	89 c5                	mov    ebp,eax
c0004f62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f66:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004f69:	eb 27                	jmp    c0004f92 <f_open+0x25f>
c0004f6b:	85 ed                	test   ebp,ebp
c0004f6d:	0f 85 d9 01 00 00    	jne    c000514c <f_open+0x419>
c0004f73:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004f77:	bd 04 00 00 00       	mov    ebp,0x4
c0004f7c:	a8 10                	test   al,0x10
c0004f7e:	0f 85 c8 01 00 00    	jne    c000514c <f_open+0x419>
c0004f84:	83 e7 02             	and    edi,0x2
c0004f87:	74 11                	je     c0004f9a <f_open+0x267>
c0004f89:	bd 07 00 00 00       	mov    ebp,0x7
c0004f8e:	a8 01                	test   al,0x1
c0004f90:	eb 02                	jmp    c0004f94 <f_open+0x261>
c0004f92:	85 ed                	test   ebp,ebp
c0004f94:	0f 85 b2 01 00 00    	jne    c000514c <f_open+0x419>
c0004f9a:	f7 c6 08 00 00 00    	test   esi,0x8
c0004fa0:	74 03                	je     c0004fa5 <f_open+0x272>
c0004fa2:	83 ce 40             	or     esi,0x40
c0004fa5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004fa9:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004fac:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004faf:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004fb2:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004fb5:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0004fb9:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0004fbc:	8a 02                	mov    al,BYTE PTR [edx]
c0004fbe:	3c 04                	cmp    al,0x4
c0004fc0:	75 2a                	jne    c0004fec <f_open+0x2b9>
c0004fc2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004fc6:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0004fcb:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004fce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004fd2:	30 c0                	xor    al,al
c0004fd4:	09 c8                	or     eax,ecx
c0004fd6:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004fd9:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0004fdd:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004fe0:	8d 42 10             	lea    eax,[edx+0x10]
c0004fe3:	89 da                	mov    edx,ebx
c0004fe5:	e8 e5 fb ff ff       	call   c0004bcf <init_alloc_info.isra.2>
c0004fea:	eb 1c                	jmp    c0005008 <f_open+0x2d5>
c0004fec:	89 fa                	mov    edx,edi
c0004fee:	e8 8b fb ff ff       	call   c0004b7e <ld_clust.isra.0>
c0004ff3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004ff6:	8d 47 1c             	lea    eax,[edi+0x1c]
c0004ff9:	e8 12 ca ff ff       	call   c0001a10 <ld_dword>
c0004ffe:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005005:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005008:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000500c:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005013:	89 03                	mov    DWORD PTR [ebx],eax
c0005015:	31 d2                	xor    edx,edx
c0005017:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000501b:	b9 00 02 00 00       	mov    ecx,0x200
c0005020:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005024:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005028:	89 f0                	mov    eax,esi
c000502a:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005031:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005034:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000503b:	8d 43 50             	lea    eax,[ebx+0x50]
c000503e:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005045:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000504c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005050:	e8 42 ca ff ff       	call   c0001a97 <mem_set>
c0005055:	83 e6 20             	and    esi,0x20
c0005058:	75 07                	jne    c0005061 <f_open+0x32e>
c000505a:	31 ed                	xor    ebp,ebp
c000505c:	e9 eb 00 00 00       	jmp    c000514c <f_open+0x419>
c0005061:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005064:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005067:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000506b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000506f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005073:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005077:	74 e1                	je     c000505a <f_open+0x327>
c0005079:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000507d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005081:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005084:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005087:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000508b:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000508e:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c0005092:	31 ff                	xor    edi,edi
c0005094:	c1 e5 09             	shl    ebp,0x9
c0005097:	89 ee                	mov    esi,ebp
c0005099:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000509d:	89 f8                	mov    eax,edi
c000509f:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00050a3:	73 22                	jae    c00050c7 <f_open+0x394>
c00050a5:	89 d8                	mov    eax,ebx
c00050a7:	e8 bd dc ff ff       	call   c0002d69 <get_fat>
c00050ac:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00050b0:	89 c2                	mov    edx,eax
c00050b2:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00050b6:	83 f8 01             	cmp    eax,0x1
c00050b9:	76 10                	jbe    c00050cb <f_open+0x398>
c00050bb:	83 f8 ff             	cmp    eax,0xffffffff
c00050be:	75 d9                	jne    c0005099 <f_open+0x366>
c00050c0:	bd 01 00 00 00       	mov    ebp,0x1
c00050c5:	eb 09                	jmp    c00050d0 <f_open+0x39d>
c00050c7:	31 ed                	xor    ebp,ebp
c00050c9:	eb 05                	jmp    c00050d0 <f_open+0x39d>
c00050cb:	bd 02 00 00 00       	mov    ebp,0x2
c00050d0:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00050d3:	85 ed                	test   ebp,ebp
c00050d5:	75 75                	jne    c000514c <f_open+0x419>
c00050d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00050db:	25 ff 01 00 00       	and    eax,0x1ff
c00050e0:	0f 84 74 ff ff ff    	je     c000505a <f_open+0x327>
c00050e6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00050ea:	bd 02 00 00 00       	mov    ebp,0x2
c00050ef:	89 c8                	mov    eax,ecx
c00050f1:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00050f5:	e8 a2 cb ff ff       	call   c0001c9c <clst2sect>
c00050fa:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00050fe:	89 d7                	mov    edi,edx
c0005100:	09 c7                	or     edi,eax
c0005102:	74 48                	je     c000514c <f_open+0x419>
c0005104:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005108:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000510c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005114:	0f ac fe 09          	shrd   esi,edi,0x9
c0005118:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000511c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005120:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005123:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005127:	83 ec 0c             	sub    esp,0xc
c000512a:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000512d:	6a 01                	push   0x1
c000512f:	52                   	push   edx
c0005130:	50                   	push   eax
c0005131:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005135:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005139:	50                   	push   eax
c000513a:	e8 79 c8 ff ff       	call   c00019b8 <disk_read>
c000513f:	83 c4 20             	add    esp,0x20
c0005142:	85 c0                	test   eax,eax
c0005144:	0f 95 c0             	setne  al
c0005147:	0f b6 c0             	movzx  eax,al
c000514a:	89 c5                	mov    ebp,eax
c000514c:	83 ec 0c             	sub    esp,0xc
c000514f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005153:	e8 f4 30 00 00       	call   c000824c <ff_memfree>
c0005158:	83 c4 10             	add    esp,0x10
c000515b:	85 ed                	test   ebp,ebp
c000515d:	74 06                	je     c0005165 <f_open+0x432>
c000515f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005165:	83 c4 7c             	add    esp,0x7c
c0005168:	89 e8                	mov    eax,ebp
c000516a:	5b                   	pop    ebx
c000516b:	5e                   	pop    esi
c000516c:	5f                   	pop    edi
c000516d:	5d                   	pop    ebp
c000516e:	c3                   	ret    

c000516f <f_read>:
c000516f:	55                   	push   ebp
c0005170:	57                   	push   edi
c0005171:	56                   	push   esi
c0005172:	53                   	push   ebx
c0005173:	83 ec 2c             	sub    esp,0x2c
c0005176:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000517a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000517e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005184:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005188:	89 d8                	mov    eax,ebx
c000518a:	e8 77 cf ff ff       	call   c0002106 <validate>
c000518f:	89 c5                	mov    ebp,eax
c0005191:	85 c0                	test   eax,eax
c0005193:	0f 85 4c 02 00 00    	jne    c00053e5 <f_read+0x276>
c0005199:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000519d:	85 ed                	test   ebp,ebp
c000519f:	0f 85 40 02 00 00    	jne    c00053e5 <f_read+0x276>
c00051a5:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00051a9:	0f 84 31 02 00 00    	je     c00053e0 <f_read+0x271>
c00051af:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051b2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051b5:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00051b8:	bf 00 00 00 00       	mov    edi,0x0
c00051bd:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00051c0:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00051c4:	89 d1                	mov    ecx,edx
c00051c6:	19 f9                	sbb    ecx,edi
c00051c8:	0f 83 cf 00 00 00    	jae    c000529d <f_read+0x12e>
c00051ce:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00051d2:	e9 c6 00 00 00       	jmp    c000529d <f_read+0x12e>
c00051d7:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00051da:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00051dd:	89 d0                	mov    eax,edx
c00051df:	25 ff 01 00 00       	and    eax,0x1ff
c00051e4:	0f 85 c9 01 00 00    	jne    c00053b3 <f_read+0x244>
c00051ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051ee:	89 d6                	mov    esi,edx
c00051f0:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00051f4:	89 cf                	mov    edi,ecx
c00051f6:	48                   	dec    eax
c00051f7:	0f ac fe 09          	shrd   esi,edi,0x9
c00051fb:	21 f0                	and    eax,esi
c00051fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005201:	0f 84 a6 00 00 00    	je     c00052ad <f_read+0x13e>
c0005207:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000520b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000520e:	89 c8                	mov    eax,ecx
c0005210:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005213:	e8 84 ca ff ff       	call   c0001c9c <clst2sect>
c0005218:	89 d7                	mov    edi,edx
c000521a:	09 c7                	or     edi,eax
c000521c:	0f 84 b4 00 00 00    	je     c00052d6 <f_read+0x167>
c0005222:	31 ff                	xor    edi,edi
c0005224:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005228:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000522b:	01 c6                	add    esi,eax
c000522d:	11 d7                	adc    edi,edx
c000522f:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005237:	0f 86 fd 00 00 00    	jbe    c000533a <f_read+0x1cb>
c000523d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005241:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005245:	c1 e8 09             	shr    eax,0x9
c0005248:	89 04 24             	mov    DWORD PTR [esp],eax
c000524b:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000524f:	03 14 24             	add    edx,DWORD PTR [esp]
c0005252:	39 c2                	cmp    edx,eax
c0005254:	76 07                	jbe    c000525d <f_read+0xee>
c0005256:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000525a:	89 04 24             	mov    DWORD PTR [esp],eax
c000525d:	83 ec 0c             	sub    esp,0xc
c0005260:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005264:	57                   	push   edi
c0005265:	56                   	push   esi
c0005266:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000526a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000526e:	50                   	push   eax
c000526f:	e8 44 c7 ff ff       	call   c00019b8 <disk_read>
c0005274:	83 c4 20             	add    esp,0x20
c0005277:	85 c0                	test   eax,eax
c0005279:	75 6e                	jne    c00052e9 <f_read+0x17a>
c000527b:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000527f:	78 7e                	js     c00052ff <f_read+0x190>
c0005281:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005284:	c1 e6 09             	shl    esi,0x9
c0005287:	31 ff                	xor    edi,edi
c0005289:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000528d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005291:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005295:	01 30                	add    DWORD PTR [eax],esi
c0005297:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c000529a:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c000529d:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00052a2:	0f 85 2f ff ff ff    	jne    c00051d7 <f_read+0x68>
c00052a8:	e9 38 01 00 00       	jmp    c00053e5 <f_read+0x276>
c00052ad:	89 c8                	mov    eax,ecx
c00052af:	09 d0                	or     eax,edx
c00052b1:	75 05                	jne    c00052b8 <f_read+0x149>
c00052b3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00052b6:	eb 19                	jmp    c00052d1 <f_read+0x162>
c00052b8:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00052bc:	74 09                	je     c00052c7 <f_read+0x158>
c00052be:	89 d8                	mov    eax,ebx
c00052c0:	e8 f8 c9 ff ff       	call   c0001cbd <clmt_clust>
c00052c5:	eb 0a                	jmp    c00052d1 <f_read+0x162>
c00052c7:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00052ca:	89 d8                	mov    eax,ebx
c00052cc:	e8 98 da ff ff       	call   c0002d69 <get_fat>
c00052d1:	83 f8 01             	cmp    eax,0x1
c00052d4:	77 0e                	ja     c00052e4 <f_read+0x175>
c00052d6:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00052da:	bd 02 00 00 00       	mov    ebp,0x2
c00052df:	e9 01 01 00 00       	jmp    c00053e5 <f_read+0x276>
c00052e4:	83 f8 ff             	cmp    eax,0xffffffff
c00052e7:	75 0e                	jne    c00052f7 <f_read+0x188>
c00052e9:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00052ed:	bd 01 00 00 00       	mov    ebp,0x1
c00052f2:	e9 ee 00 00 00       	jmp    c00053e5 <f_read+0x276>
c00052f7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00052fa:	e9 08 ff ff ff       	jmp    c0005207 <f_read+0x98>
c00052ff:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005302:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005305:	29 f0                	sub    eax,esi
c0005307:	19 fa                	sbb    edx,edi
c0005309:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000530c:	89 d7                	mov    edi,edx
c000530e:	ba 00 00 00 00       	mov    edx,0x0
c0005313:	89 f9                	mov    ecx,edi
c0005315:	19 d1                	sbb    ecx,edx
c0005317:	0f 83 64 ff ff ff    	jae    c0005281 <f_read+0x112>
c000531d:	89 c7                	mov    edi,eax
c000531f:	8d 53 50             	lea    edx,[ebx+0x50]
c0005322:	c1 e7 09             	shl    edi,0x9
c0005325:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005329:	b9 00 02 00 00       	mov    ecx,0x200
c000532e:	01 f8                	add    eax,edi
c0005330:	e8 4d c7 ff ff       	call   c0001a82 <mem_cpy>
c0005335:	e9 47 ff ff ff       	jmp    c0005281 <f_read+0x112>
c000533a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000533d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005340:	89 04 24             	mov    DWORD PTR [esp],eax
c0005343:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005347:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000534b:	75 05                	jne    c0005352 <f_read+0x1e3>
c000534d:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005350:	74 5b                	je     c00053ad <f_read+0x23e>
c0005352:	8d 43 50             	lea    eax,[ebx+0x50]
c0005355:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005359:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000535d:	79 2a                	jns    c0005389 <f_read+0x21a>
c000535f:	83 ec 0c             	sub    esp,0xc
c0005362:	6a 01                	push   0x1
c0005364:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005368:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000536c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005370:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005374:	50                   	push   eax
c0005375:	e8 54 c6 ff ff       	call   c00019ce <disk_write>
c000537a:	83 c4 20             	add    esp,0x20
c000537d:	85 c0                	test   eax,eax
c000537f:	0f 85 64 ff ff ff    	jne    c00052e9 <f_read+0x17a>
c0005385:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005389:	83 ec 0c             	sub    esp,0xc
c000538c:	6a 01                	push   0x1
c000538e:	57                   	push   edi
c000538f:	56                   	push   esi
c0005390:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005394:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005398:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000539c:	50                   	push   eax
c000539d:	e8 16 c6 ff ff       	call   c00019b8 <disk_read>
c00053a2:	83 c4 20             	add    esp,0x20
c00053a5:	85 c0                	test   eax,eax
c00053a7:	0f 85 3c ff ff ff    	jne    c00052e9 <f_read+0x17a>
c00053ad:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00053b0:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00053b3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053b6:	ba 00 02 00 00       	mov    edx,0x200
c00053bb:	25 ff 01 00 00       	and    eax,0x1ff
c00053c0:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00053c4:	29 c2                	sub    edx,eax
c00053c6:	39 d6                	cmp    esi,edx
c00053c8:	76 02                	jbe    c00053cc <f_read+0x25d>
c00053ca:	89 d6                	mov    esi,edx
c00053cc:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00053d0:	89 f1                	mov    ecx,esi
c00053d2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053d6:	e8 a7 c6 ff ff       	call   c0001a82 <mem_cpy>
c00053db:	e9 a7 fe ff ff       	jmp    c0005287 <f_read+0x118>
c00053e0:	bd 07 00 00 00       	mov    ebp,0x7
c00053e5:	83 c4 2c             	add    esp,0x2c
c00053e8:	89 e8                	mov    eax,ebp
c00053ea:	5b                   	pop    ebx
c00053eb:	5e                   	pop    esi
c00053ec:	5f                   	pop    edi
c00053ed:	5d                   	pop    ebp
c00053ee:	c3                   	ret    

c00053ef <f_write>:
c00053ef:	55                   	push   ebp
c00053f0:	57                   	push   edi
c00053f1:	56                   	push   esi
c00053f2:	53                   	push   ebx
c00053f3:	83 ec 2c             	sub    esp,0x2c
c00053f6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053fa:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053fe:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005404:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005408:	89 d8                	mov    eax,ebx
c000540a:	e8 f7 cc ff ff       	call   c0002106 <validate>
c000540f:	89 c5                	mov    ebp,eax
c0005411:	85 c0                	test   eax,eax
c0005413:	0f 85 86 02 00 00    	jne    c000569f <f_write+0x2b0>
c0005419:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000541d:	85 ed                	test   ebp,ebp
c000541f:	0f 85 7a 02 00 00    	jne    c000569f <f_write+0x2b0>
c0005425:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005429:	0f 84 6b 02 00 00    	je     c000569a <f_write+0x2ab>
c000542f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005433:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005436:	0f 84 43 01 00 00    	je     c000557f <f_write+0x190>
c000543c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000543f:	89 c1                	mov    ecx,eax
c0005441:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005445:	0f 83 34 01 00 00    	jae    c000557f <f_write+0x190>
c000544b:	f7 d0                	not    eax
c000544d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005451:	e9 29 01 00 00       	jmp    c000557f <f_write+0x190>
c0005456:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005459:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000545c:	89 d0                	mov    eax,edx
c000545e:	25 ff 01 00 00       	and    eax,0x1ff
c0005463:	0f 85 00 02 00 00    	jne    c0005669 <f_write+0x27a>
c0005469:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000546d:	89 d6                	mov    esi,edx
c000546f:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005473:	89 cf                	mov    edi,ecx
c0005475:	48                   	dec    eax
c0005476:	0f ac fe 09          	shrd   esi,edi,0x9
c000547a:	21 f0                	and    eax,esi
c000547c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005480:	0f 84 06 01 00 00    	je     c000558c <f_write+0x19d>
c0005486:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000548a:	0f 88 6e 01 00 00    	js     c00055fe <f_write+0x20f>
c0005490:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005494:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005497:	89 c8                	mov    eax,ecx
c0005499:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000549d:	e8 fa c7 ff ff       	call   c0001c9c <clst2sect>
c00054a2:	89 d1                	mov    ecx,edx
c00054a4:	09 c1                	or     ecx,eax
c00054a6:	0f 84 1c 01 00 00    	je     c00055c8 <f_write+0x1d9>
c00054ac:	31 ff                	xor    edi,edi
c00054ae:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00054b2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00054b6:	01 c6                	add    esi,eax
c00054b8:	11 d7                	adc    edi,edx
c00054ba:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00054c2:	0f 86 63 01 00 00    	jbe    c000562b <f_write+0x23c>
c00054c8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054cc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054d0:	c1 e8 09             	shr    eax,0x9
c00054d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054d7:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054db:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c00054df:	39 c2                	cmp    edx,eax
c00054e1:	76 08                	jbe    c00054eb <f_write+0xfc>
c00054e3:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054e7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054eb:	83 ec 0c             	sub    esp,0xc
c00054ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054f2:	57                   	push   edi
c00054f3:	56                   	push   esi
c00054f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054f8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054fc:	50                   	push   eax
c00054fd:	e8 cc c4 ff ff       	call   c00019ce <disk_write>
c0005502:	83 c4 20             	add    esp,0x20
c0005505:	85 c0                	test   eax,eax
c0005507:	0f 85 ce 00 00 00    	jne    c00055db <f_write+0x1ec>
c000550d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005510:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005513:	29 f0                	sub    eax,esi
c0005515:	19 fa                	sbb    edx,edi
c0005517:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000551b:	89 d7                	mov    edi,edx
c000551d:	ba 00 00 00 00       	mov    edx,0x0
c0005522:	89 f9                	mov    ecx,edi
c0005524:	19 d1                	sbb    ecx,edx
c0005526:	73 1c                	jae    c0005544 <f_write+0x155>
c0005528:	89 c7                	mov    edi,eax
c000552a:	b9 00 02 00 00       	mov    ecx,0x200
c000552f:	c1 e7 09             	shl    edi,0x9
c0005532:	8d 43 50             	lea    eax,[ebx+0x50]
c0005535:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005539:	89 fa                	mov    edx,edi
c000553b:	e8 42 c5 ff ff       	call   c0001a82 <mem_cpy>
c0005540:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005544:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005548:	c1 e6 09             	shl    esi,0x9
c000554b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000554f:	31 ff                	xor    edi,edi
c0005551:	01 30                	add    DWORD PTR [eax],esi
c0005553:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005557:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000555b:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000555e:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005561:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005564:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c0005567:	89 c1                	mov    ecx,eax
c0005569:	39 f2                	cmp    edx,esi
c000556b:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000556e:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005571:	19 f9                	sbb    ecx,edi
c0005573:	73 04                	jae    c0005579 <f_write+0x18a>
c0005575:	89 f2                	mov    edx,esi
c0005577:	89 f8                	mov    eax,edi
c0005579:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000557c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000557f:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005584:	0f 85 cc fe ff ff    	jne    c0005456 <f_write+0x67>
c000558a:	eb 2e                	jmp    c00055ba <f_write+0x1cb>
c000558c:	89 c8                	mov    eax,ecx
c000558e:	09 d0                	or     eax,edx
c0005590:	75 0b                	jne    c000559d <f_write+0x1ae>
c0005592:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005595:	31 d2                	xor    edx,edx
c0005597:	85 c0                	test   eax,eax
c0005599:	75 28                	jne    c00055c3 <f_write+0x1d4>
c000559b:	eb 12                	jmp    c00055af <f_write+0x1c0>
c000559d:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00055a1:	74 09                	je     c00055ac <f_write+0x1bd>
c00055a3:	89 d8                	mov    eax,ebx
c00055a5:	e8 13 c7 ff ff       	call   c0001cbd <clmt_clust>
c00055aa:	eb 0a                	jmp    c00055b6 <f_write+0x1c7>
c00055ac:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055af:	89 d8                	mov    eax,ebx
c00055b1:	e8 a1 da ff ff       	call   c0003057 <create_chain>
c00055b6:	85 c0                	test   eax,eax
c00055b8:	75 09                	jne    c00055c3 <f_write+0x1d4>
c00055ba:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00055be:	e9 dc 00 00 00       	jmp    c000569f <f_write+0x2b0>
c00055c3:	83 f8 01             	cmp    eax,0x1
c00055c6:	75 0e                	jne    c00055d6 <f_write+0x1e7>
c00055c8:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00055cc:	bd 02 00 00 00       	mov    ebp,0x2
c00055d1:	e9 c9 00 00 00       	jmp    c000569f <f_write+0x2b0>
c00055d6:	83 f8 ff             	cmp    eax,0xffffffff
c00055d9:	75 0e                	jne    c00055e9 <f_write+0x1fa>
c00055db:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00055df:	bd 01 00 00 00       	mov    ebp,0x1
c00055e4:	e9 b6 00 00 00       	jmp    c000569f <f_write+0x2b0>
c00055e9:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00055ec:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00055f0:	0f 85 90 fe ff ff    	jne    c0005486 <f_write+0x97>
c00055f6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00055f9:	e9 88 fe ff ff       	jmp    c0005486 <f_write+0x97>
c00055fe:	83 ec 0c             	sub    esp,0xc
c0005601:	8d 43 50             	lea    eax,[ebx+0x50]
c0005604:	6a 01                	push   0x1
c0005606:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005609:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000560c:	50                   	push   eax
c000560d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005611:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005615:	50                   	push   eax
c0005616:	e8 b3 c3 ff ff       	call   c00019ce <disk_write>
c000561b:	83 c4 20             	add    esp,0x20
c000561e:	85 c0                	test   eax,eax
c0005620:	75 b9                	jne    c00055db <f_write+0x1ec>
c0005622:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005626:	e9 65 fe ff ff       	jmp    c0005490 <f_write+0xa1>
c000562b:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000562e:	75 05                	jne    c0005635 <f_write+0x246>
c0005630:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005633:	74 2e                	je     c0005663 <f_write+0x274>
c0005635:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005638:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000563b:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000563e:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005641:	73 20                	jae    c0005663 <f_write+0x274>
c0005643:	83 ec 0c             	sub    esp,0xc
c0005646:	8d 43 50             	lea    eax,[ebx+0x50]
c0005649:	6a 01                	push   0x1
c000564b:	57                   	push   edi
c000564c:	56                   	push   esi
c000564d:	50                   	push   eax
c000564e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005652:	50                   	push   eax
c0005653:	e8 60 c3 ff ff       	call   c00019b8 <disk_read>
c0005658:	83 c4 20             	add    esp,0x20
c000565b:	85 c0                	test   eax,eax
c000565d:	0f 85 78 ff ff ff    	jne    c00055db <f_write+0x1ec>
c0005663:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005666:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005669:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000566c:	ba 00 02 00 00       	mov    edx,0x200
c0005671:	25 ff 01 00 00       	and    eax,0x1ff
c0005676:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000567a:	29 c2                	sub    edx,eax
c000567c:	39 d6                	cmp    esi,edx
c000567e:	76 02                	jbe    c0005682 <f_write+0x293>
c0005680:	89 d6                	mov    esi,edx
c0005682:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c0005686:	89 f1                	mov    ecx,esi
c0005688:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000568c:	e8 f1 c3 ff ff       	call   c0001a82 <mem_cpy>
c0005691:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c0005695:	e9 b1 fe ff ff       	jmp    c000554b <f_write+0x15c>
c000569a:	bd 07 00 00 00       	mov    ebp,0x7
c000569f:	83 c4 2c             	add    esp,0x2c
c00056a2:	89 e8                	mov    eax,ebp
c00056a4:	5b                   	pop    ebx
c00056a5:	5e                   	pop    esi
c00056a6:	5f                   	pop    edi
c00056a7:	5d                   	pop    ebp
c00056a8:	c3                   	ret    

c00056a9 <f_sync>:
c00056a9:	56                   	push   esi
c00056aa:	53                   	push   ebx
c00056ab:	83 ec 64             	sub    esp,0x64
c00056ae:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00056b2:	8d 54 24 10          	lea    edx,[esp+0x10]
c00056b6:	89 d8                	mov    eax,ebx
c00056b8:	e8 49 ca ff ff       	call   c0002106 <validate>
c00056bd:	85 c0                	test   eax,eax
c00056bf:	0f 85 ba 01 00 00    	jne    c000587f <f_sync+0x1d6>
c00056c5:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00056c8:	f6 c2 40             	test   dl,0x40
c00056cb:	0f 84 ae 01 00 00    	je     c000587f <f_sync+0x1d6>
c00056d1:	84 d2                	test   dl,dl
c00056d3:	79 33                	jns    c0005708 <f_sync+0x5f>
c00056d5:	83 ec 0c             	sub    esp,0xc
c00056d8:	8d 43 50             	lea    eax,[ebx+0x50]
c00056db:	6a 01                	push   0x1
c00056dd:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00056e0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00056e3:	50                   	push   eax
c00056e4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056e8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00056ec:	50                   	push   eax
c00056ed:	e8 dc c2 ff ff       	call   c00019ce <disk_write>
c00056f2:	83 c4 20             	add    esp,0x20
c00056f5:	89 c2                	mov    edx,eax
c00056f7:	b8 01 00 00 00       	mov    eax,0x1
c00056fc:	85 d2                	test   edx,edx
c00056fe:	0f 85 7b 01 00 00    	jne    c000587f <f_sync+0x1d6>
c0005704:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005708:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000570c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000570f:	0f 85 11 01 00 00    	jne    c0005826 <f_sync+0x17d>
c0005715:	89 d8                	mov    eax,ebx
c0005717:	e8 13 d6 ff ff       	call   c0002d2f <fill_first_frag>
c000571c:	85 c0                	test   eax,eax
c000571e:	0f 85 5b 01 00 00    	jne    c000587f <f_sync+0x1d6>
c0005724:	83 c9 ff             	or     ecx,0xffffffff
c0005727:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000572a:	89 d8                	mov    eax,ebx
c000572c:	e8 c9 d5 ff ff       	call   c0002cfa <fill_last_frag>
c0005731:	85 c0                	test   eax,eax
c0005733:	0f 85 46 01 00 00    	jne    c000587f <f_sync+0x1d6>
c0005739:	83 ec 0c             	sub    esp,0xc
c000573c:	68 60 04 00 00       	push   0x460
c0005741:	e8 f0 2a 00 00       	call   c0008236 <ff_memalloc>
c0005746:	83 c4 10             	add    esp,0x10
c0005749:	89 c6                	mov    esi,eax
c000574b:	b8 11 00 00 00       	mov    eax,0x11
c0005750:	85 f6                	test   esi,esi
c0005752:	0f 84 27 01 00 00    	je     c000587f <f_sync+0x1d6>
c0005758:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000575c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005762:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005765:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005768:	89 da                	mov    edx,ebx
c000576a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000576e:	e8 af df ff ff       	call   c0003722 <load_obj_xdir>
c0005773:	85 c0                	test   eax,eax
c0005775:	0f 85 95 00 00 00    	jne    c0005810 <f_sync+0x167>
c000577b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000577f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005782:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c0005786:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c0005789:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c000578c:	83 ca 01             	or     edx,0x1
c000578f:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c0005792:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005795:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005798:	83 c0 34             	add    eax,0x34
c000579b:	e8 d9 c2 ff ff       	call   c0001a79 <st_dword>
c00057a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057a4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057a7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057aa:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057ad:	83 c0 38             	add    eax,0x38
c00057b0:	e8 c7 c2 ff ff       	call   c0001a7c <st_qword>
c00057b5:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057bc:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057bf:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057c2:	83 c0 28             	add    eax,0x28
c00057c5:	e8 b2 c2 ff ff       	call   c0001a7c <st_qword>
c00057ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057ce:	ba 00 00 21 50       	mov    edx,0x50210000
c00057d3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057d6:	83 c0 0c             	add    eax,0xc
c00057d9:	e8 9b c2 ff ff       	call   c0001a79 <st_dword>
c00057de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057e2:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00057e5:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c00057e9:	31 d2                	xor    edx,edx
c00057eb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057ee:	83 c0 10             	add    eax,0x10
c00057f1:	e8 83 c2 ff ff       	call   c0001a79 <st_dword>
c00057f6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00057fa:	e8 62 e1 ff ff       	call   c0003961 <store_xdir>
c00057ff:	85 c0                	test   eax,eax
c0005801:	75 0d                	jne    c0005810 <f_sync+0x167>
c0005803:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005807:	e8 00 eb ff ff       	call   c000430c <sync_fs>
c000580c:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005810:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005814:	83 ec 0c             	sub    esp,0xc
c0005817:	56                   	push   esi
c0005818:	e8 2f 2a 00 00       	call   c000824c <ff_memfree>
c000581d:	83 c4 10             	add    esp,0x10
c0005820:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005824:	eb 59                	jmp    c000587f <f_sync+0x1d6>
c0005826:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005829:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c000582c:	e8 b0 c9 ff ff       	call   c00021e1 <move_window>
c0005831:	85 c0                	test   eax,eax
c0005833:	75 4a                	jne    c000587f <f_sync+0x1d6>
c0005835:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005838:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c000583c:	89 f2                	mov    edx,esi
c000583e:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005841:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005843:	e8 5f f3 ff ff       	call   c0004ba7 <st_clust.isra.1>
c0005848:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000584b:	8d 46 1c             	lea    eax,[esi+0x1c]
c000584e:	e8 26 c2 ff ff       	call   c0001a79 <st_dword>
c0005853:	8d 46 16             	lea    eax,[esi+0x16]
c0005856:	ba 00 00 21 50       	mov    edx,0x50210000
c000585b:	e8 19 c2 ff ff       	call   c0001a79 <st_dword>
c0005860:	8d 46 12             	lea    eax,[esi+0x12]
c0005863:	31 d2                	xor    edx,edx
c0005865:	e8 0b c2 ff ff       	call   c0001a75 <st_word>
c000586a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000586e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005872:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005876:	e8 91 ea ff ff       	call   c000430c <sync_fs>
c000587b:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000587f:	83 c4 64             	add    esp,0x64
c0005882:	5b                   	pop    ebx
c0005883:	5e                   	pop    esi
c0005884:	c3                   	ret    

c0005885 <f_close>:
c0005885:	53                   	push   ebx
c0005886:	83 ec 24             	sub    esp,0x24
c0005889:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000588d:	53                   	push   ebx
c000588e:	e8 16 fe ff ff       	call   c00056a9 <f_sync>
c0005893:	83 c4 10             	add    esp,0x10
c0005896:	85 c0                	test   eax,eax
c0005898:	75 15                	jne    c00058af <f_close+0x2a>
c000589a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000589e:	89 d8                	mov    eax,ebx
c00058a0:	e8 61 c8 ff ff       	call   c0002106 <validate>
c00058a5:	85 c0                	test   eax,eax
c00058a7:	75 06                	jne    c00058af <f_close+0x2a>
c00058a9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00058af:	83 c4 18             	add    esp,0x18
c00058b2:	5b                   	pop    ebx
c00058b3:	c3                   	ret    

c00058b4 <f_lseek>:
c00058b4:	55                   	push   ebp
c00058b5:	57                   	push   edi
c00058b6:	56                   	push   esi
c00058b7:	53                   	push   ebx
c00058b8:	83 ec 3c             	sub    esp,0x3c
c00058bb:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00058bf:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00058c3:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00058c7:	89 04 24             	mov    DWORD PTR [esp],eax
c00058ca:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00058ce:	89 d8                	mov    eax,ebx
c00058d0:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00058d4:	e8 2d c8 ff ff       	call   c0002106 <validate>
c00058d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00058dd:	85 c0                	test   eax,eax
c00058df:	0f 85 7a 04 00 00    	jne    c0005d5f <f_lseek+0x4ab>
c00058e5:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c00058e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00058ed:	85 c0                	test   eax,eax
c00058ef:	0f 85 6a 04 00 00    	jne    c0005d5f <f_lseek+0x4ab>
c00058f5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00058f9:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00058fc:	74 0c                	je     c000590a <f_lseek+0x56>
c00058fe:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005901:	85 c0                	test   eax,eax
c0005903:	75 1f                	jne    c0005924 <f_lseek+0x70>
c0005905:	e9 b5 01 00 00       	jmp    c0005abf <f_lseek+0x20b>
c000590a:	83 c9 ff             	or     ecx,0xffffffff
c000590d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005910:	89 d8                	mov    eax,ebx
c0005912:	e8 e3 d3 ff ff       	call   c0002cfa <fill_last_frag>
c0005917:	85 c0                	test   eax,eax
c0005919:	74 e3                	je     c00058fe <f_lseek+0x4a>
c000591b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000591f:	e9 3b 04 00 00       	jmp    c0005d5f <f_lseek+0x4ab>
c0005924:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005929:	0f 85 ac 00 00 00    	jne    c00059db <f_lseek+0x127>
c000592f:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005933:	0f 85 a2 00 00 00    	jne    c00059db <f_lseek+0x127>
c0005939:	8d 78 04             	lea    edi,[eax+0x4]
c000593c:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c000593f:	8b 00                	mov    eax,DWORD PTR [eax]
c0005941:	be 02 00 00 00       	mov    esi,0x2
c0005946:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000594a:	85 ed                	test   ebp,ebp
c000594c:	74 73                	je     c00059c1 <f_lseek+0x10d>
c000594e:	89 e9                	mov    ecx,ebp
c0005950:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005957:	ff 04 24             	inc    DWORD PTR [esp]
c000595a:	89 ca                	mov    edx,ecx
c000595c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005960:	89 d8                	mov    eax,ebx
c0005962:	e8 02 d4 ff ff       	call   c0002d69 <get_fat>
c0005967:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000596b:	83 f8 01             	cmp    eax,0x1
c000596e:	77 11                	ja     c0005981 <f_lseek+0xcd>
c0005970:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005974:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c000597c:	e9 de 03 00 00       	jmp    c0005d5f <f_lseek+0x4ab>
c0005981:	83 f8 ff             	cmp    eax,0xffffffff
c0005984:	75 11                	jne    c0005997 <f_lseek+0xe3>
c0005986:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000598a:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005992:	e9 c8 03 00 00       	jmp    c0005d5f <f_lseek+0x4ab>
c0005997:	8d 51 01             	lea    edx,[ecx+0x1]
c000599a:	89 c1                	mov    ecx,eax
c000599c:	39 c2                	cmp    edx,eax
c000599e:	74 b7                	je     c0005957 <f_lseek+0xa3>
c00059a0:	83 c6 02             	add    esi,0x2
c00059a3:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c00059a7:	72 0b                	jb     c00059b4 <f_lseek+0x100>
c00059a9:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00059ac:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c00059af:	89 0f                	mov    DWORD PTR [edi],ecx
c00059b1:	83 c7 08             	add    edi,0x8
c00059b4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00059b8:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c00059bb:	76 04                	jbe    c00059c1 <f_lseek+0x10d>
c00059bd:	89 c5                	mov    ebp,eax
c00059bf:	eb 8d                	jmp    c000594e <f_lseek+0x9a>
c00059c1:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00059c4:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00059c8:	89 30                	mov    DWORD PTR [eax],esi
c00059ca:	0f 87 87 03 00 00    	ja     c0005d57 <f_lseek+0x4a3>
c00059d0:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c00059d6:	e9 84 03 00 00       	jmp    c0005d5f <f_lseek+0x4ab>
c00059db:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00059de:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00059e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00059e5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00059e9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00059ed:	39 04 24             	cmp    DWORD PTR [esp],eax
c00059f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00059f4:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00059f8:	73 0f                	jae    c0005a09 <f_lseek+0x155>
c00059fa:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00059fd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005a01:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a05:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005a11:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005a14:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005a17:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a1b:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005a1f:	0f 84 3a 03 00 00    	je     c0005d5f <f_lseek+0x4ab>
c0005a25:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005a29:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005a2d:	83 c6 ff             	add    esi,0xffffffff
c0005a30:	89 d8                	mov    eax,ebx
c0005a32:	83 d7 ff             	adc    edi,0xffffffff
c0005a35:	89 f2                	mov    edx,esi
c0005a37:	89 f9                	mov    ecx,edi
c0005a39:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005a3d:	89 34 24             	mov    DWORD PTR [esp],esi
c0005a40:	e8 78 c2 ff ff       	call   c0001cbd <clmt_clust>
c0005a45:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a49:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005a4c:	89 c2                	mov    edx,eax
c0005a4e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005a52:	89 c8                	mov    eax,ecx
c0005a54:	e8 43 c2 ff ff       	call   c0001c9c <clst2sect>
c0005a59:	89 d7                	mov    edi,edx
c0005a5b:	09 c7                	or     edi,eax
c0005a5d:	0f 84 0d ff ff ff    	je     c0005970 <f_lseek+0xbc>
c0005a63:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005a67:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005a6d:	0f 84 ec 02 00 00    	je     c0005d5f <f_lseek+0x4ab>
c0005a73:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a77:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005a7b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005a7e:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005a82:	0f ac fe 09          	shrd   esi,edi,0x9
c0005a86:	4d                   	dec    ebp
c0005a87:	31 ff                	xor    edi,edi
c0005a89:	21 ee                	and    esi,ebp
c0005a8b:	01 c6                	add    esi,eax
c0005a8d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005a90:	11 d7                	adc    edi,edx
c0005a92:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005a95:	39 fa                	cmp    edx,edi
c0005a97:	75 08                	jne    c0005aa1 <f_lseek+0x1ed>
c0005a99:	39 f0                	cmp    eax,esi
c0005a9b:	0f 84 be 02 00 00    	je     c0005d5f <f_lseek+0x4ab>
c0005aa1:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005aa4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005aa8:	0f 89 80 02 00 00    	jns    c0005d2e <f_lseek+0x47a>
c0005aae:	83 ec 0c             	sub    esp,0xc
c0005ab1:	6a 01                	push   0x1
c0005ab3:	52                   	push   edx
c0005ab4:	50                   	push   eax
c0005ab5:	55                   	push   ebp
c0005ab6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005aba:	e9 5a 02 00 00       	jmp    c0005d19 <f_lseek+0x465>
c0005abf:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ac3:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005ac6:	74 16                	je     c0005ade <f_lseek+0x22a>
c0005ac8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005acd:	76 0f                	jbe    c0005ade <f_lseek+0x22a>
c0005acf:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005ad6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005ade:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005ae1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005ae4:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005ae7:	89 c7                	mov    edi,eax
c0005ae9:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005aed:	73 0d                	jae    c0005afc <f_lseek+0x248>
c0005aef:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005af3:	75 07                	jne    c0005afc <f_lseek+0x248>
c0005af5:	89 14 24             	mov    DWORD PTR [esp],edx
c0005af8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005afc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005aff:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005b02:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005b06:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005b0d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005b14:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005b17:	75 09                	jne    c0005b22 <f_lseek+0x26e>
c0005b19:	31 f6                	xor    esi,esi
c0005b1b:	31 ff                	xor    edi,edi
c0005b1d:	e9 af 01 00 00       	jmp    c0005cd1 <f_lseek+0x41d>
c0005b22:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005b26:	89 d7                	mov    edi,edx
c0005b28:	c1 e1 09             	shl    ecx,0x9
c0005b2b:	09 c7                	or     edi,eax
c0005b2d:	89 cd                	mov    ebp,ecx
c0005b2f:	74 6d                	je     c0005b9e <f_lseek+0x2ea>
c0005b31:	83 c0 ff             	add    eax,0xffffffff
c0005b34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b38:	83 d2 ff             	adc    edx,0xffffffff
c0005b3b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b3e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b42:	83 c0 ff             	add    eax,0xffffffff
c0005b45:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b49:	83 d2 ff             	adc    edx,0xffffffff
c0005b4c:	31 ff                	xor    edi,edi
c0005b4e:	57                   	push   edi
c0005b4f:	51                   	push   ecx
c0005b50:	52                   	push   edx
c0005b51:	50                   	push   eax
c0005b52:	e8 e5 d9 01 00       	call   c002353c <__udivdi3>
c0005b57:	83 c4 10             	add    esp,0x10
c0005b5a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b5e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005b62:	57                   	push   edi
c0005b63:	55                   	push   ebp
c0005b64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b6c:	e8 cb d9 01 00       	call   c002353c <__udivdi3>
c0005b71:	83 c4 10             	add    esp,0x10
c0005b74:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005b78:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005b7c:	19 d1                	sbb    ecx,edx
c0005b7e:	72 1e                	jb     c0005b9e <f_lseek+0x2ea>
c0005b80:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b84:	89 e9                	mov    ecx,ebp
c0005b86:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b89:	f7 d9                	neg    ecx
c0005b8b:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005b8e:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005b92:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005b95:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005b98:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005b9c:	eb 28                	jmp    c0005bc6 <f_lseek+0x312>
c0005b9e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005ba1:	85 c0                	test   eax,eax
c0005ba3:	75 1e                	jne    c0005bc3 <f_lseek+0x30f>
c0005ba5:	31 d2                	xor    edx,edx
c0005ba7:	89 d8                	mov    eax,ebx
c0005ba9:	e8 a9 d4 ff ff       	call   c0003057 <create_chain>
c0005bae:	83 f8 01             	cmp    eax,0x1
c0005bb1:	0f 84 b9 fd ff ff    	je     c0005970 <f_lseek+0xbc>
c0005bb7:	83 f8 ff             	cmp    eax,0xffffffff
c0005bba:	0f 84 c6 fd ff ff    	je     c0005986 <f_lseek+0xd2>
c0005bc0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005bc3:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005bc6:	85 c0                	test   eax,eax
c0005bc8:	0f 84 4b ff ff ff    	je     c0005b19 <f_lseek+0x265>
c0005bce:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005bd2:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005bda:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005bdd:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005be1:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005be4:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005be7:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005beb:	0f 83 9d 00 00 00    	jae    c0005c8e <f_lseek+0x3da>
c0005bf1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005bf5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005bf9:	29 34 24             	sub    DWORD PTR [esp],esi
c0005bfc:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005c00:	01 f2                	add    edx,esi
c0005c02:	11 f9                	adc    ecx,edi
c0005c04:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005c08:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005c0c:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005c0f:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005c12:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005c15:	f6 c1 02             	test   cl,0x2
c0005c18:	74 35                	je     c0005c4f <f_lseek+0x39b>
c0005c1a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005c1e:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005c21:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005c24:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005c28:	73 16                	jae    c0005c40 <f_lseek+0x38c>
c0005c2a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c2e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c32:	88 ca                	mov    dl,cl
c0005c34:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005c37:	83 ca 40             	or     edx,0x40
c0005c3a:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005c3d:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005c40:	89 c2                	mov    edx,eax
c0005c42:	89 d8                	mov    eax,ebx
c0005c44:	e8 0e d4 ff ff       	call   c0003057 <create_chain>
c0005c49:	85 c0                	test   eax,eax
c0005c4b:	75 0b                	jne    c0005c58 <f_lseek+0x3a4>
c0005c4d:	eb 30                	jmp    c0005c7f <f_lseek+0x3cb>
c0005c4f:	89 c2                	mov    edx,eax
c0005c51:	89 d8                	mov    eax,ebx
c0005c53:	e8 11 d1 ff ff       	call   c0002d69 <get_fat>
c0005c58:	83 f8 ff             	cmp    eax,0xffffffff
c0005c5b:	0f 84 25 fd ff ff    	je     c0005986 <f_lseek+0xd2>
c0005c61:	83 f8 01             	cmp    eax,0x1
c0005c64:	0f 86 06 fd ff ff    	jbe    c0005970 <f_lseek+0xbc>
c0005c6a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c6e:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c71:	0f 86 f9 fc ff ff    	jbe    c0005970 <f_lseek+0xbc>
c0005c77:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c7a:	e9 5b ff ff ff       	jmp    c0005bda <f_lseek+0x326>
c0005c7f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005c86:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c8e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005c91:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005c95:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005c98:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005c9b:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005c9e:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ca4:	0f 84 6f fe ff ff    	je     c0005b19 <f_lseek+0x265>
c0005caa:	89 c2                	mov    edx,eax
c0005cac:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005cb0:	e8 e7 bf ff ff       	call   c0001c9c <clst2sect>
c0005cb5:	89 d7                	mov    edi,edx
c0005cb7:	09 c7                	or     edi,eax
c0005cb9:	0f 84 b1 fc ff ff    	je     c0005970 <f_lseek+0xbc>
c0005cbf:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cc3:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cc6:	0f ac fe 09          	shrd   esi,edi,0x9
c0005cca:	c1 ef 09             	shr    edi,0x9
c0005ccd:	01 c6                	add    esi,eax
c0005ccf:	11 d7                	adc    edi,edx
c0005cd1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005cd4:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005cd7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005cda:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005cdd:	19 d1                	sbb    ecx,edx
c0005cdf:	73 0a                	jae    c0005ceb <f_lseek+0x437>
c0005ce1:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005ce4:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005ce7:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005ceb:	a9 ff 01 00 00       	test   eax,0x1ff
c0005cf0:	74 6d                	je     c0005d5f <f_lseek+0x4ab>
c0005cf2:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cf5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cf8:	39 fa                	cmp    edx,edi
c0005cfa:	75 04                	jne    c0005d00 <f_lseek+0x44c>
c0005cfc:	39 f0                	cmp    eax,esi
c0005cfe:	74 5f                	je     c0005d5f <f_lseek+0x4ab>
c0005d00:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d03:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d07:	79 25                	jns    c0005d2e <f_lseek+0x47a>
c0005d09:	83 ec 0c             	sub    esp,0xc
c0005d0c:	6a 01                	push   0x1
c0005d0e:	52                   	push   edx
c0005d0f:	50                   	push   eax
c0005d10:	55                   	push   ebp
c0005d11:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d15:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d19:	50                   	push   eax
c0005d1a:	e8 af bc ff ff       	call   c00019ce <disk_write>
c0005d1f:	83 c4 20             	add    esp,0x20
c0005d22:	85 c0                	test   eax,eax
c0005d24:	0f 85 5c fc ff ff    	jne    c0005986 <f_lseek+0xd2>
c0005d2a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005d2e:	83 ec 0c             	sub    esp,0xc
c0005d31:	6a 01                	push   0x1
c0005d33:	57                   	push   edi
c0005d34:	56                   	push   esi
c0005d35:	55                   	push   ebp
c0005d36:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d3a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d3e:	50                   	push   eax
c0005d3f:	e8 74 bc ff ff       	call   c00019b8 <disk_read>
c0005d44:	83 c4 20             	add    esp,0x20
c0005d47:	85 c0                	test   eax,eax
c0005d49:	0f 85 37 fc ff ff    	jne    c0005986 <f_lseek+0xd2>
c0005d4f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005d52:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005d55:	eb 08                	jmp    c0005d5f <f_lseek+0x4ab>
c0005d57:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005d5f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005d63:	83 c4 3c             	add    esp,0x3c
c0005d66:	5b                   	pop    ebx
c0005d67:	5e                   	pop    esi
c0005d68:	5f                   	pop    edi
c0005d69:	5d                   	pop    ebp
c0005d6a:	c3                   	ret    

c0005d6b <f_opendir>:
c0005d6b:	56                   	push   esi
c0005d6c:	b8 09 00 00 00       	mov    eax,0x9
c0005d71:	53                   	push   ebx
c0005d72:	83 ec 24             	sub    esp,0x24
c0005d75:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005d79:	85 db                	test   ebx,ebx
c0005d7b:	0f 84 e6 00 00 00    	je     c0005e67 <f_opendir+0xfc>
c0005d81:	31 c9                	xor    ecx,ecx
c0005d83:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005d87:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005d8b:	e8 03 c7 ff ff       	call   c0002493 <mount_volume>
c0005d90:	85 c0                	test   eax,eax
c0005d92:	0f 85 c9 00 00 00    	jne    c0005e61 <f_opendir+0xf6>
c0005d98:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d9c:	83 ec 0c             	sub    esp,0xc
c0005d9f:	89 03                	mov    DWORD PTR [ebx],eax
c0005da1:	68 60 04 00 00       	push   0x460
c0005da6:	e8 8b 24 00 00       	call   c0008236 <ff_memalloc>
c0005dab:	83 c4 10             	add    esp,0x10
c0005dae:	89 c6                	mov    esi,eax
c0005db0:	b8 11 00 00 00       	mov    eax,0x11
c0005db5:	85 f6                	test   esi,esi
c0005db7:	0f 84 aa 00 00 00    	je     c0005e67 <f_opendir+0xfc>
c0005dbd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005dc1:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005dc7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005dca:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005dcd:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005dd1:	89 d8                	mov    eax,ebx
c0005dd3:	e8 31 ee ff ff       	call   c0004c09 <follow_path>
c0005dd8:	85 c0                	test   eax,eax
c0005dda:	75 61                	jne    c0005e3d <f_opendir+0xd2>
c0005ddc:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005de0:	78 46                	js     c0005e28 <f_opendir+0xbd>
c0005de2:	b8 05 00 00 00       	mov    eax,0x5
c0005de7:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005deb:	74 50                	je     c0005e3d <f_opendir+0xd2>
c0005ded:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005df1:	8a 01                	mov    al,BYTE PTR [ecx]
c0005df3:	3c 04                	cmp    al,0x4
c0005df5:	75 26                	jne    c0005e1d <f_opendir+0xb2>
c0005df7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dfa:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005dfd:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005e00:	30 d2                	xor    dl,dl
c0005e02:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005e06:	09 c2                	or     edx,eax
c0005e08:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005e0b:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005e0e:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005e11:	89 da                	mov    edx,ebx
c0005e13:	8d 41 10             	lea    eax,[ecx+0x10]
c0005e16:	e8 b4 ed ff ff       	call   c0004bcf <init_alloc_info.isra.2>
c0005e1b:	eb 0b                	jmp    c0005e28 <f_opendir+0xbd>
c0005e1d:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005e20:	e8 59 ed ff ff       	call   c0004b7e <ld_clust.isra.0>
c0005e25:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e28:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e2c:	31 d2                	xor    edx,edx
c0005e2e:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005e32:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005e36:	89 d8                	mov    eax,ebx
c0005e38:	e8 22 d1 ff ff       	call   c0002f5f <dir_sdi>
c0005e3d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e41:	83 ec 0c             	sub    esp,0xc
c0005e44:	56                   	push   esi
c0005e45:	e8 02 24 00 00       	call   c000824c <ff_memfree>
c0005e4a:	83 c4 10             	add    esp,0x10
c0005e4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e51:	83 f8 04             	cmp    eax,0x4
c0005e54:	74 06                	je     c0005e5c <f_opendir+0xf1>
c0005e56:	85 c0                	test   eax,eax
c0005e58:	74 0d                	je     c0005e67 <f_opendir+0xfc>
c0005e5a:	eb 05                	jmp    c0005e61 <f_opendir+0xf6>
c0005e5c:	b8 05 00 00 00       	mov    eax,0x5
c0005e61:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e67:	83 c4 24             	add    esp,0x24
c0005e6a:	5b                   	pop    ebx
c0005e6b:	5e                   	pop    esi
c0005e6c:	c3                   	ret    

c0005e6d <f_closedir>:
c0005e6d:	53                   	push   ebx
c0005e6e:	83 ec 18             	sub    esp,0x18
c0005e71:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005e75:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005e79:	89 d8                	mov    eax,ebx
c0005e7b:	e8 86 c2 ff ff       	call   c0002106 <validate>
c0005e80:	85 c0                	test   eax,eax
c0005e82:	75 06                	jne    c0005e8a <f_closedir+0x1d>
c0005e84:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e8a:	83 c4 18             	add    esp,0x18
c0005e8d:	5b                   	pop    ebx
c0005e8e:	c3                   	ret    

c0005e8f <f_readdir>:
c0005e8f:	57                   	push   edi
c0005e90:	56                   	push   esi
c0005e91:	53                   	push   ebx
c0005e92:	83 ec 20             	sub    esp,0x20
c0005e95:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005e99:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005e9d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ea1:	89 d8                	mov    eax,ebx
c0005ea3:	e8 5e c2 ff ff       	call   c0002106 <validate>
c0005ea8:	85 c0                	test   eax,eax
c0005eaa:	75 77                	jne    c0005f23 <f_readdir+0x94>
c0005eac:	85 ff                	test   edi,edi
c0005eae:	75 0b                	jne    c0005ebb <f_readdir+0x2c>
c0005eb0:	31 d2                	xor    edx,edx
c0005eb2:	89 d8                	mov    eax,ebx
c0005eb4:	e8 a6 d0 ff ff       	call   c0002f5f <dir_sdi>
c0005eb9:	eb 68                	jmp    c0005f23 <f_readdir+0x94>
c0005ebb:	83 ec 0c             	sub    esp,0xc
c0005ebe:	68 60 04 00 00       	push   0x460
c0005ec3:	e8 6e 23 00 00       	call   c0008236 <ff_memalloc>
c0005ec8:	83 c4 10             	add    esp,0x10
c0005ecb:	89 c6                	mov    esi,eax
c0005ecd:	b8 11 00 00 00       	mov    eax,0x11
c0005ed2:	85 f6                	test   esi,esi
c0005ed4:	74 4d                	je     c0005f23 <f_readdir+0x94>
c0005ed6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005eda:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005ee0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005ee3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ee6:	31 d2                	xor    edx,edx
c0005ee8:	89 d8                	mov    eax,ebx
c0005eea:	e8 80 d8 ff ff       	call   c000376f <dir_read>
c0005eef:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005ef4:	75 19                	jne    c0005f0f <f_readdir+0x80>
c0005ef6:	89 fa                	mov    edx,edi
c0005ef8:	89 d8                	mov    eax,ebx
c0005efa:	e8 7e ea ff ff       	call   c000497d <get_fileinfo>
c0005eff:	31 d2                	xor    edx,edx
c0005f01:	89 d8                	mov    eax,ebx
c0005f03:	e8 af d5 ff ff       	call   c00034b7 <dir_next>
c0005f08:	83 f8 04             	cmp    eax,0x4
c0005f0b:	75 02                	jne    c0005f0f <f_readdir+0x80>
c0005f0d:	31 c0                	xor    eax,eax
c0005f0f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f13:	83 ec 0c             	sub    esp,0xc
c0005f16:	56                   	push   esi
c0005f17:	e8 30 23 00 00       	call   c000824c <ff_memfree>
c0005f1c:	83 c4 10             	add    esp,0x10
c0005f1f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f23:	83 c4 20             	add    esp,0x20
c0005f26:	5b                   	pop    ebx
c0005f27:	5e                   	pop    esi
c0005f28:	5f                   	pop    edi
c0005f29:	c3                   	ret    

c0005f2a <f_stat>:
c0005f2a:	57                   	push   edi
c0005f2b:	31 c9                	xor    ecx,ecx
c0005f2d:	56                   	push   esi
c0005f2e:	53                   	push   ebx
c0005f2f:	83 ec 50             	sub    esp,0x50
c0005f32:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005f36:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005f3a:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005f3e:	e8 50 c5 ff ff       	call   c0002493 <mount_volume>
c0005f43:	89 c3                	mov    ebx,eax
c0005f45:	85 c0                	test   eax,eax
c0005f47:	75 67                	jne    c0005fb0 <f_stat+0x86>
c0005f49:	83 ec 0c             	sub    esp,0xc
c0005f4c:	bb 11 00 00 00       	mov    ebx,0x11
c0005f51:	68 60 04 00 00       	push   0x460
c0005f56:	e8 db 22 00 00       	call   c0008236 <ff_memalloc>
c0005f5b:	83 c4 10             	add    esp,0x10
c0005f5e:	89 c6                	mov    esi,eax
c0005f60:	85 c0                	test   eax,eax
c0005f62:	74 4c                	je     c0005fb0 <f_stat+0x86>
c0005f64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f68:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f6e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f71:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f74:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005f78:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f7c:	e8 88 ec ff ff       	call   c0004c09 <follow_path>
c0005f81:	89 c3                	mov    ebx,eax
c0005f83:	85 c0                	test   eax,eax
c0005f85:	75 1d                	jne    c0005fa4 <f_stat+0x7a>
c0005f87:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005f8c:	78 11                	js     c0005f9f <f_stat+0x75>
c0005f8e:	85 ff                	test   edi,edi
c0005f90:	74 12                	je     c0005fa4 <f_stat+0x7a>
c0005f92:	89 fa                	mov    edx,edi
c0005f94:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f98:	e8 e0 e9 ff ff       	call   c000497d <get_fileinfo>
c0005f9d:	eb 05                	jmp    c0005fa4 <f_stat+0x7a>
c0005f9f:	bb 06 00 00 00       	mov    ebx,0x6
c0005fa4:	83 ec 0c             	sub    esp,0xc
c0005fa7:	56                   	push   esi
c0005fa8:	e8 9f 22 00 00       	call   c000824c <ff_memfree>
c0005fad:	83 c4 10             	add    esp,0x10
c0005fb0:	83 c4 50             	add    esp,0x50
c0005fb3:	89 d8                	mov    eax,ebx
c0005fb5:	5b                   	pop    ebx
c0005fb6:	5e                   	pop    esi
c0005fb7:	5f                   	pop    edi
c0005fb8:	c3                   	ret    

c0005fb9 <f_getfree>:
c0005fb9:	55                   	push   ebp
c0005fba:	31 c9                	xor    ecx,ecx
c0005fbc:	57                   	push   edi
c0005fbd:	56                   	push   esi
c0005fbe:	53                   	push   ebx
c0005fbf:	83 ec 5c             	sub    esp,0x5c
c0005fc2:	8d 54 24 24          	lea    edx,[esp+0x24]
c0005fc6:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005fca:	e8 c4 c4 ff ff       	call   c0002493 <mount_volume>
c0005fcf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005fd3:	85 c0                	test   eax,eax
c0005fd5:	0f 85 9d 01 00 00    	jne    c0006178 <f_getfree+0x1bf>
c0005fdb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005fdf:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0005fe3:	89 02                	mov    DWORD PTR [edx],eax
c0005fe5:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0005fe8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0005feb:	8d 71 fe             	lea    esi,[ecx-0x2]
c0005fee:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005ff2:	39 f2                	cmp    edx,esi
c0005ff4:	77 0b                	ja     c0006001 <f_getfree+0x48>
c0005ff6:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0005ffa:	89 10                	mov    DWORD PTR [eax],edx
c0005ffc:	e9 77 01 00 00       	jmp    c0006178 <f_getfree+0x1bf>
c0006001:	8a 10                	mov    dl,BYTE PTR [eax]
c0006003:	80 fa 01             	cmp    dl,0x1
c0006006:	75 3a                	jne    c0006042 <f_getfree+0x89>
c0006008:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000600c:	be 02 00 00 00       	mov    esi,0x2
c0006011:	31 db                	xor    ebx,ebx
c0006013:	89 f2                	mov    edx,esi
c0006015:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006019:	e8 4b cd ff ff       	call   c0002d69 <get_fat>
c000601e:	83 f8 ff             	cmp    eax,0xffffffff
c0006021:	0f 84 28 01 00 00    	je     c000614f <f_getfree+0x196>
c0006027:	83 f8 01             	cmp    eax,0x1
c000602a:	0f 84 29 01 00 00    	je     c0006159 <f_getfree+0x1a0>
c0006030:	83 d3 00             	adc    ebx,0x0
c0006033:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006037:	46                   	inc    esi
c0006038:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000603b:	77 d6                	ja     c0006013 <f_getfree+0x5a>
c000603d:	e9 25 01 00 00       	jmp    c0006167 <f_getfree+0x1ae>
c0006042:	80 fa 04             	cmp    dl,0x4
c0006045:	0f 85 88 00 00 00    	jne    c00060d3 <f_getfree+0x11a>
c000604b:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c000604e:	31 ed                	xor    ebp,ebp
c0006050:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006053:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006057:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000605b:	31 db                	xor    ebx,ebx
c000605d:	85 ed                	test   ebp,ebp
c000605f:	75 3f                	jne    c00060a0 <f_getfree+0xe7>
c0006061:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006065:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0006069:	83 c0 01             	add    eax,0x1
c000606c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006070:	83 d2 00             	adc    edx,0x0
c0006073:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0006077:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000607b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000607f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006083:	e8 59 c1 ff ff       	call   c00021e1 <move_window>
c0006088:	85 c0                	test   eax,eax
c000608a:	0f 85 d3 00 00 00    	jne    c0006163 <f_getfree+0x1aa>
c0006090:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006094:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006098:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000609c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00060a0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060a4:	8d 4e f8             	lea    ecx,[esi-0x8]
c00060a7:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00060ab:	89 cf                	mov    edi,ecx
c00060ad:	85 f6                	test   esi,esi
c00060af:	74 12                	je     c00060c3 <f_getfree+0x10a>
c00060b1:	88 c1                	mov    cl,al
c00060b3:	83 e1 01             	and    ecx,0x1
c00060b6:	80 f9 01             	cmp    cl,0x1
c00060b9:	83 d3 00             	adc    ebx,0x0
c00060bc:	d0 e8                	shr    al,1
c00060be:	4e                   	dec    esi
c00060bf:	39 fe                	cmp    esi,edi
c00060c1:	75 ea                	jne    c00060ad <f_getfree+0xf4>
c00060c3:	45                   	inc    ebp
c00060c4:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00060ca:	85 f6                	test   esi,esi
c00060cc:	75 8f                	jne    c000605d <f_getfree+0xa4>
c00060ce:	e9 94 00 00 00       	jmp    c0006167 <f_getfree+0x1ae>
c00060d3:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00060d6:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00060d9:	31 f6                	xor    esi,esi
c00060db:	31 db                	xor    ebx,ebx
c00060dd:	85 f6                	test   esi,esi
c00060df:	75 1b                	jne    c00060fc <f_getfree+0x143>
c00060e1:	89 d7                	mov    edi,edx
c00060e3:	89 cd                	mov    ebp,ecx
c00060e5:	83 c7 01             	add    edi,0x1
c00060e8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060ec:	83 d5 00             	adc    ebp,0x0
c00060ef:	e8 ed c0 ff ff       	call   c00021e1 <move_window>
c00060f4:	85 c0                	test   eax,eax
c00060f6:	75 6b                	jne    c0006163 <f_getfree+0x1aa>
c00060f8:	89 fa                	mov    edx,edi
c00060fa:	89 e9                	mov    ecx,ebp
c00060fc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006100:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006104:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006108:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000610b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000610f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006113:	75 11                	jne    c0006126 <f_getfree+0x16d>
c0006115:	e8 e9 b8 ff ff       	call   c0001a03 <ld_word>
c000611a:	66 83 f8 01          	cmp    ax,0x1
c000611e:	83 d3 00             	adc    ebx,0x0
c0006121:	83 c6 02             	add    esi,0x2
c0006124:	eb 13                	jmp    c0006139 <f_getfree+0x180>
c0006126:	e8 e5 b8 ff ff       	call   c0001a10 <ld_dword>
c000612b:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006130:	83 f8 01             	cmp    eax,0x1
c0006133:	83 d3 00             	adc    ebx,0x0
c0006136:	83 c6 04             	add    esi,0x4
c0006139:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000613f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006143:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006147:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000614b:	75 90                	jne    c00060dd <f_getfree+0x124>
c000614d:	eb 18                	jmp    c0006167 <f_getfree+0x1ae>
c000614f:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0006157:	eb 0e                	jmp    c0006167 <f_getfree+0x1ae>
c0006159:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0006161:	eb 04                	jmp    c0006167 <f_getfree+0x1ae>
c0006163:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006167:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000616b:	89 18                	mov    DWORD PTR [eax],ebx
c000616d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006171:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006174:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0006178:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000617c:	83 c4 5c             	add    esp,0x5c
c000617f:	5b                   	pop    ebx
c0006180:	5e                   	pop    esi
c0006181:	5f                   	pop    edi
c0006182:	5d                   	pop    ebp
c0006183:	c3                   	ret    

c0006184 <f_truncate>:
c0006184:	56                   	push   esi
c0006185:	53                   	push   ebx
c0006186:	83 ec 14             	sub    esp,0x14
c0006189:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000618d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0006191:	89 d8                	mov    eax,ebx
c0006193:	e8 6e bf ff ff       	call   c0002106 <validate>
c0006198:	89 c6                	mov    esi,eax
c000619a:	85 c0                	test   eax,eax
c000619c:	0f 85 d2 00 00 00    	jne    c0006274 <f_truncate+0xf0>
c00061a2:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00061a6:	85 f6                	test   esi,esi
c00061a8:	0f 85 c6 00 00 00    	jne    c0006274 <f_truncate+0xf0>
c00061ae:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00061b2:	0f 84 b7 00 00 00    	je     c000626f <f_truncate+0xeb>
c00061b8:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00061bb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00061be:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00061c1:	89 d1                	mov    ecx,edx
c00061c3:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00061c6:	0f 83 a8 00 00 00    	jae    c0006274 <f_truncate+0xf0>
c00061cc:	09 c2                	or     edx,eax
c00061ce:	75 15                	jne    c00061e5 <f_truncate+0x61>
c00061d0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00061d3:	31 c9                	xor    ecx,ecx
c00061d5:	89 d8                	mov    eax,ebx
c00061d7:	e8 7a d0 ff ff       	call   c0003256 <remove_chain>
c00061dc:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00061e3:	eb 35                	jmp    c000621a <f_truncate+0x96>
c00061e5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00061e8:	89 d8                	mov    eax,ebx
c00061ea:	e8 7a cb ff ff       	call   c0002d69 <get_fat>
c00061ef:	89 c2                	mov    edx,eax
c00061f1:	b8 01 00 00 00       	mov    eax,0x1
c00061f6:	83 fa ff             	cmp    edx,0xffffffff
c00061f9:	74 1f                	je     c000621a <f_truncate+0x96>
c00061fb:	b8 02 00 00 00       	mov    eax,0x2
c0006200:	83 fa 01             	cmp    edx,0x1
c0006203:	74 15                	je     c000621a <f_truncate+0x96>
c0006205:	31 c0                	xor    eax,eax
c0006207:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000620b:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000620e:	76 0a                	jbe    c000621a <f_truncate+0x96>
c0006210:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006213:	89 d8                	mov    eax,ebx
c0006215:	e8 3c d0 ff ff       	call   c0003256 <remove_chain>
c000621a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000621d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006220:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006223:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006226:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006229:	83 ca 40             	or     edx,0x40
c000622c:	85 c0                	test   eax,eax
c000622e:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006231:	75 35                	jne    c0006268 <f_truncate+0xe4>
c0006233:	84 d2                	test   dl,dl
c0006235:	79 3d                	jns    c0006274 <f_truncate+0xf0>
c0006237:	83 ec 0c             	sub    esp,0xc
c000623a:	8d 43 50             	lea    eax,[ebx+0x50]
c000623d:	6a 01                	push   0x1
c000623f:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006242:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006245:	50                   	push   eax
c0006246:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000624a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000624e:	50                   	push   eax
c000624f:	e8 7a b7 ff ff       	call   c00019ce <disk_write>
c0006254:	83 c4 20             	add    esp,0x20
c0006257:	85 c0                	test   eax,eax
c0006259:	75 08                	jne    c0006263 <f_truncate+0xdf>
c000625b:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000625f:	31 f6                	xor    esi,esi
c0006261:	eb 11                	jmp    c0006274 <f_truncate+0xf0>
c0006263:	b8 01 00 00 00       	mov    eax,0x1
c0006268:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c000626b:	89 c6                	mov    esi,eax
c000626d:	eb 05                	jmp    c0006274 <f_truncate+0xf0>
c000626f:	be 07 00 00 00       	mov    esi,0x7
c0006274:	89 f0                	mov    eax,esi
c0006276:	83 c4 14             	add    esp,0x14
c0006279:	5b                   	pop    ebx
c000627a:	5e                   	pop    esi
c000627b:	c3                   	ret    

c000627c <f_unlink>:
c000627c:	56                   	push   esi
c000627d:	b9 02 00 00 00       	mov    ecx,0x2
c0006282:	53                   	push   ebx
c0006283:	81 ec e4 00 00 00    	sub    esp,0xe4
c0006289:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000628d:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c0006294:	e8 fa c1 ff ff       	call   c0002493 <mount_volume>
c0006299:	85 c0                	test   eax,eax
c000629b:	0f 85 55 01 00 00    	jne    c00063f6 <f_unlink+0x17a>
c00062a1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062a5:	83 ec 0c             	sub    esp,0xc
c00062a8:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00062ac:	68 60 04 00 00       	push   0x460
c00062b1:	e8 80 1f 00 00       	call   c0008236 <ff_memalloc>
c00062b6:	83 c4 10             	add    esp,0x10
c00062b9:	89 c3                	mov    ebx,eax
c00062bb:	b8 11 00 00 00       	mov    eax,0x11
c00062c0:	85 db                	test   ebx,ebx
c00062c2:	0f 84 2e 01 00 00    	je     c00063f6 <f_unlink+0x17a>
c00062c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062cc:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00062d2:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00062d5:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00062d8:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c00062df:	8d 44 24 48          	lea    eax,[esp+0x48]
c00062e3:	e8 21 e9 ff ff       	call   c0004c09 <follow_path>
c00062e8:	85 c0                	test   eax,eax
c00062ea:	0f 85 f2 00 00 00    	jne    c00063e2 <f_unlink+0x166>
c00062f0:	b8 06 00 00 00       	mov    eax,0x6
c00062f5:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c00062fd:	0f 88 df 00 00 00    	js     c00063e2 <f_unlink+0x166>
c0006303:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006308:	74 0a                	je     c0006314 <f_unlink+0x98>
c000630a:	b8 07 00 00 00       	mov    eax,0x7
c000630f:	e9 ce 00 00 00       	jmp    c00063e2 <f_unlink+0x166>
c0006314:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006318:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000631c:	8a 02                	mov    al,BYTE PTR [edx]
c000631e:	3c 04                	cmp    al,0x4
c0006320:	75 12                	jne    c0006334 <f_unlink+0xb8>
c0006322:	8d 42 10             	lea    eax,[edx+0x10]
c0006325:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006329:	e8 a1 e8 ff ff       	call   c0004bcf <init_alloc_info.isra.2>
c000632e:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006332:	eb 0e                	jmp    c0006342 <f_unlink+0xc6>
c0006334:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000633b:	e8 3e e8 ff ff       	call   c0004b7e <ld_clust.isra.0>
c0006340:	89 c6                	mov    esi,eax
c0006342:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c0006347:	75 12                	jne    c000635b <f_unlink+0xdf>
c0006349:	8d 44 24 48          	lea    eax,[esp+0x48]
c000634d:	e8 94 d6 ff ff       	call   c00039e6 <dir_remove>
c0006352:	85 c0                	test   eax,eax
c0006354:	74 6c                	je     c00063c2 <f_unlink+0x146>
c0006356:	e9 87 00 00 00       	jmp    c00063e2 <f_unlink+0x166>
c000635b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000635f:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c0006366:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c000636d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006370:	75 21                	jne    c0006393 <f_unlink+0x117>
c0006372:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0006376:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000637a:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c0006381:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c0006388:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c000638c:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c0006393:	31 d2                	xor    edx,edx
c0006395:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000639c:	e8 be cb ff ff       	call   c0002f5f <dir_sdi>
c00063a1:	85 c0                	test   eax,eax
c00063a3:	75 3d                	jne    c00063e2 <f_unlink+0x166>
c00063a5:	31 d2                	xor    edx,edx
c00063a7:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063ae:	e8 bc d3 ff ff       	call   c000376f <dir_read>
c00063b3:	85 c0                	test   eax,eax
c00063b5:	0f 84 4f ff ff ff    	je     c000630a <f_unlink+0x8e>
c00063bb:	83 f8 04             	cmp    eax,0x4
c00063be:	75 22                	jne    c00063e2 <f_unlink+0x166>
c00063c0:	eb 87                	jmp    c0006349 <f_unlink+0xcd>
c00063c2:	85 f6                	test   esi,esi
c00063c4:	75 0b                	jne    c00063d1 <f_unlink+0x155>
c00063c6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063ca:	e8 3d df ff ff       	call   c000430c <sync_fs>
c00063cf:	eb 11                	jmp    c00063e2 <f_unlink+0x166>
c00063d1:	31 c9                	xor    ecx,ecx
c00063d3:	89 f2                	mov    edx,esi
c00063d5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00063d9:	e8 78 ce ff ff       	call   c0003256 <remove_chain>
c00063de:	85 c0                	test   eax,eax
c00063e0:	74 e4                	je     c00063c6 <f_unlink+0x14a>
c00063e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063e6:	83 ec 0c             	sub    esp,0xc
c00063e9:	53                   	push   ebx
c00063ea:	e8 5d 1e 00 00       	call   c000824c <ff_memfree>
c00063ef:	83 c4 10             	add    esp,0x10
c00063f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063f6:	81 c4 e4 00 00 00    	add    esp,0xe4
c00063fc:	5b                   	pop    ebx
c00063fd:	5e                   	pop    esi
c00063fe:	c3                   	ret    

c00063ff <f_mkdir>:
c00063ff:	57                   	push   edi
c0006400:	b9 02 00 00 00       	mov    ecx,0x2
c0006405:	56                   	push   esi
c0006406:	53                   	push   ebx
c0006407:	83 c4 80             	add    esp,0xffffff80
c000640a:	8d 54 24 08          	lea    edx,[esp+0x8]
c000640e:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006415:	e8 79 c0 ff ff       	call   c0002493 <mount_volume>
c000641a:	89 c3                	mov    ebx,eax
c000641c:	85 c0                	test   eax,eax
c000641e:	0f 85 fe 01 00 00    	jne    c0006622 <f_mkdir+0x223>
c0006424:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006428:	bb 11 00 00 00       	mov    ebx,0x11
c000642d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006431:	83 ec 0c             	sub    esp,0xc
c0006434:	68 60 04 00 00       	push   0x460
c0006439:	e8 f8 1d 00 00       	call   c0008236 <ff_memalloc>
c000643e:	83 c4 10             	add    esp,0x10
c0006441:	89 c7                	mov    edi,eax
c0006443:	85 c0                	test   eax,eax
c0006445:	0f 84 d7 01 00 00    	je     c0006622 <f_mkdir+0x223>
c000644b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000644f:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006455:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0006458:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000645b:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006462:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006466:	e8 9e e7 ff ff       	call   c0004c09 <follow_path>
c000646b:	89 c3                	mov    ebx,eax
c000646d:	85 c0                	test   eax,eax
c000646f:	74 3e                	je     c00064af <f_mkdir+0xb0>
c0006471:	83 f8 04             	cmp    eax,0x4
c0006474:	75 3e                	jne    c00064b4 <f_mkdir+0xb5>
c0006476:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000647a:	31 d2                	xor    edx,edx
c000647c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006480:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006484:	e8 ce cb ff ff       	call   c0003057 <create_chain>
c0006489:	89 c6                	mov    esi,eax
c000648b:	85 c0                	test   eax,eax
c000648d:	74 0c                	je     c000649b <f_mkdir+0x9c>
c000648f:	bb 02 00 00 00       	mov    ebx,0x2
c0006494:	83 f8 01             	cmp    eax,0x1
c0006497:	74 07                	je     c00064a0 <f_mkdir+0xa1>
c0006499:	eb 2a                	jmp    c00064c5 <f_mkdir+0xc6>
c000649b:	bb 07 00 00 00       	mov    ebx,0x7
c00064a0:	31 c9                	xor    ecx,ecx
c00064a2:	89 f2                	mov    edx,esi
c00064a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064a8:	e8 a9 cd ff ff       	call   c0003256 <remove_chain>
c00064ad:	eb 05                	jmp    c00064b4 <f_mkdir+0xb5>
c00064af:	bb 08 00 00 00       	mov    ebx,0x8
c00064b4:	83 ec 0c             	sub    esp,0xc
c00064b7:	57                   	push   edi
c00064b8:	e8 8f 1d 00 00       	call   c000824c <ff_memfree>
c00064bd:	83 c4 10             	add    esp,0x10
c00064c0:	e9 5d 01 00 00       	jmp    c0006622 <f_mkdir+0x223>
c00064c5:	bb 01 00 00 00       	mov    ebx,0x1
c00064ca:	83 f8 ff             	cmp    eax,0xffffffff
c00064cd:	74 d1                	je     c00064a0 <f_mkdir+0xa1>
c00064cf:	89 f2                	mov    edx,esi
c00064d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064d5:	e8 c4 ce ff ff       	call   c000339e <dir_clear>
c00064da:	89 c3                	mov    ebx,eax
c00064dc:	85 c0                	test   eax,eax
c00064de:	75 c0                	jne    c00064a0 <f_mkdir+0xa1>
c00064e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064e4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064e7:	74 69                	je     c0006552 <f_mkdir+0x153>
c00064e9:	b9 0b 00 00 00       	mov    ecx,0xb
c00064ee:	83 c0 54             	add    eax,0x54
c00064f1:	ba 20 00 00 00       	mov    edx,0x20
c00064f6:	e8 9c b5 ff ff       	call   c0001a97 <mem_set>
c00064fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064ff:	ba 00 00 21 50       	mov    edx,0x50210000
c0006504:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006508:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000650c:	83 c0 6a             	add    eax,0x6a
c000650f:	e8 65 b5 ff ff       	call   c0001a79 <st_dword>
c0006514:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006518:	89 f1                	mov    ecx,esi
c000651a:	8d 50 54             	lea    edx,[eax+0x54]
c000651d:	e8 85 e6 ff ff       	call   c0004ba7 <st_clust.isra.1>
c0006522:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006526:	b9 20 00 00 00       	mov    ecx,0x20
c000652b:	8d 50 54             	lea    edx,[eax+0x54]
c000652e:	83 c0 74             	add    eax,0x74
c0006531:	e8 4c b5 ff ff       	call   c0001a82 <mem_cpy>
c0006536:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000653a:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000653e:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006542:	8d 50 74             	lea    edx,[eax+0x74]
c0006545:	e8 5d e6 ff ff       	call   c0004ba7 <st_clust.isra.1>
c000654a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000654e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006552:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006556:	e8 2f db ff ff       	call   c000408a <dir_register>
c000655b:	89 c3                	mov    ebx,eax
c000655d:	85 c0                	test   eax,eax
c000655f:	0f 85 3b ff ff ff    	jne    c00064a0 <f_mkdir+0xa1>
c0006565:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006569:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000656c:	75 74                	jne    c00065e2 <f_mkdir+0x1e3>
c000656e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006571:	ba 00 00 21 50       	mov    edx,0x50210000
c0006576:	83 c0 0c             	add    eax,0xc
c0006579:	e8 fb b4 ff ff       	call   c0001a79 <st_dword>
c000657e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006582:	89 f2                	mov    edx,esi
c0006584:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006587:	83 c0 34             	add    eax,0x34
c000658a:	e8 ea b4 ff ff       	call   c0001a79 <st_dword>
c000658f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006593:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006597:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000659a:	c1 e2 09             	shl    edx,0x9
c000659d:	83 c0 38             	add    eax,0x38
c00065a0:	e8 d4 b4 ff ff       	call   c0001a79 <st_dword>
c00065a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a9:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065ad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065b0:	c1 e2 09             	shl    edx,0x9
c00065b3:	83 c0 28             	add    eax,0x28
c00065b6:	e8 be b4 ff ff       	call   c0001a79 <st_dword>
c00065bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065bf:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00065c2:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00065c6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065c9:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00065cd:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065d1:	e8 8b d3 ff ff       	call   c0003961 <store_xdir>
c00065d6:	89 c3                	mov    ebx,eax
c00065d8:	85 c0                	test   eax,eax
c00065da:	0f 85 d4 fe ff ff    	jne    c00064b4 <f_mkdir+0xb5>
c00065e0:	eb 30                	jmp    c0006612 <f_mkdir+0x213>
c00065e2:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00065e6:	ba 00 00 21 50       	mov    edx,0x50210000
c00065eb:	83 c0 16             	add    eax,0x16
c00065ee:	e8 86 b4 ff ff       	call   c0001a79 <st_dword>
c00065f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065f7:	89 f1                	mov    ecx,esi
c00065f9:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c00065fd:	e8 a5 e5 ff ff       	call   c0004ba7 <st_clust.isra.1>
c0006602:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006606:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000660a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000660e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006612:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006616:	e8 f1 dc ff ff       	call   c000430c <sync_fs>
c000661b:	89 c3                	mov    ebx,eax
c000661d:	e9 92 fe ff ff       	jmp    c00064b4 <f_mkdir+0xb5>
c0006622:	83 ec 80             	sub    esp,0xffffff80
c0006625:	89 d8                	mov    eax,ebx
c0006627:	5b                   	pop    ebx
c0006628:	5e                   	pop    esi
c0006629:	5f                   	pop    edi
c000662a:	c3                   	ret    

c000662b <f_rename>:
c000662b:	55                   	push   ebp
c000662c:	57                   	push   edi
c000662d:	56                   	push   esi
c000662e:	53                   	push   ebx
c000662f:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006635:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000663c:	e8 a4 b9 ff ff       	call   c0001fe5 <get_ldnumber>
c0006641:	b9 02 00 00 00       	mov    ecx,0x2
c0006646:	8d 54 24 14          	lea    edx,[esp+0x14]
c000664a:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006651:	e8 3d be ff ff       	call   c0002493 <mount_volume>
c0006656:	85 c0                	test   eax,eax
c0006658:	0f 85 b5 02 00 00    	jne    c0006913 <f_rename+0x2e8>
c000665e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006662:	83 ec 0c             	sub    esp,0xc
c0006665:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0006669:	68 60 04 00 00       	push   0x460
c000666e:	e8 c3 1b 00 00       	call   c0008236 <ff_memalloc>
c0006673:	83 c4 10             	add    esp,0x10
c0006676:	89 c3                	mov    ebx,eax
c0006678:	b8 11 00 00 00       	mov    eax,0x11
c000667d:	85 db                	test   ebx,ebx
c000667f:	0f 84 8e 02 00 00    	je     c0006913 <f_rename+0x2e8>
c0006685:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006689:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000668f:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006692:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006695:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c000669c:	8d 44 24 58          	lea    eax,[esp+0x58]
c00066a0:	e8 64 e5 ff ff       	call   c0004c09 <follow_path>
c00066a5:	85 c0                	test   eax,eax
c00066a7:	0f 85 52 02 00 00    	jne    c00068ff <f_rename+0x2d4>
c00066ad:	b8 06 00 00 00       	mov    eax,0x6
c00066b2:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00066ba:	0f 85 3f 02 00 00    	jne    c00068ff <f_rename+0x2d4>
c00066c0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066c4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066c7:	0f 85 05 01 00 00    	jne    c00067d2 <f_rename+0x1a7>
c00066cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00066d0:	b9 40 00 00 00       	mov    ecx,0x40
c00066d5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00066d9:	e8 a4 b3 ff ff       	call   c0001a82 <mem_cpy>
c00066de:	b9 4c 00 00 00       	mov    ecx,0x4c
c00066e3:	8d 54 24 58          	lea    edx,[esp+0x58]
c00066e7:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066ee:	e8 8f b3 ff ff       	call   c0001a82 <mem_cpy>
c00066f3:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c00066fa:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006701:	e8 03 e5 ff ff       	call   c0004c09 <follow_path>
c0006706:	85 c0                	test   eax,eax
c0006708:	75 29                	jne    c0006733 <f_rename+0x108>
c000670a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000670e:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006715:	74 0a                	je     c0006721 <f_rename+0xf6>
c0006717:	b8 08 00 00 00       	mov    eax,0x8
c000671c:	e9 de 01 00 00       	jmp    c00068ff <f_rename+0x2d4>
c0006721:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006728:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000672f:	75 e6                	jne    c0006717 <f_rename+0xec>
c0006731:	eb 09                	jmp    c000673c <f_rename+0x111>
c0006733:	83 f8 04             	cmp    eax,0x4
c0006736:	0f 85 c3 01 00 00    	jne    c00068ff <f_rename+0x2d4>
c000673c:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006743:	e8 42 d9 ff ff       	call   c000408a <dir_register>
c0006748:	85 c0                	test   eax,eax
c000674a:	0f 85 af 01 00 00    	jne    c00068ff <f_rename+0x2d4>
c0006750:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006754:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c0006757:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000675a:	89 c5                	mov    ebp,eax
c000675c:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c000675f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006763:	8d 46 24             	lea    eax,[esi+0x24]
c0006766:	e8 98 b2 ff ff       	call   c0001a03 <ld_word>
c000676b:	b9 40 00 00 00       	mov    ecx,0x40
c0006770:	89 c7                	mov    edi,eax
c0006772:	8d 54 24 18          	lea    edx,[esp+0x18]
c0006776:	89 f0                	mov    eax,esi
c0006778:	e8 05 b3 ff ff       	call   c0001a82 <mem_cpy>
c000677d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006781:	89 e9                	mov    ecx,ebp
c0006783:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006786:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c0006789:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c000678d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006791:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006794:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c0006797:	0f b7 d7             	movzx  edx,di
c000679a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000679d:	83 c0 24             	add    eax,0x24
c00067a0:	e8 d0 b2 ff ff       	call   c0001a75 <st_word>
c00067a5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067a9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067ac:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00067af:	a8 10                	test   al,0x10
c00067b1:	75 06                	jne    c00067b9 <f_rename+0x18e>
c00067b3:	83 c8 20             	or     eax,0x20
c00067b6:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00067b9:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067c0:	e8 9c d1 ff ff       	call   c0003961 <store_xdir>
c00067c5:	85 c0                	test   eax,eax
c00067c7:	0f 84 1c 01 00 00    	je     c00068e9 <f_rename+0x2be>
c00067cd:	e9 2d 01 00 00       	jmp    c00068ff <f_rename+0x2d4>
c00067d2:	b9 20 00 00 00       	mov    ecx,0x20
c00067d7:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00067de:	8d 44 24 18          	lea    eax,[esp+0x18]
c00067e2:	e8 9b b2 ff ff       	call   c0001a82 <mem_cpy>
c00067e7:	b9 4c 00 00 00       	mov    ecx,0x4c
c00067ec:	8d 54 24 58          	lea    edx,[esp+0x58]
c00067f0:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067f7:	e8 86 b2 ff ff       	call   c0001a82 <mem_cpy>
c00067fc:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006803:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000680a:	e8 fa e3 ff ff       	call   c0004c09 <follow_path>
c000680f:	85 c0                	test   eax,eax
c0006811:	75 27                	jne    c000683a <f_rename+0x20f>
c0006813:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006817:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000681e:	0f 85 f3 fe ff ff    	jne    c0006717 <f_rename+0xec>
c0006824:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000682b:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006832:	0f 85 df fe ff ff    	jne    c0006717 <f_rename+0xec>
c0006838:	eb 09                	jmp    c0006843 <f_rename+0x218>
c000683a:	83 f8 04             	cmp    eax,0x4
c000683d:	0f 85 bc 00 00 00    	jne    c00068ff <f_rename+0x2d4>
c0006843:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000684a:	e8 3b d8 ff ff       	call   c000408a <dir_register>
c000684f:	85 c0                	test   eax,eax
c0006851:	0f 85 a8 00 00 00    	jne    c00068ff <f_rename+0x2d4>
c0006857:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c000685e:	b9 13 00 00 00       	mov    ecx,0x13
c0006863:	8d 46 0d             	lea    eax,[esi+0xd]
c0006866:	8d 54 24 25          	lea    edx,[esp+0x25]
c000686a:	e8 13 b2 ff ff       	call   c0001a82 <mem_cpy>
c000686f:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006873:	a8 10                	test   al,0x10
c0006875:	75 03                	jne    c000687a <f_rename+0x24f>
c0006877:	83 c8 20             	or     eax,0x20
c000687a:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c000687d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006881:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006885:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006889:	74 5e                	je     c00068e9 <f_rename+0x2be>
c000688b:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006892:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006896:	74 51                	je     c00068e9 <f_rename+0x2be>
c0006898:	89 f2                	mov    edx,esi
c000689a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000689e:	8a 07                	mov    al,BYTE PTR [edi]
c00068a0:	e8 d9 e2 ff ff       	call   c0004b7e <ld_clust.isra.0>
c00068a5:	89 c2                	mov    edx,eax
c00068a7:	89 f8                	mov    eax,edi
c00068a9:	e8 ee b3 ff ff       	call   c0001c9c <clst2sect>
c00068ae:	89 c6                	mov    esi,eax
c00068b0:	89 d1                	mov    ecx,edx
c00068b2:	b8 02 00 00 00       	mov    eax,0x2
c00068b7:	09 f2                	or     edx,esi
c00068b9:	74 44                	je     c00068ff <f_rename+0x2d4>
c00068bb:	89 f2                	mov    edx,esi
c00068bd:	89 f8                	mov    eax,edi
c00068bf:	e8 1d b9 ff ff       	call   c00021e1 <move_window>
c00068c4:	85 c0                	test   eax,eax
c00068c6:	75 37                	jne    c00068ff <f_rename+0x2d4>
c00068c8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068cc:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c00068d0:	75 17                	jne    c00068e9 <f_rename+0x2be>
c00068d2:	8d 50 74             	lea    edx,[eax+0x74]
c00068d5:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c00068dc:	e8 c6 e2 ff ff       	call   c0004ba7 <st_clust.isra.1>
c00068e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00068e9:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068ed:	e8 f4 d0 ff ff       	call   c00039e6 <dir_remove>
c00068f2:	85 c0                	test   eax,eax
c00068f4:	75 09                	jne    c00068ff <f_rename+0x2d4>
c00068f6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068fa:	e8 0d da ff ff       	call   c000430c <sync_fs>
c00068ff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006903:	83 ec 0c             	sub    esp,0xc
c0006906:	53                   	push   ebx
c0006907:	e8 40 19 00 00       	call   c000824c <ff_memfree>
c000690c:	83 c4 10             	add    esp,0x10
c000690f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006913:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006919:	5b                   	pop    ebx
c000691a:	5e                   	pop    esi
c000691b:	5f                   	pop    edi
c000691c:	5d                   	pop    ebp
c000691d:	c3                   	ret    

c000691e <f_chmod>:
c000691e:	57                   	push   edi
c000691f:	b9 02 00 00 00       	mov    ecx,0x2
c0006924:	56                   	push   esi
c0006925:	53                   	push   ebx
c0006926:	83 ec 60             	sub    esp,0x60
c0006929:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000692d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006931:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006935:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006939:	e8 55 bb ff ff       	call   c0002493 <mount_volume>
c000693e:	85 c0                	test   eax,eax
c0006940:	0f 85 af 00 00 00    	jne    c00069f5 <f_chmod+0xd7>
c0006946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000694a:	83 ec 0c             	sub    esp,0xc
c000694d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006951:	68 60 04 00 00       	push   0x460
c0006956:	e8 db 18 00 00       	call   c0008236 <ff_memalloc>
c000695b:	83 c4 10             	add    esp,0x10
c000695e:	89 c6                	mov    esi,eax
c0006960:	b8 11 00 00 00       	mov    eax,0x11
c0006965:	85 f6                	test   esi,esi
c0006967:	0f 84 88 00 00 00    	je     c00069f5 <f_chmod+0xd7>
c000696d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006971:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006977:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000697a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000697d:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006981:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006985:	e8 7f e2 ff ff       	call   c0004c09 <follow_path>
c000698a:	85 c0                	test   eax,eax
c000698c:	75 53                	jne    c00069e1 <f_chmod+0xc3>
c000698e:	b8 06 00 00 00       	mov    eax,0x6
c0006993:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006998:	75 47                	jne    c00069e1 <f_chmod+0xc3>
c000699a:	89 f9                	mov    ecx,edi
c000699c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069a0:	83 e1 27             	and    ecx,0x27
c00069a3:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00069a6:	75 1d                	jne    c00069c5 <f_chmod+0xa7>
c00069a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069ab:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069ae:	21 cb                	and    ebx,ecx
c00069b0:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069b3:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c00069b6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069ba:	e8 a2 cf ff ff       	call   c0003961 <store_xdir>
c00069bf:	85 c0                	test   eax,eax
c00069c1:	75 1e                	jne    c00069e1 <f_chmod+0xc3>
c00069c3:	eb 13                	jmp    c00069d8 <f_chmod+0xba>
c00069c5:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00069c9:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069cc:	21 cb                	and    ebx,ecx
c00069ce:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069d1:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c00069d4:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069dc:	e8 2b d9 ff ff       	call   c000430c <sync_fs>
c00069e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00069e5:	83 ec 0c             	sub    esp,0xc
c00069e8:	56                   	push   esi
c00069e9:	e8 5e 18 00 00       	call   c000824c <ff_memfree>
c00069ee:	83 c4 10             	add    esp,0x10
c00069f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00069f5:	83 c4 60             	add    esp,0x60
c00069f8:	5b                   	pop    ebx
c00069f9:	5e                   	pop    esi
c00069fa:	5f                   	pop    edi
c00069fb:	c3                   	ret    

c00069fc <f_utime>:
c00069fc:	56                   	push   esi
c00069fd:	b9 02 00 00 00       	mov    ecx,0x2
c0006a02:	53                   	push   ebx
c0006a03:	83 ec 64             	sub    esp,0x64
c0006a06:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006a0a:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a0e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a12:	e8 7c ba ff ff       	call   c0002493 <mount_volume>
c0006a17:	85 c0                	test   eax,eax
c0006a19:	0f 85 b5 00 00 00    	jne    c0006ad4 <f_utime+0xd8>
c0006a1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a23:	83 ec 0c             	sub    esp,0xc
c0006a26:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006a2a:	68 60 04 00 00       	push   0x460
c0006a2f:	e8 02 18 00 00       	call   c0008236 <ff_memalloc>
c0006a34:	83 c4 10             	add    esp,0x10
c0006a37:	89 c3                	mov    ebx,eax
c0006a39:	b8 11 00 00 00       	mov    eax,0x11
c0006a3e:	85 db                	test   ebx,ebx
c0006a40:	0f 84 8e 00 00 00    	je     c0006ad4 <f_utime+0xd8>
c0006a46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a4a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006a50:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006a53:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006a56:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006a5a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a5e:	e8 a6 e1 ff ff       	call   c0004c09 <follow_path>
c0006a63:	85 c0                	test   eax,eax
c0006a65:	75 59                	jne    c0006ac0 <f_utime+0xc4>
c0006a67:	b8 06 00 00 00       	mov    eax,0x6
c0006a6c:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006a71:	75 4d                	jne    c0006ac0 <f_utime+0xc4>
c0006a73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a77:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006a7b:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006a7f:	c1 e2 10             	shl    edx,0x10
c0006a82:	09 ca                	or     edx,ecx
c0006a84:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006a87:	75 1a                	jne    c0006aa3 <f_utime+0xa7>
c0006a89:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a8c:	83 c0 0c             	add    eax,0xc
c0006a8f:	e8 e5 af ff ff       	call   c0001a79 <st_dword>
c0006a94:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a98:	e8 c4 ce ff ff       	call   c0003961 <store_xdir>
c0006a9d:	85 c0                	test   eax,eax
c0006a9f:	75 1f                	jne    c0006ac0 <f_utime+0xc4>
c0006aa1:	eb 14                	jmp    c0006ab7 <f_utime+0xbb>
c0006aa3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006aa7:	83 c0 16             	add    eax,0x16
c0006aaa:	e8 ca af ff ff       	call   c0001a79 <st_dword>
c0006aaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ab3:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ab7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006abb:	e8 4c d8 ff ff       	call   c000430c <sync_fs>
c0006ac0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ac4:	83 ec 0c             	sub    esp,0xc
c0006ac7:	53                   	push   ebx
c0006ac8:	e8 7f 17 00 00       	call   c000824c <ff_memfree>
c0006acd:	83 c4 10             	add    esp,0x10
c0006ad0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006ad4:	83 c4 64             	add    esp,0x64
c0006ad7:	5b                   	pop    ebx
c0006ad8:	5e                   	pop    esi
c0006ad9:	c3                   	ret    

c0006ada <f_getlabel>:
c0006ada:	55                   	push   ebp
c0006adb:	31 c9                	xor    ecx,ecx
c0006add:	57                   	push   edi
c0006ade:	56                   	push   esi
c0006adf:	53                   	push   ebx
c0006ae0:	83 ec 6c             	sub    esp,0x6c
c0006ae3:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006ae7:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006aee:	e8 a0 b9 ff ff       	call   c0002493 <mount_volume>
c0006af3:	89 c6                	mov    esi,eax
c0006af5:	85 c0                	test   eax,eax
c0006af7:	0f 85 c1 01 00 00    	jne    c0006cbe <f_getlabel+0x1e4>
c0006afd:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006b05:	0f 84 5f 01 00 00    	je     c0006c6a <f_getlabel+0x190>
c0006b0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b0f:	31 d2                	xor    edx,edx
c0006b11:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006b15:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006b1d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b21:	e8 39 c4 ff ff       	call   c0002f5f <dir_sdi>
c0006b26:	85 c0                	test   eax,eax
c0006b28:	0f 85 2d 01 00 00    	jne    c0006c5b <f_getlabel+0x181>
c0006b2e:	ba 01 00 00 00       	mov    edx,0x1
c0006b33:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b37:	e8 33 cc ff ff       	call   c000376f <dir_read>
c0006b3c:	85 c0                	test   eax,eax
c0006b3e:	0f 85 17 01 00 00    	jne    c0006c5b <f_getlabel+0x181>
c0006b44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b48:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006b4b:	74 09                	je     c0006b56 <f_getlabel+0x7c>
c0006b4d:	31 db                	xor    ebx,ebx
c0006b4f:	31 c9                	xor    ecx,ecx
c0006b51:	e9 c8 00 00 00       	jmp    c0006c1e <f_getlabel+0x144>
c0006b56:	31 ed                	xor    ebp,ebp
c0006b58:	31 db                	xor    ebx,ebx
c0006b5a:	31 ff                	xor    edi,edi
c0006b5c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006b60:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006b64:	39 fa                	cmp    edx,edi
c0006b66:	76 4b                	jbe    c0006bb3 <f_getlabel+0xd9>
c0006b68:	47                   	inc    edi
c0006b69:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006b6c:	01 d0                	add    eax,edx
c0006b6e:	e8 90 ae ff ff       	call   c0001a03 <ld_word>
c0006b73:	66 85 ed             	test   bp,bp
c0006b76:	75 0d                	jne    c0006b85 <f_getlabel+0xab>
c0006b78:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006b7e:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006b83:	76 28                	jbe    c0006bad <f_getlabel+0xd3>
c0006b85:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b8c:	89 e9                	mov    ecx,ebp
c0006b8e:	01 da                	add    edx,ebx
c0006b90:	c1 e1 10             	shl    ecx,0x10
c0006b93:	0f b7 c0             	movzx  eax,ax
c0006b96:	09 c8                	or     eax,ecx
c0006b98:	b9 04 00 00 00       	mov    ecx,0x4
c0006b9d:	e8 01 b0 ff ff       	call   c0001ba3 <put_utf>
c0006ba2:	84 c0                	test   al,al
c0006ba4:	74 0b                	je     c0006bb1 <f_getlabel+0xd7>
c0006ba6:	0f b6 c0             	movzx  eax,al
c0006ba9:	01 c3                	add    ebx,eax
c0006bab:	31 c0                	xor    eax,eax
c0006bad:	89 c5                	mov    ebp,eax
c0006baf:	eb ab                	jmp    c0006b5c <f_getlabel+0x82>
c0006bb1:	31 db                	xor    ebx,ebx
c0006bb3:	66 85 ed             	test   bp,bp
c0006bb6:	74 02                	je     c0006bba <f_getlabel+0xe0>
c0006bb8:	31 db                	xor    ebx,ebx
c0006bba:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006bc1:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006bc5:	e9 a0 00 00 00       	jmp    c0006c6a <f_getlabel+0x190>
c0006bca:	83 ff 0b             	cmp    edi,0xb
c0006bcd:	74 11                	je     c0006be0 <f_getlabel+0x106>
c0006bcf:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006bd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006bd8:	8d 79 02             	lea    edi,[ecx+0x2]
c0006bdb:	c1 e0 08             	shl    eax,0x8
c0006bde:	09 c2                	or     edx,eax
c0006be0:	0f b7 d2             	movzx  edx,dx
c0006be3:	50                   	push   eax
c0006be4:	50                   	push   eax
c0006be5:	68 b5 01 00 00       	push   0x1b5
c0006bea:	52                   	push   edx
c0006beb:	e8 03 17 00 00       	call   c00082f3 <ff_oem2uni>
c0006bf0:	83 c4 10             	add    esp,0x10
c0006bf3:	66 85 c0             	test   ax,ax
c0006bf6:	74 46                	je     c0006c3e <f_getlabel+0x164>
c0006bf8:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006bff:	0f b7 c0             	movzx  eax,ax
c0006c02:	01 da                	add    edx,ebx
c0006c04:	b9 04 00 00 00       	mov    ecx,0x4
c0006c09:	e8 95 af ff ff       	call   c0001ba3 <put_utf>
c0006c0e:	84 c0                	test   al,al
c0006c10:	74 2c                	je     c0006c3e <f_getlabel+0x164>
c0006c12:	0f b6 c0             	movzx  eax,al
c0006c15:	01 c3                	add    ebx,eax
c0006c17:	83 ff 0b             	cmp    edi,0xb
c0006c1a:	74 24                	je     c0006c40 <f_getlabel+0x166>
c0006c1c:	89 f9                	mov    ecx,edi
c0006c1e:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006c22:	8d 79 01             	lea    edi,[ecx+0x1]
c0006c25:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006c2a:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006c2f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c33:	e8 9f ae ff ff       	call   c0001ad7 <dbc_1st>
c0006c38:	85 c0                	test   eax,eax
c0006c3a:	74 a4                	je     c0006be0 <f_getlabel+0x106>
c0006c3c:	eb 8c                	jmp    c0006bca <f_getlabel+0xf0>
c0006c3e:	31 db                	xor    ebx,ebx
c0006c40:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006c47:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006c4a:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006c51:	74 17                	je     c0006c6a <f_getlabel+0x190>
c0006c53:	4b                   	dec    ebx
c0006c54:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006c57:	74 ee                	je     c0006c47 <f_getlabel+0x16d>
c0006c59:	eb 0f                	jmp    c0006c6a <f_getlabel+0x190>
c0006c5b:	83 f8 04             	cmp    eax,0x4
c0006c5e:	75 5c                	jne    c0006cbc <f_getlabel+0x1e2>
c0006c60:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006c67:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006c6a:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006c72:	74 4a                	je     c0006cbe <f_getlabel+0x1e4>
c0006c74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c78:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006c7b:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006c7e:	e8 5e b5 ff ff       	call   c00021e1 <move_window>
c0006c83:	89 c6                	mov    esi,eax
c0006c85:	85 c0                	test   eax,eax
c0006c87:	75 35                	jne    c0006cbe <f_getlabel+0x1e4>
c0006c89:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006c8d:	b8 43 00 00 00       	mov    eax,0x43
c0006c92:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006c94:	80 f9 03             	cmp    cl,0x3
c0006c97:	74 0f                	je     c0006ca8 <f_getlabel+0x1ce>
c0006c99:	31 c0                	xor    eax,eax
c0006c9b:	80 f9 04             	cmp    cl,0x4
c0006c9e:	0f 94 c0             	sete   al
c0006ca1:	48                   	dec    eax
c0006ca2:	83 e0 c3             	and    eax,0xffffffc3
c0006ca5:	83 c0 64             	add    eax,0x64
c0006ca8:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006cac:	e8 5f ad ff ff       	call   c0001a10 <ld_dword>
c0006cb1:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006cb8:	89 07                	mov    DWORD PTR [edi],eax
c0006cba:	eb 02                	jmp    c0006cbe <f_getlabel+0x1e4>
c0006cbc:	89 c6                	mov    esi,eax
c0006cbe:	83 c4 6c             	add    esp,0x6c
c0006cc1:	89 f0                	mov    eax,esi
c0006cc3:	5b                   	pop    ebx
c0006cc4:	5e                   	pop    esi
c0006cc5:	5f                   	pop    edi
c0006cc6:	5d                   	pop    ebp
c0006cc7:	c3                   	ret    

c0006cc8 <f_setlabel>:
c0006cc8:	56                   	push   esi
c0006cc9:	b9 02 00 00 00       	mov    ecx,0x2
c0006cce:	53                   	push   ebx
c0006ccf:	83 ec 74             	sub    esp,0x74
c0006cd2:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006cd6:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006cdd:	e8 b1 b7 ff ff       	call   c0002493 <mount_volume>
c0006ce2:	89 c6                	mov    esi,eax
c0006ce4:	85 c0                	test   eax,eax
c0006ce6:	0f 85 41 02 00 00    	jne    c0006f2d <f_setlabel+0x265>
c0006cec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006cf0:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cf3:	0f 85 8e 00 00 00    	jne    c0006d87 <f_setlabel+0xbf>
c0006cf9:	b9 16 00 00 00       	mov    ecx,0x16
c0006cfe:	31 d2                	xor    edx,edx
c0006d00:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d04:	31 db                	xor    ebx,ebx
c0006d06:	e8 8c ad ff ff       	call   c0001a97 <mem_set>
c0006d0b:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d12:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d15:	0f 86 0a 01 00 00    	jbe    c0006e25 <f_setlabel+0x15d>
c0006d1b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d22:	e8 b6 ad ff ff       	call   c0001add <tchar2uni>
c0006d27:	89 c6                	mov    esi,eax
c0006d29:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d2e:	76 2a                	jbe    c0006d5a <f_setlabel+0x92>
c0006d30:	83 f8 ff             	cmp    eax,0xffffffff
c0006d33:	74 05                	je     c0006d3a <f_setlabel+0x72>
c0006d35:	83 fb 09             	cmp    ebx,0x9
c0006d38:	76 0a                	jbe    c0006d44 <f_setlabel+0x7c>
c0006d3a:	be 06 00 00 00       	mov    esi,0x6
c0006d3f:	e9 e9 01 00 00       	jmp    c0006f2d <f_setlabel+0x265>
c0006d44:	89 c2                	mov    edx,eax
c0006d46:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d4a:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d4d:	c1 ea 10             	shr    edx,0x10
c0006d50:	01 c8                	add    eax,ecx
c0006d52:	43                   	inc    ebx
c0006d53:	e8 1d ad ff ff       	call   c0001a75 <st_word>
c0006d58:	eb 04                	jmp    c0006d5e <f_setlabel+0x96>
c0006d5a:	85 c0                	test   eax,eax
c0006d5c:	74 dc                	je     c0006d3a <f_setlabel+0x72>
c0006d5e:	89 f2                	mov    edx,esi
c0006d60:	b8 17 5f 02 c0       	mov    eax,0xc0025f17
c0006d65:	e8 5b ad ff ff       	call   c0001ac5 <chk_chr>
c0006d6a:	85 c0                	test   eax,eax
c0006d6c:	75 cc                	jne    c0006d3a <f_setlabel+0x72>
c0006d6e:	83 fb 0a             	cmp    ebx,0xa
c0006d71:	77 c7                	ja     c0006d3a <f_setlabel+0x72>
c0006d73:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d76:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d7a:	0f b7 d6             	movzx  edx,si
c0006d7d:	01 c8                	add    eax,ecx
c0006d7f:	43                   	inc    ebx
c0006d80:	e8 f0 ac ff ff       	call   c0001a75 <st_word>
c0006d85:	eb 84                	jmp    c0006d0b <f_setlabel+0x43>
c0006d87:	b9 0b 00 00 00       	mov    ecx,0xb
c0006d8c:	ba 20 00 00 00       	mov    edx,0x20
c0006d91:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d95:	31 db                	xor    ebx,ebx
c0006d97:	e8 fb ac ff ff       	call   c0001a97 <mem_set>
c0006d9c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006da3:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006da6:	76 60                	jbe    c0006e08 <f_setlabel+0x140>
c0006da8:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006daf:	e8 29 ad ff ff       	call   c0001add <tchar2uni>
c0006db4:	3d ff ff 00 00       	cmp    eax,0xffff
c0006db9:	0f 87 7b ff ff ff    	ja     c0006d3a <f_setlabel+0x72>
c0006dbf:	83 ec 0c             	sub    esp,0xc
c0006dc2:	50                   	push   eax
c0006dc3:	e8 97 15 00 00       	call   c000835f <ff_wtoupper>
c0006dc8:	5a                   	pop    edx
c0006dc9:	59                   	pop    ecx
c0006dca:	68 b5 01 00 00       	push   0x1b5
c0006dcf:	50                   	push   eax
c0006dd0:	e8 8e 14 00 00       	call   c0008263 <ff_uni2oem>
c0006dd5:	83 c4 10             	add    esp,0x10
c0006dd8:	89 c6                	mov    esi,eax
c0006dda:	66 85 c0             	test   ax,ax
c0006ddd:	0f 84 57 ff ff ff    	je     c0006d3a <f_setlabel+0x72>
c0006de3:	0f b7 d0             	movzx  edx,ax
c0006de6:	b8 10 5f 02 c0       	mov    eax,0xc0025f10
c0006deb:	e8 d5 ac ff ff       	call   c0001ac5 <chk_chr>
c0006df0:	85 c0                	test   eax,eax
c0006df2:	0f 85 42 ff ff ff    	jne    c0006d3a <f_setlabel+0x72>
c0006df8:	66 81 fe ff 00       	cmp    si,0xff
c0006dfd:	0f 87 14 01 00 00    	ja     c0006f17 <f_setlabel+0x24f>
c0006e03:	e9 fa 00 00 00       	jmp    c0006f02 <f_setlabel+0x23a>
c0006e08:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006e0d:	0f 84 27 ff ff ff    	je     c0006d3a <f_setlabel+0x72>
c0006e13:	85 db                	test   ebx,ebx
c0006e15:	74 0e                	je     c0006e25 <f_setlabel+0x15d>
c0006e17:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006e1a:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006e1f:	75 04                	jne    c0006e25 <f_setlabel+0x15d>
c0006e21:	89 c3                	mov    ebx,eax
c0006e23:	eb ee                	jmp    c0006e13 <f_setlabel+0x14b>
c0006e25:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e29:	31 d2                	xor    edx,edx
c0006e2b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006e2f:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006e37:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e3b:	e8 1f c1 ff ff       	call   c0002f5f <dir_sdi>
c0006e40:	89 c6                	mov    esi,eax
c0006e42:	85 c0                	test   eax,eax
c0006e44:	0f 85 e3 00 00 00    	jne    c0006f2d <f_setlabel+0x265>
c0006e4a:	ba 01 00 00 00       	mov    edx,0x1
c0006e4f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e53:	e8 17 c9 ff ff       	call   c000376f <dir_read>
c0006e58:	85 c0                	test   eax,eax
c0006e5a:	75 21                	jne    c0006e7d <f_setlabel+0x1b5>
c0006e5c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006e60:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e64:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006e67:	74 5d                	je     c0006ec6 <f_setlabel+0x1fe>
c0006e69:	85 db                	test   ebx,ebx
c0006e6b:	74 0b                	je     c0006e78 <f_setlabel+0x1b0>
c0006e6d:	b9 0b 00 00 00       	mov    ecx,0xb
c0006e72:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e76:	eb 70                	jmp    c0006ee8 <f_setlabel+0x220>
c0006e78:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006e7b:	eb 70                	jmp    c0006eed <f_setlabel+0x225>
c0006e7d:	83 f8 04             	cmp    eax,0x4
c0006e80:	75 7c                	jne    c0006efe <f_setlabel+0x236>
c0006e82:	85 db                	test   ebx,ebx
c0006e84:	0f 84 a3 00 00 00    	je     c0006f2d <f_setlabel+0x265>
c0006e8a:	ba 01 00 00 00       	mov    edx,0x1
c0006e8f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e93:	e8 51 ca ff ff       	call   c00038e9 <dir_alloc>
c0006e98:	89 c6                	mov    esi,eax
c0006e9a:	85 c0                	test   eax,eax
c0006e9c:	0f 85 8b 00 00 00    	jne    c0006f2d <f_setlabel+0x265>
c0006ea2:	31 d2                	xor    edx,edx
c0006ea4:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ea8:	b9 20 00 00 00       	mov    ecx,0x20
c0006ead:	e8 e5 ab ff ff       	call   c0001a97 <mem_set>
c0006eb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006eb6:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006eb9:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ebd:	75 18                	jne    c0006ed7 <f_setlabel+0x20f>
c0006ebf:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006ec2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ec6:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006ec9:	b9 16 00 00 00       	mov    ecx,0x16
c0006ece:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ed2:	83 c0 02             	add    eax,0x2
c0006ed5:	eb 9b                	jmp    c0006e72 <f_setlabel+0x1aa>
c0006ed7:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006edb:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ee0:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006ee4:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ee8:	e8 95 ab ff ff       	call   c0001a82 <mem_cpy>
c0006eed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006ef1:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ef5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006ef9:	e8 0e d4 ff ff       	call   c000430c <sync_fs>
c0006efe:	89 c6                	mov    esi,eax
c0006f00:	eb 2b                	jmp    c0006f2d <f_setlabel+0x265>
c0006f02:	83 fb 0a             	cmp    ebx,0xa
c0006f05:	0f 87 2f fe ff ff    	ja     c0006d3a <f_setlabel+0x72>
c0006f0b:	89 f0                	mov    eax,esi
c0006f0d:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f11:	43                   	inc    ebx
c0006f12:	e9 85 fe ff ff       	jmp    c0006d9c <f_setlabel+0xd4>
c0006f17:	83 fb 09             	cmp    ebx,0x9
c0006f1a:	0f 87 1a fe ff ff    	ja     c0006d3a <f_setlabel+0x72>
c0006f20:	89 f0                	mov    eax,esi
c0006f22:	66 c1 e8 08          	shr    ax,0x8
c0006f26:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f2a:	43                   	inc    ebx
c0006f2b:	eb de                	jmp    c0006f0b <f_setlabel+0x243>
c0006f2d:	89 f0                	mov    eax,esi
c0006f2f:	83 c4 74             	add    esp,0x74
c0006f32:	5b                   	pop    ebx
c0006f33:	5e                   	pop    esi
c0006f34:	c3                   	ret    

c0006f35 <f_forward>:
c0006f35:	55                   	push   ebp
c0006f36:	57                   	push   edi
c0006f37:	56                   	push   esi
c0006f38:	53                   	push   ebx
c0006f39:	83 ec 2c             	sub    esp,0x2c
c0006f3c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006f40:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006f44:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006f4a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006f4e:	89 d8                	mov    eax,ebx
c0006f50:	e8 b1 b1 ff ff       	call   c0002106 <validate>
c0006f55:	89 c5                	mov    ebp,eax
c0006f57:	85 c0                	test   eax,eax
c0006f59:	0f 85 aa 01 00 00    	jne    c0007109 <f_forward+0x1d4>
c0006f5f:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006f63:	85 ed                	test   ebp,ebp
c0006f65:	0f 85 9e 01 00 00    	jne    c0007109 <f_forward+0x1d4>
c0006f6b:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006f6f:	0f 84 8f 01 00 00    	je     c0007104 <f_forward+0x1cf>
c0006f75:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006f78:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006f7b:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006f7e:	bf 00 00 00 00       	mov    edi,0x0
c0006f83:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006f86:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006f8a:	89 d1                	mov    ecx,edx
c0006f8c:	19 f9                	sbb    ecx,edi
c0006f8e:	0f 83 cf 00 00 00    	jae    c0007063 <f_forward+0x12e>
c0006f94:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006f98:	e9 c6 00 00 00       	jmp    c0007063 <f_forward+0x12e>
c0006f9d:	50                   	push   eax
c0006f9e:	50                   	push   eax
c0006f9f:	6a 00                	push   0x0
c0006fa1:	6a 00                	push   0x0
c0006fa3:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006fa7:	83 c4 10             	add    esp,0x10
c0006faa:	85 c0                	test   eax,eax
c0006fac:	0f 84 57 01 00 00    	je     c0007109 <f_forward+0x1d4>
c0006fb2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006fb5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fb9:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006fbc:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0006fc0:	89 d7                	mov    edi,edx
c0006fc2:	8d 4e ff             	lea    ecx,[esi-0x1]
c0006fc5:	89 c6                	mov    esi,eax
c0006fc7:	0f ac fe 09          	shrd   esi,edi,0x9
c0006fcb:	21 ce                	and    esi,ecx
c0006fcd:	89 c1                	mov    ecx,eax
c0006fcf:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0006fd5:	0f 84 98 00 00 00    	je     c0007073 <f_forward+0x13e>
c0006fdb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fdf:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006fe2:	89 c8                	mov    eax,ecx
c0006fe4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006fe8:	e8 af ac ff ff       	call   c0001c9c <clst2sect>
c0006fed:	89 d7                	mov    edi,edx
c0006fef:	09 c7                	or     edi,eax
c0006ff1:	0f 84 9e 00 00 00    	je     c0007095 <f_forward+0x160>
c0006ff7:	31 ff                	xor    edi,edi
c0006ff9:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0006ffc:	01 c6                	add    esi,eax
c0006ffe:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007002:	11 d7                	adc    edi,edx
c0007004:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007007:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000700a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000700e:	39 fa                	cmp    edx,edi
c0007010:	0f 85 a2 00 00 00    	jne    c00070b8 <f_forward+0x183>
c0007016:	39 f0                	cmp    eax,esi
c0007018:	0f 85 9a 00 00 00    	jne    c00070b8 <f_forward+0x183>
c000701e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007021:	ba 00 02 00 00       	mov    edx,0x200
c0007026:	25 ff 01 00 00       	and    eax,0x1ff
c000702b:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000702f:	29 c2                	sub    edx,eax
c0007031:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007034:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007037:	39 d1                	cmp    ecx,edx
c0007039:	76 02                	jbe    c000703d <f_forward+0x108>
c000703b:	89 d1                	mov    ecx,edx
c000703d:	8d 73 50             	lea    esi,[ebx+0x50]
c0007040:	52                   	push   edx
c0007041:	01 c6                	add    esi,eax
c0007043:	52                   	push   edx
c0007044:	51                   	push   ecx
c0007045:	56                   	push   esi
c0007046:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000704a:	83 c4 10             	add    esp,0x10
c000704d:	85 c0                	test   eax,eax
c000704f:	74 44                	je     c0007095 <f_forward+0x160>
c0007051:	31 ff                	xor    edi,edi
c0007053:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c0007056:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0007059:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c000705d:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0007061:	01 07                	add    DWORD PTR [edi],eax
c0007063:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0007068:	0f 85 2f ff ff ff    	jne    c0006f9d <f_forward+0x68>
c000706e:	e9 96 00 00 00       	jmp    c0007109 <f_forward+0x1d4>
c0007073:	85 f6                	test   esi,esi
c0007075:	0f 85 60 ff ff ff    	jne    c0006fdb <f_forward+0xa6>
c000707b:	89 d7                	mov    edi,edx
c000707d:	09 c7                	or     edi,eax
c000707f:	75 05                	jne    c0007086 <f_forward+0x151>
c0007081:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007084:	eb 0a                	jmp    c0007090 <f_forward+0x15b>
c0007086:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007089:	89 d8                	mov    eax,ebx
c000708b:	e8 d9 bc ff ff       	call   c0002d69 <get_fat>
c0007090:	83 f8 01             	cmp    eax,0x1
c0007093:	77 0b                	ja     c00070a0 <f_forward+0x16b>
c0007095:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007099:	bd 02 00 00 00       	mov    ebp,0x2
c000709e:	eb 69                	jmp    c0007109 <f_forward+0x1d4>
c00070a0:	83 f8 ff             	cmp    eax,0xffffffff
c00070a3:	75 0b                	jne    c00070b0 <f_forward+0x17b>
c00070a5:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00070a9:	bd 01 00 00 00       	mov    ebp,0x1
c00070ae:	eb 59                	jmp    c0007109 <f_forward+0x1d4>
c00070b0:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00070b3:	e9 23 ff ff ff       	jmp    c0006fdb <f_forward+0xa6>
c00070b8:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00070bc:	79 20                	jns    c00070de <f_forward+0x1a9>
c00070be:	83 ec 0c             	sub    esp,0xc
c00070c1:	6a 01                	push   0x1
c00070c3:	52                   	push   edx
c00070c4:	50                   	push   eax
c00070c5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070c9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00070cd:	50                   	push   eax
c00070ce:	e8 fb a8 ff ff       	call   c00019ce <disk_write>
c00070d3:	83 c4 20             	add    esp,0x20
c00070d6:	85 c0                	test   eax,eax
c00070d8:	75 cb                	jne    c00070a5 <f_forward+0x170>
c00070da:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00070de:	83 ec 0c             	sub    esp,0xc
c00070e1:	6a 01                	push   0x1
c00070e3:	57                   	push   edi
c00070e4:	56                   	push   esi
c00070e5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070e9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00070ed:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00070f1:	50                   	push   eax
c00070f2:	e8 c1 a8 ff ff       	call   c00019b8 <disk_read>
c00070f7:	83 c4 20             	add    esp,0x20
c00070fa:	85 c0                	test   eax,eax
c00070fc:	0f 84 1c ff ff ff    	je     c000701e <f_forward+0xe9>
c0007102:	eb a1                	jmp    c00070a5 <f_forward+0x170>
c0007104:	bd 07 00 00 00       	mov    ebp,0x7
c0007109:	83 c4 2c             	add    esp,0x2c
c000710c:	89 e8                	mov    eax,ebp
c000710e:	5b                   	pop    ebx
c000710f:	5e                   	pop    esi
c0007110:	5f                   	pop    edi
c0007111:	5d                   	pop    ebp
c0007112:	c3                   	ret    

c0007113 <f_mkfs>:
c0007113:	55                   	push   ebp
c0007114:	57                   	push   edi
c0007115:	56                   	push   esi
c0007116:	53                   	push   ebx
c0007117:	bb 0b 00 00 00       	mov    ebx,0xb
c000711c:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007122:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007129:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007130:	e8 b0 ae ff ff       	call   c0001fe5 <get_ldnumber>
c0007135:	85 c0                	test   eax,eax
c0007137:	0f 88 ec 10 00 00    	js     c0008229 <f_mkfs+0x1116>
c000713d:	8b 14 85 c0 a5 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5a40]
c0007144:	85 d2                	test   edx,edx
c0007146:	74 03                	je     c000714b <f_mkfs+0x38>
c0007148:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000714b:	85 f6                	test   esi,esi
c000714d:	75 05                	jne    c0007154 <f_mkfs+0x41>
c000714f:	be 00 5f 02 c0       	mov    esi,0xc0025f00
c0007154:	83 ec 0c             	sub    esp,0xc
c0007157:	0f b6 c0             	movzx  eax,al
c000715a:	bb 03 00 00 00       	mov    ebx,0x3
c000715f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007163:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007167:	e8 49 a8 ff ff       	call   c00019b5 <disk_initialize>
c000716c:	83 c4 10             	add    esp,0x10
c000716f:	a8 01                	test   al,0x1
c0007171:	0f 85 b2 10 00 00    	jne    c0008229 <f_mkfs+0x1116>
c0007177:	bb 0a 00 00 00       	mov    ebx,0xa
c000717c:	a8 04                	test   al,0x4
c000717e:	0f 85 a5 10 00 00    	jne    c0008229 <f_mkfs+0x1116>
c0007184:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007187:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000718b:	85 c0                	test   eax,eax
c000718d:	75 20                	jne    c00071af <f_mkfs+0x9c>
c000718f:	51                   	push   ecx
c0007190:	8d 44 24 78          	lea    eax,[esp+0x78]
c0007194:	50                   	push   eax
c0007195:	6a 03                	push   0x3
c0007197:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000719b:	e8 44 a8 ff ff       	call   c00019e4 <disk_ioctl>
c00071a0:	83 c4 10             	add    esp,0x10
c00071a3:	85 c0                	test   eax,eax
c00071a5:	74 08                	je     c00071af <f_mkfs+0x9c>
c00071a7:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071af:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00071b3:	8d 42 ff             	lea    eax,[edx-0x1]
c00071b6:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071bb:	77 04                	ja     c00071c1 <f_mkfs+0xae>
c00071bd:	85 c2                	test   edx,eax
c00071bf:	74 08                	je     c00071c9 <f_mkfs+0xb6>
c00071c1:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071c9:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00071cc:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00071d0:	48                   	dec    eax
c00071d1:	3c 01                	cmp    al,0x1
c00071d3:	76 05                	jbe    c00071da <f_mkfs+0xc7>
c00071d5:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c00071da:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00071dd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00071e1:	48                   	dec    eax
c00071e2:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071e7:	77 07                	ja     c00071f0 <f_mkfs+0xdd>
c00071e9:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c00071ee:	74 08                	je     c00071f8 <f_mkfs+0xe5>
c00071f0:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c00071f8:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c00071fb:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007201:	77 07                	ja     c000720a <f_mkfs+0xf7>
c0007203:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007206:	85 d8                	test   eax,ebx
c0007208:	74 02                	je     c000720c <f_mkfs+0xf9>
c000720a:	31 db                	xor    ebx,ebx
c000720c:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007217:	77 0a                	ja     c0007223 <f_mkfs+0x110>
c0007219:	bb 11 00 00 00       	mov    ebx,0x11
c000721e:	e9 06 10 00 00       	jmp    c0008229 <f_mkfs+0x1116>
c0007223:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c000722a:	8b 36                	mov    esi,DWORD PTR [esi]
c000722c:	85 ed                	test   ebp,ebp
c000722e:	75 1e                	jne    c000724e <f_mkfs+0x13b>
c0007230:	83 ec 0c             	sub    esp,0xc
c0007233:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c000723a:	25 00 fe ff ff       	and    eax,0xfffffe00
c000723f:	50                   	push   eax
c0007240:	e8 f1 0f 00 00       	call   c0008236 <ff_memalloc>
c0007245:	83 c4 10             	add    esp,0x10
c0007248:	89 c5                	mov    ebp,eax
c000724a:	85 c0                	test   eax,eax
c000724c:	74 cb                	je     c0007219 <f_mkfs+0x106>
c000724e:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c0007256:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c000725e:	52                   	push   edx
c000725f:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007263:	50                   	push   eax
c0007264:	6a 01                	push   0x1
c0007266:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000726a:	e8 75 a7 ff ff       	call   c00019e4 <disk_ioctl>
c000726f:	83 c4 10             	add    esp,0x10
c0007272:	85 c0                	test   eax,eax
c0007274:	0f 85 4a 0f 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c000727a:	89 f1                	mov    ecx,esi
c000727c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007284:	83 e1 0f             	and    ecx,0xf
c0007287:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000728f:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c0007293:	83 e6 08             	and    esi,0x8
c0007296:	75 56                	jne    c00072ee <f_mkfs+0x1db>
c0007298:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c000729c:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00072a0:	83 ff 00             	cmp    edi,0x0
c00072a3:	76 20                	jbe    c00072c5 <f_mkfs+0x1b2>
c00072a5:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00072aa:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00072b2:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00072b8:	83 d7 ff             	adc    edi,0xffffffff
c00072bb:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072bf:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072c3:	eb 21                	jmp    c00072e6 <f_mkfs+0x1d3>
c00072c5:	ba 3f 00 00 00       	mov    edx,0x3f
c00072ca:	39 f2                	cmp    edx,esi
c00072cc:	19 f8                	sbb    eax,edi
c00072ce:	73 1e                	jae    c00072ee <f_mkfs+0x1db>
c00072d0:	83 c6 c1             	add    esi,0xffffffc1
c00072d3:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00072db:	83 d7 ff             	adc    edi,0xffffffff
c00072de:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072e2:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072e6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072ee:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00072f2:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00072f6:	89 04 24             	mov    DWORD PTR [esp],eax
c00072f9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00072fd:	31 c0                	xor    eax,eax
c00072ff:	ba 7f 00 00 00       	mov    edx,0x7f
c0007304:	89 c7                	mov    edi,eax
c0007306:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007309:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000730d:	0f 83 c5 0a 00 00    	jae    c0007dd8 <f_mkfs+0xcc5>
c0007313:	89 df                	mov    edi,ebx
c0007315:	c1 ef 09             	shr    edi,0x9
c0007318:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000731c:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007323:	c1 ef 09             	shr    edi,0x9
c0007326:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c000732b:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000732f:	74 29                	je     c000735a <f_mkfs+0x247>
c0007331:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007337:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000733c:	0f 97 c2             	seta   dl
c000733f:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007342:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007346:	0f 92 c0             	setb   al
c0007349:	08 c2                	or     dl,al
c000734b:	75 5b                	jne    c00073a8 <f_mkfs+0x295>
c000734d:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007351:	83 e0 07             	and    eax,0x7
c0007354:	3c 04                	cmp    al,0x4
c0007356:	74 50                	je     c00073a8 <f_mkfs+0x295>
c0007358:	eb 1b                	jmp    c0007375 <f_mkfs+0x262>
c000735a:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000735f:	0f 87 73 0a 00 00    	ja     c0007dd8 <f_mkfs+0xcc5>
c0007365:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000736b:	76 08                	jbe    c0007375 <f_mkfs+0x262>
c000736d:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007375:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007379:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c000737d:	83 e0 01             	and    eax,0x1
c0007380:	80 e1 02             	and    cl,0x2
c0007383:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007387:	74 0d                	je     c0007396 <f_mkfs+0x283>
c0007389:	84 c0                	test   al,al
c000738b:	0f 84 53 09 00 00    	je     c0007ce4 <f_mkfs+0xbd1>
c0007391:	e9 12 08 00 00       	jmp    c0007ba8 <f_mkfs+0xa95>
c0007396:	bb 13 00 00 00       	mov    ebx,0x13
c000739b:	84 c0                	test   al,al
c000739d:	0f 85 05 08 00 00    	jne    c0007ba8 <f_mkfs+0xa95>
c00073a3:	e9 39 0e 00 00       	jmp    c00081e1 <f_mkfs+0x10ce>
c00073a8:	31 c0                	xor    eax,eax
c00073aa:	ba ff 0f 00 00       	mov    edx,0xfff
c00073af:	89 c7                	mov    edi,eax
c00073b1:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073b4:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00073b8:	0f 83 1a 0a 00 00    	jae    c0007dd8 <f_mkfs+0xcc5>
c00073be:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00073c4:	77 39                	ja     c00073ff <f_mkfs+0x2ec>
c00073c6:	ba ff ff 07 00       	mov    edx,0x7ffff
c00073cb:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00073d3:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073d6:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00073da:	73 08                	jae    c00073e4 <f_mkfs+0x2d1>
c00073dc:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c00073e4:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c00073e9:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00073ec:	b8 00 00 00 00       	mov    eax,0x0
c00073f1:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00073f5:	73 08                	jae    c00073ff <f_mkfs+0x2ec>
c00073f7:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c00073ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007403:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007407:	83 c0 20             	add    eax,0x20
c000740a:	83 d2 00             	adc    edx,0x0
c000740d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007411:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007415:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007419:	31 d2                	xor    edx,edx
c000741b:	31 ff                	xor    edi,edi
c000741d:	52                   	push   edx
c000741e:	89 fb                	mov    ebx,edi
c0007420:	50                   	push   eax
c0007421:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007425:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007429:	e8 0e c1 01 00       	call   c002353c <__udivdi3>
c000742e:	83 c4 10             	add    esp,0x10
c0007431:	c1 e0 02             	shl    eax,0x2
c0007434:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007438:	05 07 02 00 00       	add    eax,0x207
c000743d:	89 f1                	mov    ecx,esi
c000743f:	c1 e8 09             	shr    eax,0x9
c0007442:	83 c1 ff             	add    ecx,0xffffffff
c0007445:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0007449:	83 d3 ff             	adc    ebx,0xffffffff
c000744c:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007450:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007454:	31 d2                	xor    edx,edx
c0007456:	01 c8                	add    eax,ecx
c0007458:	11 da                	adc    edx,ebx
c000745a:	89 c1                	mov    ecx,eax
c000745c:	f7 de                	neg    esi
c000745e:	89 d0                	mov    eax,edx
c0007460:	83 d7 00             	adc    edi,0x0
c0007463:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007467:	f7 df                	neg    edi
c0007469:	21 f1                	and    ecx,esi
c000746b:	21 f8                	and    eax,edi
c000746d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007471:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007475:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007479:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000747d:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c0007481:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007484:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007488:	0f ac d0 01          	shrd   eax,edx,0x1
c000748c:	89 df                	mov    edi,ebx
c000748e:	d1 ea                	shr    edx,1
c0007490:	39 c1                	cmp    ecx,eax
c0007492:	19 d7                	sbb    edi,edx
c0007494:	0f 83 3e 09 00 00    	jae    c0007dd8 <f_mkfs+0xcc5>
c000749a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000749e:	31 d2                	xor    edx,edx
c00074a0:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00074a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00074a8:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00074ac:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074af:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00074b3:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00074b7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00074bb:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00074bf:	83 f8 0f             	cmp    eax,0xf
c00074c2:	0f 86 10 09 00 00    	jbe    c0007dd8 <f_mkfs+0xcc5>
c00074c8:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00074d0:	0f 87 02 09 00 00    	ja     c0007dd8 <f_mkfs+0xcc5>
c00074d6:	31 d2                	xor    edx,edx
c00074d8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00074dc:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00074e4:	83 c0 07             	add    eax,0x7
c00074e7:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00074ef:	c1 e8 03             	shr    eax,0x3
c00074f2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00074f9:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00074fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007501:	c1 e0 09             	shl    eax,0x9
c0007504:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007508:	48                   	dec    eax
c0007509:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000750d:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007511:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007515:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007519:	31 d2                	xor    edx,edx
c000751b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000751f:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007526:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000752a:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000752f:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007533:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007537:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000753b:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000753f:	31 ff                	xor    edi,edi
c0007541:	31 f6                	xor    esi,esi
c0007543:	31 db                	xor    ebx,ebx
c0007545:	85 ff                	test   edi,edi
c0007547:	74 05                	je     c000754e <f_mkfs+0x43b>
c0007549:	4f                   	dec    edi
c000754a:	74 44                	je     c0007590 <f_mkfs+0x47d>
c000754c:	eb 4f                	jmp    c000759d <f_mkfs+0x48a>
c000754e:	83 ec 0c             	sub    esp,0xc
c0007551:	0f b7 c3             	movzx  eax,bx
c0007554:	50                   	push   eax
c0007555:	e8 05 0e 00 00       	call   c000835f <ff_wtoupper>
c000755a:	83 c4 10             	add    esp,0x10
c000755d:	89 c1                	mov    ecx,eax
c000755f:	8d 53 01             	lea    edx,[ebx+0x1]
c0007562:	66 39 c3             	cmp    bx,ax
c0007565:	75 3e                	jne    c00075a5 <f_mkfs+0x492>
c0007567:	be 01 00 00 00       	mov    esi,0x1
c000756c:	89 df                	mov    edi,ebx
c000756e:	66 01 f7             	add    di,si
c0007571:	75 07                	jne    c000757a <f_mkfs+0x467>
c0007573:	83 fe 7f             	cmp    esi,0x7f
c0007576:	77 31                	ja     c00075a9 <f_mkfs+0x496>
c0007578:	eb 16                	jmp    c0007590 <f_mkfs+0x47d>
c000757a:	83 ec 0c             	sub    esp,0xc
c000757d:	0f b7 ff             	movzx  edi,di
c0007580:	57                   	push   edi
c0007581:	e8 d9 0d 00 00       	call   c000835f <ff_wtoupper>
c0007586:	83 c4 10             	add    esp,0x10
c0007589:	39 c7                	cmp    edi,eax
c000758b:	75 e6                	jne    c0007573 <f_mkfs+0x460>
c000758d:	46                   	inc    esi
c000758e:	eb dc                	jmp    c000756c <f_mkfs+0x459>
c0007590:	31 c0                	xor    eax,eax
c0007592:	89 d9                	mov    ecx,ebx
c0007594:	4e                   	dec    esi
c0007595:	0f 95 c0             	setne  al
c0007598:	43                   	inc    ebx
c0007599:	89 c7                	mov    edi,eax
c000759b:	eb 14                	jmp    c00075b1 <f_mkfs+0x49e>
c000759d:	89 f1                	mov    ecx,esi
c000759f:	01 f3                	add    ebx,esi
c00075a1:	31 ff                	xor    edi,edi
c00075a3:	eb 0c                	jmp    c00075b1 <f_mkfs+0x49e>
c00075a5:	89 d3                	mov    ebx,edx
c00075a7:	eb 08                	jmp    c00075b1 <f_mkfs+0x49e>
c00075a9:	bf 02 00 00 00       	mov    edi,0x2
c00075ae:	83 c9 ff             	or     ecx,0xffffffff
c00075b1:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00075b5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075b8:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00075bc:	0f b6 c1             	movzx  eax,cl
c00075bf:	e8 3a a9 ff ff       	call   c0001efe <xsum32>
c00075c4:	66 c1 e9 08          	shr    cx,0x8
c00075c8:	89 c2                	mov    edx,eax
c00075ca:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075cd:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00075d1:	0f b7 c1             	movzx  eax,cx
c00075d4:	e8 25 a9 ff ff       	call   c0001efe <xsum32>
c00075d9:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c00075de:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00075e2:	66 85 db             	test   bx,bx
c00075e5:	74 1f                	je     c0007606 <f_mkfs+0x4f3>
c00075e7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075ea:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c00075f1:	83 c0 02             	add    eax,0x2
c00075f4:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c00075fa:	39 c2                	cmp    edx,eax
c00075fc:	74 08                	je     c0007606 <f_mkfs+0x4f3>
c00075fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0007601:	e9 3f ff ff ff       	jmp    c0007545 <f_mkfs+0x432>
c0007606:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007609:	83 ec 0c             	sub    esp,0xc
c000760c:	05 01 02 00 00       	add    eax,0x201
c0007611:	c1 e8 09             	shr    eax,0x9
c0007614:	50                   	push   eax
c0007615:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007619:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000761d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007621:	55                   	push   ebp
c0007622:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007626:	e8 a3 a3 ff ff       	call   c00019ce <disk_write>
c000762b:	83 c4 20             	add    esp,0x20
c000762e:	85 c0                	test   eax,eax
c0007630:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007633:	0f 85 8b 0b 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c0007639:	89 d0                	mov    eax,edx
c000763b:	31 d2                	xor    edx,edx
c000763d:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007641:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007645:	66 85 db             	test   bx,bx
c0007648:	74 04                	je     c000764e <f_mkfs+0x53b>
c000764a:	31 c0                	xor    eax,eax
c000764c:	eb b0                	jmp    c00075fe <f_mkfs+0x4eb>
c000764e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007652:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0007656:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c000765a:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007660:	31 d2                	xor    edx,edx
c0007662:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c000766d:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007671:	c1 eb 09             	shr    ebx,0x9
c0007674:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c000767b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000767f:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007683:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007687:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000768b:	8d 70 01             	lea    esi,[eax+0x1]
c000768e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007692:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007696:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c000769d:	31 d2                	xor    edx,edx
c000769f:	25 00 fe ff ff       	and    eax,0xfffffe00
c00076a4:	89 04 24             	mov    DWORD PTR [esp],eax
c00076a7:	89 c1                	mov    ecx,eax
c00076a9:	89 e8                	mov    eax,ebp
c00076ab:	e8 e7 a3 ff ff       	call   c0001a97 <mem_set>
c00076b0:	31 c0                	xor    eax,eax
c00076b2:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076b5:	76 10                	jbe    c00076c7 <f_mkfs+0x5b4>
c00076b7:	83 fe 07             	cmp    esi,0x7
c00076ba:	76 0b                	jbe    c00076c7 <f_mkfs+0x5b4>
c00076bc:	40                   	inc    eax
c00076bd:	83 ee 08             	sub    esi,0x8
c00076c0:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00076c5:	eb eb                	jmp    c00076b2 <f_mkfs+0x59f>
c00076c7:	b2 01                	mov    dl,0x1
c00076c9:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00076cd:	85 f6                	test   esi,esi
c00076cf:	74 0c                	je     c00076dd <f_mkfs+0x5ca>
c00076d1:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076d4:	76 07                	jbe    c00076dd <f_mkfs+0x5ca>
c00076d6:	08 11                	or     BYTE PTR [ecx],dl
c00076d8:	4e                   	dec    esi
c00076d9:	d1 e2                	shl    edx,1
c00076db:	eb f0                	jmp    c00076cd <f_mkfs+0x5ba>
c00076dd:	89 df                	mov    edi,ebx
c00076df:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00076e3:	76 04                	jbe    c00076e9 <f_mkfs+0x5d6>
c00076e5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00076e9:	83 ec 0c             	sub    esp,0xc
c00076ec:	57                   	push   edi
c00076ed:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00076f1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00076f5:	55                   	push   ebp
c00076f6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00076fa:	e8 cf a2 ff ff       	call   c00019ce <disk_write>
c00076ff:	83 c4 20             	add    esp,0x20
c0007702:	85 c0                	test   eax,eax
c0007704:	0f 85 ba 0a 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c000770a:	31 d2                	xor    edx,edx
c000770c:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007710:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007714:	29 fb                	sub    ebx,edi
c0007716:	0f 85 7a ff ff ff    	jne    c0007696 <f_mkfs+0x583>
c000771c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007720:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007728:	31 f6                	xor    esi,esi
c000772a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000772e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007731:	31 d2                	xor    edx,edx
c0007733:	89 e8                	mov    eax,ebp
c0007735:	e8 5d a3 ff ff       	call   c0001a97 <mem_set>
c000773a:	31 c9                	xor    ecx,ecx
c000773c:	85 db                	test   ebx,ebx
c000773e:	75 40                	jne    c0007780 <f_mkfs+0x66d>
c0007740:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007745:	89 e8                	mov    eax,ebp
c0007747:	bb 02 00 00 00       	mov    ebx,0x2
c000774c:	e8 28 a3 ff ff       	call   c0001a79 <st_dword>
c0007751:	8d 45 04             	lea    eax,[ebp+0x4]
c0007754:	83 ca ff             	or     edx,0xffffffff
c0007757:	e8 1d a3 ff ff       	call   c0001a79 <st_dword>
c000775c:	b9 08 00 00 00       	mov    ecx,0x8
c0007761:	eb 1d                	jmp    c0007780 <f_mkfs+0x66d>
c0007763:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007766:	76 3b                	jbe    c00077a3 <f_mkfs+0x690>
c0007768:	43                   	inc    ebx
c0007769:	83 fe 01             	cmp    esi,0x1
c000776c:	89 da                	mov    edx,ebx
c000776e:	77 03                	ja     c0007773 <f_mkfs+0x660>
c0007770:	83 ca ff             	or     edx,0xffffffff
c0007773:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007777:	4e                   	dec    esi
c0007778:	e8 fc a2 ff ff       	call   c0001a79 <st_dword>
c000777d:	83 c1 04             	add    ecx,0x4
c0007780:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007784:	85 f6                	test   esi,esi
c0007786:	75 db                	jne    c0007763 <f_mkfs+0x650>
c0007788:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c000778d:	77 14                	ja     c00077a3 <f_mkfs+0x690>
c000778f:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007793:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c000779a:	85 f6                	test   esi,esi
c000779c:	74 05                	je     c00077a3 <f_mkfs+0x690>
c000779e:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00077a1:	77 dd                	ja     c0007780 <f_mkfs+0x66d>
c00077a3:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00077a7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077ab:	39 cf                	cmp    edi,ecx
c00077ad:	76 02                	jbe    c00077b1 <f_mkfs+0x69e>
c00077af:	89 cf                	mov    edi,ecx
c00077b1:	83 ec 0c             	sub    esp,0xc
c00077b4:	57                   	push   edi
c00077b5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00077b9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00077bd:	55                   	push   ebp
c00077be:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00077c2:	e8 07 a2 ff ff       	call   c00019ce <disk_write>
c00077c7:	83 c4 20             	add    esp,0x20
c00077ca:	85 c0                	test   eax,eax
c00077cc:	0f 85 f2 09 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c00077d2:	31 d2                	xor    edx,edx
c00077d4:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c00077d8:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c00077dc:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c00077e0:	0f 85 48 ff ff ff    	jne    c000772e <f_mkfs+0x61b>
c00077e6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00077e9:	31 d2                	xor    edx,edx
c00077eb:	89 e8                	mov    eax,ebp
c00077ed:	31 ff                	xor    edi,edi
c00077ef:	e8 a3 a2 ff ff       	call   c0001a97 <mem_set>
c00077f4:	8d 45 34             	lea    eax,[ebp+0x34]
c00077f7:	ba 02 00 00 00       	mov    edx,0x2
c00077fc:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007800:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007804:	e8 70 a2 ff ff       	call   c0001a79 <st_dword>
c0007809:	8d 45 38             	lea    eax,[ebp+0x38]
c000780c:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007810:	e8 64 a2 ff ff       	call   c0001a79 <st_dword>
c0007815:	8d 45 44             	lea    eax,[ebp+0x44]
c0007818:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000781c:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007820:	e8 54 a2 ff ff       	call   c0001a79 <st_dword>
c0007825:	8d 45 54             	lea    eax,[ebp+0x54]
c0007828:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000782c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007830:	83 c2 02             	add    edx,0x2
c0007833:	e8 41 a2 ff ff       	call   c0001a79 <st_dword>
c0007838:	8d 45 58             	lea    eax,[ebp+0x58]
c000783b:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c000783f:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007843:	e8 31 a2 ff ff       	call   c0001a79 <st_dword>
c0007848:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000784c:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007851:	89 c6                	mov    esi,eax
c0007853:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007857:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000785b:	89 04 24             	mov    DWORD PTR [esp],eax
c000785e:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007862:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007865:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007869:	39 cb                	cmp    ebx,ecx
c000786b:	76 02                	jbe    c000786f <f_mkfs+0x75c>
c000786d:	89 cb                	mov    ebx,ecx
c000786f:	83 ec 0c             	sub    esp,0xc
c0007872:	53                   	push   ebx
c0007873:	57                   	push   edi
c0007874:	56                   	push   esi
c0007875:	55                   	push   ebp
c0007876:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000787a:	e8 4f a1 ff ff       	call   c00019ce <disk_write>
c000787f:	83 c4 20             	add    esp,0x20
c0007882:	85 c0                	test   eax,eax
c0007884:	0f 85 3a 09 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c000788a:	31 d2                	xor    edx,edx
c000788c:	b9 00 02 00 00       	mov    ecx,0x200
c0007891:	89 e8                	mov    eax,ebp
c0007893:	e8 ff a1 ff ff       	call   c0001a97 <mem_set>
c0007898:	31 d2                	xor    edx,edx
c000789a:	01 de                	add    esi,ebx
c000789c:	11 d7                	adc    edi,edx
c000789e:	29 1c 24             	sub    DWORD PTR [esp],ebx
c00078a1:	75 bf                	jne    c0007862 <f_mkfs+0x74f>
c00078a3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00078a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00078ab:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c00078b3:	b9 00 02 00 00       	mov    ecx,0x200
c00078b8:	31 d2                	xor    edx,edx
c00078ba:	89 e8                	mov    eax,ebp
c00078bc:	e8 d6 a1 ff ff       	call   c0001a97 <mem_set>
c00078c1:	b9 0b 00 00 00       	mov    ecx,0xb
c00078c6:	ba e0 5f 02 c0       	mov    edx,0xc0025fe0
c00078cb:	89 e8                	mov    eax,ebp
c00078cd:	e8 b0 a1 ff ff       	call   c0001a82 <mem_cpy>
c00078d2:	8d 45 40             	lea    eax,[ebp+0x40]
c00078d5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00078d9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00078dd:	e8 9a a1 ff ff       	call   c0001a7c <st_qword>
c00078e2:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00078e6:	8d 45 48             	lea    eax,[ebp+0x48]
c00078e9:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00078ed:	e8 8a a1 ff ff       	call   c0001a7c <st_qword>
c00078f2:	8d 45 50             	lea    eax,[ebp+0x50]
c00078f5:	ba 20 00 00 00       	mov    edx,0x20
c00078fa:	e8 7a a1 ff ff       	call   c0001a79 <st_dword>
c00078ff:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007903:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007907:	e8 6d a1 ff ff       	call   c0001a79 <st_dword>
c000790c:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007910:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007914:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007918:	e8 5c a1 ff ff       	call   c0001a79 <st_dword>
c000791d:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007920:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007924:	e8 50 a1 ff ff       	call   c0001a79 <st_dword>
c0007929:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000792d:	8d 50 02             	lea    edx,[eax+0x2]
c0007930:	8d 45 60             	lea    eax,[ebp+0x60]
c0007933:	e8 41 a1 ff ff       	call   c0001a79 <st_dword>
c0007938:	8d 45 64             	lea    eax,[ebp+0x64]
c000793b:	ba 00 00 21 50       	mov    edx,0x50210000
c0007940:	e8 34 a1 ff ff       	call   c0001a79 <st_dword>
c0007945:	8d 45 68             	lea    eax,[ebp+0x68]
c0007948:	ba 00 01 00 00       	mov    edx,0x100
c000794d:	e8 23 a1 ff ff       	call   c0001a75 <st_word>
c0007952:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007956:	b8 0a 00 00 00       	mov    eax,0xa
c000795b:	48                   	dec    eax
c000795c:	74 05                	je     c0007963 <f_mkfs+0x850>
c000795e:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007961:	eb f8                	jmp    c000795b <f_mkfs+0x848>
c0007963:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007967:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c000796b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000796f:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007973:	74 05                	je     c000797a <f_mkfs+0x867>
c0007975:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007978:	eb f5                	jmp    c000796f <f_mkfs+0x85c>
c000797a:	8d 45 78             	lea    eax,[ebp+0x78]
c000797d:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007982:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007988:	31 db                	xor    ebx,ebx
c000798a:	e8 e6 a0 ff ff       	call   c0001a75 <st_word>
c000798f:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007995:	ba 55 aa 00 00       	mov    edx,0xaa55
c000799a:	89 04 24             	mov    DWORD PTR [esp],eax
c000799d:	e8 d3 a0 ff ff       	call   c0001a75 <st_word>
c00079a2:	31 c9                	xor    ecx,ecx
c00079a4:	8d 41 96             	lea    eax,[ecx-0x6a]
c00079a7:	83 f8 01             	cmp    eax,0x1
c00079aa:	76 13                	jbe    c00079bf <f_mkfs+0x8ac>
c00079ac:	83 f9 70             	cmp    ecx,0x70
c00079af:	74 0e                	je     c00079bf <f_mkfs+0x8ac>
c00079b1:	89 da                	mov    edx,ebx
c00079b3:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c00079b8:	e8 41 a5 ff ff       	call   c0001efe <xsum32>
c00079bd:	89 c3                	mov    ebx,eax
c00079bf:	41                   	inc    ecx
c00079c0:	81 f9 00 02 00 00    	cmp    ecx,0x200
c00079c6:	75 dc                	jne    c00079a4 <f_mkfs+0x891>
c00079c8:	89 f0                	mov    eax,esi
c00079ca:	89 fa                	mov    edx,edi
c00079cc:	83 c0 01             	add    eax,0x1
c00079cf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00079d3:	83 d2 00             	adc    edx,0x0
c00079d6:	83 ec 0c             	sub    esp,0xc
c00079d9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00079dd:	6a 01                	push   0x1
c00079df:	57                   	push   edi
c00079e0:	56                   	push   esi
c00079e1:	55                   	push   ebp
c00079e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079e6:	e8 e3 9f ff ff       	call   c00019ce <disk_write>
c00079eb:	83 c4 20             	add    esp,0x20
c00079ee:	85 c0                	test   eax,eax
c00079f0:	0f 85 ce 07 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c00079f6:	31 d2                	xor    edx,edx
c00079f8:	b9 00 02 00 00       	mov    ecx,0x200
c00079fd:	89 e8                	mov    eax,ebp
c00079ff:	e8 93 a0 ff ff       	call   c0001a97 <mem_set>
c0007a04:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007a09:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a0c:	e8 64 a0 ff ff       	call   c0001a75 <st_word>
c0007a11:	89 f0                	mov    eax,esi
c0007a13:	89 fa                	mov    edx,edi
c0007a15:	83 c0 09             	add    eax,0x9
c0007a18:	83 d2 00             	adc    edx,0x0
c0007a1b:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a1e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007a22:	31 c9                	xor    ecx,ecx
c0007a24:	41                   	inc    ecx
c0007a25:	89 da                	mov    edx,ebx
c0007a27:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a2c:	e8 cd a4 ff ff       	call   c0001efe <xsum32>
c0007a31:	89 c3                	mov    ebx,eax
c0007a33:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a39:	75 e9                	jne    c0007a24 <f_mkfs+0x911>
c0007a3b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007a3f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007a43:	83 c0 01             	add    eax,0x1
c0007a46:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007a4a:	83 d2 00             	adc    edx,0x0
c0007a4d:	83 ec 0c             	sub    esp,0xc
c0007a50:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007a54:	6a 01                	push   0x1
c0007a56:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a5a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a5e:	55                   	push   ebp
c0007a5f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a63:	e8 66 9f ff ff       	call   c00019ce <disk_write>
c0007a68:	83 c4 20             	add    esp,0x20
c0007a6b:	85 c0                	test   eax,eax
c0007a6d:	0f 85 51 07 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c0007a73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a77:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007a7b:	75 09                	jne    c0007a86 <f_mkfs+0x973>
c0007a7d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a80:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007a84:	74 12                	je     c0007a98 <f_mkfs+0x985>
c0007a86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a8a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007a8e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a92:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a96:	eb 8a                	jmp    c0007a22 <f_mkfs+0x90f>
c0007a98:	31 d2                	xor    edx,edx
c0007a9a:	b9 00 02 00 00       	mov    ecx,0x200
c0007a9f:	89 e8                	mov    eax,ebp
c0007aa1:	e8 f1 9f ff ff       	call   c0001a97 <mem_set>
c0007aa6:	83 c6 0b             	add    esi,0xb
c0007aa9:	83 d7 00             	adc    edi,0x0
c0007aac:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007ab0:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007ab4:	31 c9                	xor    ecx,ecx
c0007ab6:	41                   	inc    ecx
c0007ab7:	89 da                	mov    edx,ebx
c0007ab9:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007abe:	e8 3b a4 ff ff       	call   c0001efe <xsum32>
c0007ac3:	89 c3                	mov    ebx,eax
c0007ac5:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007acb:	75 e9                	jne    c0007ab6 <f_mkfs+0x9a3>
c0007acd:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ad0:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ad4:	83 c6 01             	add    esi,0x1
c0007ad7:	83 d7 00             	adc    edi,0x0
c0007ada:	83 ec 0c             	sub    esp,0xc
c0007add:	6a 01                	push   0x1
c0007adf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007ae3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007ae7:	55                   	push   ebp
c0007ae8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007aec:	e8 dd 9e ff ff       	call   c00019ce <disk_write>
c0007af1:	83 c4 20             	add    esp,0x20
c0007af4:	85 c0                	test   eax,eax
c0007af6:	0f 85 c8 06 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c0007afc:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007b00:	75 06                	jne    c0007b08 <f_mkfs+0x9f5>
c0007b02:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007b06:	74 09                	je     c0007b11 <f_mkfs+0x9fe>
c0007b08:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b0b:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007b0f:	eb a3                	jmp    c0007ab4 <f_mkfs+0x9a1>
c0007b11:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007b15:	89 da                	mov    edx,ebx
c0007b17:	01 e8                	add    eax,ebp
c0007b19:	e8 5b 9f ff ff       	call   c0001a79 <st_dword>
c0007b1e:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007b23:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007b2b:	75 e4                	jne    c0007b11 <f_mkfs+0x9fe>
c0007b2d:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b30:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b34:	83 c6 02             	add    esi,0x2
c0007b37:	83 d7 00             	adc    edi,0x0
c0007b3a:	83 ec 0c             	sub    esp,0xc
c0007b3d:	6a 01                	push   0x1
c0007b3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b47:	55                   	push   ebp
c0007b48:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b4c:	e8 7d 9e ff ff       	call   c00019ce <disk_write>
c0007b51:	83 c4 20             	add    esp,0x20
c0007b54:	85 c0                	test   eax,eax
c0007b56:	0f 85 68 06 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c0007b5c:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007b61:	74 0d                	je     c0007b70 <f_mkfs+0xa5d>
c0007b63:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007b6b:	e9 43 fd ff ff       	jmp    c00078b3 <f_mkfs+0x7a0>
c0007b70:	b1 07                	mov    cl,0x7
c0007b72:	e9 e3 05 00 00       	jmp    c000815a <f_mkfs+0x1047>
c0007b77:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007b7c:	0f 85 4f 02 00 00    	jne    c0007dd1 <f_mkfs+0xcbe>
c0007b82:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007b87:	0f 86 22 02 00 00    	jbe    c0007daf <f_mkfs+0xc9c>
c0007b8d:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007b92:	0f 85 81 06 00 00    	jne    c0008219 <f_mkfs+0x1106>
c0007b98:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007b9b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007b9f:	83 f8 40             	cmp    eax,0x40
c0007ba2:	0f 87 51 06 00 00    	ja     c00081f9 <f_mkfs+0x10e6>
c0007ba8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007bac:	85 ff                	test   edi,edi
c0007bae:	75 1c                	jne    c0007bcc <f_mkfs+0xab9>
c0007bb0:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007bb3:	ba e0 5e 02 c0       	mov    edx,0xc0025ee0
c0007bb8:	c1 e9 0c             	shr    ecx,0xc
c0007bbb:	bf 01 00 00 00       	mov    edi,0x1
c0007bc0:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007bc3:	66 85 c0             	test   ax,ax
c0007bc6:	0f 85 95 01 00 00    	jne    c0007d61 <f_mkfs+0xc4e>
c0007bcc:	31 d2                	xor    edx,edx
c0007bce:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007bd1:	f7 f7                	div    edi
c0007bd3:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007bd8:	0f 86 95 01 00 00    	jbe    c0007d73 <f_mkfs+0xc60>
c0007bde:	83 c0 02             	add    eax,0x2
c0007be1:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007be6:	01 c0                	add    eax,eax
c0007be8:	05 ff 01 00 00       	add    eax,0x1ff
c0007bed:	be 01 00 00 00       	mov    esi,0x1
c0007bf2:	c1 e8 09             	shr    eax,0x9
c0007bf5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007bf9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007bfd:	c1 e0 05             	shl    eax,0x5
c0007c00:	c1 e8 09             	shr    eax,0x9
c0007c03:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007c07:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007c0c:	31 d2                	xor    edx,edx
c0007c0e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007c12:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007c16:	89 f0                	mov    eax,esi
c0007c18:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007c1c:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007c20:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007c24:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007c28:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007c2c:	31 d2                	xor    edx,edx
c0007c2e:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007c33:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007c37:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007c3b:	31 db                	xor    ebx,ebx
c0007c3d:	01 c8                	add    eax,ecx
c0007c3f:	11 da                	adc    edx,ebx
c0007c41:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007c45:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007c49:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007c4d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007c51:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007c55:	f7 da                	neg    edx
c0007c57:	21 d1                	and    ecx,edx
c0007c59:	29 d9                	sub    ecx,ebx
c0007c5b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007c60:	0f 85 20 01 00 00    	jne    c0007d86 <f_mkfs+0xc73>
c0007c66:	31 db                	xor    ebx,ebx
c0007c68:	01 ce                	add    esi,ecx
c0007c6a:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007c6e:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007c72:	31 d2                	xor    edx,edx
c0007c74:	89 f8                	mov    eax,edi
c0007c76:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007c7a:	c1 e0 04             	shl    eax,0x4
c0007c7d:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007c81:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007c85:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007c89:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007c8d:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007c90:	19 d3                	sbb    ebx,edx
c0007c92:	0f 82 40 01 00 00    	jb     c0007dd8 <f_mkfs+0xcc5>
c0007c98:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c9b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007c9f:	89 c8                	mov    eax,ecx
c0007ca1:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007ca6:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007caa:	29 f0                	sub    eax,esi
c0007cac:	29 d0                	sub    eax,edx
c0007cae:	31 d2                	xor    edx,edx
c0007cb0:	f7 f7                	div    edi
c0007cb2:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007cb7:	89 c3                	mov    ebx,eax
c0007cb9:	0f 85 b8 fe ff ff    	jne    c0007b77 <f_mkfs+0xa64>
c0007cbf:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007cc4:	0f 87 1d 01 00 00    	ja     c0007de7 <f_mkfs+0xcd4>
c0007cca:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ccf:	0f 85 03 01 00 00    	jne    c0007dd8 <f_mkfs+0xcc5>
c0007cd5:	83 ff 01             	cmp    edi,0x1
c0007cd8:	0f 86 fa 00 00 00    	jbe    c0007dd8 <f_mkfs+0xcc5>
c0007cde:	d1 ef                	shr    edi,1
c0007ce0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007ce4:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007ce8:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ceb:	85 db                	test   ebx,ebx
c0007ced:	75 2d                	jne    c0007d1c <f_mkfs+0xc09>
c0007cef:	89 cb                	mov    ebx,ecx
c0007cf1:	ba f0 5e 02 c0       	mov    edx,0xc0025ef0
c0007cf6:	c1 eb 11             	shr    ebx,0x11
c0007cf9:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007d01:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007d04:	66 85 c0             	test   ax,ax
c0007d07:	74 11                	je     c0007d1a <f_mkfs+0xc07>
c0007d09:	83 c2 02             	add    edx,0x2
c0007d0c:	39 d8                	cmp    eax,ebx
c0007d0e:	77 0a                	ja     c0007d1a <f_mkfs+0xc07>
c0007d10:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007d14:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007d18:	eb e7                	jmp    c0007d01 <f_mkfs+0xbee>
c0007d1a:	31 db                	xor    ebx,ebx
c0007d1c:	31 d2                	xor    edx,edx
c0007d1e:	89 c8                	mov    eax,ecx
c0007d20:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007d24:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007d2b:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007d30:	c1 ea 09             	shr    edx,0x9
c0007d33:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007d38:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d3c:	0f 87 96 00 00 00    	ja     c0007dd8 <f_mkfs+0xcc5>
c0007d42:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d46:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007d4e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007d52:	be 20 00 00 00       	mov    esi,0x20
c0007d57:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007d5c:	e9 a6 fe ff ff       	jmp    c0007c07 <f_mkfs+0xaf4>
c0007d61:	83 c2 02             	add    edx,0x2
c0007d64:	39 c8                	cmp    eax,ecx
c0007d66:	0f 87 60 fe ff ff    	ja     c0007bcc <f_mkfs+0xab9>
c0007d6c:	01 ff                	add    edi,edi
c0007d6e:	e9 4d fe ff ff       	jmp    c0007bc0 <f_mkfs+0xaad>
c0007d73:	8d 04 40             	lea    eax,[eax+eax*2]
c0007d76:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d7b:	40                   	inc    eax
c0007d7c:	d1 e8                	shr    eax,1
c0007d7e:	83 c0 03             	add    eax,0x3
c0007d81:	e9 62 fe ff ff       	jmp    c0007be8 <f_mkfs+0xad5>
c0007d86:	31 d2                	xor    edx,edx
c0007d88:	89 c8                	mov    eax,ecx
c0007d8a:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007d8e:	85 d2                	test   edx,edx
c0007d90:	74 0c                	je     c0007d9e <f_mkfs+0xc8b>
c0007d92:	49                   	dec    ecx
c0007d93:	46                   	inc    esi
c0007d94:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007d99:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007d9e:	89 c8                	mov    eax,ecx
c0007da0:	31 d2                	xor    edx,edx
c0007da2:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007da6:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007daa:	e9 c3 fe ff ff       	jmp    c0007c72 <f_mkfs+0xb5f>
c0007daf:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007db4:	77 31                	ja     c0007de7 <f_mkfs+0xcd4>
c0007db6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007dbb:	75 1b                	jne    c0007dd8 <f_mkfs+0xcc5>
c0007dbd:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dc0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dc4:	3d 80 00 00 00       	cmp    eax,0x80
c0007dc9:	0f 86 d9 fd ff ff    	jbe    c0007ba8 <f_mkfs+0xa95>
c0007dcf:	eb 07                	jmp    c0007dd8 <f_mkfs+0xcc5>
c0007dd1:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dd6:	76 0a                	jbe    c0007de2 <f_mkfs+0xccf>
c0007dd8:	bb 0e 00 00 00       	mov    ebx,0xe
c0007ddd:	e9 ff 03 00 00       	jmp    c00081e1 <f_mkfs+0x10ce>
c0007de2:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007de7:	31 d2                	xor    edx,edx
c0007de9:	b9 00 02 00 00       	mov    ecx,0x200
c0007dee:	89 e8                	mov    eax,ebp
c0007df0:	e8 a2 9c ff ff       	call   c0001a97 <mem_set>
c0007df5:	b9 0b 00 00 00       	mov    ecx,0xb
c0007dfa:	ba 02 60 02 c0       	mov    edx,0xc0026002
c0007dff:	89 e8                	mov    eax,ebp
c0007e01:	e8 7c 9c ff ff       	call   c0001a82 <mem_cpy>
c0007e06:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007e09:	ba 00 02 00 00       	mov    edx,0x200
c0007e0e:	e8 62 9c ff ff       	call   c0001a75 <st_word>
c0007e13:	89 f8                	mov    eax,edi
c0007e15:	0f b7 d6             	movzx  edx,si
c0007e18:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007e1b:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007e1e:	e8 52 9c ff ff       	call   c0001a75 <st_word>
c0007e23:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007e27:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e2c:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007e2f:	75 08                	jne    c0007e39 <f_mkfs+0xd26>
c0007e31:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007e39:	8d 45 11             	lea    eax,[ebp+0x11]
c0007e3c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007e40:	e8 30 9c ff ff       	call   c0001a75 <st_word>
c0007e45:	b8 ff ff 00 00       	mov    eax,0xffff
c0007e4a:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007e4e:	39 d0                	cmp    eax,edx
c0007e50:	b8 00 00 00 00       	mov    eax,0x0
c0007e55:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007e59:	72 0a                	jb     c0007e65 <f_mkfs+0xd52>
c0007e5b:	8d 45 13             	lea    eax,[ebp+0x13]
c0007e5e:	e8 12 9c ff ff       	call   c0001a75 <st_word>
c0007e63:	eb 08                	jmp    c0007e6d <f_mkfs+0xd5a>
c0007e65:	8d 45 20             	lea    eax,[ebp+0x20]
c0007e68:	e8 0c 9c ff ff       	call   c0001a79 <st_dword>
c0007e6d:	8d 45 18             	lea    eax,[ebp+0x18]
c0007e70:	ba 3f 00 00 00       	mov    edx,0x3f
c0007e75:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007e79:	e8 f7 9b ff ff       	call   c0001a75 <st_word>
c0007e7e:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007e81:	ba ff 00 00 00       	mov    edx,0xff
c0007e86:	e8 ea 9b ff ff       	call   c0001a75 <st_word>
c0007e8b:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007e8e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007e92:	e8 e2 9b ff ff       	call   c0001a79 <st_dword>
c0007e97:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e9c:	75 57                	jne    c0007ef5 <f_mkfs+0xde2>
c0007e9e:	8d 45 43             	lea    eax,[ebp+0x43]
c0007ea1:	ba 00 00 21 50       	mov    edx,0x50210000
c0007ea6:	e8 ce 9b ff ff       	call   c0001a79 <st_dword>
c0007eab:	8d 45 24             	lea    eax,[ebp+0x24]
c0007eae:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007eb2:	e8 c2 9b ff ff       	call   c0001a79 <st_dword>
c0007eb7:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007eba:	ba 02 00 00 00       	mov    edx,0x2
c0007ebf:	e8 b5 9b ff ff       	call   c0001a79 <st_dword>
c0007ec4:	8d 45 30             	lea    eax,[ebp+0x30]
c0007ec7:	ba 01 00 00 00       	mov    edx,0x1
c0007ecc:	e8 a4 9b ff ff       	call   c0001a75 <st_word>
c0007ed1:	8d 45 32             	lea    eax,[ebp+0x32]
c0007ed4:	ba 06 00 00 00       	mov    edx,0x6
c0007ed9:	e8 97 9b ff ff       	call   c0001a75 <st_word>
c0007ede:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007ee2:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007ee6:	8d 45 47             	lea    eax,[ebp+0x47]
c0007ee9:	b9 13 00 00 00       	mov    ecx,0x13
c0007eee:	ba 0e 60 02 c0       	mov    edx,0xc002600e
c0007ef3:	eb 2f                	jmp    c0007f24 <f_mkfs+0xe11>
c0007ef5:	8d 45 27             	lea    eax,[ebp+0x27]
c0007ef8:	ba 00 00 21 50       	mov    edx,0x50210000
c0007efd:	e8 77 9b ff ff       	call   c0001a79 <st_dword>
c0007f02:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007f07:	8d 45 16             	lea    eax,[ebp+0x16]
c0007f0a:	e8 66 9b ff ff       	call   c0001a75 <st_word>
c0007f0f:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007f13:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007f17:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007f1a:	b9 13 00 00 00       	mov    ecx,0x13
c0007f1f:	ba 22 60 02 c0       	mov    edx,0xc0026022
c0007f24:	e8 59 9b ff ff       	call   c0001a82 <mem_cpy>
c0007f29:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007f2f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f34:	89 f0                	mov    eax,esi
c0007f36:	e8 3a 9b ff ff       	call   c0001a75 <st_word>
c0007f3b:	83 ec 0c             	sub    esp,0xc
c0007f3e:	6a 01                	push   0x1
c0007f40:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f44:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f48:	55                   	push   ebp
c0007f49:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f4d:	e8 7c 9a ff ff       	call   c00019ce <disk_write>
c0007f52:	83 c4 20             	add    esp,0x20
c0007f55:	85 c0                	test   eax,eax
c0007f57:	0f 85 67 02 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c0007f5d:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f62:	0f 85 b7 00 00 00    	jne    c000801f <f_mkfs+0xf0c>
c0007f68:	83 ec 0c             	sub    esp,0xc
c0007f6b:	6a 01                	push   0x1
c0007f6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f71:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f75:	83 c0 06             	add    eax,0x6
c0007f78:	83 d2 00             	adc    edx,0x0
c0007f7b:	52                   	push   edx
c0007f7c:	50                   	push   eax
c0007f7d:	55                   	push   ebp
c0007f7e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f82:	e8 47 9a ff ff       	call   c00019ce <disk_write>
c0007f87:	83 c4 20             	add    esp,0x20
c0007f8a:	b9 00 02 00 00       	mov    ecx,0x200
c0007f8f:	31 d2                	xor    edx,edx
c0007f91:	89 e8                	mov    eax,ebp
c0007f93:	e8 ff 9a ff ff       	call   c0001a97 <mem_set>
c0007f98:	ba 52 52 61 41       	mov    edx,0x41615252
c0007f9d:	89 e8                	mov    eax,ebp
c0007f9f:	e8 d5 9a ff ff       	call   c0001a79 <st_dword>
c0007fa4:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007faa:	ba 72 72 41 61       	mov    edx,0x61417272
c0007faf:	e8 c5 9a ff ff       	call   c0001a79 <st_dword>
c0007fb4:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007fb7:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0007fbd:	e8 b7 9a ff ff       	call   c0001a79 <st_dword>
c0007fc2:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0007fc8:	ba 02 00 00 00       	mov    edx,0x2
c0007fcd:	e8 a7 9a ff ff       	call   c0001a79 <st_dword>
c0007fd2:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007fd7:	89 f0                	mov    eax,esi
c0007fd9:	e8 97 9a ff ff       	call   c0001a75 <st_word>
c0007fde:	83 ec 0c             	sub    esp,0xc
c0007fe1:	6a 01                	push   0x1
c0007fe3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007fe7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007feb:	83 c0 07             	add    eax,0x7
c0007fee:	83 d2 00             	adc    edx,0x0
c0007ff1:	52                   	push   edx
c0007ff2:	50                   	push   eax
c0007ff3:	55                   	push   ebp
c0007ff4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ff8:	e8 d1 99 ff ff       	call   c00019ce <disk_write>
c0007ffd:	83 c4 14             	add    esp,0x14
c0008000:	6a 01                	push   0x1
c0008002:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008006:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000800a:	83 c0 01             	add    eax,0x1
c000800d:	83 d2 00             	adc    edx,0x0
c0008010:	52                   	push   edx
c0008011:	50                   	push   eax
c0008012:	55                   	push   ebp
c0008013:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008017:	e8 b2 99 ff ff       	call   c00019ce <disk_write>
c000801c:	83 c4 20             	add    esp,0x20
c000801f:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008026:	31 d2                	xor    edx,edx
c0008028:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000802e:	31 db                	xor    ebx,ebx
c0008030:	89 e8                	mov    eax,ebp
c0008032:	e8 60 9a ff ff       	call   c0001a97 <mem_set>
c0008037:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000803c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008043:	0f 94 c3             	sete   bl
c0008046:	4b                   	dec    ebx
c0008047:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c000804d:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008053:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008058:	75 21                	jne    c000807b <f_mkfs+0xf68>
c000805a:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c000805f:	89 e8                	mov    eax,ebp
c0008061:	e8 13 9a ff ff       	call   c0001a79 <st_dword>
c0008066:	8d 45 04             	lea    eax,[ebp+0x4]
c0008069:	83 ca ff             	or     edx,0xffffffff
c000806c:	e8 08 9a ff ff       	call   c0001a79 <st_dword>
c0008071:	8d 45 08             	lea    eax,[ebp+0x8]
c0008074:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008079:	eb 04                	jmp    c000807f <f_mkfs+0xf6c>
c000807b:	89 da                	mov    edx,ebx
c000807d:	89 e8                	mov    eax,ebp
c000807f:	e8 f5 99 ff ff       	call   c0001a79 <st_dword>
c0008084:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008088:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000808c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0008090:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008094:	39 ce                	cmp    esi,ecx
c0008096:	76 02                	jbe    c000809a <f_mkfs+0xf87>
c0008098:	89 ce                	mov    esi,ecx
c000809a:	83 ec 0c             	sub    esp,0xc
c000809d:	56                   	push   esi
c000809e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080a2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080a6:	55                   	push   ebp
c00080a7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080ab:	e8 1e 99 ff ff       	call   c00019ce <disk_write>
c00080b0:	83 c4 20             	add    esp,0x20
c00080b3:	85 c0                	test   eax,eax
c00080b5:	0f 85 09 01 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c00080bb:	31 d2                	xor    edx,edx
c00080bd:	b9 00 02 00 00       	mov    ecx,0x200
c00080c2:	89 e8                	mov    eax,ebp
c00080c4:	e8 ce 99 ff ff       	call   c0001a97 <mem_set>
c00080c9:	31 d2                	xor    edx,edx
c00080cb:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00080cf:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00080d3:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00080d7:	75 b3                	jne    c000808c <f_mkfs+0xf79>
c00080d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00080dc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00080e3:	40                   	inc    eax
c00080e4:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c00080e8:	0f 87 65 ff ff ff    	ja     c0008053 <f_mkfs+0xf40>
c00080ee:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080f3:	74 04                	je     c00080f9 <f_mkfs+0xfe6>
c00080f5:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c00080f9:	89 fb                	mov    ebx,edi
c00080fb:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c00080ff:	76 04                	jbe    c0008105 <f_mkfs+0xff2>
c0008101:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008105:	83 ec 0c             	sub    esp,0xc
c0008108:	53                   	push   ebx
c0008109:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000810d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008111:	55                   	push   ebp
c0008112:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008116:	e8 b3 98 ff ff       	call   c00019ce <disk_write>
c000811b:	83 c4 20             	add    esp,0x20
c000811e:	85 c0                	test   eax,eax
c0008120:	0f 85 9e 00 00 00    	jne    c00081c4 <f_mkfs+0x10b1>
c0008126:	31 d2                	xor    edx,edx
c0008128:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000812c:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008130:	29 df                	sub    edi,ebx
c0008132:	75 c5                	jne    c00080f9 <f_mkfs+0xfe6>
c0008134:	b1 0c                	mov    cl,0xc
c0008136:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000813b:	74 1d                	je     c000815a <f_mkfs+0x1047>
c000813d:	b8 ff ff 00 00       	mov    eax,0xffff
c0008142:	b1 06                	mov    cl,0x6
c0008144:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c0008148:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c000814c:	72 0c                	jb     c000815a <f_mkfs+0x1047>
c000814e:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008153:	0f 94 c1             	sete   cl
c0008156:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000815a:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c000815f:	75 4c                	jne    c00081ad <f_mkfs+0x109a>
c0008161:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008165:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0008169:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008170:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008177:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008182:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c000818d:	0f b6 c9             	movzx  ecx,cl
c0008190:	83 ec 0c             	sub    esp,0xc
c0008193:	55                   	push   ebp
c0008194:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c000819b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000819f:	e8 2f c2 ff ff       	call   c00043d3 <create_partition>
c00081a4:	83 c4 10             	add    esp,0x10
c00081a7:	89 c3                	mov    ebx,eax
c00081a9:	85 c0                	test   eax,eax
c00081ab:	75 34                	jne    c00081e1 <f_mkfs+0x10ce>
c00081ad:	31 db                	xor    ebx,ebx
c00081af:	50                   	push   eax
c00081b0:	6a 00                	push   0x0
c00081b2:	6a 00                	push   0x0
c00081b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00081b8:	e8 27 98 ff ff       	call   c00019e4 <disk_ioctl>
c00081bd:	83 c4 10             	add    esp,0x10
c00081c0:	85 c0                	test   eax,eax
c00081c2:	74 1d                	je     c00081e1 <f_mkfs+0x10ce>
c00081c4:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081cc:	75 0c                	jne    c00081da <f_mkfs+0x10c7>
c00081ce:	83 ec 0c             	sub    esp,0xc
c00081d1:	55                   	push   ebp
c00081d2:	e8 75 00 00 00       	call   c000824c <ff_memfree>
c00081d7:	83 c4 10             	add    esp,0x10
c00081da:	bb 01 00 00 00       	mov    ebx,0x1
c00081df:	eb 48                	jmp    c0008229 <f_mkfs+0x1116>
c00081e1:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081e9:	75 3e                	jne    c0008229 <f_mkfs+0x1116>
c00081eb:	83 ec 0c             	sub    esp,0xc
c00081ee:	55                   	push   ebp
c00081ef:	e8 58 00 00 00       	call   c000824c <ff_memfree>
c00081f4:	83 c4 10             	add    esp,0x10
c00081f7:	eb 30                	jmp    c0008229 <f_mkfs+0x1116>
c00081f9:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00081fe:	0f 85 eb fa ff ff    	jne    c0007cef <f_mkfs+0xbdc>
c0008204:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008208:	81 ff 80 00 00 00    	cmp    edi,0x80
c000820e:	0f 86 b8 f9 ff ff    	jbe    c0007bcc <f_mkfs+0xab9>
c0008214:	e9 bf fb ff ff       	jmp    c0007dd8 <f_mkfs+0xcc5>
c0008219:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000821e:	0f 85 c0 fa ff ff    	jne    c0007ce4 <f_mkfs+0xbd1>
c0008224:	e9 af fb ff ff       	jmp    c0007dd8 <f_mkfs+0xcc5>
c0008229:	81 c4 9c 00 00 00    	add    esp,0x9c
c000822f:	89 d8                	mov    eax,ebx
c0008231:	5b                   	pop    ebx
c0008232:	5e                   	pop    esi
c0008233:	5f                   	pop    edi
c0008234:	5d                   	pop    ebp
c0008235:	c3                   	ret    

c0008236 <ff_memalloc>:
c0008236:	83 ec 0c             	sub    esp,0xc
c0008239:	83 ec 0c             	sub    esp,0xc
c000823c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008240:	e8 e1 6e 00 00       	call   c000f126 <malloc>
c0008245:	83 c4 10             	add    esp,0x10
c0008248:	83 c4 0c             	add    esp,0xc
c000824b:	c3                   	ret    

c000824c <ff_memfree>:
c000824c:	83 ec 0c             	sub    esp,0xc
c000824f:	83 ec 0c             	sub    esp,0xc
c0008252:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008256:	e8 db 6e 00 00       	call   c000f136 <free>
c000825b:	83 c4 10             	add    esp,0x10
c000825e:	90                   	nop
c000825f:	83 c4 0c             	add    esp,0xc
c0008262:	c3                   	ret    

c0008263 <ff_uni2oem>:
c0008263:	83 ec 14             	sub    esp,0x14
c0008266:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000826a:	66 89 04 24          	mov    WORD PTR [esp],ax
c000826e:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008275:	c7 44 24 0c 40 63 02 c0 	mov    DWORD PTR [esp+0xc],0xc0026340
c000827d:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008282:	77 0b                	ja     c000828f <ff_uni2oem+0x2c>
c0008284:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008288:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000828d:	eb 5b                	jmp    c00082ea <ff_uni2oem+0x87>
c000828f:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008297:	77 51                	ja     c00082ea <ff_uni2oem+0x87>
c0008299:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000829f:	75 49                	jne    c00082ea <ff_uni2oem+0x87>
c00082a1:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082a8:	eb 0b                	jmp    c00082b5 <ff_uni2oem+0x52>
c00082aa:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082af:	40                   	inc    eax
c00082b0:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082b5:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00082bb:	77 1b                	ja     c00082d8 <ff_uni2oem+0x75>
c00082bd:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00082c2:	01 c0                	add    eax,eax
c00082c4:	89 c2                	mov    edx,eax
c00082c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082ca:	01 d0                	add    eax,edx
c00082cc:	66 8b 00             	mov    ax,WORD PTR [eax]
c00082cf:	0f b7 c0             	movzx  eax,ax
c00082d2:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00082d6:	75 d2                	jne    c00082aa <ff_uni2oem+0x47>
c00082d8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082dd:	83 e8 80             	sub    eax,0xffffff80
c00082e0:	25 ff 00 00 00       	and    eax,0xff
c00082e5:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082ea:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082ef:	83 c4 14             	add    esp,0x14
c00082f2:	c3                   	ret    

c00082f3 <ff_oem2uni>:
c00082f3:	83 ec 18             	sub    esp,0x18
c00082f6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00082fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082fe:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008303:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008307:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000830e:	c7 44 24 10 40 63 02 c0 	mov    DWORD PTR [esp+0x10],0xc0026340
c0008316:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000831c:	77 0b                	ja     c0008329 <ff_oem2uni+0x36>
c000831e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008322:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008327:	eb 2d                	jmp    c0008356 <ff_oem2uni+0x63>
c0008329:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000832f:	75 25                	jne    c0008356 <ff_oem2uni+0x63>
c0008331:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008338:	77 1c                	ja     c0008356 <ff_oem2uni+0x63>
c000833a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000833f:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008344:	01 c0                	add    eax,eax
c0008346:	89 c2                	mov    edx,eax
c0008348:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000834c:	01 d0                	add    eax,edx
c000834e:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008351:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008356:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000835b:	83 c4 18             	add    esp,0x18
c000835e:	c3                   	ret    

c000835f <ff_wtoupper>:
c000835f:	83 ec 10             	sub    esp,0x10
c0008362:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000836a:	0f 87 3e 01 00 00    	ja     c00084ae <ff_wtoupper+0x14f>
c0008370:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008374:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008379:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008380:	77 07                	ja     c0008389 <ff_wtoupper+0x2a>
c0008382:	b8 40 61 02 c0       	mov    eax,0xc0026140
c0008387:	eb 05                	jmp    c000838e <ff_wtoupper+0x2f>
c0008389:	b8 80 60 02 c0       	mov    eax,0xc0026080
c000838e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008392:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008396:	8d 50 02             	lea    edx,[eax+0x2]
c0008399:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000839d:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083a0:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00083a5:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00083ab:	0f 84 f4 00 00 00    	je     c00084a5 <ff_wtoupper+0x146>
c00083b1:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083b6:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00083bb:	0f 82 e4 00 00 00    	jb     c00084a5 <ff_wtoupper+0x146>
c00083c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083c5:	8d 50 02             	lea    edx,[eax+0x2]
c00083c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083cc:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083cf:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00083d4:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00083d9:	66 c1 e8 08          	shr    ax,0x8
c00083dd:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c00083e2:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c00083e9:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00083ee:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c00083f3:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c00083f8:	01 ca                	add    edx,ecx
c00083fa:	39 d0                	cmp    eax,edx
c00083fc:	0f 8d 86 00 00 00    	jge    c0008488 <ff_wtoupper+0x129>
c0008402:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008407:	83 f8 08             	cmp    eax,0x8
c000840a:	0f 87 94 00 00 00    	ja     c00084a4 <ff_wtoupper+0x145>
c0008410:	8b 04 85 40 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9fc0]
c0008417:	ff e0                	jmp    eax
c0008419:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000841e:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008423:	29 c2                	sub    edx,eax
c0008425:	89 d0                	mov    eax,edx
c0008427:	01 c0                	add    eax,eax
c0008429:	89 c2                	mov    edx,eax
c000842b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000842f:	01 d0                	add    eax,edx
c0008431:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008434:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008439:	eb 4b                	jmp    c0008486 <ff_wtoupper+0x127>
c000843b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008440:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008444:	83 e0 01             	and    eax,0x1
c0008447:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c000844c:	eb 38                	jmp    c0008486 <ff_wtoupper+0x127>
c000844e:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008454:	eb 30                	jmp    c0008486 <ff_wtoupper+0x127>
c0008456:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c000845c:	eb 28                	jmp    c0008486 <ff_wtoupper+0x127>
c000845e:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008464:	eb 20                	jmp    c0008486 <ff_wtoupper+0x127>
c0008466:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c000846c:	eb 18                	jmp    c0008486 <ff_wtoupper+0x127>
c000846e:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008474:	eb 10                	jmp    c0008486 <ff_wtoupper+0x127>
c0008476:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c000847c:	eb 08                	jmp    c0008486 <ff_wtoupper+0x127>
c000847e:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0008485:	90                   	nop
c0008486:	eb 1c                	jmp    c00084a4 <ff_wtoupper+0x145>
c0008488:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c000848e:	0f 85 fe fe ff ff    	jne    c0008392 <ff_wtoupper+0x33>
c0008494:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008499:	01 c0                	add    eax,eax
c000849b:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000849f:	e9 ee fe ff ff       	jmp    c0008392 <ff_wtoupper+0x33>
c00084a4:	90                   	nop
c00084a5:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00084aa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00084ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084b2:	83 c4 10             	add    esp,0x10
c00084b5:	c3                   	ret    

c00084b6 <is_bad_src_ratio>:
c00084b6:	83 ec 1c             	sub    esp,0x1c
c00084b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00084bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00084c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00084c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00084c9:	b8 00 00 00 00       	mov    eax,0x0
c00084ce:	ba 00 00 70 3f       	mov    edx,0x3f700000
c00084d3:	52                   	push   edx
c00084d4:	50                   	push   eax
c00084d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00084d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00084dd:	e8 2d cb 01 00       	call   c002500f <__ltdf2>
c00084e2:	83 c4 10             	add    esp,0x10
c00084e5:	85 c0                	test   eax,eax
c00084e7:	78 20                	js     c0008509 <is_bad_src_ratio+0x53>
c00084e9:	b8 00 00 00 00       	mov    eax,0x0
c00084ee:	ba 00 00 70 40       	mov    edx,0x40700000
c00084f3:	52                   	push   edx
c00084f4:	50                   	push   eax
c00084f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00084f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00084fd:	e8 ef ca 01 00       	call   c0024ff1 <__gtdf2>
c0008502:	83 c4 10             	add    esp,0x10
c0008505:	85 c0                	test   eax,eax
c0008507:	7e 07                	jle    c0008510 <is_bad_src_ratio+0x5a>
c0008509:	b8 01 00 00 00       	mov    eax,0x1
c000850e:	eb 05                	jmp    c0008515 <is_bad_src_ratio+0x5f>
c0008510:	b8 00 00 00 00       	mov    eax,0x0
c0008515:	83 c4 1c             	add    esp,0x1c
c0008518:	c3                   	ret    

c0008519 <psrc_set_converter>:
c0008519:	56                   	push   esi
c000851a:	89 d6                	mov    esi,edx
c000851c:	53                   	push   ebx
c000851d:	89 c3                	mov    ebx,eax
c000851f:	83 ec 0c             	sub    esp,0xc
c0008522:	52                   	push   edx
c0008523:	50                   	push   eax
c0008524:	e8 58 51 00 00       	call   c000d681 <sinc_set_converter>
c0008529:	83 c4 10             	add    esp,0x10
c000852c:	85 c0                	test   eax,eax
c000852e:	74 25                	je     c0008555 <psrc_set_converter+0x3c>
c0008530:	50                   	push   eax
c0008531:	50                   	push   eax
c0008532:	56                   	push   esi
c0008533:	53                   	push   ebx
c0008534:	e8 2a 59 00 00       	call   c000de63 <zoh_set_converter>
c0008539:	83 c4 10             	add    esp,0x10
c000853c:	85 c0                	test   eax,eax
c000853e:	74 15                	je     c0008555 <psrc_set_converter+0x3c>
c0008540:	51                   	push   ecx
c0008541:	51                   	push   ecx
c0008542:	56                   	push   esi
c0008543:	53                   	push   ebx
c0008544:	e8 77 10 00 00       	call   c00095c0 <linear_set_converter>
c0008549:	83 c4 10             	add    esp,0x10
c000854c:	ba 0a 00 00 00       	mov    edx,0xa
c0008551:	85 c0                	test   eax,eax
c0008553:	75 02                	jne    c0008557 <psrc_set_converter+0x3e>
c0008555:	31 d2                	xor    edx,edx
c0008557:	89 d0                	mov    eax,edx
c0008559:	5a                   	pop    edx
c000855a:	5b                   	pop    ebx
c000855b:	5e                   	pop    esi
c000855c:	c3                   	ret    

c000855d <src_delete>:
c000855d:	53                   	push   ebx
c000855e:	83 ec 08             	sub    esp,0x8
c0008561:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008565:	85 db                	test   ebx,ebx
c0008567:	74 29                	je     c0008592 <src_delete+0x35>
c0008569:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000856c:	85 c0                	test   eax,eax
c000856e:	74 0c                	je     c000857c <src_delete+0x1f>
c0008570:	83 ec 0c             	sub    esp,0xc
c0008573:	50                   	push   eax
c0008574:	e8 bd 6b 00 00       	call   c000f136 <free>
c0008579:	83 c4 10             	add    esp,0x10
c000857c:	50                   	push   eax
c000857d:	6a 3c                	push   0x3c
c000857f:	6a 00                	push   0x0
c0008581:	53                   	push   ebx
c0008582:	e8 f6 80 ff ff       	call   c000067d <memset>
c0008587:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000858a:	e8 a7 6b 00 00       	call   c000f136 <free>
c000858f:	83 c4 10             	add    esp,0x10
c0008592:	31 c0                	xor    eax,eax
c0008594:	83 c4 08             	add    esp,0x8
c0008597:	5b                   	pop    ebx
c0008598:	c3                   	ret    

c0008599 <src_process>:
c0008599:	56                   	push   esi
c000859a:	53                   	push   ebx
c000859b:	83 ec 14             	sub    esp,0x14
c000859e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00085a2:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00085a6:	85 f6                	test   esi,esi
c00085a8:	0f 84 2a 01 00 00    	je     c00086d8 <src_process+0x13f>
c00085ae:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00085b2:	0f 84 27 01 00 00    	je     c00086df <src_process+0x146>
c00085b8:	83 7e 24 00          	cmp    DWORD PTR [esi+0x24],0x0
c00085bc:	0f 84 1d 01 00 00    	je     c00086df <src_process+0x146>
c00085c2:	81 7e 18 2b 02 00 00 	cmp    DWORD PTR [esi+0x18],0x22b
c00085c9:	0f 85 17 01 00 00    	jne    c00086e6 <src_process+0x14d>
c00085cf:	85 db                	test   ebx,ebx
c00085d1:	0f 84 16 01 00 00    	je     c00086ed <src_process+0x154>
c00085d7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00085da:	0f 84 14 01 00 00    	je     c00086f4 <src_process+0x15b>
c00085e0:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
c00085e4:	0f 84 0a 01 00 00    	je     c00086f4 <src_process+0x15b>
c00085ea:	50                   	push   eax
c00085eb:	50                   	push   eax
c00085ec:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00085ef:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00085f2:	e8 bf fe ff ff       	call   c00084b6 <is_bad_src_ratio>
c00085f7:	83 c4 10             	add    esp,0x10
c00085fa:	85 c0                	test   eax,eax
c00085fc:	0f 85 f9 00 00 00    	jne    c00086fb <src_process+0x162>
c0008602:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008606:	79 07                	jns    c000860f <src_process+0x76>
c0008608:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000860f:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0008613:	79 07                	jns    c000861c <src_process+0x83>
c0008615:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000861c:	8b 13                	mov    edx,DWORD PTR [ebx]
c000861e:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008621:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0008624:	39 ca                	cmp    edx,ecx
c0008626:	73 0b                	jae    c0008633 <src_process+0x9a>
c0008628:	0f af 43 08          	imul   eax,DWORD PTR [ebx+0x8]
c000862c:	8d 04 82             	lea    eax,[edx+eax*4]
c000862f:	39 c1                	cmp    ecx,eax
c0008631:	eb 09                	jmp    c000863c <src_process+0xa3>
c0008633:	0f af 43 0c          	imul   eax,DWORD PTR [ebx+0xc]
c0008637:	8d 04 81             	lea    eax,[ecx+eax*4]
c000863a:	39 c2                	cmp    edx,eax
c000863c:	0f 82 c0 00 00 00    	jb     c0008702 <src_process+0x169>
c0008642:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008649:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008650:	68 00 00 70 3f       	push   0x3f700000
c0008655:	6a 00                	push   0x0
c0008657:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000865a:	ff 36                	push   DWORD PTR [esi]
c000865c:	e8 ae c9 01 00       	call   c002500f <__ltdf2>
c0008661:	83 c4 10             	add    esp,0x10
c0008664:	85 c0                	test   eax,eax
c0008666:	79 0b                	jns    c0008673 <src_process+0xda>
c0008668:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000866b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000866e:	89 06                	mov    DWORD PTR [esi],eax
c0008670:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0008673:	83 ec 10             	sub    esp,0x10
c0008676:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008679:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000867c:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000867f:	ff 36                	push   DWORD PTR [esi]
c0008681:	e8 8e c0 01 00       	call   c0024714 <__subdf3>
c0008686:	83 c4 18             	add    esp,0x18
c0008689:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000868d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008691:	52                   	push   edx
c0008692:	50                   	push   eax
c0008693:	e8 08 cb 01 00       	call   c00251a0 <fabs>
c0008698:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000869c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00086a0:	83 c4 10             	add    esp,0x10
c00086a3:	68 af 03 d2 3c       	push   0x3cd203af
c00086a8:	68 16 56 e7 9e       	push   0x9ee75616
c00086ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00086b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00086b5:	e8 55 c9 01 00       	call   c002500f <__ltdf2>
c00086ba:	83 c4 10             	add    esp,0x10
c00086bd:	85 c0                	test   eax,eax
c00086bf:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c00086c3:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00086c7:	79 05                	jns    c00086ce <src_process+0x135>
c00086c9:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00086cc:	eb 03                	jmp    c00086d1 <src_process+0x138>
c00086ce:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00086d1:	83 c4 14             	add    esp,0x14
c00086d4:	5b                   	pop    ebx
c00086d5:	5e                   	pop    esi
c00086d6:	ff e0                	jmp    eax
c00086d8:	b8 02 00 00 00       	mov    eax,0x2
c00086dd:	eb 28                	jmp    c0008707 <src_process+0x16e>
c00086df:	b8 07 00 00 00       	mov    eax,0x7
c00086e4:	eb 21                	jmp    c0008707 <src_process+0x16e>
c00086e6:	b8 12 00 00 00       	mov    eax,0x12
c00086eb:	eb 1a                	jmp    c0008707 <src_process+0x16e>
c00086ed:	b8 03 00 00 00       	mov    eax,0x3
c00086f2:	eb 13                	jmp    c0008707 <src_process+0x16e>
c00086f4:	b8 04 00 00 00       	mov    eax,0x4
c00086f9:	eb 0c                	jmp    c0008707 <src_process+0x16e>
c00086fb:	b8 06 00 00 00       	mov    eax,0x6
c0008700:	eb 05                	jmp    c0008707 <src_process+0x16e>
c0008702:	b8 10 00 00 00       	mov    eax,0x10
c0008707:	83 c4 14             	add    esp,0x14
c000870a:	5b                   	pop    ebx
c000870b:	5e                   	pop    esi
c000870c:	c3                   	ret    

c000870d <src_callback_read>:
c000870d:	55                   	push   ebp
c000870e:	57                   	push   edi
c000870f:	56                   	push   esi
c0008710:	53                   	push   ebx
c0008711:	83 ec 3c             	sub    esp,0x3c
c0008714:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008718:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000871c:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008720:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008724:	85 ed                	test   ebp,ebp
c0008726:	0f 8e 30 01 00 00    	jle    c000885c <src_callback_read+0x14f>
c000872c:	85 db                	test   ebx,ebx
c000872e:	0f 84 28 01 00 00    	je     c000885c <src_callback_read+0x14f>
c0008734:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000873b:	74 0c                	je     c0008749 <src_callback_read+0x3c>
c000873d:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008744:	e9 13 01 00 00       	jmp    c000885c <src_callback_read+0x14f>
c0008749:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000874d:	75 0c                	jne    c000875b <src_callback_read+0x4e>
c000874f:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008756:	e9 01 01 00 00       	jmp    c000885c <src_callback_read+0x14f>
c000875b:	51                   	push   ecx
c000875c:	6a 24                	push   0x24
c000875e:	6a 00                	push   0x0
c0008760:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008764:	50                   	push   eax
c0008765:	e8 13 7f ff ff       	call   c000067d <memset>
c000876a:	58                   	pop    eax
c000876b:	5a                   	pop    edx
c000876c:	57                   	push   edi
c000876d:	56                   	push   esi
c000876e:	e8 43 fd ff ff       	call   c00084b6 <is_bad_src_ratio>
c0008773:	83 c4 10             	add    esp,0x10
c0008776:	85 c0                	test   eax,eax
c0008778:	74 0c                	je     c0008786 <src_callback_read+0x79>
c000877a:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008781:	e9 d6 00 00 00       	jmp    c000885c <src_callback_read+0x14f>
c0008786:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000878a:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000878e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008792:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0008796:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0008799:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000879d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00087a1:	31 f6                	xor    esi,esi
c00087a3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00087a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00087aa:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00087af:	75 30                	jne    c00087e1 <src_callback_read+0xd4>
c00087b1:	8d 44 24 04          	lea    eax,[esp+0x4]
c00087b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087b9:	52                   	push   edx
c00087ba:	52                   	push   edx
c00087bb:	8d 44 24 10          	lea    eax,[esp+0x10]
c00087bf:	50                   	push   eax
c00087c0:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087c3:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00087c6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00087ca:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00087ce:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00087d2:	83 c4 10             	add    esp,0x10
c00087d5:	85 c0                	test   eax,eax
c00087d7:	75 08                	jne    c00087e1 <src_callback_read+0xd4>
c00087d9:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00087e1:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c00087e8:	50                   	push   eax
c00087e9:	50                   	push   eax
c00087ea:	8d 44 24 14          	lea    eax,[esp+0x14]
c00087ee:	50                   	push   eax
c00087ef:	53                   	push   ebx
c00087f0:	e8 a4 fd ff ff       	call   c0008599 <src_process>
c00087f5:	83 c4 10             	add    esp,0x10
c00087f8:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c00087ff:	85 c0                	test   eax,eax
c0008801:	75 42                	jne    c0008845 <src_callback_read+0x138>
c0008803:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008807:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000880a:	89 f9                	mov    ecx,edi
c000880c:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008810:	0f af ca             	imul   ecx,edx
c0008813:	c1 e1 02             	shl    ecx,0x2
c0008816:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c000881a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000881e:	0f af d1             	imul   edx,ecx
c0008821:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008825:	c1 e2 02             	shl    edx,0x2
c0008828:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c000882c:	8d 14 31             	lea    edx,[ecx+esi*1]
c000882f:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008834:	75 04                	jne    c000883a <src_callback_read+0x12d>
c0008836:	85 c9                	test   ecx,ecx
c0008838:	74 0b                	je     c0008845 <src_callback_read+0x138>
c000883a:	39 d5                	cmp    ebp,edx
c000883c:	7e 09                	jle    c0008847 <src_callback_read+0x13a>
c000883e:	89 d6                	mov    esi,edx
c0008840:	e9 65 ff ff ff       	jmp    c00087aa <src_callback_read+0x9d>
c0008845:	89 f2                	mov    edx,esi
c0008847:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000884b:	85 c0                	test   eax,eax
c000884d:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008850:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008854:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008857:	74 05                	je     c000885e <src_callback_read+0x151>
c0008859:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000885c:	31 d2                	xor    edx,edx
c000885e:	83 c4 3c             	add    esp,0x3c
c0008861:	89 d0                	mov    eax,edx
c0008863:	5b                   	pop    ebx
c0008864:	5e                   	pop    esi
c0008865:	5f                   	pop    edi
c0008866:	5d                   	pop    ebp
c0008867:	c3                   	ret    

c0008868 <src_set_ratio>:
c0008868:	57                   	push   edi
c0008869:	b8 02 00 00 00       	mov    eax,0x2
c000886e:	56                   	push   esi
c000886f:	53                   	push   ebx
c0008870:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008874:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008878:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000887c:	85 db                	test   ebx,ebx
c000887e:	74 2d                	je     c00088ad <src_set_ratio+0x45>
c0008880:	b8 07 00 00 00       	mov    eax,0x7
c0008885:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008889:	74 22                	je     c00088ad <src_set_ratio+0x45>
c000888b:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c000888f:	74 1c                	je     c00088ad <src_set_ratio+0x45>
c0008891:	50                   	push   eax
c0008892:	50                   	push   eax
c0008893:	57                   	push   edi
c0008894:	56                   	push   esi
c0008895:	e8 1c fc ff ff       	call   c00084b6 <is_bad_src_ratio>
c000889a:	83 c4 10             	add    esp,0x10
c000889d:	85 c0                	test   eax,eax
c000889f:	75 07                	jne    c00088a8 <src_set_ratio+0x40>
c00088a1:	89 33                	mov    DWORD PTR [ebx],esi
c00088a3:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c00088a6:	eb 05                	jmp    c00088ad <src_set_ratio+0x45>
c00088a8:	b8 06 00 00 00       	mov    eax,0x6
c00088ad:	5b                   	pop    ebx
c00088ae:	5e                   	pop    esi
c00088af:	5f                   	pop    edi
c00088b0:	c3                   	ret    

c00088b1 <src_get_channels>:
c00088b1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00088b5:	b8 02 00 00 00       	mov    eax,0x2
c00088ba:	85 d2                	test   edx,edx
c00088bc:	74 14                	je     c00088d2 <src_get_channels+0x21>
c00088be:	b8 07 00 00 00       	mov    eax,0x7
c00088c3:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c00088c7:	74 09                	je     c00088d2 <src_get_channels+0x21>
c00088c9:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c00088cd:	74 03                	je     c00088d2 <src_get_channels+0x21>
c00088cf:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00088d2:	c3                   	ret    

c00088d3 <src_reset>:
c00088d3:	53                   	push   ebx
c00088d4:	b8 02 00 00 00       	mov    eax,0x2
c00088d9:	83 ec 08             	sub    esp,0x8
c00088dc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088e0:	85 db                	test   ebx,ebx
c00088e2:	74 36                	je     c000891a <src_reset+0x47>
c00088e4:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00088e7:	85 c0                	test   eax,eax
c00088e9:	74 09                	je     c00088f4 <src_reset+0x21>
c00088eb:	83 ec 0c             	sub    esp,0xc
c00088ee:	53                   	push   ebx
c00088ef:	ff d0                	call   eax
c00088f1:	83 c4 10             	add    esp,0x10
c00088f4:	31 c0                	xor    eax,eax
c00088f6:	31 d2                	xor    edx,edx
c00088f8:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00088fb:	89 03                	mov    DWORD PTR [ebx],eax
c00088fd:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008900:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008903:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000890a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008911:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008918:	31 c0                	xor    eax,eax
c000891a:	83 c4 08             	add    esp,0x8
c000891d:	5b                   	pop    ebx
c000891e:	c3                   	ret    

c000891f <src_new>:
c000891f:	57                   	push   edi
c0008920:	56                   	push   esi
c0008921:	53                   	push   ebx
c0008922:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008926:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000892a:	85 f6                	test   esi,esi
c000892c:	74 73                	je     c00089a1 <src_new+0x82>
c000892e:	85 ff                	test   edi,edi
c0008930:	7f 08                	jg     c000893a <src_new+0x1b>
c0008932:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008938:	eb 1e                	jmp    c0008958 <src_new+0x39>
c000893a:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008940:	50                   	push   eax
c0008941:	50                   	push   eax
c0008942:	6a 3c                	push   0x3c
c0008944:	6a 01                	push   0x1
c0008946:	e8 0b 68 00 00       	call   c000f156 <calloc>
c000894b:	83 c4 10             	add    esp,0x10
c000894e:	89 c3                	mov    ebx,eax
c0008950:	85 c0                	test   eax,eax
c0008952:	75 10                	jne    c0008964 <src_new+0x45>
c0008954:	85 f6                	test   esi,esi
c0008956:	75 04                	jne    c000895c <src_new+0x3d>
c0008958:	31 db                	xor    ebx,ebx
c000895a:	eb 4b                	jmp    c00089a7 <src_new+0x88>
c000895c:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008962:	eb 43                	jmp    c00089a7 <src_new+0x88>
c0008964:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008967:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c000896e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008972:	e8 a2 fb ff ff       	call   c0008519 <psrc_set_converter>
c0008977:	85 c0                	test   eax,eax
c0008979:	74 18                	je     c0008993 <src_new+0x74>
c000897b:	85 f6                	test   esi,esi
c000897d:	74 06                	je     c0008985 <src_new+0x66>
c000897f:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008985:	83 ec 0c             	sub    esp,0xc
c0008988:	53                   	push   ebx
c0008989:	31 db                	xor    ebx,ebx
c000898b:	e8 a6 67 00 00       	call   c000f136 <free>
c0008990:	83 c4 10             	add    esp,0x10
c0008993:	83 ec 0c             	sub    esp,0xc
c0008996:	53                   	push   ebx
c0008997:	e8 37 ff ff ff       	call   c00088d3 <src_reset>
c000899c:	83 c4 10             	add    esp,0x10
c000899f:	eb 06                	jmp    c00089a7 <src_new+0x88>
c00089a1:	85 ff                	test   edi,edi
c00089a3:	7f 9b                	jg     c0008940 <src_new+0x21>
c00089a5:	eb b1                	jmp    c0008958 <src_new+0x39>
c00089a7:	89 d8                	mov    eax,ebx
c00089a9:	5b                   	pop    ebx
c00089aa:	5e                   	pop    esi
c00089ab:	5f                   	pop    edi
c00089ac:	c3                   	ret    

c00089ad <src_callback_new>:
c00089ad:	56                   	push   esi
c00089ae:	53                   	push   ebx
c00089af:	53                   	push   ebx
c00089b0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00089b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00089b8:	85 f6                	test   esi,esi
c00089ba:	75 0e                	jne    c00089ca <src_callback_new+0x1d>
c00089bc:	31 db                	xor    ebx,ebx
c00089be:	85 c0                	test   eax,eax
c00089c0:	74 47                	je     c0008a09 <src_callback_new+0x5c>
c00089c2:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c00089c8:	eb 3f                	jmp    c0008a09 <src_callback_new+0x5c>
c00089ca:	85 c0                	test   eax,eax
c00089cc:	74 06                	je     c00089d4 <src_callback_new+0x27>
c00089ce:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00089d4:	51                   	push   ecx
c00089d5:	50                   	push   eax
c00089d6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00089da:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00089de:	e8 3c ff ff ff       	call   c000891f <src_new>
c00089e3:	83 c4 10             	add    esp,0x10
c00089e6:	89 c3                	mov    ebx,eax
c00089e8:	85 c0                	test   eax,eax
c00089ea:	74 1d                	je     c0008a09 <src_callback_new+0x5c>
c00089ec:	83 ec 0c             	sub    esp,0xc
c00089ef:	50                   	push   eax
c00089f0:	e8 de fe ff ff       	call   c00088d3 <src_reset>
c00089f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00089f9:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a00:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008a03:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008a06:	83 c4 10             	add    esp,0x10
c0008a09:	89 d8                	mov    eax,ebx
c0008a0b:	5a                   	pop    edx
c0008a0c:	5b                   	pop    ebx
c0008a0d:	5e                   	pop    esi
c0008a0e:	c3                   	ret    

c0008a0f <src_get_name>:
c0008a0f:	53                   	push   ebx
c0008a10:	83 ec 14             	sub    esp,0x14
c0008a13:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a17:	53                   	push   ebx
c0008a18:	e8 3e 4c 00 00       	call   c000d65b <sinc_get_name>
c0008a1d:	83 c4 10             	add    esp,0x10
c0008a20:	85 c0                	test   eax,eax
c0008a22:	75 1d                	jne    c0008a41 <src_get_name+0x32>
c0008a24:	83 ec 0c             	sub    esp,0xc
c0008a27:	53                   	push   ebx
c0008a28:	e8 18 54 00 00       	call   c000de45 <zoh_get_name>
c0008a2d:	83 c4 10             	add    esp,0x10
c0008a30:	85 c0                	test   eax,eax
c0008a32:	75 0d                	jne    c0008a41 <src_get_name+0x32>
c0008a34:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a38:	83 c4 08             	add    esp,0x8
c0008a3b:	5b                   	pop    ebx
c0008a3c:	e9 61 0b 00 00       	jmp    c00095a2 <linear_get_name>
c0008a41:	83 c4 08             	add    esp,0x8
c0008a44:	5b                   	pop    ebx
c0008a45:	c3                   	ret    

c0008a46 <src_get_description>:
c0008a46:	53                   	push   ebx
c0008a47:	83 ec 14             	sub    esp,0x14
c0008a4a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a4e:	53                   	push   ebx
c0008a4f:	e8 1a 4c 00 00       	call   c000d66e <sinc_get_description>
c0008a54:	83 c4 10             	add    esp,0x10
c0008a57:	85 c0                	test   eax,eax
c0008a59:	75 1d                	jne    c0008a78 <src_get_description+0x32>
c0008a5b:	83 ec 0c             	sub    esp,0xc
c0008a5e:	53                   	push   ebx
c0008a5f:	e8 f0 53 00 00       	call   c000de54 <zoh_get_description>
c0008a64:	83 c4 10             	add    esp,0x10
c0008a67:	85 c0                	test   eax,eax
c0008a69:	75 0d                	jne    c0008a78 <src_get_description+0x32>
c0008a6b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a6f:	83 c4 08             	add    esp,0x8
c0008a72:	5b                   	pop    ebx
c0008a73:	e9 39 0b 00 00       	jmp    c00095b1 <linear_get_description>
c0008a78:	83 c4 08             	add    esp,0x8
c0008a7b:	5b                   	pop    ebx
c0008a7c:	c3                   	ret    

c0008a7d <src_get_version>:
c0008a7d:	b8 40 64 02 c0       	mov    eax,0xc0026440
c0008a82:	c3                   	ret    

c0008a83 <src_is_valid_ratio>:
c0008a83:	83 ec 14             	sub    esp,0x14
c0008a86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a8e:	e8 23 fa ff ff       	call   c00084b6 <is_bad_src_ratio>
c0008a93:	85 c0                	test   eax,eax
c0008a95:	0f 94 c0             	sete   al
c0008a98:	83 c4 1c             	add    esp,0x1c
c0008a9b:	0f b6 c0             	movzx  eax,al
c0008a9e:	c3                   	ret    

c0008a9f <src_error>:
c0008a9f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008aa3:	31 c0                	xor    eax,eax
c0008aa5:	85 d2                	test   edx,edx
c0008aa7:	74 03                	je     c0008aac <src_error+0xd>
c0008aa9:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008aac:	c3                   	ret    

c0008aad <src_strerror>:
c0008aad:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008ab1:	31 c0                	xor    eax,eax
c0008ab3:	83 fa 17             	cmp    edx,0x17
c0008ab6:	77 07                	ja     c0008abf <src_strerror+0x12>
c0008ab8:	8b 04 95 a0 68 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9760]
c0008abf:	c3                   	ret    

c0008ac0 <src_simple>:
c0008ac0:	56                   	push   esi
c0008ac1:	53                   	push   ebx
c0008ac2:	83 ec 18             	sub    esp,0x18
c0008ac5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008ac9:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008acd:	50                   	push   eax
c0008ace:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008ad2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008ad6:	e8 44 fe ff ff       	call   c000891f <src_new>
c0008adb:	83 c4 10             	add    esp,0x10
c0008ade:	85 c0                	test   eax,eax
c0008ae0:	75 06                	jne    c0008ae8 <src_simple+0x28>
c0008ae2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008ae6:	eb 25                	jmp    c0008b0d <src_simple+0x4d>
c0008ae8:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008aef:	89 c3                	mov    ebx,eax
c0008af1:	50                   	push   eax
c0008af2:	50                   	push   eax
c0008af3:	56                   	push   esi
c0008af4:	53                   	push   ebx
c0008af5:	e8 9f fa ff ff       	call   c0008599 <src_process>
c0008afa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008afd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008b01:	e8 57 fa ff ff       	call   c000855d <src_delete>
c0008b06:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b0a:	83 c4 10             	add    esp,0x10
c0008b0d:	83 c4 14             	add    esp,0x14
c0008b10:	5b                   	pop    ebx
c0008b11:	5e                   	pop    esi
c0008b12:	c3                   	ret    

c0008b13 <src_short_to_float_array>:
c0008b13:	53                   	push   ebx
c0008b14:	83 ec 18             	sub    esp,0x18
c0008b17:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008b1b:	85 db                	test   ebx,ebx
c0008b1d:	74 54                	je     c0008b73 <src_short_to_float_array+0x60>
c0008b1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008b23:	4b                   	dec    ebx
c0008b24:	83 ec 0c             	sub    esp,0xc
c0008b27:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008b2b:	50                   	push   eax
c0008b2c:	e8 72 c2 01 00       	call   c0024da3 <__floatsidf>
c0008b31:	83 c4 10             	add    esp,0x10
c0008b34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008b38:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008b3c:	68 00 00 00 3f       	push   0x3f000000
c0008b41:	6a 00                	push   0x0
c0008b43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008b47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008b4b:	e8 f0 bb 01 00       	call   c0024740 <__muldf3>
c0008b50:	59                   	pop    ecx
c0008b51:	59                   	pop    ecx
c0008b52:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008b56:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008b5a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008b5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008b62:	e8 ac c4 01 00       	call   c0025013 <__truncdfsf2>
c0008b67:	83 c4 10             	add    esp,0x10
c0008b6a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008b6e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008b71:	eb a8                	jmp    c0008b1b <src_short_to_float_array+0x8>
c0008b73:	83 c4 18             	add    esp,0x18
c0008b76:	5b                   	pop    ebx
c0008b77:	c3                   	ret    

c0008b78 <src_float_to_short_array>:
c0008b78:	56                   	push   esi
c0008b79:	53                   	push   ebx
c0008b7a:	83 ec 14             	sub    esp,0x14
c0008b7d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b81:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008b85:	85 db                	test   ebx,ebx
c0008b87:	0f 84 a4 00 00 00    	je     c0008c31 <src_float_to_short_array+0xb9>
c0008b8d:	83 ec 0c             	sub    esp,0xc
c0008b90:	4b                   	dec    ebx
c0008b91:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008b95:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008b98:	e8 9a c5 01 00       	call   c0025137 <__extendsfdf2>
c0008b9d:	83 c4 10             	add    esp,0x10
c0008ba0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ba4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ba8:	68 00 00 e0 41       	push   0x41e00000
c0008bad:	6a 00                	push   0x0
c0008baf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bb3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bb7:	e8 84 bb 01 00       	call   c0024740 <__muldf3>
c0008bbc:	83 c4 10             	add    esp,0x10
c0008bbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008bc3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008bc7:	68 ff ff df 41       	push   0x41dfffff
c0008bcc:	68 00 00 c0 ff       	push   0xffc00000
c0008bd1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bd9:	e8 2f c4 01 00       	call   c002500d <__gedf2>
c0008bde:	83 c4 10             	add    esp,0x10
c0008be1:	85 c0                	test   eax,eax
c0008be3:	78 08                	js     c0008bed <src_float_to_short_array+0x75>
c0008be5:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008beb:	eb 98                	jmp    c0008b85 <src_float_to_short_array+0xd>
c0008bed:	68 00 00 e0 c1       	push   0xc1e00000
c0008bf2:	6a 00                	push   0x0
c0008bf4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bf8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bfc:	e8 10 c4 01 00       	call   c0025011 <__ledf2>
c0008c01:	83 c4 10             	add    esp,0x10
c0008c04:	85 c0                	test   eax,eax
c0008c06:	7f 0b                	jg     c0008c13 <src_float_to_short_array+0x9b>
c0008c08:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008c0e:	e9 72 ff ff ff       	jmp    c0008b85 <src_float_to_short_array+0xd>
c0008c13:	50                   	push   eax
c0008c14:	50                   	push   eax
c0008c15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c1d:	e8 9e c5 01 00       	call   c00251c0 <lrint>
c0008c22:	83 c4 10             	add    esp,0x10
c0008c25:	c1 f8 10             	sar    eax,0x10
c0008c28:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008c2c:	e9 54 ff ff ff       	jmp    c0008b85 <src_float_to_short_array+0xd>
c0008c31:	83 c4 14             	add    esp,0x14
c0008c34:	5b                   	pop    ebx
c0008c35:	5e                   	pop    esi
c0008c36:	c3                   	ret    

c0008c37 <src_int_to_float_array>:
c0008c37:	53                   	push   ebx
c0008c38:	83 ec 18             	sub    esp,0x18
c0008c3b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008c3f:	85 db                	test   ebx,ebx
c0008c41:	74 52                	je     c0008c95 <src_int_to_float_array+0x5e>
c0008c43:	83 ec 0c             	sub    esp,0xc
c0008c46:	4b                   	dec    ebx
c0008c47:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008c4b:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008c4e:	e8 50 c1 01 00       	call   c0024da3 <__floatsidf>
c0008c53:	83 c4 10             	add    esp,0x10
c0008c56:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c5a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c5e:	68 00 00 00 3e       	push   0x3e000000
c0008c63:	6a 00                	push   0x0
c0008c65:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c69:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c6d:	e8 ce ba 01 00       	call   c0024740 <__muldf3>
c0008c72:	59                   	pop    ecx
c0008c73:	59                   	pop    ecx
c0008c74:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008c78:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008c7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c84:	e8 8a c3 01 00       	call   c0025013 <__truncdfsf2>
c0008c89:	83 c4 10             	add    esp,0x10
c0008c8c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008c90:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008c93:	eb aa                	jmp    c0008c3f <src_int_to_float_array+0x8>
c0008c95:	83 c4 18             	add    esp,0x18
c0008c98:	5b                   	pop    ebx
c0008c99:	c3                   	ret    

c0008c9a <src_float_to_int_array>:
c0008c9a:	56                   	push   esi
c0008c9b:	53                   	push   ebx
c0008c9c:	83 ec 14             	sub    esp,0x14
c0008c9f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008ca3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ca7:	85 db                	test   ebx,ebx
c0008ca9:	0f 84 a2 00 00 00    	je     c0008d51 <src_float_to_int_array+0xb7>
c0008caf:	83 ec 0c             	sub    esp,0xc
c0008cb2:	4b                   	dec    ebx
c0008cb3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008cb7:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008cba:	e8 78 c4 01 00       	call   c0025137 <__extendsfdf2>
c0008cbf:	83 c4 10             	add    esp,0x10
c0008cc2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cc6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cca:	68 00 00 e0 41       	push   0x41e00000
c0008ccf:	6a 00                	push   0x0
c0008cd1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cd9:	e8 62 ba 01 00       	call   c0024740 <__muldf3>
c0008cde:	83 c4 10             	add    esp,0x10
c0008ce1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ce5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ce9:	68 ff ff df 41       	push   0x41dfffff
c0008cee:	68 00 00 c0 ff       	push   0xffc00000
c0008cf3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cf7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cfb:	e8 0d c3 01 00       	call   c002500d <__gedf2>
c0008d00:	83 c4 10             	add    esp,0x10
c0008d03:	85 c0                	test   eax,eax
c0008d05:	78 09                	js     c0008d10 <src_float_to_int_array+0x76>
c0008d07:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008d0e:	eb 97                	jmp    c0008ca7 <src_float_to_int_array+0xd>
c0008d10:	68 00 00 e0 c1       	push   0xc1e00000
c0008d15:	6a 00                	push   0x0
c0008d17:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d1b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d1f:	e8 ed c2 01 00       	call   c0025011 <__ledf2>
c0008d24:	83 c4 10             	add    esp,0x10
c0008d27:	85 c0                	test   eax,eax
c0008d29:	7f 0c                	jg     c0008d37 <src_float_to_int_array+0x9d>
c0008d2b:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008d32:	e9 70 ff ff ff       	jmp    c0008ca7 <src_float_to_int_array+0xd>
c0008d37:	50                   	push   eax
c0008d38:	50                   	push   eax
c0008d39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d41:	e8 7a c4 01 00       	call   c00251c0 <lrint>
c0008d46:	83 c4 10             	add    esp,0x10
c0008d49:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008d4c:	e9 56 ff ff ff       	jmp    c0008ca7 <src_float_to_int_array+0xd>
c0008d51:	83 c4 14             	add    esp,0x14
c0008d54:	5b                   	pop    ebx
c0008d55:	5e                   	pop    esi
c0008d56:	c3                   	ret    

c0008d57 <is_bad_src_ratio>:
c0008d57:	83 ec 1c             	sub    esp,0x1c
c0008d5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d5e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d62:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008d66:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008d6a:	b8 00 00 00 00       	mov    eax,0x0
c0008d6f:	ba 00 00 70 3f       	mov    edx,0x3f700000
c0008d74:	52                   	push   edx
c0008d75:	50                   	push   eax
c0008d76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d7e:	e8 8c c2 01 00       	call   c002500f <__ltdf2>
c0008d83:	83 c4 10             	add    esp,0x10
c0008d86:	85 c0                	test   eax,eax
c0008d88:	78 20                	js     c0008daa <is_bad_src_ratio+0x53>
c0008d8a:	b8 00 00 00 00       	mov    eax,0x0
c0008d8f:	ba 00 00 70 40       	mov    edx,0x40700000
c0008d94:	52                   	push   edx
c0008d95:	50                   	push   eax
c0008d96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d9e:	e8 4e c2 01 00       	call   c0024ff1 <__gtdf2>
c0008da3:	83 c4 10             	add    esp,0x10
c0008da6:	85 c0                	test   eax,eax
c0008da8:	7e 07                	jle    c0008db1 <is_bad_src_ratio+0x5a>
c0008daa:	b8 01 00 00 00       	mov    eax,0x1
c0008daf:	eb 05                	jmp    c0008db6 <is_bad_src_ratio+0x5f>
c0008db1:	b8 00 00 00 00       	mov    eax,0x0
c0008db6:	83 c4 1c             	add    esp,0x1c
c0008db9:	c3                   	ret    

c0008dba <fmod_one>:
c0008dba:	83 ec 2c             	sub    esp,0x2c
c0008dbd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008dc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008dc5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008dc9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008dcd:	83 ec 08             	sub    esp,0x8
c0008dd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dd4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dd8:	e8 e3 c3 01 00       	call   c00251c0 <lrint>
c0008ddd:	83 c4 10             	add    esp,0x10
c0008de0:	83 ec 0c             	sub    esp,0xc
c0008de3:	50                   	push   eax
c0008de4:	e8 ba bf 01 00       	call   c0024da3 <__floatsidf>
c0008de9:	83 c4 10             	add    esp,0x10
c0008dec:	52                   	push   edx
c0008ded:	50                   	push   eax
c0008dee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008df2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008df6:	e8 19 b9 01 00       	call   c0024714 <__subdf3>
c0008dfb:	83 c4 10             	add    esp,0x10
c0008dfe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008e02:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008e06:	b8 00 00 00 00       	mov    eax,0x0
c0008e0b:	ba 00 00 00 00       	mov    edx,0x0
c0008e10:	52                   	push   edx
c0008e11:	50                   	push   eax
c0008e12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008e16:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008e1a:	e8 f0 c1 01 00       	call   c002500f <__ltdf2>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	85 c0                	test   eax,eax
c0008e24:	79 1e                	jns    c0008e44 <fmod_one+0x8a>
c0008e26:	b8 00 00 00 00       	mov    eax,0x0
c0008e2b:	ba 00 00 f0 3f       	mov    edx,0x3ff00000
c0008e30:	52                   	push   edx
c0008e31:	50                   	push   eax
c0008e32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008e36:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008e3a:	e8 84 b2 01 00       	call   c00240c3 <__adddf3>
c0008e3f:	83 c4 10             	add    esp,0x10
c0008e42:	eb 08                	jmp    c0008e4c <fmod_one+0x92>
c0008e44:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008e48:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e4c:	83 c4 2c             	add    esp,0x2c
c0008e4f:	c3                   	ret    

c0008e50 <linear_vari_process>:
c0008e50:	55                   	push   ebp
c0008e51:	57                   	push   edi
c0008e52:	56                   	push   esi
c0008e53:	53                   	push   ebx
c0008e54:	83 ec 3c             	sub    esp,0x3c
c0008e57:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008e5b:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008e63:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008e67:	0f 8e f7 06 00 00    	jle    c0009564 <linear_vari_process+0x714>
c0008e6d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008e71:	c7 44 24 28 05 00 00 00 	mov    DWORD PTR [esp+0x28],0x5
c0008e79:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008e7c:	85 db                	test   ebx,ebx
c0008e7e:	0f 84 e0 06 00 00    	je     c0009564 <linear_vari_process+0x714>
c0008e84:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008e87:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008e8b:	74 19                	je     c0008ea6 <linear_vari_process+0x56>
c0008e8d:	31 d2                	xor    edx,edx
c0008e8f:	39 c2                	cmp    edx,eax
c0008e91:	7d 0c                	jge    c0008e9f <linear_vari_process+0x4f>
c0008e93:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008e95:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0008e98:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0008e9c:	42                   	inc    edx
c0008e9d:	eb f0                	jmp    c0008e8f <linear_vari_process+0x3f>
c0008e9f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008ea6:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008ea9:	0f af d0             	imul   edx,eax
c0008eac:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008eaf:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008eb3:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008eba:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008ebd:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008ec4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008ec8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008ecb:	8b 00                	mov    eax,DWORD PTR [eax]
c0008ecd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008ed1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ed5:	57                   	push   edi
c0008ed6:	57                   	push   edi
c0008ed7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008edb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008edf:	e8 73 fe ff ff       	call   c0008d57 <is_bad_src_ratio>
c0008ee4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0008ee8:	83 c4 10             	add    esp,0x10
c0008eeb:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0008ef0:	0f 85 66 06 00 00    	jne    c000955c <linear_vari_process+0x70c>
c0008ef6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008efa:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0008efd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008f00:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f04:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f08:	68 00 00 f0 3f       	push   0x3ff00000
c0008f0d:	6a 00                	push   0x0
c0008f0f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f13:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f17:	e8 f3 c0 01 00       	call   c002500f <__ltdf2>
c0008f1c:	83 c4 10             	add    esp,0x10
c0008f1f:	85 c0                	test   eax,eax
c0008f21:	0f 89 89 02 00 00    	jns    c00091b0 <linear_vari_process+0x360>
c0008f27:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0008f2a:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c0008f2d:	0f 8d 7d 02 00 00    	jge    c00091b0 <linear_vari_process+0x360>
c0008f33:	83 ec 0c             	sub    esp,0xc
c0008f36:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0008f39:	e8 65 be 01 00       	call   c0024da3 <__floatsidf>
c0008f3e:	83 c4 10             	add    esp,0x10
c0008f41:	89 04 24             	mov    DWORD PTR [esp],eax
c0008f44:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008f48:	68 00 00 f0 3f       	push   0x3ff00000
c0008f4d:	6a 00                	push   0x0
c0008f4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f57:	e8 67 b1 01 00       	call   c00240c3 <__adddf3>
c0008f5c:	83 c4 10             	add    esp,0x10
c0008f5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f63:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f67:	52                   	push   edx
c0008f68:	50                   	push   eax
c0008f69:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f6d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f71:	e8 ca b7 01 00       	call   c0024740 <__muldf3>
c0008f76:	5d                   	pop    ebp
c0008f77:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008f7b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008f7f:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0008f82:	e8 1c be 01 00       	call   c0024da3 <__floatsidf>
c0008f87:	83 c4 10             	add    esp,0x10
c0008f8a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f8e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f92:	52                   	push   edx
c0008f93:	50                   	push   eax
c0008f94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f9c:	e8 22 b1 01 00       	call   c00240c3 <__adddf3>
c0008fa1:	59                   	pop    ecx
c0008fa2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008fa6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008faa:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0008fad:	e8 f1 bd 01 00       	call   c0024da3 <__floatsidf>
c0008fb2:	83 c4 10             	add    esp,0x10
c0008fb5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008fb9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008fbd:	52                   	push   edx
c0008fbe:	50                   	push   eax
c0008fbf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fc3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fc7:	e8 41 c0 01 00       	call   c002500d <__gedf2>
c0008fcc:	83 c4 10             	add    esp,0x10
c0008fcf:	85 c0                	test   eax,eax
c0008fd1:	0f 89 d9 01 00 00    	jns    c00091b0 <linear_vari_process+0x360>
c0008fd7:	85 ff                	test   edi,edi
c0008fd9:	0f 8e f4 00 00 00    	jle    c00090d3 <linear_vari_process+0x283>
c0008fdf:	83 ec 10             	sub    esp,0x10
c0008fe2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0008fe5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0008fe8:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0008fec:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0008fef:	ff 30                	push   DWORD PTR [eax]
c0008ff1:	e8 1e b7 01 00       	call   c0024714 <__subdf3>
c0008ff6:	83 c4 18             	add    esp,0x18
c0008ff9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ffd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009001:	52                   	push   edx
c0009002:	50                   	push   eax
c0009003:	e8 98 c1 01 00       	call   c00251a0 <fabs>
c0009008:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000900c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009010:	83 c4 10             	add    esp,0x10
c0009013:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0009018:	68 23 42 92 0c       	push   0xc924223
c000901d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009021:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009025:	e8 c7 bf 01 00       	call   c0024ff1 <__gtdf2>
c000902a:	83 c4 10             	add    esp,0x10
c000902d:	85 c0                	test   eax,eax
c000902f:	0f 8e 9e 00 00 00    	jle    c00090d3 <linear_vari_process+0x283>
c0009035:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009039:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000903c:	8b 00                	mov    eax,DWORD PTR [eax]
c000903e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009042:	89 04 24             	mov    DWORD PTR [esp],eax
c0009045:	52                   	push   edx
c0009046:	50                   	push   eax
c0009047:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000904a:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000904d:	e8 c2 b6 01 00       	call   c0024714 <__subdf3>
c0009052:	59                   	pop    ecx
c0009053:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009057:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000905b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000905e:	e8 40 bd 01 00       	call   c0024da3 <__floatsidf>
c0009063:	83 c4 10             	add    esp,0x10
c0009066:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000906a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000906e:	52                   	push   edx
c000906f:	50                   	push   eax
c0009070:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009074:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009078:	e8 c3 b6 01 00       	call   c0024740 <__muldf3>
c000907d:	5f                   	pop    edi
c000907e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009082:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009086:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009089:	e8 15 bd 01 00       	call   c0024da3 <__floatsidf>
c000908e:	83 c4 10             	add    esp,0x10
c0009091:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009095:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009099:	52                   	push   edx
c000909a:	50                   	push   eax
c000909b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090a3:	e8 7c b9 01 00       	call   c0024a24 <__divdf3>
c00090a8:	83 c4 10             	add    esp,0x10
c00090ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00090af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00090b3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00090b7:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00090bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090c3:	e8 fb af 01 00       	call   c00240c3 <__adddf3>
c00090c8:	83 c4 10             	add    esp,0x10
c00090cb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00090cf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00090d3:	31 ff                	xor    edi,edi
c00090d5:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00090d8:	0f 8e 9d 00 00 00    	jle    c000917b <linear_vari_process+0x32b>
c00090de:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00090e1:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00090e5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00090e8:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00090ec:	89 04 24             	mov    DWORD PTR [esp],eax
c00090ef:	8b 06                	mov    eax,DWORD PTR [esi]
c00090f1:	52                   	push   edx
c00090f2:	52                   	push   edx
c00090f3:	55                   	push   ebp
c00090f4:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00090f7:	47                   	inc    edi
c00090f8:	e8 5b a9 01 00       	call   c0023a58 <__subsf3>
c00090fd:	89 04 24             	mov    DWORD PTR [esp],eax
c0009100:	e8 32 c0 01 00       	call   c0025137 <__extendsfdf2>
c0009105:	83 c4 10             	add    esp,0x10
c0009108:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000910c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009110:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009114:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009118:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000911c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009120:	e8 1b b6 01 00       	call   c0024740 <__muldf3>
c0009125:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009128:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000912c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009130:	e8 02 c0 01 00       	call   c0025137 <__extendsfdf2>
c0009135:	83 c4 10             	add    esp,0x10
c0009138:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000913c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009140:	52                   	push   edx
c0009141:	50                   	push   eax
c0009142:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009146:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000914a:	e8 74 af 01 00       	call   c00240c3 <__adddf3>
c000914f:	59                   	pop    ecx
c0009150:	5d                   	pop    ebp
c0009151:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009155:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009159:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000915d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009161:	e8 ad be 01 00       	call   c0025013 <__truncdfsf2>
c0009166:	83 c4 10             	add    esp,0x10
c0009169:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000916c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009170:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009173:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009176:	e9 5a ff ff ff       	jmp    c00090d5 <linear_vari_process+0x285>
c000917b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000917f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009183:	68 00 00 f0 3f       	push   0x3ff00000
c0009188:	6a 00                	push   0x0
c000918a:	e8 95 b8 01 00       	call   c0024a24 <__divdf3>
c000918f:	83 c4 10             	add    esp,0x10
c0009192:	89 04 24             	mov    DWORD PTR [esp],eax
c0009195:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009199:	52                   	push   edx
c000919a:	50                   	push   eax
c000919b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000919f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091a3:	e8 1b af 01 00       	call   c00240c3 <__adddf3>
c00091a8:	83 c4 10             	add    esp,0x10
c00091ab:	e9 50 fd ff ff       	jmp    c0008f00 <linear_vari_process+0xb0>
c00091b0:	50                   	push   eax
c00091b1:	50                   	push   eax
c00091b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091ba:	e8 fb fb ff ff       	call   c0008dba <fmod_one>
c00091bf:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00091c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091d6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091da:	e8 35 b5 01 00       	call   c0024714 <__subdf3>
c00091df:	83 c4 18             	add    esp,0x18
c00091e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091ea:	52                   	push   edx
c00091eb:	50                   	push   eax
c00091ec:	e8 cf bf 01 00       	call   c00251c0 <lrint>
c00091f1:	83 c4 10             	add    esp,0x10
c00091f4:	0f af f8             	imul   edi,eax
c00091f7:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00091fa:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c00091fd:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009200:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009203:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009206:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c000920a:	0f 8d b4 02 00 00    	jge    c00094c4 <linear_vari_process+0x674>
c0009210:	83 ec 0c             	sub    esp,0xc
c0009213:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009216:	e8 88 bb 01 00       	call   c0024da3 <__floatsidf>
c000921b:	83 c4 10             	add    esp,0x10
c000921e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009222:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009226:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000922a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000922e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009232:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009236:	e8 05 b5 01 00       	call   c0024740 <__muldf3>
c000923b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000923e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009242:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009246:	e8 58 bb 01 00       	call   c0024da3 <__floatsidf>
c000924b:	83 c4 10             	add    esp,0x10
c000924e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009252:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009256:	52                   	push   edx
c0009257:	50                   	push   eax
c0009258:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000925c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009260:	e8 5e ae 01 00       	call   c00240c3 <__adddf3>
c0009265:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009268:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000926c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009270:	e8 2e bb 01 00       	call   c0024da3 <__floatsidf>
c0009275:	83 c4 10             	add    esp,0x10
c0009278:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000927c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009280:	52                   	push   edx
c0009281:	50                   	push   eax
c0009282:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009286:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000928a:	e8 80 bd 01 00       	call   c002500f <__ltdf2>
c000928f:	83 c4 10             	add    esp,0x10
c0009292:	85 c0                	test   eax,eax
c0009294:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009298:	0f 89 26 02 00 00    	jns    c00094c4 <linear_vari_process+0x674>
c000929e:	85 c9                	test   ecx,ecx
c00092a0:	0f 8e f5 00 00 00    	jle    c000939b <linear_vari_process+0x54b>
c00092a6:	83 ec 10             	sub    esp,0x10
c00092a9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00092ac:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00092af:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00092b3:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00092b6:	ff 30                	push   DWORD PTR [eax]
c00092b8:	e8 57 b4 01 00       	call   c0024714 <__subdf3>
c00092bd:	83 c4 18             	add    esp,0x18
c00092c0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092c4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092c8:	52                   	push   edx
c00092c9:	50                   	push   eax
c00092ca:	e8 d1 be 01 00       	call   c00251a0 <fabs>
c00092cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092d7:	83 c4 10             	add    esp,0x10
c00092da:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00092df:	68 23 42 92 0c       	push   0xc924223
c00092e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092ec:	e8 00 bd 01 00       	call   c0024ff1 <__gtdf2>
c00092f1:	83 c4 10             	add    esp,0x10
c00092f4:	85 c0                	test   eax,eax
c00092f6:	0f 8e 9f 00 00 00    	jle    c000939b <linear_vari_process+0x54b>
c00092fc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009300:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009303:	8b 00                	mov    eax,DWORD PTR [eax]
c0009305:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009309:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000930d:	52                   	push   edx
c000930e:	50                   	push   eax
c000930f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009312:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009315:	e8 fa b3 01 00       	call   c0024714 <__subdf3>
c000931a:	5f                   	pop    edi
c000931b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000931f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009323:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009326:	e8 78 ba 01 00       	call   c0024da3 <__floatsidf>
c000932b:	83 c4 10             	add    esp,0x10
c000932e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009332:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009336:	52                   	push   edx
c0009337:	50                   	push   eax
c0009338:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000933c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009340:	e8 fb b3 01 00       	call   c0024740 <__muldf3>
c0009345:	5d                   	pop    ebp
c0009346:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000934a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000934e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009351:	e8 4d ba 01 00       	call   c0024da3 <__floatsidf>
c0009356:	83 c4 10             	add    esp,0x10
c0009359:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000935d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009361:	52                   	push   edx
c0009362:	50                   	push   eax
c0009363:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009367:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000936b:	e8 b4 b6 01 00       	call   c0024a24 <__divdf3>
c0009370:	83 c4 10             	add    esp,0x10
c0009373:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009377:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000937b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000937f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009383:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009387:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000938b:	e8 33 ad 01 00       	call   c00240c3 <__adddf3>
c0009390:	83 c4 10             	add    esp,0x10
c0009393:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009397:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000939b:	31 ff                	xor    edi,edi
c000939d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00093a0:	39 f8                	cmp    eax,edi
c00093a2:	0f 8e ac 00 00 00    	jle    c0009454 <linear_vari_process+0x604>
c00093a8:	8b 16                	mov    edx,DWORD PTR [esi]
c00093aa:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00093ad:	29 c1                	sub    ecx,eax
c00093af:	89 c8                	mov    eax,ecx
c00093b1:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00093b4:	01 f8                	add    eax,edi
c00093b6:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00093ba:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00093bd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00093c0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093c4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00093c7:	51                   	push   ecx
c00093c8:	01 f8                	add    eax,edi
c00093ca:	51                   	push   ecx
c00093cb:	47                   	inc    edi
c00093cc:	55                   	push   ebp
c00093cd:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00093d0:	e8 83 a6 01 00       	call   c0023a58 <__subsf3>
c00093d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00093d8:	e8 5a bd 01 00       	call   c0025137 <__extendsfdf2>
c00093dd:	83 c4 10             	add    esp,0x10
c00093e0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00093e4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00093e8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00093ec:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00093f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093f8:	e8 43 b3 01 00       	call   c0024740 <__muldf3>
c00093fd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009400:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009404:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009408:	e8 2a bd 01 00       	call   c0025137 <__extendsfdf2>
c000940d:	83 c4 10             	add    esp,0x10
c0009410:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009414:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009418:	52                   	push   edx
c0009419:	50                   	push   eax
c000941a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000941e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009422:	e8 9c ac 01 00       	call   c00240c3 <__adddf3>
c0009427:	5d                   	pop    ebp
c0009428:	59                   	pop    ecx
c0009429:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000942d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009431:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009435:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009439:	e8 d5 bb 01 00       	call   c0025013 <__truncdfsf2>
c000943e:	83 c4 10             	add    esp,0x10
c0009441:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009445:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009449:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000944c:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000944f:	e9 49 ff ff ff       	jmp    c000939d <linear_vari_process+0x54d>
c0009454:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009458:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000945c:	68 00 00 f0 3f       	push   0x3ff00000
c0009461:	6a 00                	push   0x0
c0009463:	e8 bc b5 01 00       	call   c0024a24 <__divdf3>
c0009468:	83 c4 10             	add    esp,0x10
c000946b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000946f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009473:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009477:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000947b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000947f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009483:	e8 3b ac 01 00       	call   c00240c3 <__adddf3>
c0009488:	59                   	pop    ecx
c0009489:	5f                   	pop    edi
c000948a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000948e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009492:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009496:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000949a:	e8 1b f9 ff ff       	call   c0008dba <fmod_one>
c000949f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00094a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094ba:	e8 55 b2 01 00       	call   c0024714 <__subdf3>
c00094bf:	e9 1b fd ff ff       	jmp    c00091df <linear_vari_process+0x38f>
c00094c4:	39 fd                	cmp    ebp,edi
c00094c6:	7d 38                	jge    c0009500 <linear_vari_process+0x6b0>
c00094c8:	83 ec 0c             	sub    esp,0xc
c00094cb:	89 f8                	mov    eax,edi
c00094cd:	29 e8                	sub    eax,ebp
c00094cf:	99                   	cdq    
c00094d0:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00094d3:	50                   	push   eax
c00094d4:	e8 ca b8 01 00       	call   c0024da3 <__floatsidf>
c00094d9:	83 c4 10             	add    esp,0x10
c00094dc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00094e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00094e4:	52                   	push   edx
c00094e5:	50                   	push   eax
c00094e6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094ea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094ee:	e8 d0 ab 01 00       	call   c00240c3 <__adddf3>
c00094f3:	83 c4 10             	add    esp,0x10
c00094f6:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c00094f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00094fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009500:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009504:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009507:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000950b:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000950e:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0009511:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009514:	85 c0                	test   eax,eax
c0009516:	7f 27                	jg     c000953f <linear_vari_process+0x6ef>
c0009518:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000951c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009520:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009524:	89 01                	mov    DWORD PTR [ecx],eax
c0009526:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0009529:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000952c:	99                   	cdq    
c000952d:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009530:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009533:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009536:	99                   	cdq    
c0009537:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000953a:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000953d:	eb 25                	jmp    c0009564 <linear_vari_process+0x714>
c000953f:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0009542:	31 d2                	xor    edx,edx
c0009544:	29 c8                	sub    eax,ecx
c0009546:	c1 e0 02             	shl    eax,0x2
c0009549:	39 d1                	cmp    ecx,edx
c000954b:	7e cb                	jle    c0009518 <linear_vari_process+0x6c8>
c000954d:	8b 3e                	mov    edi,DWORD PTR [esi]
c000954f:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c0009552:	83 c0 04             	add    eax,0x4
c0009555:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c0009559:	42                   	inc    edx
c000955a:	eb ed                	jmp    c0009549 <linear_vari_process+0x6f9>
c000955c:	c7 44 24 28 16 00 00 00 	mov    DWORD PTR [esp+0x28],0x16
c0009564:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009568:	83 c4 3c             	add    esp,0x3c
c000956b:	5b                   	pop    ebx
c000956c:	5e                   	pop    esi
c000956d:	5f                   	pop    edi
c000956e:	5d                   	pop    ebp
c000956f:	c3                   	ret    

c0009570 <linear_reset>:
c0009570:	83 ec 0c             	sub    esp,0xc
c0009573:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009577:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000957a:	85 c0                	test   eax,eax
c000957c:	74 20                	je     c000959e <linear_reset+0x2e>
c000957e:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0009581:	83 c0 1c             	add    eax,0x1c
c0009584:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c0009587:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000958e:	c1 e2 02             	shl    edx,0x2
c0009591:	51                   	push   ecx
c0009592:	52                   	push   edx
c0009593:	6a 00                	push   0x0
c0009595:	50                   	push   eax
c0009596:	e8 e2 70 ff ff       	call   c000067d <memset>
c000959b:	83 c4 10             	add    esp,0x10
c000959e:	83 c4 0c             	add    esp,0xc
c00095a1:	c3                   	ret    

c00095a2 <linear_get_name>:
c00095a2:	31 c0                	xor    eax,eax
c00095a4:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c00095a9:	75 05                	jne    c00095b0 <linear_get_name+0xe>
c00095ab:	b8 00 69 02 c0       	mov    eax,0xc0026900
c00095b0:	c3                   	ret    

c00095b1 <linear_get_description>:
c00095b1:	31 c0                	xor    eax,eax
c00095b3:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c00095b8:	75 05                	jne    c00095bf <linear_get_description+0xe>
c00095ba:	b8 14 69 02 c0       	mov    eax,0xc0026914
c00095bf:	c3                   	ret    

c00095c0 <linear_set_converter>:
c00095c0:	53                   	push   ebx
c00095c1:	b8 0a 00 00 00       	mov    eax,0xa
c00095c6:	83 ec 08             	sub    esp,0x8
c00095c9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00095cd:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c00095d2:	75 6e                	jne    c0009642 <linear_set_converter+0x82>
c00095d4:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00095d7:	85 c0                	test   eax,eax
c00095d9:	74 13                	je     c00095ee <linear_set_converter+0x2e>
c00095db:	83 ec 0c             	sub    esp,0xc
c00095de:	50                   	push   eax
c00095df:	e8 52 5b 00 00       	call   c000f136 <free>
c00095e4:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00095eb:	83 c4 10             	add    esp,0x10
c00095ee:	50                   	push   eax
c00095ef:	50                   	push   eax
c00095f0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00095f3:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c00095fa:	50                   	push   eax
c00095fb:	6a 01                	push   0x1
c00095fd:	e8 54 5b 00 00       	call   c000f156 <calloc>
c0009602:	83 c4 10             	add    esp,0x10
c0009605:	89 c2                	mov    edx,eax
c0009607:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000960a:	85 d2                	test   edx,edx
c000960c:	b8 01 00 00 00       	mov    eax,0x1
c0009611:	74 2f                	je     c0009642 <linear_set_converter+0x82>
c0009613:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009616:	83 ec 0c             	sub    esp,0xc
c0009619:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000961c:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0009622:	c7 43 24 50 8e 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008e50
c0009629:	c7 43 20 50 8e 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008e50
c0009630:	c7 43 28 70 95 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009570
c0009637:	53                   	push   ebx
c0009638:	e8 33 ff ff ff       	call   c0009570 <linear_reset>
c000963d:	83 c4 10             	add    esp,0x10
c0009640:	31 c0                	xor    eax,eax
c0009642:	83 c4 08             	add    esp,0x8
c0009645:	5b                   	pop    ebx
c0009646:	c3                   	ret    

c0009647 <is_bad_src_ratio>:
c0009647:	83 ec 1c             	sub    esp,0x1c
c000964a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000964e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009652:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009656:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000965a:	b8 00 00 00 00       	mov    eax,0x0
c000965f:	ba 00 00 70 3f       	mov    edx,0x3f700000
c0009664:	52                   	push   edx
c0009665:	50                   	push   eax
c0009666:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000966a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000966e:	e8 9c b9 01 00       	call   c002500f <__ltdf2>
c0009673:	83 c4 10             	add    esp,0x10
c0009676:	85 c0                	test   eax,eax
c0009678:	78 20                	js     c000969a <is_bad_src_ratio+0x53>
c000967a:	b8 00 00 00 00       	mov    eax,0x0
c000967f:	ba 00 00 70 40       	mov    edx,0x40700000
c0009684:	52                   	push   edx
c0009685:	50                   	push   eax
c0009686:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000968a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000968e:	e8 5e b9 01 00       	call   c0024ff1 <__gtdf2>
c0009693:	83 c4 10             	add    esp,0x10
c0009696:	85 c0                	test   eax,eax
c0009698:	7e 07                	jle    c00096a1 <is_bad_src_ratio+0x5a>
c000969a:	b8 01 00 00 00       	mov    eax,0x1
c000969f:	eb 05                	jmp    c00096a6 <is_bad_src_ratio+0x5f>
c00096a1:	b8 00 00 00 00       	mov    eax,0x0
c00096a6:	83 c4 1c             	add    esp,0x1c
c00096a9:	c3                   	ret    

c00096aa <int_to_fp>:
c00096aa:	c1 e0 0c             	shl    eax,0xc
c00096ad:	c3                   	ret    

c00096ae <fp_to_int>:
c00096ae:	c1 f8 0c             	sar    eax,0xc
c00096b1:	c3                   	ret    

c00096b2 <fp_fraction_part>:
c00096b2:	25 ff 0f 00 00       	and    eax,0xfff
c00096b7:	c3                   	ret    

c00096b8 <fp_to_double>:
c00096b8:	83 ec 1c             	sub    esp,0x1c
c00096bb:	e8 f2 ff ff ff       	call   c00096b2 <fp_fraction_part>
c00096c0:	83 ec 0c             	sub    esp,0xc
c00096c3:	50                   	push   eax
c00096c4:	e8 da b6 01 00       	call   c0024da3 <__floatsidf>
c00096c9:	83 c4 10             	add    esp,0x10
c00096cc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096d0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096d4:	68 00 00 30 3f       	push   0x3f300000
c00096d9:	6a 00                	push   0x0
c00096db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096e3:	e8 58 b0 01 00       	call   c0024740 <__muldf3>
c00096e8:	83 c4 2c             	add    esp,0x2c
c00096eb:	c3                   	ret    

c00096ec <calc_output_single>:
c00096ec:	55                   	push   ebp
c00096ed:	57                   	push   edi
c00096ee:	56                   	push   esi
c00096ef:	89 c6                	mov    esi,eax
c00096f1:	53                   	push   ebx
c00096f2:	89 d3                	mov    ebx,edx
c00096f4:	83 ec 4c             	sub    esp,0x4c
c00096f7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00096fb:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00096fe:	e8 a7 ff ff ff       	call   c00096aa <int_to_fp>
c0009703:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009706:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000970a:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000970e:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009712:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009715:	99                   	cdq    
c0009716:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000971e:	f7 fb                	idiv   ebx
c0009720:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009728:	89 da                	mov    edx,ebx
c000972a:	0f af d0             	imul   edx,eax
c000972d:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009731:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009735:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009739:	29 c2                	sub    edx,eax
c000973b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000973e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009742:	83 c5 04             	add    ebp,0x4
c0009745:	e8 6e ff ff ff       	call   c00096b8 <fp_to_double>
c000974a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000974e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009752:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009756:	e8 53 ff ff ff       	call   c00096ae <fp_to_int>
c000975b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000975e:	52                   	push   edx
c000975f:	52                   	push   edx
c0009760:	51                   	push   ecx
c0009761:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009765:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009769:	e8 ea a2 01 00       	call   c0023a58 <__subsf3>
c000976e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009771:	e8 c1 b9 01 00       	call   c0025137 <__extendsfdf2>
c0009776:	83 c4 10             	add    esp,0x10
c0009779:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000977d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009781:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009785:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009789:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000978d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009791:	e8 aa af 01 00       	call   c0024740 <__muldf3>
c0009796:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000979a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000979e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00097a1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00097a5:	e8 8d b9 01 00       	call   c0025137 <__extendsfdf2>
c00097aa:	83 c4 10             	add    esp,0x10
c00097ad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00097b1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00097b5:	52                   	push   edx
c00097b6:	50                   	push   eax
c00097b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097bb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097bf:	e8 ff a8 01 00       	call   c00240c3 <__adddf3>
c00097c4:	59                   	pop    ecx
c00097c5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00097c9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00097cd:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00097d3:	e8 5f b9 01 00       	call   c0025137 <__extendsfdf2>
c00097d8:	83 c4 10             	add    esp,0x10
c00097db:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00097df:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00097e3:	52                   	push   edx
c00097e4:	50                   	push   eax
c00097e5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097ed:	e8 4e af 01 00       	call   c0024740 <__muldf3>
c00097f2:	83 c4 10             	add    esp,0x10
c00097f5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00097f9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00097fd:	52                   	push   edx
c00097fe:	50                   	push   eax
c00097ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009803:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009807:	e8 b7 a8 01 00       	call   c00240c3 <__adddf3>
c000980c:	83 c4 10             	add    esp,0x10
c000980f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009813:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009817:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c000981b:	0f 89 1d ff ff ff    	jns    c000973e <calc_output_single+0x52>
c0009821:	89 d9                	mov    ecx,ebx
c0009823:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009827:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000982b:	89 dd                	mov    ebp,ebx
c000982d:	29 c8                	sub    eax,ecx
c000982f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009837:	99                   	cdq    
c0009838:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009840:	f7 fb                	idiv   ebx
c0009842:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009846:	0f af e8             	imul   ebp,eax
c0009849:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c000984d:	01 cd                	add    ebp,ecx
c000984f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009852:	89 e8                	mov    eax,ebp
c0009854:	83 ee 04             	sub    esi,0x4
c0009857:	e8 5c fe ff ff       	call   c00096b8 <fp_to_double>
c000985c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009860:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009864:	89 e8                	mov    eax,ebp
c0009866:	29 dd                	sub    ebp,ebx
c0009868:	e8 41 fe ff ff       	call   c00096ae <fp_to_int>
c000986d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009870:	52                   	push   edx
c0009871:	52                   	push   edx
c0009872:	51                   	push   ecx
c0009873:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009877:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000987b:	e8 d8 a1 01 00       	call   c0023a58 <__subsf3>
c0009880:	89 04 24             	mov    DWORD PTR [esp],eax
c0009883:	e8 af b8 01 00       	call   c0025137 <__extendsfdf2>
c0009888:	83 c4 10             	add    esp,0x10
c000988b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000988f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009893:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009897:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000989b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000989f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00098a3:	e8 98 ae 01 00       	call   c0024740 <__muldf3>
c00098a8:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00098ac:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00098b0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00098b3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00098b7:	e8 7b b8 01 00       	call   c0025137 <__extendsfdf2>
c00098bc:	83 c4 10             	add    esp,0x10
c00098bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00098c7:	52                   	push   edx
c00098c8:	50                   	push   eax
c00098c9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098cd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098d1:	e8 ed a7 01 00       	call   c00240c3 <__adddf3>
c00098d6:	59                   	pop    ecx
c00098d7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00098db:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00098df:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c00098e5:	e8 4d b8 01 00       	call   c0025137 <__extendsfdf2>
c00098ea:	83 c4 10             	add    esp,0x10
c00098ed:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098f1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00098f5:	52                   	push   edx
c00098f6:	50                   	push   eax
c00098f7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098fb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098ff:	e8 3c ae 01 00       	call   c0024740 <__muldf3>
c0009904:	83 c4 10             	add    esp,0x10
c0009907:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000990b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000990f:	52                   	push   edx
c0009910:	50                   	push   eax
c0009911:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009915:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009919:	e8 a5 a7 01 00       	call   c00240c3 <__adddf3>
c000991e:	83 c4 10             	add    esp,0x10
c0009921:	85 ed                	test   ebp,ebp
c0009923:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009927:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000992b:	0f 8f 21 ff ff ff    	jg     c0009852 <calc_output_single+0x166>
c0009931:	52                   	push   edx
c0009932:	50                   	push   eax
c0009933:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009937:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000993b:	e8 83 a7 01 00       	call   c00240c3 <__adddf3>
c0009940:	83 c4 5c             	add    esp,0x5c
c0009943:	5b                   	pop    ebx
c0009944:	5e                   	pop    esi
c0009945:	5f                   	pop    edi
c0009946:	5d                   	pop    ebp
c0009947:	c3                   	ret    

c0009948 <calc_output_stereo>:
c0009948:	55                   	push   ebp
c0009949:	89 cd                	mov    ebp,ecx
c000994b:	57                   	push   edi
c000994c:	56                   	push   esi
c000994d:	53                   	push   ebx
c000994e:	89 c3                	mov    ebx,eax
c0009950:	83 ec 6c             	sub    esp,0x6c
c0009953:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009957:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000995e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009965:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009969:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000996d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009970:	e8 35 fd ff ff       	call   c00096aa <int_to_fp>
c0009975:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000997d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009981:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009989:	29 c8                	sub    eax,ecx
c000998b:	99                   	cdq    
c000998c:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009990:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009994:	0f af d0             	imul   edx,eax
c0009997:	8d 34 0a             	lea    esi,[edx+ecx*1]
c000999a:	31 d2                	xor    edx,edx
c000999c:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c00099a0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00099a4:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c00099a7:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00099ab:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c00099ae:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00099b2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c00099b6:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c00099b9:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00099be:	29 c1                	sub    ecx,eax
c00099c0:	31 c0                	xor    eax,eax
c00099c2:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c00099c5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00099c9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00099cd:	83 c7 08             	add    edi,0x8
c00099d0:	e8 e3 fc ff ff       	call   c00096b8 <fp_to_double>
c00099d5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00099d9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00099dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00099e1:	e8 c8 fc ff ff       	call   c00096ae <fp_to_int>
c00099e6:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c00099e9:	52                   	push   edx
c00099ea:	52                   	push   edx
c00099eb:	51                   	push   ecx
c00099ec:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c00099f0:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c00099f4:	e8 5f a0 01 00       	call   c0023a58 <__subsf3>
c00099f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00099fc:	e8 36 b7 01 00       	call   c0025137 <__extendsfdf2>
c0009a01:	83 c4 10             	add    esp,0x10
c0009a04:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a08:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a0c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a10:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a14:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a18:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a1c:	e8 1f ad 01 00       	call   c0024740 <__muldf3>
c0009a21:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009a25:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009a29:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009a2c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009a30:	e8 02 b7 01 00       	call   c0025137 <__extendsfdf2>
c0009a35:	83 c4 10             	add    esp,0x10
c0009a38:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a3c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a40:	52                   	push   edx
c0009a41:	50                   	push   eax
c0009a42:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a46:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a4a:	e8 74 a6 01 00       	call   c00240c3 <__adddf3>
c0009a4f:	59                   	pop    ecx
c0009a50:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009a54:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009a58:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009a5e:	e8 d4 b6 01 00       	call   c0025137 <__extendsfdf2>
c0009a63:	83 c4 10             	add    esp,0x10
c0009a66:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a6a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a6e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a72:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a76:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a7a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a7e:	e8 bd ac 01 00       	call   c0024740 <__muldf3>
c0009a83:	83 c4 10             	add    esp,0x10
c0009a86:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a8a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a8e:	52                   	push   edx
c0009a8f:	50                   	push   eax
c0009a90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a98:	e8 26 a6 01 00       	call   c00240c3 <__adddf3>
c0009a9d:	59                   	pop    ecx
c0009a9e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009aa2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009aa6:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009aac:	e8 86 b6 01 00       	call   c0025137 <__extendsfdf2>
c0009ab1:	83 c4 10             	add    esp,0x10
c0009ab4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ab8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009abc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ac0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ac4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009ac8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009acc:	e8 6f ac 01 00       	call   c0024740 <__muldf3>
c0009ad1:	83 c4 10             	add    esp,0x10
c0009ad4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009ad8:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009adc:	52                   	push   edx
c0009add:	50                   	push   eax
c0009ade:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ae2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ae6:	e8 d8 a5 01 00       	call   c00240c3 <__adddf3>
c0009aeb:	83 c4 10             	add    esp,0x10
c0009aee:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009af2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009af6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009afa:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009afe:	0f 89 c5 fe ff ff    	jns    c00099c9 <calc_output_stereo+0x81>
c0009b04:	29 e9                	sub    ecx,ebp
c0009b06:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009b0a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009b0e:	29 c8                	sub    eax,ecx
c0009b10:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009b18:	99                   	cdq    
c0009b19:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009b1d:	31 d2                	xor    edx,edx
c0009b1f:	0f af f8             	imul   edi,eax
c0009b22:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b26:	40                   	inc    eax
c0009b27:	01 cf                	add    edi,ecx
c0009b29:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009b2e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009b32:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009b3a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009b3d:	31 c0                	xor    eax,eax
c0009b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b43:	89 f8                	mov    eax,edi
c0009b45:	83 eb 08             	sub    ebx,0x8
c0009b48:	e8 6b fb ff ff       	call   c00096b8 <fp_to_double>
c0009b4d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009b51:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009b55:	89 f8                	mov    eax,edi
c0009b57:	e8 52 fb ff ff       	call   c00096ae <fp_to_int>
c0009b5c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009b5f:	52                   	push   edx
c0009b60:	52                   	push   edx
c0009b61:	55                   	push   ebp
c0009b62:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009b66:	e8 ed 9e 01 00       	call   c0023a58 <__subsf3>
c0009b6b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b6e:	e8 c4 b5 01 00       	call   c0025137 <__extendsfdf2>
c0009b73:	83 c4 10             	add    esp,0x10
c0009b76:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b7a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009b7e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009b82:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009b86:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009b8a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009b8e:	e8 ad ab 01 00       	call   c0024740 <__muldf3>
c0009b93:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009b96:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b9a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b9e:	e8 94 b5 01 00       	call   c0025137 <__extendsfdf2>
c0009ba3:	83 c4 10             	add    esp,0x10
c0009ba6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009baa:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bae:	52                   	push   edx
c0009baf:	50                   	push   eax
c0009bb0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009bb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009bb8:	e8 06 a5 01 00       	call   c00240c3 <__adddf3>
c0009bbd:	59                   	pop    ecx
c0009bbe:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009bc2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009bc6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009bcc:	e8 66 b5 01 00       	call   c0025137 <__extendsfdf2>
c0009bd1:	83 c4 10             	add    esp,0x10
c0009bd4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bd8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bdc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009be0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009be4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009be8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009bec:	e8 4f ab 01 00       	call   c0024740 <__muldf3>
c0009bf1:	83 c4 10             	add    esp,0x10
c0009bf4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bf8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bfc:	52                   	push   edx
c0009bfd:	50                   	push   eax
c0009bfe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009c02:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009c06:	e8 b8 a4 01 00       	call   c00240c3 <__adddf3>
c0009c0b:	5d                   	pop    ebp
c0009c0c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009c10:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009c14:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009c1a:	e8 18 b5 01 00       	call   c0025137 <__extendsfdf2>
c0009c1f:	83 c4 10             	add    esp,0x10
c0009c22:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009c26:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009c2a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c2e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c32:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c36:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c3a:	e8 01 ab 01 00       	call   c0024740 <__muldf3>
c0009c3f:	83 c4 10             	add    esp,0x10
c0009c42:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009c46:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009c4a:	52                   	push   edx
c0009c4b:	50                   	push   eax
c0009c4c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c50:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c54:	e8 6a a4 01 00       	call   c00240c3 <__adddf3>
c0009c59:	83 c4 10             	add    esp,0x10
c0009c5c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009c60:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009c64:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009c68:	85 ff                	test   edi,edi
c0009c6a:	0f 8f d3 fe ff ff    	jg     c0009b43 <calc_output_stereo+0x1fb>
c0009c70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c80:	e8 3e a4 01 00       	call   c00240c3 <__adddf3>
c0009c85:	83 c4 10             	add    esp,0x10
c0009c88:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009c90:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c94:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c98:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c9c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ca0:	e8 9b aa 01 00       	call   c0024740 <__muldf3>
c0009ca5:	59                   	pop    ecx
c0009ca6:	5b                   	pop    ebx
c0009ca7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009cab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009caf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cb3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cb7:	e8 57 b3 01 00       	call   c0025013 <__truncdfsf2>
c0009cbc:	83 c4 10             	add    esp,0x10
c0009cbf:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009cc6:	89 03                	mov    DWORD PTR [ebx],eax
c0009cc8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ccc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cd0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cd8:	e8 e6 a3 01 00       	call   c00240c3 <__adddf3>
c0009cdd:	83 c4 10             	add    esp,0x10
c0009ce0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ce4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ce8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009cec:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009cf0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cf4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cf8:	e8 43 aa 01 00       	call   c0024740 <__muldf3>
c0009cfd:	5e                   	pop    esi
c0009cfe:	5f                   	pop    edi
c0009cff:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d03:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d0b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d0f:	e8 ff b2 01 00       	call   c0025013 <__truncdfsf2>
c0009d14:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009d1b:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009d1e:	83 c4 7c             	add    esp,0x7c
c0009d21:	5b                   	pop    ebx
c0009d22:	5e                   	pop    esi
c0009d23:	5f                   	pop    edi
c0009d24:	5d                   	pop    ebp
c0009d25:	c3                   	ret    

c0009d26 <calc_output_quad>:
c0009d26:	55                   	push   ebp
c0009d27:	57                   	push   edi
c0009d28:	56                   	push   esi
c0009d29:	89 c6                	mov    esi,eax
c0009d2b:	53                   	push   ebx
c0009d2c:	83 ec 7c             	sub    esp,0x7c
c0009d2f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d33:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009d37:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009d3e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009d45:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d49:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d4d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009d50:	e8 55 f9 ff ff       	call   c00096aa <int_to_fp>
c0009d55:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009d58:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009d5b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009d5f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009d63:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009d67:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009d6b:	99                   	cdq    
c0009d6c:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009d70:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d74:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009d77:	31 d2                	xor    edx,edx
c0009d79:	0f af d8             	imul   ebx,eax
c0009d7c:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009d84:	0f af c7             	imul   eax,edi
c0009d87:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009d8b:	29 c1                	sub    ecx,eax
c0009d8d:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009d95:	31 c0                	xor    eax,eax
c0009d97:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009d9a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d9e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009da2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009da6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009daa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009dae:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009db2:	89 d8                	mov    eax,ebx
c0009db4:	83 c7 10             	add    edi,0x10
c0009db7:	e8 fc f8 ff ff       	call   c00096b8 <fp_to_double>
c0009dbc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009dc0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009dc4:	89 d8                	mov    eax,ebx
c0009dc6:	e8 e3 f8 ff ff       	call   c00096ae <fp_to_int>
c0009dcb:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009dcf:	52                   	push   edx
c0009dd0:	52                   	push   edx
c0009dd1:	51                   	push   ecx
c0009dd2:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009dd6:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009dda:	e8 79 9c 01 00       	call   c0023a58 <__subsf3>
c0009ddf:	89 04 24             	mov    DWORD PTR [esp],eax
c0009de2:	e8 50 b3 01 00       	call   c0025137 <__extendsfdf2>
c0009de7:	83 c4 10             	add    esp,0x10
c0009dea:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009dee:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009df2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009df6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dfa:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009dfe:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e02:	e8 39 a9 01 00       	call   c0024740 <__muldf3>
c0009e07:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0009e0b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e0f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e12:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e16:	e8 1c b3 01 00       	call   c0025137 <__extendsfdf2>
c0009e1b:	83 c4 10             	add    esp,0x10
c0009e1e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e22:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e26:	52                   	push   edx
c0009e27:	50                   	push   eax
c0009e28:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e2c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e30:	e8 8e a2 01 00       	call   c00240c3 <__adddf3>
c0009e35:	59                   	pop    ecx
c0009e36:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e3a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e3e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c0009e44:	e8 ee b2 01 00       	call   c0025137 <__extendsfdf2>
c0009e49:	83 c4 10             	add    esp,0x10
c0009e4c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e50:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e5c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e60:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e64:	e8 d7 a8 01 00       	call   c0024740 <__muldf3>
c0009e69:	83 c4 10             	add    esp,0x10
c0009e6c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e70:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e74:	52                   	push   edx
c0009e75:	50                   	push   eax
c0009e76:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009e7a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009e7e:	e8 40 a2 01 00       	call   c00240c3 <__adddf3>
c0009e83:	59                   	pop    ecx
c0009e84:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0009e88:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009e8c:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c0009e92:	e8 a0 b2 01 00       	call   c0025137 <__extendsfdf2>
c0009e97:	83 c4 10             	add    esp,0x10
c0009e9a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e9e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ea2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eaa:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009eae:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009eb2:	e8 89 a8 01 00       	call   c0024740 <__muldf3>
c0009eb7:	83 c4 10             	add    esp,0x10
c0009eba:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009ebe:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ec2:	52                   	push   edx
c0009ec3:	50                   	push   eax
c0009ec4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ecc:	e8 f2 a1 01 00       	call   c00240c3 <__adddf3>
c0009ed1:	59                   	pop    ecx
c0009ed2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0009ed6:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0009eda:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009ee0:	e8 52 b2 01 00       	call   c0025137 <__extendsfdf2>
c0009ee5:	83 c4 10             	add    esp,0x10
c0009ee8:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009eec:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ef0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ef4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ef8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009efc:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f00:	e8 3b a8 01 00       	call   c0024740 <__muldf3>
c0009f05:	83 c4 10             	add    esp,0x10
c0009f08:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f0c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f10:	52                   	push   edx
c0009f11:	50                   	push   eax
c0009f12:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f16:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f1a:	e8 a4 a1 01 00       	call   c00240c3 <__adddf3>
c0009f1f:	59                   	pop    ecx
c0009f20:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009f24:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009f28:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009f2e:	e8 04 b2 01 00       	call   c0025137 <__extendsfdf2>
c0009f33:	83 c4 10             	add    esp,0x10
c0009f36:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f3a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f46:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f4a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f4e:	e8 ed a7 01 00       	call   c0024740 <__muldf3>
c0009f53:	83 c4 10             	add    esp,0x10
c0009f56:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f5a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009f5e:	52                   	push   edx
c0009f5f:	50                   	push   eax
c0009f60:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009f64:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009f68:	e8 56 a1 01 00       	call   c00240c3 <__adddf3>
c0009f6d:	83 c4 10             	add    esp,0x10
c0009f70:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009f74:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009f78:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c0009f7c:	0f 89 30 fe ff ff    	jns    c0009db2 <calc_output_quad+0x8c>
c0009f82:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0009f86:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009f8a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f8e:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0009f92:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0009f9a:	29 c8                	sub    eax,ecx
c0009f9c:	99                   	cdq    
c0009f9d:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fa1:	31 d2                	xor    edx,edx
c0009fa3:	0f af d8             	imul   ebx,eax
c0009fa6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009faa:	40                   	inc    eax
c0009fab:	01 cb                	add    ebx,ecx
c0009fad:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0009fb2:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009fb6:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c0009fba:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009fbe:	8d 34 86             	lea    esi,[esi+eax*4]
c0009fc1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0009fc9:	31 c0                	xor    eax,eax
c0009fcb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009fcf:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009fd3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009fd7:	89 d8                	mov    eax,ebx
c0009fd9:	83 ee 10             	sub    esi,0x10
c0009fdc:	e8 d7 f6 ff ff       	call   c00096b8 <fp_to_double>
c0009fe1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fe5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fe9:	89 d8                	mov    eax,ebx
c0009feb:	e8 be f6 ff ff       	call   c00096ae <fp_to_int>
c0009ff0:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c0009ff4:	52                   	push   edx
c0009ff5:	52                   	push   edx
c0009ff6:	57                   	push   edi
c0009ff7:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009ffb:	e8 58 9a 01 00       	call   c0023a58 <__subsf3>
c000a000:	89 04 24             	mov    DWORD PTR [esp],eax
c000a003:	e8 2f b1 01 00       	call   c0025137 <__extendsfdf2>
c000a008:	83 c4 10             	add    esp,0x10
c000a00b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a00f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a013:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a017:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a01b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a01f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a023:	e8 18 a7 01 00       	call   c0024740 <__muldf3>
c000a028:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a02b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a02f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a033:	e8 ff b0 01 00       	call   c0025137 <__extendsfdf2>
c000a038:	83 c4 10             	add    esp,0x10
c000a03b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a03f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a043:	52                   	push   edx
c000a044:	50                   	push   eax
c000a045:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a049:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a04d:	e8 71 a0 01 00       	call   c00240c3 <__adddf3>
c000a052:	59                   	pop    ecx
c000a053:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a057:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a05b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a061:	e8 d1 b0 01 00       	call   c0025137 <__extendsfdf2>
c000a066:	83 c4 10             	add    esp,0x10
c000a069:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a06d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a071:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a075:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a079:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a07d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a081:	e8 ba a6 01 00       	call   c0024740 <__muldf3>
c000a086:	83 c4 10             	add    esp,0x10
c000a089:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a08d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a091:	52                   	push   edx
c000a092:	50                   	push   eax
c000a093:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a097:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a09b:	e8 23 a0 01 00       	call   c00240c3 <__adddf3>
c000a0a0:	5f                   	pop    edi
c000a0a1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a0a5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a0a9:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a0af:	e8 83 b0 01 00       	call   c0025137 <__extendsfdf2>
c000a0b4:	83 c4 10             	add    esp,0x10
c000a0b7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0bb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0c7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0cb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0cf:	e8 6c a6 01 00       	call   c0024740 <__muldf3>
c000a0d4:	83 c4 10             	add    esp,0x10
c000a0d7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0db:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0df:	52                   	push   edx
c000a0e0:	50                   	push   eax
c000a0e1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a0e5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a0e9:	e8 d5 9f 01 00       	call   c00240c3 <__adddf3>
c000a0ee:	59                   	pop    ecx
c000a0ef:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a0f3:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a0f7:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a0fd:	e8 35 b0 01 00       	call   c0025137 <__extendsfdf2>
c000a102:	83 c4 10             	add    esp,0x10
c000a105:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a109:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a10d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a111:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a115:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a119:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a11d:	e8 1e a6 01 00       	call   c0024740 <__muldf3>
c000a122:	83 c4 10             	add    esp,0x10
c000a125:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a129:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a12d:	52                   	push   edx
c000a12e:	50                   	push   eax
c000a12f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a133:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a137:	e8 87 9f 01 00       	call   c00240c3 <__adddf3>
c000a13c:	5f                   	pop    edi
c000a13d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a141:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a145:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a14b:	e8 e7 af 01 00       	call   c0025137 <__extendsfdf2>
c000a150:	83 c4 10             	add    esp,0x10
c000a153:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a157:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a15b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a15f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a163:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a167:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a16b:	e8 d0 a5 01 00       	call   c0024740 <__muldf3>
c000a170:	83 c4 10             	add    esp,0x10
c000a173:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a177:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a17b:	52                   	push   edx
c000a17c:	50                   	push   eax
c000a17d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a181:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a185:	e8 39 9f 01 00       	call   c00240c3 <__adddf3>
c000a18a:	83 c4 10             	add    esp,0x10
c000a18d:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a191:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a195:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a199:	85 db                	test   ebx,ebx
c000a19b:	0f 8f 36 fe ff ff    	jg     c0009fd7 <calc_output_quad+0x2b1>
c000a1a1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1b1:	e8 0d 9f 01 00       	call   c00240c3 <__adddf3>
c000a1b6:	83 c4 10             	add    esp,0x10
c000a1b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a1bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a1c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1d1:	e8 6a a5 01 00       	call   c0024740 <__muldf3>
c000a1d6:	59                   	pop    ecx
c000a1d7:	5b                   	pop    ebx
c000a1d8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a1dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a1e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1e8:	e8 26 ae 01 00       	call   c0025013 <__truncdfsf2>
c000a1ed:	83 c4 10             	add    esp,0x10
c000a1f0:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a1f7:	89 06                	mov    DWORD PTR [esi],eax
c000a1f9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a1fd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a201:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a205:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a209:	e8 b5 9e 01 00       	call   c00240c3 <__adddf3>
c000a20e:	83 c4 10             	add    esp,0x10
c000a211:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a215:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a219:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a21d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a221:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a225:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a229:	e8 12 a5 01 00       	call   c0024740 <__muldf3>
c000a22e:	5e                   	pop    esi
c000a22f:	5f                   	pop    edi
c000a230:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a234:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a238:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a23c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a240:	e8 ce ad 01 00       	call   c0025013 <__truncdfsf2>
c000a245:	83 c4 10             	add    esp,0x10
c000a248:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a24f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a252:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a256:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a25a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a25e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a262:	e8 5c 9e 01 00       	call   c00240c3 <__adddf3>
c000a267:	83 c4 10             	add    esp,0x10
c000a26a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a26e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a272:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a276:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a27a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a27e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a282:	e8 b9 a4 01 00       	call   c0024740 <__muldf3>
c000a287:	5d                   	pop    ebp
c000a288:	59                   	pop    ecx
c000a289:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a28d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a291:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a295:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a299:	e8 75 ad 01 00       	call   c0025013 <__truncdfsf2>
c000a29e:	83 c4 10             	add    esp,0x10
c000a2a1:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a2a8:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a2ab:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a2af:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a2b3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a2b7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a2bb:	e8 03 9e 01 00       	call   c00240c3 <__adddf3>
c000a2c0:	83 c4 10             	add    esp,0x10
c000a2c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a2c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a2cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2db:	e8 60 a4 01 00       	call   c0024740 <__muldf3>
c000a2e0:	5b                   	pop    ebx
c000a2e1:	5e                   	pop    esi
c000a2e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a2e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a2ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2f2:	e8 1c ad 01 00       	call   c0025013 <__truncdfsf2>
c000a2f7:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a2fe:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a301:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a307:	5b                   	pop    ebx
c000a308:	5e                   	pop    esi
c000a309:	5f                   	pop    edi
c000a30a:	5d                   	pop    ebp
c000a30b:	c3                   	ret    

c000a30c <calc_output_hex>:
c000a30c:	55                   	push   ebp
c000a30d:	89 cd                	mov    ebp,ecx
c000a30f:	57                   	push   edi
c000a310:	56                   	push   esi
c000a311:	53                   	push   ebx
c000a312:	89 c3                	mov    ebx,eax
c000a314:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a31a:	89 14 24             	mov    DWORD PTR [esp],edx
c000a31d:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a324:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a32b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a32f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a333:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a336:	e8 6f f3 ff ff       	call   c00096aa <int_to_fp>
c000a33b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a33e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a342:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a345:	29 c8                	sub    eax,ecx
c000a347:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a34b:	99                   	cdq    
c000a34c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a354:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a357:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a35f:	0f af f8             	imul   edi,eax
c000a362:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a365:	01 cf                	add    edi,ecx
c000a367:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a36b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a36e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a372:	0f af c2             	imul   eax,edx
c000a375:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a379:	29 c1                	sub    ecx,eax
c000a37b:	31 d2                	xor    edx,edx
c000a37d:	31 c0                	xor    eax,eax
c000a37f:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a382:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a386:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a38a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a38e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a392:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a396:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a39a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a39e:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a3a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3a6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3aa:	89 f8                	mov    eax,edi
c000a3ac:	e8 07 f3 ff ff       	call   c00096b8 <fp_to_double>
c000a3b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a3b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a3b9:	89 f8                	mov    eax,edi
c000a3bb:	e8 ee f2 ff ff       	call   c00096ae <fp_to_int>
c000a3c0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a3c4:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a3c7:	52                   	push   edx
c000a3c8:	52                   	push   edx
c000a3c9:	51                   	push   ecx
c000a3ca:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a3ce:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a3d5:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a3d9:	e8 7a 96 01 00       	call   c0023a58 <__subsf3>
c000a3de:	89 04 24             	mov    DWORD PTR [esp],eax
c000a3e1:	e8 51 ad 01 00       	call   c0025137 <__extendsfdf2>
c000a3e6:	83 c4 10             	add    esp,0x10
c000a3e9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a3ed:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a3f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a3fd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a401:	e8 3a a3 01 00       	call   c0024740 <__muldf3>
c000a406:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a40a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a40e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a411:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a415:	e8 1d ad 01 00       	call   c0025137 <__extendsfdf2>
c000a41a:	83 c4 10             	add    esp,0x10
c000a41d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a421:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a425:	52                   	push   edx
c000a426:	50                   	push   eax
c000a427:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a42b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a42f:	e8 8f 9c 01 00       	call   c00240c3 <__adddf3>
c000a434:	59                   	pop    ecx
c000a435:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a439:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a43d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a443:	e8 ef ac 01 00       	call   c0025137 <__extendsfdf2>
c000a448:	83 c4 10             	add    esp,0x10
c000a44b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a44f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a453:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a457:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a45b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a45f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a463:	e8 d8 a2 01 00       	call   c0024740 <__muldf3>
c000a468:	83 c4 10             	add    esp,0x10
c000a46b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a46f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a473:	52                   	push   edx
c000a474:	50                   	push   eax
c000a475:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a479:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a47d:	e8 41 9c 01 00       	call   c00240c3 <__adddf3>
c000a482:	59                   	pop    ecx
c000a483:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a487:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a48b:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a491:	e8 a1 ac 01 00       	call   c0025137 <__extendsfdf2>
c000a496:	83 c4 10             	add    esp,0x10
c000a499:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a49d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4a9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4ad:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4b1:	e8 8a a2 01 00       	call   c0024740 <__muldf3>
c000a4b6:	83 c4 10             	add    esp,0x10
c000a4b9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4bd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4c1:	52                   	push   edx
c000a4c2:	50                   	push   eax
c000a4c3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4c7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4cb:	e8 f3 9b 01 00       	call   c00240c3 <__adddf3>
c000a4d0:	59                   	pop    ecx
c000a4d1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a4d5:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a4d9:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a4df:	e8 53 ac 01 00       	call   c0025137 <__extendsfdf2>
c000a4e4:	83 c4 10             	add    esp,0x10
c000a4e7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4eb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4f7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4fb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4ff:	e8 3c a2 01 00       	call   c0024740 <__muldf3>
c000a504:	83 c4 10             	add    esp,0x10
c000a507:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a50b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a50f:	52                   	push   edx
c000a510:	50                   	push   eax
c000a511:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a515:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a519:	e8 a5 9b 01 00       	call   c00240c3 <__adddf3>
c000a51e:	59                   	pop    ecx
c000a51f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a523:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a527:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a52d:	e8 05 ac 01 00       	call   c0025137 <__extendsfdf2>
c000a532:	83 c4 10             	add    esp,0x10
c000a535:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a539:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a53d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a541:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a545:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a549:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a54d:	e8 ee a1 01 00       	call   c0024740 <__muldf3>
c000a552:	83 c4 10             	add    esp,0x10
c000a555:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a559:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a55d:	52                   	push   edx
c000a55e:	50                   	push   eax
c000a55f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a563:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a567:	e8 57 9b 01 00       	call   c00240c3 <__adddf3>
c000a56c:	59                   	pop    ecx
c000a56d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a571:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a575:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a57b:	e8 b7 ab 01 00       	call   c0025137 <__extendsfdf2>
c000a580:	83 c4 10             	add    esp,0x10
c000a583:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a587:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a58b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a58f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a593:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a597:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a59b:	e8 a0 a1 01 00       	call   c0024740 <__muldf3>
c000a5a0:	83 c4 10             	add    esp,0x10
c000a5a3:	83 c6 18             	add    esi,0x18
c000a5a6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5aa:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5ae:	52                   	push   edx
c000a5af:	50                   	push   eax
c000a5b0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a5b4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a5b8:	e8 06 9b 01 00       	call   c00240c3 <__adddf3>
c000a5bd:	59                   	pop    ecx
c000a5be:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a5c2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a5c6:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a5cc:	e8 66 ab 01 00       	call   c0025137 <__extendsfdf2>
c000a5d1:	83 c4 10             	add    esp,0x10
c000a5d4:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5d8:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5e4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5e8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5ec:	e8 4f a1 01 00       	call   c0024740 <__muldf3>
c000a5f1:	83 c4 10             	add    esp,0x10
c000a5f4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5f8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5fc:	52                   	push   edx
c000a5fd:	50                   	push   eax
c000a5fe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a602:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a606:	e8 b8 9a 01 00       	call   c00240c3 <__adddf3>
c000a60b:	83 c4 10             	add    esp,0x10
c000a60e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a612:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a616:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a619:	0f 89 8b fd ff ff    	jns    c000a3aa <calc_output_hex+0x9e>
c000a61f:	31 f6                	xor    esi,esi
c000a621:	31 ff                	xor    edi,edi
c000a623:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a627:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a62a:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a62e:	29 e9                	sub    ecx,ebp
c000a630:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a634:	29 c8                	sub    eax,ecx
c000a636:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a639:	99                   	cdq    
c000a63a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a63e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a641:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a645:	0f af e8             	imul   ebp,eax
c000a648:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a64c:	40                   	inc    eax
c000a64d:	01 cd                	add    ebp,ecx
c000a64f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a654:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a658:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a65c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a660:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a663:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a667:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a66b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a66f:	89 e8                	mov    eax,ebp
c000a671:	e8 42 f0 ff ff       	call   c00096b8 <fp_to_double>
c000a676:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a67a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a67e:	89 e8                	mov    eax,ebp
c000a680:	e8 29 f0 ff ff       	call   c00096ae <fp_to_int>
c000a685:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a689:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a68c:	52                   	push   edx
c000a68d:	52                   	push   edx
c000a68e:	51                   	push   ecx
c000a68f:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a696:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a69d:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a6a1:	e8 b2 93 01 00       	call   c0023a58 <__subsf3>
c000a6a6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a6a9:	e8 89 aa 01 00       	call   c0025137 <__extendsfdf2>
c000a6ae:	83 c4 10             	add    esp,0x10
c000a6b1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a6b5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a6b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6c1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a6c5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a6c9:	e8 72 a0 01 00       	call   c0024740 <__muldf3>
c000a6ce:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a6d5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a6d9:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a6dc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a6e0:	e8 52 aa 01 00       	call   c0025137 <__extendsfdf2>
c000a6e5:	83 c4 10             	add    esp,0x10
c000a6e8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a6ec:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a6f0:	52                   	push   edx
c000a6f1:	50                   	push   eax
c000a6f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6fa:	e8 c4 99 01 00       	call   c00240c3 <__adddf3>
c000a6ff:	59                   	pop    ecx
c000a700:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a704:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a708:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a70e:	e8 24 aa 01 00       	call   c0025137 <__extendsfdf2>
c000a713:	83 c4 10             	add    esp,0x10
c000a716:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a71a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a71e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a722:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a726:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a72a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a72e:	e8 0d a0 01 00       	call   c0024740 <__muldf3>
c000a733:	83 c4 10             	add    esp,0x10
c000a736:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a73a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a73e:	52                   	push   edx
c000a73f:	50                   	push   eax
c000a740:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a744:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a748:	e8 76 99 01 00       	call   c00240c3 <__adddf3>
c000a74d:	59                   	pop    ecx
c000a74e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a752:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a756:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a75c:	e8 d6 a9 01 00       	call   c0025137 <__extendsfdf2>
c000a761:	83 c4 10             	add    esp,0x10
c000a764:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a768:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a76c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a770:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a774:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a778:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a77c:	e8 bf 9f 01 00       	call   c0024740 <__muldf3>
c000a781:	83 c4 10             	add    esp,0x10
c000a784:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a788:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a78c:	52                   	push   edx
c000a78d:	50                   	push   eax
c000a78e:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a792:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a796:	e8 28 99 01 00       	call   c00240c3 <__adddf3>
c000a79b:	59                   	pop    ecx
c000a79c:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a7a0:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a7a4:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a7aa:	e8 88 a9 01 00       	call   c0025137 <__extendsfdf2>
c000a7af:	83 c4 10             	add    esp,0x10
c000a7b2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7b6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7c2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7c6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7ca:	e8 71 9f 01 00       	call   c0024740 <__muldf3>
c000a7cf:	83 c4 10             	add    esp,0x10
c000a7d2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7d6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7da:	52                   	push   edx
c000a7db:	50                   	push   eax
c000a7dc:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7e0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7e4:	e8 da 98 01 00       	call   c00240c3 <__adddf3>
c000a7e9:	59                   	pop    ecx
c000a7ea:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a7ee:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a7f2:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a7f8:	e8 3a a9 01 00       	call   c0025137 <__extendsfdf2>
c000a7fd:	83 c4 10             	add    esp,0x10
c000a800:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a804:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a808:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a80c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a810:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a814:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a818:	e8 23 9f 01 00       	call   c0024740 <__muldf3>
c000a81d:	83 c4 10             	add    esp,0x10
c000a820:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a824:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a828:	52                   	push   edx
c000a829:	50                   	push   eax
c000a82a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a82e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a832:	e8 8c 98 01 00       	call   c00240c3 <__adddf3>
c000a837:	59                   	pop    ecx
c000a838:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a83c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a840:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000a846:	e8 ec a8 01 00       	call   c0025137 <__extendsfdf2>
c000a84b:	83 c4 10             	add    esp,0x10
c000a84e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a852:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a856:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a85a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a85e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a862:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a866:	e8 d5 9e 01 00       	call   c0024740 <__muldf3>
c000a86b:	83 c4 10             	add    esp,0x10
c000a86e:	83 eb 18             	sub    ebx,0x18
c000a871:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a875:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a879:	52                   	push   edx
c000a87a:	50                   	push   eax
c000a87b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a87f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a883:	e8 3b 98 01 00       	call   c00240c3 <__adddf3>
c000a888:	59                   	pop    ecx
c000a889:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a88d:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000a891:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000a897:	e8 9b a8 01 00       	call   c0025137 <__extendsfdf2>
c000a89c:	83 c4 10             	add    esp,0x10
c000a89f:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8a3:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8af:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8b3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8b7:	e8 84 9e 01 00       	call   c0024740 <__muldf3>
c000a8bc:	83 c4 10             	add    esp,0x10
c000a8bf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8c3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8c7:	52                   	push   edx
c000a8c8:	50                   	push   eax
c000a8c9:	57                   	push   edi
c000a8ca:	56                   	push   esi
c000a8cb:	e8 f3 97 01 00       	call   c00240c3 <__adddf3>
c000a8d0:	83 c4 10             	add    esp,0x10
c000a8d3:	89 c6                	mov    esi,eax
c000a8d5:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000a8d8:	89 d7                	mov    edi,edx
c000a8da:	85 ed                	test   ebp,ebp
c000a8dc:	0f 8f 8d fd ff ff    	jg     c000a66f <calc_output_hex+0x363>
c000a8e2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8e6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8ea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8ee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8f2:	e8 cc 97 01 00       	call   c00240c3 <__adddf3>
c000a8f7:	83 c4 10             	add    esp,0x10
c000a8fa:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8fd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a901:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a905:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a909:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a90d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a911:	e8 2a 9e 01 00       	call   c0024740 <__muldf3>
c000a916:	59                   	pop    ecx
c000a917:	5b                   	pop    ebx
c000a918:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a91c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a920:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a924:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a928:	e8 e6 a6 01 00       	call   c0025013 <__truncdfsf2>
c000a92d:	83 c4 10             	add    esp,0x10
c000a930:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a937:	89 03                	mov    DWORD PTR [ebx],eax
c000a939:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a93d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a941:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a945:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a949:	e8 75 97 01 00       	call   c00240c3 <__adddf3>
c000a94e:	83 c4 10             	add    esp,0x10
c000a951:	89 04 24             	mov    DWORD PTR [esp],eax
c000a954:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a958:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a95c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a960:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a964:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a968:	e8 d3 9d 01 00       	call   c0024740 <__muldf3>
c000a96d:	5d                   	pop    ebp
c000a96e:	59                   	pop    ecx
c000a96f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a973:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a977:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a97b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a97f:	e8 8f a6 01 00       	call   c0025013 <__truncdfsf2>
c000a984:	83 c4 10             	add    esp,0x10
c000a987:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a98e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000a991:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a995:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a999:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a99d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a9a1:	e8 1d 97 01 00       	call   c00240c3 <__adddf3>
c000a9a6:	83 c4 10             	add    esp,0x10
c000a9a9:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9ac:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9b0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9b4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9b8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9bc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9c0:	e8 7b 9d 01 00       	call   c0024740 <__muldf3>
c000a9c5:	5b                   	pop    ebx
c000a9c6:	5d                   	pop    ebp
c000a9c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a9cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9cf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9d7:	e8 37 a6 01 00       	call   c0025013 <__truncdfsf2>
c000a9dc:	83 c4 10             	add    esp,0x10
c000a9df:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a9e6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000a9e9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a9ed:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a9f1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a9f5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a9f9:	e8 c5 96 01 00       	call   c00240c3 <__adddf3>
c000a9fe:	83 c4 10             	add    esp,0x10
c000aa01:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa04:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa08:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa0c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa10:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa14:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa18:	e8 23 9d 01 00       	call   c0024740 <__muldf3>
c000aa1d:	59                   	pop    ecx
c000aa1e:	5b                   	pop    ebx
c000aa1f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa23:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa27:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa2b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa2f:	e8 df a5 01 00       	call   c0025013 <__truncdfsf2>
c000aa34:	83 c4 10             	add    esp,0x10
c000aa37:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa3e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000aa41:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa45:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa49:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa4d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa51:	e8 6d 96 01 00       	call   c00240c3 <__adddf3>
c000aa56:	83 c4 10             	add    esp,0x10
c000aa59:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa5c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa60:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa64:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa68:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa6c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa70:	e8 cb 9c 01 00       	call   c0024740 <__muldf3>
c000aa75:	5d                   	pop    ebp
c000aa76:	59                   	pop    ecx
c000aa77:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa7b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa7f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa83:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa87:	e8 87 a5 01 00       	call   c0025013 <__truncdfsf2>
c000aa8c:	83 c4 10             	add    esp,0x10
c000aa8f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa96:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000aa99:	57                   	push   edi
c000aa9a:	56                   	push   esi
c000aa9b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa9f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aaa3:	e8 1b 96 01 00       	call   c00240c3 <__adddf3>
c000aaa8:	83 c4 10             	add    esp,0x10
c000aaab:	89 04 24             	mov    DWORD PTR [esp],eax
c000aaae:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aab2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aab6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaba:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aabe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aac2:	e8 79 9c 01 00       	call   c0024740 <__muldf3>
c000aac7:	5b                   	pop    ebx
c000aac8:	5e                   	pop    esi
c000aac9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aacd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aad1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aad5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aad9:	e8 35 a5 01 00       	call   c0025013 <__truncdfsf2>
c000aade:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000aae5:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000aae8:	81 c4 9c 00 00 00    	add    esp,0x9c
c000aaee:	5b                   	pop    ebx
c000aaef:	5e                   	pop    esi
c000aaf0:	5f                   	pop    edi
c000aaf1:	5d                   	pop    ebp
c000aaf2:	c3                   	ret    

c000aaf3 <sinc_reset>:
c000aaf3:	56                   	push   esi
c000aaf4:	53                   	push   ebx
c000aaf5:	51                   	push   ecx
c000aaf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aafa:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000aafd:	85 db                	test   ebx,ebx
c000aaff:	74 59                	je     c000ab5a <sinc_reset+0x67>
c000ab01:	31 d2                	xor    edx,edx
c000ab03:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ab0a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ab0d:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ab10:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ab17:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ab1e:	31 c0                	xor    eax,eax
c000ab20:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ab26:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ab29:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ab2c:	52                   	push   edx
c000ab2d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab30:	c1 e0 02             	shl    eax,0x2
c000ab33:	50                   	push   eax
c000ab34:	6a 00                	push   0x0
c000ab36:	56                   	push   esi
c000ab37:	e8 41 5b ff ff       	call   c000067d <memset>
c000ab3c:	83 c4 0c             	add    esp,0xc
c000ab3f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ab42:	c1 e0 02             	shl    eax,0x2
c000ab45:	50                   	push   eax
c000ab46:	68 aa 00 00 00       	push   0xaa
c000ab4b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab4e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ab51:	50                   	push   eax
c000ab52:	e8 26 5b ff ff       	call   c000067d <memset>
c000ab57:	83 c4 10             	add    esp,0x10
c000ab5a:	58                   	pop    eax
c000ab5b:	5b                   	pop    ebx
c000ab5c:	5e                   	pop    esi
c000ab5d:	c3                   	ret    

c000ab5e <calc_output_multi>:
c000ab5e:	55                   	push   ebp
c000ab5f:	57                   	push   edi
c000ab60:	56                   	push   esi
c000ab61:	89 c6                	mov    esi,eax
c000ab63:	53                   	push   ebx
c000ab64:	83 ec 4c             	sub    esp,0x4c
c000ab67:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ab6b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ab6f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ab73:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ab77:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ab7b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ab7f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ab83:	8d 46 44             	lea    eax,[esi+0x44]
c000ab86:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab89:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ab8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ab93:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ab96:	e8 0f eb ff ff       	call   c00096aa <int_to_fp>
c000ab9b:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ab9e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000aba2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000aba6:	99                   	cdq    
c000aba7:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000abab:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000abaf:	0f af d0             	imul   edx,eax
c000abb2:	0f af c3             	imul   eax,ebx
c000abb5:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000abb9:	29 c1                	sub    ecx,eax
c000abbb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000abbf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000abc3:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000abca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000abce:	57                   	push   edi
c000abcf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000abd3:	6a 00                	push   0x0
c000abd5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abd9:	e8 9f 5a ff ff       	call   c000067d <memset>
c000abde:	83 c4 10             	add    esp,0x10
c000abe1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000abe5:	89 df                	mov    edi,ebx
c000abe7:	e8 cc ea ff ff       	call   c00096b8 <fp_to_double>
c000abec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000abf0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000abf4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000abf8:	e8 b1 ea ff ff       	call   c00096ae <fp_to_int>
c000abfd:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ac00:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ac03:	51                   	push   ecx
c000ac04:	51                   	push   ecx
c000ac05:	55                   	push   ebp
c000ac06:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ac0a:	e8 49 8e 01 00       	call   c0023a58 <__subsf3>
c000ac0f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac12:	e8 20 a5 01 00       	call   c0025137 <__extendsfdf2>
c000ac17:	83 c4 10             	add    esp,0x10
c000ac1a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac1e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac22:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac26:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac2a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac2e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac32:	e8 09 9b 01 00       	call   c0024740 <__muldf3>
c000ac37:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ac3a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ac3e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ac42:	e8 f0 a4 01 00       	call   c0025137 <__extendsfdf2>
c000ac47:	83 c4 10             	add    esp,0x10
c000ac4a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac4e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac52:	52                   	push   edx
c000ac53:	50                   	push   eax
c000ac54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac5c:	e8 62 94 01 00       	call   c00240c3 <__adddf3>
c000ac61:	83 c4 10             	add    esp,0x10
c000ac64:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac68:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ac6c:	89 f8                	mov    eax,edi
c000ac6e:	b9 08 00 00 00       	mov    ecx,0x8
c000ac73:	99                   	cdq    
c000ac74:	f7 f9                	idiv   ecx
c000ac76:	4a                   	dec    edx
c000ac77:	83 fa 06             	cmp    edx,0x6
c000ac7a:	77 07                	ja     c000ac83 <calc_output_multi+0x125>
c000ac7c:	ff 24 95 44 69 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd96bc]
c000ac83:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ac86:	4f                   	dec    edi
c000ac87:	83 ec 0c             	sub    esp,0xc
c000ac8a:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ac8d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac91:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ac98:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ac9c:	e8 96 a4 01 00       	call   c0025137 <__extendsfdf2>
c000aca1:	83 c4 10             	add    esp,0x10
c000aca4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aca8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000acac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acb4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000acb8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000acbc:	e8 7f 9a 01 00       	call   c0024740 <__muldf3>
c000acc1:	83 c4 10             	add    esp,0x10
c000acc4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000acc8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000accc:	52                   	push   edx
c000accd:	50                   	push   eax
c000acce:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000acd1:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000acd4:	e8 ea 93 01 00       	call   c00240c3 <__adddf3>
c000acd9:	83 c4 10             	add    esp,0x10
c000acdc:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000acdf:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ace2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ace5:	4f                   	dec    edi
c000ace6:	83 ec 0c             	sub    esp,0xc
c000ace9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000acec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000acf0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000acf7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000acfb:	e8 37 a4 01 00       	call   c0025137 <__extendsfdf2>
c000ad00:	83 c4 10             	add    esp,0x10
c000ad03:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad07:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad0b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad0f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad13:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad17:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad1b:	e8 20 9a 01 00       	call   c0024740 <__muldf3>
c000ad20:	83 c4 10             	add    esp,0x10
c000ad23:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad27:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad2b:	52                   	push   edx
c000ad2c:	50                   	push   eax
c000ad2d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad30:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad33:	e8 8b 93 01 00       	call   c00240c3 <__adddf3>
c000ad38:	83 c4 10             	add    esp,0x10
c000ad3b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad3e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ad41:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad44:	4f                   	dec    edi
c000ad45:	83 ec 0c             	sub    esp,0xc
c000ad48:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad4b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad4f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad56:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad5a:	e8 d8 a3 01 00       	call   c0025137 <__extendsfdf2>
c000ad5f:	83 c4 10             	add    esp,0x10
c000ad62:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad66:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad6e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad72:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad76:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad7a:	e8 c1 99 01 00       	call   c0024740 <__muldf3>
c000ad7f:	83 c4 10             	add    esp,0x10
c000ad82:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad86:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad8a:	52                   	push   edx
c000ad8b:	50                   	push   eax
c000ad8c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad8f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad92:	e8 2c 93 01 00       	call   c00240c3 <__adddf3>
c000ad97:	83 c4 10             	add    esp,0x10
c000ad9a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad9d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ada0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ada3:	4f                   	dec    edi
c000ada4:	83 ec 0c             	sub    esp,0xc
c000ada7:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000adaa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000adae:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000adb5:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000adb9:	e8 79 a3 01 00       	call   c0025137 <__extendsfdf2>
c000adbe:	83 c4 10             	add    esp,0x10
c000adc1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000adc5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000adc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000adcd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000add1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000add5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000add9:	e8 62 99 01 00       	call   c0024740 <__muldf3>
c000adde:	83 c4 10             	add    esp,0x10
c000ade1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ade5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ade9:	52                   	push   edx
c000adea:	50                   	push   eax
c000adeb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000adee:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000adf1:	e8 cd 92 01 00       	call   c00240c3 <__adddf3>
c000adf6:	83 c4 10             	add    esp,0x10
c000adf9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000adfc:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000adff:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae02:	4f                   	dec    edi
c000ae03:	83 ec 0c             	sub    esp,0xc
c000ae06:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae09:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae0d:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae14:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae18:	e8 1a a3 01 00       	call   c0025137 <__extendsfdf2>
c000ae1d:	83 c4 10             	add    esp,0x10
c000ae20:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae24:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae2c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae30:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae34:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae38:	e8 03 99 01 00       	call   c0024740 <__muldf3>
c000ae3d:	83 c4 10             	add    esp,0x10
c000ae40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae48:	52                   	push   edx
c000ae49:	50                   	push   eax
c000ae4a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae4d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae50:	e8 6e 92 01 00       	call   c00240c3 <__adddf3>
c000ae55:	83 c4 10             	add    esp,0x10
c000ae58:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae5b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae5e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae61:	4f                   	dec    edi
c000ae62:	83 ec 0c             	sub    esp,0xc
c000ae65:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae68:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae6c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae73:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae77:	e8 bb a2 01 00       	call   c0025137 <__extendsfdf2>
c000ae7c:	83 c4 10             	add    esp,0x10
c000ae7f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae83:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae87:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae8f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae97:	e8 a4 98 01 00       	call   c0024740 <__muldf3>
c000ae9c:	83 c4 10             	add    esp,0x10
c000ae9f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aea3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aea7:	52                   	push   edx
c000aea8:	50                   	push   eax
c000aea9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aeac:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aeaf:	e8 0f 92 01 00       	call   c00240c3 <__adddf3>
c000aeb4:	83 c4 10             	add    esp,0x10
c000aeb7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aeba:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aebd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aec0:	4f                   	dec    edi
c000aec1:	83 ec 0c             	sub    esp,0xc
c000aec4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aec7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aecb:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aed2:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aed6:	e8 5c a2 01 00       	call   c0025137 <__extendsfdf2>
c000aedb:	83 c4 10             	add    esp,0x10
c000aede:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aee2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aee6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeee:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aef2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aef6:	e8 45 98 01 00       	call   c0024740 <__muldf3>
c000aefb:	83 c4 10             	add    esp,0x10
c000aefe:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af02:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af06:	52                   	push   edx
c000af07:	50                   	push   eax
c000af08:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af0b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af0e:	e8 b0 91 01 00       	call   c00240c3 <__adddf3>
c000af13:	83 c4 10             	add    esp,0x10
c000af16:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af19:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af1c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af1f:	4f                   	dec    edi
c000af20:	83 ec 0c             	sub    esp,0xc
c000af23:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af2a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af31:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af35:	e8 fd a1 01 00       	call   c0025137 <__extendsfdf2>
c000af3a:	83 c4 10             	add    esp,0x10
c000af3d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af41:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af49:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af4d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af51:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af55:	e8 e6 97 01 00       	call   c0024740 <__muldf3>
c000af5a:	83 c4 10             	add    esp,0x10
c000af5d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af61:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af65:	52                   	push   edx
c000af66:	50                   	push   eax
c000af67:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af6a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af6d:	e8 51 91 01 00       	call   c00240c3 <__adddf3>
c000af72:	83 c4 10             	add    esp,0x10
c000af75:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af78:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af7b:	85 ff                	test   edi,edi
c000af7d:	0f 8f e9 fc ff ff    	jg     c000ac6c <calc_output_multi+0x10e>
c000af83:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000af87:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000af8b:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000af8f:	0f 89 4c fc ff ff    	jns    c000abe1 <calc_output_multi+0x83>
c000af95:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000af99:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000af9d:	29 c8                	sub    eax,ecx
c000af9f:	99                   	cdq    
c000afa0:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000afa4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000afa8:	0f af d0             	imul   edx,eax
c000afab:	40                   	inc    eax
c000afac:	01 d1                	add    ecx,edx
c000afae:	0f af c3             	imul   eax,ebx
c000afb1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000afb5:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000afb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000afbc:	55                   	push   ebp
c000afbd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000afc1:	6a 00                	push   0x0
c000afc3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000afc7:	e8 b1 56 ff ff       	call   c000067d <memset>
c000afcc:	83 c4 10             	add    esp,0x10
c000afcf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000afd3:	e8 e0 e6 ff ff       	call   c00096b8 <fp_to_double>
c000afd8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000afdc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000afe0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000afe4:	e8 c5 e6 ff ff       	call   c00096ae <fp_to_int>
c000afe9:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000afec:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000afef:	57                   	push   edi
c000aff0:	57                   	push   edi
c000aff1:	89 df                	mov    edi,ebx
c000aff3:	55                   	push   ebp
c000aff4:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000aff8:	e8 5b 8a 01 00       	call   c0023a58 <__subsf3>
c000affd:	89 04 24             	mov    DWORD PTR [esp],eax
c000b000:	e8 32 a1 01 00       	call   c0025137 <__extendsfdf2>
c000b005:	83 c4 10             	add    esp,0x10
c000b008:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b00c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b010:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b014:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b018:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b01c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b020:	e8 1b 97 01 00       	call   c0024740 <__muldf3>
c000b025:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b028:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b02c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b030:	e8 02 a1 01 00       	call   c0025137 <__extendsfdf2>
c000b035:	83 c4 10             	add    esp,0x10
c000b038:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b03c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b040:	52                   	push   edx
c000b041:	50                   	push   eax
c000b042:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b046:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b04a:	e8 74 90 01 00       	call   c00240c3 <__adddf3>
c000b04f:	83 c4 10             	add    esp,0x10
c000b052:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b056:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b05a:	89 f8                	mov    eax,edi
c000b05c:	b9 08 00 00 00       	mov    ecx,0x8
c000b061:	99                   	cdq    
c000b062:	f7 f9                	idiv   ecx
c000b064:	4a                   	dec    edx
c000b065:	83 fa 06             	cmp    edx,0x6
c000b068:	77 07                	ja     c000b071 <calc_output_multi+0x513>
c000b06a:	ff 24 95 60 69 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd96a0]
c000b071:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b075:	4f                   	dec    edi
c000b076:	83 ec 0c             	sub    esp,0xc
c000b079:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b07c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b080:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b087:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b08b:	e8 a7 a0 01 00       	call   c0025137 <__extendsfdf2>
c000b090:	83 c4 10             	add    esp,0x10
c000b093:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b097:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b09b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b09f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0a3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0a7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0ab:	e8 90 96 01 00       	call   c0024740 <__muldf3>
c000b0b0:	83 c4 10             	add    esp,0x10
c000b0b3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0b7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0bb:	52                   	push   edx
c000b0bc:	50                   	push   eax
c000b0bd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0c0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0c3:	e8 fb 8f 01 00       	call   c00240c3 <__adddf3>
c000b0c8:	83 c4 10             	add    esp,0x10
c000b0cb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0ce:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0d5:	4f                   	dec    edi
c000b0d6:	83 ec 0c             	sub    esp,0xc
c000b0d9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0dc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0e0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0e7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0eb:	e8 47 a0 01 00       	call   c0025137 <__extendsfdf2>
c000b0f0:	83 c4 10             	add    esp,0x10
c000b0f3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b103:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b107:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b10b:	e8 30 96 01 00       	call   c0024740 <__muldf3>
c000b110:	83 c4 10             	add    esp,0x10
c000b113:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b117:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b11b:	52                   	push   edx
c000b11c:	50                   	push   eax
c000b11d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b120:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b123:	e8 9b 8f 01 00       	call   c00240c3 <__adddf3>
c000b128:	83 c4 10             	add    esp,0x10
c000b12b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b12e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b131:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b135:	4f                   	dec    edi
c000b136:	83 ec 0c             	sub    esp,0xc
c000b139:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b13c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b140:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b147:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b14b:	e8 e7 9f 01 00       	call   c0025137 <__extendsfdf2>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b157:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b15b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b15f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b163:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b167:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b16b:	e8 d0 95 01 00       	call   c0024740 <__muldf3>
c000b170:	83 c4 10             	add    esp,0x10
c000b173:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b177:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b17b:	52                   	push   edx
c000b17c:	50                   	push   eax
c000b17d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b180:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b183:	e8 3b 8f 01 00       	call   c00240c3 <__adddf3>
c000b188:	83 c4 10             	add    esp,0x10
c000b18b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b18e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b191:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b195:	4f                   	dec    edi
c000b196:	83 ec 0c             	sub    esp,0xc
c000b199:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b19c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b1a0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b1a7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b1ab:	e8 87 9f 01 00       	call   c0025137 <__extendsfdf2>
c000b1b0:	83 c4 10             	add    esp,0x10
c000b1b3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1b7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1cb:	e8 70 95 01 00       	call   c0024740 <__muldf3>
c000b1d0:	83 c4 10             	add    esp,0x10
c000b1d3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1d7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1db:	52                   	push   edx
c000b1dc:	50                   	push   eax
c000b1dd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b1e0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b1e3:	e8 db 8e 01 00       	call   c00240c3 <__adddf3>
c000b1e8:	83 c4 10             	add    esp,0x10
c000b1eb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1ee:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b1f5:	4f                   	dec    edi
c000b1f6:	83 ec 0c             	sub    esp,0xc
c000b1f9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b1fc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b200:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b207:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b20b:	e8 27 9f 01 00       	call   c0025137 <__extendsfdf2>
c000b210:	83 c4 10             	add    esp,0x10
c000b213:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b217:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b21b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b21f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b223:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b227:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b22b:	e8 10 95 01 00       	call   c0024740 <__muldf3>
c000b230:	83 c4 10             	add    esp,0x10
c000b233:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b237:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b23b:	52                   	push   edx
c000b23c:	50                   	push   eax
c000b23d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b240:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b243:	e8 7b 8e 01 00       	call   c00240c3 <__adddf3>
c000b248:	83 c4 10             	add    esp,0x10
c000b24b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b24e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b251:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b255:	4f                   	dec    edi
c000b256:	83 ec 0c             	sub    esp,0xc
c000b259:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b25c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b260:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b267:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b26b:	e8 c7 9e 01 00       	call   c0025137 <__extendsfdf2>
c000b270:	83 c4 10             	add    esp,0x10
c000b273:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b277:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b27b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b27f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b283:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b287:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b28b:	e8 b0 94 01 00       	call   c0024740 <__muldf3>
c000b290:	83 c4 10             	add    esp,0x10
c000b293:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b297:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b29b:	52                   	push   edx
c000b29c:	50                   	push   eax
c000b29d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2a0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2a3:	e8 1b 8e 01 00       	call   c00240c3 <__adddf3>
c000b2a8:	83 c4 10             	add    esp,0x10
c000b2ab:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2ae:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2b5:	4f                   	dec    edi
c000b2b6:	83 ec 0c             	sub    esp,0xc
c000b2b9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2c0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2c7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2cb:	e8 67 9e 01 00       	call   c0025137 <__extendsfdf2>
c000b2d0:	83 c4 10             	add    esp,0x10
c000b2d3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2d7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2e3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2eb:	e8 50 94 01 00       	call   c0024740 <__muldf3>
c000b2f0:	83 c4 10             	add    esp,0x10
c000b2f3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2fb:	52                   	push   edx
c000b2fc:	50                   	push   eax
c000b2fd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b300:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b303:	e8 bb 8d 01 00       	call   c00240c3 <__adddf3>
c000b308:	83 c4 10             	add    esp,0x10
c000b30b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b30e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b311:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b315:	4f                   	dec    edi
c000b316:	83 ec 0c             	sub    esp,0xc
c000b319:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b31c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b320:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b327:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b32b:	e8 07 9e 01 00       	call   c0025137 <__extendsfdf2>
c000b330:	83 c4 10             	add    esp,0x10
c000b333:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b337:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b33b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b33f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b343:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b347:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b34b:	e8 f0 93 01 00       	call   c0024740 <__muldf3>
c000b350:	83 c4 10             	add    esp,0x10
c000b353:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b357:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b35b:	52                   	push   edx
c000b35c:	50                   	push   eax
c000b35d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b360:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b363:	e8 5b 8d 01 00       	call   c00240c3 <__adddf3>
c000b368:	83 c4 10             	add    esp,0x10
c000b36b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b36e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b371:	85 ff                	test   edi,edi
c000b373:	0f 8f e1 fc ff ff    	jg     c000b05a <calc_output_multi+0x4fc>
c000b379:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b37d:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b381:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b385:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b38a:	0f 8f 3f fc ff ff    	jg     c000afcf <calc_output_multi+0x471>
c000b390:	be 08 00 00 00       	mov    esi,0x8
c000b395:	89 d8                	mov    eax,ebx
c000b397:	99                   	cdq    
c000b398:	f7 fe                	idiv   esi
c000b39a:	4a                   	dec    edx
c000b39b:	83 fa 06             	cmp    edx,0x6
c000b39e:	77 07                	ja     c000b3a7 <calc_output_multi+0x849>
c000b3a0:	ff 24 95 7c 69 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd9684]
c000b3a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3ab:	4b                   	dec    ebx
c000b3ac:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3b0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b3b7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3bb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3be:	e8 00 8d 01 00       	call   c00240c3 <__adddf3>
c000b3c3:	83 c4 10             	add    esp,0x10
c000b3c6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b3ca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b3ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3de:	e8 5d 93 01 00       	call   c0024740 <__muldf3>
c000b3e3:	5d                   	pop    ebp
c000b3e4:	59                   	pop    ecx
c000b3e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b3e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b3ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f5:	e8 19 9c 01 00       	call   c0025013 <__truncdfsf2>
c000b3fa:	83 c4 10             	add    esp,0x10
c000b3fd:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b401:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b404:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b408:	4b                   	dec    ebx
c000b409:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b40d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b410:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b414:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b418:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b41b:	e8 a3 8c 01 00       	call   c00240c3 <__adddf3>
c000b420:	83 c4 10             	add    esp,0x10
c000b423:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b427:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b42b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b42f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b433:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b437:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b43b:	e8 00 93 01 00       	call   c0024740 <__muldf3>
c000b440:	59                   	pop    ecx
c000b441:	5f                   	pop    edi
c000b442:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b446:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b44a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b44e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b452:	e8 bc 9b 01 00       	call   c0025013 <__truncdfsf2>
c000b457:	83 c4 10             	add    esp,0x10
c000b45a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b45e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b461:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b465:	4b                   	dec    ebx
c000b466:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b46a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b46d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b471:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b475:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b478:	e8 46 8c 01 00       	call   c00240c3 <__adddf3>
c000b47d:	83 c4 10             	add    esp,0x10
c000b480:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b484:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b488:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b48c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b490:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b494:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b498:	e8 a3 92 01 00       	call   c0024740 <__muldf3>
c000b49d:	5f                   	pop    edi
c000b49e:	5d                   	pop    ebp
c000b49f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b4a3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b4a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4af:	e8 5f 9b 01 00       	call   c0025013 <__truncdfsf2>
c000b4b4:	83 c4 10             	add    esp,0x10
c000b4b7:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b4bb:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b4be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4c2:	4b                   	dec    ebx
c000b4c3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4c7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b4ce:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4d2:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4d5:	e8 e9 8b 01 00       	call   c00240c3 <__adddf3>
c000b4da:	83 c4 10             	add    esp,0x10
c000b4dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b4e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b4e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4f5:	e8 46 92 01 00       	call   c0024740 <__muldf3>
c000b4fa:	5d                   	pop    ebp
c000b4fb:	59                   	pop    ecx
c000b4fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b500:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b504:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b508:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b50c:	e8 02 9b 01 00       	call   c0025013 <__truncdfsf2>
c000b511:	83 c4 10             	add    esp,0x10
c000b514:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b518:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b51b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b51f:	4b                   	dec    ebx
c000b520:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b524:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b527:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b52b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b52f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b532:	e8 8c 8b 01 00       	call   c00240c3 <__adddf3>
c000b537:	83 c4 10             	add    esp,0x10
c000b53a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b53e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b542:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b546:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b54a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b54e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b552:	e8 e9 91 01 00       	call   c0024740 <__muldf3>
c000b557:	59                   	pop    ecx
c000b558:	5f                   	pop    edi
c000b559:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b55d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b561:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b565:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b569:	e8 a5 9a 01 00       	call   c0025013 <__truncdfsf2>
c000b56e:	83 c4 10             	add    esp,0x10
c000b571:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b575:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b578:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b57c:	4b                   	dec    ebx
c000b57d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b581:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b584:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b588:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b58c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b58f:	e8 2f 8b 01 00       	call   c00240c3 <__adddf3>
c000b594:	83 c4 10             	add    esp,0x10
c000b597:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b59b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b59f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5af:	e8 8c 91 01 00       	call   c0024740 <__muldf3>
c000b5b4:	5f                   	pop    edi
c000b5b5:	5d                   	pop    ebp
c000b5b6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5ba:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5c6:	e8 48 9a 01 00       	call   c0025013 <__truncdfsf2>
c000b5cb:	83 c4 10             	add    esp,0x10
c000b5ce:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5d2:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5d9:	4b                   	dec    ebx
c000b5da:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5de:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5e1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5e5:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5e9:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5ec:	e8 d2 8a 01 00       	call   c00240c3 <__adddf3>
c000b5f1:	83 c4 10             	add    esp,0x10
c000b5f4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5f8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b600:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b604:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b608:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60c:	e8 2f 91 01 00       	call   c0024740 <__muldf3>
c000b611:	5d                   	pop    ebp
c000b612:	59                   	pop    ecx
c000b613:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b617:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b61b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b61f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b623:	e8 eb 99 01 00       	call   c0025013 <__truncdfsf2>
c000b628:	83 c4 10             	add    esp,0x10
c000b62b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b62f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b632:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b636:	4b                   	dec    ebx
c000b637:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b63b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b63e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b642:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b646:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b649:	e8 75 8a 01 00       	call   c00240c3 <__adddf3>
c000b64e:	83 c4 10             	add    esp,0x10
c000b651:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b655:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b659:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b65d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b661:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b665:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b669:	e8 d2 90 01 00       	call   c0024740 <__muldf3>
c000b66e:	59                   	pop    ecx
c000b66f:	5f                   	pop    edi
c000b670:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b674:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b678:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b67c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b680:	e8 8e 99 01 00       	call   c0025013 <__truncdfsf2>
c000b685:	83 c4 10             	add    esp,0x10
c000b688:	85 db                	test   ebx,ebx
c000b68a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b68e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b691:	0f 8f fe fc ff ff    	jg     c000b395 <calc_output_multi+0x837>
c000b697:	83 c4 4c             	add    esp,0x4c
c000b69a:	5b                   	pop    ebx
c000b69b:	5e                   	pop    esi
c000b69c:	5f                   	pop    edi
c000b69d:	5d                   	pop    ebp
c000b69e:	c3                   	ret    

c000b69f <double_to_fp>:
c000b69f:	83 ec 0c             	sub    esp,0xc
c000b6a2:	68 00 00 b0 40       	push   0x40b00000
c000b6a7:	6a 00                	push   0x0
c000b6a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6b1:	e8 8a 90 01 00       	call   c0024740 <__muldf3>
c000b6b6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b6ba:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b6be:	83 c4 1c             	add    esp,0x1c
c000b6c1:	e9 fa 9a 01 00       	jmp    c00251c0 <lrint>

c000b6c6 <fmod_one>:
c000b6c6:	83 ec 2c             	sub    esp,0x2c
c000b6c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b6cd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6d1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b6d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b6d9:	83 ec 08             	sub    esp,0x8
c000b6dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e4:	e8 d7 9a 01 00       	call   c00251c0 <lrint>
c000b6e9:	83 c4 10             	add    esp,0x10
c000b6ec:	83 ec 0c             	sub    esp,0xc
c000b6ef:	50                   	push   eax
c000b6f0:	e8 ae 96 01 00       	call   c0024da3 <__floatsidf>
c000b6f5:	83 c4 10             	add    esp,0x10
c000b6f8:	52                   	push   edx
c000b6f9:	50                   	push   eax
c000b6fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b702:	e8 0d 90 01 00       	call   c0024714 <__subdf3>
c000b707:	83 c4 10             	add    esp,0x10
c000b70a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b70e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b712:	b8 00 00 00 00       	mov    eax,0x0
c000b717:	ba 00 00 00 00       	mov    edx,0x0
c000b71c:	52                   	push   edx
c000b71d:	50                   	push   eax
c000b71e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b722:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b726:	e8 e4 98 01 00       	call   c002500f <__ltdf2>
c000b72b:	83 c4 10             	add    esp,0x10
c000b72e:	85 c0                	test   eax,eax
c000b730:	79 1e                	jns    c000b750 <fmod_one+0x8a>
c000b732:	b8 00 00 00 00       	mov    eax,0x0
c000b737:	ba 00 00 f0 3f       	mov    edx,0x3ff00000
c000b73c:	52                   	push   edx
c000b73d:	50                   	push   eax
c000b73e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b742:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b746:	e8 78 89 01 00       	call   c00240c3 <__adddf3>
c000b74b:	83 c4 10             	add    esp,0x10
c000b74e:	eb 08                	jmp    c000b758 <fmod_one+0x92>
c000b750:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b754:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b758:	83 c4 2c             	add    esp,0x2c
c000b75b:	c3                   	ret    

c000b75c <prepare_data>:
c000b75c:	55                   	push   ebp
c000b75d:	57                   	push   edi
c000b75e:	56                   	push   esi
c000b75f:	53                   	push   ebx
c000b760:	83 ec 1c             	sub    esp,0x1c
c000b763:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b767:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b76b:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b76f:	0f 89 57 01 00 00    	jns    c000b8cc <prepare_data+0x170>
c000b775:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b778:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b77b:	85 d2                	test   edx,edx
c000b77d:	75 0d                	jne    c000b78c <prepare_data+0x30>
c000b77f:	8d 14 36             	lea    edx,[esi+esi*1]
c000b782:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b785:	29 d0                	sub    eax,edx
c000b787:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b78a:	eb 44                	jmp    c000b7d0 <prepare_data+0x74>
c000b78c:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b78f:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b792:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b795:	39 c1                	cmp    ecx,eax
c000b797:	7d 04                	jge    c000b79d <prepare_data+0x41>
c000b799:	29 d0                	sub    eax,edx
c000b79b:	eb 2d                	jmp    c000b7ca <prepare_data+0x6e>
c000b79d:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b7a3:	29 d7                	sub    edi,edx
c000b7a5:	01 f7                	add    edi,esi
c000b7a7:	51                   	push   ecx
c000b7a8:	29 f2                	sub    edx,esi
c000b7aa:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b7b1:	8d 14 90             	lea    edx,[eax+edx*4]
c000b7b4:	51                   	push   ecx
c000b7b5:	52                   	push   edx
c000b7b6:	50                   	push   eax
c000b7b7:	e8 53 4e ff ff       	call   c000060f <memmove>
c000b7bc:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b7bf:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b7c2:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b7c5:	29 f0                	sub    eax,esi
c000b7c7:	83 c4 10             	add    esp,0x10
c000b7ca:	29 f0                	sub    eax,esi
c000b7cc:	79 02                	jns    c000b7d0 <prepare_data+0x74>
c000b7ce:	31 c0                	xor    eax,eax
c000b7d0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b7d3:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b7d6:	29 ef                	sub    edi,ebp
c000b7d8:	39 c7                	cmp    edi,eax
c000b7da:	7e 02                	jle    c000b7de <prepare_data+0x82>
c000b7dc:	89 c7                	mov    edi,eax
c000b7de:	89 f8                	mov    eax,edi
c000b7e0:	99                   	cdq    
c000b7e1:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b7e4:	b8 15 00 00 00       	mov    eax,0x15
c000b7e9:	29 d7                	sub    edi,edx
c000b7eb:	0f 88 dd 00 00 00    	js     c000b8ce <prepare_data+0x172>
c000b7f1:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b7f4:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b7f7:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b7fa:	0f 8f ce 00 00 00    	jg     c000b8ce <prepare_data+0x172>
c000b800:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b806:	50                   	push   eax
c000b807:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b80e:	50                   	push   eax
c000b80f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b813:	8b 00                	mov    eax,DWORD PTR [eax]
c000b815:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b818:	50                   	push   eax
c000b819:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b81c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b820:	50                   	push   eax
c000b821:	e8 21 4e ff ff       	call   c0000647 <memcpy>
c000b826:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b829:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b82c:	01 fd                	add    ebp,edi
c000b82e:	01 f9                	add    ecx,edi
c000b830:	83 c4 10             	add    esp,0x10
c000b833:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b836:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b839:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b83c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b840:	0f 85 86 00 00 00    	jne    c000b8cc <prepare_data+0x170>
c000b846:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b849:	89 e8                	mov    eax,ebp
c000b84b:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b84e:	29 c8                	sub    eax,ecx
c000b850:	39 f8                	cmp    eax,edi
c000b852:	7d 78                	jge    c000b8cc <prepare_data+0x170>
c000b854:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b858:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b85c:	74 6e                	je     c000b8cc <prepare_data+0x170>
c000b85e:	8d 7e 04             	lea    edi,[esi+0x4]
c000b861:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b865:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b868:	29 ef                	sub    edi,ebp
c000b86a:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b86e:	7c 29                	jl     c000b899 <prepare_data+0x13d>
c000b870:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b873:	29 f1                	sub    ecx,esi
c000b875:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b87c:	55                   	push   ebp
c000b87d:	50                   	push   eax
c000b87e:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b881:	50                   	push   eax
c000b882:	52                   	push   edx
c000b883:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b887:	e8 83 4d ff ff       	call   c000060f <memmove>
c000b88c:	83 c4 10             	add    esp,0x10
c000b88f:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b892:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b895:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b899:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b89c:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b89f:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000b8a2:	83 c6 05             	add    esi,0x5
c000b8a5:	78 07                	js     c000b8ae <prepare_data+0x152>
c000b8a7:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b8aa:	39 cf                	cmp    edi,ecx
c000b8ac:	7e 04                	jle    c000b8b2 <prepare_data+0x156>
c000b8ae:	89 ce                	mov    esi,ecx
c000b8b0:	29 c6                	sub    esi,eax
c000b8b2:	8d 04 82             	lea    eax,[edx+eax*4]
c000b8b5:	51                   	push   ecx
c000b8b6:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000b8bd:	51                   	push   ecx
c000b8be:	6a 00                	push   0x0
c000b8c0:	50                   	push   eax
c000b8c1:	e8 b7 4d ff ff       	call   c000067d <memset>
c000b8c6:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000b8c9:	83 c4 10             	add    esp,0x10
c000b8cc:	31 c0                	xor    eax,eax
c000b8ce:	83 c4 1c             	add    esp,0x1c
c000b8d1:	5b                   	pop    ebx
c000b8d2:	5e                   	pop    esi
c000b8d3:	5f                   	pop    edi
c000b8d4:	5d                   	pop    ebp
c000b8d5:	c3                   	ret    

c000b8d6 <sinc_multichan_vari_process>:
c000b8d6:	55                   	push   ebp
c000b8d7:	b8 05 00 00 00       	mov    eax,0x5
c000b8dc:	57                   	push   edi
c000b8dd:	56                   	push   esi
c000b8de:	53                   	push   ebx
c000b8df:	83 ec 4c             	sub    esp,0x4c
c000b8e2:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000b8e6:	8b 6c 24 64          	mov    ebp,DWORD PTR [esp+0x64]
c000b8ea:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000b8ed:	85 db                	test   ebx,ebx
c000b8ef:	0f 84 b5 05 00 00    	je     c000beaa <sinc_multichan_vari_process+0x5d4>
c000b8f5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000b8f8:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000b8fb:	0f af d0             	imul   edx,eax
c000b8fe:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000b901:	0f af 45 0c          	imul   eax,DWORD PTR [ebp+0xc]
c000b905:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b90c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000b90f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000b916:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000b919:	8b 06                	mov    eax,DWORD PTR [esi]
c000b91b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b91f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b923:	57                   	push   edi
c000b924:	57                   	push   edi
c000b925:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b929:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b92d:	e8 15 dd ff ff       	call   c0009647 <is_bad_src_ratio>
c000b932:	83 c4 10             	add    esp,0x10
c000b935:	89 c2                	mov    edx,eax
c000b937:	b8 16 00 00 00       	mov    eax,0x16
c000b93c:	85 d2                	test   edx,edx
c000b93e:	0f 85 66 05 00 00    	jne    c000beaa <sinc_multichan_vari_process+0x5d4>
c000b944:	83 ec 0c             	sub    esp,0xc
c000b947:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b94a:	e8 54 94 01 00       	call   c0024da3 <__floatsidf>
c000b94f:	83 c4 10             	add    esp,0x10
c000b952:	89 04 24             	mov    DWORD PTR [esp],eax
c000b955:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000b959:	68 00 00 00 40       	push   0x40000000
c000b95e:	6a 00                	push   0x0
c000b960:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b964:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b968:	e8 56 87 01 00       	call   c00240c3 <__adddf3>
c000b96d:	59                   	pop    ecx
c000b96e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b972:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000b976:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000b979:	e8 25 94 01 00       	call   c0024da3 <__floatsidf>
c000b97e:	83 c4 10             	add    esp,0x10
c000b981:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b985:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b989:	52                   	push   edx
c000b98a:	50                   	push   eax
c000b98b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b98f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b993:	e8 8c 90 01 00       	call   c0024a24 <__divdf3>
c000b998:	83 c4 10             	add    esp,0x10
c000b99b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b99f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9a3:	8b 06                	mov    eax,DWORD PTR [esi]
c000b9a5:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000b9a8:	89 04 24             	mov    DWORD PTR [esp],eax
c000b9ab:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000b9af:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c000b9b2:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c000b9b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b9b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b9bd:	52                   	push   edx
c000b9be:	50                   	push   eax
c000b9bf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b9c3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b9c7:	e8 43 96 01 00       	call   c002500f <__ltdf2>
c000b9cc:	83 c4 10             	add    esp,0x10
c000b9cf:	85 c0                	test   eax,eax
c000b9d1:	79 1d                	jns    c000b9f0 <sinc_multichan_vari_process+0x11a>
c000b9d3:	68 00 00 f0 3f       	push   0x3ff00000
c000b9d8:	6a 00                	push   0x0
c000b9da:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b9de:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b9e2:	e8 28 96 01 00       	call   c002500f <__ltdf2>
c000b9e7:	83 c4 10             	add    esp,0x10
c000b9ea:	85 c0                	test   eax,eax
c000b9ec:	78 2c                	js     c000ba1a <sinc_multichan_vari_process+0x144>
c000b9ee:	eb 4a                	jmp    c000ba3a <sinc_multichan_vari_process+0x164>
c000b9f0:	68 00 00 f0 3f       	push   0x3ff00000
c000b9f5:	6a 00                	push   0x0
c000b9f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9ff:	e8 0b 96 01 00       	call   c002500f <__ltdf2>
c000ba04:	83 c4 10             	add    esp,0x10
c000ba07:	85 c0                	test   eax,eax
c000ba09:	79 2f                	jns    c000ba3a <sinc_multichan_vari_process+0x164>
c000ba0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba0f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ba13:	89 04 24             	mov    DWORD PTR [esp],eax
c000ba16:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ba1a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000ba1e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000ba22:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba26:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba2a:	e8 f5 8f 01 00       	call   c0024a24 <__divdf3>
c000ba2f:	83 c4 10             	add    esp,0x10
c000ba32:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ba36:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba3a:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ba3d:	50                   	push   eax
c000ba3e:	50                   	push   eax
c000ba3f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba43:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba47:	e8 74 97 01 00       	call   c00251c0 <lrint>
c000ba4c:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000ba4f:	40                   	inc    eax
c000ba50:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ba54:	0f af c7             	imul   eax,edi
c000ba57:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ba5b:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000ba5e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ba62:	58                   	pop    eax
c000ba63:	5a                   	pop    edx
c000ba64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba68:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba6c:	e8 55 fc ff ff       	call   c000b6c6 <fmod_one>
c000ba71:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ba74:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba78:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba7c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ba7f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ba83:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba87:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba8b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba8f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba93:	e8 7c 8c 01 00       	call   c0024714 <__subdf3>
c000ba98:	83 c4 18             	add    esp,0x18
c000ba9b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ba9f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000baa3:	52                   	push   edx
c000baa4:	50                   	push   eax
c000baa5:	e8 16 97 01 00       	call   c00251c0 <lrint>
c000baaa:	0f af f8             	imul   edi,eax
c000baad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bab1:	01 f8                	add    eax,edi
c000bab3:	99                   	cdq    
c000bab4:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bab7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000baba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000babe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bac2:	68 00 00 f0 3f       	push   0x3ff00000
c000bac7:	6a 00                	push   0x0
c000bac9:	e8 56 8f 01 00       	call   c0024a24 <__divdf3>
c000bace:	83 c4 10             	add    esp,0x10
c000bad1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bad5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bad9:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bade:	68 23 42 92 0c       	push   0xc924223
c000bae3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bae7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000baeb:	e8 d3 85 01 00       	call   c00240c3 <__adddf3>
c000baf0:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000baf4:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000baf8:	83 c4 20             	add    esp,0x20
c000bafb:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000bb03:	c7 44 24 24 00 00 f0 3f 	mov    DWORD PTR [esp+0x24],0x3ff00000
c000bb0b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bb0e:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bb11:	7d 4e                	jge    c000bb61 <sinc_multichan_vari_process+0x28b>
c000bb13:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bb16:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bb19:	01 c8                	add    eax,ecx
c000bb1b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bb1e:	99                   	cdq    
c000bb1f:	f7 f9                	idiv   ecx
c000bb21:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000bb25:	7d 0c                	jge    c000bb33 <sinc_multichan_vari_process+0x25d>
c000bb27:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000bb2a:	85 ff                	test   edi,edi
c000bb2c:	79 68                	jns    c000bb96 <sinc_multichan_vari_process+0x2c0>
c000bb2e:	e9 e3 00 00 00       	jmp    c000bc16 <sinc_multichan_vari_process+0x340>
c000bb33:	50                   	push   eax
c000bb34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb38:	55                   	push   ebp
c000bb39:	53                   	push   ebx
c000bb3a:	e8 1d fc ff ff       	call   c000b75c <prepare_data>
c000bb3f:	83 c4 10             	add    esp,0x10
c000bb42:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bb45:	85 c0                	test   eax,eax
c000bb47:	0f 85 5d 03 00 00    	jne    c000beaa <sinc_multichan_vari_process+0x5d4>
c000bb4d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bb50:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bb53:	01 c8                	add    eax,ecx
c000bb55:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bb58:	99                   	cdq    
c000bb59:	f7 f9                	idiv   ecx
c000bb5b:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000bb5f:	7c c6                	jl     c000bb27 <sinc_multichan_vari_process+0x251>
c000bb61:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000bb64:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000bb68:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bb6b:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bb6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bb72:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bb76:	89 06                	mov    DWORD PTR [esi],eax
c000bb78:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bb7b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bb7e:	99                   	cdq    
c000bb7f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb82:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000bb85:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bb88:	99                   	cdq    
c000bb89:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb8c:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c000bb8f:	31 c0                	xor    eax,eax
c000bb91:	e9 14 03 00 00       	jmp    c000beaa <sinc_multichan_vari_process+0x5d4>
c000bb96:	83 ec 0c             	sub    esp,0xc
c000bb99:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bb9c:	e8 02 92 01 00       	call   c0024da3 <__floatsidf>
c000bba1:	83 c4 10             	add    esp,0x10
c000bba4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bba8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbac:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000bbb0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000bbb4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbb8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbbc:	e8 02 85 01 00       	call   c00240c3 <__adddf3>
c000bbc1:	83 c4 10             	add    esp,0x10
c000bbc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbc8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbcc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bbd0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bbd4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbd8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbdc:	e8 e2 84 01 00       	call   c00240c3 <__adddf3>
c000bbe1:	89 3c 24             	mov    DWORD PTR [esp],edi
c000bbe4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbe8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbec:	e8 b2 91 01 00       	call   c0024da3 <__floatsidf>
c000bbf1:	83 c4 10             	add    esp,0x10
c000bbf4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbf8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbfc:	52                   	push   edx
c000bbfd:	50                   	push   eax
c000bbfe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc02:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc06:	e8 02 94 01 00       	call   c002500d <__gedf2>
c000bc0b:	83 c4 10             	add    esp,0x10
c000bc0e:	85 c0                	test   eax,eax
c000bc10:	0f 89 4b ff ff ff    	jns    c000bb61 <sinc_multichan_vari_process+0x28b>
c000bc16:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bc1a:	0f 8e ed 00 00 00    	jle    c000bd0d <sinc_multichan_vari_process+0x437>
c000bc20:	83 ec 10             	sub    esp,0x10
c000bc23:	ff 75 20             	push   DWORD PTR [ebp+0x20]
c000bc26:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
c000bc29:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000bc2c:	ff 36                	push   DWORD PTR [esi]
c000bc2e:	e8 e1 8a 01 00       	call   c0024714 <__subdf3>
c000bc33:	83 c4 18             	add    esp,0x18
c000bc36:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bc3a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bc3e:	52                   	push   edx
c000bc3f:	50                   	push   eax
c000bc40:	e8 5b 95 01 00       	call   c00251a0 <fabs>
c000bc45:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc49:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc4d:	83 c4 10             	add    esp,0x10
c000bc50:	68 df 7c db 3d       	push   0x3ddb7cdf
c000bc55:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000bc5a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc5e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc62:	e8 8a 93 01 00       	call   c0024ff1 <__gtdf2>
c000bc67:	83 c4 10             	add    esp,0x10
c000bc6a:	85 c0                	test   eax,eax
c000bc6c:	0f 8e 9b 00 00 00    	jle    c000bd0d <sinc_multichan_vari_process+0x437>
c000bc72:	8b 06                	mov    eax,DWORD PTR [esi]
c000bc74:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bc77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc7f:	52                   	push   edx
c000bc80:	50                   	push   eax
c000bc81:	ff 75 20             	push   DWORD PTR [ebp+0x20]
c000bc84:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
c000bc87:	e8 88 8a 01 00       	call   c0024714 <__subdf3>
c000bc8c:	59                   	pop    ecx
c000bc8d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000bc91:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000bc95:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000bc98:	e8 06 91 01 00       	call   c0024da3 <__floatsidf>
c000bc9d:	83 c4 10             	add    esp,0x10
c000bca0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bca4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bca8:	52                   	push   edx
c000bca9:	50                   	push   eax
c000bcaa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcb2:	e8 89 8a 01 00       	call   c0024740 <__muldf3>
c000bcb7:	5f                   	pop    edi
c000bcb8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000bcbc:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000bcc0:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bcc3:	e8 db 90 01 00       	call   c0024da3 <__floatsidf>
c000bcc8:	83 c4 10             	add    esp,0x10
c000bccb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bccf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcd3:	52                   	push   edx
c000bcd4:	50                   	push   eax
c000bcd5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcd9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcdd:	e8 42 8d 01 00       	call   c0024a24 <__divdf3>
c000bce2:	83 c4 10             	add    esp,0x10
c000bce5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bce9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bced:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bcf1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bcf5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcf9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcfd:	e8 c1 83 01 00       	call   c00240c3 <__adddf3>
c000bd02:	83 c4 10             	add    esp,0x10
c000bd05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bd09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bd0d:	83 ec 0c             	sub    esp,0xc
c000bd10:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bd13:	e8 8b 90 01 00       	call   c0024da3 <__floatsidf>
c000bd18:	83 c4 10             	add    esp,0x10
c000bd1b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd1f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd23:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd2b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd33:	e8 d7 92 01 00       	call   c002500f <__ltdf2>
c000bd38:	83 c4 10             	add    esp,0x10
c000bd3b:	85 c0                	test   eax,eax
c000bd3d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000bd41:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000bd45:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bd49:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000bd4d:	78 10                	js     c000bd5f <sinc_multichan_vari_process+0x489>
c000bd4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bd53:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000bd57:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bd5b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bd5f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd6b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd6f:	e8 cc 89 01 00       	call   c0024740 <__muldf3>
c000bd74:	59                   	pop    ecx
c000bd75:	5f                   	pop    edi
c000bd76:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd7a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd82:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd86:	e8 14 f9 ff ff       	call   c000b69f <double_to_fp>
c000bd8b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd8f:	89 c7                	mov    edi,eax
c000bd91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd9d:	e8 9e 89 01 00       	call   c0024740 <__muldf3>
c000bda2:	83 c4 18             	add    esp,0x18
c000bda5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bda9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bdad:	52                   	push   edx
c000bdae:	50                   	push   eax
c000bdaf:	e8 eb f8 ff ff       	call   c000b69f <double_to_fp>
c000bdb4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bdb7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bdbb:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000bdbe:	8d 04 90             	lea    eax,[eax+edx*4]
c000bdc1:	50                   	push   eax
c000bdc2:	50                   	push   eax
c000bdc3:	50                   	push   eax
c000bdc4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bdc7:	e8 d7 8f 01 00       	call   c0024da3 <__floatsidf>
c000bdcc:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bdd0:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bdd4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdd8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bddc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bde0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bde4:	e8 3b 8c 01 00       	call   c0024a24 <__divdf3>
c000bde9:	83 c4 1c             	add    esp,0x1c
c000bdec:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bdf0:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bdf4:	52                   	push   edx
c000bdf5:	89 fa                	mov    edx,edi
c000bdf7:	50                   	push   eax
c000bdf8:	89 d8                	mov    eax,ebx
c000bdfa:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bdfd:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000be01:	e8 58 ed ff ff       	call   c000ab5e <calc_output_multi>
c000be06:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000be09:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000be0c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be10:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be14:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be18:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be1c:	e8 03 8c 01 00       	call   c0024a24 <__divdf3>
c000be21:	83 c4 10             	add    esp,0x10
c000be24:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000be28:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000be2c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000be30:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000be34:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000be38:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000be3c:	e8 82 82 01 00       	call   c00240c3 <__adddf3>
c000be41:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000be45:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000be49:	83 c4 28             	add    esp,0x28
c000be4c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000be50:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000be54:	e8 6d f8 ff ff       	call   c000b6c6 <fmod_one>
c000be59:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000be5c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be60:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be64:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000be67:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000be6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000be77:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000be7b:	e8 94 88 01 00       	call   c0024714 <__subdf3>
c000be80:	83 c4 18             	add    esp,0x18
c000be83:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000be87:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000be8b:	52                   	push   edx
c000be8c:	50                   	push   eax
c000be8d:	e8 2e 93 01 00       	call   c00251c0 <lrint>
c000be92:	0f af f8             	imul   edi,eax
c000be95:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000be99:	83 c4 10             	add    esp,0x10
c000be9c:	01 f8                	add    eax,edi
c000be9e:	99                   	cdq    
c000be9f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bea2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bea5:	e9 61 fc ff ff       	jmp    c000bb0b <sinc_multichan_vari_process+0x235>
c000beaa:	83 c4 4c             	add    esp,0x4c
c000bead:	5b                   	pop    ebx
c000beae:	5e                   	pop    esi
c000beaf:	5f                   	pop    edi
c000beb0:	5d                   	pop    ebp
c000beb1:	c3                   	ret    

c000beb2 <sinc_hex_vari_process>:
c000beb2:	55                   	push   ebp
c000beb3:	b8 05 00 00 00       	mov    eax,0x5
c000beb8:	57                   	push   edi
c000beb9:	56                   	push   esi
c000beba:	53                   	push   ebx
c000bebb:	83 ec 4c             	sub    esp,0x4c
c000bebe:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000bec2:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000bec6:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000bec9:	85 db                	test   ebx,ebx
c000becb:	0f 84 b7 05 00 00    	je     c000c488 <sinc_hex_vari_process+0x5d6>
c000bed1:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000bed4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000bed7:	0f af d0             	imul   edx,eax
c000beda:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000bedd:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000bee1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000bee8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000beeb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000bef2:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000bef5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000bef8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000befc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bf00:	57                   	push   edi
c000bf01:	57                   	push   edi
c000bf02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf0a:	e8 38 d7 ff ff       	call   c0009647 <is_bad_src_ratio>
c000bf0f:	83 c4 10             	add    esp,0x10
c000bf12:	89 c2                	mov    edx,eax
c000bf14:	b8 16 00 00 00       	mov    eax,0x16
c000bf19:	85 d2                	test   edx,edx
c000bf1b:	0f 85 67 05 00 00    	jne    c000c488 <sinc_hex_vari_process+0x5d6>
c000bf21:	83 ec 0c             	sub    esp,0xc
c000bf24:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bf27:	e8 77 8e 01 00       	call   c0024da3 <__floatsidf>
c000bf2c:	83 c4 10             	add    esp,0x10
c000bf2f:	89 04 24             	mov    DWORD PTR [esp],eax
c000bf32:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000bf36:	68 00 00 00 40       	push   0x40000000
c000bf3b:	6a 00                	push   0x0
c000bf3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bf41:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bf45:	e8 79 81 01 00       	call   c00240c3 <__adddf3>
c000bf4a:	59                   	pop    ecx
c000bf4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bf4f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000bf53:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf56:	e8 48 8e 01 00       	call   c0024da3 <__floatsidf>
c000bf5b:	83 c4 10             	add    esp,0x10
c000bf5e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf62:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf66:	52                   	push   edx
c000bf67:	50                   	push   eax
c000bf68:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bf6c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bf70:	e8 af 8a 01 00       	call   c0024a24 <__divdf3>
c000bf75:	83 c4 10             	add    esp,0x10
c000bf78:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bf7c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bf80:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000bf83:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000bf86:	89 04 24             	mov    DWORD PTR [esp],eax
c000bf89:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000bf8d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000bf90:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000bf93:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf97:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf9b:	52                   	push   edx
c000bf9c:	50                   	push   eax
c000bf9d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfa1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfa5:	e8 65 90 01 00       	call   c002500f <__ltdf2>
c000bfaa:	83 c4 10             	add    esp,0x10
c000bfad:	85 c0                	test   eax,eax
c000bfaf:	79 1d                	jns    c000bfce <sinc_hex_vari_process+0x11c>
c000bfb1:	68 00 00 f0 3f       	push   0x3ff00000
c000bfb6:	6a 00                	push   0x0
c000bfb8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfbc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfc0:	e8 4a 90 01 00       	call   c002500f <__ltdf2>
c000bfc5:	83 c4 10             	add    esp,0x10
c000bfc8:	85 c0                	test   eax,eax
c000bfca:	78 2c                	js     c000bff8 <sinc_hex_vari_process+0x146>
c000bfcc:	eb 4a                	jmp    c000c018 <sinc_hex_vari_process+0x166>
c000bfce:	68 00 00 f0 3f       	push   0x3ff00000
c000bfd3:	6a 00                	push   0x0
c000bfd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfdd:	e8 2d 90 01 00       	call   c002500f <__ltdf2>
c000bfe2:	83 c4 10             	add    esp,0x10
c000bfe5:	85 c0                	test   eax,eax
c000bfe7:	79 2f                	jns    c000c018 <sinc_hex_vari_process+0x166>
c000bfe9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bfed:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bff1:	89 04 24             	mov    DWORD PTR [esp],eax
c000bff4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000bff8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000bffc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c000:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c004:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c008:	e8 17 8a 01 00       	call   c0024a24 <__divdf3>
c000c00d:	83 c4 10             	add    esp,0x10
c000c010:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c014:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c018:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c01b:	50                   	push   eax
c000c01c:	50                   	push   eax
c000c01d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c021:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c025:	e8 96 91 01 00       	call   c00251c0 <lrint>
c000c02a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c02d:	40                   	inc    eax
c000c02e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c032:	0f af c7             	imul   eax,edi
c000c035:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c039:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c03c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c040:	58                   	pop    eax
c000c041:	5a                   	pop    edx
c000c042:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c046:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c04a:	e8 77 f6 ff ff       	call   c000b6c6 <fmod_one>
c000c04f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c052:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c056:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c05a:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c05d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c061:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c065:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c069:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c06d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c071:	e8 9e 86 01 00       	call   c0024714 <__subdf3>
c000c076:	83 c4 18             	add    esp,0x18
c000c079:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c07d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c081:	52                   	push   edx
c000c082:	50                   	push   eax
c000c083:	e8 38 91 01 00       	call   c00251c0 <lrint>
c000c088:	0f af f8             	imul   edi,eax
c000c08b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c08f:	01 f8                	add    eax,edi
c000c091:	99                   	cdq    
c000c092:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c095:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c09c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0a0:	68 00 00 f0 3f       	push   0x3ff00000
c000c0a5:	6a 00                	push   0x0
c000c0a7:	e8 78 89 01 00       	call   c0024a24 <__divdf3>
c000c0ac:	83 c4 10             	add    esp,0x10
c000c0af:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0b3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0b7:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c0bc:	68 23 42 92 0c       	push   0xc924223
c000c0c1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0c5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0c9:	e8 f5 7f 01 00       	call   c00240c3 <__adddf3>
c000c0ce:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c0d2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c0d6:	83 c4 20             	add    esp,0x20
c000c0d9:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c0e1:	c7 44 24 24 00 00 f0 3f 	mov    DWORD PTR [esp+0x24],0x3ff00000
c000c0e9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c0ec:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c0ef:	7d 4e                	jge    c000c13f <sinc_hex_vari_process+0x28d>
c000c0f1:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c0f4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c0f7:	01 c8                	add    eax,ecx
c000c0f9:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c0fc:	99                   	cdq    
c000c0fd:	f7 f9                	idiv   ecx
c000c0ff:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000c103:	7d 0c                	jge    c000c111 <sinc_hex_vari_process+0x25f>
c000c105:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c108:	85 ff                	test   edi,edi
c000c10a:	79 69                	jns    c000c175 <sinc_hex_vari_process+0x2c3>
c000c10c:	e9 e4 00 00 00       	jmp    c000c1f5 <sinc_hex_vari_process+0x343>
c000c111:	50                   	push   eax
c000c112:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c116:	56                   	push   esi
c000c117:	53                   	push   ebx
c000c118:	e8 3f f6 ff ff       	call   c000b75c <prepare_data>
c000c11d:	83 c4 10             	add    esp,0x10
c000c120:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c123:	85 c0                	test   eax,eax
c000c125:	0f 85 5d 03 00 00    	jne    c000c488 <sinc_hex_vari_process+0x5d6>
c000c12b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c12e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c131:	01 c8                	add    eax,ecx
c000c133:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c136:	99                   	cdq    
c000c137:	f7 f9                	idiv   ecx
c000c139:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000c13d:	7c c6                	jl     c000c105 <sinc_hex_vari_process+0x253>
c000c13f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000c142:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c146:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c149:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c14c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c150:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c154:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c157:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c15a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c15d:	99                   	cdq    
c000c15e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c161:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c164:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c167:	99                   	cdq    
c000c168:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c16b:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c16e:	31 c0                	xor    eax,eax
c000c170:	e9 13 03 00 00       	jmp    c000c488 <sinc_hex_vari_process+0x5d6>
c000c175:	83 ec 0c             	sub    esp,0xc
c000c178:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c17b:	e8 23 8c 01 00       	call   c0024da3 <__floatsidf>
c000c180:	83 c4 10             	add    esp,0x10
c000c183:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c187:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c18b:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c18f:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c193:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c197:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c19b:	e8 23 7f 01 00       	call   c00240c3 <__adddf3>
c000c1a0:	83 c4 10             	add    esp,0x10
c000c1a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1a7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1ab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c1af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c1b3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c1b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c1bb:	e8 03 7f 01 00       	call   c00240c3 <__adddf3>
c000c1c0:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c1c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c1c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c1cb:	e8 d3 8b 01 00       	call   c0024da3 <__floatsidf>
c000c1d0:	83 c4 10             	add    esp,0x10
c000c1d3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c1d7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c1db:	52                   	push   edx
c000c1dc:	50                   	push   eax
c000c1dd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c1e1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c1e5:	e8 23 8e 01 00       	call   c002500d <__gedf2>
c000c1ea:	83 c4 10             	add    esp,0x10
c000c1ed:	85 c0                	test   eax,eax
c000c1ef:	0f 89 4a ff ff ff    	jns    c000c13f <sinc_hex_vari_process+0x28d>
c000c1f5:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c1f9:	0f 8e ef 00 00 00    	jle    c000c2ee <sinc_hex_vari_process+0x43c>
c000c1ff:	83 ec 10             	sub    esp,0x10
c000c202:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c205:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c208:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c20b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c20e:	e8 01 85 01 00       	call   c0024714 <__subdf3>
c000c213:	83 c4 18             	add    esp,0x18
c000c216:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c21a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c21e:	52                   	push   edx
c000c21f:	50                   	push   eax
c000c220:	e8 7b 8f 01 00       	call   c00251a0 <fabs>
c000c225:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c229:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c22d:	83 c4 10             	add    esp,0x10
c000c230:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c235:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c23a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c23e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c242:	e8 aa 8d 01 00       	call   c0024ff1 <__gtdf2>
c000c247:	83 c4 10             	add    esp,0x10
c000c24a:	85 c0                	test   eax,eax
c000c24c:	0f 8e 9c 00 00 00    	jle    c000c2ee <sinc_hex_vari_process+0x43c>
c000c252:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c255:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c258:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c25c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c260:	52                   	push   edx
c000c261:	50                   	push   eax
c000c262:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c265:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c268:	e8 a7 84 01 00       	call   c0024714 <__subdf3>
c000c26d:	59                   	pop    ecx
c000c26e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c272:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c276:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c279:	e8 25 8b 01 00       	call   c0024da3 <__floatsidf>
c000c27e:	83 c4 10             	add    esp,0x10
c000c281:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c285:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c289:	52                   	push   edx
c000c28a:	50                   	push   eax
c000c28b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c293:	e8 a8 84 01 00       	call   c0024740 <__muldf3>
c000c298:	5f                   	pop    edi
c000c299:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c29d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c2a1:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c2a4:	e8 fa 8a 01 00       	call   c0024da3 <__floatsidf>
c000c2a9:	83 c4 10             	add    esp,0x10
c000c2ac:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2b0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2b4:	52                   	push   edx
c000c2b5:	50                   	push   eax
c000c2b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2be:	e8 61 87 01 00       	call   c0024a24 <__divdf3>
c000c2c3:	83 c4 10             	add    esp,0x10
c000c2c6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2ca:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2d6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2da:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2de:	e8 e0 7d 01 00       	call   c00240c3 <__adddf3>
c000c2e3:	83 c4 10             	add    esp,0x10
c000c2e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c2ea:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c2ee:	83 ec 0c             	sub    esp,0xc
c000c2f1:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c2f4:	e8 aa 8a 01 00       	call   c0024da3 <__floatsidf>
c000c2f9:	83 c4 10             	add    esp,0x10
c000c2fc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c300:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c304:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c308:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c30c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c310:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c314:	e8 f6 8c 01 00       	call   c002500f <__ltdf2>
c000c319:	83 c4 10             	add    esp,0x10
c000c31c:	85 c0                	test   eax,eax
c000c31e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c322:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c326:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c32a:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000c32e:	78 10                	js     c000c340 <sinc_hex_vari_process+0x48e>
c000c330:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c334:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c338:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c33c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c340:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c344:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c348:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c34c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c350:	e8 eb 83 01 00       	call   c0024740 <__muldf3>
c000c355:	59                   	pop    ecx
c000c356:	5f                   	pop    edi
c000c357:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c35b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c35f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c363:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c367:	e8 33 f3 ff ff       	call   c000b69f <double_to_fp>
c000c36c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c370:	89 c7                	mov    edi,eax
c000c372:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c376:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c37a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c37e:	e8 bd 83 01 00       	call   c0024740 <__muldf3>
c000c383:	83 c4 18             	add    esp,0x18
c000c386:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c38a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c38e:	52                   	push   edx
c000c38f:	50                   	push   eax
c000c390:	e8 0a f3 ff ff       	call   c000b69f <double_to_fp>
c000c395:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c398:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c39c:	83 c4 0c             	add    esp,0xc
c000c39f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c3a2:	8d 04 90             	lea    eax,[eax+edx*4]
c000c3a5:	50                   	push   eax
c000c3a6:	50                   	push   eax
c000c3a7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c3aa:	e8 f4 89 01 00       	call   c0024da3 <__floatsidf>
c000c3af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c3b3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c3b7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3bb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3bf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3c7:	e8 58 86 01 00       	call   c0024a24 <__divdf3>
c000c3cc:	83 c4 18             	add    esp,0x18
c000c3cf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c3d3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c3d7:	52                   	push   edx
c000c3d8:	89 fa                	mov    edx,edi
c000c3da:	50                   	push   eax
c000c3db:	89 d8                	mov    eax,ebx
c000c3dd:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c3e1:	e8 26 df ff ff       	call   c000a30c <calc_output_hex>
c000c3e6:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c3ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3f2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3f6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3fa:	e8 25 86 01 00       	call   c0024a24 <__divdf3>
c000c3ff:	83 c4 10             	add    esp,0x10
c000c402:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c406:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c40a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c40e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c412:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c416:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c41a:	e8 a4 7c 01 00       	call   c00240c3 <__adddf3>
c000c41f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c423:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c427:	83 c4 18             	add    esp,0x18
c000c42a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c42e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c432:	e8 8f f2 ff ff       	call   c000b6c6 <fmod_one>
c000c437:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c43a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c43e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c442:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c445:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c449:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c44d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c451:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c455:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c459:	e8 b6 82 01 00       	call   c0024714 <__subdf3>
c000c45e:	83 c4 18             	add    esp,0x18
c000c461:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c465:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c469:	52                   	push   edx
c000c46a:	50                   	push   eax
c000c46b:	e8 50 8d 01 00       	call   c00251c0 <lrint>
c000c470:	0f af f8             	imul   edi,eax
c000c473:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c477:	83 c4 10             	add    esp,0x10
c000c47a:	01 f8                	add    eax,edi
c000c47c:	99                   	cdq    
c000c47d:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c480:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c483:	e9 61 fc ff ff       	jmp    c000c0e9 <sinc_hex_vari_process+0x237>
c000c488:	83 c4 4c             	add    esp,0x4c
c000c48b:	5b                   	pop    ebx
c000c48c:	5e                   	pop    esi
c000c48d:	5f                   	pop    edi
c000c48e:	5d                   	pop    ebp
c000c48f:	c3                   	ret    

c000c490 <sinc_quad_vari_process>:
c000c490:	55                   	push   ebp
c000c491:	b8 05 00 00 00       	mov    eax,0x5
c000c496:	57                   	push   edi
c000c497:	56                   	push   esi
c000c498:	53                   	push   ebx
c000c499:	83 ec 4c             	sub    esp,0x4c
c000c49c:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c4a0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c4a4:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c4a7:	85 db                	test   ebx,ebx
c000c4a9:	0f 84 b7 05 00 00    	je     c000ca66 <sinc_quad_vari_process+0x5d6>
c000c4af:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000c4b2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c4b5:	0f af d0             	imul   edx,eax
c000c4b8:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000c4bb:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000c4bf:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c4c6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c4c9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c4d0:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c4d3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c4d6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c4da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c4de:	57                   	push   edi
c000c4df:	57                   	push   edi
c000c4e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c4e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c4e8:	e8 5a d1 ff ff       	call   c0009647 <is_bad_src_ratio>
c000c4ed:	83 c4 10             	add    esp,0x10
c000c4f0:	89 c2                	mov    edx,eax
c000c4f2:	b8 16 00 00 00       	mov    eax,0x16
c000c4f7:	85 d2                	test   edx,edx
c000c4f9:	0f 85 67 05 00 00    	jne    c000ca66 <sinc_quad_vari_process+0x5d6>
c000c4ff:	83 ec 0c             	sub    esp,0xc
c000c502:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c505:	e8 99 88 01 00       	call   c0024da3 <__floatsidf>
c000c50a:	83 c4 10             	add    esp,0x10
c000c50d:	89 04 24             	mov    DWORD PTR [esp],eax
c000c510:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c514:	68 00 00 00 40       	push   0x40000000
c000c519:	6a 00                	push   0x0
c000c51b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c51f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c523:	e8 9b 7b 01 00       	call   c00240c3 <__adddf3>
c000c528:	59                   	pop    ecx
c000c529:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c52d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000c531:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c534:	e8 6a 88 01 00       	call   c0024da3 <__floatsidf>
c000c539:	83 c4 10             	add    esp,0x10
c000c53c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c540:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c544:	52                   	push   edx
c000c545:	50                   	push   eax
c000c546:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c54a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c54e:	e8 d1 84 01 00       	call   c0024a24 <__divdf3>
c000c553:	83 c4 10             	add    esp,0x10
c000c556:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c55a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c55e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c561:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c564:	89 04 24             	mov    DWORD PTR [esp],eax
c000c567:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c56b:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c56e:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c571:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c575:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c579:	52                   	push   edx
c000c57a:	50                   	push   eax
c000c57b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c57f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c583:	e8 87 8a 01 00       	call   c002500f <__ltdf2>
c000c588:	83 c4 10             	add    esp,0x10
c000c58b:	85 c0                	test   eax,eax
c000c58d:	79 1d                	jns    c000c5ac <sinc_quad_vari_process+0x11c>
c000c58f:	68 00 00 f0 3f       	push   0x3ff00000
c000c594:	6a 00                	push   0x0
c000c596:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c59a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c59e:	e8 6c 8a 01 00       	call   c002500f <__ltdf2>
c000c5a3:	83 c4 10             	add    esp,0x10
c000c5a6:	85 c0                	test   eax,eax
c000c5a8:	78 2c                	js     c000c5d6 <sinc_quad_vari_process+0x146>
c000c5aa:	eb 4a                	jmp    c000c5f6 <sinc_quad_vari_process+0x166>
c000c5ac:	68 00 00 f0 3f       	push   0x3ff00000
c000c5b1:	6a 00                	push   0x0
c000c5b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5bb:	e8 4f 8a 01 00       	call   c002500f <__ltdf2>
c000c5c0:	83 c4 10             	add    esp,0x10
c000c5c3:	85 c0                	test   eax,eax
c000c5c5:	79 2f                	jns    c000c5f6 <sinc_quad_vari_process+0x166>
c000c5c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c5cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c5cf:	89 04 24             	mov    DWORD PTR [esp],eax
c000c5d2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c5d6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c5da:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c5de:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c5e2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c5e6:	e8 39 84 01 00       	call   c0024a24 <__divdf3>
c000c5eb:	83 c4 10             	add    esp,0x10
c000c5ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c5f2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c5f6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c5f9:	50                   	push   eax
c000c5fa:	50                   	push   eax
c000c5fb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c5ff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c603:	e8 b8 8b 01 00       	call   c00251c0 <lrint>
c000c608:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c60b:	40                   	inc    eax
c000c60c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c610:	0f af c7             	imul   eax,edi
c000c613:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c617:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c61a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c61e:	58                   	pop    eax
c000c61f:	5a                   	pop    edx
c000c620:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c624:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c628:	e8 99 f0 ff ff       	call   c000b6c6 <fmod_one>
c000c62d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c630:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c634:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c638:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c63b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c63f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c643:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c647:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c64b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c64f:	e8 c0 80 01 00       	call   c0024714 <__subdf3>
c000c654:	83 c4 18             	add    esp,0x18
c000c657:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c65b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c65f:	52                   	push   edx
c000c660:	50                   	push   eax
c000c661:	e8 5a 8b 01 00       	call   c00251c0 <lrint>
c000c666:	0f af f8             	imul   edi,eax
c000c669:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c66d:	01 f8                	add    eax,edi
c000c66f:	99                   	cdq    
c000c670:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c673:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c676:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c67a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c67e:	68 00 00 f0 3f       	push   0x3ff00000
c000c683:	6a 00                	push   0x0
c000c685:	e8 9a 83 01 00       	call   c0024a24 <__divdf3>
c000c68a:	83 c4 10             	add    esp,0x10
c000c68d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c691:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c695:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c69a:	68 23 42 92 0c       	push   0xc924223
c000c69f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6a3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6a7:	e8 17 7a 01 00       	call   c00240c3 <__adddf3>
c000c6ac:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c6b0:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c6b4:	83 c4 20             	add    esp,0x20
c000c6b7:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c6bf:	c7 44 24 24 00 00 f0 3f 	mov    DWORD PTR [esp+0x24],0x3ff00000
c000c6c7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c6ca:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c6cd:	7d 4e                	jge    c000c71d <sinc_quad_vari_process+0x28d>
c000c6cf:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c6d2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c6d5:	01 c8                	add    eax,ecx
c000c6d7:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c6da:	99                   	cdq    
c000c6db:	f7 f9                	idiv   ecx
c000c6dd:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000c6e1:	7d 0c                	jge    c000c6ef <sinc_quad_vari_process+0x25f>
c000c6e3:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c6e6:	85 ff                	test   edi,edi
c000c6e8:	79 69                	jns    c000c753 <sinc_quad_vari_process+0x2c3>
c000c6ea:	e9 e4 00 00 00       	jmp    c000c7d3 <sinc_quad_vari_process+0x343>
c000c6ef:	50                   	push   eax
c000c6f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6f4:	56                   	push   esi
c000c6f5:	53                   	push   ebx
c000c6f6:	e8 61 f0 ff ff       	call   c000b75c <prepare_data>
c000c6fb:	83 c4 10             	add    esp,0x10
c000c6fe:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c701:	85 c0                	test   eax,eax
c000c703:	0f 85 5d 03 00 00    	jne    c000ca66 <sinc_quad_vari_process+0x5d6>
c000c709:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c70c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c70f:	01 c8                	add    eax,ecx
c000c711:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c714:	99                   	cdq    
c000c715:	f7 f9                	idiv   ecx
c000c717:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000c71b:	7c c6                	jl     c000c6e3 <sinc_quad_vari_process+0x253>
c000c71d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000c720:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c724:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c727:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c72a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c72e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c732:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c735:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c738:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c73b:	99                   	cdq    
c000c73c:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c73f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c742:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c745:	99                   	cdq    
c000c746:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c749:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c74c:	31 c0                	xor    eax,eax
c000c74e:	e9 13 03 00 00       	jmp    c000ca66 <sinc_quad_vari_process+0x5d6>
c000c753:	83 ec 0c             	sub    esp,0xc
c000c756:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c759:	e8 45 86 01 00       	call   c0024da3 <__floatsidf>
c000c75e:	83 c4 10             	add    esp,0x10
c000c761:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c765:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c769:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c76d:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c771:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c775:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c779:	e8 45 79 01 00       	call   c00240c3 <__adddf3>
c000c77e:	83 c4 10             	add    esp,0x10
c000c781:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c785:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c789:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c78d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c791:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c795:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c799:	e8 25 79 01 00       	call   c00240c3 <__adddf3>
c000c79e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c7a1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7a5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7a9:	e8 f5 85 01 00       	call   c0024da3 <__floatsidf>
c000c7ae:	83 c4 10             	add    esp,0x10
c000c7b1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7b5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7b9:	52                   	push   edx
c000c7ba:	50                   	push   eax
c000c7bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c7bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c7c3:	e8 45 88 01 00       	call   c002500d <__gedf2>
c000c7c8:	83 c4 10             	add    esp,0x10
c000c7cb:	85 c0                	test   eax,eax
c000c7cd:	0f 89 4a ff ff ff    	jns    c000c71d <sinc_quad_vari_process+0x28d>
c000c7d3:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c7d7:	0f 8e ef 00 00 00    	jle    c000c8cc <sinc_quad_vari_process+0x43c>
c000c7dd:	83 ec 10             	sub    esp,0x10
c000c7e0:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c7e3:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c7e6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c7e9:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c7ec:	e8 23 7f 01 00       	call   c0024714 <__subdf3>
c000c7f1:	83 c4 18             	add    esp,0x18
c000c7f4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c7f8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c7fc:	52                   	push   edx
c000c7fd:	50                   	push   eax
c000c7fe:	e8 9d 89 01 00       	call   c00251a0 <fabs>
c000c803:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c807:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c80b:	83 c4 10             	add    esp,0x10
c000c80e:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c813:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c818:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c81c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c820:	e8 cc 87 01 00       	call   c0024ff1 <__gtdf2>
c000c825:	83 c4 10             	add    esp,0x10
c000c828:	85 c0                	test   eax,eax
c000c82a:	0f 8e 9c 00 00 00    	jle    c000c8cc <sinc_quad_vari_process+0x43c>
c000c830:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c833:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c836:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c83a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c83e:	52                   	push   edx
c000c83f:	50                   	push   eax
c000c840:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c843:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c846:	e8 c9 7e 01 00       	call   c0024714 <__subdf3>
c000c84b:	59                   	pop    ecx
c000c84c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c850:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c854:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c857:	e8 47 85 01 00       	call   c0024da3 <__floatsidf>
c000c85c:	83 c4 10             	add    esp,0x10
c000c85f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c863:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c867:	52                   	push   edx
c000c868:	50                   	push   eax
c000c869:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c86d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c871:	e8 ca 7e 01 00       	call   c0024740 <__muldf3>
c000c876:	5f                   	pop    edi
c000c877:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c87b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c87f:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c882:	e8 1c 85 01 00       	call   c0024da3 <__floatsidf>
c000c887:	83 c4 10             	add    esp,0x10
c000c88a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c88e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c892:	52                   	push   edx
c000c893:	50                   	push   eax
c000c894:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c898:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c89c:	e8 83 81 01 00       	call   c0024a24 <__divdf3>
c000c8a1:	83 c4 10             	add    esp,0x10
c000c8a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8ac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c8b0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c8b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c8b8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c8bc:	e8 02 78 01 00       	call   c00240c3 <__adddf3>
c000c8c1:	83 c4 10             	add    esp,0x10
c000c8c4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8cc:	83 ec 0c             	sub    esp,0xc
c000c8cf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8d2:	e8 cc 84 01 00       	call   c0024da3 <__floatsidf>
c000c8d7:	83 c4 10             	add    esp,0x10
c000c8da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c8de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c8e2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c8e6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c8ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8f2:	e8 18 87 01 00       	call   c002500f <__ltdf2>
c000c8f7:	83 c4 10             	add    esp,0x10
c000c8fa:	85 c0                	test   eax,eax
c000c8fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c900:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c904:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c908:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000c90c:	78 10                	js     c000c91e <sinc_quad_vari_process+0x48e>
c000c90e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c912:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c916:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c91a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c91e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c926:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c92a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c92e:	e8 0d 7e 01 00       	call   c0024740 <__muldf3>
c000c933:	59                   	pop    ecx
c000c934:	5f                   	pop    edi
c000c935:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c939:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c93d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c941:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c945:	e8 55 ed ff ff       	call   c000b69f <double_to_fp>
c000c94a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c94e:	89 c7                	mov    edi,eax
c000c950:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c954:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c958:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c95c:	e8 df 7d 01 00       	call   c0024740 <__muldf3>
c000c961:	83 c4 18             	add    esp,0x18
c000c964:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c968:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c96c:	52                   	push   edx
c000c96d:	50                   	push   eax
c000c96e:	e8 2c ed ff ff       	call   c000b69f <double_to_fp>
c000c973:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c976:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c97a:	83 c4 0c             	add    esp,0xc
c000c97d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c980:	8d 04 90             	lea    eax,[eax+edx*4]
c000c983:	50                   	push   eax
c000c984:	50                   	push   eax
c000c985:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c988:	e8 16 84 01 00       	call   c0024da3 <__floatsidf>
c000c98d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c991:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c995:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c999:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c99d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9a1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9a5:	e8 7a 80 01 00       	call   c0024a24 <__divdf3>
c000c9aa:	83 c4 18             	add    esp,0x18
c000c9ad:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c9b1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c9b5:	52                   	push   edx
c000c9b6:	89 fa                	mov    edx,edi
c000c9b8:	50                   	push   eax
c000c9b9:	89 d8                	mov    eax,ebx
c000c9bb:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c9bf:	e8 62 d3 ff ff       	call   c0009d26 <calc_output_quad>
c000c9c4:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000c9c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9d0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c9d4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c9d8:	e8 47 80 01 00       	call   c0024a24 <__divdf3>
c000c9dd:	83 c4 10             	add    esp,0x10
c000c9e0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9e4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9f4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9f8:	e8 c6 76 01 00       	call   c00240c3 <__adddf3>
c000c9fd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ca01:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ca05:	83 c4 18             	add    esp,0x18
c000ca08:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca0c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca10:	e8 b1 ec ff ff       	call   c000b6c6 <fmod_one>
c000ca15:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca18:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca1c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ca20:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca23:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ca27:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca2b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca2f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca33:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca37:	e8 d8 7c 01 00       	call   c0024714 <__subdf3>
c000ca3c:	83 c4 18             	add    esp,0x18
c000ca3f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca43:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca47:	52                   	push   edx
c000ca48:	50                   	push   eax
c000ca49:	e8 72 87 01 00       	call   c00251c0 <lrint>
c000ca4e:	0f af f8             	imul   edi,eax
c000ca51:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ca55:	83 c4 10             	add    esp,0x10
c000ca58:	01 f8                	add    eax,edi
c000ca5a:	99                   	cdq    
c000ca5b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca5e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca61:	e9 61 fc ff ff       	jmp    c000c6c7 <sinc_quad_vari_process+0x237>
c000ca66:	83 c4 4c             	add    esp,0x4c
c000ca69:	5b                   	pop    ebx
c000ca6a:	5e                   	pop    esi
c000ca6b:	5f                   	pop    edi
c000ca6c:	5d                   	pop    ebp
c000ca6d:	c3                   	ret    

c000ca6e <sinc_stereo_vari_process>:
c000ca6e:	55                   	push   ebp
c000ca6f:	b8 05 00 00 00       	mov    eax,0x5
c000ca74:	57                   	push   edi
c000ca75:	56                   	push   esi
c000ca76:	53                   	push   ebx
c000ca77:	83 ec 4c             	sub    esp,0x4c
c000ca7a:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ca7e:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ca82:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ca85:	85 db                	test   ebx,ebx
c000ca87:	0f 84 b7 05 00 00    	je     c000d044 <sinc_stereo_vari_process+0x5d6>
c000ca8d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000ca90:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ca93:	0f af d0             	imul   edx,eax
c000ca96:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000ca99:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ca9d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000caa4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000caa7:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000caae:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cab1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cab4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cab8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cabc:	57                   	push   edi
c000cabd:	57                   	push   edi
c000cabe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cac2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cac6:	e8 7c cb ff ff       	call   c0009647 <is_bad_src_ratio>
c000cacb:	83 c4 10             	add    esp,0x10
c000cace:	89 c2                	mov    edx,eax
c000cad0:	b8 16 00 00 00       	mov    eax,0x16
c000cad5:	85 d2                	test   edx,edx
c000cad7:	0f 85 67 05 00 00    	jne    c000d044 <sinc_stereo_vari_process+0x5d6>
c000cadd:	83 ec 0c             	sub    esp,0xc
c000cae0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cae3:	e8 bb 82 01 00       	call   c0024da3 <__floatsidf>
c000cae8:	83 c4 10             	add    esp,0x10
c000caeb:	89 04 24             	mov    DWORD PTR [esp],eax
c000caee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000caf2:	68 00 00 00 40       	push   0x40000000
c000caf7:	6a 00                	push   0x0
c000caf9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cafd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb01:	e8 bd 75 01 00       	call   c00240c3 <__adddf3>
c000cb06:	59                   	pop    ecx
c000cb07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cb0b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000cb0f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cb12:	e8 8c 82 01 00       	call   c0024da3 <__floatsidf>
c000cb17:	83 c4 10             	add    esp,0x10
c000cb1a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cb1e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cb22:	52                   	push   edx
c000cb23:	50                   	push   eax
c000cb24:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb28:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb2c:	e8 f3 7e 01 00       	call   c0024a24 <__divdf3>
c000cb31:	83 c4 10             	add    esp,0x10
c000cb34:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cb38:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cb3c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cb3f:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cb42:	89 04 24             	mov    DWORD PTR [esp],eax
c000cb45:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cb49:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cb4c:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cb4f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cb53:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cb57:	52                   	push   edx
c000cb58:	50                   	push   eax
c000cb59:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb61:	e8 a9 84 01 00       	call   c002500f <__ltdf2>
c000cb66:	83 c4 10             	add    esp,0x10
c000cb69:	85 c0                	test   eax,eax
c000cb6b:	79 1d                	jns    c000cb8a <sinc_stereo_vari_process+0x11c>
c000cb6d:	68 00 00 f0 3f       	push   0x3ff00000
c000cb72:	6a 00                	push   0x0
c000cb74:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb78:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb7c:	e8 8e 84 01 00       	call   c002500f <__ltdf2>
c000cb81:	83 c4 10             	add    esp,0x10
c000cb84:	85 c0                	test   eax,eax
c000cb86:	78 2c                	js     c000cbb4 <sinc_stereo_vari_process+0x146>
c000cb88:	eb 4a                	jmp    c000cbd4 <sinc_stereo_vari_process+0x166>
c000cb8a:	68 00 00 f0 3f       	push   0x3ff00000
c000cb8f:	6a 00                	push   0x0
c000cb91:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb99:	e8 71 84 01 00       	call   c002500f <__ltdf2>
c000cb9e:	83 c4 10             	add    esp,0x10
c000cba1:	85 c0                	test   eax,eax
c000cba3:	79 2f                	jns    c000cbd4 <sinc_stereo_vari_process+0x166>
c000cba5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cba9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cbad:	89 04 24             	mov    DWORD PTR [esp],eax
c000cbb0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cbb4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000cbb8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000cbbc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cbc0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cbc4:	e8 5b 7e 01 00       	call   c0024a24 <__divdf3>
c000cbc9:	83 c4 10             	add    esp,0x10
c000cbcc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cbd0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cbd4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cbd7:	50                   	push   eax
c000cbd8:	50                   	push   eax
c000cbd9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cbdd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cbe1:	e8 da 85 01 00       	call   c00251c0 <lrint>
c000cbe6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000cbe9:	40                   	inc    eax
c000cbea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbee:	0f af c7             	imul   eax,edi
c000cbf1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cbf5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbf8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbfc:	58                   	pop    eax
c000cbfd:	5a                   	pop    edx
c000cbfe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc02:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc06:	e8 bb ea ff ff       	call   c000b6c6 <fmod_one>
c000cc0b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc0e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc12:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc16:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000cc19:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cc1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc25:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc29:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc2d:	e8 e2 7a 01 00       	call   c0024714 <__subdf3>
c000cc32:	83 c4 18             	add    esp,0x18
c000cc35:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc39:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc3d:	52                   	push   edx
c000cc3e:	50                   	push   eax
c000cc3f:	e8 7c 85 01 00       	call   c00251c0 <lrint>
c000cc44:	0f af f8             	imul   edi,eax
c000cc47:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cc4b:	01 f8                	add    eax,edi
c000cc4d:	99                   	cdq    
c000cc4e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000cc51:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cc54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc5c:	68 00 00 f0 3f       	push   0x3ff00000
c000cc61:	6a 00                	push   0x0
c000cc63:	e8 bc 7d 01 00       	call   c0024a24 <__divdf3>
c000cc68:	83 c4 10             	add    esp,0x10
c000cc6b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc6f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc73:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000cc78:	68 23 42 92 0c       	push   0xc924223
c000cc7d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc81:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc85:	e8 39 74 01 00       	call   c00240c3 <__adddf3>
c000cc8a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000cc8e:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000cc92:	83 c4 20             	add    esp,0x20
c000cc95:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000cc9d:	c7 44 24 24 00 00 f0 3f 	mov    DWORD PTR [esp+0x24],0x3ff00000
c000cca5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cca8:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000ccab:	7d 4e                	jge    c000ccfb <sinc_stereo_vari_process+0x28d>
c000ccad:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ccb0:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ccb3:	01 c8                	add    eax,ecx
c000ccb5:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ccb8:	99                   	cdq    
c000ccb9:	f7 f9                	idiv   ecx
c000ccbb:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000ccbf:	7d 0c                	jge    c000cccd <sinc_stereo_vari_process+0x25f>
c000ccc1:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000ccc4:	85 ff                	test   edi,edi
c000ccc6:	79 69                	jns    c000cd31 <sinc_stereo_vari_process+0x2c3>
c000ccc8:	e9 e4 00 00 00       	jmp    c000cdb1 <sinc_stereo_vari_process+0x343>
c000cccd:	50                   	push   eax
c000ccce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ccd2:	56                   	push   esi
c000ccd3:	53                   	push   ebx
c000ccd4:	e8 83 ea ff ff       	call   c000b75c <prepare_data>
c000ccd9:	83 c4 10             	add    esp,0x10
c000ccdc:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000ccdf:	85 c0                	test   eax,eax
c000cce1:	0f 85 5d 03 00 00    	jne    c000d044 <sinc_stereo_vari_process+0x5d6>
c000cce7:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ccea:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cced:	01 c8                	add    eax,ecx
c000ccef:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ccf2:	99                   	cdq    
c000ccf3:	f7 f9                	idiv   ecx
c000ccf5:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000ccf9:	7c c6                	jl     c000ccc1 <sinc_stereo_vari_process+0x253>
c000ccfb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ccfe:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cd02:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cd05:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cd08:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cd0c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cd10:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cd13:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cd16:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cd19:	99                   	cdq    
c000cd1a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cd1d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cd20:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cd23:	99                   	cdq    
c000cd24:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cd27:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cd2a:	31 c0                	xor    eax,eax
c000cd2c:	e9 13 03 00 00       	jmp    c000d044 <sinc_stereo_vari_process+0x5d6>
c000cd31:	83 ec 0c             	sub    esp,0xc
c000cd34:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cd37:	e8 67 80 01 00       	call   c0024da3 <__floatsidf>
c000cd3c:	83 c4 10             	add    esp,0x10
c000cd3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd43:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd47:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000cd4b:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000cd4f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd53:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd57:	e8 67 73 01 00       	call   c00240c3 <__adddf3>
c000cd5c:	83 c4 10             	add    esp,0x10
c000cd5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd63:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd6b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd6f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd73:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd77:	e8 47 73 01 00       	call   c00240c3 <__adddf3>
c000cd7c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cd7f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd83:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd87:	e8 17 80 01 00       	call   c0024da3 <__floatsidf>
c000cd8c:	83 c4 10             	add    esp,0x10
c000cd8f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd93:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd97:	52                   	push   edx
c000cd98:	50                   	push   eax
c000cd99:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd9d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cda1:	e8 67 82 01 00       	call   c002500d <__gedf2>
c000cda6:	83 c4 10             	add    esp,0x10
c000cda9:	85 c0                	test   eax,eax
c000cdab:	0f 89 4a ff ff ff    	jns    c000ccfb <sinc_stereo_vari_process+0x28d>
c000cdb1:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cdb5:	0f 8e ef 00 00 00    	jle    c000ceaa <sinc_stereo_vari_process+0x43c>
c000cdbb:	83 ec 10             	sub    esp,0x10
c000cdbe:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cdc1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cdc4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cdc7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cdca:	e8 45 79 01 00       	call   c0024714 <__subdf3>
c000cdcf:	83 c4 18             	add    esp,0x18
c000cdd2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cdd6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cdda:	52                   	push   edx
c000cddb:	50                   	push   eax
c000cddc:	e8 bf 83 01 00       	call   c00251a0 <fabs>
c000cde1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cde5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cde9:	83 c4 10             	add    esp,0x10
c000cdec:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cdf1:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cdf6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdfa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdfe:	e8 ee 81 01 00       	call   c0024ff1 <__gtdf2>
c000ce03:	83 c4 10             	add    esp,0x10
c000ce06:	85 c0                	test   eax,eax
c000ce08:	0f 8e 9c 00 00 00    	jle    c000ceaa <sinc_stereo_vari_process+0x43c>
c000ce0e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ce11:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ce14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce1c:	52                   	push   edx
c000ce1d:	50                   	push   eax
c000ce1e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000ce21:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000ce24:	e8 eb 78 01 00       	call   c0024714 <__subdf3>
c000ce29:	59                   	pop    ecx
c000ce2a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ce2e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000ce32:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ce35:	e8 69 7f 01 00       	call   c0024da3 <__floatsidf>
c000ce3a:	83 c4 10             	add    esp,0x10
c000ce3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce45:	52                   	push   edx
c000ce46:	50                   	push   eax
c000ce47:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce4b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce4f:	e8 ec 78 01 00       	call   c0024740 <__muldf3>
c000ce54:	5f                   	pop    edi
c000ce55:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ce59:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000ce5d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000ce60:	e8 3e 7f 01 00       	call   c0024da3 <__floatsidf>
c000ce65:	83 c4 10             	add    esp,0x10
c000ce68:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce6c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce70:	52                   	push   edx
c000ce71:	50                   	push   eax
c000ce72:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce76:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce7a:	e8 a5 7b 01 00       	call   c0024a24 <__divdf3>
c000ce7f:	83 c4 10             	add    esp,0x10
c000ce82:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce86:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce8a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ce8e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ce92:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce96:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce9a:	e8 24 72 01 00       	call   c00240c3 <__adddf3>
c000ce9f:	83 c4 10             	add    esp,0x10
c000cea2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cea6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ceaa:	83 ec 0c             	sub    esp,0xc
c000cead:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ceb0:	e8 ee 7e 01 00       	call   c0024da3 <__floatsidf>
c000ceb5:	83 c4 10             	add    esp,0x10
c000ceb8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cebc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cec0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cec4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cec8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cecc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ced0:	e8 3a 81 01 00       	call   c002500f <__ltdf2>
c000ced5:	83 c4 10             	add    esp,0x10
c000ced8:	85 c0                	test   eax,eax
c000ceda:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cede:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cee2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cee6:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000ceea:	78 10                	js     c000cefc <sinc_stereo_vari_process+0x48e>
c000ceec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cef0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000cef4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cef8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cefc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf04:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf08:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf0c:	e8 2f 78 01 00       	call   c0024740 <__muldf3>
c000cf11:	59                   	pop    ecx
c000cf12:	5f                   	pop    edi
c000cf13:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cf17:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cf1b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf1f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf23:	e8 77 e7 ff ff       	call   c000b69f <double_to_fp>
c000cf28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cf2c:	89 c7                	mov    edi,eax
c000cf2e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cf32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf3a:	e8 01 78 01 00       	call   c0024740 <__muldf3>
c000cf3f:	83 c4 18             	add    esp,0x18
c000cf42:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cf46:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cf4a:	52                   	push   edx
c000cf4b:	50                   	push   eax
c000cf4c:	e8 4e e7 ff ff       	call   c000b69f <double_to_fp>
c000cf51:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cf54:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cf58:	83 c4 0c             	add    esp,0xc
c000cf5b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cf5e:	8d 04 90             	lea    eax,[eax+edx*4]
c000cf61:	50                   	push   eax
c000cf62:	50                   	push   eax
c000cf63:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf66:	e8 38 7e 01 00       	call   c0024da3 <__floatsidf>
c000cf6b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cf6f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cf73:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf77:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf7b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf7f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf83:	e8 9c 7a 01 00       	call   c0024a24 <__divdf3>
c000cf88:	83 c4 18             	add    esp,0x18
c000cf8b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cf8f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cf93:	52                   	push   edx
c000cf94:	89 fa                	mov    edx,edi
c000cf96:	50                   	push   eax
c000cf97:	89 d8                	mov    eax,ebx
c000cf99:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cf9d:	e8 a6 c9 ff ff       	call   c0009948 <calc_output_stereo>
c000cfa2:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000cfa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfae:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cfb2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cfb6:	e8 69 7a 01 00       	call   c0024a24 <__divdf3>
c000cfbb:	83 c4 10             	add    esp,0x10
c000cfbe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cfc2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cfc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfd2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfd6:	e8 e8 70 01 00       	call   c00240c3 <__adddf3>
c000cfdb:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cfdf:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cfe3:	83 c4 18             	add    esp,0x18
c000cfe6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cfea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cfee:	e8 d3 e6 ff ff       	call   c000b6c6 <fmod_one>
c000cff3:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cff6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cffa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cffe:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d001:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d005:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d009:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d00d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d011:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d015:	e8 fa 76 01 00       	call   c0024714 <__subdf3>
c000d01a:	83 c4 18             	add    esp,0x18
c000d01d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d021:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d025:	52                   	push   edx
c000d026:	50                   	push   eax
c000d027:	e8 94 81 01 00       	call   c00251c0 <lrint>
c000d02c:	0f af f8             	imul   edi,eax
c000d02f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d033:	83 c4 10             	add    esp,0x10
c000d036:	01 f8                	add    eax,edi
c000d038:	99                   	cdq    
c000d039:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d03c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d03f:	e9 61 fc ff ff       	jmp    c000cca5 <sinc_stereo_vari_process+0x237>
c000d044:	83 c4 4c             	add    esp,0x4c
c000d047:	5b                   	pop    ebx
c000d048:	5e                   	pop    esi
c000d049:	5f                   	pop    edi
c000d04a:	5d                   	pop    ebp
c000d04b:	c3                   	ret    

c000d04c <sinc_mono_vari_process>:
c000d04c:	55                   	push   ebp
c000d04d:	b8 05 00 00 00       	mov    eax,0x5
c000d052:	57                   	push   edi
c000d053:	56                   	push   esi
c000d054:	53                   	push   ebx
c000d055:	83 ec 4c             	sub    esp,0x4c
c000d058:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000d05c:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d060:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000d063:	85 db                	test   ebx,ebx
c000d065:	0f 84 e8 05 00 00    	je     c000d653 <sinc_mono_vari_process+0x607>
c000d06b:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000d06e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000d071:	0f af d0             	imul   edx,eax
c000d074:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000d077:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000d07b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d082:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d085:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d08c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d08f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d092:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d096:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d09a:	57                   	push   edi
c000d09b:	57                   	push   edi
c000d09c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0a4:	e8 9e c5 ff ff       	call   c0009647 <is_bad_src_ratio>
c000d0a9:	83 c4 10             	add    esp,0x10
c000d0ac:	89 c2                	mov    edx,eax
c000d0ae:	b8 16 00 00 00       	mov    eax,0x16
c000d0b3:	85 d2                	test   edx,edx
c000d0b5:	0f 85 98 05 00 00    	jne    c000d653 <sinc_mono_vari_process+0x607>
c000d0bb:	83 ec 0c             	sub    esp,0xc
c000d0be:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d0c1:	e8 dd 7c 01 00       	call   c0024da3 <__floatsidf>
c000d0c6:	83 c4 10             	add    esp,0x10
c000d0c9:	89 04 24             	mov    DWORD PTR [esp],eax
c000d0cc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d0d0:	68 00 00 00 40       	push   0x40000000
c000d0d5:	6a 00                	push   0x0
c000d0d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d0db:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d0df:	e8 df 6f 01 00       	call   c00240c3 <__adddf3>
c000d0e4:	59                   	pop    ecx
c000d0e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d0e9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000d0ed:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d0f0:	e8 ae 7c 01 00       	call   c0024da3 <__floatsidf>
c000d0f5:	83 c4 10             	add    esp,0x10
c000d0f8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d0fc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d100:	52                   	push   edx
c000d101:	50                   	push   eax
c000d102:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d106:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d10a:	e8 15 79 01 00       	call   c0024a24 <__divdf3>
c000d10f:	83 c4 10             	add    esp,0x10
c000d112:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d116:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d11a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d11d:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d120:	89 04 24             	mov    DWORD PTR [esp],eax
c000d123:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d127:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d12a:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d12d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d131:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d135:	52                   	push   edx
c000d136:	50                   	push   eax
c000d137:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d13b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d13f:	e8 cb 7e 01 00       	call   c002500f <__ltdf2>
c000d144:	83 c4 10             	add    esp,0x10
c000d147:	85 c0                	test   eax,eax
c000d149:	79 1d                	jns    c000d168 <sinc_mono_vari_process+0x11c>
c000d14b:	68 00 00 f0 3f       	push   0x3ff00000
c000d150:	6a 00                	push   0x0
c000d152:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d156:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d15a:	e8 b0 7e 01 00       	call   c002500f <__ltdf2>
c000d15f:	83 c4 10             	add    esp,0x10
c000d162:	85 c0                	test   eax,eax
c000d164:	78 2c                	js     c000d192 <sinc_mono_vari_process+0x146>
c000d166:	eb 4a                	jmp    c000d1b2 <sinc_mono_vari_process+0x166>
c000d168:	68 00 00 f0 3f       	push   0x3ff00000
c000d16d:	6a 00                	push   0x0
c000d16f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d173:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d177:	e8 93 7e 01 00       	call   c002500f <__ltdf2>
c000d17c:	83 c4 10             	add    esp,0x10
c000d17f:	85 c0                	test   eax,eax
c000d181:	79 2f                	jns    c000d1b2 <sinc_mono_vari_process+0x166>
c000d183:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d187:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d18b:	89 04 24             	mov    DWORD PTR [esp],eax
c000d18e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d192:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000d196:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000d19a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d19e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1a2:	e8 7d 78 01 00       	call   c0024a24 <__divdf3>
c000d1a7:	83 c4 10             	add    esp,0x10
c000d1aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d1ae:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d1b2:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d1b5:	50                   	push   eax
c000d1b6:	50                   	push   eax
c000d1b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1bf:	e8 fc 7f 01 00       	call   c00251c0 <lrint>
c000d1c4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d1c7:	40                   	inc    eax
c000d1c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d1cc:	0f af c7             	imul   eax,edi
c000d1cf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1d6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d1da:	58                   	pop    eax
c000d1db:	5a                   	pop    edx
c000d1dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1e0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1e4:	e8 dd e4 ff ff       	call   c000b6c6 <fmod_one>
c000d1e9:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d1ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d1f0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d1f4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d1f7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d1fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d1ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d203:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d207:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d20b:	e8 04 75 01 00       	call   c0024714 <__subdf3>
c000d210:	83 c4 18             	add    esp,0x18
c000d213:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d217:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d21b:	52                   	push   edx
c000d21c:	50                   	push   eax
c000d21d:	e8 9e 7f 01 00       	call   c00251c0 <lrint>
c000d222:	0f af f8             	imul   edi,eax
c000d225:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d229:	01 f8                	add    eax,edi
c000d22b:	99                   	cdq    
c000d22c:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d22f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d232:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d236:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d23a:	68 00 00 f0 3f       	push   0x3ff00000
c000d23f:	6a 00                	push   0x0
c000d241:	e8 de 77 01 00       	call   c0024a24 <__divdf3>
c000d246:	83 c4 10             	add    esp,0x10
c000d249:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d24d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d251:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d256:	68 23 42 92 0c       	push   0xc924223
c000d25b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d25f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d263:	e8 5b 6e 01 00       	call   c00240c3 <__adddf3>
c000d268:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d26c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d270:	83 c4 20             	add    esp,0x20
c000d273:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000d27b:	c7 44 24 24 00 00 f0 3f 	mov    DWORD PTR [esp+0x24],0x3ff00000
c000d283:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d286:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d289:	7d 4e                	jge    c000d2d9 <sinc_mono_vari_process+0x28d>
c000d28b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d28e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d291:	01 c8                	add    eax,ecx
c000d293:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d296:	99                   	cdq    
c000d297:	f7 f9                	idiv   ecx
c000d299:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000d29d:	7d 0c                	jge    c000d2ab <sinc_mono_vari_process+0x25f>
c000d29f:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d2a2:	85 ff                	test   edi,edi
c000d2a4:	79 69                	jns    c000d30f <sinc_mono_vari_process+0x2c3>
c000d2a6:	e9 e4 00 00 00       	jmp    c000d38f <sinc_mono_vari_process+0x343>
c000d2ab:	57                   	push   edi
c000d2ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2b0:	56                   	push   esi
c000d2b1:	53                   	push   ebx
c000d2b2:	e8 a5 e4 ff ff       	call   c000b75c <prepare_data>
c000d2b7:	83 c4 10             	add    esp,0x10
c000d2ba:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d2bd:	85 c0                	test   eax,eax
c000d2bf:	0f 85 8e 03 00 00    	jne    c000d653 <sinc_mono_vari_process+0x607>
c000d2c5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d2c8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d2cb:	01 c8                	add    eax,ecx
c000d2cd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d2d0:	99                   	cdq    
c000d2d1:	f7 f9                	idiv   ecx
c000d2d3:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000d2d7:	7c c6                	jl     c000d29f <sinc_mono_vari_process+0x253>
c000d2d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d2dc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d2e0:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d2e3:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d2e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d2ea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d2ee:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d2f1:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d2f4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d2f7:	99                   	cdq    
c000d2f8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d2fb:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d2fe:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d301:	99                   	cdq    
c000d302:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d305:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d308:	31 c0                	xor    eax,eax
c000d30a:	e9 44 03 00 00       	jmp    c000d653 <sinc_mono_vari_process+0x607>
c000d30f:	83 ec 0c             	sub    esp,0xc
c000d312:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d315:	e8 89 7a 01 00       	call   c0024da3 <__floatsidf>
c000d31a:	83 c4 10             	add    esp,0x10
c000d31d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d321:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d325:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000d329:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000d32d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d331:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d335:	e8 89 6d 01 00       	call   c00240c3 <__adddf3>
c000d33a:	83 c4 10             	add    esp,0x10
c000d33d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d341:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d345:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d349:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d34d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d351:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d355:	e8 69 6d 01 00       	call   c00240c3 <__adddf3>
c000d35a:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d35d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d361:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d365:	e8 39 7a 01 00       	call   c0024da3 <__floatsidf>
c000d36a:	83 c4 10             	add    esp,0x10
c000d36d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d371:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d375:	52                   	push   edx
c000d376:	50                   	push   eax
c000d377:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d37b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d37f:	e8 6d 7c 01 00       	call   c0024ff1 <__gtdf2>
c000d384:	83 c4 10             	add    esp,0x10
c000d387:	85 c0                	test   eax,eax
c000d389:	0f 8f 4a ff ff ff    	jg     c000d2d9 <sinc_mono_vari_process+0x28d>
c000d38f:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d393:	0f 8e ef 00 00 00    	jle    c000d488 <sinc_mono_vari_process+0x43c>
c000d399:	83 ec 10             	sub    esp,0x10
c000d39c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d39f:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d3a2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d3a5:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d3a8:	e8 67 73 01 00       	call   c0024714 <__subdf3>
c000d3ad:	83 c4 18             	add    esp,0x18
c000d3b0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3b4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3b8:	52                   	push   edx
c000d3b9:	50                   	push   eax
c000d3ba:	e8 e1 7d 01 00       	call   c00251a0 <fabs>
c000d3bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3c7:	83 c4 10             	add    esp,0x10
c000d3ca:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d3cf:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d3d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3dc:	e8 10 7c 01 00       	call   c0024ff1 <__gtdf2>
c000d3e1:	83 c4 10             	add    esp,0x10
c000d3e4:	85 c0                	test   eax,eax
c000d3e6:	0f 8e 9c 00 00 00    	jle    c000d488 <sinc_mono_vari_process+0x43c>
c000d3ec:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d3ef:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d3f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d3f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d3fa:	52                   	push   edx
c000d3fb:	50                   	push   eax
c000d3fc:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d3ff:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d402:	e8 0d 73 01 00       	call   c0024714 <__subdf3>
c000d407:	5f                   	pop    edi
c000d408:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000d40c:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000d410:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d413:	e8 8b 79 01 00       	call   c0024da3 <__floatsidf>
c000d418:	83 c4 10             	add    esp,0x10
c000d41b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d41f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d423:	52                   	push   edx
c000d424:	50                   	push   eax
c000d425:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d429:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d42d:	e8 0e 73 01 00       	call   c0024740 <__muldf3>
c000d432:	59                   	pop    ecx
c000d433:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000d437:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000d43b:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d43e:	e8 60 79 01 00       	call   c0024da3 <__floatsidf>
c000d443:	83 c4 10             	add    esp,0x10
c000d446:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d44a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d44e:	52                   	push   edx
c000d44f:	50                   	push   eax
c000d450:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d454:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d458:	e8 c7 75 01 00       	call   c0024a24 <__divdf3>
c000d45d:	83 c4 10             	add    esp,0x10
c000d460:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d464:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d468:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d46c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d470:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d474:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d478:	e8 46 6c 01 00       	call   c00240c3 <__adddf3>
c000d47d:	83 c4 10             	add    esp,0x10
c000d480:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d484:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d488:	83 ec 0c             	sub    esp,0xc
c000d48b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d48e:	e8 10 79 01 00       	call   c0024da3 <__floatsidf>
c000d493:	83 c4 10             	add    esp,0x10
c000d496:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d49a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d49e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4ae:	e8 5c 7b 01 00       	call   c002500f <__ltdf2>
c000d4b3:	83 c4 10             	add    esp,0x10
c000d4b6:	85 c0                	test   eax,eax
c000d4b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d4bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d4c0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d4c4:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000d4c8:	78 10                	js     c000d4da <sinc_mono_vari_process+0x48e>
c000d4ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4ce:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d4d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4e2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d4e6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d4ea:	e8 51 72 01 00       	call   c0024740 <__muldf3>
c000d4ef:	59                   	pop    ecx
c000d4f0:	5f                   	pop    edi
c000d4f1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d4f5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d4f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d501:	e8 99 e1 ff ff       	call   c000b69f <double_to_fp>
c000d506:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d50a:	89 c7                	mov    edi,eax
c000d50c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d510:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d514:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d518:	e8 23 72 01 00       	call   c0024740 <__muldf3>
c000d51d:	83 c4 18             	add    esp,0x18
c000d520:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d524:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d528:	52                   	push   edx
c000d529:	50                   	push   eax
c000d52a:	e8 70 e1 ff ff       	call   c000b69f <double_to_fp>
c000d52f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d533:	83 ec 0c             	sub    esp,0xc
c000d536:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d539:	e8 65 78 01 00       	call   c0024da3 <__floatsidf>
c000d53e:	83 c4 10             	add    esp,0x10
c000d541:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d545:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d549:	52                   	push   edx
c000d54a:	50                   	push   eax
c000d54b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d54f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d553:	e8 cc 74 01 00       	call   c0024a24 <__divdf3>
c000d558:	83 c4 10             	add    esp,0x10
c000d55b:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d55f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d563:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d567:	89 d8                	mov    eax,ebx
c000d569:	89 fa                	mov    edx,edi
c000d56b:	e8 7c c1 ff ff       	call   c00096ec <calc_output_single>
c000d570:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000d573:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000d576:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d57a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d57e:	89 4c 24 4c          	mov    DWORD PTR [esp+0x4c],ecx
c000d582:	52                   	push   edx
c000d583:	50                   	push   eax
c000d584:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d588:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d58c:	e8 af 71 01 00       	call   c0024740 <__muldf3>
c000d591:	59                   	pop    ecx
c000d592:	59                   	pop    ecx
c000d593:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d597:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d59b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d59f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5a3:	e8 6b 7a 01 00       	call   c0025013 <__truncdfsf2>
c000d5a8:	83 c4 10             	add    esp,0x10
c000d5ab:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d5af:	89 04 8f             	mov    DWORD PTR [edi+ecx*4],eax
c000d5b2:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000d5b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d5c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d5c5:	e8 5a 74 01 00       	call   c0024a24 <__divdf3>
c000d5ca:	83 c4 10             	add    esp,0x10
c000d5cd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d5d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d5d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d5d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d5dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5e1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5e5:	e8 d9 6a 01 00       	call   c00240c3 <__adddf3>
c000d5ea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d5ee:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d5f2:	83 c4 18             	add    esp,0x18
c000d5f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5fd:	e8 c4 e0 ff ff       	call   c000b6c6 <fmod_one>
c000d602:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d605:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d609:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d60d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d610:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d614:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d618:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d61c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d620:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d624:	e8 eb 70 01 00       	call   c0024714 <__subdf3>
c000d629:	83 c4 18             	add    esp,0x18
c000d62c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d630:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d634:	52                   	push   edx
c000d635:	50                   	push   eax
c000d636:	e8 85 7b 01 00       	call   c00251c0 <lrint>
c000d63b:	0f af f8             	imul   edi,eax
c000d63e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d642:	83 c4 10             	add    esp,0x10
c000d645:	01 f8                	add    eax,edi
c000d647:	99                   	cdq    
c000d648:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d64b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d64e:	e9 30 fc ff ff       	jmp    c000d283 <sinc_mono_vari_process+0x237>
c000d653:	83 c4 4c             	add    esp,0x4c
c000d656:	5b                   	pop    ebx
c000d657:	5e                   	pop    esi
c000d658:	5f                   	pop    edi
c000d659:	5d                   	pop    ebp
c000d65a:	c3                   	ret    

c000d65b <sinc_get_name>:
c000d65b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d65f:	31 c0                	xor    eax,eax
c000d661:	83 fa 02             	cmp    edx,0x2
c000d664:	77 07                	ja     c000d66d <sinc_get_name+0x12>
c000d666:	8b 04 95 a4 69 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd965c]
c000d66d:	c3                   	ret    

c000d66e <sinc_get_description>:
c000d66e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d672:	31 c0                	xor    eax,eax
c000d674:	83 fa 02             	cmp    edx,0x2
c000d677:	77 07                	ja     c000d680 <sinc_get_description+0x12>
c000d679:	8b 04 95 98 69 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9668]
c000d680:	c3                   	ret    

c000d681 <sinc_set_converter>:
c000d681:	53                   	push   ebx
c000d682:	81 ec 58 08 00 00    	sub    esp,0x858
c000d688:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000d68f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000d692:	85 c0                	test   eax,eax
c000d694:	74 13                	je     c000d6a9 <sinc_set_converter+0x28>
c000d696:	83 ec 0c             	sub    esp,0xc
c000d699:	50                   	push   eax
c000d69a:	e8 97 1a 00 00       	call   c000f136 <free>
c000d69f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000d6a6:	83 c4 10             	add    esp,0x10
c000d6a9:	50                   	push   eax
c000d6aa:	68 44 08 00 00       	push   0x844
c000d6af:	6a 00                	push   0x0
c000d6b1:	8d 44 24 18          	lea    eax,[esp+0x18]
c000d6b5:	50                   	push   eax
c000d6b6:	e8 c2 2f ff ff       	call   c000067d <memset>
c000d6bb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d6be:	83 c4 10             	add    esp,0x10
c000d6c1:	b8 0b 00 00 00       	mov    eax,0xb
c000d6c6:	81 fa 80 00 00 00    	cmp    edx,0x80
c000d6cc:	7f 6e                	jg     c000d73c <sinc_set_converter+0xbb>
c000d6ce:	83 fa 01             	cmp    edx,0x1
c000d6d1:	75 10                	jne    c000d6e3 <sinc_set_converter+0x62>
c000d6d3:	c7 43 24 4c d0 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d04c
c000d6da:	c7 43 20 4c d0 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d04c
c000d6e1:	eb 4d                	jmp    c000d730 <sinc_set_converter+0xaf>
c000d6e3:	83 fa 02             	cmp    edx,0x2
c000d6e6:	75 10                	jne    c000d6f8 <sinc_set_converter+0x77>
c000d6e8:	c7 43 24 6e ca 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ca6e
c000d6ef:	c7 43 20 6e ca 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ca6e
c000d6f6:	eb 38                	jmp    c000d730 <sinc_set_converter+0xaf>
c000d6f8:	83 fa 04             	cmp    edx,0x4
c000d6fb:	75 10                	jne    c000d70d <sinc_set_converter+0x8c>
c000d6fd:	c7 43 24 90 c4 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c490
c000d704:	c7 43 20 90 c4 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c490
c000d70b:	eb 23                	jmp    c000d730 <sinc_set_converter+0xaf>
c000d70d:	83 fa 06             	cmp    edx,0x6
c000d710:	75 10                	jne    c000d722 <sinc_set_converter+0xa1>
c000d712:	c7 43 24 b2 be 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000beb2
c000d719:	c7 43 20 b2 be 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000beb2
c000d720:	eb 0e                	jmp    c000d730 <sinc_set_converter+0xaf>
c000d722:	c7 43 24 d6 b8 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000b8d6
c000d729:	c7 43 20 d6 b8 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000b8d6
c000d730:	c7 43 28 f3 aa 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000aaf3
c000d737:	b8 0a 00 00 00       	mov    eax,0xa
c000d73c:	81 c4 58 08 00 00    	add    esp,0x858
c000d742:	5b                   	pop    ebx
c000d743:	c3                   	ret    

c000d744 <is_bad_src_ratio>:
c000d744:	83 ec 1c             	sub    esp,0x1c
c000d747:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d74b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d74f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d753:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d757:	b8 00 00 00 00       	mov    eax,0x0
c000d75c:	ba 00 00 70 3f       	mov    edx,0x3f700000
c000d761:	52                   	push   edx
c000d762:	50                   	push   eax
c000d763:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d767:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d76b:	e8 9f 78 01 00       	call   c002500f <__ltdf2>
c000d770:	83 c4 10             	add    esp,0x10
c000d773:	85 c0                	test   eax,eax
c000d775:	78 20                	js     c000d797 <is_bad_src_ratio+0x53>
c000d777:	b8 00 00 00 00       	mov    eax,0x0
c000d77c:	ba 00 00 70 40       	mov    edx,0x40700000
c000d781:	52                   	push   edx
c000d782:	50                   	push   eax
c000d783:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d787:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d78b:	e8 61 78 01 00       	call   c0024ff1 <__gtdf2>
c000d790:	83 c4 10             	add    esp,0x10
c000d793:	85 c0                	test   eax,eax
c000d795:	7e 07                	jle    c000d79e <is_bad_src_ratio+0x5a>
c000d797:	b8 01 00 00 00       	mov    eax,0x1
c000d79c:	eb 05                	jmp    c000d7a3 <is_bad_src_ratio+0x5f>
c000d79e:	b8 00 00 00 00       	mov    eax,0x0
c000d7a3:	83 c4 1c             	add    esp,0x1c
c000d7a6:	c3                   	ret    

c000d7a7 <fmod_one>:
c000d7a7:	83 ec 2c             	sub    esp,0x2c
c000d7aa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d7ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7b2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d7b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d7ba:	83 ec 08             	sub    esp,0x8
c000d7bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7c5:	e8 f6 79 01 00       	call   c00251c0 <lrint>
c000d7ca:	83 c4 10             	add    esp,0x10
c000d7cd:	83 ec 0c             	sub    esp,0xc
c000d7d0:	50                   	push   eax
c000d7d1:	e8 cd 75 01 00       	call   c0024da3 <__floatsidf>
c000d7d6:	83 c4 10             	add    esp,0x10
c000d7d9:	52                   	push   edx
c000d7da:	50                   	push   eax
c000d7db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7e3:	e8 2c 6f 01 00       	call   c0024714 <__subdf3>
c000d7e8:	83 c4 10             	add    esp,0x10
c000d7eb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d7ef:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d7f3:	b8 00 00 00 00       	mov    eax,0x0
c000d7f8:	ba 00 00 00 00       	mov    edx,0x0
c000d7fd:	52                   	push   edx
c000d7fe:	50                   	push   eax
c000d7ff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d803:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d807:	e8 03 78 01 00       	call   c002500f <__ltdf2>
c000d80c:	83 c4 10             	add    esp,0x10
c000d80f:	85 c0                	test   eax,eax
c000d811:	79 1e                	jns    c000d831 <fmod_one+0x8a>
c000d813:	b8 00 00 00 00       	mov    eax,0x0
c000d818:	ba 00 00 f0 3f       	mov    edx,0x3ff00000
c000d81d:	52                   	push   edx
c000d81e:	50                   	push   eax
c000d81f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d823:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d827:	e8 97 68 01 00       	call   c00240c3 <__adddf3>
c000d82c:	83 c4 10             	add    esp,0x10
c000d82f:	eb 08                	jmp    c000d839 <fmod_one+0x92>
c000d831:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d835:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d839:	83 c4 2c             	add    esp,0x2c
c000d83c:	c3                   	ret    

c000d83d <zoh_vari_process>:
c000d83d:	55                   	push   ebp
c000d83e:	57                   	push   edi
c000d83f:	56                   	push   esi
c000d840:	53                   	push   ebx
c000d841:	83 ec 3c             	sub    esp,0x3c
c000d844:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000d848:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000d84c:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000d854:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000d858:	0f 8e a9 05 00 00    	jle    c000de07 <zoh_vari_process+0x5ca>
c000d85e:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000d861:	c7 44 24 28 05 00 00 00 	mov    DWORD PTR [esp+0x28],0x5
c000d869:	85 db                	test   ebx,ebx
c000d86b:	0f 84 96 05 00 00    	je     c000de07 <zoh_vari_process+0x5ca>
c000d871:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000d874:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000d878:	74 19                	je     c000d893 <zoh_vari_process+0x56>
c000d87a:	31 d2                	xor    edx,edx
c000d87c:	39 c2                	cmp    edx,eax
c000d87e:	7d 0c                	jge    c000d88c <zoh_vari_process+0x4f>
c000d880:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000d882:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000d885:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000d889:	42                   	inc    edx
c000d88a:	eb f0                	jmp    c000d87c <zoh_vari_process+0x3f>
c000d88c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000d893:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000d896:	0f af d0             	imul   edx,eax
c000d899:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000d89c:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000d8a0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000d8a7:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000d8aa:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000d8b1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d8b4:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d8b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d8bb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d8bf:	57                   	push   edi
c000d8c0:	57                   	push   edi
c000d8c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d8c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d8c9:	e8 76 fe ff ff       	call   c000d744 <is_bad_src_ratio>
c000d8ce:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8d2:	83 c4 10             	add    esp,0x10
c000d8d5:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000d8da:	0f 85 1f 05 00 00    	jne    c000ddff <zoh_vari_process+0x5c2>
c000d8e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d8e3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d8e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d8ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d8ee:	68 00 00 f0 3f       	push   0x3ff00000
c000d8f3:	6a 00                	push   0x0
c000d8f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8fd:	e8 0d 77 01 00       	call   c002500f <__ltdf2>
c000d902:	83 c4 10             	add    esp,0x10
c000d905:	85 c0                	test   eax,eax
c000d907:	0f 89 dc 01 00 00    	jns    c000dae9 <zoh_vari_process+0x2ac>
c000d90d:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c000d910:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c000d913:	0f 8d d0 01 00 00    	jge    c000dae9 <zoh_vari_process+0x2ac>
c000d919:	83 ec 0c             	sub    esp,0xc
c000d91c:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000d91f:	e8 7f 74 01 00       	call   c0024da3 <__floatsidf>
c000d924:	83 c4 10             	add    esp,0x10
c000d927:	89 04 24             	mov    DWORD PTR [esp],eax
c000d92a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d92e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d932:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d936:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d93a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d93e:	e8 fd 6d 01 00       	call   c0024740 <__muldf3>
c000d943:	59                   	pop    ecx
c000d944:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d948:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000d94c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d94f:	e8 4f 74 01 00       	call   c0024da3 <__floatsidf>
c000d954:	83 c4 10             	add    esp,0x10
c000d957:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d95b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d95f:	52                   	push   edx
c000d960:	50                   	push   eax
c000d961:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d965:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d969:	e8 55 67 01 00       	call   c00240c3 <__adddf3>
c000d96e:	59                   	pop    ecx
c000d96f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d973:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000d977:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000d97a:	e8 24 74 01 00       	call   c0024da3 <__floatsidf>
c000d97f:	83 c4 10             	add    esp,0x10
c000d982:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d986:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d98a:	52                   	push   edx
c000d98b:	50                   	push   eax
c000d98c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d990:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d994:	e8 74 76 01 00       	call   c002500d <__gedf2>
c000d999:	83 c4 10             	add    esp,0x10
c000d99c:	85 c0                	test   eax,eax
c000d99e:	0f 89 45 01 00 00    	jns    c000dae9 <zoh_vari_process+0x2ac>
c000d9a4:	85 ff                	test   edi,edi
c000d9a6:	0f 8e ee 00 00 00    	jle    c000da9a <zoh_vari_process+0x25d>
c000d9ac:	83 ec 10             	sub    esp,0x10
c000d9af:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9b2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9b5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d9b8:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d9bb:	e8 54 6d 01 00       	call   c0024714 <__subdf3>
c000d9c0:	83 c4 18             	add    esp,0x18
c000d9c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d9c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d9cb:	52                   	push   edx
c000d9cc:	50                   	push   eax
c000d9cd:	e8 ce 77 01 00       	call   c00251a0 <fabs>
c000d9d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9d6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d9da:	83 c4 10             	add    esp,0x10
c000d9dd:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d9e2:	68 23 42 92 0c       	push   0xc924223
c000d9e7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d9eb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d9ef:	e8 fd 75 01 00       	call   c0024ff1 <__gtdf2>
c000d9f4:	83 c4 10             	add    esp,0x10
c000d9f7:	85 c0                	test   eax,eax
c000d9f9:	0f 8e 9b 00 00 00    	jle    c000da9a <zoh_vari_process+0x25d>
c000d9ff:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000da02:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000da05:	89 04 24             	mov    DWORD PTR [esp],eax
c000da08:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000da0c:	52                   	push   edx
c000da0d:	50                   	push   eax
c000da0e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000da11:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000da14:	e8 fb 6c 01 00       	call   c0024714 <__subdf3>
c000da19:	59                   	pop    ecx
c000da1a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000da1e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000da22:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000da25:	e8 79 73 01 00       	call   c0024da3 <__floatsidf>
c000da2a:	83 c4 10             	add    esp,0x10
c000da2d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000da31:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000da35:	52                   	push   edx
c000da36:	50                   	push   eax
c000da37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da3f:	e8 fc 6c 01 00       	call   c0024740 <__muldf3>
c000da44:	5f                   	pop    edi
c000da45:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000da49:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000da4d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000da50:	e8 4e 73 01 00       	call   c0024da3 <__floatsidf>
c000da55:	83 c4 10             	add    esp,0x10
c000da58:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000da5c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000da60:	52                   	push   edx
c000da61:	50                   	push   eax
c000da62:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da66:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da6a:	e8 b5 6f 01 00       	call   c0024a24 <__divdf3>
c000da6f:	83 c4 10             	add    esp,0x10
c000da72:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000da76:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000da7a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000da7e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000da82:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da8a:	e8 34 66 01 00       	call   c00240c3 <__adddf3>
c000da8f:	83 c4 10             	add    esp,0x10
c000da92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000da96:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000da9a:	31 c0                	xor    eax,eax
c000da9c:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000da9f:	7e 13                	jle    c000dab4 <zoh_vari_process+0x277>
c000daa1:	8b 7c 83 1c          	mov    edi,DWORD PTR [ebx+eax*4+0x1c]
c000daa5:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000daa8:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000daab:	40                   	inc    eax
c000daac:	89 3c 8a             	mov    DWORD PTR [edx+ecx*4],edi
c000daaf:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dab2:	eb e8                	jmp    c000da9c <zoh_vari_process+0x25f>
c000dab4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dab8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dabc:	68 00 00 f0 3f       	push   0x3ff00000
c000dac1:	6a 00                	push   0x0
c000dac3:	e8 5c 6f 01 00       	call   c0024a24 <__divdf3>
c000dac8:	83 c4 10             	add    esp,0x10
c000dacb:	89 04 24             	mov    DWORD PTR [esp],eax
c000dace:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dad2:	52                   	push   edx
c000dad3:	50                   	push   eax
c000dad4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dad8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dadc:	e8 e2 65 01 00       	call   c00240c3 <__adddf3>
c000dae1:	83 c4 10             	add    esp,0x10
c000dae4:	e9 fd fd ff ff       	jmp    c000d8e6 <zoh_vari_process+0xa9>
c000dae9:	57                   	push   edi
c000daea:	57                   	push   edi
c000daeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000daef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000daf3:	e8 af fc ff ff       	call   c000d7a7 <fmod_one>
c000daf8:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dafb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000daff:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000db03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000db0f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000db13:	e8 fc 6b 01 00       	call   c0024714 <__subdf3>
c000db18:	83 c4 18             	add    esp,0x18
c000db1b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000db1f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000db23:	52                   	push   edx
c000db24:	50                   	push   eax
c000db25:	e8 96 76 01 00       	call   c00251c0 <lrint>
c000db2a:	83 c4 10             	add    esp,0x10
c000db2d:	0f af f8             	imul   edi,eax
c000db30:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000db33:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c000db36:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000db3a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000db3d:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c000db40:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000db44:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000db47:	0f 8d 1d 02 00 00    	jge    c000dd6a <zoh_vari_process+0x52d>
c000db4d:	83 ec 0c             	sub    esp,0xc
c000db50:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000db53:	e8 4b 72 01 00       	call   c0024da3 <__floatsidf>
c000db58:	83 c4 10             	add    esp,0x10
c000db5b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000db5f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000db63:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000db67:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000db6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db6f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db73:	e8 c8 6b 01 00       	call   c0024740 <__muldf3>
c000db78:	59                   	pop    ecx
c000db79:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000db7d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000db81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db85:	e8 19 72 01 00       	call   c0024da3 <__floatsidf>
c000db8a:	83 c4 10             	add    esp,0x10
c000db8d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000db91:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000db95:	52                   	push   edx
c000db96:	50                   	push   eax
c000db97:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db9b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db9f:	e8 1f 65 01 00       	call   c00240c3 <__adddf3>
c000dba4:	89 3c 24             	mov    DWORD PTR [esp],edi
c000dba7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbaf:	e8 ef 71 01 00       	call   c0024da3 <__floatsidf>
c000dbb4:	83 c4 10             	add    esp,0x10
c000dbb7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000dbbb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000dbbf:	52                   	push   edx
c000dbc0:	50                   	push   eax
c000dbc1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dbc5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dbc9:	e8 43 74 01 00       	call   c0025011 <__ledf2>
c000dbce:	83 c4 10             	add    esp,0x10
c000dbd1:	85 c0                	test   eax,eax
c000dbd3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000dbd7:	0f 8f 8d 01 00 00    	jg     c000dd6a <zoh_vari_process+0x52d>
c000dbdd:	85 c9                	test   ecx,ecx
c000dbdf:	0f 8e ef 00 00 00    	jle    c000dcd4 <zoh_vari_process+0x497>
c000dbe5:	83 ec 10             	sub    esp,0x10
c000dbe8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dbeb:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dbee:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000dbf1:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000dbf4:	e8 1b 6b 01 00       	call   c0024714 <__subdf3>
c000dbf9:	83 c4 18             	add    esp,0x18
c000dbfc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc00:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc04:	52                   	push   edx
c000dc05:	50                   	push   eax
c000dc06:	e8 95 75 01 00       	call   c00251a0 <fabs>
c000dc0b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000dc0f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000dc13:	83 c4 10             	add    esp,0x10
c000dc16:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dc1b:	68 23 42 92 0c       	push   0xc924223
c000dc20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc28:	e8 c4 73 01 00       	call   c0024ff1 <__gtdf2>
c000dc2d:	83 c4 10             	add    esp,0x10
c000dc30:	85 c0                	test   eax,eax
c000dc32:	0f 8e 9c 00 00 00    	jle    c000dcd4 <zoh_vari_process+0x497>
c000dc38:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000dc3b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000dc3e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc42:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc46:	52                   	push   edx
c000dc47:	50                   	push   eax
c000dc48:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dc4b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dc4e:	e8 c1 6a 01 00       	call   c0024714 <__subdf3>
c000dc53:	5f                   	pop    edi
c000dc54:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dc58:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000dc5c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000dc5f:	e8 3f 71 01 00       	call   c0024da3 <__floatsidf>
c000dc64:	83 c4 10             	add    esp,0x10
c000dc67:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc6b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc6f:	52                   	push   edx
c000dc70:	50                   	push   eax
c000dc71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc79:	e8 c2 6a 01 00       	call   c0024740 <__muldf3>
c000dc7e:	59                   	pop    ecx
c000dc7f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dc83:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000dc87:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dc8a:	e8 14 71 01 00       	call   c0024da3 <__floatsidf>
c000dc8f:	83 c4 10             	add    esp,0x10
c000dc92:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc96:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc9a:	52                   	push   edx
c000dc9b:	50                   	push   eax
c000dc9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dca0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dca4:	e8 7b 6d 01 00       	call   c0024a24 <__divdf3>
c000dca9:	83 c4 10             	add    esp,0x10
c000dcac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dcb0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dcb4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dcb8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dcbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dcc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dcc4:	e8 fa 63 01 00       	call   c00240c3 <__adddf3>
c000dcc9:	83 c4 10             	add    esp,0x10
c000dccc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dcd0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dcd4:	31 c0                	xor    eax,eax
c000dcd6:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000dcd9:	39 c2                	cmp    edx,eax
c000dcdb:	7e 1d                	jle    c000dcfa <zoh_vari_process+0x4bd>
c000dcdd:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000dce0:	29 d1                	sub    ecx,edx
c000dce2:	89 ca                	mov    edx,ecx
c000dce4:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dce6:	01 c2                	add    edx,eax
c000dce8:	40                   	inc    eax
c000dce9:	8b 3c 91             	mov    edi,DWORD PTR [ecx+edx*4]
c000dcec:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dcef:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dcf2:	89 3c 8a             	mov    DWORD PTR [edx+ecx*4],edi
c000dcf5:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dcf8:	eb dc                	jmp    c000dcd6 <zoh_vari_process+0x499>
c000dcfa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dcfe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd02:	68 00 00 f0 3f       	push   0x3ff00000
c000dd07:	6a 00                	push   0x0
c000dd09:	e8 16 6d 01 00       	call   c0024a24 <__divdf3>
c000dd0e:	83 c4 10             	add    esp,0x10
c000dd11:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dd15:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dd19:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd1d:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd29:	e8 95 63 01 00       	call   c00240c3 <__adddf3>
c000dd2e:	5f                   	pop    edi
c000dd2f:	59                   	pop    ecx
c000dd30:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd34:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd40:	e8 62 fa ff ff       	call   c000d7a7 <fmod_one>
c000dd45:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dd48:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dd4c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dd50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd58:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dd5c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dd60:	e8 af 69 01 00       	call   c0024714 <__subdf3>
c000dd65:	e9 ae fd ff ff       	jmp    c000db18 <zoh_vari_process+0x2db>
c000dd6a:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c000dd6e:	7d 3a                	jge    c000ddaa <zoh_vari_process+0x56d>
c000dd70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dd74:	83 ec 0c             	sub    esp,0xc
c000dd77:	29 f8                	sub    eax,edi
c000dd79:	99                   	cdq    
c000dd7a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000dd7d:	50                   	push   eax
c000dd7e:	e8 20 70 01 00       	call   c0024da3 <__floatsidf>
c000dd83:	83 c4 10             	add    esp,0x10
c000dd86:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dd8a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dd8e:	52                   	push   edx
c000dd8f:	50                   	push   eax
c000dd90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd98:	e8 26 63 01 00       	call   c00240c3 <__adddf3>
c000dd9d:	83 c4 10             	add    esp,0x10
c000dda0:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000dda3:	89 04 24             	mov    DWORD PTR [esp],eax
c000dda6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ddaa:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ddad:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ddb1:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000ddb4:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000ddb7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ddba:	85 c0                	test   eax,eax
c000ddbc:	7f 24                	jg     c000dde2 <zoh_vari_process+0x5a5>
c000ddbe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ddc2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ddc6:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ddc9:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ddcc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ddcf:	99                   	cdq    
c000ddd0:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ddd3:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000ddd6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000ddd9:	99                   	cdq    
c000ddda:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000dddd:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000dde0:	eb 25                	jmp    c000de07 <zoh_vari_process+0x5ca>
c000dde2:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000dde5:	31 d2                	xor    edx,edx
c000dde7:	29 c8                	sub    eax,ecx
c000dde9:	c1 e0 02             	shl    eax,0x2
c000ddec:	39 d1                	cmp    ecx,edx
c000ddee:	7e ce                	jle    c000ddbe <zoh_vari_process+0x581>
c000ddf0:	8b 3e                	mov    edi,DWORD PTR [esi]
c000ddf2:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c000ddf5:	83 c0 04             	add    eax,0x4
c000ddf8:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c000ddfc:	42                   	inc    edx
c000ddfd:	eb ed                	jmp    c000ddec <zoh_vari_process+0x5af>
c000ddff:	c7 44 24 28 16 00 00 00 	mov    DWORD PTR [esp+0x28],0x16
c000de07:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000de0b:	83 c4 3c             	add    esp,0x3c
c000de0e:	5b                   	pop    ebx
c000de0f:	5e                   	pop    esi
c000de10:	5f                   	pop    edi
c000de11:	5d                   	pop    ebp
c000de12:	c3                   	ret    

c000de13 <zoh_reset>:
c000de13:	83 ec 0c             	sub    esp,0xc
c000de16:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000de1a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000de1d:	85 c0                	test   eax,eax
c000de1f:	74 20                	je     c000de41 <zoh_reset+0x2e>
c000de21:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000de24:	83 c0 1c             	add    eax,0x1c
c000de27:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000de2a:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000de31:	c1 e2 02             	shl    edx,0x2
c000de34:	51                   	push   ecx
c000de35:	52                   	push   edx
c000de36:	6a 00                	push   0x0
c000de38:	50                   	push   eax
c000de39:	e8 3f 28 ff ff       	call   c000067d <memset>
c000de3e:	83 c4 10             	add    esp,0x10
c000de41:	83 c4 0c             	add    esp,0xc
c000de44:	c3                   	ret    

c000de45 <zoh_get_name>:
c000de45:	31 c0                	xor    eax,eax
c000de47:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000de4c:	75 05                	jne    c000de53 <zoh_get_name+0xe>
c000de4e:	b8 be 6a 02 c0       	mov    eax,0xc0026abe
c000de53:	c3                   	ret    

c000de54 <zoh_get_description>:
c000de54:	31 c0                	xor    eax,eax
c000de56:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000de5b:	75 05                	jne    c000de62 <zoh_get_description+0xe>
c000de5d:	b8 cf 6a 02 c0       	mov    eax,0xc0026acf
c000de62:	c3                   	ret    

c000de63 <zoh_set_converter>:
c000de63:	53                   	push   ebx
c000de64:	b8 0a 00 00 00       	mov    eax,0xa
c000de69:	83 ec 08             	sub    esp,0x8
c000de6c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000de70:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000de75:	75 6e                	jne    c000dee5 <zoh_set_converter+0x82>
c000de77:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000de7a:	85 c0                	test   eax,eax
c000de7c:	74 13                	je     c000de91 <zoh_set_converter+0x2e>
c000de7e:	83 ec 0c             	sub    esp,0xc
c000de81:	50                   	push   eax
c000de82:	e8 af 12 00 00       	call   c000f136 <free>
c000de87:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000de8e:	83 c4 10             	add    esp,0x10
c000de91:	50                   	push   eax
c000de92:	50                   	push   eax
c000de93:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000de96:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000de9d:	50                   	push   eax
c000de9e:	6a 01                	push   0x1
c000dea0:	e8 b1 12 00 00       	call   c000f156 <calloc>
c000dea5:	83 c4 10             	add    esp,0x10
c000dea8:	89 c2                	mov    edx,eax
c000deaa:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000dead:	85 d2                	test   edx,edx
c000deaf:	b8 01 00 00 00       	mov    eax,0x1
c000deb4:	74 2f                	je     c000dee5 <zoh_set_converter+0x82>
c000deb6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000deb9:	83 ec 0c             	sub    esp,0xc
c000debc:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000debf:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000dec5:	c7 43 24 3d d8 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d83d
c000decc:	c7 43 20 3d d8 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d83d
c000ded3:	c7 43 28 13 de 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000de13
c000deda:	53                   	push   ebx
c000dedb:	e8 33 ff ff ff       	call   c000de13 <zoh_reset>
c000dee0:	83 c4 10             	add    esp,0x10
c000dee3:	31 c0                	xor    eax,eax
c000dee5:	83 c4 08             	add    esp,0x8
c000dee8:	5b                   	pop    ebx
c000dee9:	c3                   	ret    

c000deea <Computer::close(int, int, void*)>:
c000deea:	57                   	push   edi
c000deeb:	56                   	push   esi
c000deec:	53                   	push   ebx
c000deed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000def1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000def5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000def9:	83 ec 0c             	sub    esp,0xc
c000defc:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000df02:	e8 a9 58 00 00       	call   c00137b0 <Device::closeAll()>
c000df07:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000df0d:	83 c4 10             	add    esp,0x10
c000df10:	8b 10                	mov    edx,DWORD PTR [eax]
c000df12:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000df16:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000df1e:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000df22:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df26:	5b                   	pop    ebx
c000df27:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000df2a:	5e                   	pop    esi
c000df2b:	5f                   	pop    edi
c000df2c:	ff e0                	jmp    eax

c000df2e <Computer::Computer()>:
c000df2e:	83 ec 0c             	sub    esp,0xc
c000df31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df35:	83 ec 08             	sub    esp,0x8
c000df38:	68 06 6b 02 c0       	push   0xc0026b06
c000df3d:	50                   	push   eax
c000df3e:	e8 e7 58 00 00       	call   c001382a <Device::Device(char const*)>
c000df43:	83 c4 10             	add    esp,0x10
c000df46:	ba d0 6c 02 c0       	mov    edx,0xc0026cd0
c000df4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df4f:	89 10                	mov    DWORD PTR [eax],edx
c000df51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df55:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000df5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df63:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000df6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df71:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000df77:	83 ca 04             	or     edx,0x4
c000df7a:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000df80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df84:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000df8a:	0f b6 d0             	movzx  edx,al
c000df8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df91:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000df98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df9c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000dfa2:	0f b6 d0             	movzx  edx,al
c000dfa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfa9:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000dfae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfb2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000dfb8:	8d 50 01             	lea    edx,[eax+0x1]
c000dfbb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000dfbf:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000dfc5:	0f b6 d0             	movzx  edx,al
c000dfc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfcc:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000dfd0:	83 e1 3f             	and    ecx,0x3f
c000dfd3:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000dfd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfdb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000dfe1:	0f b6 d0             	movzx  edx,al
c000dfe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfe8:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000dfef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dff3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000dff9:	0f b6 d0             	movzx  edx,al
c000dffc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e000:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e005:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e009:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e00f:	8d 50 01             	lea    edx,[eax+0x1]
c000e012:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e016:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e01c:	0f b6 d0             	movzx  edx,al
c000e01f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e023:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e027:	83 e1 3f             	and    ecx,0x3f
c000e02a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e02e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e032:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e038:	0f b6 d0             	movzx  edx,al
c000e03b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e03f:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e046:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e04a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e050:	0f b6 d0             	movzx  edx,al
c000e053:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e057:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e05c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e060:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e066:	8d 50 01             	lea    edx,[eax+0x1]
c000e069:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e06d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e073:	0f b6 d0             	movzx  edx,al
c000e076:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e07a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e07e:	83 e1 3f             	and    ecx,0x3f
c000e081:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e085:	90                   	nop
c000e086:	83 c4 0c             	add    esp,0xc
c000e089:	c3                   	ret    

c000e08a <Computer::setBootMessage(char const*)>:
c000e08a:	c3                   	ret    
c000e08b:	90                   	nop

c000e08c <Computer::start()>:
c000e08c:	56                   	push   esi
c000e08d:	53                   	push   ebx
c000e08e:	50                   	push   eax
c000e08f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e093:	e8 62 d9 00 00       	call   c001b9fa <lockScheduler()>
c000e098:	e8 91 dc 00 00       	call   c001bd2e <schedule()>
c000e09d:	e8 5a d9 00 00       	call   c001b9fc <unlockScheduler()>
c000e0a2:	fb                   	sti    
c000e0a3:	83 ec 0c             	sub    esp,0xc
c000e0a6:	68 3b 07 00 00       	push   0x73b
c000e0ab:	e8 90 40 00 00       	call   c0012140 <operator new(unsigned long)>
c000e0b0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e0b7:	89 c6                	mov    esi,eax
c000e0b9:	ff 35 34 bb 02 c0    	push   DWORD PTR ds:0xc002bb34
c000e0bf:	68 0f 6b 02 c0       	push   0xc0026b0f
c000e0c4:	6a 01                	push   0x1
c000e0c6:	50                   	push   eax
c000e0c7:	e8 8e d7 00 00       	call   c001b85a <Process::Process(bool, char const*, Process*, char**)>
c000e0cc:	83 c4 20             	add    esp,0x20
c000e0cf:	68 ff 00 00 00       	push   0xff
c000e0d4:	6a 00                	push   0x0
c000e0d6:	68 b3 ea 00 c0       	push   0xc000eab3
c000e0db:	56                   	push   esi
c000e0dc:	e8 43 da 00 00       	call   c001bb24 <Process::createThread(void (*)(void*), void*, int)>
c000e0e1:	6a 7a                	push   0x7a
c000e0e3:	6a 00                	push   0x0
c000e0e5:	68 5d c3 01 c0       	push   0xc001c35d
c000e0ea:	ff 35 34 bb 02 c0    	push   DWORD PTR ds:0xc002bb34
c000e0f0:	e8 2f da 00 00       	call   c001bb24 <Process::createThread(void (*)(void*), void*, int)>
c000e0f5:	83 c4 20             	add    esp,0x20
c000e0f8:	a3 e8 ba 02 c0       	mov    ds:0xc002bae8,eax
c000e0fd:	c6 05 2d a6 02 c0 01 	mov    BYTE PTR ds:0xc002a62d,0x1
c000e104:	e8 81 44 00 00       	call   c001258a <initVFS()>
c000e109:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e10f:	8b 10                	mov    edx,DWORD PTR [eax]
c000e111:	6a 00                	push   0x0
c000e113:	6a 00                	push   0x0
c000e115:	6a 00                	push   0x0
c000e117:	50                   	push   eax
c000e118:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e11b:	e8 38 c1 00 00       	call   c001a258 <setupSystemCalls()>
c000e120:	e8 63 4f 00 00       	call   c0013088 <loadClockSettings()>
c000e125:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e128:	e8 57 56 00 00       	call   c0013784 <Device::loadDriversForAll()>
c000e12d:	5a                   	pop    edx
c000e12e:	8b 1d 28 a6 02 c0    	mov    ebx,DWORD PTR ds:0xc002a628
c000e134:	59                   	pop    ecx
c000e135:	6a 01                	push   0x1
c000e137:	68 1c 6b 02 c0       	push   0xc0026b1c
c000e13c:	e8 e9 d2 00 00       	call   c001b42a <Thr::loadDLL(char const*, bool)>
c000e141:	5e                   	pop    esi
c000e142:	5a                   	pop    edx
c000e143:	53                   	push   ebx
c000e144:	50                   	push   eax
c000e145:	e8 a6 d4 00 00       	call   c001b5f0 <Thr::executeDLL(unsigned long, void*)>
c000e14a:	c7 04 24 a0 7c 02 c0 	mov    DWORD PTR [esp],0xc0027ca0
c000e151:	e8 d9 40 00 00       	call   c001222f <Dbg::kprintf(char const*, ...)>
c000e156:	83 c4 10             	add    esp,0x10
c000e159:	83 ec 0c             	sub    esp,0xc
c000e15c:	6a 02                	push   0x2
c000e15e:	e8 25 dd 00 00       	call   c001be88 <blockTask(TaskState)>
c000e163:	83 c4 10             	add    esp,0x10
c000e166:	eb f1                	jmp    c000e159 <Computer::start()+0xcd>

c000e168 <firstTask()>:
c000e168:	83 ec 18             	sub    esp,0x18
c000e16b:	ff 35 28 a6 02 c0    	push   DWORD PTR ds:0xc002a628
c000e171:	e8 16 ff ff ff       	call   c000e08c <Computer::start()>

c000e176 <Computer::detectFeatures()>:
c000e176:	55                   	push   ebp
c000e177:	57                   	push   edi
c000e178:	56                   	push   esi
c000e179:	53                   	push   ebx
c000e17a:	83 ec 1c             	sub    esp,0x1c
c000e17d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e181:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e18b:	e8 09 21 ff ff       	call   c0000299 <detectCPUID>
c000e190:	85 c0                	test   eax,eax
c000e192:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e198:	0f 95 c2             	setne  dl
c000e19b:	83 e0 fd             	and    eax,0xfffffffd
c000e19e:	d1 e2                	shl    edx,1
c000e1a0:	09 d0                	or     eax,edx
c000e1a2:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e1a8:	a8 02                	test   al,0x2
c000e1aa:	75 46                	jne    c000e1f2 <Computer::detectFeatures()+0x7c>
c000e1ac:	f6 05 41 a6 02 c0 04 	test   BYTE PTR ds:0xc002a641,0x4
c000e1b3:	74 07                	je     c000e1bc <Computer::detectFeatures()+0x46>
c000e1b5:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e1bc:	e8 45 50 01 00       	call   c0023206 <x87Detect>
c000e1c1:	83 e0 01             	and    eax,0x1
c000e1c4:	c1 e0 04             	shl    eax,0x4
c000e1c7:	88 c2                	mov    dl,al
c000e1c9:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e1cf:	83 e0 ef             	and    eax,0xffffffef
c000e1d2:	09 d0                	or     eax,edx
c000e1d4:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e1da:	a8 10                	test   al,0x10
c000e1dc:	0f 85 2a 01 00 00    	jne    c000e30c <Computer::detectFeatures()+0x196>
c000e1e2:	84 c0                	test   al,al
c000e1e4:	0f 88 45 01 00 00    	js     c000e32f <Computer::detectFeatures()+0x1b9>
c000e1ea:	83 c4 1c             	add    esp,0x1c
c000e1ed:	5b                   	pop    ebx
c000e1ee:	5e                   	pop    esi
c000e1ef:	5f                   	pop    edi
c000e1f0:	5d                   	pop    ebp
c000e1f1:	c3                   	ret    
c000e1f2:	83 ec 0c             	sub    esp,0xc
c000e1f5:	6a 20                	push   0x20
c000e1f7:	e8 84 96 00 00       	call   c0017880 <CPU::cpuidCheckEDX(unsigned int)>
c000e1fc:	83 e0 01             	and    eax,0x1
c000e1ff:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e206:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e20c:	83 e0 f7             	and    eax,0xfffffff7
c000e20f:	09 d0                	or     eax,edx
c000e211:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e217:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e21e:	e8 5d 96 00 00       	call   c0017880 <CPU::cpuidCheckEDX(unsigned int)>
c000e223:	83 e0 01             	and    eax,0x1
c000e226:	88 c2                	mov    dl,al
c000e228:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e22e:	83 e0 fe             	and    eax,0xfffffffe
c000e231:	09 d0                	or     eax,edx
c000e233:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e239:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e240:	e8 3b 96 00 00       	call   c0017880 <CPU::cpuidCheckEDX(unsigned int)>
c000e245:	c1 e0 07             	shl    eax,0x7
c000e248:	88 c2                	mov    dl,al
c000e24a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e250:	83 e0 7f             	and    eax,0x7f
c000e253:	09 d0                	or     eax,edx
c000e255:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e25b:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e262:	e8 19 96 00 00       	call   c0017880 <CPU::cpuidCheckEDX(unsigned int)>
c000e267:	83 c4 10             	add    esp,0x10
c000e26a:	83 e0 01             	and    eax,0x1
c000e26d:	c1 e0 05             	shl    eax,0x5
c000e270:	88 c2                	mov    dl,al
c000e272:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e278:	83 e0 df             	and    eax,0xffffffdf
c000e27b:	09 d0                	or     eax,edx
c000e27d:	f7 05 40 a6 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002a640,0x401
c000e287:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e28d:	0f 84 c2 00 00 00    	je     c000e355 <Computer::detectFeatures()+0x1df>
c000e293:	83 e0 fe             	and    eax,0xfffffffe
c000e296:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e29c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e2a2:	88 c2                	mov    dl,al
c000e2a4:	83 e2 09             	and    edx,0x9
c000e2a7:	fe ca                	dec    dl
c000e2a9:	75 09                	jne    c000e2b4 <Computer::detectFeatures()+0x13e>
c000e2ab:	83 e0 fe             	and    eax,0xfffffffe
c000e2ae:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e2b4:	83 ec 0c             	sub    esp,0xc
c000e2b7:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e2bb:	50                   	push   eax
c000e2bc:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e2c0:	55                   	push   ebp
c000e2c1:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e2c5:	57                   	push   edi
c000e2c6:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e2ca:	56                   	push   esi
c000e2cb:	68 00 00 00 80       	push   0x80000000
c000e2d0:	e8 27 95 00 00       	call   c00177fc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e2d5:	83 c4 20             	add    esp,0x20
c000e2d8:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000e2df:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e2e3:	0f 86 c3 fe ff ff    	jbe    c000e1ac <Computer::detectFeatures()+0x36>
c000e2e9:	83 ec 0c             	sub    esp,0xc
c000e2ec:	50                   	push   eax
c000e2ed:	55                   	push   ebp
c000e2ee:	57                   	push   edi
c000e2ef:	56                   	push   esi
c000e2f0:	68 01 00 00 80       	push   0x80000001
c000e2f5:	e8 02 95 00 00       	call   c00177fc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e2fa:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000e304:	83 c4 20             	add    esp,0x20
c000e307:	e9 a0 fe ff ff       	jmp    c000e1ac <Computer::detectFeatures()+0x36>
c000e30c:	e8 af 4e 01 00       	call   c00231c0 <sseDetect>
c000e311:	88 c2                	mov    dl,al
c000e313:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e319:	c1 e2 07             	shl    edx,0x7
c000e31c:	83 e0 7f             	and    eax,0x7f
c000e31f:	09 d0                	or     eax,edx
c000e321:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e327:	84 c0                	test   al,al
c000e329:	0f 89 bb fe ff ff    	jns    c000e1ea <Computer::detectFeatures()+0x74>
c000e32f:	e8 7c 4e 01 00       	call   c00231b0 <avxDetect>
c000e334:	83 e0 01             	and    eax,0x1
c000e337:	c1 e0 05             	shl    eax,0x5
c000e33a:	88 c2                	mov    dl,al
c000e33c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e342:	83 e0 df             	and    eax,0xffffffdf
c000e345:	09 d0                	or     eax,edx
c000e347:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e34d:	83 c4 1c             	add    esp,0x1c
c000e350:	5b                   	pop    ebx
c000e351:	5e                   	pop    esi
c000e352:	5f                   	pop    edi
c000e353:	5d                   	pop    ebp
c000e354:	c3                   	ret    
c000e355:	83 ec 0c             	sub    esp,0xc
c000e358:	68 00 02 00 00       	push   0x200
c000e35d:	e8 1e 95 00 00       	call   c0017880 <CPU::cpuidCheckEDX(unsigned int)>
c000e362:	83 c4 10             	add    esp,0x10
c000e365:	83 e0 01             	and    eax,0x1
c000e368:	88 c2                	mov    dl,al
c000e36a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e370:	83 e0 fe             	and    eax,0xfffffffe
c000e373:	09 d0                	or     eax,edx
c000e375:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e37b:	e9 1c ff ff ff       	jmp    c000e29c <Computer::detectFeatures()+0x126>

c000e380 <Computer::displayFeatures()>:
c000e380:	53                   	push   ebx
c000e381:	83 ec 14             	sub    esp,0x14
c000e384:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e388:	68 3f 6b 02 c0       	push   0xc0026b3f
c000e38d:	e8 9d 3e 00 00       	call   c001222f <Dbg::kprintf(char const*, ...)>
c000e392:	83 c4 10             	add    esp,0x10
c000e395:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000e39c:	0f 85 73 02 00 00    	jne    c000e615 <Computer::displayFeatures()+0x295>
c000e3a2:	b8 3c 6b 02 c0       	mov    eax,0xc0026b3c
c000e3a7:	83 ec 08             	sub    esp,0x8
c000e3aa:	50                   	push   eax
c000e3ab:	68 52 6b 02 c0       	push   0xc0026b52
c000e3b0:	e8 7a 3e 00 00       	call   c001222f <Dbg::kprintf(char const*, ...)>
c000e3b5:	83 c4 10             	add    esp,0x10
c000e3b8:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000e3bf:	0f 85 8c 02 00 00    	jne    c000e651 <Computer::displayFeatures()+0x2d1>
c000e3c5:	b8 3c 6b 02 c0       	mov    eax,0xc0026b3c
c000e3ca:	83 ec 08             	sub    esp,0x8
c000e3cd:	50                   	push   eax
c000e3ce:	68 63 6b 02 c0       	push   0xc0026b63
c000e3d3:	e8 57 3e 00 00       	call   c001222f <Dbg::kprintf(char const*, ...)>
c000e3d8:	83 c4 10             	add    esp,0x10
c000e3db:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000e3e2:	0f 85 5f 02 00 00    	jne    c000e647 <Computer::displayFeatures()+0x2c7>
c000e3e8:	b8 3c 6b 02 c0       	mov    eax,0xc0026b3c
c000e3ed:	83 ec 08             	sub    esp,0x8
c000e3f0:	50                   	push   eax
c000e3f1:	68 74 6b 02 c0       	push   0xc0026b74
c000e3f6:	e8 34 3e 00 00       	call   c001222f <Dbg::kprintf(char const*, ...)>
c000e3fb:	83 c4 10             	add    esp,0x10
c000e3fe:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000e405:	0f 85 32 02 00 00    	jne    c000e63d <Computer::displayFeatures()+0x2bd>
c000e40b:	b8 3c 6b 02 c0       	mov    eax,0xc0026b3c
c000e410:	83 ec 08             	sub    esp,0x8
c000e413:	50                   	push   eax
c000e414:	68 85 6b 02 c0       	push   0xc0026b85
c000e419:	e8 11 3e 00 00       	call   c001222f <Dbg::kprintf(char const*, ...)>
c000e41e:	83 c4 10             	add    esp,0x10
c000e421:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000e428:	0f 85 05 02 00 00    	jne    c000e633 <Computer::displayFeatures()+0x2b3>
c000e42e:	b8 3c 6b 02 c0       	mov    eax,0xc0026b3c
c000e433:	83 ec 08             	sub    esp,0x8
c000e436:	50                   	push   eax
c000e437:	68 96 6b 02 c0       	push   0xc0026b96
c000e43c:	e8 ee 3d 00 00       	call   c001222f <Dbg::kprintf(char const*, ...)>
c000e441:	83 c4 10             	add    esp,0x10
c000e444:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000e44b:	0f 85 d8 01 00 00    	jne    c000e629 <Computer::displayFeatures()+0x2a9>
c000e451:	b8 3c 6b 02 c0       	mov    eax,0xc0026b3c
c000e456:	83 ec 08             	sub    esp,0x8
c000e459:	50                   	push   eax
c000e45a:	68 a7 6b 02 c0       	push   0xc0026ba7
c000e45f:	e8 cb 3d 00 00       	call   c001222f <Dbg::kprintf(char const*, ...)>
c000e464:	83 c4 10             	add    esp,0x10
c000e467:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000e46e:	0f 85 ab 01 00 00    	jne    c000e61f <Computer::displayFeatures()+0x29f>
c000e474:	b8 3c 6b 02 c0       	mov    eax,0xc0026b3c
c000e479:	83 ec 08             	sub    esp,0x8
c000e47c:	50                   	push   eax
c000e47d:	68 b8 6b 02 c0       	push   0xc0026bb8
c000e482:	e8 a8 3d 00 00       	call   c001222f <Dbg::kprintf(char const*, ...)>
c000e487:	83 c4 10             	add    esp,0x10
c000e48a:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000e491:	0f 88 1b 02 00 00    	js     c000e6b2 <Computer::displayFeatures()+0x332>
c000e497:	b8 3c 6b 02 c0       	mov    eax,0xc0026b3c
c000e49c:	83 ec 08             	sub    esp,0x8
c000e49f:	50                   	push   eax
c000e4a0:	68 c9 6b 02 c0       	push   0xc0026bc9
c000e4a5:	e8 85 3d 00 00       	call   c001222f <Dbg::kprintf(char const*, ...)>
c000e4aa:	83 c4 10             	add    esp,0x10
c000e4ad:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000e4b4:	0f 85 a1 01 00 00    	jne    c000e65b <Computer::displayFeatures()+0x2db>
c000e4ba:	b8 3c 6b 02 c0       	mov    eax,0xc0026b3c
c000e4bf:	83 ec 08             	sub    esp,0x8
c000e4c2:	50                   	push   eax
c000e4c3:	68 da 6b 02 c0       	push   0xc0026bda
c000e4c8:	e8 62 3d 00 00       	call   c001222f <Dbg::kprintf(char const*, ...)>
c000e4cd:	83 c4 10             	add    esp,0x10
c000e4d0:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000e4d7:	0f 85 cb 01 00 00    	jne    c000e6a8 <Computer::displayFeatures()+0x328>
c000e4dd:	b8 3c 6b 02 c0       	mov    eax,0xc0026b3c
c000e4e2:	83 ec 08             	sub    esp,0x8
c000e4e5:	50                   	push   eax
c000e4e6:	68 eb 6b 02 c0       	push   0xc0026beb
c000e4eb:	e8 3f 3d 00 00       	call   c001222f <Dbg::kprintf(char const*, ...)>
c000e4f0:	83 c4 10             	add    esp,0x10
c000e4f3:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000e4fa:	0f 85 9e 01 00 00    	jne    c000e69e <Computer::displayFeatures()+0x31e>
c000e500:	b8 3c 6b 02 c0       	mov    eax,0xc0026b3c
c000e505:	83 ec 08             	sub    esp,0x8
c000e508:	50                   	push   eax
c000e509:	68 fc 6b 02 c0       	push   0xc0026bfc
c000e50e:	e8 1c 3d 00 00       	call   c001222f <Dbg::kprintf(char const*, ...)>
c000e513:	83 c4 10             	add    esp,0x10
c000e516:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000e51d:	0f 85 71 01 00 00    	jne    c000e694 <Computer::displayFeatures()+0x314>
c000e523:	b8 3c 6b 02 c0       	mov    eax,0xc0026b3c
c000e528:	83 ec 08             	sub    esp,0x8
c000e52b:	50                   	push   eax
c000e52c:	68 0d 6c 02 c0       	push   0xc0026c0d
c000e531:	e8 f9 3c 00 00       	call   c001222f <Dbg::kprintf(char const*, ...)>
c000e536:	83 c4 10             	add    esp,0x10
c000e539:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000e540:	0f 85 44 01 00 00    	jne    c000e68a <Computer::displayFeatures()+0x30a>
c000e546:	b8 3c 6b 02 c0       	mov    eax,0xc0026b3c
c000e54b:	83 ec 08             	sub    esp,0x8
c000e54e:	50                   	push   eax
c000e54f:	68 1e 6c 02 c0       	push   0xc0026c1e
c000e554:	e8 d6 3c 00 00       	call   c001222f <Dbg::kprintf(char const*, ...)>
c000e559:	83 c4 10             	add    esp,0x10
c000e55c:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000e563:	0f 85 17 01 00 00    	jne    c000e680 <Computer::displayFeatures()+0x300>
c000e569:	b8 3c 6b 02 c0       	mov    eax,0xc0026b3c
c000e56e:	83 ec 08             	sub    esp,0x8
c000e571:	50                   	push   eax
c000e572:	68 2f 6c 02 c0       	push   0xc0026c2f
c000e577:	e8 b3 3c 00 00       	call   c001222f <Dbg::kprintf(char const*, ...)>
c000e57c:	83 c4 10             	add    esp,0x10
c000e57f:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000e586:	0f 85 ea 00 00 00    	jne    c000e676 <Computer::displayFeatures()+0x2f6>
c000e58c:	b8 3c 6b 02 c0       	mov    eax,0xc0026b3c
c000e591:	83 ec 08             	sub    esp,0x8
c000e594:	50                   	push   eax
c000e595:	68 40 6c 02 c0       	push   0xc0026c40
c000e59a:	e8 90 3c 00 00       	call   c001222f <Dbg::kprintf(char const*, ...)>
c000e59f:	83 c4 10             	add    esp,0x10
c000e5a2:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000e5a9:	0f 88 0d 01 00 00    	js     c000e6bc <Computer::displayFeatures()+0x33c>
c000e5af:	b8 3c 6b 02 c0       	mov    eax,0xc0026b3c
c000e5b4:	83 ec 08             	sub    esp,0x8
c000e5b7:	50                   	push   eax
c000e5b8:	68 51 6c 02 c0       	push   0xc0026c51
c000e5bd:	e8 6d 3c 00 00       	call   c001222f <Dbg::kprintf(char const*, ...)>
c000e5c2:	83 c4 10             	add    esp,0x10
c000e5c5:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000e5cc:	0f 85 9a 00 00 00    	jne    c000e66c <Computer::displayFeatures()+0x2ec>
c000e5d2:	b8 3c 6b 02 c0       	mov    eax,0xc0026b3c
c000e5d7:	83 ec 08             	sub    esp,0x8
c000e5da:	50                   	push   eax
c000e5db:	68 62 6c 02 c0       	push   0xc0026c62
c000e5e0:	e8 4a 3c 00 00       	call   c001222f <Dbg::kprintf(char const*, ...)>
c000e5e5:	83 c4 10             	add    esp,0x10
c000e5e8:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000e5ef:	75 74                	jne    c000e665 <Computer::displayFeatures()+0x2e5>
c000e5f1:	b8 3c 6b 02 c0       	mov    eax,0xc0026b3c
c000e5f6:	83 ec 08             	sub    esp,0x8
c000e5f9:	50                   	push   eax
c000e5fa:	68 73 6c 02 c0       	push   0xc0026c73
c000e5ff:	e8 2b 3c 00 00       	call   c001222f <Dbg::kprintf(char const*, ...)>
c000e604:	c7 44 24 20 9a 82 02 c0 	mov    DWORD PTR [esp+0x20],0xc002829a
c000e60c:	83 c4 18             	add    esp,0x18
c000e60f:	5b                   	pop    ebx
c000e610:	e9 1a 3c 00 00       	jmp    c001222f <Dbg::kprintf(char const*, ...)>
c000e615:	b8 38 6b 02 c0       	mov    eax,0xc0026b38
c000e61a:	e9 88 fd ff ff       	jmp    c000e3a7 <Computer::displayFeatures()+0x27>
c000e61f:	b8 38 6b 02 c0       	mov    eax,0xc0026b38
c000e624:	e9 50 fe ff ff       	jmp    c000e479 <Computer::displayFeatures()+0xf9>
c000e629:	b8 38 6b 02 c0       	mov    eax,0xc0026b38
c000e62e:	e9 23 fe ff ff       	jmp    c000e456 <Computer::displayFeatures()+0xd6>
c000e633:	b8 38 6b 02 c0       	mov    eax,0xc0026b38
c000e638:	e9 f6 fd ff ff       	jmp    c000e433 <Computer::displayFeatures()+0xb3>
c000e63d:	b8 38 6b 02 c0       	mov    eax,0xc0026b38
c000e642:	e9 c9 fd ff ff       	jmp    c000e410 <Computer::displayFeatures()+0x90>
c000e647:	b8 38 6b 02 c0       	mov    eax,0xc0026b38
c000e64c:	e9 9c fd ff ff       	jmp    c000e3ed <Computer::displayFeatures()+0x6d>
c000e651:	b8 38 6b 02 c0       	mov    eax,0xc0026b38
c000e656:	e9 6f fd ff ff       	jmp    c000e3ca <Computer::displayFeatures()+0x4a>
c000e65b:	b8 38 6b 02 c0       	mov    eax,0xc0026b38
c000e660:	e9 5a fe ff ff       	jmp    c000e4bf <Computer::displayFeatures()+0x13f>
c000e665:	b8 38 6b 02 c0       	mov    eax,0xc0026b38
c000e66a:	eb 8a                	jmp    c000e5f6 <Computer::displayFeatures()+0x276>
c000e66c:	b8 38 6b 02 c0       	mov    eax,0xc0026b38
c000e671:	e9 61 ff ff ff       	jmp    c000e5d7 <Computer::displayFeatures()+0x257>
c000e676:	b8 38 6b 02 c0       	mov    eax,0xc0026b38
c000e67b:	e9 11 ff ff ff       	jmp    c000e591 <Computer::displayFeatures()+0x211>
c000e680:	b8 38 6b 02 c0       	mov    eax,0xc0026b38
c000e685:	e9 e4 fe ff ff       	jmp    c000e56e <Computer::displayFeatures()+0x1ee>
c000e68a:	b8 38 6b 02 c0       	mov    eax,0xc0026b38
c000e68f:	e9 b7 fe ff ff       	jmp    c000e54b <Computer::displayFeatures()+0x1cb>
c000e694:	b8 38 6b 02 c0       	mov    eax,0xc0026b38
c000e699:	e9 8a fe ff ff       	jmp    c000e528 <Computer::displayFeatures()+0x1a8>
c000e69e:	b8 38 6b 02 c0       	mov    eax,0xc0026b38
c000e6a3:	e9 5d fe ff ff       	jmp    c000e505 <Computer::displayFeatures()+0x185>
c000e6a8:	b8 38 6b 02 c0       	mov    eax,0xc0026b38
c000e6ad:	e9 30 fe ff ff       	jmp    c000e4e2 <Computer::displayFeatures()+0x162>
c000e6b2:	b8 38 6b 02 c0       	mov    eax,0xc0026b38
c000e6b7:	e9 e0 fd ff ff       	jmp    c000e49c <Computer::displayFeatures()+0x11c>
c000e6bc:	b8 38 6b 02 c0       	mov    eax,0xc0026b38
c000e6c1:	e9 ee fe ff ff       	jmp    c000e5b4 <Computer::displayFeatures()+0x234>

c000e6c6 <Computer::rdmsr(unsigned int)>:
c000e6c6:	83 ec 0c             	sub    esp,0xc
c000e6c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6cd:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000e6d4:	74 0a                	je     c000e6e0 <Computer::rdmsr(unsigned int)+0x1a>
c000e6d6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e6da:	0f 32                	rdmsr  
c000e6dc:	83 c4 0c             	add    esp,0xc
c000e6df:	c3                   	ret    
c000e6e0:	83 ec 0c             	sub    esp,0xc
c000e6e3:	68 84 6c 02 c0       	push   0xc0026c84
c000e6e8:	e8 ba a3 00 00       	call   c0018aa7 <Krnl::panic(char const*)>
c000e6ed:	83 c4 10             	add    esp,0x10
c000e6f0:	eb e4                	jmp    c000e6d6 <Computer::rdmsr(unsigned int)+0x10>

c000e6f2 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000e6f2:	57                   	push   edi
c000e6f3:	56                   	push   esi
c000e6f4:	52                   	push   edx
c000e6f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6f9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e6fd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e701:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000e708:	74 0e                	je     c000e718 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000e70a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e70e:	89 f0                	mov    eax,esi
c000e710:	89 fa                	mov    edx,edi
c000e712:	0f 30                	wrmsr  
c000e714:	58                   	pop    eax
c000e715:	5e                   	pop    esi
c000e716:	5f                   	pop    edi
c000e717:	c3                   	ret    
c000e718:	83 ec 0c             	sub    esp,0xc
c000e71b:	68 8a 6c 02 c0       	push   0xc0026c8a
c000e720:	e8 82 a3 00 00       	call   c0018aa7 <Krnl::panic(char const*)>
c000e725:	83 c4 10             	add    esp,0x10
c000e728:	eb e0                	jmp    c000e70a <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000e72a <Computer::nmiEnabled()>:
c000e72a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e72e:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000e734:	c3                   	ret    
c000e735:	90                   	nop

c000e736 <Computer::readCMOS(unsigned char)>:
c000e736:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e73a:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000e741:	19 c0                	sbb    eax,eax
c000e743:	83 e0 80             	and    eax,0xffffff80
c000e746:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000e74a:	e6 70                	out    0x70,al
c000e74c:	e4 71                	in     al,0x71
c000e74e:	c3                   	ret    
c000e74f:	90                   	nop

c000e750 <Computer::enableNMI(bool)>:
c000e750:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e754:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e758:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000e75e:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000e766:	eb ce                	jmp    c000e736 <Computer::readCMOS(unsigned char)>

c000e768 <Computer::open(int, int, void*)>:
c000e768:	56                   	push   esi
c000e769:	53                   	push   ebx
c000e76a:	83 ec 10             	sub    esp,0x10
c000e76d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e771:	f6 05 40 a6 02 c0 04 	test   BYTE PTR ds:0xc002a640,0x4
c000e778:	68 68 22 00 00       	push   0x2268
c000e77d:	0f 94 05 e0 95 02 c0 	sete   BYTE PTR ds:0xc00295e0
c000e784:	e8 b7 39 00 00       	call   c0012140 <operator new(unsigned long)>
c000e789:	89 04 24             	mov    DWORD PTR [esp],eax
c000e78c:	89 c6                	mov    esi,eax
c000e78e:	e8 2b 87 00 00       	call   c0016ebe <ACPI::ACPI()>
c000e793:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000e799:	58                   	pop    eax
c000e79a:	5a                   	pop    edx
c000e79b:	56                   	push   esi
c000e79c:	53                   	push   ebx
c000e79d:	e8 98 4e 00 00       	call   c001363a <Device::addChild(Device*)>
c000e7a2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e7a5:	e8 cc f9 ff ff       	call   c000e176 <Computer::detectFeatures()>
c000e7aa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e7ad:	e8 ce fb ff ff       	call   c000e380 <Computer::displayFeatures()>
c000e7b2:	59                   	pop    ecx
c000e7b3:	5e                   	pop    esi
c000e7b4:	6a 01                	push   0x1
c000e7b6:	53                   	push   ebx
c000e7b7:	e8 94 ff ff ff       	call   c000e750 <Computer::enableNMI(bool)>
c000e7bc:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000e7c3:	e8 78 39 00 00       	call   c0012140 <operator new(unsigned long)>
c000e7c8:	89 04 24             	mov    DWORD PTR [esp],eax
c000e7cb:	89 c6                	mov    esi,eax
c000e7cd:	e8 66 91 00 00       	call   c0017938 <CPU::CPU()>
c000e7d2:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000e7d8:	58                   	pop    eax
c000e7d9:	5a                   	pop    edx
c000e7da:	56                   	push   esi
c000e7db:	53                   	push   ebx
c000e7dc:	e8 59 4e 00 00       	call   c001363a <Device::addChild(Device*)>
c000e7e1:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e7e7:	8b 10                	mov    edx,DWORD PTR [eax]
c000e7e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e7ed:	6a 00                	push   0x0
c000e7ef:	6a 00                	push   0x0
c000e7f1:	50                   	push   eax
c000e7f2:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e7f5:	83 c4 20             	add    esp,0x20
c000e7f8:	e8 a5 53 00 00       	call   c0013ba2 <setupFPU()>
c000e7fd:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000e803:	85 c0                	test   eax,eax
c000e805:	74 1f                	je     c000e826 <Computer::open(int, int, void*)+0xbe>
c000e807:	83 ec 08             	sub    esp,0x8
c000e80a:	50                   	push   eax
c000e80b:	53                   	push   ebx
c000e80c:	e8 29 4e 00 00       	call   c001363a <Device::addChild(Device*)>
c000e811:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000e817:	8b 10                	mov    edx,DWORD PTR [eax]
c000e819:	6a 00                	push   0x0
c000e81b:	6a 00                	push   0x0
c000e81d:	6a 00                	push   0x0
c000e81f:	50                   	push   eax
c000e820:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e823:	83 c4 20             	add    esp,0x20
c000e826:	83 ec 0c             	sub    esp,0xc
c000e829:	68 68 e1 00 c0       	push   0xc000e168
c000e82e:	e8 f1 d3 00 00       	call   c001bc24 <setupMultitasking(void (*)())>
c000e833:	83 c4 14             	add    esp,0x14
c000e836:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e83b:	5b                   	pop    ebx
c000e83c:	5e                   	pop    esi
c000e83d:	c3                   	ret    

c000e83e <Computer::disableNMI()>:
c000e83e:	6a 00                	push   0x0
c000e840:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e844:	e8 07 ff ff ff       	call   c000e750 <Computer::enableNMI(bool)>
c000e849:	58                   	pop    eax
c000e84a:	5a                   	pop    edx
c000e84b:	c3                   	ret    

c000e84c <Computer::writeCMOS(unsigned char, unsigned char)>:
c000e84c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e850:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000e857:	19 c0                	sbb    eax,eax
c000e859:	83 e0 80             	and    eax,0xffffff80
c000e85c:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000e860:	e6 70                	out    0x70,al
c000e862:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e866:	e6 71                	out    0x71,al
c000e868:	c3                   	ret    
c000e869:	90                   	nop

c000e86a <Computer::handleNMI()>:
c000e86a:	56                   	push   esi
c000e86b:	53                   	push   ebx
c000e86c:	83 ec 10             	sub    esp,0x10
c000e86f:	e4 92                	in     al,0x92
c000e871:	89 c6                	mov    esi,eax
c000e873:	e4 61                	in     al,0x61
c000e875:	68 90 6c 02 c0       	push   0xc0026c90
c000e87a:	88 c3                	mov    bl,al
c000e87c:	e8 ae 39 00 00       	call   c001222f <Dbg::kprintf(char const*, ...)>
c000e881:	83 c4 10             	add    esp,0x10
c000e884:	83 e6 10             	and    esi,0x10
c000e887:	75 0d                	jne    c000e896 <Computer::handleNMI()+0x2c>
c000e889:	f6 c3 40             	test   bl,0x40
c000e88c:	75 1d                	jne    c000e8ab <Computer::handleNMI()+0x41>
c000e88e:	84 db                	test   bl,bl
c000e890:	78 2d                	js     c000e8bf <Computer::handleNMI()+0x55>
c000e892:	58                   	pop    eax
c000e893:	5b                   	pop    ebx
c000e894:	5e                   	pop    esi
c000e895:	c3                   	ret    
c000e896:	83 ec 0c             	sub    esp,0xc
c000e899:	68 a1 6c 02 c0       	push   0xc0026ca1
c000e89e:	e8 04 a2 00 00       	call   c0018aa7 <Krnl::panic(char const*)>
c000e8a3:	83 c4 10             	add    esp,0x10
c000e8a6:	f6 c3 40             	test   bl,0x40
c000e8a9:	74 e3                	je     c000e88e <Computer::handleNMI()+0x24>
c000e8ab:	83 ec 0c             	sub    esp,0xc
c000e8ae:	68 ae 6c 02 c0       	push   0xc0026cae
c000e8b3:	e8 ef a1 00 00       	call   c0018aa7 <Krnl::panic(char const*)>
c000e8b8:	83 c4 10             	add    esp,0x10
c000e8bb:	84 db                	test   bl,bl
c000e8bd:	79 d3                	jns    c000e892 <Computer::handleNMI()+0x28>
c000e8bf:	c7 44 24 10 b8 6c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0026cb8
c000e8c7:	5a                   	pop    edx
c000e8c8:	5b                   	pop    ebx
c000e8c9:	5e                   	pop    esi
c000e8ca:	e9 d8 a1 00 00       	jmp    c0018aa7 <Krnl::panic(char const*)>
c000e8cf:	90                   	nop

c000e8d0 <Computer::setDiskActivityLight(int, bool)>:
c000e8d0:	56                   	push   esi
c000e8d1:	53                   	push   ebx
c000e8d2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e8d6:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000e8db:	77 1b                	ja     c000e8f8 <Computer::setDiskActivityLight(int, bool)+0x28>
c000e8dd:	e4 92                	in     al,0x92
c000e8df:	bb 40 00 00 00       	mov    ebx,0x40
c000e8e4:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000e8e8:	89 da                	mov    edx,ebx
c000e8ea:	d3 e2                	shl    edx,cl
c000e8ec:	89 f1                	mov    ecx,esi
c000e8ee:	f7 d2                	not    edx
c000e8f0:	d3 e3                	shl    ebx,cl
c000e8f2:	21 d0                	and    eax,edx
c000e8f4:	09 d8                	or     eax,ebx
c000e8f6:	e6 92                	out    0x92,al
c000e8f8:	5b                   	pop    ebx
c000e8f9:	5e                   	pop    esi
c000e8fa:	c3                   	ret    
c000e8fb:	90                   	nop

c000e8fc <GDTEntry::setBase(unsigned int)>:
c000e8fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e900:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e904:	89 c1                	mov    ecx,eax
c000e906:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000e90a:	c1 e9 10             	shr    ecx,0x10
c000e90d:	c1 e8 18             	shr    eax,0x18
c000e910:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000e913:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000e916:	c3                   	ret    
c000e917:	90                   	nop

c000e918 <GDTEntry::setLimit(unsigned int)>:
c000e918:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000e91c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e920:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000e923:	66 89 01             	mov    WORD PTR [ecx],ax
c000e926:	83 e2 f0             	and    edx,0xfffffff0
c000e929:	c1 e8 10             	shr    eax,0x10
c000e92c:	83 e0 0f             	and    eax,0xf
c000e92f:	09 d0                	or     eax,edx
c000e931:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000e934:	c3                   	ret    
c000e935:	90                   	nop

c000e936 <GDT::GDT()>:
c000e936:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e93a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e940:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e944:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e94a:	90                   	nop
c000e94b:	c3                   	ret    

c000e94c <GDT::addEntry(GDTEntry)>:
c000e94c:	53                   	push   ebx
c000e94d:	83 ec 0c             	sub    esp,0xc
c000e950:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e954:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e956:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e95d:	52                   	push   edx
c000e95e:	50                   	push   eax
c000e95f:	68 f4 6c 02 c0       	push   0xc0026cf4
c000e964:	e8 c6 38 00 00       	call   c001222f <Dbg::kprintf(char const*, ...)>
c000e969:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e96b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e96f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e973:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000e977:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000e97b:	8d 50 01             	lea    edx,[eax+0x1]
c000e97e:	c1 e0 03             	shl    eax,0x3
c000e981:	89 13                	mov    DWORD PTR [ebx],edx
c000e983:	83 c4 18             	add    esp,0x18
c000e986:	5b                   	pop    ebx
c000e987:	c3                   	ret    

c000e988 <GDT::getNumberOfEntries()>:
c000e988:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e98c:	8b 00                	mov    eax,DWORD PTR [eax]
c000e98e:	c3                   	ret    
c000e98f:	90                   	nop

c000e990 <GDT::flush()>:
c000e990:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e994:	8b 10                	mov    edx,DWORD PTR [eax]
c000e996:	83 c0 04             	add    eax,0x4
c000e999:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000e9a0:	a3 32 a6 02 c0       	mov    ds:0xc002a632,eax
c000e9a5:	66 89 15 30 a6 02 c0 	mov    WORD PTR ds:0xc002a630,dx
c000e9ac:	e9 4e 1a ff ff       	jmp    c00003ff <loadGDT>
c000e9b1:	90                   	nop

c000e9b2 <GDT::setup()>:
c000e9b2:	55                   	push   ebp
c000e9b3:	57                   	push   edi
c000e9b4:	56                   	push   esi
c000e9b5:	53                   	push   ebx
c000e9b6:	83 ec 3c             	sub    esp,0x3c
c000e9b9:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000e9bd:	6a 00                	push   0x0
c000e9bf:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000e9c3:	53                   	push   ebx
c000e9c4:	e8 33 ff ff ff       	call   c000e8fc <GDTEntry::setBase(unsigned int)>
c000e9c9:	6a 00                	push   0x0
c000e9cb:	53                   	push   ebx
c000e9cc:	e8 47 ff ff ff       	call   c000e918 <GDTEntry::setLimit(unsigned int)>
c000e9d1:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000e9d9:	6a 00                	push   0x0
c000e9db:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000e9df:	53                   	push   ebx
c000e9e0:	e8 17 ff ff ff       	call   c000e8fc <GDTEntry::setBase(unsigned int)>
c000e9e5:	68 ff ff ff 00       	push   0xffffff
c000e9ea:	53                   	push   ebx
c000e9eb:	e8 28 ff ff ff       	call   c000e918 <GDTEntry::setLimit(unsigned int)>
c000e9f0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e9f4:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000e9f9:	0d 00 9a c0 00       	or     eax,0xc09a00
c000e9fe:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ea02:	83 c4 20             	add    esp,0x20
c000ea05:	6a 00                	push   0x0
c000ea07:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000ea0b:	53                   	push   ebx
c000ea0c:	e8 eb fe ff ff       	call   c000e8fc <GDTEntry::setBase(unsigned int)>
c000ea11:	68 ff ff ff 00       	push   0xffffff
c000ea16:	53                   	push   ebx
c000ea17:	e8 fc fe ff ff       	call   c000e918 <GDTEntry::setLimit(unsigned int)>
c000ea1c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ea20:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ea24:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ea28:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000ea2c:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ea30:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ea35:	0d 00 92 c0 00       	or     eax,0xc09200
c000ea3a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ea3e:	89 d8                	mov    eax,ebx
c000ea40:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000ea44:	80 cc 60             	or     ah,0x60
c000ea47:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ea4b:	83 c4 0c             	add    esp,0xc
c000ea4e:	89 f8                	mov    eax,edi
c000ea50:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ea54:	80 cc 60             	or     ah,0x60
c000ea57:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ea5b:	89 c7                	mov    edi,eax
c000ea5d:	55                   	push   ebp
c000ea5e:	e8 e9 fe ff ff       	call   c000e94c <GDT::addEntry(GDTEntry)>
c000ea63:	83 c4 0c             	add    esp,0xc
c000ea66:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ea6a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ea6e:	55                   	push   ebp
c000ea6f:	e8 d8 fe ff ff       	call   c000e94c <GDT::addEntry(GDTEntry)>
c000ea74:	83 c4 0c             	add    esp,0xc
c000ea77:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ea7b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ea7f:	55                   	push   ebp
c000ea80:	e8 c7 fe ff ff       	call   c000e94c <GDT::addEntry(GDTEntry)>
c000ea85:	83 c4 0c             	add    esp,0xc
c000ea88:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ea8c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ea90:	53                   	push   ebx
c000ea91:	51                   	push   ecx
c000ea92:	55                   	push   ebp
c000ea93:	e8 b4 fe ff ff       	call   c000e94c <GDT::addEntry(GDTEntry)>
c000ea98:	83 c4 0c             	add    esp,0xc
c000ea9b:	57                   	push   edi
c000ea9c:	56                   	push   esi
c000ea9d:	55                   	push   ebp
c000ea9e:	e8 a9 fe ff ff       	call   c000e94c <GDT::addEntry(GDTEntry)>
c000eaa3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000eaa6:	e8 e5 fe ff ff       	call   c000e990 <GDT::flush()>
c000eaab:	83 c4 4c             	add    esp,0x4c
c000eaae:	5b                   	pop    ebx
c000eaaf:	5e                   	pop    esi
c000eab0:	5f                   	pop    edi
c000eab1:	5d                   	pop    ebp
c000eab2:	c3                   	ret    

c000eab3 <idleFunction(void*)>:
c000eab3:	53                   	push   ebx
c000eab4:	83 ec 08             	sub    esp,0x8
c000eab7:	e8 40 cf 00 00       	call   c001b9fc <unlockScheduler()>
c000eabc:	e8 7f 67 01 00       	call   c0025240 <CPU::current()>
c000eac1:	f6 80 92 11 00 00 04 	test   BYTE PTR [eax+0x1192],0x4
c000eac8:	74 41                	je     c000eb0b <idleFunction(void*)+0x58>
c000eaca:	a1 28 a6 02 c0       	mov    eax,ds:0xc002a628
c000eacf:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ead6:	74 33                	je     c000eb0b <idleFunction(void*)+0x58>
c000ead8:	31 db                	xor    ebx,ebx
c000eada:	52                   	push   edx
c000eadb:	52                   	push   edx
c000eadc:	68 e1 00 00 00       	push   0xe1
c000eae1:	50                   	push   eax
c000eae2:	e8 df fb ff ff       	call   c000e6c6 <Computer::rdmsr(unsigned int)>
c000eae7:	53                   	push   ebx
c000eae8:	83 e0 02             	and    eax,0x2
c000eaeb:	50                   	push   eax
c000eaec:	68 e1 00 00 00       	push   0xe1
c000eaf1:	ff 35 28 a6 02 c0    	push   DWORD PTR ds:0xc002a628
c000eaf7:	e8 f6 fb ff ff       	call   c000e6f2 <Computer::wrmsr(unsigned int, unsigned long long)>
c000eafc:	83 c4 20             	add    esp,0x20
c000eaff:	e8 30 17 ff ff       	call   c0000234 <doTPAUSE>
c000eb04:	e8 43 67 01 00       	call   c002524c <idleCommon()>
c000eb09:	eb f4                	jmp    c000eaff <idleFunction(void*)+0x4c>
c000eb0b:	fb                   	sti    
c000eb0c:	f4                   	hlt    
c000eb0d:	e8 3a 67 01 00       	call   c002524c <idleCommon()>
c000eb12:	eb f7                	jmp    c000eb0b <idleFunction(void*)+0x58>

c000eb14 <IDTEntry::IDTEntry(bool)>:
c000eb14:	83 ec 04             	sub    esp,0x4
c000eb17:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eb1b:	88 04 24             	mov    BYTE PTR [esp],al
c000eb1e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb22:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000eb28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb2c:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000eb30:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb34:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eb37:	83 e2 f0             	and    edx,0xfffffff0
c000eb3a:	83 ca 0e             	or     edx,0xe
c000eb3d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eb40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb44:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eb47:	83 e2 ef             	and    edx,0xffffffef
c000eb4a:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eb4d:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000eb51:	74 04                	je     c000eb57 <IDTEntry::IDTEntry(bool)+0x43>
c000eb53:	b2 03                	mov    dl,0x3
c000eb55:	eb 02                	jmp    c000eb59 <IDTEntry::IDTEntry(bool)+0x45>
c000eb57:	b2 00                	mov    dl,0x0
c000eb59:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb5d:	83 e2 03             	and    edx,0x3
c000eb60:	88 d1                	mov    cl,dl
c000eb62:	c1 e1 05             	shl    ecx,0x5
c000eb65:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eb68:	83 e2 9f             	and    edx,0xffffff9f
c000eb6b:	09 ca                	or     edx,ecx
c000eb6d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eb70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb74:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eb77:	83 ca 80             	or     edx,0xffffff80
c000eb7a:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eb7d:	90                   	nop
c000eb7e:	83 c4 04             	add    esp,0x4
c000eb81:	c3                   	ret    

c000eb82 <IDTEntry::setOffset(unsigned int)>:
c000eb82:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000eb86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb8a:	66 89 02             	mov    WORD PTR [edx],ax
c000eb8d:	c1 e8 10             	shr    eax,0x10
c000eb90:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000eb94:	c3                   	ret    
c000eb95:	90                   	nop

c000eb96 <IDT::IDT()>:
c000eb96:	90                   	nop
c000eb97:	c3                   	ret    

c000eb98 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000eb98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eb9c:	83 c0 30             	add    eax,0x30
c000eb9f:	c3                   	ret    

c000eba0 <IDT::addEntry(IDTEntry, int)>:
c000eba0:	53                   	push   ebx
c000eba1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eba5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000eba9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ebad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ebb1:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000ebb4:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000ebb8:	5b                   	pop    ebx
c000ebb9:	c3                   	ret    

c000ebba <IDT::addEntry(int, void (*)(), bool)>:
c000ebba:	53                   	push   ebx
c000ebbb:	83 ec 10             	sub    esp,0x10
c000ebbe:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000ebc3:	50                   	push   eax
c000ebc4:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000ebc8:	53                   	push   ebx
c000ebc9:	e8 46 ff ff ff       	call   c000eb14 <IDTEntry::IDTEntry(bool)>
c000ebce:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ebd2:	53                   	push   ebx
c000ebd3:	e8 aa ff ff ff       	call   c000eb82 <IDTEntry::setOffset(unsigned int)>
c000ebd8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ebdc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ebe0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ebe4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ebe8:	e8 b3 ff ff ff       	call   c000eba0 <IDT::addEntry(IDTEntry, int)>
c000ebed:	83 c4 30             	add    esp,0x30
c000ebf0:	5b                   	pop    ebx
c000ebf1:	c3                   	ret    

c000ebf2 <IDT::flush()>:
c000ebf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebf6:	66 c7 05 38 a6 02 c0 ff 07 	mov    WORD PTR ds:0xc002a638,0x7ff
c000ebff:	a3 3a a6 02 c0       	mov    ds:0xc002a63a,eax
c000ec04:	0f 01 1d 38 a6 02 c0 	lidtd  ds:0xc002a638
c000ec0b:	c3                   	ret    

c000ec0c <IDT::setup()>:
c000ec0c:	57                   	push   edi
c000ec0d:	56                   	push   esi
c000ec0e:	53                   	push   ebx
c000ec0f:	83 ec 10             	sub    esp,0x10
c000ec12:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ec16:	6a 00                	push   0x0
c000ec18:	68 1f 04 00 c0       	push   0xc000041f
c000ec1d:	6a 00                	push   0x0
c000ec1f:	53                   	push   ebx
c000ec20:	e8 95 ff ff ff       	call   c000ebba <IDT::addEntry(int, void (*)(), bool)>
c000ec25:	6a 00                	push   0x0
c000ec27:	68 2f 04 00 c0       	push   0xc000042f
c000ec2c:	6a 01                	push   0x1
c000ec2e:	53                   	push   ebx
c000ec2f:	e8 86 ff ff ff       	call   c000ebba <IDT::addEntry(int, void (*)(), bool)>
c000ec34:	83 c4 20             	add    esp,0x20
c000ec37:	6a 00                	push   0x0
c000ec39:	68 39 04 00 c0       	push   0xc0000439
c000ec3e:	6a 02                	push   0x2
c000ec40:	53                   	push   ebx
c000ec41:	e8 74 ff ff ff       	call   c000ebba <IDT::addEntry(int, void (*)(), bool)>
c000ec46:	6a 00                	push   0x0
c000ec48:	68 43 04 00 c0       	push   0xc0000443
c000ec4d:	6a 03                	push   0x3
c000ec4f:	53                   	push   ebx
c000ec50:	e8 65 ff ff ff       	call   c000ebba <IDT::addEntry(int, void (*)(), bool)>
c000ec55:	83 c4 20             	add    esp,0x20
c000ec58:	6a 00                	push   0x0
c000ec5a:	68 4d 04 00 c0       	push   0xc000044d
c000ec5f:	6a 04                	push   0x4
c000ec61:	53                   	push   ebx
c000ec62:	e8 53 ff ff ff       	call   c000ebba <IDT::addEntry(int, void (*)(), bool)>
c000ec67:	6a 00                	push   0x0
c000ec69:	68 57 04 00 c0       	push   0xc0000457
c000ec6e:	6a 05                	push   0x5
c000ec70:	53                   	push   ebx
c000ec71:	e8 44 ff ff ff       	call   c000ebba <IDT::addEntry(int, void (*)(), bool)>
c000ec76:	83 c4 20             	add    esp,0x20
c000ec79:	6a 00                	push   0x0
c000ec7b:	68 61 04 00 c0       	push   0xc0000461
c000ec80:	6a 06                	push   0x6
c000ec82:	53                   	push   ebx
c000ec83:	e8 32 ff ff ff       	call   c000ebba <IDT::addEntry(int, void (*)(), bool)>
c000ec88:	6a 00                	push   0x0
c000ec8a:	68 6b 04 00 c0       	push   0xc000046b
c000ec8f:	6a 07                	push   0x7
c000ec91:	53                   	push   ebx
c000ec92:	e8 23 ff ff ff       	call   c000ebba <IDT::addEntry(int, void (*)(), bool)>
c000ec97:	83 c4 20             	add    esp,0x20
c000ec9a:	6a 00                	push   0x0
c000ec9c:	68 75 04 00 c0       	push   0xc0000475
c000eca1:	6a 08                	push   0x8
c000eca3:	53                   	push   ebx
c000eca4:	e8 11 ff ff ff       	call   c000ebba <IDT::addEntry(int, void (*)(), bool)>
c000eca9:	6a 00                	push   0x0
c000ecab:	68 7d 04 00 c0       	push   0xc000047d
c000ecb0:	6a 09                	push   0x9
c000ecb2:	53                   	push   ebx
c000ecb3:	e8 02 ff ff ff       	call   c000ebba <IDT::addEntry(int, void (*)(), bool)>
c000ecb8:	83 c4 20             	add    esp,0x20
c000ecbb:	6a 00                	push   0x0
c000ecbd:	68 87 04 00 c0       	push   0xc0000487
c000ecc2:	6a 0a                	push   0xa
c000ecc4:	53                   	push   ebx
c000ecc5:	e8 f0 fe ff ff       	call   c000ebba <IDT::addEntry(int, void (*)(), bool)>
c000ecca:	6a 00                	push   0x0
c000eccc:	68 8f 04 00 c0       	push   0xc000048f
c000ecd1:	6a 0b                	push   0xb
c000ecd3:	53                   	push   ebx
c000ecd4:	e8 e1 fe ff ff       	call   c000ebba <IDT::addEntry(int, void (*)(), bool)>
c000ecd9:	83 c4 20             	add    esp,0x20
c000ecdc:	6a 00                	push   0x0
c000ecde:	68 97 04 00 c0       	push   0xc0000497
c000ece3:	6a 0c                	push   0xc
c000ece5:	53                   	push   ebx
c000ece6:	e8 cf fe ff ff       	call   c000ebba <IDT::addEntry(int, void (*)(), bool)>
c000eceb:	6a 00                	push   0x0
c000eced:	68 9f 04 00 c0       	push   0xc000049f
c000ecf2:	6a 0d                	push   0xd
c000ecf4:	53                   	push   ebx
c000ecf5:	e8 c0 fe ff ff       	call   c000ebba <IDT::addEntry(int, void (*)(), bool)>
c000ecfa:	83 c4 20             	add    esp,0x20
c000ecfd:	6a 00                	push   0x0
c000ecff:	68 a7 04 00 c0       	push   0xc00004a7
c000ed04:	6a 0e                	push   0xe
c000ed06:	53                   	push   ebx
c000ed07:	e8 ae fe ff ff       	call   c000ebba <IDT::addEntry(int, void (*)(), bool)>
c000ed0c:	6a 00                	push   0x0
c000ed0e:	68 af 04 00 c0       	push   0xc00004af
c000ed13:	6a 0f                	push   0xf
c000ed15:	53                   	push   ebx
c000ed16:	e8 9f fe ff ff       	call   c000ebba <IDT::addEntry(int, void (*)(), bool)>
c000ed1b:	83 c4 20             	add    esp,0x20
c000ed1e:	6a 00                	push   0x0
c000ed20:	68 b9 04 00 c0       	push   0xc00004b9
c000ed25:	6a 10                	push   0x10
c000ed27:	53                   	push   ebx
c000ed28:	e8 8d fe ff ff       	call   c000ebba <IDT::addEntry(int, void (*)(), bool)>
c000ed2d:	6a 00                	push   0x0
c000ed2f:	68 c3 04 00 c0       	push   0xc00004c3
c000ed34:	6a 11                	push   0x11
c000ed36:	53                   	push   ebx
c000ed37:	e8 7e fe ff ff       	call   c000ebba <IDT::addEntry(int, void (*)(), bool)>
c000ed3c:	83 c4 20             	add    esp,0x20
c000ed3f:	6a 00                	push   0x0
c000ed41:	68 cd 04 00 c0       	push   0xc00004cd
c000ed46:	6a 12                	push   0x12
c000ed48:	53                   	push   ebx
c000ed49:	e8 6c fe ff ff       	call   c000ebba <IDT::addEntry(int, void (*)(), bool)>
c000ed4e:	6a 01                	push   0x1
c000ed50:	68 67 05 00 c0       	push   0xc0000567
c000ed55:	6a 60                	push   0x60
c000ed57:	53                   	push   ebx
c000ed58:	e8 5d fe ff ff       	call   c000ebba <IDT::addEntry(int, void (*)(), bool)>
c000ed5d:	83 c4 20             	add    esp,0x20
c000ed60:	6a 00                	push   0x0
c000ed62:	68 6e 05 00 c0       	push   0xc000056e
c000ed67:	6a 20                	push   0x20
c000ed69:	53                   	push   ebx
c000ed6a:	e8 4b fe ff ff       	call   c000ebba <IDT::addEntry(int, void (*)(), bool)>
c000ed6f:	6a 00                	push   0x0
c000ed71:	68 59 05 00 c0       	push   0xc0000559
c000ed76:	6a 21                	push   0x21
c000ed78:	53                   	push   ebx
c000ed79:	e8 3c fe ff ff       	call   c000ebba <IDT::addEntry(int, void (*)(), bool)>
c000ed7e:	83 c4 20             	add    esp,0x20
c000ed81:	6a 00                	push   0x0
c000ed83:	68 60 05 00 c0       	push   0xc0000560
c000ed88:	6a 22                	push   0x22
c000ed8a:	53                   	push   ebx
c000ed8b:	e8 2a fe ff ff       	call   c000ebba <IDT::addEntry(int, void (*)(), bool)>
c000ed90:	6a 00                	push   0x0
c000ed92:	68 d7 04 00 c0       	push   0xc00004d7
c000ed97:	6a 23                	push   0x23
c000ed99:	53                   	push   ebx
c000ed9a:	e8 1b fe ff ff       	call   c000ebba <IDT::addEntry(int, void (*)(), bool)>
c000ed9f:	83 c4 20             	add    esp,0x20
c000eda2:	6a 00                	push   0x0
c000eda4:	68 e1 04 00 c0       	push   0xc00004e1
c000eda9:	6a 24                	push   0x24
c000edab:	53                   	push   ebx
c000edac:	e8 09 fe ff ff       	call   c000ebba <IDT::addEntry(int, void (*)(), bool)>
c000edb1:	6a 00                	push   0x0
c000edb3:	68 eb 04 00 c0       	push   0xc00004eb
c000edb8:	6a 25                	push   0x25
c000edba:	53                   	push   ebx
c000edbb:	e8 fa fd ff ff       	call   c000ebba <IDT::addEntry(int, void (*)(), bool)>
c000edc0:	83 c4 20             	add    esp,0x20
c000edc3:	6a 00                	push   0x0
c000edc5:	68 f5 04 00 c0       	push   0xc00004f5
c000edca:	6a 26                	push   0x26
c000edcc:	53                   	push   ebx
c000edcd:	e8 e8 fd ff ff       	call   c000ebba <IDT::addEntry(int, void (*)(), bool)>
c000edd2:	6a 00                	push   0x0
c000edd4:	68 ff 04 00 c0       	push   0xc00004ff
c000edd9:	6a 27                	push   0x27
c000eddb:	53                   	push   ebx
c000eddc:	e8 d9 fd ff ff       	call   c000ebba <IDT::addEntry(int, void (*)(), bool)>
c000ede1:	83 c4 20             	add    esp,0x20
c000ede4:	6a 00                	push   0x0
c000ede6:	68 09 05 00 c0       	push   0xc0000509
c000edeb:	6a 28                	push   0x28
c000eded:	53                   	push   ebx
c000edee:	e8 c7 fd ff ff       	call   c000ebba <IDT::addEntry(int, void (*)(), bool)>
c000edf3:	6a 00                	push   0x0
c000edf5:	68 13 05 00 c0       	push   0xc0000513
c000edfa:	6a 29                	push   0x29
c000edfc:	53                   	push   ebx
c000edfd:	e8 b8 fd ff ff       	call   c000ebba <IDT::addEntry(int, void (*)(), bool)>
c000ee02:	83 c4 20             	add    esp,0x20
c000ee05:	6a 00                	push   0x0
c000ee07:	68 1d 05 00 c0       	push   0xc000051d
c000ee0c:	6a 2a                	push   0x2a
c000ee0e:	53                   	push   ebx
c000ee0f:	e8 a6 fd ff ff       	call   c000ebba <IDT::addEntry(int, void (*)(), bool)>
c000ee14:	6a 00                	push   0x0
c000ee16:	68 27 05 00 c0       	push   0xc0000527
c000ee1b:	6a 2b                	push   0x2b
c000ee1d:	53                   	push   ebx
c000ee1e:	e8 97 fd ff ff       	call   c000ebba <IDT::addEntry(int, void (*)(), bool)>
c000ee23:	83 c4 20             	add    esp,0x20
c000ee26:	6a 00                	push   0x0
c000ee28:	68 31 05 00 c0       	push   0xc0000531
c000ee2d:	6a 2c                	push   0x2c
c000ee2f:	53                   	push   ebx
c000ee30:	e8 85 fd ff ff       	call   c000ebba <IDT::addEntry(int, void (*)(), bool)>
c000ee35:	6a 00                	push   0x0
c000ee37:	68 3b 05 00 c0       	push   0xc000053b
c000ee3c:	6a 2d                	push   0x2d
c000ee3e:	53                   	push   ebx
c000ee3f:	e8 76 fd ff ff       	call   c000ebba <IDT::addEntry(int, void (*)(), bool)>
c000ee44:	83 c4 20             	add    esp,0x20
c000ee47:	6a 00                	push   0x0
c000ee49:	68 45 05 00 c0       	push   0xc0000545
c000ee4e:	6a 2e                	push   0x2e
c000ee50:	53                   	push   ebx
c000ee51:	e8 64 fd ff ff       	call   c000ebba <IDT::addEntry(int, void (*)(), bool)>
c000ee56:	6a 00                	push   0x0
c000ee58:	68 4f 05 00 c0       	push   0xc000054f
c000ee5d:	6a 2f                	push   0x2f
c000ee5f:	53                   	push   ebx
c000ee60:	e8 55 fd ff ff       	call   c000ebba <IDT::addEntry(int, void (*)(), bool)>
c000ee65:	83 c4 20             	add    esp,0x20
c000ee68:	6a 00                	push   0x0
c000ee6a:	68 94 05 00 c0       	push   0xc0000594
c000ee6f:	6a 30                	push   0x30
c000ee71:	53                   	push   ebx
c000ee72:	e8 43 fd ff ff       	call   c000ebba <IDT::addEntry(int, void (*)(), bool)>
c000ee77:	6a 00                	push   0x0
c000ee79:	68 9e 05 00 c0       	push   0xc000059e
c000ee7e:	6a 31                	push   0x31
c000ee80:	53                   	push   ebx
c000ee81:	e8 34 fd ff ff       	call   c000ebba <IDT::addEntry(int, void (*)(), bool)>
c000ee86:	83 c4 20             	add    esp,0x20
c000ee89:	6a 00                	push   0x0
c000ee8b:	68 a8 05 00 c0       	push   0xc00005a8
c000ee90:	6a 32                	push   0x32
c000ee92:	53                   	push   ebx
c000ee93:	e8 22 fd ff ff       	call   c000ebba <IDT::addEntry(int, void (*)(), bool)>
c000ee98:	6a 00                	push   0x0
c000ee9a:	68 b2 05 00 c0       	push   0xc00005b2
c000ee9f:	6a 33                	push   0x33
c000eea1:	53                   	push   ebx
c000eea2:	e8 13 fd ff ff       	call   c000ebba <IDT::addEntry(int, void (*)(), bool)>
c000eea7:	83 c4 20             	add    esp,0x20
c000eeaa:	6a 00                	push   0x0
c000eeac:	68 bc 05 00 c0       	push   0xc00005bc
c000eeb1:	6a 34                	push   0x34
c000eeb3:	53                   	push   ebx
c000eeb4:	e8 01 fd ff ff       	call   c000ebba <IDT::addEntry(int, void (*)(), bool)>
c000eeb9:	6a 00                	push   0x0
c000eebb:	68 c6 05 00 c0       	push   0xc00005c6
c000eec0:	6a 35                	push   0x35
c000eec2:	53                   	push   ebx
c000eec3:	e8 f2 fc ff ff       	call   c000ebba <IDT::addEntry(int, void (*)(), bool)>
c000eec8:	83 c4 20             	add    esp,0x20
c000eecb:	6a 00                	push   0x0
c000eecd:	68 d0 05 00 c0       	push   0xc00005d0
c000eed2:	6a 36                	push   0x36
c000eed4:	53                   	push   ebx
c000eed5:	e8 e0 fc ff ff       	call   c000ebba <IDT::addEntry(int, void (*)(), bool)>
c000eeda:	6a 00                	push   0x0
c000eedc:	68 da 05 00 c0       	push   0xc00005da
c000eee1:	6a 37                	push   0x37
c000eee3:	53                   	push   ebx
c000eee4:	e8 d1 fc ff ff       	call   c000ebba <IDT::addEntry(int, void (*)(), bool)>
c000eee9:	83 c4 20             	add    esp,0x20
c000eeec:	e8 fc 24 00 00       	call   c00113ed <Virt::getAKernelVAS()>
c000eef1:	52                   	push   edx
c000eef2:	6a 03                	push   0x3
c000eef4:	6a 02                	push   0x2
c000eef6:	50                   	push   eax
c000eef7:	e8 34 2b 00 00       	call   c0011a30 <VAS::allocatePages(int, int)>
c000eefc:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000ef03:	89 c6                	mov    esi,eax
c000ef05:	e8 36 32 00 00       	call   c0012140 <operator new(unsigned long)>
c000ef0a:	81 c6 00 20 00 00    	add    esi,0x2000
c000ef10:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef13:	89 c7                	mov    edi,eax
c000ef15:	e8 c0 1c 00 00       	call   c0010bda <TSS::TSS()>
c000ef1a:	83 c4 0c             	add    esp,0xc
c000ef1d:	68 75 04 00 c0       	push   0xc0000475
c000ef22:	56                   	push   esi
c000ef23:	57                   	push   edi
c000ef24:	e8 f1 1c 00 00       	call   c0010c1a <TSS::setup(unsigned long, unsigned long)>
c000ef29:	59                   	pop    ecx
c000ef2a:	89 c6                	mov    esi,eax
c000ef2c:	5f                   	pop    edi
c000ef2d:	6a 00                	push   0x0
c000ef2f:	8d 44 24 14          	lea    eax,[esp+0x14]
c000ef33:	50                   	push   eax
c000ef34:	e8 db fb ff ff       	call   c000eb14 <IDTEntry::IDTEntry(bool)>
c000ef39:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ef3d:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000ef42:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000ef49:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000ef4f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ef53:	80 ce 05             	or     dh,0x5
c000ef56:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000ef59:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ef5d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ef61:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000ef64:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef67:	e8 86 fc ff ff       	call   c000ebf2 <IDT::flush()>
c000ef6c:	83 c4 20             	add    esp,0x20
c000ef6f:	5b                   	pop    ebx
c000ef70:	5e                   	pop    esi
c000ef71:	5f                   	pop    edi
c000ef72:	c3                   	ret    

c000ef73 <sbrk>:
c000ef73:	55                   	push   ebp
c000ef74:	57                   	push   edi
c000ef75:	56                   	push   esi
c000ef76:	53                   	push   ebx
c000ef77:	83 ec 1c             	sub    esp,0x1c
c000ef7a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000ef7e:	85 db                	test   ebx,ebx
c000ef80:	74 37                	je     c000efb9 <sbrk+0x46>
c000ef82:	78 3f                	js     c000efc3 <sbrk+0x50>
c000ef84:	e8 b7 62 01 00       	call   c0025240 <CPU::current()>
c000ef89:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000ef8f:	83 e0 01             	and    eax,0x1
c000ef92:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000ef96:	a1 bc 95 02 c0       	mov    eax,ds:0xc00295bc
c000ef9b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ef9f:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c000efa5:	89 d8                	mov    eax,ebx
c000efa7:	78 35                	js     c000efde <sbrk+0x6b>
c000efa9:	c1 f8 0c             	sar    eax,0xc
c000efac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000efb0:	89 c7                	mov    edi,eax
c000efb2:	be 00 00 00 00       	mov    esi,0x0
c000efb7:	eb 3c                	jmp    c000eff5 <sbrk+0x82>
c000efb9:	a1 bc 95 02 c0       	mov    eax,ds:0xc00295bc
c000efbe:	e9 ad 00 00 00       	jmp    c000f070 <sbrk+0xfd>
c000efc3:	83 ec 08             	sub    esp,0x8
c000efc6:	53                   	push   ebx
c000efc7:	68 10 6d 02 c0       	push   0xc0026d10
c000efcc:	e8 5e 32 00 00       	call   c001222f <Dbg::kprintf(char const*, ...)>
c000efd1:	83 c4 10             	add    esp,0x10
c000efd4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000efd9:	e9 92 00 00 00       	jmp    c000f070 <sbrk+0xfd>
c000efde:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000efe4:	eb c3                	jmp    c000efa9 <sbrk+0x36>
c000efe6:	81 05 bc 95 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc00295bc,0x1000
c000eff0:	46                   	inc    esi
c000eff1:	39 f7                	cmp    edi,esi
c000eff3:	74 34                	je     c000f029 <sbrk+0xb6>
c000eff5:	e8 f3 23 00 00       	call   c00113ed <Virt::getAKernelVAS()>
c000effa:	89 c3                	mov    ebx,eax
c000effc:	8b 2d bc 95 02 c0    	mov    ebp,DWORD PTR ds:0xc00295bc
c000f002:	e8 c9 06 00 00       	call   c000f6d0 <Phys::allocatePage()>
c000f007:	68 01 04 00 00       	push   0x401
c000f00c:	55                   	push   ebp
c000f00d:	50                   	push   eax
c000f00e:	53                   	push   ebx
c000f00f:	e8 1c 29 00 00       	call   c0011930 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f014:	83 c4 10             	add    esp,0x10
c000f017:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f01c:	74 c8                	je     c000efe6 <sbrk+0x73>
c000f01e:	8b 1d bc 95 02 c0    	mov    ebx,DWORD PTR ds:0xc00295bc
c000f024:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f027:	eb bd                	jmp    c000efe6 <sbrk+0x73>
c000f029:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f02e:	74 48                	je     c000f078 <sbrk+0x105>
c000f030:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f034:	89 d3                	mov    ebx,edx
c000f036:	c1 eb 0a             	shr    ebx,0xa
c000f039:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f03f:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f045:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f049:	c1 e0 0c             	shl    eax,0xc
c000f04c:	01 d0                	add    eax,edx
c000f04e:	c1 e8 0a             	shr    eax,0xa
c000f051:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f056:	2d 00 00 40 00       	sub    eax,0x400000
c000f05b:	39 c3                	cmp    ebx,eax
c000f05d:	77 0d                	ja     c000f06c <sbrk+0xf9>
c000f05f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f062:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f068:	39 d8                	cmp    eax,ebx
c000f06a:	73 f3                	jae    c000f05f <sbrk+0xec>
c000f06c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f070:	83 c4 1c             	add    esp,0x1c
c000f073:	5b                   	pop    ebx
c000f074:	5e                   	pop    esi
c000f075:	5f                   	pop    edi
c000f076:	5d                   	pop    ebp
c000f077:	c3                   	ret    
c000f078:	e8 e4 61 01 00       	call   c0025261 <CPU::readCR3()>
c000f07d:	83 ec 0c             	sub    esp,0xc
c000f080:	50                   	push   eax
c000f081:	e8 ed 61 01 00       	call   c0025273 <CPU::writeCR3(unsigned long)>
c000f086:	83 c4 10             	add    esp,0x10
c000f089:	eb e1                	jmp    c000f06c <sbrk+0xf9>

c000f08b <mmap>:
c000f08b:	83 ec 18             	sub    esp,0x18
c000f08e:	68 40 6d 02 c0       	push   0xc0026d40
c000f093:	e8 0f 9a 00 00       	call   c0018aa7 <Krnl::panic(char const*)>
c000f098:	b8 00 00 00 00       	mov    eax,0x0
c000f09d:	83 c4 1c             	add    esp,0x1c
c000f0a0:	c3                   	ret    

c000f0a1 <munmap>:
c000f0a1:	83 ec 18             	sub    esp,0x18
c000f0a4:	68 45 6d 02 c0       	push   0xc0026d45
c000f0a9:	e8 f9 99 00 00       	call   c0018aa7 <Krnl::panic(char const*)>
c000f0ae:	b8 00 00 00 00       	mov    eax,0x0
c000f0b3:	83 c4 1c             	add    esp,0x1c
c000f0b6:	c3                   	ret    

c000f0b7 <liballoc_lock()>:
c000f0b7:	83 ec 0c             	sub    esp,0xc
c000f0ba:	e8 3b c9 00 00       	call   c001b9fa <lockScheduler()>
c000f0bf:	b8 00 00 00 00       	mov    eax,0x0
c000f0c4:	83 c4 0c             	add    esp,0xc
c000f0c7:	c3                   	ret    

c000f0c8 <liballoc_unlock()>:
c000f0c8:	83 ec 0c             	sub    esp,0xc
c000f0cb:	e8 2c c9 00 00       	call   c001b9fc <unlockScheduler()>
c000f0d0:	b8 00 00 00 00       	mov    eax,0x0
c000f0d5:	83 c4 0c             	add    esp,0xc
c000f0d8:	c3                   	ret    

c000f0d9 <liballoc_alloc(int)>:
c000f0d9:	83 ec 0c             	sub    esp,0xc
c000f0dc:	e8 0c 23 00 00       	call   c00113ed <Virt::getAKernelVAS()>
c000f0e1:	83 ec 04             	sub    esp,0x4
c000f0e4:	6a 01                	push   0x1
c000f0e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f0ea:	50                   	push   eax
c000f0eb:	e8 40 29 00 00       	call   c0011a30 <VAS::allocatePages(int, int)>
c000f0f0:	83 c4 1c             	add    esp,0x1c
c000f0f3:	c3                   	ret    

c000f0f4 <liballoc_free(void*, int)>:
c000f0f4:	83 ec 0c             	sub    esp,0xc
c000f0f7:	e8 f1 22 00 00       	call   c00113ed <Virt::getAKernelVAS()>
c000f0fc:	83 ec 08             	sub    esp,0x8
c000f0ff:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f103:	50                   	push   eax
c000f104:	e8 d1 25 00 00       	call   c00116da <VAS::freeAllocatedPages(unsigned long)>
c000f109:	b8 00 00 00 00       	mov    eax,0x0
c000f10e:	83 c4 1c             	add    esp,0x1c
c000f111:	c3                   	ret    

c000f112 <realloc>:
c000f112:	83 ec 14             	sub    esp,0x14
c000f115:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f119:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f11d:	e8 d4 22 ff ff       	call   c00013f6 <dlrealloc>
c000f122:	83 c4 1c             	add    esp,0x1c
c000f125:	c3                   	ret    

c000f126 <malloc>:
c000f126:	83 ec 18             	sub    esp,0x18
c000f129:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f12d:	e8 87 1d ff ff       	call   c0000eb9 <dlmalloc>
c000f132:	83 c4 1c             	add    esp,0x1c
c000f135:	c3                   	ret    

c000f136 <free>:
c000f136:	83 ec 18             	sub    esp,0x18
c000f139:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f13d:	e8 1c 1a ff ff       	call   c0000b5e <dlfree>
c000f142:	83 c4 1c             	add    esp,0x1c
c000f145:	c3                   	ret    

c000f146 <rfree>:
c000f146:	83 ec 18             	sub    esp,0x18
c000f149:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f14d:	e8 e4 ff ff ff       	call   c000f136 <free>
c000f152:	83 c4 1c             	add    esp,0x1c
c000f155:	c3                   	ret    

c000f156 <calloc>:
c000f156:	56                   	push   esi
c000f157:	53                   	push   ebx
c000f158:	83 ec 10             	sub    esp,0x10
c000f15b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f15f:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f164:	53                   	push   ebx
c000f165:	e8 bc ff ff ff       	call   c000f126 <malloc>
c000f16a:	89 c6                	mov    esi,eax
c000f16c:	83 c4 0c             	add    esp,0xc
c000f16f:	53                   	push   ebx
c000f170:	6a 00                	push   0x0
c000f172:	50                   	push   eax
c000f173:	e8 05 15 ff ff       	call   c000067d <memset>
c000f178:	89 f0                	mov    eax,esi
c000f17a:	83 c4 14             	add    esp,0x14
c000f17d:	5b                   	pop    ebx
c000f17e:	5e                   	pop    esi
c000f17f:	c3                   	ret    

c000f180 <hwTextMode_loadInData(VgaText*)>:
c000f180:	57                   	push   edi
c000f181:	56                   	push   esi
c000f182:	53                   	push   ebx
c000f183:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000f187:	8b 87 ac 0f 00 00    	mov    eax,DWORD PTR [edi+0xfac]
c000f18d:	85 c0                	test   eax,eax
c000f18f:	7e 30                	jle    c000f1c1 <hwTextMode_loadInData(VgaText*)+0x41>
c000f191:	8d 5f 0c             	lea    ebx,[edi+0xc]
c000f194:	31 f6                	xor    esi,esi
c000f196:	8d 0c b6             	lea    ecx,[esi+esi*4]
c000f199:	31 c0                	xor    eax,eax
c000f19b:	c1 e1 05             	shl    ecx,0x5
c000f19e:	81 e9 60 7f f4 3d    	sub    ecx,0x3df47f60
c000f1a4:	66 8b 14 43          	mov    dx,WORD PTR [ebx+eax*2]
c000f1a8:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c000f1ac:	40                   	inc    eax
c000f1ad:	83 f8 50             	cmp    eax,0x50
c000f1b0:	75 f2                	jne    c000f1a4 <hwTextMode_loadInData(VgaText*)+0x24>
c000f1b2:	81 c3 a0 00 00 00    	add    ebx,0xa0
c000f1b8:	46                   	inc    esi
c000f1b9:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f1bf:	7f d5                	jg     c000f196 <hwTextMode_loadInData(VgaText*)+0x16>
c000f1c1:	5b                   	pop    ebx
c000f1c2:	5e                   	pop    esi
c000f1c3:	5f                   	pop    edi
c000f1c4:	c3                   	ret    

c000f1c5 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f1c5:	56                   	push   esi
c000f1c6:	ba 00 80 0b c2       	mov    edx,0xc20b8000
c000f1cb:	53                   	push   ebx
c000f1cc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f1d0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f1d4:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000f1da:	8b b3 d8 0f 00 00    	mov    esi,DWORD PTR [ebx+0xfd8]
c000f1e0:	c1 e0 04             	shl    eax,0x4
c000f1e3:	83 e6 0f             	and    esi,0xf
c000f1e6:	0f b6 c0             	movzx  eax,al
c000f1e9:	41                   	inc    ecx
c000f1ea:	09 f0                	or     eax,esi
c000f1ec:	83 c2 02             	add    edx,0x2
c000f1ef:	0f b6 71 ff          	movzx  esi,BYTE PTR [ecx-0x1]
c000f1f3:	c1 e0 08             	shl    eax,0x8
c000f1f6:	09 f0                	or     eax,esi
c000f1f8:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000f1fc:	81 fa a0 80 0b c2    	cmp    edx,0xc20b80a0
c000f202:	75 d0                	jne    c000f1d4 <hwTextMode_loadInTitle(VgaText*, char*)+0xf>
c000f204:	5b                   	pop    ebx
c000f205:	5e                   	pop    esi
c000f206:	c3                   	ret    

c000f207 <hwTextMode_showCursor(VgaText*, bool)>:
c000f207:	56                   	push   esi
c000f208:	53                   	push   ebx
c000f209:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000f20e:	74 38                	je     c000f248 <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000f210:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f215:	b0 0a                	mov    al,0xa
c000f217:	89 da                	mov    edx,ebx
c000f219:	ee                   	out    dx,al
c000f21a:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f21f:	89 ca                	mov    edx,ecx
c000f221:	ec                   	in     al,dx
c000f222:	b2 0f                	mov    dl,0xf
c000f224:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f228:	83 e0 c0             	and    eax,0xffffffc0
c000f22b:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f231:	09 d0                	or     eax,edx
c000f233:	89 ca                	mov    edx,ecx
c000f235:	ee                   	out    dx,al
c000f236:	b0 0b                	mov    al,0xb
c000f238:	89 da                	mov    edx,ebx
c000f23a:	ee                   	out    dx,al
c000f23b:	89 ca                	mov    edx,ecx
c000f23d:	ec                   	in     al,dx
c000f23e:	83 e0 e0             	and    eax,0xffffffe0
c000f241:	83 c8 0f             	or     eax,0xf
c000f244:	ee                   	out    dx,al
c000f245:	5b                   	pop    ebx
c000f246:	5e                   	pop    esi
c000f247:	c3                   	ret    
c000f248:	b0 0a                	mov    al,0xa
c000f24a:	ba d4 03 00 00       	mov    edx,0x3d4
c000f24f:	ee                   	out    dx,al
c000f250:	b0 20                	mov    al,0x20
c000f252:	ba d5 03 00 00       	mov    edx,0x3d5
c000f257:	ee                   	out    dx,al
c000f258:	5b                   	pop    ebx
c000f259:	5e                   	pop    esi
c000f25a:	c3                   	ret    

c000f25b <hwTextMode_update(VgaText*)>:
c000f25b:	c3                   	ret    

c000f25c <hwTextMode_updateCursor(VgaText*)>:
c000f25c:	56                   	push   esi
c000f25d:	b9 19 00 00 00       	mov    ecx,0x19
c000f262:	53                   	push   ebx
c000f263:	be d4 03 00 00       	mov    esi,0x3d4
c000f268:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f26c:	89 f2                	mov    edx,esi
c000f26e:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f274:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f27a:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f27d:	c1 e1 04             	shl    ecx,0x4
c000f280:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f286:	b0 0f                	mov    al,0xf
c000f288:	ee                   	out    dx,al
c000f289:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f28e:	88 c8                	mov    al,cl
c000f290:	89 da                	mov    edx,ebx
c000f292:	ee                   	out    dx,al
c000f293:	b0 0e                	mov    al,0xe
c000f295:	89 f2                	mov    edx,esi
c000f297:	ee                   	out    dx,al
c000f298:	89 c8                	mov    eax,ecx
c000f29a:	89 da                	mov    edx,ebx
c000f29c:	66 c1 e8 08          	shr    ax,0x8
c000f2a0:	ee                   	out    dx,al
c000f2a1:	5b                   	pop    ebx
c000f2a2:	5e                   	pop    esi
c000f2a3:	c3                   	ret    

c000f2a4 <hwTextMode_disableBlink(VgaText*, bool)>:
c000f2a4:	ba da 03 00 00       	mov    edx,0x3da
c000f2a9:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000f2ae:	75 18                	jne    c000f2c8 <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000f2b0:	ec                   	in     al,dx
c000f2b1:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f2b6:	b0 30                	mov    al,0x30
c000f2b8:	89 ca                	mov    edx,ecx
c000f2ba:	ee                   	out    dx,al
c000f2bb:	ba c1 03 00 00       	mov    edx,0x3c1
c000f2c0:	ec                   	in     al,dx
c000f2c1:	83 c8 08             	or     eax,0x8
c000f2c4:	89 ca                	mov    edx,ecx
c000f2c6:	ee                   	out    dx,al
c000f2c7:	c3                   	ret    
c000f2c8:	ec                   	in     al,dx
c000f2c9:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f2ce:	b0 30                	mov    al,0x30
c000f2d0:	89 ca                	mov    edx,ecx
c000f2d2:	ee                   	out    dx,al
c000f2d3:	ba c1 03 00 00       	mov    edx,0x3c1
c000f2d8:	ec                   	in     al,dx
c000f2d9:	83 e0 f7             	and    eax,0xfffffff7
c000f2dc:	89 ca                	mov    edx,ecx
c000f2de:	ee                   	out    dx,al
c000f2df:	c3                   	ret    

c000f2e0 <hwTextMode_scrollScreen(VgaText*)>:
c000f2e0:	55                   	push   ebp
c000f2e1:	bd 02 00 00 00       	mov    ebp,0x2
c000f2e6:	57                   	push   edi
c000f2e7:	56                   	push   esi
c000f2e8:	53                   	push   ebx
c000f2e9:	83 ec 1c             	sub    esp,0x1c
c000f2ec:	c7 44 24 0c a0 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b80a0
c000f2f4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f2f8:	31 c0                	xor    eax,eax
c000f2fa:	eb 0b                	jmp    c000f307 <hwTextMode_scrollScreen(VgaText*)+0x27>
c000f2fc:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f302:	74 57                	je     c000f35b <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000f304:	43                   	inc    ebx
c000f305:	89 f0                	mov    eax,esi
c000f307:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000f30d:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000f313:	88 13                	mov    BYTE PTR [ebx],dl
c000f315:	8d 70 01             	lea    esi,[eax+0x1]
c000f318:	83 fd 18             	cmp    ebp,0x18
c000f31b:	75 df                	jne    c000f2fc <hwTextMode_scrollScreen(VgaText*)+0x1c>
c000f31d:	a8 01                	test   al,0x1
c000f31f:	75 13                	jne    c000f334 <hwTextMode_scrollScreen(VgaText*)+0x54>
c000f321:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000f324:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f32a:	75 d8                	jne    c000f304 <hwTextMode_scrollScreen(VgaText*)+0x24>
c000f32c:	83 c4 1c             	add    esp,0x1c
c000f32f:	5b                   	pop    ebx
c000f330:	5e                   	pop    esi
c000f331:	5f                   	pop    edi
c000f332:	5d                   	pop    ebp
c000f333:	c3                   	ret    
c000f334:	83 ec 08             	sub    esp,0x8
c000f337:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f33b:	0f b6 80 cc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfcc]
c000f342:	50                   	push   eax
c000f343:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f347:	0f b6 80 d0 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfd0]
c000f34e:	50                   	push   eax
c000f34f:	e8 66 0b 00 00       	call   c000feba <VgaText::combineColours(unsigned char, unsigned char)>
c000f354:	83 c4 10             	add    esp,0x10
c000f357:	88 07                	mov    BYTE PTR [edi],al
c000f359:	eb c9                	jmp    c000f324 <hwTextMode_scrollScreen(VgaText*)+0x44>
c000f35b:	45                   	inc    ebp
c000f35c:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000f364:	eb 8e                	jmp    c000f2f4 <hwTextMode_scrollScreen(VgaText*)+0x14>

c000f366 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000f366:	56                   	push   esi
c000f367:	53                   	push   ebx
c000f368:	83 ec 0c             	sub    esp,0xc
c000f36b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000f36f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000f373:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f378:	50                   	push   eax
c000f379:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f37e:	50                   	push   eax
c000f37f:	e8 36 0b 00 00       	call   c000feba <VgaText::combineColours(unsigned char, unsigned char)>
c000f384:	5a                   	pop    edx
c000f385:	0f b6 c0             	movzx  eax,al
c000f388:	59                   	pop    ecx
c000f389:	50                   	push   eax
c000f38a:	89 f0                	mov    eax,esi
c000f38c:	0f be f0             	movsx  esi,al
c000f38f:	56                   	push   esi
c000f390:	e8 cb 0b 00 00       	call   c000ff60 <VgaText::combineCharAndColour(char, unsigned char)>
c000f395:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000f399:	ba 19 00 00 00       	mov    edx,0x19
c000f39e:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000f3a4:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000f3a7:	8d 14 92             	lea    edx,[edx+edx*4]
c000f3aa:	c1 e1 04             	shl    ecx,0x4
c000f3ad:	c1 e2 04             	shl    edx,0x4
c000f3b0:	03 4c 24 30          	add    ecx,DWORD PTR [esp+0x30]
c000f3b4:	01 ca                	add    edx,ecx
c000f3b6:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000f3be:	83 c4 14             	add    esp,0x14
c000f3c1:	5b                   	pop    ebx
c000f3c2:	5e                   	pop    esi
c000f3c3:	c3                   	ret    

c000f3c4 <setupTextMode()>:
c000f3c4:	c7 05 d8 a6 02 c0 a4 f2 00 c0 	mov    DWORD PTR ds:0xc002a6d8,0xc000f2a4
c000f3ce:	c7 05 c4 a6 02 c0 80 f1 00 c0 	mov    DWORD PTR ds:0xc002a6c4,0xc000f180
c000f3d8:	c7 05 c0 a6 02 c0 c5 f1 00 c0 	mov    DWORD PTR ds:0xc002a6c0,0xc000f1c5
c000f3e2:	c7 05 cc a6 02 c0 e0 f2 00 c0 	mov    DWORD PTR ds:0xc002a6cc,0xc000f2e0
c000f3ec:	c7 05 d4 a6 02 c0 07 f2 00 c0 	mov    DWORD PTR ds:0xc002a6d4,0xc000f207
c000f3f6:	c7 05 c8 a6 02 c0 5b f2 00 c0 	mov    DWORD PTR ds:0xc002a6c8,0xc000f25b
c000f400:	c7 05 d0 a6 02 c0 5c f2 00 c0 	mov    DWORD PTR ds:0xc002a6d0,0xc000f25c
c000f40a:	c7 05 dc a6 02 c0 66 f3 00 c0 	mov    DWORD PTR ds:0xc002a6dc,0xc000f366
c000f414:	c3                   	ret    

c000f415 <kernel_main>:
c000f415:	57                   	push   edi
c000f416:	bf f9 03 00 00       	mov    edi,0x3f9
c000f41b:	56                   	push   esi
c000f41c:	31 f6                	xor    esi,esi
c000f41e:	53                   	push   ebx
c000f41f:	83 ec 10             	sub    esp,0x10
c000f422:	e8 ed 08 00 00       	call   c000fd14 <installVgaTextImplementation()>
c000f427:	e8 98 ff ff ff       	call   c000f3c4 <setupTextMode()>
c000f42c:	89 f0                	mov    eax,esi
c000f42e:	89 fa                	mov    edx,edi
c000f430:	ee                   	out    dx,al
c000f431:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f436:	b0 80                	mov    al,0x80
c000f438:	89 da                	mov    edx,ebx
c000f43a:	ee                   	out    dx,al
c000f43b:	b1 03                	mov    cl,0x3
c000f43d:	ba f8 03 00 00       	mov    edx,0x3f8
c000f442:	88 c8                	mov    al,cl
c000f444:	ee                   	out    dx,al
c000f445:	89 f0                	mov    eax,esi
c000f447:	89 fa                	mov    edx,edi
c000f449:	ee                   	out    dx,al
c000f44a:	88 c8                	mov    al,cl
c000f44c:	89 da                	mov    edx,ebx
c000f44e:	ee                   	out    dx,al
c000f44f:	b0 c7                	mov    al,0xc7
c000f451:	ba fa 03 00 00       	mov    edx,0x3fa
c000f456:	ee                   	out    dx,al
c000f457:	b0 0b                	mov    al,0xb
c000f459:	ba fc 03 00 00       	mov    edx,0x3fc
c000f45e:	ee                   	out    dx,al
c000f45f:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f464:	83 ec 0c             	sub    esp,0xc
c000f467:	05 ff 0f 00 00       	add    eax,0xfff
c000f46c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f471:	50                   	push   eax
c000f472:	e8 59 03 00 00       	call   c000f7d0 <Phys::physicalMemorySetup(unsigned int)>
c000f477:	e8 f2 1e 00 00       	call   c001136e <Virt::virtualMemorySetup()>
c000f47c:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000f482:	83 c4 10             	add    esp,0x10
c000f485:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000f48b:	75 0e                	jne    c000f49b <kernel_main+0x86>
c000f48d:	89 d8                	mov    eax,ebx
c000f48f:	25 48 03 00 00       	and    eax,0x348
c000f494:	3d 00 03 00 00       	cmp    eax,0x300
c000f499:	74 10                	je     c000f4ab <kernel_main+0x96>
c000f49b:	83 ec 0c             	sub    esp,0xc
c000f49e:	68 9b 82 02 c0       	push   0xc002829b
c000f4a3:	e8 ff 95 00 00       	call   c0018aa7 <Krnl::panic(char const*)>
c000f4a8:	83 c4 10             	add    esp,0x10
c000f4ab:	83 ec 0c             	sub    esp,0xc
c000f4ae:	89 1d 40 a6 02 c0    	mov    DWORD PTR ds:0xc002a640,ebx
c000f4b4:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f4b8:	53                   	push   ebx
c000f4b9:	e8 5a 20 00 00       	call   c0011518 <VAS::VAS()>
c000f4be:	89 1d 84 a7 02 c0    	mov    DWORD PTR ds:0xc002a784,ebx
c000f4c4:	e8 57 0b ff ff       	call   c0000020 <callGlobalConstructors>
c000f4c9:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000f4d0:	e8 6b 2c 00 00       	call   c0012140 <operator new(unsigned long)>
c000f4d5:	89 04 24             	mov    DWORD PTR [esp],eax
c000f4d8:	89 c6                	mov    esi,eax
c000f4da:	e8 4f ea ff ff       	call   c000df2e <Computer::Computer()>
c000f4df:	6a 00                	push   0x0
c000f4e1:	89 35 28 a6 02 c0    	mov    DWORD PTR ds:0xc002a628,esi
c000f4e7:	6a 00                	push   0x0
c000f4e9:	6a 00                	push   0x0
c000f4eb:	56                   	push   esi
c000f4ec:	e8 77 f2 ff ff       	call   c000e768 <Computer::open(int, int, void*)>
c000f4f1:	83 c4 14             	add    esp,0x14
c000f4f4:	53                   	push   ebx
c000f4f5:	e8 ca 22 00 00       	call   c00117c4 <VAS::~VAS()>
c000f4fa:	c7 04 24 4c 6d 02 c0 	mov    DWORD PTR [esp],0xc0026d4c
c000f501:	e8 a1 95 00 00       	call   c0018aa7 <Krnl::panic(char const*)>
c000f506:	83 c4 20             	add    esp,0x20
c000f509:	5b                   	pop    ebx
c000f50a:	5e                   	pop    esi
c000f50b:	5f                   	pop    edi
c000f50c:	c3                   	ret    

c000f50d <Phys::allocateDMA(unsigned long)>:
c000f50d:	55                   	push   ebp
c000f50e:	31 d2                	xor    edx,edx
c000f510:	57                   	push   edi
c000f511:	31 ed                	xor    ebp,ebp
c000f513:	56                   	push   esi
c000f514:	31 c9                	xor    ecx,ecx
c000f516:	53                   	push   ebx
c000f517:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f51b:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000f521:	31 c0                	xor    eax,eax
c000f523:	c1 ee 0c             	shr    esi,0xc
c000f526:	eb 17                	jmp    c000f53f <Phys::allocateDMA(unsigned long)+0x32>
c000f528:	85 c9                	test   ecx,ecx
c000f52a:	75 04                	jne    c000f530 <Phys::allocateDMA(unsigned long)+0x23>
c000f52c:	89 d5                	mov    ebp,edx
c000f52e:	89 d0                	mov    eax,edx
c000f530:	8d 59 01             	lea    ebx,[ecx+0x1]
c000f533:	39 de                	cmp    esi,ebx
c000f535:	74 20                	je     c000f557 <Phys::allocateDMA(unsigned long)+0x4a>
c000f537:	42                   	inc    edx
c000f538:	89 d9                	mov    ecx,ebx
c000f53a:	83 fa 2f             	cmp    edx,0x2f
c000f53d:	7f 11                	jg     c000f550 <Phys::allocateDMA(unsigned long)+0x43>
c000f53f:	80 ba 80 a6 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd5980],0x0
c000f546:	74 e0                	je     c000f528 <Phys::allocateDMA(unsigned long)+0x1b>
c000f548:	31 c9                	xor    ecx,ecx
c000f54a:	42                   	inc    edx
c000f54b:	83 fa 2f             	cmp    edx,0x2f
c000f54e:	7e ef                	jle    c000f53f <Phys::allocateDMA(unsigned long)+0x32>
c000f550:	5b                   	pop    ebx
c000f551:	31 c0                	xor    eax,eax
c000f553:	5e                   	pop    esi
c000f554:	5f                   	pop    edi
c000f555:	5d                   	pop    ebp
c000f556:	c3                   	ret    
c000f557:	8d 14 30             	lea    edx,[eax+esi*1]
c000f55a:	89 d7                	mov    edi,edx
c000f55c:	4f                   	dec    edi
c000f55d:	79 03                	jns    c000f562 <Phys::allocateDMA(unsigned long)+0x55>
c000f55f:	8d 7a 0e             	lea    edi,[edx+0xe]
c000f562:	c1 ff 04             	sar    edi,0x4
c000f565:	89 c2                	mov    edx,eax
c000f567:	c1 fa 04             	sar    edx,0x4
c000f56a:	39 fa                	cmp    edx,edi
c000f56c:	75 2f                	jne    c000f59d <Phys::allocateDMA(unsigned long)+0x90>
c000f56e:	85 db                	test   ebx,ebx
c000f570:	74 1a                	je     c000f58c <Phys::allocateDMA(unsigned long)+0x7f>
c000f572:	be 80 a6 02 c0       	mov    esi,0xc002a680
c000f577:	8d 90 80 a6 02 c0    	lea    edx,[eax-0x3ffd5980]
c000f57d:	f7 d6                	not    esi
c000f57f:	29 c6                	sub    esi,eax
c000f581:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000f584:	42                   	inc    edx
c000f585:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000f588:	39 d9                	cmp    ecx,ebx
c000f58a:	7f f5                	jg     c000f581 <Phys::allocateDMA(unsigned long)+0x74>
c000f58c:	85 ff                	test   edi,edi
c000f58e:	74 13                	je     c000f5a3 <Phys::allocateDMA(unsigned long)+0x96>
c000f590:	5b                   	pop    ebx
c000f591:	05 50 20 0c 00       	add    eax,0xc2050
c000f596:	5e                   	pop    esi
c000f597:	c1 e0 0c             	shl    eax,0xc
c000f59a:	5f                   	pop    edi
c000f59b:	5d                   	pop    ebp
c000f59c:	c3                   	ret    
c000f59d:	89 ea                	mov    edx,ebp
c000f59f:	31 c9                	xor    ecx,ecx
c000f5a1:	eb a7                	jmp    c000f54a <Phys::allocateDMA(unsigned long)+0x3d>
c000f5a3:	5b                   	pop    ebx
c000f5a4:	c1 e0 0c             	shl    eax,0xc
c000f5a7:	5e                   	pop    esi
c000f5a8:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000f5ad:	5f                   	pop    edi
c000f5ae:	5d                   	pop    ebp
c000f5af:	c3                   	ret    

c000f5b0 <Phys::freeDMA(unsigned long, unsigned long)>:
c000f5b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f5b4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f5b8:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000f5be:	c1 e9 0c             	shr    ecx,0xc
c000f5c1:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000f5c6:	76 25                	jbe    c000f5ed <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000f5c8:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000f5cd:	c1 e8 0c             	shr    eax,0xc
c000f5d0:	8d 50 10             	lea    edx,[eax+0x10]
c000f5d3:	85 c9                	test   ecx,ecx
c000f5d5:	74 15                	je     c000f5ec <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000f5d7:	8d 82 80 a6 02 c0    	lea    eax,[edx-0x3ffd5980]
c000f5dd:	8d 94 11 80 a6 02 c0 	lea    edx,[ecx+edx*1-0x3ffd5980]
c000f5e4:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f5e7:	40                   	inc    eax
c000f5e8:	39 d0                	cmp    eax,edx
c000f5ea:	75 f8                	jne    c000f5e4 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000f5ec:	c3                   	ret    
c000f5ed:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000f5f3:	c1 ea 0c             	shr    edx,0xc
c000f5f6:	eb db                	jmp    c000f5d3 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000f5f8 <Phys::setPageState(unsigned long, bool)>:
c000f5f8:	56                   	push   esi
c000f5f9:	ba 01 00 00 00       	mov    edx,0x1
c000f5fe:	53                   	push   ebx
c000f5ff:	8b 35 c0 95 02 c0    	mov    esi,DWORD PTR ds:0xc00295c0
c000f605:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f609:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f60d:	89 c8                	mov    eax,ecx
c000f60f:	83 e1 07             	and    ecx,0x7
c000f612:	c1 e8 03             	shr    eax,0x3
c000f615:	d3 e3                	shl    ebx,cl
c000f617:	01 c6                	add    esi,eax
c000f619:	d3 e2                	shl    edx,cl
c000f61b:	f7 d2                	not    edx
c000f61d:	20 16                	and    BYTE PTR [esi],dl
c000f61f:	03 05 c0 95 02 c0    	add    eax,DWORD PTR ds:0xc00295c0
c000f625:	08 18                	or     BYTE PTR [eax],bl
c000f627:	5b                   	pop    ebx
c000f628:	5e                   	pop    esi
c000f629:	c3                   	ret    

c000f62a <Phys::getPageState(unsigned long)>:
c000f62a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f62e:	8b 15 c0 95 02 c0    	mov    edx,DWORD PTR ds:0xc00295c0
c000f634:	89 c8                	mov    eax,ecx
c000f636:	83 e1 07             	and    ecx,0x7
c000f639:	c1 e8 03             	shr    eax,0x3
c000f63c:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000f640:	d3 f8                	sar    eax,cl
c000f642:	83 e0 01             	and    eax,0x1
c000f645:	c3                   	ret    

c000f646 <Phys::freePage(unsigned long)>:
c000f646:	53                   	push   ebx
c000f647:	83 ec 08             	sub    esp,0x8
c000f64a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f64e:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000f654:	76 57                	jbe    c000f6ad <Phys::freePage(unsigned long)+0x67>
c000f656:	c1 eb 0c             	shr    ebx,0xc
c000f659:	53                   	push   ebx
c000f65a:	e8 cb ff ff ff       	call   c000f62a <Phys::getPageState(unsigned long)>
c000f65f:	5a                   	pop    edx
c000f660:	84 c0                	test   al,al
c000f662:	74 5b                	je     c000f6bf <Phys::freePage(unsigned long)+0x79>
c000f664:	a1 6c a6 02 c0       	mov    eax,ds:0xc002a66c
c000f669:	48                   	dec    eax
c000f66a:	a3 6c a6 02 c0       	mov    ds:0xc002a66c,eax
c000f66f:	8d 04 80             	lea    eax,[eax+eax*4]
c000f672:	8d 04 80             	lea    eax,[eax+eax*4]
c000f675:	c1 e0 02             	shl    eax,0x2
c000f678:	99                   	cdq    
c000f679:	f7 3d 70 a6 02 c0    	idiv   DWORD PTR ds:0xc002a670
c000f67f:	39 05 68 a6 02 c0    	cmp    DWORD PTR ds:0xc002a668,eax
c000f685:	75 13                	jne    c000f69a <Phys::freePage(unsigned long)+0x54>
c000f687:	83 ec 08             	sub    esp,0x8
c000f68a:	6a 00                	push   0x0
c000f68c:	53                   	push   ebx
c000f68d:	e8 66 ff ff ff       	call   c000f5f8 <Phys::setPageState(unsigned long, bool)>
c000f692:	83 c4 10             	add    esp,0x10
c000f695:	83 c4 08             	add    esp,0x8
c000f698:	5b                   	pop    ebx
c000f699:	c3                   	ret    
c000f69a:	83 ec 0c             	sub    esp,0xc
c000f69d:	a3 68 a6 02 c0       	mov    ds:0xc002a668,eax
c000f6a2:	50                   	push   eax
c000f6a3:	e8 00 0a 00 00       	call   c00100a8 <VgaText::updateRAMUsageDisplay(int)>
c000f6a8:	83 c4 10             	add    esp,0x10
c000f6ab:	eb da                	jmp    c000f687 <Phys::freePage(unsigned long)+0x41>
c000f6ad:	68 00 10 00 00       	push   0x1000
c000f6b2:	53                   	push   ebx
c000f6b3:	e8 f8 fe ff ff       	call   c000f5b0 <Phys::freeDMA(unsigned long, unsigned long)>
c000f6b8:	59                   	pop    ecx
c000f6b9:	5b                   	pop    ebx
c000f6ba:	83 c4 08             	add    esp,0x8
c000f6bd:	5b                   	pop    ebx
c000f6be:	c3                   	ret    
c000f6bf:	c7 44 24 10 67 6d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0026d67
c000f6c7:	83 c4 08             	add    esp,0x8
c000f6ca:	5b                   	pop    ebx
c000f6cb:	e9 d7 93 00 00       	jmp    c0018aa7 <Krnl::panic(char const*)>

c000f6d0 <Phys::allocatePage()>:
c000f6d0:	56                   	push   esi
c000f6d1:	53                   	push   ebx
c000f6d2:	51                   	push   ecx
c000f6d3:	8b 35 60 a6 02 c0    	mov    esi,DWORD PTR ds:0xc002a660
c000f6d9:	89 f3                	mov    ebx,esi
c000f6db:	eb 0a                	jmp    c000f6e7 <Phys::allocatePage()+0x17>
c000f6dd:	89 1d 60 a6 02 c0    	mov    DWORD PTR ds:0xc002a660,ebx
c000f6e3:	39 de                	cmp    esi,ebx
c000f6e5:	74 24                	je     c000f70b <Phys::allocatePage()+0x3b>
c000f6e7:	53                   	push   ebx
c000f6e8:	e8 3d ff ff ff       	call   c000f62a <Phys::getPageState(unsigned long)>
c000f6ed:	5a                   	pop    edx
c000f6ee:	84 c0                	test   al,al
c000f6f0:	74 5a                	je     c000f74c <Phys::allocatePage()+0x7c>
c000f6f2:	43                   	inc    ebx
c000f6f3:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000f6f9:	75 e2                	jne    c000f6dd <Phys::allocatePage()+0xd>
c000f6fb:	31 db                	xor    ebx,ebx
c000f6fd:	c7 05 60 a6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a660,0x0
c000f707:	39 de                	cmp    esi,ebx
c000f709:	75 dc                	jne    c000f6e7 <Phys::allocatePage()+0x17>
c000f70b:	83 ec 0c             	sub    esp,0xc
c000f70e:	68 7d 6d 02 c0       	push   0xc0026d7d
c000f713:	e8 17 2b 00 00       	call   c001222f <Dbg::kprintf(char const*, ...)>
c000f718:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000f71f:	e8 e9 fd ff ff       	call   c000f50d <Phys::allocateDMA(unsigned long)>
c000f724:	83 c4 10             	add    esp,0x10
c000f727:	85 c0                	test   eax,eax
c000f729:	75 56                	jne    c000f781 <Phys::allocatePage()+0xb1>
c000f72b:	83 ec 0c             	sub    esp,0xc
c000f72e:	68 8e 6d 02 c0       	push   0xc0026d8e
c000f733:	e8 6f 93 00 00       	call   c0018aa7 <Krnl::panic(char const*)>
c000f738:	83 c4 10             	add    esp,0x10
c000f73b:	8b 1d 60 a6 02 c0    	mov    ebx,DWORD PTR ds:0xc002a660
c000f741:	53                   	push   ebx
c000f742:	e8 e3 fe ff ff       	call   c000f62a <Phys::getPageState(unsigned long)>
c000f747:	5a                   	pop    edx
c000f748:	84 c0                	test   al,al
c000f74a:	75 a6                	jne    c000f6f2 <Phys::allocatePage()+0x22>
c000f74c:	6a 01                	push   0x1
c000f74e:	53                   	push   ebx
c000f74f:	e8 a4 fe ff ff       	call   c000f5f8 <Phys::setPageState(unsigned long, bool)>
c000f754:	a1 6c a6 02 c0       	mov    eax,ds:0xc002a66c
c000f759:	59                   	pop    ecx
c000f75a:	40                   	inc    eax
c000f75b:	5b                   	pop    ebx
c000f75c:	a3 6c a6 02 c0       	mov    ds:0xc002a66c,eax
c000f761:	8d 04 80             	lea    eax,[eax+eax*4]
c000f764:	8d 04 80             	lea    eax,[eax+eax*4]
c000f767:	c1 e0 02             	shl    eax,0x2
c000f76a:	99                   	cdq    
c000f76b:	f7 3d 70 a6 02 c0    	idiv   DWORD PTR ds:0xc002a670
c000f771:	39 05 68 a6 02 c0    	cmp    DWORD PTR ds:0xc002a668,eax
c000f777:	75 0c                	jne    c000f785 <Phys::allocatePage()+0xb5>
c000f779:	a1 60 a6 02 c0       	mov    eax,ds:0xc002a660
c000f77e:	c1 e0 0c             	shl    eax,0xc
c000f781:	5a                   	pop    edx
c000f782:	5b                   	pop    ebx
c000f783:	5e                   	pop    esi
c000f784:	c3                   	ret    
c000f785:	83 ec 0c             	sub    esp,0xc
c000f788:	a3 68 a6 02 c0       	mov    ds:0xc002a668,eax
c000f78d:	50                   	push   eax
c000f78e:	e8 15 09 00 00       	call   c00100a8 <VgaText::updateRAMUsageDisplay(int)>
c000f793:	83 c4 10             	add    esp,0x10
c000f796:	eb e1                	jmp    c000f779 <Phys::allocatePage()+0xa9>

c000f798 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000f798:	56                   	push   esi
c000f799:	53                   	push   ebx
c000f79a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f79e:	39 1d 64 a6 02 c0    	cmp    DWORD PTR ds:0xc002a664,ebx
c000f7a4:	73 06                	jae    c000f7ac <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000f7a6:	89 1d 64 a6 02 c0    	mov    DWORD PTR ds:0xc002a664,ebx
c000f7ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f7b0:	c1 eb 0c             	shr    ebx,0xc
c000f7b3:	c1 e8 0c             	shr    eax,0xc
c000f7b6:	39 d8                	cmp    eax,ebx
c000f7b8:	73 13                	jae    c000f7cd <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000f7ba:	6a 00                	push   0x0
c000f7bc:	8d 70 01             	lea    esi,[eax+0x1]
c000f7bf:	50                   	push   eax
c000f7c0:	e8 33 fe ff ff       	call   c000f5f8 <Phys::setPageState(unsigned long, bool)>
c000f7c5:	5a                   	pop    edx
c000f7c6:	89 f0                	mov    eax,esi
c000f7c8:	59                   	pop    ecx
c000f7c9:	39 f3                	cmp    ebx,esi
c000f7cb:	75 ed                	jne    c000f7ba <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000f7cd:	5b                   	pop    ebx
c000f7ce:	5e                   	pop    esi
c000f7cf:	c3                   	ret    

c000f7d0 <Phys::physicalMemorySetup(unsigned int)>:
c000f7d0:	55                   	push   ebp
c000f7d1:	57                   	push   edi
c000f7d2:	56                   	push   esi
c000f7d3:	53                   	push   ebx
c000f7d4:	31 db                	xor    ebx,ebx
c000f7d6:	83 ec 40             	sub    esp,0x40
c000f7d9:	6a 30                	push   0x30
c000f7db:	6a 00                	push   0x0
c000f7dd:	68 80 a6 02 c0       	push   0xc002a680
c000f7e2:	e8 96 0e ff ff       	call   c000067d <memset>
c000f7e7:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f7eb:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f7f0:	05 00 10 00 00       	add    eax,0x1000
c000f7f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000f7f9:	83 c4 10             	add    esp,0x10
c000f7fc:	83 ec 08             	sub    esp,0x8
c000f7ff:	6a 01                	push   0x1
c000f801:	53                   	push   ebx
c000f802:	43                   	inc    ebx
c000f803:	e8 f0 fd ff ff       	call   c000f5f8 <Phys::setPageState(unsigned long, bool)>
c000f808:	83 c4 10             	add    esp,0x10
c000f80b:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000f811:	75 e9                	jne    c000f7fc <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000f813:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000f81a:	66 85 c0             	test   ax,ax
c000f81d:	0f 84 8e 01 00 00    	je     c000f9b1 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c000f823:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000f827:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000f82f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f833:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000f838:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f83c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f844:	eb 15                	jmp    c000f85b <Phys::physicalMemorySetup(unsigned int)+0x8b>
c000f846:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000f84a:	83 c3 18             	add    ebx,0x18
c000f84d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f851:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000f855:	0f 84 66 01 00 00    	je     c000f9c1 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000f85b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000f85e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000f861:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000f864:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f868:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f86c:	8b 33                	mov    esi,DWORD PTR [ebx]
c000f86e:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000f871:	01 f0                	add    eax,esi
c000f873:	55                   	push   ebp
c000f874:	11 fa                	adc    edx,edi
c000f876:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f87a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000f87e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000f882:	56                   	push   esi
c000f883:	68 c8 6d 02 c0       	push   0xc0026dc8
c000f888:	e8 a2 29 00 00       	call   c001222f <Dbg::kprintf(char const*, ...)>
c000f88d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f891:	83 c4 10             	add    esp,0x10
c000f894:	09 f8                	or     eax,edi
c000f896:	0f 85 25 01 00 00    	jne    c000f9c1 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000f89c:	4d                   	dec    ebp
c000f89d:	75 a7                	jne    c000f846 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000f89f:	ba 00 00 08 00       	mov    edx,0x80000
c000f8a4:	89 c1                	mov    ecx,eax
c000f8a6:	39 f2                	cmp    edx,esi
c000f8a8:	19 f9                	sbb    ecx,edi
c000f8aa:	0f 82 a7 00 00 00    	jb     c000f957 <Phys::physicalMemorySetup(unsigned int)+0x187>
c000f8b0:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000f8b4:	89 c1                	mov    ecx,eax
c000f8b6:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000f8ba:	0f 83 97 00 00 00    	jae    c000f957 <Phys::physicalMemorySetup(unsigned int)+0x187>
c000f8c0:	ba 00 00 0a 00       	mov    edx,0xa0000
c000f8c5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000f8c9:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000f8cd:	39 fa                	cmp    edx,edi
c000f8cf:	19 e8                	sbb    eax,ebp
c000f8d1:	0f 82 14 01 00 00    	jb     c000f9eb <Phys::physicalMemorySetup(unsigned int)+0x21b>
c000f8d7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000f8db:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000f8df:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000f8e5:	ba ff 1f 00 00       	mov    edx,0x1fff
c000f8ea:	83 d5 ff             	adc    ebp,0xffffffff
c000f8ed:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000f8f1:	31 c0                	xor    eax,eax
c000f8f3:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000f8f7:	39 fa                	cmp    edx,edi
c000f8f9:	89 c1                	mov    ecx,eax
c000f8fb:	19 e9                	sbb    ecx,ebp
c000f8fd:	0f 83 43 ff ff ff    	jae    c000f846 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000f903:	be 00 00 08 00       	mov    esi,0x80000
c000f908:	50                   	push   eax
c000f909:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000f90d:	57                   	push   edi
c000f90e:	56                   	push   esi
c000f90f:	68 ec 6d 02 c0       	push   0xc0026dec
c000f914:	e8 16 29 00 00       	call   c001222f <Dbg::kprintf(char const*, ...)>
c000f919:	5a                   	pop    edx
c000f91a:	59                   	pop    ecx
c000f91b:	57                   	push   edi
c000f91c:	56                   	push   esi
c000f91d:	e8 76 fe ff ff       	call   c000f798 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000f922:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f926:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f92a:	83 c4 0c             	add    esp,0xc
c000f92d:	0f ac d0 0c          	shrd   eax,edx,0xc
c000f931:	03 05 70 a6 02 c0    	add    eax,DWORD PTR ds:0xc002a670
c000f937:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f93e:	a3 70 a6 02 c0       	mov    ds:0xc002a670,eax
c000f943:	52                   	push   edx
c000f944:	50                   	push   eax
c000f945:	68 aa 6d 02 c0       	push   0xc0026daa
c000f94a:	e8 e0 28 00 00       	call   c001222f <Dbg::kprintf(char const*, ...)>
c000f94f:	83 c4 10             	add    esp,0x10
c000f952:	e9 ef fe ff ff       	jmp    c000f846 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000f957:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000f95b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f95f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f963:	39 ea                	cmp    edx,ebp
c000f965:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000f969:	0f 82 d7 fe ff ff    	jb     c000f846 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000f96f:	ba ff 1f 00 00       	mov    edx,0x1fff
c000f974:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000f978:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000f97c:	0f 83 c4 fe ff ff    	jae    c000f846 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000f982:	39 ee                	cmp    esi,ebp
c000f984:	89 f8                	mov    eax,edi
c000f986:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000f98a:	0f 83 78 ff ff ff    	jae    c000f908 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000f990:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f994:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f998:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000f99c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000f9a0:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000f9a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f9a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f9ac:	e9 57 ff ff ff       	jmp    c000f908 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000f9b1:	83 ec 0c             	sub    esp,0xc
c000f9b4:	68 9c 6d 02 c0       	push   0xc0026d9c
c000f9b9:	e8 e9 90 00 00       	call   c0018aa7 <Krnl::panic(char const*)>
c000f9be:	83 c4 10             	add    esp,0x10
c000f9c1:	bb 40 01 00 00       	mov    ebx,0x140
c000f9c6:	83 ec 08             	sub    esp,0x8
c000f9c9:	6a 00                	push   0x0
c000f9cb:	53                   	push   ebx
c000f9cc:	43                   	inc    ebx
c000f9cd:	e8 26 fc ff ff       	call   c000f5f8 <Phys::setPageState(unsigned long, bool)>
c000f9d2:	ff 05 70 a6 02 c0    	inc    DWORD PTR ds:0xc002a670
c000f9d8:	83 c4 10             	add    esp,0x10
c000f9db:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000f9e1:	75 e3                	jne    c000f9c6 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c000f9e3:	83 c4 3c             	add    esp,0x3c
c000f9e6:	5b                   	pop    ebx
c000f9e7:	5e                   	pop    esi
c000f9e8:	5f                   	pop    edi
c000f9e9:	5d                   	pop    ebp
c000f9ea:	c3                   	ret    
c000f9eb:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000f9f3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f9fb:	e9 d7 fe ff ff       	jmp    c000f8d7 <Phys::physicalMemorySetup(unsigned int)+0x107>

c000fa00 <Pipe::isAtty()>:
c000fa00:	31 c0                	xor    eax,eax
c000fa02:	c3                   	ret    
c000fa03:	90                   	nop

c000fa04 <Pipe::~Pipe()>:
c000fa04:	83 ec 0c             	sub    esp,0xc
c000fa07:	ba 58 6e 02 c0       	mov    edx,0xc0026e58
c000fa0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa10:	89 10                	mov    DWORD PTR [eax],edx
c000fa12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa16:	83 ec 0c             	sub    esp,0xc
c000fa19:	50                   	push   eax
c000fa1a:	e8 dd 15 00 00       	call   c0010ffc <UnixFile::~UnixFile()>
c000fa1f:	83 c4 10             	add    esp,0x10
c000fa22:	90                   	nop
c000fa23:	83 c4 0c             	add    esp,0xc
c000fa26:	c3                   	ret    
c000fa27:	90                   	nop

c000fa28 <Pipe::~Pipe()>:
c000fa28:	83 ec 0c             	sub    esp,0xc
c000fa2b:	83 ec 0c             	sub    esp,0xc
c000fa2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fa32:	e8 cd ff ff ff       	call   c000fa04 <Pipe::~Pipe()>
c000fa37:	83 c4 10             	add    esp,0x10
c000fa3a:	83 ec 08             	sub    esp,0x8
c000fa3d:	6a 20                	push   0x20
c000fa3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fa43:	e8 07 27 00 00       	call   c001214f <operator delete(void*, unsigned long)>
c000fa48:	83 c4 10             	add    esp,0x10
c000fa4b:	83 c4 0c             	add    esp,0xc
c000fa4e:	c3                   	ret    
c000fa4f:	90                   	nop

c000fa50 <Pipe::read(unsigned long long, void*, int*)>:
c000fa50:	55                   	push   ebp
c000fa51:	57                   	push   edi
c000fa52:	56                   	push   esi
c000fa53:	53                   	push   ebx
c000fa54:	83 ec 1c             	sub    esp,0x1c
c000fa57:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000fa5b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000fa5f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000fa63:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000fa66:	89 c8                	mov    eax,ecx
c000fa68:	99                   	cdq    
c000fa69:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000fa6d:	74 19                	je     c000fa88 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000fa6f:	39 f9                	cmp    ecx,edi
c000fa71:	89 d1                	mov    ecx,edx
c000fa73:	19 f1                	sbb    ecx,esi
c000fa75:	73 11                	jae    c000fa88 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000fa77:	e8 7e bf 00 00       	call   c001b9fa <lockScheduler()>
c000fa7c:	e8 ad c2 00 00       	call   c001bd2e <schedule()>
c000fa81:	e8 76 bf 00 00       	call   c001b9fc <unlockScheduler()>
c000fa86:	eb db                	jmp    c000fa63 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fa88:	39 f8                	cmp    eax,edi
c000fa8a:	89 d1                	mov    ecx,edx
c000fa8c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000fa90:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000fa94:	19 f1                	sbb    ecx,esi
c000fa96:	73 08                	jae    c000faa0 <Pipe::read(unsigned long long, void*, int*)+0x50>
c000fa98:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fa9c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000faa0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000faa3:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000faa6:	29 c6                	sub    esi,eax
c000faa8:	89 f1                	mov    ecx,esi
c000faaa:	c1 f9 1f             	sar    ecx,0x1f
c000faad:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000fab1:	89 ca                	mov    edx,ecx
c000fab3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fab7:	19 d1                	sbb    ecx,edx
c000fab9:	73 04                	jae    c000fabf <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000fabb:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000fabf:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fac3:	89 fd                	mov    ebp,edi
c000fac5:	29 f5                	sub    ebp,esi
c000fac7:	85 f6                	test   esi,esi
c000fac9:	74 12                	je     c000fadd <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000facb:	52                   	push   edx
c000facc:	56                   	push   esi
c000facd:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000fad0:	50                   	push   eax
c000fad1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000fad5:	e8 6d 0b ff ff       	call   c0000647 <memcpy>
c000fada:	83 c4 10             	add    esp,0x10
c000fadd:	85 ed                	test   ebp,ebp
c000fadf:	74 12                	je     c000faf3 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000fae1:	50                   	push   eax
c000fae2:	55                   	push   ebp
c000fae3:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000fae6:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000faea:	56                   	push   esi
c000faeb:	e8 57 0b ff ff       	call   c0000647 <memcpy>
c000faf0:	83 c4 10             	add    esp,0x10
c000faf3:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000faf6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000faf9:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000fafc:	99                   	cdq    
c000fafd:	89 f7                	mov    edi,esi
c000faff:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000fb03:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000fb07:	c1 ff 1f             	sar    edi,0x1f
c000fb0a:	57                   	push   edi
c000fb0b:	56                   	push   esi
c000fb0c:	52                   	push   edx
c000fb0d:	50                   	push   eax
c000fb0e:	e8 29 3b 01 00       	call   c002363c <__umoddi3>
c000fb13:	83 c4 10             	add    esp,0x10
c000fb16:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000fb19:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000fb1e:	75 10                	jne    c000fb30 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000fb20:	83 ec 0c             	sub    esp,0xc
c000fb23:	68 15 6e 02 c0       	push   0xc0026e15
c000fb28:	e8 7a 8f 00 00       	call   c0018aa7 <Krnl::panic(char const*)>
c000fb2d:	83 c4 10             	add    esp,0x10
c000fb30:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fb34:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fb38:	89 10                	mov    DWORD PTR [eax],edx
c000fb3a:	83 c4 1c             	add    esp,0x1c
c000fb3d:	31 c0                	xor    eax,eax
c000fb3f:	5b                   	pop    ebx
c000fb40:	5e                   	pop    esi
c000fb41:	5f                   	pop    edi
c000fb42:	5d                   	pop    ebp
c000fb43:	c3                   	ret    

c000fb44 <Pipe::write(unsigned long long, void*, int*)>:
c000fb44:	55                   	push   ebp
c000fb45:	57                   	push   edi
c000fb46:	56                   	push   esi
c000fb47:	53                   	push   ebx
c000fb48:	83 ec 1c             	sub    esp,0x1c
c000fb4b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fb4f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000fb53:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000fb57:	89 04 24             	mov    DWORD PTR [esp],eax
c000fb5a:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000fb5d:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000fb60:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fb64:	89 de                	mov    esi,ebx
c000fb66:	89 df                	mov    edi,ebx
c000fb68:	c1 ff 1f             	sar    edi,0x1f
c000fb6b:	01 c6                	add    esi,eax
c000fb6d:	89 c8                	mov    eax,ecx
c000fb6f:	11 d7                	adc    edi,edx
c000fb71:	99                   	cdq    
c000fb72:	39 f1                	cmp    ecx,esi
c000fb74:	89 d0                	mov    eax,edx
c000fb76:	19 f8                	sbb    eax,edi
c000fb78:	b8 01 00 00 00       	mov    eax,0x1
c000fb7d:	0f 82 80 00 00 00    	jb     c000fc03 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000fb83:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000fb86:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000fb89:	01 d8                	add    eax,ebx
c000fb8b:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000fb8f:	99                   	cdq    
c000fb90:	f7 f9                	idiv   ecx
c000fb92:	29 d1                	sub    ecx,edx
c000fb94:	89 d7                	mov    edi,edx
c000fb96:	89 c8                	mov    eax,ecx
c000fb98:	99                   	cdq    
c000fb99:	39 ce                	cmp    esi,ecx
c000fb9b:	19 d3                	sbb    ebx,edx
c000fb9d:	bb 00 00 00 00       	mov    ebx,0x0
c000fba2:	72 04                	jb     c000fba8 <Pipe::write(unsigned long long, void*, int*)+0x64>
c000fba4:	89 f3                	mov    ebx,esi
c000fba6:	29 cb                	sub    ebx,ecx
c000fba8:	89 f1                	mov    ecx,esi
c000fbaa:	29 d9                	sub    ecx,ebx
c000fbac:	74 1a                	je     c000fbc8 <Pipe::write(unsigned long long, void*, int*)+0x84>
c000fbae:	52                   	push   edx
c000fbaf:	51                   	push   ecx
c000fbb0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000fbb4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000fbb8:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000fbbb:	57                   	push   edi
c000fbbc:	e8 86 0a ff ff       	call   c0000647 <memcpy>
c000fbc1:	83 c4 10             	add    esp,0x10
c000fbc4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fbc8:	85 db                	test   ebx,ebx
c000fbca:	74 12                	je     c000fbde <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000fbcc:	50                   	push   eax
c000fbcd:	53                   	push   ebx
c000fbce:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000fbd2:	51                   	push   ecx
c000fbd3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000fbd6:	e8 6c 0a ff ff       	call   c0000647 <memcpy>
c000fbdb:	83 c4 10             	add    esp,0x10
c000fbde:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000fbe1:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000fbe6:	75 10                	jne    c000fbf8 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000fbe8:	83 ec 0c             	sub    esp,0xc
c000fbeb:	68 31 6e 02 c0       	push   0xc0026e31
c000fbf0:	e8 b2 8e 00 00       	call   c0018aa7 <Krnl::panic(char const*)>
c000fbf5:	83 c4 10             	add    esp,0x10
c000fbf8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fbfc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000fbff:	89 38                	mov    DWORD PTR [eax],edi
c000fc01:	31 c0                	xor    eax,eax
c000fc03:	83 c4 1c             	add    esp,0x1c
c000fc06:	5b                   	pop    ebx
c000fc07:	5e                   	pop    esi
c000fc08:	5f                   	pop    edi
c000fc09:	5d                   	pop    ebp
c000fc0a:	c3                   	ret    
c000fc0b:	90                   	nop

c000fc0c <Pipe::Pipe(int)>:
c000fc0c:	83 ec 0c             	sub    esp,0xc
c000fc0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc13:	83 ec 08             	sub    esp,0x8
c000fc16:	6a 00                	push   0x0
c000fc18:	50                   	push   eax
c000fc19:	e8 3c 12 00 00       	call   c0010e5a <UnixFile::UnixFile(int)>
c000fc1e:	83 c4 10             	add    esp,0x10
c000fc21:	ba 58 6e 02 c0       	mov    edx,0xc0026e58
c000fc26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc2a:	89 10                	mov    DWORD PTR [eax],edx
c000fc2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc30:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000fc34:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000fc37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc3b:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000fc42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc46:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000fc4d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc51:	83 ec 0c             	sub    esp,0xc
c000fc54:	50                   	push   eax
c000fc55:	e8 cc f4 ff ff       	call   c000f126 <malloc>
c000fc5a:	83 c4 10             	add    esp,0x10
c000fc5d:	89 c2                	mov    edx,eax
c000fc5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc63:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000fc66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc6a:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000fc6e:	90                   	nop
c000fc6f:	83 c4 0c             	add    esp,0xc
c000fc72:	c3                   	ret    
c000fc73:	90                   	nop

c000fc74 <VgaText::isAtty()>:
c000fc74:	b0 01                	mov    al,0x1
c000fc76:	c3                   	ret    
c000fc77:	90                   	nop

c000fc78 <VgaText::~VgaText()>:
c000fc78:	83 ec 0c             	sub    esp,0xc
c000fc7b:	ba 14 6f 02 c0       	mov    edx,0xc0026f14
c000fc80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc84:	89 10                	mov    DWORD PTR [eax],edx
c000fc86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc8a:	83 ec 0c             	sub    esp,0xc
c000fc8d:	50                   	push   eax
c000fc8e:	e8 69 13 00 00       	call   c0010ffc <UnixFile::~UnixFile()>
c000fc93:	83 c4 10             	add    esp,0x10
c000fc96:	90                   	nop
c000fc97:	83 c4 0c             	add    esp,0xc
c000fc9a:	c3                   	ret    
c000fc9b:	90                   	nop

c000fc9c <VgaText::~VgaText()>:
c000fc9c:	83 ec 0c             	sub    esp,0xc
c000fc9f:	83 ec 0c             	sub    esp,0xc
c000fca2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fca6:	e8 cd ff ff ff       	call   c000fc78 <VgaText::~VgaText()>
c000fcab:	83 c4 10             	add    esp,0x10
c000fcae:	83 ec 08             	sub    esp,0x8
c000fcb1:	68 60 12 00 00       	push   0x1260
c000fcb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fcba:	e8 90 24 00 00       	call   c001214f <operator delete(void*, unsigned long)>
c000fcbf:	83 c4 10             	add    esp,0x10
c000fcc2:	83 c4 0c             	add    esp,0xc
c000fcc5:	c3                   	ret    

c000fcc6 <VgaText::read(unsigned long long, void*, int*)>:
c000fcc6:	83 ec 10             	sub    esp,0x10
c000fcc9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fccd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fcd1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fcd5:	e8 26 57 00 00       	call   c0015400 <readKeyboard(VgaText*, char*, unsigned long)>
c000fcda:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000fcde:	89 02                	mov    DWORD PTR [edx],eax
c000fce0:	31 c0                	xor    eax,eax
c000fce2:	83 c4 1c             	add    esp,0x1c
c000fce5:	c3                   	ret    

c000fce6 <setTerminalScrollLock(bool)>:
c000fce6:	c3                   	ret    

c000fce7 <addToTerminalCycle(VgaText*)>:
c000fce7:	8b 15 e0 a6 02 c0    	mov    edx,DWORD PTR ds:0xc002a6e0
c000fced:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fcf1:	85 d2                	test   edx,edx
c000fcf3:	75 0c                	jne    c000fd01 <addToTerminalCycle(VgaText*)+0x1a>
c000fcf5:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c000fcfb:	a3 e0 a6 02 c0       	mov    ds:0xc002a6e0,eax
c000fd00:	c3                   	ret    
c000fd01:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c000fd07:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c000fd0d:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c000fd13:	c3                   	ret    

c000fd14 <installVgaTextImplementation()>:
c000fd14:	83 ec 10             	sub    esp,0x10
c000fd17:	6a 20                	push   0x20
c000fd19:	6a 00                	push   0x0
c000fd1b:	68 c0 a6 02 c0       	push   0xc002a6c0
c000fd20:	e8 58 09 ff ff       	call   c000067d <memset>
c000fd25:	83 c4 1c             	add    esp,0x1c
c000fd28:	c3                   	ret    

c000fd29 <scrollTerminalScrollLock(int)>:
c000fd29:	c3                   	ret    

c000fd2a <VgaText::load()>:
c000fd2a:	53                   	push   ebx
c000fd2b:	31 c0                	xor    eax,eax
c000fd2d:	83 ec 58             	sub    esp,0x58
c000fd30:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000fd34:	89 e2                	mov    edx,esp
c000fd36:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000fd3a:	40                   	inc    eax
c000fd3b:	83 f8 50             	cmp    eax,0x50
c000fd3e:	75 f6                	jne    c000fd36 <VgaText::load()+0xc>
c000fd40:	31 c0                	xor    eax,eax
c000fd42:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c000fd49:	84 c9                	test   cl,cl
c000fd4b:	74 06                	je     c000fd53 <VgaText::load()+0x29>
c000fd4d:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000fd50:	40                   	inc    eax
c000fd51:	eb ef                	jmp    c000fd42 <VgaText::load()+0x18>
c000fd53:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c000fd59:	85 c0                	test   eax,eax
c000fd5b:	74 09                	je     c000fd66 <VgaText::load()+0x3c>
c000fd5d:	51                   	push   ecx
c000fd5e:	51                   	push   ecx
c000fd5f:	52                   	push   edx
c000fd60:	53                   	push   ebx
c000fd61:	ff d0                	call   eax
c000fd63:	83 c4 10             	add    esp,0x10
c000fd66:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c000fd6c:	85 c0                	test   eax,eax
c000fd6e:	74 09                	je     c000fd79 <VgaText::load()+0x4f>
c000fd70:	83 ec 0c             	sub    esp,0xc
c000fd73:	53                   	push   ebx
c000fd74:	ff d0                	call   eax
c000fd76:	83 c4 10             	add    esp,0x10
c000fd79:	83 c4 58             	add    esp,0x58
c000fd7c:	5b                   	pop    ebx
c000fd7d:	c3                   	ret    

c000fd7e <VgaText::updateCursor()>:
c000fd7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fd82:	39 05 e4 a6 02 c0    	cmp    DWORD PTR ds:0xc002a6e4,eax
c000fd88:	75 0c                	jne    c000fd96 <VgaText::updateCursor()+0x18>
c000fd8a:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c000fd90:	85 c0                	test   eax,eax
c000fd92:	74 02                	je     c000fd96 <VgaText::updateCursor()+0x18>
c000fd94:	ff e0                	jmp    eax
c000fd96:	c3                   	ret    
c000fd97:	90                   	nop

c000fd98 <VgaText::showCursor(bool)>:
c000fd98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fd9c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fda0:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c000fda6:	c3                   	ret    
c000fda7:	90                   	nop

c000fda8 <VgaText::disableBlink(bool)>:
c000fda8:	56                   	push   esi
c000fda9:	53                   	push   ebx
c000fdaa:	51                   	push   ecx
c000fdab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fdaf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000fdb3:	39 1d e4 a6 02 c0    	cmp    DWORD PTR ds:0xc002a6e4,ebx
c000fdb9:	75 18                	jne    c000fdd3 <VgaText::disableBlink(bool)+0x2b>
c000fdbb:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c000fdc1:	85 c0                	test   eax,eax
c000fdc3:	74 0e                	je     c000fdd3 <VgaText::disableBlink(bool)+0x2b>
c000fdc5:	89 f1                	mov    ecx,esi
c000fdc7:	52                   	push   edx
c000fdc8:	52                   	push   edx
c000fdc9:	0f b6 d1             	movzx  edx,cl
c000fdcc:	52                   	push   edx
c000fdcd:	53                   	push   ebx
c000fdce:	ff d0                	call   eax
c000fdd0:	83 c4 10             	add    esp,0x10
c000fdd3:	89 f0                	mov    eax,esi
c000fdd5:	83 f0 01             	xor    eax,0x1
c000fdd8:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c000fdde:	58                   	pop    eax
c000fddf:	5b                   	pop    ebx
c000fde0:	5e                   	pop    esi
c000fde1:	c3                   	ret    

c000fde2 <VgaText::doANSI_SGR(int)>:
c000fde2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fde6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdea:	85 d2                	test   edx,edx
c000fdec:	75 14                	jne    c000fe02 <VgaText::doANSI_SGR(int)+0x20>
c000fdee:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c000fdf4:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000fdfa:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c000fe00:	eb 65                	jmp    c000fe67 <VgaText::doANSI_SGR(int)+0x85>
c000fe02:	83 fa 07             	cmp    edx,0x7
c000fe05:	75 14                	jne    c000fe1b <VgaText::doANSI_SGR(int)+0x39>
c000fe07:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c000fe0d:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c000fe13:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c000fe19:	eb 4c                	jmp    c000fe67 <VgaText::doANSI_SGR(int)+0x85>
c000fe1b:	83 fa 1b             	cmp    edx,0x1b
c000fe1e:	74 ce                	je     c000fdee <VgaText::doANSI_SGR(int)+0xc>
c000fe20:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000fe23:	83 f9 07             	cmp    ecx,0x7
c000fe26:	77 09                	ja     c000fe31 <VgaText::doANSI_SGR(int)+0x4f>
c000fe28:	8b 14 8d 00 96 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd6a00]
c000fe2f:	eb 20                	jmp    c000fe51 <VgaText::doANSI_SGR(int)+0x6f>
c000fe31:	8d 4a d8             	lea    ecx,[edx-0x28]
c000fe34:	83 f9 07             	cmp    ecx,0x7
c000fe37:	77 09                	ja     c000fe42 <VgaText::doANSI_SGR(int)+0x60>
c000fe39:	8b 14 8d 00 96 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd6a00]
c000fe40:	eb 25                	jmp    c000fe67 <VgaText::doANSI_SGR(int)+0x85>
c000fe42:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000fe45:	83 f9 07             	cmp    ecx,0x7
c000fe48:	77 0e                	ja     c000fe58 <VgaText::doANSI_SGR(int)+0x76>
c000fe4a:	8b 14 95 b8 94 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6b48]
c000fe51:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000fe57:	c3                   	ret    
c000fe58:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000fe5b:	83 f9 07             	cmp    ecx,0x7
c000fe5e:	77 0d                	ja     c000fe6d <VgaText::doANSI_SGR(int)+0x8b>
c000fe60:	8b 14 95 90 94 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6b70]
c000fe67:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000fe6d:	c3                   	ret    

c000fe6e <VgaText::setDefaultBgColour(VgaColour)>:
c000fe6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe72:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fe76:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c000fe7c:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000fe82:	c3                   	ret    
c000fe83:	90                   	nop

c000fe84 <VgaText::setDefaultFgColour(VgaColour)>:
c000fe84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe88:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fe8c:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c000fe92:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000fe98:	c3                   	ret    
c000fe99:	90                   	nop

c000fe9a <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000fe9a:	53                   	push   ebx
c000fe9b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fe9f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fea3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fea7:	51                   	push   ecx
c000fea8:	e8 c1 ff ff ff       	call   c000fe6e <VgaText::setDefaultBgColour(VgaColour)>
c000fead:	58                   	pop    eax
c000feae:	5a                   	pop    edx
c000feaf:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000feb3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000feb7:	5b                   	pop    ebx
c000feb8:	eb ca                	jmp    c000fe84 <VgaText::setDefaultFgColour(VgaColour)>

c000feba <VgaText::combineColours(unsigned char, unsigned char)>:
c000feba:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000febe:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000fec3:	83 e0 0f             	and    eax,0xf
c000fec6:	c1 e2 04             	shl    edx,0x4
c000fec9:	09 d0                	or     eax,edx
c000fecb:	c3                   	ret    

c000fecc <VgaText::scrollScreen()>:
c000fecc:	57                   	push   edi
c000fecd:	56                   	push   esi
c000fece:	be 01 00 00 00       	mov    esi,0x1
c000fed3:	53                   	push   ebx
c000fed4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fed8:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000fede:	31 ff                	xor    edi,edi
c000fee0:	01 d9                	add    ecx,ebx
c000fee2:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c000fee5:	83 fe 17             	cmp    esi,0x17
c000fee8:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c000feee:	75 28                	jne    c000ff18 <VgaText::scrollScreen()+0x4c>
c000fef0:	f7 c7 01 00 00 00    	test   edi,0x1
c000fef6:	74 1c                	je     c000ff14 <VgaText::scrollScreen()+0x48>
c000fef8:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c000feff:	50                   	push   eax
c000ff00:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c000ff07:	50                   	push   eax
c000ff08:	e8 ad ff ff ff       	call   c000feba <VgaText::combineColours(unsigned char, unsigned char)>
c000ff0d:	5a                   	pop    edx
c000ff0e:	5a                   	pop    edx
c000ff0f:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c000ff12:	eb 04                	jmp    c000ff18 <VgaText::scrollScreen()+0x4c>
c000ff14:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c000ff18:	47                   	inc    edi
c000ff19:	41                   	inc    ecx
c000ff1a:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000ff20:	75 c0                	jne    c000fee2 <VgaText::scrollScreen()+0x16>
c000ff22:	46                   	inc    esi
c000ff23:	83 fe 18             	cmp    esi,0x18
c000ff26:	75 b0                	jne    c000fed8 <VgaText::scrollScreen()+0xc>
c000ff28:	39 1d e4 a6 02 c0    	cmp    DWORD PTR ds:0xc002a6e4,ebx
c000ff2e:	75 24                	jne    c000ff54 <VgaText::scrollScreen()+0x88>
c000ff30:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000ff37:	74 08                	je     c000ff41 <VgaText::scrollScreen()+0x75>
c000ff39:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c000ff3f:	eb 13                	jmp    c000ff54 <VgaText::scrollScreen()+0x88>
c000ff41:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c000ff47:	85 c0                	test   eax,eax
c000ff49:	74 09                	je     c000ff54 <VgaText::scrollScreen()+0x88>
c000ff4b:	83 ec 0c             	sub    esp,0xc
c000ff4e:	53                   	push   ebx
c000ff4f:	ff d0                	call   eax
c000ff51:	83 c4 10             	add    esp,0x10
c000ff54:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ff58:	5b                   	pop    ebx
c000ff59:	5e                   	pop    esi
c000ff5a:	5f                   	pop    edi
c000ff5b:	e9 1e fe ff ff       	jmp    c000fd7e <VgaText::updateCursor()>

c000ff60 <VgaText::combineCharAndColour(char, unsigned char)>:
c000ff60:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000ff65:	c1 e0 08             	shl    eax,0x8
c000ff68:	89 c2                	mov    edx,eax
c000ff6a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000ff6f:	09 d0                	or     eax,edx
c000ff71:	c3                   	ret    

c000ff72 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000ff72:	53                   	push   ebx
c000ff73:	83 ec 08             	sub    esp,0x8
c000ff76:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ff7a:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ff7f:	50                   	push   eax
c000ff80:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ff85:	50                   	push   eax
c000ff86:	e8 2f ff ff ff       	call   c000feba <VgaText::combineColours(unsigned char, unsigned char)>
c000ff8b:	5a                   	pop    edx
c000ff8c:	0f b6 c0             	movzx  eax,al
c000ff8f:	5b                   	pop    ebx
c000ff90:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000ff95:	50                   	push   eax
c000ff96:	53                   	push   ebx
c000ff97:	e8 c4 ff ff ff       	call   c000ff60 <VgaText::combineCharAndColour(char, unsigned char)>
c000ff9c:	5a                   	pop    edx
c000ff9d:	5a                   	pop    edx
c000ff9e:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000ffa4:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000ffa8:	0f b7 d2             	movzx  edx,dx
c000ffab:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c000ffb0:	39 0d e4 a6 02 c0    	cmp    DWORD PTR ds:0xc002a6e4,ecx
c000ffb6:	75 14                	jne    c000ffcc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000ffb8:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c000ffbe:	85 c0                	test   eax,eax
c000ffc0:	74 0a                	je     c000ffcc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000ffc2:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000ffc6:	83 c4 08             	add    esp,0x8
c000ffc9:	5b                   	pop    ebx
c000ffca:	ff e0                	jmp    eax
c000ffcc:	83 c4 08             	add    esp,0x8
c000ffcf:	5b                   	pop    ebx
c000ffd0:	c3                   	ret    
c000ffd1:	90                   	nop

c000ffd2 <VgaText::getCursorX()>:
c000ffd2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ffd6:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c000ffdc:	c3                   	ret    
c000ffdd:	90                   	nop

c000ffde <VgaText::getCursorY()>:
c000ffde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ffe2:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c000ffe8:	c3                   	ret    
c000ffe9:	90                   	nop

c000ffea <VgaText::setCursor(int, int)>:
c000ffea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ffee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fff2:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c000fff8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fffc:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c0010002:	e9 77 fd ff ff       	jmp    c000fd7e <VgaText::updateCursor()>
c0010007:	90                   	nop

c0010008 <VgaText::setCursorX(int)>:
c0010008:	83 ec 10             	sub    esp,0x10
c001000b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001000f:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c0010015:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010019:	50                   	push   eax
c001001a:	e8 cb ff ff ff       	call   c000ffea <VgaText::setCursor(int, int)>
c001001f:	83 c4 1c             	add    esp,0x1c
c0010022:	c3                   	ret    
c0010023:	90                   	nop

c0010024 <VgaText::setCursorY(int)>:
c0010024:	83 ec 10             	sub    esp,0x10
c0010027:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001002b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001002f:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c0010035:	50                   	push   eax
c0010036:	e8 af ff ff ff       	call   c000ffea <VgaText::setCursor(int, int)>
c001003b:	83 c4 1c             	add    esp,0x1c
c001003e:	c3                   	ret    
c001003f:	90                   	nop

c0010040 <VgaText::incrementCursor(bool)>:
c0010040:	56                   	push   esi
c0010041:	53                   	push   ebx
c0010042:	51                   	push   ecx
c0010043:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010047:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001004b:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c0010051:	40                   	inc    eax
c0010052:	83 f8 50             	cmp    eax,0x50
c0010055:	74 08                	je     c001005f <VgaText::incrementCursor(bool)+0x1f>
c0010057:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c001005d:	eb 33                	jmp    c0010092 <VgaText::incrementCursor(bool)+0x52>
c001005f:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010065:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c001006f:	8d 50 01             	lea    edx,[eax+0x1]
c0010072:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010078:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c001007e:	75 12                	jne    c0010092 <VgaText::incrementCursor(bool)+0x52>
c0010080:	83 ec 0c             	sub    esp,0xc
c0010083:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010089:	53                   	push   ebx
c001008a:	e8 3d fe ff ff       	call   c000fecc <VgaText::scrollScreen()>
c001008f:	83 c4 10             	add    esp,0x10
c0010092:	89 f0                	mov    eax,esi
c0010094:	84 c0                	test   al,al
c0010096:	74 0c                	je     c00100a4 <VgaText::incrementCursor(bool)+0x64>
c0010098:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001009c:	5a                   	pop    edx
c001009d:	5b                   	pop    ebx
c001009e:	5e                   	pop    esi
c001009f:	e9 da fc ff ff       	jmp    c000fd7e <VgaText::updateCursor()>
c00100a4:	58                   	pop    eax
c00100a5:	5b                   	pop    ebx
c00100a6:	5e                   	pop    esi
c00100a7:	c3                   	ret    

c00100a8 <VgaText::updateRAMUsageDisplay(int)>:
c00100a8:	53                   	push   ebx
c00100a9:	bb 0a 00 00 00       	mov    ebx,0xa
c00100ae:	6a 0f                	push   0xf
c00100b0:	6a 00                	push   0x0
c00100b2:	e8 03 fe ff ff       	call   c000feba <VgaText::combineColours(unsigned char, unsigned char)>
c00100b7:	5a                   	pop    edx
c00100b8:	59                   	pop    ecx
c00100b9:	0f b6 c8             	movzx  ecx,al
c00100bc:	51                   	push   ecx
c00100bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00100c1:	99                   	cdq    
c00100c2:	f7 fb                	idiv   ebx
c00100c4:	89 d3                	mov    ebx,edx
c00100c6:	83 c0 30             	add    eax,0x30
c00100c9:	83 c3 30             	add    ebx,0x30
c00100cc:	0f be c0             	movsx  eax,al
c00100cf:	0f b6 db             	movzx  ebx,bl
c00100d2:	50                   	push   eax
c00100d3:	e8 88 fe ff ff       	call   c000ff60 <VgaText::combineCharAndColour(char, unsigned char)>
c00100d8:	5a                   	pop    edx
c00100d9:	5a                   	pop    edx
c00100da:	66 a3 96 80 0b c2    	mov    ds:0xc20b8096,ax
c00100e0:	51                   	push   ecx
c00100e1:	53                   	push   ebx
c00100e2:	e8 79 fe ff ff       	call   c000ff60 <VgaText::combineCharAndColour(char, unsigned char)>
c00100e7:	5b                   	pop    ebx
c00100e8:	5a                   	pop    edx
c00100e9:	66 a3 98 80 0b c2    	mov    ds:0xc20b8098,ax
c00100ef:	51                   	push   ecx
c00100f0:	6a 25                	push   0x25
c00100f2:	e8 69 fe ff ff       	call   c000ff60 <VgaText::combineCharAndColour(char, unsigned char)>
c00100f7:	59                   	pop    ecx
c00100f8:	5b                   	pop    ebx
c00100f9:	66 a3 9a 80 0b c2    	mov    ds:0xc20b809a,ax
c00100ff:	5b                   	pop    ebx
c0010100:	c3                   	ret    
c0010101:	90                   	nop

c0010102 <VgaText::updateDiskUsage()>:
c0010102:	55                   	push   ebp
c0010103:	bd 10 27 00 00       	mov    ebp,0x2710
c0010108:	57                   	push   edi
c0010109:	56                   	push   esi
c001010a:	53                   	push   ebx
c001010b:	6a 0f                	push   0xf
c001010d:	6a 00                	push   0x0
c001010f:	e8 a6 fd ff ff       	call   c000feba <VgaText::combineColours(unsigned char, unsigned char)>
c0010114:	5a                   	pop    edx
c0010115:	0f b6 d8             	movzx  ebx,al
c0010118:	59                   	pop    ecx
c0010119:	a1 e8 c8 02 c0       	mov    eax,ds:0xc002c8e8
c001011e:	53                   	push   ebx
c001011f:	b9 0a 00 00 00       	mov    ecx,0xa
c0010124:	99                   	cdq    
c0010125:	f7 fd                	idiv   ebp
c0010127:	99                   	cdq    
c0010128:	f7 f9                	idiv   ecx
c001012a:	8d 42 30             	lea    eax,[edx+0x30]
c001012d:	0f b6 c0             	movzx  eax,al
c0010130:	50                   	push   eax
c0010131:	e8 2a fe ff ff       	call   c000ff60 <VgaText::combineCharAndColour(char, unsigned char)>
c0010136:	5e                   	pop    esi
c0010137:	5f                   	pop    edi
c0010138:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001013e:	bf e8 03 00 00       	mov    edi,0x3e8
c0010143:	53                   	push   ebx
c0010144:	a1 e8 c8 02 c0       	mov    eax,ds:0xc002c8e8
c0010149:	99                   	cdq    
c001014a:	f7 ff                	idiv   edi
c001014c:	99                   	cdq    
c001014d:	f7 f9                	idiv   ecx
c001014f:	8d 42 30             	lea    eax,[edx+0x30]
c0010152:	0f b6 c0             	movzx  eax,al
c0010155:	50                   	push   eax
c0010156:	e8 05 fe ff ff       	call   c000ff60 <VgaText::combineCharAndColour(char, unsigned char)>
c001015b:	5a                   	pop    edx
c001015c:	5e                   	pop    esi
c001015d:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c0010163:	be 64 00 00 00       	mov    esi,0x64
c0010168:	53                   	push   ebx
c0010169:	a1 e8 c8 02 c0       	mov    eax,ds:0xc002c8e8
c001016e:	99                   	cdq    
c001016f:	f7 fe                	idiv   esi
c0010171:	99                   	cdq    
c0010172:	f7 f9                	idiv   ecx
c0010174:	8d 42 30             	lea    eax,[edx+0x30]
c0010177:	0f b6 c0             	movzx  eax,al
c001017a:	50                   	push   eax
c001017b:	e8 e0 fd ff ff       	call   c000ff60 <VgaText::combineCharAndColour(char, unsigned char)>
c0010180:	5a                   	pop    edx
c0010181:	5a                   	pop    edx
c0010182:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c0010188:	53                   	push   ebx
c0010189:	a1 e8 c8 02 c0       	mov    eax,ds:0xc002c8e8
c001018e:	99                   	cdq    
c001018f:	f7 f9                	idiv   ecx
c0010191:	99                   	cdq    
c0010192:	f7 f9                	idiv   ecx
c0010194:	8d 42 30             	lea    eax,[edx+0x30]
c0010197:	0f b6 c0             	movzx  eax,al
c001019a:	50                   	push   eax
c001019b:	e8 c0 fd ff ff       	call   c000ff60 <VgaText::combineCharAndColour(char, unsigned char)>
c00101a0:	5a                   	pop    edx
c00101a1:	5a                   	pop    edx
c00101a2:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c00101a8:	53                   	push   ebx
c00101a9:	a1 e8 c8 02 c0       	mov    eax,ds:0xc002c8e8
c00101ae:	99                   	cdq    
c00101af:	f7 f9                	idiv   ecx
c00101b1:	8d 42 30             	lea    eax,[edx+0x30]
c00101b4:	0f b6 c0             	movzx  eax,al
c00101b7:	50                   	push   eax
c00101b8:	e8 a3 fd ff ff       	call   c000ff60 <VgaText::combineCharAndColour(char, unsigned char)>
c00101bd:	5a                   	pop    edx
c00101be:	5a                   	pop    edx
c00101bf:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c00101c5:	53                   	push   ebx
c00101c6:	a1 e4 c8 02 c0       	mov    eax,ds:0xc002c8e4
c00101cb:	99                   	cdq    
c00101cc:	f7 fd                	idiv   ebp
c00101ce:	99                   	cdq    
c00101cf:	f7 f9                	idiv   ecx
c00101d1:	8d 42 30             	lea    eax,[edx+0x30]
c00101d4:	0f b6 c0             	movzx  eax,al
c00101d7:	50                   	push   eax
c00101d8:	e8 83 fd ff ff       	call   c000ff60 <VgaText::combineCharAndColour(char, unsigned char)>
c00101dd:	5d                   	pop    ebp
c00101de:	5a                   	pop    edx
c00101df:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c00101e5:	53                   	push   ebx
c00101e6:	a1 e4 c8 02 c0       	mov    eax,ds:0xc002c8e4
c00101eb:	99                   	cdq    
c00101ec:	f7 ff                	idiv   edi
c00101ee:	99                   	cdq    
c00101ef:	f7 f9                	idiv   ecx
c00101f1:	8d 42 30             	lea    eax,[edx+0x30]
c00101f4:	0f b6 c0             	movzx  eax,al
c00101f7:	50                   	push   eax
c00101f8:	e8 63 fd ff ff       	call   c000ff60 <VgaText::combineCharAndColour(char, unsigned char)>
c00101fd:	5f                   	pop    edi
c00101fe:	5d                   	pop    ebp
c00101ff:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c0010205:	53                   	push   ebx
c0010206:	a1 e4 c8 02 c0       	mov    eax,ds:0xc002c8e4
c001020b:	99                   	cdq    
c001020c:	f7 fe                	idiv   esi
c001020e:	99                   	cdq    
c001020f:	f7 f9                	idiv   ecx
c0010211:	8d 42 30             	lea    eax,[edx+0x30]
c0010214:	0f b6 c0             	movzx  eax,al
c0010217:	50                   	push   eax
c0010218:	e8 43 fd ff ff       	call   c000ff60 <VgaText::combineCharAndColour(char, unsigned char)>
c001021d:	5a                   	pop    edx
c001021e:	5e                   	pop    esi
c001021f:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c0010225:	53                   	push   ebx
c0010226:	a1 e4 c8 02 c0       	mov    eax,ds:0xc002c8e4
c001022b:	99                   	cdq    
c001022c:	f7 f9                	idiv   ecx
c001022e:	99                   	cdq    
c001022f:	f7 f9                	idiv   ecx
c0010231:	8d 42 30             	lea    eax,[edx+0x30]
c0010234:	0f b6 c0             	movzx  eax,al
c0010237:	50                   	push   eax
c0010238:	e8 23 fd ff ff       	call   c000ff60 <VgaText::combineCharAndColour(char, unsigned char)>
c001023d:	5f                   	pop    edi
c001023e:	5d                   	pop    ebp
c001023f:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c0010245:	53                   	push   ebx
c0010246:	a1 e4 c8 02 c0       	mov    eax,ds:0xc002c8e4
c001024b:	99                   	cdq    
c001024c:	f7 f9                	idiv   ecx
c001024e:	83 c2 30             	add    edx,0x30
c0010251:	0f b6 d2             	movzx  edx,dl
c0010254:	52                   	push   edx
c0010255:	e8 06 fd ff ff       	call   c000ff60 <VgaText::combineCharAndColour(char, unsigned char)>
c001025a:	5a                   	pop    edx
c001025b:	59                   	pop    ecx
c001025c:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c0010262:	5b                   	pop    ebx
c0010263:	5e                   	pop    esi
c0010264:	5f                   	pop    edi
c0010265:	5d                   	pop    ebp
c0010266:	c3                   	ret    
c0010267:	90                   	nop

c0010268 <VgaText::updateTitle()>:
c0010268:	53                   	push   ebx
c0010269:	31 c0                	xor    eax,eax
c001026b:	83 ec 58             	sub    esp,0x58
c001026e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010272:	89 e1                	mov    ecx,esp
c0010274:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010278:	40                   	inc    eax
c0010279:	83 f8 50             	cmp    eax,0x50
c001027c:	75 f6                	jne    c0010274 <VgaText::updateTitle()+0xc>
c001027e:	31 c0                	xor    eax,eax
c0010280:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010287:	84 db                	test   bl,bl
c0010289:	74 06                	je     c0010291 <VgaText::updateTitle()+0x29>
c001028b:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c001028e:	40                   	inc    eax
c001028f:	eb ef                	jmp    c0010280 <VgaText::updateTitle()+0x18>
c0010291:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010297:	85 c0                	test   eax,eax
c0010299:	74 09                	je     c00102a4 <VgaText::updateTitle()+0x3c>
c001029b:	53                   	push   ebx
c001029c:	53                   	push   ebx
c001029d:	51                   	push   ecx
c001029e:	52                   	push   edx
c001029f:	ff d0                	call   eax
c00102a1:	83 c4 10             	add    esp,0x10
c00102a4:	e8 59 fe ff ff       	call   c0010102 <VgaText::updateDiskUsage()>
c00102a9:	83 c4 58             	add    esp,0x58
c00102ac:	5b                   	pop    ebx
c00102ad:	c3                   	ret    

c00102ae <VgaText::setTitleTextColour(VgaColour)>:
c00102ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102b2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00102b6:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c00102bc:	eb aa                	jmp    c0010268 <VgaText::updateTitle()>

c00102be <VgaText::setTitleColour(VgaColour)>:
c00102be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00102c6:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c00102cc:	eb 9a                	jmp    c0010268 <VgaText::updateTitle()>

c00102ce <VgaText::setTitle(char*)>:
c00102ce:	53                   	push   ebx
c00102cf:	83 ec 10             	sub    esp,0x10
c00102d2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00102d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102da:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c00102e0:	50                   	push   eax
c00102e1:	e8 36 04 ff ff       	call   c000071c <strcpy>
c00102e6:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00102ea:	83 c4 18             	add    esp,0x18
c00102ed:	5b                   	pop    ebx
c00102ee:	e9 75 ff ff ff       	jmp    c0010268 <VgaText::updateTitle()>
c00102f3:	90                   	nop

c00102f4 <VgaText::decrementCursor(bool)>:
c00102f4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00102f8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00102fc:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c0010302:	85 c0                	test   eax,eax
c0010304:	74 07                	je     c001030d <VgaText::decrementCursor(bool)+0x19>
c0010306:	48                   	dec    eax
c0010307:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c001030d:	84 c9                	test   cl,cl
c001030f:	74 09                	je     c001031a <VgaText::decrementCursor(bool)+0x26>
c0010311:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010315:	e9 64 fa ff ff       	jmp    c000fd7e <VgaText::updateCursor()>
c001031a:	c3                   	ret    
c001031b:	90                   	nop

c001031c <VgaText::putchar(char, VgaColour, VgaColour)>:
c001031c:	53                   	push   ebx
c001031d:	83 ec 08             	sub    esp,0x8
c0010320:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010324:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010328:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001032c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010330:	3c 07                	cmp    al,0x7
c0010332:	75 2a                	jne    c001035e <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010334:	a1 8c a7 02 c0       	mov    eax,ds:0xc002a78c
c0010339:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010341:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010349:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010351:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010355:	83 c4 08             	add    esp,0x8
c0010358:	5b                   	pop    ebx
c0010359:	e9 bc 2c 00 00       	jmp    c001301a <Buzzer::beep(int, int, bool)>
c001035e:	3c 0d                	cmp    al,0xd
c0010360:	75 0c                	jne    c001036e <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010362:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c001036c:	eb 3b                	jmp    c00103a9 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c001036e:	3c 0a                	cmp    al,0xa
c0010370:	75 40                	jne    c00103b2 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010372:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010378:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010382:	8d 50 01             	lea    edx,[eax+0x1]
c0010385:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c001038b:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010391:	75 12                	jne    c00103a5 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010393:	83 ec 0c             	sub    esp,0xc
c0010396:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c001039c:	53                   	push   ebx
c001039d:	e8 2a fb ff ff       	call   c000fecc <VgaText::scrollScreen()>
c00103a2:	83 c4 10             	add    esp,0x10
c00103a5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00103a9:	83 c4 08             	add    esp,0x8
c00103ac:	5b                   	pop    ebx
c00103ad:	e9 cc f9 ff ff       	jmp    c000fd7e <VgaText::updateCursor()>
c00103b2:	3c 08                	cmp    al,0x8
c00103b4:	75 31                	jne    c00103e7 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c00103b6:	50                   	push   eax
c00103b7:	50                   	push   eax
c00103b8:	6a 01                	push   0x1
c00103ba:	53                   	push   ebx
c00103bb:	e8 34 ff ff ff       	call   c00102f4 <VgaText::decrementCursor(bool)>
c00103c0:	5a                   	pop    edx
c00103c1:	59                   	pop    ecx
c00103c2:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00103c8:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00103ce:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c00103d4:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c00103da:	6a 20                	push   0x20
c00103dc:	53                   	push   ebx
c00103dd:	e8 90 fb ff ff       	call   c000ff72 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00103e2:	83 c4 28             	add    esp,0x28
c00103e5:	5b                   	pop    ebx
c00103e6:	c3                   	ret    
c00103e7:	83 ec 08             	sub    esp,0x8
c00103ea:	0f be c0             	movsx  eax,al
c00103ed:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00103f3:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00103f9:	51                   	push   ecx
c00103fa:	52                   	push   edx
c00103fb:	50                   	push   eax
c00103fc:	53                   	push   ebx
c00103fd:	e8 70 fb ff ff       	call   c000ff72 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010402:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010406:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c001040e:	83 c4 28             	add    esp,0x28
c0010411:	5b                   	pop    ebx
c0010412:	e9 29 fc ff ff       	jmp    c0010040 <VgaText::incrementCursor(bool)>
c0010417:	90                   	nop

c0010418 <VgaText::isShowingCursor()>:
c0010418:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001041c:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010422:	c3                   	ret    
c0010423:	90                   	nop

c0010424 <VgaText::isBlinkDisabled()>:
c0010424:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010428:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c001042e:	83 f0 01             	xor    eax,0x1
c0010431:	c3                   	ret    

c0010432 <VgaText::setCursorHeight(int)>:
c0010432:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010436:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001043a:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010440:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010447:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001044b:	e9 48 f9 ff ff       	jmp    c000fd98 <VgaText::showCursor(bool)>

c0010450 <VgaText::getCursorHeight()>:
c0010450:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010454:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c001045a:	c3                   	ret    

c001045b <setActiveTerminal(VgaText*)>:
c001045b:	53                   	push   ebx
c001045c:	83 ec 08             	sub    esp,0x8
c001045f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010463:	85 db                	test   ebx,ebx
c0010465:	75 11                	jne    c0010478 <setActiveTerminal(VgaText*)+0x1d>
c0010467:	c7 44 24 10 6c 6e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0026e6c
c001046f:	83 c4 08             	add    esp,0x8
c0010472:	5b                   	pop    ebx
c0010473:	e9 2f 86 00 00       	jmp    c0018aa7 <Krnl::panic(char const*)>
c0010478:	50                   	push   eax
c0010479:	50                   	push   eax
c001047a:	53                   	push   ebx
c001047b:	68 7a 6e 02 c0       	push   0xc0026e7a
c0010480:	e8 aa 1d 00 00       	call   c001222f <Dbg::kprintf(char const*, ...)>
c0010485:	a1 e4 a6 02 c0       	mov    eax,ds:0xc002a6e4
c001048a:	83 c4 10             	add    esp,0x10
c001048d:	85 c0                	test   eax,eax
c001048f:	74 0c                	je     c001049d <setActiveTerminal(VgaText*)+0x42>
c0010491:	83 ec 0c             	sub    esp,0xc
c0010494:	50                   	push   eax
c0010495:	e8 e4 f8 ff ff       	call   c000fd7e <VgaText::updateCursor()>
c001049a:	83 c4 10             	add    esp,0x10
c001049d:	89 1d e4 a6 02 c0    	mov    DWORD PTR ds:0xc002a6e4,ebx
c00104a3:	51                   	push   ecx
c00104a4:	51                   	push   ecx
c00104a5:	53                   	push   ebx
c00104a6:	68 92 6e 02 c0       	push   0xc0026e92
c00104ab:	e8 7f 1d 00 00       	call   c001222f <Dbg::kprintf(char const*, ...)>
c00104b0:	83 c4 0c             	add    esp,0xc
c00104b3:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00104b9:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00104bf:	53                   	push   ebx
c00104c0:	e8 25 fb ff ff       	call   c000ffea <VgaText::setCursor(int, int)>
c00104c5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00104c8:	e8 57 ff ff ff       	call   c0010424 <VgaText::isBlinkDisabled()>
c00104cd:	5a                   	pop    edx
c00104ce:	0f b6 c0             	movzx  eax,al
c00104d1:	59                   	pop    ecx
c00104d2:	50                   	push   eax
c00104d3:	53                   	push   ebx
c00104d4:	e8 cf f8 ff ff       	call   c000fda8 <VgaText::disableBlink(bool)>
c00104d9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00104dc:	e8 6f ff ff ff       	call   c0010450 <VgaText::getCursorHeight()>
c00104e1:	5a                   	pop    edx
c00104e2:	59                   	pop    ecx
c00104e3:	50                   	push   eax
c00104e4:	53                   	push   ebx
c00104e5:	e8 48 ff ff ff       	call   c0010432 <VgaText::setCursorHeight(int)>
c00104ea:	83 c4 10             	add    esp,0x10
c00104ed:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c00104f4:	75 0a                	jne    c0010500 <setActiveTerminal(VgaText*)+0xa5>
c00104f6:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010500:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010504:	83 c4 08             	add    esp,0x8
c0010507:	5b                   	pop    ebx
c0010508:	e9 1d f8 ff ff       	jmp    c000fd2a <VgaText::load()>

c001050d <doTerminalCycle()>:
c001050d:	83 ec 18             	sub    esp,0x18
c0010510:	a1 e0 a6 02 c0       	mov    eax,ds:0xc002a6e0
c0010515:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c001051b:	50                   	push   eax
c001051c:	a3 e0 a6 02 c0       	mov    ds:0xc002a6e0,eax
c0010521:	e8 35 ff ff ff       	call   c001045b <setActiveTerminal(VgaText*)>
c0010526:	83 c4 1c             	add    esp,0x1c
c0010529:	c3                   	ret    

c001052a <VgaText::doUpdate()>:
c001052a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001052e:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010534:	85 c0                	test   eax,eax
c0010536:	74 02                	je     c001053a <VgaText::doUpdate()+0x10>
c0010538:	ff e0                	jmp    eax
c001053a:	c3                   	ret    
c001053b:	90                   	nop

c001053c <VgaText::puts(char const*, VgaColour, VgaColour)>:
c001053c:	55                   	push   ebp
c001053d:	57                   	push   edi
c001053e:	56                   	push   esi
c001053f:	53                   	push   ebx
c0010540:	83 ec 1c             	sub    esp,0x1c
c0010543:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010547:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c001054c:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010553:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010556:	50                   	push   eax
c0010557:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c001055c:	50                   	push   eax
c001055d:	e8 58 f9 ff ff       	call   c000feba <VgaText::combineColours(unsigned char, unsigned char)>
c0010562:	59                   	pop    ecx
c0010563:	0f b6 c0             	movzx  eax,al
c0010566:	5b                   	pop    ebx
c0010567:	31 c9                	xor    ecx,ecx
c0010569:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010571:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010575:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c001057b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001057f:	0f b7 db             	movzx  ebx,bx
c0010582:	01 db                	add    ebx,ebx
c0010584:	01 fb                	add    ebx,edi
c0010586:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010589:	84 c0                	test   al,al
c001058b:	0f 84 38 01 00 00    	je     c00106c9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010591:	3c 0d                	cmp    al,0xd
c0010593:	75 0f                	jne    c00105a4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010595:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c001059f:	e9 1f 01 00 00       	jmp    c00106c3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c00105a4:	3c 0a                	cmp    al,0xa
c00105a6:	75 5b                	jne    c0010603 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c00105a8:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c00105ae:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c00105b8:	8d 48 01             	lea    ecx,[eax+0x1]
c00105bb:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c00105c1:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c00105c7:	75 12                	jne    c00105db <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c00105c9:	83 ec 0c             	sub    esp,0xc
c00105cc:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c00105d2:	55                   	push   ebp
c00105d3:	e8 f4 f8 ff ff       	call   c000fecc <VgaText::scrollScreen()>
c00105d8:	83 c4 10             	add    esp,0x10
c00105db:	83 ec 0c             	sub    esp,0xc
c00105de:	55                   	push   ebp
c00105df:	e8 9a f7 ff ff       	call   c000fd7e <VgaText::updateCursor()>
c00105e4:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c00105ec:	83 c4 10             	add    esp,0x10
c00105ef:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c00105f5:	31 c9                	xor    ecx,ecx
c00105f7:	0f b7 db             	movzx  ebx,bx
c00105fa:	01 db                	add    ebx,ebx
c00105fc:	01 fb                	add    ebx,edi
c00105fe:	e9 c0 00 00 00       	jmp    c00106c3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010603:	3c 08                	cmp    al,0x8
c0010605:	75 4e                	jne    c0010655 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010607:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001060b:	53                   	push   ebx
c001060c:	53                   	push   ebx
c001060d:	6a 01                	push   0x1
c001060f:	55                   	push   ebp
c0010610:	e8 df fc ff ff       	call   c00102f4 <VgaText::decrementCursor(bool)>
c0010615:	58                   	pop    eax
c0010616:	5a                   	pop    edx
c0010617:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c001061d:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010623:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010629:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c001062f:	6a 20                	push   0x20
c0010631:	55                   	push   ebp
c0010632:	e8 3b f9 ff ff       	call   c000ff72 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010637:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c001063f:	83 c4 20             	add    esp,0x20
c0010642:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010648:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001064c:	0f b7 db             	movzx  ebx,bx
c001064f:	01 db                	add    ebx,ebx
c0010651:	01 fb                	add    ebx,edi
c0010653:	eb 6e                	jmp    c00106c3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010655:	51                   	push   ecx
c0010656:	51                   	push   ecx
c0010657:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001065b:	50                   	push   eax
c001065c:	e8 ff f8 ff ff       	call   c000ff60 <VgaText::combineCharAndColour(char, unsigned char)>
c0010661:	83 c4 10             	add    esp,0x10
c0010664:	66 89 03             	mov    WORD PTR [ebx],ax
c0010667:	39 2d e4 a6 02 c0    	cmp    DWORD PTR ds:0xc002a6e4,ebp
c001066d:	75 2a                	jne    c0010699 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c001066f:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010675:	85 c0                	test   eax,eax
c0010677:	74 20                	je     c0010699 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010679:	52                   	push   edx
c001067a:	52                   	push   edx
c001067b:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010681:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010687:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001068b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001068f:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010692:	51                   	push   ecx
c0010693:	55                   	push   ebp
c0010694:	ff d0                	call   eax
c0010696:	83 c4 20             	add    esp,0x20
c0010699:	83 c3 02             	add    ebx,0x2
c001069c:	50                   	push   eax
c001069d:	50                   	push   eax
c001069e:	6a 00                	push   0x0
c00106a0:	55                   	push   ebp
c00106a1:	e8 9a f9 ff ff       	call   c0010040 <VgaText::incrementCursor(bool)>
c00106a6:	83 c4 10             	add    esp,0x10
c00106a9:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c00106b0:	75 0f                	jne    c00106c1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c00106b2:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c00106ba:	0f b7 db             	movzx  ebx,bx
c00106bd:	01 db                	add    ebx,ebx
c00106bf:	01 fb                	add    ebx,edi
c00106c1:	b1 01                	mov    cl,0x1
c00106c3:	46                   	inc    esi
c00106c4:	e9 bd fe ff ff       	jmp    c0010586 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c00106c9:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00106cd:	83 ec 0c             	sub    esp,0xc
c00106d0:	55                   	push   ebp
c00106d1:	e8 a8 f6 ff ff       	call   c000fd7e <VgaText::updateCursor()>
c00106d6:	83 c4 10             	add    esp,0x10
c00106d9:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00106dd:	84 c9                	test   cl,cl
c00106df:	74 0c                	je     c00106ed <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c00106e1:	83 ec 0c             	sub    esp,0xc
c00106e4:	55                   	push   ebp
c00106e5:	e8 40 fe ff ff       	call   c001052a <VgaText::doUpdate()>
c00106ea:	83 c4 10             	add    esp,0x10
c00106ed:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c00106f4:	83 c4 1c             	add    esp,0x1c
c00106f7:	5b                   	pop    ebx
c00106f8:	5e                   	pop    esi
c00106f9:	5f                   	pop    edi
c00106fa:	5d                   	pop    ebp
c00106fb:	c3                   	ret    

c00106fc <VgaText::clearScreen()>:
c00106fc:	57                   	push   edi
c00106fd:	56                   	push   esi
c00106fe:	31 f6                	xor    esi,esi
c0010700:	53                   	push   ebx
c0010701:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010705:	52                   	push   edx
c0010706:	6a 00                	push   0x0
c0010708:	6a 00                	push   0x0
c001070a:	53                   	push   ebx
c001070b:	e8 da f8 ff ff       	call   c000ffea <VgaText::setCursor(int, int)>
c0010710:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010717:	83 c4 10             	add    esp,0x10
c001071a:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010720:	7e 26                	jle    c0010748 <VgaText::clearScreen()+0x4c>
c0010722:	31 ff                	xor    edi,edi
c0010724:	50                   	push   eax
c0010725:	50                   	push   eax
c0010726:	56                   	push   esi
c0010727:	57                   	push   edi
c0010728:	47                   	inc    edi
c0010729:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c001072f:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010735:	6a 20                	push   0x20
c0010737:	53                   	push   ebx
c0010738:	e8 35 f8 ff ff       	call   c000ff72 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001073d:	83 c4 20             	add    esp,0x20
c0010740:	83 ff 50             	cmp    edi,0x50
c0010743:	75 df                	jne    c0010724 <VgaText::clearScreen()+0x28>
c0010745:	46                   	inc    esi
c0010746:	eb d2                	jmp    c001071a <VgaText::clearScreen()+0x1e>
c0010748:	83 ec 0c             	sub    esp,0xc
c001074b:	53                   	push   ebx
c001074c:	e8 d9 fd ff ff       	call   c001052a <VgaText::doUpdate()>
c0010751:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0010758:	83 c4 10             	add    esp,0x10
c001075b:	5b                   	pop    ebx
c001075c:	5e                   	pop    esi
c001075d:	5f                   	pop    edi
c001075e:	c3                   	ret    
c001075f:	90                   	nop

c0010760 <VgaText::putchar(char)>:
c0010760:	56                   	push   esi
c0010761:	53                   	push   ebx
c0010762:	83 ec 14             	sub    esp,0x14
c0010765:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010769:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001076d:	3c 5b                	cmp    al,0x5b
c001076f:	75 21                	jne    c0010792 <VgaText::putchar(char)+0x32>
c0010771:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c0010778:	74 28                	je     c00107a2 <VgaText::putchar(char)+0x42>
c001077a:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0010783:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c001078d:	e9 e2 00 00 00       	jmp    c0010874 <VgaText::putchar(char)+0x114>
c0010792:	3c 1b                	cmp    al,0x1b
c0010794:	75 0c                	jne    c00107a2 <VgaText::putchar(char)+0x42>
c0010796:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c001079d:	e9 d2 00 00 00       	jmp    c0010874 <VgaText::putchar(char)+0x114>
c00107a2:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c00107a8:	84 c9                	test   cl,cl
c00107aa:	0f 84 ab 00 00 00    	je     c001085b <VgaText::putchar(char)+0xfb>
c00107b0:	8d 50 c0             	lea    edx,[eax-0x40]
c00107b3:	80 fa 3e             	cmp    dl,0x3e
c00107b6:	0f 87 82 00 00 00    	ja     c001083e <VgaText::putchar(char)+0xde>
c00107bc:	3c 6d                	cmp    al,0x6d
c00107be:	75 4d                	jne    c001080d <VgaText::putchar(char)+0xad>
c00107c0:	31 f6                	xor    esi,esi
c00107c2:	31 d2                	xor    edx,edx
c00107c4:	31 c0                	xor    eax,eax
c00107c6:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c00107cc:	7e 30                	jle    c00107fe <VgaText::putchar(char)+0x9e>
c00107ce:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c00107d6:	80 fa 3b             	cmp    dl,0x3b
c00107d9:	75 17                	jne    c00107f2 <VgaText::putchar(char)+0x92>
c00107db:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00107df:	50                   	push   eax
c00107e0:	53                   	push   ebx
c00107e1:	e8 fc f5 ff ff       	call   c000fde2 <VgaText::doANSI_SGR(int)>
c00107e6:	59                   	pop    ecx
c00107e7:	31 d2                	xor    edx,edx
c00107e9:	58                   	pop    eax
c00107ea:	31 c0                	xor    eax,eax
c00107ec:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00107f0:	eb 09                	jmp    c00107fb <VgaText::putchar(char)+0x9b>
c00107f2:	6b c0 0a             	imul   eax,eax,0xa
c00107f5:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00107f9:	88 ca                	mov    dl,cl
c00107fb:	46                   	inc    esi
c00107fc:	eb c8                	jmp    c00107c6 <VgaText::putchar(char)+0x66>
c00107fe:	84 d2                	test   dl,dl
c0010800:	74 31                	je     c0010833 <VgaText::putchar(char)+0xd3>
c0010802:	50                   	push   eax
c0010803:	53                   	push   ebx
c0010804:	e8 d9 f5 ff ff       	call   c000fde2 <VgaText::doANSI_SGR(int)>
c0010809:	58                   	pop    eax
c001080a:	5a                   	pop    edx
c001080b:	eb 26                	jmp    c0010833 <VgaText::putchar(char)+0xd3>
c001080d:	3c 4a                	cmp    al,0x4a
c001080f:	75 22                	jne    c0010833 <VgaText::putchar(char)+0xd3>
c0010811:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c0010818:	75 19                	jne    c0010833 <VgaText::putchar(char)+0xd3>
c001081a:	83 ec 0c             	sub    esp,0xc
c001081d:	53                   	push   ebx
c001081e:	e8 d9 fe ff ff       	call   c00106fc <VgaText::clearScreen()>
c0010823:	83 c4 0c             	add    esp,0xc
c0010826:	6a 00                	push   0x0
c0010828:	6a 00                	push   0x0
c001082a:	53                   	push   ebx
c001082b:	e8 ba f7 ff ff       	call   c000ffea <VgaText::setCursor(int, int)>
c0010830:	83 c4 10             	add    esp,0x10
c0010833:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c001083c:	eb 36                	jmp    c0010874 <VgaText::putchar(char)+0x114>
c001083e:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c0010844:	83 fa 0e             	cmp    edx,0xe
c0010847:	7f 2b                	jg     c0010874 <VgaText::putchar(char)+0x114>
c0010849:	8d 4a 01             	lea    ecx,[edx+0x1]
c001084c:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c0010852:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c0010859:	eb 19                	jmp    c0010874 <VgaText::putchar(char)+0x114>
c001085b:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010861:	0f be c0             	movsx  eax,al
c0010864:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c001086a:	50                   	push   eax
c001086b:	53                   	push   ebx
c001086c:	e8 ab fa ff ff       	call   c001031c <VgaText::putchar(char, VgaColour, VgaColour)>
c0010871:	83 c4 10             	add    esp,0x10
c0010874:	83 c4 14             	add    esp,0x14
c0010877:	5b                   	pop    ebx
c0010878:	5e                   	pop    esi
c0010879:	c3                   	ret    

c001087a <VgaText::puts(char const*)>:
c001087a:	53                   	push   ebx
c001087b:	83 ec 08             	sub    esp,0x8
c001087e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010882:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010885:	84 c0                	test   al,al
c0010887:	74 12                	je     c001089b <VgaText::puts(char const*)+0x21>
c0010889:	43                   	inc    ebx
c001088a:	51                   	push   ecx
c001088b:	51                   	push   ecx
c001088c:	50                   	push   eax
c001088d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010891:	e8 ca fe ff ff       	call   c0010760 <VgaText::putchar(char)>
c0010896:	83 c4 10             	add    esp,0x10
c0010899:	eb e7                	jmp    c0010882 <VgaText::puts(char const*)+0x8>
c001089b:	83 c4 08             	add    esp,0x8
c001089e:	5b                   	pop    ebx
c001089f:	c3                   	ret    

c00108a0 <VgaText::putx(unsigned int)>:
c00108a0:	57                   	push   edi
c00108a1:	b9 11 00 00 00       	mov    ecx,0x11
c00108a6:	56                   	push   esi
c00108a7:	be ae 6e 02 c0       	mov    esi,0xc0026eae
c00108ac:	53                   	push   ebx
c00108ad:	83 ec 20             	sub    esp,0x20
c00108b0:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00108b4:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00108b8:	fc                   	cld    
c00108b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00108bb:	be 08 00 00 00       	mov    esi,0x8
c00108c0:	50                   	push   eax
c00108c1:	50                   	push   eax
c00108c2:	89 d8                	mov    eax,ebx
c00108c4:	c1 e3 04             	shl    ebx,0x4
c00108c7:	c1 e8 1c             	shr    eax,0x1c
c00108ca:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00108cf:	50                   	push   eax
c00108d0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00108d4:	e8 87 fe ff ff       	call   c0010760 <VgaText::putchar(char)>
c00108d9:	83 c4 10             	add    esp,0x10
c00108dc:	4e                   	dec    esi
c00108dd:	75 e1                	jne    c00108c0 <VgaText::putx(unsigned int)+0x20>
c00108df:	83 c4 20             	add    esp,0x20
c00108e2:	5b                   	pop    ebx
c00108e3:	5e                   	pop    esi
c00108e4:	5f                   	pop    edi
c00108e5:	c3                   	ret    

c00108e6 <VgaText::VgaText(char const*)>:
c00108e6:	57                   	push   edi
c00108e7:	56                   	push   esi
c00108e8:	53                   	push   ebx
c00108e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108ed:	83 ec 08             	sub    esp,0x8
c00108f0:	6a 00                	push   0x0
c00108f2:	50                   	push   eax
c00108f3:	e8 62 05 00 00       	call   c0010e5a <UnixFile::UnixFile(int)>
c00108f8:	83 c4 10             	add    esp,0x10
c00108fb:	ba 14 6f 02 c0       	mov    edx,0xc0026f14
c0010900:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010904:	89 10                	mov    DWORD PTR [eax],edx
c0010906:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001090a:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c0010914:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010918:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c0010922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010926:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c001092d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010931:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c0010938:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001093c:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c0010946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001094a:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c0010954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010958:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c001095f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010963:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c001096a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001096e:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c0010974:	bb c0 a6 02 c0       	mov    ebx,0xc002a6c0
c0010979:	b8 08 00 00 00       	mov    eax,0x8
c001097e:	fc                   	cld    
c001097f:	89 d7                	mov    edi,edx
c0010981:	89 de                	mov    esi,ebx
c0010983:	89 c1                	mov    ecx,eax
c0010985:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010987:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001098b:	05 1e 10 00 00       	add    eax,0x101e
c0010990:	83 ec 08             	sub    esp,0x8
c0010993:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010997:	50                   	push   eax
c0010998:	e8 7f fd fe ff       	call   c000071c <strcpy>
c001099d:	83 c4 10             	add    esp,0x10
c00109a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109a4:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c00109ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109b2:	83 c0 0c             	add    eax,0xc
c00109b5:	83 ec 04             	sub    esp,0x4
c00109b8:	68 00 0f 00 00       	push   0xf00
c00109bd:	6a 00                	push   0x0
c00109bf:	50                   	push   eax
c00109c0:	e8 b8 fc fe ff       	call   c000067d <memset>
c00109c5:	83 c4 10             	add    esp,0x10
c00109c8:	83 ec 04             	sub    esp,0x4
c00109cb:	6a 00                	push   0x0
c00109cd:	6a 07                	push   0x7
c00109cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109d3:	e8 c2 f4 ff ff       	call   c000fe9a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00109d8:	83 c4 10             	add    esp,0x10
c00109db:	83 ec 08             	sub    esp,0x8
c00109de:	6a 02                	push   0x2
c00109e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109e4:	e8 49 fa ff ff       	call   c0010432 <VgaText::setCursorHeight(int)>
c00109e9:	83 c4 10             	add    esp,0x10
c00109ec:	83 ec 04             	sub    esp,0x4
c00109ef:	6a 00                	push   0x0
c00109f1:	6a 00                	push   0x0
c00109f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109f7:	e8 ee f5 ff ff       	call   c000ffea <VgaText::setCursor(int, int)>
c00109fc:	83 c4 10             	add    esp,0x10
c00109ff:	83 ec 08             	sub    esp,0x8
c0010a02:	6a 01                	push   0x1
c0010a04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a08:	e8 8b f3 ff ff       	call   c000fd98 <VgaText::showCursor(bool)>
c0010a0d:	83 c4 10             	add    esp,0x10
c0010a10:	83 ec 08             	sub    esp,0x8
c0010a13:	6a 01                	push   0x1
c0010a15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a19:	e8 8a f3 ff ff       	call   c000fda8 <VgaText::disableBlink(bool)>
c0010a1e:	83 c4 10             	add    esp,0x10
c0010a21:	83 ec 0c             	sub    esp,0xc
c0010a24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a28:	e8 cf fc ff ff       	call   c00106fc <VgaText::clearScreen()>
c0010a2d:	83 c4 10             	add    esp,0x10
c0010a30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a34:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c0010a3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a3f:	05 9e 10 00 00       	add    eax,0x109e
c0010a44:	83 ec 04             	sub    esp,0x4
c0010a47:	68 96 00 00 00       	push   0x96
c0010a4c:	6a 00                	push   0x0
c0010a4e:	50                   	push   eax
c0010a4f:	e8 29 fc fe ff       	call   c000067d <memset>
c0010a54:	83 c4 10             	add    esp,0x10
c0010a57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a5b:	05 34 11 00 00       	add    eax,0x1134
c0010a60:	83 ec 04             	sub    esp,0x4
c0010a63:	68 2c 01 00 00       	push   0x12c
c0010a68:	6a 00                	push   0x0
c0010a6a:	50                   	push   eax
c0010a6b:	e8 0d fc fe ff       	call   c000067d <memset>
c0010a70:	83 c4 10             	add    esp,0x10
c0010a73:	90                   	nop
c0010a74:	5b                   	pop    ebx
c0010a75:	5e                   	pop    esi
c0010a76:	5f                   	pop    edi
c0010a77:	c3                   	ret    

c0010a78 <VgaText::receiveKey(unsigned char)>:
c0010a78:	55                   	push   ebp
c0010a79:	57                   	push   edi
c0010a7a:	56                   	push   esi
c0010a7b:	53                   	push   ebx
c0010a7c:	83 ec 1c             	sub    esp,0x1c
c0010a7f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010a83:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010a87:	84 db                	test   bl,bl
c0010a89:	0f 84 c9 00 00 00    	je     c0010b58 <VgaText::receiveKey(unsigned char)+0xe0>
c0010a8f:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0010a95:	80 fb 08             	cmp    bl,0x8
c0010a98:	75 2c                	jne    c0010ac6 <VgaText::receiveKey(unsigned char)+0x4e>
c0010a9a:	83 ec 0c             	sub    esp,0xc
c0010a9d:	57                   	push   edi
c0010a9e:	e8 f7 fb fe ff       	call   c000069a <strlen>
c0010aa3:	83 c4 10             	add    esp,0x10
c0010aa6:	85 c0                	test   eax,eax
c0010aa8:	74 41                	je     c0010aeb <VgaText::receiveKey(unsigned char)+0x73>
c0010aaa:	50                   	push   eax
c0010aab:	50                   	push   eax
c0010aac:	6a 08                	push   0x8
c0010aae:	56                   	push   esi
c0010aaf:	e8 ac fc ff ff       	call   c0010760 <VgaText::putchar(char)>
c0010ab4:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010ab7:	e8 de fb fe ff       	call   c000069a <strlen>
c0010abc:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c0010ac4:	eb 22                	jmp    c0010ae8 <VgaText::receiveKey(unsigned char)+0x70>
c0010ac6:	0f be c3             	movsx  eax,bl
c0010ac9:	52                   	push   edx
c0010aca:	52                   	push   edx
c0010acb:	50                   	push   eax
c0010acc:	56                   	push   esi
c0010acd:	e8 8e fc ff ff       	call   c0010760 <VgaText::putchar(char)>
c0010ad2:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010ad6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010adb:	59                   	pop    ecx
c0010adc:	5d                   	pop    ebp
c0010add:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010ae1:	50                   	push   eax
c0010ae2:	57                   	push   edi
c0010ae3:	e8 eb fc fe ff       	call   c00007d3 <strcat>
c0010ae8:	83 c4 10             	add    esp,0x10
c0010aeb:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c0010af2:	75 05                	jne    c0010af9 <VgaText::receiveKey(unsigned char)+0x81>
c0010af4:	80 fb 0a             	cmp    bl,0xa
c0010af7:	75 53                	jne    c0010b4c <VgaText::receiveKey(unsigned char)+0xd4>
c0010af9:	83 ec 0c             	sub    esp,0xc
c0010afc:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c0010b02:	53                   	push   ebx
c0010b03:	e8 92 fb fe ff       	call   c000069a <strlen>
c0010b08:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010b0b:	89 c5                	mov    ebp,eax
c0010b0d:	e8 88 fb fe ff       	call   c000069a <strlen>
c0010b12:	83 c4 10             	add    esp,0x10
c0010b15:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010b19:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010b1e:	76 10                	jbe    c0010b30 <VgaText::receiveKey(unsigned char)+0xb8>
c0010b20:	83 ec 0c             	sub    esp,0xc
c0010b23:	68 bf 6e 02 c0       	push   0xc0026ebf
c0010b28:	e8 7a 7f 00 00       	call   c0018aa7 <Krnl::panic(char const*)>
c0010b2d:	83 c4 10             	add    esp,0x10
c0010b30:	50                   	push   eax
c0010b31:	50                   	push   eax
c0010b32:	57                   	push   edi
c0010b33:	53                   	push   ebx
c0010b34:	e8 9a fc fe ff       	call   c00007d3 <strcat>
c0010b39:	83 c4 0c             	add    esp,0xc
c0010b3c:	68 96 00 00 00       	push   0x96
c0010b41:	6a 00                	push   0x0
c0010b43:	57                   	push   edi
c0010b44:	e8 34 fb fe ff       	call   c000067d <memset>
c0010b49:	83 c4 10             	add    esp,0x10
c0010b4c:	83 ec 0c             	sub    esp,0xc
c0010b4f:	56                   	push   esi
c0010b50:	e8 d5 f9 ff ff       	call   c001052a <VgaText::doUpdate()>
c0010b55:	83 c4 10             	add    esp,0x10
c0010b58:	83 c4 1c             	add    esp,0x1c
c0010b5b:	5b                   	pop    ebx
c0010b5c:	5e                   	pop    esi
c0010b5d:	5f                   	pop    edi
c0010b5e:	5d                   	pop    ebp
c0010b5f:	c3                   	ret    

c0010b60 <VgaText::write(unsigned long long, void*, int*)>:
c0010b60:	55                   	push   ebp
c0010b61:	57                   	push   edi
c0010b62:	56                   	push   esi
c0010b63:	53                   	push   ebx
c0010b64:	83 ec 0c             	sub    esp,0xc
c0010b67:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010b6b:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010b6f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010b73:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c0010b7a:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010b7d:	39 eb                	cmp    ebx,ebp
c0010b7f:	74 13                	je     c0010b94 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010b81:	43                   	inc    ebx
c0010b82:	50                   	push   eax
c0010b83:	50                   	push   eax
c0010b84:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010b88:	50                   	push   eax
c0010b89:	56                   	push   esi
c0010b8a:	e8 d1 fb ff ff       	call   c0010760 <VgaText::putchar(char)>
c0010b8f:	83 c4 10             	add    esp,0x10
c0010b92:	eb e9                	jmp    c0010b7d <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010b94:	83 ec 0c             	sub    esp,0xc
c0010b97:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0010b9e:	56                   	push   esi
c0010b9f:	e8 86 f9 ff ff       	call   c001052a <VgaText::doUpdate()>
c0010ba4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010ba8:	89 38                	mov    DWORD PTR [eax],edi
c0010baa:	83 c4 1c             	add    esp,0x1c
c0010bad:	31 c0                	xor    eax,eax
c0010baf:	5b                   	pop    ebx
c0010bb0:	5e                   	pop    esi
c0010bb1:	5f                   	pop    edi
c0010bb2:	5d                   	pop    ebp
c0010bb3:	c3                   	ret    

c0010bb4 <newTerminal(char*)>:
c0010bb4:	83 ec 28             	sub    esp,0x28
c0010bb7:	68 60 12 00 00       	push   0x1260
c0010bbc:	e8 7f 15 00 00       	call   c0012140 <operator new(unsigned long)>
c0010bc1:	5a                   	pop    edx
c0010bc2:	59                   	pop    ecx
c0010bc3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010bc7:	50                   	push   eax
c0010bc8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010bcc:	e8 15 fd ff ff       	call   c00108e6 <VgaText::VgaText(char const*)>
c0010bd1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010bd5:	83 c4 2c             	add    esp,0x2c
c0010bd8:	c3                   	ret    
c0010bd9:	90                   	nop

c0010bda <TSS::TSS()>:
c0010bda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010bde:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010be5:	90                   	nop
c0010be6:	c3                   	ret    
c0010be7:	90                   	nop

c0010be8 <TSS::setESP(unsigned long)>:
c0010be8:	55                   	push   ebp
c0010be9:	89 e5                	mov    ebp,esp
c0010beb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bf1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010bf4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010bf7:	90                   	nop
c0010bf8:	5d                   	pop    ebp
c0010bf9:	c3                   	ret    

c0010bfa <TSS::flush()>:
c0010bfa:	55                   	push   ebp
c0010bfb:	89 e5                	mov    ebp,esp
c0010bfd:	83 ec 10             	sub    esp,0x10
c0010c00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c03:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c05:	83 c8 03             	or     eax,0x3
c0010c08:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010c0c:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010c10:	66 89 d0             	mov    ax,dx
c0010c13:	0f 00 d8             	ltr    ax
c0010c16:	90                   	nop
c0010c17:	c9                   	leave  
c0010c18:	c3                   	ret    
c0010c19:	90                   	nop

c0010c1a <TSS::setup(unsigned long, unsigned long)>:
c0010c1a:	55                   	push   ebp
c0010c1b:	89 e5                	mov    ebp,esp
c0010c1d:	53                   	push   ebx
c0010c1e:	83 ec 14             	sub    esp,0x14
c0010c21:	83 ec 0c             	sub    esp,0xc
c0010c24:	6a 68                	push   0x68
c0010c26:	e8 fb e4 ff ff       	call   c000f126 <malloc>
c0010c2b:	83 c4 10             	add    esp,0x10
c0010c2e:	89 c2                	mov    edx,eax
c0010c30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c33:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010c36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c39:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c3c:	83 ec 04             	sub    esp,0x4
c0010c3f:	6a 68                	push   0x68
c0010c41:	6a 00                	push   0x0
c0010c43:	50                   	push   eax
c0010c44:	e8 34 fa fe ff       	call   c000067d <memset>
c0010c49:	83 c4 10             	add    esp,0x10
c0010c4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c4f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c52:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010c58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c5b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c5e:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0010c64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c67:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c6a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010c6d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010c70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c73:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c76:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0010c7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c7f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c82:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0010c88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c8b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c8e:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0010c94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c97:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c9a:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0010ca0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ca3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ca6:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0010cac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010caf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cb2:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0010cb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cbb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cbe:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0010cc1:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010cc4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cc7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cca:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010ccd:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010cd0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cd3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cd6:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0010cdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ce0:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c0010ce3:	e8 79 45 01 00       	call   c0025261 <CPU::readCR3()>
c0010ce8:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0010ceb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cf1:	83 ec 08             	sub    esp,0x8
c0010cf4:	50                   	push   eax
c0010cf5:	8d 45 f0             	lea    eax,[ebp-0x10]
c0010cf8:	50                   	push   eax
c0010cf9:	e8 fe db ff ff       	call   c000e8fc <GDTEntry::setBase(unsigned int)>
c0010cfe:	83 c4 10             	add    esp,0x10
c0010d01:	83 ec 08             	sub    esp,0x8
c0010d04:	6a 68                	push   0x68
c0010d06:	8d 45 f0             	lea    eax,[ebp-0x10]
c0010d09:	50                   	push   eax
c0010d0a:	e8 09 dc ff ff       	call   c000e918 <GDTEntry::setLimit(unsigned int)>
c0010d0f:	83 c4 10             	add    esp,0x10
c0010d12:	c6 45 f5 89          	mov    BYTE PTR [ebp-0xb],0x89
c0010d16:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0010d19:	83 e0 0f             	and    eax,0xf
c0010d1c:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c0010d1f:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0010d22:	83 c8 40             	or     eax,0x40
c0010d25:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c0010d28:	e8 13 45 01 00       	call   c0025240 <CPU::current()>
c0010d2d:	05 78 01 00 00       	add    eax,0x178
c0010d32:	83 ec 04             	sub    esp,0x4
c0010d35:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0010d38:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0010d3b:	50                   	push   eax
c0010d3c:	e8 0b dc ff ff       	call   c000e94c <GDT::addEntry(GDTEntry)>
c0010d41:	83 c4 10             	add    esp,0x10
c0010d44:	89 c2                	mov    edx,eax
c0010d46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010d49:	89 10                	mov    DWORD PTR [eax],edx
c0010d4b:	e8 f0 44 01 00       	call   c0025240 <CPU::current()>
c0010d50:	05 78 01 00 00       	add    eax,0x178
c0010d55:	83 ec 0c             	sub    esp,0xc
c0010d58:	50                   	push   eax
c0010d59:	e8 32 dc ff ff       	call   c000e990 <GDT::flush()>
c0010d5e:	83 c4 10             	add    esp,0x10
c0010d61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010d64:	8b 00                	mov    eax,DWORD PTR [eax]
c0010d66:	83 ec 08             	sub    esp,0x8
c0010d69:	50                   	push   eax
c0010d6a:	68 28 6f 02 c0       	push   0xc0026f28
c0010d6f:	e8 bb 14 00 00       	call   c001222f <Dbg::kprintf(char const*, ...)>
c0010d74:	83 c4 10             	add    esp,0x10
c0010d77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010d7a:	8b 00                	mov    eax,DWORD PTR [eax]
c0010d7c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0010d7f:	c9                   	leave  
c0010d80:	c3                   	ret    
c0010d81:	90                   	nop

c0010d82 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0010d82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d86:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010d8a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d8d:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010d92:	75 08                	jne    c0010d9c <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0010d94:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010d9a:	eb 38                	jmp    c0010dd4 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0010d9c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010da1:	75 17                	jne    c0010dba <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0010da3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010da8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010dab:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010db1:	8b 10                	mov    edx,DWORD PTR [eax]
c0010db3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010db7:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0010dba:	89 c1                	mov    ecx,eax
c0010dbc:	83 e1 fd             	and    ecx,0xfffffffd
c0010dbf:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0010dc5:	74 cd                	je     c0010d94 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010dc7:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010dcc:	83 e0 ef             	and    eax,0xffffffef
c0010dcf:	83 f8 08             	cmp    eax,0x8
c0010dd2:	76 c0                	jbe    c0010d94 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010dd4:	31 c0                	xor    eax,eax
c0010dd6:	c3                   	ret    
c0010dd7:	90                   	nop

c0010dd8 <ReservedFilename::isAtty()>:
c0010dd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ddc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010ddf:	31 c0                	xor    eax,eax
c0010de1:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0010de7:	74 09                	je     c0010df2 <ReservedFilename::isAtty()+0x1a>
c0010de9:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0010def:	0f 94 c0             	sete   al
c0010df2:	c3                   	ret    
c0010df3:	90                   	nop

c0010df4 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0010df4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010df8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010dfc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010dff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010e03:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010e08:	75 08                	jne    c0010e12 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0010e0a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010e10:	eb 3d                	jmp    c0010e4f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010e12:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010e17:	75 17                	jne    c0010e30 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0010e19:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010e1e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010e21:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010e27:	8b 10                	mov    edx,DWORD PTR [eax]
c0010e29:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010e2d:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0010e30:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010e35:	75 04                	jne    c0010e3b <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0010e37:	89 0a                	mov    DWORD PTR [edx],ecx
c0010e39:	eb 14                	jmp    c0010e4f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010e3b:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0010e40:	74 c8                	je     c0010e0a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010e42:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010e47:	83 e0 ef             	and    eax,0xffffffef
c0010e4a:	83 f8 08             	cmp    eax,0x8
c0010e4d:	76 bb                	jbe    c0010e0a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010e4f:	31 c0                	xor    eax,eax
c0010e51:	c3                   	ret    

c0010e52 <UnixFile::getFileDescriptor()>:
c0010e52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e56:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e59:	c3                   	ret    

c0010e5a <UnixFile::UnixFile(int)>:
c0010e5a:	53                   	push   ebx
c0010e5b:	83 ec 18             	sub    esp,0x18
c0010e5e:	ba 14 70 02 c0       	mov    edx,0xc0027014
c0010e63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e67:	89 10                	mov    DWORD PTR [eax],edx
c0010e69:	81 7c 24 24 ff fe ff 0f 	cmp    DWORD PTR [esp+0x24],0xffffeff
c0010e71:	0f 8f 4d 01 00 00    	jg     c0010fc4 <UnixFile::UnixFile(int)+0x16a>
c0010e77:	a1 40 96 02 c0       	mov    eax,ds:0xc0029640
c0010e7c:	8d 50 01             	lea    edx,[eax+0x1]
c0010e7f:	89 15 40 96 02 c0    	mov    DWORD PTR ds:0xc0029640,edx
c0010e85:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0010e89:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010e8c:	83 ec 08             	sub    esp,0x8
c0010e8f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010e93:	68 78 a7 02 c0       	push   0xc002a778
c0010e98:	e8 39 44 01 00       	call   c00252d6 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0010e9d:	83 c4 10             	add    esp,0x10
c0010ea0:	a0 74 a7 02 c0       	mov    al,ds:0xc002a774
c0010ea5:	83 f0 01             	xor    eax,0x1
c0010ea8:	84 c0                	test   al,al
c0010eaa:	0f 84 15 01 00 00    	je     c0010fc5 <UnixFile::UnixFile(int)+0x16b>
c0010eb0:	c6 05 74 a7 02 c0 01 	mov    BYTE PTR ds:0xc002a774,0x1
c0010eb7:	83 ec 0c             	sub    esp,0xc
c0010eba:	6a 0c                	push   0xc
c0010ebc:	e8 7f 12 00 00       	call   c0012140 <operator new(unsigned long)>
c0010ec1:	83 c4 10             	add    esp,0x10
c0010ec4:	89 c3                	mov    ebx,eax
c0010ec6:	83 ec 08             	sub    esp,0x8
c0010ec9:	68 03 ff ff 0f       	push   0xfffff03
c0010ece:	53                   	push   ebx
c0010ecf:	e8 f6 00 00 00       	call   c0010fca <ReservedFilename::ReservedFilename(int)>
c0010ed4:	83 c4 10             	add    esp,0x10
c0010ed7:	89 1d 6c a7 02 c0    	mov    DWORD PTR ds:0xc002a76c,ebx
c0010edd:	83 ec 0c             	sub    esp,0xc
c0010ee0:	6a 0c                	push   0xc
c0010ee2:	e8 59 12 00 00       	call   c0012140 <operator new(unsigned long)>
c0010ee7:	83 c4 10             	add    esp,0x10
c0010eea:	89 c3                	mov    ebx,eax
c0010eec:	83 ec 08             	sub    esp,0x8
c0010eef:	68 01 ff ff 0f       	push   0xfffff01
c0010ef4:	53                   	push   ebx
c0010ef5:	e8 d0 00 00 00       	call   c0010fca <ReservedFilename::ReservedFilename(int)>
c0010efa:	83 c4 10             	add    esp,0x10
c0010efd:	89 1d 70 a7 02 c0    	mov    DWORD PTR ds:0xc002a770,ebx
c0010f03:	83 ec 0c             	sub    esp,0xc
c0010f06:	6a 0c                	push   0xc
c0010f08:	e8 33 12 00 00       	call   c0012140 <operator new(unsigned long)>
c0010f0d:	83 c4 10             	add    esp,0x10
c0010f10:	89 c3                	mov    ebx,eax
c0010f12:	83 ec 08             	sub    esp,0x8
c0010f15:	68 00 ff ff 0f       	push   0xfffff00
c0010f1a:	53                   	push   ebx
c0010f1b:	e8 aa 00 00 00       	call   c0010fca <ReservedFilename::ReservedFilename(int)>
c0010f20:	83 c4 10             	add    esp,0x10
c0010f23:	89 1d 64 a7 02 c0    	mov    DWORD PTR ds:0xc002a764,ebx
c0010f29:	83 ec 0c             	sub    esp,0xc
c0010f2c:	6a 0c                	push   0xc
c0010f2e:	e8 0d 12 00 00       	call   c0012140 <operator new(unsigned long)>
c0010f33:	83 c4 10             	add    esp,0x10
c0010f36:	89 c3                	mov    ebx,eax
c0010f38:	83 ec 08             	sub    esp,0x8
c0010f3b:	68 02 ff ff 0f       	push   0xfffff02
c0010f40:	53                   	push   ebx
c0010f41:	e8 84 00 00 00       	call   c0010fca <ReservedFilename::ReservedFilename(int)>
c0010f46:	83 c4 10             	add    esp,0x10
c0010f49:	89 1d 68 a7 02 c0    	mov    DWORD PTR ds:0xc002a768,ebx
c0010f4f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010f57:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0010f5c:	7f 67                	jg     c0010fc5 <UnixFile::UnixFile(int)+0x16b>
c0010f5e:	83 ec 0c             	sub    esp,0xc
c0010f61:	6a 0c                	push   0xc
c0010f63:	e8 d8 11 00 00       	call   c0012140 <operator new(unsigned long)>
c0010f68:	83 c4 10             	add    esp,0x10
c0010f6b:	89 c3                	mov    ebx,eax
c0010f6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010f71:	05 10 ff ff 0f       	add    eax,0xfffff10
c0010f76:	83 ec 08             	sub    esp,0x8
c0010f79:	50                   	push   eax
c0010f7a:	53                   	push   ebx
c0010f7b:	e8 4a 00 00 00       	call   c0010fca <ReservedFilename::ReservedFilename(int)>
c0010f80:	83 c4 10             	add    esp,0x10
c0010f83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010f87:	89 1c 85 40 a7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd58c0],ebx
c0010f8e:	83 ec 0c             	sub    esp,0xc
c0010f91:	6a 0c                	push   0xc
c0010f93:	e8 a8 11 00 00       	call   c0012140 <operator new(unsigned long)>
c0010f98:	83 c4 10             	add    esp,0x10
c0010f9b:	89 c3                	mov    ebx,eax
c0010f9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010fa1:	05 20 ff ff 0f       	add    eax,0xfffff20
c0010fa6:	83 ec 08             	sub    esp,0x8
c0010fa9:	50                   	push   eax
c0010faa:	53                   	push   ebx
c0010fab:	e8 1a 00 00 00       	call   c0010fca <ReservedFilename::ReservedFilename(int)>
c0010fb0:	83 c4 10             	add    esp,0x10
c0010fb3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010fb7:	89 1c 85 00 a7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5900],ebx
c0010fbe:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0010fc2:	eb 93                	jmp    c0010f57 <UnixFile::UnixFile(int)+0xfd>
c0010fc4:	90                   	nop
c0010fc5:	83 c4 18             	add    esp,0x18
c0010fc8:	5b                   	pop    ebx
c0010fc9:	c3                   	ret    

c0010fca <ReservedFilename::ReservedFilename(int)>:
c0010fca:	83 ec 0c             	sub    esp,0xc
c0010fcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fd1:	83 ec 08             	sub    esp,0x8
c0010fd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fd8:	50                   	push   eax
c0010fd9:	e8 7c fe ff ff       	call   c0010e5a <UnixFile::UnixFile(int)>
c0010fde:	83 c4 10             	add    esp,0x10
c0010fe1:	ba 30 70 02 c0       	mov    edx,0xc0027030
c0010fe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fea:	89 10                	mov    DWORD PTR [eax],edx
c0010fec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ff0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010ff4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010ff7:	90                   	nop
c0010ff8:	83 c4 0c             	add    esp,0xc
c0010ffb:	c3                   	ret    

c0010ffc <UnixFile::~UnixFile()>:
c0010ffc:	83 ec 1c             	sub    esp,0x1c
c0010fff:	ba 14 70 02 c0       	mov    edx,0xc0027014
c0011004:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011008:	89 10                	mov    DWORD PTR [eax],edx
c001100a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001100e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011011:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011016:	7f 73                	jg     c001108b <UnixFile::~UnixFile()+0x8f>
c0011018:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011020:	83 ec 0c             	sub    esp,0xc
c0011023:	68 78 a7 02 c0       	push   0xc002a778
c0011028:	e8 7d 43 01 00       	call   c00253aa <LinkedList<UnixFile>::getFirstElement()>
c001102d:	83 c4 10             	add    esp,0x10
c0011030:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011034:	83 ec 0c             	sub    esp,0xc
c0011037:	68 78 a7 02 c0       	push   0xc002a778
c001103c:	e8 71 43 01 00       	call   c00253b2 <LinkedList<UnixFile>::removeFirst()>
c0011041:	83 c4 10             	add    esp,0x10
c0011044:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011048:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001104c:	74 40                	je     c001108e <UnixFile::~UnixFile()+0x92>
c001104e:	83 ec 08             	sub    esp,0x8
c0011051:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011055:	68 78 a7 02 c0       	push   0xc002a778
c001105a:	e8 77 42 01 00       	call   c00252d6 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001105f:	83 c4 10             	add    esp,0x10
c0011062:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011066:	8d 50 01             	lea    edx,[eax+0x1]
c0011069:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001106d:	3d 88 13 00 00       	cmp    eax,0x1388
c0011072:	0f 94 c0             	sete   al
c0011075:	84 c0                	test   al,al
c0011077:	74 a7                	je     c0011020 <UnixFile::~UnixFile()+0x24>
c0011079:	83 ec 0c             	sub    esp,0xc
c001107c:	68 ec 6f 02 c0       	push   0xc0026fec
c0011081:	e8 21 7a 00 00       	call   c0018aa7 <Krnl::panic(char const*)>
c0011086:	83 c4 10             	add    esp,0x10
c0011089:	eb 95                	jmp    c0011020 <UnixFile::~UnixFile()+0x24>
c001108b:	90                   	nop
c001108c:	eb 01                	jmp    c001108f <UnixFile::~UnixFile()+0x93>
c001108e:	90                   	nop
c001108f:	90                   	nop
c0011090:	83 c4 1c             	add    esp,0x1c
c0011093:	c3                   	ret    

c0011094 <UnixFile::~UnixFile()>:
c0011094:	83 ec 0c             	sub    esp,0xc
c0011097:	83 ec 0c             	sub    esp,0xc
c001109a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001109e:	e8 59 ff ff ff       	call   c0010ffc <UnixFile::~UnixFile()>
c00110a3:	83 c4 10             	add    esp,0x10
c00110a6:	83 ec 08             	sub    esp,0x8
c00110a9:	6a 0c                	push   0xc
c00110ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110af:	e8 9b 10 00 00       	call   c001214f <operator delete(void*, unsigned long)>
c00110b4:	83 c4 10             	add    esp,0x10
c00110b7:	83 c4 0c             	add    esp,0xc
c00110ba:	c3                   	ret    
c00110bb:	90                   	nop

c00110bc <ReservedFilename::~ReservedFilename()>:
c00110bc:	83 ec 0c             	sub    esp,0xc
c00110bf:	ba 30 70 02 c0       	mov    edx,0xc0027030
c00110c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110c8:	89 10                	mov    DWORD PTR [eax],edx
c00110ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110ce:	83 ec 0c             	sub    esp,0xc
c00110d1:	50                   	push   eax
c00110d2:	e8 25 ff ff ff       	call   c0010ffc <UnixFile::~UnixFile()>
c00110d7:	83 c4 10             	add    esp,0x10
c00110da:	90                   	nop
c00110db:	83 c4 0c             	add    esp,0xc
c00110de:	c3                   	ret    
c00110df:	90                   	nop

c00110e0 <ReservedFilename::~ReservedFilename()>:
c00110e0:	83 ec 0c             	sub    esp,0xc
c00110e3:	83 ec 0c             	sub    esp,0xc
c00110e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110ea:	e8 cd ff ff ff       	call   c00110bc <ReservedFilename::~ReservedFilename()>
c00110ef:	83 c4 10             	add    esp,0x10
c00110f2:	83 ec 08             	sub    esp,0x8
c00110f5:	6a 0c                	push   0xc
c00110f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110fb:	e8 4f 10 00 00       	call   c001214f <operator delete(void*, unsigned long)>
c0011100:	83 c4 10             	add    esp,0x10
c0011103:	83 c4 0c             	add    esp,0xc
c0011106:	c3                   	ret    

c0011107 <getFromFileDescriptor(int)>:
c0011107:	53                   	push   ebx
c0011108:	83 ec 08             	sub    esp,0x8
c001110b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001110f:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011115:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c001111b:	7f 2c                	jg     c0011149 <getFromFileDescriptor(int)+0x42>
c001111d:	83 ec 0c             	sub    esp,0xc
c0011120:	68 78 a7 02 c0       	push   0xc002a778
c0011125:	e8 80 42 01 00       	call   c00253aa <LinkedList<UnixFile>::getFirstElement()>
c001112a:	83 c4 10             	add    esp,0x10
c001112d:	85 c0                	test   eax,eax
c001112f:	75 04                	jne    c0011135 <getFromFileDescriptor(int)+0x2e>
c0011131:	31 c0                	xor    eax,eax
c0011133:	eb 6e                	jmp    c00111a3 <getFromFileDescriptor(int)+0x9c>
c0011135:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011138:	74 69                	je     c00111a3 <getFromFileDescriptor(int)+0x9c>
c001113a:	52                   	push   edx
c001113b:	52                   	push   edx
c001113c:	50                   	push   eax
c001113d:	68 78 a7 02 c0       	push   0xc002a778
c0011142:	e8 0d 43 01 00       	call   c0025454 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011147:	eb e1                	jmp    c001112a <getFromFileDescriptor(int)+0x23>
c0011149:	a1 6c a7 02 c0       	mov    eax,ds:0xc002a76c
c001114e:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011154:	74 4d                	je     c00111a3 <getFromFileDescriptor(int)+0x9c>
c0011156:	a1 70 a7 02 c0       	mov    eax,ds:0xc002a770
c001115b:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011161:	74 40                	je     c00111a3 <getFromFileDescriptor(int)+0x9c>
c0011163:	a1 68 a7 02 c0       	mov    eax,ds:0xc002a768
c0011168:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c001116e:	74 33                	je     c00111a3 <getFromFileDescriptor(int)+0x9c>
c0011170:	a1 64 a7 02 c0       	mov    eax,ds:0xc002a764
c0011175:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001117b:	74 26                	je     c00111a3 <getFromFileDescriptor(int)+0x9c>
c001117d:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011183:	83 f8 08             	cmp    eax,0x8
c0011186:	77 09                	ja     c0011191 <getFromFileDescriptor(int)+0x8a>
c0011188:	8b 04 85 40 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd58c0]
c001118f:	eb 12                	jmp    c00111a3 <getFromFileDescriptor(int)+0x9c>
c0011191:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011197:	83 fb 08             	cmp    ebx,0x8
c001119a:	77 95                	ja     c0011131 <getFromFileDescriptor(int)+0x2a>
c001119c:	8b 04 9d 00 a7 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd5900]
c00111a3:	83 c4 08             	add    esp,0x8
c00111a6:	5b                   	pop    ebx
c00111a7:	c3                   	ret    

c00111a8 <__static_initialization_and_destruction_0(int, int)>:
c00111a8:	83 ec 0c             	sub    esp,0xc
c00111ab:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00111b0:	75 34                	jne    c00111e6 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00111b2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00111ba:	75 2a                	jne    c00111e6 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00111bc:	83 ec 0c             	sub    esp,0xc
c00111bf:	68 78 a7 02 c0       	push   0xc002a778
c00111c4:	e8 b5 40 01 00       	call   c002527e <LinkedList<UnixFile>::LinkedList()>
c00111c9:	83 c4 10             	add    esp,0x10
c00111cc:	83 ec 04             	sub    esp,0x4
c00111cf:	68 b8 95 02 c0       	push   0xc00295b8
c00111d4:	68 78 a7 02 c0       	push   0xc002a778
c00111d9:	68 7c 52 02 c0       	push   0xc002527c
c00111de:	e8 e8 0e 00 00       	call   c00120cb <__cxa_atexit>
c00111e3:	83 c4 10             	add    esp,0x10
c00111e6:	90                   	nop
c00111e7:	83 c4 0c             	add    esp,0xc
c00111ea:	c3                   	ret    

c00111eb <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00111eb:	83 ec 0c             	sub    esp,0xc
c00111ee:	83 ec 08             	sub    esp,0x8
c00111f1:	68 ff ff 00 00       	push   0xffff
c00111f6:	6a 01                	push   0x1
c00111f8:	e8 ab ff ff ff       	call   c00111a8 <__static_initialization_and_destruction_0(int, int)>
c00111fd:	83 c4 10             	add    esp,0x10
c0011200:	83 c4 0c             	add    esp,0xc
c0011203:	c3                   	ret    

c0011204 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011204:	53                   	push   ebx
c0011205:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011209:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001120d:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011213:	89 c8                	mov    eax,ecx
c0011215:	d1 e8                	shr    eax,1
c0011217:	03 05 48 96 02 c0    	add    eax,DWORD PTR ds:0xc0029648
c001121d:	83 e1 01             	and    ecx,0x1
c0011220:	8a 10                	mov    dl,BYTE PTR [eax]
c0011222:	75 09                	jne    c001122d <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011224:	83 e2 f0             	and    edx,0xfffffff0
c0011227:	09 da                	or     edx,ebx
c0011229:	88 10                	mov    BYTE PTR [eax],dl
c001122b:	5b                   	pop    ebx
c001122c:	c3                   	ret    
c001122d:	c1 e3 04             	shl    ebx,0x4
c0011230:	83 e2 0f             	and    edx,0xf
c0011233:	09 da                	or     edx,ebx
c0011235:	88 10                	mov    BYTE PTR [eax],dl
c0011237:	5b                   	pop    ebx
c0011238:	c3                   	ret    

c0011239 <Virt::getPageState(unsigned long)>:
c0011239:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001123d:	8b 0d 48 96 02 c0    	mov    ecx,DWORD PTR ds:0xc0029648
c0011243:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011249:	89 d0                	mov    eax,edx
c001124b:	d1 e8                	shr    eax,1
c001124d:	83 e2 01             	and    edx,0x1
c0011250:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011253:	75 04                	jne    c0011259 <Virt::getPageState(unsigned long)+0x20>
c0011255:	83 e0 0f             	and    eax,0xf
c0011258:	c3                   	ret    
c0011259:	c0 e8 04             	shr    al,0x4
c001125c:	c3                   	ret    

c001125d <Virt::allocateKernelVirtualPages(int)>:
c001125d:	55                   	push   ebp
c001125e:	31 ed                	xor    ebp,ebp
c0011260:	57                   	push   edi
c0011261:	56                   	push   esi
c0011262:	53                   	push   ebx
c0011263:	31 db                	xor    ebx,ebx
c0011265:	83 ec 1c             	sub    esp,0x1c
c0011268:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001126c:	8b 3d 44 96 02 c0    	mov    edi,DWORD PTR ds:0xc0029644
c0011272:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011277:	57                   	push   edi
c0011278:	e8 bc ff ff ff       	call   c0011239 <Virt::getPageState(unsigned long)>
c001127d:	5a                   	pop    edx
c001127e:	84 c0                	test   al,al
c0011280:	75 3a                	jne    c00112bc <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011282:	85 db                	test   ebx,ebx
c0011284:	75 02                	jne    c0011288 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011286:	89 fd                	mov    ebp,edi
c0011288:	43                   	inc    ebx
c0011289:	39 f3                	cmp    ebx,esi
c001128b:	74 5a                	je     c00112e7 <Virt::allocateKernelVirtualPages(int)+0x8a>
c001128d:	47                   	inc    edi
c001128e:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011294:	76 31                	jbe    c00112c7 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011296:	c7 05 44 96 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0029644,0xc8000
c00112a0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00112a5:	75 28                	jne    c00112cf <Virt::allocateKernelVirtualPages(int)+0x72>
c00112a7:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00112ac:	bf 00 80 0c 00       	mov    edi,0xc8000
c00112b1:	57                   	push   edi
c00112b2:	e8 82 ff ff ff       	call   c0011239 <Virt::getPageState(unsigned long)>
c00112b7:	5a                   	pop    edx
c00112b8:	84 c0                	test   al,al
c00112ba:	74 c6                	je     c0011282 <Virt::allocateKernelVirtualPages(int)+0x25>
c00112bc:	31 db                	xor    ebx,ebx
c00112be:	47                   	inc    edi
c00112bf:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00112c5:	77 cf                	ja     c0011296 <Virt::allocateKernelVirtualPages(int)+0x39>
c00112c7:	89 3d 44 96 02 c0    	mov    DWORD PTR ds:0xc0029644,edi
c00112cd:	eb a8                	jmp    c0011277 <Virt::allocateKernelVirtualPages(int)+0x1a>
c00112cf:	83 ec 0c             	sub    esp,0xc
c00112d2:	68 44 70 02 c0       	push   0xc0027044
c00112d7:	e8 cb 77 00 00       	call   c0018aa7 <Krnl::panic(char const*)>
c00112dc:	8b 3d 44 96 02 c0    	mov    edi,DWORD PTR ds:0xc0029644
c00112e2:	83 c4 10             	add    esp,0x10
c00112e5:	eb 90                	jmp    c0011277 <Virt::allocateKernelVirtualPages(int)+0x1a>
c00112e7:	89 2d 44 96 02 c0    	mov    DWORD PTR ds:0xc0029644,ebp
c00112ed:	4b                   	dec    ebx
c00112ee:	74 5f                	je     c001134f <Virt::allocateKernelVirtualPages(int)+0xf2>
c00112f0:	85 f6                	test   esi,esi
c00112f2:	74 3d                	je     c0011331 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00112f4:	89 e8                	mov    eax,ebp
c00112f6:	31 db                	xor    ebx,ebx
c00112f8:	8d 7e ff             	lea    edi,[esi-0x1]
c00112fb:	eb 14                	jmp    c0011311 <Virt::allocateKernelVirtualPages(int)+0xb4>
c00112fd:	6a 01                	push   0x1
c00112ff:	43                   	inc    ebx
c0011300:	50                   	push   eax
c0011301:	e8 fe fe ff ff       	call   c0011204 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011306:	58                   	pop    eax
c0011307:	39 f3                	cmp    ebx,esi
c0011309:	5a                   	pop    edx
c001130a:	74 25                	je     c0011331 <Virt::allocateKernelVirtualPages(int)+0xd4>
c001130c:	a1 44 96 02 c0       	mov    eax,ds:0xc0029644
c0011311:	8d 50 01             	lea    edx,[eax+0x1]
c0011314:	85 db                	test   ebx,ebx
c0011316:	89 15 44 96 02 c0    	mov    DWORD PTR ds:0xc0029644,edx
c001131c:	74 20                	je     c001133e <Virt::allocateKernelVirtualPages(int)+0xe1>
c001131e:	39 df                	cmp    edi,ebx
c0011320:	75 db                	jne    c00112fd <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011322:	6a 03                	push   0x3
c0011324:	43                   	inc    ebx
c0011325:	50                   	push   eax
c0011326:	e8 d9 fe ff ff       	call   c0011204 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001132b:	59                   	pop    ecx
c001132c:	39 f3                	cmp    ebx,esi
c001132e:	58                   	pop    eax
c001132f:	75 db                	jne    c001130c <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011331:	83 c4 1c             	add    esp,0x1c
c0011334:	89 e8                	mov    eax,ebp
c0011336:	5b                   	pop    ebx
c0011337:	c1 e0 0c             	shl    eax,0xc
c001133a:	5e                   	pop    esi
c001133b:	5f                   	pop    edi
c001133c:	5d                   	pop    ebp
c001133d:	c3                   	ret    
c001133e:	6a 02                	push   0x2
c0011340:	bb 01 00 00 00       	mov    ebx,0x1
c0011345:	50                   	push   eax
c0011346:	e8 b9 fe ff ff       	call   c0011204 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001134b:	58                   	pop    eax
c001134c:	5a                   	pop    edx
c001134d:	eb bd                	jmp    c001130c <Virt::allocateKernelVirtualPages(int)+0xaf>
c001134f:	6a 04                	push   0x4
c0011351:	8d 45 01             	lea    eax,[ebp+0x1]
c0011354:	55                   	push   ebp
c0011355:	a3 44 96 02 c0       	mov    ds:0xc0029644,eax
c001135a:	e8 a5 fe ff ff       	call   c0011204 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001135f:	59                   	pop    ecx
c0011360:	89 e8                	mov    eax,ebp
c0011362:	5b                   	pop    ebx
c0011363:	c1 e0 0c             	shl    eax,0xc
c0011366:	83 c4 1c             	add    esp,0x1c
c0011369:	5b                   	pop    ebx
c001136a:	5e                   	pop    esi
c001136b:	5f                   	pop    edi
c001136c:	5d                   	pop    ebp
c001136d:	c3                   	ret    

c001136e <Virt::virtualMemorySetup()>:
c001136e:	53                   	push   ebx
c001136f:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011374:	83 ec 08             	sub    esp,0x8
c0011377:	6a 0f                	push   0xf
c0011379:	53                   	push   ebx
c001137a:	43                   	inc    ebx
c001137b:	e8 84 fe ff ff       	call   c0011204 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011380:	59                   	pop    ecx
c0011381:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011387:	58                   	pop    eax
c0011388:	75 ed                	jne    c0011377 <Virt::virtualMemorySetup()+0x9>
c001138a:	83 ec 08             	sub    esp,0x8
c001138d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011392:	68 00 00 00 c8       	push   0xc8000000
c0011397:	68 cb 71 02 c0       	push   0xc00271cb
c001139c:	e8 8e 0e 00 00       	call   c001222f <Dbg::kprintf(char const*, ...)>
c00113a1:	58                   	pop    eax
c00113a2:	5a                   	pop    edx
c00113a3:	68 00 f0 ff ef       	push   0xeffff000
c00113a8:	68 df 71 02 c0       	push   0xc00271df
c00113ad:	e8 7d 0e 00 00       	call   c001222f <Dbg::kprintf(char const*, ...)>
c00113b2:	83 c4 10             	add    esp,0x10
c00113b5:	83 ec 08             	sub    esp,0x8
c00113b8:	6a 00                	push   0x0
c00113ba:	53                   	push   ebx
c00113bb:	43                   	inc    ebx
c00113bc:	e8 43 fe ff ff       	call   c0011204 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113c1:	83 c4 10             	add    esp,0x10
c00113c4:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00113ca:	75 e9                	jne    c00113b5 <Virt::virtualMemorySetup()+0x47>
c00113cc:	bb 00 00 0d 00       	mov    ebx,0xd0000
c00113d1:	83 ec 08             	sub    esp,0x8
c00113d4:	6a 0f                	push   0xf
c00113d6:	53                   	push   ebx
c00113d7:	43                   	inc    ebx
c00113d8:	e8 27 fe ff ff       	call   c0011204 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113dd:	83 c4 10             	add    esp,0x10
c00113e0:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c00113e6:	75 e9                	jne    c00113d1 <Virt::virtualMemorySetup()+0x63>
c00113e8:	83 c4 08             	add    esp,0x8
c00113eb:	5b                   	pop    ebx
c00113ec:	c3                   	ret    

c00113ed <Virt::getAKernelVAS()>:
c00113ed:	a1 84 a7 02 c0       	mov    eax,ds:0xc002a784
c00113f2:	c3                   	ret    

c00113f3 <Virt::setupPageSwapping(int)>:
c00113f3:	57                   	push   edi
c00113f4:	56                   	push   esi
c00113f5:	53                   	push   ebx
c00113f6:	83 ec 1c             	sub    esp,0x1c
c00113f9:	68 14 01 00 00       	push   0x114
c00113fe:	e8 3d 0d 00 00       	call   c0012140 <operator new(unsigned long)>
c0011403:	83 c4 0c             	add    esp,0xc
c0011406:	89 c6                	mov    esi,eax
c0011408:	ff 35 34 bb 02 c0    	push   DWORD PTR ds:0xc002bb34
c001140e:	68 f3 71 02 c0       	push   0xc00271f3
c0011413:	50                   	push   eax
c0011414:	e8 45 13 00 00       	call   c001275e <File::File(char const*, Process*)>
c0011419:	89 34 24             	mov    DWORD PTR [esp],esi
c001141c:	e8 19 15 00 00       	call   c001293a <File::unlink()>
c0011421:	58                   	pop    eax
c0011422:	5a                   	pop    edx
c0011423:	6a 12                	push   0x12
c0011425:	56                   	push   esi
c0011426:	e8 97 13 00 00       	call   c00127c2 <File::open(FileOpenMode)>
c001142b:	83 c4 10             	add    esp,0x10
c001142e:	85 c0                	test   eax,eax
c0011430:	0f 85 bf 00 00 00    	jne    c00114f5 <Virt::setupPageSwapping(int)+0x102>
c0011436:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001143a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011442:	c1 e3 08             	shl    ebx,0x8
c0011445:	83 ec 0c             	sub    esp,0xc
c0011448:	68 00 00 01 00       	push   0x10000
c001144d:	e8 d4 dc ff ff       	call   c000f126 <malloc>
c0011452:	83 c4 0c             	add    esp,0xc
c0011455:	89 c7                	mov    edi,eax
c0011457:	68 00 00 01 00       	push   0x10000
c001145c:	6a 00                	push   0x0
c001145e:	50                   	push   eax
c001145f:	e8 19 f2 fe ff       	call   c000067d <memset>
c0011464:	83 c4 10             	add    esp,0x10
c0011467:	85 db                	test   ebx,ebx
c0011469:	79 03                	jns    c001146e <Virt::setupPageSwapping(int)+0x7b>
c001146b:	83 c3 0f             	add    ebx,0xf
c001146e:	c1 fb 04             	sar    ebx,0x4
c0011471:	4b                   	dec    ebx
c0011472:	83 fb ff             	cmp    ebx,0xffffffff
c0011475:	74 4b                	je     c00114c2 <Virt::setupPageSwapping(int)+0xcf>
c0011477:	83 ec 0c             	sub    esp,0xc
c001147a:	8b 06                	mov    eax,DWORD PTR [esi]
c001147c:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011480:	52                   	push   edx
c0011481:	57                   	push   edi
c0011482:	6a 00                	push   0x0
c0011484:	68 00 00 01 00       	push   0x10000
c0011489:	56                   	push   esi
c001148a:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001148d:	83 c4 20             	add    esp,0x20
c0011490:	85 c0                	test   eax,eax
c0011492:	75 4e                	jne    c00114e2 <Virt::setupPageSwapping(int)+0xef>
c0011494:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011498:	3d 00 00 01 00       	cmp    eax,0x10000
c001149d:	74 d2                	je     c0011471 <Virt::setupPageSwapping(int)+0x7e>
c001149f:	83 ec 08             	sub    esp,0x8
c00114a2:	4b                   	dec    ebx
c00114a3:	50                   	push   eax
c00114a4:	68 46 72 02 c0       	push   0xc0027246
c00114a9:	e8 81 0d 00 00       	call   c001222f <Dbg::kprintf(char const*, ...)>
c00114ae:	c7 04 24 4f 72 02 c0 	mov    DWORD PTR [esp],0xc002724f
c00114b5:	e8 ed 75 00 00       	call   c0018aa7 <Krnl::panic(char const*)>
c00114ba:	83 c4 10             	add    esp,0x10
c00114bd:	83 fb ff             	cmp    ebx,0xffffffff
c00114c0:	75 b5                	jne    c0011477 <Virt::setupPageSwapping(int)+0x84>
c00114c2:	83 ec 0c             	sub    esp,0xc
c00114c5:	56                   	push   esi
c00114c6:	e8 55 13 00 00       	call   c0012820 <File::close()>
c00114cb:	89 3c 24             	mov    DWORD PTR [esp],edi
c00114ce:	e8 73 dc ff ff       	call   c000f146 <rfree>
c00114d3:	89 34 24             	mov    DWORD PTR [esp],esi
c00114d6:	8b 06                	mov    eax,DWORD PTR [esi]
c00114d8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00114db:	83 c4 20             	add    esp,0x20
c00114de:	5b                   	pop    ebx
c00114df:	5e                   	pop    esi
c00114e0:	5f                   	pop    edi
c00114e1:	c3                   	ret    
c00114e2:	83 ec 08             	sub    esp,0x8
c00114e5:	50                   	push   eax
c00114e6:	68 2e 72 02 c0       	push   0xc002722e
c00114eb:	e8 3f 0d 00 00       	call   c001222f <Dbg::kprintf(char const*, ...)>
c00114f0:	83 c4 10             	add    esp,0x10
c00114f3:	eb 9f                	jmp    c0011494 <Virt::setupPageSwapping(int)+0xa1>
c00114f5:	83 ec 08             	sub    esp,0x8
c00114f8:	50                   	push   eax
c00114f9:	68 0a 72 02 c0       	push   0xc002720a
c00114fe:	e8 2c 0d 00 00       	call   c001222f <Dbg::kprintf(char const*, ...)>
c0011503:	c7 04 24 13 72 02 c0 	mov    DWORD PTR [esp],0xc0027213
c001150a:	e8 98 75 00 00       	call   c0018aa7 <Krnl::panic(char const*)>
c001150f:	83 c4 10             	add    esp,0x10
c0011512:	e9 1f ff ff ff       	jmp    c0011436 <Virt::setupPageSwapping(int)+0x43>
c0011517:	90                   	nop

c0011518 <VAS::VAS()>:
c0011518:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001151c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011523:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011527:	a3 84 a7 02 c0       	mov    ds:0xc002a784,eax
c001152c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011530:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011534:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011538:	c6 00 01             	mov    BYTE PTR [eax],0x1
c001153b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001153f:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011546:	90                   	nop
c0011547:	c3                   	ret    

c0011548 <VAS::VAS(VAS*)>:
c0011548:	83 ec 0c             	sub    esp,0xc
c001154b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001154f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011556:	83 ec 0c             	sub    esp,0xc
c0011559:	68 64 70 02 c0       	push   0xc0027064
c001155e:	e8 44 75 00 00       	call   c0018aa7 <Krnl::panic(char const*)>
c0011563:	83 c4 10             	add    esp,0x10
c0011566:	90                   	nop
c0011567:	83 c4 0c             	add    esp,0xc
c001156a:	c3                   	ret    
c001156b:	90                   	nop

c001156c <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c001156c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011570:	89 c2                	mov    edx,eax
c0011572:	c1 e8 0a             	shr    eax,0xa
c0011575:	c1 ea 16             	shr    edx,0x16
c0011578:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001157d:	19 c9                	sbb    ecx,ecx
c001157f:	c1 e2 0c             	shl    edx,0xc
c0011582:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011588:	25 fc 0f 00 00       	and    eax,0xffc
c001158d:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011594:	01 d0                	add    eax,edx
c0011596:	c3                   	ret    
c0011597:	90                   	nop

c0011598 <VAS::getPageTableEntry(unsigned long)>:
c0011598:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001159c:	89 ca                	mov    edx,ecx
c001159e:	c1 e9 0a             	shr    ecx,0xa
c00115a1:	c1 ea 16             	shr    edx,0x16
c00115a4:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00115aa:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00115b0:	c1 e0 0c             	shl    eax,0xc
c00115b3:	8d 04 08             	lea    eax,[eax+ecx*1]
c00115b6:	c3                   	ret    

c00115b7 <Virt::freeKernelVirtualPages(unsigned long)>:
c00115b7:	57                   	push   edi
c00115b8:	56                   	push   esi
c00115b9:	be 01 00 00 00       	mov    esi,0x1
c00115be:	53                   	push   ebx
c00115bf:	83 ec 10             	sub    esp,0x10
c00115c2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00115c6:	c1 eb 0c             	shr    ebx,0xc
c00115c9:	eb 3f                	jmp    c001160a <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c00115cb:	e8 1d fe ff ff       	call   c00113ed <Virt::getAKernelVAS()>
c00115d0:	83 ec 08             	sub    esp,0x8
c00115d3:	57                   	push   edi
c00115d4:	50                   	push   eax
c00115d5:	e8 be ff ff ff       	call   c0011598 <VAS::getPageTableEntry(unsigned long)>
c00115da:	83 c4 10             	add    esp,0x10
c00115dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00115df:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00115e3:	f6 c4 04             	test   ah,0x4
c00115e6:	75 5f                	jne    c0011647 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c00115e8:	80 fa 04             	cmp    dl,0x4
c00115eb:	74 78                	je     c0011665 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c00115ed:	80 fa 02             	cmp    dl,0x2
c00115f0:	0f 84 88 00 00 00    	je     c001167e <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c00115f6:	80 fa 03             	cmp    dl,0x3
c00115f9:	0f 84 ad 00 00 00    	je     c00116ac <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c00115ff:	fe ca                	dec    dl
c0011601:	0f 84 92 00 00 00    	je     c0011699 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011607:	43                   	inc    ebx
c0011608:	31 f6                	xor    esi,esi
c001160a:	53                   	push   ebx
c001160b:	e8 29 fc ff ff       	call   c0011239 <Virt::getPageState(unsigned long)>
c0011610:	5f                   	pop    edi
c0011611:	89 df                	mov    edi,ebx
c0011613:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011617:	c1 e7 0c             	shl    edi,0xc
c001161a:	84 c0                	test   al,al
c001161c:	75 ad                	jne    c00115cb <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c001161e:	83 ec 0c             	sub    esp,0xc
c0011621:	68 55 72 02 c0       	push   0xc0027255
c0011626:	e8 7c 74 00 00       	call   c0018aa7 <Krnl::panic(char const*)>
c001162b:	e8 bd fd ff ff       	call   c00113ed <Virt::getAKernelVAS()>
c0011630:	5a                   	pop    edx
c0011631:	59                   	pop    ecx
c0011632:	57                   	push   edi
c0011633:	50                   	push   eax
c0011634:	e8 5f ff ff ff       	call   c0011598 <VAS::getPageTableEntry(unsigned long)>
c0011639:	83 c4 10             	add    esp,0x10
c001163c:	8b 00                	mov    eax,DWORD PTR [eax]
c001163e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011642:	f6 c4 04             	test   ah,0x4
c0011645:	74 c0                	je     c0011607 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011647:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c001164b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011650:	83 ec 0c             	sub    esp,0xc
c0011653:	50                   	push   eax
c0011654:	e8 ed df ff ff       	call   c000f646 <Phys::freePage(unsigned long)>
c0011659:	83 c4 10             	add    esp,0x10
c001165c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011660:	80 fa 04             	cmp    dl,0x4
c0011663:	75 88                	jne    c00115ed <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011665:	89 f0                	mov    eax,esi
c0011667:	84 c0                	test   al,al
c0011669:	75 47                	jne    c00116b2 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c001166b:	c7 44 24 20 88 70 02 c0 	mov    DWORD PTR [esp+0x20],0xc0027088
c0011673:	83 c4 10             	add    esp,0x10
c0011676:	5b                   	pop    ebx
c0011677:	5e                   	pop    esi
c0011678:	5f                   	pop    edi
c0011679:	e9 29 74 00 00       	jmp    c0018aa7 <Krnl::panic(char const*)>
c001167e:	89 f0                	mov    eax,esi
c0011680:	84 c0                	test   al,al
c0011682:	75 15                	jne    c0011699 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011684:	83 ec 0c             	sub    esp,0xc
c0011687:	68 71 72 02 c0       	push   0xc0027271
c001168c:	e8 16 74 00 00       	call   c0018aa7 <Krnl::panic(char const*)>
c0011691:	83 c4 10             	add    esp,0x10
c0011694:	e9 6e ff ff ff       	jmp    c0011607 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011699:	83 ec 08             	sub    esp,0x8
c001169c:	6a 00                	push   0x0
c001169e:	53                   	push   ebx
c001169f:	e8 60 fb ff ff       	call   c0011204 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116a4:	83 c4 10             	add    esp,0x10
c00116a7:	e9 5b ff ff ff       	jmp    c0011607 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00116ac:	89 f0                	mov    eax,esi
c00116ae:	84 c0                	test   al,al
c00116b0:	75 15                	jne    c00116c7 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c00116b2:	83 ec 08             	sub    esp,0x8
c00116b5:	6a 00                	push   0x0
c00116b7:	53                   	push   ebx
c00116b8:	e8 47 fb ff ff       	call   c0011204 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116bd:	83 c4 10             	add    esp,0x10
c00116c0:	83 c4 10             	add    esp,0x10
c00116c3:	5b                   	pop    ebx
c00116c4:	5e                   	pop    esi
c00116c5:	5f                   	pop    edi
c00116c6:	c3                   	ret    
c00116c7:	c7 44 24 20 8d 72 02 c0 	mov    DWORD PTR [esp+0x20],0xc002728d
c00116cf:	83 c4 10             	add    esp,0x10
c00116d2:	5b                   	pop    ebx
c00116d3:	5e                   	pop    esi
c00116d4:	5f                   	pop    edi
c00116d5:	e9 cd 73 00 00       	jmp    c0018aa7 <Krnl::panic(char const*)>

c00116da <VAS::freeAllocatedPages(unsigned long)>:
c00116da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00116e2:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c00116e6:	74 09                	je     c00116f1 <VAS::freeAllocatedPages(unsigned long)+0x17>
c00116e8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00116ec:	e9 c6 fe ff ff       	jmp    c00115b7 <Virt::freeKernelVirtualPages(unsigned long)>
c00116f1:	c7 44 24 04 ac 70 02 c0 	mov    DWORD PTR [esp+0x4],0xc00270ac
c00116f9:	e9 31 0b 00 00       	jmp    c001222f <Dbg::kprintf(char const*, ...)>

c00116fe <VAS::virtualToPhysical(unsigned long)>:
c00116fe:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011702:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011706:	e8 8d fe ff ff       	call   c0011598 <VAS::getPageTableEntry(unsigned long)>
c001170b:	5a                   	pop    edx
c001170c:	8b 00                	mov    eax,DWORD PTR [eax]
c001170e:	59                   	pop    ecx
c001170f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011714:	c3                   	ret    
c0011715:	90                   	nop

c0011716 <VAS::reflagRange(unsigned long, int, int, int)>:
c0011716:	55                   	push   ebp
c0011717:	57                   	push   edi
c0011718:	56                   	push   esi
c0011719:	53                   	push   ebx
c001171a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001171e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011722:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011726:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001172a:	85 db                	test   ebx,ebx
c001172c:	7e 22                	jle    c0011750 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c001172e:	c1 e3 0c             	shl    ebx,0xc
c0011731:	01 f3                	add    ebx,esi
c0011733:	56                   	push   esi
c0011734:	81 c6 00 10 00 00    	add    esi,0x1000
c001173a:	55                   	push   ebp
c001173b:	e8 58 fe ff ff       	call   c0011598 <VAS::getPageTableEntry(unsigned long)>
c0011740:	5a                   	pop    edx
c0011741:	59                   	pop    ecx
c0011742:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011744:	21 f9                	and    ecx,edi
c0011746:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c001174a:	39 f3                	cmp    ebx,esi
c001174c:	89 08                	mov    DWORD PTR [eax],ecx
c001174e:	75 e3                	jne    c0011733 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011750:	5b                   	pop    ebx
c0011751:	5e                   	pop    esi
c0011752:	5f                   	pop    edi
c0011753:	5d                   	pop    ebp
c0011754:	c3                   	ret    
c0011755:	90                   	nop

c0011756 <VAS::setToWriteCombining(unsigned long, int)>:
c0011756:	83 ec 0c             	sub    esp,0xc
c0011759:	e8 e2 3a 01 00       	call   c0025240 <CPU::current()>
c001175e:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0011765:	75 04                	jne    c001176b <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0011767:	83 c4 0c             	add    esp,0xc
c001176a:	c3                   	ret    
c001176b:	83 ec 0c             	sub    esp,0xc
c001176e:	68 80 00 00 00       	push   0x80
c0011773:	6a ff                	push   0xffffffff
c0011775:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011779:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001177d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011781:	e8 90 ff ff ff       	call   c0011716 <VAS::reflagRange(unsigned long, int, int, int)>
c0011786:	83 c4 20             	add    esp,0x20
c0011789:	83 c4 0c             	add    esp,0xc
c001178c:	c3                   	ret    
c001178d:	90                   	nop

c001178e <VAS::mapOtherVASIn(bool, VAS*)>:
c001178e:	83 ec 0c             	sub    esp,0xc
c0011791:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0011796:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001179a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001179d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117a1:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00117a4:	19 c0                	sbb    eax,eax
c00117a6:	83 ca 03             	or     edx,0x3
c00117a9:	83 e0 fc             	and    eax,0xfffffffc
c00117ac:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00117b3:	e8 a9 3a 01 00       	call   c0025261 <CPU::readCR3()>
c00117b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00117bc:	83 c4 0c             	add    esp,0xc
c00117bf:	e9 af 3a 01 00       	jmp    c0025273 <CPU::writeCR3(unsigned long)>

c00117c4 <VAS::~VAS()>:
c00117c4:	83 ec 2c             	sub    esp,0x2c
c00117c7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00117cf:	e8 26 a2 00 00       	call   c001b9fa <lockScheduler()>
c00117d4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00117d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00117db:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00117de:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00117e4:	83 ec 04             	sub    esp,0x4
c00117e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00117eb:	6a 01                	push   0x1
c00117ed:	50                   	push   eax
c00117ee:	e8 9b ff ff ff       	call   c001178e <VAS::mapOtherVASIn(bool, VAS*)>
c00117f3:	83 c4 10             	add    esp,0x10
c00117f6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00117fe:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0011806:	0f 8f d7 00 00 00    	jg     c00118e3 <VAS::~VAS()+0x11f>
c001180c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011810:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011813:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011817:	c1 e2 02             	shl    edx,0x2
c001181a:	01 d0                	add    eax,edx
c001181c:	8b 00                	mov    eax,DWORD PTR [eax]
c001181e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011822:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011826:	83 e0 01             	and    eax,0x1
c0011829:	0f 84 ab 00 00 00    	je     c00118da <VAS::~VAS()+0x116>
c001182f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011837:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c001183f:	7f 75                	jg     c00118b6 <VAS::~VAS()+0xf2>
c0011841:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011845:	c1 e0 0a             	shl    eax,0xa
c0011848:	89 c2                	mov    edx,eax
c001184a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001184e:	01 d0                	add    eax,edx
c0011850:	c1 e0 0c             	shl    eax,0xc
c0011853:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011857:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001185c:	8b 00                	mov    eax,DWORD PTR [eax]
c001185e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011861:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011867:	83 ec 04             	sub    esp,0x4
c001186a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001186e:	6a 01                	push   0x1
c0011870:	50                   	push   eax
c0011871:	e8 f6 fc ff ff       	call   c001156c <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011876:	83 c4 10             	add    esp,0x10
c0011879:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001187d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011881:	8b 00                	mov    eax,DWORD PTR [eax]
c0011883:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011887:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001188b:	25 01 04 00 00       	and    eax,0x401
c0011890:	3d 01 04 00 00       	cmp    eax,0x401
c0011895:	75 19                	jne    c00118b0 <VAS::~VAS()+0xec>
c0011897:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001189b:	25 00 f0 ff ff       	and    eax,0xfffff000
c00118a0:	83 ec 0c             	sub    esp,0xc
c00118a3:	50                   	push   eax
c00118a4:	e8 9d dd ff ff       	call   c000f646 <Phys::freePage(unsigned long)>
c00118a9:	83 c4 10             	add    esp,0x10
c00118ac:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00118b0:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00118b4:	eb 81                	jmp    c0011837 <VAS::~VAS()+0x73>
c00118b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118ba:	25 00 04 00 00       	and    eax,0x400
c00118bf:	74 19                	je     c00118da <VAS::~VAS()+0x116>
c00118c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118c5:	25 00 f0 ff ff       	and    eax,0xfffff000
c00118ca:	83 ec 0c             	sub    esp,0xc
c00118cd:	50                   	push   eax
c00118ce:	e8 73 dd ff ff       	call   c000f646 <Phys::freePage(unsigned long)>
c00118d3:	83 c4 10             	add    esp,0x10
c00118d6:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00118da:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00118de:	e9 1b ff ff ff       	jmp    c00117fe <VAS::~VAS()+0x3a>
c00118e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00118e7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00118ea:	83 ec 0c             	sub    esp,0xc
c00118ed:	50                   	push   eax
c00118ee:	e8 c4 fc ff ff       	call   c00115b7 <Virt::freeKernelVirtualPages(unsigned long)>
c00118f3:	83 c4 10             	add    esp,0x10
c00118f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00118fa:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00118fd:	83 ec 0c             	sub    esp,0xc
c0011900:	50                   	push   eax
c0011901:	e8 40 dd ff ff       	call   c000f646 <Phys::freePage(unsigned long)>
c0011906:	83 c4 10             	add    esp,0x10
c0011909:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001190d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011911:	c1 e0 02             	shl    eax,0x2
c0011914:	83 ec 08             	sub    esp,0x8
c0011917:	50                   	push   eax
c0011918:	68 d0 70 02 c0       	push   0xc00270d0
c001191d:	e8 0d 09 00 00       	call   c001222f <Dbg::kprintf(char const*, ...)>
c0011922:	83 c4 10             	add    esp,0x10
c0011925:	e8 d2 a0 00 00       	call   c001b9fc <unlockScheduler()>
c001192a:	90                   	nop
c001192b:	83 c4 2c             	add    esp,0x2c
c001192e:	c3                   	ret    
c001192f:	90                   	nop

c0011930 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011930:	55                   	push   ebp
c0011931:	57                   	push   edi
c0011932:	56                   	push   esi
c0011933:	53                   	push   ebx
c0011934:	83 ec 1c             	sub    esp,0x1c
c0011937:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001193b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001193f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011945:	77 08                	ja     c001194f <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011947:	0f 20 d8             	mov    eax,cr3
c001194a:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c001194d:	75 47                	jne    c0011996 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c001194f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011953:	09 d8                	or     eax,ebx
c0011955:	a9 ff 0f 00 00       	test   eax,0xfff
c001195a:	75 57                	jne    c00119b3 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c001195c:	89 de                	mov    esi,ebx
c001195e:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011961:	c1 ee 16             	shr    esi,0x16
c0011964:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c001196b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c001196f:	74 54                	je     c00119c5 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011971:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011975:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c001197b:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001197f:	c1 e6 0c             	shl    esi,0xc
c0011982:	c1 eb 0a             	shr    ebx,0xa
c0011985:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c001198b:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c001198e:	83 c4 1c             	add    esp,0x1c
c0011991:	5b                   	pop    ebx
c0011992:	5e                   	pop    esi
c0011993:	5f                   	pop    edi
c0011994:	5d                   	pop    ebp
c0011995:	c3                   	ret    
c0011996:	83 ec 0c             	sub    esp,0xc
c0011999:	68 f0 70 02 c0       	push   0xc00270f0
c001199e:	e8 8c 08 00 00       	call   c001222f <Dbg::kprintf(char const*, ...)>
c00119a3:	83 c4 10             	add    esp,0x10
c00119a6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00119aa:	09 d8                	or     eax,ebx
c00119ac:	a9 ff 0f 00 00       	test   eax,0xfff
c00119b1:	74 a9                	je     c001195c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00119b3:	83 ec 0c             	sub    esp,0xc
c00119b6:	68 58 71 02 c0       	push   0xc0027158
c00119bb:	e8 e7 70 00 00       	call   c0018aa7 <Krnl::panic(char const*)>
c00119c0:	83 c4 10             	add    esp,0x10
c00119c3:	eb 97                	jmp    c001195c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00119c5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00119c9:	e8 02 dd ff ff       	call   c000f6d0 <Phys::allocatePage()>
c00119ce:	89 c5                	mov    ebp,eax
c00119d0:	e8 18 fa ff ff       	call   c00113ed <Virt::getAKernelVAS()>
c00119d5:	83 ec 0c             	sub    esp,0xc
c00119d8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00119dc:	6a 01                	push   0x1
c00119de:	e8 7a f8 ff ff       	call   c001125d <Virt::allocateKernelVirtualPages(int)>
c00119e3:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00119ea:	6a 01                	push   0x1
c00119ec:	50                   	push   eax
c00119ed:	55                   	push   ebp
c00119ee:	81 cd 07 04 00 00    	or     ebp,0x407
c00119f4:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00119f8:	51                   	push   ecx
c00119f9:	e8 1e 02 00 00       	call   c0011c1c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00119fe:	83 c4 1c             	add    esp,0x1c
c0011a01:	68 00 10 00 00       	push   0x1000
c0011a06:	6a 00                	push   0x0
c0011a08:	50                   	push   eax
c0011a09:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011a0d:	e8 6b ec fe ff       	call   c000067d <memset>
c0011a12:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011a16:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011a19:	e8 99 fb ff ff       	call   c00115b7 <Virt::freeKernelVirtualPages(unsigned long)>
c0011a1e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011a22:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011a25:	83 c4 10             	add    esp,0x10
c0011a28:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011a2b:	e9 41 ff ff ff       	jmp    c0011971 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c0011a30 <VAS::allocatePages(int, int)>:
c0011a30:	55                   	push   ebp
c0011a31:	57                   	push   edi
c0011a32:	56                   	push   esi
c0011a33:	53                   	push   ebx
c0011a34:	83 ec 1c             	sub    esp,0x1c
c0011a37:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011a3b:	e8 00 38 01 00       	call   c0025240 <CPU::current()>
c0011a40:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011a46:	83 e0 01             	and    eax,0x1
c0011a49:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011a4d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011a51:	0f 85 d7 00 00 00    	jne    c0011b2e <VAS::allocatePages(int, int)+0xfe>
c0011a57:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011a5a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011a5e:	85 c0                	test   eax,eax
c0011a60:	0f 84 ac 00 00 00    	je     c0011b12 <VAS::allocatePages(int, int)+0xe2>
c0011a66:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011a6a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011a6e:	c1 e6 0c             	shl    esi,0xc
c0011a71:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011a75:	85 c0                	test   eax,eax
c0011a77:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011a7a:	7e 33                	jle    c0011aaf <VAS::allocatePages(int, int)+0x7f>
c0011a7c:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011a80:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011a84:	81 cd 00 04 00 00    	or     ebp,0x400
c0011a8a:	e8 41 dc ff ff       	call   c000f6d0 <Phys::allocatePage()>
c0011a8f:	55                   	push   ebp
c0011a90:	53                   	push   ebx
c0011a91:	50                   	push   eax
c0011a92:	57                   	push   edi
c0011a93:	e8 98 fe ff ff       	call   c0011930 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011a98:	83 c4 10             	add    esp,0x10
c0011a9b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011aa0:	74 03                	je     c0011aa5 <VAS::allocatePages(int, int)+0x75>
c0011aa2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011aa5:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011aab:	39 de                	cmp    esi,ebx
c0011aad:	75 db                	jne    c0011a8a <VAS::allocatePages(int, int)+0x5a>
c0011aaf:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ab4:	74 3f                	je     c0011af5 <VAS::allocatePages(int, int)+0xc5>
c0011ab6:	c1 ee 0a             	shr    esi,0xa
c0011ab9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011abd:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011ac3:	c1 eb 0a             	shr    ebx,0xa
c0011ac6:	81 ee 00 00 40 00    	sub    esi,0x400000
c0011acc:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011ad2:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011ad8:	39 f3                	cmp    ebx,esi
c0011ada:	77 0d                	ja     c0011ae9 <VAS::allocatePages(int, int)+0xb9>
c0011adc:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011adf:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011ae5:	39 de                	cmp    esi,ebx
c0011ae7:	73 f3                	jae    c0011adc <VAS::allocatePages(int, int)+0xac>
c0011ae9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011aed:	83 c4 1c             	add    esp,0x1c
c0011af0:	5b                   	pop    ebx
c0011af1:	5e                   	pop    esi
c0011af2:	5f                   	pop    edi
c0011af3:	5d                   	pop    ebp
c0011af4:	c3                   	ret    
c0011af5:	e8 67 37 01 00       	call   c0025261 <CPU::readCR3()>
c0011afa:	83 ec 0c             	sub    esp,0xc
c0011afd:	50                   	push   eax
c0011afe:	e8 70 37 01 00       	call   c0025273 <CPU::writeCR3(unsigned long)>
c0011b03:	83 c4 10             	add    esp,0x10
c0011b06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b0a:	83 c4 1c             	add    esp,0x1c
c0011b0d:	5b                   	pop    ebx
c0011b0e:	5e                   	pop    esi
c0011b0f:	5f                   	pop    edi
c0011b10:	5d                   	pop    ebp
c0011b11:	c3                   	ret    
c0011b12:	83 ec 0c             	sub    esp,0xc
c0011b15:	68 7c 71 02 c0       	push   0xc002717c
c0011b1a:	e8 88 6f 00 00       	call   c0018aa7 <Krnl::panic(char const*)>
c0011b1f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011b22:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011b26:	83 c4 10             	add    esp,0x10
c0011b29:	e9 38 ff ff ff       	jmp    c0011a66 <VAS::allocatePages(int, int)+0x36>
c0011b2e:	83 ec 0c             	sub    esp,0xc
c0011b31:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011b35:	e8 23 f7 ff ff       	call   c001125d <Virt::allocateKernelVirtualPages(int)>
c0011b3a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011b3e:	83 c4 10             	add    esp,0x10
c0011b41:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011b46:	0f 87 94 00 00 00    	ja     c0011be0 <VAS::allocatePages(int, int)+0x1b0>
c0011b4c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011b50:	85 d2                	test   edx,edx
c0011b52:	7e 3c                	jle    c0011b90 <VAS::allocatePages(int, int)+0x160>
c0011b54:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011b58:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011b5c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b60:	c1 e5 0c             	shl    ebp,0xc
c0011b63:	81 ce 00 04 00 00    	or     esi,0x400
c0011b69:	01 dd                	add    ebp,ebx
c0011b6b:	e8 60 db ff ff       	call   c000f6d0 <Phys::allocatePage()>
c0011b70:	56                   	push   esi
c0011b71:	53                   	push   ebx
c0011b72:	50                   	push   eax
c0011b73:	57                   	push   edi
c0011b74:	e8 b7 fd ff ff       	call   c0011930 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011b79:	83 c4 10             	add    esp,0x10
c0011b7c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011b81:	74 03                	je     c0011b86 <VAS::allocatePages(int, int)+0x156>
c0011b83:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011b86:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011b8c:	39 dd                	cmp    ebp,ebx
c0011b8e:	75 db                	jne    c0011b6b <VAS::allocatePages(int, int)+0x13b>
c0011b90:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011b95:	0f 84 5a ff ff ff    	je     c0011af5 <VAS::allocatePages(int, int)+0xc5>
c0011b9b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011b9f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011ba3:	89 d3                	mov    ebx,edx
c0011ba5:	c1 e0 0c             	shl    eax,0xc
c0011ba8:	c1 eb 0a             	shr    ebx,0xa
c0011bab:	01 d0                	add    eax,edx
c0011bad:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011bb3:	c1 e8 0a             	shr    eax,0xa
c0011bb6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011bbc:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011bc1:	2d 00 00 40 00       	sub    eax,0x400000
c0011bc6:	39 c3                	cmp    ebx,eax
c0011bc8:	0f 87 1b ff ff ff    	ja     c0011ae9 <VAS::allocatePages(int, int)+0xb9>
c0011bce:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011bd1:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011bd7:	39 d8                	cmp    eax,ebx
c0011bd9:	73 f3                	jae    c0011bce <VAS::allocatePages(int, int)+0x19e>
c0011bdb:	e9 09 ff ff ff       	jmp    c0011ae9 <VAS::allocatePages(int, int)+0xb9>
c0011be0:	e8 5b 36 01 00       	call   c0025240 <CPU::current()>
c0011be5:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0011bec:	0f 84 5a ff ff ff    	je     c0011b4c <VAS::allocatePages(int, int)+0x11c>
c0011bf2:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0011bfa:	e9 4d ff ff ff       	jmp    c0011b4c <VAS::allocatePages(int, int)+0x11c>
c0011bff:	90                   	nop

c0011c00 <VAS::setCPUSpecific(unsigned long)>:
c0011c00:	83 ec 0c             	sub    esp,0xc
c0011c03:	6a 05                	push   0x5
c0011c05:	68 00 00 40 c2       	push   0xc2400000
c0011c0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c12:	e8 19 fd ff ff       	call   c0011930 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011c17:	83 c4 1c             	add    esp,0x1c
c0011c1a:	c3                   	ret    
c0011c1b:	90                   	nop

c0011c1c <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0011c1c:	55                   	push   ebp
c0011c1d:	57                   	push   edi
c0011c1e:	56                   	push   esi
c0011c1f:	53                   	push   ebx
c0011c20:	83 ec 1c             	sub    esp,0x1c
c0011c23:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011c27:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011c2b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0011c2f:	e8 0c 36 01 00       	call   c0025240 <CPU::current()>
c0011c34:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011c3a:	83 e0 01             	and    eax,0x1
c0011c3d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011c41:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c45:	85 c0                	test   eax,eax
c0011c47:	7e 39                	jle    c0011c82 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x66>
c0011c49:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c4d:	89 f3                	mov    ebx,esi
c0011c4f:	c1 e0 0c             	shl    eax,0xc
c0011c52:	01 f0                	add    eax,esi
c0011c54:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011c58:	55                   	push   ebp
c0011c59:	53                   	push   ebx
c0011c5a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c5e:	29 f0                	sub    eax,esi
c0011c60:	01 d8                	add    eax,ebx
c0011c62:	50                   	push   eax
c0011c63:	57                   	push   edi
c0011c64:	e8 c7 fc ff ff       	call   c0011930 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011c69:	83 c4 10             	add    esp,0x10
c0011c6c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011c71:	74 03                	je     c0011c76 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x5a>
c0011c73:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011c76:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011c7c:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0011c80:	75 d6                	jne    c0011c58 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x3c>
c0011c82:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011c87:	74 42                	je     c0011ccb <VAS::mapRange(unsigned long, unsigned long, int, int)+0xaf>
c0011c89:	89 f3                	mov    ebx,esi
c0011c8b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c8f:	c1 eb 0a             	shr    ebx,0xa
c0011c92:	c1 e0 0c             	shl    eax,0xc
c0011c95:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011c9b:	01 f0                	add    eax,esi
c0011c9d:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011ca3:	c1 e8 0a             	shr    eax,0xa
c0011ca6:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011cab:	2d 00 00 40 00       	sub    eax,0x400000
c0011cb0:	39 c3                	cmp    ebx,eax
c0011cb2:	77 0d                	ja     c0011cc1 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xa5>
c0011cb4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011cb7:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011cbd:	39 d8                	cmp    eax,ebx
c0011cbf:	73 f3                	jae    c0011cb4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x98>
c0011cc1:	83 c4 1c             	add    esp,0x1c
c0011cc4:	89 f0                	mov    eax,esi
c0011cc6:	5b                   	pop    ebx
c0011cc7:	5e                   	pop    esi
c0011cc8:	5f                   	pop    edi
c0011cc9:	5d                   	pop    ebp
c0011cca:	c3                   	ret    
c0011ccb:	e8 91 35 01 00       	call   c0025261 <CPU::readCR3()>
c0011cd0:	83 ec 0c             	sub    esp,0xc
c0011cd3:	50                   	push   eax
c0011cd4:	e8 9a 35 01 00       	call   c0025273 <CPU::writeCR3(unsigned long)>
c0011cd9:	89 f0                	mov    eax,esi
c0011cdb:	83 c4 10             	add    esp,0x10
c0011cde:	83 c4 1c             	add    esp,0x1c
c0011ce1:	5b                   	pop    ebx
c0011ce2:	5e                   	pop    esi
c0011ce3:	5f                   	pop    edi
c0011ce4:	5d                   	pop    ebp
c0011ce5:	c3                   	ret    

c0011ce6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0011ce6:	55                   	push   ebp
c0011ce7:	57                   	push   edi
c0011ce8:	56                   	push   esi
c0011ce9:	53                   	push   ebx
c0011cea:	83 ec 1c             	sub    esp,0x1c
c0011ced:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011cf1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011cf5:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0011cf9:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0011cfd:	a9 ff 0f 00 00       	test   eax,0xfff
c0011d02:	75 4a                	jne    c0011d4e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0011d04:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011d08:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011d0b:	c1 eb 16             	shr    ebx,0x16
c0011d0e:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0011d15:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0011d19:	74 4d                	je     c0011d68 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0011d1b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d1f:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0011d23:	c1 e8 0a             	shr    eax,0xa
c0011d26:	80 fa 01             	cmp    dl,0x1
c0011d29:	19 d2                	sbb    edx,edx
c0011d2b:	c1 e3 0c             	shl    ebx,0xc
c0011d2e:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0011d32:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0011d38:	25 fc 0f 00 00       	and    eax,0xffc
c0011d3d:	01 d8                	add    eax,ebx
c0011d3f:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0011d46:	83 c4 1c             	add    esp,0x1c
c0011d49:	5b                   	pop    ebx
c0011d4a:	5e                   	pop    esi
c0011d4b:	5f                   	pop    edi
c0011d4c:	5d                   	pop    ebp
c0011d4d:	c3                   	ret    
c0011d4e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011d52:	83 ec 0c             	sub    esp,0xc
c0011d55:	68 a8 71 02 c0       	push   0xc00271a8
c0011d5a:	e8 48 6d 00 00       	call   c0018aa7 <Krnl::panic(char const*)>
c0011d5f:	83 c4 10             	add    esp,0x10
c0011d62:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011d66:	eb 9c                	jmp    c0011d04 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0011d68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011d6c:	e8 5f d9 ff ff       	call   c000f6d0 <Phys::allocatePage()>
c0011d71:	89 c5                	mov    ebp,eax
c0011d73:	e8 75 f6 ff ff       	call   c00113ed <Virt::getAKernelVAS()>
c0011d78:	83 ec 0c             	sub    esp,0xc
c0011d7b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011d7f:	6a 01                	push   0x1
c0011d81:	e8 d7 f4 ff ff       	call   c001125d <Virt::allocateKernelVirtualPages(int)>
c0011d86:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011d8d:	6a 01                	push   0x1
c0011d8f:	50                   	push   eax
c0011d90:	55                   	push   ebp
c0011d91:	81 cd 07 04 00 00    	or     ebp,0x407
c0011d97:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011d9b:	51                   	push   ecx
c0011d9c:	e8 7b fe ff ff       	call   c0011c1c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011da1:	83 c4 1c             	add    esp,0x1c
c0011da4:	68 00 10 00 00       	push   0x1000
c0011da9:	6a 00                	push   0x0
c0011dab:	50                   	push   eax
c0011dac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011db0:	e8 c8 e8 fe ff       	call   c000067d <memset>
c0011db5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011db9:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011dbc:	e8 f6 f7 ff ff       	call   c00115b7 <Virt::freeKernelVirtualPages(unsigned long)>
c0011dc1:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011dc4:	83 c4 10             	add    esp,0x10
c0011dc7:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0011dca:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011dce:	e9 48 ff ff ff       	jmp    c0011d1b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c0011dd3:	90                   	nop

c0011dd4 <VAS::VAS(bool)>:
c0011dd4:	53                   	push   ebx
c0011dd5:	83 ec 28             	sub    esp,0x28
c0011dd8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011ddc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011de0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011de4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011deb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011def:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0011df3:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0011df6:	e8 d5 d8 ff ff       	call   c000f6d0 <Phys::allocatePage()>
c0011dfb:	89 c2                	mov    edx,eax
c0011dfd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e01:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011e04:	e8 e4 f5 ff ff       	call   c00113ed <Virt::getAKernelVAS()>
c0011e09:	89 c3                	mov    ebx,eax
c0011e0b:	83 ec 0c             	sub    esp,0xc
c0011e0e:	6a 01                	push   0x1
c0011e10:	e8 48 f4 ff ff       	call   c001125d <Virt::allocateKernelVirtualPages(int)>
c0011e15:	83 c4 10             	add    esp,0x10
c0011e18:	89 c2                	mov    edx,eax
c0011e1a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e1e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011e21:	83 ec 0c             	sub    esp,0xc
c0011e24:	6a 03                	push   0x3
c0011e26:	6a 01                	push   0x1
c0011e28:	52                   	push   edx
c0011e29:	50                   	push   eax
c0011e2a:	53                   	push   ebx
c0011e2b:	e8 ec fd ff ff       	call   c0011c1c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011e30:	83 c4 20             	add    esp,0x20
c0011e33:	89 c2                	mov    edx,eax
c0011e35:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e39:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0011e3c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011e44:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0011e4c:	7f 1c                	jg     c0011e6a <VAS::VAS(bool)+0x96>
c0011e4e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e52:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011e55:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011e59:	c1 e2 02             	shl    edx,0x2
c0011e5c:	01 d0                	add    eax,edx
c0011e5e:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011e64:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011e68:	eb da                	jmp    c0011e44 <VAS::VAS(bool)+0x70>
c0011e6a:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0011e72:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0011e7a:	7f 71                	jg     c0011eed <VAS::VAS(bool)+0x119>
c0011e7c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011e80:	2d 00 02 00 00       	sub    eax,0x200
c0011e85:	c1 e0 0c             	shl    eax,0xc
c0011e88:	83 c8 03             	or     eax,0x3
c0011e8b:	89 c3                	mov    ebx,eax
c0011e8d:	e8 ae 33 01 00       	call   c0025240 <CPU::current()>
c0011e92:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011e98:	83 e0 10             	and    eax,0x10
c0011e9b:	84 c0                	test   al,al
c0011e9d:	74 07                	je     c0011ea6 <VAS::VAS(bool)+0xd2>
c0011e9f:	b8 00 01 00 00       	mov    eax,0x100
c0011ea4:	eb 05                	jmp    c0011eab <VAS::VAS(bool)+0xd7>
c0011ea6:	b8 00 00 00 00       	mov    eax,0x0
c0011eab:	09 d8                	or     eax,ebx
c0011ead:	89 c1                	mov    ecx,eax
c0011eaf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011eb3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011eb6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011eba:	c1 e2 02             	shl    edx,0x2
c0011ebd:	01 d0                	add    eax,edx
c0011ebf:	89 ca                	mov    edx,ecx
c0011ec1:	89 10                	mov    DWORD PTR [eax],edx
c0011ec3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011ec7:	2d 40 03 00 00       	sub    eax,0x340
c0011ecc:	83 f8 7f             	cmp    eax,0x7f
c0011ecf:	77 16                	ja     c0011ee7 <VAS::VAS(bool)+0x113>
c0011ed1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ed5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011ed8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011edc:	c1 e2 02             	shl    edx,0x2
c0011edf:	01 d0                	add    eax,edx
c0011ee1:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011ee7:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011eeb:	eb 85                	jmp    c0011e72 <VAS::VAS(bool)+0x9e>
c0011eed:	e8 4e 33 01 00       	call   c0025240 <CPU::current()>
c0011ef2:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011ef8:	83 e0 10             	and    eax,0x10
c0011efb:	84 c0                	test   al,al
c0011efd:	74 07                	je     c0011f06 <VAS::VAS(bool)+0x132>
c0011eff:	b8 03 41 00 00       	mov    eax,0x4103
c0011f04:	eb 05                	jmp    c0011f0b <VAS::VAS(bool)+0x137>
c0011f06:	b8 03 40 00 00       	mov    eax,0x4003
c0011f0b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011f0f:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011f12:	81 c2 20 0c 00 00    	add    edx,0xc20
c0011f18:	89 02                	mov    DWORD PTR [edx],eax
c0011f1a:	e8 21 33 01 00       	call   c0025240 <CPU::current()>
c0011f1f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0011f25:	83 ec 08             	sub    esp,0x8
c0011f28:	50                   	push   eax
c0011f29:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011f2d:	e8 ce fc ff ff       	call   c0011c00 <VAS::setCPUSpecific(unsigned long)>
c0011f32:	83 c4 10             	add    esp,0x10
c0011f35:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f39:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c0011f3c:	e8 ff 32 01 00       	call   c0025240 <CPU::current()>
c0011f41:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011f47:	83 e0 10             	and    eax,0x10
c0011f4a:	84 c0                	test   al,al
c0011f4c:	74 07                	je     c0011f55 <VAS::VAS(bool)+0x181>
c0011f4e:	b8 00 01 00 00       	mov    eax,0x100
c0011f53:	eb 05                	jmp    c0011f5a <VAS::VAS(bool)+0x186>
c0011f55:	b8 00 00 00 00       	mov    eax,0x0
c0011f5a:	09 d8                	or     eax,ebx
c0011f5c:	89 c2                	mov    edx,eax
c0011f5e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f62:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011f65:	05 fc 0f 00 00       	add    eax,0xffc
c0011f6a:	83 ca 03             	or     edx,0x3
c0011f6d:	89 10                	mov    DWORD PTR [eax],edx
c0011f6f:	e8 cc 32 01 00       	call   c0025240 <CPU::current()>
c0011f74:	83 ec 0c             	sub    esp,0xc
c0011f77:	50                   	push   eax
c0011f78:	e8 9f 19 00 00       	call   c001391c <Device::getName()>
c0011f7d:	83 c4 10             	add    esp,0x10
c0011f80:	83 ec 08             	sub    esp,0x8
c0011f83:	68 a7 72 02 c0       	push   0xc00272a7
c0011f88:	50                   	push   eax
c0011f89:	e8 df e7 fe ff       	call   c000076d <strcmp>
c0011f8e:	83 c4 10             	add    esp,0x10
c0011f91:	85 c0                	test   eax,eax
c0011f93:	0f 94 c0             	sete   al
c0011f96:	84 c0                	test   al,al
c0011f98:	74 64                	je     c0011ffe <VAS::VAS(bool)+0x22a>
c0011f9a:	e8 3e 9a 00 00       	call   c001b9dd <disableIRQs()>
c0011f9f:	e8 9c 32 01 00       	call   c0025240 <CPU::current()>
c0011fa4:	05 7c 09 00 00       	add    eax,0x97c
c0011fa9:	83 ec 0c             	sub    esp,0xc
c0011fac:	50                   	push   eax
c0011fad:	e8 e6 cb ff ff       	call   c000eb98 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0011fb2:	83 c4 10             	add    esp,0x10
c0011fb5:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011fba:	89 c3                	mov    ebx,eax
c0011fbc:	e8 7f 32 01 00       	call   c0025240 <CPU::current()>
c0011fc1:	05 7c 09 00 00       	add    eax,0x97c
c0011fc6:	83 ec 0c             	sub    esp,0xc
c0011fc9:	50                   	push   eax
c0011fca:	e8 c9 cb ff ff       	call   c000eb98 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0011fcf:	83 c4 10             	add    esp,0x10
c0011fd2:	83 ec 08             	sub    esp,0x8
c0011fd5:	50                   	push   eax
c0011fd6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011fda:	e8 b9 f5 ff ff       	call   c0011598 <VAS::getPageTableEntry(unsigned long)>
c0011fdf:	83 c4 10             	add    esp,0x10
c0011fe2:	8b 00                	mov    eax,DWORD PTR [eax]
c0011fe4:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011fe9:	6a 11                	push   0x11
c0011feb:	53                   	push   ebx
c0011fec:	50                   	push   eax
c0011fed:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011ff1:	e8 3a f9 ff ff       	call   c0011930 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011ff6:	83 c4 10             	add    esp,0x10
c0011ff9:	e8 ed 99 00 00       	call   c001b9eb <enableIRQs()>
c0011ffe:	90                   	nop
c0011fff:	83 c4 28             	add    esp,0x28
c0012002:	5b                   	pop    ebx
c0012003:	c3                   	ret    

c0012004 <mapVASFirstTime>:
c0012004:	55                   	push   ebp
c0012005:	57                   	push   edi
c0012006:	56                   	push   esi
c0012007:	53                   	push   ebx
c0012008:	83 ec 0c             	sub    esp,0xc
c001200b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012010:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012013:	4a                   	dec    edx
c0012014:	0f 84 99 00 00 00    	je     c00120b3 <mapVASFirstTime+0xaf>
c001201a:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c001201d:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012020:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012025:	c1 e5 15             	shl    ebp,0x15
c0012028:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c001202d:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012033:	29 eb                	sub    ebx,ebp
c0012035:	29 ee                	sub    esi,ebp
c0012037:	e8 94 d6 ff ff       	call   c000f6d0 <Phys::allocatePage()>
c001203c:	83 ec 0c             	sub    esp,0xc
c001203f:	68 03 04 00 00       	push   0x403
c0012044:	6a 01                	push   0x1
c0012046:	53                   	push   ebx
c0012047:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001204d:	50                   	push   eax
c001204e:	57                   	push   edi
c001204f:	e8 c8 fb ff ff       	call   c0011c1c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012054:	83 c4 20             	add    esp,0x20
c0012057:	39 f3                	cmp    ebx,esi
c0012059:	75 dc                	jne    c0012037 <mapVASFirstTime+0x33>
c001205b:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012060:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012065:	29 ee                	sub    esi,ebp
c0012067:	29 e8                	sub    eax,ebp
c0012069:	89 c5                	mov    ebp,eax
c001206b:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c001206f:	19 db                	sbb    ebx,ebx
c0012071:	e8 5a d6 ff ff       	call   c000f6d0 <Phys::allocatePage()>
c0012076:	83 e3 04             	and    ebx,0x4
c0012079:	83 ec 0c             	sub    esp,0xc
c001207c:	81 c3 03 04 00 00    	add    ebx,0x403
c0012082:	53                   	push   ebx
c0012083:	6a 01                	push   0x1
c0012085:	56                   	push   esi
c0012086:	81 ee 00 10 00 00    	sub    esi,0x1000
c001208c:	50                   	push   eax
c001208d:	57                   	push   edi
c001208e:	e8 89 fb ff ff       	call   c0011c1c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012093:	83 c4 20             	add    esp,0x20
c0012096:	39 f5                	cmp    ebp,esi
c0012098:	75 d1                	jne    c001206b <mapVASFirstTime+0x67>
c001209a:	e8 c2 31 01 00       	call   c0025261 <CPU::readCR3()>
c001209f:	83 ec 0c             	sub    esp,0xc
c00120a2:	50                   	push   eax
c00120a3:	e8 cb 31 01 00       	call   c0025273 <CPU::writeCR3(unsigned long)>
c00120a8:	83 c4 10             	add    esp,0x10
c00120ab:	83 c4 0c             	add    esp,0xc
c00120ae:	5b                   	pop    ebx
c00120af:	5e                   	pop    esi
c00120b0:	5f                   	pop    edi
c00120b1:	5d                   	pop    ebp
c00120b2:	c3                   	ret    
c00120b3:	83 ec 0c             	sub    esp,0xc
c00120b6:	68 b5 72 02 c0       	push   0xc00272b5
c00120bb:	e8 6f 01 00 00       	call   c001222f <Dbg::kprintf(char const*, ...)>
c00120c0:	83 c4 10             	add    esp,0x10
c00120c3:	83 c4 0c             	add    esp,0xc
c00120c6:	5b                   	pop    ebx
c00120c7:	5e                   	pop    esi
c00120c8:	5f                   	pop    edi
c00120c9:	5d                   	pop    ebp
c00120ca:	c3                   	ret    

c00120cb <__cxa_atexit>:
c00120cb:	31 c0                	xor    eax,eax
c00120cd:	c3                   	ret    

c00120ce <__cxa_finalize>:
c00120ce:	c3                   	ret    

c00120cf <__stack_chk_fail>:
c00120cf:	55                   	push   ebp
c00120d0:	89 e5                	mov    ebp,esp
c00120d2:	83 ec 10             	sub    esp,0x10
c00120d5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00120d8:	68 ce 72 02 c0       	push   0xc00272ce
c00120dd:	e8 4d 01 00 00       	call   c001222f <Dbg::kprintf(char const*, ...)>
c00120e2:	58                   	pop    eax
c00120e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00120e6:	5a                   	pop    edx
c00120e7:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00120ea:	68 ce 72 02 c0       	push   0xc00272ce
c00120ef:	e8 3b 01 00 00       	call   c001222f <Dbg::kprintf(char const*, ...)>
c00120f4:	59                   	pop    ecx
c00120f5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00120f8:	5a                   	pop    edx
c00120f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00120fb:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00120fe:	68 ce 72 02 c0       	push   0xc00272ce
c0012103:	e8 27 01 00 00       	call   c001222f <Dbg::kprintf(char const*, ...)>
c0012108:	59                   	pop    ecx
c0012109:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001210c:	5a                   	pop    edx
c001210d:	8b 00                	mov    eax,DWORD PTR [eax]
c001210f:	8b 00                	mov    eax,DWORD PTR [eax]
c0012111:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012114:	68 ce 72 02 c0       	push   0xc00272ce
c0012119:	e8 11 01 00 00       	call   c001222f <Dbg::kprintf(char const*, ...)>
c001211e:	c7 04 24 d6 72 02 c0 	mov    DWORD PTR [esp],0xc00272d6
c0012125:	e8 7d 69 00 00       	call   c0018aa7 <Krnl::panic(char const*)>
c001212a:	83 c4 10             	add    esp,0x10
c001212d:	c9                   	leave  
c001212e:	c3                   	ret    

c001212f <__cxa_pure_virtual>:
c001212f:	83 ec 18             	sub    esp,0x18
c0012132:	68 ee 72 02 c0       	push   0xc00272ee
c0012137:	e8 6b 69 00 00       	call   c0018aa7 <Krnl::panic(char const*)>
c001213c:	83 c4 1c             	add    esp,0x1c
c001213f:	c3                   	ret    

c0012140 <operator new(unsigned long)>:
c0012140:	e9 e1 cf ff ff       	jmp    c000f126 <malloc>

c0012145 <operator new[](unsigned long)>:
c0012145:	e9 dc cf ff ff       	jmp    c000f126 <malloc>

c001214a <operator delete(void*)>:
c001214a:	e9 f7 cf ff ff       	jmp    c000f146 <rfree>

c001214f <operator delete(void*, unsigned long)>:
c001214f:	e9 f2 cf ff ff       	jmp    c000f146 <rfree>

c0012154 <operator delete[](void*)>:
c0012154:	e9 ed cf ff ff       	jmp    c000f146 <rfree>

c0012159 <operator delete[](void*, unsigned long)>:
c0012159:	e9 e8 cf ff ff       	jmp    c000f146 <rfree>

c001215e <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c001215e:	57                   	push   edi
c001215f:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012164:	56                   	push   esi
c0012165:	be 04 73 02 c0       	mov    esi,0xc0027304
c001216a:	53                   	push   ebx
c001216b:	83 ec 40             	sub    esp,0x40
c001216e:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012172:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012176:	fc                   	cld    
c0012177:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012179:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c001217d:	83 f9 3e             	cmp    ecx,0x3e
c0012180:	7e 05                	jle    c0012187 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012182:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012187:	89 df                	mov    edi,ebx
c0012189:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001218d:	eb 02                	jmp    c0012191 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c001218f:	89 c7                	mov    edi,eax
c0012191:	31 d2                	xor    edx,edx
c0012193:	46                   	inc    esi
c0012194:	89 f8                	mov    eax,edi
c0012196:	f7 f1                	div    ecx
c0012198:	39 cf                	cmp    edi,ecx
c001219a:	73 f3                	jae    c001218f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c001219c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001219f:	eb 02                	jmp    c00121a3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c00121a1:	89 c3                	mov    ebx,eax
c00121a3:	31 d2                	xor    edx,edx
c00121a5:	4e                   	dec    esi
c00121a6:	89 d8                	mov    eax,ebx
c00121a8:	f7 f1                	div    ecx
c00121aa:	39 cb                	cmp    ebx,ecx
c00121ac:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c00121b0:	88 16                	mov    BYTE PTR [esi],dl
c00121b2:	73 ed                	jae    c00121a1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c00121b4:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00121b8:	83 c4 40             	add    esp,0x40
c00121bb:	5b                   	pop    ebx
c00121bc:	5e                   	pop    esi
c00121bd:	5f                   	pop    edi
c00121be:	c3                   	ret    

c00121bf <Dbg::logc(char)>:
c00121bf:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00121c3:	ba fd 03 00 00       	mov    edx,0x3fd
c00121c8:	ec                   	in     al,dx
c00121c9:	a8 20                	test   al,0x20
c00121cb:	74 fb                	je     c00121c8 <Dbg::logc(char)+0x9>
c00121cd:	ba f8 03 00 00       	mov    edx,0x3f8
c00121d2:	88 c8                	mov    al,cl
c00121d4:	ee                   	out    dx,al
c00121d5:	c3                   	ret    

c00121d6 <Dbg::logs(char*)>:
c00121d6:	53                   	push   ebx
c00121d7:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00121db:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00121de:	84 c0                	test   al,al
c00121e0:	74 0f                	je     c00121f1 <Dbg::logs(char*)+0x1b>
c00121e2:	50                   	push   eax
c00121e3:	43                   	inc    ebx
c00121e4:	e8 d6 ff ff ff       	call   c00121bf <Dbg::logc(char)>
c00121e9:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00121ec:	5a                   	pop    edx
c00121ed:	84 c0                	test   al,al
c00121ef:	75 f1                	jne    c00121e2 <Dbg::logs(char*)+0xc>
c00121f1:	5b                   	pop    ebx
c00121f2:	c3                   	ret    

c00121f3 <Dbg::logWriteInt(unsigned int)>:
c00121f3:	83 ec 10             	sub    esp,0x10
c00121f6:	6a 0a                	push   0xa
c00121f8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00121fc:	50                   	push   eax
c00121fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012201:	e8 58 ff ff ff       	call   c001215e <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012206:	50                   	push   eax
c0012207:	e8 ca ff ff ff       	call   c00121d6 <Dbg::logs(char*)>
c001220c:	83 c4 20             	add    esp,0x20
c001220f:	c3                   	ret    

c0012210 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012210:	83 ec 10             	sub    esp,0x10
c0012213:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012217:	8d 44 24 08          	lea    eax,[esp+0x8]
c001221b:	50                   	push   eax
c001221c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012220:	e8 39 ff ff ff       	call   c001215e <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012225:	50                   	push   eax
c0012226:	e8 ab ff ff ff       	call   c00121d6 <Dbg::logs(char*)>
c001222b:	83 c4 20             	add    esp,0x20
c001222e:	c3                   	ret    

c001222f <Dbg::kprintf(char const*, ...)>:
c001222f:	55                   	push   ebp
c0012230:	57                   	push   edi
c0012231:	56                   	push   esi
c0012232:	53                   	push   ebx
c0012233:	83 ec 0c             	sub    esp,0xc
c0012236:	8d 44 24 24          	lea    eax,[esp+0x24]
c001223a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001223e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012242:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012245:	84 c0                	test   al,al
c0012247:	74 4a                	je     c0012293 <Dbg::kprintf(char const*, ...)+0x64>
c0012249:	31 db                	xor    ebx,ebx
c001224b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001224e:	3c 25                	cmp    al,0x25
c0012250:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012253:	0f 85 e4 00 00 00    	jne    c001233d <Dbg::kprintf(char const*, ...)+0x10e>
c0012259:	83 c3 02             	add    ebx,0x2
c001225c:	8a 07                	mov    al,BYTE PTR [edi]
c001225e:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012261:	83 e8 25             	sub    eax,0x25
c0012264:	3c 53                	cmp    al,0x53
c0012266:	0f 87 ba 00 00 00    	ja     c0012326 <Dbg::kprintf(char const*, ...)+0xf7>
c001226c:	0f b6 c0             	movzx  eax,al
c001226f:	ff 24 85 44 73 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd8cbc]
c0012276:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001227a:	89 c8                	mov    eax,ecx
c001227c:	83 c1 04             	add    ecx,0x4
c001227f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012283:	ff 30                	push   DWORD PTR [eax]
c0012285:	e8 4c ff ff ff       	call   c00121d6 <Dbg::logs(char*)>
c001228a:	58                   	pop    eax
c001228b:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c001228f:	84 c0                	test   al,al
c0012291:	75 b8                	jne    c001224b <Dbg::kprintf(char const*, ...)+0x1c>
c0012293:	83 c4 0c             	add    esp,0xc
c0012296:	5b                   	pop    ebx
c0012297:	5e                   	pop    esi
c0012298:	5f                   	pop    edi
c0012299:	5d                   	pop    ebp
c001229a:	c3                   	ret    
c001229b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001229f:	89 d0                	mov    eax,edx
c00122a1:	83 c2 04             	add    edx,0x4
c00122a4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00122a8:	ff 30                	push   DWORD PTR [eax]
c00122aa:	e8 44 ff ff ff       	call   c00121f3 <Dbg::logWriteInt(unsigned int)>
c00122af:	58                   	pop    eax
c00122b0:	eb d9                	jmp    c001228b <Dbg::kprintf(char const*, ...)+0x5c>
c00122b2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00122b6:	89 d0                	mov    eax,edx
c00122b8:	83 c2 04             	add    edx,0x4
c00122bb:	0f be 00             	movsx  eax,BYTE PTR [eax]
c00122be:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00122c2:	50                   	push   eax
c00122c3:	e8 f7 fe ff ff       	call   c00121bf <Dbg::logc(char)>
c00122c8:	58                   	pop    eax
c00122c9:	eb c0                	jmp    c001228b <Dbg::kprintf(char const*, ...)+0x5c>
c00122cb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00122cf:	89 c8                	mov    eax,ecx
c00122d1:	83 c1 04             	add    ecx,0x4
c00122d4:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00122d8:	ff 30                	push   DWORD PTR [eax]
c00122da:	e8 14 ff ff ff       	call   c00121f3 <Dbg::logWriteInt(unsigned int)>
c00122df:	5f                   	pop    edi
c00122e0:	eb a9                	jmp    c001228b <Dbg::kprintf(char const*, ...)+0x5c>
c00122e2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00122e6:	89 c8                	mov    eax,ecx
c00122e8:	83 c1 04             	add    ecx,0x4
c00122eb:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00122ef:	6a 10                	push   0x10
c00122f1:	ff 30                	push   DWORD PTR [eax]
c00122f3:	e8 18 ff ff ff       	call   c0012210 <Dbg::logWriteIntBase(unsigned int, int)>
c00122f8:	59                   	pop    ecx
c00122f9:	5f                   	pop    edi
c00122fa:	eb 8f                	jmp    c001228b <Dbg::kprintf(char const*, ...)+0x5c>
c00122fc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012300:	89 d0                	mov    eax,edx
c0012302:	83 c2 08             	add    edx,0x8
c0012305:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012309:	6a 10                	push   0x10
c001230b:	ff 30                	push   DWORD PTR [eax]
c001230d:	e8 fe fe ff ff       	call   c0012210 <Dbg::logWriteIntBase(unsigned int, int)>
c0012312:	58                   	pop    eax
c0012313:	5a                   	pop    edx
c0012314:	e9 72 ff ff ff       	jmp    c001228b <Dbg::kprintf(char const*, ...)+0x5c>
c0012319:	6a 25                	push   0x25
c001231b:	e8 9f fe ff ff       	call   c00121bf <Dbg::logc(char)>
c0012320:	58                   	pop    eax
c0012321:	e9 65 ff ff ff       	jmp    c001228b <Dbg::kprintf(char const*, ...)+0x5c>
c0012326:	6a 25                	push   0x25
c0012328:	e8 92 fe ff ff       	call   c00121bf <Dbg::logc(char)>
c001232d:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012330:	50                   	push   eax
c0012331:	e8 89 fe ff ff       	call   c00121bf <Dbg::logc(char)>
c0012336:	5a                   	pop    edx
c0012337:	59                   	pop    ecx
c0012338:	e9 4e ff ff ff       	jmp    c001228b <Dbg::kprintf(char const*, ...)+0x5c>
c001233d:	50                   	push   eax
c001233e:	89 eb                	mov    ebx,ebp
c0012340:	e8 7a fe ff ff       	call   c00121bf <Dbg::logc(char)>
c0012345:	89 fd                	mov    ebp,edi
c0012347:	58                   	pop    eax
c0012348:	e9 3e ff ff ff       	jmp    c001228b <Dbg::kprintf(char const*, ...)+0x5c>
c001234d:	90                   	nop

c001234e <File::read(unsigned long long, void*, int*)>:
c001234e:	53                   	push   ebx
c001234f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012353:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012357:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001235e:	3c 19                	cmp    al,0x19
c0012360:	77 35                	ja     c0012397 <File::read(unsigned long long, void*, int*)+0x49>
c0012362:	8b 04 85 20 ac 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd53e0]
c0012369:	85 c0                	test   eax,eax
c001236b:	74 2a                	je     c0012397 <File::read(unsigned long long, void*, int*)+0x49>
c001236d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012373:	85 c0                	test   eax,eax
c0012375:	74 20                	je     c0012397 <File::read(unsigned long long, void*, int*)+0x49>
c0012377:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001237b:	74 21                	je     c001239e <File::read(unsigned long long, void*, int*)+0x50>
c001237d:	8b 08                	mov    ecx,DWORD PTR [eax]
c001237f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012383:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012389:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001238d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012391:	5b                   	pop    ebx
c0012392:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012395:	ff e0                	jmp    eax
c0012397:	b8 0b 00 00 00       	mov    eax,0xb
c001239c:	eb 05                	jmp    c00123a3 <File::read(unsigned long long, void*, int*)+0x55>
c001239e:	b8 05 00 00 00       	mov    eax,0x5
c00123a3:	5b                   	pop    ebx
c00123a4:	c3                   	ret    
c00123a5:	90                   	nop

c00123a6 <File::write(unsigned long long, void*, int*)>:
c00123a6:	53                   	push   ebx
c00123a7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00123ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00123af:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00123b6:	3c 19                	cmp    al,0x19
c00123b8:	77 35                	ja     c00123ef <File::write(unsigned long long, void*, int*)+0x49>
c00123ba:	8b 04 85 20 ac 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd53e0]
c00123c1:	85 c0                	test   eax,eax
c00123c3:	74 2a                	je     c00123ef <File::write(unsigned long long, void*, int*)+0x49>
c00123c5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00123cb:	85 c0                	test   eax,eax
c00123cd:	74 20                	je     c00123ef <File::write(unsigned long long, void*, int*)+0x49>
c00123cf:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00123d3:	74 21                	je     c00123f6 <File::write(unsigned long long, void*, int*)+0x50>
c00123d5:	8b 08                	mov    ecx,DWORD PTR [eax]
c00123d7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00123db:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00123e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00123e5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00123e9:	5b                   	pop    ebx
c00123ea:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c00123ed:	ff e0                	jmp    eax
c00123ef:	b8 0b 00 00 00       	mov    eax,0xb
c00123f4:	eb 05                	jmp    c00123fb <File::write(unsigned long long, void*, int*)+0x55>
c00123f6:	b8 05 00 00 00       	mov    eax,0x5
c00123fb:	5b                   	pop    ebx
c00123fc:	c3                   	ret    
c00123fd:	90                   	nop

c00123fe <Directory::read(unsigned long long, void*, int*)>:
c00123fe:	53                   	push   ebx
c00123ff:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012403:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012407:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001240e:	3c 19                	cmp    al,0x19
c0012410:	77 35                	ja     c0012447 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012412:	8b 04 85 20 ac 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd53e0]
c0012419:	85 c0                	test   eax,eax
c001241b:	74 2a                	je     c0012447 <Directory::read(unsigned long long, void*, int*)+0x49>
c001241d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012423:	85 c0                	test   eax,eax
c0012425:	74 20                	je     c0012447 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012427:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001242b:	74 21                	je     c001244e <Directory::read(unsigned long long, void*, int*)+0x50>
c001242d:	8b 08                	mov    ecx,DWORD PTR [eax]
c001242f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012433:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012439:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001243d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012441:	5b                   	pop    ebx
c0012442:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012445:	ff e0                	jmp    eax
c0012447:	b8 0b 00 00 00       	mov    eax,0xb
c001244c:	eb 05                	jmp    c0012453 <Directory::read(unsigned long long, void*, int*)+0x55>
c001244e:	b8 05 00 00 00       	mov    eax,0x5
c0012453:	5b                   	pop    ebx
c0012454:	c3                   	ret    
c0012455:	90                   	nop

c0012456 <Directory::write(unsigned long long, void*, int*)>:
c0012456:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001245a:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012461:	b8 0b 00 00 00       	mov    eax,0xb
c0012466:	80 fa 19             	cmp    dl,0x19
c0012469:	77 18                	ja     c0012483 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001246b:	8b 14 95 20 ac 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd53e0]
c0012472:	85 d2                	test   edx,edx
c0012474:	74 0d                	je     c0012483 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012476:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c001247d:	19 c0                	sbb    eax,eax
c001247f:	83 e0 0a             	and    eax,0xa
c0012482:	40                   	inc    eax
c0012483:	c3                   	ret    

c0012484 <File::isAtty()>:
c0012484:	31 c0                	xor    eax,eax
c0012486:	c3                   	ret    
c0012487:	90                   	nop

c0012488 <Directory::isAtty()>:
c0012488:	31 c0                	xor    eax,eax
c001248a:	c3                   	ret    
c001248b:	90                   	nop

c001248c <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001248c:	b8 0a 00 00 00       	mov    eax,0xa
c0012491:	c3                   	ret    

c0012492 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012492:	b8 0a 00 00 00       	mov    eax,0xa
c0012497:	c3                   	ret    

c0012498 <File::~File()>:
c0012498:	83 ec 0c             	sub    esp,0xc
c001249b:	ba 00 75 02 c0       	mov    edx,0xc0027500
c00124a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124a4:	89 10                	mov    DWORD PTR [eax],edx
c00124a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124aa:	83 ec 0c             	sub    esp,0xc
c00124ad:	50                   	push   eax
c00124ae:	e8 49 eb ff ff       	call   c0010ffc <UnixFile::~UnixFile()>
c00124b3:	83 c4 10             	add    esp,0x10
c00124b6:	90                   	nop
c00124b7:	83 c4 0c             	add    esp,0xc
c00124ba:	c3                   	ret    
c00124bb:	90                   	nop

c00124bc <File::~File()>:
c00124bc:	83 ec 0c             	sub    esp,0xc
c00124bf:	83 ec 0c             	sub    esp,0xc
c00124c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124c6:	e8 cd ff ff ff       	call   c0012498 <File::~File()>
c00124cb:	83 c4 10             	add    esp,0x10
c00124ce:	83 ec 08             	sub    esp,0x8
c00124d1:	68 14 01 00 00       	push   0x114
c00124d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124da:	e8 70 fc ff ff       	call   c001214f <operator delete(void*, unsigned long)>
c00124df:	83 c4 10             	add    esp,0x10
c00124e2:	83 c4 0c             	add    esp,0xc
c00124e5:	c3                   	ret    

c00124e6 <Directory::~Directory()>:
c00124e6:	83 ec 0c             	sub    esp,0xc
c00124e9:	ba 1c 75 02 c0       	mov    edx,0xc002751c
c00124ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124f2:	89 10                	mov    DWORD PTR [eax],edx
c00124f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124f8:	83 ec 0c             	sub    esp,0xc
c00124fb:	50                   	push   eax
c00124fc:	e8 fb ea ff ff       	call   c0010ffc <UnixFile::~UnixFile()>
c0012501:	83 c4 10             	add    esp,0x10
c0012504:	90                   	nop
c0012505:	83 c4 0c             	add    esp,0xc
c0012508:	c3                   	ret    
c0012509:	90                   	nop

c001250a <Directory::~Directory()>:
c001250a:	83 ec 0c             	sub    esp,0xc
c001250d:	83 ec 0c             	sub    esp,0xc
c0012510:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012514:	e8 cd ff ff ff       	call   c00124e6 <Directory::~Directory()>
c0012519:	83 c4 10             	add    esp,0x10
c001251c:	83 ec 08             	sub    esp,0x8
c001251f:	68 14 01 00 00       	push   0x114
c0012524:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012528:	e8 22 fc ff ff       	call   c001214f <operator delete(void*, unsigned long)>
c001252d:	83 c4 10             	add    esp,0x10
c0012530:	83 c4 0c             	add    esp,0xc
c0012533:	c3                   	ret    

c0012534 <Filesystem::Filesystem()>:
c0012534:	ba 9c 74 02 c0       	mov    edx,0xc002749c
c0012539:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001253d:	89 10                	mov    DWORD PTR [eax],edx
c001253f:	8b 15 88 a7 02 c0    	mov    edx,DWORD PTR ds:0xc002a788
c0012545:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012549:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001254c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012550:	a3 88 a7 02 c0       	mov    ds:0xc002a788,eax
c0012555:	90                   	nop
c0012556:	c3                   	ret    
c0012557:	90                   	nop

c0012558 <Filesystem::~Filesystem()>:
c0012558:	ba 9c 74 02 c0       	mov    edx,0xc002749c
c001255d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012561:	89 10                	mov    DWORD PTR [eax],edx
c0012563:	90                   	nop
c0012564:	c3                   	ret    
c0012565:	90                   	nop

c0012566 <Filesystem::~Filesystem()>:
c0012566:	83 ec 0c             	sub    esp,0xc
c0012569:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001256d:	e8 e6 ff ff ff       	call   c0012558 <Filesystem::~Filesystem()>
c0012572:	83 c4 04             	add    esp,0x4
c0012575:	83 ec 08             	sub    esp,0x8
c0012578:	6a 08                	push   0x8
c001257a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001257e:	e8 cc fb ff ff       	call   c001214f <operator delete(void*, unsigned long)>
c0012583:	83 c4 10             	add    esp,0x10
c0012586:	83 c4 0c             	add    esp,0xc
c0012589:	c3                   	ret    

c001258a <initVFS()>:
c001258a:	83 ec 18             	sub    esp,0x18
c001258d:	6a 08                	push   0x8
c001258f:	e8 ac fb ff ff       	call   c0012140 <operator new(unsigned long)>
c0012594:	89 04 24             	mov    DWORD PTR [esp],eax
c0012597:	e8 3c c2 00 00       	call   c001e7d8 <FAT::FAT()>
c001259c:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00125a3:	e8 98 fb ff ff       	call   c0012140 <operator new(unsigned long)>
c00125a8:	89 04 24             	mov    DWORD PTR [esp],eax
c00125ab:	e8 9e d4 00 00       	call   c001fa4e <ISO9660::ISO9660()>
c00125b0:	83 c4 1c             	add    esp,0x1c
c00125b3:	c3                   	ret    

c00125b4 <standardiseFiles(char*, char const*, char const*)>:
c00125b4:	55                   	push   ebp
c00125b5:	57                   	push   edi
c00125b6:	56                   	push   esi
c00125b7:	53                   	push   ebx
c00125b8:	81 ec 10 04 00 00    	sub    esp,0x410
c00125be:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c00125c5:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c00125cc:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c00125d3:	68 00 04 00 00       	push   0x400
c00125d8:	6a 00                	push   0x0
c00125da:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00125de:	56                   	push   esi
c00125df:	e8 99 e0 fe ff       	call   c000067d <memset>
c00125e4:	83 c4 10             	add    esp,0x10
c00125e7:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c00125eb:	75 0b                	jne    c00125f8 <standardiseFiles(char*, char const*, char const*)+0x44>
c00125ed:	50                   	push   eax
c00125ee:	50                   	push   eax
c00125ef:	57                   	push   edi
c00125f0:	56                   	push   esi
c00125f1:	e8 26 e1 fe ff       	call   c000071c <strcpy>
c00125f6:	eb 41                	jmp    c0012639 <standardiseFiles(char*, char const*, char const*)+0x85>
c00125f8:	8a 07                	mov    al,BYTE PTR [edi]
c00125fa:	3c 5c                	cmp    al,0x5c
c00125fc:	74 04                	je     c0012602 <standardiseFiles(char*, char const*, char const*)+0x4e>
c00125fe:	3c 2f                	cmp    al,0x2f
c0012600:	75 18                	jne    c001261a <standardiseFiles(char*, char const*, char const*)+0x66>
c0012602:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012605:	3c 60                	cmp    al,0x60
c0012607:	7e 03                	jle    c001260c <standardiseFiles(char*, char const*, char const*)+0x58>
c0012609:	83 e8 20             	sub    eax,0x20
c001260c:	88 04 24             	mov    BYTE PTR [esp],al
c001260f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012616:	50                   	push   eax
c0012617:	50                   	push   eax
c0012618:	eb 18                	jmp    c0012632 <standardiseFiles(char*, char const*, char const*)+0x7e>
c001261a:	50                   	push   eax
c001261b:	50                   	push   eax
c001261c:	55                   	push   ebp
c001261d:	56                   	push   esi
c001261e:	e8 f9 e0 fe ff       	call   c000071c <strcpy>
c0012623:	5a                   	pop    edx
c0012624:	59                   	pop    ecx
c0012625:	68 e8 87 02 c0       	push   0xc00287e8
c001262a:	56                   	push   esi
c001262b:	e8 a3 e1 fe ff       	call   c00007d3 <strcat>
c0012630:	5d                   	pop    ebp
c0012631:	58                   	pop    eax
c0012632:	57                   	push   edi
c0012633:	56                   	push   esi
c0012634:	e8 9a e1 fe ff       	call   c00007d3 <strcat>
c0012639:	83 c4 10             	add    esp,0x10
c001263c:	8a 04 24             	mov    al,BYTE PTR [esp]
c001263f:	3c 60                	cmp    al,0x60
c0012641:	7e 03                	jle    c0012646 <standardiseFiles(char*, char const*, char const*)+0x92>
c0012643:	83 e8 20             	sub    eax,0x20
c0012646:	88 04 24             	mov    BYTE PTR [esp],al
c0012649:	88 03                	mov    BYTE PTR [ebx],al
c001264b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012652:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012658:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c001265c:	bf 03 00 00 00       	mov    edi,0x3
c0012661:	b8 03 00 00 00       	mov    eax,0x3
c0012666:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012669:	84 d2                	test   dl,dl
c001266b:	0f 84 91 00 00 00    	je     c0012702 <standardiseFiles(char*, char const*, char const*)+0x14e>
c0012671:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012674:	80 fa 5c             	cmp    dl,0x5c
c0012677:	74 05                	je     c001267e <standardiseFiles(char*, char const*, char const*)+0xca>
c0012679:	80 fa 2f             	cmp    dl,0x2f
c001267c:	75 12                	jne    c0012690 <standardiseFiles(char*, char const*, char const*)+0xdc>
c001267e:	89 c5                	mov    ebp,eax
c0012680:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012685:	74 09                	je     c0012690 <standardiseFiles(char*, char const*, char const*)+0xdc>
c0012687:	40                   	inc    eax
c0012688:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c001268c:	89 cf                	mov    edi,ecx
c001268e:	eb d6                	jmp    c0012666 <standardiseFiles(char*, char const*, char const*)+0xb2>
c0012690:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012695:	75 5b                	jne    c00126f2 <standardiseFiles(char*, char const*, char const*)+0x13e>
c0012697:	80 fa 2e             	cmp    dl,0x2e
c001269a:	75 56                	jne    c00126f2 <standardiseFiles(char*, char const*, char const*)+0x13e>
c001269c:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c00126a0:	74 19                	je     c00126bb <standardiseFiles(char*, char const*, char const*)+0x107>
c00126a2:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00126a7:	74 53                	je     c00126fc <standardiseFiles(char*, char const*, char const*)+0x148>
c00126a9:	89 f9                	mov    ecx,edi
c00126ab:	41                   	inc    ecx
c00126ac:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00126af:	80 fa 2f             	cmp    dl,0x2f
c00126b2:	74 f7                	je     c00126ab <standardiseFiles(char*, char const*, char const*)+0xf7>
c00126b4:	80 fa 5c             	cmp    dl,0x5c
c00126b7:	74 f2                	je     c00126ab <standardiseFiles(char*, char const*, char const*)+0xf7>
c00126b9:	eb d1                	jmp    c001268c <standardiseFiles(char*, char const*, char const*)+0xd8>
c00126bb:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00126c0:	74 3a                	je     c00126fc <standardiseFiles(char*, char const*, char const*)+0x148>
c00126c2:	83 f8 03             	cmp    eax,0x3
c00126c5:	74 c5                	je     c001268c <standardiseFiles(char*, char const*, char const*)+0xd8>
c00126c7:	41                   	inc    ecx
c00126c8:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00126cb:	80 fa 2f             	cmp    dl,0x2f
c00126ce:	74 f7                	je     c00126c7 <standardiseFiles(char*, char const*, char const*)+0x113>
c00126d0:	80 fa 5c             	cmp    dl,0x5c
c00126d3:	74 f2                	je     c00126c7 <standardiseFiles(char*, char const*, char const*)+0x113>
c00126d5:	48                   	dec    eax
c00126d6:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00126da:	75 06                	jne    c00126e2 <standardiseFiles(char*, char const*, char const*)+0x12e>
c00126dc:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00126e0:	eb f3                	jmp    c00126d5 <standardiseFiles(char*, char const*, char const*)+0x121>
c00126e2:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00126e6:	74 07                	je     c00126ef <standardiseFiles(char*, char const*, char const*)+0x13b>
c00126e8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00126ec:	48                   	dec    eax
c00126ed:	eb f3                	jmp    c00126e2 <standardiseFiles(char*, char const*, char const*)+0x12e>
c00126ef:	40                   	inc    eax
c00126f0:	eb 9a                	jmp    c001268c <standardiseFiles(char*, char const*, char const*)+0xd8>
c00126f2:	80 fa 2f             	cmp    dl,0x2f
c00126f5:	74 95                	je     c001268c <standardiseFiles(char*, char const*, char const*)+0xd8>
c00126f7:	80 fa 5c             	cmp    dl,0x5c
c00126fa:	74 90                	je     c001268c <standardiseFiles(char*, char const*, char const*)+0xd8>
c00126fc:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c00126ff:	40                   	inc    eax
c0012700:	eb 8a                	jmp    c001268c <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012702:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012706:	83 ec 0c             	sub    esp,0xc
c0012709:	53                   	push   ebx
c001270a:	e8 8b df fe ff       	call   c000069a <strlen>
c001270f:	83 c4 10             	add    esp,0x10
c0012712:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012717:	75 26                	jne    c001273f <standardiseFiles(char*, char const*, char const*)+0x18b>
c0012719:	83 ec 0c             	sub    esp,0xc
c001271c:	53                   	push   ebx
c001271d:	e8 78 df fe ff       	call   c000069a <strlen>
c0012722:	83 c4 10             	add    esp,0x10
c0012725:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c001272a:	74 26                	je     c0012752 <standardiseFiles(char*, char const*, char const*)+0x19e>
c001272c:	83 ec 0c             	sub    esp,0xc
c001272f:	53                   	push   ebx
c0012730:	e8 65 df fe ff       	call   c000069a <strlen>
c0012735:	83 c4 10             	add    esp,0x10
c0012738:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001273d:	eb c7                	jmp    c0012706 <standardiseFiles(char*, char const*, char const*)+0x152>
c001273f:	83 ec 0c             	sub    esp,0xc
c0012742:	53                   	push   ebx
c0012743:	e8 52 df fe ff       	call   c000069a <strlen>
c0012748:	83 c4 10             	add    esp,0x10
c001274b:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012750:	74 c7                	je     c0012719 <standardiseFiles(char*, char const*, char const*)+0x165>
c0012752:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012758:	5b                   	pop    ebx
c0012759:	5e                   	pop    esi
c001275a:	5f                   	pop    edi
c001275b:	5d                   	pop    ebp
c001275c:	c3                   	ret    
c001275d:	90                   	nop

c001275e <File::File(char const*, Process*)>:
c001275e:	83 ec 0c             	sub    esp,0xc
c0012761:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012765:	83 ec 08             	sub    esp,0x8
c0012768:	6a 00                	push   0x0
c001276a:	50                   	push   eax
c001276b:	e8 ea e6 ff ff       	call   c0010e5a <UnixFile::UnixFile(int)>
c0012770:	83 c4 10             	add    esp,0x10
c0012773:	ba 00 75 02 c0       	mov    edx,0xc0027500
c0012778:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001277c:	89 10                	mov    DWORD PTR [eax],edx
c001277e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012782:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012788:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001278c:	83 c0 0d             	add    eax,0xd
c001278f:	83 ec 04             	sub    esp,0x4
c0012792:	52                   	push   edx
c0012793:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012797:	50                   	push   eax
c0012798:	e8 17 fe ff ff       	call   c00125b4 <standardiseFiles(char*, char const*, char const*)>
c001279d:	83 c4 10             	add    esp,0x10
c00127a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127a4:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00127a7:	8d 50 bf             	lea    edx,[eax-0x41]
c00127aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127ae:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00127b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127b8:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00127bc:	90                   	nop
c00127bd:	83 c4 0c             	add    esp,0xc
c00127c0:	c3                   	ret    
c00127c1:	90                   	nop

c00127c2 <File::open(FileOpenMode)>:
c00127c2:	53                   	push   ebx
c00127c3:	b8 0b 00 00 00       	mov    eax,0xb
c00127c8:	83 ec 08             	sub    esp,0x8
c00127cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00127cf:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00127d6:	80 fa 19             	cmp    dl,0x19
c00127d9:	77 40                	ja     c001281b <File::open(FileOpenMode)+0x59>
c00127db:	8b 14 95 20 ac 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd53e0]
c00127e2:	85 d2                	test   edx,edx
c00127e4:	74 35                	je     c001281b <File::open(FileOpenMode)+0x59>
c00127e6:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00127ec:	85 d2                	test   edx,edx
c00127ee:	74 2b                	je     c001281b <File::open(FileOpenMode)+0x59>
c00127f0:	b8 06 00 00 00       	mov    eax,0x6
c00127f5:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00127f9:	75 20                	jne    c001281b <File::open(FileOpenMode)+0x59>
c00127fb:	8b 02                	mov    eax,DWORD PTR [edx]
c00127fd:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012803:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012807:	51                   	push   ecx
c0012808:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001280b:	51                   	push   ecx
c001280c:	52                   	push   edx
c001280d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012810:	83 c4 10             	add    esp,0x10
c0012813:	85 c0                	test   eax,eax
c0012815:	75 04                	jne    c001281b <File::open(FileOpenMode)+0x59>
c0012817:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001281b:	83 c4 08             	add    esp,0x8
c001281e:	5b                   	pop    ebx
c001281f:	c3                   	ret    

c0012820 <File::close()>:
c0012820:	53                   	push   ebx
c0012821:	b8 0b 00 00 00       	mov    eax,0xb
c0012826:	83 ec 08             	sub    esp,0x8
c0012829:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001282d:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012834:	80 fa 19             	cmp    dl,0x19
c0012837:	77 41                	ja     c001287a <File::close()+0x5a>
c0012839:	8b 1c 95 20 ac 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd53e0]
c0012840:	85 db                	test   ebx,ebx
c0012842:	74 36                	je     c001287a <File::close()+0x5a>
c0012844:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c001284b:	74 2d                	je     c001287a <File::close()+0x5a>
c001284d:	b8 05 00 00 00       	mov    eax,0x5
c0012852:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012856:	74 22                	je     c001287a <File::close()+0x5a>
c0012858:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c001285c:	8b 04 95 20 ac 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd53e0]
c0012863:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012869:	53                   	push   ebx
c001286a:	53                   	push   ebx
c001286b:	8b 10                	mov    edx,DWORD PTR [eax]
c001286d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012873:	50                   	push   eax
c0012874:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012877:	83 c4 10             	add    esp,0x10
c001287a:	83 c4 08             	add    esp,0x8
c001287d:	5b                   	pop    ebx
c001287e:	c3                   	ret    
c001287f:	90                   	nop

c0012880 <File::seek(unsigned long long)>:
c0012880:	56                   	push   esi
c0012881:	53                   	push   ebx
c0012882:	b8 0b 00 00 00       	mov    eax,0xb
c0012887:	51                   	push   ecx
c0012888:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001288c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012890:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012897:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001289b:	80 fa 19             	cmp    dl,0x19
c001289e:	77 31                	ja     c00128d1 <File::seek(unsigned long long)+0x51>
c00128a0:	8b 14 95 20 ac 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd53e0]
c00128a7:	85 d2                	test   edx,edx
c00128a9:	74 26                	je     c00128d1 <File::seek(unsigned long long)+0x51>
c00128ab:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00128b1:	85 d2                	test   edx,edx
c00128b3:	74 1c                	je     c00128d1 <File::seek(unsigned long long)+0x51>
c00128b5:	b8 05 00 00 00       	mov    eax,0x5
c00128ba:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00128be:	74 11                	je     c00128d1 <File::seek(unsigned long long)+0x51>
c00128c0:	8b 02                	mov    eax,DWORD PTR [edx]
c00128c2:	53                   	push   ebx
c00128c3:	51                   	push   ecx
c00128c4:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00128ca:	52                   	push   edx
c00128cb:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00128ce:	83 c4 10             	add    esp,0x10
c00128d1:	5a                   	pop    edx
c00128d2:	5b                   	pop    ebx
c00128d3:	5e                   	pop    esi
c00128d4:	c3                   	ret    
c00128d5:	90                   	nop

c00128d6 <File::tell(unsigned long long*)>:
c00128d6:	83 ec 0c             	sub    esp,0xc
c00128d9:	b8 0b 00 00 00       	mov    eax,0xb
c00128de:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00128e2:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00128e9:	80 fa 19             	cmp    dl,0x19
c00128ec:	77 34                	ja     c0012922 <File::tell(unsigned long long*)+0x4c>
c00128ee:	8b 14 95 20 ac 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd53e0]
c00128f5:	85 d2                	test   edx,edx
c00128f7:	74 29                	je     c0012922 <File::tell(unsigned long long*)+0x4c>
c00128f9:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00128ff:	85 d2                	test   edx,edx
c0012901:	74 1f                	je     c0012922 <File::tell(unsigned long long*)+0x4c>
c0012903:	b8 05 00 00 00       	mov    eax,0x5
c0012908:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001290c:	74 14                	je     c0012922 <File::tell(unsigned long long*)+0x4c>
c001290e:	50                   	push   eax
c001290f:	8b 02                	mov    eax,DWORD PTR [edx]
c0012911:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012915:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001291b:	52                   	push   edx
c001291c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001291f:	83 c4 10             	add    esp,0x10
c0012922:	83 c4 0c             	add    esp,0xc
c0012925:	c3                   	ret    

c0012926 <File::rewind()>:
c0012926:	83 ec 10             	sub    esp,0x10
c0012929:	6a 00                	push   0x0
c001292b:	6a 00                	push   0x0
c001292d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012931:	e8 4a ff ff ff       	call   c0012880 <File::seek(unsigned long long)>
c0012936:	83 c4 1c             	add    esp,0x1c
c0012939:	c3                   	ret    

c001293a <File::unlink()>:
c001293a:	83 ec 0c             	sub    esp,0xc
c001293d:	b8 0b 00 00 00       	mov    eax,0xb
c0012942:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012946:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001294d:	80 f9 19             	cmp    cl,0x19
c0012950:	77 2f                	ja     c0012981 <File::unlink()+0x47>
c0012952:	8b 0c 8d 20 ac 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd53e0]
c0012959:	85 c9                	test   ecx,ecx
c001295b:	74 24                	je     c0012981 <File::unlink()+0x47>
c001295d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012963:	85 c9                	test   ecx,ecx
c0012965:	74 1a                	je     c0012981 <File::unlink()+0x47>
c0012967:	b8 06 00 00 00       	mov    eax,0x6
c001296c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012970:	75 0f                	jne    c0012981 <File::unlink()+0x47>
c0012972:	83 c2 0d             	add    edx,0xd
c0012975:	50                   	push   eax
c0012976:	50                   	push   eax
c0012977:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012979:	52                   	push   edx
c001297a:	51                   	push   ecx
c001297b:	ff 50 38             	call   DWORD PTR [eax+0x38]
c001297e:	83 c4 10             	add    esp,0x10
c0012981:	83 c4 0c             	add    esp,0xc
c0012984:	c3                   	ret    
c0012985:	90                   	nop

c0012986 <File::rename(char const*)>:
c0012986:	83 ec 0c             	sub    esp,0xc
c0012989:	b8 0b 00 00 00       	mov    eax,0xb
c001298e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012992:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012999:	80 f9 19             	cmp    cl,0x19
c001299c:	77 32                	ja     c00129d0 <File::rename(char const*)+0x4a>
c001299e:	8b 0c 8d 20 ac 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd53e0]
c00129a5:	85 c9                	test   ecx,ecx
c00129a7:	74 27                	je     c00129d0 <File::rename(char const*)+0x4a>
c00129a9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00129af:	85 c9                	test   ecx,ecx
c00129b1:	74 1d                	je     c00129d0 <File::rename(char const*)+0x4a>
c00129b3:	b8 06 00 00 00       	mov    eax,0x6
c00129b8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00129bc:	75 12                	jne    c00129d0 <File::rename(char const*)+0x4a>
c00129be:	83 c2 0d             	add    edx,0xd
c00129c1:	50                   	push   eax
c00129c2:	8b 01                	mov    eax,DWORD PTR [ecx]
c00129c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00129c8:	52                   	push   edx
c00129c9:	51                   	push   ecx
c00129ca:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00129cd:	83 c4 10             	add    esp,0x10
c00129d0:	83 c4 0c             	add    esp,0xc
c00129d3:	c3                   	ret    

c00129d4 <File::chfatattr(unsigned char, unsigned char)>:
c00129d4:	57                   	push   edi
c00129d5:	b8 0b 00 00 00       	mov    eax,0xb
c00129da:	56                   	push   esi
c00129db:	53                   	push   ebx
c00129dc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00129e0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00129e4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00129eb:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00129ef:	80 f9 19             	cmp    cl,0x19
c00129f2:	77 37                	ja     c0012a2b <File::chfatattr(unsigned char, unsigned char)+0x57>
c00129f4:	8b 0c 8d 20 ac 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd53e0]
c00129fb:	85 c9                	test   ecx,ecx
c00129fd:	74 2c                	je     c0012a2b <File::chfatattr(unsigned char, unsigned char)+0x57>
c00129ff:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012a05:	85 c9                	test   ecx,ecx
c0012a07:	74 22                	je     c0012a2b <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012a09:	b8 06 00 00 00       	mov    eax,0x6
c0012a0e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012a12:	75 17                	jne    c0012a2b <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012a14:	8b 39                	mov    edi,DWORD PTR [ecx]
c0012a16:	89 f0                	mov    eax,esi
c0012a18:	83 c2 0d             	add    edx,0xd
c0012a1b:	0f b6 f0             	movzx  esi,al
c0012a1e:	0f b6 db             	movzx  ebx,bl
c0012a21:	56                   	push   esi
c0012a22:	53                   	push   ebx
c0012a23:	52                   	push   edx
c0012a24:	51                   	push   ecx
c0012a25:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0012a28:	83 c4 10             	add    esp,0x10
c0012a2b:	5b                   	pop    ebx
c0012a2c:	5e                   	pop    esi
c0012a2d:	5f                   	pop    edi
c0012a2e:	c3                   	ret    
c0012a2f:	90                   	nop

c0012a30 <File::exists()>:
c0012a30:	83 ec 0c             	sub    esp,0xc
c0012a33:	31 c0                	xor    eax,eax
c0012a35:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012a39:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012a40:	80 f9 19             	cmp    cl,0x19
c0012a43:	77 24                	ja     c0012a69 <File::exists()+0x39>
c0012a45:	8b 0c 8d 20 ac 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd53e0]
c0012a4c:	85 c9                	test   ecx,ecx
c0012a4e:	74 19                	je     c0012a69 <File::exists()+0x39>
c0012a50:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012a56:	85 c9                	test   ecx,ecx
c0012a58:	74 0f                	je     c0012a69 <File::exists()+0x39>
c0012a5a:	83 c2 0d             	add    edx,0xd
c0012a5d:	50                   	push   eax
c0012a5e:	50                   	push   eax
c0012a5f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012a61:	52                   	push   edx
c0012a62:	51                   	push   ecx
c0012a63:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012a66:	83 c4 10             	add    esp,0x10
c0012a69:	83 c4 0c             	add    esp,0xc
c0012a6c:	c3                   	ret    
c0012a6d:	90                   	nop

c0012a6e <File::stat(unsigned long long*, bool*)>:
c0012a6e:	56                   	push   esi
c0012a6f:	53                   	push   ebx
c0012a70:	50                   	push   eax
c0012a71:	b8 0b 00 00 00       	mov    eax,0xb
c0012a76:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012a7a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012a7e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012a85:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012a89:	80 f9 19             	cmp    cl,0x19
c0012a8c:	77 3d                	ja     c0012acb <File::stat(unsigned long long*, bool*)+0x5d>
c0012a8e:	8b 0c 8d 20 ac 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd53e0]
c0012a95:	85 c9                	test   ecx,ecx
c0012a97:	74 32                	je     c0012acb <File::stat(unsigned long long*, bool*)+0x5d>
c0012a99:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012a9f:	85 c9                	test   ecx,ecx
c0012aa1:	74 28                	je     c0012acb <File::stat(unsigned long long*, bool*)+0x5d>
c0012aa3:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012aa5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012aa9:	74 13                	je     c0012abe <File::stat(unsigned long long*, bool*)+0x50>
c0012aab:	83 ec 04             	sub    esp,0x4
c0012aae:	56                   	push   esi
c0012aaf:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0012ab5:	51                   	push   ecx
c0012ab6:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0012ab9:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012abc:	eb 0a                	jmp    c0012ac8 <File::stat(unsigned long long*, bool*)+0x5a>
c0012abe:	53                   	push   ebx
c0012abf:	83 c2 0d             	add    edx,0xd
c0012ac2:	56                   	push   esi
c0012ac3:	52                   	push   edx
c0012ac4:	51                   	push   ecx
c0012ac5:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0012ac8:	83 c4 10             	add    esp,0x10
c0012acb:	5a                   	pop    edx
c0012acc:	5b                   	pop    ebx
c0012acd:	5e                   	pop    esi
c0012ace:	c3                   	ret    

c0012acf <getcwd(Process*, char*, int)>:
c0012acf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012ad3:	31 c0                	xor    eax,eax
c0012ad5:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012ad8:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012adc:	7d 15                	jge    c0012af3 <getcwd(Process*, char*, int)+0x24>
c0012ade:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012ae2:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012ae9:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012aec:	84 c9                	test   cl,cl
c0012aee:	74 06                	je     c0012af6 <getcwd(Process*, char*, int)+0x27>
c0012af0:	40                   	inc    eax
c0012af1:	eb e2                	jmp    c0012ad5 <getcwd(Process*, char*, int)+0x6>
c0012af3:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012af6:	31 c0                	xor    eax,eax
c0012af8:	c3                   	ret    

c0012af9 <setcwd(Process*, char*)>:
c0012af9:	55                   	push   ebp
c0012afa:	57                   	push   edi
c0012afb:	56                   	push   esi
c0012afc:	53                   	push   ebx
c0012afd:	81 ec 20 02 00 00    	sub    esp,0x220
c0012b03:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0012b0a:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0012b10:	57                   	push   edi
c0012b11:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0012b18:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0012b1c:	56                   	push   esi
c0012b1d:	e8 92 fa ff ff       	call   c00125b4 <standardiseFiles(char*, char const*, char const*)>
c0012b22:	89 34 24             	mov    DWORD PTR [esp],esi
c0012b25:	e8 70 db fe ff       	call   c000069a <strlen>
c0012b2a:	83 c4 10             	add    esp,0x10
c0012b2d:	83 f8 02             	cmp    eax,0x2
c0012b30:	77 17                	ja     c0012b49 <setcwd(Process*, char*)+0x50>
c0012b32:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0012b37:	83 e8 41             	sub    eax,0x41
c0012b3a:	83 f8 19             	cmp    eax,0x19
c0012b3d:	76 24                	jbe    c0012b63 <setcwd(Process*, char*)+0x6a>
c0012b3f:	b8 03 00 00 00       	mov    eax,0x3
c0012b44:	e9 cb 00 00 00       	jmp    c0012c14 <setcwd(Process*, char*)+0x11b>
c0012b49:	83 ec 0c             	sub    esp,0xc
c0012b4c:	56                   	push   esi
c0012b4d:	e8 48 db fe ff       	call   c000069a <strlen>
c0012b52:	83 c4 10             	add    esp,0x10
c0012b55:	83 f8 03             	cmp    eax,0x3
c0012b58:	75 33                	jne    c0012b8d <setcwd(Process*, char*)+0x94>
c0012b5a:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0012b5f:	75 2c                	jne    c0012b8d <setcwd(Process*, char*)+0x94>
c0012b61:	eb cf                	jmp    c0012b32 <setcwd(Process*, char*)+0x39>
c0012b63:	8b 14 85 20 ac 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd53e0]
c0012b6a:	b8 05 00 00 00       	mov    eax,0x5
c0012b6f:	85 d2                	test   edx,edx
c0012b71:	0f 84 9d 00 00 00    	je     c0012c14 <setcwd(Process*, char*)+0x11b>
c0012b77:	b8 06 00 00 00       	mov    eax,0x6
c0012b7c:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0012b83:	0f 84 8b 00 00 00    	je     c0012c14 <setcwd(Process*, char*)+0x11b>
c0012b89:	51                   	push   ecx
c0012b8a:	51                   	push   ecx
c0012b8b:	eb 7b                	jmp    c0012c08 <setcwd(Process*, char*)+0x10f>
c0012b8d:	83 ec 0c             	sub    esp,0xc
c0012b90:	68 14 01 00 00       	push   0x114
c0012b95:	e8 a6 f5 ff ff       	call   c0012140 <operator new(unsigned long)>
c0012b9a:	83 c4 0c             	add    esp,0xc
c0012b9d:	89 c3                	mov    ebx,eax
c0012b9f:	55                   	push   ebp
c0012ba0:	56                   	push   esi
c0012ba1:	50                   	push   eax
c0012ba2:	e8 b7 fb ff ff       	call   c001275e <File::File(char const*, Process*)>
c0012ba7:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0012bac:	83 c4 0c             	add    esp,0xc
c0012baf:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0012bb3:	50                   	push   eax
c0012bb4:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012bb8:	50                   	push   eax
c0012bb9:	53                   	push   ebx
c0012bba:	e8 af fe ff ff       	call   c0012a6e <File::stat(unsigned long long*, bool*)>
c0012bbf:	83 c4 10             	add    esp,0x10
c0012bc2:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012bc4:	83 f8 02             	cmp    eax,0x2
c0012bc7:	75 09                	jne    c0012bd2 <setcwd(Process*, char*)+0xd9>
c0012bc9:	83 ec 0c             	sub    esp,0xc
c0012bcc:	53                   	push   ebx
c0012bcd:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012bd0:	eb 0d                	jmp    c0012bdf <setcwd(Process*, char*)+0xe6>
c0012bd2:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0012bd5:	85 c0                	test   eax,eax
c0012bd7:	74 10                	je     c0012be9 <setcwd(Process*, char*)+0xf0>
c0012bd9:	83 ec 0c             	sub    esp,0xc
c0012bdc:	53                   	push   ebx
c0012bdd:	ff d2                	call   edx
c0012bdf:	83 c4 10             	add    esp,0x10
c0012be2:	b8 01 00 00 00       	mov    eax,0x1
c0012be7:	eb 2b                	jmp    c0012c14 <setcwd(Process*, char*)+0x11b>
c0012be9:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0012bee:	75 10                	jne    c0012c00 <setcwd(Process*, char*)+0x107>
c0012bf0:	83 ec 0c             	sub    esp,0xc
c0012bf3:	53                   	push   ebx
c0012bf4:	ff d2                	call   edx
c0012bf6:	83 c4 10             	add    esp,0x10
c0012bf9:	b8 02 00 00 00       	mov    eax,0x2
c0012bfe:	eb 14                	jmp    c0012c14 <setcwd(Process*, char*)+0x11b>
c0012c00:	83 ec 0c             	sub    esp,0xc
c0012c03:	53                   	push   ebx
c0012c04:	ff d2                	call   edx
c0012c06:	58                   	pop    eax
c0012c07:	5a                   	pop    edx
c0012c08:	56                   	push   esi
c0012c09:	57                   	push   edi
c0012c0a:	e8 0d db fe ff       	call   c000071c <strcpy>
c0012c0f:	83 c4 10             	add    esp,0x10
c0012c12:	31 c0                	xor    eax,eax
c0012c14:	81 c4 1c 02 00 00    	add    esp,0x21c
c0012c1a:	5b                   	pop    ebx
c0012c1b:	5e                   	pop    esi
c0012c1c:	5f                   	pop    edi
c0012c1d:	5d                   	pop    ebp
c0012c1e:	c3                   	ret    
c0012c1f:	90                   	nop

c0012c20 <Directory::Directory(char const*, Process*)>:
c0012c20:	83 ec 0c             	sub    esp,0xc
c0012c23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c27:	83 ec 08             	sub    esp,0x8
c0012c2a:	6a 00                	push   0x0
c0012c2c:	50                   	push   eax
c0012c2d:	e8 28 e2 ff ff       	call   c0010e5a <UnixFile::UnixFile(int)>
c0012c32:	83 c4 10             	add    esp,0x10
c0012c35:	ba 1c 75 02 c0       	mov    edx,0xc002751c
c0012c3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c3e:	89 10                	mov    DWORD PTR [eax],edx
c0012c40:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012c44:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012c4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c4e:	83 c0 0d             	add    eax,0xd
c0012c51:	83 ec 04             	sub    esp,0x4
c0012c54:	52                   	push   edx
c0012c55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c59:	50                   	push   eax
c0012c5a:	e8 55 f9 ff ff       	call   c00125b4 <standardiseFiles(char*, char const*, char const*)>
c0012c5f:	83 c4 10             	add    esp,0x10
c0012c62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c66:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012c69:	8d 50 bf             	lea    edx,[eax-0x41]
c0012c6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c70:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012c76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c7a:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012c7e:	90                   	nop
c0012c7f:	83 c4 0c             	add    esp,0xc
c0012c82:	c3                   	ret    
c0012c83:	90                   	nop

c0012c84 <Directory::open()>:
c0012c84:	53                   	push   ebx
c0012c85:	b8 0b 00 00 00       	mov    eax,0xb
c0012c8a:	83 ec 08             	sub    esp,0x8
c0012c8d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012c91:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012c98:	80 fa 19             	cmp    dl,0x19
c0012c9b:	77 3d                	ja     c0012cda <Directory::open()+0x56>
c0012c9d:	8b 14 95 20 ac 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd53e0]
c0012ca4:	85 d2                	test   edx,edx
c0012ca6:	74 32                	je     c0012cda <Directory::open()+0x56>
c0012ca8:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012cae:	85 d2                	test   edx,edx
c0012cb0:	74 28                	je     c0012cda <Directory::open()+0x56>
c0012cb2:	b8 06 00 00 00       	mov    eax,0x6
c0012cb7:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012cbb:	75 1d                	jne    c0012cda <Directory::open()+0x56>
c0012cbd:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012cc3:	50                   	push   eax
c0012cc4:	8b 02                	mov    eax,DWORD PTR [edx]
c0012cc6:	51                   	push   ecx
c0012cc7:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012cca:	51                   	push   ecx
c0012ccb:	52                   	push   edx
c0012ccc:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0012ccf:	83 c4 10             	add    esp,0x10
c0012cd2:	85 c0                	test   eax,eax
c0012cd4:	75 04                	jne    c0012cda <Directory::open()+0x56>
c0012cd6:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012cda:	83 c4 08             	add    esp,0x8
c0012cdd:	5b                   	pop    ebx
c0012cde:	c3                   	ret    
c0012cdf:	90                   	nop

c0012ce0 <Directory::close()>:
c0012ce0:	53                   	push   ebx
c0012ce1:	b8 0b 00 00 00       	mov    eax,0xb
c0012ce6:	83 ec 08             	sub    esp,0x8
c0012ce9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012ced:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012cf4:	80 fa 19             	cmp    dl,0x19
c0012cf7:	77 41                	ja     c0012d3a <Directory::close()+0x5a>
c0012cf9:	8b 1c 95 20 ac 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd53e0]
c0012d00:	85 db                	test   ebx,ebx
c0012d02:	74 36                	je     c0012d3a <Directory::close()+0x5a>
c0012d04:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012d0b:	74 2d                	je     c0012d3a <Directory::close()+0x5a>
c0012d0d:	b8 05 00 00 00       	mov    eax,0x5
c0012d12:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012d16:	74 22                	je     c0012d3a <Directory::close()+0x5a>
c0012d18:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012d1c:	8b 04 95 20 ac 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd53e0]
c0012d23:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012d29:	53                   	push   ebx
c0012d2a:	53                   	push   ebx
c0012d2b:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d2d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012d33:	50                   	push   eax
c0012d34:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0012d37:	83 c4 10             	add    esp,0x10
c0012d3a:	83 c4 08             	add    esp,0x8
c0012d3d:	5b                   	pop    ebx
c0012d3e:	c3                   	ret    
c0012d3f:	90                   	nop

c0012d40 <Directory::unlink()>:
c0012d40:	83 ec 0c             	sub    esp,0xc
c0012d43:	b8 0b 00 00 00       	mov    eax,0xb
c0012d48:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012d4c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012d53:	80 f9 19             	cmp    cl,0x19
c0012d56:	77 2f                	ja     c0012d87 <Directory::unlink()+0x47>
c0012d58:	8b 0c 8d 20 ac 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd53e0]
c0012d5f:	85 c9                	test   ecx,ecx
c0012d61:	74 24                	je     c0012d87 <Directory::unlink()+0x47>
c0012d63:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012d69:	85 c9                	test   ecx,ecx
c0012d6b:	74 1a                	je     c0012d87 <Directory::unlink()+0x47>
c0012d6d:	b8 06 00 00 00       	mov    eax,0x6
c0012d72:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012d76:	75 0f                	jne    c0012d87 <Directory::unlink()+0x47>
c0012d78:	83 c2 0d             	add    edx,0xd
c0012d7b:	50                   	push   eax
c0012d7c:	50                   	push   eax
c0012d7d:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012d7f:	52                   	push   edx
c0012d80:	51                   	push   ecx
c0012d81:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012d84:	83 c4 10             	add    esp,0x10
c0012d87:	83 c4 0c             	add    esp,0xc
c0012d8a:	c3                   	ret    
c0012d8b:	90                   	nop

c0012d8c <Directory::rename(char const*)>:
c0012d8c:	83 ec 0c             	sub    esp,0xc
c0012d8f:	b8 0b 00 00 00       	mov    eax,0xb
c0012d94:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012d98:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012d9f:	80 f9 19             	cmp    cl,0x19
c0012da2:	77 32                	ja     c0012dd6 <Directory::rename(char const*)+0x4a>
c0012da4:	8b 0c 8d 20 ac 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd53e0]
c0012dab:	85 c9                	test   ecx,ecx
c0012dad:	74 27                	je     c0012dd6 <Directory::rename(char const*)+0x4a>
c0012daf:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012db5:	85 c9                	test   ecx,ecx
c0012db7:	74 1d                	je     c0012dd6 <Directory::rename(char const*)+0x4a>
c0012db9:	b8 06 00 00 00       	mov    eax,0x6
c0012dbe:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012dc2:	75 12                	jne    c0012dd6 <Directory::rename(char const*)+0x4a>
c0012dc4:	83 c2 0d             	add    edx,0xd
c0012dc7:	50                   	push   eax
c0012dc8:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012dca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012dce:	52                   	push   edx
c0012dcf:	51                   	push   ecx
c0012dd0:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012dd3:	83 c4 10             	add    esp,0x10
c0012dd6:	83 c4 0c             	add    esp,0xc
c0012dd9:	c3                   	ret    

c0012dda <Directory::exists()>:
c0012dda:	83 ec 0c             	sub    esp,0xc
c0012ddd:	31 c0                	xor    eax,eax
c0012ddf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012de3:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012dea:	80 f9 19             	cmp    cl,0x19
c0012ded:	77 24                	ja     c0012e13 <Directory::exists()+0x39>
c0012def:	8b 0c 8d 20 ac 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd53e0]
c0012df6:	85 c9                	test   ecx,ecx
c0012df8:	74 19                	je     c0012e13 <Directory::exists()+0x39>
c0012dfa:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e00:	85 c9                	test   ecx,ecx
c0012e02:	74 0f                	je     c0012e13 <Directory::exists()+0x39>
c0012e04:	83 c2 0d             	add    edx,0xd
c0012e07:	50                   	push   eax
c0012e08:	50                   	push   eax
c0012e09:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e0b:	52                   	push   edx
c0012e0c:	51                   	push   ecx
c0012e0d:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012e10:	83 c4 10             	add    esp,0x10
c0012e13:	83 c4 0c             	add    esp,0xc
c0012e16:	c3                   	ret    
c0012e17:	90                   	nop

c0012e18 <Directory::read(dirent*)>:
c0012e18:	83 ec 1c             	sub    esp,0x1c
c0012e1b:	b8 0b 00 00 00       	mov    eax,0xb
c0012e20:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0012e24:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012e2b:	80 fa 19             	cmp    dl,0x19
c0012e2e:	77 30                	ja     c0012e60 <Directory::read(dirent*)+0x48>
c0012e30:	8b 14 95 20 ac 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd53e0]
c0012e37:	85 d2                	test   edx,edx
c0012e39:	74 25                	je     c0012e60 <Directory::read(dirent*)+0x48>
c0012e3b:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0012e42:	74 1c                	je     c0012e60 <Directory::read(dirent*)+0x48>
c0012e44:	83 ec 0c             	sub    esp,0xc
c0012e47:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e49:	8d 54 24 18          	lea    edx,[esp+0x18]
c0012e4d:	52                   	push   edx
c0012e4e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0012e52:	6a 00                	push   0x0
c0012e54:	68 10 01 00 00       	push   0x110
c0012e59:	51                   	push   ecx
c0012e5a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012e5d:	83 c4 20             	add    esp,0x20
c0012e60:	83 c4 1c             	add    esp,0x1c
c0012e63:	c3                   	ret    

c0012e64 <Directory::create()>:
c0012e64:	83 ec 0c             	sub    esp,0xc
c0012e67:	b8 0b 00 00 00       	mov    eax,0xb
c0012e6c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e70:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e77:	80 f9 19             	cmp    cl,0x19
c0012e7a:	77 2f                	ja     c0012eab <Directory::create()+0x47>
c0012e7c:	8b 0c 8d 20 ac 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd53e0]
c0012e83:	85 c9                	test   ecx,ecx
c0012e85:	74 24                	je     c0012eab <Directory::create()+0x47>
c0012e87:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e8d:	85 c9                	test   ecx,ecx
c0012e8f:	74 1a                	je     c0012eab <Directory::create()+0x47>
c0012e91:	b8 06 00 00 00       	mov    eax,0x6
c0012e96:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012e9a:	75 0f                	jne    c0012eab <Directory::create()+0x47>
c0012e9c:	83 c2 0d             	add    edx,0xd
c0012e9f:	50                   	push   eax
c0012ea0:	50                   	push   eax
c0012ea1:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012ea3:	52                   	push   edx
c0012ea4:	51                   	push   ecx
c0012ea5:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0012ea8:	83 c4 10             	add    esp,0x10
c0012eab:	83 c4 0c             	add    esp,0xc
c0012eae:	c3                   	ret    
c0012eaf:	90                   	nop

c0012eb0 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0012eb0:	b8 0a 00 00 00       	mov    eax,0xa
c0012eb5:	c3                   	ret    

c0012eb6 <Bus::Bus(char const*)>:
c0012eb6:	83 ec 0c             	sub    esp,0xc
c0012eb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ebd:	83 ec 08             	sub    esp,0x8
c0012ec0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ec4:	50                   	push   eax
c0012ec5:	e8 60 09 00 00       	call   c001382a <Device::Device(char const*)>
c0012eca:	83 c4 10             	add    esp,0x10
c0012ecd:	ba 38 75 02 c0       	mov    edx,0xc0027538
c0012ed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ed6:	89 10                	mov    DWORD PTR [eax],edx
c0012ed8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012edc:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0012ee6:	90                   	nop
c0012ee7:	83 c4 0c             	add    esp,0xc
c0012eea:	c3                   	ret    
c0012eeb:	90                   	nop

c0012eec <Bus::~Bus()>:
c0012eec:	83 ec 0c             	sub    esp,0xc
c0012eef:	ba 38 75 02 c0       	mov    edx,0xc0027538
c0012ef4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ef8:	89 10                	mov    DWORD PTR [eax],edx
c0012efa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012efe:	83 ec 0c             	sub    esp,0xc
c0012f01:	50                   	push   eax
c0012f02:	e8 d5 05 00 00       	call   c00134dc <Device::~Device()>
c0012f07:	83 c4 10             	add    esp,0x10
c0012f0a:	90                   	nop
c0012f0b:	83 c4 0c             	add    esp,0xc
c0012f0e:	c3                   	ret    
c0012f0f:	90                   	nop

c0012f10 <Bus::~Bus()>:
c0012f10:	83 ec 0c             	sub    esp,0xc
c0012f13:	83 ec 0c             	sub    esp,0xc
c0012f16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f1a:	e8 cd ff ff ff       	call   c0012eec <Bus::~Bus()>
c0012f1f:	83 c4 10             	add    esp,0x10
c0012f22:	83 ec 08             	sub    esp,0x8
c0012f25:	68 58 01 00 00       	push   0x158
c0012f2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f2e:	e8 1c f2 ff ff       	call   c001214f <operator delete(void*, unsigned long)>
c0012f33:	83 c4 10             	add    esp,0x10
c0012f36:	83 c4 0c             	add    esp,0xc
c0012f39:	c3                   	ret    

c0012f3a <Buzzer::Buzzer(char const*)>:
c0012f3a:	83 ec 0c             	sub    esp,0xc
c0012f3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f41:	83 ec 08             	sub    esp,0x8
c0012f44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f48:	50                   	push   eax
c0012f49:	e8 dc 08 00 00       	call   c001382a <Device::Device(char const*)>
c0012f4e:	83 c4 10             	add    esp,0x10
c0012f51:	ba 64 75 02 c0       	mov    edx,0xc0027564
c0012f56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f5a:	89 10                	mov    DWORD PTR [eax],edx
c0012f5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f60:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0012f6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f6e:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0012f78:	90                   	nop
c0012f79:	83 c4 0c             	add    esp,0xc
c0012f7c:	c3                   	ret    
c0012f7d:	90                   	nop

c0012f7e <Buzzer::~Buzzer()>:
c0012f7e:	83 ec 0c             	sub    esp,0xc
c0012f81:	ba 64 75 02 c0       	mov    edx,0xc0027564
c0012f86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f8a:	89 10                	mov    DWORD PTR [eax],edx
c0012f8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f90:	83 ec 0c             	sub    esp,0xc
c0012f93:	50                   	push   eax
c0012f94:	e8 43 05 00 00       	call   c00134dc <Device::~Device()>
c0012f99:	83 c4 10             	add    esp,0x10
c0012f9c:	90                   	nop
c0012f9d:	83 c4 0c             	add    esp,0xc
c0012fa0:	c3                   	ret    
c0012fa1:	90                   	nop

c0012fa2 <Buzzer::~Buzzer()>:
c0012fa2:	83 ec 0c             	sub    esp,0xc
c0012fa5:	83 ec 0c             	sub    esp,0xc
c0012fa8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fac:	e8 cd ff ff ff       	call   c0012f7e <Buzzer::~Buzzer()>
c0012fb1:	83 c4 10             	add    esp,0x10
c0012fb4:	83 ec 08             	sub    esp,0x8
c0012fb7:	68 5c 01 00 00       	push   0x15c
c0012fbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fc0:	e8 8a f1 ff ff       	call   c001214f <operator delete(void*, unsigned long)>
c0012fc5:	83 c4 10             	add    esp,0x10
c0012fc8:	83 c4 0c             	add    esp,0xc
c0012fcb:	c3                   	ret    

c0012fcc <Buzzer::stop()>:
c0012fcc:	83 ec 14             	sub    esp,0x14
c0012fcf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012fd3:	8b 10                	mov    edx,DWORD PTR [eax]
c0012fd5:	6a 00                	push   0x0
c0012fd7:	50                   	push   eax
c0012fd8:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0012fdb:	83 c4 1c             	add    esp,0x1c
c0012fde:	c3                   	ret    

c0012fdf <beepThread(void*)>:
c0012fdf:	53                   	push   ebx
c0012fe0:	83 ec 08             	sub    esp,0x8
c0012fe3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012fe7:	e8 10 8a 00 00       	call   c001b9fc <unlockScheduler()>
c0012fec:	b8 40 42 0f 00       	mov    eax,0xf4240
c0012ff1:	52                   	push   edx
c0012ff2:	52                   	push   edx
c0012ff3:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0012ff9:	52                   	push   edx
c0012ffa:	50                   	push   eax
c0012ffb:	e8 42 8f 00 00       	call   c001bf42 <nanoSleep(unsigned long long)>
c0013000:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013003:	e8 c4 ff ff ff       	call   c0012fcc <Buzzer::stop()>
c0013008:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013010:	83 c4 18             	add    esp,0x18
c0013013:	5b                   	pop    ebx
c0013014:	e9 6f 8e 00 00       	jmp    c001be88 <blockTask(TaskState)>
c0013019:	90                   	nop

c001301a <Buzzer::beep(int, int, bool)>:
c001301a:	57                   	push   edi
c001301b:	56                   	push   esi
c001301c:	53                   	push   ebx
c001301d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013021:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013025:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013029:	52                   	push   edx
c001302a:	52                   	push   edx
c001302b:	8b 06                	mov    eax,DWORD PTR [esi]
c001302d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013031:	56                   	push   esi
c0013032:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013035:	83 c4 10             	add    esp,0x10
c0013038:	89 f8                	mov    eax,edi
c001303a:	84 c0                	test   al,al
c001303c:	74 1f                	je     c001305d <Buzzer::beep(int, int, bool)+0x43>
c001303e:	50                   	push   eax
c001303f:	50                   	push   eax
c0013040:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013046:	99                   	cdq    
c0013047:	52                   	push   edx
c0013048:	50                   	push   eax
c0013049:	e8 f4 8e 00 00       	call   c001bf42 <nanoSleep(unsigned long long)>
c001304e:	83 c4 10             	add    esp,0x10
c0013051:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013055:	5b                   	pop    ebx
c0013056:	5e                   	pop    esi
c0013057:	5f                   	pop    edi
c0013058:	e9 6f ff ff ff       	jmp    c0012fcc <Buzzer::stop()>
c001305d:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013063:	a1 34 bb 02 c0       	mov    eax,ds:0xc002bb34
c0013068:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013070:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013074:	c7 44 24 14 df 2f 01 c0 	mov    DWORD PTR [esp+0x14],0xc0012fdf
c001307c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013080:	5b                   	pop    ebx
c0013081:	5e                   	pop    esi
c0013082:	5f                   	pop    edi
c0013083:	e9 9c 8a 00 00       	jmp    c001bb24 <Process::createThread(void (*)(void*), void*, int)>

c0013088 <loadClockSettings()>:
c0013088:	c7 05 94 a7 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002a794,0xa
c0013092:	c6 05 91 a7 02 c0 00 	mov    BYTE PTR ds:0xc002a791,0x0
c0013099:	c6 05 90 a7 02 c0 01 	mov    BYTE PTR ds:0xc002a790,0x1
c00130a0:	c3                   	ret    
c00130a1:	90                   	nop

c00130a2 <Clock::Clock(char const*)>:
c00130a2:	83 ec 0c             	sub    esp,0xc
c00130a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130a9:	83 ec 08             	sub    esp,0x8
c00130ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130b0:	50                   	push   eax
c00130b1:	e8 74 07 00 00       	call   c001382a <Device::Device(char const*)>
c00130b6:	83 c4 10             	add    esp,0x10
c00130b9:	ba 94 75 02 c0       	mov    edx,0xc0027594
c00130be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130c2:	89 10                	mov    DWORD PTR [eax],edx
c00130c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130c8:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00130d2:	90                   	nop
c00130d3:	83 c4 0c             	add    esp,0xc
c00130d6:	c3                   	ret    
c00130d7:	90                   	nop

c00130d8 <Clock::~Clock()>:
c00130d8:	83 ec 0c             	sub    esp,0xc
c00130db:	ba 94 75 02 c0       	mov    edx,0xc0027594
c00130e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130e4:	89 10                	mov    DWORD PTR [eax],edx
c00130e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130ea:	83 ec 0c             	sub    esp,0xc
c00130ed:	50                   	push   eax
c00130ee:	e8 e9 03 00 00       	call   c00134dc <Device::~Device()>
c00130f3:	83 c4 10             	add    esp,0x10
c00130f6:	90                   	nop
c00130f7:	83 c4 0c             	add    esp,0xc
c00130fa:	c3                   	ret    
c00130fb:	90                   	nop

c00130fc <Clock::~Clock()>:
c00130fc:	83 ec 0c             	sub    esp,0xc
c00130ff:	83 ec 0c             	sub    esp,0xc
c0013102:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013106:	e8 cd ff ff ff       	call   c00130d8 <Clock::~Clock()>
c001310b:	83 c4 10             	add    esp,0x10
c001310e:	83 ec 08             	sub    esp,0x8
c0013111:	68 58 01 00 00       	push   0x158
c0013116:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001311a:	e8 30 f0 ff ff       	call   c001214f <operator delete(void*, unsigned long)>
c001311f:	83 c4 10             	add    esp,0x10
c0013122:	83 c4 0c             	add    esp,0xc
c0013125:	c3                   	ret    

c0013126 <Clock::timeInSecondsLocal()>:
c0013126:	53                   	push   ebx
c0013127:	83 ec 14             	sub    esp,0x14
c001312a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001312e:	8b 10                	mov    edx,DWORD PTR [eax]
c0013130:	50                   	push   eax
c0013131:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013134:	0f b6 0d 90 a7 02 c0 	movzx  ecx,BYTE PTR ds:0xc002a790
c001313b:	03 0d 94 a7 02 c0    	add    ecx,DWORD PTR ds:0xc002a794
c0013141:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013147:	89 cb                	mov    ebx,ecx
c0013149:	c1 fb 1f             	sar    ebx,0x1f
c001314c:	01 c8                	add    eax,ecx
c001314e:	11 da                	adc    edx,ebx
c0013150:	83 c4 10             	add    esp,0x10
c0013153:	31 c9                	xor    ecx,ecx
c0013155:	80 3d 91 a7 02 c0 00 	cmp    BYTE PTR ds:0xc002a791,0x0
c001315c:	74 05                	je     c0013163 <Clock::timeInSecondsLocal()+0x3d>
c001315e:	b9 08 07 00 00       	mov    ecx,0x708
c0013163:	31 db                	xor    ebx,ebx
c0013165:	01 c8                	add    eax,ecx
c0013167:	11 da                	adc    edx,ebx
c0013169:	83 c4 08             	add    esp,0x8
c001316c:	5b                   	pop    ebx
c001316d:	c3                   	ret    

c001316e <Clock::setTimeInSecondsLocal(unsigned long long)>:
c001316e:	57                   	push   edi
c001316f:	56                   	push   esi
c0013170:	53                   	push   ebx
c0013171:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013175:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013179:	8b 01                	mov    eax,DWORD PTR [ecx]
c001317b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001317f:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013182:	0f b6 05 90 a7 02 c0 	movzx  eax,BYTE PTR ds:0xc002a790
c0013189:	03 05 94 a7 02 c0    	add    eax,DWORD PTR ds:0xc002a794
c001318f:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013195:	99                   	cdq    
c0013196:	29 c6                	sub    esi,eax
c0013198:	19 d7                	sbb    edi,edx
c001319a:	89 f0                	mov    eax,esi
c001319c:	89 fa                	mov    edx,edi
c001319e:	31 f6                	xor    esi,esi
c00131a0:	80 3d 91 a7 02 c0 00 	cmp    BYTE PTR ds:0xc002a791,0x0
c00131a7:	74 05                	je     c00131ae <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c00131a9:	be 08 07 00 00       	mov    esi,0x708
c00131ae:	31 ff                	xor    edi,edi
c00131b0:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00131b4:	29 f0                	sub    eax,esi
c00131b6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00131ba:	19 fa                	sbb    edx,edi
c00131bc:	89 d8                	mov    eax,ebx
c00131be:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00131c2:	5b                   	pop    ebx
c00131c3:	5e                   	pop    esi
c00131c4:	5f                   	pop    edi
c00131c5:	ff e0                	jmp    eax

c00131c7 <datetimeToSeconds(datetime_t)>:
c00131c7:	55                   	push   ebp
c00131c8:	57                   	push   edi
c00131c9:	56                   	push   esi
c00131ca:	53                   	push   ebx
c00131cb:	83 ec 14             	sub    esp,0x14
c00131ce:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00131d2:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00131d6:	89 d3                	mov    ebx,edx
c00131d8:	0f b6 c6             	movzx  eax,dh
c00131db:	c1 eb 10             	shr    ebx,0x10
c00131de:	48                   	dec    eax
c00131df:	66 81 eb 6c 07       	sub    bx,0x76c
c00131e4:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00131e8:	0f b6 f5             	movzx  esi,ch
c00131eb:	89 cf                	mov    edi,ecx
c00131ed:	6b f6 3c             	imul   esi,esi,0x3c
c00131f0:	c1 ef 10             	shr    edi,0x10
c00131f3:	0f b6 c9             	movzx  ecx,cl
c00131f6:	89 f8                	mov    eax,edi
c00131f8:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00131fe:	0f b6 f8             	movzx  edi,al
c0013201:	0f b6 d2             	movzx  edx,dl
c0013204:	01 fe                	add    esi,edi
c0013206:	01 f1                	add    ecx,esi
c0013208:	0f b7 f3             	movzx  esi,bx
c001320b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001320f:	c1 f9 1f             	sar    ecx,0x1f
c0013212:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013217:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001321b:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013220:	8b 0c 8d e0 75 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8a20]
c0013227:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c001322b:	76 29                	jbe    c0013256 <datetimeToSeconds(datetime_t)+0x8f>
c001322d:	f6 c3 03             	test   bl,0x3
c0013230:	75 24                	jne    c0013256 <datetimeToSeconds(datetime_t)+0x8f>
c0013232:	31 d2                	xor    edx,edx
c0013234:	bf 64 00 00 00       	mov    edi,0x64
c0013239:	89 d8                	mov    eax,ebx
c001323b:	66 f7 f7             	div    di
c001323e:	66 85 d2             	test   dx,dx
c0013241:	75 12                	jne    c0013255 <datetimeToSeconds(datetime_t)+0x8e>
c0013243:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013249:	bf 90 01 00 00       	mov    edi,0x190
c001324e:	99                   	cdq    
c001324f:	f7 ff                	idiv   edi
c0013251:	85 d2                	test   edx,edx
c0013253:	75 01                	jne    c0013256 <datetimeToSeconds(datetime_t)+0x8f>
c0013255:	41                   	inc    ecx
c0013256:	66 83 fb 46          	cmp    bx,0x46
c001325a:	76 45                	jbe    c00132a1 <datetimeToSeconds(datetime_t)+0xda>
c001325c:	bb 46 00 00 00       	mov    ebx,0x46
c0013261:	bf 64 00 00 00       	mov    edi,0x64
c0013266:	bd 90 01 00 00       	mov    ebp,0x190
c001326b:	b8 6d 01 00 00       	mov    eax,0x16d
c0013270:	f6 c3 03             	test   bl,0x3
c0013273:	75 23                	jne    c0013298 <datetimeToSeconds(datetime_t)+0xd1>
c0013275:	89 d8                	mov    eax,ebx
c0013277:	99                   	cdq    
c0013278:	f7 ff                	idiv   edi
c001327a:	b8 6e 01 00 00       	mov    eax,0x16e
c001327f:	85 d2                	test   edx,edx
c0013281:	75 15                	jne    c0013298 <datetimeToSeconds(datetime_t)+0xd1>
c0013283:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013289:	99                   	cdq    
c001328a:	f7 fd                	idiv   ebp
c001328c:	83 fa 01             	cmp    edx,0x1
c001328f:	19 c0                	sbb    eax,eax
c0013291:	f7 d0                	not    eax
c0013293:	05 6e 01 00 00       	add    eax,0x16e
c0013298:	01 c1                	add    ecx,eax
c001329a:	43                   	inc    ebx
c001329b:	39 f3                	cmp    ebx,esi
c001329d:	7c cc                	jl     c001326b <datetimeToSeconds(datetime_t)+0xa4>
c001329f:	eb 35                	jmp    c00132d6 <datetimeToSeconds(datetime_t)+0x10f>
c00132a1:	74 33                	je     c00132d6 <datetimeToSeconds(datetime_t)+0x10f>
c00132a3:	b8 45 00 00 00       	mov    eax,0x45
c00132a8:	89 c2                	mov    edx,eax
c00132aa:	83 e2 03             	and    edx,0x3
c00132ad:	39 f0                	cmp    eax,esi
c00132af:	7e 0f                	jle    c00132c0 <datetimeToSeconds(datetime_t)+0xf9>
c00132b1:	83 fa 01             	cmp    edx,0x1
c00132b4:	19 d2                	sbb    edx,edx
c00132b6:	48                   	dec    eax
c00132b7:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c00132be:	eb e8                	jmp    c00132a8 <datetimeToSeconds(datetime_t)+0xe1>
c00132c0:	b8 6d 01 00 00       	mov    eax,0x16d
c00132c5:	85 d2                	test   edx,edx
c00132c7:	75 0b                	jne    c00132d4 <datetimeToSeconds(datetime_t)+0x10d>
c00132c9:	66 83 fb 01          	cmp    bx,0x1
c00132cd:	19 c0                	sbb    eax,eax
c00132cf:	05 6e 01 00 00       	add    eax,0x16e
c00132d4:	29 c1                	sub    ecx,eax
c00132d6:	b8 80 51 01 00       	mov    eax,0x15180
c00132db:	f7 e9                	imul   ecx
c00132dd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00132e1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00132e5:	83 c4 14             	add    esp,0x14
c00132e8:	5b                   	pop    ebx
c00132e9:	5e                   	pop    esi
c00132ea:	5f                   	pop    edi
c00132eb:	5d                   	pop    ebp
c00132ec:	c3                   	ret    
c00132ed:	90                   	nop

c00132ee <Clock::setTimeInDatetimeLocal(datetime_t)>:
c00132ee:	57                   	push   edi
c00132ef:	56                   	push   esi
c00132f0:	53                   	push   ebx
c00132f1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00132f5:	8b 06                	mov    eax,DWORD PTR [esi]
c00132f7:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c00132fa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00132fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013302:	e8 c0 fe ff ff       	call   c00131c7 <datetimeToSeconds(datetime_t)>
c0013307:	59                   	pop    ecx
c0013308:	0f b6 0d 90 a7 02 c0 	movzx  ecx,BYTE PTR ds:0xc002a790
c001330f:	5b                   	pop    ebx
c0013310:	03 0d 94 a7 02 c0    	add    ecx,DWORD PTR ds:0xc002a794
c0013316:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001331c:	89 cb                	mov    ebx,ecx
c001331e:	c1 fb 1f             	sar    ebx,0x1f
c0013321:	29 c8                	sub    eax,ecx
c0013323:	19 da                	sbb    edx,ebx
c0013325:	31 c9                	xor    ecx,ecx
c0013327:	80 3d 91 a7 02 c0 00 	cmp    BYTE PTR ds:0xc002a791,0x0
c001332e:	74 05                	je     c0013335 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013330:	b9 08 07 00 00       	mov    ecx,0x708
c0013335:	31 db                	xor    ebx,ebx
c0013337:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001333b:	29 c8                	sub    eax,ecx
c001333d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013341:	19 da                	sbb    edx,ebx
c0013343:	89 f8                	mov    eax,edi
c0013345:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013349:	5b                   	pop    ebx
c001334a:	5e                   	pop    esi
c001334b:	5f                   	pop    edi
c001334c:	ff e0                	jmp    eax

c001334e <secondsToDatetime(unsigned long long)>:
c001334e:	55                   	push   ebp
c001334f:	57                   	push   edi
c0013350:	56                   	push   esi
c0013351:	53                   	push   ebx
c0013352:	83 ec 1c             	sub    esp,0x1c
c0013355:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013359:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001335d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013361:	6a 00                	push   0x0
c0013363:	68 80 51 01 00       	push   0x15180
c0013368:	55                   	push   ebp
c0013369:	57                   	push   edi
c001336a:	e8 cd 01 01 00       	call   c002353c <__udivdi3>
c001336f:	83 c4 10             	add    esp,0x10
c0013372:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013378:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001337c:	6a 00                	push   0x0
c001337e:	68 80 51 01 00       	push   0x15180
c0013383:	55                   	push   ebp
c0013384:	57                   	push   edi
c0013385:	bf 10 0e 00 00       	mov    edi,0xe10
c001338a:	e8 ad 02 01 00       	call   c002363c <__umoddi3>
c001338f:	83 c4 10             	add    esp,0x10
c0013392:	99                   	cdq    
c0013393:	f7 ff                	idiv   edi
c0013395:	bf 3c 00 00 00       	mov    edi,0x3c
c001339a:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c001339d:	89 d0                	mov    eax,edx
c001339f:	99                   	cdq    
c00133a0:	f7 ff                	idiv   edi
c00133a2:	85 db                	test   ebx,ebx
c00133a4:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c00133a7:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00133aa:	79 11                	jns    c00133bd <secondsToDatetime(unsigned long long)+0x6f>
c00133ac:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00133b0:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00133b6:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00133bb:	eb 07                	jmp    c00133c4 <secondsToDatetime(unsigned long long)+0x76>
c00133bd:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00133c2:	89 d8                	mov    eax,ebx
c00133c4:	bf b4 05 00 00       	mov    edi,0x5b4
c00133c9:	99                   	cdq    
c00133ca:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00133cf:	f7 f9                	idiv   ecx
c00133d1:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00133d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00133da:	31 d2                	xor    edx,edx
c00133dc:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c00133e4:	01 c3                	add    ebx,eax
c00133e6:	89 d8                	mov    eax,ebx
c00133e8:	f7 f1                	div    ecx
c00133ea:	31 d2                	xor    edx,edx
c00133ec:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c00133ef:	89 d8                	mov    eax,ebx
c00133f1:	f7 f7                	div    edi
c00133f3:	31 d2                	xor    edx,edx
c00133f5:	29 c1                	sub    ecx,eax
c00133f7:	89 d8                	mov    eax,ebx
c00133f9:	f7 f5                	div    ebp
c00133fb:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013400:	29 c1                	sub    ecx,eax
c0013402:	31 d2                	xor    edx,edx
c0013404:	89 c8                	mov    eax,ecx
c0013406:	f7 f5                	div    ebp
c0013408:	bd 94 8e 00 00       	mov    ebp,0x8e94
c001340d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013411:	31 d2                	xor    edx,edx
c0013413:	89 c8                	mov    eax,ecx
c0013415:	f7 f5                	div    ebp
c0013417:	31 d2                	xor    edx,edx
c0013419:	01 c3                	add    ebx,eax
c001341b:	89 c8                	mov    eax,ecx
c001341d:	f7 f7                	div    edi
c001341f:	bf 99 00 00 00       	mov    edi,0x99
c0013424:	29 c3                	sub    ebx,eax
c0013426:	31 d2                	xor    edx,edx
c0013428:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013430:	29 c3                	sub    ebx,eax
c0013432:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013435:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013438:	bb 05 00 00 00       	mov    ebx,0x5
c001343d:	83 c1 02             	add    ecx,0x2
c0013440:	89 c8                	mov    eax,ecx
c0013442:	f7 f7                	div    edi
c0013444:	31 d2                	xor    edx,edx
c0013446:	89 c7                	mov    edi,eax
c0013448:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c001344e:	83 c0 02             	add    eax,0x2
c0013451:	f7 f3                	div    ebx
c0013453:	89 eb                	mov    ebx,ebp
c0013455:	29 c3                	sub    ebx,eax
c0013457:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c001345d:	88 1e                	mov    BYTE PTR [esi],bl
c001345f:	19 c0                	sbb    eax,eax
c0013461:	31 d2                	xor    edx,edx
c0013463:	83 e0 0c             	and    eax,0xc
c0013466:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c001346a:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013472:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0013476:	83 f9 01             	cmp    ecx,0x1
c0013479:	0f 96 c2             	setbe  dl
c001347c:	41                   	inc    ecx
c001347d:	01 d0                	add    eax,edx
c001347f:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0013482:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0013486:	83 c4 1c             	add    esp,0x1c
c0013489:	89 f0                	mov    eax,esi
c001348b:	5b                   	pop    ebx
c001348c:	5e                   	pop    esi
c001348d:	5f                   	pop    edi
c001348e:	5d                   	pop    ebp
c001348f:	c2 04 00             	ret    0x4

c0013492 <Clock::timeInDatetimeLocal()>:
c0013492:	53                   	push   ebx
c0013493:	83 ec 14             	sub    esp,0x14
c0013496:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001349a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001349e:	e8 83 fc ff ff       	call   c0013126 <Clock::timeInSecondsLocal()>
c00134a3:	83 c4 0c             	add    esp,0xc
c00134a6:	52                   	push   edx
c00134a7:	50                   	push   eax
c00134a8:	53                   	push   ebx
c00134a9:	e8 a0 fe ff ff       	call   c001334e <secondsToDatetime(unsigned long long)>
c00134ae:	89 d8                	mov    eax,ebx
c00134b0:	83 c4 14             	add    esp,0x14
c00134b3:	5b                   	pop    ebx
c00134b4:	c2 04 00             	ret    0x4
c00134b7:	90                   	nop

c00134b8 <Device::hibernate()>:
c00134b8:	c3                   	ret    
c00134b9:	90                   	nop

c00134ba <Device::wake()>:
c00134ba:	c3                   	ret    
c00134bb:	90                   	nop

c00134bc <Device::detect()>:
c00134bc:	c3                   	ret    
c00134bd:	90                   	nop

c00134be <Device::disableLegacy()>:
c00134be:	c3                   	ret    
c00134bf:	90                   	nop

c00134c0 <Device::powerSaving(PowerSavingLevel)>:
c00134c0:	c3                   	ret    
c00134c1:	90                   	nop

c00134c2 <DriverlessDevice::close(int, int, void*)>:
c00134c2:	31 c0                	xor    eax,eax
c00134c4:	c3                   	ret    
c00134c5:	90                   	nop

c00134c6 <DriverlessDevice::detect()>:
c00134c6:	c3                   	ret    
c00134c7:	90                   	nop

c00134c8 <DriverlessDevice::open(int, int, void*)>:
c00134c8:	83 ec 18             	sub    esp,0x18
c00134cb:	68 10 76 02 c0       	push   0xc0027610
c00134d0:	e8 d2 55 00 00       	call   c0018aa7 <Krnl::panic(char const*)>
c00134d5:	83 c8 ff             	or     eax,0xffffffff
c00134d8:	83 c4 1c             	add    esp,0x1c
c00134db:	c3                   	ret    

c00134dc <Device::~Device()>:
c00134dc:	ba 38 76 02 c0       	mov    edx,0xc0027638
c00134e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00134e5:	89 10                	mov    DWORD PTR [eax],edx
c00134e7:	90                   	nop
c00134e8:	c3                   	ret    
c00134e9:	90                   	nop

c00134ea <Device::~Device()>:
c00134ea:	83 ec 0c             	sub    esp,0xc
c00134ed:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00134f1:	e8 e6 ff ff ff       	call   c00134dc <Device::~Device()>
c00134f6:	83 c4 04             	add    esp,0x4
c00134f9:	83 ec 08             	sub    esp,0x8
c00134fc:	68 58 01 00 00       	push   0x158
c0013501:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013505:	e8 45 ec ff ff       	call   c001214f <operator delete(void*, unsigned long)>
c001350a:	83 c4 10             	add    esp,0x10
c001350d:	83 c4 0c             	add    esp,0xc
c0013510:	c3                   	ret    
c0013511:	90                   	nop

c0013512 <Device::findAndLoadDriver()>:
c0013512:	c3                   	ret    
c0013513:	90                   	nop

c0013514 <Device::preOpenPCI(PCIDeviceInfo)>:
c0013514:	57                   	push   edi
c0013515:	b9 09 00 00 00       	mov    ecx,0x9
c001351a:	56                   	push   esi
c001351b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001351f:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013523:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c001352d:	81 c7 18 01 00 00    	add    edi,0x118
c0013533:	fc                   	cld    
c0013534:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013536:	5e                   	pop    esi
c0013537:	5f                   	pop    edi
c0013538:	c3                   	ret    
c0013539:	90                   	nop

c001353a <Device::preOpenACPI(void*, char*, char*)>:
c001353a:	56                   	push   esi
c001353b:	53                   	push   ebx
c001353c:	83 ec 08             	sub    esp,0x8
c001353f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013543:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013547:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0013551:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013555:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c001355b:	6a 1e                	push   0x1e
c001355d:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0013563:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013567:	81 c3 3a 01 00 00    	add    ebx,0x13a
c001356d:	50                   	push   eax
c001356e:	e8 d4 d0 fe ff       	call   c0000647 <memcpy>
c0013573:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0013577:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001357b:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0013583:	83 c4 14             	add    esp,0x14
c0013586:	5b                   	pop    ebx
c0013587:	5e                   	pop    esi
c0013588:	e9 ba d0 fe ff       	jmp    c0000647 <memcpy>
c001358d:	90                   	nop

c001358e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001358e:	55                   	push   ebp
c001358f:	57                   	push   edi
c0013590:	56                   	push   esi
c0013591:	53                   	push   ebx
c0013592:	83 ec 0c             	sub    esp,0xc
c0013595:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013599:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001359d:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00135a1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00135a5:	0f b6 5c 24 2c       	movzx  ebx,BYTE PTR [esp+0x2c]
c00135aa:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00135b1:	75 0b                	jne    c00135be <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x30>
c00135b3:	8b 00                	mov    eax,DWORD PTR [eax]
c00135b5:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00135b9:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00135bc:	eb 24                	jmp    c00135e2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x54>
c00135be:	e8 7d 1c 01 00       	call   c0025240 <CPU::current()>
c00135c3:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00135c9:	8b 10                	mov    edx,DWORD PTR [eax]
c00135cb:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00135cf:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00135d3:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c00135d7:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00135db:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00135df:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00135e2:	83 c4 0c             	add    esp,0xc
c00135e5:	5b                   	pop    ebx
c00135e6:	5e                   	pop    esi
c00135e7:	5f                   	pop    edi
c00135e8:	5d                   	pop    ebp
c00135e9:	ff e0                	jmp    eax
c00135eb:	90                   	nop

c00135ec <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00135ec:	57                   	push   edi
c00135ed:	56                   	push   esi
c00135ee:	53                   	push   ebx
c00135ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135f3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00135f7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00135fb:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c0013600:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013607:	75 0b                	jne    c0013614 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x28>
c0013609:	8b 00                	mov    eax,DWORD PTR [eax]
c001360b:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c001360f:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013612:	eb 20                	jmp    c0013634 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x48>
c0013614:	e8 27 1c 01 00       	call   c0025240 <CPU::current()>
c0013619:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001361f:	8b 10                	mov    edx,DWORD PTR [eax]
c0013621:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0013625:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0013629:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001362d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013631:	8b 42 30             	mov    eax,DWORD PTR [edx+0x30]
c0013634:	5b                   	pop    ebx
c0013635:	5e                   	pop    esi
c0013636:	5f                   	pop    edi
c0013637:	ff e0                	jmp    eax
c0013639:	90                   	nop

c001363a <Device::addChild(Device*)>:
c001363a:	53                   	push   ebx
c001363b:	83 ec 08             	sub    esp,0x8
c001363e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013642:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013646:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c001364c:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013652:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013654:	85 d2                	test   edx,edx
c0013656:	74 04                	je     c001365c <Device::addChild(Device*)+0x22>
c0013658:	89 d3                	mov    ebx,edx
c001365a:	eb f6                	jmp    c0013652 <Device::addChild(Device*)+0x18>
c001365c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001365f:	83 ec 0c             	sub    esp,0xc
c0013662:	6a 08                	push   0x8
c0013664:	e8 d7 ea ff ff       	call   c0012140 <operator new(unsigned long)>
c0013669:	89 03                	mov    DWORD PTR [ebx],eax
c001366b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013671:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013678:	83 c4 18             	add    esp,0x18
c001367b:	5b                   	pop    ebx
c001367c:	c3                   	ret    
c001367d:	90                   	nop

c001367e <Device::removeAllChildren()>:
c001367e:	56                   	push   esi
c001367f:	53                   	push   ebx
c0013680:	52                   	push   edx
c0013681:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013685:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c001368b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001368e:	74 17                	je     c00136a7 <Device::removeAllChildren()+0x29>
c0013690:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013693:	85 c0                	test   eax,eax
c0013695:	74 0c                	je     c00136a3 <Device::removeAllChildren()+0x25>
c0013697:	83 ec 0c             	sub    esp,0xc
c001369a:	8b 10                	mov    edx,DWORD PTR [eax]
c001369c:	50                   	push   eax
c001369d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00136a0:	83 c4 10             	add    esp,0x10
c00136a3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00136a5:	eb e4                	jmp    c001368b <Device::removeAllChildren()+0xd>
c00136a7:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00136ad:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00136b3:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00136b9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00136c0:	58                   	pop    eax
c00136c1:	5b                   	pop    ebx
c00136c2:	5e                   	pop    esi
c00136c3:	c3                   	ret    

c00136c4 <Device::hibernateAll()>:
c00136c4:	53                   	push   ebx
c00136c5:	83 ec 14             	sub    esp,0x14
c00136c8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00136cc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00136ce:	53                   	push   ebx
c00136cf:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00136d2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00136d8:	83 c4 10             	add    esp,0x10
c00136db:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00136de:	74 0f                	je     c00136ef <Device::hibernateAll()+0x2b>
c00136e0:	83 ec 0c             	sub    esp,0xc
c00136e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00136e6:	e8 d9 ff ff ff       	call   c00136c4 <Device::hibernateAll()>
c00136eb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00136ed:	eb e9                	jmp    c00136d8 <Device::hibernateAll()+0x14>
c00136ef:	83 c4 08             	add    esp,0x8
c00136f2:	5b                   	pop    ebx
c00136f3:	c3                   	ret    

c00136f4 <Device::wakeAll()>:
c00136f4:	53                   	push   ebx
c00136f5:	83 ec 14             	sub    esp,0x14
c00136f8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00136fc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00136fe:	53                   	push   ebx
c00136ff:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013702:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013708:	83 c4 10             	add    esp,0x10
c001370b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001370e:	74 0f                	je     c001371f <Device::wakeAll()+0x2b>
c0013710:	83 ec 0c             	sub    esp,0xc
c0013713:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013716:	e8 d9 ff ff ff       	call   c00136f4 <Device::wakeAll()>
c001371b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001371d:	eb e9                	jmp    c0013708 <Device::wakeAll()+0x14>
c001371f:	83 c4 08             	add    esp,0x8
c0013722:	5b                   	pop    ebx
c0013723:	c3                   	ret    

c0013724 <Device::detectAll()>:
c0013724:	53                   	push   ebx
c0013725:	83 ec 14             	sub    esp,0x14
c0013728:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001372c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001372e:	53                   	push   ebx
c001372f:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013732:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013738:	83 c4 10             	add    esp,0x10
c001373b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001373e:	74 0f                	je     c001374f <Device::detectAll()+0x2b>
c0013740:	83 ec 0c             	sub    esp,0xc
c0013743:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013746:	e8 d9 ff ff ff       	call   c0013724 <Device::detectAll()>
c001374b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001374d:	eb e9                	jmp    c0013738 <Device::detectAll()+0x14>
c001374f:	83 c4 08             	add    esp,0x8
c0013752:	5b                   	pop    ebx
c0013753:	c3                   	ret    

c0013754 <Device::disableLegacyAll()>:
c0013754:	53                   	push   ebx
c0013755:	83 ec 14             	sub    esp,0x14
c0013758:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001375c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001375e:	53                   	push   ebx
c001375f:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013762:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013768:	83 c4 10             	add    esp,0x10
c001376b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001376e:	74 0f                	je     c001377f <Device::disableLegacyAll()+0x2b>
c0013770:	83 ec 0c             	sub    esp,0xc
c0013773:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013776:	e8 d9 ff ff ff       	call   c0013754 <Device::disableLegacyAll()>
c001377b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001377d:	eb e9                	jmp    c0013768 <Device::disableLegacyAll()+0x14>
c001377f:	83 c4 08             	add    esp,0x8
c0013782:	5b                   	pop    ebx
c0013783:	c3                   	ret    

c0013784 <Device::loadDriversForAll()>:
c0013784:	53                   	push   ebx
c0013785:	83 ec 08             	sub    esp,0x8
c0013788:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001378c:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013792:	8b 18                	mov    ebx,DWORD PTR [eax]
c0013794:	85 db                	test   ebx,ebx
c0013796:	74 12                	je     c00137aa <Device::loadDriversForAll()+0x26>
c0013798:	83 ec 0c             	sub    esp,0xc
c001379b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001379e:	e8 e1 ff ff ff       	call   c0013784 <Device::loadDriversForAll()>
c00137a3:	83 c4 10             	add    esp,0x10
c00137a6:	89 d8                	mov    eax,ebx
c00137a8:	eb e8                	jmp    c0013792 <Device::loadDriversForAll()+0xe>
c00137aa:	83 c4 08             	add    esp,0x8
c00137ad:	5b                   	pop    ebx
c00137ae:	c3                   	ret    
c00137af:	90                   	nop

c00137b0 <Device::closeAll()>:
c00137b0:	53                   	push   ebx
c00137b1:	83 ec 08             	sub    esp,0x8
c00137b4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00137b8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00137ba:	6a 00                	push   0x0
c00137bc:	6a 00                	push   0x0
c00137be:	6a 00                	push   0x0
c00137c0:	53                   	push   ebx
c00137c1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00137c4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00137ca:	83 c4 10             	add    esp,0x10
c00137cd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00137d0:	74 0f                	je     c00137e1 <Device::closeAll()+0x31>
c00137d2:	83 ec 0c             	sub    esp,0xc
c00137d5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00137d8:	e8 d3 ff ff ff       	call   c00137b0 <Device::closeAll()>
c00137dd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00137df:	eb e9                	jmp    c00137ca <Device::closeAll()+0x1a>
c00137e1:	83 c4 08             	add    esp,0x8
c00137e4:	5b                   	pop    ebx
c00137e5:	c3                   	ret    

c00137e6 <Device::powerSavingAll(PowerSavingLevel)>:
c00137e6:	56                   	push   esi
c00137e7:	53                   	push   ebx
c00137e8:	83 ec 0c             	sub    esp,0xc
c00137eb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00137ef:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00137f3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00137f5:	56                   	push   esi
c00137f6:	53                   	push   ebx
c00137f7:	ff 50 20             	call   DWORD PTR [eax+0x20]
c00137fa:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013800:	83 c4 10             	add    esp,0x10
c0013803:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013806:	74 0f                	je     c0013817 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013808:	52                   	push   edx
c0013809:	52                   	push   edx
c001380a:	56                   	push   esi
c001380b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001380e:	e8 d3 ff ff ff       	call   c00137e6 <Device::powerSavingAll(PowerSavingLevel)>
c0013813:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013815:	eb e9                	jmp    c0013800 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013817:	58                   	pop    eax
c0013818:	5b                   	pop    ebx
c0013819:	5e                   	pop    esi
c001381a:	c3                   	ret    
c001381b:	90                   	nop

c001381c <Device::setName(char const*)>:
c001381c:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013824:	e9 f3 ce fe ff       	jmp    c000071c <strcpy>
c0013829:	90                   	nop

c001382a <Device::Device(char const*)>:
c001382a:	83 ec 0c             	sub    esp,0xc
c001382d:	ba 38 76 02 c0       	mov    edx,0xc0027638
c0013832:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013836:	89 10                	mov    DWORD PTR [eax],edx
c0013838:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001383c:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013846:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001384a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013854:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013858:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013862:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013866:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013870:	83 ec 08             	sub    esp,0x8
c0013873:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013877:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001387b:	e8 9c ff ff ff       	call   c001381c <Device::setName(char const*)>
c0013880:	83 c4 10             	add    esp,0x10
c0013883:	83 ec 0c             	sub    esp,0xc
c0013886:	6a 08                	push   0x8
c0013888:	e8 b3 e8 ff ff       	call   c0012140 <operator new(unsigned long)>
c001388d:	83 c4 10             	add    esp,0x10
c0013890:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013896:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001389d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00138a1:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c00138a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138ab:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00138b1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00138b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138bb:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00138c1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00138c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138cc:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00138d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138d7:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c00138de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138e2:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00138ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138f0:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00138fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138fe:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001390c:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013916:	90                   	nop
c0013917:	83 c4 0c             	add    esp,0xc
c001391a:	c3                   	ret    
c001391b:	90                   	nop

c001391c <Device::getName()>:
c001391c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013920:	05 d0 00 00 00       	add    eax,0xd0
c0013925:	c3                   	ret    

c0013926 <DriverlessDevice::DriverlessDevice(char const*)>:
c0013926:	83 ec 0c             	sub    esp,0xc
c0013929:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001392d:	83 ec 08             	sub    esp,0x8
c0013930:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013934:	50                   	push   eax
c0013935:	e8 f0 fe ff ff       	call   c001382a <Device::Device(char const*)>
c001393a:	83 c4 10             	add    esp,0x10
c001393d:	ba 64 76 02 c0       	mov    edx,0xc0027664
c0013942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013946:	89 10                	mov    DWORD PTR [eax],edx
c0013948:	90                   	nop
c0013949:	83 c4 0c             	add    esp,0xc
c001394c:	c3                   	ret    
c001394d:	90                   	nop

c001394e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c001394e:	57                   	push   edi
c001394f:	56                   	push   esi
c0013950:	53                   	push   ebx
c0013951:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013955:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013959:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001395d:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0013963:	75 0c                	jne    c0013971 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0013965:	52                   	push   edx
c0013966:	52                   	push   edx
c0013967:	53                   	push   ebx
c0013968:	56                   	push   esi
c0013969:	e8 32 1b 01 00       	call   c00254a0 <LinkedList<Device>::addElement(Device*)>
c001396e:	83 c4 10             	add    esp,0x10
c0013971:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013977:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001397a:	74 12                	je     c001398e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c001397c:	50                   	push   eax
c001397d:	57                   	push   edi
c001397e:	56                   	push   esi
c001397f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013982:	e8 c7 ff ff ff       	call   c001394e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013987:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013989:	83 c4 10             	add    esp,0x10
c001398c:	eb e9                	jmp    c0013977 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c001398e:	5b                   	pop    ebx
c001398f:	5e                   	pop    esi
c0013990:	5f                   	pop    edi
c0013991:	c3                   	ret    

c0013992 <getDevicesOfType(DeviceType)>:
c0013992:	53                   	push   ebx
c0013993:	83 ec 14             	sub    esp,0x14
c0013996:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001399a:	53                   	push   ebx
c001399b:	e8 dc 1b 01 00       	call   c002557c <LinkedList<Device>::LinkedList()>
c00139a0:	83 c4 0c             	add    esp,0xc
c00139a3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00139a7:	53                   	push   ebx
c00139a8:	ff 35 28 a6 02 c0    	push   DWORD PTR ds:0xc002a628
c00139ae:	e8 9b ff ff ff       	call   c001394e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00139b3:	89 d8                	mov    eax,ebx
c00139b5:	83 c4 18             	add    esp,0x18
c00139b8:	5b                   	pop    ebx
c00139b9:	c2 04 00             	ret    0x4

c00139bc <HardDiskController::HardDiskController(char const*)>:
c00139bc:	83 ec 0c             	sub    esp,0xc
c00139bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139c3:	83 ec 08             	sub    esp,0x8
c00139c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00139ca:	50                   	push   eax
c00139cb:	e8 5a fe ff ff       	call   c001382a <Device::Device(char const*)>
c00139d0:	83 c4 10             	add    esp,0x10
c00139d3:	ba 90 76 02 c0       	mov    edx,0xc0027690
c00139d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139dc:	89 10                	mov    DWORD PTR [eax],edx
c00139de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139e2:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00139ec:	90                   	nop
c00139ed:	83 c4 0c             	add    esp,0xc
c00139f0:	c3                   	ret    
c00139f1:	90                   	nop

c00139f2 <HardDiskController::~HardDiskController()>:
c00139f2:	83 ec 0c             	sub    esp,0xc
c00139f5:	ba 90 76 02 c0       	mov    edx,0xc0027690
c00139fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139fe:	89 10                	mov    DWORD PTR [eax],edx
c0013a00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a04:	83 ec 0c             	sub    esp,0xc
c0013a07:	50                   	push   eax
c0013a08:	e8 cf fa ff ff       	call   c00134dc <Device::~Device()>
c0013a0d:	83 c4 10             	add    esp,0x10
c0013a10:	90                   	nop
c0013a11:	83 c4 0c             	add    esp,0xc
c0013a14:	c3                   	ret    
c0013a15:	90                   	nop

c0013a16 <HardDiskController::~HardDiskController()>:
c0013a16:	83 ec 0c             	sub    esp,0xc
c0013a19:	83 ec 0c             	sub    esp,0xc
c0013a1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a20:	e8 cd ff ff ff       	call   c00139f2 <HardDiskController::~HardDiskController()>
c0013a25:	83 c4 10             	add    esp,0x10
c0013a28:	83 ec 08             	sub    esp,0x8
c0013a2b:	68 58 01 00 00       	push   0x158
c0013a30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a34:	e8 16 e7 ff ff       	call   c001214f <operator delete(void*, unsigned long)>
c0013a39:	83 c4 10             	add    esp,0x10
c0013a3c:	83 c4 0c             	add    esp,0xc
c0013a3f:	c3                   	ret    

c0013a40 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0013a40:	83 ec 0c             	sub    esp,0xc
c0013a43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a47:	83 ec 08             	sub    esp,0x8
c0013a4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a4e:	50                   	push   eax
c0013a4f:	e8 d6 fd ff ff       	call   c001382a <Device::Device(char const*)>
c0013a54:	83 c4 10             	add    esp,0x10
c0013a57:	ba bc 76 02 c0       	mov    edx,0xc00276bc
c0013a5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a60:	89 10                	mov    DWORD PTR [eax],edx
c0013a62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a66:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0013a6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a71:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0013a78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a7c:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0013a86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a8a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013a8e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0013a94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a98:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013aa2:	90                   	nop
c0013aa3:	83 c4 0c             	add    esp,0xc
c0013aa6:	c3                   	ret    
c0013aa7:	90                   	nop

c0013aa8 <PhysicalDisk::startCache()>:
c0013aa8:	56                   	push   esi
c0013aa9:	53                   	push   ebx
c0013aaa:	83 ec 10             	sub    esp,0x10
c0013aad:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013ab1:	6a 30                	push   0x30
c0013ab3:	e8 88 e6 ff ff       	call   c0012140 <operator new(unsigned long)>
c0013ab8:	89 c6                	mov    esi,eax
c0013aba:	58                   	pop    eax
c0013abb:	5a                   	pop    edx
c0013abc:	53                   	push   ebx
c0013abd:	56                   	push   esi
c0013abe:	e8 15 25 00 00       	call   c0015fd8 <VCache::VCache(PhysicalDisk*)>
c0013ac3:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0013ac9:	83 c4 14             	add    esp,0x14
c0013acc:	5b                   	pop    ebx
c0013acd:	5e                   	pop    esi
c0013ace:	c3                   	ret    
c0013acf:	90                   	nop

c0013ad0 <PhysicalDisk::~PhysicalDisk()>:
c0013ad0:	83 ec 0c             	sub    esp,0xc
c0013ad3:	ba bc 76 02 c0       	mov    edx,0xc00276bc
c0013ad8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013adc:	89 10                	mov    DWORD PTR [eax],edx
c0013ade:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ae2:	83 ec 0c             	sub    esp,0xc
c0013ae5:	50                   	push   eax
c0013ae6:	e8 f1 f9 ff ff       	call   c00134dc <Device::~Device()>
c0013aeb:	83 c4 10             	add    esp,0x10
c0013aee:	90                   	nop
c0013aef:	83 c4 0c             	add    esp,0xc
c0013af2:	c3                   	ret    
c0013af3:	90                   	nop

c0013af4 <PhysicalDisk::~PhysicalDisk()>:
c0013af4:	83 ec 0c             	sub    esp,0xc
c0013af7:	83 ec 0c             	sub    esp,0xc
c0013afa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013afe:	e8 cd ff ff ff       	call   c0013ad0 <PhysicalDisk::~PhysicalDisk()>
c0013b03:	83 c4 10             	add    esp,0x10
c0013b06:	83 ec 08             	sub    esp,0x8
c0013b09:	68 6c 01 00 00       	push   0x16c
c0013b0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b12:	e8 38 e6 ff ff       	call   c001214f <operator delete(void*, unsigned long)>
c0013b17:	83 c4 10             	add    esp,0x10
c0013b1a:	83 c4 0c             	add    esp,0xc
c0013b1d:	c3                   	ret    

c0013b1e <FPU::FPU(char const*)>:
c0013b1e:	83 ec 0c             	sub    esp,0xc
c0013b21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b25:	83 ec 08             	sub    esp,0x8
c0013b28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b2c:	50                   	push   eax
c0013b2d:	e8 f8 fc ff ff       	call   c001382a <Device::Device(char const*)>
c0013b32:	83 c4 10             	add    esp,0x10
c0013b35:	ba fc 76 02 c0       	mov    edx,0xc00276fc
c0013b3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b3e:	89 10                	mov    DWORD PTR [eax],edx
c0013b40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b44:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0013b4e:	90                   	nop
c0013b4f:	83 c4 0c             	add    esp,0xc
c0013b52:	c3                   	ret    
c0013b53:	90                   	nop

c0013b54 <FPU::~FPU()>:
c0013b54:	83 ec 0c             	sub    esp,0xc
c0013b57:	ba fc 76 02 c0       	mov    edx,0xc00276fc
c0013b5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b60:	89 10                	mov    DWORD PTR [eax],edx
c0013b62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b66:	83 ec 0c             	sub    esp,0xc
c0013b69:	50                   	push   eax
c0013b6a:	e8 6d f9 ff ff       	call   c00134dc <Device::~Device()>
c0013b6f:	83 c4 10             	add    esp,0x10
c0013b72:	90                   	nop
c0013b73:	83 c4 0c             	add    esp,0xc
c0013b76:	c3                   	ret    
c0013b77:	90                   	nop

c0013b78 <FPU::~FPU()>:
c0013b78:	83 ec 0c             	sub    esp,0xc
c0013b7b:	83 ec 0c             	sub    esp,0xc
c0013b7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b82:	e8 cd ff ff ff       	call   c0013b54 <FPU::~FPU()>
c0013b87:	83 c4 10             	add    esp,0x10
c0013b8a:	83 ec 08             	sub    esp,0x8
c0013b8d:	68 58 01 00 00       	push   0x158
c0013b92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b96:	e8 b4 e5 ff ff       	call   c001214f <operator delete(void*, unsigned long)>
c0013b9b:	83 c4 10             	add    esp,0x10
c0013b9e:	83 c4 0c             	add    esp,0xc
c0013ba1:	c3                   	ret    

c0013ba2 <setupFPU()>:
c0013ba2:	53                   	push   ebx
c0013ba3:	83 ec 08             	sub    esp,0x8
c0013ba6:	8b 15 28 a6 02 c0    	mov    edx,DWORD PTR ds:0xc002a628
c0013bac:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0013bb3:	74 19                	je     c0013bce <setupFPU()+0x2c>
c0013bb5:	83 ec 0c             	sub    esp,0xc
c0013bb8:	68 58 01 00 00       	push   0x158
c0013bbd:	e8 7e e5 ff ff       	call   c0012140 <operator new(unsigned long)>
c0013bc2:	89 c3                	mov    ebx,eax
c0013bc4:	89 04 24             	mov    DWORD PTR [esp],eax
c0013bc7:	e8 1a e5 00 00       	call   c00220e6 <AVX::AVX()>
c0013bcc:	eb 5b                	jmp    c0013c29 <setupFPU()+0x87>
c0013bce:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0013bd4:	84 c0                	test   al,al
c0013bd6:	79 19                	jns    c0013bf1 <setupFPU()+0x4f>
c0013bd8:	83 ec 0c             	sub    esp,0xc
c0013bdb:	68 58 01 00 00       	push   0x158
c0013be0:	e8 5b e5 ff ff       	call   c0012140 <operator new(unsigned long)>
c0013be5:	89 c3                	mov    ebx,eax
c0013be7:	89 04 24             	mov    DWORD PTR [esp],eax
c0013bea:	e8 1d e6 00 00       	call   c002220c <SSE::SSE()>
c0013bef:	eb 38                	jmp    c0013c29 <setupFPU()+0x87>
c0013bf1:	a8 20                	test   al,0x20
c0013bf3:	74 19                	je     c0013c0e <setupFPU()+0x6c>
c0013bf5:	83 ec 0c             	sub    esp,0xc
c0013bf8:	68 58 01 00 00       	push   0x158
c0013bfd:	e8 3e e5 ff ff       	call   c0012140 <operator new(unsigned long)>
c0013c02:	89 c3                	mov    ebx,eax
c0013c04:	89 04 24             	mov    DWORD PTR [esp],eax
c0013c07:	e8 6a e5 00 00       	call   c0022176 <MMX::MMX()>
c0013c0c:	eb 1b                	jmp    c0013c29 <setupFPU()+0x87>
c0013c0e:	a8 10                	test   al,0x10
c0013c10:	74 1c                	je     c0013c2e <setupFPU()+0x8c>
c0013c12:	83 ec 0c             	sub    esp,0xc
c0013c15:	68 58 01 00 00       	push   0x158
c0013c1a:	e8 21 e5 ff ff       	call   c0012140 <operator new(unsigned long)>
c0013c1f:	89 c3                	mov    ebx,eax
c0013c21:	89 04 24             	mov    DWORD PTR [esp],eax
c0013c24:	e8 71 e6 00 00       	call   c002229a <x87::x87()>
c0013c29:	83 c4 10             	add    esp,0x10
c0013c2c:	eb 35                	jmp    c0013c63 <setupFPU()+0xc1>
c0013c2e:	83 ec 0c             	sub    esp,0xc
c0013c31:	83 e0 ef             	and    eax,0xffffffef
c0013c34:	31 db                	xor    ebx,ebx
c0013c36:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0013c3c:	68 e8 76 02 c0       	push   0xc00276e8
c0013c41:	e8 e9 e5 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c0013c46:	e8 f5 15 01 00       	call   c0025240 <CPU::current()>
c0013c4b:	e8 f0 15 01 00       	call   c0025240 <CPU::current()>
c0013c50:	e8 7f 19 01 00       	call   c00255d4 <CPU::readCR0()>
c0013c55:	83 c8 04             	or     eax,0x4
c0013c58:	89 04 24             	mov    DWORD PTR [esp],eax
c0013c5b:	e8 86 19 01 00       	call   c00255e6 <CPU::writeCR0(unsigned long)>
c0013c60:	83 c4 10             	add    esp,0x10
c0013c63:	89 d8                	mov    eax,ebx
c0013c65:	83 c4 08             	add    esp,0x8
c0013c68:	5b                   	pop    ebx
c0013c69:	c3                   	ret    

c0013c6a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0013c6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013c6e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013c72:	c1 e0 04             	shl    eax,0x4
c0013c75:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0013c79:	8d 50 10             	lea    edx,[eax+0x10]
c0013c7c:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0013c82:	74 08                	je     c0013c8c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0013c84:	83 c0 04             	add    eax,0x4
c0013c87:	39 d0                	cmp    eax,edx
c0013c89:	75 f1                	jne    c0013c7c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0013c8b:	c3                   	ret    
c0013c8c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013c96:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0013ca0:	eb e2                	jmp    c0013c84 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0013ca2 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0013ca2:	57                   	push   edi
c0013ca3:	31 c0                	xor    eax,eax
c0013ca5:	56                   	push   esi
c0013ca6:	53                   	push   ebx
c0013ca7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013cab:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013caf:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013cb3:	89 da                	mov    edx,ebx
c0013cb5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013cb9:	c1 e2 04             	shl    edx,0x4
c0013cbc:	01 ca                	add    edx,ecx
c0013cbe:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0013cc6:	74 16                	je     c0013cde <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0013cc8:	40                   	inc    eax
c0013cc9:	83 f8 04             	cmp    eax,0x4
c0013ccc:	75 f0                	jne    c0013cbe <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0013cce:	c7 44 24 10 2c 77 02 c0 	mov    DWORD PTR [esp+0x10],0xc002772c
c0013cd6:	5b                   	pop    ebx
c0013cd7:	5e                   	pop    esi
c0013cd8:	5f                   	pop    edi
c0013cd9:	e9 c9 4d 00 00       	jmp    c0018aa7 <Krnl::panic(char const*)>
c0013cde:	8d 04 98             	lea    eax,[eax+ebx*4]
c0013ce1:	8d 04 81             	lea    eax,[ecx+eax*4]
c0013ce4:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0013cea:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0013cf0:	5b                   	pop    ebx
c0013cf1:	5e                   	pop    esi
c0013cf2:	5f                   	pop    edi
c0013cf3:	c3                   	ret    

c0013cf4 <doubleFault(regs*, void*)>:
c0013cf4:	55                   	push   ebp
c0013cf5:	89 e5                	mov    ebp,esp
c0013cf7:	83 ec 08             	sub    esp,0x8
c0013cfa:	83 ec 0c             	sub    esp,0xc
c0013cfd:	68 67 77 02 c0       	push   0xc0027767
c0013d02:	e8 a0 4d 00 00       	call   c0018aa7 <Krnl::panic(char const*)>
c0013d07:	83 c4 10             	add    esp,0x10
c0013d0a:	90                   	nop
c0013d0b:	c9                   	leave  
c0013d0c:	c3                   	ret    
c0013d0d:	90                   	nop

c0013d0e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013d0e:	56                   	push   esi
c0013d0f:	53                   	push   ebx
c0013d10:	50                   	push   eax
c0013d11:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013d15:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013d19:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0013d1e:	75 35                	jne    c0013d55 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0013d20:	8d 43 20             	lea    eax,[ebx+0x20]
c0013d23:	31 d2                	xor    edx,edx
c0013d25:	89 c1                	mov    ecx,eax
c0013d27:	c1 e1 04             	shl    ecx,0x4
c0013d2a:	01 f1                	add    ecx,esi
c0013d2c:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0013d34:	74 3e                	je     c0013d74 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0013d36:	42                   	inc    edx
c0013d37:	83 fa 04             	cmp    edx,0x4
c0013d3a:	75 f0                	jne    c0013d2c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0013d3c:	83 ec 0c             	sub    esp,0xc
c0013d3f:	68 ac 77 02 c0       	push   0xc00277ac
c0013d44:	e8 5e 4d 00 00       	call   c0018aa7 <Krnl::panic(char const*)>
c0013d49:	83 c4 10             	add    esp,0x10
c0013d4c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013d51:	5a                   	pop    edx
c0013d52:	5b                   	pop    ebx
c0013d53:	5e                   	pop    esi
c0013d54:	c3                   	ret    
c0013d55:	83 ec 0c             	sub    esp,0xc
c0013d58:	56                   	push   esi
c0013d59:	e8 be fb ff ff       	call   c001391c <Device::getName()>
c0013d5e:	83 c4 10             	add    esp,0x10
c0013d61:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0013d64:	75 ba                	jne    c0013d20 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0013d66:	83 fb 0f             	cmp    ebx,0xf
c0013d69:	7f 29                	jg     c0013d94 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0013d6b:	0f b6 9b 00 99 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd6700]
c0013d72:	eb ac                	jmp    c0013d20 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0013d74:	8d 04 82             	lea    eax,[edx+eax*4]
c0013d77:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013d7b:	8d 04 86             	lea    eax,[esi+eax*4]
c0013d7e:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0013d84:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013d88:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0013d8e:	89 d8                	mov    eax,ebx
c0013d90:	5a                   	pop    edx
c0013d91:	5b                   	pop    ebx
c0013d92:	5e                   	pop    esi
c0013d93:	c3                   	ret    
c0013d94:	83 ec 0c             	sub    esp,0xc
c0013d97:	68 74 77 02 c0       	push   0xc0027774
c0013d9c:	e8 06 4d 00 00       	call   c0018aa7 <Krnl::panic(char const*)>
c0013da1:	83 c4 10             	add    esp,0x10
c0013da4:	e9 77 ff ff ff       	jmp    c0013d20 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0013da9:	90                   	nop

c0013daa <InterruptController::clearAllHandlers(int, bool)>:
c0013daa:	56                   	push   esi
c0013dab:	53                   	push   ebx
c0013dac:	52                   	push   edx
c0013dad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013db1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013db5:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0013dba:	75 61                	jne    c0013e1d <InterruptController::clearAllHandlers(int, bool)+0x73>
c0013dbc:	8d 46 20             	lea    eax,[esi+0x20]
c0013dbf:	c1 e6 04             	shl    esi,0x4
c0013dc2:	c1 e0 04             	shl    eax,0x4
c0013dc5:	01 de                	add    esi,ebx
c0013dc7:	01 d8                	add    eax,ebx
c0013dc9:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0013dd3:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0013ddd:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0013de7:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0013df1:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0013dfb:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0013e05:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0013e0f:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0013e19:	58                   	pop    eax
c0013e1a:	5b                   	pop    ebx
c0013e1b:	5e                   	pop    esi
c0013e1c:	c3                   	ret    
c0013e1d:	83 ec 0c             	sub    esp,0xc
c0013e20:	53                   	push   ebx
c0013e21:	e8 f6 fa ff ff       	call   c001391c <Device::getName()>
c0013e26:	83 c4 10             	add    esp,0x10
c0013e29:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0013e2c:	75 8e                	jne    c0013dbc <InterruptController::clearAllHandlers(int, bool)+0x12>
c0013e2e:	83 fe 0f             	cmp    esi,0xf
c0013e31:	7f 09                	jg     c0013e3c <InterruptController::clearAllHandlers(int, bool)+0x92>
c0013e33:	0f b6 b6 00 99 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd6700]
c0013e3a:	eb 80                	jmp    c0013dbc <InterruptController::clearAllHandlers(int, bool)+0x12>
c0013e3c:	83 ec 0c             	sub    esp,0xc
c0013e3f:	68 e8 77 02 c0       	push   0xc00277e8
c0013e44:	e8 5e 4c 00 00       	call   c0018aa7 <Krnl::panic(char const*)>
c0013e49:	83 c4 10             	add    esp,0x10
c0013e4c:	e9 6b ff ff ff       	jmp    c0013dbc <InterruptController::clearAllHandlers(int, bool)+0x12>
c0013e51:	90                   	nop

c0013e52 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013e52:	56                   	push   esi
c0013e53:	53                   	push   ebx
c0013e54:	52                   	push   edx
c0013e55:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013e59:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013e5d:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0013e62:	75 3a                	jne    c0013e9e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0013e64:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e68:	8d 50 20             	lea    edx,[eax+0x20]
c0013e6b:	c1 e2 04             	shl    edx,0x4
c0013e6e:	8d 04 16             	lea    eax,[esi+edx*1]
c0013e71:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0013e75:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0013e7b:	74 0b                	je     c0013e88 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0013e7d:	83 c0 04             	add    eax,0x4
c0013e80:	39 d0                	cmp    eax,edx
c0013e82:	75 f1                	jne    c0013e75 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0013e84:	58                   	pop    eax
c0013e85:	5b                   	pop    ebx
c0013e86:	5e                   	pop    esi
c0013e87:	c3                   	ret    
c0013e88:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013e92:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0013e9c:	eb df                	jmp    c0013e7d <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0013e9e:	83 ec 0c             	sub    esp,0xc
c0013ea1:	56                   	push   esi
c0013ea2:	e8 75 fa ff ff       	call   c001391c <Device::getName()>
c0013ea7:	83 c4 10             	add    esp,0x10
c0013eaa:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0013ead:	75 b5                	jne    c0013e64 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0013eaf:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0013eb4:	7f 11                	jg     c0013ec7 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0013eb6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013eba:	0f b6 80 00 99 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6700]
c0013ec1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013ec5:	eb 9d                	jmp    c0013e64 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0013ec7:	83 ec 0c             	sub    esp,0xc
c0013eca:	68 e8 77 02 c0       	push   0xc00277e8
c0013ecf:	e8 d3 4b 00 00       	call   c0018aa7 <Krnl::panic(char const*)>
c0013ed4:	83 c4 10             	add    esp,0x10
c0013ed7:	eb 8b                	jmp    c0013e64 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0013ed9 <nmiHandler(regs*, void*)>:
c0013ed9:	a1 28 a6 02 c0       	mov    eax,ds:0xc002a628
c0013ede:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013ee2:	e9 83 a9 ff ff       	jmp    c000e86a <Computer::handleNMI()>

c0013ee7 <int_handler>:
c0013ee7:	55                   	push   ebp
c0013ee8:	57                   	push   edi
c0013ee9:	56                   	push   esi
c0013eea:	53                   	push   ebx
c0013eeb:	83 ec 0c             	sub    esp,0xc
c0013eee:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013ef2:	80 3d 34 b1 02 c0 00 	cmp    BYTE PTR ds:0xc002b134,0x0
c0013ef9:	74 0b                	je     c0013f06 <int_handler+0x1f>
c0013efb:	fa                   	cli    
c0013efc:	f4                   	hlt    
c0013efd:	80 3d 34 b1 02 c0 00 	cmp    BYTE PTR ds:0xc002b134,0x0
c0013f04:	75 f5                	jne    c0013efb <int_handler+0x14>
c0013f06:	e8 35 13 01 00       	call   c0025240 <CPU::current()>
c0013f0b:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0013f0e:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0013f14:	8d 43 e0             	lea    eax,[ebx-0x20]
c0013f17:	83 f8 17             	cmp    eax,0x17
c0013f1a:	77 13                	ja     c0013f2f <int_handler+0x48>
c0013f1c:	83 ec 08             	sub    esp,0x8
c0013f1f:	8b 17                	mov    edx,DWORD PTR [edi]
c0013f21:	8d 43 e0             	lea    eax,[ebx-0x20]
c0013f24:	0f b6 c0             	movzx  eax,al
c0013f27:	50                   	push   eax
c0013f28:	57                   	push   edi
c0013f29:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0013f2c:	83 c4 10             	add    esp,0x10
c0013f2f:	83 c3 15             	add    ebx,0x15
c0013f32:	c1 e3 04             	shl    ebx,0x4
c0013f35:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0013f39:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0013f40:	31 db                	xor    ebx,ebx
c0013f42:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0013f46:	85 c0                	test   eax,eax
c0013f48:	74 13                	je     c0013f5d <int_handler+0x76>
c0013f4a:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0013f4d:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0013f51:	74 1c                	je     c0013f6f <int_handler+0x88>
c0013f53:	83 ec 08             	sub    esp,0x8
c0013f56:	52                   	push   edx
c0013f57:	56                   	push   esi
c0013f58:	ff d0                	call   eax
c0013f5a:	83 c4 10             	add    esp,0x10
c0013f5d:	43                   	inc    ebx
c0013f5e:	83 fb 04             	cmp    ebx,0x4
c0013f61:	75 df                	jne    c0013f42 <int_handler+0x5b>
c0013f63:	83 c4 0c             	add    esp,0xc
c0013f66:	31 c0                	xor    eax,eax
c0013f68:	5b                   	pop    ebx
c0013f69:	31 d2                	xor    edx,edx
c0013f6b:	5e                   	pop    esi
c0013f6c:	5f                   	pop    edi
c0013f6d:	5d                   	pop    ebp
c0013f6e:	c3                   	ret    
c0013f6f:	83 ec 08             	sub    esp,0x8
c0013f72:	52                   	push   edx
c0013f73:	56                   	push   esi
c0013f74:	ff d0                	call   eax
c0013f76:	83 c4 10             	add    esp,0x10
c0013f79:	83 c4 0c             	add    esp,0xc
c0013f7c:	5b                   	pop    ebx
c0013f7d:	5e                   	pop    esi
c0013f7e:	5f                   	pop    edi
c0013f7f:	5d                   	pop    ebp
c0013f80:	c3                   	ret    
c0013f81:	90                   	nop

c0013f82 <InterruptController::InterruptController(char const*)>:
c0013f82:	83 ec 1c             	sub    esp,0x1c
c0013f85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f89:	83 ec 08             	sub    esp,0x8
c0013f8c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013f90:	50                   	push   eax
c0013f91:	e8 94 f8 ff ff       	call   c001382a <Device::Device(char const*)>
c0013f96:	83 c4 10             	add    esp,0x10
c0013f99:	ba 1c 7a 02 c0       	mov    edx,0xc0027a1c
c0013f9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fa2:	89 10                	mov    DWORD PTR [eax],edx
c0013fa4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fa8:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0013fb2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013fba:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0013fc2:	7f 5e                	jg     c0014022 <InterruptController::InterruptController(char const*)+0xa0>
c0013fc4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013fcc:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0013fd1:	7f 49                	jg     c001401c <InterruptController::InterruptController(char const*)+0x9a>
c0013fd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fd7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013fdb:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0013fe2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013fe6:	01 ca                	add    edx,ecx
c0013fe8:	83 c2 54             	add    edx,0x54
c0013feb:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0013ff3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ff7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013ffb:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014002:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014006:	01 ca                	add    edx,ecx
c0014008:	81 c2 54 04 00 00    	add    edx,0x454
c001400e:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014016:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001401a:	eb b0                	jmp    c0013fcc <InterruptController::InterruptController(char const*)+0x4a>
c001401c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014020:	eb 98                	jmp    c0013fba <InterruptController::InterruptController(char const*)+0x38>
c0014022:	90                   	nop
c0014023:	83 c4 1c             	add    esp,0x1c
c0014026:	c3                   	ret    
c0014027:	90                   	nop

c0014028 <InterruptController::~InterruptController()>:
c0014028:	83 ec 0c             	sub    esp,0xc
c001402b:	ba 1c 7a 02 c0       	mov    edx,0xc0027a1c
c0014030:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014034:	89 10                	mov    DWORD PTR [eax],edx
c0014036:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001403a:	83 ec 0c             	sub    esp,0xc
c001403d:	50                   	push   eax
c001403e:	e8 99 f4 ff ff       	call   c00134dc <Device::~Device()>
c0014043:	83 c4 10             	add    esp,0x10
c0014046:	90                   	nop
c0014047:	83 c4 0c             	add    esp,0xc
c001404a:	c3                   	ret    
c001404b:	90                   	nop

c001404c <InterruptController::~InterruptController()>:
c001404c:	83 ec 0c             	sub    esp,0xc
c001404f:	83 ec 0c             	sub    esp,0xc
c0014052:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014056:	e8 cd ff ff ff       	call   c0014028 <InterruptController::~InterruptController()>
c001405b:	83 c4 10             	add    esp,0x10
c001405e:	83 ec 08             	sub    esp,0x8
c0014061:	68 58 21 00 00       	push   0x2158
c0014066:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001406a:	e8 e0 e0 ff ff       	call   c001214f <operator delete(void*, unsigned long)>
c001406f:	83 c4 10             	add    esp,0x10
c0014072:	83 c4 0c             	add    esp,0xc
c0014075:	c3                   	ret    

c0014076 <displayDebugInfo(regs*)>:
c0014076:	55                   	push   ebp
c0014077:	57                   	push   edi
c0014078:	56                   	push   esi
c0014079:	53                   	push   ebx
c001407a:	83 ec 24             	sub    esp,0x24
c001407d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014081:	0f 20 c2             	mov    edx,cr0
c0014084:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014088:	0f 20 d7             	mov    edi,cr2
c001408b:	0f 20 de             	mov    esi,cr3
c001408e:	0f 20 e5             	mov    ebp,cr4
c0014091:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014094:	68 22 78 02 c0       	push   0xc0027822
c0014099:	e8 91 e1 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c001409e:	58                   	pop    eax
c001409f:	5a                   	pop    edx
c00140a0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00140a3:	68 2d 78 02 c0       	push   0xc002782d
c00140a8:	e8 82 e1 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c00140ad:	59                   	pop    ecx
c00140ae:	58                   	pop    eax
c00140af:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00140b2:	68 38 78 02 c0       	push   0xc0027838
c00140b7:	e8 73 e1 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c00140bc:	58                   	pop    eax
c00140bd:	5a                   	pop    edx
c00140be:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00140c1:	68 43 78 02 c0       	push   0xc0027843
c00140c6:	e8 64 e1 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c00140cb:	59                   	pop    ecx
c00140cc:	58                   	pop    eax
c00140cd:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00140d0:	68 4e 78 02 c0       	push   0xc002784e
c00140d5:	e8 55 e1 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c00140da:	58                   	pop    eax
c00140db:	5a                   	pop    edx
c00140dc:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c00140df:	68 59 78 02 c0       	push   0xc0027859
c00140e4:	e8 46 e1 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c00140e9:	59                   	pop    ecx
c00140ea:	58                   	pop    eax
c00140eb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00140ee:	68 64 78 02 c0       	push   0xc0027864
c00140f3:	e8 37 e1 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c00140f8:	58                   	pop    eax
c00140f9:	5a                   	pop    edx
c00140fa:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00140fd:	68 6f 78 02 c0       	push   0xc002786f
c0014102:	e8 28 e1 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c0014107:	59                   	pop    ecx
c0014108:	58                   	pop    eax
c0014109:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c001410c:	68 7a 78 02 c0       	push   0xc002787a
c0014111:	e8 19 e1 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c0014116:	58                   	pop    eax
c0014117:	5a                   	pop    edx
c0014118:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001411b:	68 89 78 02 c0       	push   0xc0027889
c0014120:	e8 0a e1 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c0014125:	59                   	pop    ecx
c0014126:	58                   	pop    eax
c0014127:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001412a:	68 94 78 02 c0       	push   0xc0027894
c001412f:	e8 fb e0 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c0014134:	58                   	pop    eax
c0014135:	5a                   	pop    edx
c0014136:	57                   	push   edi
c0014137:	68 9f 78 02 c0       	push   0xc002789f
c001413c:	e8 ee e0 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c0014141:	59                   	pop    ecx
c0014142:	58                   	pop    eax
c0014143:	56                   	push   esi
c0014144:	68 aa 78 02 c0       	push   0xc00278aa
c0014149:	e8 e1 e0 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c001414e:	58                   	pop    eax
c001414f:	a1 34 bb 02 c0       	mov    eax,ds:0xc002bb34
c0014154:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001415a:	e8 fc c2 ff ff       	call   c001045b <setActiveTerminal(VgaText*)>
c001415f:	58                   	pop    eax
c0014160:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014163:	5a                   	pop    edx
c0014164:	c1 e0 05             	shl    eax,0x5
c0014167:	05 60 96 02 c0       	add    eax,0xc0029660
c001416c:	50                   	push   eax
c001416d:	a1 34 bb 02 c0       	mov    eax,ds:0xc002bb34
c0014172:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014178:	e8 fd c6 ff ff       	call   c001087a <VgaText::puts(char const*)>
c001417d:	59                   	pop    ecx
c001417e:	58                   	pop    eax
c001417f:	a1 34 bb 02 c0       	mov    eax,ds:0xc002bb34
c0014184:	68 b5 78 02 c0       	push   0xc00278b5
c0014189:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001418f:	e8 e6 c6 ff ff       	call   c001087a <VgaText::puts(char const*)>
c0014194:	58                   	pop    eax
c0014195:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001419a:	5a                   	pop    edx
c001419b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001419e:	83 c0 0c             	add    eax,0xc
c00141a1:	50                   	push   eax
c00141a2:	a1 34 bb 02 c0       	mov    eax,ds:0xc002bb34
c00141a7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00141ad:	e8 c8 c6 ff ff       	call   c001087a <VgaText::puts(char const*)>
c00141b2:	59                   	pop    ecx
c00141b3:	58                   	pop    eax
c00141b4:	a1 34 bb 02 c0       	mov    eax,ds:0xc002bb34
c00141b9:	68 be 78 02 c0       	push   0xc00278be
c00141be:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00141c4:	e8 b1 c6 ff ff       	call   c001087a <VgaText::puts(char const*)>
c00141c9:	58                   	pop    eax
c00141ca:	a1 34 bb 02 c0       	mov    eax,ds:0xc002bb34
c00141cf:	5a                   	pop    edx
c00141d0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00141d3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00141d9:	e8 c2 c6 ff ff       	call   c00108a0 <VgaText::putx(unsigned int)>
c00141de:	59                   	pop    ecx
c00141df:	58                   	pop    eax
c00141e0:	a1 34 bb 02 c0       	mov    eax,ds:0xc002bb34
c00141e5:	68 c6 78 02 c0       	push   0xc00278c6
c00141ea:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00141f0:	e8 85 c6 ff ff       	call   c001087a <VgaText::puts(char const*)>
c00141f5:	58                   	pop    eax
c00141f6:	a1 34 bb 02 c0       	mov    eax,ds:0xc002bb34
c00141fb:	5a                   	pop    edx
c00141fc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00141ff:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014205:	e8 96 c6 ff ff       	call   c00108a0 <VgaText::putx(unsigned int)>
c001420a:	59                   	pop    ecx
c001420b:	58                   	pop    eax
c001420c:	a1 34 bb 02 c0       	mov    eax,ds:0xc002bb34
c0014211:	68 ce 78 02 c0       	push   0xc00278ce
c0014216:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001421c:	e8 59 c6 ff ff       	call   c001087a <VgaText::puts(char const*)>
c0014221:	58                   	pop    eax
c0014222:	a1 34 bb 02 c0       	mov    eax,ds:0xc002bb34
c0014227:	5a                   	pop    edx
c0014228:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c001422b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014231:	e8 6a c6 ff ff       	call   c00108a0 <VgaText::putx(unsigned int)>
c0014236:	59                   	pop    ecx
c0014237:	58                   	pop    eax
c0014238:	a1 34 bb 02 c0       	mov    eax,ds:0xc002bb34
c001423d:	68 d6 78 02 c0       	push   0xc00278d6
c0014242:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014248:	e8 2d c6 ff ff       	call   c001087a <VgaText::puts(char const*)>
c001424d:	58                   	pop    eax
c001424e:	a1 34 bb 02 c0       	mov    eax,ds:0xc002bb34
c0014253:	5a                   	pop    edx
c0014254:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014257:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001425d:	e8 3e c6 ff ff       	call   c00108a0 <VgaText::putx(unsigned int)>
c0014262:	59                   	pop    ecx
c0014263:	58                   	pop    eax
c0014264:	a1 34 bb 02 c0       	mov    eax,ds:0xc002bb34
c0014269:	68 de 78 02 c0       	push   0xc00278de
c001426e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014274:	e8 01 c6 ff ff       	call   c001087a <VgaText::puts(char const*)>
c0014279:	58                   	pop    eax
c001427a:	a1 34 bb 02 c0       	mov    eax,ds:0xc002bb34
c001427f:	5a                   	pop    edx
c0014280:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014283:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014289:	e8 12 c6 ff ff       	call   c00108a0 <VgaText::putx(unsigned int)>
c001428e:	59                   	pop    ecx
c001428f:	58                   	pop    eax
c0014290:	a1 34 bb 02 c0       	mov    eax,ds:0xc002bb34
c0014295:	68 e6 78 02 c0       	push   0xc00278e6
c001429a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142a0:	e8 d5 c5 ff ff       	call   c001087a <VgaText::puts(char const*)>
c00142a5:	58                   	pop    eax
c00142a6:	a1 34 bb 02 c0       	mov    eax,ds:0xc002bb34
c00142ab:	5a                   	pop    edx
c00142ac:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c00142af:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142b5:	e8 e6 c5 ff ff       	call   c00108a0 <VgaText::putx(unsigned int)>
c00142ba:	59                   	pop    ecx
c00142bb:	a1 34 bb 02 c0       	mov    eax,ds:0xc002bb34
c00142c0:	5b                   	pop    ebx
c00142c1:	68 ee 78 02 c0       	push   0xc00278ee
c00142c6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142cc:	e8 a9 c5 ff ff       	call   c001087a <VgaText::puts(char const*)>
c00142d1:	58                   	pop    eax
c00142d2:	a1 34 bb 02 c0       	mov    eax,ds:0xc002bb34
c00142d7:	5a                   	pop    edx
c00142d8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00142dc:	52                   	push   edx
c00142dd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142e3:	e8 b8 c5 ff ff       	call   c00108a0 <VgaText::putx(unsigned int)>
c00142e8:	59                   	pop    ecx
c00142e9:	a1 34 bb 02 c0       	mov    eax,ds:0xc002bb34
c00142ee:	5b                   	pop    ebx
c00142ef:	68 f7 78 02 c0       	push   0xc00278f7
c00142f4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142fa:	e8 7b c5 ff ff       	call   c001087a <VgaText::puts(char const*)>
c00142ff:	58                   	pop    eax
c0014300:	a1 34 bb 02 c0       	mov    eax,ds:0xc002bb34
c0014305:	5a                   	pop    edx
c0014306:	57                   	push   edi
c0014307:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001430d:	e8 8e c5 ff ff       	call   c00108a0 <VgaText::putx(unsigned int)>
c0014312:	59                   	pop    ecx
c0014313:	a1 34 bb 02 c0       	mov    eax,ds:0xc002bb34
c0014318:	5b                   	pop    ebx
c0014319:	68 ff 78 02 c0       	push   0xc00278ff
c001431e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014324:	e8 51 c5 ff ff       	call   c001087a <VgaText::puts(char const*)>
c0014329:	5f                   	pop    edi
c001432a:	58                   	pop    eax
c001432b:	a1 34 bb 02 c0       	mov    eax,ds:0xc002bb34
c0014330:	56                   	push   esi
c0014331:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014337:	e8 64 c5 ff ff       	call   c00108a0 <VgaText::putx(unsigned int)>
c001433c:	58                   	pop    eax
c001433d:	a1 34 bb 02 c0       	mov    eax,ds:0xc002bb34
c0014342:	5a                   	pop    edx
c0014343:	68 07 79 02 c0       	push   0xc0027907
c0014348:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001434e:	e8 27 c5 ff ff       	call   c001087a <VgaText::puts(char const*)>
c0014353:	59                   	pop    ecx
c0014354:	a1 34 bb 02 c0       	mov    eax,ds:0xc002bb34
c0014359:	5b                   	pop    ebx
c001435a:	55                   	push   ebp
c001435b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014361:	e8 3a c5 ff ff       	call   c00108a0 <VgaText::putx(unsigned int)>
c0014366:	5e                   	pop    esi
c0014367:	a1 34 bb 02 c0       	mov    eax,ds:0xc002bb34
c001436c:	5f                   	pop    edi
c001436d:	68 0f 79 02 c0       	push   0xc002790f
c0014372:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014378:	e8 fd c4 ff ff       	call   c001087a <VgaText::puts(char const*)>
c001437d:	a1 34 bb 02 c0       	mov    eax,ds:0xc002bb34
c0014382:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014388:	e8 62 12 01 00       	call   c00255ef <CPU::readDR0()>
c001438d:	5d                   	pop    ebp
c001438e:	5a                   	pop    edx
c001438f:	50                   	push   eax
c0014390:	53                   	push   ebx
c0014391:	e8 0a c5 ff ff       	call   c00108a0 <VgaText::putx(unsigned int)>
c0014396:	59                   	pop    ecx
c0014397:	a1 34 bb 02 c0       	mov    eax,ds:0xc002bb34
c001439c:	5b                   	pop    ebx
c001439d:	68 18 79 02 c0       	push   0xc0027918
c00143a2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00143a8:	e8 cd c4 ff ff       	call   c001087a <VgaText::puts(char const*)>
c00143ad:	a1 34 bb 02 c0       	mov    eax,ds:0xc002bb34
c00143b2:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00143b8:	e8 44 12 01 00       	call   c0025601 <CPU::readDR1()>
c00143bd:	5e                   	pop    esi
c00143be:	5f                   	pop    edi
c00143bf:	50                   	push   eax
c00143c0:	53                   	push   ebx
c00143c1:	e8 da c4 ff ff       	call   c00108a0 <VgaText::putx(unsigned int)>
c00143c6:	5d                   	pop    ebp
c00143c7:	58                   	pop    eax
c00143c8:	a1 34 bb 02 c0       	mov    eax,ds:0xc002bb34
c00143cd:	68 20 79 02 c0       	push   0xc0027920
c00143d2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00143d8:	e8 9d c4 ff ff       	call   c001087a <VgaText::puts(char const*)>
c00143dd:	a1 34 bb 02 c0       	mov    eax,ds:0xc002bb34
c00143e2:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00143e8:	e8 26 12 01 00       	call   c0025613 <CPU::readDR2()>
c00143ed:	5a                   	pop    edx
c00143ee:	59                   	pop    ecx
c00143ef:	50                   	push   eax
c00143f0:	53                   	push   ebx
c00143f1:	e8 aa c4 ff ff       	call   c00108a0 <VgaText::putx(unsigned int)>
c00143f6:	5b                   	pop    ebx
c00143f7:	a1 34 bb 02 c0       	mov    eax,ds:0xc002bb34
c00143fc:	5e                   	pop    esi
c00143fd:	68 28 79 02 c0       	push   0xc0027928
c0014402:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014408:	e8 6d c4 ff ff       	call   c001087a <VgaText::puts(char const*)>
c001440d:	a1 34 bb 02 c0       	mov    eax,ds:0xc002bb34
c0014412:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014418:	e8 08 12 01 00       	call   c0025625 <CPU::readDR3()>
c001441d:	5f                   	pop    edi
c001441e:	5d                   	pop    ebp
c001441f:	50                   	push   eax
c0014420:	53                   	push   ebx
c0014421:	e8 7a c4 ff ff       	call   c00108a0 <VgaText::putx(unsigned int)>
c0014426:	58                   	pop    eax
c0014427:	a1 34 bb 02 c0       	mov    eax,ds:0xc002bb34
c001442c:	5a                   	pop    edx
c001442d:	68 30 79 02 c0       	push   0xc0027930
c0014432:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014438:	e8 3d c4 ff ff       	call   c001087a <VgaText::puts(char const*)>
c001443d:	a1 34 bb 02 c0       	mov    eax,ds:0xc002bb34
c0014442:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014448:	e8 ea 11 01 00       	call   c0025637 <CPU::readDR6()>
c001444d:	59                   	pop    ecx
c001444e:	5e                   	pop    esi
c001444f:	50                   	push   eax
c0014450:	53                   	push   ebx
c0014451:	e8 4a c4 ff ff       	call   c00108a0 <VgaText::putx(unsigned int)>
c0014456:	5f                   	pop    edi
c0014457:	a1 34 bb 02 c0       	mov    eax,ds:0xc002bb34
c001445c:	5d                   	pop    ebp
c001445d:	68 38 79 02 c0       	push   0xc0027938
c0014462:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014468:	e8 0d c4 ff ff       	call   c001087a <VgaText::puts(char const*)>
c001446d:	a1 34 bb 02 c0       	mov    eax,ds:0xc002bb34
c0014472:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014478:	e8 cc 11 01 00       	call   c0025649 <CPU::readDR7()>
c001447d:	5a                   	pop    edx
c001447e:	59                   	pop    ecx
c001447f:	50                   	push   eax
c0014480:	53                   	push   ebx
c0014481:	e8 1a c4 ff ff       	call   c00108a0 <VgaText::putx(unsigned int)>
c0014486:	fa                   	cli    
c0014487:	f4                   	hlt    
c0014488:	83 c4 10             	add    esp,0x10
c001448b:	eb fe                	jmp    c001448b <displayDebugInfo(regs*)+0x415>

c001448d <x87EmulHandler(regs*, void*)>:
c001448d:	53                   	push   ebx
c001448e:	83 ec 14             	sub    esp,0x14
c0014491:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014495:	53                   	push   ebx
c0014496:	e8 5e 8e 00 00       	call   c001d2f9 <Vm::x87Handler(regs*)>
c001449b:	83 c4 10             	add    esp,0x10
c001449e:	84 c0                	test   al,al
c00144a0:	74 05                	je     c00144a7 <x87EmulHandler(regs*, void*)+0x1a>
c00144a2:	83 c4 08             	add    esp,0x8
c00144a5:	5b                   	pop    ebx
c00144a6:	c3                   	ret    
c00144a7:	83 ec 0c             	sub    esp,0xc
c00144aa:	68 40 79 02 c0       	push   0xc0027940
c00144af:	e8 7b dd ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c00144b4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00144b7:	e8 ba fb ff ff       	call   c0014076 <displayDebugInfo(regs*)>

c00144bc <gpFault(regs*, void*)>:
c00144bc:	53                   	push   ebx
c00144bd:	83 ec 14             	sub    esp,0x14
c00144c0:	c7 05 b0 a7 02 c0 6d c8 01 c0 	mov    DWORD PTR ds:0xc002a7b0,0xc001c86d
c00144ca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00144ce:	53                   	push   ebx
c00144cf:	e8 99 83 00 00       	call   c001c86d <Vm::faultHandler(regs*)>
c00144d4:	83 c4 10             	add    esp,0x10
c00144d7:	84 c0                	test   al,al
c00144d9:	74 05                	je     c00144e0 <gpFault(regs*, void*)+0x24>
c00144db:	83 c4 08             	add    esp,0x8
c00144de:	5b                   	pop    ebx
c00144df:	c3                   	ret    
c00144e0:	83 ec 0c             	sub    esp,0xc
c00144e3:	68 56 79 02 c0       	push   0xc0027956
c00144e8:	e8 42 dd ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c00144ed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00144f0:	e8 81 fb ff ff       	call   c0014076 <displayDebugInfo(regs*)>

c00144f5 <pgFault(regs*, void*)>:
c00144f5:	83 ec 18             	sub    esp,0x18
c00144f8:	68 71 79 02 c0       	push   0xc0027971
c00144fd:	e8 2d dd ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c0014502:	58                   	pop    eax
c0014503:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014507:	e8 6a fb ff ff       	call   c0014076 <displayDebugInfo(regs*)>

c001450c <otherISRHandler(regs*, void*)>:
c001450c:	53                   	push   ebx
c001450d:	83 ec 0c             	sub    esp,0xc
c0014510:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014514:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014517:	50                   	push   eax
c0014518:	50                   	push   eax
c0014519:	68 7e 79 02 c0       	push   0xc002797e
c001451e:	e8 0c dd ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c0014523:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014526:	e8 4b fb ff ff       	call   c0014076 <displayDebugInfo(regs*)>

c001452b <opcodeFault(regs*, void*)>:
c001452b:	55                   	push   ebp
c001452c:	89 e5                	mov    ebp,esp
c001452e:	56                   	push   esi
c001452f:	53                   	push   ebx
c0014530:	83 ec 40             	sub    esp,0x40
c0014533:	e8 08 0d 01 00       	call   c0025240 <CPU::current()>
c0014538:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c001453e:	84 c0                	test   al,al
c0014540:	74 24                	je     c0014566 <opcodeFault(regs*, void*)+0x3b>
c0014542:	83 ec 0c             	sub    esp,0xc
c0014545:	68 9c 79 02 c0       	push   0xc002799c
c001454a:	e8 e0 dc ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c001454f:	83 c4 10             	add    esp,0x10
c0014552:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014555:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014558:	8d 50 19             	lea    edx,[eax+0x19]
c001455b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001455e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014561:	e9 77 05 00 00       	jmp    c0014add <opcodeFault(regs*, void*)+0x5b2>
c0014566:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014569:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001456c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001456f:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014573:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014577:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001457a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001457d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014580:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014583:	8a 00                	mov    al,BYTE PTR [eax]
c0014585:	3c f0                	cmp    al,0xf0
c0014587:	75 17                	jne    c00145a0 <opcodeFault(regs*, void*)+0x75>
c0014589:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001458c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001458f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014592:	8d 50 01             	lea    edx,[eax+0x1]
c0014595:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014598:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001459b:	e9 da 00 00 00       	jmp    c001467a <opcodeFault(regs*, void*)+0x14f>
c00145a0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00145a3:	8a 00                	mov    al,BYTE PTR [eax]
c00145a5:	3c f2                	cmp    al,0xf2
c00145a7:	74 09                	je     c00145b2 <opcodeFault(regs*, void*)+0x87>
c00145a9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00145ac:	8a 00                	mov    al,BYTE PTR [eax]
c00145ae:	3c f3                	cmp    al,0xf3
c00145b0:	75 1b                	jne    c00145cd <opcodeFault(regs*, void*)+0xa2>
c00145b2:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00145b6:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00145b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00145bc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00145bf:	8d 50 01             	lea    edx,[eax+0x1]
c00145c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00145c5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00145c8:	e9 ad 00 00 00       	jmp    c001467a <opcodeFault(regs*, void*)+0x14f>
c00145cd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00145d0:	8a 00                	mov    al,BYTE PTR [eax]
c00145d2:	3c 66                	cmp    al,0x66
c00145d4:	75 1f                	jne    c00145f5 <opcodeFault(regs*, void*)+0xca>
c00145d6:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00145da:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c00145de:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00145e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00145e4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00145e7:	8d 50 01             	lea    edx,[eax+0x1]
c00145ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00145ed:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00145f0:	e9 85 00 00 00       	jmp    c001467a <opcodeFault(regs*, void*)+0x14f>
c00145f5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00145f8:	8a 00                	mov    al,BYTE PTR [eax]
c00145fa:	3c 67                	cmp    al,0x67
c00145fc:	75 18                	jne    c0014616 <opcodeFault(regs*, void*)+0xeb>
c00145fe:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014602:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014605:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014608:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001460b:	8d 50 01             	lea    edx,[eax+0x1]
c001460e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014611:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014614:	eb 64                	jmp    c001467a <opcodeFault(regs*, void*)+0x14f>
c0014616:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014619:	8a 00                	mov    al,BYTE PTR [eax]
c001461b:	3c 2e                	cmp    al,0x2e
c001461d:	74 09                	je     c0014628 <opcodeFault(regs*, void*)+0xfd>
c001461f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014622:	8a 00                	mov    al,BYTE PTR [eax]
c0014624:	3c 3e                	cmp    al,0x3e
c0014626:	75 18                	jne    c0014640 <opcodeFault(regs*, void*)+0x115>
c0014628:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001462c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001462f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014632:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014635:	8d 50 01             	lea    edx,[eax+0x1]
c0014638:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001463b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001463e:	eb 3a                	jmp    c001467a <opcodeFault(regs*, void*)+0x14f>
c0014640:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014643:	8a 00                	mov    al,BYTE PTR [eax]
c0014645:	3c 36                	cmp    al,0x36
c0014647:	74 1b                	je     c0014664 <opcodeFault(regs*, void*)+0x139>
c0014649:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001464c:	8a 00                	mov    al,BYTE PTR [eax]
c001464e:	3c 26                	cmp    al,0x26
c0014650:	74 12                	je     c0014664 <opcodeFault(regs*, void*)+0x139>
c0014652:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014655:	8a 00                	mov    al,BYTE PTR [eax]
c0014657:	3c 64                	cmp    al,0x64
c0014659:	74 09                	je     c0014664 <opcodeFault(regs*, void*)+0x139>
c001465b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001465e:	8a 00                	mov    al,BYTE PTR [eax]
c0014660:	3c 65                	cmp    al,0x65
c0014662:	75 16                	jne    c001467a <opcodeFault(regs*, void*)+0x14f>
c0014664:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014668:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001466b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001466e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014671:	8d 50 01             	lea    edx,[eax+0x1]
c0014674:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014677:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001467a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001467d:	8a 00                	mov    al,BYTE PTR [eax]
c001467f:	3c 0f                	cmp    al,0xf
c0014681:	0f 85 ad 00 00 00    	jne    c0014734 <opcodeFault(regs*, void*)+0x209>
c0014687:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001468a:	40                   	inc    eax
c001468b:	8a 00                	mov    al,BYTE PTR [eax]
c001468d:	3c c2                	cmp    al,0xc2
c001468f:	74 0e                	je     c001469f <opcodeFault(regs*, void*)+0x174>
c0014691:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014694:	40                   	inc    eax
c0014695:	8a 00                	mov    al,BYTE PTR [eax]
c0014697:	3c c3                	cmp    al,0xc3
c0014699:	0f 85 95 00 00 00    	jne    c0014734 <opcodeFault(regs*, void*)+0x209>
c001469f:	83 ec 0c             	sub    esp,0xc
c00146a2:	68 bf 79 02 c0       	push   0xc00279bf
c00146a7:	e8 83 db ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c00146ac:	83 c4 10             	add    esp,0x10
c00146af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00146b2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00146b5:	8d 50 01             	lea    edx,[eax+0x1]
c00146b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00146bb:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00146be:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00146c1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00146c4:	8a 00                	mov    al,BYTE PTR [eax]
c00146c6:	8d 50 fe             	lea    edx,[eax-0x2]
c00146c9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00146cc:	88 10                	mov    BYTE PTR [eax],dl
c00146ce:	8d 45 c2             	lea    eax,[ebp-0x3e]
c00146d1:	50                   	push   eax
c00146d2:	8d 45 c3             	lea    eax,[ebp-0x3d]
c00146d5:	50                   	push   eax
c00146d6:	8d 45 c4             	lea    eax,[ebp-0x3c]
c00146d9:	50                   	push   eax
c00146da:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00146dd:	e8 ca 41 00 00       	call   c00188ac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00146e2:	83 c4 10             	add    esp,0x10
c00146e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00146e8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00146eb:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00146ee:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c00146f1:	01 d0                	add    eax,edx
c00146f3:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00146f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00146f9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00146fc:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00146ff:	48                   	dec    eax
c0014700:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014703:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014706:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014709:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001470c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001470f:	83 ec 04             	sub    esp,0x4
c0014712:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014715:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014718:	50                   	push   eax
c0014719:	e8 4b ba fe ff       	call   c0000169 <voodooXADD>
c001471e:	83 c4 10             	add    esp,0x10
c0014721:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014724:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014727:	01 c2                	add    edx,eax
c0014729:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001472c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001472f:	e9 a9 03 00 00       	jmp    c0014add <opcodeFault(regs*, void*)+0x5b2>
c0014734:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014737:	8a 00                	mov    al,BYTE PTR [eax]
c0014739:	3c 0f                	cmp    al,0xf
c001473b:	0f 85 8b 01 00 00    	jne    c00148cc <opcodeFault(regs*, void*)+0x3a1>
c0014741:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014744:	40                   	inc    eax
c0014745:	8a 00                	mov    al,BYTE PTR [eax]
c0014747:	3c c7                	cmp    al,0xc7
c0014749:	0f 86 7d 01 00 00    	jbe    c00148cc <opcodeFault(regs*, void*)+0x3a1>
c001474f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014752:	40                   	inc    eax
c0014753:	8a 00                	mov    al,BYTE PTR [eax]
c0014755:	3c cf                	cmp    al,0xcf
c0014757:	0f 87 6f 01 00 00    	ja     c00148cc <opcodeFault(regs*, void*)+0x3a1>
c001475d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014760:	40                   	inc    eax
c0014761:	8a 00                	mov    al,BYTE PTR [eax]
c0014763:	83 c0 38             	add    eax,0x38
c0014766:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014769:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c001476d:	75 0b                	jne    c001477a <opcodeFault(regs*, void*)+0x24f>
c001476f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014772:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014775:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014778:	eb 75                	jmp    c00147ef <opcodeFault(regs*, void*)+0x2c4>
c001477a:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001477e:	75 0b                	jne    c001478b <opcodeFault(regs*, void*)+0x260>
c0014780:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014783:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014786:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014789:	eb 64                	jmp    c00147ef <opcodeFault(regs*, void*)+0x2c4>
c001478b:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c001478f:	75 0b                	jne    c001479c <opcodeFault(regs*, void*)+0x271>
c0014791:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014794:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014797:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001479a:	eb 53                	jmp    c00147ef <opcodeFault(regs*, void*)+0x2c4>
c001479c:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00147a0:	75 0b                	jne    c00147ad <opcodeFault(regs*, void*)+0x282>
c00147a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147a5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00147a8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00147ab:	eb 42                	jmp    c00147ef <opcodeFault(regs*, void*)+0x2c4>
c00147ad:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00147b1:	75 0b                	jne    c00147be <opcodeFault(regs*, void*)+0x293>
c00147b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147b6:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00147b9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00147bc:	eb 31                	jmp    c00147ef <opcodeFault(regs*, void*)+0x2c4>
c00147be:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00147c2:	75 0b                	jne    c00147cf <opcodeFault(regs*, void*)+0x2a4>
c00147c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147c7:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00147ca:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00147cd:	eb 20                	jmp    c00147ef <opcodeFault(regs*, void*)+0x2c4>
c00147cf:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00147d3:	75 0b                	jne    c00147e0 <opcodeFault(regs*, void*)+0x2b5>
c00147d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147d8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00147db:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00147de:	eb 0f                	jmp    c00147ef <opcodeFault(regs*, void*)+0x2c4>
c00147e0:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00147e4:	75 09                	jne    c00147ef <opcodeFault(regs*, void*)+0x2c4>
c00147e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147e9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00147ec:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00147ef:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c00147f3:	74 10                	je     c0014805 <opcodeFault(regs*, void*)+0x2da>
c00147f5:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c00147fc:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014803:	eb 2d                	jmp    c0014832 <opcodeFault(regs*, void*)+0x307>
c0014805:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014808:	c1 e0 18             	shl    eax,0x18
c001480b:	89 c2                	mov    edx,eax
c001480d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014810:	c1 e0 08             	shl    eax,0x8
c0014813:	25 00 00 ff 00       	and    eax,0xff0000
c0014818:	09 c2                	or     edx,eax
c001481a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001481d:	c1 e8 08             	shr    eax,0x8
c0014820:	25 00 ff 00 00       	and    eax,0xff00
c0014825:	09 c2                	or     edx,eax
c0014827:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001482a:	c1 e8 18             	shr    eax,0x18
c001482d:	09 d0                	or     eax,edx
c001482f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014832:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014836:	75 0b                	jne    c0014843 <opcodeFault(regs*, void*)+0x318>
c0014838:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001483b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001483e:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014841:	eb 75                	jmp    c00148b8 <opcodeFault(regs*, void*)+0x38d>
c0014843:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014847:	75 0b                	jne    c0014854 <opcodeFault(regs*, void*)+0x329>
c0014849:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001484c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001484f:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014852:	eb 64                	jmp    c00148b8 <opcodeFault(regs*, void*)+0x38d>
c0014854:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014858:	75 0b                	jne    c0014865 <opcodeFault(regs*, void*)+0x33a>
c001485a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001485d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014860:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014863:	eb 53                	jmp    c00148b8 <opcodeFault(regs*, void*)+0x38d>
c0014865:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014869:	75 0b                	jne    c0014876 <opcodeFault(regs*, void*)+0x34b>
c001486b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001486e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014871:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0014874:	eb 42                	jmp    c00148b8 <opcodeFault(regs*, void*)+0x38d>
c0014876:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c001487a:	75 0b                	jne    c0014887 <opcodeFault(regs*, void*)+0x35c>
c001487c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001487f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014882:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0014885:	eb 31                	jmp    c00148b8 <opcodeFault(regs*, void*)+0x38d>
c0014887:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c001488b:	75 0b                	jne    c0014898 <opcodeFault(regs*, void*)+0x36d>
c001488d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014890:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014893:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014896:	eb 20                	jmp    c00148b8 <opcodeFault(regs*, void*)+0x38d>
c0014898:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c001489c:	75 0b                	jne    c00148a9 <opcodeFault(regs*, void*)+0x37e>
c001489e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148a1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00148a4:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00148a7:	eb 0f                	jmp    c00148b8 <opcodeFault(regs*, void*)+0x38d>
c00148a9:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00148ad:	75 09                	jne    c00148b8 <opcodeFault(regs*, void*)+0x38d>
c00148af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148b2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00148b5:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00148b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148bb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00148be:	8d 50 02             	lea    edx,[eax+0x2]
c00148c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148c4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00148c7:	e9 11 02 00 00       	jmp    c0014add <opcodeFault(regs*, void*)+0x5b2>
c00148cc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00148cf:	8a 00                	mov    al,BYTE PTR [eax]
c00148d1:	3c 0f                	cmp    al,0xf
c00148d3:	0f 85 76 01 00 00    	jne    c0014a4f <opcodeFault(regs*, void*)+0x524>
c00148d9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00148dc:	40                   	inc    eax
c00148dd:	8a 00                	mov    al,BYTE PTR [eax]
c00148df:	3c c7                	cmp    al,0xc7
c00148e1:	0f 85 68 01 00 00    	jne    c0014a4f <opcodeFault(regs*, void*)+0x524>
c00148e7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00148ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148ed:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00148f0:	8d 50 01             	lea    edx,[eax+0x1]
c00148f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148f6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00148f9:	8d 45 ba             	lea    eax,[ebp-0x46]
c00148fc:	50                   	push   eax
c00148fd:	8d 45 bb             	lea    eax,[ebp-0x45]
c0014900:	50                   	push   eax
c0014901:	8d 45 bc             	lea    eax,[ebp-0x44]
c0014904:	50                   	push   eax
c0014905:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014908:	e8 9f 3f 00 00       	call   c00188ac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001490d:	83 c4 10             	add    esp,0x10
c0014910:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0014913:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0014916:	83 f0 01             	xor    eax,0x1
c0014919:	84 c0                	test   al,al
c001491b:	0f 84 2e 01 00 00    	je     c0014a4f <opcodeFault(regs*, void*)+0x524>
c0014921:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0014924:	3c 01                	cmp    al,0x1
c0014926:	0f 85 23 01 00 00    	jne    c0014a4f <opcodeFault(regs*, void*)+0x524>
c001492c:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c001492f:	83 f0 01             	xor    eax,0x1
c0014932:	84 c0                	test   al,al
c0014934:	0f 84 15 01 00 00    	je     c0014a4f <opcodeFault(regs*, void*)+0x524>
c001493a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001493d:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014940:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014943:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c001494a:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001494d:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014950:	89 c2                	mov    edx,eax
c0014952:	b8 00 00 00 00       	mov    eax,0x0
c0014957:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001495a:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c001495d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014960:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014963:	ba 00 00 00 00       	mov    edx,0x0
c0014968:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c001496b:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c001496e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014971:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014974:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014977:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c001497e:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014981:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014984:	89 c2                	mov    edx,eax
c0014986:	b8 00 00 00 00       	mov    eax,0x0
c001498b:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001498e:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0014991:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014994:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014997:	ba 00 00 00 00       	mov    edx,0x0
c001499c:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c001499f:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c00149a2:	e8 53 70 00 00       	call   c001b9fa <lockScheduler()>
c00149a7:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00149aa:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00149ad:	8b 00                	mov    eax,DWORD PTR [eax]
c00149af:	89 c1                	mov    ecx,eax
c00149b1:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c00149b4:	89 cb                	mov    ebx,ecx
c00149b6:	89 d0                	mov    eax,edx
c00149b8:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c00149bb:	89 c6                	mov    esi,eax
c00149bd:	89 f0                	mov    eax,esi
c00149bf:	09 d8                	or     eax,ebx
c00149c1:	85 c0                	test   eax,eax
c00149c3:	75 21                	jne    c00149e6 <opcodeFault(regs*, void*)+0x4bb>
c00149c5:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00149c8:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00149cb:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00149ce:	89 01                	mov    DWORD PTR [ecx],eax
c00149d0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00149d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149d6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00149d9:	83 c8 40             	or     eax,0x40
c00149dc:	89 c2                	mov    edx,eax
c00149de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149e1:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00149e4:	eb 3e                	jmp    c0014a24 <opcodeFault(regs*, void*)+0x4f9>
c00149e6:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00149e9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00149ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00149ee:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00149f1:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00149f4:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00149f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149fa:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00149fd:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014a00:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014a03:	89 d0                	mov    eax,edx
c0014a05:	31 d2                	xor    edx,edx
c0014a07:	89 c3                	mov    ebx,eax
c0014a09:	89 d6                	mov    esi,edx
c0014a0b:	89 da                	mov    edx,ebx
c0014a0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a10:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014a13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a16:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014a19:	83 e0 bf             	and    eax,0xffffffbf
c0014a1c:	89 c2                	mov    edx,eax
c0014a1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a21:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014a24:	e8 d3 6f 00 00       	call   c001b9fc <unlockScheduler()>
c0014a29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a2c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a2f:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0014a32:	01 c2                	add    edx,eax
c0014a34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a37:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a3a:	83 ec 0c             	sub    esp,0xc
c0014a3d:	68 ce 79 02 c0       	push   0xc00279ce
c0014a42:	e8 e8 d7 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c0014a47:	83 c4 10             	add    esp,0x10
c0014a4a:	e9 8e 00 00 00       	jmp    c0014add <opcodeFault(regs*, void*)+0x5b2>
c0014a4f:	83 ec 0c             	sub    esp,0xc
c0014a52:	68 e1 79 02 c0       	push   0xc00279e1
c0014a57:	e8 d3 d7 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c0014a5c:	83 c4 10             	add    esp,0x10
c0014a5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a62:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014a65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a68:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014a6b:	c1 e0 04             	shl    eax,0x4
c0014a6e:	01 d0                	add    eax,edx
c0014a70:	83 c0 03             	add    eax,0x3
c0014a73:	8a 00                	mov    al,BYTE PTR [eax]
c0014a75:	0f b6 d8             	movzx  ebx,al
c0014a78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a7b:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014a7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a81:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014a84:	c1 e0 04             	shl    eax,0x4
c0014a87:	01 d0                	add    eax,edx
c0014a89:	83 c0 02             	add    eax,0x2
c0014a8c:	8a 00                	mov    al,BYTE PTR [eax]
c0014a8e:	0f b6 c8             	movzx  ecx,al
c0014a91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a94:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014a97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a9a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014a9d:	c1 e0 04             	shl    eax,0x4
c0014aa0:	01 d0                	add    eax,edx
c0014aa2:	40                   	inc    eax
c0014aa3:	8a 00                	mov    al,BYTE PTR [eax]
c0014aa5:	0f b6 d0             	movzx  edx,al
c0014aa8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014aab:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0014aae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ab1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014ab4:	c1 e0 04             	shl    eax,0x4
c0014ab7:	01 f0                	add    eax,esi
c0014ab9:	8a 00                	mov    al,BYTE PTR [eax]
c0014abb:	0f b6 c0             	movzx  eax,al
c0014abe:	83 ec 0c             	sub    esp,0xc
c0014ac1:	53                   	push   ebx
c0014ac2:	51                   	push   ecx
c0014ac3:	52                   	push   edx
c0014ac4:	50                   	push   eax
c0014ac5:	68 f4 79 02 c0       	push   0xc00279f4
c0014aca:	e8 60 d7 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c0014acf:	83 c4 20             	add    esp,0x20
c0014ad2:	83 ec 0c             	sub    esp,0xc
c0014ad5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014ad8:	e8 99 f5 ff ff       	call   c0014076 <displayDebugInfo(regs*)>
c0014add:	8d 65 f8             	lea    esp,[ebp-0x8]
c0014ae0:	5b                   	pop    ebx
c0014ae1:	5e                   	pop    esi
c0014ae2:	5d                   	pop    ebp
c0014ae3:	c3                   	ret    

c0014ae4 <displayProgramFault(char const*)>:
c0014ae4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ae9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014aec:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014af2:	85 c0                	test   eax,eax
c0014af4:	74 15                	je     c0014b0b <displayProgramFault(char const*)+0x27>
c0014af6:	83 ec 0c             	sub    esp,0xc
c0014af9:	6a 04                	push   0x4
c0014afb:	6a 0f                	push   0xf
c0014afd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014b01:	50                   	push   eax
c0014b02:	e8 35 ba ff ff       	call   c001053c <VgaText::puts(char const*, VgaColour, VgaColour)>
c0014b07:	83 c4 1c             	add    esp,0x1c
c0014b0a:	c3                   	ret    
c0014b0b:	c3                   	ret    

c0014b0c <setupInterruptController()>:
c0014b0c:	55                   	push   ebp
c0014b0d:	89 e5                	mov    ebp,esp
c0014b0f:	53                   	push   ebx
c0014b10:	83 ec 14             	sub    esp,0x14
c0014b13:	e8 43 0b 01 00       	call   c002565b <CPU::getNumber()>
c0014b18:	85 c0                	test   eax,eax
c0014b1a:	0f 95 c0             	setne  al
c0014b1d:	84 c0                	test   al,al
c0014b1f:	74 56                	je     c0014b77 <setupInterruptController()+0x6b>
c0014b21:	83 ec 0c             	sub    esp,0xc
c0014b24:	68 58 21 00 00       	push   0x2158
c0014b29:	e8 12 d6 ff ff       	call   c0012140 <operator new(unsigned long)>
c0014b2e:	83 c4 10             	add    esp,0x10
c0014b31:	89 c3                	mov    ebx,eax
c0014b33:	83 ec 0c             	sub    esp,0xc
c0014b36:	53                   	push   ebx
c0014b37:	e8 9c d9 00 00       	call   c00224d8 <APIC::APIC()>
c0014b3c:	83 c4 10             	add    esp,0x10
c0014b3f:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0014b42:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0014b45:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0014b48:	8b 00                	mov    eax,DWORD PTR [eax]
c0014b4a:	83 c0 08             	add    eax,0x8
c0014b4d:	8b 00                	mov    eax,DWORD PTR [eax]
c0014b4f:	6a 00                	push   0x0
c0014b51:	6a 00                	push   0x0
c0014b53:	6a 00                	push   0x0
c0014b55:	52                   	push   edx
c0014b56:	ff d0                	call   eax
c0014b58:	83 c4 10             	add    esp,0x10
c0014b5b:	a1 28 a6 02 c0       	mov    eax,ds:0xc002a628
c0014b60:	83 ec 08             	sub    esp,0x8
c0014b63:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0014b66:	50                   	push   eax
c0014b67:	e8 ce ea ff ff       	call   c001363a <Device::addChild(Device*)>
c0014b6c:	83 c4 10             	add    esp,0x10
c0014b6f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0014b72:	e9 48 03 00 00       	jmp    c0014ebf <setupInterruptController()+0x3b3>
c0014b77:	a1 28 a6 02 c0       	mov    eax,ds:0xc002a628
c0014b7c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0014b82:	83 e0 01             	and    eax,0x1
c0014b85:	84 c0                	test   al,al
c0014b87:	0f 95 c0             	setne  al
c0014b8a:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0014b8d:	83 ec 0c             	sub    esp,0xc
c0014b90:	68 58 21 00 00       	push   0x2158
c0014b95:	e8 a6 d5 ff ff       	call   c0012140 <operator new(unsigned long)>
c0014b9a:	83 c4 10             	add    esp,0x10
c0014b9d:	89 c3                	mov    ebx,eax
c0014b9f:	83 ec 0c             	sub    esp,0xc
c0014ba2:	53                   	push   ebx
c0014ba3:	e8 7c de 00 00       	call   c0022a24 <PIC::PIC()>
c0014ba8:	83 c4 10             	add    esp,0x10
c0014bab:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0014bae:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0014bb1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bb4:	8b 00                	mov    eax,DWORD PTR [eax]
c0014bb6:	83 c0 08             	add    eax,0x8
c0014bb9:	8b 00                	mov    eax,DWORD PTR [eax]
c0014bbb:	6a 00                	push   0x0
c0014bbd:	6a 00                	push   0x0
c0014bbf:	6a 00                	push   0x0
c0014bc1:	52                   	push   edx
c0014bc2:	ff d0                	call   eax
c0014bc4:	83 c4 10             	add    esp,0x10
c0014bc7:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0014bcb:	74 6e                	je     c0014c3b <setupInterruptController()+0x12f>
c0014bcd:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0014bd0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bd3:	8b 00                	mov    eax,DWORD PTR [eax]
c0014bd5:	83 c0 0c             	add    eax,0xc
c0014bd8:	8b 00                	mov    eax,DWORD PTR [eax]
c0014bda:	6a 00                	push   0x0
c0014bdc:	6a 00                	push   0x0
c0014bde:	6a 00                	push   0x0
c0014be0:	52                   	push   edx
c0014be1:	ff d0                	call   eax
c0014be3:	83 c4 10             	add    esp,0x10
c0014be6:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0014bea:	74 15                	je     c0014c01 <setupInterruptController()+0xf5>
c0014bec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bef:	8b 00                	mov    eax,DWORD PTR [eax]
c0014bf1:	83 c0 04             	add    eax,0x4
c0014bf4:	8b 00                	mov    eax,DWORD PTR [eax]
c0014bf6:	83 ec 0c             	sub    esp,0xc
c0014bf9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014bfc:	ff d0                	call   eax
c0014bfe:	83 c4 10             	add    esp,0x10
c0014c01:	83 ec 0c             	sub    esp,0xc
c0014c04:	68 58 21 00 00       	push   0x2158
c0014c09:	e8 32 d5 ff ff       	call   c0012140 <operator new(unsigned long)>
c0014c0e:	83 c4 10             	add    esp,0x10
c0014c11:	89 c3                	mov    ebx,eax
c0014c13:	83 ec 0c             	sub    esp,0xc
c0014c16:	53                   	push   ebx
c0014c17:	e8 bc d8 00 00       	call   c00224d8 <APIC::APIC()>
c0014c1c:	83 c4 10             	add    esp,0x10
c0014c1f:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0014c22:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0014c25:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c28:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c2a:	83 c0 08             	add    eax,0x8
c0014c2d:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c2f:	6a 00                	push   0x0
c0014c31:	6a 00                	push   0x0
c0014c33:	6a 00                	push   0x0
c0014c35:	52                   	push   edx
c0014c36:	ff d0                	call   eax
c0014c38:	83 c4 10             	add    esp,0x10
c0014c3b:	a1 28 a6 02 c0       	mov    eax,ds:0xc002a628
c0014c40:	83 ec 08             	sub    esp,0x8
c0014c43:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014c46:	50                   	push   eax
c0014c47:	e8 ee e9 ff ff       	call   c001363a <Device::addChild(Device*)>
c0014c4c:	83 c4 10             	add    esp,0x10
c0014c4f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c52:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c54:	83 c0 24             	add    eax,0x24
c0014c57:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c59:	6a 00                	push   0x0
c0014c5b:	68 0c 45 01 c0       	push   0xc001450c
c0014c60:	6a 00                	push   0x0
c0014c62:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014c65:	ff d0                	call   eax
c0014c67:	83 c4 10             	add    esp,0x10
c0014c6a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c6d:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c6f:	83 c0 24             	add    eax,0x24
c0014c72:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c74:	6a 00                	push   0x0
c0014c76:	68 0c 45 01 c0       	push   0xc001450c
c0014c7b:	6a 01                	push   0x1
c0014c7d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014c80:	ff d0                	call   eax
c0014c82:	83 c4 10             	add    esp,0x10
c0014c85:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c88:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c8a:	83 c0 24             	add    eax,0x24
c0014c8d:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c8f:	6a 00                	push   0x0
c0014c91:	68 d9 3e 01 c0       	push   0xc0013ed9
c0014c96:	6a 02                	push   0x2
c0014c98:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014c9b:	ff d0                	call   eax
c0014c9d:	83 c4 10             	add    esp,0x10
c0014ca0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ca3:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ca5:	83 c0 24             	add    eax,0x24
c0014ca8:	8b 00                	mov    eax,DWORD PTR [eax]
c0014caa:	6a 00                	push   0x0
c0014cac:	68 0c 45 01 c0       	push   0xc001450c
c0014cb1:	6a 03                	push   0x3
c0014cb3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014cb6:	ff d0                	call   eax
c0014cb8:	83 c4 10             	add    esp,0x10
c0014cbb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cbe:	8b 00                	mov    eax,DWORD PTR [eax]
c0014cc0:	83 c0 24             	add    eax,0x24
c0014cc3:	8b 00                	mov    eax,DWORD PTR [eax]
c0014cc5:	6a 00                	push   0x0
c0014cc7:	68 0c 45 01 c0       	push   0xc001450c
c0014ccc:	6a 04                	push   0x4
c0014cce:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014cd1:	ff d0                	call   eax
c0014cd3:	83 c4 10             	add    esp,0x10
c0014cd6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cd9:	8b 00                	mov    eax,DWORD PTR [eax]
c0014cdb:	83 c0 24             	add    eax,0x24
c0014cde:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ce0:	6a 00                	push   0x0
c0014ce2:	68 0c 45 01 c0       	push   0xc001450c
c0014ce7:	6a 05                	push   0x5
c0014ce9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014cec:	ff d0                	call   eax
c0014cee:	83 c4 10             	add    esp,0x10
c0014cf1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cf4:	8b 00                	mov    eax,DWORD PTR [eax]
c0014cf6:	83 c0 24             	add    eax,0x24
c0014cf9:	8b 00                	mov    eax,DWORD PTR [eax]
c0014cfb:	6a 00                	push   0x0
c0014cfd:	68 2b 45 01 c0       	push   0xc001452b
c0014d02:	6a 06                	push   0x6
c0014d04:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014d07:	ff d0                	call   eax
c0014d09:	83 c4 10             	add    esp,0x10
c0014d0c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d0f:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d11:	83 c0 24             	add    eax,0x24
c0014d14:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d16:	6a 00                	push   0x0
c0014d18:	68 8d 44 01 c0       	push   0xc001448d
c0014d1d:	6a 07                	push   0x7
c0014d1f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014d22:	ff d0                	call   eax
c0014d24:	83 c4 10             	add    esp,0x10
c0014d27:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d2a:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d2c:	83 c0 24             	add    eax,0x24
c0014d2f:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d31:	6a 00                	push   0x0
c0014d33:	68 f4 3c 01 c0       	push   0xc0013cf4
c0014d38:	6a 08                	push   0x8
c0014d3a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014d3d:	ff d0                	call   eax
c0014d3f:	83 c4 10             	add    esp,0x10
c0014d42:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d45:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d47:	83 c0 24             	add    eax,0x24
c0014d4a:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d4c:	6a 00                	push   0x0
c0014d4e:	68 0c 45 01 c0       	push   0xc001450c
c0014d53:	6a 09                	push   0x9
c0014d55:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014d58:	ff d0                	call   eax
c0014d5a:	83 c4 10             	add    esp,0x10
c0014d5d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d60:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d62:	83 c0 24             	add    eax,0x24
c0014d65:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d67:	6a 00                	push   0x0
c0014d69:	68 0c 45 01 c0       	push   0xc001450c
c0014d6e:	6a 0a                	push   0xa
c0014d70:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014d73:	ff d0                	call   eax
c0014d75:	83 c4 10             	add    esp,0x10
c0014d78:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d7d:	83 c0 24             	add    eax,0x24
c0014d80:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d82:	6a 00                	push   0x0
c0014d84:	68 0c 45 01 c0       	push   0xc001450c
c0014d89:	6a 0b                	push   0xb
c0014d8b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014d8e:	ff d0                	call   eax
c0014d90:	83 c4 10             	add    esp,0x10
c0014d93:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d96:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d98:	83 c0 24             	add    eax,0x24
c0014d9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d9d:	6a 00                	push   0x0
c0014d9f:	68 0c 45 01 c0       	push   0xc001450c
c0014da4:	6a 0c                	push   0xc
c0014da6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014da9:	ff d0                	call   eax
c0014dab:	83 c4 10             	add    esp,0x10
c0014dae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014db1:	8b 00                	mov    eax,DWORD PTR [eax]
c0014db3:	83 c0 24             	add    eax,0x24
c0014db6:	8b 00                	mov    eax,DWORD PTR [eax]
c0014db8:	6a 00                	push   0x0
c0014dba:	68 bc 44 01 c0       	push   0xc00144bc
c0014dbf:	6a 0d                	push   0xd
c0014dc1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014dc4:	ff d0                	call   eax
c0014dc6:	83 c4 10             	add    esp,0x10
c0014dc9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dcc:	8b 00                	mov    eax,DWORD PTR [eax]
c0014dce:	83 c0 24             	add    eax,0x24
c0014dd1:	8b 00                	mov    eax,DWORD PTR [eax]
c0014dd3:	6a 00                	push   0x0
c0014dd5:	68 f5 44 01 c0       	push   0xc00144f5
c0014dda:	6a 0e                	push   0xe
c0014ddc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014ddf:	ff d0                	call   eax
c0014de1:	83 c4 10             	add    esp,0x10
c0014de4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014de7:	8b 00                	mov    eax,DWORD PTR [eax]
c0014de9:	83 c0 24             	add    eax,0x24
c0014dec:	8b 00                	mov    eax,DWORD PTR [eax]
c0014dee:	6a 00                	push   0x0
c0014df0:	68 0c 45 01 c0       	push   0xc001450c
c0014df5:	6a 0f                	push   0xf
c0014df7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014dfa:	ff d0                	call   eax
c0014dfc:	83 c4 10             	add    esp,0x10
c0014dff:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e02:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e04:	83 c0 24             	add    eax,0x24
c0014e07:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e09:	6a 00                	push   0x0
c0014e0b:	68 0c 45 01 c0       	push   0xc001450c
c0014e10:	6a 10                	push   0x10
c0014e12:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e15:	ff d0                	call   eax
c0014e17:	83 c4 10             	add    esp,0x10
c0014e1a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e1f:	83 c0 24             	add    eax,0x24
c0014e22:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e24:	6a 00                	push   0x0
c0014e26:	68 0c 45 01 c0       	push   0xc001450c
c0014e2b:	6a 11                	push   0x11
c0014e2d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e30:	ff d0                	call   eax
c0014e32:	83 c4 10             	add    esp,0x10
c0014e35:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e38:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e3a:	83 c0 24             	add    eax,0x24
c0014e3d:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e3f:	6a 00                	push   0x0
c0014e41:	68 0c 45 01 c0       	push   0xc001450c
c0014e46:	6a 12                	push   0x12
c0014e48:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e4b:	ff d0                	call   eax
c0014e4d:	83 c4 10             	add    esp,0x10
c0014e50:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e53:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e55:	83 c0 24             	add    eax,0x24
c0014e58:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e5a:	6a 00                	push   0x0
c0014e5c:	68 0c 45 01 c0       	push   0xc001450c
c0014e61:	6a 13                	push   0x13
c0014e63:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e66:	ff d0                	call   eax
c0014e68:	83 c4 10             	add    esp,0x10
c0014e6b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e6e:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e70:	83 c0 24             	add    eax,0x24
c0014e73:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e75:	6a 00                	push   0x0
c0014e77:	68 0c 45 01 c0       	push   0xc001450c
c0014e7c:	6a 14                	push   0x14
c0014e7e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e81:	ff d0                	call   eax
c0014e83:	83 c4 10             	add    esp,0x10
c0014e86:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e89:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e8b:	83 c0 24             	add    eax,0x24
c0014e8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e90:	6a 00                	push   0x0
c0014e92:	68 0c 45 01 c0       	push   0xc001450c
c0014e97:	6a 1e                	push   0x1e
c0014e99:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e9c:	ff d0                	call   eax
c0014e9e:	83 c4 10             	add    esp,0x10
c0014ea1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ea4:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ea6:	83 c0 24             	add    eax,0x24
c0014ea9:	8b 00                	mov    eax,DWORD PTR [eax]
c0014eab:	6a 00                	push   0x0
c0014ead:	68 11 a4 01 c0       	push   0xc001a411
c0014eb2:	6a 60                	push   0x60
c0014eb4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014eb7:	ff d0                	call   eax
c0014eb9:	83 c4 10             	add    esp,0x10
c0014ebc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ebf:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0014ec2:	c9                   	leave  
c0014ec3:	c3                   	ret    

c0014ec4 <InterruptController::convertLegacyIRQNumber(int)>:
c0014ec4:	55                   	push   ebp
c0014ec5:	89 e5                	mov    ebp,esp
c0014ec7:	83 ec 08             	sub    esp,0x8
c0014eca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ecd:	83 ec 0c             	sub    esp,0xc
c0014ed0:	50                   	push   eax
c0014ed1:	e8 46 ea ff ff       	call   c001391c <Device::getName()>
c0014ed6:	83 c4 10             	add    esp,0x10
c0014ed9:	8a 00                	mov    al,BYTE PTR [eax]
c0014edb:	3c 41                	cmp    al,0x41
c0014edd:	0f 94 c0             	sete   al
c0014ee0:	84 c0                	test   al,al
c0014ee2:	74 28                	je     c0014f0c <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0014ee4:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0014ee8:	7f 12                	jg     c0014efc <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0014eea:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0014eed:	05 00 99 02 c0       	add    eax,0xc0029900
c0014ef2:	8a 00                	mov    al,BYTE PTR [eax]
c0014ef4:	0f b6 c0             	movzx  eax,al
c0014ef7:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0014efa:	eb 10                	jmp    c0014f0c <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0014efc:	83 ec 0c             	sub    esp,0xc
c0014eff:	68 74 77 02 c0       	push   0xc0027774
c0014f04:	e8 9e 3b 00 00       	call   c0018aa7 <Krnl::panic(char const*)>
c0014f09:	83 c4 10             	add    esp,0x10
c0014f0c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0014f0f:	c9                   	leave  
c0014f10:	c3                   	ret    
c0014f11:	90                   	nop

c0014f12 <startGUI(void*)>:
c0014f12:	55                   	push   ebp
c0014f13:	89 e5                	mov    ebp,esp
c0014f15:	53                   	push   ebx
c0014f16:	83 ec 04             	sub    esp,0x4
c0014f19:	e8 de 6a 00 00       	call   c001b9fc <unlockScheduler()>
c0014f1e:	e8 c2 6a 00 00       	call   c001b9e5 <getIRQNestingLevel()>
c0014f23:	83 ec 08             	sub    esp,0x8
c0014f26:	50                   	push   eax
c0014f27:	68 5c 7a 02 c0       	push   0xc0027a5c
c0014f2c:	e8 fe d2 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c0014f31:	83 c4 10             	add    esp,0x10
c0014f34:	8b 1d 28 a6 02 c0    	mov    ebx,DWORD PTR ds:0xc002a628
c0014f3a:	83 ec 08             	sub    esp,0x8
c0014f3d:	6a 01                	push   0x1
c0014f3f:	68 76 7a 02 c0       	push   0xc0027a76
c0014f44:	e8 e1 64 00 00       	call   c001b42a <Thr::loadDLL(char const*, bool)>
c0014f49:	83 c4 10             	add    esp,0x10
c0014f4c:	83 ec 08             	sub    esp,0x8
c0014f4f:	53                   	push   ebx
c0014f50:	50                   	push   eax
c0014f51:	e8 9a 66 00 00       	call   c001b5f0 <Thr::executeDLL(unsigned long, void*)>
c0014f56:	83 c4 10             	add    esp,0x10
c0014f59:	8b 1d 28 a6 02 c0    	mov    ebx,DWORD PTR ds:0xc002a628
c0014f5f:	83 ec 08             	sub    esp,0x8
c0014f62:	6a 01                	push   0x1
c0014f64:	68 90 7a 02 c0       	push   0xc0027a90
c0014f69:	e8 bc 64 00 00       	call   c001b42a <Thr::loadDLL(char const*, bool)>
c0014f6e:	83 c4 10             	add    esp,0x10
c0014f71:	83 ec 08             	sub    esp,0x8
c0014f74:	53                   	push   ebx
c0014f75:	50                   	push   eax
c0014f76:	e8 75 66 00 00       	call   c001b5f0 <Thr::executeDLL(unsigned long, void*)>
c0014f7b:	83 c4 10             	add    esp,0x10
c0014f7e:	90                   	nop
c0014f7f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0014f82:	c9                   	leave  
c0014f83:	c3                   	ret    

c0014f84 <sendKeyToTerminal(unsigned char)>:
c0014f84:	55                   	push   ebp
c0014f85:	89 e5                	mov    ebp,esp
c0014f87:	83 ec 28             	sub    esp,0x28
c0014f8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f8d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0014f90:	a1 e4 a6 02 c0       	mov    eax,ds:0xc002a6e4
c0014f95:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0014f99:	83 ec 08             	sub    esp,0x8
c0014f9c:	52                   	push   edx
c0014f9d:	50                   	push   eax
c0014f9e:	e8 d5 ba ff ff       	call   c0010a78 <VgaText::receiveKey(unsigned char)>
c0014fa3:	83 c4 10             	add    esp,0x10
c0014fa6:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0014faa:	75 41                	jne    c0014fed <sendKeyToTerminal(unsigned char)+0x69>
c0014fac:	e8 70 6a 00 00       	call   c001ba21 <lockStuff()>
c0014fb1:	a1 c0 a7 02 c0       	mov    eax,ds:0xc002a7c0
c0014fb6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014fb9:	c7 05 c0 a7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a7c0,0x0
c0014fc3:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0014fc7:	74 1f                	je     c0014fe8 <sendKeyToTerminal(unsigned char)+0x64>
c0014fc9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fcc:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0014fcf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0014fd2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014fd5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014fd8:	83 ec 0c             	sub    esp,0xc
c0014fdb:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0014fde:	e8 27 70 00 00       	call   c001c00a <unblockTask(ThreadControlBlock*)>
c0014fe3:	83 c4 10             	add    esp,0x10
c0014fe6:	eb db                	jmp    c0014fc3 <sendKeyToTerminal(unsigned char)+0x3f>
c0014fe8:	e8 c6 6d 00 00       	call   c001bdb3 <unlockStuff()>
c0014fed:	90                   	nop
c0014fee:	c9                   	leave  
c0014fef:	c3                   	ret    

c0014ff0 <sendKeyboardToken(KeyboardToken)>:
c0014ff0:	55                   	push   ebp
c0014ff1:	89 e5                	mov    ebp,esp
c0014ff3:	83 ec 18             	sub    esp,0x18
c0014ff6:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0014ff9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ffc:	0f b7 c0             	movzx  eax,ax
c0014fff:	83 f2 01             	xor    edx,0x1
c0015002:	88 90 e0 a7 02 c0    	mov    BYTE PTR [eax-0x3ffd5820],dl
c0015008:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001500b:	66 3d 03 02          	cmp    ax,0x203
c001500f:	75 07                	jne    c0015018 <sendKeyboardToken(KeyboardToken)+0x28>
c0015011:	a0 e0 a8 02 c0       	mov    al,ds:0xc002a8e0
c0015016:	84 c0                	test   al,al
c0015018:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001501c:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c001501f:	a0 e8 ab 02 c0       	mov    al,ds:0xc002abe8
c0015024:	38 c2                	cmp    dl,al
c0015026:	74 1c                	je     c0015044 <sendKeyboardToken(KeyboardToken)+0x54>
c0015028:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c001502b:	a2 e8 ab 02 c0       	mov    ds:0xc002abe8,al
c0015030:	a0 e8 ab 02 c0       	mov    al,ds:0xc002abe8
c0015035:	0f b6 c0             	movzx  eax,al
c0015038:	83 ec 0c             	sub    esp,0xc
c001503b:	50                   	push   eax
c001503c:	e8 a5 ac ff ff       	call   c000fce6 <setTerminalScrollLock(bool)>
c0015041:	83 c4 10             	add    esp,0x10
c0015044:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015047:	84 c0                	test   al,al
c0015049:	0f 84 ae 00 00 00    	je     c00150fd <sendKeyboardToken(KeyboardToken)+0x10d>
c001504f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015052:	66 3d 10 03          	cmp    ax,0x310
c0015056:	75 06                	jne    c001505e <sendKeyboardToken(KeyboardToken)+0x6e>
c0015058:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c001505e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015061:	66 3d 11 03          	cmp    ax,0x311
c0015065:	75 06                	jne    c001506d <sendKeyboardToken(KeyboardToken)+0x7d>
c0015067:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c001506d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015070:	66 3d 12 03          	cmp    ax,0x312
c0015074:	75 06                	jne    c001507c <sendKeyboardToken(KeyboardToken)+0x8c>
c0015076:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c001507c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001507f:	66 3d 13 03          	cmp    ax,0x313
c0015083:	75 06                	jne    c001508b <sendKeyboardToken(KeyboardToken)+0x9b>
c0015085:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c001508b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001508e:	66 3d 14 03          	cmp    ax,0x314
c0015092:	75 06                	jne    c001509a <sendKeyboardToken(KeyboardToken)+0xaa>
c0015094:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c001509a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001509d:	66 3d 15 03          	cmp    ax,0x315
c00150a1:	75 06                	jne    c00150a9 <sendKeyboardToken(KeyboardToken)+0xb9>
c00150a3:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00150a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150ac:	66 3d 16 03          	cmp    ax,0x316
c00150b0:	75 06                	jne    c00150b8 <sendKeyboardToken(KeyboardToken)+0xc8>
c00150b2:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c00150b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150bb:	66 3d 17 03          	cmp    ax,0x317
c00150bf:	75 06                	jne    c00150c7 <sendKeyboardToken(KeyboardToken)+0xd7>
c00150c1:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c00150c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150ca:	66 3d 18 03          	cmp    ax,0x318
c00150ce:	75 06                	jne    c00150d6 <sendKeyboardToken(KeyboardToken)+0xe6>
c00150d0:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c00150d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150d9:	66 3d 19 03          	cmp    ax,0x319
c00150dd:	75 06                	jne    c00150e5 <sendKeyboardToken(KeyboardToken)+0xf5>
c00150df:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c00150e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150e8:	66 3d 1a 03          	cmp    ax,0x31a
c00150ec:	0f 85 c9 00 00 00    	jne    c00151bb <sendKeyboardToken(KeyboardToken)+0x1cb>
c00150f2:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c00150f8:	e9 be 00 00 00       	jmp    c00151bb <sendKeyboardToken(KeyboardToken)+0x1cb>
c00150fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015100:	66 3d 10 03          	cmp    ax,0x310
c0015104:	75 0a                	jne    c0015110 <sendKeyboardToken(KeyboardToken)+0x120>
c0015106:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c001510c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015110:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015113:	66 3d 11 03          	cmp    ax,0x311
c0015117:	75 0a                	jne    c0015123 <sendKeyboardToken(KeyboardToken)+0x133>
c0015119:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c001511f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015123:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015126:	66 3d 12 03          	cmp    ax,0x312
c001512a:	75 0a                	jne    c0015136 <sendKeyboardToken(KeyboardToken)+0x146>
c001512c:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015132:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015136:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015139:	66 3d 13 03          	cmp    ax,0x313
c001513d:	75 0a                	jne    c0015149 <sendKeyboardToken(KeyboardToken)+0x159>
c001513f:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015145:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015149:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001514c:	66 3d 14 03          	cmp    ax,0x314
c0015150:	75 0a                	jne    c001515c <sendKeyboardToken(KeyboardToken)+0x16c>
c0015152:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015158:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001515c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001515f:	66 3d 15 03          	cmp    ax,0x315
c0015163:	75 0a                	jne    c001516f <sendKeyboardToken(KeyboardToken)+0x17f>
c0015165:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001516b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001516f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015172:	66 3d 16 03          	cmp    ax,0x316
c0015176:	75 0a                	jne    c0015182 <sendKeyboardToken(KeyboardToken)+0x192>
c0015178:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c001517e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015182:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015185:	66 3d 17 03          	cmp    ax,0x317
c0015189:	75 0a                	jne    c0015195 <sendKeyboardToken(KeyboardToken)+0x1a5>
c001518b:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015191:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015195:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015198:	66 3d 18 03          	cmp    ax,0x318
c001519c:	75 0a                	jne    c00151a8 <sendKeyboardToken(KeyboardToken)+0x1b8>
c001519e:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00151a4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00151a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151ab:	66 3d 19 03          	cmp    ax,0x319
c00151af:	75 0a                	jne    c00151bb <sendKeyboardToken(KeyboardToken)+0x1cb>
c00151b1:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00151b7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00151bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151be:	66 3d 00 02          	cmp    ax,0x200
c00151c2:	75 2a                	jne    c00151ee <sendKeyboardToken(KeyboardToken)+0x1fe>
c00151c4:	a0 e0 ab 02 c0       	mov    al,ds:0xc002abe0
c00151c9:	83 f0 01             	xor    eax,0x1
c00151cc:	84 c0                	test   al,al
c00151ce:	74 1e                	je     c00151ee <sendKeyboardToken(KeyboardToken)+0x1fe>
c00151d0:	a1 34 bb 02 c0       	mov    eax,ds:0xc002bb34
c00151d5:	6a 01                	push   0x1
c00151d7:	6a 00                	push   0x0
c00151d9:	68 12 4f 01 c0       	push   0xc0014f12
c00151de:	50                   	push   eax
c00151df:	e8 40 69 00 00       	call   c001bb24 <Process::createThread(void (*)(void*), void*, int)>
c00151e4:	83 c4 10             	add    esp,0x10
c00151e7:	c6 05 e0 ab 02 c0 01 	mov    BYTE PTR ds:0xc002abe0,0x1
c00151ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151f1:	66 3d 1d 03          	cmp    ax,0x31d
c00151f5:	75 06                	jne    c00151fd <sendKeyboardToken(KeyboardToken)+0x20d>
c00151f7:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c00151fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015200:	66 3d 1c 03          	cmp    ax,0x31c
c0015204:	75 06                	jne    c001520c <sendKeyboardToken(KeyboardToken)+0x21c>
c0015206:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c001520c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001520f:	66 3d 1b 03          	cmp    ax,0x31b
c0015213:	75 06                	jne    c001521b <sendKeyboardToken(KeyboardToken)+0x22b>
c0015215:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c001521b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001521e:	66 3d 1e 03          	cmp    ax,0x31e
c0015222:	75 06                	jne    c001522a <sendKeyboardToken(KeyboardToken)+0x23a>
c0015224:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c001522a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001522d:	66 3d 1f 03          	cmp    ax,0x31f
c0015231:	75 06                	jne    c0015239 <sendKeyboardToken(KeyboardToken)+0x249>
c0015233:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015239:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001523c:	66 3d 1a 03          	cmp    ax,0x31a
c0015240:	75 06                	jne    c0015248 <sendKeyboardToken(KeyboardToken)+0x258>
c0015242:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015248:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c001524c:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001524f:	83 f0 01             	xor    eax,0x1
c0015252:	84 c0                	test   al,al
c0015254:	74 77                	je     c00152cd <sendKeyboardToken(KeyboardToken)+0x2dd>
c0015256:	a0 e1 a8 02 c0       	mov    al,ds:0xc002a8e1
c001525b:	84 c0                	test   al,al
c001525d:	74 41                	je     c00152a0 <sendKeyboardToken(KeyboardToken)+0x2b0>
c001525f:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015263:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015267:	74 2b                	je     c0015294 <sendKeyboardToken(KeyboardToken)+0x2a4>
c0015269:	8b 15 e4 ab 02 c0    	mov    edx,DWORD PTR ds:0xc002abe4
c001526f:	89 d0                	mov    eax,edx
c0015271:	c1 e0 02             	shl    eax,0x2
c0015274:	01 d0                	add    eax,edx
c0015276:	01 c0                	add    eax,eax
c0015278:	a3 e4 ab 02 c0       	mov    ds:0xc002abe4,eax
c001527d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015280:	0f b7 c0             	movzx  eax,ax
c0015283:	8d 50 d0             	lea    edx,[eax-0x30]
c0015286:	a1 e4 ab 02 c0       	mov    eax,ds:0xc002abe4
c001528b:	01 d0                	add    eax,edx
c001528d:	a3 e4 ab 02 c0       	mov    ds:0xc002abe4,eax
c0015292:	eb 6d                	jmp    c0015301 <sendKeyboardToken(KeyboardToken)+0x311>
c0015294:	c7 05 e4 ab 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002abe4,0x0
c001529e:	eb 61                	jmp    c0015301 <sendKeyboardToken(KeyboardToken)+0x311>
c00152a0:	a1 e4 ab 02 c0       	mov    eax,ds:0xc002abe4
c00152a5:	85 c0                	test   eax,eax
c00152a7:	74 18                	je     c00152c1 <sendKeyboardToken(KeyboardToken)+0x2d1>
c00152a9:	a1 e4 ab 02 c0       	mov    eax,ds:0xc002abe4
c00152ae:	0f b6 c0             	movzx  eax,al
c00152b1:	83 ec 0c             	sub    esp,0xc
c00152b4:	50                   	push   eax
c00152b5:	e8 ca fc ff ff       	call   c0014f84 <sendKeyToTerminal(unsigned char)>
c00152ba:	83 c4 10             	add    esp,0x10
c00152bd:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00152c1:	c7 05 e4 ab 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002abe4,0x0
c00152cb:	eb 34                	jmp    c0015301 <sendKeyboardToken(KeyboardToken)+0x311>
c00152cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152d0:	66 3d 01 01          	cmp    ax,0x101
c00152d4:	75 2b                	jne    c0015301 <sendKeyboardToken(KeyboardToken)+0x311>
c00152d6:	a1 e4 ab 02 c0       	mov    eax,ds:0xc002abe4
c00152db:	85 c0                	test   eax,eax
c00152dd:	74 18                	je     c00152f7 <sendKeyboardToken(KeyboardToken)+0x307>
c00152df:	a1 e4 ab 02 c0       	mov    eax,ds:0xc002abe4
c00152e4:	0f b6 c0             	movzx  eax,al
c00152e7:	83 ec 0c             	sub    esp,0xc
c00152ea:	50                   	push   eax
c00152eb:	e8 94 fc ff ff       	call   c0014f84 <sendKeyToTerminal(unsigned char)>
c00152f0:	83 c4 10             	add    esp,0x10
c00152f3:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00152f7:	c7 05 e4 ab 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002abe4,0x0
c0015301:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015304:	83 f0 01             	xor    eax,0x1
c0015307:	84 c0                	test   al,al
c0015309:	74 4c                	je     c0015357 <sendKeyboardToken(KeyboardToken)+0x367>
c001530b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001530e:	83 f0 01             	xor    eax,0x1
c0015311:	84 c0                	test   al,al
c0015313:	74 42                	je     c0015357 <sendKeyboardToken(KeyboardToken)+0x367>
c0015315:	a0 e0 a8 02 c0       	mov    al,ds:0xc002a8e0
c001531a:	83 f0 01             	xor    eax,0x1
c001531d:	84 c0                	test   al,al
c001531f:	74 36                	je     c0015357 <sendKeyboardToken(KeyboardToken)+0x367>
c0015321:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015324:	66 83 f8 1f          	cmp    ax,0x1f
c0015328:	76 09                	jbe    c0015333 <sendKeyboardToken(KeyboardToken)+0x343>
c001532a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001532d:	66 83 f8 7e          	cmp    ax,0x7e
c0015331:	76 12                	jbe    c0015345 <sendKeyboardToken(KeyboardToken)+0x355>
c0015333:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015336:	66 83 f8 0a          	cmp    ax,0xa
c001533a:	74 09                	je     c0015345 <sendKeyboardToken(KeyboardToken)+0x355>
c001533c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001533f:	66 83 f8 08          	cmp    ax,0x8
c0015343:	75 12                	jne    c0015357 <sendKeyboardToken(KeyboardToken)+0x367>
c0015345:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015348:	0f b6 c0             	movzx  eax,al
c001534b:	83 ec 0c             	sub    esp,0xc
c001534e:	50                   	push   eax
c001534f:	e8 30 fc ff ff       	call   c0014f84 <sendKeyToTerminal(unsigned char)>
c0015354:	83 c4 10             	add    esp,0x10
c0015357:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001535a:	83 f0 01             	xor    eax,0x1
c001535d:	84 c0                	test   al,al
c001535f:	74 4f                	je     c00153b0 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0015361:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015364:	83 f0 01             	xor    eax,0x1
c0015367:	84 c0                	test   al,al
c0015369:	74 45                	je     c00153b0 <sendKeyboardToken(KeyboardToken)+0x3c0>
c001536b:	a0 e0 a8 02 c0       	mov    al,ds:0xc002a8e0
c0015370:	84 c0                	test   al,al
c0015372:	74 3c                	je     c00153b0 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0015374:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015377:	66 83 f8 3f          	cmp    ax,0x3f
c001537b:	76 33                	jbe    c00153b0 <sendKeyboardToken(KeyboardToken)+0x3c0>
c001537d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015380:	66 83 f8 7f          	cmp    ax,0x7f
c0015384:	77 2a                	ja     c00153b0 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0015386:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015389:	88 c2                	mov    dl,al
c001538b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001538e:	66 83 f8 5f          	cmp    ax,0x5f
c0015392:	76 04                	jbe    c0015398 <sendKeyboardToken(KeyboardToken)+0x3a8>
c0015394:	b0 20                	mov    al,0x20
c0015396:	eb 02                	jmp    c001539a <sendKeyboardToken(KeyboardToken)+0x3aa>
c0015398:	b0 00                	mov    al,0x0
c001539a:	29 c2                	sub    edx,eax
c001539c:	88 d0                	mov    al,dl
c001539e:	83 e8 40             	sub    eax,0x40
c00153a1:	0f b6 c0             	movzx  eax,al
c00153a4:	83 ec 0c             	sub    esp,0xc
c00153a7:	50                   	push   eax
c00153a8:	e8 d7 fb ff ff       	call   c0014f84 <sendKeyToTerminal(unsigned char)>
c00153ad:	83 c4 10             	add    esp,0x10
c00153b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153b3:	66 3d 00 03          	cmp    ax,0x300
c00153b7:	75 0f                	jne    c00153c8 <sendKeyboardToken(KeyboardToken)+0x3d8>
c00153b9:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00153bc:	83 f0 01             	xor    eax,0x1
c00153bf:	84 c0                	test   al,al
c00153c1:	74 05                	je     c00153c8 <sendKeyboardToken(KeyboardToken)+0x3d8>
c00153c3:	e8 45 b1 ff ff       	call   c001050d <doTerminalCycle()>
c00153c8:	90                   	nop
c00153c9:	c9                   	leave  
c00153ca:	c3                   	ret    

c00153cb <clearInternalKeybuffer(VgaText*)>:
c00153cb:	55                   	push   ebp
c00153cc:	89 e5                	mov    ebp,esp
c00153ce:	83 ec 08             	sub    esp,0x8
c00153d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153d4:	05 34 11 00 00       	add    eax,0x1134
c00153d9:	83 ec 0c             	sub    esp,0xc
c00153dc:	50                   	push   eax
c00153dd:	e8 b8 b2 fe ff       	call   c000069a <strlen>
c00153e2:	83 c4 10             	add    esp,0x10
c00153e5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00153e8:	81 c2 34 11 00 00    	add    edx,0x1134
c00153ee:	83 ec 04             	sub    esp,0x4
c00153f1:	50                   	push   eax
c00153f2:	6a 00                	push   0x0
c00153f4:	52                   	push   edx
c00153f5:	e8 83 b2 fe ff       	call   c000067d <memset>
c00153fa:	83 c4 10             	add    esp,0x10
c00153fd:	90                   	nop
c00153fe:	c9                   	leave  
c00153ff:	c3                   	ret    

c0015400 <readKeyboard(VgaText*, char*, unsigned long)>:
c0015400:	55                   	push   ebp
c0015401:	89 e5                	mov    ebp,esp
c0015403:	83 ec 18             	sub    esp,0x18
c0015406:	fb                   	sti    
c0015407:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c001540e:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015412:	0f 84 8a 00 00 00    	je     c00154a2 <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c0015418:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001541b:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015421:	84 c0                	test   al,al
c0015423:	75 11                	jne    c0015436 <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c0015425:	e8 d0 65 00 00       	call   c001b9fa <lockScheduler()>
c001542a:	e8 ff 68 00 00       	call   c001bd2e <schedule()>
c001542f:	e8 c8 65 00 00       	call   c001b9fc <unlockScheduler()>
c0015434:	eb e2                	jmp    c0015418 <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c0015436:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015439:	8d 50 01             	lea    edx,[eax+0x1]
c001543c:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001543f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015442:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0015448:	88 10                	mov    BYTE PTR [eax],dl
c001544a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001544d:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015453:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015456:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015459:	05 34 11 00 00       	add    eax,0x1134
c001545e:	83 ec 0c             	sub    esp,0xc
c0015461:	50                   	push   eax
c0015462:	e8 33 b2 fe ff       	call   c000069a <strlen>
c0015467:	83 c4 10             	add    esp,0x10
c001546a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001546d:	81 c2 34 11 00 00    	add    edx,0x1134
c0015473:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015476:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015479:	81 c2 34 11 00 00    	add    edx,0x1134
c001547f:	83 ec 04             	sub    esp,0x4
c0015482:	50                   	push   eax
c0015483:	51                   	push   ecx
c0015484:	52                   	push   edx
c0015485:	e8 85 b1 fe ff       	call   c000060f <memmove>
c001548a:	83 c4 10             	add    esp,0x10
c001548d:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015490:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015493:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015497:	0f 85 71 ff ff ff    	jne    c001540e <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c001549d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154a0:	eb 03                	jmp    c00154a5 <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c00154a2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154a5:	c9                   	leave  
c00154a6:	c3                   	ret    
c00154a7:	90                   	nop

c00154a8 <Keyboard::Keyboard(char const*)>:
c00154a8:	83 ec 0c             	sub    esp,0xc
c00154ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00154af:	83 ec 08             	sub    esp,0x8
c00154b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00154b6:	50                   	push   eax
c00154b7:	e8 6e e3 ff ff       	call   c001382a <Device::Device(char const*)>
c00154bc:	83 c4 10             	add    esp,0x10
c00154bf:	ba b4 7a 02 c0       	mov    edx,0xc0027ab4
c00154c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00154c8:	89 10                	mov    DWORD PTR [eax],edx
c00154ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00154ce:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c00154d8:	c6 05 c4 a7 02 c0 01 	mov    BYTE PTR ds:0xc002a7c4,0x1
c00154df:	90                   	nop
c00154e0:	83 c4 0c             	add    esp,0xc
c00154e3:	c3                   	ret    

c00154e4 <Keyboard::~Keyboard()>:
c00154e4:	83 ec 0c             	sub    esp,0xc
c00154e7:	ba b4 7a 02 c0       	mov    edx,0xc0027ab4
c00154ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00154f0:	89 10                	mov    DWORD PTR [eax],edx
c00154f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00154f6:	83 ec 0c             	sub    esp,0xc
c00154f9:	50                   	push   eax
c00154fa:	e8 dd df ff ff       	call   c00134dc <Device::~Device()>
c00154ff:	83 c4 10             	add    esp,0x10
c0015502:	90                   	nop
c0015503:	83 c4 0c             	add    esp,0xc
c0015506:	c3                   	ret    
c0015507:	90                   	nop

c0015508 <Keyboard::~Keyboard()>:
c0015508:	83 ec 0c             	sub    esp,0xc
c001550b:	83 ec 0c             	sub    esp,0xc
c001550e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015512:	e8 cd ff ff ff       	call   c00154e4 <Keyboard::~Keyboard()>
c0015517:	83 c4 10             	add    esp,0x10
c001551a:	83 ec 08             	sub    esp,0x8
c001551d:	68 5c 01 00 00       	push   0x15c
c0015522:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015526:	e8 24 cc ff ff       	call   c001214f <operator delete(void*, unsigned long)>
c001552b:	83 c4 10             	add    esp,0x10
c001552e:	83 c4 0c             	add    esp,0xc
c0015531:	c3                   	ret    

c0015532 <LogicalDisk::close(int, int, void*)>:
c0015532:	83 c8 ff             	or     eax,0xffffffff
c0015535:	c3                   	ret    

c0015536 <LogicalDisk::~LogicalDisk()>:
c0015536:	83 ec 0c             	sub    esp,0xc
c0015539:	ba 64 7b 02 c0       	mov    edx,0xc0027b64
c001553e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015542:	89 10                	mov    DWORD PTR [eax],edx
c0015544:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015548:	83 ec 0c             	sub    esp,0xc
c001554b:	50                   	push   eax
c001554c:	e8 8b df ff ff       	call   c00134dc <Device::~Device()>
c0015551:	83 c4 10             	add    esp,0x10
c0015554:	90                   	nop
c0015555:	83 c4 0c             	add    esp,0xc
c0015558:	c3                   	ret    
c0015559:	90                   	nop

c001555a <LogicalDisk::~LogicalDisk()>:
c001555a:	83 ec 0c             	sub    esp,0xc
c001555d:	83 ec 0c             	sub    esp,0xc
c0015560:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015564:	e8 cd ff ff ff       	call   c0015536 <LogicalDisk::~LogicalDisk()>
c0015569:	83 c4 10             	add    esp,0x10
c001556c:	83 ec 08             	sub    esp,0x8
c001556f:	68 74 01 00 00       	push   0x174
c0015574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015578:	e8 d2 cb ff ff       	call   c001214f <operator delete(void*, unsigned long)>
c001557d:	83 c4 10             	add    esp,0x10
c0015580:	83 c4 0c             	add    esp,0xc
c0015583:	c3                   	ret    

c0015584 <LogicalDisk::open(int, int, void*)>:
c0015584:	83 ec 18             	sub    esp,0x18
c0015587:	68 e0 7a 02 c0       	push   0xc0027ae0
c001558c:	e8 16 35 00 00       	call   c0018aa7 <Krnl::panic(char const*)>
c0015591:	83 c8 ff             	or     eax,0xffffffff
c0015594:	83 c4 1c             	add    esp,0x1c
c0015597:	c3                   	ret    

c0015598 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015598:	53                   	push   ebx
c0015599:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001559d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00155a1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00155a5:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00155ab:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00155b1:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00155b7:	77 10                	ja     c00155c9 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00155b9:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00155bf:	89 d3                	mov    ebx,edx
c00155c1:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c00155c7:	72 05                	jb     c00155ce <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c00155c9:	83 c8 ff             	or     eax,0xffffffff
c00155cc:	89 c2                	mov    edx,eax
c00155ce:	5b                   	pop    ebx
c00155cf:	c3                   	ret    

c00155d0 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00155d0:	56                   	push   esi
c00155d1:	83 c8 ff             	or     eax,0xffffffff
c00155d4:	53                   	push   ebx
c00155d5:	89 c2                	mov    edx,eax
c00155d7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00155db:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00155df:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00155e3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00155e9:	77 27                	ja     c0015612 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00155eb:	89 d8                	mov    eax,ebx
c00155ed:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c00155f3:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c00155f9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00155fe:	89 c2                	mov    edx,eax
c0015600:	73 10                	jae    c0015612 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015602:	89 c8                	mov    eax,ecx
c0015604:	89 da                	mov    edx,ebx
c0015606:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001560c:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015612:	5b                   	pop    ebx
c0015613:	5e                   	pop    esi
c0015614:	c3                   	ret    
c0015615:	90                   	nop

c0015616 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015616:	83 ec 1c             	sub    esp,0x1c
c0015619:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001561d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015621:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015625:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015629:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001562d:	89 04 24             	mov    DWORD PTR [esp],eax
c0015630:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015634:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015638:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001563c:	83 ec 08             	sub    esp,0x8
c001563f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015643:	50                   	push   eax
c0015644:	e8 e1 e1 ff ff       	call   c001382a <Device::Device(char const*)>
c0015649:	83 c4 10             	add    esp,0x10
c001564c:	ba 64 7b 02 c0       	mov    edx,0xc0027b64
c0015651:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015655:	89 10                	mov    DWORD PTR [eax],edx
c0015657:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001565b:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015662:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015666:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001566d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015671:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c001567b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001567f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015683:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015687:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c001568d:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0015693:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015697:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001569a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001569e:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00156a4:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00156aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156ae:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00156b2:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00156b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156bc:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00156c6:	90                   	nop
c00156c7:	83 c4 1c             	add    esp,0x1c
c00156ca:	c3                   	ret    
c00156cb:	90                   	nop

c00156cc <LogicalDisk::assignDriveLetter()>:
c00156cc:	55                   	push   ebp
c00156cd:	57                   	push   edi
c00156ce:	56                   	push   esi
c00156cf:	53                   	push   ebx
c00156d0:	83 ec 14             	sub    esp,0x14
c00156d3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00156d7:	8b 3d 00 ac 02 c0    	mov    edi,DWORD PTR ds:0xc002ac00
c00156dd:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c00156e3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00156e7:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c00156ed:	8b 3d 04 ac 02 c0    	mov    edi,DWORD PTR ds:0xc002ac04
c00156f3:	3c 01                	cmp    al,0x1
c00156f5:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00156f9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00156fd:	19 c0                	sbb    eax,eax
c00156ff:	83 e0 02             	and    eax,0x2
c0015702:	83 c0 41             	add    eax,0x41
c0015705:	0f be e8             	movsx  ebp,al
c0015708:	3c 43                	cmp    al,0x43
c001570a:	75 10                	jne    c001571c <LogicalDisk::assignDriveLetter()+0x50>
c001570c:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0015713:	75 5d                	jne    c0015772 <LogicalDisk::assignDriveLetter()+0xa6>
c0015715:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001571a:	75 56                	jne    c0015772 <LogicalDisk::assignDriveLetter()+0xa6>
c001571c:	8d 75 bf             	lea    esi,[ebp-0x41]
c001571f:	ba 01 00 00 00       	mov    edx,0x1
c0015724:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015728:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001572c:	d3 e2                	shl    edx,cl
c001572e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015732:	89 d7                	mov    edi,edx
c0015734:	89 d6                	mov    esi,edx
c0015736:	c1 ff 1f             	sar    edi,0x1f
c0015739:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c001573d:	21 f9                	and    ecx,edi
c001573f:	09 d1                	or     ecx,edx
c0015741:	75 2f                	jne    c0015772 <LogicalDisk::assignDriveLetter()+0xa6>
c0015743:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015747:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001574b:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0015751:	09 f2                	or     edx,esi
c0015753:	89 15 00 ac 02 c0    	mov    DWORD PTR ds:0xc002ac00,edx
c0015759:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001575d:	09 fa                	or     edx,edi
c001575f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0015763:	89 15 04 ac 02 c0    	mov    DWORD PTR ds:0xc002ac04,edx
c0015769:	89 1c bd 20 ac 02 c0 	mov    DWORD PTR [edi*4-0x3ffd53e0],ebx
c0015770:	eb 08                	jmp    c001577a <LogicalDisk::assignDriveLetter()+0xae>
c0015772:	45                   	inc    ebp
c0015773:	40                   	inc    eax
c0015774:	3c 5b                	cmp    al,0x5b
c0015776:	75 90                	jne    c0015708 <LogicalDisk::assignDriveLetter()+0x3c>
c0015778:	31 c0                	xor    eax,eax
c001577a:	83 c4 14             	add    esp,0x14
c001577d:	5b                   	pop    ebx
c001577e:	5e                   	pop    esi
c001577f:	5f                   	pop    edi
c0015780:	5d                   	pop    ebp
c0015781:	c3                   	ret    

c0015782 <LogicalDisk::mount()>:
c0015782:	56                   	push   esi
c0015783:	53                   	push   ebx
c0015784:	51                   	push   ecx
c0015785:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015789:	8b 1d 88 a7 02 c0    	mov    ebx,DWORD PTR ds:0xc002a788
c001578f:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0015799:	85 db                	test   ebx,ebx
c001579b:	74 50                	je     c00157ed <LogicalDisk::mount()+0x6b>
c001579d:	e8 43 62 00 00       	call   c001b9e5 <getIRQNestingLevel()>
c00157a2:	52                   	push   edx
c00157a3:	52                   	push   edx
c00157a4:	50                   	push   eax
c00157a5:	68 04 7b 02 c0       	push   0xc0027b04
c00157aa:	e8 80 ca ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c00157af:	83 c4 0c             	add    esp,0xc
c00157b2:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00157b9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00157bb:	83 e8 41             	sub    eax,0x41
c00157be:	50                   	push   eax
c00157bf:	56                   	push   esi
c00157c0:	53                   	push   ebx
c00157c1:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00157c4:	83 c4 10             	add    esp,0x10
c00157c7:	84 c0                	test   al,al
c00157c9:	74 08                	je     c00157d3 <LogicalDisk::mount()+0x51>
c00157cb:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00157d1:	eb 1c                	jmp    c00157ef <LogicalDisk::mount()+0x6d>
c00157d3:	e8 0d 62 00 00       	call   c001b9e5 <getIRQNestingLevel()>
c00157d8:	51                   	push   ecx
c00157d9:	51                   	push   ecx
c00157da:	50                   	push   eax
c00157db:	68 1f 7b 02 c0       	push   0xc0027b1f
c00157e0:	e8 4a ca ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c00157e5:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00157e8:	83 c4 10             	add    esp,0x10
c00157eb:	eb ac                	jmp    c0015799 <LogicalDisk::mount()+0x17>
c00157ed:	31 c0                	xor    eax,eax
c00157ef:	5a                   	pop    edx
c00157f0:	5b                   	pop    ebx
c00157f1:	5e                   	pop    esi
c00157f2:	c3                   	ret    
c00157f3:	90                   	nop

c00157f4 <LogicalDisk::unmount()>:
c00157f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00157f8:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015802:	c3                   	ret    
c0015803:	90                   	nop

c0015804 <LogicalDisk::unassignDriveLetter()>:
c0015804:	57                   	push   edi
c0015805:	56                   	push   esi
c0015806:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001580a:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0015811:	84 c9                	test   cl,cl
c0015813:	75 0f                	jne    c0015824 <LogicalDisk::unassignDriveLetter()+0x20>
c0015815:	c7 44 24 0c 3a 7b 02 c0 	mov    DWORD PTR [esp+0xc],0xc0027b3a
c001581d:	5e                   	pop    esi
c001581e:	5f                   	pop    edi
c001581f:	e9 83 32 00 00       	jmp    c0018aa7 <Krnl::panic(char const*)>
c0015824:	83 e9 41             	sub    ecx,0x41
c0015827:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001582e:	b8 01 00 00 00       	mov    eax,0x1
c0015833:	c7 04 8d 20 ac 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd53e0],0x0
c001583e:	d3 e0                	shl    eax,cl
c0015840:	89 c7                	mov    edi,eax
c0015842:	f7 d0                	not    eax
c0015844:	c1 ff 1f             	sar    edi,0x1f
c0015847:	21 05 00 ac 02 c0    	and    DWORD PTR ds:0xc002ac00,eax
c001584d:	89 fe                	mov    esi,edi
c001584f:	f7 d6                	not    esi
c0015851:	21 35 04 ac 02 c0    	and    DWORD PTR ds:0xc002ac04,esi
c0015857:	5e                   	pop    esi
c0015858:	5f                   	pop    edi
c0015859:	c3                   	ret    

c001585a <LogicalDisk::read(unsigned long long, int, void*)>:
c001585a:	57                   	push   edi
c001585b:	56                   	push   esi
c001585c:	53                   	push   ebx
c001585d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015861:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015865:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015869:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001586d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015873:	77 41                	ja     c00158b6 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0015875:	99                   	cdq    
c0015876:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001587c:	01 c8                	add    eax,ecx
c001587e:	11 da                	adc    edx,ebx
c0015880:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015886:	19 d7                	sbb    edi,edx
c0015888:	72 33                	jb     c00158bd <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c001588a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015890:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015896:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001589a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001589e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00158a4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00158aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00158ae:	5b                   	pop    ebx
c00158af:	5e                   	pop    esi
c00158b0:	5f                   	pop    edi
c00158b1:	e9 9a 09 00 00       	jmp    c0016250 <VCache::read(unsigned long long, int, void*)>
c00158b6:	b8 05 00 00 00       	mov    eax,0x5
c00158bb:	eb 05                	jmp    c00158c2 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00158bd:	b8 07 00 00 00       	mov    eax,0x7
c00158c2:	5b                   	pop    ebx
c00158c3:	5e                   	pop    esi
c00158c4:	5f                   	pop    edi
c00158c5:	c3                   	ret    

c00158c6 <LogicalDisk::write(unsigned long long, int, void*)>:
c00158c6:	57                   	push   edi
c00158c7:	56                   	push   esi
c00158c8:	53                   	push   ebx
c00158c9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00158cd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00158d1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00158d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00158d9:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00158df:	77 41                	ja     c0015922 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00158e1:	99                   	cdq    
c00158e2:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00158e8:	01 c8                	add    eax,ecx
c00158ea:	11 da                	adc    edx,ebx
c00158ec:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00158f2:	19 d7                	sbb    edi,edx
c00158f4:	72 33                	jb     c0015929 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00158f6:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00158fc:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015902:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015906:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001590a:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015910:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015916:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001591a:	5b                   	pop    ebx
c001591b:	5e                   	pop    esi
c001591c:	5f                   	pop    edi
c001591d:	e9 4a 08 00 00       	jmp    c001616c <VCache::write(unsigned long long, int, void*)>
c0015922:	b8 05 00 00 00       	mov    eax,0x5
c0015927:	eb 05                	jmp    c001592e <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0015929:	b8 07 00 00 00       	mov    eax,0x7
c001592e:	5b                   	pop    ebx
c001592f:	5e                   	pop    esi
c0015930:	5f                   	pop    edi
c0015931:	c3                   	ret    

c0015932 <Mouse::Mouse(char const*)>:
c0015932:	83 ec 0c             	sub    esp,0xc
c0015935:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015939:	83 ec 08             	sub    esp,0x8
c001593c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015940:	50                   	push   eax
c0015941:	e8 e4 de ff ff       	call   c001382a <Device::Device(char const*)>
c0015946:	83 c4 10             	add    esp,0x10
c0015949:	ba 90 7b 02 c0       	mov    edx,0xc0027b90
c001594e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015952:	89 10                	mov    DWORD PTR [eax],edx
c0015954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015958:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0015962:	90                   	nop
c0015963:	83 c4 0c             	add    esp,0xc
c0015966:	c3                   	ret    
c0015967:	90                   	nop

c0015968 <Mouse::~Mouse()>:
c0015968:	83 ec 0c             	sub    esp,0xc
c001596b:	ba 90 7b 02 c0       	mov    edx,0xc0027b90
c0015970:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015974:	89 10                	mov    DWORD PTR [eax],edx
c0015976:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001597a:	83 ec 0c             	sub    esp,0xc
c001597d:	50                   	push   eax
c001597e:	e8 59 db ff ff       	call   c00134dc <Device::~Device()>
c0015983:	83 c4 10             	add    esp,0x10
c0015986:	90                   	nop
c0015987:	83 c4 0c             	add    esp,0xc
c001598a:	c3                   	ret    
c001598b:	90                   	nop

c001598c <Mouse::~Mouse()>:
c001598c:	83 ec 0c             	sub    esp,0xc
c001598f:	83 ec 0c             	sub    esp,0xc
c0015992:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015996:	e8 cd ff ff ff       	call   c0015968 <Mouse::~Mouse()>
c001599b:	83 c4 10             	add    esp,0x10
c001599e:	83 ec 08             	sub    esp,0x8
c00159a1:	68 58 01 00 00       	push   0x158
c00159a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00159aa:	e8 a0 c7 ff ff       	call   c001214f <operator delete(void*, unsigned long)>
c00159af:	83 c4 10             	add    esp,0x10
c00159b2:	83 c4 0c             	add    esp,0xc
c00159b5:	c3                   	ret    

c00159b6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00159b6:	55                   	push   ebp
c00159b7:	57                   	push   edi
c00159b8:	56                   	push   esi
c00159b9:	53                   	push   ebx
c00159ba:	81 ec 28 01 00 00    	sub    esp,0x128
c00159c0:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00159c7:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00159ce:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00159d5:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00159dc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00159e0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00159e4:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00159eb:	e8 2c df ff ff       	call   c001391c <Device::getName()>
c00159f0:	5a                   	pop    edx
c00159f1:	59                   	pop    ecx
c00159f2:	50                   	push   eax
c00159f3:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00159f7:	55                   	push   ebp
c00159f8:	e8 1f ad fe ff       	call   c000071c <strcpy>
c00159fd:	5b                   	pop    ebx
c00159fe:	58                   	pop    eax
c00159ff:	68 b4 7b 02 c0       	push   0xc0027bb4
c0015a04:	55                   	push   ebp
c0015a05:	e8 c9 ad fe ff       	call   c00007d3 <strcat>
c0015a0a:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0015a11:	e8 2a c7 ff ff       	call   c0012140 <operator new(unsigned long)>
c0015a16:	83 c4 0c             	add    esp,0xc
c0015a19:	89 c3                	mov    ebx,eax
c0015a1b:	57                   	push   edi
c0015a1c:	56                   	push   esi
c0015a1d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015a21:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015a25:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0015a2c:	55                   	push   ebp
c0015a2d:	50                   	push   eax
c0015a2e:	e8 e3 fb ff ff       	call   c0015616 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0015a33:	83 c4 14             	add    esp,0x14
c0015a36:	53                   	push   ebx
c0015a37:	e8 90 fc ff ff       	call   c00156cc <LogicalDisk::assignDriveLetter()>
c0015a3c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015a3f:	e8 3e fd ff ff       	call   c0015782 <LogicalDisk::mount()>
c0015a44:	58                   	pop    eax
c0015a45:	5a                   	pop    edx
c0015a46:	53                   	push   ebx
c0015a47:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0015a4e:	e8 e7 db ff ff       	call   c001363a <Device::addChild(Device*)>
c0015a53:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015a59:	5b                   	pop    ebx
c0015a5a:	5e                   	pop    esi
c0015a5b:	5f                   	pop    edi
c0015a5c:	5d                   	pop    ebp
c0015a5d:	c3                   	ret    

c0015a5e <createPartitionsForDisk(PhysicalDisk*)>:
c0015a5e:	55                   	push   ebp
c0015a5f:	57                   	push   edi
c0015a60:	56                   	push   esi
c0015a61:	53                   	push   ebx
c0015a62:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0015a68:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0015a6f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015a75:	3d 00 02 00 00       	cmp    eax,0x200
c0015a7a:	74 27                	je     c0015aa3 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0015a7c:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0015a82:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0015a88:	83 ec 10             	sub    esp,0x10
c0015a8b:	0f a4 f7 0a          	shld   edi,esi,0xa
c0015a8f:	99                   	cdq    
c0015a90:	c1 e6 0a             	shl    esi,0xa
c0015a93:	52                   	push   edx
c0015a94:	89 fd                	mov    ebp,edi
c0015a96:	50                   	push   eax
c0015a97:	55                   	push   ebp
c0015a98:	56                   	push   esi
c0015a99:	e8 9e da 00 00       	call   c002353c <__udivdi3>
c0015a9e:	e9 b1 00 00 00       	jmp    c0015b54 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0015aa3:	83 ec 0c             	sub    esp,0xc
c0015aa6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015aa8:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0015aac:	56                   	push   esi
c0015aad:	6a 01                	push   0x1
c0015aaf:	6a 00                	push   0x0
c0015ab1:	6a 00                	push   0x0
c0015ab3:	53                   	push   ebx
c0015ab4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0015ab7:	83 c4 20             	add    esp,0x20
c0015aba:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0015ac2:	75 0a                	jne    c0015ace <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0015ac4:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0015acc:	74 2c                	je     c0015afa <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0015ace:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015ad4:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0015ada:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0015ae0:	83 ec 10             	sub    esp,0x10
c0015ae3:	0f a4 c2 0a          	shld   edx,eax,0xa
c0015ae7:	89 f7                	mov    edi,esi
c0015ae9:	c1 e0 0a             	shl    eax,0xa
c0015aec:	c1 ff 1f             	sar    edi,0x1f
c0015aef:	57                   	push   edi
c0015af0:	56                   	push   esi
c0015af1:	52                   	push   edx
c0015af2:	50                   	push   eax
c0015af3:	e8 44 da 00 00       	call   c002353c <__udivdi3>
c0015af8:	eb 5a                	jmp    c0015b54 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0015afa:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0015b01:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0015b08:	83 e1 7f             	and    ecx,0x7f
c0015b0b:	83 e0 7f             	and    eax,0x7f
c0015b0e:	01 c1                	add    ecx,eax
c0015b10:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0015b17:	83 e0 7f             	and    eax,0x7f
c0015b1a:	01 c1                	add    ecx,eax
c0015b1c:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0015b23:	83 e0 7f             	and    eax,0x7f
c0015b26:	00 c1                	add    cl,al
c0015b28:	74 41                	je     c0015b6b <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0015b2a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015b30:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0015b36:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0015b3c:	83 ec 10             	sub    esp,0x10
c0015b3f:	0f a4 c2 0a          	shld   edx,eax,0xa
c0015b43:	89 f7                	mov    edi,esi
c0015b45:	c1 e0 0a             	shl    eax,0xa
c0015b48:	c1 ff 1f             	sar    edi,0x1f
c0015b4b:	57                   	push   edi
c0015b4c:	56                   	push   esi
c0015b4d:	52                   	push   edx
c0015b4e:	50                   	push   eax
c0015b4f:	e8 e8 d9 00 00       	call   c002353c <__udivdi3>
c0015b54:	83 c4 14             	add    esp,0x14
c0015b57:	52                   	push   edx
c0015b58:	50                   	push   eax
c0015b59:	6a 00                	push   0x0
c0015b5b:	6a 00                	push   0x0
c0015b5d:	53                   	push   ebx
c0015b5e:	e8 53 fe ff ff       	call   c00159b6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0015b63:	83 c4 20             	add    esp,0x20
c0015b66:	e9 79 01 00 00       	jmp    c0015ce4 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0015b6b:	89 f0                	mov    eax,esi
c0015b6d:	31 f6                	xor    esi,esi
c0015b6f:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0015b76:	75 02                	jne    c0015b7a <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0015b78:	89 f1                	mov    ecx,esi
c0015b7a:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0015b81:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0015b88:	c1 e2 08             	shl    edx,0x8
c0015b8b:	c1 e7 10             	shl    edi,0x10
c0015b8e:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0015b96:	09 fa                	or     edx,edi
c0015b98:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0015ba0:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0015ba7:	83 c0 10             	add    eax,0x10
c0015baa:	09 fa                	or     edx,edi
c0015bac:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0015bb3:	c1 e7 18             	shl    edi,0x18
c0015bb6:	09 fa                	or     edx,edi
c0015bb8:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0015bbf:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0015bc3:	c1 e7 10             	shl    edi,0x10
c0015bc6:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0015bcd:	c1 e2 08             	shl    edx,0x8
c0015bd0:	09 fa                	or     edx,edi
c0015bd2:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0015bd9:	09 fa                	or     edx,edi
c0015bdb:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0015be2:	c1 e7 18             	shl    edi,0x18
c0015be5:	09 fa                	or     edx,edi
c0015be7:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0015beb:	46                   	inc    esi
c0015bec:	83 fe 04             	cmp    esi,0x4
c0015bef:	0f 85 7a ff ff ff    	jne    c0015b6f <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0015bf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015bf9:	83 f0 01             	xor    eax,0x1
c0015bfc:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0015c00:	75 57                	jne    c0015c59 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0015c02:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c06:	83 f0 01             	xor    eax,0x1
c0015c09:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0015c0d:	75 4a                	jne    c0015c59 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0015c0f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0015c13:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0015c1b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0015c23:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015c29:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0015c2f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0015c35:	0f a4 c2 0a          	shld   edx,eax,0xa
c0015c39:	89 f7                	mov    edi,esi
c0015c3b:	c1 e0 0a             	shl    eax,0xa
c0015c3e:	c1 ff 1f             	sar    edi,0x1f
c0015c41:	57                   	push   edi
c0015c42:	56                   	push   esi
c0015c43:	52                   	push   edx
c0015c44:	50                   	push   eax
c0015c45:	e8 f2 d8 00 00       	call   c002353c <__udivdi3>
c0015c4a:	83 c4 10             	add    esp,0x10
c0015c4d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015c51:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015c55:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0015c59:	84 c9                	test   cl,cl
c0015c5b:	74 53                	je     c0015cb0 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0015c5d:	0f b6 c9             	movzx  ecx,cl
c0015c60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c64:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015c68:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015c6c:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0015c70:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015c74:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015c78:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0015c7c:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0015c80:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015c84:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0015c88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015c8c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015c90:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0015c94:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0015c98:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0015c9c:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0015ca0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015ca4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015ca8:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0015cac:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0015cb0:	31 ed                	xor    ebp,ebp
c0015cb2:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0015cb6:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0015cba:	89 f8                	mov    eax,edi
c0015cbc:	09 f0                	or     eax,esi
c0015cbe:	74 1e                	je     c0015cde <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0015cc0:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0015cc4:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0015cc8:	89 d1                	mov    ecx,edx
c0015cca:	09 c1                	or     ecx,eax
c0015ccc:	74 10                	je     c0015cde <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0015cce:	83 ec 0c             	sub    esp,0xc
c0015cd1:	57                   	push   edi
c0015cd2:	56                   	push   esi
c0015cd3:	52                   	push   edx
c0015cd4:	50                   	push   eax
c0015cd5:	53                   	push   ebx
c0015cd6:	e8 db fc ff ff       	call   c00159b6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0015cdb:	83 c4 20             	add    esp,0x20
c0015cde:	45                   	inc    ebp
c0015cdf:	83 fd 04             	cmp    ebp,0x4
c0015ce2:	75 ce                	jne    c0015cb2 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0015ce4:	81 c4 5c 02 00 00    	add    esp,0x25c
c0015cea:	5b                   	pop    ebx
c0015ceb:	5e                   	pop    esi
c0015cec:	5f                   	pop    edi
c0015ced:	5d                   	pop    ebp
c0015cee:	c3                   	ret    
c0015cef:	90                   	nop

c0015cf0 <Timer::Timer(char const*)>:
c0015cf0:	83 ec 0c             	sub    esp,0xc
c0015cf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015cf7:	83 ec 08             	sub    esp,0x8
c0015cfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015cfe:	50                   	push   eax
c0015cff:	e8 26 db ff ff       	call   c001382a <Device::Device(char const*)>
c0015d04:	83 c4 10             	add    esp,0x10
c0015d07:	ba c8 7b 02 c0       	mov    edx,0xc0027bc8
c0015d0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d10:	89 10                	mov    DWORD PTR [eax],edx
c0015d12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d16:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0015d20:	90                   	nop
c0015d21:	83 c4 0c             	add    esp,0xc
c0015d24:	c3                   	ret    
c0015d25:	90                   	nop

c0015d26 <Timer::~Timer()>:
c0015d26:	83 ec 0c             	sub    esp,0xc
c0015d29:	ba c8 7b 02 c0       	mov    edx,0xc0027bc8
c0015d2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d32:	89 10                	mov    DWORD PTR [eax],edx
c0015d34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d38:	83 ec 0c             	sub    esp,0xc
c0015d3b:	50                   	push   eax
c0015d3c:	e8 9b d7 ff ff       	call   c00134dc <Device::~Device()>
c0015d41:	83 c4 10             	add    esp,0x10
c0015d44:	90                   	nop
c0015d45:	83 c4 0c             	add    esp,0xc
c0015d48:	c3                   	ret    
c0015d49:	90                   	nop

c0015d4a <Timer::~Timer()>:
c0015d4a:	83 ec 0c             	sub    esp,0xc
c0015d4d:	83 ec 0c             	sub    esp,0xc
c0015d50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d54:	e8 cd ff ff ff       	call   c0015d26 <Timer::~Timer()>
c0015d59:	83 c4 10             	add    esp,0x10
c0015d5c:	83 ec 08             	sub    esp,0x8
c0015d5f:	68 5c 01 00 00       	push   0x15c
c0015d64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d68:	e8 e2 c3 ff ff       	call   c001214f <operator delete(void*, unsigned long)>
c0015d6d:	83 c4 10             	add    esp,0x10
c0015d70:	83 c4 0c             	add    esp,0xc
c0015d73:	c3                   	ret    

c0015d74 <Timer::read()>:
c0015d74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d78:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015d7e:	c3                   	ret    

c0015d7f <timerHandler(unsigned long long)>:
c0015d7f:	55                   	push   ebp
c0015d80:	57                   	push   edi
c0015d81:	56                   	push   esi
c0015d82:	53                   	push   ebx
c0015d83:	83 ec 0c             	sub    esp,0xc
c0015d86:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0015d8a:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0015d8e:	01 35 90 ac 02 c0    	add    DWORD PTR ds:0xc002ac90,esi
c0015d94:	11 3d 94 ac 02 c0    	adc    DWORD PTR ds:0xc002ac94,edi
c0015d9a:	80 3d 2d a6 02 c0 00 	cmp    BYTE PTR ds:0xc002a62d,0x0
c0015da1:	0f 84 07 01 00 00    	je     c0015eae <timerHandler(unsigned long long)+0x12f>
c0015da7:	e8 75 5c 00 00       	call   c001ba21 <lockStuff()>
c0015dac:	83 ec 0c             	sub    esp,0xc
c0015daf:	68 1c bb 02 c0       	push   0xc002bb1c
c0015db4:	e8 a9 f8 00 00       	call   c0025662 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015db9:	c7 04 24 1c bb 02 c0 	mov    DWORD PTR [esp],0xc002bb1c
c0015dc0:	89 c3                	mov    ebx,eax
c0015dc2:	e8 a3 f8 00 00       	call   c002566a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015dc7:	83 c4 10             	add    esp,0x10
c0015dca:	84 c0                	test   al,al
c0015dcc:	74 60                	je     c0015e2e <timerHandler(unsigned long long)+0xaf>
c0015dce:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015dd4:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0015dd7:	85 c0                	test   eax,eax
c0015dd9:	0f 85 91 00 00 00    	jne    c0015e70 <timerHandler(unsigned long long)+0xf1>
c0015ddf:	e9 be 00 00 00       	jmp    c0015ea2 <timerHandler(unsigned long long)+0x123>
c0015de4:	83 ec 0c             	sub    esp,0xc
c0015de7:	55                   	push   ebp
c0015de8:	e8 1d 62 00 00       	call   c001c00a <unblockTask(ThreadControlBlock*)>
c0015ded:	83 c4 10             	add    esp,0x10
c0015df0:	39 eb                	cmp    ebx,ebp
c0015df2:	75 12                	jne    c0015e06 <timerHandler(unsigned long long)+0x87>
c0015df4:	83 ec 0c             	sub    esp,0xc
c0015df7:	68 1c bb 02 c0       	push   0xc002bb1c
c0015dfc:	e8 61 f8 00 00       	call   c0025662 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015e01:	89 c3                	mov    ebx,eax
c0015e03:	83 c4 10             	add    esp,0x10
c0015e06:	83 ec 0c             	sub    esp,0xc
c0015e09:	68 1c bb 02 c0       	push   0xc002bb1c
c0015e0e:	e8 57 f8 00 00       	call   c002566a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015e13:	83 c4 10             	add    esp,0x10
c0015e16:	84 c0                	test   al,al
c0015e18:	75 b4                	jne    c0015dce <timerHandler(unsigned long long)+0x4f>
c0015e1a:	83 ec 0c             	sub    esp,0xc
c0015e1d:	68 1c bb 02 c0       	push   0xc002bb1c
c0015e22:	e8 3b f8 00 00       	call   c0025662 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015e27:	83 c4 10             	add    esp,0x10
c0015e2a:	39 d8                	cmp    eax,ebx
c0015e2c:	74 a0                	je     c0015dce <timerHandler(unsigned long long)+0x4f>
c0015e2e:	83 ec 0c             	sub    esp,0xc
c0015e31:	68 1c bb 02 c0       	push   0xc002bb1c
c0015e36:	e8 27 f8 00 00       	call   c0025662 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015e3b:	c7 04 24 1c bb 02 c0 	mov    DWORD PTR [esp],0xc002bb1c
c0015e42:	89 c5                	mov    ebp,eax
c0015e44:	e8 3d f8 00 00       	call   c0025686 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015e49:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0015e4c:	83 c4 10             	add    esp,0x10
c0015e4f:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0015e52:	39 15 90 ac 02 c0    	cmp    DWORD PTR ds:0xc002ac90,edx
c0015e58:	a1 94 ac 02 c0       	mov    eax,ds:0xc002ac94
c0015e5d:	19 c8                	sbb    eax,ecx
c0015e5f:	73 83                	jae    c0015de4 <timerHandler(unsigned long long)+0x65>
c0015e61:	50                   	push   eax
c0015e62:	50                   	push   eax
c0015e63:	55                   	push   ebp
c0015e64:	68 1c bb 02 c0       	push   0xc002bb1c
c0015e69:	e8 c6 f8 00 00       	call   c0025734 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015e6e:	eb 93                	jmp    c0015e03 <timerHandler(unsigned long long)+0x84>
c0015e70:	80 3d 2c a6 02 c0 00 	cmp    BYTE PTR ds:0xc002a62c,0x0
c0015e77:	74 29                	je     c0015ea2 <timerHandler(unsigned long long)+0x123>
c0015e79:	39 c6                	cmp    esi,eax
c0015e7b:	bb 00 00 00 00       	mov    ebx,0x0
c0015e80:	19 df                	sbb    edi,ebx
c0015e82:	72 19                	jb     c0015e9d <timerHandler(unsigned long long)+0x11e>
c0015e84:	e8 71 5b 00 00       	call   c001b9fa <lockScheduler()>
c0015e89:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e8e:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0015e91:	e8 98 5e 00 00       	call   c001bd2e <schedule()>
c0015e96:	e8 61 5b 00 00       	call   c001b9fc <unlockScheduler()>
c0015e9b:	eb 05                	jmp    c0015ea2 <timerHandler(unsigned long long)+0x123>
c0015e9d:	29 f0                	sub    eax,esi
c0015e9f:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0015ea2:	83 c4 0c             	add    esp,0xc
c0015ea5:	5b                   	pop    ebx
c0015ea6:	5e                   	pop    esi
c0015ea7:	5f                   	pop    edi
c0015ea8:	5d                   	pop    ebp
c0015ea9:	e9 05 5f 00 00       	jmp    c001bdb3 <unlockStuff()>
c0015eae:	83 c4 0c             	add    esp,0xc
c0015eb1:	5b                   	pop    ebx
c0015eb2:	5e                   	pop    esi
c0015eb3:	5f                   	pop    edi
c0015eb4:	5d                   	pop    ebp
c0015eb5:	c3                   	ret    

c0015eb6 <setupTimer(int)>:
c0015eb6:	57                   	push   edi
c0015eb7:	56                   	push   esi
c0015eb8:	53                   	push   ebx
c0015eb9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015ebd:	e8 99 f7 00 00       	call   c002565b <CPU::getNumber()>
c0015ec2:	85 c0                	test   eax,eax
c0015ec4:	74 32                	je     c0015ef8 <setupTimer(int)+0x42>
c0015ec6:	83 ec 0c             	sub    esp,0xc
c0015ec9:	68 60 01 00 00       	push   0x160
c0015ece:	e8 6d c2 ff ff       	call   c0012140 <operator new(unsigned long)>
c0015ed3:	89 04 24             	mov    DWORD PTR [esp],eax
c0015ed6:	89 c3                	mov    ebx,eax
c0015ed8:	e8 f5 d0 00 00       	call   c0022fd2 <APICTimer::APICTimer()>
c0015edd:	6a 00                	push   0x0
c0015edf:	6a 00                	push   0x0
c0015ee1:	56                   	push   esi
c0015ee2:	53                   	push   ebx
c0015ee3:	e8 f4 ce 00 00       	call   c0022ddc <APICTimer::open(int, int, void*)>
c0015ee8:	83 c4 20             	add    esp,0x20
c0015eeb:	e8 50 f3 00 00       	call   c0025240 <CPU::current()>
c0015ef0:	56                   	push   esi
c0015ef1:	56                   	push   esi
c0015ef2:	53                   	push   ebx
c0015ef3:	e9 96 00 00 00       	jmp    c0015f8e <setupTimer(int)+0xd8>
c0015ef8:	e8 43 f3 00 00       	call   c0025240 <CPU::current()>
c0015efd:	83 ec 0c             	sub    esp,0xc
c0015f00:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0015f06:	e8 11 da ff ff       	call   c001391c <Device::getName()>
c0015f0b:	83 c4 10             	add    esp,0x10
c0015f0e:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0015f11:	0f 85 87 00 00 00    	jne    c0015f9e <setupTimer(int)+0xe8>
c0015f17:	a1 28 a6 02 c0       	mov    eax,ds:0xc002a628
c0015f1c:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0015f23:	74 79                	je     c0015f9e <setupTimer(int)+0xe8>
c0015f25:	83 ec 0c             	sub    esp,0xc
c0015f28:	68 5c 01 00 00       	push   0x15c
c0015f2d:	e8 0e c2 ff ff       	call   c0012140 <operator new(unsigned long)>
c0015f32:	89 04 24             	mov    DWORD PTR [esp],eax
c0015f35:	89 c3                	mov    ebx,eax
c0015f37:	e8 e6 d1 00 00       	call   c0023122 <PIT::PIT()>
c0015f3c:	59                   	pop    ecx
c0015f3d:	5f                   	pop    edi
c0015f3e:	53                   	push   ebx
c0015f3f:	ff 35 28 a6 02 c0    	push   DWORD PTR ds:0xc002a628
c0015f45:	e8 f0 d6 ff ff       	call   c001363a <Device::addChild(Device*)>
c0015f4a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015f4c:	6a 00                	push   0x0
c0015f4e:	6a 00                	push   0x0
c0015f50:	56                   	push   esi
c0015f51:	53                   	push   ebx
c0015f52:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015f55:	83 c4 14             	add    esp,0x14
c0015f58:	68 60 01 00 00       	push   0x160
c0015f5d:	e8 de c1 ff ff       	call   c0012140 <operator new(unsigned long)>
c0015f62:	89 04 24             	mov    DWORD PTR [esp],eax
c0015f65:	89 c7                	mov    edi,eax
c0015f67:	e8 66 d0 00 00       	call   c0022fd2 <APICTimer::APICTimer()>
c0015f6c:	6a 00                	push   0x0
c0015f6e:	6a 00                	push   0x0
c0015f70:	56                   	push   esi
c0015f71:	57                   	push   edi
c0015f72:	e8 65 ce 00 00       	call   c0022ddc <APICTimer::open(int, int, void*)>
c0015f77:	83 c4 20             	add    esp,0x20
c0015f7a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015f7c:	6a 00                	push   0x0
c0015f7e:	6a 00                	push   0x0
c0015f80:	6a 00                	push   0x0
c0015f82:	53                   	push   ebx
c0015f83:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015f86:	e8 b5 f2 00 00       	call   c0025240 <CPU::current()>
c0015f8b:	5a                   	pop    edx
c0015f8c:	59                   	pop    ecx
c0015f8d:	57                   	push   edi
c0015f8e:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0015f94:	e8 a1 d6 ff ff       	call   c001363a <Device::addChild(Device*)>
c0015f99:	83 c4 10             	add    esp,0x10
c0015f9c:	eb 33                	jmp    c0015fd1 <setupTimer(int)+0x11b>
c0015f9e:	83 ec 0c             	sub    esp,0xc
c0015fa1:	68 5c 01 00 00       	push   0x15c
c0015fa6:	e8 95 c1 ff ff       	call   c0012140 <operator new(unsigned long)>
c0015fab:	89 04 24             	mov    DWORD PTR [esp],eax
c0015fae:	89 c3                	mov    ebx,eax
c0015fb0:	e8 6d d1 00 00       	call   c0023122 <PIT::PIT()>
c0015fb5:	58                   	pop    eax
c0015fb6:	5a                   	pop    edx
c0015fb7:	53                   	push   ebx
c0015fb8:	ff 35 28 a6 02 c0    	push   DWORD PTR ds:0xc002a628
c0015fbe:	e8 77 d6 ff ff       	call   c001363a <Device::addChild(Device*)>
c0015fc3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015fc5:	6a 00                	push   0x0
c0015fc7:	6a 00                	push   0x0
c0015fc9:	56                   	push   esi
c0015fca:	53                   	push   ebx
c0015fcb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015fce:	83 c4 20             	add    esp,0x20
c0015fd1:	89 d8                	mov    eax,ebx
c0015fd3:	5b                   	pop    ebx
c0015fd4:	5e                   	pop    esi
c0015fd5:	5f                   	pop    edi
c0015fd6:	c3                   	ret    
c0015fd7:	90                   	nop

c0015fd8 <VCache::VCache(PhysicalDisk*)>:
c0015fd8:	53                   	push   ebx
c0015fd9:	83 ec 08             	sub    esp,0x8
c0015fdc:	ba f8 7b 02 c0       	mov    edx,0xc0027bf8
c0015fe1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fe5:	89 10                	mov    DWORD PTR [eax],edx
c0015fe7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015feb:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0015ff2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ff6:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0015ffd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016001:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016008:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001600f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016013:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001601a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016021:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016025:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001602c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016030:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016034:	83 ec 0c             	sub    esp,0xc
c0016037:	6a 10                	push   0x10
c0016039:	e8 02 c1 ff ff       	call   c0012140 <operator new(unsigned long)>
c001603e:	83 c4 10             	add    esp,0x10
c0016041:	89 c3                	mov    ebx,eax
c0016043:	83 ec 0c             	sub    esp,0xc
c0016046:	53                   	push   ebx
c0016047:	e8 c6 5a 00 00       	call   c001bb12 <Mutex::Mutex()>
c001604c:	83 c4 10             	add    esp,0x10
c001604f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016053:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016056:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001605a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001605e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016061:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016065:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c001606c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016070:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016076:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001607a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001607d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016081:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016087:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001608d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016091:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016094:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016097:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001609b:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001609f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00160a3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00160a9:	c1 e0 06             	shl    eax,0x6
c00160ac:	83 ec 0c             	sub    esp,0xc
c00160af:	50                   	push   eax
c00160b0:	e8 71 90 ff ff       	call   c000f126 <malloc>
c00160b5:	83 c4 10             	add    esp,0x10
c00160b8:	89 c2                	mov    edx,eax
c00160ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160be:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00160c1:	90                   	nop
c00160c2:	83 c4 08             	add    esp,0x8
c00160c5:	5b                   	pop    ebx
c00160c6:	c3                   	ret    
c00160c7:	90                   	nop

c00160c8 <VCache::writeWriteBuffer()>:
c00160c8:	53                   	push   ebx
c00160c9:	83 ec 14             	sub    esp,0x14
c00160cc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00160d0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00160d3:	8b 10                	mov    edx,DWORD PTR [eax]
c00160d5:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00160d8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00160db:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00160de:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00160e1:	50                   	push   eax
c00160e2:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00160e5:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00160ec:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00160f3:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c00160f7:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c00160fe:	83 c4 28             	add    esp,0x28
c0016101:	5b                   	pop    ebx
c0016102:	c3                   	ret    
c0016103:	90                   	nop

c0016104 <VCache::~VCache()>:
c0016104:	83 ec 0c             	sub    esp,0xc
c0016107:	ba f8 7b 02 c0       	mov    edx,0xc0027bf8
c001610c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016110:	89 10                	mov    DWORD PTR [eax],edx
c0016112:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016116:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016119:	84 c0                	test   al,al
c001611b:	74 0f                	je     c001612c <VCache::~VCache()+0x28>
c001611d:	83 ec 0c             	sub    esp,0xc
c0016120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016124:	e8 9f ff ff ff       	call   c00160c8 <VCache::writeWriteBuffer()>
c0016129:	83 c4 10             	add    esp,0x10
c001612c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016130:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016133:	83 ec 0c             	sub    esp,0xc
c0016136:	50                   	push   eax
c0016137:	e8 fa 8f ff ff       	call   c000f136 <free>
c001613c:	83 c4 10             	add    esp,0x10
c001613f:	90                   	nop
c0016140:	83 c4 0c             	add    esp,0xc
c0016143:	c3                   	ret    

c0016144 <VCache::~VCache()>:
c0016144:	83 ec 0c             	sub    esp,0xc
c0016147:	83 ec 0c             	sub    esp,0xc
c001614a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001614e:	e8 b1 ff ff ff       	call   c0016104 <VCache::~VCache()>
c0016153:	83 c4 10             	add    esp,0x10
c0016156:	83 ec 08             	sub    esp,0x8
c0016159:	6a 30                	push   0x30
c001615b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001615f:	e8 eb bf ff ff       	call   c001214f <operator delete(void*, unsigned long)>
c0016164:	83 c4 10             	add    esp,0x10
c0016167:	83 c4 0c             	add    esp,0xc
c001616a:	c3                   	ret    
c001616b:	90                   	nop

c001616c <VCache::write(unsigned long long, int, void*)>:
c001616c:	55                   	push   ebp
c001616d:	57                   	push   edi
c001616e:	56                   	push   esi
c001616f:	53                   	push   ebx
c0016170:	83 ec 28             	sub    esp,0x28
c0016173:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016177:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001617b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001617f:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016183:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016186:	e8 e9 5d 00 00       	call   c001bf74 <Semaphore::acquire()>
c001618b:	83 c4 10             	add    esp,0x10
c001618e:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016192:	74 66                	je     c00161fa <VCache::write(unsigned long long, int, void*)+0x8e>
c0016194:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016197:	99                   	cdq    
c0016198:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001619c:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c001619f:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00161a2:	89 c1                	mov    ecx,eax
c00161a4:	89 d0                	mov    eax,edx
c00161a6:	31 f1                	xor    ecx,esi
c00161a8:	31 f8                	xor    eax,edi
c00161aa:	89 ca                	mov    edx,ecx
c00161ac:	09 c2                	or     edx,eax
c00161ae:	75 3e                	jne    c00161ee <VCache::write(unsigned long long, int, void*)+0x82>
c00161b0:	83 fd 01             	cmp    ebp,0x1
c00161b3:	75 39                	jne    c00161ee <VCache::write(unsigned long long, int, void*)+0x82>
c00161b5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00161b8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00161be:	51                   	push   ecx
c00161bf:	50                   	push   eax
c00161c0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00161c4:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00161c8:	0f af c8             	imul   ecx,eax
c00161cb:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c00161ce:	51                   	push   ecx
c00161cf:	e8 73 a4 fe ff       	call   c0000647 <memcpy>
c00161d4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00161d7:	83 c4 10             	add    esp,0x10
c00161da:	40                   	inc    eax
c00161db:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00161de:	83 f8 40             	cmp    eax,0x40
c00161e1:	75 57                	jne    c001623a <VCache::write(unsigned long long, int, void*)+0xce>
c00161e3:	83 ec 0c             	sub    esp,0xc
c00161e6:	53                   	push   ebx
c00161e7:	e8 dc fe ff ff       	call   c00160c8 <VCache::writeWriteBuffer()>
c00161ec:	eb 34                	jmp    c0016222 <VCache::write(unsigned long long, int, void*)+0xb6>
c00161ee:	83 ec 0c             	sub    esp,0xc
c00161f1:	53                   	push   ebx
c00161f2:	e8 d1 fe ff ff       	call   c00160c8 <VCache::writeWriteBuffer()>
c00161f7:	83 c4 10             	add    esp,0x10
c00161fa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00161fd:	83 fd 3f             	cmp    ebp,0x3f
c0016200:	7f 25                	jg     c0016227 <VCache::write(unsigned long long, int, void*)+0xbb>
c0016202:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0016205:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016208:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c001620b:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c001620f:	52                   	push   edx
c0016210:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0016216:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001621a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001621d:	e8 25 a4 fe ff       	call   c0000647 <memcpy>
c0016222:	83 c4 10             	add    esp,0x10
c0016225:	eb 13                	jmp    c001623a <VCache::write(unsigned long long, int, void*)+0xce>
c0016227:	83 ec 0c             	sub    esp,0xc
c001622a:	8b 10                	mov    edx,DWORD PTR [eax]
c001622c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016230:	55                   	push   ebp
c0016231:	57                   	push   edi
c0016232:	56                   	push   esi
c0016233:	50                   	push   eax
c0016234:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016237:	83 c4 20             	add    esp,0x20
c001623a:	83 ec 0c             	sub    esp,0xc
c001623d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016240:	e8 b7 62 00 00       	call   c001c4fc <Semaphore::release()>
c0016245:	83 c4 2c             	add    esp,0x2c
c0016248:	31 c0                	xor    eax,eax
c001624a:	5b                   	pop    ebx
c001624b:	5e                   	pop    esi
c001624c:	5f                   	pop    edi
c001624d:	5d                   	pop    ebp
c001624e:	c3                   	ret    
c001624f:	90                   	nop

c0016250 <VCache::read(unsigned long long, int, void*)>:
c0016250:	57                   	push   edi
c0016251:	56                   	push   esi
c0016252:	53                   	push   ebx
c0016253:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016257:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001625b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001625f:	83 ec 0c             	sub    esp,0xc
c0016262:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016265:	e8 0a 5d 00 00       	call   c001bf74 <Semaphore::acquire()>
c001626a:	83 c4 10             	add    esp,0x10
c001626d:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016271:	74 0c                	je     c001627f <VCache::read(unsigned long long, int, void*)+0x2f>
c0016273:	83 ec 0c             	sub    esp,0xc
c0016276:	53                   	push   ebx
c0016277:	e8 4c fe ff ff       	call   c00160c8 <VCache::writeWriteBuffer()>
c001627c:	83 c4 10             	add    esp,0x10
c001627f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016282:	83 ec 0c             	sub    esp,0xc
c0016285:	8b 10                	mov    edx,DWORD PTR [eax]
c0016287:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001628b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001628f:	57                   	push   edi
c0016290:	56                   	push   esi
c0016291:	50                   	push   eax
c0016292:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016295:	83 c4 14             	add    esp,0x14
c0016298:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001629b:	e8 5c 62 00 00       	call   c001c4fc <Semaphore::release()>
c00162a0:	83 c4 10             	add    esp,0x10
c00162a3:	31 c0                	xor    eax,eax
c00162a5:	5b                   	pop    ebx
c00162a6:	5e                   	pop    esi
c00162a7:	5f                   	pop    edi
c00162a8:	c3                   	ret    
c00162a9:	90                   	nop

c00162aa <Video::putrect(int, int, int, int, unsigned int)>:
c00162aa:	55                   	push   ebp
c00162ab:	57                   	push   edi
c00162ac:	56                   	push   esi
c00162ad:	53                   	push   ebx
c00162ae:	83 ec 1c             	sub    esp,0x1c
c00162b1:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00162b5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00162b9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00162bd:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00162c1:	01 e8                	add    eax,ebp
c00162c3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00162c7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00162cb:	01 df                	add    edi,ebx
c00162cd:	39 fb                	cmp    ebx,edi
c00162cf:	7d 1b                	jge    c00162ec <Video::putrect(int, int, int, int, unsigned int)+0x42>
c00162d1:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00162d5:	7d 12                	jge    c00162e9 <Video::putrect(int, int, int, int, unsigned int)+0x3f>
c00162d7:	8b 16                	mov    edx,DWORD PTR [esi]
c00162d9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00162dd:	53                   	push   ebx
c00162de:	55                   	push   ebp
c00162df:	45                   	inc    ebp
c00162e0:	56                   	push   esi
c00162e1:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00162e4:	83 c4 10             	add    esp,0x10
c00162e7:	eb e8                	jmp    c00162d1 <Video::putrect(int, int, int, int, unsigned int)+0x27>
c00162e9:	43                   	inc    ebx
c00162ea:	eb e1                	jmp    c00162cd <Video::putrect(int, int, int, int, unsigned int)+0x23>
c00162ec:	83 c4 1c             	add    esp,0x1c
c00162ef:	5b                   	pop    ebx
c00162f0:	5e                   	pop    esi
c00162f1:	5f                   	pop    edi
c00162f2:	5d                   	pop    ebp
c00162f3:	c3                   	ret    

c00162f4 <Video::blit(unsigned int*, int, int, int, int)>:
c00162f4:	55                   	push   ebp
c00162f5:	57                   	push   edi
c00162f6:	56                   	push   esi
c00162f7:	53                   	push   ebx
c00162f8:	83 ec 1c             	sub    esp,0x1c
c00162fb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00162ff:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016303:	85 c0                	test   eax,eax
c0016305:	79 02                	jns    c0016309 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0016307:	31 c0                	xor    eax,eax
c0016309:	c1 e0 02             	shl    eax,0x2
c001630c:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016310:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016314:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016318:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c001631c:	39 d8                	cmp    eax,ebx
c001631e:	7e 49                	jle    c0016369 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016320:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016326:	7c 41                	jl     c0016369 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016328:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001632c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016330:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016334:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0016338:	39 f9                	cmp    ecx,edi
c001633a:	7e 22                	jle    c001635e <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c001633c:	83 c5 04             	add    ebp,0x4
c001633f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016345:	7c 14                	jl     c001635b <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0016347:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016349:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c001634c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016350:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016354:	56                   	push   esi
c0016355:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0016358:	83 c4 10             	add    esp,0x10
c001635b:	47                   	inc    edi
c001635c:	eb d2                	jmp    c0016330 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c001635e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016362:	43                   	inc    ebx
c0016363:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0016367:	eb ab                	jmp    c0016314 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0016369:	83 c4 1c             	add    esp,0x1c
c001636c:	5b                   	pop    ebx
c001636d:	5e                   	pop    esi
c001636e:	5f                   	pop    edi
c001636f:	5d                   	pop    ebp
c0016370:	c3                   	ret    
c0016371:	90                   	nop

c0016372 <Video::clearScreen(unsigned int)>:
c0016372:	57                   	push   edi
c0016373:	56                   	push   esi
c0016374:	53                   	push   ebx
c0016375:	31 db                	xor    ebx,ebx
c0016377:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001637b:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016381:	7e 1f                	jle    c00163a2 <Video::clearScreen(unsigned int)+0x30>
c0016383:	31 ff                	xor    edi,edi
c0016385:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001638b:	7e 12                	jle    c001639f <Video::clearScreen(unsigned int)+0x2d>
c001638d:	8b 06                	mov    eax,DWORD PTR [esi]
c001638f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016393:	53                   	push   ebx
c0016394:	57                   	push   edi
c0016395:	47                   	inc    edi
c0016396:	56                   	push   esi
c0016397:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001639a:	83 c4 10             	add    esp,0x10
c001639d:	eb e6                	jmp    c0016385 <Video::clearScreen(unsigned int)+0x13>
c001639f:	43                   	inc    ebx
c00163a0:	eb d9                	jmp    c001637b <Video::clearScreen(unsigned int)+0x9>
c00163a2:	5b                   	pop    ebx
c00163a3:	5e                   	pop    esi
c00163a4:	5f                   	pop    edi
c00163a5:	c3                   	ret    

c00163a6 <Video::putpixel(int, int, unsigned int)>:
c00163a6:	c7 44 24 04 00 7c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0027c00
c00163ae:	e9 7c be ff ff       	jmp    c001222f <Dbg::kprintf(char const*, ...)>
c00163b3:	90                   	nop

c00163b4 <Video::Video(char const*)>:
c00163b4:	83 ec 0c             	sub    esp,0xc
c00163b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163bb:	83 ec 08             	sub    esp,0x8
c00163be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163c2:	50                   	push   eax
c00163c3:	e8 62 d4 ff ff       	call   c001382a <Device::Device(char const*)>
c00163c8:	83 c4 10             	add    esp,0x10
c00163cb:	ba 18 7c 02 c0       	mov    edx,0xc0027c18
c00163d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163d4:	89 10                	mov    DWORD PTR [eax],edx
c00163d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163da:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c00163e4:	90                   	nop
c00163e5:	83 c4 0c             	add    esp,0xc
c00163e8:	c3                   	ret    
c00163e9:	90                   	nop

c00163ea <Video::~Video()>:
c00163ea:	83 ec 0c             	sub    esp,0xc
c00163ed:	ba 18 7c 02 c0       	mov    edx,0xc0027c18
c00163f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163f6:	89 10                	mov    DWORD PTR [eax],edx
c00163f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163fc:	83 ec 0c             	sub    esp,0xc
c00163ff:	50                   	push   eax
c0016400:	e8 d7 d0 ff ff       	call   c00134dc <Device::~Device()>
c0016405:	83 c4 10             	add    esp,0x10
c0016408:	90                   	nop
c0016409:	83 c4 0c             	add    esp,0xc
c001640c:	c3                   	ret    
c001640d:	90                   	nop

c001640e <Video::~Video()>:
c001640e:	83 ec 0c             	sub    esp,0xc
c0016411:	83 ec 0c             	sub    esp,0xc
c0016414:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016418:	e8 cd ff ff ff       	call   c00163ea <Video::~Video()>
c001641d:	83 c4 10             	add    esp,0x10
c0016420:	83 ec 08             	sub    esp,0x8
c0016423:	68 64 01 00 00       	push   0x164
c0016428:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001642c:	e8 1e bd ff ff       	call   c001214f <operator delete(void*, unsigned long)>
c0016431:	83 c4 10             	add    esp,0x10
c0016434:	83 c4 0c             	add    esp,0xc
c0016437:	c3                   	ret    

c0016438 <Video::isMonochrome()>:
c0016438:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001643c:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0016442:	c3                   	ret    
c0016443:	90                   	nop

c0016444 <Video::getWidth()>:
c0016444:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016448:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001644e:	c3                   	ret    
c001644f:	90                   	nop

c0016450 <Video::getHeight()>:
c0016450:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016454:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001645a:	c3                   	ret    
c001645b:	90                   	nop

c001645c <Video::drawCursor(int, int, unsigned char*, int)>:
c001645c:	55                   	push   ebp
c001645d:	57                   	push   edi
c001645e:	56                   	push   esi
c001645f:	53                   	push   ebx
c0016460:	83 ec 2c             	sub    esp,0x2c
c0016463:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016467:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001646b:	83 f8 01             	cmp    eax,0x1
c001646e:	19 c9                	sbb    ecx,ecx
c0016470:	31 db                	xor    ebx,ebx
c0016472:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0016476:	89 cd                	mov    ebp,ecx
c0016478:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0016480:	f7 d5                	not    ebp
c0016482:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0016488:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001648c:	01 d8                	add    eax,ebx
c001648e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016492:	56                   	push   esi
c0016493:	e8 b8 ff ff ff       	call   c0016450 <Video::getHeight()>
c0016498:	59                   	pop    ecx
c0016499:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001649d:	7e 70                	jle    c001650f <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c001649f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00164a3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00164a7:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c00164aa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00164ae:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00164b2:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c00164b9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00164bd:	89 f8                	mov    eax,edi
c00164bf:	83 c0 20             	add    eax,0x20
c00164c2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00164c6:	56                   	push   esi
c00164c7:	e8 78 ff ff ff       	call   c0016444 <Video::getWidth()>
c00164cc:	5a                   	pop    edx
c00164cd:	39 c7                	cmp    edi,eax
c00164cf:	7d 34                	jge    c0016505 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c00164d1:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00164d6:	74 05                	je     c00164dd <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c00164d8:	8b 06                	mov    eax,DWORD PTR [esi]
c00164da:	55                   	push   ebp
c00164db:	eb 0d                	jmp    c00164ea <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c00164dd:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c00164e2:	74 12                	je     c00164f6 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c00164e4:	8b 06                	mov    eax,DWORD PTR [esi]
c00164e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00164ea:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00164ee:	57                   	push   edi
c00164ef:	56                   	push   esi
c00164f0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00164f3:	83 c4 10             	add    esp,0x10
c00164f6:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c00164fa:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c00164fe:	47                   	inc    edi
c00164ff:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016503:	75 c1                	jne    c00164c6 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0016505:	43                   	inc    ebx
c0016506:	83 fb 20             	cmp    ebx,0x20
c0016509:	0f 85 79 ff ff ff    	jne    c0016488 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c001650f:	83 c4 2c             	add    esp,0x2c
c0016512:	5b                   	pop    ebx
c0016513:	5e                   	pop    esi
c0016514:	5f                   	pop    edi
c0016515:	5d                   	pop    ebp
c0016516:	c3                   	ret    
c0016517:	90                   	nop

c0016518 <ACPI::close(int, int, void*)>:
c0016518:	83 ec 1c             	sub    esp,0x1c
c001651b:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0016523:	74 0a                	je     c001652f <ACPI::close(int, int, void*)+0x17>
c0016525:	b8 00 00 00 00       	mov    eax,0x0
c001652a:	e9 9a 00 00 00       	jmp    c00165c9 <ACPI::close(int, int, void*)+0xb1>
c001652f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016534:	75 37                	jne    c001656d <ACPI::close(int, int, void*)+0x55>
c0016536:	83 ec 0c             	sub    esp,0xc
c0016539:	68 50 7c 02 c0       	push   0xc0027c50
c001653e:	e8 ec bc ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c0016543:	83 c4 10             	add    esp,0x10
c0016546:	a1 a8 ac 02 c0       	mov    eax,ds:0xc002aca8
c001654b:	85 c0                	test   eax,eax
c001654d:	74 07                	je     c0016556 <ACPI::close(int, int, void*)+0x3e>
c001654f:	a1 a8 ac 02 c0       	mov    eax,ds:0xc002aca8
c0016554:	ff d0                	call   eax
c0016556:	83 ec 0c             	sub    esp,0xc
c0016559:	68 04 7d 02 c0       	push   0xc0027d04
c001655e:	e8 44 25 00 00       	call   c0018aa7 <Krnl::panic(char const*)>
c0016563:	83 c4 10             	add    esp,0x10
c0016566:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001656b:	eb 5c                	jmp    c00165c9 <ACPI::close(int, int, void*)+0xb1>
c001656d:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0016572:	75 50                	jne    c00165c4 <ACPI::close(int, int, void*)+0xac>
c0016574:	a1 a4 ac 02 c0       	mov    eax,ds:0xc002aca4
c0016579:	85 c0                	test   eax,eax
c001657b:	74 07                	je     c0016584 <ACPI::close(int, int, void*)+0x6c>
c001657d:	a1 a4 ac 02 c0       	mov    eax,ds:0xc002aca4
c0016582:	ff d0                	call   eax
c0016584:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0016589:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001658e:	83 e0 02             	and    eax,0x2
c0016591:	74 1c                	je     c00165af <ACPI::close(int, int, void*)+0x97>
c0016593:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c001659a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001659e:	89 c2                	mov    edx,eax
c00165a0:	ec                   	in     al,dx
c00165a1:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00165a5:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00165a9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00165ad:	eb da                	jmp    c0016589 <ACPI::close(int, int, void*)+0x71>
c00165af:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00165b6:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00165bb:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00165bf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00165c3:	ee                   	out    dx,al
c00165c4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00165c9:	83 c4 1c             	add    esp,0x1c
c00165cc:	c3                   	ret    

c00165cd <findRSDP()>:
c00165cd:	83 ec 1c             	sub    esp,0x1c
c00165d0:	a1 28 a6 02 c0       	mov    eax,ds:0xc002a628
c00165d5:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00165db:	83 e0 04             	and    eax,0x4
c00165de:	84 c0                	test   al,al
c00165e0:	75 07                	jne    c00165e9 <findRSDP()+0x1c>
c00165e2:	b8 00 00 00 00       	mov    eax,0x0
c00165e7:	eb 6a                	jmp    c0016653 <findRSDP()+0x86>
c00165e9:	a1 70 a6 02 c0       	mov    eax,ds:0xc002a670
c00165ee:	3d ff 07 00 00       	cmp    eax,0x7ff
c00165f3:	7f 1b                	jg     c0016610 <findRSDP()+0x43>
c00165f5:	a1 28 a6 02 c0       	mov    eax,ds:0xc002a628
c00165fa:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016600:	83 e2 fb             	and    edx,0xfffffffb
c0016603:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016609:	b8 00 00 00 00       	mov    eax,0x0
c001660e:	eb 43                	jmp    c0016653 <findRSDP()+0x86>
c0016610:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0016618:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0016620:	77 2c                	ja     c001664e <findRSDP()+0x81>
c0016622:	83 ec 04             	sub    esp,0x4
c0016625:	6a 08                	push   0x8
c0016627:	68 5d 7c 02 c0       	push   0xc0027c5d
c001662c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016630:	e8 af 9f fe ff       	call   c00005e4 <memcmp>
c0016635:	83 c4 10             	add    esp,0x10
c0016638:	85 c0                	test   eax,eax
c001663a:	0f 94 c0             	sete   al
c001663d:	84 c0                	test   al,al
c001663f:	74 06                	je     c0016647 <findRSDP()+0x7a>
c0016641:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016645:	eb 0c                	jmp    c0016653 <findRSDP()+0x86>
c0016647:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c001664c:	eb ca                	jmp    c0016618 <findRSDP()+0x4b>
c001664e:	b8 00 00 00 00       	mov    eax,0x0
c0016653:	83 c4 1c             	add    esp,0x1c
c0016656:	c3                   	ret    

c0016657 <loadACPITables(unsigned char*)>:
c0016657:	56                   	push   esi
c0016658:	53                   	push   ebx
c0016659:	83 ec 44             	sub    esp,0x44
c001665c:	a1 28 a6 02 c0       	mov    eax,ds:0xc002a628
c0016661:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016667:	83 e0 04             	and    eax,0x4
c001666a:	84 c0                	test   al,al
c001666c:	0f 84 05 02 00 00    	je     c0016877 <loadACPITables(unsigned char*)+0x220>
c0016672:	a0 c0 ae 02 c0       	mov    al,ds:0xc002aec0
c0016677:	84 c0                	test   al,al
c0016679:	74 75                	je     c00166f0 <loadACPITables(unsigned char*)+0x99>
c001667b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001667f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016683:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016687:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001668a:	83 e8 24             	sub    eax,0x24
c001668d:	c1 e8 03             	shr    eax,0x3
c0016690:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0016694:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c001669c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00166a0:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00166a4:	0f 8d b2 00 00 00    	jge    c001675c <loadACPITables(unsigned char*)+0x105>
c00166aa:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00166ae:	83 c0 24             	add    eax,0x24
c00166b1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00166b5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00166b9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00166bd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00166c1:	c1 e0 03             	shl    eax,0x3
c00166c4:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c00166c8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00166cc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00166cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00166d1:	89 c1                	mov    ecx,eax
c00166d3:	a1 ac ac 02 c0       	mov    eax,ds:0xc002acac
c00166d8:	8d 50 01             	lea    edx,[eax+0x1]
c00166db:	89 15 ac ac 02 c0    	mov    DWORD PTR ds:0xc002acac,edx
c00166e1:	89 ca                	mov    edx,ecx
c00166e3:	89 14 c5 c4 ac 02 c0 	mov    DWORD PTR [eax*8-0x3ffd533c],edx
c00166ea:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c00166ee:	eb ac                	jmp    c001669c <loadACPITables(unsigned char*)+0x45>
c00166f0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00166f4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00166f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00166ff:	83 e8 24             	sub    eax,0x24
c0016702:	c1 e8 02             	shr    eax,0x2
c0016705:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016709:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0016711:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016715:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0016719:	7d 41                	jge    c001675c <loadACPITables(unsigned char*)+0x105>
c001671b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001671f:	83 c0 24             	add    eax,0x24
c0016722:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016726:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001672a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001672e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016732:	c1 e0 02             	shl    eax,0x2
c0016735:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0016739:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001673d:	8b 08                	mov    ecx,DWORD PTR [eax]
c001673f:	a1 ac ac 02 c0       	mov    eax,ds:0xc002acac
c0016744:	8d 50 01             	lea    edx,[eax+0x1]
c0016747:	89 15 ac ac 02 c0    	mov    DWORD PTR ds:0xc002acac,edx
c001674d:	89 ca                	mov    edx,ecx
c001674f:	89 14 c5 c4 ac 02 c0 	mov    DWORD PTR [eax*8-0x3ffd533c],edx
c0016756:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c001675a:	eb b5                	jmp    c0016711 <loadACPITables(unsigned char*)+0xba>
c001675c:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0016764:	a1 ac ac 02 c0       	mov    eax,ds:0xc002acac
c0016769:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c001676d:	0f 8d 05 01 00 00    	jge    c0016878 <loadACPITables(unsigned char*)+0x221>
c0016773:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016777:	8b 04 c5 c4 ac 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd533c]
c001677e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016782:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016786:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001678a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001678e:	25 ff 0f 00 00       	and    eax,0xfff
c0016793:	89 c6                	mov    esi,eax
c0016795:	e8 53 ac ff ff       	call   c00113ed <Virt::getAKernelVAS()>
c001679a:	89 c3                	mov    ebx,eax
c001679c:	83 ec 0c             	sub    esp,0xc
c001679f:	6a 01                	push   0x1
c00167a1:	e8 b7 aa ff ff       	call   c001125d <Virt::allocateKernelVirtualPages(int)>
c00167a6:	83 c4 10             	add    esp,0x10
c00167a9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00167ad:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00167b3:	83 ec 0c             	sub    esp,0xc
c00167b6:	6a 01                	push   0x1
c00167b8:	6a 01                	push   0x1
c00167ba:	50                   	push   eax
c00167bb:	52                   	push   edx
c00167bc:	53                   	push   ebx
c00167bd:	e8 5a b4 ff ff       	call   c0011c1c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00167c2:	83 c4 20             	add    esp,0x20
c00167c5:	09 f0                	or     eax,esi
c00167c7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00167cb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00167cf:	c1 e0 03             	shl    eax,0x3
c00167d2:	05 c0 ac 02 c0       	add    eax,0xc002acc0
c00167d7:	83 ec 04             	sub    esp,0x4
c00167da:	6a 04                	push   0x4
c00167dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00167e0:	50                   	push   eax
c00167e1:	e8 61 9e fe ff       	call   c0000647 <memcpy>
c00167e6:	83 c4 10             	add    esp,0x10
c00167e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167ed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00167f0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00167f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00167f8:	05 00 10 00 00       	add    eax,0x1000
c00167fd:	c1 e8 0c             	shr    eax,0xc
c0016800:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016804:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016808:	89 04 24             	mov    DWORD PTR [esp],eax
c001680b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001680f:	25 ff 0f 00 00       	and    eax,0xfff
c0016814:	89 c6                	mov    esi,eax
c0016816:	e8 d2 ab ff ff       	call   c00113ed <Virt::getAKernelVAS()>
c001681b:	89 c3                	mov    ebx,eax
c001681d:	83 ec 0c             	sub    esp,0xc
c0016820:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016824:	e8 34 aa ff ff       	call   c001125d <Virt::allocateKernelVirtualPages(int)>
c0016829:	83 c4 10             	add    esp,0x10
c001682c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016830:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0016836:	83 ec 0c             	sub    esp,0xc
c0016839:	6a 01                	push   0x1
c001683b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001683f:	50                   	push   eax
c0016840:	52                   	push   edx
c0016841:	53                   	push   ebx
c0016842:	e8 d5 b3 ff ff       	call   c0011c1c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016847:	83 c4 20             	add    esp,0x20
c001684a:	09 f0                	or     eax,esi
c001684c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016850:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016853:	83 ec 0c             	sub    esp,0xc
c0016856:	50                   	push   eax
c0016857:	e8 5b ad ff ff       	call   c00115b7 <Virt::freeKernelVirtualPages(unsigned long)>
c001685c:	83 c4 10             	add    esp,0x10
c001685f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016863:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016867:	89 14 c5 c4 ac 02 c0 	mov    DWORD PTR [eax*8-0x3ffd533c],edx
c001686e:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0016872:	e9 ed fe ff ff       	jmp    c0016764 <loadACPITables(unsigned char*)+0x10d>
c0016877:	90                   	nop
c0016878:	83 c4 44             	add    esp,0x44
c001687b:	5b                   	pop    ebx
c001687c:	5e                   	pop    esi
c001687d:	c3                   	ret    

c001687e <findRSDT(unsigned char*)>:
c001687e:	56                   	push   esi
c001687f:	53                   	push   ebx
c0016880:	83 ec 44             	sub    esp,0x44
c0016883:	a1 28 a6 02 c0       	mov    eax,ds:0xc002a628
c0016888:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001688e:	83 e0 04             	and    eax,0x4
c0016891:	84 c0                	test   al,al
c0016893:	75 0a                	jne    c001689f <findRSDT(unsigned char*)+0x21>
c0016895:	b8 00 00 00 00       	mov    eax,0x0
c001689a:	e9 f7 00 00 00       	jmp    c0016996 <findRSDT(unsigned char*)+0x118>
c001689f:	83 ec 04             	sub    esp,0x4
c00168a2:	6a 24                	push   0x24
c00168a4:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00168a8:	8d 44 24 18          	lea    eax,[esp+0x18]
c00168ac:	50                   	push   eax
c00168ad:	e8 95 9d fe ff       	call   c0000647 <memcpy>
c00168b2:	83 c4 10             	add    esp,0x10
c00168b5:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00168b9:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00168bd:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00168c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00168c9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00168cd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00168d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00168d5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00168d9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00168dd:	25 ff 0f 00 00       	and    eax,0xfff
c00168e2:	89 c6                	mov    esi,eax
c00168e4:	e8 04 ab ff ff       	call   c00113ed <Virt::getAKernelVAS()>
c00168e9:	89 c3                	mov    ebx,eax
c00168eb:	83 ec 0c             	sub    esp,0xc
c00168ee:	6a 02                	push   0x2
c00168f0:	e8 68 a9 ff ff       	call   c001125d <Virt::allocateKernelVirtualPages(int)>
c00168f5:	83 c4 10             	add    esp,0x10
c00168f8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00168fc:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0016902:	83 ec 0c             	sub    esp,0xc
c0016905:	6a 01                	push   0x1
c0016907:	6a 02                	push   0x2
c0016909:	50                   	push   eax
c001690a:	52                   	push   edx
c001690b:	53                   	push   ebx
c001690c:	e8 0b b3 ff ff       	call   c0011c1c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016911:	83 c4 20             	add    esp,0x20
c0016914:	09 f0                	or     eax,esi
c0016916:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001691a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001691e:	25 ff 0f 00 00       	and    eax,0xfff
c0016923:	89 c6                	mov    esi,eax
c0016925:	e8 c3 aa ff ff       	call   c00113ed <Virt::getAKernelVAS()>
c001692a:	89 c3                	mov    ebx,eax
c001692c:	83 ec 0c             	sub    esp,0xc
c001692f:	6a 02                	push   0x2
c0016931:	e8 27 a9 ff ff       	call   c001125d <Virt::allocateKernelVirtualPages(int)>
c0016936:	83 c4 10             	add    esp,0x10
c0016939:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001693d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0016943:	83 ec 0c             	sub    esp,0xc
c0016946:	6a 01                	push   0x1
c0016948:	6a 02                	push   0x2
c001694a:	50                   	push   eax
c001694b:	52                   	push   edx
c001694c:	53                   	push   ebx
c001694d:	e8 ca b2 ff ff       	call   c0011c1c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016952:	83 c4 20             	add    esp,0x20
c0016955:	09 f0                	or     eax,esi
c0016957:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001695b:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0016960:	75 11                	jne    c0016973 <findRSDT(unsigned char*)+0xf5>
c0016962:	c6 05 c0 ae 02 c0 00 	mov    BYTE PTR ds:0xc002aec0,0x0
c0016969:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001696d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0016971:	eb 1f                	jmp    c0016992 <findRSDT(unsigned char*)+0x114>
c0016973:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0016978:	75 11                	jne    c001698b <findRSDT(unsigned char*)+0x10d>
c001697a:	c6 05 c0 ae 02 c0 01 	mov    BYTE PTR ds:0xc002aec0,0x1
c0016981:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016985:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0016989:	eb 07                	jmp    c0016992 <findRSDT(unsigned char*)+0x114>
c001698b:	b8 00 00 00 00       	mov    eax,0x0
c0016990:	eb 04                	jmp    c0016996 <findRSDT(unsigned char*)+0x118>
c0016992:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016996:	83 c4 44             	add    esp,0x44
c0016999:	5b                   	pop    ebx
c001699a:	5e                   	pop    esi
c001699b:	c3                   	ret    

c001699c <findDataTable(unsigned char*, char*)>:
c001699c:	83 ec 1c             	sub    esp,0x1c
c001699f:	a1 28 a6 02 c0       	mov    eax,ds:0xc002a628
c00169a4:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00169aa:	83 e0 04             	and    eax,0x4
c00169ad:	84 c0                	test   al,al
c00169af:	75 07                	jne    c00169b8 <findDataTable(unsigned char*, char*)+0x1c>
c00169b1:	b8 00 00 00 00       	mov    eax,0x0
c00169b6:	eb 7c                	jmp    c0016a34 <findDataTable(unsigned char*, char*)+0x98>
c00169b8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00169c0:	a1 ac ac 02 c0       	mov    eax,ds:0xc002acac
c00169c5:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00169c9:	7d 3a                	jge    c0016a05 <findDataTable(unsigned char*, char*)+0x69>
c00169cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00169cf:	c1 e0 03             	shl    eax,0x3
c00169d2:	05 c0 ac 02 c0       	add    eax,0xc002acc0
c00169d7:	83 ec 04             	sub    esp,0x4
c00169da:	6a 04                	push   0x4
c00169dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00169e0:	50                   	push   eax
c00169e1:	e8 fe 9b fe ff       	call   c00005e4 <memcmp>
c00169e6:	83 c4 10             	add    esp,0x10
c00169e9:	85 c0                	test   eax,eax
c00169eb:	0f 94 c0             	sete   al
c00169ee:	84 c0                	test   al,al
c00169f0:	74 0d                	je     c00169ff <findDataTable(unsigned char*, char*)+0x63>
c00169f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00169f6:	8b 04 c5 c4 ac 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd533c]
c00169fd:	eb 35                	jmp    c0016a34 <findDataTable(unsigned char*, char*)+0x98>
c00169ff:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016a03:	eb bb                	jmp    c00169c0 <findDataTable(unsigned char*, char*)+0x24>
c0016a05:	a0 c0 ae 02 c0       	mov    al,ds:0xc002aec0
c0016a0a:	84 c0                	test   al,al
c0016a0c:	74 07                	je     c0016a15 <findDataTable(unsigned char*, char*)+0x79>
c0016a0e:	b8 58 00 00 00       	mov    eax,0x58
c0016a13:	eb 05                	jmp    c0016a1a <findDataTable(unsigned char*, char*)+0x7e>
c0016a15:	b8 52 00 00 00       	mov    eax,0x52
c0016a1a:	83 ec 04             	sub    esp,0x4
c0016a1d:	50                   	push   eax
c0016a1e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016a22:	68 28 7d 02 c0       	push   0xc0027d28
c0016a27:	e8 03 b8 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c0016a2c:	83 c4 10             	add    esp,0x10
c0016a2f:	b8 00 00 00 00       	mov    eax,0x0
c0016a34:	83 c4 1c             	add    esp,0x1c
c0016a37:	c3                   	ret    

c0016a38 <scanMADT()>:
c0016a38:	53                   	push   ebx
c0016a39:	83 ec 38             	sub    esp,0x38
c0016a3c:	a1 28 a6 02 c0       	mov    eax,ds:0xc002a628
c0016a41:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016a47:	83 e0 04             	and    eax,0x4
c0016a4a:	84 c0                	test   al,al
c0016a4c:	0f 84 63 04 00 00    	je     c0016eb5 <scanMADT()+0x47d>
c0016a52:	e8 76 fb ff ff       	call   c00165cd <findRSDP()>
c0016a57:	a3 cc ae 02 c0       	mov    ds:0xc002aecc,eax
c0016a5c:	a1 cc ae 02 c0       	mov    eax,ds:0xc002aecc
c0016a61:	85 c0                	test   eax,eax
c0016a63:	75 19                	jne    c0016a7e <scanMADT()+0x46>
c0016a65:	a1 28 a6 02 c0       	mov    eax,ds:0xc002a628
c0016a6a:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016a70:	83 e2 fb             	and    edx,0xfffffffb
c0016a73:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016a79:	e9 3b 04 00 00       	jmp    c0016eb9 <scanMADT()+0x481>
c0016a7e:	a1 cc ae 02 c0       	mov    eax,ds:0xc002aecc
c0016a83:	83 ec 0c             	sub    esp,0xc
c0016a86:	50                   	push   eax
c0016a87:	e8 f2 fd ff ff       	call   c001687e <findRSDT(unsigned char*)>
c0016a8c:	83 c4 10             	add    esp,0x10
c0016a8f:	a3 c8 ae 02 c0       	mov    ds:0xc002aec8,eax
c0016a94:	a1 c8 ae 02 c0       	mov    eax,ds:0xc002aec8
c0016a99:	85 c0                	test   eax,eax
c0016a9b:	75 19                	jne    c0016ab6 <scanMADT()+0x7e>
c0016a9d:	a1 28 a6 02 c0       	mov    eax,ds:0xc002a628
c0016aa2:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016aa8:	83 e2 fb             	and    edx,0xfffffffb
c0016aab:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016ab1:	e9 03 04 00 00       	jmp    c0016eb9 <scanMADT()+0x481>
c0016ab6:	a1 c8 ae 02 c0       	mov    eax,ds:0xc002aec8
c0016abb:	83 ec 0c             	sub    esp,0xc
c0016abe:	50                   	push   eax
c0016abf:	e8 93 fb ff ff       	call   c0016657 <loadACPITables(unsigned char*)>
c0016ac4:	83 c4 10             	add    esp,0x10
c0016ac7:	a1 c8 ae 02 c0       	mov    eax,ds:0xc002aec8
c0016acc:	83 ec 08             	sub    esp,0x8
c0016acf:	68 66 7c 02 c0       	push   0xc0027c66
c0016ad4:	50                   	push   eax
c0016ad5:	e8 c2 fe ff ff       	call   c001699c <findDataTable(unsigned char*, char*)>
c0016ada:	83 c4 10             	add    esp,0x10
c0016add:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016ae1:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0016ae6:	75 19                	jne    c0016b01 <scanMADT()+0xc9>
c0016ae8:	a1 28 a6 02 c0       	mov    eax,ds:0xc002a628
c0016aed:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016af3:	83 e2 fe             	and    edx,0xfffffffe
c0016af6:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016afc:	e9 b8 03 00 00       	jmp    c0016eb9 <scanMADT()+0x481>
c0016b01:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0016b09:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016b0d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016b10:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0016b14:	0f 87 9f 03 00 00    	ja     c0016eb9 <scanMADT()+0x481>
c0016b1a:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0016b22:	0f 87 91 03 00 00    	ja     c0016eb9 <scanMADT()+0x481>
c0016b28:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016b2c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0016b30:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016b34:	8d 50 01             	lea    edx,[eax+0x1]
c0016b37:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0016b3b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016b3f:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016b43:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0016b47:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016b4b:	8d 50 01             	lea    edx,[eax+0x1]
c0016b4e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0016b52:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016b56:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016b5a:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0016b5e:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0016b63:	0f 86 4f 03 00 00    	jbe    c0016eb8 <scanMADT()+0x480>
c0016b69:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0016b6e:	75 57                	jne    c0016bc7 <scanMADT()+0x18f>
c0016b70:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016b74:	8d 50 01             	lea    edx,[eax+0x1]
c0016b77:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0016b7b:	8a 15 c0 b0 02 c0    	mov    dl,BYTE PTR ds:0xc002b0c0
c0016b81:	0f b6 d2             	movzx  edx,dl
c0016b84:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0016b88:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0016b8c:	88 82 00 b1 02 c0    	mov    BYTE PTR [edx-0x3ffd4f00],al
c0016b92:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016b96:	8d 50 01             	lea    edx,[eax+0x1]
c0016b99:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0016b9d:	8a 15 c0 b0 02 c0    	mov    dl,BYTE PTR ds:0xc002b0c0
c0016ba3:	8d 4a 01             	lea    ecx,[edx+0x1]
c0016ba6:	88 0d c0 b0 02 c0    	mov    BYTE PTR ds:0xc002b0c0,cl
c0016bac:	0f b6 d2             	movzx  edx,dl
c0016baf:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0016bb3:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0016bb7:	88 82 e0 b0 02 c0    	mov    BYTE PTR [edx-0x3ffd4f20],al
c0016bbd:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0016bc2:	e9 da 02 00 00       	jmp    c0016ea1 <scanMADT()+0x469>
c0016bc7:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0016bcc:	0f 85 14 01 00 00    	jne    c0016ce6 <scanMADT()+0x2ae>
c0016bd2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016bd6:	8d 50 01             	lea    edx,[eax+0x1]
c0016bd9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0016bdd:	8a 15 80 af 02 c0    	mov    dl,BYTE PTR ds:0xc002af80
c0016be3:	0f b6 d2             	movzx  edx,dl
c0016be6:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0016bea:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0016bee:	88 82 a0 af 02 c0    	mov    BYTE PTR [edx-0x3ffd5060],al
c0016bf4:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0016bf8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016bfc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016c00:	01 d0                	add    eax,edx
c0016c02:	83 c0 2c             	add    eax,0x2c
c0016c05:	8a 00                	mov    al,BYTE PTR [eax]
c0016c07:	0f b6 d0             	movzx  edx,al
c0016c0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016c0e:	8d 48 01             	lea    ecx,[eax+0x1]
c0016c11:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016c15:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0016c19:	0f b6 c0             	movzx  eax,al
c0016c1c:	c1 e0 08             	shl    eax,0x8
c0016c1f:	89 d1                	mov    ecx,edx
c0016c21:	09 c1                	or     ecx,eax
c0016c23:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016c27:	8d 50 02             	lea    edx,[eax+0x2]
c0016c2a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016c2e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016c32:	0f b6 c0             	movzx  eax,al
c0016c35:	c1 e0 10             	shl    eax,0x10
c0016c38:	09 c1                	or     ecx,eax
c0016c3a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016c3e:	8d 50 03             	lea    edx,[eax+0x3]
c0016c41:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016c45:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016c49:	0f b6 c0             	movzx  eax,al
c0016c4c:	c1 e0 18             	shl    eax,0x18
c0016c4f:	09 c1                	or     ecx,eax
c0016c51:	89 ca                	mov    edx,ecx
c0016c53:	a0 80 af 02 c0       	mov    al,ds:0xc002af80
c0016c58:	0f b6 c0             	movzx  eax,al
c0016c5b:	89 14 85 c0 af 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5040],edx
c0016c62:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0016c67:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016c6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016c6f:	01 d0                	add    eax,edx
c0016c71:	83 c0 2c             	add    eax,0x2c
c0016c74:	8a 00                	mov    al,BYTE PTR [eax]
c0016c76:	0f b6 d0             	movzx  edx,al
c0016c79:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016c7d:	8d 48 01             	lea    ecx,[eax+0x1]
c0016c80:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016c84:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0016c88:	0f b6 c0             	movzx  eax,al
c0016c8b:	c1 e0 08             	shl    eax,0x8
c0016c8e:	89 d1                	mov    ecx,edx
c0016c90:	09 c1                	or     ecx,eax
c0016c92:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016c96:	8d 50 02             	lea    edx,[eax+0x2]
c0016c99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016c9d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016ca1:	0f b6 c0             	movzx  eax,al
c0016ca4:	c1 e0 10             	shl    eax,0x10
c0016ca7:	09 c1                	or     ecx,eax
c0016ca9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016cad:	8d 50 03             	lea    edx,[eax+0x3]
c0016cb0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016cb4:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016cb8:	0f b6 c0             	movzx  eax,al
c0016cbb:	c1 e0 18             	shl    eax,0x18
c0016cbe:	09 c1                	or     ecx,eax
c0016cc0:	89 ca                	mov    edx,ecx
c0016cc2:	a0 80 af 02 c0       	mov    al,ds:0xc002af80
c0016cc7:	0f b6 c0             	movzx  eax,al
c0016cca:	89 14 85 40 b0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4fc0],edx
c0016cd1:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0016cd6:	a0 80 af 02 c0       	mov    al,ds:0xc002af80
c0016cdb:	40                   	inc    eax
c0016cdc:	a2 80 af 02 c0       	mov    ds:0xc002af80,al
c0016ce1:	e9 bb 01 00 00       	jmp    c0016ea1 <scanMADT()+0x469>
c0016ce6:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0016ceb:	0f 85 e9 00 00 00    	jne    c0016dda <scanMADT()+0x3a2>
c0016cf1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016cf5:	8d 50 01             	lea    edx,[eax+0x1]
c0016cf8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0016cfc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016d00:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016d04:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0016d08:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016d0c:	8d 50 01             	lea    edx,[eax+0x1]
c0016d0f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0016d13:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016d17:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016d1b:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0016d1f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016d23:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016d27:	01 d0                	add    eax,edx
c0016d29:	83 c0 2c             	add    eax,0x2c
c0016d2c:	8a 00                	mov    al,BYTE PTR [eax]
c0016d2e:	0f b6 d0             	movzx  edx,al
c0016d31:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016d35:	8d 48 01             	lea    ecx,[eax+0x1]
c0016d38:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016d3c:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0016d40:	0f b6 c0             	movzx  eax,al
c0016d43:	c1 e0 08             	shl    eax,0x8
c0016d46:	89 d1                	mov    ecx,edx
c0016d48:	09 c1                	or     ecx,eax
c0016d4a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016d4e:	8d 50 02             	lea    edx,[eax+0x2]
c0016d51:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016d55:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016d59:	0f b6 c0             	movzx  eax,al
c0016d5c:	c1 e0 10             	shl    eax,0x10
c0016d5f:	09 c1                	or     ecx,eax
c0016d61:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016d65:	8d 50 03             	lea    edx,[eax+0x3]
c0016d68:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016d6c:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016d70:	0f b6 c0             	movzx  eax,al
c0016d73:	c1 e0 18             	shl    eax,0x18
c0016d76:	09 c8                	or     eax,ecx
c0016d78:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016d7c:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0016d81:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016d85:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016d89:	01 d0                	add    eax,edx
c0016d8b:	83 c0 2c             	add    eax,0x2c
c0016d8e:	8a 00                	mov    al,BYTE PTR [eax]
c0016d90:	0f b6 c0             	movzx  eax,al
c0016d93:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016d97:	8d 4a 01             	lea    ecx,[edx+0x1]
c0016d9a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016d9e:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0016da2:	0f b6 d2             	movzx  edx,dl
c0016da5:	c1 e2 08             	shl    edx,0x8
c0016da8:	09 d0                	or     eax,edx
c0016daa:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0016daf:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0016db4:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0016db9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016dbd:	88 90 00 99 02 c0    	mov    BYTE PTR [eax-0x3ffd6700],dl
c0016dc3:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0016dc8:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0016dcd:	66 89 84 12 60 af 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd50a0],ax
c0016dd5:	e9 c7 00 00 00       	jmp    c0016ea1 <scanMADT()+0x469>
c0016dda:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0016ddf:	0f 85 b0 00 00 00    	jne    c0016e95 <scanMADT()+0x45d>
c0016de5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016de9:	8d 50 01             	lea    edx,[eax+0x1]
c0016dec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0016df0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016df4:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016df8:	0f b6 c0             	movzx  eax,al
c0016dfb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016dff:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016e03:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016e07:	01 d0                	add    eax,edx
c0016e09:	83 c0 2c             	add    eax,0x2c
c0016e0c:	8a 00                	mov    al,BYTE PTR [eax]
c0016e0e:	0f b6 d0             	movzx  edx,al
c0016e11:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016e15:	8d 48 01             	lea    ecx,[eax+0x1]
c0016e18:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016e1c:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0016e20:	0f b6 c0             	movzx  eax,al
c0016e23:	c1 e0 08             	shl    eax,0x8
c0016e26:	09 d0                	or     eax,edx
c0016e28:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016e2c:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0016e31:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016e35:	8d 50 01             	lea    edx,[eax+0x1]
c0016e38:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0016e3c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016e40:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016e44:	0f b6 c0             	movzx  eax,al
c0016e47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e4f:	c1 e0 08             	shl    eax,0x8
c0016e52:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016e56:	89 c1                	mov    ecx,eax
c0016e58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016e5c:	c1 e0 18             	shl    eax,0x18
c0016e5f:	89 c3                	mov    ebx,eax
c0016e61:	a1 d0 ae 02 c0       	mov    eax,ds:0xc002aed0
c0016e66:	8d 50 01             	lea    edx,[eax+0x1]
c0016e69:	89 15 d0 ae 02 c0    	mov    DWORD PTR ds:0xc002aed0,edx
c0016e6f:	09 d9                	or     ecx,ebx
c0016e71:	89 ca                	mov    edx,ecx
c0016e73:	89 14 85 e0 ae 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5120],edx
c0016e7a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016e7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016e82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016e86:	68 58 7d 02 c0       	push   0xc0027d58
c0016e8b:	e8 9f b3 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c0016e90:	83 c4 10             	add    esp,0x10
c0016e93:	eb 0c                	jmp    c0016ea1 <scanMADT()+0x469>
c0016e95:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0016e9a:	75 05                	jne    c0016ea1 <scanMADT()+0x469>
c0016e9c:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0016ea1:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0016ea6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016eaa:	01 d0                	add    eax,edx
c0016eac:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0016eb0:	e9 54 fc ff ff       	jmp    c0016b09 <scanMADT()+0xd1>
c0016eb5:	90                   	nop
c0016eb6:	eb 01                	jmp    c0016eb9 <scanMADT()+0x481>
c0016eb8:	90                   	nop
c0016eb9:	83 c4 38             	add    esp,0x38
c0016ebc:	5b                   	pop    ebx
c0016ebd:	c3                   	ret    

c0016ebe <ACPI::ACPI()>:
c0016ebe:	83 ec 0c             	sub    esp,0xc
c0016ec1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ec5:	83 ec 08             	sub    esp,0x8
c0016ec8:	68 6b 7c 02 c0       	push   0xc0027c6b
c0016ecd:	50                   	push   eax
c0016ece:	e8 57 c9 ff ff       	call   c001382a <Device::Device(char const*)>
c0016ed3:	83 c4 10             	add    esp,0x10
c0016ed6:	ba 30 7e 02 c0       	mov    edx,0xc0027e30
c0016edb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016edf:	89 10                	mov    DWORD PTR [eax],edx
c0016ee1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ee5:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0016eec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ef0:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c0016efa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016efe:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c0016f08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f0c:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c0016f13:	e8 20 fb ff ff       	call   c0016a38 <scanMADT()>
c0016f18:	90                   	nop
c0016f19:	83 c4 0c             	add    esp,0xc
c0016f1c:	c3                   	ret    
c0016f1d:	90                   	nop

c0016f1e <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0016f1e:	83 ec 2c             	sub    esp,0x2c
c0016f21:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016f25:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016f29:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0016f2d:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0016f31:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0016f36:	88 d0                	mov    al,dl
c0016f38:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0016f3c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0016f41:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0016f49:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016f4d:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0016f53:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0016f57:	0f 8d 97 00 00 00    	jge    c0016ff4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0016f5d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016f61:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016f65:	83 c2 2a             	add    edx,0x2a
c0016f68:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0016f6c:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0016f71:	75 78                	jne    c0016feb <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0016f73:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016f77:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016f7b:	83 c2 2a             	add    edx,0x2a
c0016f7e:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0016f82:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0016f86:	75 63                	jne    c0016feb <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0016f88:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0016f8d:	74 3a                	je     c0016fc9 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0016f8f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016f93:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016f97:	83 c2 2a             	add    edx,0x2a
c0016f9a:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0016f9e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016fa2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016fa5:	39 c2                	cmp    edx,eax
c0016fa7:	74 10                	je     c0016fb9 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0016fa9:	83 ec 0c             	sub    esp,0xc
c0016fac:	68 94 7d 02 c0       	push   0xc0027d94
c0016fb1:	e8 f1 1a 00 00       	call   c0018aa7 <Krnl::panic(char const*)>
c0016fb6:	83 c4 10             	add    esp,0x10
c0016fb9:	83 ec 0c             	sub    esp,0xc
c0016fbc:	68 70 7c 02 c0       	push   0xc0027c70
c0016fc1:	e8 e1 1a 00 00       	call   c0018aa7 <Krnl::panic(char const*)>
c0016fc6:	83 c4 10             	add    esp,0x10
c0016fc9:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0016fcd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016fd1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016fd5:	83 c2 2a             	add    edx,0x2a
c0016fd8:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0016fdc:	8b 02                	mov    eax,DWORD PTR [edx]
c0016fde:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0016fe1:	89 01                	mov    DWORD PTR [ecx],eax
c0016fe3:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0016fe6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0016feb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0016fef:	e9 55 ff ff ff       	jmp    c0016f49 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0016ff4:	90                   	nop
c0016ff5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016ff9:	83 c4 2c             	add    esp,0x2c
c0016ffc:	c2 04 00             	ret    0x4
c0016fff:	90                   	nop

c0017000 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017000:	56                   	push   esi
c0017001:	53                   	push   ebx
c0017002:	83 ec 14             	sub    esp,0x14
c0017005:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017009:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001700d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017011:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017016:	88 c8                	mov    al,cl
c0017018:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001701c:	88 d0                	mov    al,dl
c001701e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017022:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017026:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c001702c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017030:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c0017036:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c001703b:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0017040:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0017045:	83 ec 04             	sub    esp,0x4
c0017048:	56                   	push   esi
c0017049:	53                   	push   ebx
c001704a:	51                   	push   ecx
c001704b:	52                   	push   edx
c001704c:	50                   	push   eax
c001704d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017051:	68 c4 7d 02 c0       	push   0xc0027dc4
c0017056:	e8 d4 b1 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c001705b:	83 c4 20             	add    esp,0x20
c001705e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017062:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0017068:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001706c:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001706f:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0017073:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0017077:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001707b:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0017081:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017085:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0017088:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001708c:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017091:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017095:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c001709b:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001709f:	8d 48 01             	lea    ecx,[eax+0x1]
c00170a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170a6:	83 c2 2a             	add    edx,0x2a
c00170a9:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c00170ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170b1:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c00170b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170bb:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00170be:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00170c2:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c00170c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170ca:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00170d0:	8d 50 01             	lea    edx,[eax+0x1]
c00170d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170d7:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c00170dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170e1:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00170e7:	3d 00 08 00 00       	cmp    eax,0x800
c00170ec:	75 10                	jne    c00170fe <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xfe>
c00170ee:	83 ec 0c             	sub    esp,0xc
c00170f1:	68 7f 7c 02 c0       	push   0xc0027c7f
c00170f6:	e8 ac 19 00 00       	call   c0018aa7 <Krnl::panic(char const*)>
c00170fb:	83 c4 10             	add    esp,0x10
c00170fe:	90                   	nop
c00170ff:	83 c4 14             	add    esp,0x14
c0017102:	5b                   	pop    ebx
c0017103:	5e                   	pop    esi
c0017104:	c3                   	ret    
c0017105:	90                   	nop

c0017106 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017106:	b8 00 00 00 00       	mov    eax,0x0
c001710b:	c3                   	ret    

c001710c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001710c:	83 ec 1c             	sub    esp,0x1c
c001710f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017113:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0017116:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001711a:	a1 28 a6 02 c0       	mov    eax,ds:0xc002a628
c001711f:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017124:	83 ec 08             	sub    esp,0x8
c0017127:	52                   	push   edx
c0017128:	50                   	push   eax
c0017129:	e8 08 76 ff ff       	call   c000e736 <Computer::readCMOS(unsigned char)>
c001712e:	83 c4 10             	add    esp,0x10
c0017131:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0017135:	a1 28 a6 02 c0       	mov    eax,ds:0xc002a628
c001713a:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001713f:	83 ec 04             	sub    esp,0x4
c0017142:	6a 01                	push   0x1
c0017144:	52                   	push   edx
c0017145:	50                   	push   eax
c0017146:	e8 01 77 ff ff       	call   c000e84c <Computer::writeCMOS(unsigned char, unsigned char)>
c001714b:	83 c4 10             	add    esp,0x10
c001714e:	90                   	nop
c001714f:	83 c4 1c             	add    esp,0x1c
c0017152:	c3                   	ret    
c0017153:	90                   	nop

c0017154 <ACPI::open(int, int, void*)>:
c0017154:	53                   	push   ebx
c0017155:	83 ec 18             	sub    esp,0x18
c0017158:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001715c:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c0017163:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017167:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c001716d:	84 c0                	test   al,al
c001716f:	74 60                	je     c00171d1 <ACPI::open(int, int, void*)+0x7d>
c0017171:	83 ec 0c             	sub    esp,0xc
c0017174:	68 58 01 00 00       	push   0x158
c0017179:	e8 c2 af ff ff       	call   c0012140 <operator new(unsigned long)>
c001717e:	83 c4 10             	add    esp,0x10
c0017181:	89 c3                	mov    ebx,eax
c0017183:	83 ec 0c             	sub    esp,0xc
c0017186:	53                   	push   ebx
c0017187:	e8 fa 8f 00 00       	call   c0020186 <PCI::PCI()>
c001718c:	83 c4 10             	add    esp,0x10
c001718f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0017193:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017197:	83 ec 08             	sub    esp,0x8
c001719a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001719e:	50                   	push   eax
c001719f:	e8 96 c4 ff ff       	call   c001363a <Device::addChild(Device*)>
c00171a4:	83 c4 10             	add    esp,0x10
c00171a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00171ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00171ad:	83 c0 08             	add    eax,0x8
c00171b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00171b2:	6a 00                	push   0x0
c00171b4:	6a 00                	push   0x0
c00171b6:	6a 00                	push   0x0
c00171b8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00171bc:	ff d0                	call   eax
c00171be:	83 c4 10             	add    esp,0x10
c00171c1:	83 ec 0c             	sub    esp,0xc
c00171c4:	68 9c 7c 02 c0       	push   0xc0027c9c
c00171c9:	e8 61 b0 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c00171ce:	83 c4 10             	add    esp,0x10
c00171d1:	83 ec 0c             	sub    esp,0xc
c00171d4:	68 a7 7c 02 c0       	push   0xc0027ca7
c00171d9:	e8 6a 37 00 00       	call   c001a948 <Thr::loadKernelSymbolTable(char const*)>
c00171de:	83 c4 10             	add    esp,0x10
c00171e1:	8b 1d 28 a6 02 c0    	mov    ebx,DWORD PTR ds:0xc002a628
c00171e7:	83 ec 08             	sub    esp,0x8
c00171ea:	6a 01                	push   0x1
c00171ec:	68 c5 7c 02 c0       	push   0xc0027cc5
c00171f1:	e8 34 42 00 00       	call   c001b42a <Thr::loadDLL(char const*, bool)>
c00171f6:	83 c4 10             	add    esp,0x10
c00171f9:	83 ec 08             	sub    esp,0x8
c00171fc:	53                   	push   ebx
c00171fd:	50                   	push   eax
c00171fe:	e8 ed 43 00 00       	call   c001b5f0 <Thr::executeDLL(unsigned long, void*)>
c0017203:	83 c4 10             	add    esp,0x10
c0017206:	a1 28 a6 02 c0       	mov    eax,ds:0xc002a628
c001720b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017211:	83 e0 04             	and    eax,0x4
c0017214:	84 c0                	test   al,al
c0017216:	0f 84 cf 00 00 00    	je     c00172eb <ACPI::open(int, int, void*)+0x197>
c001721c:	83 ec 0c             	sub    esp,0xc
c001721f:	68 14 01 00 00       	push   0x114
c0017224:	e8 17 af ff ff       	call   c0012140 <operator new(unsigned long)>
c0017229:	83 c4 10             	add    esp,0x10
c001722c:	89 c3                	mov    ebx,eax
c001722e:	a1 34 bb 02 c0       	mov    eax,ds:0xc002bb34
c0017233:	83 ec 04             	sub    esp,0x4
c0017236:	50                   	push   eax
c0017237:	68 e2 7c 02 c0       	push   0xc0027ce2
c001723c:	53                   	push   ebx
c001723d:	e8 1c b5 ff ff       	call   c001275e <File::File(char const*, Process*)>
c0017242:	83 c4 10             	add    esp,0x10
c0017245:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0017249:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001724e:	74 17                	je     c0017267 <ACPI::open(int, int, void*)+0x113>
c0017250:	83 ec 0c             	sub    esp,0xc
c0017253:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017257:	e8 d4 b7 ff ff       	call   c0012a30 <File::exists()>
c001725c:	83 c4 10             	add    esp,0x10
c001725f:	84 c0                	test   al,al
c0017261:	74 04                	je     c0017267 <ACPI::open(int, int, void*)+0x113>
c0017263:	b0 01                	mov    al,0x1
c0017265:	eb 02                	jmp    c0017269 <ACPI::open(int, int, void*)+0x115>
c0017267:	b0 00                	mov    al,0x0
c0017269:	84 c0                	test   al,al
c001726b:	74 25                	je     c0017292 <ACPI::open(int, int, void*)+0x13e>
c001726d:	8b 1d 28 a6 02 c0    	mov    ebx,DWORD PTR ds:0xc002a628
c0017273:	83 ec 08             	sub    esp,0x8
c0017276:	6a 01                	push   0x1
c0017278:	68 e2 7c 02 c0       	push   0xc0027ce2
c001727d:	e8 a8 41 00 00       	call   c001b42a <Thr::loadDLL(char const*, bool)>
c0017282:	83 c4 10             	add    esp,0x10
c0017285:	83 ec 08             	sub    esp,0x8
c0017288:	53                   	push   ebx
c0017289:	50                   	push   eax
c001728a:	e8 61 43 00 00       	call   c001b5f0 <Thr::executeDLL(unsigned long, void*)>
c001728f:	83 c4 10             	add    esp,0x10
c0017292:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017297:	74 1e                	je     c00172b7 <ACPI::open(int, int, void*)+0x163>
c0017299:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001729e:	74 17                	je     c00172b7 <ACPI::open(int, int, void*)+0x163>
c00172a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00172a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00172a6:	83 c0 08             	add    eax,0x8
c00172a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00172ab:	83 ec 0c             	sub    esp,0xc
c00172ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00172b2:	ff d0                	call   eax
c00172b4:	83 c4 10             	add    esp,0x10
c00172b7:	a1 c8 ae 02 c0       	mov    eax,ds:0xc002aec8
c00172bc:	83 ec 08             	sub    esp,0x8
c00172bf:	68 ff 7c 02 c0       	push   0xc0027cff
c00172c4:	50                   	push   eax
c00172c5:	e8 d2 f6 ff ff       	call   c001699c <findDataTable(unsigned char*, char*)>
c00172ca:	83 c4 10             	add    esp,0x10
c00172cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00172d1:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00172d6:	74 13                	je     c00172eb <ACPI::open(int, int, void*)+0x197>
c00172d8:	83 ec 08             	sub    esp,0x8
c00172db:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00172df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00172e3:	e8 24 fe ff ff       	call   c001710c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00172e8:	83 c4 10             	add    esp,0x10
c00172eb:	b8 00 00 00 00       	mov    eax,0x0
c00172f0:	83 c4 18             	add    esp,0x18
c00172f3:	5b                   	pop    ebx
c00172f4:	c3                   	ret    
c00172f5:	90                   	nop

c00172f6 <ACPI::sleep()>:
c00172f6:	83 ec 0c             	sub    esp,0xc
c00172f9:	a1 a0 ac 02 c0       	mov    eax,ds:0xc002aca0
c00172fe:	85 c0                	test   eax,eax
c0017300:	74 07                	je     c0017309 <ACPI::sleep()+0x13>
c0017302:	a1 a0 ac 02 c0       	mov    eax,ds:0xc002aca0
c0017307:	ff d0                	call   eax
c0017309:	90                   	nop
c001730a:	83 c4 0c             	add    esp,0xc
c001730d:	c3                   	ret    

c001730e <CPU::close(int, int, void*)>:
c001730e:	31 c0                	xor    eax,eax
c0017310:	c3                   	ret    
c0017311:	90                   	nop

c0017312 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0017312:	55                   	push   ebp
c0017313:	57                   	push   edi
c0017314:	56                   	push   esi
c0017315:	53                   	push   ebx
c0017316:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001731a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001731e:	89 ce                	mov    esi,ecx
c0017320:	89 d5                	mov    ebp,edx
c0017322:	80 f9 04             	cmp    cl,0x4
c0017325:	75 28                	jne    c001734f <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0017327:	8d 42 f9             	lea    eax,[edx-0x7]
c001732a:	3c 03                	cmp    al,0x3
c001732c:	0f 86 63 01 00 00    	jbe    c0017495 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0017332:	80 fa 03             	cmp    dl,0x3
c0017335:	0f 84 5a 01 00 00    	je     c0017495 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c001733b:	8d 7a f2             	lea    edi,[edx-0xe]
c001733e:	b8 d0 9a 02 c0       	mov    eax,0xc0029ad0
c0017343:	89 fb                	mov    ebx,edi
c0017345:	80 fb 01             	cmp    bl,0x1
c0017348:	77 4e                	ja     c0017398 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c001734a:	e9 52 01 00 00       	jmp    c00174a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001734f:	80 f9 05             	cmp    cl,0x5
c0017352:	75 4d                	jne    c00173a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0017354:	b8 e0 9a 02 c0       	mov    eax,0xc0029ae0
c0017359:	80 fa 03             	cmp    dl,0x3
c001735c:	0f 86 3f 01 00 00    	jbe    c00174a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017362:	8d 7a fa             	lea    edi,[edx-0x6]
c0017365:	b8 f0 9a 02 c0       	mov    eax,0xc0029af0
c001736a:	89 fb                	mov    ebx,edi
c001736c:	80 fb 01             	cmp    bl,0x1
c001736f:	0f 86 2c 01 00 00    	jbe    c00174a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017375:	b8 00 9b 02 c0       	mov    eax,0xc0029b00
c001737a:	80 fa 08             	cmp    dl,0x8
c001737d:	0f 84 1e 01 00 00    	je     c00174a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017383:	89 d7                	mov    edi,edx
c0017385:	b8 10 9b 02 c0       	mov    eax,0xc0029b10
c001738a:	83 e7 fb             	and    edi,0xfffffffb
c001738d:	89 fb                	mov    ebx,edi
c001738f:	80 fb 09             	cmp    bl,0x9
c0017392:	0f 84 09 01 00 00    	je     c00174a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017398:	31 c0                	xor    eax,eax
c001739a:	89 eb                	mov    ebx,ebp
c001739c:	0f b6 fb             	movzx  edi,bl
c001739f:	eb 30                	jmp    c00173d1 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c00173a1:	31 c0                	xor    eax,eax
c00173a3:	80 f9 06             	cmp    cl,0x6
c00173a6:	75 f2                	jne    c001739a <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00173a8:	80 fa 0a             	cmp    dl,0xa
c00173ab:	77 ed                	ja     c001739a <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00173ad:	bf de 05 00 00       	mov    edi,0x5de
c00173b2:	0f a3 d7             	bt     edi,edx
c00173b5:	73 e3                	jae    c001739a <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00173b7:	b8 20 9b 02 c0       	mov    eax,0xc0029b20
c00173bc:	e9 e0 00 00 00       	jmp    c00174a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00173c1:	39 c7                	cmp    edi,eax
c00173c3:	0f 84 d3 00 00 00    	je     c001749c <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00173c9:	40                   	inc    eax
c00173ca:	3d d0 00 00 00       	cmp    eax,0xd0
c00173cf:	74 09                	je     c00173da <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c00173d1:	89 f3                	mov    ebx,esi
c00173d3:	80 fb 0f             	cmp    bl,0xf
c00173d6:	75 f1                	jne    c00173c9 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c00173d8:	eb e7                	jmp    c00173c1 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c00173da:	80 f9 10             	cmp    cl,0x10
c00173dd:	75 14                	jne    c00173f3 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c00173df:	8d 42 fc             	lea    eax,[edx-0x4]
c00173e2:	83 e0 fb             	and    eax,0xfffffffb
c00173e5:	3c 02                	cmp    al,0x2
c00173e7:	76 34                	jbe    c001741d <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c00173e9:	b8 46 81 02 c0       	mov    eax,0xc0028146
c00173ee:	80 fa 02             	cmp    dl,0x2
c00173f1:	eb 24                	jmp    c0017417 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c00173f3:	80 f9 11             	cmp    cl,0x11
c00173f6:	75 13                	jne    c001740b <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c00173f8:	b8 46 81 02 c0       	mov    eax,0xc0028146
c00173fd:	80 fa 03             	cmp    dl,0x3
c0017400:	0f 85 9b 00 00 00    	jne    c00174a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017406:	e9 91 00 00 00       	jmp    c001749c <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001740b:	80 f9 12             	cmp    cl,0x12
c001740e:	75 14                	jne    c0017424 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0017410:	b8 46 81 02 c0       	mov    eax,0xc0028146
c0017415:	fe ca                	dec    dl
c0017417:	0f 85 84 00 00 00    	jne    c00174a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001741d:	b8 40 9b 02 c0       	mov    eax,0xc0029b40
c0017422:	eb 7d                	jmp    c00174a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017424:	80 f9 14             	cmp    cl,0x14
c0017427:	75 12                	jne    c001743b <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0017429:	4a                   	dec    edx
c001742a:	b8 46 81 02 c0       	mov    eax,0xc0028146
c001742f:	80 fa 01             	cmp    dl,0x1
c0017432:	77 6d                	ja     c00174a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017434:	b8 50 9b 02 c0       	mov    eax,0xc0029b50
c0017439:	eb 66                	jmp    c00174a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001743b:	80 f9 15             	cmp    cl,0x15
c001743e:	75 31                	jne    c0017471 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0017440:	b8 60 9b 02 c0       	mov    eax,0xc0029b60
c0017445:	80 fa 01             	cmp    dl,0x1
c0017448:	74 57                	je     c00174a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001744a:	b8 46 81 02 c0       	mov    eax,0xc0028146
c001744f:	80 fa 13             	cmp    dl,0x13
c0017452:	76 0c                	jbe    c0017460 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0017454:	80 fa 30             	cmp    dl,0x30
c0017457:	75 48                	jne    c00174a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017459:	b8 80 9b 02 c0       	mov    eax,0xc0029b80
c001745e:	eb 41                	jmp    c00174a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017460:	b9 04 00 09 00       	mov    ecx,0x90004
c0017465:	0f a3 d1             	bt     ecx,edx
c0017468:	73 37                	jae    c00174a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001746a:	b8 70 9b 02 c0       	mov    eax,0xc0029b70
c001746f:	eb 30                	jmp    c00174a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017471:	b8 46 81 02 c0       	mov    eax,0xc0028146
c0017476:	80 f9 16             	cmp    cl,0x16
c0017479:	75 26                	jne    c00174a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001747b:	b8 90 9b 02 c0       	mov    eax,0xc0029b90
c0017480:	84 d2                	test   dl,dl
c0017482:	74 1d                	je     c00174a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017484:	b8 46 81 02 c0       	mov    eax,0xc0028146
c0017489:	80 fa 30             	cmp    dl,0x30
c001748c:	75 13                	jne    c00174a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001748e:	b8 a0 9b 02 c0       	mov    eax,0xc0029ba0
c0017493:	eb 0c                	jmp    c00174a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017495:	b8 c0 9a 02 c0       	mov    eax,0xc0029ac0
c001749a:	eb 05                	jmp    c00174a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001749c:	b8 30 9b 02 c0       	mov    eax,0xc0029b30
c00174a1:	5b                   	pop    ebx
c00174a2:	5e                   	pop    esi
c00174a3:	5f                   	pop    edi
c00174a4:	5d                   	pop    ebp
c00174a5:	c3                   	ret    

c00174a6 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c00174a6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00174aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00174ae:	80 f9 04             	cmp    cl,0x4
c00174b1:	75 6b                	jne    c001751e <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c00174b3:	b8 20 99 02 c0       	mov    eax,0xc0029920
c00174b8:	80 fa 01             	cmp    dl,0x1
c00174bb:	0f 86 92 02 00 00    	jbe    c0017753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00174c1:	b8 30 99 02 c0       	mov    eax,0xc0029930
c00174c6:	80 fa 02             	cmp    dl,0x2
c00174c9:	0f 84 84 02 00 00    	je     c0017753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00174cf:	b8 40 99 02 c0       	mov    eax,0xc0029940
c00174d4:	80 fa 03             	cmp    dl,0x3
c00174d7:	0f 84 76 02 00 00    	je     c0017753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00174dd:	b8 50 99 02 c0       	mov    eax,0xc0029950
c00174e2:	80 fa 04             	cmp    dl,0x4
c00174e5:	0f 84 68 02 00 00    	je     c0017753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00174eb:	b8 60 99 02 c0       	mov    eax,0xc0029960
c00174f0:	80 fa 05             	cmp    dl,0x5
c00174f3:	0f 84 5a 02 00 00    	je     c0017753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00174f9:	b8 40 99 02 c0       	mov    eax,0xc0029940
c00174fe:	80 fa 07             	cmp    dl,0x7
c0017501:	0f 84 4c 02 00 00    	je     c0017753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017507:	83 ea 08             	sub    edx,0x8
c001750a:	b8 46 81 02 c0       	mov    eax,0xc0028146
c001750f:	80 fa 01             	cmp    dl,0x1
c0017512:	0f 87 3b 02 00 00    	ja     c0017753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017518:	b8 70 99 02 c0       	mov    eax,0xc0029970
c001751d:	c3                   	ret    
c001751e:	80 f9 05             	cmp    cl,0x5
c0017521:	75 45                	jne    c0017568 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0017523:	8d 4a ff             	lea    ecx,[edx-0x1]
c0017526:	b8 80 99 02 c0       	mov    eax,0xc0029980
c001752b:	80 f9 02             	cmp    cl,0x2
c001752e:	0f 86 1f 02 00 00    	jbe    c0017753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017534:	80 fa 04             	cmp    dl,0x4
c0017537:	0f 84 f3 01 00 00    	je     c0017730 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c001753d:	80 fa 07             	cmp    dl,0x7
c0017540:	0f 84 0d 02 00 00    	je     c0017753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017546:	b8 90 99 02 c0       	mov    eax,0xc0029990
c001754b:	80 fa 08             	cmp    dl,0x8
c001754e:	0f 84 ff 01 00 00    	je     c0017753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017554:	b8 46 81 02 c0       	mov    eax,0xc0028146
c0017559:	80 fa 09             	cmp    dl,0x9
c001755c:	0f 85 f1 01 00 00    	jne    c0017753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017562:	b8 a0 99 02 c0       	mov    eax,0xc00299a0
c0017567:	c3                   	ret    
c0017568:	80 f9 06             	cmp    cl,0x6
c001756b:	0f 85 85 01 00 00    	jne    c00176f6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0017571:	b8 b0 99 02 c0       	mov    eax,0xc00299b0
c0017576:	80 fa 01             	cmp    dl,0x1
c0017579:	0f 84 d4 01 00 00    	je     c0017753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001757f:	8d 42 fb             	lea    eax,[edx-0x5]
c0017582:	3c 01                	cmp    al,0x1
c0017584:	0f 86 ac 01 00 00    	jbe    c0017736 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c001758a:	80 fa 03             	cmp    dl,0x3
c001758d:	0f 84 a3 01 00 00    	je     c0017736 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0017593:	8d 4a f9             	lea    ecx,[edx-0x7]
c0017596:	b8 d0 99 02 c0       	mov    eax,0xc00299d0
c001759b:	80 f9 01             	cmp    cl,0x1
c001759e:	0f 86 af 01 00 00    	jbe    c0017753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00175a4:	80 fa 09             	cmp    dl,0x9
c00175a7:	0f 84 8f 01 00 00    	je     c001773c <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c00175ad:	8d 4a f6             	lea    ecx,[edx-0xa]
c00175b0:	80 f9 01             	cmp    cl,0x1
c00175b3:	0f 86 9a 01 00 00    	jbe    c0017753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00175b9:	b8 e0 99 02 c0       	mov    eax,0xc00299e0
c00175be:	80 fa 0d             	cmp    dl,0xd
c00175c1:	0f 84 8c 01 00 00    	je     c0017753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00175c7:	b8 f0 99 02 c0       	mov    eax,0xc00299f0
c00175cc:	80 fa 0e             	cmp    dl,0xe
c00175cf:	0f 84 7e 01 00 00    	je     c0017753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00175d5:	b8 00 9a 02 c0       	mov    eax,0xc0029a00
c00175da:	80 fa 0f             	cmp    dl,0xf
c00175dd:	0f 84 70 01 00 00    	je     c0017753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00175e3:	b8 e0 99 02 c0       	mov    eax,0xc00299e0
c00175e8:	80 fa 15             	cmp    dl,0x15
c00175eb:	0f 84 62 01 00 00    	je     c0017753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00175f1:	8d 4a ea             	lea    ecx,[edx-0x16]
c00175f4:	b8 00 9a 02 c0       	mov    eax,0xc0029a00
c00175f9:	80 f9 01             	cmp    cl,0x1
c00175fc:	0f 86 51 01 00 00    	jbe    c0017753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017602:	80 fa 1a             	cmp    dl,0x1a
c0017605:	0f 84 37 01 00 00    	je     c0017742 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c001760b:	80 fa 1c             	cmp    dl,0x1c
c001760e:	0f 84 34 01 00 00    	je     c0017748 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0017614:	80 fa 1d             	cmp    dl,0x1d
c0017617:	0f 84 36 01 00 00    	je     c0017753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001761d:	b8 30 9a 02 c0       	mov    eax,0xc0029a30
c0017622:	80 fa 25             	cmp    dl,0x25
c0017625:	0f 84 28 01 00 00    	je     c0017753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001762b:	8d 4a da             	lea    ecx,[edx-0x26]
c001762e:	b8 20 9a 02 c0       	mov    eax,0xc0029a20
c0017633:	80 f9 01             	cmp    cl,0x1
c0017636:	0f 86 17 01 00 00    	jbe    c0017753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001763c:	b8 40 9a 02 c0       	mov    eax,0xc0029a40
c0017641:	80 fa 2a             	cmp    dl,0x2a
c0017644:	0f 84 09 01 00 00    	je     c0017753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001764a:	b8 30 9a 02 c0       	mov    eax,0xc0029a30
c001764f:	80 fa 2c             	cmp    dl,0x2c
c0017652:	0f 84 fb 00 00 00    	je     c0017753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017658:	b8 40 9a 02 c0       	mov    eax,0xc0029a40
c001765d:	80 fa 2d             	cmp    dl,0x2d
c0017660:	0f 84 ed 00 00 00    	je     c0017753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017666:	b8 10 9a 02 c0       	mov    eax,0xc0029a10
c001766b:	80 fa 2e             	cmp    dl,0x2e
c001766e:	0f 84 df 00 00 00    	je     c0017753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017674:	b8 30 9a 02 c0       	mov    eax,0xc0029a30
c0017679:	80 fa 2f             	cmp    dl,0x2f
c001767c:	0f 84 d1 00 00 00    	je     c0017753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017682:	8d 4a cb             	lea    ecx,[edx-0x35]
c0017685:	b8 20 9a 02 c0       	mov    eax,0xc0029a20
c001768a:	80 f9 01             	cmp    cl,0x1
c001768d:	0f 86 c0 00 00 00    	jbe    c0017753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017693:	b8 50 9a 02 c0       	mov    eax,0xc0029a50
c0017698:	80 fa 37             	cmp    dl,0x37
c001769b:	0f 84 b2 00 00 00    	je     c0017753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00176a1:	b8 60 9a 02 c0       	mov    eax,0xc0029a60
c00176a6:	80 fa 3a             	cmp    dl,0x3a
c00176a9:	0f 84 a4 00 00 00    	je     c0017753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00176af:	b8 70 9a 02 c0       	mov    eax,0xc0029a70
c00176b4:	80 fa 3c             	cmp    dl,0x3c
c00176b7:	0f 84 96 00 00 00    	je     c0017753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00176bd:	b8 80 9a 02 c0       	mov    eax,0xc0029a80
c00176c2:	80 fa 3d             	cmp    dl,0x3d
c00176c5:	0f 84 88 00 00 00    	je     c0017753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00176cb:	b8 60 9a 02 c0       	mov    eax,0xc0029a60
c00176d0:	80 fa 3e             	cmp    dl,0x3e
c00176d3:	74 7e                	je     c0017753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00176d5:	8d 42 bb             	lea    eax,[edx-0x45]
c00176d8:	3c 01                	cmp    al,0x1
c00176da:	76 72                	jbe    c001774e <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00176dc:	80 fa 3f             	cmp    dl,0x3f
c00176df:	74 6d                	je     c001774e <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00176e1:	80 fa 4a             	cmp    dl,0x4a
c00176e4:	74 0a                	je     c00176f0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c00176e6:	b8 46 81 02 c0       	mov    eax,0xc0028146
c00176eb:	80 fa 4d             	cmp    dl,0x4d
c00176ee:	75 63                	jne    c0017753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00176f0:	b8 50 9a 02 c0       	mov    eax,0xc0029a50
c00176f5:	c3                   	ret    
c00176f6:	b8 46 81 02 c0       	mov    eax,0xc0028146
c00176fb:	80 f9 0b             	cmp    cl,0xb
c00176fe:	75 0a                	jne    c001770a <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0017700:	fe ca                	dec    dl
c0017702:	75 4f                	jne    c0017753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017704:	b8 90 9a 02 c0       	mov    eax,0xc0029a90
c0017709:	c3                   	ret    
c001770a:	80 f9 0f             	cmp    cl,0xf
c001770d:	75 44                	jne    c0017753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001770f:	b8 a0 9a 02 c0       	mov    eax,0xc0029aa0
c0017714:	80 fa 02             	cmp    dl,0x2
c0017717:	76 3a                	jbe    c0017753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017719:	8d 42 fd             	lea    eax,[edx-0x3]
c001771c:	3c 01                	cmp    al,0x1
c001771e:	76 0a                	jbe    c001772a <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0017720:	b8 46 81 02 c0       	mov    eax,0xc0028146
c0017725:	80 fa 06             	cmp    dl,0x6
c0017728:	75 29                	jne    c0017753 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001772a:	b8 b0 9a 02 c0       	mov    eax,0xc0029ab0
c001772f:	c3                   	ret    
c0017730:	b8 90 99 02 c0       	mov    eax,0xc0029990
c0017735:	c3                   	ret    
c0017736:	b8 c0 99 02 c0       	mov    eax,0xc00299c0
c001773b:	c3                   	ret    
c001773c:	b8 e0 99 02 c0       	mov    eax,0xc00299e0
c0017741:	c3                   	ret    
c0017742:	b8 10 9a 02 c0       	mov    eax,0xc0029a10
c0017747:	c3                   	ret    
c0017748:	b8 20 9a 02 c0       	mov    eax,0xc0029a20
c001774d:	c3                   	ret    
c001774e:	b8 70 9a 02 c0       	mov    eax,0xc0029a70
c0017753:	c3                   	ret    

c0017754 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0017754:	60                   	pusha  
c0017755:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017759:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001775d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017761:	9c                   	pushf  
c0017762:	fa                   	cli    
c0017763:	0f 09                	wbinvd 
c0017765:	0f 30                	wrmsr  
c0017767:	9d                   	popf   
c0017768:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001776c:	89 02                	mov    DWORD PTR [edx],eax
c001776e:	61                   	popa   
c001776f:	c3                   	ret    

c0017770 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0017770:	60                   	pusha  
c0017771:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017775:	9c                   	pushf  
c0017776:	fa                   	cli    
c0017777:	0f 09                	wbinvd 
c0017779:	31 c0                	xor    eax,eax
c001777b:	31 d2                	xor    edx,edx
c001777d:	0f 32                	rdmsr  
c001777f:	9d                   	popf   
c0017780:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017784:	89 02                	mov    DWORD PTR [edx],eax
c0017786:	61                   	popa   
c0017787:	c3                   	ret    

c0017788 <CPU::AMD_K6_writeback(int, int, int)>:
c0017788:	56                   	push   esi
c0017789:	53                   	push   ebx
c001778a:	83 ec 10             	sub    esp,0x10
c001778d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017791:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0017796:	75 5d                	jne    c00177f5 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0017798:	83 f8 08             	cmp    eax,0x8
c001779b:	75 09                	jne    c00177a6 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c001779d:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c00177a2:	7e 13                	jle    c00177b7 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00177a4:	eb 30                	jmp    c00177d6 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00177a6:	83 f8 06             	cmp    eax,0x6
c00177a9:	7c 4a                	jl     c00177f5 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00177ab:	83 f8 07             	cmp    eax,0x7
c00177ae:	7e 07                	jle    c00177b7 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00177b0:	83 f8 09             	cmp    eax,0x9
c00177b3:	74 21                	je     c00177d6 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00177b5:	eb 3e                	jmp    c00177f5 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00177b7:	89 e6                	mov    esi,esp
c00177b9:	8b 1d 64 a6 02 c0    	mov    ebx,DWORD PTR ds:0xc002a664
c00177bf:	56                   	push   esi
c00177c0:	c1 eb 15             	shr    ebx,0x15
c00177c3:	68 82 00 00 c0       	push   0xc0000082
c00177c8:	83 e3 7e             	and    ebx,0x7e
c00177cb:	e8 a0 ff ff ff       	call   c0017770 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00177d0:	56                   	push   esi
c00177d1:	6a 00                	push   0x0
c00177d3:	53                   	push   ebx
c00177d4:	eb 12                	jmp    c00177e8 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c00177d6:	89 e3                	mov    ebx,esp
c00177d8:	53                   	push   ebx
c00177d9:	68 82 00 00 c0       	push   0xc0000082
c00177de:	e8 8d ff ff ff       	call   c0017770 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00177e3:	53                   	push   ebx
c00177e4:	6a 00                	push   0x0
c00177e6:	6a 00                	push   0x0
c00177e8:	68 82 00 00 c0       	push   0xc0000082
c00177ed:	e8 62 ff ff ff       	call   c0017754 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c00177f2:	83 c4 18             	add    esp,0x18
c00177f5:	83 c4 10             	add    esp,0x10
c00177f8:	5b                   	pop    ebx
c00177f9:	5e                   	pop    esi
c00177fa:	c3                   	ret    
c00177fb:	90                   	nop

c00177fc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00177fc:	55                   	push   ebp
c00177fd:	57                   	push   edi
c00177fe:	56                   	push   esi
c00177ff:	53                   	push   ebx
c0017800:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017804:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017808:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001780c:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0017810:	39 05 c0 9b 02 c0    	cmp    DWORD PTR ds:0xc0029bc0,eax
c0017816:	75 23                	jne    c001783b <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0017818:	a1 2c b1 02 c0       	mov    eax,ds:0xc002b12c
c001781d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017821:	89 06                	mov    DWORD PTR [esi],eax
c0017823:	a1 28 b1 02 c0       	mov    eax,ds:0xc002b128
c0017828:	89 07                	mov    DWORD PTR [edi],eax
c001782a:	a1 24 b1 02 c0       	mov    eax,ds:0xc002b124
c001782f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0017832:	a1 20 b1 02 c0       	mov    eax,ds:0xc002b120
c0017837:	89 02                	mov    DWORD PTR [edx],eax
c0017839:	eb 3f                	jmp    c001787a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c001783b:	31 c9                	xor    ecx,ecx
c001783d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017841:	0f a2                	cpuid  
c0017843:	89 06                	mov    DWORD PTR [esi],eax
c0017845:	89 1f                	mov    DWORD PTR [edi],ebx
c0017847:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001784b:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c001784e:	89 10                	mov    DWORD PTR [eax],edx
c0017850:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017854:	a3 c0 9b 02 c0       	mov    ds:0xc0029bc0,eax
c0017859:	8b 06                	mov    eax,DWORD PTR [esi]
c001785b:	a3 2c b1 02 c0       	mov    ds:0xc002b12c,eax
c0017860:	8b 07                	mov    eax,DWORD PTR [edi]
c0017862:	a3 28 b1 02 c0       	mov    ds:0xc002b128,eax
c0017867:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001786a:	a3 24 b1 02 c0       	mov    ds:0xc002b124,eax
c001786f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017873:	8b 00                	mov    eax,DWORD PTR [eax]
c0017875:	a3 20 b1 02 c0       	mov    ds:0xc002b120,eax
c001787a:	5b                   	pop    ebx
c001787b:	5e                   	pop    esi
c001787c:	5f                   	pop    edi
c001787d:	5d                   	pop    ebp
c001787e:	c3                   	ret    
c001787f:	90                   	nop

c0017880 <CPU::cpuidCheckEDX(unsigned int)>:
c0017880:	83 ec 10             	sub    esp,0x10
c0017883:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017887:	50                   	push   eax
c0017888:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001788c:	50                   	push   eax
c001788d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017891:	50                   	push   eax
c0017892:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017896:	50                   	push   eax
c0017897:	6a 01                	push   0x1
c0017899:	e8 5e ff ff ff       	call   c00177fc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001789e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00178a2:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c00178a6:	0f 95 c0             	setne  al
c00178a9:	83 c4 24             	add    esp,0x24
c00178ac:	c3                   	ret    
c00178ad:	90                   	nop

c00178ae <CPU::cpuidCheckECX(unsigned int)>:
c00178ae:	83 ec 10             	sub    esp,0x10
c00178b1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00178b5:	50                   	push   eax
c00178b6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00178ba:	50                   	push   eax
c00178bb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00178bf:	50                   	push   eax
c00178c0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00178c4:	50                   	push   eax
c00178c5:	6a 01                	push   0x1
c00178c7:	e8 30 ff ff ff       	call   c00177fc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00178cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00178d0:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00178d4:	0f 95 c0             	setne  al
c00178d7:	83 c4 24             	add    esp,0x24
c00178da:	c3                   	ret    
c00178db:	90                   	nop

c00178dc <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c00178dc:	83 ec 10             	sub    esp,0x10
c00178df:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00178e3:	50                   	push   eax
c00178e4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00178e8:	50                   	push   eax
c00178e9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00178ed:	50                   	push   eax
c00178ee:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00178f2:	50                   	push   eax
c00178f3:	6a 07                	push   0x7
c00178f5:	e8 02 ff ff ff       	call   c00177fc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00178fa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00178fe:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0017902:	0f 95 c0             	setne  al
c0017905:	83 c4 24             	add    esp,0x24
c0017908:	c3                   	ret    
c0017909:	90                   	nop

c001790a <CPU::cpuidCheckExtendedECX(unsigned int)>:
c001790a:	83 ec 10             	sub    esp,0x10
c001790d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017911:	50                   	push   eax
c0017912:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017916:	50                   	push   eax
c0017917:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001791b:	50                   	push   eax
c001791c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017920:	50                   	push   eax
c0017921:	6a 07                	push   0x7
c0017923:	e8 d4 fe ff ff       	call   c00177fc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017928:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001792c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0017930:	0f 95 c0             	setne  al
c0017933:	83 c4 24             	add    esp,0x24
c0017936:	c3                   	ret    
c0017937:	90                   	nop

c0017938 <CPU::CPU()>:
c0017938:	83 ec 0c             	sub    esp,0xc
c001793b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001793f:	83 ec 08             	sub    esp,0x8
c0017942:	68 46 81 02 c0       	push   0xc0028146
c0017947:	50                   	push   eax
c0017948:	e8 dd be ff ff       	call   c001382a <Device::Device(char const*)>
c001794d:	83 c4 10             	add    esp,0x10
c0017950:	ba 20 82 02 c0       	mov    edx,0xc0028220
c0017955:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017959:	89 10                	mov    DWORD PTR [eax],edx
c001795b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001795f:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0017969:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001796d:	05 78 01 00 00       	add    eax,0x178
c0017972:	83 ec 0c             	sub    esp,0xc
c0017975:	50                   	push   eax
c0017976:	e8 bb 6f ff ff       	call   c000e936 <GDT::GDT()>
c001797b:	83 c4 10             	add    esp,0x10
c001797e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017982:	05 7c 09 00 00       	add    eax,0x97c
c0017987:	83 ec 0c             	sub    esp,0xc
c001798a:	50                   	push   eax
c001798b:	e8 06 72 ff ff       	call   c000eb96 <IDT::IDT()>
c0017990:	83 c4 10             	add    esp,0x10
c0017993:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017997:	05 7c 11 00 00       	add    eax,0x117c
c001799c:	83 ec 0c             	sub    esp,0xc
c001799f:	50                   	push   eax
c00179a0:	e8 35 92 ff ff       	call   c0010bda <TSS::TSS()>
c00179a5:	83 c4 10             	add    esp,0x10
c00179a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179ac:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c00179b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179b7:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c00179c1:	90                   	nop
c00179c2:	83 c4 0c             	add    esp,0xc
c00179c5:	c3                   	ret    

c00179c6 <CPU::displayFeatures()>:
c00179c6:	53                   	push   ebx
c00179c7:	83 ec 10             	sub    esp,0x10
c00179ca:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00179ce:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00179d4:	68 54 7e 02 c0       	push   0xc0027e54
c00179d9:	e8 51 a8 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c00179de:	59                   	pop    ecx
c00179df:	58                   	pop    eax
c00179e0:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c00179e6:	50                   	push   eax
c00179e7:	68 65 7e 02 c0       	push   0xc0027e65
c00179ec:	e8 3e a8 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c00179f1:	58                   	pop    eax
c00179f2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00179f8:	5a                   	pop    edx
c00179f9:	c1 e8 0e             	shr    eax,0xe
c00179fc:	0f b6 c0             	movzx  eax,al
c00179ff:	50                   	push   eax
c0017a00:	68 76 7e 02 c0       	push   0xc0027e76
c0017a05:	e8 25 a8 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c0017a0a:	59                   	pop    ecx
c0017a0b:	58                   	pop    eax
c0017a0c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0017a12:	66 c1 e8 06          	shr    ax,0x6
c0017a16:	0f b6 c0             	movzx  eax,al
c0017a19:	50                   	push   eax
c0017a1a:	68 87 7e 02 c0       	push   0xc0027e87
c0017a1f:	e8 0b a8 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c0017a24:	c7 04 24 9a 82 02 c0 	mov    DWORD PTR [esp],0xc002829a
c0017a2b:	e8 ff a7 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c0017a30:	83 c4 10             	add    esp,0x10
c0017a33:	b8 3c 6b 02 c0       	mov    eax,0xc0026b3c
c0017a38:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0017a3f:	74 05                	je     c0017a46 <CPU::displayFeatures()+0x80>
c0017a41:	b8 38 6b 02 c0       	mov    eax,0xc0026b38
c0017a46:	52                   	push   edx
c0017a47:	52                   	push   edx
c0017a48:	50                   	push   eax
c0017a49:	68 98 7e 02 c0       	push   0xc0027e98
c0017a4e:	e8 dc a7 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c0017a53:	83 c4 10             	add    esp,0x10
c0017a56:	b8 38 6b 02 c0       	mov    eax,0xc0026b38
c0017a5b:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0017a62:	78 05                	js     c0017a69 <CPU::displayFeatures()+0xa3>
c0017a64:	b8 3c 6b 02 c0       	mov    eax,0xc0026b3c
c0017a69:	51                   	push   ecx
c0017a6a:	51                   	push   ecx
c0017a6b:	50                   	push   eax
c0017a6c:	68 af 7e 02 c0       	push   0xc0027eaf
c0017a71:	e8 b9 a7 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c0017a76:	83 c4 10             	add    esp,0x10
c0017a79:	b8 38 6b 02 c0       	mov    eax,0xc0026b38
c0017a7e:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0017a85:	75 05                	jne    c0017a8c <CPU::displayFeatures()+0xc6>
c0017a87:	b8 3c 6b 02 c0       	mov    eax,0xc0026b3c
c0017a8c:	52                   	push   edx
c0017a8d:	52                   	push   edx
c0017a8e:	50                   	push   eax
c0017a8f:	68 c6 7e 02 c0       	push   0xc0027ec6
c0017a94:	e8 96 a7 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c0017a99:	83 c4 10             	add    esp,0x10
c0017a9c:	b8 38 6b 02 c0       	mov    eax,0xc0026b38
c0017aa1:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0017aa8:	75 05                	jne    c0017aaf <CPU::displayFeatures()+0xe9>
c0017aaa:	b8 3c 6b 02 c0       	mov    eax,0xc0026b3c
c0017aaf:	51                   	push   ecx
c0017ab0:	51                   	push   ecx
c0017ab1:	50                   	push   eax
c0017ab2:	68 dd 7e 02 c0       	push   0xc0027edd
c0017ab7:	e8 73 a7 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c0017abc:	83 c4 10             	add    esp,0x10
c0017abf:	b8 38 6b 02 c0       	mov    eax,0xc0026b38
c0017ac4:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0017acb:	75 05                	jne    c0017ad2 <CPU::displayFeatures()+0x10c>
c0017acd:	b8 3c 6b 02 c0       	mov    eax,0xc0026b3c
c0017ad2:	52                   	push   edx
c0017ad3:	52                   	push   edx
c0017ad4:	50                   	push   eax
c0017ad5:	68 f4 7e 02 c0       	push   0xc0027ef4
c0017ada:	e8 50 a7 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c0017adf:	83 c4 10             	add    esp,0x10
c0017ae2:	b8 38 6b 02 c0       	mov    eax,0xc0026b38
c0017ae7:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0017aee:	75 05                	jne    c0017af5 <CPU::displayFeatures()+0x12f>
c0017af0:	b8 3c 6b 02 c0       	mov    eax,0xc0026b3c
c0017af5:	51                   	push   ecx
c0017af6:	51                   	push   ecx
c0017af7:	50                   	push   eax
c0017af8:	68 0b 7f 02 c0       	push   0xc0027f0b
c0017afd:	e8 2d a7 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c0017b02:	83 c4 10             	add    esp,0x10
c0017b05:	b8 38 6b 02 c0       	mov    eax,0xc0026b38
c0017b0a:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0017b11:	75 05                	jne    c0017b18 <CPU::displayFeatures()+0x152>
c0017b13:	b8 3c 6b 02 c0       	mov    eax,0xc0026b3c
c0017b18:	52                   	push   edx
c0017b19:	52                   	push   edx
c0017b1a:	50                   	push   eax
c0017b1b:	68 22 7f 02 c0       	push   0xc0027f22
c0017b20:	e8 0a a7 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c0017b25:	83 c4 10             	add    esp,0x10
c0017b28:	b8 38 6b 02 c0       	mov    eax,0xc0026b38
c0017b2d:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0017b34:	75 05                	jne    c0017b3b <CPU::displayFeatures()+0x175>
c0017b36:	b8 3c 6b 02 c0       	mov    eax,0xc0026b3c
c0017b3b:	51                   	push   ecx
c0017b3c:	51                   	push   ecx
c0017b3d:	50                   	push   eax
c0017b3e:	68 39 7f 02 c0       	push   0xc0027f39
c0017b43:	e8 e7 a6 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c0017b48:	83 c4 10             	add    esp,0x10
c0017b4b:	b8 38 6b 02 c0       	mov    eax,0xc0026b38
c0017b50:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0017b57:	75 05                	jne    c0017b5e <CPU::displayFeatures()+0x198>
c0017b59:	b8 3c 6b 02 c0       	mov    eax,0xc0026b3c
c0017b5e:	52                   	push   edx
c0017b5f:	52                   	push   edx
c0017b60:	50                   	push   eax
c0017b61:	68 50 7f 02 c0       	push   0xc0027f50
c0017b66:	e8 c4 a6 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c0017b6b:	83 c4 10             	add    esp,0x10
c0017b6e:	b8 38 6b 02 c0       	mov    eax,0xc0026b38
c0017b73:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0017b7a:	75 05                	jne    c0017b81 <CPU::displayFeatures()+0x1bb>
c0017b7c:	b8 3c 6b 02 c0       	mov    eax,0xc0026b3c
c0017b81:	51                   	push   ecx
c0017b82:	51                   	push   ecx
c0017b83:	50                   	push   eax
c0017b84:	68 67 7f 02 c0       	push   0xc0027f67
c0017b89:	e8 a1 a6 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c0017b8e:	83 c4 10             	add    esp,0x10
c0017b91:	b8 38 6b 02 c0       	mov    eax,0xc0026b38
c0017b96:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0017b9d:	75 05                	jne    c0017ba4 <CPU::displayFeatures()+0x1de>
c0017b9f:	b8 3c 6b 02 c0       	mov    eax,0xc0026b3c
c0017ba4:	52                   	push   edx
c0017ba5:	52                   	push   edx
c0017ba6:	50                   	push   eax
c0017ba7:	68 7e 7f 02 c0       	push   0xc0027f7e
c0017bac:	e8 7e a6 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c0017bb1:	83 c4 10             	add    esp,0x10
c0017bb4:	b8 38 6b 02 c0       	mov    eax,0xc0026b38
c0017bb9:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0017bc0:	75 05                	jne    c0017bc7 <CPU::displayFeatures()+0x201>
c0017bc2:	b8 3c 6b 02 c0       	mov    eax,0xc0026b3c
c0017bc7:	51                   	push   ecx
c0017bc8:	51                   	push   ecx
c0017bc9:	50                   	push   eax
c0017bca:	68 95 7f 02 c0       	push   0xc0027f95
c0017bcf:	e8 5b a6 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c0017bd4:	83 c4 10             	add    esp,0x10
c0017bd7:	b8 38 6b 02 c0       	mov    eax,0xc0026b38
c0017bdc:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0017be3:	75 05                	jne    c0017bea <CPU::displayFeatures()+0x224>
c0017be5:	b8 3c 6b 02 c0       	mov    eax,0xc0026b3c
c0017bea:	52                   	push   edx
c0017beb:	52                   	push   edx
c0017bec:	50                   	push   eax
c0017bed:	68 ac 7f 02 c0       	push   0xc0027fac
c0017bf2:	e8 38 a6 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c0017bf7:	83 c4 10             	add    esp,0x10
c0017bfa:	b8 38 6b 02 c0       	mov    eax,0xc0026b38
c0017bff:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0017c06:	78 05                	js     c0017c0d <CPU::displayFeatures()+0x247>
c0017c08:	b8 3c 6b 02 c0       	mov    eax,0xc0026b3c
c0017c0d:	51                   	push   ecx
c0017c0e:	51                   	push   ecx
c0017c0f:	50                   	push   eax
c0017c10:	68 c3 7f 02 c0       	push   0xc0027fc3
c0017c15:	e8 15 a6 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c0017c1a:	83 c4 10             	add    esp,0x10
c0017c1d:	b8 38 6b 02 c0       	mov    eax,0xc0026b38
c0017c22:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0017c29:	75 05                	jne    c0017c30 <CPU::displayFeatures()+0x26a>
c0017c2b:	b8 3c 6b 02 c0       	mov    eax,0xc0026b3c
c0017c30:	52                   	push   edx
c0017c31:	52                   	push   edx
c0017c32:	50                   	push   eax
c0017c33:	68 da 7f 02 c0       	push   0xc0027fda
c0017c38:	e8 f2 a5 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c0017c3d:	83 c4 18             	add    esp,0x18
c0017c40:	5b                   	pop    ebx
c0017c41:	c3                   	ret    

c0017c42 <CPU::detectFeatures()>:
c0017c42:	55                   	push   ebp
c0017c43:	57                   	push   edi
c0017c44:	56                   	push   esi
c0017c45:	53                   	push   ebx
c0017c46:	83 ec 50             	sub    esp,0x50
c0017c49:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0017c4d:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0017c57:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0017c5e:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0017c64:	6a 0d                	push   0xd
c0017c66:	6a 00                	push   0x0
c0017c68:	57                   	push   edi
c0017c69:	e8 0f 8a fe ff       	call   c000067d <memset>
c0017c6e:	83 c4 10             	add    esp,0x10
c0017c71:	a1 28 a6 02 c0       	mov    eax,ds:0xc002a628
c0017c76:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0017c7d:	0f 84 20 09 00 00    	je     c00185a3 <CPU::detectFeatures()+0x961>
c0017c83:	83 ec 0c             	sub    esp,0xc
c0017c86:	6a 10                	push   0x10
c0017c88:	e8 f3 fb ff ff       	call   c0017880 <CPU::cpuidCheckEDX(unsigned int)>
c0017c8d:	83 e0 01             	and    eax,0x1
c0017c90:	8d 14 00             	lea    edx,[eax+eax*1]
c0017c93:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017c99:	83 e0 fd             	and    eax,0xfffffffd
c0017c9c:	09 d0                	or     eax,edx
c0017c9e:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017ca4:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0017cab:	e8 d0 fb ff ff       	call   c0017880 <CPU::cpuidCheckEDX(unsigned int)>
c0017cb0:	83 e0 01             	and    eax,0x1
c0017cb3:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0017cba:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017cc0:	83 e0 fb             	and    eax,0xfffffffb
c0017cc3:	09 d0                	or     eax,edx
c0017cc5:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017ccb:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0017cd2:	e8 a9 fb ff ff       	call   c0017880 <CPU::cpuidCheckEDX(unsigned int)>
c0017cd7:	83 e0 01             	and    eax,0x1
c0017cda:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0017ce1:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017ce7:	83 e0 f7             	and    eax,0xfffffff7
c0017cea:	09 d0                	or     eax,edx
c0017cec:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017cf2:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0017cf9:	e8 82 fb ff ff       	call   c0017880 <CPU::cpuidCheckEDX(unsigned int)>
c0017cfe:	83 e0 01             	and    eax,0x1
c0017d01:	c1 e0 04             	shl    eax,0x4
c0017d04:	88 c2                	mov    dl,al
c0017d06:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017d0c:	83 e0 ef             	and    eax,0xffffffef
c0017d0f:	09 d0                	or     eax,edx
c0017d11:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017d17:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0017d1e:	e8 5d fb ff ff       	call   c0017880 <CPU::cpuidCheckEDX(unsigned int)>
c0017d23:	83 e0 01             	and    eax,0x1
c0017d26:	c1 e0 05             	shl    eax,0x5
c0017d29:	88 c2                	mov    dl,al
c0017d2b:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017d31:	83 e0 df             	and    eax,0xffffffdf
c0017d34:	09 d0                	or     eax,edx
c0017d36:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017d3c:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0017d43:	e8 38 fb ff ff       	call   c0017880 <CPU::cpuidCheckEDX(unsigned int)>
c0017d48:	83 e0 01             	and    eax,0x1
c0017d4b:	8d 14 00             	lea    edx,[eax+eax*1]
c0017d4e:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0017d54:	83 e0 fd             	and    eax,0xfffffffd
c0017d57:	09 d0                	or     eax,edx
c0017d59:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0017d5f:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0017d66:	e8 15 fb ff ff       	call   c0017880 <CPU::cpuidCheckEDX(unsigned int)>
c0017d6b:	83 e0 01             	and    eax,0x1
c0017d6e:	c1 e0 06             	shl    eax,0x6
c0017d71:	88 c2                	mov    dl,al
c0017d73:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0017d79:	83 e0 bf             	and    eax,0xffffffbf
c0017d7c:	09 d0                	or     eax,edx
c0017d7e:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0017d84:	58                   	pop    eax
c0017d85:	8d 74 24 28          	lea    esi,[esp+0x28]
c0017d89:	56                   	push   esi
c0017d8a:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0017d8e:	55                   	push   ebp
c0017d8f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0017d93:	50                   	push   eax
c0017d94:	8d 54 24 28          	lea    edx,[esp+0x28]
c0017d98:	52                   	push   edx
c0017d99:	6a 00                	push   0x0
c0017d9b:	e8 5c fa ff ff       	call   c00177fc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017da0:	83 c4 1c             	add    esp,0x1c
c0017da3:	6a 04                	push   0x4
c0017da5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017da9:	50                   	push   eax
c0017daa:	57                   	push   edi
c0017dab:	e8 97 88 fe ff       	call   c0000647 <memcpy>
c0017db0:	83 c4 0c             	add    esp,0xc
c0017db3:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0017db9:	6a 04                	push   0x4
c0017dbb:	56                   	push   esi
c0017dbc:	50                   	push   eax
c0017dbd:	e8 85 88 fe ff       	call   c0000647 <memcpy>
c0017dc2:	83 c4 0c             	add    esp,0xc
c0017dc5:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0017dcb:	6a 04                	push   0x4
c0017dcd:	55                   	push   ebp
c0017dce:	50                   	push   eax
c0017dcf:	e8 73 88 fe ff       	call   c0000647 <memcpy>
c0017dd4:	58                   	pop    eax
c0017dd5:	5a                   	pop    edx
c0017dd6:	68 f1 7f 02 c0       	push   0xc0027ff1
c0017ddb:	57                   	push   edi
c0017ddc:	e8 8c 89 fe ff       	call   c000076d <strcmp>
c0017de1:	83 c4 10             	add    esp,0x10
c0017de4:	85 c0                	test   eax,eax
c0017de6:	75 0f                	jne    c0017df7 <CPU::detectFeatures()+0x1b5>
c0017de8:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0017df2:	e9 22 02 00 00       	jmp    c0018019 <CPU::detectFeatures()+0x3d7>
c0017df7:	50                   	push   eax
c0017df8:	50                   	push   eax
c0017df9:	68 fe 7f 02 c0       	push   0xc0027ffe
c0017dfe:	57                   	push   edi
c0017dff:	e8 69 89 fe ff       	call   c000076d <strcmp>
c0017e04:	83 c4 10             	add    esp,0x10
c0017e07:	85 c0                	test   eax,eax
c0017e09:	74 dd                	je     c0017de8 <CPU::detectFeatures()+0x1a6>
c0017e0b:	51                   	push   ecx
c0017e0c:	51                   	push   ecx
c0017e0d:	68 0b 80 02 c0       	push   0xc002800b
c0017e12:	57                   	push   edi
c0017e13:	e8 55 89 fe ff       	call   c000076d <strcmp>
c0017e18:	83 c4 10             	add    esp,0x10
c0017e1b:	85 c0                	test   eax,eax
c0017e1d:	74 2a                	je     c0017e49 <CPU::detectFeatures()+0x207>
c0017e1f:	52                   	push   edx
c0017e20:	52                   	push   edx
c0017e21:	68 18 80 02 c0       	push   0xc0028018
c0017e26:	57                   	push   edi
c0017e27:	e8 41 89 fe ff       	call   c000076d <strcmp>
c0017e2c:	83 c4 10             	add    esp,0x10
c0017e2f:	85 c0                	test   eax,eax
c0017e31:	74 16                	je     c0017e49 <CPU::detectFeatures()+0x207>
c0017e33:	50                   	push   eax
c0017e34:	50                   	push   eax
c0017e35:	68 25 80 02 c0       	push   0xc0028025
c0017e3a:	57                   	push   edi
c0017e3b:	e8 2d 89 fe ff       	call   c000076d <strcmp>
c0017e40:	83 c4 10             	add    esp,0x10
c0017e43:	85 c0                	test   eax,eax
c0017e45:	74 48                	je     c0017e8f <CPU::detectFeatures()+0x24d>
c0017e47:	eb 0f                	jmp    c0017e58 <CPU::detectFeatures()+0x216>
c0017e49:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0017e53:	e9 c1 01 00 00       	jmp    c0018019 <CPU::detectFeatures()+0x3d7>
c0017e58:	50                   	push   eax
c0017e59:	50                   	push   eax
c0017e5a:	68 32 80 02 c0       	push   0xc0028032
c0017e5f:	57                   	push   edi
c0017e60:	e8 08 89 fe ff       	call   c000076d <strcmp>
c0017e65:	83 c4 10             	add    esp,0x10
c0017e68:	85 c0                	test   eax,eax
c0017e6a:	74 23                	je     c0017e8f <CPU::detectFeatures()+0x24d>
c0017e6c:	50                   	push   eax
c0017e6d:	50                   	push   eax
c0017e6e:	68 3f 80 02 c0       	push   0xc002803f
c0017e73:	57                   	push   edi
c0017e74:	e8 f4 88 fe ff       	call   c000076d <strcmp>
c0017e79:	83 c4 10             	add    esp,0x10
c0017e7c:	85 c0                	test   eax,eax
c0017e7e:	75 1e                	jne    c0017e9e <CPU::detectFeatures()+0x25c>
c0017e80:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0017e8a:	e9 8a 01 00 00       	jmp    c0018019 <CPU::detectFeatures()+0x3d7>
c0017e8f:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0017e99:	e9 7b 01 00 00       	jmp    c0018019 <CPU::detectFeatures()+0x3d7>
c0017e9e:	50                   	push   eax
c0017e9f:	50                   	push   eax
c0017ea0:	68 4c 80 02 c0       	push   0xc002804c
c0017ea5:	57                   	push   edi
c0017ea6:	e8 c2 88 fe ff       	call   c000076d <strcmp>
c0017eab:	83 c4 10             	add    esp,0x10
c0017eae:	85 c0                	test   eax,eax
c0017eb0:	75 0f                	jne    c0017ec1 <CPU::detectFeatures()+0x27f>
c0017eb2:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0017ebc:	e9 58 01 00 00       	jmp    c0018019 <CPU::detectFeatures()+0x3d7>
c0017ec1:	50                   	push   eax
c0017ec2:	50                   	push   eax
c0017ec3:	68 0b 80 02 c0       	push   0xc002800b
c0017ec8:	57                   	push   edi
c0017ec9:	e8 9f 88 fe ff       	call   c000076d <strcmp>
c0017ece:	83 c4 10             	add    esp,0x10
c0017ed1:	85 c0                	test   eax,eax
c0017ed3:	75 0f                	jne    c0017ee4 <CPU::detectFeatures()+0x2a2>
c0017ed5:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0017edf:	e9 35 01 00 00       	jmp    c0018019 <CPU::detectFeatures()+0x3d7>
c0017ee4:	50                   	push   eax
c0017ee5:	50                   	push   eax
c0017ee6:	68 59 80 02 c0       	push   0xc0028059
c0017eeb:	57                   	push   edi
c0017eec:	e8 7c 88 fe ff       	call   c000076d <strcmp>
c0017ef1:	83 c4 10             	add    esp,0x10
c0017ef4:	85 c0                	test   eax,eax
c0017ef6:	75 0f                	jne    c0017f07 <CPU::detectFeatures()+0x2c5>
c0017ef8:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0017f02:	e9 12 01 00 00       	jmp    c0018019 <CPU::detectFeatures()+0x3d7>
c0017f07:	51                   	push   ecx
c0017f08:	51                   	push   ecx
c0017f09:	68 66 80 02 c0       	push   0xc0028066
c0017f0e:	57                   	push   edi
c0017f0f:	e8 59 88 fe ff       	call   c000076d <strcmp>
c0017f14:	83 c4 10             	add    esp,0x10
c0017f17:	85 c0                	test   eax,eax
c0017f19:	75 0f                	jne    c0017f2a <CPU::detectFeatures()+0x2e8>
c0017f1b:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0017f25:	e9 ef 00 00 00       	jmp    c0018019 <CPU::detectFeatures()+0x3d7>
c0017f2a:	52                   	push   edx
c0017f2b:	52                   	push   edx
c0017f2c:	68 73 80 02 c0       	push   0xc0028073
c0017f31:	57                   	push   edi
c0017f32:	e8 36 88 fe ff       	call   c000076d <strcmp>
c0017f37:	83 c4 10             	add    esp,0x10
c0017f3a:	85 c0                	test   eax,eax
c0017f3c:	75 0f                	jne    c0017f4d <CPU::detectFeatures()+0x30b>
c0017f3e:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0017f48:	e9 cc 00 00 00       	jmp    c0018019 <CPU::detectFeatures()+0x3d7>
c0017f4d:	50                   	push   eax
c0017f4e:	50                   	push   eax
c0017f4f:	68 80 80 02 c0       	push   0xc0028080
c0017f54:	57                   	push   edi
c0017f55:	e8 13 88 fe ff       	call   c000076d <strcmp>
c0017f5a:	83 c4 10             	add    esp,0x10
c0017f5d:	85 c0                	test   eax,eax
c0017f5f:	75 0f                	jne    c0017f70 <CPU::detectFeatures()+0x32e>
c0017f61:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0017f6b:	e9 a9 00 00 00       	jmp    c0018019 <CPU::detectFeatures()+0x3d7>
c0017f70:	50                   	push   eax
c0017f71:	50                   	push   eax
c0017f72:	68 8d 80 02 c0       	push   0xc002808d
c0017f77:	57                   	push   edi
c0017f78:	e8 f0 87 fe ff       	call   c000076d <strcmp>
c0017f7d:	83 c4 10             	add    esp,0x10
c0017f80:	85 c0                	test   eax,eax
c0017f82:	75 0f                	jne    c0017f93 <CPU::detectFeatures()+0x351>
c0017f84:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0017f8e:	e9 86 00 00 00       	jmp    c0018019 <CPU::detectFeatures()+0x3d7>
c0017f93:	50                   	push   eax
c0017f94:	50                   	push   eax
c0017f95:	68 9a 80 02 c0       	push   0xc002809a
c0017f9a:	57                   	push   edi
c0017f9b:	e8 cd 87 fe ff       	call   c000076d <strcmp>
c0017fa0:	83 c4 10             	add    esp,0x10
c0017fa3:	85 c0                	test   eax,eax
c0017fa5:	75 0c                	jne    c0017fb3 <CPU::detectFeatures()+0x371>
c0017fa7:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0017fb1:	eb 66                	jmp    c0018019 <CPU::detectFeatures()+0x3d7>
c0017fb3:	50                   	push   eax
c0017fb4:	50                   	push   eax
c0017fb5:	68 a7 80 02 c0       	push   0xc00280a7
c0017fba:	57                   	push   edi
c0017fbb:	e8 ad 87 fe ff       	call   c000076d <strcmp>
c0017fc0:	83 c4 10             	add    esp,0x10
c0017fc3:	85 c0                	test   eax,eax
c0017fc5:	75 0c                	jne    c0017fd3 <CPU::detectFeatures()+0x391>
c0017fc7:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0017fd1:	eb 46                	jmp    c0018019 <CPU::detectFeatures()+0x3d7>
c0017fd3:	50                   	push   eax
c0017fd4:	50                   	push   eax
c0017fd5:	68 b4 80 02 c0       	push   0xc00280b4
c0017fda:	57                   	push   edi
c0017fdb:	e8 8d 87 fe ff       	call   c000076d <strcmp>
c0017fe0:	83 c4 10             	add    esp,0x10
c0017fe3:	85 c0                	test   eax,eax
c0017fe5:	74 e0                	je     c0017fc7 <CPU::detectFeatures()+0x385>
c0017fe7:	50                   	push   eax
c0017fe8:	50                   	push   eax
c0017fe9:	68 c1 80 02 c0       	push   0xc00280c1
c0017fee:	57                   	push   edi
c0017fef:	e8 79 87 fe ff       	call   c000076d <strcmp>
c0017ff4:	83 c4 10             	add    esp,0x10
c0017ff7:	85 c0                	test   eax,eax
c0017ff9:	74 cc                	je     c0017fc7 <CPU::detectFeatures()+0x385>
c0017ffb:	51                   	push   ecx
c0017ffc:	51                   	push   ecx
c0017ffd:	68 ce 80 02 c0       	push   0xc00280ce
c0018002:	57                   	push   edi
c0018003:	e8 65 87 fe ff       	call   c000076d <strcmp>
c0018008:	83 c4 10             	add    esp,0x10
c001800b:	85 c0                	test   eax,eax
c001800d:	74 b8                	je     c0017fc7 <CPU::detectFeatures()+0x385>
c001800f:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0018019:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001801e:	0f 86 be 00 00 00    	jbe    c00180e2 <CPU::detectFeatures()+0x4a0>
c0018024:	83 ec 0c             	sub    esp,0xc
c0018027:	68 80 00 00 00       	push   0x80
c001802c:	e8 ab f8 ff ff       	call   c00178dc <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018031:	83 e0 01             	and    eax,0x1
c0018034:	c1 e0 06             	shl    eax,0x6
c0018037:	88 c2                	mov    dl,al
c0018039:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001803f:	83 e0 bf             	and    eax,0xffffffbf
c0018042:	09 d0                	or     eax,edx
c0018044:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001804a:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0018051:	e8 86 f8 ff ff       	call   c00178dc <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018056:	83 e0 01             	and    eax,0x1
c0018059:	c1 e0 04             	shl    eax,0x4
c001805c:	88 c2                	mov    dl,al
c001805e:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018064:	83 e0 ef             	and    eax,0xffffffef
c0018067:	09 d0                	or     eax,edx
c0018069:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001806f:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0018076:	e8 61 f8 ff ff       	call   c00178dc <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001807b:	c1 e0 07             	shl    eax,0x7
c001807e:	88 c2                	mov    dl,al
c0018080:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018086:	83 e0 7f             	and    eax,0x7f
c0018089:	09 d0                	or     eax,edx
c001808b:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018091:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018098:	e8 6d f8 ff ff       	call   c001790a <CPU::cpuidCheckExtendedECX(unsigned int)>
c001809d:	83 e0 01             	and    eax,0x1
c00180a0:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00180a7:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00180ad:	83 e0 f7             	and    eax,0xfffffff7
c00180b0:	09 d0                	or     eax,edx
c00180b2:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00180b8:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00180bf:	e8 46 f8 ff ff       	call   c001790a <CPU::cpuidCheckExtendedECX(unsigned int)>
c00180c4:	83 c4 10             	add    esp,0x10
c00180c7:	83 e0 01             	and    eax,0x1
c00180ca:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00180d1:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00180d7:	83 e0 fb             	and    eax,0xfffffffb
c00180da:	09 d0                	or     eax,edx
c00180dc:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00180e2:	83 ec 0c             	sub    esp,0xc
c00180e5:	56                   	push   esi
c00180e6:	55                   	push   ebp
c00180e7:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00180eb:	57                   	push   edi
c00180ec:	8d 44 24 28          	lea    eax,[esp+0x28]
c00180f0:	50                   	push   eax
c00180f1:	6a 01                	push   0x1
c00180f3:	e8 04 f7 ff ff       	call   c00177fc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00180f8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00180fc:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018102:	88 ca                	mov    dl,cl
c0018104:	83 e0 f0             	and    eax,0xfffffff0
c0018107:	83 e2 0f             	and    edx,0xf
c001810a:	09 d0                	or     eax,edx
c001810c:	88 ca                	mov    dl,cl
c001810e:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0018114:	c0 ea 04             	shr    dl,0x4
c0018117:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c001811b:	0f b6 c2             	movzx  eax,dl
c001811e:	83 c4 20             	add    esp,0x20
c0018121:	c1 e0 06             	shl    eax,0x6
c0018124:	89 c5                	mov    ebp,eax
c0018126:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001812c:	66 25 3f c0          	and    ax,0xc03f
c0018130:	09 e8                	or     eax,ebp
c0018132:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018139:	89 c8                	mov    eax,ecx
c001813b:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0018141:	c1 e8 08             	shr    eax,0x8
c0018144:	83 e2 3f             	and    edx,0x3f
c0018147:	83 e0 0f             	and    eax,0xf
c001814a:	89 c5                	mov    ebp,eax
c001814c:	c1 e5 06             	shl    ebp,0x6
c001814f:	09 d5                	or     ebp,edx
c0018151:	89 ea                	mov    edx,ebp
c0018153:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0018159:	88 c2                	mov    dl,al
c001815b:	c0 ea 02             	shr    dl,0x2
c001815e:	89 d5                	mov    ebp,edx
c0018160:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0018166:	83 e2 c0             	and    edx,0xffffffc0
c0018169:	09 d5                	or     ebp,edx
c001816b:	89 ea                	mov    edx,ebp
c001816d:	89 cd                	mov    ebp,ecx
c001816f:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0018175:	c1 ed 0c             	shr    ebp,0xc
c0018178:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c001817e:	83 e5 03             	and    ebp,0x3
c0018181:	83 e2 cf             	and    edx,0xffffffcf
c0018184:	c1 e5 04             	shl    ebp,0x4
c0018187:	09 d5                	or     ebp,edx
c0018189:	3c 06                	cmp    al,0x6
c001818b:	89 ea                	mov    edx,ebp
c001818d:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0018193:	74 04                	je     c0018199 <CPU::detectFeatures()+0x557>
c0018195:	3c 0f                	cmp    al,0xf
c0018197:	75 5c                	jne    c00181f5 <CPU::detectFeatures()+0x5b3>
c0018199:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001819d:	89 cd                	mov    ebp,ecx
c001819f:	c1 ed 10             	shr    ebp,0x10
c00181a2:	c1 e5 04             	shl    ebp,0x4
c00181a5:	09 ea                	or     edx,ebp
c00181a7:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00181ad:	0f b6 d2             	movzx  edx,dl
c00181b0:	66 81 e5 3f c0       	and    bp,0xc03f
c00181b5:	c1 e2 06             	shl    edx,0x6
c00181b8:	09 ea                	or     edx,ebp
c00181ba:	3c 0f                	cmp    al,0xf
c00181bc:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00181c3:	75 30                	jne    c00181f5 <CPU::detectFeatures()+0x5b3>
c00181c5:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00181cb:	c1 e9 14             	shr    ecx,0x14
c00181ce:	83 e0 3f             	and    eax,0x3f
c00181d1:	83 c1 0f             	add    ecx,0xf
c00181d4:	88 ca                	mov    dl,cl
c00181d6:	c0 e9 02             	shr    cl,0x2
c00181d9:	c1 e2 06             	shl    edx,0x6
c00181dc:	09 d0                	or     eax,edx
c00181de:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00181e4:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00181ea:	83 e0 c0             	and    eax,0xffffffc0
c00181ed:	09 c1                	or     ecx,eax
c00181ef:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00181f5:	83 ec 0c             	sub    esp,0xc
c00181f8:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00181ff:	56                   	push   esi
c0018200:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018204:	50                   	push   eax
c0018205:	57                   	push   edi
c0018206:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001820a:	55                   	push   ebp
c001820b:	68 00 00 00 80       	push   0x80000000
c0018210:	e8 e7 f5 ff ff       	call   c00177fc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018215:	83 c4 20             	add    esp,0x20
c0018218:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0018220:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018224:	76 1e                	jbe    c0018244 <CPU::detectFeatures()+0x602>
c0018226:	83 ec 0c             	sub    esp,0xc
c0018229:	56                   	push   esi
c001822a:	50                   	push   eax
c001822b:	57                   	push   edi
c001822c:	55                   	push   ebp
c001822d:	68 01 00 00 80       	push   0x80000001
c0018232:	e8 c5 f5 ff ff       	call   c00177fc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018237:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0018241:	83 c4 20             	add    esp,0x20
c0018244:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001824a:	83 f8 01             	cmp    eax,0x1
c001824d:	75 6f                	jne    c00182be <CPU::detectFeatures()+0x67c>
c001824f:	51                   	push   ecx
c0018250:	51                   	push   ecx
c0018251:	68 da 80 02 c0       	push   0xc00280da
c0018256:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001825a:	56                   	push   esi
c001825b:	e8 bc 84 fe ff       	call   c000071c <strcpy>
c0018260:	5f                   	pop    edi
c0018261:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018267:	5d                   	pop    ebp
c0018268:	66 c1 e8 06          	shr    ax,0x6
c001826c:	0f b6 c0             	movzx  eax,al
c001826f:	50                   	push   eax
c0018270:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018276:	c1 e8 0e             	shr    eax,0xe
c0018279:	0f b6 c0             	movzx  eax,al
c001827c:	50                   	push   eax
c001827d:	e8 24 f2 ff ff       	call   c00174a6 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0018282:	5a                   	pop    edx
c0018283:	59                   	pop    ecx
c0018284:	50                   	push   eax
c0018285:	56                   	push   esi
c0018286:	e8 48 85 fe ff       	call   c00007d3 <strcat>
c001828b:	5f                   	pop    edi
c001828c:	5d                   	pop    ebp
c001828d:	56                   	push   esi
c001828e:	53                   	push   ebx
c001828f:	e8 88 b5 ff ff       	call   c001381c <Device::setName(char const*)>
c0018294:	58                   	pop    eax
c0018295:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001829b:	5a                   	pop    edx
c001829c:	68 e1 80 02 c0       	push   0xc00280e1
c00182a1:	50                   	push   eax
c00182a2:	e8 c6 84 fe ff       	call   c000076d <strcmp>
c00182a7:	83 c4 10             	add    esp,0x10
c00182aa:	85 c0                	test   eax,eax
c00182ac:	0f 85 73 03 00 00    	jne    c0018625 <CPU::detectFeatures()+0x9e3>
c00182b2:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00182b9:	e9 67 03 00 00       	jmp    c0018625 <CPU::detectFeatures()+0x9e3>
c00182be:	83 f8 02             	cmp    eax,0x2
c00182c1:	0f 85 b5 00 00 00    	jne    c001837c <CPU::detectFeatures()+0x73a>
c00182c7:	57                   	push   edi
c00182c8:	57                   	push   edi
c00182c9:	68 f3 80 02 c0       	push   0xc00280f3
c00182ce:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00182d2:	56                   	push   esi
c00182d3:	e8 44 84 fe ff       	call   c000071c <strcpy>
c00182d8:	5d                   	pop    ebp
c00182d9:	58                   	pop    eax
c00182da:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00182e0:	66 c1 e8 06          	shr    ax,0x6
c00182e4:	0f b6 c0             	movzx  eax,al
c00182e7:	50                   	push   eax
c00182e8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00182ee:	c1 e8 0e             	shr    eax,0xe
c00182f1:	0f b6 c0             	movzx  eax,al
c00182f4:	50                   	push   eax
c00182f5:	e8 18 f0 ff ff       	call   c0017312 <CPU::lookupAMDName(unsigned char, unsigned char)>
c00182fa:	5a                   	pop    edx
c00182fb:	59                   	pop    ecx
c00182fc:	50                   	push   eax
c00182fd:	56                   	push   esi
c00182fe:	e8 d0 84 fe ff       	call   c00007d3 <strcat>
c0018303:	5f                   	pop    edi
c0018304:	5d                   	pop    ebp
c0018305:	56                   	push   esi
c0018306:	53                   	push   ebx
c0018307:	e8 10 b5 ff ff       	call   c001381c <Device::setName(char const*)>
c001830c:	58                   	pop    eax
c001830d:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018313:	5a                   	pop    edx
c0018314:	68 f8 80 02 c0       	push   0xc00280f8
c0018319:	50                   	push   eax
c001831a:	e8 4e 84 fe ff       	call   c000076d <strcmp>
c001831f:	83 c4 10             	add    esp,0x10
c0018322:	85 c0                	test   eax,eax
c0018324:	75 20                	jne    c0018346 <CPU::detectFeatures()+0x704>
c0018326:	8b 15 28 a6 02 c0    	mov    edx,DWORD PTR ds:0xc002a628
c001832c:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0018332:	a8 01                	test   al,0x1
c0018334:	74 10                	je     c0018346 <CPU::detectFeatures()+0x704>
c0018336:	83 e0 fe             	and    eax,0xfffffffe
c0018339:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001833f:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0018346:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001834c:	c1 e8 0e             	shr    eax,0xe
c001834f:	3c 05                	cmp    al,0x5
c0018351:	0f 85 ce 02 00 00    	jne    c0018625 <CPU::detectFeatures()+0x9e3>
c0018357:	56                   	push   esi
c0018358:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001835e:	83 e0 0f             	and    eax,0xf
c0018361:	50                   	push   eax
c0018362:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018368:	66 c1 e8 06          	shr    ax,0x6
c001836c:	0f b6 c0             	movzx  eax,al
c001836f:	50                   	push   eax
c0018370:	6a 05                	push   0x5
c0018372:	e8 11 f4 ff ff       	call   c0017788 <CPU::AMD_K6_writeback(int, int, int)>
c0018377:	e9 1f 02 00 00       	jmp    c001859b <CPU::detectFeatures()+0x959>
c001837c:	8d 50 fd             	lea    edx,[eax-0x3]
c001837f:	83 fa 01             	cmp    edx,0x1
c0018382:	76 09                	jbe    c001838d <CPU::detectFeatures()+0x74b>
c0018384:	83 f8 06             	cmp    eax,0x6
c0018387:	0f 85 91 01 00 00    	jne    c001851e <CPU::detectFeatures()+0x8dc>
c001838d:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018393:	c1 ea 0e             	shr    edx,0xe
c0018396:	80 fa 05             	cmp    dl,0x5
c0018399:	75 7b                	jne    c0018416 <CPU::detectFeatures()+0x7d4>
c001839b:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00183a1:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00183a6:	66 81 fa 00 01       	cmp    dx,0x100
c00183ab:	75 0c                	jne    c00183b9 <CPU::detectFeatures()+0x777>
c00183ad:	51                   	push   ecx
c00183ae:	51                   	push   ecx
c00183af:	68 ff 80 02 c0       	push   0xc00280ff
c00183b4:	e9 dc 01 00 00       	jmp    c0018595 <CPU::detectFeatures()+0x953>
c00183b9:	66 81 fa 00 02       	cmp    dx,0x200
c00183be:	75 0c                	jne    c00183cc <CPU::detectFeatures()+0x78a>
c00183c0:	52                   	push   edx
c00183c1:	52                   	push   edx
c00183c2:	68 12 81 02 c0       	push   0xc0028112
c00183c7:	e9 c9 01 00 00       	jmp    c0018595 <CPU::detectFeatures()+0x953>
c00183cc:	66 81 fa 40 02       	cmp    dx,0x240
c00183d1:	75 0c                	jne    c00183df <CPU::detectFeatures()+0x79d>
c00183d3:	50                   	push   eax
c00183d4:	50                   	push   eax
c00183d5:	68 24 81 02 c0       	push   0xc0028124
c00183da:	e9 b6 01 00 00       	jmp    c0018595 <CPU::detectFeatures()+0x953>
c00183df:	83 f8 06             	cmp    eax,0x6
c00183e2:	75 0c                	jne    c00183f0 <CPU::detectFeatures()+0x7ae>
c00183e4:	50                   	push   eax
c00183e5:	50                   	push   eax
c00183e6:	68 36 81 02 c0       	push   0xc0028136
c00183eb:	e9 a5 01 00 00       	jmp    c0018595 <CPU::detectFeatures()+0x953>
c00183f0:	83 f8 04             	cmp    eax,0x4
c00183f3:	75 0c                	jne    c0018401 <CPU::detectFeatures()+0x7bf>
c00183f5:	50                   	push   eax
c00183f6:	50                   	push   eax
c00183f7:	68 42 81 02 c0       	push   0xc0028142
c00183fc:	e9 94 01 00 00       	jmp    c0018595 <CPU::detectFeatures()+0x953>
c0018401:	83 f8 03             	cmp    eax,0x3
c0018404:	0f 85 1b 02 00 00    	jne    c0018625 <CPU::detectFeatures()+0x9e3>
c001840a:	50                   	push   eax
c001840b:	50                   	push   eax
c001840c:	68 4a 81 02 c0       	push   0xc002814a
c0018411:	e9 7f 01 00 00       	jmp    c0018595 <CPU::detectFeatures()+0x953>
c0018416:	80 fa 06             	cmp    dl,0x6
c0018419:	0f 85 db 00 00 00    	jne    c00184fa <CPU::detectFeatures()+0x8b8>
c001841f:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018425:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001842a:	66 81 fa 80 01       	cmp    dx,0x180
c001842f:	75 0c                	jne    c001843d <CPU::detectFeatures()+0x7fb>
c0018431:	50                   	push   eax
c0018432:	50                   	push   eax
c0018433:	68 55 81 02 c0       	push   0xc0028155
c0018438:	e9 58 01 00 00       	jmp    c0018595 <CPU::detectFeatures()+0x953>
c001843d:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0018443:	66 f7 c1 80 ff       	test   cx,0xff80
c0018448:	75 0c                	jne    c0018456 <CPU::detectFeatures()+0x814>
c001844a:	50                   	push   eax
c001844b:	50                   	push   eax
c001844c:	68 65 81 02 c0       	push   0xc0028165
c0018451:	e9 3f 01 00 00       	jmp    c0018595 <CPU::detectFeatures()+0x953>
c0018456:	66 81 fa 40 02       	cmp    dx,0x240
c001845b:	75 0c                	jne    c0018469 <CPU::detectFeatures()+0x827>
c001845d:	55                   	push   ebp
c001845e:	55                   	push   ebp
c001845f:	68 6c 81 02 c0       	push   0xc002816c
c0018464:	e9 2c 01 00 00       	jmp    c0018595 <CPU::detectFeatures()+0x953>
c0018469:	66 81 fa 80 02       	cmp    dx,0x280
c001846e:	75 0c                	jne    c001847c <CPU::detectFeatures()+0x83a>
c0018470:	57                   	push   edi
c0018471:	57                   	push   edi
c0018472:	68 75 81 02 c0       	push   0xc0028175
c0018477:	e9 19 01 00 00       	jmp    c0018595 <CPU::detectFeatures()+0x953>
c001847c:	66 81 fa 40 03       	cmp    dx,0x340
c0018481:	74 ed                	je     c0018470 <CPU::detectFeatures()+0x82e>
c0018483:	66 81 fa c0 03       	cmp    dx,0x3c0
c0018488:	75 0c                	jne    c0018496 <CPU::detectFeatures()+0x854>
c001848a:	56                   	push   esi
c001848b:	56                   	push   esi
c001848c:	68 7c 81 02 c0       	push   0xc002817c
c0018491:	e9 ff 00 00 00       	jmp    c0018595 <CPU::detectFeatures()+0x953>
c0018496:	83 f8 06             	cmp    eax,0x6
c0018499:	0f 84 45 ff ff ff    	je     c00183e4 <CPU::detectFeatures()+0x7a2>
c001849f:	83 f8 04             	cmp    eax,0x4
c00184a2:	0f 84 4d ff ff ff    	je     c00183f5 <CPU::detectFeatures()+0x7b3>
c00184a8:	83 f8 03             	cmp    eax,0x3
c00184ab:	0f 85 74 01 00 00    	jne    c0018625 <CPU::detectFeatures()+0x9e3>
c00184b1:	51                   	push   ecx
c00184b2:	51                   	push   ecx
c00184b3:	68 85 81 02 c0       	push   0xc0028185
c00184b8:	53                   	push   ebx
c00184b9:	e8 5e b3 ff ff       	call   c001381c <Device::setName(char const*)>
c00184be:	b1 c1                	mov    cl,0xc1
c00184c0:	88 c8                	mov    al,cl
c00184c2:	e6 22                	out    0x22,al
c00184c4:	e4 23                	in     al,0x23
c00184c6:	88 c2                	mov    dl,al
c00184c8:	88 c8                	mov    al,cl
c00184ca:	e6 22                	out    0x22,al
c00184cc:	88 d0                	mov    al,dl
c00184ce:	83 c8 10             	or     eax,0x10
c00184d1:	e6 23                	out    0x23,al
c00184d3:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00184da:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00184dd:	89 d0                	mov    eax,edx
c00184df:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00184e5:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c00184e9:	40                   	inc    eax
c00184ea:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00184f0:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00184f5:	e9 a1 00 00 00       	jmp    c001859b <CPU::detectFeatures()+0x959>
c00184fa:	83 f8 06             	cmp    eax,0x6
c00184fd:	0f 84 e1 fe ff ff    	je     c00183e4 <CPU::detectFeatures()+0x7a2>
c0018503:	83 f8 04             	cmp    eax,0x4
c0018506:	0f 84 e9 fe ff ff    	je     c00183f5 <CPU::detectFeatures()+0x7b3>
c001850c:	83 f8 03             	cmp    eax,0x3
c001850f:	0f 85 10 01 00 00    	jne    c0018625 <CPU::detectFeatures()+0x9e3>
c0018515:	52                   	push   edx
c0018516:	52                   	push   edx
c0018517:	68 90 81 02 c0       	push   0xc0028190
c001851c:	eb 77                	jmp    c0018595 <CPU::detectFeatures()+0x953>
c001851e:	83 f8 07             	cmp    eax,0x7
c0018521:	75 09                	jne    c001852c <CPU::detectFeatures()+0x8ea>
c0018523:	50                   	push   eax
c0018524:	50                   	push   eax
c0018525:	68 9a 81 02 c0       	push   0xc002819a
c001852a:	eb 69                	jmp    c0018595 <CPU::detectFeatures()+0x953>
c001852c:	83 f8 0a             	cmp    eax,0xa
c001852f:	75 09                	jne    c001853a <CPU::detectFeatures()+0x8f8>
c0018531:	50                   	push   eax
c0018532:	50                   	push   eax
c0018533:	68 a5 81 02 c0       	push   0xc00281a5
c0018538:	eb 5b                	jmp    c0018595 <CPU::detectFeatures()+0x953>
c001853a:	83 f8 0b             	cmp    eax,0xb
c001853d:	75 09                	jne    c0018548 <CPU::detectFeatures()+0x906>
c001853f:	50                   	push   eax
c0018540:	50                   	push   eax
c0018541:	68 ad 81 02 c0       	push   0xc00281ad
c0018546:	eb 4d                	jmp    c0018595 <CPU::detectFeatures()+0x953>
c0018548:	83 f8 08             	cmp    eax,0x8
c001854b:	75 09                	jne    c0018556 <CPU::detectFeatures()+0x914>
c001854d:	50                   	push   eax
c001854e:	50                   	push   eax
c001854f:	68 b6 81 02 c0       	push   0xc00281b6
c0018554:	eb 3f                	jmp    c0018595 <CPU::detectFeatures()+0x953>
c0018556:	83 f8 09             	cmp    eax,0x9
c0018559:	75 09                	jne    c0018564 <CPU::detectFeatures()+0x922>
c001855b:	50                   	push   eax
c001855c:	50                   	push   eax
c001855d:	68 be 81 02 c0       	push   0xc00281be
c0018562:	eb 31                	jmp    c0018595 <CPU::detectFeatures()+0x953>
c0018564:	83 f8 05             	cmp    eax,0x5
c0018567:	75 09                	jne    c0018572 <CPU::detectFeatures()+0x930>
c0018569:	50                   	push   eax
c001856a:	50                   	push   eax
c001856b:	68 c6 81 02 c0       	push   0xc00281c6
c0018570:	eb 23                	jmp    c0018595 <CPU::detectFeatures()+0x953>
c0018572:	83 f8 0c             	cmp    eax,0xc
c0018575:	75 09                	jne    c0018580 <CPU::detectFeatures()+0x93e>
c0018577:	55                   	push   ebp
c0018578:	55                   	push   ebp
c0018579:	68 d4 81 02 c0       	push   0xc00281d4
c001857e:	eb 15                	jmp    c0018595 <CPU::detectFeatures()+0x953>
c0018580:	83 f8 0d             	cmp    eax,0xd
c0018583:	75 09                	jne    c001858e <CPU::detectFeatures()+0x94c>
c0018585:	57                   	push   edi
c0018586:	57                   	push   edi
c0018587:	68 df 81 02 c0       	push   0xc00281df
c001858c:	eb 07                	jmp    c0018595 <CPU::detectFeatures()+0x953>
c001858e:	56                   	push   esi
c001858f:	56                   	push   esi
c0018590:	68 f3 81 02 c0       	push   0xc00281f3
c0018595:	53                   	push   ebx
c0018596:	e8 81 b2 ff ff       	call   c001381c <Device::setName(char const*)>
c001859b:	83 c4 10             	add    esp,0x10
c001859e:	e9 82 00 00 00       	jmp    c0018625 <CPU::detectFeatures()+0x9e3>
c00185a3:	51                   	push   ecx
c00185a4:	51                   	push   ecx
c00185a5:	68 3f 80 02 c0       	push   0xc002803f
c00185aa:	57                   	push   edi
c00185ab:	e8 6c 81 fe ff       	call   c000071c <strcpy>
c00185b0:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00185ba:	e8 a4 7c fe ff       	call   c0000263 <is486>
c00185bf:	83 c4 10             	add    esp,0x10
c00185c2:	85 c0                	test   eax,eax
c00185c4:	74 2d                	je     c00185f3 <CPU::detectFeatures()+0x9b1>
c00185c6:	52                   	push   edx
c00185c7:	52                   	push   edx
c00185c8:	68 ff 81 02 c0       	push   0xc00281ff
c00185cd:	53                   	push   ebx
c00185ce:	e8 49 b2 ff ff       	call   c001381c <Device::setName(char const*)>
c00185d3:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00185da:	e8 f5 cf 00 00       	call   c00255d4 <CPU::readCR0()>
c00185df:	83 c4 10             	add    esp,0x10
c00185e2:	83 e0 14             	and    eax,0x14
c00185e5:	83 f8 04             	cmp    eax,0x4
c00185e8:	75 1f                	jne    c0018609 <CPU::detectFeatures()+0x9c7>
c00185ea:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c00185f1:	eb 32                	jmp    c0018625 <CPU::detectFeatures()+0x9e3>
c00185f3:	50                   	push   eax
c00185f4:	50                   	push   eax
c00185f5:	68 0a 82 02 c0       	push   0xc002820a
c00185fa:	53                   	push   ebx
c00185fb:	e8 1c b2 ff ff       	call   c001381c <Device::setName(char const*)>
c0018600:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0018607:	eb d1                	jmp    c00185da <CPU::detectFeatures()+0x998>
c0018609:	e8 30 7c fe ff       	call   c000023e <hasLegacyFPU>
c001860e:	83 e0 01             	and    eax,0x1
c0018611:	8d 14 00             	lea    edx,[eax+eax*1]
c0018614:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001861a:	83 e0 fd             	and    eax,0xfffffffd
c001861d:	09 d0                	or     eax,edx
c001861f:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018625:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c001862c:	83 c4 4c             	add    esp,0x4c
c001862f:	5b                   	pop    ebx
c0018630:	5e                   	pop    esi
c0018631:	5f                   	pop    edi
c0018632:	5d                   	pop    ebp
c0018633:	c3                   	ret    

c0018634 <CPU::setupSMEP()>:
c0018634:	83 ec 0c             	sub    esp,0xc
c0018637:	e8 68 d2 00 00       	call   c00258a4 <CPU::readCR4()>
c001863c:	0d 00 00 10 00       	or     eax,0x100000
c0018641:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018645:	83 c4 0c             	add    esp,0xc
c0018648:	e9 72 d2 00 00       	jmp    c00258bf <CPU::writeCR4(unsigned long)>
c001864d:	90                   	nop

c001864e <CPU::setupUMIP()>:
c001864e:	83 ec 0c             	sub    esp,0xc
c0018651:	e8 4e d2 00 00       	call   c00258a4 <CPU::readCR4()>
c0018656:	80 cc 08             	or     ah,0x8
c0018659:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001865d:	83 c4 0c             	add    esp,0xc
c0018660:	e9 5a d2 00 00       	jmp    c00258bf <CPU::writeCR4(unsigned long)>
c0018665:	90                   	nop

c0018666 <CPU::setupTSC()>:
c0018666:	83 ec 0c             	sub    esp,0xc
c0018669:	e8 36 d2 00 00       	call   c00258a4 <CPU::readCR4()>
c001866e:	83 c8 04             	or     eax,0x4
c0018671:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018675:	83 c4 0c             	add    esp,0xc
c0018678:	e9 42 d2 00 00       	jmp    c00258bf <CPU::writeCR4(unsigned long)>
c001867d:	90                   	nop

c001867e <CPU::setupLargePages()>:
c001867e:	83 ec 0c             	sub    esp,0xc
c0018681:	e8 1e d2 00 00       	call   c00258a4 <CPU::readCR4()>
c0018686:	83 c8 10             	or     eax,0x10
c0018689:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001868d:	83 c4 0c             	add    esp,0xc
c0018690:	e9 2a d2 00 00       	jmp    c00258bf <CPU::writeCR4(unsigned long)>
c0018695:	90                   	nop

c0018696 <CPU::setupPAT()>:
c0018696:	a1 28 a6 02 c0       	mov    eax,ds:0xc002a628
c001869b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00186a2:	74 2c                	je     c00186d0 <CPU::setupPAT()+0x3a>
c00186a4:	53                   	push   ebx
c00186a5:	83 ec 10             	sub    esp,0x10
c00186a8:	68 77 02 00 00       	push   0x277
c00186ad:	50                   	push   eax
c00186ae:	e8 13 60 ff ff       	call   c000e6c6 <Computer::rdmsr(unsigned int)>
c00186b3:	83 e2 f8             	and    edx,0xfffffff8
c00186b6:	83 ca 01             	or     edx,0x1
c00186b9:	52                   	push   edx
c00186ba:	50                   	push   eax
c00186bb:	68 77 02 00 00       	push   0x277
c00186c0:	ff 35 28 a6 02 c0    	push   DWORD PTR ds:0xc002a628
c00186c6:	e8 27 60 ff ff       	call   c000e6f2 <Computer::wrmsr(unsigned int, unsigned long long)>
c00186cb:	83 c4 28             	add    esp,0x28
c00186ce:	5b                   	pop    ebx
c00186cf:	c3                   	ret    
c00186d0:	c3                   	ret    
c00186d1:	90                   	nop

c00186d2 <CPU::setupMTRR()>:
c00186d2:	c3                   	ret    
c00186d3:	90                   	nop

c00186d4 <CPU::setupGlobalPages()>:
c00186d4:	83 ec 0c             	sub    esp,0xc
c00186d7:	e8 c8 d1 00 00       	call   c00258a4 <CPU::readCR4()>
c00186dc:	0c 80                	or     al,0x80
c00186de:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00186e2:	83 c4 0c             	add    esp,0xc
c00186e5:	e9 d5 d1 00 00       	jmp    c00258bf <CPU::writeCR4(unsigned long)>

c00186ea <CPU::allowUsermodeDataAccess()>:
c00186ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00186ee:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00186f5:	74 03                	je     c00186fa <CPU::allowUsermodeDataAccess()+0x10>
c00186f7:	0f 01 cb             	stac   
c00186fa:	c3                   	ret    
c00186fb:	90                   	nop

c00186fc <CPU::prohibitUsermodeDataAccess()>:
c00186fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018700:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0018707:	74 03                	je     c001870c <CPU::prohibitUsermodeDataAccess()+0x10>
c0018709:	0f 01 ca             	clac   
c001870c:	c3                   	ret    
c001870d:	90                   	nop

c001870e <CPU::setupSMAP()>:
c001870e:	53                   	push   ebx
c001870f:	83 ec 08             	sub    esp,0x8
c0018712:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018716:	e8 89 d1 00 00       	call   c00258a4 <CPU::readCR4()>
c001871b:	83 ec 0c             	sub    esp,0xc
c001871e:	0d 00 00 20 00       	or     eax,0x200000
c0018723:	50                   	push   eax
c0018724:	e8 96 d1 00 00       	call   c00258bf <CPU::writeCR4(unsigned long)>
c0018729:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001872d:	83 c4 18             	add    esp,0x18
c0018730:	5b                   	pop    ebx
c0018731:	eb c9                	jmp    c00186fc <CPU::prohibitUsermodeDataAccess()>
c0018733:	90                   	nop

c0018734 <CPU::setupFeatures()>:
c0018734:	53                   	push   ebx
c0018735:	83 ec 08             	sub    esp,0x8
c0018738:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001873c:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0018743:	74 0c                	je     c0018751 <CPU::setupFeatures()+0x1d>
c0018745:	83 ec 0c             	sub    esp,0xc
c0018748:	53                   	push   ebx
c0018749:	e8 e6 fe ff ff       	call   c0018634 <CPU::setupSMEP()>
c001874e:	83 c4 10             	add    esp,0x10
c0018751:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0018758:	74 0c                	je     c0018766 <CPU::setupFeatures()+0x32>
c001875a:	83 ec 0c             	sub    esp,0xc
c001875d:	53                   	push   ebx
c001875e:	e8 ab ff ff ff       	call   c001870e <CPU::setupSMAP()>
c0018763:	83 c4 10             	add    esp,0x10
c0018766:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c001876d:	74 0c                	je     c001877b <CPU::setupFeatures()+0x47>
c001876f:	83 ec 0c             	sub    esp,0xc
c0018772:	53                   	push   ebx
c0018773:	e8 d6 fe ff ff       	call   c001864e <CPU::setupUMIP()>
c0018778:	83 c4 10             	add    esp,0x10
c001877b:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018782:	74 0c                	je     c0018790 <CPU::setupFeatures()+0x5c>
c0018784:	83 ec 0c             	sub    esp,0xc
c0018787:	53                   	push   ebx
c0018788:	e8 d9 fe ff ff       	call   c0018666 <CPU::setupTSC()>
c001878d:	83 c4 10             	add    esp,0x10
c0018790:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018797:	74 0c                	je     c00187a5 <CPU::setupFeatures()+0x71>
c0018799:	83 ec 0c             	sub    esp,0xc
c001879c:	53                   	push   ebx
c001879d:	e8 dc fe ff ff       	call   c001867e <CPU::setupLargePages()>
c00187a2:	83 c4 10             	add    esp,0x10
c00187a5:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c00187ac:	74 0c                	je     c00187ba <CPU::setupFeatures()+0x86>
c00187ae:	83 ec 0c             	sub    esp,0xc
c00187b1:	53                   	push   ebx
c00187b2:	e8 1d ff ff ff       	call   c00186d4 <CPU::setupGlobalPages()>
c00187b7:	83 c4 10             	add    esp,0x10
c00187ba:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c00187c1:	74 0d                	je     c00187d0 <CPU::setupFeatures()+0x9c>
c00187c3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00187c7:	83 c4 08             	add    esp,0x8
c00187ca:	5b                   	pop    ebx
c00187cb:	e9 c6 fe ff ff       	jmp    c0018696 <CPU::setupPAT()>
c00187d0:	83 c4 08             	add    esp,0x8
c00187d3:	5b                   	pop    ebx
c00187d4:	c3                   	ret    
c00187d5:	90                   	nop

c00187d6 <CPU::open(int, int, void*)>:
c00187d6:	57                   	push   edi
c00187d7:	56                   	push   esi
c00187d8:	53                   	push   ebx
c00187d9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00187dd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00187e1:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c00187e7:	83 ec 0c             	sub    esp,0xc
c00187ea:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c00187f0:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c00187f6:	50                   	push   eax
c00187f7:	e8 b6 61 ff ff       	call   c000e9b2 <GDT::setup()>
c00187fc:	83 c4 0c             	add    esp,0xc
c00187ff:	6a 00                	push   0x0
c0018801:	68 ef be ad de       	push   0xdeadbeef
c0018806:	57                   	push   edi
c0018807:	e8 0e 84 ff ff       	call   c0010c1a <TSS::setup(unsigned long, unsigned long)>
c001880c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001880f:	e8 e6 83 ff ff       	call   c0010bfa <TSS::flush()>
c0018814:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c001881a:	89 04 24             	mov    DWORD PTR [esp],eax
c001881d:	e8 ea 63 ff ff       	call   c000ec0c <IDT::setup()>
c0018822:	c7 04 24 00 04 00 00 	mov    DWORD PTR [esp],0x400
c0018829:	e8 88 d0 00 00       	call   c00258b6 <CPU::writeDR7(unsigned long)>
c001882e:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0018838:	e8 93 6e ff ff       	call   c000f6d0 <Phys::allocatePage()>
c001883d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0018843:	89 30                	mov    DWORD PTR [eax],esi
c0018845:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001884b:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001884e:	58                   	pop    eax
c001884f:	5a                   	pop    edx
c0018850:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0018856:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001885a:	e8 a1 93 ff ff       	call   c0011c00 <VAS::setCPUSpecific(unsigned long)>
c001885f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018862:	e8 db f3 ff ff       	call   c0017c42 <CPU::detectFeatures()>
c0018867:	e8 a0 c2 ff ff       	call   c0014b0c <setupInterruptController()>
c001886c:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0018872:	a1 40 a6 02 c0       	mov    eax,ds:0xc002a640
c0018877:	83 e0 10             	and    eax,0x10
c001887a:	83 f8 01             	cmp    eax,0x1
c001887d:	19 c0                	sbb    eax,eax
c001887f:	83 e0 46             	and    eax,0x46
c0018882:	83 c0 1e             	add    eax,0x1e
c0018885:	89 04 24             	mov    DWORD PTR [esp],eax
c0018888:	e8 29 d6 ff ff       	call   c0015eb6 <setupTimer(int)>
c001888d:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0018893:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018896:	e8 99 fe ff ff       	call   c0018734 <CPU::setupFeatures()>
c001889b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001889e:	e8 23 f1 ff ff       	call   c00179c6 <CPU::displayFeatures()>
c00188a3:	83 c4 10             	add    esp,0x10
c00188a6:	31 c0                	xor    eax,eax
c00188a8:	5b                   	pop    ebx
c00188a9:	5e                   	pop    esi
c00188aa:	5f                   	pop    edi
c00188ab:	c3                   	ret    

c00188ac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c00188ac:	57                   	push   edi
c00188ad:	56                   	push   esi
c00188ae:	53                   	push   ebx
c00188af:	51                   	push   ecx
c00188b0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00188b4:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c00188b7:	0f 02 c0             	lar    eax,ax
c00188ba:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c00188bd:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00188c1:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c00188c4:	88 ca                	mov    dl,cl
c00188c6:	c0 ea 06             	shr    dl,0x6
c00188c9:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c00188cd:	89 ca                	mov    edx,ecx
c00188cf:	66 c1 ea 03          	shr    dx,0x3
c00188d3:	83 e2 07             	and    edx,0x7
c00188d6:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c00188db:	88 17                	mov    BYTE PTR [edi],dl
c00188dd:	0f 84 a6 01 00 00    	je     c0018a89 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c00188e3:	83 e1 07             	and    ecx,0x7
c00188e6:	80 f9 04             	cmp    cl,0x4
c00188e9:	0f 84 98 00 00 00    	je     c0018987 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c00188ef:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00188f4:	0f 95 c0             	setne  al
c00188f7:	80 f9 05             	cmp    cl,0x5
c00188fa:	0f 95 c2             	setne  dl
c00188fd:	08 c2                	or     dl,al
c00188ff:	74 79                	je     c001897a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0018901:	84 c9                	test   cl,cl
c0018903:	75 05                	jne    c001890a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0018905:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0018908:	eb 3c                	jmp    c0018946 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001890a:	80 f9 01             	cmp    cl,0x1
c001890d:	75 05                	jne    c0018914 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c001890f:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0018912:	eb 32                	jmp    c0018946 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018914:	80 f9 02             	cmp    cl,0x2
c0018917:	75 05                	jne    c001891e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0018919:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001891c:	eb 28                	jmp    c0018946 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001891e:	31 c0                	xor    eax,eax
c0018920:	80 f9 03             	cmp    cl,0x3
c0018923:	75 05                	jne    c001892a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0018925:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0018928:	eb 1c                	jmp    c0018946 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001892a:	80 f9 05             	cmp    cl,0x5
c001892d:	75 05                	jne    c0018934 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c001892f:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0018932:	eb 12                	jmp    c0018946 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018934:	80 f9 06             	cmp    cl,0x6
c0018937:	75 05                	jne    c001893e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0018939:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001893c:	eb 08                	jmp    c0018946 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001893e:	80 f9 07             	cmp    cl,0x7
c0018941:	75 03                	jne    c0018946 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018943:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0018946:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001894b:	75 10                	jne    c001895d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c001894d:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0018951:	b9 03 00 00 00       	mov    ecx,0x3
c0018956:	01 d0                	add    eax,edx
c0018958:	e9 37 01 00 00       	jmp    c0018a94 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001895d:	b9 02 00 00 00       	mov    ecx,0x2
c0018962:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0018967:	0f 85 27 01 00 00    	jne    c0018a94 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001896d:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0018970:	b9 06 00 00 00       	mov    ecx,0x6
c0018975:	e9 1a 01 00 00       	jmp    c0018a94 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001897a:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c001897d:	b9 06 00 00 00       	mov    ecx,0x6
c0018982:	e9 0f 01 00 00       	jmp    c0018a96 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0018987:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c001898a:	88 ca                	mov    dl,cl
c001898c:	c0 ea 06             	shr    dl,0x6
c001898f:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0018993:	89 ca                	mov    edx,ecx
c0018995:	66 c1 ea 03          	shr    dx,0x3
c0018999:	83 e2 07             	and    edx,0x7
c001899c:	80 e1 07             	and    cl,0x7
c001899f:	75 05                	jne    c00189a6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c00189a1:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c00189a4:	eb 4c                	jmp    c00189f2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00189a6:	80 f9 01             	cmp    cl,0x1
c00189a9:	75 05                	jne    c00189b0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c00189ab:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c00189ae:	eb 42                	jmp    c00189f2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00189b0:	80 f9 02             	cmp    cl,0x2
c00189b3:	75 05                	jne    c00189ba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c00189b5:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00189b8:	eb 38                	jmp    c00189f2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00189ba:	80 f9 03             	cmp    cl,0x3
c00189bd:	75 05                	jne    c00189c4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c00189bf:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c00189c2:	eb 2e                	jmp    c00189f2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00189c4:	80 f9 04             	cmp    cl,0x4
c00189c7:	75 12                	jne    c00189db <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c00189c9:	f6 c4 60             	test   ah,0x60
c00189cc:	75 08                	jne    c00189d6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c00189ce:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00189d1:	8d 78 14             	lea    edi,[eax+0x14]
c00189d4:	eb 1c                	jmp    c00189f2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00189d6:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c00189d9:	eb 17                	jmp    c00189f2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00189db:	80 f9 05             	cmp    cl,0x5
c00189de:	75 05                	jne    c00189e5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c00189e0:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00189e3:	eb 0d                	jmp    c00189f2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00189e5:	80 f9 06             	cmp    cl,0x6
c00189e8:	75 05                	jne    c00189ef <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c00189ea:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00189ed:	eb 03                	jmp    c00189f2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00189ef:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c00189f2:	84 d2                	test   dl,dl
c00189f4:	75 05                	jne    c00189fb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c00189f6:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c00189f9:	eb 3c                	jmp    c0018a37 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00189fb:	80 fa 01             	cmp    dl,0x1
c00189fe:	75 05                	jne    c0018a05 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0018a00:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0018a03:	eb 32                	jmp    c0018a37 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018a05:	80 fa 02             	cmp    dl,0x2
c0018a08:	75 05                	jne    c0018a0f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0018a0a:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0018a0d:	eb 28                	jmp    c0018a37 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018a0f:	80 fa 03             	cmp    dl,0x3
c0018a12:	75 05                	jne    c0018a19 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0018a14:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0018a17:	eb 1e                	jmp    c0018a37 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018a19:	31 c0                	xor    eax,eax
c0018a1b:	80 fa 04             	cmp    dl,0x4
c0018a1e:	74 17                	je     c0018a37 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018a20:	80 fa 05             	cmp    dl,0x5
c0018a23:	75 05                	jne    c0018a2a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0018a25:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0018a28:	eb 0d                	jmp    c0018a37 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018a2a:	80 fa 06             	cmp    dl,0x6
c0018a2d:	75 05                	jne    c0018a34 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0018a2f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0018a32:	eb 03                	jmp    c0018a37 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018a34:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0018a37:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0018a3c:	0f 94 c2             	sete   dl
c0018a3f:	80 f9 05             	cmp    cl,0x5
c0018a42:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0018a46:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0018a4b:	d3 e0                	shl    eax,cl
c0018a4d:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0018a51:	74 0a                	je     c0018a5d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0018a53:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0018a56:	b9 07 00 00 00       	mov    ecx,0x7
c0018a5b:	eb 37                	jmp    c0018a94 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0018a5d:	01 f8                	add    eax,edi
c0018a5f:	b9 03 00 00 00       	mov    ecx,0x3
c0018a64:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0018a69:	74 2b                	je     c0018a96 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0018a6b:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0018a70:	75 0d                	jne    c0018a7f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0018a72:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0018a76:	01 c8                	add    eax,ecx
c0018a78:	b9 04 00 00 00       	mov    ecx,0x4
c0018a7d:	eb 17                	jmp    c0018a96 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0018a7f:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0018a82:	b9 07 00 00 00       	mov    ecx,0x7
c0018a87:	eb 0d                	jmp    c0018a96 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0018a89:	b9 02 00 00 00       	mov    ecx,0x2
c0018a8e:	b2 01                	mov    dl,0x1
c0018a90:	31 c0                	xor    eax,eax
c0018a92:	eb 02                	jmp    c0018a96 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0018a94:	31 d2                	xor    edx,edx
c0018a96:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018a9a:	89 0b                	mov    DWORD PTR [ebx],ecx
c0018a9c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018aa0:	88 11                	mov    BYTE PTR [ecx],dl
c0018aa2:	5a                   	pop    edx
c0018aa3:	5b                   	pop    ebx
c0018aa4:	5e                   	pop    esi
c0018aa5:	5f                   	pop    edi
c0018aa6:	c3                   	ret    

c0018aa7 <Krnl::panic(char const*)>:
c0018aa7:	55                   	push   ebp
c0018aa8:	89 e5                	mov    ebp,esp
c0018aaa:	53                   	push   ebx
c0018aab:	50                   	push   eax
c0018aac:	a1 30 b1 02 c0       	mov    eax,ds:0xc002b130
c0018ab1:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0018ab4:	85 c0                	test   eax,eax
c0018ab6:	74 02                	je     c0018aba <Krnl::panic(char const*)+0x13>
c0018ab8:	ff d0                	call   eax
c0018aba:	fa                   	cli    
c0018abb:	c6 05 34 b1 02 c0 01 	mov    BYTE PTR ds:0xc002b134,0x1
c0018ac2:	83 ec 08             	sub    esp,0x8
c0018ac5:	c6 05 e0 95 02 c0 00 	mov    BYTE PTR ds:0xc00295e0,0x0
c0018acc:	53                   	push   ebx
c0018acd:	68 44 82 02 c0       	push   0xc0028244
c0018ad2:	e8 58 97 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c0018ad7:	58                   	pop    eax
c0018ad8:	a1 34 bb 02 c0       	mov    eax,ds:0xc002bb34
c0018add:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018ae3:	e8 73 79 ff ff       	call   c001045b <setActiveTerminal(VgaText*)>
c0018ae8:	83 c4 0c             	add    esp,0xc
c0018aeb:	a1 34 bb 02 c0       	mov    eax,ds:0xc002bb34
c0018af0:	6a 01                	push   0x1
c0018af2:	6a 0f                	push   0xf
c0018af4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018afa:	e8 9b 73 ff ff       	call   c000fe9a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018aff:	5a                   	pop    edx
c0018b00:	a1 34 bb 02 c0       	mov    eax,ds:0xc002bb34
c0018b05:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018b0b:	e8 ec 7b ff ff       	call   c00106fc <VgaText::clearScreen()>
c0018b10:	59                   	pop    ecx
c0018b11:	58                   	pop    eax
c0018b12:	a1 34 bb 02 c0       	mov    eax,ds:0xc002bb34
c0018b17:	68 5d 82 02 c0       	push   0xc002825d
c0018b1c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018b22:	e8 53 7d ff ff       	call   c001087a <VgaText::puts(char const*)>
c0018b27:	58                   	pop    eax
c0018b28:	a1 34 bb 02 c0       	mov    eax,ds:0xc002bb34
c0018b2d:	5a                   	pop    edx
c0018b2e:	68 04 83 02 c0       	push   0xc0028304
c0018b33:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018b39:	e8 3c 7d ff ff       	call   c001087a <VgaText::puts(char const*)>
c0018b3e:	59                   	pop    ecx
c0018b3f:	58                   	pop    eax
c0018b40:	a1 34 bb 02 c0       	mov    eax,ds:0xc002bb34
c0018b45:	68 79 82 02 c0       	push   0xc0028279
c0018b4a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018b50:	e8 25 7d ff ff       	call   c001087a <VgaText::puts(char const*)>
c0018b55:	58                   	pop    eax
c0018b56:	a1 34 bb 02 c0       	mov    eax,ds:0xc002bb34
c0018b5b:	5a                   	pop    edx
c0018b5c:	53                   	push   ebx
c0018b5d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018b63:	e8 12 7d ff ff       	call   c001087a <VgaText::puts(char const*)>
c0018b68:	59                   	pop    ecx
c0018b69:	a1 34 bb 02 c0       	mov    eax,ds:0xc002bb34
c0018b6e:	5b                   	pop    ebx
c0018b6f:	68 99 82 02 c0       	push   0xc0028299
c0018b74:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018b7a:	e8 fb 7c ff ff       	call   c001087a <VgaText::puts(char const*)>
c0018b7f:	58                   	pop    eax
c0018b80:	a1 34 bb 02 c0       	mov    eax,ds:0xc002bb34
c0018b85:	5a                   	pop    edx
c0018b86:	68 40 83 02 c0       	push   0xc0028340
c0018b8b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018b91:	e8 e4 7c ff ff       	call   c001087a <VgaText::puts(char const*)>
c0018b96:	59                   	pop    ecx
c0018b97:	a1 34 bb 02 c0       	mov    eax,ds:0xc002bb34
c0018b9c:	5b                   	pop    ebx
c0018b9d:	68 79 82 02 c0       	push   0xc0028279
c0018ba2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018ba8:	e8 cd 7c ff ff       	call   c001087a <VgaText::puts(char const*)>
c0018bad:	58                   	pop    eax
c0018bae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018bb3:	5a                   	pop    edx
c0018bb4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018bb7:	83 c0 0c             	add    eax,0xc
c0018bba:	50                   	push   eax
c0018bbb:	a1 34 bb 02 c0       	mov    eax,ds:0xc002bb34
c0018bc0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018bc6:	e8 af 7c ff ff       	call   c001087a <VgaText::puts(char const*)>
c0018bcb:	59                   	pop    ecx
c0018bcc:	a1 34 bb 02 c0       	mov    eax,ds:0xc002bb34
c0018bd1:	5b                   	pop    ebx
c0018bd2:	68 98 82 02 c0       	push   0xc0028298
c0018bd7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018bdd:	e8 98 7c ff ff       	call   c001087a <VgaText::puts(char const*)>
c0018be2:	58                   	pop    eax
c0018be3:	a1 34 bb 02 c0       	mov    eax,ds:0xc002bb34
c0018be8:	5a                   	pop    edx
c0018be9:	68 6c 83 02 c0       	push   0xc002836c
c0018bee:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018bf4:	e8 81 7c ff ff       	call   c001087a <VgaText::puts(char const*)>
c0018bf9:	59                   	pop    ecx
c0018bfa:	a1 34 bb 02 c0       	mov    eax,ds:0xc002bb34
c0018bff:	5b                   	pop    ebx
c0018c00:	68 ac 83 02 c0       	push   0xc00283ac
c0018c05:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018c0b:	e8 6a 7c ff ff       	call   c001087a <VgaText::puts(char const*)>
c0018c10:	58                   	pop    eax
c0018c11:	a1 34 bb 02 c0       	mov    eax,ds:0xc002bb34
c0018c16:	5a                   	pop    edx
c0018c17:	68 84 82 02 c0       	push   0xc0028284
c0018c1c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018c22:	e8 53 7c ff ff       	call   c001087a <VgaText::puts(char const*)>
c0018c27:	59                   	pop    ecx
c0018c28:	5b                   	pop    ebx
c0018c29:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0018c2c:	68 9c 82 02 c0       	push   0xc002829c
c0018c31:	e8 f9 95 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c0018c36:	58                   	pop    eax
c0018c37:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018c3a:	5a                   	pop    edx
c0018c3b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0018c3e:	68 a5 82 02 c0       	push   0xc00282a5
c0018c43:	e8 e7 95 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c0018c48:	59                   	pop    ecx
c0018c49:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018c4c:	5b                   	pop    ebx
c0018c4d:	8b 00                	mov    eax,DWORD PTR [eax]
c0018c4f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0018c52:	68 ae 82 02 c0       	push   0xc00282ae
c0018c57:	e8 d3 95 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c0018c5c:	58                   	pop    eax
c0018c5d:	a1 34 bb 02 c0       	mov    eax,ds:0xc002bb34
c0018c62:	5a                   	pop    edx
c0018c63:	68 f0 83 02 c0       	push   0xc00283f0
c0018c68:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018c6e:	e8 07 7c ff ff       	call   c001087a <VgaText::puts(char const*)>
c0018c73:	59                   	pop    ecx
c0018c74:	a1 34 bb 02 c0       	mov    eax,ds:0xc002bb34
c0018c79:	5b                   	pop    ebx
c0018c7a:	68 b7 82 02 c0       	push   0xc00282b7
c0018c7f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018c85:	e8 f0 7b ff ff       	call   c001087a <VgaText::puts(char const*)>
c0018c8a:	a1 34 bb 02 c0       	mov    eax,ds:0xc002bb34
c0018c8f:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0018c95:	e8 3a c9 00 00       	call   c00255d4 <CPU::readCR0()>
c0018c9a:	5a                   	pop    edx
c0018c9b:	59                   	pop    ecx
c0018c9c:	50                   	push   eax
c0018c9d:	53                   	push   ebx
c0018c9e:	e8 fd 7b ff ff       	call   c00108a0 <VgaText::putx(unsigned int)>
c0018ca3:	5b                   	pop    ebx
c0018ca4:	58                   	pop    eax
c0018ca5:	a1 34 bb 02 c0       	mov    eax,ds:0xc002bb34
c0018caa:	68 c1 82 02 c0       	push   0xc00282c1
c0018caf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018cb5:	e8 c0 7b ff ff       	call   c001087a <VgaText::puts(char const*)>
c0018cba:	a1 34 bb 02 c0       	mov    eax,ds:0xc002bb34
c0018cbf:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0018cc5:	e8 fe cb 00 00       	call   c00258c8 <CPU::readCR2()>
c0018cca:	5a                   	pop    edx
c0018ccb:	59                   	pop    ecx
c0018ccc:	50                   	push   eax
c0018ccd:	53                   	push   ebx
c0018cce:	e8 cd 7b ff ff       	call   c00108a0 <VgaText::putx(unsigned int)>
c0018cd3:	5b                   	pop    ebx
c0018cd4:	58                   	pop    eax
c0018cd5:	a1 34 bb 02 c0       	mov    eax,ds:0xc002bb34
c0018cda:	68 cb 82 02 c0       	push   0xc00282cb
c0018cdf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018ce5:	e8 90 7b ff ff       	call   c001087a <VgaText::puts(char const*)>
c0018cea:	a1 34 bb 02 c0       	mov    eax,ds:0xc002bb34
c0018cef:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0018cf5:	e8 67 c5 00 00       	call   c0025261 <CPU::readCR3()>
c0018cfa:	5a                   	pop    edx
c0018cfb:	59                   	pop    ecx
c0018cfc:	50                   	push   eax
c0018cfd:	53                   	push   ebx
c0018cfe:	e8 9d 7b ff ff       	call   c00108a0 <VgaText::putx(unsigned int)>
c0018d03:	5b                   	pop    ebx
c0018d04:	58                   	pop    eax
c0018d05:	a1 34 bb 02 c0       	mov    eax,ds:0xc002bb34
c0018d0a:	68 de 82 02 c0       	push   0xc00282de
c0018d0f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018d15:	e8 60 7b ff ff       	call   c001087a <VgaText::puts(char const*)>
c0018d1a:	a1 34 bb 02 c0       	mov    eax,ds:0xc002bb34
c0018d1f:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0018d25:	e8 7a cb 00 00       	call   c00258a4 <CPU::readCR4()>
c0018d2a:	5a                   	pop    edx
c0018d2b:	59                   	pop    ecx
c0018d2c:	50                   	push   eax
c0018d2d:	53                   	push   ebx
c0018d2e:	e8 6d 7b ff ff       	call   c00108a0 <VgaText::putx(unsigned int)>
c0018d33:	5b                   	pop    ebx
c0018d34:	58                   	pop    eax
c0018d35:	a1 34 bb 02 c0       	mov    eax,ds:0xc002bb34
c0018d3a:	68 e8 82 02 c0       	push   0xc00282e8
c0018d3f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018d45:	e8 30 7b ff ff       	call   c001087a <VgaText::puts(char const*)>
c0018d4a:	5a                   	pop    edx
c0018d4b:	a1 34 bb 02 c0       	mov    eax,ds:0xc002bb34
c0018d50:	59                   	pop    ecx
c0018d51:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0018d57:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0018d5a:	50                   	push   eax
c0018d5b:	e8 40 7b ff ff       	call   c00108a0 <VgaText::putx(unsigned int)>
c0018d60:	5b                   	pop    ebx
c0018d61:	58                   	pop    eax
c0018d62:	a1 34 bb 02 c0       	mov    eax,ds:0xc002bb34
c0018d67:	68 ff 82 02 c0       	push   0xc00282ff
c0018d6c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018d72:	e8 03 7b ff ff       	call   c001087a <VgaText::puts(char const*)>
c0018d77:	5a                   	pop    edx
c0018d78:	a1 34 bb 02 c0       	mov    eax,ds:0xc002bb34
c0018d7d:	59                   	pop    ecx
c0018d7e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0018d84:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0018d87:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0018d8a:	50                   	push   eax
c0018d8b:	e8 10 7b ff ff       	call   c00108a0 <VgaText::putx(unsigned int)>
c0018d90:	5b                   	pop    ebx
c0018d91:	58                   	pop    eax
c0018d92:	a1 34 bb 02 c0       	mov    eax,ds:0xc002bb34
c0018d97:	68 ff 82 02 c0       	push   0xc00282ff
c0018d9c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018da2:	e8 d3 7a ff ff       	call   c001087a <VgaText::puts(char const*)>
c0018da7:	59                   	pop    ecx
c0018da8:	a1 34 bb 02 c0       	mov    eax,ds:0xc002bb34
c0018dad:	5b                   	pop    ebx
c0018dae:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0018db4:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0018db7:	8b 12                	mov    edx,DWORD PTR [edx]
c0018db9:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0018dbc:	50                   	push   eax
c0018dbd:	e8 de 7a ff ff       	call   c00108a0 <VgaText::putx(unsigned int)>
c0018dc2:	83 c4 10             	add    esp,0x10
c0018dc5:	b2 fe                	mov    dl,0xfe
c0018dc7:	e4 60                	in     al,0x60
c0018dc9:	3c 1c                	cmp    al,0x1c
c0018dcb:	74 04                	je     c0018dd1 <Krnl::panic(char const*)+0x32a>
c0018dcd:	3c 5a                	cmp    al,0x5a
c0018dcf:	75 f6                	jne    c0018dc7 <Krnl::panic(char const*)+0x320>
c0018dd1:	e4 64                	in     al,0x64
c0018dd3:	a8 02                	test   al,0x2
c0018dd5:	75 fa                	jne    c0018dd1 <Krnl::panic(char const*)+0x32a>
c0018dd7:	88 d0                	mov    al,dl
c0018dd9:	e6 64                	out    0x64,al
c0018ddb:	fa                   	cli    
c0018ddc:	f4                   	hlt    
c0018ddd:	eb e8                	jmp    c0018dc7 <Krnl::panic(char const*)+0x320>

c0018ddf <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0018ddf:	55                   	push   ebp
c0018de0:	57                   	push   edi
c0018de1:	56                   	push   esi
c0018de2:	53                   	push   ebx
c0018de3:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018de9:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0018df0:	8a 1e                	mov    bl,BYTE PTR [esi]
c0018df2:	8d 6e 01             	lea    ebp,[esi+0x1]
c0018df5:	80 fb 40             	cmp    bl,0x40
c0018df8:	75 1b                	jne    c0018e15 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0018dfa:	8a 16                	mov    dl,BYTE PTR [esi]
c0018dfc:	84 d2                	test   dl,dl
c0018dfe:	0f 84 f1 00 00 00    	je     c0018ef5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0018e04:	8d 46 01             	lea    eax,[esi+0x1]
c0018e07:	80 fa 3a             	cmp    dl,0x3a
c0018e0a:	74 04                	je     c0018e10 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0018e0c:	89 c6                	mov    esi,eax
c0018e0e:	eb ea                	jmp    c0018dfa <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0018e10:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0018e13:	89 c6                	mov    esi,eax
c0018e15:	50                   	push   eax
c0018e16:	6a 40                	push   0x40
c0018e18:	6a 00                	push   0x0
c0018e1a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018e1e:	50                   	push   eax
c0018e1f:	e8 59 78 fe ff       	call   c000067d <memset>
c0018e24:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0018e2b:	31 c0                	xor    eax,eax
c0018e2d:	83 c4 10             	add    esp,0x10
c0018e30:	8a 0f                	mov    cl,BYTE PTR [edi]
c0018e32:	84 c9                	test   cl,cl
c0018e34:	0f 84 bb 00 00 00    	je     c0018ef5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0018e3a:	3d c7 00 00 00       	cmp    eax,0xc7
c0018e3f:	0f 8f b0 00 00 00    	jg     c0018ef5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0018e45:	80 f9 0a             	cmp    cl,0xa
c0018e48:	0f 85 98 00 00 00    	jne    c0018ee6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0018e4e:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0018e53:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0018e57:	a8 df                	test   al,0xdf
c0018e59:	0f 94 c1             	sete   cl
c0018e5c:	3c 23                	cmp    al,0x23
c0018e5e:	0f 94 c2             	sete   dl
c0018e61:	08 d1                	or     cl,dl
c0018e63:	75 4a                	jne    c0018eaf <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0018e65:	8d 50 f7             	lea    edx,[eax-0x9]
c0018e68:	80 fa 01             	cmp    dl,0x1
c0018e6b:	76 42                	jbe    c0018eaf <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0018e6d:	3c 5b                	cmp    al,0x5b
c0018e6f:	75 42                	jne    c0018eb3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0018e71:	80 fb 40             	cmp    bl,0x40
c0018e74:	75 39                	jne    c0018eaf <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0018e76:	83 ec 0c             	sub    esp,0xc
c0018e79:	8d 54 24 65          	lea    edx,[esp+0x65]
c0018e7d:	52                   	push   edx
c0018e7e:	e8 17 78 fe ff       	call   c000069a <strlen>
c0018e83:	83 c4 10             	add    esp,0x10
c0018e86:	83 f8 3f             	cmp    eax,0x3f
c0018e89:	77 6a                	ja     c0018ef5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0018e8b:	50                   	push   eax
c0018e8c:	50                   	push   eax
c0018e8d:	8d 54 24 61          	lea    edx,[esp+0x61]
c0018e91:	52                   	push   edx
c0018e92:	8d 54 24 24          	lea    edx,[esp+0x24]
c0018e96:	52                   	push   edx
c0018e97:	e8 80 78 fe ff       	call   c000071c <strcpy>
c0018e9c:	58                   	pop    eax
c0018e9d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0018ea1:	52                   	push   edx
c0018ea2:	e8 f3 77 fe ff       	call   c000069a <strlen>
c0018ea7:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0018eac:	83 c4 10             	add    esp,0x10
c0018eaf:	31 d2                	xor    edx,edx
c0018eb1:	eb 3a                	jmp    c0018eed <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0018eb3:	80 fb 40             	cmp    bl,0x40
c0018eb6:	74 06                	je     c0018ebe <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0018eb8:	8d 44 24 58          	lea    eax,[esp+0x58]
c0018ebc:	eb 20                	jmp    c0018ede <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0018ebe:	50                   	push   eax
c0018ebf:	50                   	push   eax
c0018ec0:	55                   	push   ebp
c0018ec1:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018ec5:	50                   	push   eax
c0018ec6:	e8 a2 78 fe ff       	call   c000076d <strcmp>
c0018ecb:	83 c4 10             	add    esp,0x10
c0018ece:	85 c0                	test   eax,eax
c0018ed0:	75 dd                	jne    c0018eaf <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0018ed2:	eb e4                	jmp    c0018eb8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0018ed4:	8d 50 01             	lea    edx,[eax+0x1]
c0018ed7:	80 f9 3d             	cmp    cl,0x3d
c0018eda:	74 1d                	je     c0018ef9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0018edc:	89 d0                	mov    eax,edx
c0018ede:	8a 08                	mov    cl,BYTE PTR [eax]
c0018ee0:	84 c9                	test   cl,cl
c0018ee2:	75 f0                	jne    c0018ed4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0018ee4:	eb 0f                	jmp    c0018ef5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0018ee6:	8d 50 01             	lea    edx,[eax+0x1]
c0018ee9:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0018eed:	47                   	inc    edi
c0018eee:	89 d0                	mov    eax,edx
c0018ef0:	e9 3b ff ff ff       	jmp    c0018e30 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0018ef5:	31 c0                	xor    eax,eax
c0018ef7:	eb 33                	jmp    c0018f2c <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0018ef9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018efd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0018f00:	50                   	push   eax
c0018f01:	50                   	push   eax
c0018f02:	8d 44 24 60          	lea    eax,[esp+0x60]
c0018f06:	50                   	push   eax
c0018f07:	56                   	push   esi
c0018f08:	e8 60 78 fe ff       	call   c000076d <strcmp>
c0018f0d:	83 c4 10             	add    esp,0x10
c0018f10:	85 c0                	test   eax,eax
c0018f12:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018f16:	75 97                	jne    c0018eaf <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0018f18:	51                   	push   ecx
c0018f19:	51                   	push   ecx
c0018f1a:	52                   	push   edx
c0018f1b:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0018f22:	e8 f5 77 fe ff       	call   c000071c <strcpy>
c0018f27:	83 c4 10             	add    esp,0x10
c0018f2a:	b0 01                	mov    al,0x1
c0018f2c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018f32:	5b                   	pop    ebx
c0018f33:	5e                   	pop    esi
c0018f34:	5f                   	pop    edi
c0018f35:	5d                   	pop    ebp
c0018f36:	c3                   	ret    

c0018f37 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0018f37:	57                   	push   edi
c0018f38:	56                   	push   esi
c0018f39:	53                   	push   ebx
c0018f3a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018f40:	8b b4 24 2c 01 00 00 	mov    esi,DWORD PTR [esp+0x12c]
c0018f47:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0018f4e:	53                   	push   ebx
c0018f4f:	e8 46 77 fe ff       	call   c000069a <strlen>
c0018f54:	89 34 24             	mov    DWORD PTR [esp],esi
c0018f57:	89 c7                	mov    edi,eax
c0018f59:	e8 3c 77 fe ff       	call   c000069a <strlen>
c0018f5e:	83 c4 10             	add    esp,0x10
c0018f61:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0018f65:	31 ff                	xor    edi,edi
c0018f67:	3d ff 00 00 00       	cmp    eax,0xff
c0018f6c:	0f 87 18 01 00 00    	ja     c001908a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0018f72:	51                   	push   ecx
c0018f73:	51                   	push   ecx
c0018f74:	56                   	push   esi
c0018f75:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0018f79:	56                   	push   esi
c0018f7a:	e8 9d 77 fe ff       	call   c000071c <strcpy>
c0018f7f:	58                   	pop    eax
c0018f80:	5a                   	pop    edx
c0018f81:	68 e8 87 02 c0       	push   0xc00287e8
c0018f86:	56                   	push   esi
c0018f87:	e8 47 78 fe ff       	call   c00007d3 <strcat>
c0018f8c:	59                   	pop    ecx
c0018f8d:	58                   	pop    eax
c0018f8e:	53                   	push   ebx
c0018f8f:	56                   	push   esi
c0018f90:	e8 3e 78 fe ff       	call   c00007d3 <strcat>
c0018f95:	58                   	pop    eax
c0018f96:	5a                   	pop    edx
c0018f97:	68 16 84 02 c0       	push   0xc0028416
c0018f9c:	56                   	push   esi
c0018f9d:	e8 31 78 fe ff       	call   c00007d3 <strcat>
c0018fa2:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018fa9:	e8 92 91 ff ff       	call   c0012140 <operator new(unsigned long)>
c0018fae:	83 c4 0c             	add    esp,0xc
c0018fb1:	89 c3                	mov    ebx,eax
c0018fb3:	ff 35 34 bb 02 c0    	push   DWORD PTR ds:0xc002bb34
c0018fb9:	56                   	push   esi
c0018fba:	50                   	push   eax
c0018fbb:	e8 9e 97 ff ff       	call   c001275e <File::File(char const*, Process*)>
c0018fc0:	59                   	pop    ecx
c0018fc1:	5e                   	pop    esi
c0018fc2:	6a 01                	push   0x1
c0018fc4:	53                   	push   ebx
c0018fc5:	e8 f8 97 ff ff       	call   c00127c2 <File::open(FileOpenMode)>
c0018fca:	83 c4 10             	add    esp,0x10
c0018fcd:	85 c0                	test   eax,eax
c0018fcf:	74 08                	je     c0018fd9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa2>
c0018fd1:	83 ec 0c             	sub    esp,0xc
c0018fd4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018fd6:	53                   	push   ebx
c0018fd7:	eb 2e                	jmp    c0019007 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd0>
c0018fd9:	52                   	push   edx
c0018fda:	8d 44 24 07          	lea    eax,[esp+0x7]
c0018fde:	50                   	push   eax
c0018fdf:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018fe3:	50                   	push   eax
c0018fe4:	53                   	push   ebx
c0018fe5:	e8 84 9a ff ff       	call   c0012a6e <File::stat(unsigned long long*, bool*)>
c0018fea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018fee:	83 c4 10             	add    esp,0x10
c0018ff1:	89 c1                	mov    ecx,eax
c0018ff3:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0018ff7:	75 13                	jne    c001900c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd5>
c0018ff9:	83 ec 0c             	sub    esp,0xc
c0018ffc:	53                   	push   ebx
c0018ffd:	e8 1e 98 ff ff       	call   c0012820 <File::close()>
c0019002:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019004:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019007:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001900a:	eb 7b                	jmp    c0019087 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x150>
c001900c:	83 ec 0c             	sub    esp,0xc
c001900f:	50                   	push   eax
c0019010:	e8 11 61 ff ff       	call   c000f126 <malloc>
c0019015:	89 c6                	mov    esi,eax
c0019017:	58                   	pop    eax
c0019018:	8b 03                	mov    eax,DWORD PTR [ebx]
c001901a:	8d 54 24 10          	lea    edx,[esp+0x10]
c001901e:	52                   	push   edx
c001901f:	56                   	push   esi
c0019020:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019024:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019028:	53                   	push   ebx
c0019029:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001902c:	83 c4 20             	add    esp,0x20
c001902f:	85 c0                	test   eax,eax
c0019031:	75 0a                	jne    c001903d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0019033:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019037:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001903b:	74 18                	je     c0019055 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x11e>
c001903d:	83 ec 0c             	sub    esp,0xc
c0019040:	31 ff                	xor    edi,edi
c0019042:	53                   	push   ebx
c0019043:	e8 d8 97 ff ff       	call   c0012820 <File::close()>
c0019048:	8b 03                	mov    eax,DWORD PTR [ebx]
c001904a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001904d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019050:	83 c4 10             	add    esp,0x10
c0019053:	eb 35                	jmp    c001908a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0019055:	83 ec 0c             	sub    esp,0xc
c0019058:	53                   	push   ebx
c0019059:	e8 c2 97 ff ff       	call   c0012820 <File::close()>
c001905e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019060:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019063:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019066:	83 c4 0c             	add    esp,0xc
c0019069:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0019070:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0019077:	56                   	push   esi
c0019078:	e8 62 fd ff ff       	call   c0018ddf <Reg::findLineFromLoadedData(char*, char*, char*)>
c001907d:	89 34 24             	mov    DWORD PTR [esp],esi
c0019080:	89 c7                	mov    edi,eax
c0019082:	e8 af 60 ff ff       	call   c000f136 <free>
c0019087:	83 c4 10             	add    esp,0x10
c001908a:	81 c4 10 01 00 00    	add    esp,0x110
c0019090:	89 f8                	mov    eax,edi
c0019092:	5b                   	pop    ebx
c0019093:	5e                   	pop    esi
c0019094:	5f                   	pop    edi
c0019095:	c3                   	ret    

c0019096 <Reg::getLine(char*, char*, char*)>:
c0019096:	57                   	push   edi
c0019097:	56                   	push   esi
c0019098:	53                   	push   ebx
c0019099:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001909d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00190a1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00190a5:	57                   	push   edi
c00190a6:	56                   	push   esi
c00190a7:	53                   	push   ebx
c00190a8:	68 1b 84 02 c0       	push   0xc002841b
c00190ad:	e8 85 fe ff ff       	call   c0018f37 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00190b2:	83 c4 10             	add    esp,0x10
c00190b5:	84 c0                	test   al,al
c00190b7:	75 10                	jne    c00190c9 <Reg::getLine(char*, char*, char*)+0x33>
c00190b9:	57                   	push   edi
c00190ba:	56                   	push   esi
c00190bb:	53                   	push   ebx
c00190bc:	68 40 84 02 c0       	push   0xc0028440
c00190c1:	e8 71 fe ff ff       	call   c0018f37 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00190c6:	83 c4 10             	add    esp,0x10
c00190c9:	5b                   	pop    ebx
c00190ca:	5e                   	pop    esi
c00190cb:	5f                   	pop    edi
c00190cc:	c3                   	ret    

c00190cd <Reg::readInt(char*, char*, int*)>:
c00190cd:	55                   	push   ebp
c00190ce:	57                   	push   edi
c00190cf:	56                   	push   esi
c00190d0:	53                   	push   ebx
c00190d1:	81 ec f0 00 00 00    	sub    esp,0xf0
c00190d7:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00190db:	57                   	push   edi
c00190dc:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00190e3:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00190ea:	e8 a7 ff ff ff       	call   c0019096 <Reg::getLine(char*, char*, char*)>
c00190ef:	83 c4 10             	add    esp,0x10
c00190f2:	84 c0                	test   al,al
c00190f4:	0f 84 b3 00 00 00    	je     c00191ad <Reg::readInt(char*, char*, int*)+0xe0>
c00190fa:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c00190fe:	80 fa 2b             	cmp    dl,0x2b
c0019101:	74 0c                	je     c001910f <Reg::readInt(char*, char*, int*)+0x42>
c0019103:	80 fa 2d             	cmp    dl,0x2d
c0019106:	75 0e                	jne    c0019116 <Reg::readInt(char*, char*, int*)+0x49>
c0019108:	ba 01 00 00 00       	mov    edx,0x1
c001910d:	eb 0b                	jmp    c001911a <Reg::readInt(char*, char*, int*)+0x4d>
c001910f:	ba 01 00 00 00       	mov    edx,0x1
c0019114:	eb 02                	jmp    c0019118 <Reg::readInt(char*, char*, int*)+0x4b>
c0019116:	31 d2                	xor    edx,edx
c0019118:	31 c0                	xor    eax,eax
c001911a:	be 0a 00 00 00       	mov    esi,0xa
c001911f:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0019124:	75 20                	jne    c0019146 <Reg::readInt(char*, char*, int*)+0x79>
c0019126:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001912a:	80 f9 78             	cmp    cl,0x78
c001912d:	75 0a                	jne    c0019139 <Reg::readInt(char*, char*, int*)+0x6c>
c001912f:	83 c2 02             	add    edx,0x2
c0019132:	be 10 00 00 00       	mov    esi,0x10
c0019137:	eb 0d                	jmp    c0019146 <Reg::readInt(char*, char*, int*)+0x79>
c0019139:	80 f9 62             	cmp    cl,0x62
c001913c:	75 08                	jne    c0019146 <Reg::readInt(char*, char*, int*)+0x79>
c001913e:	83 c2 02             	add    edx,0x2
c0019141:	be 02 00 00 00       	mov    esi,0x2
c0019146:	01 d7                	add    edi,edx
c0019148:	31 d2                	xor    edx,edx
c001914a:	8a 1f                	mov    bl,BYTE PTR [edi]
c001914c:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0019150:	80 fb 0d             	cmp    bl,0xd
c0019153:	0f 94 c3             	sete   bl
c0019156:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001915b:	0f 94 c1             	sete   cl
c001915e:	08 cb                	or     bl,cl
c0019160:	75 3a                	jne    c001919c <Reg::readInt(char*, char*, int*)+0xcf>
c0019162:	0f af d6             	imul   edx,esi
c0019165:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001916a:	83 fe 10             	cmp    esi,0x10
c001916d:	75 26                	jne    c0019195 <Reg::readInt(char*, char*, int*)+0xc8>
c001916f:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0019173:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0019176:	89 e9                	mov    ecx,ebp
c0019178:	80 f9 05             	cmp    cl,0x5
c001917b:	77 06                	ja     c0019183 <Reg::readInt(char*, char*, int*)+0xb6>
c001917d:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0019181:	eb 16                	jmp    c0019199 <Reg::readInt(char*, char*, int*)+0xcc>
c0019183:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0019187:	83 e9 61             	sub    ecx,0x61
c001918a:	80 f9 05             	cmp    cl,0x5
c001918d:	77 06                	ja     c0019195 <Reg::readInt(char*, char*, int*)+0xc8>
c001918f:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0019193:	eb 04                	jmp    c0019199 <Reg::readInt(char*, char*, int*)+0xcc>
c0019195:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0019199:	47                   	inc    edi
c001919a:	eb ae                	jmp    c001914a <Reg::readInt(char*, char*, int*)+0x7d>
c001919c:	84 c0                	test   al,al
c001919e:	74 02                	je     c00191a2 <Reg::readInt(char*, char*, int*)+0xd5>
c00191a0:	f7 da                	neg    edx
c00191a2:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c00191a9:	89 10                	mov    DWORD PTR [eax],edx
c00191ab:	88 d8                	mov    al,bl
c00191ad:	81 c4 ec 00 00 00    	add    esp,0xec
c00191b3:	5b                   	pop    ebx
c00191b4:	5e                   	pop    esi
c00191b5:	5f                   	pop    edi
c00191b6:	5d                   	pop    ebp
c00191b7:	c3                   	ret    

c00191b8 <Reg::readString(char*, char*, char*, int)>:
c00191b8:	57                   	push   edi
c00191b9:	56                   	push   esi
c00191ba:	53                   	push   ebx
c00191bb:	81 ec d4 00 00 00    	sub    esp,0xd4
c00191c1:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c00191c8:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c00191cc:	57                   	push   edi
c00191cd:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00191d4:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00191db:	e8 b6 fe ff ff       	call   c0019096 <Reg::getLine(char*, char*, char*)>
c00191e0:	83 c4 10             	add    esp,0x10
c00191e3:	89 c6                	mov    esi,eax
c00191e5:	84 c0                	test   al,al
c00191e7:	74 44                	je     c001922d <Reg::readString(char*, char*, char*, int)+0x75>
c00191e9:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c00191f0:	31 c0                	xor    eax,eax
c00191f2:	4a                   	dec    edx
c00191f3:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c00191f6:	84 c9                	test   cl,cl
c00191f8:	74 0f                	je     c0019209 <Reg::readString(char*, char*, char*, int)+0x51>
c00191fa:	39 c2                	cmp    edx,eax
c00191fc:	7e 0b                	jle    c0019209 <Reg::readString(char*, char*, char*, int)+0x51>
c00191fe:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0019201:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0019206:	40                   	inc    eax
c0019207:	eb ea                	jmp    c00191f3 <Reg::readString(char*, char*, char*, int)+0x3b>
c0019209:	83 ec 0c             	sub    esp,0xc
c001920c:	53                   	push   ebx
c001920d:	e8 88 74 fe ff       	call   c000069a <strlen>
c0019212:	83 c4 10             	add    esp,0x10
c0019215:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001921a:	75 11                	jne    c001922d <Reg::readString(char*, char*, char*, int)+0x75>
c001921c:	83 ec 0c             	sub    esp,0xc
c001921f:	53                   	push   ebx
c0019220:	e8 75 74 fe ff       	call   c000069a <strlen>
c0019225:	83 c4 10             	add    esp,0x10
c0019228:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001922d:	81 c4 d0 00 00 00    	add    esp,0xd0
c0019233:	89 f0                	mov    eax,esi
c0019235:	5b                   	pop    ebx
c0019236:	5e                   	pop    esi
c0019237:	5f                   	pop    edi
c0019238:	c3                   	ret    

c0019239 <Reg::readBool(char*, char*, bool*)>:
c0019239:	83 ec 20             	sub    esp,0x20
c001923c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019240:	50                   	push   eax
c0019241:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019245:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019249:	e8 7f fe ff ff       	call   c00190cd <Reg::readInt(char*, char*, int*)>
c001924e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0019253:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0019257:	0f 95 02             	setne  BYTE PTR [edx]
c001925a:	83 c4 2c             	add    esp,0x2c
c001925d:	c3                   	ret    

c001925e <Reg::readBoolWithDefault(char*, char*, bool)>:
c001925e:	53                   	push   ebx
c001925f:	83 ec 1c             	sub    esp,0x1c
c0019262:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0019266:	8d 44 24 13          	lea    eax,[esp+0x13]
c001926a:	50                   	push   eax
c001926b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001926f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019273:	e8 c1 ff ff ff       	call   c0019239 <Reg::readBool(char*, char*, bool*)>
c0019278:	83 c4 10             	add    esp,0x10
c001927b:	84 c0                	test   al,al
c001927d:	74 04                	je     c0019283 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001927f:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0019283:	88 d8                	mov    al,bl
c0019285:	83 c4 18             	add    esp,0x18
c0019288:	5b                   	pop    ebx
c0019289:	c3                   	ret    

c001928a <Reg::readIntWithDefault(char*, char*, int)>:
c001928a:	53                   	push   ebx
c001928b:	83 ec 1c             	sub    esp,0x1c
c001928e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019292:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019296:	50                   	push   eax
c0019297:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001929b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001929f:	e8 29 fe ff ff       	call   c00190cd <Reg::readInt(char*, char*, int*)>
c00192a4:	83 c4 10             	add    esp,0x10
c00192a7:	84 c0                	test   al,al
c00192a9:	74 04                	je     c00192af <Reg::readIntWithDefault(char*, char*, int)+0x25>
c00192ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00192af:	89 d8                	mov    eax,ebx
c00192b1:	83 c4 18             	add    esp,0x18
c00192b4:	5b                   	pop    ebx
c00192b5:	c3                   	ret    

c00192b6 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c00192b6:	56                   	push   esi
c00192b7:	53                   	push   ebx
c00192b8:	51                   	push   ecx
c00192b9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00192bd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00192c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00192c5:	56                   	push   esi
c00192c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00192ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00192ce:	e8 e5 fe ff ff       	call   c00191b8 <Reg::readString(char*, char*, char*, int)>
c00192d3:	83 c4 10             	add    esp,0x10
c00192d6:	84 c0                	test   al,al
c00192d8:	74 02                	je     c00192dc <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x26>
c00192da:	89 f3                	mov    ebx,esi
c00192dc:	89 d8                	mov    eax,ebx
c00192de:	5a                   	pop    edx
c00192df:	5b                   	pop    ebx
c00192e0:	5e                   	pop    esi
c00192e1:	c3                   	ret    

c00192e2 <Sys::exit(regs*)>:
c00192e2:	83 ec 18             	sub    esp,0x18
c00192e5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00192e9:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00192ec:	e8 1f 31 00 00       	call   c001c410 <terminateTask(int)>
c00192f1:	83 c8 ff             	or     eax,0xffffffff
c00192f4:	83 c4 1c             	add    esp,0x1c
c00192f7:	89 c2                	mov    edx,eax
c00192f9:	c3                   	ret    

c00192fa <Sys::loadDLL(regs*)>:
c00192fa:	56                   	push   esi
c00192fb:	53                   	push   ebx
c00192fc:	31 d2                	xor    edx,edx
c00192fe:	51                   	push   ecx
c00192ff:	b8 01 00 00 00       	mov    eax,0x1
c0019304:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019308:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001930c:	74 7d                	je     c001938b <Sys::loadDLL(regs*)+0x91>
c001930e:	83 ec 0c             	sub    esp,0xc
c0019311:	68 14 01 00 00       	push   0x114
c0019316:	e8 25 8e ff ff       	call   c0012140 <operator new(unsigned long)>
c001931b:	83 c4 0c             	add    esp,0xc
c001931e:	89 c3                	mov    ebx,eax
c0019320:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019325:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019328:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001932b:	53                   	push   ebx
c001932c:	e8 2d 94 ff ff       	call   c001275e <File::File(char const*, Process*)>
c0019331:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019334:	e8 f7 96 ff ff       	call   c0012a30 <File::exists()>
c0019339:	83 c4 10             	add    esp,0x10
c001933c:	84 c0                	test   al,al
c001933e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019340:	75 11                	jne    c0019353 <Sys::loadDLL(regs*)+0x59>
c0019342:	83 ec 0c             	sub    esp,0xc
c0019345:	53                   	push   ebx
c0019346:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019349:	83 c4 10             	add    esp,0x10
c001934c:	b8 03 00 00 00       	mov    eax,0x3
c0019351:	eb 36                	jmp    c0019389 <Sys::loadDLL(regs*)+0x8f>
c0019353:	83 ec 0c             	sub    esp,0xc
c0019356:	53                   	push   ebx
c0019357:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001935a:	58                   	pop    eax
c001935b:	5a                   	pop    edx
c001935c:	6a 00                	push   0x0
c001935e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0019361:	e8 c4 20 00 00       	call   c001b42a <Thr::loadDLL(char const*, bool)>
c0019366:	83 c4 10             	add    esp,0x10
c0019369:	89 c1                	mov    ecx,eax
c001936b:	31 d2                	xor    edx,edx
c001936d:	b8 04 00 00 00       	mov    eax,0x4
c0019372:	85 c9                	test   ecx,ecx
c0019374:	74 15                	je     c001938b <Sys::loadDLL(regs*)+0x91>
c0019376:	53                   	push   ebx
c0019377:	53                   	push   ebx
c0019378:	ff 35 28 a6 02 c0    	push   DWORD PTR ds:0xc002a628
c001937e:	51                   	push   ecx
c001937f:	e8 6c 22 00 00       	call   c001b5f0 <Thr::executeDLL(unsigned long, void*)>
c0019384:	83 c4 10             	add    esp,0x10
c0019387:	31 c0                	xor    eax,eax
c0019389:	31 d2                	xor    edx,edx
c001938b:	59                   	pop    ecx
c001938c:	5b                   	pop    ebx
c001938d:	5e                   	pop    esi
c001938e:	c3                   	ret    

c001938f <Sys::read(regs*)>:
c001938f:	57                   	push   edi
c0019390:	56                   	push   esi
c0019391:	53                   	push   ebx
c0019392:	83 ec 10             	sub    esp,0x10
c0019395:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019399:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001939c:	83 f8 02             	cmp    eax,0x2
c001939f:	77 10                	ja     c00193b1 <Sys::read(regs*)+0x22>
c00193a1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00193a6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00193a9:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00193af:	eb 0e                	jmp    c00193bf <Sys::read(regs*)+0x30>
c00193b1:	83 ec 0c             	sub    esp,0xc
c00193b4:	50                   	push   eax
c00193b5:	e8 4d 7d ff ff       	call   c0011107 <getFromFileDescriptor(int)>
c00193ba:	83 c4 10             	add    esp,0x10
c00193bd:	89 c1                	mov    ecx,eax
c00193bf:	83 c8 ff             	or     eax,0xffffffff
c00193c2:	85 c9                	test   ecx,ecx
c00193c4:	89 c2                	mov    edx,eax
c00193c6:	74 28                	je     c00193f0 <Sys::read(regs*)+0x61>
c00193c8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00193d0:	31 ff                	xor    edi,edi
c00193d2:	83 ec 0c             	sub    esp,0xc
c00193d5:	8b 01                	mov    eax,DWORD PTR [ecx]
c00193d7:	8d 54 24 18          	lea    edx,[esp+0x18]
c00193db:	52                   	push   edx
c00193dc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00193df:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00193e2:	57                   	push   edi
c00193e3:	56                   	push   esi
c00193e4:	51                   	push   ecx
c00193e5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00193e8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00193ec:	83 c4 20             	add    esp,0x20
c00193ef:	99                   	cdq    
c00193f0:	83 c4 10             	add    esp,0x10
c00193f3:	5b                   	pop    ebx
c00193f4:	5e                   	pop    esi
c00193f5:	5f                   	pop    edi
c00193f6:	c3                   	ret    

c00193f7 <Sys::sbrk(regs*)>:
c00193f7:	56                   	push   esi
c00193f8:	53                   	push   ebx
c00193f9:	50                   	push   eax
c00193fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00193ff:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019403:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019406:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0019409:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001940f:	85 db                	test   ebx,ebx
c0019411:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0019414:	74 02                	je     c0019418 <Sys::sbrk(regs*)+0x21>
c0019416:	79 06                	jns    c001941e <Sys::sbrk(regs*)+0x27>
c0019418:	89 f0                	mov    eax,esi
c001941a:	31 d2                	xor    edx,edx
c001941c:	eb 2a                	jmp    c0019448 <Sys::sbrk(regs*)+0x51>
c001941e:	83 c8 ff             	or     eax,0xffffffff
c0019421:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0019427:	89 c2                	mov    edx,eax
c0019429:	77 1d                	ja     c0019448 <Sys::sbrk(regs*)+0x51>
c001942b:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0019431:	50                   	push   eax
c0019432:	c1 ea 0c             	shr    edx,0xc
c0019435:	68 07 04 00 00       	push   0x407
c001943a:	52                   	push   edx
c001943b:	51                   	push   ecx
c001943c:	e8 ef 85 ff ff       	call   c0011a30 <VAS::allocatePages(int, int)>
c0019441:	89 f0                	mov    eax,esi
c0019443:	31 d2                	xor    edx,edx
c0019445:	83 c4 10             	add    esp,0x10
c0019448:	59                   	pop    ecx
c0019449:	5b                   	pop    ebx
c001944a:	5e                   	pop    esi
c001944b:	c3                   	ret    

c001944c <Sys::write(regs*)>:
c001944c:	57                   	push   edi
c001944d:	56                   	push   esi
c001944e:	53                   	push   ebx
c001944f:	83 ec 10             	sub    esp,0x10
c0019452:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019456:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0019459:	83 f8 02             	cmp    eax,0x2
c001945c:	77 10                	ja     c001946e <Sys::write(regs*)+0x22>
c001945e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019463:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019466:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001946c:	eb 0e                	jmp    c001947c <Sys::write(regs*)+0x30>
c001946e:	83 ec 0c             	sub    esp,0xc
c0019471:	50                   	push   eax
c0019472:	e8 90 7c ff ff       	call   c0011107 <getFromFileDescriptor(int)>
c0019477:	83 c4 10             	add    esp,0x10
c001947a:	89 c1                	mov    ecx,eax
c001947c:	83 c8 ff             	or     eax,0xffffffff
c001947f:	85 c9                	test   ecx,ecx
c0019481:	89 c2                	mov    edx,eax
c0019483:	74 28                	je     c00194ad <Sys::write(regs*)+0x61>
c0019485:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001948d:	31 ff                	xor    edi,edi
c001948f:	83 ec 0c             	sub    esp,0xc
c0019492:	8b 01                	mov    eax,DWORD PTR [ecx]
c0019494:	8d 54 24 18          	lea    edx,[esp+0x18]
c0019498:	52                   	push   edx
c0019499:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001949c:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001949f:	57                   	push   edi
c00194a0:	56                   	push   esi
c00194a1:	51                   	push   ecx
c00194a2:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00194a5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00194a9:	83 c4 20             	add    esp,0x20
c00194ac:	99                   	cdq    
c00194ad:	83 c4 10             	add    esp,0x10
c00194b0:	5b                   	pop    ebx
c00194b1:	5e                   	pop    esi
c00194b2:	5f                   	pop    edi
c00194b3:	c3                   	ret    

c00194b4 <Sys::yield(regs*)>:
c00194b4:	83 ec 0c             	sub    esp,0xc
c00194b7:	e8 3e 25 00 00       	call   c001b9fa <lockScheduler()>
c00194bc:	e8 6d 28 00 00       	call   c001bd2e <schedule()>
c00194c1:	e8 36 25 00 00       	call   c001b9fc <unlockScheduler()>
c00194c6:	31 c0                	xor    eax,eax
c00194c8:	31 d2                	xor    edx,edx
c00194ca:	83 c4 0c             	add    esp,0xc
c00194cd:	c3                   	ret    

c00194ce <sysCallGetPID(regs*)>:
c00194ce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00194d3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00194d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00194d8:	99                   	cdq    
c00194d9:	c3                   	ret    

c00194da <sysCallSeekDir(regs*)>:
c00194da:	31 c0                	xor    eax,eax
c00194dc:	31 d2                	xor    edx,edx
c00194de:	c3                   	ret    

c00194df <sysCallTellDir(regs*)>:
c00194df:	31 c0                	xor    eax,eax
c00194e1:	31 d2                	xor    edx,edx
c00194e3:	c3                   	ret    

c00194e4 <sysCallVerify(regs*)>:
c00194e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00194e8:	31 d2                	xor    edx,edx
c00194ea:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00194ed:	c3                   	ret    

c00194ee <sysCallFork(regs*)>:
c00194ee:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00194f3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00194f8:	c3                   	ret    

c00194f9 <sysCallExecve(regs*)>:
c00194f9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00194fe:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019503:	c3                   	ret    

c0019504 <sysCallGetArgc(regs*)>:
c0019504:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019509:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001950c:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c0019512:	99                   	cdq    
c0019513:	c3                   	ret    

c0019514 <sysFormatDisk(regs*)>:
c0019514:	56                   	push   esi
c0019515:	53                   	push   ebx
c0019516:	53                   	push   ebx
c0019517:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001951b:	8b 1d 88 a7 02 c0    	mov    ebx,DWORD PTR ds:0xc002a788
c0019521:	eb 25                	jmp    c0019548 <sysFormatDisk(regs*)+0x34>
c0019523:	83 ec 0c             	sub    esp,0xc
c0019526:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019529:	8b 13                	mov    edx,DWORD PTR [ebx]
c001952b:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001952e:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0019531:	50                   	push   eax
c0019532:	ff 34 85 20 ac 02 c0 	push   DWORD PTR [eax*4-0x3ffd53e0]
c0019539:	53                   	push   ebx
c001953a:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001953d:	83 c4 20             	add    esp,0x20
c0019540:	83 f8 08             	cmp    eax,0x8
c0019543:	75 12                	jne    c0019557 <sysFormatDisk(regs*)+0x43>
c0019545:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0019548:	85 db                	test   ebx,ebx
c001954a:	75 d7                	jne    c0019523 <sysFormatDisk(regs*)+0xf>
c001954c:	59                   	pop    ecx
c001954d:	b8 03 00 00 00       	mov    eax,0x3
c0019552:	31 d2                	xor    edx,edx
c0019554:	5b                   	pop    ebx
c0019555:	5e                   	pop    esi
c0019556:	c3                   	ret    
c0019557:	85 c0                	test   eax,eax
c0019559:	74 1b                	je     c0019576 <sysFormatDisk(regs*)+0x62>
c001955b:	83 f8 09             	cmp    eax,0x9
c001955e:	74 0b                	je     c001956b <sysFormatDisk(regs*)+0x57>
c0019560:	59                   	pop    ecx
c0019561:	b8 02 00 00 00       	mov    eax,0x2
c0019566:	31 d2                	xor    edx,edx
c0019568:	5b                   	pop    ebx
c0019569:	5e                   	pop    esi
c001956a:	c3                   	ret    
c001956b:	59                   	pop    ecx
c001956c:	b8 01 00 00 00       	mov    eax,0x1
c0019571:	31 d2                	xor    edx,edx
c0019573:	5b                   	pop    ebx
c0019574:	5e                   	pop    esi
c0019575:	c3                   	ret    
c0019576:	59                   	pop    ecx
c0019577:	31 c0                	xor    eax,eax
c0019579:	31 d2                	xor    edx,edx
c001957b:	5b                   	pop    ebx
c001957c:	5e                   	pop    esi
c001957d:	c3                   	ret    

c001957e <sysSetDiskVolumeLabel(regs*)>:
c001957e:	56                   	push   esi
c001957f:	53                   	push   ebx
c0019580:	53                   	push   ebx
c0019581:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019585:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0019588:	83 f8 19             	cmp    eax,0x19
c001958b:	77 29                	ja     c00195b6 <sysSetDiskVolumeLabel(regs*)+0x38>
c001958d:	8b 0c 85 20 ac 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd53e0]
c0019594:	85 c9                	test   ecx,ecx
c0019596:	74 1e                	je     c00195b6 <sysSetDiskVolumeLabel(regs*)+0x38>
c0019598:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001959b:	85 d2                	test   edx,edx
c001959d:	74 17                	je     c00195b6 <sysSetDiskVolumeLabel(regs*)+0x38>
c001959f:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c00195a5:	8b 33                	mov    esi,DWORD PTR [ebx]
c00195a7:	52                   	push   edx
c00195a8:	50                   	push   eax
c00195a9:	51                   	push   ecx
c00195aa:	53                   	push   ebx
c00195ab:	ff 56 58             	call   DWORD PTR [esi+0x58]
c00195ae:	83 c4 10             	add    esp,0x10
c00195b1:	99                   	cdq    
c00195b2:	59                   	pop    ecx
c00195b3:	5b                   	pop    ebx
c00195b4:	5e                   	pop    esi
c00195b5:	c3                   	ret    
c00195b6:	59                   	pop    ecx
c00195b7:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00195bc:	ba ff ff ff ff       	mov    edx,0xffffffff
c00195c1:	5b                   	pop    ebx
c00195c2:	5e                   	pop    esi
c00195c3:	c3                   	ret    

c00195c4 <sysGetDiskVolumeLabel(regs*)>:
c00195c4:	57                   	push   edi
c00195c5:	56                   	push   esi
c00195c6:	53                   	push   ebx
c00195c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00195cb:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00195ce:	83 fa 19             	cmp    edx,0x19
c00195d1:	77 34                	ja     c0019607 <sysGetDiskVolumeLabel(regs*)+0x43>
c00195d3:	8b 0c 95 20 ac 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd53e0]
c00195da:	85 c9                	test   ecx,ecx
c00195dc:	74 29                	je     c0019607 <sysGetDiskVolumeLabel(regs*)+0x43>
c00195de:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00195e1:	85 db                	test   ebx,ebx
c00195e3:	74 22                	je     c0019607 <sysGetDiskVolumeLabel(regs*)+0x43>
c00195e5:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00195e8:	85 c0                	test   eax,eax
c00195ea:	74 1b                	je     c0019607 <sysGetDiskVolumeLabel(regs*)+0x43>
c00195ec:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c00195f2:	83 ec 0c             	sub    esp,0xc
c00195f5:	8b 3e                	mov    edi,DWORD PTR [esi]
c00195f7:	50                   	push   eax
c00195f8:	53                   	push   ebx
c00195f9:	52                   	push   edx
c00195fa:	51                   	push   ecx
c00195fb:	56                   	push   esi
c00195fc:	ff 57 54             	call   DWORD PTR [edi+0x54]
c00195ff:	83 c4 20             	add    esp,0x20
c0019602:	99                   	cdq    
c0019603:	5b                   	pop    ebx
c0019604:	5e                   	pop    esi
c0019605:	5f                   	pop    edi
c0019606:	c3                   	ret    
c0019607:	5b                   	pop    ebx
c0019608:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001960d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019612:	5e                   	pop    esi
c0019613:	5f                   	pop    edi
c0019614:	c3                   	ret    

c0019615 <sysShutdown(regs*)>:
c0019615:	83 ec 0c             	sub    esp,0xc
c0019618:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001961c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001961f:	85 c0                	test   eax,eax
c0019621:	74 18                	je     c001963b <sysShutdown(regs*)+0x26>
c0019623:	83 f8 01             	cmp    eax,0x1
c0019626:	74 38                	je     c0019660 <sysShutdown(regs*)+0x4b>
c0019628:	83 f8 02             	cmp    eax,0x2
c001962b:	74 24                	je     c0019651 <sysShutdown(regs*)+0x3c>
c001962d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019632:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019637:	83 c4 0c             	add    esp,0xc
c001963a:	c3                   	ret    
c001963b:	a1 28 a6 02 c0       	mov    eax,ds:0xc002a628
c0019640:	8b 10                	mov    edx,DWORD PTR [eax]
c0019642:	6a 00                	push   0x0
c0019644:	6a 00                	push   0x0
c0019646:	6a 00                	push   0x0
c0019648:	50                   	push   eax
c0019649:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001964c:	83 c4 10             	add    esp,0x10
c001964f:	eb dc                	jmp    c001962d <sysShutdown(regs*)+0x18>
c0019651:	a1 28 a6 02 c0       	mov    eax,ds:0xc002a628
c0019656:	8b 10                	mov    edx,DWORD PTR [eax]
c0019658:	6a 00                	push   0x0
c001965a:	6a 00                	push   0x0
c001965c:	6a 01                	push   0x1
c001965e:	eb e8                	jmp    c0019648 <sysShutdown(regs*)+0x33>
c0019660:	a1 a0 ac 02 c0       	mov    eax,ds:0xc002aca0
c0019665:	85 c0                	test   eax,eax
c0019667:	74 02                	je     c001966b <sysShutdown(regs*)+0x56>
c0019669:	ff d0                	call   eax
c001966b:	31 c0                	xor    eax,eax
c001966d:	31 d2                	xor    edx,edx
c001966f:	83 c4 0c             	add    esp,0xc
c0019672:	c3                   	ret    

c0019673 <sysCallGetCwd(regs*)>:
c0019673:	83 ec 10             	sub    esp,0x10
c0019676:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001967a:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001967d:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0019680:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019685:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019688:	e8 42 94 ff ff       	call   c0012acf <getcwd(Process*, char*, int)>
c001968d:	83 c4 1c             	add    esp,0x1c
c0019690:	99                   	cdq    
c0019691:	c3                   	ret    

c0019692 <sysCallSetCwd(regs*)>:
c0019692:	83 ec 14             	sub    esp,0x14
c0019695:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019699:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001969c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00196a1:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00196a4:	e8 50 94 ff ff       	call   c0012af9 <setcwd(Process*, char*)>
c00196a9:	83 c4 1c             	add    esp,0x1c
c00196ac:	99                   	cdq    
c00196ad:	c3                   	ret    

c00196ae <sysCallRealpath(regs*)>:
c00196ae:	83 ec 0c             	sub    esp,0xc
c00196b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00196b5:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00196b8:	85 d2                	test   edx,edx
c00196ba:	74 07                	je     c00196c3 <sysCallRealpath(regs*)+0x15>
c00196bc:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00196bf:	85 c0                	test   eax,eax
c00196c1:	75 0b                	jne    c00196ce <sysCallRealpath(regs*)+0x20>
c00196c3:	b8 01 00 00 00       	mov    eax,0x1
c00196c8:	31 d2                	xor    edx,edx
c00196ca:	83 c4 0c             	add    esp,0xc
c00196cd:	c3                   	ret    
c00196ce:	51                   	push   ecx
c00196cf:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00196d5:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c00196d8:	81 c1 0c 01 00 00    	add    ecx,0x10c
c00196de:	51                   	push   ecx
c00196df:	52                   	push   edx
c00196e0:	50                   	push   eax
c00196e1:	e8 ce 8e ff ff       	call   c00125b4 <standardiseFiles(char*, char const*, char const*)>
c00196e6:	83 c4 10             	add    esp,0x10
c00196e9:	31 c0                	xor    eax,eax
c00196eb:	31 d2                	xor    edx,edx
c00196ed:	83 c4 0c             	add    esp,0xc
c00196f0:	c3                   	ret    

c00196f1 <sysCallReadDir(regs*)>:
c00196f1:	53                   	push   ebx
c00196f2:	83 ec 18             	sub    esp,0x18
c00196f5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00196f9:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00196fc:	83 f8 02             	cmp    eax,0x2
c00196ff:	76 53                	jbe    c0019754 <sysCallReadDir(regs*)+0x63>
c0019701:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0019704:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001970a:	77 4f                	ja     c001975b <sysCallReadDir(regs*)+0x6a>
c001970c:	83 ec 0c             	sub    esp,0xc
c001970f:	50                   	push   eax
c0019710:	e8 f2 79 ff ff       	call   c0011107 <getFromFileDescriptor(int)>
c0019715:	83 c4 10             	add    esp,0x10
c0019718:	85 c0                	test   eax,eax
c001971a:	74 50                	je     c001976c <sysCallReadDir(regs*)+0x7b>
c001971c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019724:	83 ec 0c             	sub    esp,0xc
c0019727:	8b 10                	mov    edx,DWORD PTR [eax]
c0019729:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001972d:	51                   	push   ecx
c001972e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0019731:	6a 00                	push   0x0
c0019733:	68 10 01 00 00       	push   0x110
c0019738:	50                   	push   eax
c0019739:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001973c:	83 c4 20             	add    esp,0x20
c001973f:	85 c0                	test   eax,eax
c0019741:	74 38                	je     c001977b <sysCallReadDir(regs*)+0x8a>
c0019743:	83 f8 07             	cmp    eax,0x7
c0019746:	74 0c                	je     c0019754 <sysCallReadDir(regs*)+0x63>
c0019748:	b8 02 00 00 00       	mov    eax,0x2
c001974d:	31 d2                	xor    edx,edx
c001974f:	83 c4 18             	add    esp,0x18
c0019752:	5b                   	pop    ebx
c0019753:	c3                   	ret    
c0019754:	b8 01 00 00 00       	mov    eax,0x1
c0019759:	eb f2                	jmp    c001974d <sysCallReadDir(regs*)+0x5c>
c001975b:	83 ec 08             	sub    esp,0x8
c001975e:	52                   	push   edx
c001975f:	68 5c 84 02 c0       	push   0xc002845c
c0019764:	e8 c6 8a ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c0019769:	83 c4 10             	add    esp,0x10
c001976c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019771:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019776:	83 c4 18             	add    esp,0x18
c0019779:	5b                   	pop    ebx
c001977a:	c3                   	ret    
c001977b:	31 c0                	xor    eax,eax
c001977d:	eb ce                	jmp    c001974d <sysCallReadDir(regs*)+0x5c>

c001977f <sysCallIsATTY(regs*)>:
c001977f:	83 ec 0c             	sub    esp,0xc
c0019782:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019786:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0019789:	83 f8 02             	cmp    eax,0x2
c001978c:	76 07                	jbe    c0019795 <sysCallIsATTY(regs*)+0x16>
c001978e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0019793:	75 26                	jne    c00197bb <sysCallIsATTY(regs*)+0x3c>
c0019795:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001979a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001979d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00197a3:	85 c0                	test   eax,eax
c00197a5:	74 24                	je     c00197cb <sysCallIsATTY(regs*)+0x4c>
c00197a7:	83 ec 0c             	sub    esp,0xc
c00197aa:	8b 10                	mov    edx,DWORD PTR [eax]
c00197ac:	50                   	push   eax
c00197ad:	ff 12                	call   DWORD PTR [edx]
c00197af:	31 d2                	xor    edx,edx
c00197b1:	0f b6 c0             	movzx  eax,al
c00197b4:	83 c4 10             	add    esp,0x10
c00197b7:	83 c4 0c             	add    esp,0xc
c00197ba:	c3                   	ret    
c00197bb:	83 ec 0c             	sub    esp,0xc
c00197be:	50                   	push   eax
c00197bf:	e8 43 79 ff ff       	call   c0011107 <getFromFileDescriptor(int)>
c00197c4:	83 c4 10             	add    esp,0x10
c00197c7:	85 c0                	test   eax,eax
c00197c9:	75 dc                	jne    c00197a7 <sysCallIsATTY(regs*)+0x28>
c00197cb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00197d0:	ba ff ff ff ff       	mov    edx,0xffffffff
c00197d5:	83 c4 0c             	add    esp,0xc
c00197d8:	c3                   	ret    

c00197d9 <sysCallSeek(regs*)>:
c00197d9:	53                   	push   ebx
c00197da:	83 ec 08             	sub    esp,0x8
c00197dd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00197e1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00197e4:	83 f8 02             	cmp    eax,0x2
c00197e7:	76 4a                	jbe    c0019833 <sysCallSeek(regs*)+0x5a>
c00197e9:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00197ee:	77 32                	ja     c0019822 <sysCallSeek(regs*)+0x49>
c00197f0:	83 ec 0c             	sub    esp,0xc
c00197f3:	50                   	push   eax
c00197f4:	e8 0e 79 ff ff       	call   c0011107 <getFromFileDescriptor(int)>
c00197f9:	83 c4 0c             	add    esp,0xc
c00197fc:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00197ff:	31 db                	xor    ebx,ebx
c0019801:	53                   	push   ebx
c0019802:	51                   	push   ecx
c0019803:	50                   	push   eax
c0019804:	e8 77 90 ff ff       	call   c0012880 <File::seek(unsigned long long)>
c0019809:	83 c4 10             	add    esp,0x10
c001980c:	85 c0                	test   eax,eax
c001980e:	0f 95 c0             	setne  al
c0019811:	31 d2                	xor    edx,edx
c0019813:	0f b6 c0             	movzx  eax,al
c0019816:	f7 d8                	neg    eax
c0019818:	83 d2 00             	adc    edx,0x0
c001981b:	83 c4 08             	add    esp,0x8
c001981e:	f7 da                	neg    edx
c0019820:	5b                   	pop    ebx
c0019821:	c3                   	ret    
c0019822:	83 ec 08             	sub    esp,0x8
c0019825:	50                   	push   eax
c0019826:	68 18 85 02 c0       	push   0xc0028518
c001982b:	e8 ff 89 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c0019830:	83 c4 10             	add    esp,0x10
c0019833:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019838:	ba ff ff ff ff       	mov    edx,0xffffffff
c001983d:	83 c4 08             	add    esp,0x8
c0019840:	5b                   	pop    ebx
c0019841:	c3                   	ret    

c0019842 <sysCallTell(regs*)>:
c0019842:	53                   	push   ebx
c0019843:	83 ec 08             	sub    esp,0x8
c0019846:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001984a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001984d:	83 f8 02             	cmp    eax,0x2
c0019850:	76 5e                	jbe    c00198b0 <sysCallTell(regs*)+0x6e>
c0019852:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0019857:	77 2d                	ja     c0019886 <sysCallTell(regs*)+0x44>
c0019859:	83 ec 0c             	sub    esp,0xc
c001985c:	50                   	push   eax
c001985d:	e8 a5 78 ff ff       	call   c0011107 <getFromFileDescriptor(int)>
c0019862:	5a                   	pop    edx
c0019863:	59                   	pop    ecx
c0019864:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0019867:	50                   	push   eax
c0019868:	e8 69 90 ff ff       	call   c00128d6 <File::tell(unsigned long long*)>
c001986d:	83 c4 10             	add    esp,0x10
c0019870:	85 c0                	test   eax,eax
c0019872:	0f 95 c0             	setne  al
c0019875:	31 d2                	xor    edx,edx
c0019877:	0f b6 c0             	movzx  eax,al
c001987a:	f7 d8                	neg    eax
c001987c:	83 d2 00             	adc    edx,0x0
c001987f:	83 c4 08             	add    esp,0x8
c0019882:	f7 da                	neg    edx
c0019884:	5b                   	pop    ebx
c0019885:	c3                   	ret    
c0019886:	83 ec 08             	sub    esp,0x8
c0019889:	50                   	push   eax
c001988a:	68 32 85 02 c0       	push   0xc0028532
c001988f:	e8 9b 89 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c0019894:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0019897:	83 c4 10             	add    esp,0x10
c001989a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00198a0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00198a7:	31 d2                	xor    edx,edx
c00198a9:	31 c0                	xor    eax,eax
c00198ab:	83 c4 08             	add    esp,0x8
c00198ae:	5b                   	pop    ebx
c00198af:	c3                   	ret    
c00198b0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00198b5:	ba ff ff ff ff       	mov    edx,0xffffffff
c00198ba:	83 c4 08             	add    esp,0x8
c00198bd:	5b                   	pop    ebx
c00198be:	c3                   	ret    

c00198bf <sysCallSizeFromFilename(regs*)>:
c00198bf:	57                   	push   edi
c00198c0:	56                   	push   esi
c00198c1:	53                   	push   ebx
c00198c2:	83 ec 10             	sub    esp,0x10
c00198c5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00198c9:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c00198cc:	83 fb 02             	cmp    ebx,0x2
c00198cf:	0f 86 8a 00 00 00    	jbe    c001995f <sysCallSizeFromFilename(regs*)+0xa0>
c00198d5:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00198db:	77 56                	ja     c0019933 <sysCallSizeFromFilename(regs*)+0x74>
c00198dd:	83 ec 0c             	sub    esp,0xc
c00198e0:	68 14 01 00 00       	push   0x114
c00198e5:	e8 56 88 ff ff       	call   c0012140 <operator new(unsigned long)>
c00198ea:	83 c4 0c             	add    esp,0xc
c00198ed:	89 c7                	mov    edi,eax
c00198ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00198f4:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00198f7:	53                   	push   ebx
c00198f8:	57                   	push   edi
c00198f9:	e8 60 8e ff ff       	call   c001275e <File::File(char const*, Process*)>
c00198fe:	83 c4 0c             	add    esp,0xc
c0019901:	8d 44 24 13          	lea    eax,[esp+0x13]
c0019905:	50                   	push   eax
c0019906:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0019909:	57                   	push   edi
c001990a:	e8 5f 91 ff ff       	call   c0012a6e <File::stat(unsigned long long*, bool*)>
c001990f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019912:	89 c3                	mov    ebx,eax
c0019914:	8b 07                	mov    eax,DWORD PTR [edi]
c0019916:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019919:	83 c4 10             	add    esp,0x10
c001991c:	31 c0                	xor    eax,eax
c001991e:	85 db                	test   ebx,ebx
c0019920:	0f 95 c0             	setne  al
c0019923:	31 d2                	xor    edx,edx
c0019925:	f7 d8                	neg    eax
c0019927:	83 d2 00             	adc    edx,0x0
c001992a:	83 c4 10             	add    esp,0x10
c001992d:	f7 da                	neg    edx
c001992f:	5b                   	pop    ebx
c0019930:	5e                   	pop    esi
c0019931:	5f                   	pop    edi
c0019932:	c3                   	ret    
c0019933:	83 ec 08             	sub    esp,0x8
c0019936:	53                   	push   ebx
c0019937:	68 4c 85 02 c0       	push   0xc002854c
c001993c:	e8 ee 88 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c0019941:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019944:	83 c4 10             	add    esp,0x10
c0019947:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001994d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019954:	31 d2                	xor    edx,edx
c0019956:	83 c4 10             	add    esp,0x10
c0019959:	31 c0                	xor    eax,eax
c001995b:	5b                   	pop    ebx
c001995c:	5e                   	pop    esi
c001995d:	5f                   	pop    edi
c001995e:	c3                   	ret    
c001995f:	83 c4 10             	add    esp,0x10
c0019962:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019967:	5b                   	pop    ebx
c0019968:	ba ff ff ff ff       	mov    edx,0xffffffff
c001996d:	5e                   	pop    esi
c001996e:	5f                   	pop    edi
c001996f:	c3                   	ret    

c0019970 <sysCallSize(regs*)>:
c0019970:	53                   	push   ebx
c0019971:	83 ec 18             	sub    esp,0x18
c0019974:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019978:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001997b:	83 f8 02             	cmp    eax,0x2
c001997e:	76 64                	jbe    c00199e4 <sysCallSize(regs*)+0x74>
c0019980:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0019985:	77 33                	ja     c00199ba <sysCallSize(regs*)+0x4a>
c0019987:	83 ec 0c             	sub    esp,0xc
c001998a:	50                   	push   eax
c001998b:	e8 77 77 ff ff       	call   c0011107 <getFromFileDescriptor(int)>
c0019990:	83 c4 0c             	add    esp,0xc
c0019993:	8d 54 24 13          	lea    edx,[esp+0x13]
c0019997:	52                   	push   edx
c0019998:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001999b:	50                   	push   eax
c001999c:	e8 cd 90 ff ff       	call   c0012a6e <File::stat(unsigned long long*, bool*)>
c00199a1:	83 c4 10             	add    esp,0x10
c00199a4:	85 c0                	test   eax,eax
c00199a6:	0f 95 c0             	setne  al
c00199a9:	31 d2                	xor    edx,edx
c00199ab:	0f b6 c0             	movzx  eax,al
c00199ae:	f7 d8                	neg    eax
c00199b0:	83 d2 00             	adc    edx,0x0
c00199b3:	83 c4 18             	add    esp,0x18
c00199b6:	f7 da                	neg    edx
c00199b8:	5b                   	pop    ebx
c00199b9:	c3                   	ret    
c00199ba:	83 ec 08             	sub    esp,0x8
c00199bd:	50                   	push   eax
c00199be:	68 4c 85 02 c0       	push   0xc002854c
c00199c3:	e8 67 88 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c00199c8:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00199cb:	83 c4 10             	add    esp,0x10
c00199ce:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00199d4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00199db:	31 d2                	xor    edx,edx
c00199dd:	31 c0                	xor    eax,eax
c00199df:	83 c4 18             	add    esp,0x18
c00199e2:	5b                   	pop    ebx
c00199e3:	c3                   	ret    
c00199e4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00199e9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00199ee:	83 c4 18             	add    esp,0x18
c00199f1:	5b                   	pop    ebx
c00199f2:	c3                   	ret    

c00199f3 <sysCallClose(regs*)>:
c00199f3:	53                   	push   ebx
c00199f4:	83 ec 08             	sub    esp,0x8
c00199f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00199fb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00199fe:	83 f8 02             	cmp    eax,0x2
c0019a01:	76 50                	jbe    c0019a53 <sysCallClose(regs*)+0x60>
c0019a03:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0019a08:	74 58                	je     c0019a62 <sysCallClose(regs*)+0x6f>
c0019a0a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0019a0f:	74 60                	je     c0019a71 <sysCallClose(regs*)+0x7e>
c0019a11:	77 2f                	ja     c0019a42 <sysCallClose(regs*)+0x4f>
c0019a13:	83 ec 0c             	sub    esp,0xc
c0019a16:	50                   	push   eax
c0019a17:	e8 eb 76 ff ff       	call   c0011107 <getFromFileDescriptor(int)>
c0019a1c:	89 c3                	mov    ebx,eax
c0019a1e:	89 04 24             	mov    DWORD PTR [esp],eax
c0019a21:	e8 fa 8d ff ff       	call   c0012820 <File::close()>
c0019a26:	83 c4 10             	add    esp,0x10
c0019a29:	85 db                	test   ebx,ebx
c0019a2b:	74 0c                	je     c0019a39 <sysCallClose(regs*)+0x46>
c0019a2d:	83 ec 0c             	sub    esp,0xc
c0019a30:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019a32:	53                   	push   ebx
c0019a33:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019a36:	83 c4 10             	add    esp,0x10
c0019a39:	31 c0                	xor    eax,eax
c0019a3b:	31 d2                	xor    edx,edx
c0019a3d:	83 c4 08             	add    esp,0x8
c0019a40:	5b                   	pop    ebx
c0019a41:	c3                   	ret    
c0019a42:	83 ec 08             	sub    esp,0x8
c0019a45:	50                   	push   eax
c0019a46:	68 80 84 02 c0       	push   0xc0028480
c0019a4b:	e8 df 87 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c0019a50:	83 c4 10             	add    esp,0x10
c0019a53:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019a58:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019a5d:	83 c4 08             	add    esp,0x8
c0019a60:	5b                   	pop    ebx
c0019a61:	c3                   	ret    
c0019a62:	83 ec 0c             	sub    esp,0xc
c0019a65:	68 67 85 02 c0       	push   0xc0028567
c0019a6a:	e8 c0 87 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c0019a6f:	eb c5                	jmp    c0019a36 <sysCallClose(regs*)+0x43>
c0019a71:	83 ec 0c             	sub    esp,0xc
c0019a74:	68 75 85 02 c0       	push   0xc0028575
c0019a79:	eb ef                	jmp    c0019a6a <sysCallClose(regs*)+0x77>

c0019a7b <sysCallOpenDir(regs*)>:
c0019a7b:	56                   	push   esi
c0019a7c:	53                   	push   ebx
c0019a7d:	53                   	push   ebx
c0019a7e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019a82:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0019a85:	85 f6                	test   esi,esi
c0019a87:	74 51                	je     c0019ada <sysCallOpenDir(regs*)+0x5f>
c0019a89:	83 ec 0c             	sub    esp,0xc
c0019a8c:	68 14 01 00 00       	push   0x114
c0019a91:	e8 aa 86 ff ff       	call   c0012140 <operator new(unsigned long)>
c0019a96:	83 c4 0c             	add    esp,0xc
c0019a99:	89 c6                	mov    esi,eax
c0019a9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019aa0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019aa3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0019aa6:	56                   	push   esi
c0019aa7:	e8 74 91 ff ff       	call   c0012c20 <Directory::Directory(char const*, Process*)>
c0019aac:	89 34 24             	mov    DWORD PTR [esp],esi
c0019aaf:	e8 d0 91 ff ff       	call   c0012c84 <Directory::open()>
c0019ab4:	83 c4 10             	add    esp,0x10
c0019ab7:	85 c0                	test   eax,eax
c0019ab9:	75 1f                	jne    c0019ada <sysCallOpenDir(regs*)+0x5f>
c0019abb:	83 ec 0c             	sub    esp,0xc
c0019abe:	56                   	push   esi
c0019abf:	e8 8e 73 ff ff       	call   c0010e52 <UnixFile::getFileDescriptor()>
c0019ac4:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0019ac7:	83 c4 10             	add    esp,0x10
c0019aca:	89 02                	mov    DWORD PTR [edx],eax
c0019acc:	c1 f8 1f             	sar    eax,0x1f
c0019acf:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0019ad2:	31 c0                	xor    eax,eax
c0019ad4:	59                   	pop    ecx
c0019ad5:	31 d2                	xor    edx,edx
c0019ad7:	5b                   	pop    ebx
c0019ad8:	5e                   	pop    esi
c0019ad9:	c3                   	ret    
c0019ada:	59                   	pop    ecx
c0019adb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019ae0:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019ae5:	5b                   	pop    ebx
c0019ae6:	5e                   	pop    esi
c0019ae7:	c3                   	ret    

c0019ae8 <sysCallMakeDir(regs*)>:
c0019ae8:	56                   	push   esi
c0019ae9:	53                   	push   ebx
c0019aea:	83 ec 10             	sub    esp,0x10
c0019aed:	68 14 01 00 00       	push   0x114
c0019af2:	e8 49 86 ff ff       	call   c0012140 <operator new(unsigned long)>
c0019af7:	83 c4 0c             	add    esp,0xc
c0019afa:	89 c3                	mov    ebx,eax
c0019afc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019b01:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019b04:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019b08:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0019b0b:	53                   	push   ebx
c0019b0c:	e8 0f 91 ff ff       	call   c0012c20 <Directory::Directory(char const*, Process*)>
c0019b11:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b14:	e8 4b 93 ff ff       	call   c0012e64 <Directory::create()>
c0019b19:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b1c:	89 c6                	mov    esi,eax
c0019b1e:	e8 bd 91 ff ff       	call   c0012ce0 <Directory::close()>
c0019b23:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019b25:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b28:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019b2b:	31 c0                	xor    eax,eax
c0019b2d:	85 f6                	test   esi,esi
c0019b2f:	0f 95 c0             	setne  al
c0019b32:	31 d2                	xor    edx,edx
c0019b34:	f7 d8                	neg    eax
c0019b36:	83 d2 00             	adc    edx,0x0
c0019b39:	83 c4 14             	add    esp,0x14
c0019b3c:	f7 da                	neg    edx
c0019b3e:	5b                   	pop    ebx
c0019b3f:	5e                   	pop    esi
c0019b40:	c3                   	ret    

c0019b41 <sysCallCloseDir(regs*)>:
c0019b41:	53                   	push   ebx
c0019b42:	83 ec 08             	sub    esp,0x8
c0019b45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b49:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0019b4c:	83 f8 02             	cmp    eax,0x2
c0019b4f:	76 47                	jbe    c0019b98 <sysCallCloseDir(regs*)+0x57>
c0019b51:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0019b56:	77 2f                	ja     c0019b87 <sysCallCloseDir(regs*)+0x46>
c0019b58:	83 ec 0c             	sub    esp,0xc
c0019b5b:	50                   	push   eax
c0019b5c:	e8 a6 75 ff ff       	call   c0011107 <getFromFileDescriptor(int)>
c0019b61:	89 c3                	mov    ebx,eax
c0019b63:	89 04 24             	mov    DWORD PTR [esp],eax
c0019b66:	e8 75 91 ff ff       	call   c0012ce0 <Directory::close()>
c0019b6b:	83 c4 10             	add    esp,0x10
c0019b6e:	85 db                	test   ebx,ebx
c0019b70:	74 0c                	je     c0019b7e <sysCallCloseDir(regs*)+0x3d>
c0019b72:	83 ec 0c             	sub    esp,0xc
c0019b75:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019b77:	53                   	push   ebx
c0019b78:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019b7b:	83 c4 10             	add    esp,0x10
c0019b7e:	31 c0                	xor    eax,eax
c0019b80:	31 d2                	xor    edx,edx
c0019b82:	83 c4 08             	add    esp,0x8
c0019b85:	5b                   	pop    ebx
c0019b86:	c3                   	ret    
c0019b87:	83 ec 08             	sub    esp,0x8
c0019b8a:	50                   	push   eax
c0019b8b:	68 a8 84 02 c0       	push   0xc00284a8
c0019b90:	e8 9a 86 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c0019b95:	83 c4 10             	add    esp,0x10
c0019b98:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019b9d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019ba2:	83 c4 08             	add    esp,0x8
c0019ba5:	5b                   	pop    ebx
c0019ba6:	c3                   	ret    

c0019ba7 <sysCallWait(regs*)>:
c0019ba7:	83 ec 10             	sub    esp,0x10
c0019baa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019bae:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0019bb1:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0019bb4:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0019bb7:	e8 ed 22 00 00       	call   c001bea9 <waitTask(int, int*, int)>
c0019bbc:	83 c4 1c             	add    esp,0x1c
c0019bbf:	99                   	cdq    
c0019bc0:	c3                   	ret    

c0019bc1 <sysCallRmdir(regs*)>:
c0019bc1:	56                   	push   esi
c0019bc2:	53                   	push   ebx
c0019bc3:	83 ec 10             	sub    esp,0x10
c0019bc6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019bca:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0019bcd:	68 14 01 00 00       	push   0x114
c0019bd2:	e8 69 85 ff ff       	call   c0012140 <operator new(unsigned long)>
c0019bd7:	83 c4 0c             	add    esp,0xc
c0019bda:	89 c3                	mov    ebx,eax
c0019bdc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019be1:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019be4:	56                   	push   esi
c0019be5:	53                   	push   ebx
c0019be6:	e8 73 8b ff ff       	call   c001275e <File::File(char const*, Process*)>
c0019beb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019bee:	e8 47 8d ff ff       	call   c001293a <File::unlink()>
c0019bf3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019bf6:	89 c6                	mov    esi,eax
c0019bf8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019bfa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019bfd:	31 c0                	xor    eax,eax
c0019bff:	85 f6                	test   esi,esi
c0019c01:	0f 95 c0             	setne  al
c0019c04:	31 d2                	xor    edx,edx
c0019c06:	f7 d8                	neg    eax
c0019c08:	83 d2 00             	adc    edx,0x0
c0019c0b:	83 c4 14             	add    esp,0x14
c0019c0e:	f7 da                	neg    edx
c0019c10:	5b                   	pop    ebx
c0019c11:	5e                   	pop    esi
c0019c12:	c3                   	ret    

c0019c13 <sysCallUnlink(regs*)>:
c0019c13:	56                   	push   esi
c0019c14:	53                   	push   ebx
c0019c15:	83 ec 10             	sub    esp,0x10
c0019c18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019c1c:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0019c1f:	68 14 01 00 00       	push   0x114
c0019c24:	e8 17 85 ff ff       	call   c0012140 <operator new(unsigned long)>
c0019c29:	83 c4 0c             	add    esp,0xc
c0019c2c:	89 c3                	mov    ebx,eax
c0019c2e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019c33:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019c36:	56                   	push   esi
c0019c37:	53                   	push   ebx
c0019c38:	e8 21 8b ff ff       	call   c001275e <File::File(char const*, Process*)>
c0019c3d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019c40:	e8 f5 8c ff ff       	call   c001293a <File::unlink()>
c0019c45:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019c48:	89 c6                	mov    esi,eax
c0019c4a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c4c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019c4f:	31 c0                	xor    eax,eax
c0019c51:	85 f6                	test   esi,esi
c0019c53:	0f 95 c0             	setne  al
c0019c56:	31 d2                	xor    edx,edx
c0019c58:	f7 d8                	neg    eax
c0019c5a:	83 d2 00             	adc    edx,0x0
c0019c5d:	83 c4 14             	add    esp,0x14
c0019c60:	f7 da                	neg    edx
c0019c62:	5b                   	pop    ebx
c0019c63:	5e                   	pop    esi
c0019c64:	c3                   	ret    

c0019c65 <sysCallGetArgv(regs*)>:
c0019c65:	83 ec 0c             	sub    esp,0xc
c0019c68:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019c6c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0019c6f:	85 c0                	test   eax,eax
c0019c71:	78 2b                	js     c0019c9e <sysCallGetArgv(regs*)+0x39>
c0019c73:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019c79:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0019c7c:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c0019c82:	7d 1a                	jge    c0019c9e <sysCallGetArgv(regs*)+0x39>
c0019c84:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c0019c8b:	85 c0                	test   eax,eax
c0019c8d:	74 17                	je     c0019ca6 <sysCallGetArgv(regs*)+0x41>
c0019c8f:	83 ec 08             	sub    esp,0x8
c0019c92:	50                   	push   eax
c0019c93:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0019c96:	e8 81 6a fe ff       	call   c000071c <strcpy>
c0019c9b:	83 c4 10             	add    esp,0x10
c0019c9e:	31 c0                	xor    eax,eax
c0019ca0:	31 d2                	xor    edx,edx
c0019ca2:	83 c4 0c             	add    esp,0xc
c0019ca5:	c3                   	ret    
c0019ca6:	b8 01 00 00 00       	mov    eax,0x1
c0019cab:	31 d2                	xor    edx,edx
c0019cad:	83 c4 0c             	add    esp,0xc
c0019cb0:	c3                   	ret    

c0019cb1 <sysCallTTYName(regs*)>:
c0019cb1:	56                   	push   esi
c0019cb2:	53                   	push   ebx
c0019cb3:	53                   	push   ebx
c0019cb4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019cb8:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019cbb:	85 c0                	test   eax,eax
c0019cbd:	74 5f                	je     c0019d1e <sysCallTTYName(regs*)+0x6d>
c0019cbf:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019cc2:	83 f8 02             	cmp    eax,0x2
c0019cc5:	77 3e                	ja     c0019d05 <sysCallTTYName(regs*)+0x54>
c0019cc7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019ccc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019ccf:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0019cd5:	85 db                	test   ebx,ebx
c0019cd7:	74 45                	je     c0019d1e <sysCallTTYName(regs*)+0x6d>
c0019cd9:	83 ec 0c             	sub    esp,0xc
c0019cdc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019cde:	53                   	push   ebx
c0019cdf:	ff 10                	call   DWORD PTR [eax]
c0019ce1:	83 c4 10             	add    esp,0x10
c0019ce4:	84 c0                	test   al,al
c0019ce6:	74 41                	je     c0019d29 <sysCallTTYName(regs*)+0x78>
c0019ce8:	83 ec 08             	sub    esp,0x8
c0019ceb:	81 c3 1e 10 00 00    	add    ebx,0x101e
c0019cf1:	53                   	push   ebx
c0019cf2:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0019cf5:	e8 22 6a fe ff       	call   c000071c <strcpy>
c0019cfa:	83 c4 10             	add    esp,0x10
c0019cfd:	31 c0                	xor    eax,eax
c0019cff:	59                   	pop    ecx
c0019d00:	31 d2                	xor    edx,edx
c0019d02:	5b                   	pop    ebx
c0019d03:	5e                   	pop    esi
c0019d04:	c3                   	ret    
c0019d05:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0019d0a:	74 bb                	je     c0019cc7 <sysCallTTYName(regs*)+0x16>
c0019d0c:	83 ec 0c             	sub    esp,0xc
c0019d0f:	50                   	push   eax
c0019d10:	e8 f2 73 ff ff       	call   c0011107 <getFromFileDescriptor(int)>
c0019d15:	83 c4 10             	add    esp,0x10
c0019d18:	89 c3                	mov    ebx,eax
c0019d1a:	85 db                	test   ebx,ebx
c0019d1c:	75 bb                	jne    c0019cd9 <sysCallTTYName(regs*)+0x28>
c0019d1e:	59                   	pop    ecx
c0019d1f:	b8 01 00 00 00       	mov    eax,0x1
c0019d24:	31 d2                	xor    edx,edx
c0019d26:	5b                   	pop    ebx
c0019d27:	5e                   	pop    esi
c0019d28:	c3                   	ret    
c0019d29:	59                   	pop    ecx
c0019d2a:	b8 02 00 00 00       	mov    eax,0x2
c0019d2f:	31 d2                	xor    edx,edx
c0019d31:	5b                   	pop    ebx
c0019d32:	5e                   	pop    esi
c0019d33:	c3                   	ret    

c0019d34 <sysCallGetEnv(regs*)>:
c0019d34:	83 ec 0c             	sub    esp,0xc
c0019d37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d3b:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0019d3e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0019d41:	85 c9                	test   ecx,ecx
c0019d43:	75 22                	jne    c0019d67 <sysCallGetEnv(regs*)+0x33>
c0019d45:	85 d2                	test   edx,edx
c0019d47:	74 08                	je     c0019d51 <sysCallGetEnv(regs*)+0x1d>
c0019d49:	31 c0                	xor    eax,eax
c0019d4b:	31 d2                	xor    edx,edx
c0019d4d:	83 c4 0c             	add    esp,0xc
c0019d50:	c3                   	ret    
c0019d51:	83 ec 0c             	sub    esp,0xc
c0019d54:	68 cc 84 02 c0       	push   0xc00284cc
c0019d59:	e8 3c 69 fe ff       	call   c000069a <strlen>
c0019d5e:	83 c4 10             	add    esp,0x10
c0019d61:	31 d2                	xor    edx,edx
c0019d63:	83 c4 0c             	add    esp,0xc
c0019d66:	c3                   	ret    
c0019d67:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0019d6a:	85 d2                	test   edx,edx
c0019d6c:	74 05                	je     c0019d73 <sysCallGetEnv(regs*)+0x3f>
c0019d6e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0019d71:	eb d6                	jmp    c0019d49 <sysCallGetEnv(regs*)+0x15>
c0019d73:	83 ec 08             	sub    esp,0x8
c0019d76:	68 cc 84 02 c0       	push   0xc00284cc
c0019d7b:	50                   	push   eax
c0019d7c:	e8 9b 69 fe ff       	call   c000071c <strcpy>
c0019d81:	83 c4 10             	add    esp,0x10
c0019d84:	eb c3                	jmp    c0019d49 <sysCallGetEnv(regs*)+0x15>

c0019d86 <sysCallUSleep(regs*)>:
c0019d86:	83 ec 14             	sub    esp,0x14
c0019d89:	b8 e8 03 00 00       	mov    eax,0x3e8
c0019d8e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019d92:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c0019d99:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c0019d9c:	01 ca                	add    edx,ecx
c0019d9e:	52                   	push   edx
c0019d9f:	50                   	push   eax
c0019da0:	e8 9d 21 00 00       	call   c001bf42 <nanoSleep(unsigned long long)>
c0019da5:	31 c0                	xor    eax,eax
c0019da7:	31 d2                	xor    edx,edx
c0019da9:	83 c4 1c             	add    esp,0x1c
c0019dac:	c3                   	ret    

c0019dad <sysCallSpawn(regs*)>:
c0019dad:	56                   	push   esi
c0019dae:	53                   	push   ebx
c0019daf:	53                   	push   ebx
c0019db0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019db4:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0019db7:	85 f6                	test   esi,esi
c0019db9:	75 08                	jne    c0019dc3 <sysCallSpawn(regs*)+0x16>
c0019dbb:	59                   	pop    ecx
c0019dbc:	31 c0                	xor    eax,eax
c0019dbe:	31 d2                	xor    edx,edx
c0019dc0:	5b                   	pop    ebx
c0019dc1:	5e                   	pop    esi
c0019dc2:	c3                   	ret    
c0019dc3:	83 ec 0c             	sub    esp,0xc
c0019dc6:	68 3b 07 00 00       	push   0x73b
c0019dcb:	e8 70 83 ff ff       	call   c0012140 <operator new(unsigned long)>
c0019dd0:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0019dd3:	89 c6                	mov    esi,eax
c0019dd5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019dda:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019ddd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0019de0:	56                   	push   esi
c0019de1:	e8 bc 18 00 00       	call   c001b6a2 <Process::Process(char const*, Process*, char**)>
c0019de6:	83 c4 20             	add    esp,0x20
c0019de9:	80 be 3a 07 00 00 00 	cmp    BYTE PTR [esi+0x73a],0x0
c0019df0:	75 c9                	jne    c0019dbb <sysCallSpawn(regs*)+0xe>
c0019df2:	83 ec 0c             	sub    esp,0xc
c0019df5:	56                   	push   esi
c0019df6:	e8 0d 1e 00 00       	call   c001bc08 <Process::createUserThread()>
c0019dfb:	8b 06                	mov    eax,DWORD PTR [esi]
c0019dfd:	83 c4 10             	add    esp,0x10
c0019e00:	99                   	cdq    
c0019e01:	59                   	pop    ecx
c0019e02:	5b                   	pop    ebx
c0019e03:	5e                   	pop    esi
c0019e04:	c3                   	ret    

c0019e05 <sysAppSettings(regs*)>:
c0019e05:	53                   	push   ebx
c0019e06:	83 ec 08             	sub    esp,0x8
c0019e09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e0d:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0019e10:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c0019e16:	25 e0 1f 00 00       	and    eax,0x1fe0
c0019e1b:	66 3d c0 09          	cmp    ax,0x9c0
c0019e1f:	75 2f                	jne    c0019e50 <sysAppSettings(regs*)+0x4b>
c0019e21:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c0019e27:	83 e0 1f             	and    eax,0x1f
c0019e2a:	3c 01                	cmp    al,0x1
c0019e2c:	74 2e                	je     c0019e5c <sysAppSettings(regs*)+0x57>
c0019e2e:	3c 07                	cmp    al,0x7
c0019e30:	0f 84 bd 00 00 00    	je     c0019ef3 <sysAppSettings(regs*)+0xee>
c0019e36:	84 c0                	test   al,al
c0019e38:	0f 84 dc 00 00 00    	je     c0019f1a <sysAppSettings(regs*)+0x115>
c0019e3e:	3c 08                	cmp    al,0x8
c0019e40:	74 6d                	je     c0019eaf <sysAppSettings(regs*)+0xaa>
c0019e42:	0f b6 c0             	movzx  eax,al
c0019e45:	83 c4 08             	add    esp,0x8
c0019e48:	05 e8 03 00 00       	add    eax,0x3e8
c0019e4d:	5b                   	pop    ebx
c0019e4e:	99                   	cdq    
c0019e4f:	c3                   	ret    
c0019e50:	b8 01 00 00 00       	mov    eax,0x1
c0019e55:	31 d2                	xor    edx,edx
c0019e57:	83 c4 08             	add    esp,0x8
c0019e5a:	5b                   	pop    ebx
c0019e5b:	c3                   	ret    
c0019e5c:	51                   	push   ecx
c0019e5d:	68 00 01 00 00       	push   0x100
c0019e62:	6a 00                	push   0x0
c0019e64:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019e69:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019e6c:	83 c0 0c             	add    eax,0xc
c0019e6f:	50                   	push   eax
c0019e70:	e8 08 68 fe ff       	call   c000067d <memset>
c0019e75:	83 c4 0c             	add    esp,0xc
c0019e78:	68 ff 00 00 00       	push   0xff
c0019e7d:	53                   	push   ebx
c0019e7e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019e83:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019e86:	83 c0 0c             	add    eax,0xc
c0019e89:	50                   	push   eax
c0019e8a:	e8 b8 67 fe ff       	call   c0000647 <memcpy>
c0019e8f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019e94:	5b                   	pop    ebx
c0019e95:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019e98:	5a                   	pop    edx
c0019e99:	8d 50 0c             	lea    edx,[eax+0xc]
c0019e9c:	52                   	push   edx
c0019e9d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ea3:	e8 26 64 ff ff       	call   c00102ce <VgaText::setTitle(char*)>
c0019ea8:	83 c4 10             	add    esp,0x10
c0019eab:	31 c0                	xor    eax,eax
c0019ead:	eb a6                	jmp    c0019e55 <sysAppSettings(regs*)+0x50>
c0019eaf:	83 ec 08             	sub    esp,0x8
c0019eb2:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0019eb8:	83 e0 0f             	and    eax,0xf
c0019ebb:	50                   	push   eax
c0019ebc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019ec1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019ec4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019eca:	e8 ef 63 ff ff       	call   c00102be <VgaText::setTitleColour(VgaColour)>
c0019ecf:	58                   	pop    eax
c0019ed0:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0019ed6:	5a                   	pop    edx
c0019ed7:	c1 e8 04             	shr    eax,0x4
c0019eda:	83 e0 0f             	and    eax,0xf
c0019edd:	50                   	push   eax
c0019ede:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019ee3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019ee6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019eec:	e8 bd 63 ff ff       	call   c00102ae <VgaText::setTitleTextColour(VgaColour)>
c0019ef1:	eb b5                	jmp    c0019ea8 <sysAppSettings(regs*)+0xa3>
c0019ef3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019ef8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019efb:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0019f01:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c0019f07:	c0 e8 06             	shr    al,0x6
c0019f0a:	83 e0 01             	and    eax,0x1
c0019f0d:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c0019f13:	31 c0                	xor    eax,eax
c0019f15:	e9 3b ff ff ff       	jmp    c0019e55 <sysAppSettings(regs*)+0x50>
c0019f1a:	b8 02 00 00 00       	mov    eax,0x2
c0019f1f:	e9 31 ff ff ff       	jmp    c0019e55 <sysAppSettings(regs*)+0x50>

c0019f24 <sysSetFatAttrib(regs*)>:
c0019f24:	57                   	push   edi
c0019f25:	56                   	push   esi
c0019f26:	53                   	push   ebx
c0019f27:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019f2b:	83 ec 0c             	sub    esp,0xc
c0019f2e:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019f31:	68 14 01 00 00       	push   0x114
c0019f36:	e8 05 82 ff ff       	call   c0012140 <operator new(unsigned long)>
c0019f3b:	83 c4 0c             	add    esp,0xc
c0019f3e:	89 c3                	mov    ebx,eax
c0019f40:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019f45:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019f48:	57                   	push   edi
c0019f49:	53                   	push   ebx
c0019f4a:	e8 0f 88 ff ff       	call   c001275e <File::File(char const*, Process*)>
c0019f4f:	83 c4 0c             	add    esp,0xc
c0019f52:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019f55:	0f b6 d4             	movzx  edx,ah
c0019f58:	0f b6 c0             	movzx  eax,al
c0019f5b:	52                   	push   edx
c0019f5c:	50                   	push   eax
c0019f5d:	53                   	push   ebx
c0019f5e:	e8 71 8a ff ff       	call   c00129d4 <File::chfatattr(unsigned char, unsigned char)>
c0019f63:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f66:	89 c6                	mov    esi,eax
c0019f68:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019f6a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019f6d:	83 c4 10             	add    esp,0x10
c0019f70:	31 c0                	xor    eax,eax
c0019f72:	5b                   	pop    ebx
c0019f73:	85 f6                	test   esi,esi
c0019f75:	5e                   	pop    esi
c0019f76:	0f 95 c0             	setne  al
c0019f79:	5f                   	pop    edi
c0019f7a:	31 d2                	xor    edx,edx
c0019f7c:	f7 d8                	neg    eax
c0019f7e:	83 d2 00             	adc    edx,0x0
c0019f81:	f7 da                	neg    edx
c0019f83:	c3                   	ret    

c0019f84 <sysPanic(regs*)>:
c0019f84:	83 ec 18             	sub    esp,0x18
c0019f87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019f8b:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0019f8e:	e8 14 eb ff ff       	call   c0018aa7 <Krnl::panic(char const*)>
c0019f93:	c7 04 24 83 85 02 c0 	mov    DWORD PTR [esp],0xc0028583
c0019f9a:	e8 08 eb ff ff       	call   c0018aa7 <Krnl::panic(char const*)>
c0019f9f:	b8 01 00 00 00       	mov    eax,0x1
c0019fa4:	31 d2                	xor    edx,edx
c0019fa6:	83 c4 1c             	add    esp,0x1c
c0019fa9:	c3                   	ret    

c0019faa <sysPipe(regs*)>:
c0019faa:	57                   	push   edi
c0019fab:	56                   	push   esi
c0019fac:	53                   	push   ebx
c0019fad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fb1:	83 ec 0c             	sub    esp,0xc
c0019fb4:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0019fb7:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0019fba:	6a 20                	push   0x20
c0019fbc:	e8 7f 81 ff ff       	call   c0012140 <operator new(unsigned long)>
c0019fc1:	89 c3                	mov    ebx,eax
c0019fc3:	58                   	pop    eax
c0019fc4:	5a                   	pop    edx
c0019fc5:	68 00 50 00 00       	push   0x5000
c0019fca:	53                   	push   ebx
c0019fcb:	e8 3c 5c ff ff       	call   c000fc0c <Pipe::Pipe(int)>
c0019fd0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019fd3:	e8 7a 6e ff ff       	call   c0010e52 <UnixFile::getFileDescriptor()>
c0019fd8:	89 07                	mov    DWORD PTR [edi],eax
c0019fda:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019fdd:	e8 70 6e ff ff       	call   c0010e52 <UnixFile::getFileDescriptor()>
c0019fe2:	83 c4 10             	add    esp,0x10
c0019fe5:	89 06                	mov    DWORD PTR [esi],eax
c0019fe7:	31 d2                	xor    edx,edx
c0019fe9:	5b                   	pop    ebx
c0019fea:	31 c0                	xor    eax,eax
c0019fec:	5e                   	pop    esi
c0019fed:	5f                   	pop    edi
c0019fee:	c3                   	ret    

c0019fef <sysGetUnixTime(regs*)>:
c0019fef:	a1 28 a6 02 c0       	mov    eax,ds:0xc002a628
c0019ff4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019ffa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019ffe:	e9 23 91 ff ff       	jmp    c0013126 <Clock::timeInSecondsLocal()>

c001a003 <string_ends_with(char const*, char const*)>:
c001a003:	57                   	push   edi
c001a004:	56                   	push   esi
c001a005:	53                   	push   ebx
c001a006:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a00a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a00e:	83 ec 0c             	sub    esp,0xc
c001a011:	53                   	push   ebx
c001a012:	e8 83 66 fe ff       	call   c000069a <strlen>
c001a017:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a01a:	89 c6                	mov    esi,eax
c001a01c:	e8 79 66 fe ff       	call   c000069a <strlen>
c001a021:	83 c4 10             	add    esp,0x10
c001a024:	39 c6                	cmp    esi,eax
c001a026:	7d 06                	jge    c001a02e <string_ends_with(char const*, char const*)+0x2b>
c001a028:	5b                   	pop    ebx
c001a029:	31 c0                	xor    eax,eax
c001a02b:	5e                   	pop    esi
c001a02c:	5f                   	pop    edi
c001a02d:	c3                   	ret    
c001a02e:	83 ec 08             	sub    esp,0x8
c001a031:	29 c6                	sub    esi,eax
c001a033:	57                   	push   edi
c001a034:	01 f3                	add    ebx,esi
c001a036:	53                   	push   ebx
c001a037:	e8 31 67 fe ff       	call   c000076d <strcmp>
c001a03c:	83 c4 10             	add    esp,0x10
c001a03f:	85 c0                	test   eax,eax
c001a041:	5b                   	pop    ebx
c001a042:	0f 94 c0             	sete   al
c001a045:	5e                   	pop    esi
c001a046:	0f b6 c0             	movzx  eax,al
c001a049:	5f                   	pop    edi
c001a04a:	c3                   	ret    

c001a04b <sysCallOpen(regs*)>:
c001a04b:	56                   	push   esi
c001a04c:	53                   	push   ebx
c001a04d:	81 ec 04 01 00 00    	sub    esp,0x104
c001a053:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001a05a:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001a05d:	85 c9                	test   ecx,ecx
c001a05f:	0f 84 b3 00 00 00    	je     c001a118 <sysCallOpen(regs*)+0xcd>
c001a065:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001a068:	85 c0                	test   eax,eax
c001a06a:	0f 84 a8 00 00 00    	je     c001a118 <sysCallOpen(regs*)+0xcd>
c001a070:	52                   	push   edx
c001a071:	68 92 85 02 c0       	push   0xc0028592
c001a076:	50                   	push   eax
c001a077:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001a07b:	56                   	push   esi
c001a07c:	e8 33 85 ff ff       	call   c00125b4 <standardiseFiles(char*, char const*, char const*)>
c001a081:	89 34 24             	mov    DWORD PTR [esp],esi
c001a084:	e8 11 66 fe ff       	call   c000069a <strlen>
c001a089:	83 c4 10             	add    esp,0x10
c001a08c:	48                   	dec    eax
c001a08d:	74 1d                	je     c001a0ac <sysCallOpen(regs*)+0x61>
c001a08f:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001a092:	eb 0f                	jmp    c001a0a3 <sysCallOpen(regs*)+0x58>
c001a094:	80 fa 3a             	cmp    dl,0x3a
c001a097:	74 0f                	je     c001a0a8 <sysCallOpen(regs*)+0x5d>
c001a099:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001a09d:	48                   	dec    eax
c001a09e:	74 0c                	je     c001a0ac <sysCallOpen(regs*)+0x61>
c001a0a0:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001a0a3:	80 fa 2e             	cmp    dl,0x2e
c001a0a6:	75 ec                	jne    c001a094 <sysCallOpen(regs*)+0x49>
c001a0a8:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001a0ac:	83 ec 08             	sub    esp,0x8
c001a0af:	68 96 85 02 c0       	push   0xc0028596
c001a0b4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a0b7:	e8 47 ff ff ff       	call   c001a003 <string_ends_with(char const*, char const*)>
c001a0bc:	83 c4 10             	add    esp,0x10
c001a0bf:	85 c0                	test   eax,eax
c001a0c1:	75 17                	jne    c001a0da <sysCallOpen(regs*)+0x8f>
c001a0c3:	83 ec 08             	sub    esp,0x8
c001a0c6:	68 b7 85 02 c0       	push   0xc00285b7
c001a0cb:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a0ce:	e8 30 ff ff ff       	call   c001a003 <string_ends_with(char const*, char const*)>
c001a0d3:	83 c4 10             	add    esp,0x10
c001a0d6:	85 c0                	test   eax,eax
c001a0d8:	74 51                	je     c001a12b <sysCallOpen(regs*)+0xe0>
c001a0da:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a0dd:	83 ec 08             	sub    esp,0x8
c001a0e0:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001a0e6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a0ed:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a0f0:	ff 30                	push   DWORD PTR [eax]
c001a0f2:	68 9b 85 02 c0       	push   0xc002859b
c001a0f7:	e8 33 81 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c001a0fc:	c7 04 24 aa 85 02 c0 	mov    DWORD PTR [esp],0xc00285aa
c001a103:	e8 27 81 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c001a108:	83 c4 10             	add    esp,0x10
c001a10b:	81 c4 04 01 00 00    	add    esp,0x104
c001a111:	31 c0                	xor    eax,eax
c001a113:	31 d2                	xor    edx,edx
c001a115:	5b                   	pop    ebx
c001a116:	5e                   	pop    esi
c001a117:	c3                   	ret    
c001a118:	81 c4 04 01 00 00    	add    esp,0x104
c001a11e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a123:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a128:	5b                   	pop    ebx
c001a129:	5e                   	pop    esi
c001a12a:	c3                   	ret    
c001a12b:	83 ec 08             	sub    esp,0x8
c001a12e:	68 97 85 02 c0       	push   0xc0028597
c001a133:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a136:	e8 32 66 fe ff       	call   c000076d <strcmp>
c001a13b:	83 c4 10             	add    esp,0x10
c001a13e:	85 c0                	test   eax,eax
c001a140:	74 98                	je     c001a0da <sysCallOpen(regs*)+0x8f>
c001a142:	83 ec 08             	sub    esp,0x8
c001a145:	68 96 85 02 c0       	push   0xc0028596
c001a14a:	56                   	push   esi
c001a14b:	e8 b3 fe ff ff       	call   c001a003 <string_ends_with(char const*, char const*)>
c001a150:	83 c4 10             	add    esp,0x10
c001a153:	85 c0                	test   eax,eax
c001a155:	75 83                	jne    c001a0da <sysCallOpen(regs*)+0x8f>
c001a157:	83 ec 08             	sub    esp,0x8
c001a15a:	68 bc 85 02 c0       	push   0xc00285bc
c001a15f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a162:	e8 9c fe ff ff       	call   c001a003 <string_ends_with(char const*, char const*)>
c001a167:	83 c4 10             	add    esp,0x10
c001a16a:	85 c0                	test   eax,eax
c001a16c:	0f 85 d1 00 00 00    	jne    c001a243 <sysCallOpen(regs*)+0x1f8>
c001a172:	83 ec 08             	sub    esp,0x8
c001a175:	68 c1 85 02 c0       	push   0xc00285c1
c001a17a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a17d:	e8 81 fe ff ff       	call   c001a003 <string_ends_with(char const*, char const*)>
c001a182:	83 c4 10             	add    esp,0x10
c001a185:	85 c0                	test   eax,eax
c001a187:	0f 85 b6 00 00 00    	jne    c001a243 <sysCallOpen(regs*)+0x1f8>
c001a18d:	83 ec 08             	sub    esp,0x8
c001a190:	68 bd 85 02 c0       	push   0xc00285bd
c001a195:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a198:	e8 d0 65 fe ff       	call   c000076d <strcmp>
c001a19d:	83 c4 10             	add    esp,0x10
c001a1a0:	85 c0                	test   eax,eax
c001a1a2:	0f 84 9b 00 00 00    	je     c001a243 <sysCallOpen(regs*)+0x1f8>
c001a1a8:	83 ec 08             	sub    esp,0x8
c001a1ab:	68 bc 85 02 c0       	push   0xc00285bc
c001a1b0:	56                   	push   esi
c001a1b1:	e8 4d fe ff ff       	call   c001a003 <string_ends_with(char const*, char const*)>
c001a1b6:	83 c4 10             	add    esp,0x10
c001a1b9:	85 c0                	test   eax,eax
c001a1bb:	0f 85 82 00 00 00    	jne    c001a243 <sysCallOpen(regs*)+0x1f8>
c001a1c1:	83 ec 0c             	sub    esp,0xc
c001a1c4:	68 14 01 00 00       	push   0x114
c001a1c9:	e8 72 7f ff ff       	call   c0012140 <operator new(unsigned long)>
c001a1ce:	83 c4 0c             	add    esp,0xc
c001a1d1:	89 c6                	mov    esi,eax
c001a1d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a1d8:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a1db:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a1de:	56                   	push   esi
c001a1df:	e8 7a 85 ff ff       	call   c001275e <File::File(char const*, Process*)>
c001a1e4:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001a1e7:	83 c4 10             	add    esp,0x10
c001a1ea:	0f b6 c2             	movzx  eax,dl
c001a1ed:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001a1f0:	89 d0                	mov    eax,edx
c001a1f2:	83 e0 01             	and    eax,0x1
c001a1f5:	f6 c2 02             	test   dl,0x2
c001a1f8:	74 03                	je     c001a1fd <sysCallOpen(regs*)+0x1b2>
c001a1fa:	83 c8 02             	or     eax,0x2
c001a1fd:	f6 c2 04             	test   dl,0x4
c001a200:	74 03                	je     c001a205 <sysCallOpen(regs*)+0x1ba>
c001a202:	83 c8 04             	or     eax,0x4
c001a205:	f6 c2 08             	test   dl,0x8
c001a208:	74 03                	je     c001a20d <sysCallOpen(regs*)+0x1c2>
c001a20a:	83 c8 0a             	or     eax,0xa
c001a20d:	83 e2 10             	and    edx,0x10
c001a210:	74 03                	je     c001a215 <sysCallOpen(regs*)+0x1ca>
c001a212:	83 c8 12             	or     eax,0x12
c001a215:	83 ec 08             	sub    esp,0x8
c001a218:	50                   	push   eax
c001a219:	56                   	push   esi
c001a21a:	e8 a3 85 ff ff       	call   c00127c2 <File::open(FileOpenMode)>
c001a21f:	83 c4 10             	add    esp,0x10
c001a222:	85 c0                	test   eax,eax
c001a224:	0f 85 ee fe ff ff    	jne    c001a118 <sysCallOpen(regs*)+0xcd>
c001a22a:	83 ec 0c             	sub    esp,0xc
c001a22d:	56                   	push   esi
c001a22e:	e8 1f 6c ff ff       	call   c0010e52 <UnixFile::getFileDescriptor()>
c001a233:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001a236:	89 02                	mov    DWORD PTR [edx],eax
c001a238:	c1 f8 1f             	sar    eax,0x1f
c001a23b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001a23e:	e9 c5 fe ff ff       	jmp    c001a108 <sysCallOpen(regs*)+0xbd>
c001a243:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a246:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001a24c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a253:	e9 b3 fe ff ff       	jmp    c001a10b <sysCallOpen(regs*)+0xc0>

c001a258 <setupSystemCalls()>:
c001a258:	c7 05 40 b1 02 c0 b4 94 01 c0 	mov    DWORD PTR ds:0xc002b140,0xc00194b4
c001a262:	c7 05 44 b1 02 c0 e2 92 01 c0 	mov    DWORD PTR ds:0xc002b144,0xc00192e2
c001a26c:	c7 05 48 b1 02 c0 f7 93 01 c0 	mov    DWORD PTR ds:0xc002b148,0xc00193f7
c001a276:	c7 05 4c b1 02 c0 4c 94 01 c0 	mov    DWORD PTR ds:0xc002b14c,0xc001944c
c001a280:	c7 05 50 b1 02 c0 8f 93 01 c0 	mov    DWORD PTR ds:0xc002b150,0xc001938f
c001a28a:	c7 05 54 b1 02 c0 ce 94 01 c0 	mov    DWORD PTR ds:0xc002b154,0xc00194ce
c001a294:	c7 05 58 b1 02 c0 73 96 01 c0 	mov    DWORD PTR ds:0xc002b158,0xc0019673
c001a29e:	c7 05 5c b1 02 c0 92 96 01 c0 	mov    DWORD PTR ds:0xc002b15c,0xc0019692
c001a2a8:	c7 05 64 b1 02 c0 f3 99 01 c0 	mov    DWORD PTR ds:0xc002b164,0xc00199f3
c001a2b2:	c7 05 60 b1 02 c0 4b a0 01 c0 	mov    DWORD PTR ds:0xc002b160,0xc001a04b
c001a2bc:	c7 05 68 b1 02 c0 7b 9a 01 c0 	mov    DWORD PTR ds:0xc002b168,0xc0019a7b
c001a2c6:	c7 05 6c b1 02 c0 f1 96 01 c0 	mov    DWORD PTR ds:0xc002b16c,0xc00196f1
c001a2d0:	c7 05 70 b1 02 c0 da 94 01 c0 	mov    DWORD PTR ds:0xc002b170,0xc00194da
c001a2da:	c7 05 74 b1 02 c0 df 94 01 c0 	mov    DWORD PTR ds:0xc002b174,0xc00194df
c001a2e4:	c7 05 78 b1 02 c0 e8 9a 01 c0 	mov    DWORD PTR ds:0xc002b178,0xc0019ae8
c001a2ee:	c7 05 7c b1 02 c0 41 9b 01 c0 	mov    DWORD PTR ds:0xc002b17c,0xc0019b41
c001a2f8:	c7 05 80 b1 02 c0 d9 97 01 c0 	mov    DWORD PTR ds:0xc002b180,0xc00197d9
c001a302:	c7 05 84 b1 02 c0 42 98 01 c0 	mov    DWORD PTR ds:0xc002b184,0xc0019842
c001a30c:	c7 05 88 b1 02 c0 70 99 01 c0 	mov    DWORD PTR ds:0xc002b188,0xc0019970
c001a316:	c7 05 8c b1 02 c0 e4 94 01 c0 	mov    DWORD PTR ds:0xc002b18c,0xc00194e4
c001a320:	c7 05 90 b1 02 c0 a7 9b 01 c0 	mov    DWORD PTR ds:0xc002b190,0xc0019ba7
c001a32a:	c7 05 94 b1 02 c0 ee 94 01 c0 	mov    DWORD PTR ds:0xc002b194,0xc00194ee
c001a334:	c7 05 98 b1 02 c0 f9 94 01 c0 	mov    DWORD PTR ds:0xc002b198,0xc00194f9
c001a33e:	c7 05 9c b1 02 c0 c1 9b 01 c0 	mov    DWORD PTR ds:0xc002b19c,0xc0019bc1
c001a348:	c7 05 a0 b1 02 c0 13 9c 01 c0 	mov    DWORD PTR ds:0xc002b1a0,0xc0019c13
c001a352:	c7 05 a4 b1 02 c0 04 95 01 c0 	mov    DWORD PTR ds:0xc002b1a4,0xc0019504
c001a35c:	c7 05 a8 b1 02 c0 65 9c 01 c0 	mov    DWORD PTR ds:0xc002b1a8,0xc0019c65
c001a366:	c7 05 ac b1 02 c0 ae 96 01 c0 	mov    DWORD PTR ds:0xc002b1ac,0xc00196ae
c001a370:	c7 05 b0 b1 02 c0 b1 9c 01 c0 	mov    DWORD PTR ds:0xc002b1b0,0xc0019cb1
c001a37a:	c7 05 b4 b1 02 c0 7f 97 01 c0 	mov    DWORD PTR ds:0xc002b1b4,0xc001977f
c001a384:	c7 05 b8 b1 02 c0 86 9d 01 c0 	mov    DWORD PTR ds:0xc002b1b8,0xc0019d86
c001a38e:	c7 05 bc b1 02 c0 bf 98 01 c0 	mov    DWORD PTR ds:0xc002b1bc,0xc00198bf
c001a398:	c7 05 c0 b1 02 c0 ad 9d 01 c0 	mov    DWORD PTR ds:0xc002b1c0,0xc0019dad
c001a3a2:	c7 05 c4 b1 02 c0 34 9d 01 c0 	mov    DWORD PTR ds:0xc002b1c4,0xc0019d34
c001a3ac:	c7 05 c8 b1 02 c0 05 9e 01 c0 	mov    DWORD PTR ds:0xc002b1c8,0xc0019e05
c001a3b6:	c7 05 cc b1 02 c0 14 95 01 c0 	mov    DWORD PTR ds:0xc002b1cc,0xc0019514
c001a3c0:	c7 05 d0 b1 02 c0 7e 95 01 c0 	mov    DWORD PTR ds:0xc002b1d0,0xc001957e
c001a3ca:	c7 05 d4 b1 02 c0 c4 95 01 c0 	mov    DWORD PTR ds:0xc002b1d4,0xc00195c4
c001a3d4:	c7 05 d8 b1 02 c0 24 9f 01 c0 	mov    DWORD PTR ds:0xc002b1d8,0xc0019f24
c001a3de:	c7 05 dc b1 02 c0 84 9f 01 c0 	mov    DWORD PTR ds:0xc002b1dc,0xc0019f84
c001a3e8:	c7 05 e0 b1 02 c0 15 96 01 c0 	mov    DWORD PTR ds:0xc002b1e0,0xc0019615
c001a3f2:	c7 05 e4 b1 02 c0 aa 9f 01 c0 	mov    DWORD PTR ds:0xc002b1e4,0xc0019faa
c001a3fc:	c7 05 e8 b1 02 c0 ef 9f 01 c0 	mov    DWORD PTR ds:0xc002b1e8,0xc0019fef
c001a406:	c7 05 ec b1 02 c0 fa 92 01 c0 	mov    DWORD PTR ds:0xc002b1ec,0xc00192fa
c001a410:	c3                   	ret    

c001a411 <systemCall(regs*, void*)>:
c001a411:	53                   	push   ebx
c001a412:	83 ec 08             	sub    esp,0x8
c001a415:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a419:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001a41c:	83 f8 7f             	cmp    eax,0x7f
c001a41f:	77 16                	ja     c001a437 <systemCall(regs*, void*)+0x26>
c001a421:	8b 14 85 40 b1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4ec0]
c001a428:	85 d2                	test   edx,edx
c001a42a:	74 0b                	je     c001a437 <systemCall(regs*, void*)+0x26>
c001a42c:	83 ec 0c             	sub    esp,0xc
c001a42f:	53                   	push   ebx
c001a430:	ff d2                	call   edx
c001a432:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001a435:	eb 0d                	jmp    c001a444 <systemCall(regs*, void*)+0x33>
c001a437:	52                   	push   edx
c001a438:	52                   	push   edx
c001a439:	50                   	push   eax
c001a43a:	68 c6 85 02 c0       	push   0xc00285c6
c001a43f:	e8 eb 7d ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c001a444:	83 c4 10             	add    esp,0x10
c001a447:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001a44c:	31 d2                	xor    edx,edx
c001a44e:	83 c4 08             	add    esp,0x8
c001a451:	5b                   	pop    ebx
c001a452:	c3                   	ret    

c001a453 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001a453:	55                   	push   ebp
c001a454:	89 e5                	mov    ebp,esp
c001a456:	57                   	push   edi
c001a457:	56                   	push   esi
c001a458:	53                   	push   ebx
c001a459:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001a45f:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001a462:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c001a465:	85 c0                	test   eax,eax
c001a467:	0f 95 c1             	setne  cl
c001a46a:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001a46e:	0f 94 c2             	sete   dl
c001a471:	84 d1                	test   cl,dl
c001a473:	74 26                	je     c001a49b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001a475:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c001a47c:	74 1d                	je     c001a49b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001a47e:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001a481:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c001a487:	89 d6                	mov    esi,edx
c001a489:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001a48f:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c001a495:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001a498:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c001a49b:	83 ec 0c             	sub    esp,0xc
c001a49e:	05 ff 0f 00 00       	add    eax,0xfff
c001a4a3:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001a4a6:	6a 01                	push   0x1
c001a4a8:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c001a4ae:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c001a4b4:	e8 a4 6d ff ff       	call   c001125d <Virt::allocateKernelVirtualPages(int)>
c001a4b9:	83 c4 10             	add    esp,0x10
c001a4bc:	89 c6                	mov    esi,eax
c001a4be:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c001a4c4:	0f 86 21 01 00 00    	jbe    c001a5eb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c001a4ca:	c1 eb 0c             	shr    ebx,0xc
c001a4cd:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c001a4d7:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c001a4dd:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001a4e0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001a4e3:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c001a4e9:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c001a4ec:	29 d8                	sub    eax,ebx
c001a4ee:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c001a4f4:	0f 83 f4 00 00 00    	jae    c001a5ee <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c001a4fa:	83 ec 0c             	sub    esp,0xc
c001a4fd:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c001a503:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001a506:	3d 00 10 00 00       	cmp    eax,0x1000
c001a50b:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001a50d:	52                   	push   edx
c001a50e:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c001a514:	52                   	push   edx
c001a515:	76 05                	jbe    c001a51c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c001a517:	b8 00 10 00 00       	mov    eax,0x1000
c001a51c:	31 d2                	xor    edx,edx
c001a51e:	52                   	push   edx
c001a51f:	50                   	push   eax
c001a520:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001a523:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001a526:	83 c4 20             	add    esp,0x20
c001a529:	85 c0                	test   eax,eax
c001a52b:	74 1f                	je     c001a54c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c001a52d:	51                   	push   ecx
c001a52e:	51                   	push   ecx
c001a52f:	50                   	push   eax
c001a530:	68 da 85 02 c0       	push   0xc00285da
c001a535:	e8 f5 7c ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c001a53a:	89 34 24             	mov    DWORD PTR [esp],esi
c001a53d:	e8 75 70 ff ff       	call   c00115b7 <Virt::freeKernelVirtualPages(unsigned long)>
c001a542:	83 c4 10             	add    esp,0x10
c001a545:	31 c0                	xor    eax,eax
c001a547:	e9 7c 01 00 00       	jmp    c001a6c8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c001a54c:	e8 a9 14 00 00       	call   c001b9fa <lockScheduler()>
c001a551:	e8 7a 51 ff ff       	call   c000f6d0 <Phys::allocatePage()>
c001a556:	6a 07                	push   0x7
c001a558:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c001a55e:	56                   	push   esi
c001a55f:	50                   	push   eax
c001a560:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001a566:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001a569:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001a56f:	e8 bc 73 ff ff       	call   c0011930 <VAS::mapPage(unsigned long, unsigned long, int)>
c001a574:	83 c4 0c             	add    esp,0xc
c001a577:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001a57d:	6a 00                	push   0x0
c001a57f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001a585:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001a588:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001a58e:	e8 fb 71 ff ff       	call   c001178e <VAS::mapOtherVASIn(bool, VAS*)>
c001a593:	58                   	pop    eax
c001a594:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c001a59a:	5a                   	pop    edx
c001a59b:	68 07 04 00 00       	push   0x407
c001a5a0:	53                   	push   ebx
c001a5a1:	81 c3 00 10 00 00    	add    ebx,0x1000
c001a5a7:	50                   	push   eax
c001a5a8:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001a5ae:	6a 00                	push   0x0
c001a5b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a5b5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a5b8:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001a5be:	e8 23 77 ff ff       	call   c0011ce6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001a5c3:	83 c4 1c             	add    esp,0x1c
c001a5c6:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c001a5cc:	68 00 10 00 00       	push   0x1000
c001a5d1:	50                   	push   eax
c001a5d2:	56                   	push   esi
c001a5d3:	e8 6f 60 fe ff       	call   c0000647 <memcpy>
c001a5d8:	e8 1f 14 00 00       	call   c001b9fc <unlockScheduler()>
c001a5dd:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c001a5e3:	83 c4 10             	add    esp,0x10
c001a5e6:	e9 f5 fe ff ff       	jmp    c001a4e0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c001a5eb:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001a5ee:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c001a5f8:	0f 86 bc 00 00 00    	jbe    c001a6ba <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c001a5fe:	e8 f7 13 00 00       	call   c001b9fa <lockScheduler()>
c001a603:	51                   	push   ecx
c001a604:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001a60a:	6a 00                	push   0x0
c001a60c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a611:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a614:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001a61a:	e8 6f 71 ff ff       	call   c001178e <VAS::mapOtherVASIn(bool, VAS*)>
c001a61f:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c001a625:	83 c4 10             	add    esp,0x10
c001a628:	c1 e8 0c             	shr    eax,0xc
c001a62b:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c001a635:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c001a63b:	e8 90 50 ff ff       	call   c000f6d0 <Phys::allocatePage()>
c001a640:	6a 07                	push   0x7
c001a642:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c001a648:	56                   	push   esi
c001a649:	50                   	push   eax
c001a64a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001a650:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001a653:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c001a659:	e8 d2 72 ff ff       	call   c0011930 <VAS::mapPage(unsigned long, unsigned long, int)>
c001a65e:	58                   	pop    eax
c001a65f:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c001a665:	5a                   	pop    edx
c001a666:	68 07 04 00 00       	push   0x407
c001a66b:	53                   	push   ebx
c001a66c:	81 c3 00 10 00 00    	add    ebx,0x1000
c001a672:	50                   	push   eax
c001a673:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001a679:	6a 00                	push   0x0
c001a67b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a680:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a683:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001a689:	e8 58 76 ff ff       	call   c0011ce6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001a68e:	83 c4 1c             	add    esp,0x1c
c001a691:	68 00 10 00 00       	push   0x1000
c001a696:	6a 00                	push   0x0
c001a698:	56                   	push   esi
c001a699:	e8 df 5f fe ff       	call   c000067d <memset>
c001a69e:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c001a6a4:	83 c4 10             	add    esp,0x10
c001a6a7:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c001a6ad:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c001a6b3:	77 86                	ja     c001a63b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c001a6b5:	e8 42 13 00 00       	call   c001b9fc <unlockScheduler()>
c001a6ba:	83 ec 0c             	sub    esp,0xc
c001a6bd:	56                   	push   esi
c001a6be:	e8 f4 6e ff ff       	call   c00115b7 <Virt::freeKernelVirtualPages(unsigned long)>
c001a6c3:	83 c4 10             	add    esp,0x10
c001a6c6:	b0 01                	mov    al,0x1
c001a6c8:	8d 65 f4             	lea    esp,[ebp-0xc]
c001a6cb:	5b                   	pop    ebx
c001a6cc:	5e                   	pop    esi
c001a6cd:	5f                   	pop    edi
c001a6ce:	5d                   	pop    ebp
c001a6cf:	c3                   	ret    

c001a6d0 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001a6d0:	55                   	push   ebp
c001a6d1:	57                   	push   edi
c001a6d2:	56                   	push   esi
c001a6d3:	53                   	push   ebx
c001a6d4:	83 ec 48             	sub    esp,0x48
c001a6d7:	68 14 01 00 00       	push   0x114
c001a6dc:	e8 5f 7a ff ff       	call   c0012140 <operator new(unsigned long)>
c001a6e1:	83 c4 0c             	add    esp,0xc
c001a6e4:	89 c6                	mov    esi,eax
c001a6e6:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001a6ea:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001a6ee:	50                   	push   eax
c001a6ef:	e8 6a 80 ff ff       	call   c001275e <File::File(char const*, Process*)>
c001a6f4:	58                   	pop    eax
c001a6f5:	5a                   	pop    edx
c001a6f6:	6a 01                	push   0x1
c001a6f8:	56                   	push   esi
c001a6f9:	e8 c4 80 ff ff       	call   c00127c2 <File::open(FileOpenMode)>
c001a6fe:	83 c4 10             	add    esp,0x10
c001a701:	85 c0                	test   eax,eax
c001a703:	0f 85 47 01 00 00    	jne    c001a850 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001a709:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001a711:	83 ec 0c             	sub    esp,0xc
c001a714:	6a 34                	push   0x34
c001a716:	e8 0b 4a ff ff       	call   c000f126 <malloc>
c001a71b:	89 c3                	mov    ebx,eax
c001a71d:	58                   	pop    eax
c001a71e:	8b 06                	mov    eax,DWORD PTR [esi]
c001a720:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001a724:	57                   	push   edi
c001a725:	53                   	push   ebx
c001a726:	6a 00                	push   0x0
c001a728:	6a 34                	push   0x34
c001a72a:	56                   	push   esi
c001a72b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a72e:	83 c4 20             	add    esp,0x20
c001a731:	85 c0                	test   eax,eax
c001a733:	0f 85 17 01 00 00    	jne    c001a850 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001a739:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001a73f:	0f 85 0b 01 00 00    	jne    c001a850 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001a745:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a748:	85 c0                	test   eax,eax
c001a74a:	0f 84 00 01 00 00    	je     c001a850 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001a750:	31 d2                	xor    edx,edx
c001a752:	55                   	push   ebp
c001a753:	52                   	push   edx
c001a754:	50                   	push   eax
c001a755:	56                   	push   esi
c001a756:	e8 25 81 ff ff       	call   c0012880 <File::seek(unsigned long long)>
c001a75b:	83 c4 10             	add    esp,0x10
c001a75e:	85 c0                	test   eax,eax
c001a760:	0f 85 ea 00 00 00    	jne    c001a850 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001a766:	83 ec 0c             	sub    esp,0xc
c001a769:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001a76c:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001a770:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a774:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001a778:	0f af c2             	imul   eax,edx
c001a77b:	50                   	push   eax
c001a77c:	e8 a5 49 ff ff       	call   c000f126 <malloc>
c001a781:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a784:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a788:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a78a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a78e:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001a792:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001a796:	0f af c2             	imul   eax,edx
c001a799:	99                   	cdq    
c001a79a:	52                   	push   edx
c001a79b:	50                   	push   eax
c001a79c:	56                   	push   esi
c001a79d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001a7a0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001a7a3:	83 c4 20             	add    esp,0x20
c001a7a6:	85 c0                	test   eax,eax
c001a7a8:	0f 84 a2 00 00 00    	je     c001a850 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001a7ae:	31 d2                	xor    edx,edx
c001a7b0:	51                   	push   ecx
c001a7b1:	52                   	push   edx
c001a7b2:	50                   	push   eax
c001a7b3:	56                   	push   esi
c001a7b4:	e8 c7 80 ff ff       	call   c0012880 <File::seek(unsigned long long)>
c001a7b9:	83 c4 10             	add    esp,0x10
c001a7bc:	85 c0                	test   eax,eax
c001a7be:	0f 85 8c 00 00 00    	jne    c001a850 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001a7c4:	83 ec 0c             	sub    esp,0xc
c001a7c7:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001a7cb:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001a7cf:	31 ed                	xor    ebp,ebp
c001a7d1:	0f af c2             	imul   eax,edx
c001a7d4:	50                   	push   eax
c001a7d5:	e8 4c 49 ff ff       	call   c000f126 <malloc>
c001a7da:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a7dd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a7e1:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a7e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a7e7:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001a7eb:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001a7ef:	0f af c2             	imul   eax,edx
c001a7f2:	99                   	cdq    
c001a7f3:	52                   	push   edx
c001a7f4:	50                   	push   eax
c001a7f5:	56                   	push   esi
c001a7f6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001a7f9:	83 c4 20             	add    esp,0x20
c001a7fc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a804:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001a808:	0f 86 80 00 00 00    	jbe    c001a88e <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001a80e:	0f b7 fd             	movzx  edi,bp
c001a811:	c1 e7 05             	shl    edi,0x5
c001a814:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001a818:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001a81b:	75 6b                	jne    c001a888 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001a81d:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001a820:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a824:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001a827:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a82b:	52                   	push   edx
c001a82c:	31 d2                	xor    edx,edx
c001a82e:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001a831:	52                   	push   edx
c001a832:	50                   	push   eax
c001a833:	56                   	push   esi
c001a834:	e8 47 80 ff ff       	call   c0012880 <File::seek(unsigned long long)>
c001a839:	83 c4 10             	add    esp,0x10
c001a83c:	85 c0                	test   eax,eax
c001a83e:	74 17                	je     c001a857 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001a840:	83 ec 0c             	sub    esp,0xc
c001a843:	68 05 86 02 c0       	push   0xc0028605
c001a848:	e8 e2 79 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c001a84d:	83 c4 10             	add    esp,0x10
c001a850:	31 c0                	xor    eax,eax
c001a852:	e9 87 00 00 00       	jmp    c001a8de <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001a857:	83 ec 0c             	sub    esp,0xc
c001a85a:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001a85d:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001a860:	50                   	push   eax
c001a861:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a865:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a869:	56                   	push   esi
c001a86a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001a86e:	e8 e0 fb ff ff       	call   c001a453 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001a873:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a877:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001a87b:	83 c4 20             	add    esp,0x20
c001a87e:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001a882:	73 04                	jae    c001a888 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001a884:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a888:	45                   	inc    ebp
c001a889:	e9 76 ff ff ff       	jmp    c001a804 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001a88e:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001a892:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a896:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a89a:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001a8a0:	83 ec 0c             	sub    esp,0xc
c001a8a3:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001a8a9:	25 00 f0 ff ff       	and    eax,0xfffff000
c001a8ae:	05 00 10 00 00       	add    eax,0x1000
c001a8b3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001a8b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a8ba:	e8 77 48 ff ff       	call   c000f136 <free>
c001a8bf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a8c2:	e8 6f 48 ff ff       	call   c000f136 <free>
c001a8c7:	58                   	pop    eax
c001a8c8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a8cc:	e8 65 48 ff ff       	call   c000f136 <free>
c001a8d1:	89 34 24             	mov    DWORD PTR [esp],esi
c001a8d4:	e8 47 7f ff ff       	call   c0012820 <File::close()>
c001a8d9:	83 c4 10             	add    esp,0x10
c001a8dc:	b0 01                	mov    al,0x1
c001a8de:	83 c4 3c             	add    esp,0x3c
c001a8e1:	5b                   	pop    ebx
c001a8e2:	5e                   	pop    esi
c001a8e3:	5f                   	pop    edi
c001a8e4:	5d                   	pop    ebp
c001a8e5:	c3                   	ret    

c001a8e6 <Thr::runtimeReferenceHelper()>:
c001a8e6:	83 ec 18             	sub    esp,0x18
c001a8e9:	68 0d 86 02 c0       	push   0xc002860d
c001a8ee:	e8 3c 79 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c001a8f3:	fa                   	cli    
c001a8f4:	83 c4 10             	add    esp,0x10
c001a8f7:	eb fe                	jmp    c001a8f7 <Thr::runtimeReferenceHelper()+0x11>

c001a8f9 <Thr::getAddressOfKernelSymbol(char const*)>:
c001a8f9:	57                   	push   edi
c001a8fa:	56                   	push   esi
c001a8fb:	53                   	push   ebx
c001a8fc:	31 db                	xor    ebx,ebx
c001a8fe:	39 1d e0 ba 02 c0    	cmp    DWORD PTR ds:0xc002bae0,ebx
c001a904:	7e 3c                	jle    c001a942 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001a906:	8b 34 9d 60 ba 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd45a0]
c001a90d:	31 ff                	xor    edi,edi
c001a90f:	39 3c 9d 60 b9 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd46a0],edi
c001a916:	7e 27                	jle    c001a93f <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001a918:	50                   	push   eax
c001a919:	50                   	push   eax
c001a91a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a91e:	8b 06                	mov    eax,DWORD PTR [esi]
c001a920:	03 04 9d e0 b9 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd4620]
c001a927:	50                   	push   eax
c001a928:	e8 40 5e fe ff       	call   c000076d <strcmp>
c001a92d:	83 c4 10             	add    esp,0x10
c001a930:	85 c0                	test   eax,eax
c001a932:	75 05                	jne    c001a939 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001a934:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a937:	eb 0b                	jmp    c001a944 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001a939:	83 c6 10             	add    esi,0x10
c001a93c:	47                   	inc    edi
c001a93d:	eb d0                	jmp    c001a90f <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001a93f:	43                   	inc    ebx
c001a940:	eb bc                	jmp    c001a8fe <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001a942:	31 c0                	xor    eax,eax
c001a944:	5b                   	pop    ebx
c001a945:	5e                   	pop    esi
c001a946:	5f                   	pop    edi
c001a947:	c3                   	ret    

c001a948 <Thr::loadKernelSymbolTable(char const*)>:
c001a948:	55                   	push   ebp
c001a949:	57                   	push   edi
c001a94a:	56                   	push   esi
c001a94b:	53                   	push   ebx
c001a94c:	83 ec 68             	sub    esp,0x68
c001a94f:	8b 35 34 bb 02 c0    	mov    esi,DWORD PTR ds:0xc002bb34
c001a955:	68 14 01 00 00       	push   0x114
c001a95a:	e8 e1 77 ff ff       	call   c0012140 <operator new(unsigned long)>
c001a95f:	83 c4 0c             	add    esp,0xc
c001a962:	89 c3                	mov    ebx,eax
c001a964:	56                   	push   esi
c001a965:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001a969:	50                   	push   eax
c001a96a:	e8 ef 7d ff ff       	call   c001275e <File::File(char const*, Process*)>
c001a96f:	5e                   	pop    esi
c001a970:	5f                   	pop    edi
c001a971:	6a 01                	push   0x1
c001a973:	53                   	push   ebx
c001a974:	e8 49 7e ff ff       	call   c00127c2 <File::open(FileOpenMode)>
c001a979:	83 c4 10             	add    esp,0x10
c001a97c:	31 d2                	xor    edx,edx
c001a97e:	85 c0                	test   eax,eax
c001a980:	0f 85 79 02 00 00    	jne    c001abff <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c001a986:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001a98e:	83 ec 0c             	sub    esp,0xc
c001a991:	6a 34                	push   0x34
c001a993:	e8 8e 47 ff ff       	call   c000f126 <malloc>
c001a998:	59                   	pop    ecx
c001a999:	89 c7                	mov    edi,eax
c001a99b:	8d 74 24 34          	lea    esi,[esp+0x34]
c001a99f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a9a1:	56                   	push   esi
c001a9a2:	57                   	push   edi
c001a9a3:	6a 00                	push   0x0
c001a9a5:	6a 34                	push   0x34
c001a9a7:	53                   	push   ebx
c001a9a8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a9ab:	83 c4 20             	add    esp,0x20
c001a9ae:	85 c0                	test   eax,eax
c001a9b0:	74 17                	je     c001a9c9 <Thr::loadKernelSymbolTable(char const*)+0x81>
c001a9b2:	83 ec 0c             	sub    esp,0xc
c001a9b5:	68 2f 86 02 c0       	push   0xc002862f
c001a9ba:	e8 e8 e0 ff ff       	call   c0018aa7 <Krnl::panic(char const*)>
c001a9bf:	83 c4 10             	add    esp,0x10
c001a9c2:	31 d2                	xor    edx,edx
c001a9c4:	e9 36 02 00 00       	jmp    c001abff <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c001a9c9:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001a9cf:	75 e1                	jne    c001a9b2 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001a9d1:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001a9d4:	85 c0                	test   eax,eax
c001a9d6:	74 da                	je     c001a9b2 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001a9d8:	52                   	push   edx
c001a9d9:	31 d2                	xor    edx,edx
c001a9db:	52                   	push   edx
c001a9dc:	50                   	push   eax
c001a9dd:	53                   	push   ebx
c001a9de:	e8 9d 7e ff ff       	call   c0012880 <File::seek(unsigned long long)>
c001a9e3:	83 c4 10             	add    esp,0x10
c001a9e6:	85 c0                	test   eax,eax
c001a9e8:	75 c8                	jne    c001a9b2 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001a9ea:	83 ec 0c             	sub    esp,0xc
c001a9ed:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001a9f1:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001a9f5:	31 ed                	xor    ebp,ebp
c001a9f7:	0f af c2             	imul   eax,edx
c001a9fa:	50                   	push   eax
c001a9fb:	e8 26 47 ff ff       	call   c000f126 <malloc>
c001aa00:	89 34 24             	mov    DWORD PTR [esp],esi
c001aa03:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001aa07:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001aa09:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001aa0d:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001aa11:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001aa15:	0f af c2             	imul   eax,edx
c001aa18:	99                   	cdq    
c001aa19:	52                   	push   edx
c001aa1a:	50                   	push   eax
c001aa1b:	53                   	push   ebx
c001aa1c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001aa1f:	83 c4 20             	add    esp,0x20
c001aa22:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001aa2a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001aa32:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001aa3a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001aa42:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001aa46:	0f 86 aa 00 00 00    	jbe    c001aaf6 <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c001aa4c:	0f b7 f5             	movzx  esi,bp
c001aa4f:	6b f6 28             	imul   esi,esi,0x28
c001aa52:	03 74 24 10          	add    esi,DWORD PTR [esp+0x10]
c001aa56:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001aa59:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001aa5d:	50                   	push   eax
c001aa5e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001aa62:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001aa66:	8b 16                	mov    edx,DWORD PTR [esi]
c001aa68:	6b c0 28             	imul   eax,eax,0x28
c001aa6b:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001aa6f:	89 d0                	mov    eax,edx
c001aa71:	31 d2                	xor    edx,edx
c001aa73:	52                   	push   edx
c001aa74:	50                   	push   eax
c001aa75:	53                   	push   ebx
c001aa76:	e8 05 7e ff ff       	call   c0012880 <File::seek(unsigned long long)>
c001aa7b:	83 c4 0c             	add    esp,0xc
c001aa7e:	6a 20                	push   0x20
c001aa80:	6a 00                	push   0x0
c001aa82:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001aa86:	52                   	push   edx
c001aa87:	e8 f1 5b fe ff       	call   c000067d <memset>
c001aa8c:	58                   	pop    eax
c001aa8d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aa8f:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001aa93:	51                   	push   ecx
c001aa94:	8d 54 24 40          	lea    edx,[esp+0x40]
c001aa98:	52                   	push   edx
c001aa99:	6a 00                	push   0x0
c001aa9b:	6a 1f                	push   0x1f
c001aa9d:	53                   	push   ebx
c001aa9e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001aaa1:	83 c4 18             	add    esp,0x18
c001aaa4:	68 46 86 02 c0       	push   0xc0028646
c001aaa9:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001aaad:	52                   	push   edx
c001aaae:	e8 ba 5c fe ff       	call   c000076d <strcmp>
c001aab3:	83 c4 10             	add    esp,0x10
c001aab6:	85 c0                	test   eax,eax
c001aab8:	75 0f                	jne    c001aac9 <Thr::loadKernelSymbolTable(char const*)+0x181>
c001aaba:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001aabd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aac1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aac5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001aac9:	50                   	push   eax
c001aaca:	50                   	push   eax
c001aacb:	68 4e 86 02 c0       	push   0xc002864e
c001aad0:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001aad4:	50                   	push   eax
c001aad5:	e8 93 5c fe ff       	call   c000076d <strcmp>
c001aada:	83 c4 10             	add    esp,0x10
c001aadd:	85 c0                	test   eax,eax
c001aadf:	75 0f                	jne    c001aaf0 <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c001aae1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001aae4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001aae8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aaec:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aaf0:	45                   	inc    ebp
c001aaf1:	e9 4c ff ff ff       	jmp    c001aa42 <Thr::loadKernelSymbolTable(char const*)+0xfa>
c001aaf6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001aafb:	75 10                	jne    c001ab0d <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c001aafd:	83 ec 0c             	sub    esp,0xc
c001ab00:	68 56 86 02 c0       	push   0xc0028656
c001ab05:	e8 9d df ff ff       	call   c0018aa7 <Krnl::panic(char const*)>
c001ab0a:	83 c4 10             	add    esp,0x10
c001ab0d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ab12:	75 10                	jne    c001ab24 <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c001ab14:	83 ec 0c             	sub    esp,0xc
c001ab17:	68 56 86 02 c0       	push   0xc0028656
c001ab1c:	e8 86 df ff ff       	call   c0018aa7 <Krnl::panic(char const*)>
c001ab21:	83 c4 10             	add    esp,0x10
c001ab24:	31 d2                	xor    edx,edx
c001ab26:	50                   	push   eax
c001ab27:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ab2b:	52                   	push   edx
c001ab2c:	50                   	push   eax
c001ab2d:	53                   	push   ebx
c001ab2e:	e8 4d 7d ff ff       	call   c0012880 <File::seek(unsigned long long)>
c001ab33:	5a                   	pop    edx
c001ab34:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ab38:	e8 e9 45 ff ff       	call   c000f126 <malloc>
c001ab3d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001ab45:	89 c1                	mov    ecx,eax
c001ab47:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ab4b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ab4f:	5e                   	pop    esi
c001ab50:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ab52:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001ab56:	55                   	push   ebp
c001ab57:	51                   	push   ecx
c001ab58:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c001ab5c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ab60:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ab64:	53                   	push   ebx
c001ab65:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ab68:	83 c4 14             	add    esp,0x14
c001ab6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001ab6f:	e8 b2 45 ff ff       	call   c000f126 <malloc>
c001ab74:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001ab77:	89 c6                	mov    esi,eax
c001ab79:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ab7b:	56                   	push   esi
c001ab7c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ab80:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ab84:	53                   	push   ebx
c001ab85:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ab88:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ab8c:	8b 15 e0 ba 02 c0    	mov    edx,DWORD PTR ds:0xc002bae0
c001ab92:	83 c4 1c             	add    esp,0x1c
c001ab95:	c1 e8 04             	shr    eax,0x4
c001ab98:	89 04 95 60 b9 02 c0 	mov    DWORD PTR [edx*4-0x3ffd46a0],eax
c001ab9f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aba3:	31 d2                	xor    edx,edx
c001aba5:	52                   	push   edx
c001aba6:	50                   	push   eax
c001aba7:	53                   	push   ebx
c001aba8:	e8 d3 7c ff ff       	call   c0012880 <File::seek(unsigned long long)>
c001abad:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001abb0:	31 d2                	xor    edx,edx
c001abb2:	56                   	push   esi
c001abb3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001abb7:	52                   	push   edx
c001abb8:	50                   	push   eax
c001abb9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001abbb:	53                   	push   ebx
c001abbc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001abbf:	83 c4 14             	add    esp,0x14
c001abc2:	53                   	push   ebx
c001abc3:	e8 58 7c ff ff       	call   c0012820 <File::close()>
c001abc8:	5d                   	pop    ebp
c001abc9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001abcd:	e8 64 45 ff ff       	call   c000f136 <free>
c001abd2:	89 3c 24             	mov    DWORD PTR [esp],edi
c001abd5:	e8 5c 45 ff ff       	call   c000f136 <free>
c001abda:	a1 e0 ba 02 c0       	mov    eax,ds:0xc002bae0
c001abdf:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001abe3:	8d 50 01             	lea    edx,[eax+0x1]
c001abe6:	89 0c 85 60 ba 02 c0 	mov    DWORD PTR [eax*4-0x3ffd45a0],ecx
c001abed:	89 15 e0 ba 02 c0    	mov    DWORD PTR ds:0xc002bae0,edx
c001abf3:	89 34 85 e0 b9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4620],esi
c001abfa:	83 c4 10             	add    esp,0x10
c001abfd:	b2 01                	mov    dl,0x1
c001abff:	83 c4 5c             	add    esp,0x5c
c001ac02:	88 d0                	mov    al,dl
c001ac04:	5b                   	pop    ebx
c001ac05:	5e                   	pop    esi
c001ac06:	5f                   	pop    edi
c001ac07:	5d                   	pop    ebp
c001ac08:	c3                   	ret    

c001ac09 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001ac09:	55                   	push   ebp
c001ac0a:	57                   	push   edi
c001ac0b:	56                   	push   esi
c001ac0c:	53                   	push   ebx
c001ac0d:	81 ec 68 03 00 00    	sub    esp,0x368
c001ac13:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001ac1a:	8b 1d 34 bb 02 c0    	mov    ebx,DWORD PTR ds:0xc002bb34
c001ac20:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001ac24:	68 14 01 00 00       	push   0x114
c001ac29:	e8 12 75 ff ff       	call   c0012140 <operator new(unsigned long)>
c001ac2e:	83 c4 0c             	add    esp,0xc
c001ac31:	89 c7                	mov    edi,eax
c001ac33:	53                   	push   ebx
c001ac34:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001ac3b:	50                   	push   eax
c001ac3c:	e8 1d 7b ff ff       	call   c001275e <File::File(char const*, Process*)>
c001ac41:	5e                   	pop    esi
c001ac42:	5d                   	pop    ebp
c001ac43:	6a 01                	push   0x1
c001ac45:	57                   	push   edi
c001ac46:	e8 77 7b ff ff       	call   c00127c2 <File::open(FileOpenMode)>
c001ac4b:	83 c4 10             	add    esp,0x10
c001ac4e:	85 c0                	test   eax,eax
c001ac50:	0f 85 10 07 00 00    	jne    c001b366 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001ac56:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001ac5e:	83 ec 0c             	sub    esp,0xc
c001ac61:	6a 34                	push   0x34
c001ac63:	e8 be 44 ff ff       	call   c000f126 <malloc>
c001ac68:	5b                   	pop    ebx
c001ac69:	89 c5                	mov    ebp,eax
c001ac6b:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001ac6f:	8b 07                	mov    eax,DWORD PTR [edi]
c001ac71:	53                   	push   ebx
c001ac72:	55                   	push   ebp
c001ac73:	6a 00                	push   0x0
c001ac75:	6a 34                	push   0x34
c001ac77:	57                   	push   edi
c001ac78:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ac7b:	83 c4 20             	add    esp,0x20
c001ac7e:	85 c0                	test   eax,eax
c001ac80:	0f 85 e0 06 00 00    	jne    c001b366 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001ac86:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c001ac8d:	0f 85 d3 06 00 00    	jne    c001b366 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001ac93:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001ac96:	85 c0                	test   eax,eax
c001ac98:	0f 84 c8 06 00 00    	je     c001b366 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001ac9e:	31 d2                	xor    edx,edx
c001aca0:	51                   	push   ecx
c001aca1:	52                   	push   edx
c001aca2:	50                   	push   eax
c001aca3:	57                   	push   edi
c001aca4:	e8 d7 7b ff ff       	call   c0012880 <File::seek(unsigned long long)>
c001aca9:	83 c4 10             	add    esp,0x10
c001acac:	85 c0                	test   eax,eax
c001acae:	0f 85 b2 06 00 00    	jne    c001b366 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001acb4:	83 ec 0c             	sub    esp,0xc
c001acb7:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001acba:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c001acbe:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001acc2:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001acc6:	0f af c2             	imul   eax,edx
c001acc9:	50                   	push   eax
c001acca:	e8 57 44 ff ff       	call   c000f126 <malloc>
c001accf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001acd2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001acd6:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001acd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001acdc:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c001ace0:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001ace4:	0f af c2             	imul   eax,edx
c001ace7:	99                   	cdq    
c001ace8:	52                   	push   edx
c001ace9:	50                   	push   eax
c001acea:	57                   	push   edi
c001aceb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001acee:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c001acf1:	83 c4 20             	add    esp,0x20
c001acf4:	85 c0                	test   eax,eax
c001acf6:	0f 84 6a 06 00 00    	je     c001b366 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001acfc:	52                   	push   edx
c001acfd:	31 d2                	xor    edx,edx
c001acff:	52                   	push   edx
c001ad00:	50                   	push   eax
c001ad01:	57                   	push   edi
c001ad02:	e8 79 7b ff ff       	call   c0012880 <File::seek(unsigned long long)>
c001ad07:	83 c4 10             	add    esp,0x10
c001ad0a:	85 c0                	test   eax,eax
c001ad0c:	0f 85 54 06 00 00    	jne    c001b366 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001ad12:	83 ec 0c             	sub    esp,0xc
c001ad15:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c001ad19:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c001ad1d:	31 f6                	xor    esi,esi
c001ad1f:	0f af c2             	imul   eax,edx
c001ad22:	50                   	push   eax
c001ad23:	e8 fe 43 ff ff       	call   c000f126 <malloc>
c001ad28:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ad2b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001ad2f:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001ad31:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ad35:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c001ad39:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c001ad3d:	0f af c2             	imul   eax,edx
c001ad40:	99                   	cdq    
c001ad41:	52                   	push   edx
c001ad42:	50                   	push   eax
c001ad43:	57                   	push   edi
c001ad44:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ad47:	83 c4 20             	add    esp,0x20
c001ad4a:	66 39 75 2c          	cmp    WORD PTR [ebp+0x2c],si
c001ad4e:	0f 86 af 00 00 00    	jbe    c001ae03 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1fa>
c001ad54:	0f b7 de             	movzx  ebx,si
c001ad57:	c1 e3 05             	shl    ebx,0x5
c001ad5a:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c001ad5e:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001ad61:	0f 85 96 00 00 00    	jne    c001adfd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1f4>
c001ad67:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001ad6a:	31 d2                	xor    edx,edx
c001ad6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ad70:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ad73:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ad77:	50                   	push   eax
c001ad78:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001ad7b:	52                   	push   edx
c001ad7c:	50                   	push   eax
c001ad7d:	57                   	push   edi
c001ad7e:	e8 fd 7a ff ff       	call   c0012880 <File::seek(unsigned long long)>
c001ad83:	83 c4 10             	add    esp,0x10
c001ad86:	85 c0                	test   eax,eax
c001ad88:	0f 85 d8 05 00 00    	jne    c001b366 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001ad8e:	52                   	push   edx
c001ad8f:	52                   	push   edx
c001ad90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001ad94:	68 70 86 02 c0       	push   0xc0028670
c001ad99:	e8 91 74 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c001ad9e:	8b 84 24 84 03 00 00 	mov    eax,DWORD PTR [esp+0x384]
c001ada5:	31 d2                	xor    edx,edx
c001ada7:	2b 44 24 3c          	sub    eax,DWORD PTR [esp+0x3c]
c001adab:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001adaf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001adb3:	59                   	pop    ecx
c001adb4:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001adb6:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001adbd:	50                   	push   eax
c001adbe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001adc2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001adc6:	52                   	push   edx
c001adc7:	50                   	push   eax
c001adc8:	57                   	push   edi
c001adc9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001adcc:	83 c4 18             	add    esp,0x18
c001adcf:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001add2:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001add5:	50                   	push   eax
c001add6:	68 94 86 02 c0       	push   0xc0028694
c001addb:	e8 4f 74 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c001ade0:	83 c4 0c             	add    esp,0xc
c001ade3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ade6:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001ade9:	50                   	push   eax
c001adea:	6a 00                	push   0x0
c001adec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001adf0:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001adf4:	50                   	push   eax
c001adf5:	e8 83 58 fe ff       	call   c000067d <memset>
c001adfa:	83 c4 10             	add    esp,0x10
c001adfd:	46                   	inc    esi
c001adfe:	e9 47 ff ff ff       	jmp    c001ad4a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x141>
c001ae03:	31 db                	xor    ebx,ebx
c001ae05:	50                   	push   eax
c001ae06:	68 00 01 00 00       	push   0x100
c001ae0b:	6a 00                	push   0x0
c001ae0d:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001ae11:	50                   	push   eax
c001ae12:	e8 66 58 fe ff       	call   c000067d <memset>
c001ae17:	83 c4 0c             	add    esp,0xc
c001ae1a:	68 00 01 00 00       	push   0x100
c001ae1f:	6a 00                	push   0x0
c001ae21:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001ae28:	50                   	push   eax
c001ae29:	e8 4f 58 fe ff       	call   c000067d <memset>
c001ae2e:	83 c4 10             	add    esp,0x10
c001ae31:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ae39:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001ae41:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ae49:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001ae51:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001ae59:	66 39 5d 30          	cmp    WORD PTR [ebp+0x30],bx
c001ae5d:	0f 86 2f 01 00 00    	jbe    c001af92 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x389>
c001ae63:	0f b7 f3             	movzx  esi,bx
c001ae66:	6b f6 28             	imul   esi,esi,0x28
c001ae69:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c001ae6d:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ae70:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ae74:	50                   	push   eax
c001ae75:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ae79:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c001ae7d:	8b 06                	mov    eax,DWORD PTR [esi]
c001ae7f:	6b d2 28             	imul   edx,edx,0x28
c001ae82:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001ae86:	31 d2                	xor    edx,edx
c001ae88:	52                   	push   edx
c001ae89:	50                   	push   eax
c001ae8a:	57                   	push   edi
c001ae8b:	e8 f0 79 ff ff       	call   c0012880 <File::seek(unsigned long long)>
c001ae90:	83 c4 0c             	add    esp,0xc
c001ae93:	6a 20                	push   0x20
c001ae95:	6a 00                	push   0x0
c001ae97:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001ae9e:	51                   	push   ecx
c001ae9f:	e8 d9 57 fe ff       	call   c000067d <memset>
c001aea4:	58                   	pop    eax
c001aea5:	8b 07                	mov    eax,DWORD PTR [edi]
c001aea7:	8d 54 24 58          	lea    edx,[esp+0x58]
c001aeab:	52                   	push   edx
c001aeac:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001aeb3:	51                   	push   ecx
c001aeb4:	6a 00                	push   0x0
c001aeb6:	6a 1f                	push   0x1f
c001aeb8:	57                   	push   edi
c001aeb9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001aebc:	83 c4 1c             	add    esp,0x1c
c001aebf:	6a 09                	push   0x9
c001aec1:	68 b1 86 02 c0       	push   0xc00286b1
c001aec6:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001aecd:	51                   	push   ecx
c001aece:	e8 11 57 fe ff       	call   c00005e4 <memcmp>
c001aed3:	83 c4 10             	add    esp,0x10
c001aed6:	85 c0                	test   eax,eax
c001aed8:	75 21                	jne    c001aefb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f2>
c001aeda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aede:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001aee2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001aee6:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001aeea:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001aeed:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001aef4:	89 c8                	mov    eax,ecx
c001aef6:	40                   	inc    eax
c001aef7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aefb:	50                   	push   eax
c001aefc:	6a 09                	push   0x9
c001aefe:	68 bb 86 02 c0       	push   0xc00286bb
c001af03:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001af0a:	50                   	push   eax
c001af0b:	e8 d4 56 fe ff       	call   c00005e4 <memcmp>
c001af10:	83 c4 10             	add    esp,0x10
c001af13:	85 c0                	test   eax,eax
c001af15:	75 21                	jne    c001af38 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x32f>
c001af17:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af1b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001af1f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001af23:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001af27:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001af2a:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001af31:	89 c8                	mov    eax,ecx
c001af33:	40                   	inc    eax
c001af34:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001af38:	50                   	push   eax
c001af39:	50                   	push   eax
c001af3a:	68 46 86 02 c0       	push   0xc0028646
c001af3f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001af46:	50                   	push   eax
c001af47:	e8 21 58 fe ff       	call   c000076d <strcmp>
c001af4c:	83 c4 10             	add    esp,0x10
c001af4f:	85 c0                	test   eax,eax
c001af51:	75 0f                	jne    c001af62 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x359>
c001af53:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001af56:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001af5a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001af5e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001af62:	50                   	push   eax
c001af63:	50                   	push   eax
c001af64:	68 4e 86 02 c0       	push   0xc002864e
c001af69:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001af70:	50                   	push   eax
c001af71:	e8 f7 57 fe ff       	call   c000076d <strcmp>
c001af76:	83 c4 10             	add    esp,0x10
c001af79:	85 c0                	test   eax,eax
c001af7b:	75 0f                	jne    c001af8c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x383>
c001af7d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001af80:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001af84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001af88:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001af8c:	43                   	inc    ebx
c001af8d:	e9 c7 fe ff ff       	jmp    c001ae59 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x250>
c001af92:	31 d2                	xor    edx,edx
c001af94:	50                   	push   eax
c001af95:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001af99:	52                   	push   edx
c001af9a:	50                   	push   eax
c001af9b:	57                   	push   edi
c001af9c:	e8 df 78 ff ff       	call   c0012880 <File::seek(unsigned long long)>
c001afa1:	5a                   	pop    edx
c001afa2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001afa6:	e8 7b 41 ff ff       	call   c000f126 <malloc>
c001afab:	31 d2                	xor    edx,edx
c001afad:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001afb1:	59                   	pop    ecx
c001afb2:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001afb4:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001afb8:	53                   	push   ebx
c001afb9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001afbd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001afc1:	52                   	push   edx
c001afc2:	50                   	push   eax
c001afc3:	57                   	push   edi
c001afc4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001afc7:	83 c4 14             	add    esp,0x14
c001afca:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001afce:	e8 53 41 ff ff       	call   c000f126 <malloc>
c001afd3:	31 d2                	xor    edx,edx
c001afd5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001afd9:	83 c4 0c             	add    esp,0xc
c001afdc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001afe0:	52                   	push   edx
c001afe1:	50                   	push   eax
c001afe2:	57                   	push   edi
c001afe3:	e8 98 78 ff ff       	call   c0012880 <File::seek(unsigned long long)>
c001afe8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001afeb:	31 d2                	xor    edx,edx
c001afed:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001aff1:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001aff3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001aff7:	52                   	push   edx
c001aff8:	50                   	push   eax
c001aff9:	57                   	push   edi
c001affa:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001affd:	83 c4 20             	add    esp,0x20
c001b000:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001b008:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b00c:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c001b010:	0f 84 54 03 00 00    	je     c001b36a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x761>
c001b016:	8b 84 94 50 01 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x150]
c001b01d:	31 d2                	xor    edx,edx
c001b01f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b023:	c1 e8 03             	shr    eax,0x3
c001b026:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001b02a:	50                   	push   eax
c001b02b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b02f:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001b033:	52                   	push   edx
c001b034:	50                   	push   eax
c001b035:	57                   	push   edi
c001b036:	e8 45 78 ff ff       	call   c0012880 <File::seek(unsigned long long)>
c001b03b:	58                   	pop    eax
c001b03c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b040:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001b047:	e8 da 40 ff ff       	call   c000f126 <malloc>
c001b04c:	31 d2                	xor    edx,edx
c001b04e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b052:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001b054:	58                   	pop    eax
c001b055:	8d 44 24 58          	lea    eax,[esp+0x58]
c001b059:	50                   	push   eax
c001b05a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001b05e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001b062:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001b069:	52                   	push   edx
c001b06a:	50                   	push   eax
c001b06b:	57                   	push   edi
c001b06c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b06f:	83 c4 20             	add    esp,0x20
c001b072:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001b07a:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001b07e:	39 4c 24 28          	cmp    DWORD PTR [esp+0x28],ecx
c001b082:	0f 8d c6 02 00 00    	jge    c001b34e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x745>
c001b088:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b08c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b090:	31 db                	xor    ebx,ebx
c001b092:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c001b095:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b099:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b09d:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c001b0a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b0a5:	c1 e8 08             	shr    eax,0x8
c001b0a8:	89 c6                	mov    esi,eax
c001b0aa:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001b0ae:	c1 e6 04             	shl    esi,0x4
c001b0b1:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c001b0b5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001b0b8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b0bc:	85 c0                	test   eax,eax
c001b0be:	0f 85 17 01 00 00    	jne    c001b1db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c001b0c4:	83 ec 0c             	sub    esp,0xc
c001b0c7:	b3 01                	mov    bl,0x1
c001b0c9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b0cd:	03 06                	add    eax,DWORD PTR [esi]
c001b0cf:	50                   	push   eax
c001b0d0:	e8 24 f8 ff ff       	call   c001a8f9 <Thr::getAddressOfKernelSymbol(char const*)>
c001b0d5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b0d9:	83 c4 10             	add    esp,0x10
c001b0dc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001b0e1:	0f 85 f4 00 00 00    	jne    c001b1db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c001b0e7:	50                   	push   eax
c001b0e8:	50                   	push   eax
c001b0e9:	68 c5 86 02 c0       	push   0xc00286c5
c001b0ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b0f2:	03 06                	add    eax,DWORD PTR [esi]
c001b0f4:	50                   	push   eax
c001b0f5:	e8 73 56 fe ff       	call   c000076d <strcmp>
c001b0fa:	83 c4 10             	add    esp,0x10
c001b0fd:	85 c0                	test   eax,eax
c001b0ff:	75 0a                	jne    c001b10b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x502>
c001b101:	b8 3c 35 02 c0       	mov    eax,0xc002353c
c001b106:	e9 ca 00 00 00       	jmp    c001b1d5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c001b10b:	50                   	push   eax
c001b10c:	50                   	push   eax
c001b10d:	68 cf 86 02 c0       	push   0xc00286cf
c001b112:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b116:	03 06                	add    eax,DWORD PTR [esi]
c001b118:	50                   	push   eax
c001b119:	e8 4f 56 fe ff       	call   c000076d <strcmp>
c001b11e:	83 c4 10             	add    esp,0x10
c001b121:	85 c0                	test   eax,eax
c001b123:	75 0a                	jne    c001b12f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x526>
c001b125:	b8 70 32 02 c0       	mov    eax,0xc0023270
c001b12a:	e9 a6 00 00 00       	jmp    c001b1d5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c001b12f:	53                   	push   ebx
c001b130:	53                   	push   ebx
c001b131:	68 d8 86 02 c0       	push   0xc00286d8
c001b136:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b13a:	03 06                	add    eax,DWORD PTR [esi]
c001b13c:	50                   	push   eax
c001b13d:	e8 2b 56 fe ff       	call   c000076d <strcmp>
c001b142:	83 c4 10             	add    esp,0x10
c001b145:	85 c0                	test   eax,eax
c001b147:	75 0a                	jne    c001b153 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54a>
c001b149:	b8 3c 36 02 c0       	mov    eax,0xc002363c
c001b14e:	e9 82 00 00 00       	jmp    c001b1d5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c001b153:	51                   	push   ecx
c001b154:	51                   	push   ecx
c001b155:	68 e2 86 02 c0       	push   0xc00286e2
c001b15a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b15e:	03 06                	add    eax,DWORD PTR [esi]
c001b160:	50                   	push   eax
c001b161:	e8 07 56 fe ff       	call   c000076d <strcmp>
c001b166:	83 c4 10             	add    esp,0x10
c001b169:	85 c0                	test   eax,eax
c001b16b:	74 63                	je     c001b1d0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c7>
c001b16d:	50                   	push   eax
c001b16e:	50                   	push   eax
c001b16f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b173:	03 06                	add    eax,DWORD PTR [esi]
c001b175:	50                   	push   eax
c001b176:	68 eb 86 02 c0       	push   0xc00286eb
c001b17b:	e8 af 70 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c001b180:	58                   	pop    eax
c001b181:	5a                   	pop    edx
c001b182:	68 05 87 02 c0       	push   0xc0028705
c001b187:	8d 9c 24 5c 02 00 00 	lea    ebx,[esp+0x25c]
c001b18e:	53                   	push   ebx
c001b18f:	e8 88 55 fe ff       	call   c000071c <strcpy>
c001b194:	59                   	pop    ecx
c001b195:	58                   	pop    eax
c001b196:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b19a:	03 06                	add    eax,DWORD PTR [esi]
c001b19c:	50                   	push   eax
c001b19d:	53                   	push   ebx
c001b19e:	e8 30 56 fe ff       	call   c00007d3 <strcat>
c001b1a3:	58                   	pop    eax
c001b1a4:	5a                   	pop    edx
c001b1a5:	68 9b 87 02 c0       	push   0xc002879b
c001b1aa:	53                   	push   ebx
c001b1ab:	e8 23 56 fe ff       	call   c00007d3 <strcat>
c001b1b0:	83 c4 10             	add    esp,0x10
c001b1b3:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001b1b8:	0f 84 4b 01 00 00    	je     c001b309 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001b1be:	83 ec 0c             	sub    esp,0xc
c001b1c1:	53                   	push   ebx
c001b1c2:	e8 e0 d8 ff ff       	call   c0018aa7 <Krnl::panic(char const*)>
c001b1c7:	83 c4 10             	add    esp,0x10
c001b1ca:	8a 5c 24 27          	mov    bl,BYTE PTR [esp+0x27]
c001b1ce:	eb 0b                	jmp    c001b1db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c001b1d0:	b8 bc 33 02 c0       	mov    eax,0xc00233bc
c001b1d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b1d9:	b3 01                	mov    bl,0x1
c001b1db:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c001b1e0:	0f 85 80 00 00 00    	jne    c001b266 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x65d>
c001b1e6:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001b1ed:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b1f1:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001b1f5:	01 ce                	add    esi,ecx
c001b1f7:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001b1ff:	8b 06                	mov    eax,DWORD PTR [esi]
c001b201:	0f 94 c2             	sete   dl
c001b204:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001b20c:	0f 94 44 24 18       	sete   BYTE PTR [esp+0x18]
c001b211:	0b 54 24 18          	or     edx,DWORD PTR [esp+0x18]
c001b215:	84 db                	test   bl,bl
c001b217:	74 31                	je     c001b24a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x641>
c001b219:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b21d:	01 c3                	add    ebx,eax
c001b21f:	84 d2                	test   dl,dl
c001b221:	75 0a                	jne    c001b22d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x624>
c001b223:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001b227:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001b22b:	76 32                	jbe    c001b25f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001b22d:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001b232:	0f 84 d1 00 00 00    	je     c001b309 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001b238:	83 ec 0c             	sub    esp,0xc
c001b23b:	68 1c 87 02 c0       	push   0xc002871c
c001b240:	e8 62 d8 ff ff       	call   c0018aa7 <Krnl::panic(char const*)>
c001b245:	83 c4 10             	add    esp,0x10
c001b248:	eb 15                	jmp    c001b25f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001b24a:	8d 1c 08             	lea    ebx,[eax+ecx*1]
c001b24d:	84 d2                	test   dl,dl
c001b24f:	75 0e                	jne    c001b25f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001b251:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001b255:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001b259:	77 04                	ja     c001b25f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001b25b:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001b25f:	89 1e                	mov    DWORD PTR [esi],ebx
c001b261:	e9 df 00 00 00       	jmp    c001b345 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c001b266:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c001b26b:	75 6e                	jne    c001b2db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d2>
c001b26d:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001b274:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c001b278:	03 74 24 30          	add    esi,DWORD PTR [esp+0x30]
c001b27c:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001b284:	74 17                	je     c001b29d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x694>
c001b286:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001b28e:	74 0d                	je     c001b29d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x694>
c001b290:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001b294:	83 e8 04             	sub    eax,0x4
c001b297:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001b29b:	76 17                	jbe    c001b2b4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ab>
c001b29d:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001b2a2:	74 65                	je     c001b309 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001b2a4:	83 ec 0c             	sub    esp,0xc
c001b2a7:	68 38 87 02 c0       	push   0xc0028738
c001b2ac:	e8 f6 d7 ff ff       	call   c0018aa7 <Krnl::panic(char const*)>
c001b2b1:	83 c4 10             	add    esp,0x10
c001b2b4:	8b 16                	mov    edx,DWORD PTR [esi]
c001b2b6:	84 db                	test   bl,bl
c001b2b8:	74 13                	je     c001b2cd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c4>
c001b2ba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b2be:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c001b2c5:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001b2c9:	01 d0                	add    eax,edx
c001b2cb:	eb 06                	jmp    c001b2d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ca>
c001b2cd:	89 d0                	mov    eax,edx
c001b2cf:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001b2d3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001b2d7:	89 06                	mov    DWORD PTR [esi],eax
c001b2d9:	eb 6a                	jmp    c001b345 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c001b2db:	50                   	push   eax
c001b2dc:	50                   	push   eax
c001b2dd:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001b2e2:	50                   	push   eax
c001b2e3:	68 54 87 02 c0       	push   0xc0028754
c001b2e8:	e8 42 6f ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c001b2ed:	83 c4 10             	add    esp,0x10
c001b2f0:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001b2f5:	74 12                	je     c001b309 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001b2f7:	83 ec 0c             	sub    esp,0xc
c001b2fa:	68 5f 87 02 c0       	push   0xc002875f
c001b2ff:	e8 a3 d7 ff ff       	call   c0018aa7 <Krnl::panic(char const*)>
c001b304:	83 c4 10             	add    esp,0x10
c001b307:	eb 3c                	jmp    c001b345 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c001b309:	83 ec 0c             	sub    esp,0xc
c001b30c:	57                   	push   edi
c001b30d:	e8 0e 75 ff ff       	call   c0012820 <File::close()>
c001b312:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b315:	8b 07                	mov    eax,DWORD PTR [edi]
c001b317:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b31a:	59                   	pop    ecx
c001b31b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b31f:	e8 12 3e ff ff       	call   c000f136 <free>
c001b324:	5b                   	pop    ebx
c001b325:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b329:	e8 08 3e ff ff       	call   c000f136 <free>
c001b32e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b331:	e8 00 3e ff ff       	call   c000f136 <free>
c001b336:	5e                   	pop    esi
c001b337:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001b33b:	e8 f6 3d ff ff       	call   c000f136 <free>
c001b340:	83 c4 10             	add    esp,0x10
c001b343:	eb 21                	jmp    c001b366 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001b345:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c001b349:	e9 2c fd ff ff       	jmp    c001b07a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x471>
c001b34e:	83 ec 0c             	sub    esp,0xc
c001b351:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b355:	e8 dc 3d ff ff       	call   c000f136 <free>
c001b35a:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c001b35e:	83 c4 10             	add    esp,0x10
c001b361:	e9 a2 fc ff ff       	jmp    c001b008 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3ff>
c001b366:	31 c0                	xor    eax,eax
c001b368:	eb 32                	jmp    c001b39c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x793>
c001b36a:	83 ec 0c             	sub    esp,0xc
c001b36d:	57                   	push   edi
c001b36e:	e8 ad 74 ff ff       	call   c0012820 <File::close()>
c001b373:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b376:	8b 07                	mov    eax,DWORD PTR [edi]
c001b378:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b37b:	58                   	pop    eax
c001b37c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b380:	e8 b1 3d ff ff       	call   c000f136 <free>
c001b385:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b388:	e8 a9 3d ff ff       	call   c000f136 <free>
c001b38d:	5a                   	pop    edx
c001b38e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001b392:	e8 9f 3d ff ff       	call   c000f136 <free>
c001b397:	83 c4 10             	add    esp,0x10
c001b39a:	b0 01                	mov    al,0x1
c001b39c:	81 c4 5c 03 00 00    	add    esp,0x35c
c001b3a2:	5b                   	pop    ebx
c001b3a3:	5e                   	pop    esi
c001b3a4:	5f                   	pop    edi
c001b3a5:	5d                   	pop    ebp
c001b3a6:	c3                   	ret    

c001b3a7 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001b3a7:	56                   	push   esi
c001b3a8:	31 d2                	xor    edx,edx
c001b3aa:	53                   	push   ebx
c001b3ab:	8b 1d 40 b3 02 c0    	mov    ebx,DWORD PTR ds:0xc002b340
c001b3b1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b3b5:	39 d3                	cmp    ebx,edx
c001b3b7:	7e 1b                	jle    c001b3d4 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001b3b9:	8b 04 95 60 b5 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd4aa0]
c001b3c0:	39 c8                	cmp    eax,ecx
c001b3c2:	77 0d                	ja     c001b3d1 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001b3c4:	8b 34 95 60 b3 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd4ca0]
c001b3cb:	01 c6                	add    esi,eax
c001b3cd:	39 ce                	cmp    esi,ecx
c001b3cf:	77 05                	ja     c001b3d6 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001b3d1:	42                   	inc    edx
c001b3d2:	eb e1                	jmp    c001b3b5 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001b3d4:	31 c0                	xor    eax,eax
c001b3d6:	5b                   	pop    ebx
c001b3d7:	5e                   	pop    esi
c001b3d8:	c3                   	ret    

c001b3d9 <Thr::getDriverNameFromAddress(unsigned long)>:
c001b3d9:	53                   	push   ebx
c001b3da:	31 c0                	xor    eax,eax
c001b3dc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b3e0:	8b 1d 40 b3 02 c0    	mov    ebx,DWORD PTR ds:0xc002b340
c001b3e6:	39 c3                	cmp    ebx,eax
c001b3e8:	7e 22                	jle    c001b40c <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001b3ea:	8b 14 85 60 b5 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4aa0]
c001b3f1:	39 ca                	cmp    edx,ecx
c001b3f3:	77 14                	ja     c001b409 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001b3f5:	03 14 85 60 b3 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd4ca0]
c001b3fc:	39 ca                	cmp    edx,ecx
c001b3fe:	76 09                	jbe    c001b409 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001b400:	8b 04 85 60 b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd48a0]
c001b407:	eb 05                	jmp    c001b40e <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001b409:	40                   	inc    eax
c001b40a:	eb da                	jmp    c001b3e6 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001b40c:	31 c0                	xor    eax,eax
c001b40e:	5b                   	pop    ebx
c001b40f:	c3                   	ret    

c001b410 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001b410:	53                   	push   ebx
c001b411:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b415:	53                   	push   ebx
c001b416:	e8 8c ff ff ff       	call   c001b3a7 <Thr::getDriverBaseFromAddress(unsigned long)>
c001b41b:	5a                   	pop    edx
c001b41c:	31 d2                	xor    edx,edx
c001b41e:	85 c0                	test   eax,eax
c001b420:	74 04                	je     c001b426 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001b422:	89 da                	mov    edx,ebx
c001b424:	29 c2                	sub    edx,eax
c001b426:	89 d0                	mov    eax,edx
c001b428:	5b                   	pop    ebx
c001b429:	c3                   	ret    

c001b42a <Thr::loadDLL(char const*, bool)>:
c001b42a:	55                   	push   ebp
c001b42b:	57                   	push   edi
c001b42c:	56                   	push   esi
c001b42d:	53                   	push   ebx
c001b42e:	81 ec 34 01 00 00    	sub    esp,0x134
c001b434:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001b43b:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001b442:	56                   	push   esi
c001b443:	68 77 87 02 c0       	push   0xc0028777
c001b448:	e8 e2 6d ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c001b44d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001b454:	e8 e7 6c ff ff       	call   c0012140 <operator new(unsigned long)>
c001b459:	83 c4 0c             	add    esp,0xc
c001b45c:	89 c3                	mov    ebx,eax
c001b45e:	ff 35 34 bb 02 c0    	push   DWORD PTR ds:0xc002bb34
c001b464:	56                   	push   esi
c001b465:	50                   	push   eax
c001b466:	e8 f3 72 ff ff       	call   c001275e <File::File(char const*, Process*)>
c001b46b:	83 c4 0c             	add    esp,0xc
c001b46e:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001b472:	50                   	push   eax
c001b473:	8d 44 24 20          	lea    eax,[esp+0x20]
c001b477:	50                   	push   eax
c001b478:	53                   	push   ebx
c001b479:	e8 f0 75 ff ff       	call   c0012a6e <File::stat(unsigned long long*, bool*)>
c001b47e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b480:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b483:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b486:	83 c4 10             	add    esp,0x10
c001b489:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001b48e:	75 0a                	jne    c001b49a <Thr::loadDLL(char const*, bool)+0x70>
c001b490:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b494:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001b498:	75 3c                	jne    c001b4d6 <Thr::loadDLL(char const*, bool)+0xac>
c001b49a:	89 e8                	mov    eax,ebp
c001b49c:	84 c0                	test   al,al
c001b49e:	0f 84 3d 01 00 00    	je     c001b5e1 <Thr::loadDLL(char const*, bool)+0x1b7>
c001b4a4:	50                   	push   eax
c001b4a5:	50                   	push   eax
c001b4a6:	68 88 87 02 c0       	push   0xc0028788
c001b4ab:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001b4af:	53                   	push   ebx
c001b4b0:	e8 67 52 fe ff       	call   c000071c <strcpy>
c001b4b5:	58                   	pop    eax
c001b4b6:	5a                   	pop    edx
c001b4b7:	56                   	push   esi
c001b4b8:	53                   	push   ebx
c001b4b9:	e8 15 53 fe ff       	call   c00007d3 <strcat>
c001b4be:	59                   	pop    ecx
c001b4bf:	5f                   	pop    edi
c001b4c0:	68 9b 87 02 c0       	push   0xc002879b
c001b4c5:	53                   	push   ebx
c001b4c6:	e8 08 53 fe ff       	call   c00007d3 <strcat>
c001b4cb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b4ce:	e8 d4 d5 ff ff       	call   c0018aa7 <Krnl::panic(char const*)>
c001b4d3:	83 c4 10             	add    esp,0x10
c001b4d6:	e8 12 5f ff ff       	call   c00113ed <Virt::getAKernelVAS()>
c001b4db:	51                   	push   ecx
c001b4dc:	6a 03                	push   0x3
c001b4de:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001b4e2:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001b4e6:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001b4ec:	83 d3 00             	adc    ebx,0x0
c001b4ef:	89 ca                	mov    edx,ecx
c001b4f1:	89 d1                	mov    ecx,edx
c001b4f3:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001b4f7:	51                   	push   ecx
c001b4f8:	50                   	push   eax
c001b4f9:	e8 32 65 ff ff       	call   c0011a30 <VAS::allocatePages(int, int)>
c001b4fe:	89 34 24             	mov    DWORD PTR [esp],esi
c001b501:	89 c3                	mov    ebx,eax
c001b503:	e8 92 51 fe ff       	call   c000069a <strlen>
c001b508:	8b 3d 40 b3 02 c0    	mov    edi,DWORD PTR ds:0xc002b340
c001b50e:	40                   	inc    eax
c001b50f:	89 04 24             	mov    DWORD PTR [esp],eax
c001b512:	e8 0f 3c ff ff       	call   c000f126 <malloc>
c001b517:	89 04 bd 60 b7 02 c0 	mov    DWORD PTR [edi*4-0x3ffd48a0],eax
c001b51e:	5f                   	pop    edi
c001b51f:	58                   	pop    eax
c001b520:	a1 40 b3 02 c0       	mov    eax,ds:0xc002b340
c001b525:	56                   	push   esi
c001b526:	ff 34 85 60 b7 02 c0 	push   DWORD PTR [eax*4-0x3ffd48a0]
c001b52d:	e8 ea 51 fe ff       	call   c000071c <strcpy>
c001b532:	a1 40 b3 02 c0       	mov    eax,ds:0xc002b340
c001b537:	8d 50 01             	lea    edx,[eax+0x1]
c001b53a:	89 1c 85 60 b5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4aa0],ebx
c001b541:	89 15 40 b3 02 c0    	mov    DWORD PTR ds:0xc002b340,edx
c001b547:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b54b:	83 c4 0c             	add    esp,0xc
c001b54e:	89 14 85 60 b3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4ca0],edx
c001b555:	6a 01                	push   0x1
c001b557:	53                   	push   ebx
c001b558:	56                   	push   esi
c001b559:	e8 ab f6 ff ff       	call   c001ac09 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001b55e:	83 c4 10             	add    esp,0x10
c001b561:	89 c7                	mov    edi,eax
c001b563:	fe c8                	dec    al
c001b565:	74 16                	je     c001b57d <Thr::loadDLL(char const*, bool)+0x153>
c001b567:	89 e8                	mov    eax,ebp
c001b569:	84 c0                	test   al,al
c001b56b:	74 10                	je     c001b57d <Thr::loadDLL(char const*, bool)+0x153>
c001b56d:	83 ec 0c             	sub    esp,0xc
c001b570:	68 9d 87 02 c0       	push   0xc002879d
c001b575:	e8 2d d5 ff ff       	call   c0018aa7 <Krnl::panic(char const*)>
c001b57a:	83 c4 10             	add    esp,0x10
c001b57d:	31 f6                	xor    esi,esi
c001b57f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b583:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b587:	05 ff 0f 00 00       	add    eax,0xfff
c001b58c:	83 d2 00             	adc    edx,0x0
c001b58f:	0f ac d0 0c          	shrd   eax,edx,0xc
c001b593:	c1 ea 0c             	shr    edx,0xc
c001b596:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b59a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b59e:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001b5a2:	ba 00 00 00 00       	mov    edx,0x0
c001b5a7:	89 d0                	mov    eax,edx
c001b5a9:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001b5ad:	73 2c                	jae    c001b5db <Thr::loadDLL(char const*, bool)+0x1b1>
c001b5af:	e8 39 5e ff ff       	call   c00113ed <Virt::getAKernelVAS()>
c001b5b4:	89 f5                	mov    ebp,esi
c001b5b6:	c1 e5 0c             	shl    ebp,0xc
c001b5b9:	52                   	push   edx
c001b5ba:	01 dd                	add    ebp,ebx
c001b5bc:	52                   	push   edx
c001b5bd:	55                   	push   ebp
c001b5be:	50                   	push   eax
c001b5bf:	e8 d4 5f ff ff       	call   c0011598 <VAS::getPageTableEntry(unsigned long)>
c001b5c4:	83 c4 10             	add    esp,0x10
c001b5c7:	f6 00 60             	test   BYTE PTR [eax],0x60
c001b5ca:	75 0c                	jne    c001b5d8 <Thr::loadDLL(char const*, bool)+0x1ae>
c001b5cc:	83 ec 0c             	sub    esp,0xc
c001b5cf:	55                   	push   ebp
c001b5d0:	e8 71 40 ff ff       	call   c000f646 <Phys::freePage(unsigned long)>
c001b5d5:	83 c4 10             	add    esp,0x10
c001b5d8:	46                   	inc    esi
c001b5d9:	eb a4                	jmp    c001b57f <Thr::loadDLL(char const*, bool)+0x155>
c001b5db:	89 f8                	mov    eax,edi
c001b5dd:	84 c0                	test   al,al
c001b5df:	75 02                	jne    c001b5e3 <Thr::loadDLL(char const*, bool)+0x1b9>
c001b5e1:	31 db                	xor    ebx,ebx
c001b5e3:	81 c4 2c 01 00 00    	add    esp,0x12c
c001b5e9:	89 d8                	mov    eax,ebx
c001b5eb:	5b                   	pop    ebx
c001b5ec:	5e                   	pop    esi
c001b5ed:	5f                   	pop    edi
c001b5ee:	5d                   	pop    ebp
c001b5ef:	c3                   	ret    

c001b5f0 <Thr::executeDLL(unsigned long, void*)>:
c001b5f0:	56                   	push   esi
c001b5f1:	53                   	push   ebx
c001b5f2:	51                   	push   ecx
c001b5f3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b5f7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b5fb:	85 db                	test   ebx,ebx
c001b5fd:	75 10                	jne    c001b60f <Thr::executeDLL(unsigned long, void*)+0x1f>
c001b5ff:	83 ec 0c             	sub    esp,0xc
c001b602:	68 bc 87 02 c0       	push   0xc00287bc
c001b607:	e8 9b d4 ff ff       	call   c0018aa7 <Krnl::panic(char const*)>
c001b60c:	83 c4 10             	add    esp,0x10
c001b60f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001b613:	89 d8                	mov    eax,ebx
c001b615:	5a                   	pop    edx
c001b616:	5b                   	pop    ebx
c001b617:	5e                   	pop    esi
c001b618:	ff e0                	jmp    eax

c001b61a <changeTSS>:
c001b61a:	83 ec 0c             	sub    esp,0xc
c001b61d:	e8 1e 9c 00 00       	call   c0025240 <CPU::current()>
c001b622:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b628:	83 ec 08             	sub    esp,0x8
c001b62b:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c001b62e:	05 7c 11 00 00       	add    eax,0x117c
c001b633:	c1 e1 15             	shl    ecx,0x15
c001b636:	ba 00 00 e8 01       	mov    edx,0x1e80000
c001b63b:	29 ca                	sub    edx,ecx
c001b63d:	52                   	push   edx
c001b63e:	50                   	push   eax
c001b63f:	e8 a4 55 ff ff       	call   c0010be8 <TSS::setESP(unsigned long)>
c001b644:	83 c4 1c             	add    esp,0x1c
c001b647:	c3                   	ret    

c001b648 <Process::addArgs(char**)>:
c001b648:	57                   	push   edi
c001b649:	56                   	push   esi
c001b64a:	53                   	push   ebx
c001b64b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b64f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b653:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001b65d:	85 ff                	test   edi,edi
c001b65f:	74 3d                	je     c001b69e <Process::addArgs(char**)+0x56>
c001b661:	8b 07                	mov    eax,DWORD PTR [edi]
c001b663:	85 c0                	test   eax,eax
c001b665:	74 37                	je     c001b69e <Process::addArgs(char**)+0x56>
c001b667:	31 db                	xor    ebx,ebx
c001b669:	83 ec 0c             	sub    esp,0xc
c001b66c:	50                   	push   eax
c001b66d:	e8 28 50 fe ff       	call   c000069a <strlen>
c001b672:	40                   	inc    eax
c001b673:	89 04 24             	mov    DWORD PTR [esp],eax
c001b676:	e8 ab 3a ff ff       	call   c000f126 <malloc>
c001b67b:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001b682:	5a                   	pop    edx
c001b683:	59                   	pop    ecx
c001b684:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001b687:	43                   	inc    ebx
c001b688:	50                   	push   eax
c001b689:	e8 8e 50 fe ff       	call   c000071c <strcpy>
c001b68e:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001b694:	83 c4 10             	add    esp,0x10
c001b697:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001b69a:	85 c0                	test   eax,eax
c001b69c:	75 cb                	jne    c001b669 <Process::addArgs(char**)+0x21>
c001b69e:	5b                   	pop    ebx
c001b69f:	5e                   	pop    esi
c001b6a0:	5f                   	pop    edi
c001b6a1:	c3                   	ret    

c001b6a2 <Process::Process(char const*, Process*, char**)>:
c001b6a2:	56                   	push   esi
c001b6a3:	53                   	push   ebx
c001b6a4:	83 ec 14             	sub    esp,0x14
c001b6a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6ab:	05 0c 02 00 00       	add    eax,0x20c
c001b6b0:	bb 07 00 00 00       	mov    ebx,0x7
c001b6b5:	89 c6                	mov    esi,eax
c001b6b7:	85 db                	test   ebx,ebx
c001b6b9:	78 12                	js     c001b6cd <Process::Process(char const*, Process*, char**)+0x2b>
c001b6bb:	83 ec 0c             	sub    esp,0xc
c001b6be:	56                   	push   esi
c001b6bf:	e8 18 a2 00 00       	call   c00258dc <ThreadControlBlock::ThreadControlBlock()>
c001b6c4:	83 c4 10             	add    esp,0x10
c001b6c7:	83 c6 63             	add    esi,0x63
c001b6ca:	4b                   	dec    ebx
c001b6cb:	eb ea                	jmp    c001b6b7 <Process::Process(char const*, Process*, char**)+0x15>
c001b6cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6d1:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c001b6d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6dc:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001b6e5:	a1 c4 9b 02 c0       	mov    eax,ds:0xc0029bc4
c001b6ea:	8d 50 01             	lea    edx,[eax+0x1]
c001b6ed:	89 15 c4 9b 02 c0    	mov    DWORD PTR ds:0xc0029bc4,edx
c001b6f3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b6f7:	89 02                	mov    DWORD PTR [edx],eax
c001b6f9:	83 ec 0c             	sub    esp,0xc
c001b6fc:	6a 10                	push   0x10
c001b6fe:	e8 3d 6a ff ff       	call   c0012140 <operator new(unsigned long)>
c001b703:	83 c4 10             	add    esp,0x10
c001b706:	89 c3                	mov    ebx,eax
c001b708:	83 ec 08             	sub    esp,0x8
c001b70b:	6a 00                	push   0x0
c001b70d:	53                   	push   ebx
c001b70e:	e8 c1 66 ff ff       	call   c0011dd4 <VAS::VAS(bool)>
c001b713:	83 c4 10             	add    esp,0x10
c001b716:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b71a:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001b720:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b724:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001b72e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b732:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b736:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001b73c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b740:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001b746:	85 c0                	test   eax,eax
c001b748:	74 42                	je     c001b78c <Process::Process(char const*, Process*, char**)+0xea>
c001b74a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b74e:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001b754:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001b75a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b75e:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001b764:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b768:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001b76e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001b774:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b778:	05 0c 01 00 00       	add    eax,0x10c
c001b77d:	83 ec 08             	sub    esp,0x8
c001b780:	52                   	push   edx
c001b781:	50                   	push   eax
c001b782:	e8 95 4f fe ff       	call   c000071c <strcpy>
c001b787:	83 c4 10             	add    esp,0x10
c001b78a:	eb 5c                	jmp    c001b7e8 <Process::Process(char const*, Process*, char**)+0x146>
c001b78c:	83 ec 0c             	sub    esp,0xc
c001b78f:	68 60 12 00 00       	push   0x1260
c001b794:	e8 a7 69 ff ff       	call   c0012140 <operator new(unsigned long)>
c001b799:	83 c4 10             	add    esp,0x10
c001b79c:	89 c3                	mov    ebx,eax
c001b79e:	83 ec 08             	sub    esp,0x8
c001b7a1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b7a5:	53                   	push   ebx
c001b7a6:	e8 3b 51 ff ff       	call   c00108e6 <VgaText::VgaText(char const*)>
c001b7ab:	83 c4 10             	add    esp,0x10
c001b7ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7b2:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001b7b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7bc:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b7c2:	83 ec 0c             	sub    esp,0xc
c001b7c5:	50                   	push   eax
c001b7c6:	e8 1c 45 ff ff       	call   c000fce7 <addToTerminalCycle(VgaText*)>
c001b7cb:	83 c4 10             	add    esp,0x10
c001b7ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7d2:	05 0c 01 00 00       	add    eax,0x10c
c001b7d7:	83 ec 08             	sub    esp,0x8
c001b7da:	68 e6 87 02 c0       	push   0xc00287e6
c001b7df:	50                   	push   eax
c001b7e0:	e8 37 4f fe ff       	call   c000071c <strcpy>
c001b7e5:	83 c4 10             	add    esp,0x10
c001b7e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7ec:	83 c0 0c             	add    eax,0xc
c001b7ef:	83 ec 08             	sub    esp,0x8
c001b7f2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b7f6:	50                   	push   eax
c001b7f7:	e8 20 4f fe ff       	call   c000071c <strcpy>
c001b7fc:	83 c4 10             	add    esp,0x10
c001b7ff:	83 ec 08             	sub    esp,0x8
c001b802:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b806:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b80a:	e8 39 fe ff ff       	call   c001b648 <Process::addArgs(char**)>
c001b80f:	83 c4 10             	add    esp,0x10
c001b812:	83 ec 08             	sub    esp,0x8
c001b815:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b819:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b81d:	e8 ae ee ff ff       	call   c001a6d0 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001b822:	83 c4 10             	add    esp,0x10
c001b825:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001b829:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b82d:	83 f0 01             	xor    eax,0x1
c001b830:	88 c2                	mov    dl,al
c001b832:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b836:	88 90 3a 07 00 00    	mov    BYTE PTR [eax+0x73a],dl
c001b83c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001b841:	83 ec 08             	sub    esp,0x8
c001b844:	50                   	push   eax
c001b845:	68 e4 88 02 c0       	push   0xc00288e4
c001b84a:	e8 e0 69 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c001b84f:	83 c4 10             	add    esp,0x10
c001b852:	90                   	nop
c001b853:	83 c4 14             	add    esp,0x14
c001b856:	5b                   	pop    ebx
c001b857:	5e                   	pop    esi
c001b858:	c3                   	ret    
c001b859:	90                   	nop

c001b85a <Process::Process(bool, char const*, Process*, char**)>:
c001b85a:	56                   	push   esi
c001b85b:	53                   	push   ebx
c001b85c:	83 ec 14             	sub    esp,0x14
c001b85f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b863:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b867:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b86b:	05 0c 02 00 00       	add    eax,0x20c
c001b870:	bb 07 00 00 00       	mov    ebx,0x7
c001b875:	89 c6                	mov    esi,eax
c001b877:	85 db                	test   ebx,ebx
c001b879:	78 12                	js     c001b88d <Process::Process(bool, char const*, Process*, char**)+0x33>
c001b87b:	83 ec 0c             	sub    esp,0xc
c001b87e:	56                   	push   esi
c001b87f:	e8 58 a0 00 00       	call   c00258dc <ThreadControlBlock::ThreadControlBlock()>
c001b884:	83 c4 10             	add    esp,0x10
c001b887:	83 c6 63             	add    esi,0x63
c001b88a:	4b                   	dec    ebx
c001b88b:	eb ea                	jmp    c001b877 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001b88d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b891:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c001b898:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b89c:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001b8a5:	a1 c4 9b 02 c0       	mov    eax,ds:0xc0029bc4
c001b8aa:	8d 50 01             	lea    edx,[eax+0x1]
c001b8ad:	89 15 c4 9b 02 c0    	mov    DWORD PTR ds:0xc0029bc4,edx
c001b8b3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b8b7:	89 02                	mov    DWORD PTR [edx],eax
c001b8b9:	83 ec 0c             	sub    esp,0xc
c001b8bc:	6a 10                	push   0x10
c001b8be:	e8 7d 68 ff ff       	call   c0012140 <operator new(unsigned long)>
c001b8c3:	83 c4 10             	add    esp,0x10
c001b8c6:	89 c3                	mov    ebx,eax
c001b8c8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b8cd:	83 ec 08             	sub    esp,0x8
c001b8d0:	50                   	push   eax
c001b8d1:	53                   	push   ebx
c001b8d2:	e8 fd 64 ff ff       	call   c0011dd4 <VAS::VAS(bool)>
c001b8d7:	83 c4 10             	add    esp,0x10
c001b8da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b8de:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001b8e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b8e8:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001b8f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b8f6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b8fa:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001b900:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b904:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001b90a:	85 c0                	test   eax,eax
c001b90c:	74 42                	je     c001b950 <Process::Process(bool, char const*, Process*, char**)+0xf6>
c001b90e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b912:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001b918:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001b91e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b922:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001b928:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b92c:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001b932:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001b938:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b93c:	05 0c 01 00 00       	add    eax,0x10c
c001b941:	83 ec 08             	sub    esp,0x8
c001b944:	52                   	push   edx
c001b945:	50                   	push   eax
c001b946:	e8 d1 4d fe ff       	call   c000071c <strcpy>
c001b94b:	83 c4 10             	add    esp,0x10
c001b94e:	eb 5c                	jmp    c001b9ac <Process::Process(bool, char const*, Process*, char**)+0x152>
c001b950:	83 ec 0c             	sub    esp,0xc
c001b953:	68 60 12 00 00       	push   0x1260
c001b958:	e8 e3 67 ff ff       	call   c0012140 <operator new(unsigned long)>
c001b95d:	83 c4 10             	add    esp,0x10
c001b960:	89 c3                	mov    ebx,eax
c001b962:	83 ec 08             	sub    esp,0x8
c001b965:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b969:	53                   	push   ebx
c001b96a:	e8 77 4f ff ff       	call   c00108e6 <VgaText::VgaText(char const*)>
c001b96f:	83 c4 10             	add    esp,0x10
c001b972:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b976:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001b97c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b980:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b986:	83 ec 0c             	sub    esp,0xc
c001b989:	50                   	push   eax
c001b98a:	e8 58 43 ff ff       	call   c000fce7 <addToTerminalCycle(VgaText*)>
c001b98f:	83 c4 10             	add    esp,0x10
c001b992:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b996:	05 0c 01 00 00       	add    eax,0x10c
c001b99b:	83 ec 08             	sub    esp,0x8
c001b99e:	68 e6 87 02 c0       	push   0xc00287e6
c001b9a3:	50                   	push   eax
c001b9a4:	e8 73 4d fe ff       	call   c000071c <strcpy>
c001b9a9:	83 c4 10             	add    esp,0x10
c001b9ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b9b0:	83 c0 0c             	add    eax,0xc
c001b9b3:	83 ec 08             	sub    esp,0x8
c001b9b6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b9ba:	50                   	push   eax
c001b9bb:	e8 5c 4d fe ff       	call   c000071c <strcpy>
c001b9c0:	83 c4 10             	add    esp,0x10
c001b9c3:	83 ec 08             	sub    esp,0x8
c001b9c6:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001b9ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b9ce:	e8 75 fc ff ff       	call   c001b648 <Process::addArgs(char**)>
c001b9d3:	83 c4 10             	add    esp,0x10
c001b9d6:	90                   	nop
c001b9d7:	83 c4 14             	add    esp,0x14
c001b9da:	5b                   	pop    ebx
c001b9db:	5e                   	pop    esi
c001b9dc:	c3                   	ret    

c001b9dd <disableIRQs()>:
c001b9dd:	fa                   	cli    
c001b9de:	ff 05 0c bb 02 c0    	inc    DWORD PTR ds:0xc002bb0c
c001b9e4:	c3                   	ret    

c001b9e5 <getIRQNestingLevel()>:
c001b9e5:	a1 0c bb 02 c0       	mov    eax,ds:0xc002bb0c
c001b9ea:	c3                   	ret    

c001b9eb <enableIRQs()>:
c001b9eb:	a1 0c bb 02 c0       	mov    eax,ds:0xc002bb0c
c001b9f0:	48                   	dec    eax
c001b9f1:	a3 0c bb 02 c0       	mov    ds:0xc002bb0c,eax
c001b9f6:	75 01                	jne    c001b9f9 <enableIRQs()+0xe>
c001b9f8:	fb                   	sti    
c001b9f9:	c3                   	ret    

c001b9fa <lockScheduler()>:
c001b9fa:	eb e1                	jmp    c001b9dd <disableIRQs()>

c001b9fc <unlockScheduler()>:
c001b9fc:	eb ed                	jmp    c001b9eb <enableIRQs()>

c001b9fe <userModeEntryPoint(void*)>:
c001b9fe:	83 ec 0c             	sub    esp,0xc
c001ba01:	e8 f6 ff ff ff       	call   c001b9fc <unlockScheduler()>
c001ba06:	fb                   	sti    
c001ba07:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba0c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ba0f:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001ba15:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ba19:	83 c4 0c             	add    esp,0xc
c001ba1c:	e9 bf 48 fe ff       	jmp    c00002e0 <goToUsermode>

c001ba21 <lockStuff()>:
c001ba21:	e8 b7 ff ff ff       	call   c001b9dd <disableIRQs()>
c001ba26:	ff 05 08 bb 02 c0    	inc    DWORD PTR ds:0xc002bb08
c001ba2c:	c3                   	ret    

c001ba2d <taskStartupFunction>:
c001ba2d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba32:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001ba35:	c3                   	ret    

c001ba36 <updateTimeUsed()>:
c001ba36:	57                   	push   edi
c001ba37:	56                   	push   esi
c001ba38:	53                   	push   ebx
c001ba39:	e8 02 98 00 00       	call   c0025240 <CPU::current()>
c001ba3e:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001ba45:	74 49                	je     c001ba90 <updateTimeUsed()+0x5a>
c001ba47:	0f 31                	rdtsc  
c001ba49:	89 c1                	mov    ecx,eax
c001ba4b:	a3 48 bb 02 c0       	mov    ds:0xc002bb48,eax
c001ba50:	2b 0d 38 bb 02 c0    	sub    ecx,DWORD PTR ds:0xc002bb38
c001ba56:	89 d3                	mov    ebx,edx
c001ba58:	89 0d 40 bb 02 c0    	mov    DWORD PTR ds:0xc002bb40,ecx
c001ba5e:	1b 1d 3c bb 02 c0    	sbb    ebx,DWORD PTR ds:0xc002bb3c
c001ba64:	a3 38 bb 02 c0       	mov    ds:0xc002bb38,eax
c001ba69:	89 1d 44 bb 02 c0    	mov    DWORD PTR ds:0xc002bb44,ebx
c001ba6f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba74:	89 15 4c bb 02 c0    	mov    DWORD PTR ds:0xc002bb4c,edx
c001ba7a:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001ba7d:	89 15 3c bb 02 c0    	mov    DWORD PTR ds:0xc002bb3c,edx
c001ba83:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001ba86:	01 f1                	add    ecx,esi
c001ba88:	11 fb                	adc    ebx,edi
c001ba8a:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001ba8d:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001ba90:	5b                   	pop    ebx
c001ba91:	5e                   	pop    esi
c001ba92:	5f                   	pop    edi
c001ba93:	c3                   	ret    

c001ba94 <switchToThread(ThreadControlBlock*)>:
c001ba94:	53                   	push   ebx
c001ba95:	83 ec 08             	sub    esp,0x8
c001ba98:	a1 08 bb 02 c0       	mov    eax,ds:0xc002bb08
c001ba9d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001baa1:	85 c0                	test   eax,eax
c001baa3:	75 30                	jne    c001bad5 <switchToThread(ThreadControlBlock*)+0x41>
c001baa5:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001baa8:	3c ff                	cmp    al,0xff
c001baaa:	74 25                	je     c001bad1 <switchToThread(ThreadControlBlock*)+0x3d>
c001baac:	0f b6 d0             	movzx  edx,al
c001baaf:	b8 84 03 00 00       	mov    eax,0x384
c001bab4:	29 d0                	sub    eax,edx
c001bab6:	c1 e0 10             	shl    eax,0x10
c001bab9:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001babc:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001babf:	e8 72 ff ff ff       	call   c001ba36 <updateTimeUsed()>
c001bac4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001bac8:	83 c4 08             	add    esp,0x8
c001bacb:	5b                   	pop    ebx
c001bacc:	e9 48 48 fe ff       	jmp    c0000319 <switchToThreadASM>
c001bad1:	31 c0                	xor    eax,eax
c001bad3:	eb e7                	jmp    c001babc <switchToThread(ThreadControlBlock*)+0x28>
c001bad5:	c7 05 04 bb 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002bb04,0x1
c001badf:	83 c4 08             	add    esp,0x8
c001bae2:	5b                   	pop    ebx
c001bae3:	c3                   	ret    

c001bae4 <Semaphore::Semaphore(int)>:
c001bae4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bae8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001baec:	89 10                	mov    DWORD PTR [eax],edx
c001baee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001baf2:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001baf9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bafd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bb04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb08:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001bb0f:	90                   	nop
c001bb10:	c3                   	ret    
c001bb11:	90                   	nop

c001bb12 <Mutex::Mutex()>:
c001bb12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb16:	6a 01                	push   0x1
c001bb18:	50                   	push   eax
c001bb19:	e8 c6 ff ff ff       	call   c001bae4 <Semaphore::Semaphore(int)>
c001bb1e:	83 c4 08             	add    esp,0x8
c001bb21:	90                   	nop
c001bb22:	c3                   	ret    
c001bb23:	90                   	nop

c001bb24 <Process::createThread(void (*)(void*), void*, int)>:
c001bb24:	55                   	push   ebp
c001bb25:	31 c9                	xor    ecx,ecx
c001bb27:	57                   	push   edi
c001bb28:	56                   	push   esi
c001bb29:	53                   	push   ebx
c001bb2a:	83 ec 1c             	sub    esp,0x1c
c001bb2d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001bb31:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001bb38:	89 f2                	mov    edx,esi
c001bb3a:	0f b7 c2             	movzx  eax,dx
c001bb3d:	83 e2 01             	and    edx,0x1
c001bb40:	74 14                	je     c001bb56 <Process::createThread(void (*)(void*), void*, int)+0x32>
c001bb42:	d1 f8                	sar    eax,1
c001bb44:	41                   	inc    ecx
c001bb45:	89 c2                	mov    edx,eax
c001bb47:	83 f9 10             	cmp    ecx,0x10
c001bb4a:	75 ee                	jne    c001bb3a <Process::createThread(void (*)(void*), void*, int)+0x16>
c001bb4c:	83 c4 1c             	add    esp,0x1c
c001bb4f:	31 c0                	xor    eax,eax
c001bb51:	5b                   	pop    ebx
c001bb52:	5e                   	pop    esi
c001bb53:	5f                   	pop    edi
c001bb54:	5d                   	pop    ebp
c001bb55:	c3                   	ret    
c001bb56:	83 ec 08             	sub    esp,0x8
c001bb59:	b8 01 00 00 00       	mov    eax,0x1
c001bb5e:	d3 e0                	shl    eax,cl
c001bb60:	09 c6                	or     esi,eax
c001bb62:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001bb68:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001bb6f:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001bb72:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001bb75:	01 ce                	add    esi,ecx
c001bb77:	89 f0                	mov    eax,esi
c001bb79:	c1 e0 05             	shl    eax,0x5
c001bb7c:	01 c6                	add    esi,eax
c001bb7e:	8d 04 33             	lea    eax,[ebx+esi*1]
c001bb81:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001bb87:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001bb8d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001bb91:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001bb97:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001bb9d:	89 ca                	mov    edx,ecx
c001bb9f:	f7 da                	neg    edx
c001bba1:	c1 e2 15             	shl    edx,0x15
c001bba4:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001bbaa:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001bbb0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001bbb4:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001bbbe:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001bbc4:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001bbc8:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001bbce:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001bbd8:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001bbe2:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001bbe9:	50                   	push   eax
c001bbea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bbee:	68 28 bb 02 c0       	push   0xc002bb28
c001bbf3:	e8 3c 9b 00 00       	call   c0025734 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001bbf8:	83 c4 10             	add    esp,0x10
c001bbfb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bbff:	83 c4 1c             	add    esp,0x1c
c001bc02:	5b                   	pop    ebx
c001bc03:	5e                   	pop    esi
c001bc04:	5f                   	pop    edi
c001bc05:	5d                   	pop    ebp
c001bc06:	c3                   	ret    
c001bc07:	90                   	nop

c001bc08 <Process::createUserThread()>:
c001bc08:	83 ec 0c             	sub    esp,0xc
c001bc0b:	68 80 00 00 00       	push   0x80
c001bc10:	6a 00                	push   0x0
c001bc12:	68 fe b9 01 c0       	push   0xc001b9fe
c001bc17:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bc1b:	e8 04 ff ff ff       	call   c001bb24 <Process::createThread(void (*)(void*), void*, int)>
c001bc20:	83 c4 1c             	add    esp,0x1c
c001bc23:	c3                   	ret    

c001bc24 <setupMultitasking(void (*)())>:
c001bc24:	56                   	push   esi
c001bc25:	53                   	push   ebx
c001bc26:	53                   	push   ebx
c001bc27:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bc2b:	eb 10                	jmp    c001bc3d <setupMultitasking(void (*)())+0x19>
c001bc2d:	83 ec 0c             	sub    esp,0xc
c001bc30:	68 28 bb 02 c0       	push   0xc002bb28
c001bc35:	e8 4c 9a 00 00       	call   c0025686 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001bc3a:	83 c4 10             	add    esp,0x10
c001bc3d:	83 ec 0c             	sub    esp,0xc
c001bc40:	68 28 bb 02 c0       	push   0xc002bb28
c001bc45:	e8 20 9a 00 00       	call   c002566a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001bc4a:	83 c4 10             	add    esp,0x10
c001bc4d:	84 c0                	test   al,al
c001bc4f:	74 dc                	je     c001bc2d <setupMultitasking(void (*)())+0x9>
c001bc51:	83 ec 0c             	sub    esp,0xc
c001bc54:	68 3b 07 00 00       	push   0x73b
c001bc59:	e8 e2 64 ff ff       	call   c0012140 <operator new(unsigned long)>
c001bc5e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001bc65:	89 c3                	mov    ebx,eax
c001bc67:	6a 00                	push   0x0
c001bc69:	68 ea 87 02 c0       	push   0xc00287ea
c001bc6e:	6a 01                	push   0x1
c001bc70:	50                   	push   eax
c001bc71:	e8 e4 fb ff ff       	call   c001b85a <Process::Process(bool, char const*, Process*, char**)>
c001bc76:	83 c4 18             	add    esp,0x18
c001bc79:	89 1d 34 bb 02 c0    	mov    DWORD PTR ds:0xc002bb34,ebx
c001bc7f:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001bc85:	68 0c 89 02 c0       	push   0xc002890c
c001bc8a:	e8 a0 65 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c001bc8f:	58                   	pop    eax
c001bc90:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001bc96:	e8 c0 47 ff ff       	call   c001045b <setActiveTerminal(VgaText*)>
c001bc9b:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001bca3:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001bca9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001bcac:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001bcb6:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001bcbc:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001bcc2:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001bccc:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001bcd6:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001bce0:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001bce6:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001bcec:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001bcf6:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001bcfc:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001bd06:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001bd0c:	5a                   	pop    edx
c001bd0d:	59                   	pop    ecx
c001bd0e:	68 e6 87 02 c0       	push   0xc00287e6
c001bd13:	50                   	push   eax
c001bd14:	e8 03 4a fe ff       	call   c000071c <strcpy>
c001bd19:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001bd20:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001bd24:	83 c4 14             	add    esp,0x14
c001bd27:	5b                   	pop    ebx
c001bd28:	5e                   	pop    esi
c001bd29:	e9 dd 45 fe ff       	jmp    c000030b <switchToThreadASMFirstTime>

c001bd2e <schedule()>:
c001bd2e:	a1 08 bb 02 c0       	mov    eax,ds:0xc002bb08
c001bd33:	85 c0                	test   eax,eax
c001bd35:	74 0b                	je     c001bd42 <schedule()+0x14>
c001bd37:	c7 05 04 bb 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002bb04,0x1
c001bd41:	c3                   	ret    
c001bd42:	53                   	push   ebx
c001bd43:	83 ec 14             	sub    esp,0x14
c001bd46:	68 28 bb 02 c0       	push   0xc002bb28
c001bd4b:	e8 1a 99 00 00       	call   c002566a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001bd50:	83 c4 10             	add    esp,0x10
c001bd53:	84 c0                	test   al,al
c001bd55:	75 38                	jne    c001bd8f <schedule()+0x61>
c001bd57:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd5c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001bd5f:	4a                   	dec    edx
c001bd60:	74 32                	je     c001bd94 <schedule()+0x66>
c001bd62:	83 ec 0c             	sub    esp,0xc
c001bd65:	68 28 bb 02 c0       	push   0xc002bb28
c001bd6a:	e8 f3 98 00 00       	call   c0025662 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001bd6f:	c7 04 24 28 bb 02 c0 	mov    DWORD PTR [esp],0xc002bb28
c001bd76:	89 c3                	mov    ebx,eax
c001bd78:	e8 09 99 00 00       	call   c0025686 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001bd7d:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001bd84:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd87:	e8 08 fd ff ff       	call   c001ba94 <switchToThread(ThreadControlBlock*)>
c001bd8c:	83 c4 10             	add    esp,0x10
c001bd8f:	83 c4 08             	add    esp,0x8
c001bd92:	5b                   	pop    ebx
c001bd93:	c3                   	ret    
c001bd94:	83 ec 08             	sub    esp,0x8
c001bd97:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001bd9e:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001bda4:	68 28 bb 02 c0       	push   0xc002bb28
c001bda9:	e8 86 99 00 00       	call   c0025734 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001bdae:	83 c4 10             	add    esp,0x10
c001bdb1:	eb af                	jmp    c001bd62 <schedule()+0x34>

c001bdb3 <unlockStuff()>:
c001bdb3:	a1 08 bb 02 c0       	mov    eax,ds:0xc002bb08
c001bdb8:	48                   	dec    eax
c001bdb9:	a3 08 bb 02 c0       	mov    ds:0xc002bb08,eax
c001bdbe:	75 09                	jne    c001bdc9 <unlockStuff()+0x16>
c001bdc0:	a1 04 bb 02 c0       	mov    eax,ds:0xc002bb04
c001bdc5:	85 c0                	test   eax,eax
c001bdc7:	75 05                	jne    c001bdce <unlockStuff()+0x1b>
c001bdc9:	e9 1d fc ff ff       	jmp    c001b9eb <enableIRQs()>
c001bdce:	83 ec 0c             	sub    esp,0xc
c001bdd1:	c7 05 04 bb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bb04,0x0
c001bddb:	e8 4e ff ff ff       	call   c001bd2e <schedule()>
c001bde0:	83 c4 0c             	add    esp,0xc
c001bde3:	e9 03 fc ff ff       	jmp    c001b9eb <enableIRQs()>

c001bde8 <Semaphore::tryAcquire()>:
c001bde8:	83 ec 0c             	sub    esp,0xc
c001bdeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdef:	e8 2d fc ff ff       	call   c001ba21 <lockStuff()>
c001bdf4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001bdf7:	3b 10                	cmp    edx,DWORD PTR [eax]
c001bdf9:	7c 0b                	jl     c001be06 <Semaphore::tryAcquire()+0x1e>
c001bdfb:	e8 b3 ff ff ff       	call   c001bdb3 <unlockStuff()>
c001be00:	31 c0                	xor    eax,eax
c001be02:	83 c4 0c             	add    esp,0xc
c001be05:	c3                   	ret    
c001be06:	42                   	inc    edx
c001be07:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001be0a:	e8 a4 ff ff ff       	call   c001bdb3 <unlockStuff()>
c001be0f:	b0 01                	mov    al,0x1
c001be11:	83 c4 0c             	add    esp,0xc
c001be14:	c3                   	ret    
c001be15:	90                   	nop

c001be16 <Semaphore::assertLocked(char const*)>:
c001be16:	83 ec 0c             	sub    esp,0xc
c001be19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be1d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001be21:	e8 fb fb ff ff       	call   c001ba21 <lockStuff()>
c001be26:	8b 08                	mov    ecx,DWORD PTR [eax]
c001be28:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001be2b:	7c 05                	jl     c001be32 <Semaphore::assertLocked(char const*)+0x1c>
c001be2d:	83 c4 0c             	add    esp,0xc
c001be30:	eb 81                	jmp    c001bdb3 <unlockStuff()>
c001be32:	83 ec 0c             	sub    esp,0xc
c001be35:	52                   	push   edx
c001be36:	e8 6c cc ff ff       	call   c0018aa7 <Krnl::panic(char const*)>
c001be3b:	83 c4 10             	add    esp,0x10
c001be3e:	83 c4 0c             	add    esp,0xc
c001be41:	e9 6d ff ff ff       	jmp    c001bdb3 <unlockStuff()>

c001be46 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001be46:	83 ec 0c             	sub    esp,0xc
c001be49:	e8 97 fb ff ff       	call   c001b9e5 <getIRQNestingLevel()>
c001be4e:	83 ec 08             	sub    esp,0x8
c001be51:	50                   	push   eax
c001be52:	68 40 89 02 c0       	push   0xc0028940
c001be57:	e8 d3 63 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c001be5c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001be60:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be65:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001be68:	e8 c1 fe ff ff       	call   c001bd2e <schedule()>
c001be6d:	e8 8a fb ff ff       	call   c001b9fc <unlockScheduler()>
c001be72:	e8 6e fb ff ff       	call   c001b9e5 <getIRQNestingLevel()>
c001be77:	5a                   	pop    edx
c001be78:	59                   	pop    ecx
c001be79:	50                   	push   eax
c001be7a:	68 74 89 02 c0       	push   0xc0028974
c001be7f:	e8 ab 63 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c001be84:	83 c4 1c             	add    esp,0x1c
c001be87:	c3                   	ret    

c001be88 <blockTask(TaskState)>:
c001be88:	83 ec 0c             	sub    esp,0xc
c001be8b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001be8f:	e8 66 fb ff ff       	call   c001b9fa <lockScheduler()>
c001be94:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be99:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001be9c:	e8 8d fe ff ff       	call   c001bd2e <schedule()>
c001bea1:	83 c4 0c             	add    esp,0xc
c001bea4:	e9 53 fb ff ff       	jmp    c001b9fc <unlockScheduler()>

c001bea9 <waitTask(int, int*, int)>:
c001bea9:	83 ec 18             	sub    esp,0x18
c001beac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001beb1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001beb5:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001beb8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001bebc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bec1:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001bec4:	6a 07                	push   0x7
c001bec6:	e8 bd ff ff ff       	call   c001be88 <blockTask(TaskState)>
c001becb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bed0:	83 c4 10             	add    esp,0x10
c001bed3:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001bed6:	85 d2                	test   edx,edx
c001bed8:	74 0a                	je     c001bee4 <waitTask(int, int*, int)+0x3b>
c001beda:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001bedd:	89 02                	mov    DWORD PTR [edx],eax
c001bedf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bee4:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001bee7:	83 c4 0c             	add    esp,0xc
c001beea:	c3                   	ret    

c001beeb <nanoSleepUntil(unsigned long long)>:
c001beeb:	83 ec 0c             	sub    esp,0xc
c001beee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bef2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bef6:	3b 05 90 ac 02 c0    	cmp    eax,DWORD PTR ds:0xc002ac90
c001befc:	89 d1                	mov    ecx,edx
c001befe:	1b 0d 94 ac 02 c0    	sbb    ecx,DWORD PTR ds:0xc002ac94
c001bf04:	73 04                	jae    c001bf0a <nanoSleepUntil(unsigned long long)+0x1f>
c001bf06:	83 c4 0c             	add    esp,0xc
c001bf09:	c3                   	ret    
c001bf0a:	e8 12 fb ff ff       	call   c001ba21 <lockStuff()>
c001bf0f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bf15:	83 ec 08             	sub    esp,0x8
c001bf18:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001bf1b:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001bf1e:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001bf24:	68 1c bb 02 c0       	push   0xc002bb1c
c001bf29:	e8 06 98 00 00       	call   c0025734 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001bf2e:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001bf35:	e8 4e ff ff ff       	call   c001be88 <blockTask(TaskState)>
c001bf3a:	83 c4 1c             	add    esp,0x1c
c001bf3d:	e9 71 fe ff ff       	jmp    c001bdb3 <unlockStuff()>

c001bf42 <nanoSleep(unsigned long long)>:
c001bf42:	a1 90 ac 02 c0       	mov    eax,ds:0xc002ac90
c001bf47:	8b 15 94 ac 02 c0    	mov    edx,DWORD PTR ds:0xc002ac94
c001bf4d:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001bf51:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001bf55:	eb 94                	jmp    c001beeb <nanoSleepUntil(unsigned long long)>

c001bf57 <sleep(unsigned long long)>:
c001bf57:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001bf5f:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001bf64:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001bf68:	01 ca                	add    edx,ecx
c001bf6a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bf6e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001bf72:	eb ce                	jmp    c001bf42 <nanoSleep(unsigned long long)>

c001bf74 <Semaphore::acquire()>:
c001bf74:	83 ec 0c             	sub    esp,0xc
c001bf77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf7b:	e8 a1 fa ff ff       	call   c001ba21 <lockStuff()>
c001bf80:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001bf83:	3b 10                	cmp    edx,DWORD PTR [eax]
c001bf85:	7d 0c                	jge    c001bf93 <Semaphore::acquire()+0x1f>
c001bf87:	42                   	inc    edx
c001bf88:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001bf8b:	83 c4 0c             	add    esp,0xc
c001bf8e:	e9 20 fe ff ff       	jmp    c001bdb3 <unlockStuff()>
c001bf93:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001bf99:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001bfa0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001bfa3:	85 d2                	test   edx,edx
c001bfa5:	74 2a                	je     c001bfd1 <Semaphore::acquire()+0x5d>
c001bfa7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001bfaa:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bfb0:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001bfb3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001bfb9:	83 ec 0c             	sub    esp,0xc
c001bfbc:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001bfbf:	6a 05                	push   0x5
c001bfc1:	e8 c2 fe ff ff       	call   c001be88 <blockTask(TaskState)>
c001bfc6:	83 c4 10             	add    esp,0x10
c001bfc9:	83 c4 0c             	add    esp,0xc
c001bfcc:	e9 e2 fd ff ff       	jmp    c001bdb3 <unlockStuff()>
c001bfd1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001bfd7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001bfda:	eb d7                	jmp    c001bfb3 <Semaphore::acquire()+0x3f>

c001bfdc <taskReturned>:
c001bfdc:	83 ec 18             	sub    esp,0x18
c001bfdf:	68 a8 89 02 c0       	push   0xc00289a8
c001bfe4:	e8 be ca ff ff       	call   c0018aa7 <Krnl::panic(char const*)>
c001bfe9:	83 c4 10             	add    esp,0x10
c001bfec:	83 ec 0c             	sub    esp,0xc
c001bfef:	6a 02                	push   0x2
c001bff1:	e8 92 fe ff ff       	call   c001be88 <blockTask(TaskState)>
c001bff6:	e8 ff f9 ff ff       	call   c001b9fa <lockScheduler()>
c001bffb:	e8 2e fd ff ff       	call   c001bd2e <schedule()>
c001c000:	e8 f7 f9 ff ff       	call   c001b9fc <unlockScheduler()>
c001c005:	83 c4 10             	add    esp,0x10
c001c008:	eb e2                	jmp    c001bfec <taskReturned+0x10>

c001c00a <unblockTask(ThreadControlBlock*)>:
c001c00a:	53                   	push   ebx
c001c00b:	83 ec 08             	sub    esp,0x8
c001c00e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c012:	e8 e3 f9 ff ff       	call   c001b9fa <lockScheduler()>
c001c017:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c01a:	85 c0                	test   eax,eax
c001c01c:	74 5c                	je     c001c07a <unblockTask(ThreadControlBlock*)+0x70>
c001c01e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c021:	48                   	dec    eax
c001c022:	74 31                	je     c001c055 <unblockTask(ThreadControlBlock*)+0x4b>
c001c024:	83 ec 0c             	sub    esp,0xc
c001c027:	68 28 bb 02 c0       	push   0xc002bb28
c001c02c:	e8 31 96 00 00       	call   c0025662 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c031:	83 c4 10             	add    esp,0x10
c001c034:	85 c0                	test   eax,eax
c001c036:	75 17                	jne    c001c04f <unblockTask(ThreadControlBlock*)+0x45>
c001c038:	eb 65                	jmp    c001c09f <unblockTask(ThreadControlBlock*)+0x95>
c001c03a:	83 ec 08             	sub    esp,0x8
c001c03d:	50                   	push   eax
c001c03e:	68 28 bb 02 c0       	push   0xc002bb28
c001c043:	e8 2a 99 00 00       	call   c0025972 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001c048:	83 c4 10             	add    esp,0x10
c001c04b:	85 c0                	test   eax,eax
c001c04d:	74 50                	je     c001c09f <unblockTask(ThreadControlBlock*)+0x95>
c001c04f:	39 c3                	cmp    ebx,eax
c001c051:	75 e7                	jne    c001c03a <unblockTask(ThreadControlBlock*)+0x30>
c001c053:	eb 1c                	jmp    c001c071 <unblockTask(ThreadControlBlock*)+0x67>
c001c055:	83 ec 0c             	sub    esp,0xc
c001c058:	68 98 8a 02 c0       	push   0xc0028a98
c001c05d:	e8 cd 61 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c001c062:	c7 04 24 24 8a 02 c0 	mov    DWORD PTR [esp],0xc0028a24
c001c069:	e8 c1 61 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c001c06e:	83 c4 10             	add    esp,0x10
c001c071:	83 c4 08             	add    esp,0x8
c001c074:	5b                   	pop    ebx
c001c075:	e9 82 f9 ff ff       	jmp    c001b9fc <unlockScheduler()>
c001c07a:	83 ec 0c             	sub    esp,0xc
c001c07d:	68 dc 89 02 c0       	push   0xc00289dc
c001c082:	e8 a8 61 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c001c087:	c7 04 24 24 8a 02 c0 	mov    DWORD PTR [esp],0xc0028a24
c001c08e:	e8 9c 61 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c001c093:	83 c4 10             	add    esp,0x10
c001c096:	83 c4 08             	add    esp,0x8
c001c099:	5b                   	pop    ebx
c001c09a:	e9 5d f9 ff ff       	jmp    c001b9fc <unlockScheduler()>
c001c09f:	83 ec 08             	sub    esp,0x8
c001c0a2:	53                   	push   ebx
c001c0a3:	68 28 bb 02 c0       	push   0xc002bb28
c001c0a8:	e8 87 96 00 00       	call   c0025734 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001c0ad:	83 c4 10             	add    esp,0x10
c001c0b0:	83 c4 08             	add    esp,0x8
c001c0b3:	5b                   	pop    ebx
c001c0b4:	e9 43 f9 ff ff       	jmp    c001b9fc <unlockScheduler()>

c001c0b9 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001c0b9:	55                   	push   ebp
c001c0ba:	57                   	push   edi
c001c0bb:	56                   	push   esi
c001c0bc:	53                   	push   ebx
c001c0bd:	83 ec 1c             	sub    esp,0x1c
c001c0c0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c0c4:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c0c7:	8b 88 36 05 00 00    	mov    ecx,DWORD PTR [eax+0x536]
c001c0cd:	85 c9                	test   ecx,ecx
c001c0cf:	7e 20                	jle    c001c0f1 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001c0d1:	31 f6                	xor    esi,esi
c001c0d3:	83 ec 0c             	sub    esp,0xc
c001c0d6:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001c0dd:	46                   	inc    esi
c001c0de:	e8 53 30 ff ff       	call   c000f136 <free>
c001c0e3:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c0e6:	83 c4 10             	add    esp,0x10
c001c0e9:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001c0ef:	7f e2                	jg     c001c0d3 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001c0f1:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001c0fb:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001c100:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001c103:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001c106:	d3 c0                	rol    eax,cl
c001c108:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001c10f:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001c112:	89 f7                	mov    edi,esi
c001c114:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001c11c:	0f 85 4f 01 00 00    	jne    c001c271 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b8>
c001c122:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001c128:	85 c0                	test   eax,eax
c001c12a:	0f 84 aa 00 00 00    	je     c001c1da <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c001c130:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001c133:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c137:	31 c9                	xor    ecx,ecx
c001c139:	eb 10                	jmp    c001c14b <cleanupTerminatedTask(ThreadControlBlock*)+0x92>
c001c13b:	41                   	inc    ecx
c001c13c:	83 f9 10             	cmp    ecx,0x10
c001c13f:	0f 84 95 00 00 00    	je     c001c1da <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c001c145:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001c14b:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001c152:	d3 fa                	sar    edx,cl
c001c154:	83 e2 01             	and    edx,0x1
c001c157:	74 e2                	je     c001c13b <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001c159:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001c15c:	01 ca                	add    edx,ecx
c001c15e:	89 d5                	mov    ebp,edx
c001c160:	c1 e5 05             	shl    ebp,0x5
c001c163:	01 ea                	add    edx,ebp
c001c165:	01 d0                	add    eax,edx
c001c167:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001c16d:	83 fd 07             	cmp    ebp,0x7
c001c170:	75 c9                	jne    c001c13b <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001c172:	05 40 02 00 00       	add    eax,0x240
c001c177:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001c17a:	83 fd ff             	cmp    ebp,0xffffffff
c001c17d:	0f 8c 08 01 00 00    	jl     c001c28b <cleanupTerminatedTask(ThreadControlBlock*)+0x1d2>
c001c183:	0f 84 b9 01 00 00    	je     c001c342 <cleanupTerminatedTask(ThreadControlBlock*)+0x289>
c001c189:	85 ed                	test   ebp,ebp
c001c18b:	0f 84 a0 01 00 00    	je     c001c331 <cleanupTerminatedTask(ThreadControlBlock*)+0x278>
c001c191:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001c193:	75 a6                	jne    c001c13b <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001c195:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001c19b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c19f:	01 d0                	add    eax,edx
c001c1a1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001c1a5:	83 ec 0c             	sub    esp,0xc
c001c1a8:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001c1ae:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c1b1:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001c1b7:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001c1be:	50                   	push   eax
c001c1bf:	e8 46 fe ff ff       	call   c001c00a <unblockTask(ThreadControlBlock*)>
c001c1c4:	83 c4 10             	add    esp,0x10
c001c1c7:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001c1ca:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c1ce:	89 f7                	mov    edi,esi
c001c1d0:	41                   	inc    ecx
c001c1d1:	83 f9 10             	cmp    ecx,0x10
c001c1d4:	0f 85 6b ff ff ff    	jne    c001c145 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c001c1da:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001c1e0:	85 c0                	test   eax,eax
c001c1e2:	74 5d                	je     c001c241 <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c001c1e4:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001c1ea:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001c1f0:	74 4f                	je     c001c241 <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c001c1f2:	83 ec 0c             	sub    esp,0xc
c001c1f5:	68 28 bb 02 c0       	push   0xc002bb28
c001c1fa:	e8 63 94 00 00       	call   c0025662 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c1ff:	c7 04 24 28 bb 02 c0 	mov    DWORD PTR [esp],0xc002bb28
c001c206:	89 c7                	mov    edi,eax
c001c208:	e8 5d 94 00 00       	call   c002566a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001c20d:	83 c4 10             	add    esp,0x10
c001c210:	84 c0                	test   al,al
c001c212:	0f 84 e4 00 00 00    	je     c001c2fc <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001c218:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c21b:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c221:	85 d2                	test   edx,edx
c001c223:	74 0f                	je     c001c234 <cleanupTerminatedTask(ThreadControlBlock*)+0x17b>
c001c225:	83 ec 0c             	sub    esp,0xc
c001c228:	8b 02                	mov    eax,DWORD PTR [edx]
c001c22a:	52                   	push   edx
c001c22b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c22e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c231:	83 c4 10             	add    esp,0x10
c001c234:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001c23e:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001c241:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001c247:	85 db                	test   ebx,ebx
c001c249:	74 16                	je     c001c261 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a8>
c001c24b:	83 ec 0c             	sub    esp,0xc
c001c24e:	53                   	push   ebx
c001c24f:	e8 70 55 ff ff       	call   c00117c4 <VAS::~VAS()>
c001c254:	58                   	pop    eax
c001c255:	5a                   	pop    edx
c001c256:	6a 10                	push   0x10
c001c258:	53                   	push   ebx
c001c259:	e8 f1 5e ff ff       	call   c001214f <operator delete(void*, unsigned long)>
c001c25e:	83 c4 10             	add    esp,0x10
c001c261:	83 ec 0c             	sub    esp,0xc
c001c264:	68 f1 87 02 c0       	push   0xc00287f1
c001c269:	e8 c1 5f ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c001c26e:	83 c4 10             	add    esp,0x10
c001c271:	83 ec 08             	sub    esp,0x8
c001c274:	68 3b 07 00 00       	push   0x73b
c001c279:	68 ff 87 02 c0       	push   0xc00287ff
c001c27e:	e8 ac 5f ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c001c283:	83 c4 2c             	add    esp,0x2c
c001c286:	5b                   	pop    ebx
c001c287:	5e                   	pop    esi
c001c288:	5f                   	pop    edi
c001c289:	5d                   	pop    ebp
c001c28a:	c3                   	ret    
c001c28b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c28f:	83 ec 0c             	sub    esp,0xc
c001c292:	68 dc 8a 02 c0       	push   0xc0028adc
c001c297:	e8 0b c8 ff ff       	call   c0018aa7 <Krnl::panic(char const*)>
c001c29c:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001c29f:	83 c4 10             	add    esp,0x10
c001c2a2:	89 f7                	mov    edi,esi
c001c2a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c2a8:	e9 8e fe ff ff       	jmp    c001c13b <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001c2ad:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001c2b3:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001c2b9:	75 1c                	jne    c001c2d7 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c001c2bb:	83 ec 0c             	sub    esp,0xc
c001c2be:	68 44 8b 02 c0       	push   0xc0028b44
c001c2c3:	e8 67 5f ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c001c2c8:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001c2cf:	e8 b4 fb ff ff       	call   c001be88 <blockTask(TaskState)>
c001c2d4:	83 c4 10             	add    esp,0x10
c001c2d7:	83 ec 08             	sub    esp,0x8
c001c2da:	56                   	push   esi
c001c2db:	68 28 bb 02 c0       	push   0xc002bb28
c001c2e0:	e8 4f 94 00 00       	call   c0025734 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001c2e5:	c7 04 24 28 bb 02 c0 	mov    DWORD PTR [esp],0xc002bb28
c001c2ec:	e8 71 93 00 00       	call   c0025662 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c2f1:	83 c4 10             	add    esp,0x10
c001c2f4:	39 f8                	cmp    eax,edi
c001c2f6:	0f 84 1c ff ff ff    	je     c001c218 <cleanupTerminatedTask(ThreadControlBlock*)+0x15f>
c001c2fc:	83 ec 0c             	sub    esp,0xc
c001c2ff:	68 28 bb 02 c0       	push   0xc002bb28
c001c304:	e8 59 93 00 00       	call   c0025662 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c309:	c7 04 24 28 bb 02 c0 	mov    DWORD PTR [esp],0xc002bb28
c001c310:	89 c6                	mov    esi,eax
c001c312:	e8 6f 93 00 00       	call   c0025686 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001c317:	83 c4 10             	add    esp,0x10
c001c31a:	39 f3                	cmp    ebx,esi
c001c31c:	74 b9                	je     c001c2d7 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c001c31e:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001c321:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c324:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001c32a:	75 ab                	jne    c001c2d7 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c001c32c:	e9 7c ff ff ff       	jmp    c001c2ad <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c001c331:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c335:	83 ec 0c             	sub    esp,0xc
c001c338:	68 10 8b 02 c0       	push   0xc0028b10
c001c33d:	e9 55 ff ff ff       	jmp    c001c297 <cleanupTerminatedTask(ThreadControlBlock*)+0x1de>
c001c342:	8b 36                	mov    esi,DWORD PTR [esi]
c001c344:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c348:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001c34b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c34e:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001c354:	01 d7                	add    edi,edx
c001c356:	89 f8                	mov    eax,edi
c001c358:	e9 44 fe ff ff       	jmp    c001c1a1 <cleanupTerminatedTask(ThreadControlBlock*)+0xe8>

c001c35d <cleanerTaskFunction(void*)>:
c001c35d:	53                   	push   ebx
c001c35e:	83 ec 08             	sub    esp,0x8
c001c361:	e8 96 f6 ff ff       	call   c001b9fc <unlockScheduler()>
c001c366:	e8 8f f6 ff ff       	call   c001b9fa <lockScheduler()>
c001c36b:	80 3d ec ba 02 c0 00 	cmp    BYTE PTR ds:0xc002baec,0x0
c001c372:	0f 85 8e 00 00 00    	jne    c001c406 <cleanerTaskFunction(void*)+0xa9>
c001c378:	83 ec 0c             	sub    esp,0xc
c001c37b:	6a 02                	push   0x2
c001c37d:	e8 c4 fa ff ff       	call   c001be46 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001c382:	83 c4 10             	add    esp,0x10
c001c385:	c6 05 ec ba 02 c0 00 	mov    BYTE PTR ds:0xc002baec,0x0
c001c38c:	e8 90 f6 ff ff       	call   c001ba21 <lockStuff()>
c001c391:	e8 64 f6 ff ff       	call   c001b9fa <lockScheduler()>
c001c396:	83 ec 0c             	sub    esp,0xc
c001c399:	68 10 bb 02 c0       	push   0xc002bb10
c001c39e:	e8 c7 92 00 00       	call   c002566a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001c3a3:	83 c4 10             	add    esp,0x10
c001c3a6:	84 c0                	test   al,al
c001c3a8:	75 40                	jne    c001c3ea <cleanerTaskFunction(void*)+0x8d>
c001c3aa:	83 ec 0c             	sub    esp,0xc
c001c3ad:	68 10 bb 02 c0       	push   0xc002bb10
c001c3b2:	e8 ab 92 00 00       	call   c0025662 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c3b7:	c7 04 24 10 bb 02 c0 	mov    DWORD PTR [esp],0xc002bb10
c001c3be:	89 c3                	mov    ebx,eax
c001c3c0:	e8 c1 92 00 00       	call   c0025686 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001c3c5:	c7 04 24 15 88 02 c0 	mov    DWORD PTR [esp],0xc0028815
c001c3cc:	e8 5e 5e ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c001c3d1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c3d4:	e8 e0 fc ff ff       	call   c001c0b9 <cleanupTerminatedTask(ThreadControlBlock*)>
c001c3d9:	c7 04 24 2e 88 02 c0 	mov    DWORD PTR [esp],0xc002882e
c001c3e0:	e8 4a 5e ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c001c3e5:	83 c4 10             	add    esp,0x10
c001c3e8:	eb ac                	jmp    c001c396 <cleanerTaskFunction(void*)+0x39>
c001c3ea:	e8 0d f6 ff ff       	call   c001b9fc <unlockScheduler()>
c001c3ef:	e8 bf f9 ff ff       	call   c001bdb3 <unlockStuff()>
c001c3f4:	e8 01 f6 ff ff       	call   c001b9fa <lockScheduler()>
c001c3f9:	80 3d ec ba 02 c0 00 	cmp    BYTE PTR ds:0xc002baec,0x0
c001c400:	0f 84 72 ff ff ff    	je     c001c378 <cleanerTaskFunction(void*)+0x1b>
c001c406:	e8 f1 f5 ff ff       	call   c001b9fc <unlockScheduler()>
c001c40b:	e9 75 ff ff ff       	jmp    c001c385 <cleanerTaskFunction(void*)+0x28>

c001c410 <terminateTask(int)>:
c001c410:	83 ec 14             	sub    esp,0x14
c001c413:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c418:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c41b:	83 c0 0c             	add    eax,0xc
c001c41e:	50                   	push   eax
c001c41f:	68 6c 8b 02 c0       	push   0xc0028b6c
c001c424:	e8 06 5e ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c001c429:	e8 f3 f5 ff ff       	call   c001ba21 <lockStuff()>
c001c42e:	e8 c7 f5 ff ff       	call   c001b9fa <lockScheduler()>
c001c433:	c7 04 24 41 88 02 c0 	mov    DWORD PTR [esp],0xc0028841
c001c43a:	e8 f0 5d ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c001c43f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c443:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c448:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001c44b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c450:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001c453:	5a                   	pop    edx
c001c454:	59                   	pop    ecx
c001c455:	50                   	push   eax
c001c456:	68 10 bb 02 c0       	push   0xc002bb10
c001c45b:	e8 d4 92 00 00       	call   c0025734 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001c460:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c465:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001c46c:	c7 04 24 5b 88 02 c0 	mov    DWORD PTR [esp],0xc002885b
c001c473:	e8 b7 5d ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c001c478:	83 c4 10             	add    esp,0x10
c001c47b:	a1 e8 ba 02 c0       	mov    eax,ds:0xc002bae8
c001c480:	85 c0                	test   eax,eax
c001c482:	74 5a                	je     c001c4de <terminateTask(int)+0xce>
c001c484:	83 ec 0c             	sub    esp,0xc
c001c487:	68 75 88 02 c0       	push   0xc0028875
c001c48c:	e8 9e 5d ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c001c491:	58                   	pop    eax
c001c492:	c6 05 ec ba 02 c0 01 	mov    BYTE PTR ds:0xc002baec,0x1
c001c499:	ff 35 e8 ba 02 c0    	push   DWORD PTR ds:0xc002bae8
c001c49f:	e8 66 fb ff ff       	call   c001c00a <unblockTask(ThreadControlBlock*)>
c001c4a4:	c7 04 24 8f 88 02 c0 	mov    DWORD PTR [esp],0xc002888f
c001c4ab:	e8 7f 5d ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c001c4b0:	83 c4 10             	add    esp,0x10
c001c4b3:	e8 44 f5 ff ff       	call   c001b9fc <unlockScheduler()>
c001c4b8:	e8 f6 f8 ff ff       	call   c001bdb3 <unlockStuff()>
c001c4bd:	83 ec 0c             	sub    esp,0xc
c001c4c0:	68 c7 88 02 c0       	push   0xc00288c7
c001c4c5:	e8 65 5d ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c001c4ca:	83 c4 10             	add    esp,0x10
c001c4cd:	e8 28 f5 ff ff       	call   c001b9fa <lockScheduler()>
c001c4d2:	e8 57 f8 ff ff       	call   c001bd2e <schedule()>
c001c4d7:	e8 20 f5 ff ff       	call   c001b9fc <unlockScheduler()>
c001c4dc:	eb ef                	jmp    c001c4cd <terminateTask(int)+0xbd>
c001c4de:	83 ec 0c             	sub    esp,0xc
c001c4e1:	68 a9 88 02 c0       	push   0xc00288a9
c001c4e6:	e8 44 5d ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c001c4eb:	83 c4 10             	add    esp,0x10
c001c4ee:	eb c3                	jmp    c001c4b3 <terminateTask(int)+0xa3>

c001c4f0 <Thr::terminateFromIRQ(int)>:
c001c4f0:	83 ec 18             	sub    esp,0x18
c001c4f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c4f7:	e8 14 ff ff ff       	call   c001c410 <terminateTask(int)>

c001c4fc <Semaphore::release()>:
c001c4fc:	83 ec 0c             	sub    esp,0xc
c001c4ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c503:	e8 19 f5 ff ff       	call   c001ba21 <lockStuff()>
c001c508:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001c50b:	85 d2                	test   edx,edx
c001c50d:	74 1a                	je     c001c529 <Semaphore::release()+0x2d>
c001c50f:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001c512:	83 ec 0c             	sub    esp,0xc
c001c515:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001c518:	52                   	push   edx
c001c519:	e8 ec fa ff ff       	call   c001c00a <unblockTask(ThreadControlBlock*)>
c001c51e:	83 c4 10             	add    esp,0x10
c001c521:	83 c4 0c             	add    esp,0xc
c001c524:	e9 8a f8 ff ff       	jmp    c001bdb3 <unlockStuff()>
c001c529:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001c52c:	83 c4 0c             	add    esp,0xc
c001c52f:	e9 7f f8 ff ff       	jmp    c001bdb3 <unlockStuff()>

c001c534 <__static_initialization_and_destruction_0(int, int)>:
c001c534:	83 ec 0c             	sub    esp,0xc
c001c537:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001c53c:	0f 85 88 00 00 00    	jne    c001c5ca <__static_initialization_and_destruction_0(int, int)+0x96>
c001c542:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001c54a:	75 7e                	jne    c001c5ca <__static_initialization_and_destruction_0(int, int)+0x96>
c001c54c:	83 ec 0c             	sub    esp,0xc
c001c54f:	68 28 bb 02 c0       	push   0xc002bb28
c001c554:	e8 c1 93 00 00       	call   c002591a <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001c559:	83 c4 10             	add    esp,0x10
c001c55c:	83 ec 04             	sub    esp,0x4
c001c55f:	68 b8 95 02 c0       	push   0xc00295b8
c001c564:	68 28 bb 02 c0       	push   0xc002bb28
c001c569:	68 da 58 02 c0       	push   0xc00258da
c001c56e:	e8 58 5b ff ff       	call   c00120cb <__cxa_atexit>
c001c573:	83 c4 10             	add    esp,0x10
c001c576:	83 ec 0c             	sub    esp,0xc
c001c579:	68 1c bb 02 c0       	push   0xc002bb1c
c001c57e:	e8 97 93 00 00       	call   c002591a <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001c583:	83 c4 10             	add    esp,0x10
c001c586:	83 ec 04             	sub    esp,0x4
c001c589:	68 b8 95 02 c0       	push   0xc00295b8
c001c58e:	68 1c bb 02 c0       	push   0xc002bb1c
c001c593:	68 da 58 02 c0       	push   0xc00258da
c001c598:	e8 2e 5b ff ff       	call   c00120cb <__cxa_atexit>
c001c59d:	83 c4 10             	add    esp,0x10
c001c5a0:	83 ec 0c             	sub    esp,0xc
c001c5a3:	68 10 bb 02 c0       	push   0xc002bb10
c001c5a8:	e8 6d 93 00 00       	call   c002591a <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001c5ad:	83 c4 10             	add    esp,0x10
c001c5b0:	83 ec 04             	sub    esp,0x4
c001c5b3:	68 b8 95 02 c0       	push   0xc00295b8
c001c5b8:	68 10 bb 02 c0       	push   0xc002bb10
c001c5bd:	68 da 58 02 c0       	push   0xc00258da
c001c5c2:	e8 04 5b ff ff       	call   c00120cb <__cxa_atexit>
c001c5c7:	83 c4 10             	add    esp,0x10
c001c5ca:	90                   	nop
c001c5cb:	83 c4 0c             	add    esp,0xc
c001c5ce:	c3                   	ret    

c001c5cf <_GLOBAL__sub_I_kernelProcess>:
c001c5cf:	83 ec 0c             	sub    esp,0xc
c001c5d2:	83 ec 08             	sub    esp,0x8
c001c5d5:	68 ff ff 00 00       	push   0xffff
c001c5da:	6a 01                	push   0x1
c001c5dc:	e8 53 ff ff ff       	call   c001c534 <__static_initialization_and_destruction_0(int, int)>
c001c5e1:	83 c4 10             	add    esp,0x10
c001c5e4:	83 c4 0c             	add    esp,0xc
c001c5e7:	c3                   	ret    

c001c5e8 <Vm::vm8086EntryPoint(void*)>:
c001c5e8:	83 ec 0c             	sub    esp,0xc
c001c5eb:	e8 0c f4 ff ff       	call   c001b9fc <unlockScheduler()>
c001c5f0:	fb                   	sti    
c001c5f1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c5f6:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001c5fa:	52                   	push   edx
c001c5fb:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001c5ff:	52                   	push   edx
c001c600:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001c604:	52                   	push   edx
c001c605:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001c609:	50                   	push   eax
c001c60a:	e8 a0 3c fe ff       	call   c00002af <goToVM86>
c001c60f:	83 c4 1c             	add    esp,0x1c
c001c612:	c3                   	ret    

c001c613 <Vm::inbv(unsigned short)>:
c001c613:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c617:	ec                   	in     al,dx
c001c618:	c3                   	ret    

c001c619 <Vm::outbv(unsigned short, unsigned char)>:
c001c619:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c61d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c621:	ee                   	out    dx,al
c001c622:	c3                   	ret    

c001c623 <Vm::realToLinear(unsigned short, unsigned short)>:
c001c623:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c628:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001c62d:	c1 e0 04             	shl    eax,0x4
c001c630:	01 d0                	add    eax,edx
c001c632:	c3                   	ret    

c001c633 <Vm::getSegment(unsigned int)>:
c001c633:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c637:	c1 e8 10             	shr    eax,0x10
c001c63a:	c3                   	ret    

c001c63b <Vm::getOffset(unsigned int)>:
c001c63b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c63f:	c3                   	ret    

c001c640 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001c640:	55                   	push   ebp
c001c641:	57                   	push   edi
c001c642:	56                   	push   esi
c001c643:	53                   	push   ebx
c001c644:	83 ec 2c             	sub    esp,0x2c
c001c647:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001c64b:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001c64f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c653:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c657:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c65b:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001c65f:	e8 96 f3 ff ff       	call   c001b9fa <lockScheduler()>
c001c664:	68 80 00 00 00       	push   0x80
c001c669:	6a 00                	push   0x0
c001c66b:	68 e8 c5 01 c0       	push   0xc001c5e8
c001c670:	55                   	push   ebp
c001c671:	e8 ae f4 ff ff       	call   c001bb24 <Process::createThread(void (*)(void*), void*, int)>
c001c676:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c67a:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001c67e:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001c682:	66 89 78 59          	mov    WORD PTR [eax+0x59],di
c001c686:	66 89 70 5b          	mov    WORD PTR [eax+0x5b],si
c001c68a:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001c68e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001c695:	e8 a6 5a ff ff       	call   c0012140 <operator new(unsigned long)>
c001c69a:	83 c4 0c             	add    esp,0xc
c001c69d:	89 c3                	mov    ebx,eax
c001c69f:	55                   	push   ebp
c001c6a0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c6a4:	50                   	push   eax
c001c6a5:	e8 b4 60 ff ff       	call   c001275e <File::File(char const*, Process*)>
c001c6aa:	83 c4 0c             	add    esp,0xc
c001c6ad:	8d 44 24 17          	lea    eax,[esp+0x17]
c001c6b1:	50                   	push   eax
c001c6b2:	8d 44 24 20          	lea    eax,[esp+0x20]
c001c6b6:	50                   	push   eax
c001c6b7:	53                   	push   ebx
c001c6b8:	e8 b1 63 ff ff       	call   c0012a6e <File::stat(unsigned long long*, bool*)>
c001c6bd:	8a 54 24 23          	mov    dl,BYTE PTR [esp+0x23]
c001c6c1:	83 c4 10             	add    esp,0x10
c001c6c4:	84 d2                	test   dl,dl
c001c6c6:	74 1c                	je     c001c6e4 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa4>
c001c6c8:	83 ec 0c             	sub    esp,0xc
c001c6cb:	68 8b 8b 02 c0       	push   0xc0028b8b
c001c6d0:	e8 d2 c3 ff ff       	call   c0018aa7 <Krnl::panic(char const*)>
c001c6d5:	e8 22 f3 ff ff       	call   c001b9fc <unlockScheduler()>
c001c6da:	83 c4 10             	add    esp,0x10
c001c6dd:	31 d2                	xor    edx,edx
c001c6df:	e9 81 00 00 00       	jmp    c001c765 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c001c6e4:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001c6e8:	51                   	push   ecx
c001c6e9:	51                   	push   ecx
c001c6ea:	6a 01                	push   0x1
c001c6ec:	53                   	push   ebx
c001c6ed:	e8 d0 60 ff ff       	call   c00127c2 <File::open(FileOpenMode)>
c001c6f2:	83 c4 10             	add    esp,0x10
c001c6f5:	85 c0                	test   eax,eax
c001c6f7:	74 1b                	je     c001c714 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd4>
c001c6f9:	83 ec 0c             	sub    esp,0xc
c001c6fc:	68 a4 8b 02 c0       	push   0xc0028ba4
c001c701:	e8 a1 c3 ff ff       	call   c0018aa7 <Krnl::panic(char const*)>
c001c706:	e8 f1 f2 ff ff       	call   c001b9fc <unlockScheduler()>
c001c70b:	83 c4 10             	add    esp,0x10
c001c70e:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001c712:	eb 51                	jmp    c001c765 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c001c714:	83 ec 0c             	sub    esp,0xc
c001c717:	0f b7 ff             	movzx  edi,di
c001c71a:	6a 07                	push   0x7
c001c71c:	0f b7 f6             	movzx  esi,si
c001c71f:	68 00 01 00 00       	push   0x100
c001c724:	6a 00                	push   0x0
c001c726:	6a 00                	push   0x0
c001c728:	ff b5 32 05 00 00    	push   DWORD PTR [ebp+0x532]
c001c72e:	e8 e9 54 ff ff       	call   c0011c1c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001c733:	83 c4 18             	add    esp,0x18
c001c736:	57                   	push   edi
c001c737:	56                   	push   esi
c001c738:	e8 e6 fe ff ff       	call   c001c623 <Vm::realToLinear(unsigned short, unsigned short)>
c001c73d:	5a                   	pop    edx
c001c73e:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c740:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001c744:	51                   	push   ecx
c001c745:	50                   	push   eax
c001c746:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c74a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c74e:	53                   	push   ebx
c001c74f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001c752:	83 c4 14             	add    esp,0x14
c001c755:	53                   	push   ebx
c001c756:	e8 c5 60 ff ff       	call   c0012820 <File::close()>
c001c75b:	e8 9c f2 ff ff       	call   c001b9fc <unlockScheduler()>
c001c760:	83 c4 10             	add    esp,0x10
c001c763:	b2 01                	mov    dl,0x1
c001c765:	83 c4 2c             	add    esp,0x2c
c001c768:	88 d0                	mov    al,dl
c001c76a:	5b                   	pop    ebx
c001c76b:	5e                   	pop    esi
c001c76c:	5f                   	pop    edi
c001c76d:	5d                   	pop    ebp
c001c76e:	c3                   	ret    

c001c76f <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001c76f:	57                   	push   edi
c001c770:	56                   	push   esi
c001c771:	53                   	push   ebx
c001c772:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c776:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c77a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001c77e:	83 e8 06             	sub    eax,0x6
c001c781:	0f b7 c0             	movzx  eax,ax
c001c784:	50                   	push   eax
c001c785:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001c78a:	50                   	push   eax
c001c78b:	e8 93 fe ff ff       	call   c001c623 <Vm::realToLinear(unsigned short, unsigned short)>
c001c790:	5a                   	pop    edx
c001c791:	5e                   	pop    esi
c001c792:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001c795:	8d 56 fa             	lea    edx,[esi-0x6]
c001c798:	81 e2 ff ff 00 00    	and    edx,0xffff
c001c79e:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001c7a1:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001c7a4:	83 c2 02             	add    edx,0x2
c001c7a7:	66 89 10             	mov    WORD PTR [eax],dx
c001c7aa:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001c7ad:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001c7b1:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001c7b4:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001c7b8:	89 d6                	mov    esi,edx
c001c7ba:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001c7c0:	66 81 e6 ff fd       	and    si,0xfdff
c001c7c5:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001c7c9:	74 07                	je     c001c7d2 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001c7cb:	89 d6                	mov    esi,edx
c001c7cd:	66 81 ce 00 02       	or     si,0x200
c001c7d2:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001c7d6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c7db:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001c7df:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001c7e7:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001c7ea:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001c7f2:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001c7f5:	5b                   	pop    ebx
c001c7f6:	5e                   	pop    esi
c001c7f7:	5f                   	pop    edi
c001c7f8:	c3                   	ret    

c001c7f9 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001c7f9:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c7fe:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001c803:	c1 e0 04             	shl    eax,0x4
c001c806:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001c809:	c3                   	ret    

c001c80a <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001c80a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c80f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001c814:	c1 e0 04             	shl    eax,0x4
c001c817:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001c81b:	c3                   	ret    

c001c81c <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001c81c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c821:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001c826:	c1 e0 04             	shl    eax,0x4
c001c829:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001c82c:	c3                   	ret    

c001c82d <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001c82d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c832:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001c837:	c1 e0 04             	shl    eax,0x4
c001c83a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c83e:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001c841:	c3                   	ret    

c001c842 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001c842:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c847:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001c84c:	c1 e0 04             	shl    eax,0x4
c001c84f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c853:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001c857:	c3                   	ret    

c001c858 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001c858:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c85d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001c862:	c1 e0 04             	shl    eax,0x4
c001c865:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c869:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001c86c:	c3                   	ret    

c001c86d <Vm::faultHandler(regs*)>:
c001c86d:	55                   	push   ebp
c001c86e:	57                   	push   edi
c001c86f:	56                   	push   esi
c001c870:	53                   	push   ebx
c001c871:	83 ec 1c             	sub    esp,0x1c
c001c874:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c878:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001c87b:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001c87f:	0f b7 f0             	movzx  esi,ax
c001c882:	52                   	push   edx
c001c883:	0f b7 c0             	movzx  eax,ax
c001c886:	50                   	push   eax
c001c887:	e8 97 fd ff ff       	call   c001c623 <Vm::realToLinear(unsigned short, unsigned short)>
c001c88c:	5a                   	pop    edx
c001c88d:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001c890:	59                   	pop    ecx
c001c891:	89 c7                	mov    edi,eax
c001c893:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001c896:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c89a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c89f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c8a3:	0f b7 c5             	movzx  eax,bp
c001c8a6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c8aa:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001c8ae:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c8b2:	e8 6c fd ff ff       	call   c001c623 <Vm::realToLinear(unsigned short, unsigned short)>
c001c8b7:	5a                   	pop    edx
c001c8b8:	59                   	pop    ecx
c001c8b9:	b1 06                	mov    cl,0x6
c001c8bb:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001c8c0:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001c8c5:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c001c8c8:	80 fa 9d             	cmp    dl,0x9d
c001c8cb:	0f 84 1d 02 00 00    	je     c001caee <Vm::faultHandler(regs*)+0x281>
c001c8d1:	0f 87 8e 00 00 00    	ja     c001c965 <Vm::faultHandler(regs*)+0xf8>
c001c8d7:	80 fa 66             	cmp    dl,0x66
c001c8da:	0f 84 89 01 00 00    	je     c001ca69 <Vm::faultHandler(regs*)+0x1fc>
c001c8e0:	77 44                	ja     c001c926 <Vm::faultHandler(regs*)+0xb9>
c001c8e2:	80 fa 36             	cmp    dl,0x36
c001c8e5:	0f 84 74 01 00 00    	je     c001ca5f <Vm::faultHandler(regs*)+0x1f2>
c001c8eb:	77 1a                	ja     c001c907 <Vm::faultHandler(regs*)+0x9a>
c001c8ed:	80 fa 26             	cmp    dl,0x26
c001c8f0:	0f 84 4b 01 00 00    	je     c001ca41 <Vm::faultHandler(regs*)+0x1d4>
c001c8f6:	80 fa 2e             	cmp    dl,0x2e
c001c8f9:	0f 85 4a 05 00 00    	jne    c001ce49 <Vm::faultHandler(regs*)+0x5dc>
c001c8ff:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001c902:	31 c9                	xor    ecx,ecx
c001c904:	47                   	inc    edi
c001c905:	eb be                	jmp    c001c8c5 <Vm::faultHandler(regs*)+0x58>
c001c907:	80 fa 64             	cmp    dl,0x64
c001c90a:	0f 84 3b 01 00 00    	je     c001ca4b <Vm::faultHandler(regs*)+0x1de>
c001c910:	0f 87 3f 01 00 00    	ja     c001ca55 <Vm::faultHandler(regs*)+0x1e8>
c001c916:	80 fa 3e             	cmp    dl,0x3e
c001c919:	0f 85 2a 05 00 00    	jne    c001ce49 <Vm::faultHandler(regs*)+0x5dc>
c001c91f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001c922:	b1 01                	mov    cl,0x1
c001c924:	eb de                	jmp    c001c904 <Vm::faultHandler(regs*)+0x97>
c001c926:	80 fa 6d             	cmp    dl,0x6d
c001c929:	0f 84 bf 02 00 00    	je     c001cbee <Vm::faultHandler(regs*)+0x381>
c001c92f:	77 17                	ja     c001c948 <Vm::faultHandler(regs*)+0xdb>
c001c931:	80 fa 67             	cmp    dl,0x67
c001c934:	0f 84 3c 01 00 00    	je     c001ca76 <Vm::faultHandler(regs*)+0x209>
c001c93a:	80 fa 6c             	cmp    dl,0x6c
c001c93d:	0f 84 5d 02 00 00    	je     c001cba0 <Vm::faultHandler(regs*)+0x333>
c001c943:	e9 01 05 00 00       	jmp    c001ce49 <Vm::faultHandler(regs*)+0x5dc>
c001c948:	80 fa 6f             	cmp    dl,0x6f
c001c94b:	0f 84 8b 03 00 00    	je     c001ccdc <Vm::faultHandler(regs*)+0x46f>
c001c951:	0f 82 0f 03 00 00    	jb     c001cc66 <Vm::faultHandler(regs*)+0x3f9>
c001c957:	80 fa 9c             	cmp    dl,0x9c
c001c95a:	0f 84 23 01 00 00    	je     c001ca83 <Vm::faultHandler(regs*)+0x216>
c001c960:	e9 e4 04 00 00       	jmp    c001ce49 <Vm::faultHandler(regs*)+0x5dc>
c001c965:	80 fa ec             	cmp    dl,0xec
c001c968:	0f 84 7f 04 00 00    	je     c001cded <Vm::faultHandler(regs*)+0x580>
c001c96e:	77 7b                	ja     c001c9eb <Vm::faultHandler(regs*)+0x17e>
c001c970:	80 fa e4             	cmp    dl,0xe4
c001c973:	0f 84 fe 03 00 00    	je     c001cd77 <Vm::faultHandler(regs*)+0x50a>
c001c979:	77 53                	ja     c001c9ce <Vm::faultHandler(regs*)+0x161>
c001c97b:	80 fa cd             	cmp    dl,0xcd
c001c97e:	0f 84 cd 01 00 00    	je     c001cb51 <Vm::faultHandler(regs*)+0x2e4>
c001c984:	80 fa cf             	cmp    dl,0xcf
c001c987:	0f 85 bc 04 00 00    	jne    c001ce49 <Vm::faultHandler(regs*)+0x5dc>
c001c98d:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001c990:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001c993:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001c997:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001c99a:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001c99e:	81 ca 00 02 02 00    	or     edx,0x20200
c001c9a4:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001c9a7:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001c9ab:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c9b1:	66 c1 e8 09          	shr    ax,0x9
c001c9b5:	83 e0 01             	and    eax,0x1
c001c9b8:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001c9bb:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001c9be:	83 c0 06             	add    eax,0x6
c001c9c1:	25 ff ff 00 00       	and    eax,0xffff
c001c9c6:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001c9c9:	e9 77 04 00 00       	jmp    c001ce45 <Vm::faultHandler(regs*)+0x5d8>
c001c9ce:	80 fa e6             	cmp    dl,0xe6
c001c9d1:	0f 84 ea 03 00 00    	je     c001cdc1 <Vm::faultHandler(regs*)+0x554>
c001c9d7:	0f 82 b6 03 00 00    	jb     c001cd93 <Vm::faultHandler(regs*)+0x526>
c001c9dd:	80 fa e7             	cmp    dl,0xe7
c001c9e0:	0f 84 f2 03 00 00    	je     c001cdd8 <Vm::faultHandler(regs*)+0x56b>
c001c9e6:	e9 5e 04 00 00       	jmp    c001ce49 <Vm::faultHandler(regs*)+0x5dc>
c001c9eb:	80 fa ef             	cmp    dl,0xef
c001c9ee:	0f 84 3c 04 00 00    	je     c001ce30 <Vm::faultHandler(regs*)+0x5c3>
c001c9f4:	77 28                	ja     c001ca1e <Vm::faultHandler(regs*)+0x1b1>
c001c9f6:	80 fa ed             	cmp    dl,0xed
c001c9f9:	0f 84 0a 04 00 00    	je     c001ce09 <Vm::faultHandler(regs*)+0x59c>
c001c9ff:	80 fa ee             	cmp    dl,0xee
c001ca02:	0f 85 41 04 00 00    	jne    c001ce49 <Vm::faultHandler(regs*)+0x5dc>
c001ca08:	50                   	push   eax
c001ca09:	50                   	push   eax
c001ca0a:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001ca0e:	50                   	push   eax
c001ca0f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ca13:	50                   	push   eax
c001ca14:	e8 00 fc ff ff       	call   c001c619 <Vm::outbv(unsigned short, unsigned char)>
c001ca19:	e9 0a 04 00 00       	jmp    c001ce28 <Vm::faultHandler(regs*)+0x5bb>
c001ca1e:	80 fa fa             	cmp    dl,0xfa
c001ca21:	0f 84 5d 01 00 00    	je     c001cb84 <Vm::faultHandler(regs*)+0x317>
c001ca27:	80 fa fb             	cmp    dl,0xfb
c001ca2a:	0f 84 62 01 00 00    	je     c001cb92 <Vm::faultHandler(regs*)+0x325>
c001ca30:	80 fa f3             	cmp    dl,0xf3
c001ca33:	0f 85 10 04 00 00    	jne    c001ce49 <Vm::faultHandler(regs*)+0x5dc>
c001ca39:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ca3c:	e9 c3 fe ff ff       	jmp    c001c904 <Vm::faultHandler(regs*)+0x97>
c001ca41:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ca44:	b1 02                	mov    cl,0x2
c001ca46:	e9 b9 fe ff ff       	jmp    c001c904 <Vm::faultHandler(regs*)+0x97>
c001ca4b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ca4e:	b1 03                	mov    cl,0x3
c001ca50:	e9 af fe ff ff       	jmp    c001c904 <Vm::faultHandler(regs*)+0x97>
c001ca55:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ca58:	b1 04                	mov    cl,0x4
c001ca5a:	e9 a5 fe ff ff       	jmp    c001c904 <Vm::faultHandler(regs*)+0x97>
c001ca5f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ca62:	b1 05                	mov    cl,0x5
c001ca64:	e9 9b fe ff ff       	jmp    c001c904 <Vm::faultHandler(regs*)+0x97>
c001ca69:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ca6c:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001ca71:	e9 8e fe ff ff       	jmp    c001c904 <Vm::faultHandler(regs*)+0x97>
c001ca76:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ca79:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001ca7e:	e9 81 fe ff ff       	jmp    c001c904 <Vm::faultHandler(regs*)+0x97>
c001ca83:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001ca86:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001ca8a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ca8f:	74 30                	je     c001cac1 <Vm::faultHandler(regs*)+0x254>
c001ca91:	83 e9 04             	sub    ecx,0x4
c001ca94:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001ca9a:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001caa0:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001caa3:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001caa6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001caac:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001cab0:	0f 84 8c 03 00 00    	je     c001ce42 <Vm::faultHandler(regs*)+0x5d5>
c001cab6:	80 ce 02             	or     dh,0x2
c001cab9:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001cabc:	e9 81 03 00 00       	jmp    c001ce42 <Vm::faultHandler(regs*)+0x5d5>
c001cac1:	83 e9 02             	sub    ecx,0x2
c001cac4:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001caca:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001cacd:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001cad1:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001cad7:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001cadb:	74 05                	je     c001cae2 <Vm::faultHandler(regs*)+0x275>
c001cadd:	80 ce 02             	or     dh,0x2
c001cae0:	eb 03                	jmp    c001cae5 <Vm::faultHandler(regs*)+0x278>
c001cae2:	80 e6 fd             	and    dh,0xfd
c001cae5:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001cae9:	e9 54 03 00 00       	jmp    c001ce42 <Vm::faultHandler(regs*)+0x5d5>
c001caee:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001caf3:	74 2a                	je     c001cb1f <Vm::faultHandler(regs*)+0x2b2>
c001caf5:	8b 10                	mov    edx,DWORD PTR [eax]
c001caf7:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001cafd:	81 ca 00 02 02 00    	or     edx,0x20200
c001cb03:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001cb06:	8b 00                	mov    eax,DWORD PTR [eax]
c001cb08:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001cb0e:	c1 e8 09             	shr    eax,0x9
c001cb11:	83 e0 01             	and    eax,0x1
c001cb14:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001cb17:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001cb1a:	83 c0 04             	add    eax,0x4
c001cb1d:	eb 25                	jmp    c001cb44 <Vm::faultHandler(regs*)+0x2d7>
c001cb1f:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001cb22:	81 ca 00 02 02 00    	or     edx,0x20200
c001cb28:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001cb2b:	66 8b 00             	mov    ax,WORD PTR [eax]
c001cb2e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001cb34:	66 c1 e8 09          	shr    ax,0x9
c001cb38:	83 e0 01             	and    eax,0x1
c001cb3b:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001cb3e:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001cb41:	83 c0 02             	add    eax,0x2
c001cb44:	25 ff ff 00 00       	and    eax,0xffff
c001cb49:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001cb4c:	e9 f1 02 00 00       	jmp    c001ce42 <Vm::faultHandler(regs*)+0x5d5>
c001cb51:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001cb55:	3c ff                	cmp    al,0xff
c001cb57:	75 10                	jne    c001cb69 <Vm::faultHandler(regs*)+0x2fc>
c001cb59:	83 ec 0c             	sub    esp,0xc
c001cb5c:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001cb5f:	e8 8c f9 ff ff       	call   c001c4f0 <Thr::terminateFromIRQ(int)>
c001cb64:	e9 c2 02 00 00       	jmp    c001ce2b <Vm::faultHandler(regs*)+0x5be>
c001cb69:	83 ec 0c             	sub    esp,0xc
c001cb6c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cb70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb74:	57                   	push   edi
c001cb75:	50                   	push   eax
c001cb76:	53                   	push   ebx
c001cb77:	e8 f3 fb ff ff       	call   c001c76f <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001cb7c:	83 c4 20             	add    esp,0x20
c001cb7f:	e9 c1 02 00 00       	jmp    c001ce45 <Vm::faultHandler(regs*)+0x5d8>
c001cb84:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cb89:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001cb8d:	e9 b0 02 00 00       	jmp    c001ce42 <Vm::faultHandler(regs*)+0x5d5>
c001cb92:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cb97:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001cb9b:	e9 a2 02 00 00       	jmp    c001ce42 <Vm::faultHandler(regs*)+0x5d5>
c001cba0:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001cba5:	74 0d                	je     c001cbb4 <Vm::faultHandler(regs*)+0x347>
c001cba7:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001cbae:	0f 87 e9 02 00 00    	ja     c001ce9d <Vm::faultHandler(regs*)+0x630>
c001cbb4:	83 ec 0c             	sub    esp,0xc
c001cbb7:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001cbba:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001cbbe:	50                   	push   eax
c001cbbf:	e8 4f fa ff ff       	call   c001c613 <Vm::inbv(unsigned short)>
c001cbc4:	83 c4 0c             	add    esp,0xc
c001cbc7:	0f b6 c0             	movzx  eax,al
c001cbca:	0f b7 c9             	movzx  ecx,cx
c001cbcd:	50                   	push   eax
c001cbce:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001cbd2:	50                   	push   eax
c001cbd3:	51                   	push   ecx
c001cbd4:	e8 54 fc ff ff       	call   c001c82d <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001cbd9:	83 c4 10             	add    esp,0x10
c001cbdc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001cbdf:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001cbe3:	74 03                	je     c001cbe8 <Vm::faultHandler(regs*)+0x37b>
c001cbe5:	48                   	dec    eax
c001cbe6:	eb 01                	jmp    c001cbe9 <Vm::faultHandler(regs*)+0x37c>
c001cbe8:	40                   	inc    eax
c001cbe9:	0f b7 c0             	movzx  eax,ax
c001cbec:	eb 70                	jmp    c001cc5e <Vm::faultHandler(regs*)+0x3f1>
c001cbee:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001cbf1:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001cbf4:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001cbf9:	74 0c                	je     c001cc07 <Vm::faultHandler(regs*)+0x39a>
c001cbfb:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c001cc01:	0f 87 96 02 00 00    	ja     c001ce9d <Vm::faultHandler(regs*)+0x630>
c001cc07:	0f b7 c9             	movzx  ecx,cx
c001cc0a:	0f b7 f6             	movzx  esi,si
c001cc0d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001cc10:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001cc15:	74 20                	je     c001cc37 <Vm::faultHandler(regs*)+0x3ca>
c001cc17:	ed                   	in     eax,dx
c001cc18:	55                   	push   ebp
c001cc19:	50                   	push   eax
c001cc1a:	51                   	push   ecx
c001cc1b:	56                   	push   esi
c001cc1c:	e8 37 fc ff ff       	call   c001c858 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001cc21:	83 c4 10             	add    esp,0x10
c001cc24:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001cc27:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001cc2b:	74 05                	je     c001cc32 <Vm::faultHandler(regs*)+0x3c5>
c001cc2d:	83 e8 04             	sub    eax,0x4
c001cc30:	eb 27                	jmp    c001cc59 <Vm::faultHandler(regs*)+0x3ec>
c001cc32:	83 c0 04             	add    eax,0x4
c001cc35:	eb 22                	jmp    c001cc59 <Vm::faultHandler(regs*)+0x3ec>
c001cc37:	66 ed                	in     ax,dx
c001cc39:	0f b7 c0             	movzx  eax,ax
c001cc3c:	57                   	push   edi
c001cc3d:	50                   	push   eax
c001cc3e:	51                   	push   ecx
c001cc3f:	56                   	push   esi
c001cc40:	e8 fd fb ff ff       	call   c001c842 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001cc45:	83 c4 10             	add    esp,0x10
c001cc48:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001cc4b:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001cc4f:	74 05                	je     c001cc56 <Vm::faultHandler(regs*)+0x3e9>
c001cc51:	83 e8 02             	sub    eax,0x2
c001cc54:	eb 03                	jmp    c001cc59 <Vm::faultHandler(regs*)+0x3ec>
c001cc56:	83 c0 02             	add    eax,0x2
c001cc59:	25 ff ff 00 00       	and    eax,0xffff
c001cc5e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001cc61:	e9 dc 01 00 00       	jmp    c001ce42 <Vm::faultHandler(regs*)+0x5d5>
c001cc66:	49                   	dec    ecx
c001cc67:	80 f9 05             	cmp    cl,0x5
c001cc6a:	77 24                	ja     c001cc90 <Vm::faultHandler(regs*)+0x423>
c001cc6c:	0f b6 c9             	movzx  ecx,cl
c001cc6f:	ff 24 8d ec 8b 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffd7414]
c001cc76:	0f b7 f5             	movzx  esi,bp
c001cc79:	eb 15                	jmp    c001cc90 <Vm::faultHandler(regs*)+0x423>
c001cc7b:	0f b7 73 0c          	movzx  esi,WORD PTR [ebx+0xc]
c001cc7f:	eb 0f                	jmp    c001cc90 <Vm::faultHandler(regs*)+0x423>
c001cc81:	0f b7 73 08          	movzx  esi,WORD PTR [ebx+0x8]
c001cc85:	eb 09                	jmp    c001cc90 <Vm::faultHandler(regs*)+0x423>
c001cc87:	0f b7 73 04          	movzx  esi,WORD PTR [ebx+0x4]
c001cc8b:	eb 03                	jmp    c001cc90 <Vm::faultHandler(regs*)+0x423>
c001cc8d:	0f b7 33             	movzx  esi,WORD PTR [ebx]
c001cc90:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001cc93:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001cc98:	74 0b                	je     c001cca5 <Vm::faultHandler(regs*)+0x438>
c001cc9a:	3d ff ff 00 00       	cmp    eax,0xffff
c001cc9f:	0f 87 f8 01 00 00    	ja     c001ce9d <Vm::faultHandler(regs*)+0x630>
c001cca5:	0f b7 c0             	movzx  eax,ax
c001cca8:	52                   	push   edx
c001cca9:	52                   	push   edx
c001ccaa:	50                   	push   eax
c001ccab:	56                   	push   esi
c001ccac:	e8 48 fb ff ff       	call   c001c7f9 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001ccb1:	59                   	pop    ecx
c001ccb2:	0f b6 c0             	movzx  eax,al
c001ccb5:	5e                   	pop    esi
c001ccb6:	50                   	push   eax
c001ccb7:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ccbb:	50                   	push   eax
c001ccbc:	e8 58 f9 ff ff       	call   c001c619 <Vm::outbv(unsigned short, unsigned char)>
c001ccc1:	83 c4 10             	add    esp,0x10
c001ccc4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ccc7:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001cccb:	74 03                	je     c001ccd0 <Vm::faultHandler(regs*)+0x463>
c001cccd:	48                   	dec    eax
c001ccce:	eb 01                	jmp    c001ccd1 <Vm::faultHandler(regs*)+0x464>
c001ccd0:	40                   	inc    eax
c001ccd1:	0f b7 c0             	movzx  eax,ax
c001ccd4:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001ccd7:	e9 66 01 00 00       	jmp    c001ce42 <Vm::faultHandler(regs*)+0x5d5>
c001ccdc:	49                   	dec    ecx
c001ccdd:	80 f9 05             	cmp    cl,0x5
c001cce0:	77 1f                	ja     c001cd01 <Vm::faultHandler(regs*)+0x494>
c001cce2:	0f b6 c9             	movzx  ecx,cl
c001cce5:	ff 24 8d 04 8c 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffd73fc]
c001ccec:	89 ee                	mov    esi,ebp
c001ccee:	eb 11                	jmp    c001cd01 <Vm::faultHandler(regs*)+0x494>
c001ccf0:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001ccf3:	eb 0c                	jmp    c001cd01 <Vm::faultHandler(regs*)+0x494>
c001ccf5:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001ccf8:	eb 07                	jmp    c001cd01 <Vm::faultHandler(regs*)+0x494>
c001ccfa:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c001ccfd:	eb 02                	jmp    c001cd01 <Vm::faultHandler(regs*)+0x494>
c001ccff:	8b 33                	mov    esi,DWORD PTR [ebx]
c001cd01:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c001cd04:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001cd09:	74 0c                	je     c001cd17 <Vm::faultHandler(regs*)+0x4aa>
c001cd0b:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c001cd11:	0f 87 86 01 00 00    	ja     c001ce9d <Vm::faultHandler(regs*)+0x630>
c001cd17:	0f b7 d6             	movzx  edx,si
c001cd1a:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001cd1d:	0f b7 c1             	movzx  eax,cx
c001cd20:	81 e7 00 04 00 00    	and    edi,0x400
c001cd26:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001cd29:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001cd2e:	74 1d                	je     c001cd4d <Vm::faultHandler(regs*)+0x4e0>
c001cd30:	55                   	push   ebp
c001cd31:	55                   	push   ebp
c001cd32:	50                   	push   eax
c001cd33:	52                   	push   edx
c001cd34:	e8 e3 fa ff ff       	call   c001c81c <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001cd39:	83 c4 10             	add    esp,0x10
c001cd3c:	89 f2                	mov    edx,esi
c001cd3e:	ef                   	out    dx,eax
c001cd3f:	85 ff                	test   edi,edi
c001cd41:	74 05                	je     c001cd48 <Vm::faultHandler(regs*)+0x4db>
c001cd43:	83 e9 04             	sub    ecx,0x4
c001cd46:	eb 21                	jmp    c001cd69 <Vm::faultHandler(regs*)+0x4fc>
c001cd48:	83 c1 04             	add    ecx,0x4
c001cd4b:	eb 1c                	jmp    c001cd69 <Vm::faultHandler(regs*)+0x4fc>
c001cd4d:	55                   	push   ebp
c001cd4e:	55                   	push   ebp
c001cd4f:	50                   	push   eax
c001cd50:	52                   	push   edx
c001cd51:	e8 b4 fa ff ff       	call   c001c80a <Vm::readWordFromReal(unsigned short, unsigned short)>
c001cd56:	83 c4 10             	add    esp,0x10
c001cd59:	89 f2                	mov    edx,esi
c001cd5b:	66 ef                	out    dx,ax
c001cd5d:	85 ff                	test   edi,edi
c001cd5f:	74 05                	je     c001cd66 <Vm::faultHandler(regs*)+0x4f9>
c001cd61:	83 e9 02             	sub    ecx,0x2
c001cd64:	eb 03                	jmp    c001cd69 <Vm::faultHandler(regs*)+0x4fc>
c001cd66:	83 c1 02             	add    ecx,0x2
c001cd69:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001cd6f:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c001cd72:	e9 cb 00 00 00       	jmp    c001ce42 <Vm::faultHandler(regs*)+0x5d5>
c001cd77:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001cd7e:	83 ec 0c             	sub    esp,0xc
c001cd81:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001cd85:	50                   	push   eax
c001cd86:	e8 88 f8 ff ff       	call   c001c613 <Vm::inbv(unsigned short)>
c001cd8b:	0f b6 c0             	movzx  eax,al
c001cd8e:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001cd91:	eb 3f                	jmp    c001cdd2 <Vm::faultHandler(regs*)+0x565>
c001cd93:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001cd98:	74 07                	je     c001cda1 <Vm::faultHandler(regs*)+0x534>
c001cd9a:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c001cd9e:	ed                   	in     eax,dx
c001cd9f:	eb 14                	jmp    c001cdb5 <Vm::faultHandler(regs*)+0x548>
c001cda1:	8b 4b 2c             	mov    ecx,DWORD PTR [ebx+0x2c]
c001cda4:	66 31 c9             	xor    cx,cx
c001cda7:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c001cdaa:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c001cdae:	66 ed                	in     ax,dx
c001cdb0:	0f b7 c0             	movzx  eax,ax
c001cdb3:	09 c8                	or     eax,ecx
c001cdb5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001cdb8:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001cdbc:	e9 84 00 00 00       	jmp    c001ce45 <Vm::faultHandler(regs*)+0x5d8>
c001cdc1:	52                   	push   edx
c001cdc2:	52                   	push   edx
c001cdc3:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001cdc7:	50                   	push   eax
c001cdc8:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001cdcc:	50                   	push   eax
c001cdcd:	e8 47 f8 ff ff       	call   c001c619 <Vm::outbv(unsigned short, unsigned char)>
c001cdd2:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001cdd6:	eb 53                	jmp    c001ce2b <Vm::faultHandler(regs*)+0x5be>
c001cdd8:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001cddb:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c001cddf:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001cde4:	74 03                	je     c001cde9 <Vm::faultHandler(regs*)+0x57c>
c001cde6:	ef                   	out    dx,eax
c001cde7:	eb cf                	jmp    c001cdb8 <Vm::faultHandler(regs*)+0x54b>
c001cde9:	66 ef                	out    dx,ax
c001cdeb:	eb cb                	jmp    c001cdb8 <Vm::faultHandler(regs*)+0x54b>
c001cded:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001cdf4:	83 ec 0c             	sub    esp,0xc
c001cdf7:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001cdfb:	50                   	push   eax
c001cdfc:	e8 12 f8 ff ff       	call   c001c613 <Vm::inbv(unsigned short)>
c001ce01:	0f b6 c0             	movzx  eax,al
c001ce04:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001ce07:	eb 1f                	jmp    c001ce28 <Vm::faultHandler(regs*)+0x5bb>
c001ce09:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001ce0c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ce11:	74 03                	je     c001ce16 <Vm::faultHandler(regs*)+0x5a9>
c001ce13:	ed                   	in     eax,dx
c001ce14:	eb 0d                	jmp    c001ce23 <Vm::faultHandler(regs*)+0x5b6>
c001ce16:	66 ed                	in     ax,dx
c001ce18:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001ce1b:	0f b7 c0             	movzx  eax,ax
c001ce1e:	66 31 d2             	xor    dx,dx
c001ce21:	09 d0                	or     eax,edx
c001ce23:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001ce26:	eb 1a                	jmp    c001ce42 <Vm::faultHandler(regs*)+0x5d5>
c001ce28:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ce2b:	83 c4 10             	add    esp,0x10
c001ce2e:	eb 15                	jmp    c001ce45 <Vm::faultHandler(regs*)+0x5d8>
c001ce30:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001ce33:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001ce36:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ce3b:	74 03                	je     c001ce40 <Vm::faultHandler(regs*)+0x5d3>
c001ce3d:	ef                   	out    dx,eax
c001ce3e:	eb 02                	jmp    c001ce42 <Vm::faultHandler(regs*)+0x5d5>
c001ce40:	66 ef                	out    dx,ax
c001ce42:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ce45:	b0 01                	mov    al,0x1
c001ce47:	eb 56                	jmp    c001ce9f <Vm::faultHandler(regs*)+0x632>
c001ce49:	0f b6 47 05          	movzx  eax,BYTE PTR [edi+0x5]
c001ce4d:	50                   	push   eax
c001ce4e:	0f b6 47 04          	movzx  eax,BYTE PTR [edi+0x4]
c001ce52:	50                   	push   eax
c001ce53:	0f b6 47 03          	movzx  eax,BYTE PTR [edi+0x3]
c001ce57:	50                   	push   eax
c001ce58:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
c001ce5c:	50                   	push   eax
c001ce5d:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001ce61:	50                   	push   eax
c001ce62:	52                   	push   edx
c001ce63:	52                   	push   edx
c001ce64:	68 bd 8b 02 c0       	push   0xc0028bbd
c001ce69:	e8 c1 53 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c001ce6e:	83 c4 20             	add    esp,0x20
c001ce71:	83 ec 0c             	sub    esp,0xc
c001ce74:	6a 60                	push   0x60
c001ce76:	e8 98 f7 ff ff       	call   c001c613 <Vm::inbv(unsigned short)>
c001ce7b:	83 c4 10             	add    esp,0x10
c001ce7e:	3c 1c                	cmp    al,0x1c
c001ce80:	74 04                	je     c001ce86 <Vm::faultHandler(regs*)+0x619>
c001ce82:	3c 5a                	cmp    al,0x5a
c001ce84:	75 eb                	jne    c001ce71 <Vm::faultHandler(regs*)+0x604>
c001ce86:	3c 5a                	cmp    al,0x5a
c001ce88:	74 04                	je     c001ce8e <Vm::faultHandler(regs*)+0x621>
c001ce8a:	3c 1c                	cmp    al,0x1c
c001ce8c:	75 0f                	jne    c001ce9d <Vm::faultHandler(regs*)+0x630>
c001ce8e:	83 ec 0c             	sub    esp,0xc
c001ce91:	6a 60                	push   0x60
c001ce93:	e8 7b f7 ff ff       	call   c001c613 <Vm::inbv(unsigned short)>
c001ce98:	83 c4 10             	add    esp,0x10
c001ce9b:	eb e9                	jmp    c001ce86 <Vm::faultHandler(regs*)+0x619>
c001ce9d:	31 c0                	xor    eax,eax
c001ce9f:	83 c4 1c             	add    esp,0x1c
c001cea2:	5b                   	pop    ebx
c001cea3:	5e                   	pop    esi
c001cea4:	5f                   	pop    edi
c001cea5:	5d                   	pop    ebp
c001cea6:	c3                   	ret    

c001cea7 <Vm::fpuInternalTo32(unsigned long long)>:
c001cea7:	57                   	push   edi
c001cea8:	56                   	push   esi
c001cea9:	53                   	push   ebx
c001ceaa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ceae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ceb2:	89 d6                	mov    esi,edx
c001ceb4:	89 d7                	mov    edi,edx
c001ceb6:	89 c1                	mov    ecx,eax
c001ceb8:	c1 ef 14             	shr    edi,0x14
c001cebb:	89 d3                	mov    ebx,edx
c001cebd:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001cec3:	31 d2                	xor    edx,edx
c001cec5:	89 f8                	mov    eax,edi
c001cec7:	81 e6 00 00 00 80    	and    esi,0x80000000
c001cecd:	bf ff 00 00 00       	mov    edi,0xff
c001ced2:	05 80 fc ff ff       	add    eax,0xfffffc80
c001ced7:	83 d2 ff             	adc    edx,0xffffffff
c001ceda:	39 c7                	cmp    edi,eax
c001cedc:	bf 00 00 00 00       	mov    edi,0x0
c001cee1:	19 d7                	sbb    edi,edx
c001cee3:	72 15                	jb     c001cefa <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001cee5:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001cee9:	c1 e0 17             	shl    eax,0x17
c001ceec:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001cef2:	09 f1                	or     ecx,esi
c001cef4:	09 c1                	or     ecx,eax
c001cef6:	89 cf                	mov    edi,ecx
c001cef8:	eb 02                	jmp    c001cefc <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001cefa:	31 ff                	xor    edi,edi
c001cefc:	89 f8                	mov    eax,edi
c001cefe:	5b                   	pop    ebx
c001ceff:	5e                   	pop    esi
c001cf00:	5f                   	pop    edi
c001cf01:	c3                   	ret    

c001cf02 <Vm::fpuInternalTo64(unsigned long long)>:
c001cf02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cf06:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cf0a:	c3                   	ret    

c001cf0b <Vm::fpu32ToInternal(unsigned int)>:
c001cf0b:	57                   	push   edi
c001cf0c:	31 ff                	xor    edi,edi
c001cf0e:	56                   	push   esi
c001cf0f:	53                   	push   ebx
c001cf10:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cf14:	89 cb                	mov    ebx,ecx
c001cf16:	89 ce                	mov    esi,ecx
c001cf18:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001cf1e:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001cf24:	c1 e9 17             	shr    ecx,0x17
c001cf27:	89 f0                	mov    eax,esi
c001cf29:	0f b6 d1             	movzx  edx,cl
c001cf2c:	81 c2 80 03 00 00    	add    edx,0x380
c001cf32:	89 d1                	mov    ecx,edx
c001cf34:	89 fa                	mov    edx,edi
c001cf36:	c1 e1 14             	shl    ecx,0x14
c001cf39:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001cf3d:	c1 e0 1d             	shl    eax,0x1d
c001cf40:	89 d7                	mov    edi,edx
c001cf42:	89 c6                	mov    esi,eax
c001cf44:	89 ca                	mov    edx,ecx
c001cf46:	89 f0                	mov    eax,esi
c001cf48:	09 fa                	or     edx,edi
c001cf4a:	09 da                	or     edx,ebx
c001cf4c:	5b                   	pop    ebx
c001cf4d:	5e                   	pop    esi
c001cf4e:	5f                   	pop    edi
c001cf4f:	c3                   	ret    

c001cf50 <Vm::fpu64ToInternal(unsigned long long)>:
c001cf50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cf54:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cf58:	c3                   	ret    

c001cf59 <Vm::fpuFloatToLong(unsigned long long)>:
c001cf59:	57                   	push   edi
c001cf5a:	31 c0                	xor    eax,eax
c001cf5c:	56                   	push   esi
c001cf5d:	31 d2                	xor    edx,edx
c001cf5f:	53                   	push   ebx
c001cf60:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001cf64:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cf68:	89 d9                	mov    ecx,ebx
c001cf6a:	c1 e9 14             	shr    ecx,0x14
c001cf6d:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001cf73:	89 cf                	mov    edi,ecx
c001cf75:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001cf7b:	78 33                	js     c001cfb0 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001cf7d:	89 d9                	mov    ecx,ebx
c001cf7f:	89 f0                	mov    eax,esi
c001cf81:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001cf87:	81 c9 00 00 10 00    	or     ecx,0x100000
c001cf8d:	89 ca                	mov    edx,ecx
c001cf8f:	b9 34 00 00 00       	mov    ecx,0x34
c001cf94:	29 f9                	sub    ecx,edi
c001cf96:	0f ad d0             	shrd   eax,edx,cl
c001cf99:	d3 fa                	sar    edx,cl
c001cf9b:	f6 c1 20             	test   cl,0x20
c001cf9e:	74 05                	je     c001cfa5 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001cfa0:	89 d0                	mov    eax,edx
c001cfa2:	c1 fa 1f             	sar    edx,0x1f
c001cfa5:	85 db                	test   ebx,ebx
c001cfa7:	79 07                	jns    c001cfb0 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001cfa9:	f7 d8                	neg    eax
c001cfab:	83 d2 00             	adc    edx,0x0
c001cfae:	f7 da                	neg    edx
c001cfb0:	5b                   	pop    ebx
c001cfb1:	5e                   	pop    esi
c001cfb2:	5f                   	pop    edi
c001cfb3:	c3                   	ret    

c001cfb4 <Vm::fpuULongToFloat(unsigned long long)>:
c001cfb4:	57                   	push   edi
c001cfb5:	31 c9                	xor    ecx,ecx
c001cfb7:	56                   	push   esi
c001cfb8:	53                   	push   ebx
c001cfb9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cfbd:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001cfc1:	0f ba e7 14          	bt     edi,0x14
c001cfc5:	72 07                	jb     c001cfce <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001cfc7:	01 f6                	add    esi,esi
c001cfc9:	11 ff                	adc    edi,edi
c001cfcb:	41                   	inc    ecx
c001cfcc:	eb f3                	jmp    c001cfc1 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001cfce:	89 fa                	mov    edx,edi
c001cfd0:	89 f0                	mov    eax,esi
c001cfd2:	bb 33 04 00 00       	mov    ebx,0x433
c001cfd7:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001cfdd:	29 cb                	sub    ebx,ecx
c001cfdf:	89 d9                	mov    ecx,ebx
c001cfe1:	5b                   	pop    ebx
c001cfe2:	c1 e1 14             	shl    ecx,0x14
c001cfe5:	5e                   	pop    esi
c001cfe6:	09 ca                	or     edx,ecx
c001cfe8:	5f                   	pop    edi
c001cfe9:	c3                   	ret    

c001cfea <Vm::fpuLongToFloat(long long)>:
c001cfea:	56                   	push   esi
c001cfeb:	31 c0                	xor    eax,eax
c001cfed:	53                   	push   ebx
c001cfee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cff2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cff6:	39 c8                	cmp    eax,ecx
c001cff8:	19 d8                	sbb    eax,ebx
c001cffa:	7d 04                	jge    c001d000 <Vm::fpuLongToFloat(long long)+0x16>
c001cffc:	31 f6                	xor    esi,esi
c001cffe:	eb 0c                	jmp    c001d00c <Vm::fpuLongToFloat(long long)+0x22>
c001d000:	f7 d9                	neg    ecx
c001d002:	be 01 00 00 00       	mov    esi,0x1
c001d007:	83 d3 00             	adc    ebx,0x0
c001d00a:	f7 db                	neg    ebx
c001d00c:	31 c0                	xor    eax,eax
c001d00e:	0f ba e3 14          	bt     ebx,0x14
c001d012:	72 07                	jb     c001d01b <Vm::fpuLongToFloat(long long)+0x31>
c001d014:	01 c9                	add    ecx,ecx
c001d016:	11 db                	adc    ebx,ebx
c001d018:	40                   	inc    eax
c001d019:	eb f3                	jmp    c001d00e <Vm::fpuLongToFloat(long long)+0x24>
c001d01b:	ba 33 04 00 00       	mov    edx,0x433
c001d020:	29 c2                	sub    edx,eax
c001d022:	89 c8                	mov    eax,ecx
c001d024:	c1 e2 14             	shl    edx,0x14
c001d027:	89 d9                	mov    ecx,ebx
c001d029:	89 f3                	mov    ebx,esi
c001d02b:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001d031:	09 ca                	or     edx,ecx
c001d033:	84 db                	test   bl,bl
c001d035:	74 06                	je     c001d03d <Vm::fpuLongToFloat(long long)+0x53>
c001d037:	81 ca 00 00 00 80    	or     edx,0x80000000
c001d03d:	5b                   	pop    ebx
c001d03e:	5e                   	pop    esi
c001d03f:	c3                   	ret    

c001d040 <Vm::fpuGet0()>:
c001d040:	31 c0                	xor    eax,eax
c001d042:	31 d2                	xor    edx,edx
c001d044:	c3                   	ret    

c001d045 <Vm::fpuGet1()>:
c001d045:	b8 01 00 00 00       	mov    eax,0x1
c001d04a:	31 d2                	xor    edx,edx
c001d04c:	c3                   	ret    

c001d04d <Vm::fpuGetPi()>:
c001d04d:	b8 03 00 00 00       	mov    eax,0x3
c001d052:	31 d2                	xor    edx,edx
c001d054:	c3                   	ret    

c001d055 <Vm::fpuGetLog2E()>:
c001d055:	83 ec 18             	sub    esp,0x18
c001d058:	68 1c 8c 02 c0       	push   0xc0028c1c
c001d05d:	e8 45 ba ff ff       	call   c0018aa7 <Krnl::panic(char const*)>
c001d062:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001d067:	31 d2                	xor    edx,edx
c001d069:	83 c4 1c             	add    esp,0x1c
c001d06c:	c3                   	ret    

c001d06d <Vm::fpuGetLogE2()>:
c001d06d:	83 ec 18             	sub    esp,0x18
c001d070:	68 28 8c 02 c0       	push   0xc0028c28
c001d075:	e8 2d ba ff ff       	call   c0018aa7 <Krnl::panic(char const*)>
c001d07a:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001d07f:	31 d2                	xor    edx,edx
c001d081:	83 c4 1c             	add    esp,0x1c
c001d084:	c3                   	ret    

c001d085 <Vm::fpuGetLog210()>:
c001d085:	83 ec 18             	sub    esp,0x18
c001d088:	68 34 8c 02 c0       	push   0xc0028c34
c001d08d:	e8 15 ba ff ff       	call   c0018aa7 <Krnl::panic(char const*)>
c001d092:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001d097:	31 d2                	xor    edx,edx
c001d099:	83 c4 1c             	add    esp,0x1c
c001d09c:	c3                   	ret    

c001d09d <Vm::fpuGetLog102()>:
c001d09d:	83 ec 18             	sub    esp,0x18
c001d0a0:	68 41 8c 02 c0       	push   0xc0028c41
c001d0a5:	e8 fd b9 ff ff       	call   c0018aa7 <Krnl::panic(char const*)>
c001d0aa:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001d0af:	31 d2                	xor    edx,edx
c001d0b1:	83 c4 1c             	add    esp,0x1c
c001d0b4:	c3                   	ret    

c001d0b5 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001d0b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d0b9:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001d0bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d0c1:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001d0c5:	0f 92 c0             	setb   al
c001d0c8:	c3                   	ret    

c001d0c9 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001d0c9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d0cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0d1:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001d0d5:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001d0d9:	09 c2                	or     edx,eax
c001d0db:	0f 94 c0             	sete   al
c001d0de:	c3                   	ret    

c001d0df <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001d0df:	57                   	push   edi
c001d0e0:	56                   	push   esi
c001d0e1:	53                   	push   ebx
c001d0e2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d0e6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d0ea:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001d0ee:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001d0f2:	57                   	push   edi
c001d0f3:	56                   	push   esi
c001d0f4:	53                   	push   ebx
c001d0f5:	51                   	push   ecx
c001d0f6:	e8 ce ff ff ff       	call   c001d0c9 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001d0fb:	83 c4 10             	add    esp,0x10
c001d0fe:	88 c2                	mov    dl,al
c001d100:	31 c0                	xor    eax,eax
c001d102:	84 d2                	test   dl,dl
c001d104:	75 0c                	jne    c001d112 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001d106:	57                   	push   edi
c001d107:	56                   	push   esi
c001d108:	53                   	push   ebx
c001d109:	51                   	push   ecx
c001d10a:	e8 a6 ff ff ff       	call   c001d0b5 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001d10f:	83 c4 10             	add    esp,0x10
c001d112:	83 e0 01             	and    eax,0x1
c001d115:	5b                   	pop    ebx
c001d116:	88 c1                	mov    cl,al
c001d118:	83 e2 01             	and    edx,0x1
c001d11b:	a0 61 bb 02 c0       	mov    al,ds:0xc002bb61
c001d120:	c1 e2 06             	shl    edx,0x6
c001d123:	83 e0 ba             	and    eax,0xffffffba
c001d126:	5e                   	pop    esi
c001d127:	09 c8                	or     eax,ecx
c001d129:	5f                   	pop    edi
c001d12a:	09 d0                	or     eax,edx
c001d12c:	a2 61 bb 02 c0       	mov    ds:0xc002bb61,al
c001d131:	c3                   	ret    

c001d132 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001d132:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d136:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d13a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d13e:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001d142:	c3                   	ret    

c001d143 <Vm::fpuAbs(unsigned long long)>:
c001d143:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d147:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d14b:	c3                   	ret    

c001d14c <Vm::fpuChs(unsigned long long)>:
c001d14c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d150:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d154:	f7 d8                	neg    eax
c001d156:	83 d2 00             	adc    edx,0x0
c001d159:	f7 da                	neg    edx
c001d15b:	c3                   	ret    

c001d15c <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001d15c:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001d160:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001d165:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001d169:	eb c7                	jmp    c001d132 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001d16b <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001d16b:	53                   	push   ebx
c001d16c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d170:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d174:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d178:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d17c:	0f af ca             	imul   ecx,edx
c001d17f:	0f af d8             	imul   ebx,eax
c001d182:	f7 e2                	mul    edx
c001d184:	01 d9                	add    ecx,ebx
c001d186:	5b                   	pop    ebx
c001d187:	01 ca                	add    edx,ecx
c001d189:	c3                   	ret    

c001d18a <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001d18a:	83 ec 0c             	sub    esp,0xc
c001d18d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d191:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d195:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d199:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d19d:	e8 9a 63 00 00       	call   c002353c <__udivdi3>
c001d1a2:	83 c4 1c             	add    esp,0x1c
c001d1a5:	c3                   	ret    

c001d1a6 <Vm::fpuSquare(unsigned long long)>:
c001d1a6:	50                   	push   eax
c001d1a7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d1ab:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d1af:	52                   	push   edx
c001d1b0:	50                   	push   eax
c001d1b1:	52                   	push   edx
c001d1b2:	50                   	push   eax
c001d1b3:	e8 b3 ff ff ff       	call   c001d16b <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001d1b8:	83 c4 14             	add    esp,0x14
c001d1bb:	c3                   	ret    

c001d1bc <Vm::fpuGetReg(int)>:
c001d1bc:	83 ec 0c             	sub    esp,0xc
c001d1bf:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001d1c4:	76 10                	jbe    c001d1d6 <Vm::fpuGetReg(int)+0x1a>
c001d1c6:	83 ec 0c             	sub    esp,0xc
c001d1c9:	68 4e 8c 02 c0       	push   0xc0028c4e
c001d1ce:	e8 d4 b8 ff ff       	call   c0018aa7 <Krnl::panic(char const*)>
c001d1d3:	83 c4 10             	add    esp,0x10
c001d1d6:	a0 61 bb 02 c0       	mov    al,ds:0xc002bb61
c001d1db:	b9 08 00 00 00       	mov    ecx,0x8
c001d1e0:	c0 e8 03             	shr    al,0x3
c001d1e3:	83 e0 07             	and    eax,0x7
c001d1e6:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d1ea:	99                   	cdq    
c001d1eb:	f7 f9                	idiv   ecx
c001d1ed:	8b 04 d5 64 bb 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd449c]
c001d1f4:	8b 14 d5 68 bb 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd4498]
c001d1fb:	83 c4 0c             	add    esp,0xc
c001d1fe:	c3                   	ret    

c001d1ff <Vm::fpuSetReg(int, unsigned long long)>:
c001d1ff:	57                   	push   edi
c001d200:	56                   	push   esi
c001d201:	52                   	push   edx
c001d202:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d206:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001d20a:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001d20f:	76 10                	jbe    c001d221 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001d211:	83 ec 0c             	sub    esp,0xc
c001d214:	68 61 8c 02 c0       	push   0xc0028c61
c001d219:	e8 89 b8 ff ff       	call   c0018aa7 <Krnl::panic(char const*)>
c001d21e:	83 c4 10             	add    esp,0x10
c001d221:	a0 61 bb 02 c0       	mov    al,ds:0xc002bb61
c001d226:	b9 08 00 00 00       	mov    ecx,0x8
c001d22b:	c0 e8 03             	shr    al,0x3
c001d22e:	83 e0 07             	and    eax,0x7
c001d231:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d235:	99                   	cdq    
c001d236:	f7 f9                	idiv   ecx
c001d238:	89 34 d5 64 bb 02 c0 	mov    DWORD PTR [edx*8-0x3ffd449c],esi
c001d23f:	89 3c d5 68 bb 02 c0 	mov    DWORD PTR [edx*8-0x3ffd4498],edi
c001d246:	58                   	pop    eax
c001d247:	5e                   	pop    esi
c001d248:	5f                   	pop    edi
c001d249:	c3                   	ret    

c001d24a <Vm::fpuPush(unsigned long long)>:
c001d24a:	a0 61 bb 02 c0       	mov    al,ds:0xc002bb61
c001d24f:	c0 e8 03             	shr    al,0x3
c001d252:	83 e0 07             	and    eax,0x7
c001d255:	83 c0 07             	add    eax,0x7
c001d258:	88 c2                	mov    dl,al
c001d25a:	83 e0 07             	and    eax,0x7
c001d25d:	83 e2 07             	and    edx,0x7
c001d260:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001d267:	8a 15 61 bb 02 c0    	mov    dl,BYTE PTR ds:0xc002bb61
c001d26d:	83 e2 c7             	and    edx,0xffffffc7
c001d270:	09 ca                	or     edx,ecx
c001d272:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d276:	88 15 61 bb 02 c0    	mov    BYTE PTR ds:0xc002bb61,dl
c001d27c:	89 0c c5 68 bb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd4498],ecx
c001d283:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d287:	89 14 c5 64 bb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd449c],edx
c001d28e:	a1 a4 bb 02 c0       	mov    eax,ds:0xc002bba4
c001d293:	83 f8 08             	cmp    eax,0x8
c001d296:	75 08                	jne    c001d2a0 <Vm::fpuPush(unsigned long long)+0x56>
c001d298:	80 0d 60 bb 02 c0 40 	or     BYTE PTR ds:0xc002bb60,0x40
c001d29f:	c3                   	ret    
c001d2a0:	40                   	inc    eax
c001d2a1:	a3 a4 bb 02 c0       	mov    ds:0xc002bba4,eax
c001d2a6:	c3                   	ret    

c001d2a7 <Vm::fpuPop()>:
c001d2a7:	8a 0d 61 bb 02 c0    	mov    cl,BYTE PTR ds:0xc002bb61
c001d2ad:	53                   	push   ebx
c001d2ae:	c0 e9 03             	shr    cl,0x3
c001d2b1:	8a 1d 61 bb 02 c0    	mov    bl,BYTE PTR ds:0xc002bb61
c001d2b7:	83 e1 07             	and    ecx,0x7
c001d2ba:	83 e3 c7             	and    ebx,0xffffffc7
c001d2bd:	8b 04 cd 64 bb 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd449c]
c001d2c4:	8b 14 cd 68 bb 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd4498]
c001d2cb:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001d2d2:	83 e1 38             	and    ecx,0x38
c001d2d5:	09 d9                	or     ecx,ebx
c001d2d7:	88 0d 61 bb 02 c0    	mov    BYTE PTR ds:0xc002bb61,cl
c001d2dd:	8b 0d a4 bb 02 c0    	mov    ecx,DWORD PTR ds:0xc002bba4
c001d2e3:	85 c9                	test   ecx,ecx
c001d2e5:	74 09                	je     c001d2f0 <Vm::fpuPop()+0x49>
c001d2e7:	49                   	dec    ecx
c001d2e8:	89 0d a4 bb 02 c0    	mov    DWORD PTR ds:0xc002bba4,ecx
c001d2ee:	eb 07                	jmp    c001d2f7 <Vm::fpuPop()+0x50>
c001d2f0:	80 0d 60 bb 02 c0 40 	or     BYTE PTR ds:0xc002bb60,0x40
c001d2f7:	5b                   	pop    ebx
c001d2f8:	c3                   	ret    

c001d2f9 <Vm::x87Handler(regs*)>:
c001d2f9:	55                   	push   ebp
c001d2fa:	57                   	push   edi
c001d2fb:	56                   	push   esi
c001d2fc:	53                   	push   ebx
c001d2fd:	83 ec 1c             	sub    esp,0x1c
c001d300:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d304:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001d309:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001d30c:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001d314:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001d318:	50                   	push   eax
c001d319:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001d31d:	50                   	push   eax
c001d31e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001d322:	50                   	push   eax
c001d323:	53                   	push   ebx
c001d324:	e8 83 b5 ff ff       	call   c00188ac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001d329:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001d32c:	83 c4 10             	add    esp,0x10
c001d32f:	89 c6                	mov    esi,eax
c001d331:	80 fa d9             	cmp    dl,0xd9
c001d334:	0f 85 52 01 00 00    	jne    c001d48c <Vm::x87Handler(regs*)+0x193>
c001d33a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d33e:	8d 50 20             	lea    edx,[eax+0x20]
c001d341:	80 fa 0e             	cmp    dl,0xe
c001d344:	0f 87 86 00 00 00    	ja     c001d3d0 <Vm::x87Handler(regs*)+0xd7>
c001d34a:	0f b6 d2             	movzx  edx,dl
c001d34d:	ff 24 95 74 8c 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd738c]
c001d354:	e8 e7 fc ff ff       	call   c001d040 <Vm::fpuGet0()>
c001d359:	eb 05                	jmp    c001d360 <Vm::x87Handler(regs*)+0x67>
c001d35b:	e8 e5 fc ff ff       	call   c001d045 <Vm::fpuGet1()>
c001d360:	57                   	push   edi
c001d361:	57                   	push   edi
c001d362:	52                   	push   edx
c001d363:	50                   	push   eax
c001d364:	e8 e1 fe ff ff       	call   c001d24a <Vm::fpuPush(unsigned long long)>
c001d369:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001d36d:	83 c4 10             	add    esp,0x10
c001d370:	b0 01                	mov    al,0x1
c001d372:	e9 e3 09 00 00       	jmp    c001dd5a <Vm::x87Handler(regs*)+0xa61>
c001d377:	83 ec 0c             	sub    esp,0xc
c001d37a:	6a 00                	push   0x0
c001d37c:	e8 3b fe ff ff       	call   c001d1bc <Vm::fpuGetReg(int)>
c001d381:	59                   	pop    ecx
c001d382:	5e                   	pop    esi
c001d383:	52                   	push   edx
c001d384:	50                   	push   eax
c001d385:	e8 c2 fd ff ff       	call   c001d14c <Vm::fpuChs(unsigned long long)>
c001d38a:	eb 13                	jmp    c001d39f <Vm::x87Handler(regs*)+0xa6>
c001d38c:	83 ec 0c             	sub    esp,0xc
c001d38f:	6a 00                	push   0x0
c001d391:	e8 26 fe ff ff       	call   c001d1bc <Vm::fpuGetReg(int)>
c001d396:	5f                   	pop    edi
c001d397:	5d                   	pop    ebp
c001d398:	52                   	push   edx
c001d399:	50                   	push   eax
c001d39a:	e8 a4 fd ff ff       	call   c001d143 <Vm::fpuAbs(unsigned long long)>
c001d39f:	83 c4 0c             	add    esp,0xc
c001d3a2:	52                   	push   edx
c001d3a3:	50                   	push   eax
c001d3a4:	6a 00                	push   0x0
c001d3a6:	e8 54 fe ff ff       	call   c001d1ff <Vm::fpuSetReg(int, unsigned long long)>
c001d3ab:	eb bc                	jmp    c001d369 <Vm::x87Handler(regs*)+0x70>
c001d3ad:	e8 d3 fc ff ff       	call   c001d085 <Vm::fpuGetLog210()>
c001d3b2:	eb ac                	jmp    c001d360 <Vm::x87Handler(regs*)+0x67>
c001d3b4:	e8 9c fc ff ff       	call   c001d055 <Vm::fpuGetLog2E()>
c001d3b9:	eb a5                	jmp    c001d360 <Vm::x87Handler(regs*)+0x67>
c001d3bb:	e8 8d fc ff ff       	call   c001d04d <Vm::fpuGetPi()>
c001d3c0:	eb 9e                	jmp    c001d360 <Vm::x87Handler(regs*)+0x67>
c001d3c2:	e8 d6 fc ff ff       	call   c001d09d <Vm::fpuGetLog102()>
c001d3c7:	eb 97                	jmp    c001d360 <Vm::x87Handler(regs*)+0x67>
c001d3c9:	e8 9f fc ff ff       	call   c001d06d <Vm::fpuGetLogE2()>
c001d3ce:	eb 90                	jmp    c001d360 <Vm::x87Handler(regs*)+0x67>
c001d3d0:	8d 50 40             	lea    edx,[eax+0x40]
c001d3d3:	80 fa 07             	cmp    dl,0x7
c001d3d6:	77 15                	ja     c001d3ed <Vm::x87Handler(regs*)+0xf4>
c001d3d8:	83 ec 0c             	sub    esp,0xc
c001d3db:	2d c0 00 00 00       	sub    eax,0xc0
c001d3e0:	50                   	push   eax
c001d3e1:	e8 d6 fd ff ff       	call   c001d1bc <Vm::fpuGetReg(int)>
c001d3e6:	59                   	pop    ecx
c001d3e7:	5e                   	pop    esi
c001d3e8:	e9 75 ff ff ff       	jmp    c001d362 <Vm::x87Handler(regs*)+0x69>
c001d3ed:	8d 50 38             	lea    edx,[eax+0x38]
c001d3f0:	80 fa 07             	cmp    dl,0x7
c001d3f3:	77 3c                	ja     c001d431 <Vm::x87Handler(regs*)+0x138>
c001d3f5:	83 ec 0c             	sub    esp,0xc
c001d3f8:	2d c8 00 00 00       	sub    eax,0xc8
c001d3fd:	50                   	push   eax
c001d3fe:	e8 b9 fd ff ff       	call   c001d1bc <Vm::fpuGetReg(int)>
c001d403:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d40a:	89 c6                	mov    esi,eax
c001d40c:	89 d7                	mov    edi,edx
c001d40e:	e8 a9 fd ff ff       	call   c001d1bc <Vm::fpuGetReg(int)>
c001d413:	83 c4 0c             	add    esp,0xc
c001d416:	52                   	push   edx
c001d417:	50                   	push   eax
c001d418:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d41c:	2d c8 00 00 00       	sub    eax,0xc8
c001d421:	50                   	push   eax
c001d422:	e8 d8 fd ff ff       	call   c001d1ff <Vm::fpuSetReg(int, unsigned long long)>
c001d427:	83 c4 0c             	add    esp,0xc
c001d42a:	57                   	push   edi
c001d42b:	56                   	push   esi
c001d42c:	e9 73 ff ff ff       	jmp    c001d3a4 <Vm::x87Handler(regs*)+0xab>
c001d431:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001d435:	84 d2                	test   dl,dl
c001d437:	75 0f                	jne    c001d448 <Vm::x87Handler(regs*)+0x14f>
c001d439:	83 ec 0c             	sub    esp,0xc
c001d43c:	ff 36                	push   DWORD PTR [esi]
c001d43e:	e8 c8 fa ff ff       	call   c001cf0b <Vm::fpu32ToInternal(unsigned int)>
c001d443:	e9 bf 00 00 00       	jmp    c001d507 <Vm::x87Handler(regs*)+0x20e>
c001d448:	80 fa 03             	cmp    dl,0x3
c001d44b:	75 13                	jne    c001d460 <Vm::x87Handler(regs*)+0x167>
c001d44d:	e8 55 fe ff ff       	call   c001d2a7 <Vm::fpuPop()>
c001d452:	55                   	push   ebp
c001d453:	55                   	push   ebp
c001d454:	52                   	push   edx
c001d455:	50                   	push   eax
c001d456:	e8 4c fa ff ff       	call   c001cea7 <Vm::fpuInternalTo32(unsigned long long)>
c001d45b:	e9 88 00 00 00       	jmp    c001d4e8 <Vm::x87Handler(regs*)+0x1ef>
c001d460:	80 fa 05             	cmp    dl,0x5
c001d463:	75 0e                	jne    c001d473 <Vm::x87Handler(regs*)+0x17a>
c001d465:	66 8b 06             	mov    ax,WORD PTR [esi]
c001d468:	66 a3 62 bb 02 c0    	mov    ds:0xc002bb62,ax
c001d46e:	e9 df 00 00 00       	jmp    c001d552 <Vm::x87Handler(regs*)+0x259>
c001d473:	31 c0                	xor    eax,eax
c001d475:	80 fa 07             	cmp    dl,0x7
c001d478:	0f 85 dc 08 00 00    	jne    c001dd5a <Vm::x87Handler(regs*)+0xa61>
c001d47e:	66 a1 62 bb 02 c0    	mov    ax,ds:0xc002bb62
c001d484:	66 89 06             	mov    WORD PTR [esi],ax
c001d487:	e9 c6 00 00 00       	jmp    c001d552 <Vm::x87Handler(regs*)+0x259>
c001d48c:	80 fa d8             	cmp    dl,0xd8
c001d48f:	0f 84 c9 00 00 00    	je     c001d55e <Vm::x87Handler(regs*)+0x265>
c001d495:	80 fa dc             	cmp    dl,0xdc
c001d498:	0f 84 0d 02 00 00    	je     c001d6ab <Vm::x87Handler(regs*)+0x3b2>
c001d49e:	80 fa de             	cmp    dl,0xde
c001d4a1:	0f 84 cd 02 00 00    	je     c001d774 <Vm::x87Handler(regs*)+0x47b>
c001d4a7:	80 fa dd             	cmp    dl,0xdd
c001d4aa:	0f 84 5f 04 00 00    	je     c001d90f <Vm::x87Handler(regs*)+0x616>
c001d4b0:	80 fa da             	cmp    dl,0xda
c001d4b3:	0f 84 24 05 00 00    	je     c001d9dd <Vm::x87Handler(regs*)+0x6e4>
c001d4b9:	80 fa df             	cmp    dl,0xdf
c001d4bc:	0f 84 68 05 00 00    	je     c001da2a <Vm::x87Handler(regs*)+0x731>
c001d4c2:	31 c0                	xor    eax,eax
c001d4c4:	80 fa db             	cmp    dl,0xdb
c001d4c7:	0f 85 8d 08 00 00    	jne    c001dd5a <Vm::x87Handler(regs*)+0xa61>
c001d4cd:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001d4d1:	80 fa 03             	cmp    dl,0x3
c001d4d4:	0f 85 70 06 00 00    	jne    c001db4a <Vm::x87Handler(regs*)+0x851>
c001d4da:	e8 c8 fd ff ff       	call   c001d2a7 <Vm::fpuPop()>
c001d4df:	55                   	push   ebp
c001d4e0:	55                   	push   ebp
c001d4e1:	52                   	push   edx
c001d4e2:	50                   	push   eax
c001d4e3:	e8 71 fa ff ff       	call   c001cf59 <Vm::fpuFloatToLong(unsigned long long)>
c001d4e8:	83 c4 10             	add    esp,0x10
c001d4eb:	89 06                	mov    DWORD PTR [esi],eax
c001d4ed:	eb 63                	jmp    c001d552 <Vm::x87Handler(regs*)+0x259>
c001d4ef:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001d4f3:	84 d2                	test   dl,dl
c001d4f5:	0f 85 e6 05 00 00    	jne    c001dae1 <Vm::x87Handler(regs*)+0x7e8>
c001d4fb:	57                   	push   edi
c001d4fc:	57                   	push   edi
c001d4fd:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001d500:	ff 36                	push   DWORD PTR [esi]
c001d502:	e8 49 fa ff ff       	call   c001cf50 <Vm::fpu64ToInternal(unsigned long long)>
c001d507:	5e                   	pop    esi
c001d508:	5f                   	pop    edi
c001d509:	52                   	push   edx
c001d50a:	50                   	push   eax
c001d50b:	e8 3a fd ff ff       	call   c001d24a <Vm::fpuPush(unsigned long long)>
c001d510:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d514:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001d517:	e9 51 fe ff ff       	jmp    c001d36d <Vm::x87Handler(regs*)+0x74>
c001d51c:	80 fa 03             	cmp    dl,0x3
c001d51f:	0f 85 d7 06 00 00    	jne    c001dbfc <Vm::x87Handler(regs*)+0x903>
c001d525:	57                   	push   edi
c001d526:	57                   	push   edi
c001d527:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001d52a:	ff 36                	push   DWORD PTR [esi]
c001d52c:	e8 1f fa ff ff       	call   c001cf50 <Vm::fpu64ToInternal(unsigned long long)>
c001d531:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d538:	89 c6                	mov    esi,eax
c001d53a:	89 d7                	mov    edi,edx
c001d53c:	e8 7b fc ff ff       	call   c001d1bc <Vm::fpuGetReg(int)>
c001d541:	57                   	push   edi
c001d542:	56                   	push   esi
c001d543:	52                   	push   edx
c001d544:	50                   	push   eax
c001d545:	e8 95 fb ff ff       	call   c001d0df <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001d54a:	83 c4 20             	add    esp,0x20
c001d54d:	e8 55 fd ff ff       	call   c001d2a7 <Vm::fpuPop()>
c001d552:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d556:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001d559:	e9 12 fe ff ff       	jmp    c001d370 <Vm::x87Handler(regs*)+0x77>
c001d55e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d562:	8d 50 40             	lea    edx,[eax+0x40]
c001d565:	80 fa 07             	cmp    dl,0x7
c001d568:	77 29                	ja     c001d593 <Vm::x87Handler(regs*)+0x29a>
c001d56a:	83 ec 0c             	sub    esp,0xc
c001d56d:	2d c0 00 00 00       	sub    eax,0xc0
c001d572:	50                   	push   eax
c001d573:	e8 44 fc ff ff       	call   c001d1bc <Vm::fpuGetReg(int)>
c001d578:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d57f:	89 c6                	mov    esi,eax
c001d581:	89 d7                	mov    edi,edx
c001d583:	e8 34 fc ff ff       	call   c001d1bc <Vm::fpuGetReg(int)>
c001d588:	57                   	push   edi
c001d589:	56                   	push   esi
c001d58a:	52                   	push   edx
c001d58b:	50                   	push   eax
c001d58c:	e8 a1 fb ff ff       	call   c001d132 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001d591:	eb 2f                	jmp    c001d5c2 <Vm::x87Handler(regs*)+0x2c9>
c001d593:	8d 50 38             	lea    edx,[eax+0x38]
c001d596:	80 fa 07             	cmp    dl,0x7
c001d599:	77 2f                	ja     c001d5ca <Vm::x87Handler(regs*)+0x2d1>
c001d59b:	83 ec 0c             	sub    esp,0xc
c001d59e:	2d c8 00 00 00       	sub    eax,0xc8
c001d5a3:	50                   	push   eax
c001d5a4:	e8 13 fc ff ff       	call   c001d1bc <Vm::fpuGetReg(int)>
c001d5a9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d5b0:	89 c6                	mov    esi,eax
c001d5b2:	89 d7                	mov    edi,edx
c001d5b4:	e8 03 fc ff ff       	call   c001d1bc <Vm::fpuGetReg(int)>
c001d5b9:	57                   	push   edi
c001d5ba:	56                   	push   esi
c001d5bb:	52                   	push   edx
c001d5bc:	50                   	push   eax
c001d5bd:	e8 a9 fb ff ff       	call   c001d16b <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001d5c2:	83 c4 1c             	add    esp,0x1c
c001d5c5:	e9 d8 fd ff ff       	jmp    c001d3a2 <Vm::x87Handler(regs*)+0xa9>
c001d5ca:	8d 50 30             	lea    edx,[eax+0x30]
c001d5cd:	80 fa 07             	cmp    dl,0x7
c001d5d0:	77 0d                	ja     c001d5df <Vm::x87Handler(regs*)+0x2e6>
c001d5d2:	83 ec 0c             	sub    esp,0xc
c001d5d5:	2d d0 00 00 00       	sub    eax,0xd0
c001d5da:	e9 99 03 00 00       	jmp    c001d978 <Vm::x87Handler(regs*)+0x67f>
c001d5df:	8d 50 28             	lea    edx,[eax+0x28]
c001d5e2:	80 fa 07             	cmp    dl,0x7
c001d5e5:	77 0d                	ja     c001d5f4 <Vm::x87Handler(regs*)+0x2fb>
c001d5e7:	83 ec 0c             	sub    esp,0xc
c001d5ea:	2d d8 00 00 00       	sub    eax,0xd8
c001d5ef:	e9 c0 03 00 00       	jmp    c001d9b4 <Vm::x87Handler(regs*)+0x6bb>
c001d5f4:	8d 50 20             	lea    edx,[eax+0x20]
c001d5f7:	80 fa 07             	cmp    dl,0x7
c001d5fa:	77 1b                	ja     c001d617 <Vm::x87Handler(regs*)+0x31e>
c001d5fc:	83 ec 0c             	sub    esp,0xc
c001d5ff:	2d e0 00 00 00       	sub    eax,0xe0
c001d604:	50                   	push   eax
c001d605:	e8 b2 fb ff ff       	call   c001d1bc <Vm::fpuGetReg(int)>
c001d60a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d611:	89 c6                	mov    esi,eax
c001d613:	89 d7                	mov    edi,edx
c001d615:	eb 22                	jmp    c001d639 <Vm::x87Handler(regs*)+0x340>
c001d617:	8d 50 18             	lea    edx,[eax+0x18]
c001d61a:	80 fa 07             	cmp    dl,0x7
c001d61d:	77 2d                	ja     c001d64c <Vm::x87Handler(regs*)+0x353>
c001d61f:	83 ec 0c             	sub    esp,0xc
c001d622:	6a 00                	push   0x0
c001d624:	e8 93 fb ff ff       	call   c001d1bc <Vm::fpuGetReg(int)>
c001d629:	89 c6                	mov    esi,eax
c001d62b:	89 d7                	mov    edi,edx
c001d62d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d631:	2d e8 00 00 00       	sub    eax,0xe8
c001d636:	89 04 24             	mov    DWORD PTR [esp],eax
c001d639:	e8 7e fb ff ff       	call   c001d1bc <Vm::fpuGetReg(int)>
c001d63e:	57                   	push   edi
c001d63f:	56                   	push   esi
c001d640:	52                   	push   edx
c001d641:	50                   	push   eax
c001d642:	e8 15 fb ff ff       	call   c001d15c <Vm::fpuSub(unsigned long long, unsigned long long)>
c001d647:	e9 76 ff ff ff       	jmp    c001d5c2 <Vm::x87Handler(regs*)+0x2c9>
c001d64c:	8d 50 10             	lea    edx,[eax+0x10]
c001d64f:	80 fa 07             	cmp    dl,0x7
c001d652:	77 1b                	ja     c001d66f <Vm::x87Handler(regs*)+0x376>
c001d654:	83 ec 0c             	sub    esp,0xc
c001d657:	2d f0 00 00 00       	sub    eax,0xf0
c001d65c:	50                   	push   eax
c001d65d:	e8 5a fb ff ff       	call   c001d1bc <Vm::fpuGetReg(int)>
c001d662:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d669:	89 c6                	mov    esi,eax
c001d66b:	89 d7                	mov    edi,edx
c001d66d:	eb 22                	jmp    c001d691 <Vm::x87Handler(regs*)+0x398>
c001d66f:	3c f7                	cmp    al,0xf7
c001d671:	0f 86 d1 03 00 00    	jbe    c001da48 <Vm::x87Handler(regs*)+0x74f>
c001d677:	83 ec 0c             	sub    esp,0xc
c001d67a:	6a 00                	push   0x0
c001d67c:	e8 3b fb ff ff       	call   c001d1bc <Vm::fpuGetReg(int)>
c001d681:	89 c6                	mov    esi,eax
c001d683:	89 d7                	mov    edi,edx
c001d685:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d689:	2d f8 00 00 00       	sub    eax,0xf8
c001d68e:	89 04 24             	mov    DWORD PTR [esp],eax
c001d691:	e8 26 fb ff ff       	call   c001d1bc <Vm::fpuGetReg(int)>
c001d696:	57                   	push   edi
c001d697:	56                   	push   esi
c001d698:	52                   	push   edx
c001d699:	50                   	push   eax
c001d69a:	e8 eb fa ff ff       	call   c001d18a <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001d69f:	83 c4 1c             	add    esp,0x1c
c001d6a2:	52                   	push   edx
c001d6a3:	50                   	push   eax
c001d6a4:	6a 00                	push   0x0
c001d6a6:	e9 51 02 00 00       	jmp    c001d8fc <Vm::x87Handler(regs*)+0x603>
c001d6ab:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d6af:	8d 50 40             	lea    edx,[eax+0x40]
c001d6b2:	80 fa 07             	cmp    dl,0x7
c001d6b5:	77 37                	ja     c001d6ee <Vm::x87Handler(regs*)+0x3f5>
c001d6b7:	83 ec 0c             	sub    esp,0xc
c001d6ba:	2d c0 00 00 00       	sub    eax,0xc0
c001d6bf:	50                   	push   eax
c001d6c0:	e8 f7 fa ff ff       	call   c001d1bc <Vm::fpuGetReg(int)>
c001d6c5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d6cc:	89 c6                	mov    esi,eax
c001d6ce:	89 d7                	mov    edi,edx
c001d6d0:	e8 e7 fa ff ff       	call   c001d1bc <Vm::fpuGetReg(int)>
c001d6d5:	57                   	push   edi
c001d6d6:	56                   	push   esi
c001d6d7:	52                   	push   edx
c001d6d8:	50                   	push   eax
c001d6d9:	e8 54 fa ff ff       	call   c001d132 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001d6de:	83 c4 1c             	add    esp,0x1c
c001d6e1:	52                   	push   edx
c001d6e2:	50                   	push   eax
c001d6e3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d6e7:	2d c0 00 00 00       	sub    eax,0xc0
c001d6ec:	eb 3d                	jmp    c001d72b <Vm::x87Handler(regs*)+0x432>
c001d6ee:	8d 50 38             	lea    edx,[eax+0x38]
c001d6f1:	80 fa 07             	cmp    dl,0x7
c001d6f4:	77 3b                	ja     c001d731 <Vm::x87Handler(regs*)+0x438>
c001d6f6:	83 ec 0c             	sub    esp,0xc
c001d6f9:	2d c8 00 00 00       	sub    eax,0xc8
c001d6fe:	50                   	push   eax
c001d6ff:	e8 b8 fa ff ff       	call   c001d1bc <Vm::fpuGetReg(int)>
c001d704:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d70b:	89 c6                	mov    esi,eax
c001d70d:	89 d7                	mov    edi,edx
c001d70f:	e8 a8 fa ff ff       	call   c001d1bc <Vm::fpuGetReg(int)>
c001d714:	57                   	push   edi
c001d715:	56                   	push   esi
c001d716:	52                   	push   edx
c001d717:	50                   	push   eax
c001d718:	e8 4e fa ff ff       	call   c001d16b <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001d71d:	83 c4 1c             	add    esp,0x1c
c001d720:	52                   	push   edx
c001d721:	50                   	push   eax
c001d722:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d726:	2d c8 00 00 00       	sub    eax,0xc8
c001d72b:	50                   	push   eax
c001d72c:	e9 75 fc ff ff       	jmp    c001d3a6 <Vm::x87Handler(regs*)+0xad>
c001d731:	83 c0 18             	add    eax,0x18
c001d734:	3c 07                	cmp    al,0x7
c001d736:	0f 87 3b 04 00 00    	ja     c001db77 <Vm::x87Handler(regs*)+0x87e>
c001d73c:	83 ec 0c             	sub    esp,0xc
c001d73f:	6a 00                	push   0x0
c001d741:	e8 76 fa ff ff       	call   c001d1bc <Vm::fpuGetReg(int)>
c001d746:	89 c6                	mov    esi,eax
c001d748:	89 d7                	mov    edi,edx
c001d74a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d74e:	2d e8 00 00 00       	sub    eax,0xe8
c001d753:	89 04 24             	mov    DWORD PTR [esp],eax
c001d756:	e8 61 fa ff ff       	call   c001d1bc <Vm::fpuGetReg(int)>
c001d75b:	57                   	push   edi
c001d75c:	56                   	push   esi
c001d75d:	52                   	push   edx
c001d75e:	50                   	push   eax
c001d75f:	e8 f8 f9 ff ff       	call   c001d15c <Vm::fpuSub(unsigned long long, unsigned long long)>
c001d764:	83 c4 1c             	add    esp,0x1c
c001d767:	52                   	push   edx
c001d768:	50                   	push   eax
c001d769:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d76d:	2d e8 00 00 00       	sub    eax,0xe8
c001d772:	eb b7                	jmp    c001d72b <Vm::x87Handler(regs*)+0x432>
c001d774:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d778:	8d 50 40             	lea    edx,[eax+0x40]
c001d77b:	80 fa 07             	cmp    dl,0x7
c001d77e:	77 3a                	ja     c001d7ba <Vm::x87Handler(regs*)+0x4c1>
c001d780:	83 ec 0c             	sub    esp,0xc
c001d783:	2d c0 00 00 00       	sub    eax,0xc0
c001d788:	50                   	push   eax
c001d789:	e8 2e fa ff ff       	call   c001d1bc <Vm::fpuGetReg(int)>
c001d78e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d795:	89 c6                	mov    esi,eax
c001d797:	89 d7                	mov    edi,edx
c001d799:	e8 1e fa ff ff       	call   c001d1bc <Vm::fpuGetReg(int)>
c001d79e:	57                   	push   edi
c001d79f:	56                   	push   esi
c001d7a0:	52                   	push   edx
c001d7a1:	50                   	push   eax
c001d7a2:	e8 8b f9 ff ff       	call   c001d132 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001d7a7:	83 c4 1c             	add    esp,0x1c
c001d7aa:	52                   	push   edx
c001d7ab:	50                   	push   eax
c001d7ac:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d7b0:	2d c0 00 00 00       	sub    eax,0xc0
c001d7b5:	e9 9e 01 00 00       	jmp    c001d958 <Vm::x87Handler(regs*)+0x65f>
c001d7ba:	8d 50 20             	lea    edx,[eax+0x20]
c001d7bd:	80 fa 07             	cmp    dl,0x7
c001d7c0:	77 3a                	ja     c001d7fc <Vm::x87Handler(regs*)+0x503>
c001d7c2:	83 ec 0c             	sub    esp,0xc
c001d7c5:	2d e0 00 00 00       	sub    eax,0xe0
c001d7ca:	50                   	push   eax
c001d7cb:	e8 ec f9 ff ff       	call   c001d1bc <Vm::fpuGetReg(int)>
c001d7d0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d7d7:	89 c6                	mov    esi,eax
c001d7d9:	89 d7                	mov    edi,edx
c001d7db:	e8 dc f9 ff ff       	call   c001d1bc <Vm::fpuGetReg(int)>
c001d7e0:	57                   	push   edi
c001d7e1:	56                   	push   esi
c001d7e2:	52                   	push   edx
c001d7e3:	50                   	push   eax
c001d7e4:	e8 73 f9 ff ff       	call   c001d15c <Vm::fpuSub(unsigned long long, unsigned long long)>
c001d7e9:	83 c4 1c             	add    esp,0x1c
c001d7ec:	52                   	push   edx
c001d7ed:	50                   	push   eax
c001d7ee:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d7f2:	2d e0 00 00 00       	sub    eax,0xe0
c001d7f7:	e9 5c 01 00 00       	jmp    c001d958 <Vm::x87Handler(regs*)+0x65f>
c001d7fc:	8d 50 18             	lea    edx,[eax+0x18]
c001d7ff:	80 fa 07             	cmp    dl,0x7
c001d802:	77 3b                	ja     c001d83f <Vm::x87Handler(regs*)+0x546>
c001d804:	83 ec 0c             	sub    esp,0xc
c001d807:	6a 00                	push   0x0
c001d809:	e8 ae f9 ff ff       	call   c001d1bc <Vm::fpuGetReg(int)>
c001d80e:	89 c6                	mov    esi,eax
c001d810:	89 d7                	mov    edi,edx
c001d812:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d816:	2d e8 00 00 00       	sub    eax,0xe8
c001d81b:	89 04 24             	mov    DWORD PTR [esp],eax
c001d81e:	e8 99 f9 ff ff       	call   c001d1bc <Vm::fpuGetReg(int)>
c001d823:	57                   	push   edi
c001d824:	56                   	push   esi
c001d825:	52                   	push   edx
c001d826:	50                   	push   eax
c001d827:	e8 30 f9 ff ff       	call   c001d15c <Vm::fpuSub(unsigned long long, unsigned long long)>
c001d82c:	83 c4 1c             	add    esp,0x1c
c001d82f:	52                   	push   edx
c001d830:	50                   	push   eax
c001d831:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d835:	2d e8 00 00 00       	sub    eax,0xe8
c001d83a:	e9 19 01 00 00       	jmp    c001d958 <Vm::x87Handler(regs*)+0x65f>
c001d83f:	8d 50 38             	lea    edx,[eax+0x38]
c001d842:	80 fa 07             	cmp    dl,0x7
c001d845:	77 37                	ja     c001d87e <Vm::x87Handler(regs*)+0x585>
c001d847:	83 ec 0c             	sub    esp,0xc
c001d84a:	2d c8 00 00 00       	sub    eax,0xc8
c001d84f:	50                   	push   eax
c001d850:	e8 67 f9 ff ff       	call   c001d1bc <Vm::fpuGetReg(int)>
c001d855:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d85c:	89 c6                	mov    esi,eax
c001d85e:	89 d7                	mov    edi,edx
c001d860:	e8 57 f9 ff ff       	call   c001d1bc <Vm::fpuGetReg(int)>
c001d865:	57                   	push   edi
c001d866:	56                   	push   esi
c001d867:	52                   	push   edx
c001d868:	50                   	push   eax
c001d869:	e8 fd f8 ff ff       	call   c001d16b <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001d86e:	83 c4 1c             	add    esp,0x1c
c001d871:	52                   	push   edx
c001d872:	50                   	push   eax
c001d873:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d877:	2d c8 00 00 00       	sub    eax,0xc8
c001d87c:	eb 7d                	jmp    c001d8fb <Vm::x87Handler(regs*)+0x602>
c001d87e:	3c f7                	cmp    al,0xf7
c001d880:	76 38                	jbe    c001d8ba <Vm::x87Handler(regs*)+0x5c1>
c001d882:	83 ec 0c             	sub    esp,0xc
c001d885:	6a 00                	push   0x0
c001d887:	e8 30 f9 ff ff       	call   c001d1bc <Vm::fpuGetReg(int)>
c001d88c:	89 c6                	mov    esi,eax
c001d88e:	89 d7                	mov    edi,edx
c001d890:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d894:	2d f8 00 00 00       	sub    eax,0xf8
c001d899:	89 04 24             	mov    DWORD PTR [esp],eax
c001d89c:	e8 1b f9 ff ff       	call   c001d1bc <Vm::fpuGetReg(int)>
c001d8a1:	57                   	push   edi
c001d8a2:	56                   	push   esi
c001d8a3:	52                   	push   edx
c001d8a4:	50                   	push   eax
c001d8a5:	e8 e0 f8 ff ff       	call   c001d18a <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001d8aa:	83 c4 1c             	add    esp,0x1c
c001d8ad:	52                   	push   edx
c001d8ae:	50                   	push   eax
c001d8af:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d8b3:	2d f8 00 00 00       	sub    eax,0xf8
c001d8b8:	eb 41                	jmp    c001d8fb <Vm::x87Handler(regs*)+0x602>
c001d8ba:	8d 50 10             	lea    edx,[eax+0x10]
c001d8bd:	80 fa 07             	cmp    dl,0x7
c001d8c0:	0f 87 5a 01 00 00    	ja     c001da20 <Vm::x87Handler(regs*)+0x727>
c001d8c6:	83 ec 0c             	sub    esp,0xc
c001d8c9:	2d f0 00 00 00       	sub    eax,0xf0
c001d8ce:	50                   	push   eax
c001d8cf:	e8 e8 f8 ff ff       	call   c001d1bc <Vm::fpuGetReg(int)>
c001d8d4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d8db:	89 c6                	mov    esi,eax
c001d8dd:	89 d7                	mov    edi,edx
c001d8df:	e8 d8 f8 ff ff       	call   c001d1bc <Vm::fpuGetReg(int)>
c001d8e4:	57                   	push   edi
c001d8e5:	56                   	push   esi
c001d8e6:	52                   	push   edx
c001d8e7:	50                   	push   eax
c001d8e8:	e8 9d f8 ff ff       	call   c001d18a <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001d8ed:	83 c4 1c             	add    esp,0x1c
c001d8f0:	52                   	push   edx
c001d8f1:	50                   	push   eax
c001d8f2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d8f6:	2d f0 00 00 00       	sub    eax,0xf0
c001d8fb:	50                   	push   eax
c001d8fc:	e8 fe f8 ff ff       	call   c001d1ff <Vm::fpuSetReg(int, unsigned long long)>
c001d901:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001d905:	e8 9d f9 ff ff       	call   c001d2a7 <Vm::fpuPop()>
c001d90a:	e9 5e fa ff ff       	jmp    c001d36d <Vm::x87Handler(regs*)+0x74>
c001d90f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d913:	8d 50 30             	lea    edx,[eax+0x30]
c001d916:	80 fa 07             	cmp    dl,0x7
c001d919:	77 1d                	ja     c001d938 <Vm::x87Handler(regs*)+0x63f>
c001d91b:	83 ec 0c             	sub    esp,0xc
c001d91e:	6a 00                	push   0x0
c001d920:	e8 97 f8 ff ff       	call   c001d1bc <Vm::fpuGetReg(int)>
c001d925:	83 c4 0c             	add    esp,0xc
c001d928:	52                   	push   edx
c001d929:	50                   	push   eax
c001d92a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d92e:	2d d0 00 00 00       	sub    eax,0xd0
c001d933:	e9 f3 fd ff ff       	jmp    c001d72b <Vm::x87Handler(regs*)+0x432>
c001d938:	8d 50 28             	lea    edx,[eax+0x28]
c001d93b:	80 fa 07             	cmp    dl,0x7
c001d93e:	77 28                	ja     c001d968 <Vm::x87Handler(regs*)+0x66f>
c001d940:	83 ec 0c             	sub    esp,0xc
c001d943:	6a 00                	push   0x0
c001d945:	e8 72 f8 ff ff       	call   c001d1bc <Vm::fpuGetReg(int)>
c001d94a:	83 c4 0c             	add    esp,0xc
c001d94d:	52                   	push   edx
c001d94e:	50                   	push   eax
c001d94f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d953:	2d d8 00 00 00       	sub    eax,0xd8
c001d958:	50                   	push   eax
c001d959:	e8 a1 f8 ff ff       	call   c001d1ff <Vm::fpuSetReg(int, unsigned long long)>
c001d95e:	e8 44 f9 ff ff       	call   c001d2a7 <Vm::fpuPop()>
c001d963:	e9 01 fa ff ff       	jmp    c001d369 <Vm::x87Handler(regs*)+0x70>
c001d968:	8d 50 20             	lea    edx,[eax+0x20]
c001d96b:	80 fa 07             	cmp    dl,0x7
c001d96e:	77 30                	ja     c001d9a0 <Vm::x87Handler(regs*)+0x6a7>
c001d970:	83 ec 0c             	sub    esp,0xc
c001d973:	2d e0 00 00 00       	sub    eax,0xe0
c001d978:	50                   	push   eax
c001d979:	e8 3e f8 ff ff       	call   c001d1bc <Vm::fpuGetReg(int)>
c001d97e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d985:	89 c6                	mov    esi,eax
c001d987:	89 d7                	mov    edi,edx
c001d989:	e8 2e f8 ff ff       	call   c001d1bc <Vm::fpuGetReg(int)>
c001d98e:	57                   	push   edi
c001d98f:	56                   	push   esi
c001d990:	52                   	push   edx
c001d991:	50                   	push   eax
c001d992:	e8 48 f7 ff ff       	call   c001d0df <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001d997:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001d99b:	e9 54 02 00 00       	jmp    c001dbf4 <Vm::x87Handler(regs*)+0x8fb>
c001d9a0:	8d 50 18             	lea    edx,[eax+0x18]
c001d9a3:	80 fa 07             	cmp    dl,0x7
c001d9a6:	0f 87 43 fb ff ff    	ja     c001d4ef <Vm::x87Handler(regs*)+0x1f6>
c001d9ac:	83 ec 0c             	sub    esp,0xc
c001d9af:	2d e8 00 00 00       	sub    eax,0xe8
c001d9b4:	50                   	push   eax
c001d9b5:	e8 02 f8 ff ff       	call   c001d1bc <Vm::fpuGetReg(int)>
c001d9ba:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d9c1:	89 c6                	mov    esi,eax
c001d9c3:	89 d7                	mov    edi,edx
c001d9c5:	e8 f2 f7 ff ff       	call   c001d1bc <Vm::fpuGetReg(int)>
c001d9ca:	57                   	push   edi
c001d9cb:	56                   	push   esi
c001d9cc:	52                   	push   edx
c001d9cd:	50                   	push   eax
c001d9ce:	e8 0c f7 ff ff       	call   c001d0df <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001d9d3:	83 c4 20             	add    esp,0x20
c001d9d6:	e8 cc f8 ff ff       	call   c001d2a7 <Vm::fpuPop()>
c001d9db:	eb 62                	jmp    c001da3f <Vm::x87Handler(regs*)+0x746>
c001d9dd:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001d9e1:	0f 85 0f 01 00 00    	jne    c001daf6 <Vm::x87Handler(regs*)+0x7fd>
c001d9e7:	83 ec 0c             	sub    esp,0xc
c001d9ea:	6a 01                	push   0x1
c001d9ec:	e8 cb f7 ff ff       	call   c001d1bc <Vm::fpuGetReg(int)>
c001d9f1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d9f8:	89 c6                	mov    esi,eax
c001d9fa:	89 d7                	mov    edi,edx
c001d9fc:	e8 bb f7 ff ff       	call   c001d1bc <Vm::fpuGetReg(int)>
c001da01:	57                   	push   edi
c001da02:	56                   	push   esi
c001da03:	52                   	push   edx
c001da04:	50                   	push   eax
c001da05:	e8 d5 f6 ff ff       	call   c001d0df <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001da0a:	83 c4 20             	add    esp,0x20
c001da0d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001da11:	e8 91 f8 ff ff       	call   c001d2a7 <Vm::fpuPop()>
c001da16:	e8 8c f8 ff ff       	call   c001d2a7 <Vm::fpuPop()>
c001da1b:	e9 50 f9 ff ff       	jmp    c001d370 <Vm::x87Handler(regs*)+0x77>
c001da20:	3c d9                	cmp    al,0xd9
c001da22:	0f 85 b5 02 00 00    	jne    c001dcdd <Vm::x87Handler(regs*)+0x9e4>
c001da28:	eb bd                	jmp    c001d9e7 <Vm::x87Handler(regs*)+0x6ee>
c001da2a:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001da2e:	0f 85 ea 02 00 00    	jne    c001dd1e <Vm::x87Handler(regs*)+0xa25>
c001da34:	0f b7 05 60 bb 02 c0 	movzx  eax,WORD PTR ds:0xc002bb60
c001da3b:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001da3f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001da43:	e9 28 f9 ff ff       	jmp    c001d370 <Vm::x87Handler(regs*)+0x77>
c001da48:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001da4c:	84 d2                	test   dl,dl
c001da4e:	75 0f                	jne    c001da5f <Vm::x87Handler(regs*)+0x766>
c001da50:	83 ec 0c             	sub    esp,0xc
c001da53:	ff 36                	push   DWORD PTR [esi]
c001da55:	e8 b1 f4 ff ff       	call   c001cf0b <Vm::fpu32ToInternal(unsigned int)>
c001da5a:	e9 2c 01 00 00       	jmp    c001db8b <Vm::x87Handler(regs*)+0x892>
c001da5f:	80 fa 01             	cmp    dl,0x1
c001da62:	75 0f                	jne    c001da73 <Vm::x87Handler(regs*)+0x77a>
c001da64:	83 ec 0c             	sub    esp,0xc
c001da67:	ff 36                	push   DWORD PTR [esi]
c001da69:	e8 9d f4 ff ff       	call   c001cf0b <Vm::fpu32ToInternal(unsigned int)>
c001da6e:	e9 81 02 00 00       	jmp    c001dcf4 <Vm::x87Handler(regs*)+0x9fb>
c001da73:	80 fa 04             	cmp    dl,0x4
c001da76:	75 0f                	jne    c001da87 <Vm::x87Handler(regs*)+0x78e>
c001da78:	83 ec 0c             	sub    esp,0xc
c001da7b:	ff 36                	push   DWORD PTR [esi]
c001da7d:	e8 89 f4 ff ff       	call   c001cf0b <Vm::fpu32ToInternal(unsigned int)>
c001da82:	e9 86 01 00 00       	jmp    c001dc0d <Vm::x87Handler(regs*)+0x914>
c001da87:	80 fa 05             	cmp    dl,0x5
c001da8a:	75 1b                	jne    c001daa7 <Vm::x87Handler(regs*)+0x7ae>
c001da8c:	83 ec 0c             	sub    esp,0xc
c001da8f:	6a 00                	push   0x0
c001da91:	e8 26 f7 ff ff       	call   c001d1bc <Vm::fpuGetReg(int)>
c001da96:	89 c7                	mov    edi,eax
c001da98:	89 d5                	mov    ebp,edx
c001da9a:	58                   	pop    eax
c001da9b:	ff 36                	push   DWORD PTR [esi]
c001da9d:	e8 69 f4 ff ff       	call   c001cf0b <Vm::fpu32ToInternal(unsigned int)>
c001daa2:	e9 a3 01 00 00       	jmp    c001dc4a <Vm::x87Handler(regs*)+0x951>
c001daa7:	80 fa 06             	cmp    dl,0x6
c001daaa:	75 0f                	jne    c001dabb <Vm::x87Handler(regs*)+0x7c2>
c001daac:	83 ec 0c             	sub    esp,0xc
c001daaf:	ff 36                	push   DWORD PTR [esi]
c001dab1:	e8 55 f4 ff ff       	call   c001cf0b <Vm::fpu32ToInternal(unsigned int)>
c001dab6:	e9 ae 01 00 00       	jmp    c001dc69 <Vm::x87Handler(regs*)+0x970>
c001dabb:	31 c0                	xor    eax,eax
c001dabd:	80 fa 07             	cmp    dl,0x7
c001dac0:	0f 85 94 02 00 00    	jne    c001dd5a <Vm::x87Handler(regs*)+0xa61>
c001dac6:	83 ec 0c             	sub    esp,0xc
c001dac9:	6a 00                	push   0x0
c001dacb:	e8 ec f6 ff ff       	call   c001d1bc <Vm::fpuGetReg(int)>
c001dad0:	89 c7                	mov    edi,eax
c001dad2:	89 d5                	mov    ebp,edx
c001dad4:	58                   	pop    eax
c001dad5:	ff 36                	push   DWORD PTR [esi]
c001dad7:	e8 2f f4 ff ff       	call   c001cf0b <Vm::fpu32ToInternal(unsigned int)>
c001dadc:	e9 cb 01 00 00       	jmp    c001dcac <Vm::x87Handler(regs*)+0x9b3>
c001dae1:	80 fa 03             	cmp    dl,0x3
c001dae4:	0f 85 d3 01 00 00    	jne    c001dcbd <Vm::x87Handler(regs*)+0x9c4>
c001daea:	e8 b8 f7 ff ff       	call   c001d2a7 <Vm::fpuPop()>
c001daef:	51                   	push   ecx
c001daf0:	51                   	push   ecx
c001daf1:	e9 de 01 00 00       	jmp    c001dcd4 <Vm::x87Handler(regs*)+0x9db>
c001daf6:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001dafa:	80 fa 01             	cmp    dl,0x1
c001dafd:	75 09                	jne    c001db08 <Vm::x87Handler(regs*)+0x80f>
c001daff:	57                   	push   edi
c001db00:	57                   	push   edi
c001db01:	8b 06                	mov    eax,DWORD PTR [esi]
c001db03:	e9 e3 01 00 00       	jmp    c001dceb <Vm::x87Handler(regs*)+0x9f2>
c001db08:	80 fa 04             	cmp    dl,0x4
c001db0b:	75 12                	jne    c001db1f <Vm::x87Handler(regs*)+0x826>
c001db0d:	31 d2                	xor    edx,edx
c001db0f:	51                   	push   ecx
c001db10:	51                   	push   ecx
c001db11:	8b 06                	mov    eax,DWORD PTR [esi]
c001db13:	52                   	push   edx
c001db14:	50                   	push   eax
c001db15:	e8 d0 f4 ff ff       	call   c001cfea <Vm::fpuLongToFloat(long long)>
c001db1a:	e9 ee 00 00 00       	jmp    c001dc0d <Vm::x87Handler(regs*)+0x914>
c001db1f:	31 c0                	xor    eax,eax
c001db21:	80 fa 07             	cmp    dl,0x7
c001db24:	0f 85 30 02 00 00    	jne    c001dd5a <Vm::x87Handler(regs*)+0xa61>
c001db2a:	83 ec 0c             	sub    esp,0xc
c001db2d:	6a 00                	push   0x0
c001db2f:	e8 88 f6 ff ff       	call   c001d1bc <Vm::fpuGetReg(int)>
c001db34:	89 c7                	mov    edi,eax
c001db36:	89 d5                	mov    ebp,edx
c001db38:	58                   	pop    eax
c001db39:	8b 06                	mov    eax,DWORD PTR [esi]
c001db3b:	5a                   	pop    edx
c001db3c:	31 d2                	xor    edx,edx
c001db3e:	52                   	push   edx
c001db3f:	50                   	push   eax
c001db40:	e8 a5 f4 ff ff       	call   c001cfea <Vm::fpuLongToFloat(long long)>
c001db45:	e9 62 01 00 00       	jmp    c001dcac <Vm::x87Handler(regs*)+0x9b3>
c001db4a:	84 d2                	test   dl,dl
c001db4c:	75 0d                	jne    c001db5b <Vm::x87Handler(regs*)+0x862>
c001db4e:	31 d2                	xor    edx,edx
c001db50:	55                   	push   ebp
c001db51:	55                   	push   ebp
c001db52:	8b 06                	mov    eax,DWORD PTR [esi]
c001db54:	52                   	push   edx
c001db55:	50                   	push   eax
c001db56:	e9 d3 01 00 00       	jmp    c001dd2e <Vm::x87Handler(regs*)+0xa35>
c001db5b:	31 c0                	xor    eax,eax
c001db5d:	80 fa 02             	cmp    dl,0x2
c001db60:	0f 85 f4 01 00 00    	jne    c001dd5a <Vm::x87Handler(regs*)+0xa61>
c001db66:	83 ec 0c             	sub    esp,0xc
c001db69:	6a 00                	push   0x0
c001db6b:	e8 4c f6 ff ff       	call   c001d1bc <Vm::fpuGetReg(int)>
c001db70:	59                   	pop    ecx
c001db71:	5f                   	pop    edi
c001db72:	e9 6a f9 ff ff       	jmp    c001d4e1 <Vm::x87Handler(regs*)+0x1e8>
c001db77:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001db7b:	84 d2                	test   dl,dl
c001db7d:	75 2a                	jne    c001dba9 <Vm::x87Handler(regs*)+0x8b0>
c001db7f:	50                   	push   eax
c001db80:	50                   	push   eax
c001db81:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001db84:	ff 36                	push   DWORD PTR [esi]
c001db86:	e8 c5 f3 ff ff       	call   c001cf50 <Vm::fpu64ToInternal(unsigned long long)>
c001db8b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001db92:	89 c6                	mov    esi,eax
c001db94:	89 d7                	mov    edi,edx
c001db96:	e8 21 f6 ff ff       	call   c001d1bc <Vm::fpuGetReg(int)>
c001db9b:	57                   	push   edi
c001db9c:	56                   	push   esi
c001db9d:	52                   	push   edx
c001db9e:	50                   	push   eax
c001db9f:	e8 8e f5 ff ff       	call   c001d132 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001dba4:	e9 64 01 00 00       	jmp    c001dd0d <Vm::x87Handler(regs*)+0xa14>
c001dba9:	80 fa 01             	cmp    dl,0x1
c001dbac:	75 11                	jne    c001dbbf <Vm::x87Handler(regs*)+0x8c6>
c001dbae:	50                   	push   eax
c001dbaf:	50                   	push   eax
c001dbb0:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001dbb3:	ff 36                	push   DWORD PTR [esi]
c001dbb5:	e8 96 f3 ff ff       	call   c001cf50 <Vm::fpu64ToInternal(unsigned long long)>
c001dbba:	e9 35 01 00 00       	jmp    c001dcf4 <Vm::x87Handler(regs*)+0x9fb>
c001dbbf:	80 fa 02             	cmp    dl,0x2
c001dbc2:	0f 85 54 f9 ff ff    	jne    c001d51c <Vm::x87Handler(regs*)+0x223>
c001dbc8:	55                   	push   ebp
c001dbc9:	55                   	push   ebp
c001dbca:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001dbcd:	ff 36                	push   DWORD PTR [esi]
c001dbcf:	e8 7c f3 ff ff       	call   c001cf50 <Vm::fpu64ToInternal(unsigned long long)>
c001dbd4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dbdb:	89 c6                	mov    esi,eax
c001dbdd:	89 d7                	mov    edi,edx
c001dbdf:	e8 d8 f5 ff ff       	call   c001d1bc <Vm::fpuGetReg(int)>
c001dbe4:	57                   	push   edi
c001dbe5:	56                   	push   esi
c001dbe6:	52                   	push   edx
c001dbe7:	50                   	push   eax
c001dbe8:	e8 f2 f4 ff ff       	call   c001d0df <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001dbed:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001dbf1:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001dbf4:	83 c4 20             	add    esp,0x20
c001dbf7:	e9 74 f7 ff ff       	jmp    c001d370 <Vm::x87Handler(regs*)+0x77>
c001dbfc:	80 fa 04             	cmp    dl,0x4
c001dbff:	75 2a                	jne    c001dc2b <Vm::x87Handler(regs*)+0x932>
c001dc01:	51                   	push   ecx
c001dc02:	51                   	push   ecx
c001dc03:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001dc06:	ff 36                	push   DWORD PTR [esi]
c001dc08:	e8 43 f3 ff ff       	call   c001cf50 <Vm::fpu64ToInternal(unsigned long long)>
c001dc0d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dc14:	89 c6                	mov    esi,eax
c001dc16:	89 d7                	mov    edi,edx
c001dc18:	e8 9f f5 ff ff       	call   c001d1bc <Vm::fpuGetReg(int)>
c001dc1d:	57                   	push   edi
c001dc1e:	56                   	push   esi
c001dc1f:	52                   	push   edx
c001dc20:	50                   	push   eax
c001dc21:	e8 36 f5 ff ff       	call   c001d15c <Vm::fpuSub(unsigned long long, unsigned long long)>
c001dc26:	e9 e2 00 00 00       	jmp    c001dd0d <Vm::x87Handler(regs*)+0xa14>
c001dc2b:	80 fa 05             	cmp    dl,0x5
c001dc2e:	75 28                	jne    c001dc58 <Vm::x87Handler(regs*)+0x95f>
c001dc30:	83 ec 0c             	sub    esp,0xc
c001dc33:	6a 00                	push   0x0
c001dc35:	e8 82 f5 ff ff       	call   c001d1bc <Vm::fpuGetReg(int)>
c001dc3a:	89 c7                	mov    edi,eax
c001dc3c:	89 d5                	mov    ebp,edx
c001dc3e:	58                   	pop    eax
c001dc3f:	5a                   	pop    edx
c001dc40:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001dc43:	ff 36                	push   DWORD PTR [esi]
c001dc45:	e8 06 f3 ff ff       	call   c001cf50 <Vm::fpu64ToInternal(unsigned long long)>
c001dc4a:	83 c4 10             	add    esp,0x10
c001dc4d:	55                   	push   ebp
c001dc4e:	57                   	push   edi
c001dc4f:	52                   	push   edx
c001dc50:	50                   	push   eax
c001dc51:	e8 06 f5 ff ff       	call   c001d15c <Vm::fpuSub(unsigned long long, unsigned long long)>
c001dc56:	eb 60                	jmp    c001dcb8 <Vm::x87Handler(regs*)+0x9bf>
c001dc58:	80 fa 06             	cmp    dl,0x6
c001dc5b:	75 2a                	jne    c001dc87 <Vm::x87Handler(regs*)+0x98e>
c001dc5d:	51                   	push   ecx
c001dc5e:	51                   	push   ecx
c001dc5f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001dc62:	ff 36                	push   DWORD PTR [esi]
c001dc64:	e8 e7 f2 ff ff       	call   c001cf50 <Vm::fpu64ToInternal(unsigned long long)>
c001dc69:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dc70:	89 c6                	mov    esi,eax
c001dc72:	89 d7                	mov    edi,edx
c001dc74:	e8 43 f5 ff ff       	call   c001d1bc <Vm::fpuGetReg(int)>
c001dc79:	57                   	push   edi
c001dc7a:	56                   	push   esi
c001dc7b:	52                   	push   edx
c001dc7c:	50                   	push   eax
c001dc7d:	e8 08 f5 ff ff       	call   c001d18a <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001dc82:	e9 86 00 00 00       	jmp    c001dd0d <Vm::x87Handler(regs*)+0xa14>
c001dc87:	31 c0                	xor    eax,eax
c001dc89:	80 fa 07             	cmp    dl,0x7
c001dc8c:	0f 85 c8 00 00 00    	jne    c001dd5a <Vm::x87Handler(regs*)+0xa61>
c001dc92:	83 ec 0c             	sub    esp,0xc
c001dc95:	6a 00                	push   0x0
c001dc97:	e8 20 f5 ff ff       	call   c001d1bc <Vm::fpuGetReg(int)>
c001dc9c:	89 c7                	mov    edi,eax
c001dc9e:	89 d5                	mov    ebp,edx
c001dca0:	58                   	pop    eax
c001dca1:	5a                   	pop    edx
c001dca2:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001dca5:	ff 36                	push   DWORD PTR [esi]
c001dca7:	e8 a4 f2 ff ff       	call   c001cf50 <Vm::fpu64ToInternal(unsigned long long)>
c001dcac:	83 c4 10             	add    esp,0x10
c001dcaf:	55                   	push   ebp
c001dcb0:	57                   	push   edi
c001dcb1:	52                   	push   edx
c001dcb2:	50                   	push   eax
c001dcb3:	e8 d2 f4 ff ff       	call   c001d18a <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001dcb8:	83 c4 0c             	add    esp,0xc
c001dcbb:	eb 53                	jmp    c001dd10 <Vm::x87Handler(regs*)+0xa17>
c001dcbd:	31 c0                	xor    eax,eax
c001dcbf:	80 fa 02             	cmp    dl,0x2
c001dcc2:	0f 85 92 00 00 00    	jne    c001dd5a <Vm::x87Handler(regs*)+0xa61>
c001dcc8:	83 ec 0c             	sub    esp,0xc
c001dccb:	6a 00                	push   0x0
c001dccd:	e8 ea f4 ff ff       	call   c001d1bc <Vm::fpuGetReg(int)>
c001dcd2:	59                   	pop    ecx
c001dcd3:	5f                   	pop    edi
c001dcd4:	52                   	push   edx
c001dcd5:	50                   	push   eax
c001dcd6:	e8 27 f2 ff ff       	call   c001cf02 <Vm::fpuInternalTo64(unsigned long long)>
c001dcdb:	eb 70                	jmp    c001dd4d <Vm::x87Handler(regs*)+0xa54>
c001dcdd:	31 c0                	xor    eax,eax
c001dcdf:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001dce4:	75 74                	jne    c001dd5a <Vm::x87Handler(regs*)+0xa61>
c001dce6:	50                   	push   eax
c001dce7:	50                   	push   eax
c001dce8:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001dceb:	31 d2                	xor    edx,edx
c001dced:	52                   	push   edx
c001dcee:	50                   	push   eax
c001dcef:	e8 f6 f2 ff ff       	call   c001cfea <Vm::fpuLongToFloat(long long)>
c001dcf4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dcfb:	89 c6                	mov    esi,eax
c001dcfd:	89 d7                	mov    edi,edx
c001dcff:	e8 b8 f4 ff ff       	call   c001d1bc <Vm::fpuGetReg(int)>
c001dd04:	57                   	push   edi
c001dd05:	56                   	push   esi
c001dd06:	52                   	push   edx
c001dd07:	50                   	push   eax
c001dd08:	e8 5e f4 ff ff       	call   c001d16b <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001dd0d:	83 c4 1c             	add    esp,0x1c
c001dd10:	52                   	push   edx
c001dd11:	50                   	push   eax
c001dd12:	6a 00                	push   0x0
c001dd14:	e8 e6 f4 ff ff       	call   c001d1ff <Vm::fpuSetReg(int, unsigned long long)>
c001dd19:	e9 f2 f7 ff ff       	jmp    c001d510 <Vm::x87Handler(regs*)+0x217>
c001dd1e:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001dd22:	80 fa 05             	cmp    dl,0x5
c001dd25:	75 11                	jne    c001dd38 <Vm::x87Handler(regs*)+0xa3f>
c001dd27:	55                   	push   ebp
c001dd28:	55                   	push   ebp
c001dd29:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001dd2c:	ff 36                	push   DWORD PTR [esi]
c001dd2e:	e8 81 f2 ff ff       	call   c001cfb4 <Vm::fpuULongToFloat(unsigned long long)>
c001dd33:	e9 cf f7 ff ff       	jmp    c001d507 <Vm::x87Handler(regs*)+0x20e>
c001dd38:	31 c0                	xor    eax,eax
c001dd3a:	80 fa 07             	cmp    dl,0x7
c001dd3d:	75 1b                	jne    c001dd5a <Vm::x87Handler(regs*)+0xa61>
c001dd3f:	e8 63 f5 ff ff       	call   c001d2a7 <Vm::fpuPop()>
c001dd44:	51                   	push   ecx
c001dd45:	51                   	push   ecx
c001dd46:	52                   	push   edx
c001dd47:	50                   	push   eax
c001dd48:	e8 0c f2 ff ff       	call   c001cf59 <Vm::fpuFloatToLong(unsigned long long)>
c001dd4d:	83 c4 10             	add    esp,0x10
c001dd50:	89 06                	mov    DWORD PTR [esi],eax
c001dd52:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001dd55:	e9 f8 f7 ff ff       	jmp    c001d552 <Vm::x87Handler(regs*)+0x259>
c001dd5a:	83 c4 1c             	add    esp,0x1c
c001dd5d:	5b                   	pop    ebx
c001dd5e:	5e                   	pop    esi
c001dd5f:	5f                   	pop    edi
c001dd60:	5d                   	pop    ebp
c001dd61:	c3                   	ret    

c001dd62 <__static_initialization_and_destruction_0(int, int)>:
c001dd62:	83 ec 0c             	sub    esp,0xc
c001dd65:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001dd6a:	75 1a                	jne    c001dd86 <__static_initialization_and_destruction_0(int, int)+0x24>
c001dd6c:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001dd74:	75 10                	jne    c001dd86 <__static_initialization_and_destruction_0(int, int)+0x24>
c001dd76:	83 ec 0c             	sub    esp,0xc
c001dd79:	68 60 bb 02 c0       	push   0xc002bb60
c001dd7e:	e8 f7 7b 00 00       	call   c002597a <Vm::_FPUState::_FPUState()>
c001dd83:	83 c4 10             	add    esp,0x10
c001dd86:	90                   	nop
c001dd87:	83 c4 0c             	add    esp,0xc
c001dd8a:	c3                   	ret    

c001dd8b <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001dd8b:	83 ec 0c             	sub    esp,0xc
c001dd8e:	83 ec 08             	sub    esp,0x8
c001dd91:	68 ff ff 00 00       	push   0xffff
c001dd96:	6a 01                	push   0x1
c001dd98:	e8 c5 ff ff ff       	call   c001dd62 <__static_initialization_and_destruction_0(int, int)>
c001dd9d:	83 c4 10             	add    esp,0x10
c001dda0:	83 c4 0c             	add    esp,0xc
c001dda3:	c3                   	ret    

c001dda4 <FAT::getName()>:
c001dda4:	b8 b0 8c 02 c0       	mov    eax,0xc0028cb0
c001dda9:	c3                   	ret    

c001ddaa <FAT::tell(void*, unsigned long long*)>:
c001ddaa:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001ddaf:	75 06                	jne    c001ddb7 <FAT::tell(void*, unsigned long long*)+0xd>
c001ddb1:	b8 04 00 00 00       	mov    eax,0x4
c001ddb6:	c3                   	ret    
c001ddb7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ddbc:	75 06                	jne    c001ddc4 <FAT::tell(void*, unsigned long long*)+0x1a>
c001ddbe:	b8 04 00 00 00       	mov    eax,0x4
c001ddc3:	c3                   	ret    
c001ddc4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ddc8:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001ddcb:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001ddce:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ddd2:	89 01                	mov    DWORD PTR [ecx],eax
c001ddd4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001ddd7:	b8 00 00 00 00       	mov    eax,0x0
c001dddc:	c3                   	ret    
c001dddd:	90                   	nop

c001ddde <FAT::stat(void*, unsigned long long*)>:
c001ddde:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001dde3:	75 06                	jne    c001ddeb <FAT::stat(void*, unsigned long long*)+0xd>
c001dde5:	b8 04 00 00 00       	mov    eax,0x4
c001ddea:	c3                   	ret    
c001ddeb:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ddf0:	75 06                	jne    c001ddf8 <FAT::stat(void*, unsigned long long*)+0x1a>
c001ddf2:	b8 04 00 00 00       	mov    eax,0x4
c001ddf7:	c3                   	ret    
c001ddf8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ddfc:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001ddff:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001de02:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001de06:	89 01                	mov    DWORD PTR [ecx],eax
c001de08:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001de0b:	b8 00 00 00 00       	mov    eax,0x0
c001de10:	c3                   	ret    
c001de11:	90                   	nop

c001de12 <FAT::~FAT()>:
c001de12:	83 ec 0c             	sub    esp,0xc
c001de15:	ba 34 8d 02 c0       	mov    edx,0xc0028d34
c001de1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de1e:	89 10                	mov    DWORD PTR [eax],edx
c001de20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de24:	83 ec 0c             	sub    esp,0xc
c001de27:	50                   	push   eax
c001de28:	e8 2b 47 ff ff       	call   c0012558 <Filesystem::~Filesystem()>
c001de2d:	83 c4 10             	add    esp,0x10
c001de30:	90                   	nop
c001de31:	83 c4 0c             	add    esp,0xc
c001de34:	c3                   	ret    
c001de35:	90                   	nop

c001de36 <FAT::~FAT()>:
c001de36:	83 ec 0c             	sub    esp,0xc
c001de39:	83 ec 0c             	sub    esp,0xc
c001de3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001de40:	e8 cd ff ff ff       	call   c001de12 <FAT::~FAT()>
c001de45:	83 c4 10             	add    esp,0x10
c001de48:	83 ec 08             	sub    esp,0x8
c001de4b:	6a 08                	push   0x8
c001de4d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001de51:	e8 f9 42 ff ff       	call   c001214f <operator delete(void*, unsigned long)>
c001de56:	83 c4 10             	add    esp,0x10
c001de59:	83 c4 0c             	add    esp,0xc
c001de5c:	c3                   	ret    
c001de5d:	90                   	nop

c001de5e <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001de5e:	83 ec 1c             	sub    esp,0x1c
c001de61:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001de68:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001de6d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001de71:	8b 04 85 e0 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4420]
c001de78:	83 f8 ff             	cmp    eax,0xffffffff
c001de7b:	75 34                	jne    c001deb1 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001de7d:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001de81:	88 c2                	mov    dl,al
c001de83:	a1 c0 bb 02 c0       	mov    eax,ds:0xc002bbc0
c001de88:	01 d0                	add    eax,edx
c001de8a:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001de8e:	8b 15 c0 bb 02 c0    	mov    edx,DWORD PTR ds:0xc002bbc0
c001de94:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001de98:	89 14 85 e0 bb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4420],edx
c001de9f:	a1 c0 bb 02 c0       	mov    eax,ds:0xc002bbc0
c001dea4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001dea8:	89 14 85 60 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd43a0],edx
c001deaf:	eb 17                	jmp    c001dec8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001deb1:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001deb5:	88 c2                	mov    dl,al
c001deb7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001debb:	8b 04 85 e0 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4420]
c001dec2:	01 d0                	add    eax,edx
c001dec4:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001dec8:	83 ec 04             	sub    esp,0x4
c001decb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001decf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ded3:	8d 44 24 15          	lea    eax,[esp+0x15]
c001ded7:	50                   	push   eax
c001ded8:	e8 fd 8b fe ff       	call   c0006ada <f_getlabel>
c001dedd:	83 c4 10             	add    esp,0x10
c001dee0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dee4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001dee9:	75 07                	jne    c001def2 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001deeb:	b8 00 00 00 00       	mov    eax,0x0
c001def0:	eb 05                	jmp    c001def7 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001def2:	b8 01 00 00 00       	mov    eax,0x1
c001def7:	83 c4 1c             	add    esp,0x1c
c001defa:	c3                   	ret    
c001defb:	90                   	nop

c001defc <FAT::setlabel(LogicalDisk*, int, char*)>:
c001defc:	57                   	push   edi
c001defd:	83 ec 58             	sub    esp,0x58
c001df00:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001df08:	8d 54 24 10          	lea    edx,[esp+0x10]
c001df0c:	b9 0f 00 00 00       	mov    ecx,0xf
c001df11:	b8 00 00 00 00       	mov    eax,0x0
c001df16:	fc                   	cld    
c001df17:	89 d7                	mov    edi,edx
c001df19:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001df1b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001df1f:	8b 04 85 e0 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4420]
c001df26:	83 f8 ff             	cmp    eax,0xffffffff
c001df29:	75 34                	jne    c001df5f <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001df2b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001df2f:	88 c2                	mov    dl,al
c001df31:	a1 c0 bb 02 c0       	mov    eax,ds:0xc002bbc0
c001df36:	01 d0                	add    eax,edx
c001df38:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001df3c:	8b 15 c0 bb 02 c0    	mov    edx,DWORD PTR ds:0xc002bbc0
c001df42:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001df46:	89 14 85 e0 bb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4420],edx
c001df4d:	a1 c0 bb 02 c0       	mov    eax,ds:0xc002bbc0
c001df52:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001df56:	89 14 85 60 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd43a0],edx
c001df5d:	eb 17                	jmp    c001df76 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001df5f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001df63:	88 c2                	mov    dl,al
c001df65:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001df69:	8b 04 85 e0 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4420]
c001df70:	01 d0                	add    eax,edx
c001df72:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001df76:	83 ec 08             	sub    esp,0x8
c001df79:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001df7d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001df81:	50                   	push   eax
c001df82:	e8 4c 28 fe ff       	call   c00007d3 <strcat>
c001df87:	83 c4 10             	add    esp,0x10
c001df8a:	83 ec 0c             	sub    esp,0xc
c001df8d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001df91:	50                   	push   eax
c001df92:	e8 31 8d fe ff       	call   c0006cc8 <f_setlabel>
c001df97:	83 c4 10             	add    esp,0x10
c001df9a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001df9e:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001dfa3:	75 07                	jne    c001dfac <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001dfa5:	b8 00 00 00 00       	mov    eax,0x0
c001dfaa:	eb 05                	jmp    c001dfb1 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c001dfac:	b8 01 00 00 00       	mov    eax,0x1
c001dfb1:	83 c4 58             	add    esp,0x58
c001dfb4:	5f                   	pop    edi
c001dfb5:	c3                   	ret    

c001dfb6 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001dfb6:	83 ec 2c             	sub    esp,0x2c
c001dfb9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001dfc1:	83 ec 08             	sub    esp,0x8
c001dfc4:	68 d4 8c 02 c0       	push   0xc0028cd4
c001dfc9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001dfcd:	e8 9b 27 fe ff       	call   c000076d <strcmp>
c001dfd2:	83 c4 10             	add    esp,0x10
c001dfd5:	85 c0                	test   eax,eax
c001dfd7:	0f 94 c0             	sete   al
c001dfda:	84 c0                	test   al,al
c001dfdc:	74 0d                	je     c001dfeb <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c001dfde:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001dfe6:	e9 a6 00 00 00       	jmp    c001e091 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001dfeb:	83 ec 08             	sub    esp,0x8
c001dfee:	68 c6 8c 02 c0       	push   0xc0028cc6
c001dff3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001dff7:	e8 71 27 fe ff       	call   c000076d <strcmp>
c001dffc:	83 c4 10             	add    esp,0x10
c001dfff:	85 c0                	test   eax,eax
c001e001:	0f 94 c0             	sete   al
c001e004:	84 c0                	test   al,al
c001e006:	74 0a                	je     c001e012 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001e008:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001e010:	eb 7f                	jmp    c001e091 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001e012:	83 ec 08             	sub    esp,0x8
c001e015:	68 cc 8c 02 c0       	push   0xc0028ccc
c001e01a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e01e:	e8 4a 27 fe ff       	call   c000076d <strcmp>
c001e023:	83 c4 10             	add    esp,0x10
c001e026:	85 c0                	test   eax,eax
c001e028:	0f 94 c0             	sete   al
c001e02b:	84 c0                	test   al,al
c001e02d:	74 0a                	je     c001e039 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c001e02f:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001e037:	eb 58                	jmp    c001e091 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001e039:	83 ec 08             	sub    esp,0x8
c001e03c:	68 ec 5f 02 c0       	push   0xc0025fec
c001e041:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e045:	e8 23 27 fe ff       	call   c000076d <strcmp>
c001e04a:	83 c4 10             	add    esp,0x10
c001e04d:	85 c0                	test   eax,eax
c001e04f:	0f 94 c0             	sete   al
c001e052:	84 c0                	test   al,al
c001e054:	74 0a                	je     c001e060 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c001e056:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001e05e:	eb 31                	jmp    c001e091 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001e060:	83 ec 08             	sub    esp,0x8
c001e063:	68 d2 8c 02 c0       	push   0xc0028cd2
c001e068:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e06c:	e8 fc 26 fe ff       	call   c000076d <strcmp>
c001e071:	83 c4 10             	add    esp,0x10
c001e074:	85 c0                	test   eax,eax
c001e076:	0f 94 c0             	sete   al
c001e079:	84 c0                	test   al,al
c001e07b:	74 0a                	je     c001e087 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c001e07d:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001e085:	eb 0a                	jmp    c001e091 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001e087:	b8 08 00 00 00       	mov    eax,0x8
c001e08c:	e9 04 01 00 00       	jmp    c001e195 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001e091:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001e098:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001e09d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e0a1:	8b 04 85 e0 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4420]
c001e0a8:	83 f8 ff             	cmp    eax,0xffffffff
c001e0ab:	75 34                	jne    c001e0e1 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c001e0ad:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001e0b1:	88 c2                	mov    dl,al
c001e0b3:	a1 c0 bb 02 c0       	mov    eax,ds:0xc002bbc0
c001e0b8:	01 d0                	add    eax,edx
c001e0ba:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001e0be:	8b 15 c0 bb 02 c0    	mov    edx,DWORD PTR ds:0xc002bbc0
c001e0c4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e0c8:	89 14 85 e0 bb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4420],edx
c001e0cf:	a1 c0 bb 02 c0       	mov    eax,ds:0xc002bbc0
c001e0d4:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001e0d8:	89 14 85 60 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd43a0],edx
c001e0df:	eb 17                	jmp    c001e0f8 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c001e0e1:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001e0e5:	88 c2                	mov    dl,al
c001e0e7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e0eb:	8b 04 85 e0 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4420]
c001e0f2:	01 d0                	add    eax,edx
c001e0f4:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001e0f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e0fc:	88 04 24             	mov    BYTE PTR [esp],al
c001e0ff:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001e103:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e107:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001e10f:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001e114:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001e11c:	83 ec 0c             	sub    esp,0xc
c001e11f:	68 00 20 00 00       	push   0x2000
c001e124:	e8 fd 0f ff ff       	call   c000f126 <malloc>
c001e129:	83 c4 10             	add    esp,0x10
c001e12c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e130:	68 00 20 00 00       	push   0x2000
c001e135:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e139:	8d 44 24 08          	lea    eax,[esp+0x8]
c001e13d:	50                   	push   eax
c001e13e:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001e142:	50                   	push   eax
c001e143:	e8 cb 8f fe ff       	call   c0007113 <f_mkfs>
c001e148:	83 c4 10             	add    esp,0x10
c001e14b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e14f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e154:	75 07                	jne    c001e15d <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c001e156:	b8 00 00 00 00       	mov    eax,0x0
c001e15b:	eb 38                	jmp    c001e195 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001e15d:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001e162:	75 17                	jne    c001e17b <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c001e164:	83 ec 0c             	sub    esp,0xc
c001e167:	68 04 8d 02 c0       	push   0xc0028d04
c001e16c:	e8 be 40 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c001e171:	83 c4 10             	add    esp,0x10
c001e174:	b8 09 00 00 00       	mov    eax,0x9
c001e179:	eb 1a                	jmp    c001e195 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001e17b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e17f:	83 ec 08             	sub    esp,0x8
c001e182:	50                   	push   eax
c001e183:	68 d8 8c 02 c0       	push   0xc0028cd8
c001e188:	e8 a2 40 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c001e18d:	83 c4 10             	add    esp,0x10
c001e190:	b8 01 00 00 00       	mov    eax,0x1
c001e195:	83 c4 2c             	add    esp,0x2c
c001e198:	c3                   	ret    
c001e199:	90                   	nop

c001e19a <FAT::tryMount(LogicalDisk*, int)>:
c001e19a:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001e1a0:	a1 c0 bb 02 c0       	mov    eax,ds:0xc002bbc0
c001e1a5:	83 f8 14             	cmp    eax,0x14
c001e1a8:	75 17                	jne    c001e1c1 <FAT::tryMount(LogicalDisk*, int)+0x27>
c001e1aa:	83 ec 0c             	sub    esp,0xc
c001e1ad:	68 ea 8c 02 c0       	push   0xc0028cea
c001e1b2:	e8 f0 a8 ff ff       	call   c0018aa7 <Krnl::panic(char const*)>
c001e1b7:	83 c4 10             	add    esp,0x10
c001e1ba:	b0 00                	mov    al,0x0
c001e1bc:	e9 d7 01 00 00       	jmp    c001e398 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001e1c1:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001e1c8:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001e1ce:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e1d4:	3d 00 02 00 00       	cmp    eax,0x200
c001e1d9:	74 07                	je     c001e1e2 <FAT::tryMount(LogicalDisk*, int)+0x48>
c001e1db:	b0 00                	mov    al,0x0
c001e1dd:	e9 b6 01 00 00       	jmp    c001e398 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001e1e2:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001e1ea:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001e1f1:	8b 04 85 e0 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4420]
c001e1f8:	83 f8 ff             	cmp    eax,0xffffffff
c001e1fb:	74 07                	je     c001e204 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c001e1fd:	b0 01                	mov    al,0x1
c001e1ff:	e9 94 01 00 00       	jmp    c001e398 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001e204:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001e20e:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001e216:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001e21d:	88 c2                	mov    dl,al
c001e21f:	a1 c0 bb 02 c0       	mov    eax,ds:0xc002bbc0
c001e224:	01 d0                	add    eax,edx
c001e226:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001e22d:	8b 15 c0 bb 02 c0    	mov    edx,DWORD PTR ds:0xc002bbc0
c001e233:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001e23a:	89 14 85 e0 bb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4420],edx
c001e241:	a1 c0 bb 02 c0       	mov    eax,ds:0xc002bbc0
c001e246:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001e24d:	89 14 85 60 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd43a0],edx
c001e254:	83 ec 0c             	sub    esp,0xc
c001e257:	68 54 02 00 00       	push   0x254
c001e25c:	e8 c5 0e ff ff       	call   c000f126 <malloc>
c001e261:	83 c4 10             	add    esp,0x10
c001e264:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001e26b:	83 ec 04             	sub    esp,0x4
c001e26e:	6a 00                	push   0x0
c001e270:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001e277:	50                   	push   eax
c001e278:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001e27f:	e8 4d 6a fe ff       	call   c0004cd1 <f_mount>
c001e284:	83 c4 10             	add    esp,0x10
c001e287:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001e28e:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001e296:	74 19                	je     c001e2b1 <FAT::tryMount(LogicalDisk*, int)+0x117>
c001e298:	83 ec 0c             	sub    esp,0xc
c001e29b:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001e2a2:	e8 9f 0e ff ff       	call   c000f146 <rfree>
c001e2a7:	83 c4 10             	add    esp,0x10
c001e2aa:	b0 00                	mov    al,0x0
c001e2ac:	e9 e7 00 00 00       	jmp    c001e398 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001e2b1:	83 ec 04             	sub    esp,0x4
c001e2b4:	68 00 01 00 00       	push   0x100
c001e2b9:	6a 00                	push   0x0
c001e2bb:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001e2c2:	50                   	push   eax
c001e2c3:	e8 b5 23 fe ff       	call   c000067d <memset>
c001e2c8:	83 c4 10             	add    esp,0x10
c001e2cb:	83 ec 08             	sub    esp,0x8
c001e2ce:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001e2d5:	50                   	push   eax
c001e2d6:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001e2dd:	50                   	push   eax
c001e2de:	e8 f0 24 fe ff       	call   c00007d3 <strcat>
c001e2e3:	83 c4 10             	add    esp,0x10
c001e2e6:	83 ec 08             	sub    esp,0x8
c001e2e9:	68 f8 8c 02 c0       	push   0xc0028cf8
c001e2ee:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001e2f5:	50                   	push   eax
c001e2f6:	e8 d8 24 fe ff       	call   c00007d3 <strcat>
c001e2fb:	83 c4 10             	add    esp,0x10
c001e2fe:	83 ec 04             	sub    esp,0x4
c001e301:	6a 01                	push   0x1
c001e303:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001e30a:	50                   	push   eax
c001e30b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001e30f:	50                   	push   eax
c001e310:	e8 1e 6a fe ff       	call   c0004d33 <f_open>
c001e315:	83 c4 10             	add    esp,0x10
c001e318:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001e31f:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001e326:	85 c0                	test   eax,eax
c001e328:	74 0a                	je     c001e334 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c001e32a:	78 2d                	js     c001e359 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001e32c:	83 e8 04             	sub    eax,0x4
c001e32f:	83 f8 01             	cmp    eax,0x1
c001e332:	77 25                	ja     c001e359 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001e334:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001e33c:	83 ec 0c             	sub    esp,0xc
c001e33f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001e343:	50                   	push   eax
c001e344:	e8 3c 75 fe ff       	call   c0005885 <f_close>
c001e349:	83 c4 10             	add    esp,0x10
c001e34c:	90                   	nop
c001e34d:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001e355:	74 3a                	je     c001e391 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c001e357:	eb 2d                	jmp    c001e386 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c001e359:	83 ec 0c             	sub    esp,0xc
c001e35c:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001e363:	e8 de 0d ff ff       	call   c000f146 <rfree>
c001e368:	83 c4 10             	add    esp,0x10
c001e36b:	83 ec 04             	sub    esp,0x4
c001e36e:	6a 00                	push   0x0
c001e370:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001e377:	50                   	push   eax
c001e378:	6a 00                	push   0x0
c001e37a:	e8 52 69 fe ff       	call   c0004cd1 <f_mount>
c001e37f:	83 c4 10             	add    esp,0x10
c001e382:	b0 00                	mov    al,0x0
c001e384:	eb 12                	jmp    c001e398 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001e386:	a1 c0 bb 02 c0       	mov    eax,ds:0xc002bbc0
c001e38b:	40                   	inc    eax
c001e38c:	a3 c0 bb 02 c0       	mov    ds:0xc002bbc0,eax
c001e391:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001e398:	81 c4 6c 03 00 00    	add    esp,0x36c
c001e39e:	c3                   	ret    
c001e39f:	90                   	nop

c001e3a0 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001e3a0:	81 ec 3c 02 00 00    	sub    esp,0x23c
c001e3a6:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c001e3ae:	74 0a                	je     c001e3ba <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c001e3b0:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c001e3b8:	75 0a                	jne    c001e3c4 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c001e3ba:	b8 04 00 00 00       	mov    eax,0x4
c001e3bf:	e9 db 00 00 00       	jmp    c001e49f <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001e3c4:	83 ec 08             	sub    esp,0x8
c001e3c7:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001e3ce:	50                   	push   eax
c001e3cf:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c001e3d6:	e8 b4 7a fe ff       	call   c0005e8f <f_readdir>
c001e3db:	83 c4 10             	add    esp,0x10
c001e3de:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c001e3e5:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001e3eb:	83 ec 0c             	sub    esp,0xc
c001e3ee:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001e3f5:	83 c0 1a             	add    eax,0x1a
c001e3f8:	50                   	push   eax
c001e3f9:	e8 9c 22 fe ff       	call   c000069a <strlen>
c001e3fe:	83 c4 10             	add    esp,0x10
c001e401:	ba 00 00 00 00       	mov    edx,0x0
c001e406:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e40a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e40e:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c001e415:	0f b6 c0             	movzx  eax,al
c001e418:	83 e0 10             	and    eax,0x10
c001e41b:	74 07                	je     c001e424 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c001e41d:	b8 02 00 00 00       	mov    eax,0x2
c001e422:	eb 05                	jmp    c001e429 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c001e424:	b8 01 00 00 00       	mov    eax,0x1
c001e429:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e42d:	83 ec 08             	sub    esp,0x8
c001e430:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001e437:	83 c0 1a             	add    eax,0x1a
c001e43a:	50                   	push   eax
c001e43b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001e43f:	83 c0 10             	add    eax,0x10
c001e442:	50                   	push   eax
c001e443:	e8 d4 22 fe ff       	call   c000071c <strcpy>
c001e448:	83 c4 10             	add    esp,0x10
c001e44b:	83 ec 04             	sub    esp,0x4
c001e44e:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c001e455:	8d 44 24 08          	lea    eax,[esp+0x8]
c001e459:	50                   	push   eax
c001e45a:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c001e461:	e8 e1 21 fe ff       	call   c0000647 <memcpy>
c001e466:	83 c4 10             	add    esp,0x10
c001e469:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c001e470:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001e476:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c001e47d:	84 c0                	test   al,al
c001e47f:	75 07                	jne    c001e488 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c001e481:	b8 07 00 00 00       	mov    eax,0x7
c001e486:	eb 17                	jmp    c001e49f <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001e488:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c001e48f:	85 c0                	test   eax,eax
c001e491:	75 07                	jne    c001e49a <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c001e493:	b8 00 00 00 00       	mov    eax,0x0
c001e498:	eb 05                	jmp    c001e49f <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001e49a:	b8 01 00 00 00       	mov    eax,0x1
c001e49f:	81 c4 3c 02 00 00    	add    esp,0x23c
c001e4a5:	c3                   	ret    

c001e4a6 <FAT::read(void*, unsigned long, void*, int*)>:
c001e4a6:	83 ec 1c             	sub    esp,0x1c
c001e4a9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001e4ae:	74 07                	je     c001e4b7 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c001e4b0:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001e4b5:	75 07                	jne    c001e4be <FAT::read(void*, unsigned long, void*, int*)+0x18>
c001e4b7:	b8 04 00 00 00       	mov    eax,0x4
c001e4bc:	eb 3d                	jmp    c001e4fb <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001e4be:	8d 44 24 08          	lea    eax,[esp+0x8]
c001e4c2:	50                   	push   eax
c001e4c3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e4c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001e4cb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e4cf:	e8 9b 6c fe ff       	call   c000516f <f_read>
c001e4d4:	83 c4 10             	add    esp,0x10
c001e4d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e4db:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e4df:	89 c2                	mov    edx,eax
c001e4e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e4e5:	89 10                	mov    DWORD PTR [eax],edx
c001e4e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e4eb:	85 c0                	test   eax,eax
c001e4ed:	75 07                	jne    c001e4f6 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c001e4ef:	b8 00 00 00 00       	mov    eax,0x0
c001e4f4:	eb 05                	jmp    c001e4fb <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001e4f6:	b8 01 00 00 00       	mov    eax,0x1
c001e4fb:	83 c4 1c             	add    esp,0x1c
c001e4fe:	c3                   	ret    
c001e4ff:	90                   	nop

c001e500 <FAT::write(void*, unsigned long, void*, int*)>:
c001e500:	83 ec 1c             	sub    esp,0x1c
c001e503:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001e508:	74 07                	je     c001e511 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c001e50a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001e50f:	75 07                	jne    c001e518 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c001e511:	b8 04 00 00 00       	mov    eax,0x4
c001e516:	eb 3d                	jmp    c001e555 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001e518:	8d 44 24 08          	lea    eax,[esp+0x8]
c001e51c:	50                   	push   eax
c001e51d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e521:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001e525:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e529:	e8 c1 6e fe ff       	call   c00053ef <f_write>
c001e52e:	83 c4 10             	add    esp,0x10
c001e531:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e535:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e539:	89 c2                	mov    edx,eax
c001e53b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e53f:	89 10                	mov    DWORD PTR [eax],edx
c001e541:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e545:	85 c0                	test   eax,eax
c001e547:	75 07                	jne    c001e550 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c001e549:	b8 00 00 00 00       	mov    eax,0x0
c001e54e:	eb 05                	jmp    c001e555 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001e550:	b8 01 00 00 00       	mov    eax,0x1
c001e555:	83 c4 1c             	add    esp,0x1c
c001e558:	c3                   	ret    
c001e559:	90                   	nop

c001e55a <FAT::close(void*)>:
c001e55a:	83 ec 1c             	sub    esp,0x1c
c001e55d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001e562:	75 07                	jne    c001e56b <FAT::close(void*)+0x11>
c001e564:	b8 04 00 00 00       	mov    eax,0x4
c001e569:	eb 36                	jmp    c001e5a1 <FAT::close(void*)+0x47>
c001e56b:	83 ec 0c             	sub    esp,0xc
c001e56e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e572:	e8 0e 73 fe ff       	call   c0005885 <f_close>
c001e577:	83 c4 10             	add    esp,0x10
c001e57a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e57e:	83 ec 0c             	sub    esp,0xc
c001e581:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e585:	e8 ac 0b ff ff       	call   c000f136 <free>
c001e58a:	83 c4 10             	add    esp,0x10
c001e58d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e591:	85 c0                	test   eax,eax
c001e593:	75 07                	jne    c001e59c <FAT::close(void*)+0x42>
c001e595:	b8 00 00 00 00       	mov    eax,0x0
c001e59a:	eb 05                	jmp    c001e5a1 <FAT::close(void*)+0x47>
c001e59c:	b8 01 00 00 00       	mov    eax,0x1
c001e5a1:	83 c4 1c             	add    esp,0x1c
c001e5a4:	c3                   	ret    
c001e5a5:	90                   	nop

c001e5a6 <FAT::closeDir(void*)>:
c001e5a6:	83 ec 1c             	sub    esp,0x1c
c001e5a9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001e5ae:	75 07                	jne    c001e5b7 <FAT::closeDir(void*)+0x11>
c001e5b0:	b8 04 00 00 00       	mov    eax,0x4
c001e5b5:	eb 36                	jmp    c001e5ed <FAT::closeDir(void*)+0x47>
c001e5b7:	83 ec 0c             	sub    esp,0xc
c001e5ba:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e5be:	e8 aa 78 fe ff       	call   c0005e6d <f_closedir>
c001e5c3:	83 c4 10             	add    esp,0x10
c001e5c6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e5ca:	83 ec 0c             	sub    esp,0xc
c001e5cd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e5d1:	e8 60 0b ff ff       	call   c000f136 <free>
c001e5d6:	83 c4 10             	add    esp,0x10
c001e5d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e5dd:	85 c0                	test   eax,eax
c001e5df:	75 07                	jne    c001e5e8 <FAT::closeDir(void*)+0x42>
c001e5e1:	b8 00 00 00 00       	mov    eax,0x0
c001e5e6:	eb 05                	jmp    c001e5ed <FAT::closeDir(void*)+0x47>
c001e5e8:	b8 01 00 00 00       	mov    eax,0x1
c001e5ed:	83 c4 1c             	add    esp,0x1c
c001e5f0:	c3                   	ret    
c001e5f1:	90                   	nop

c001e5f2 <FAT::seek(void*, unsigned long long)>:
c001e5f2:	83 ec 2c             	sub    esp,0x2c
c001e5f5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e5f9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e5fd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e601:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e605:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001e60a:	75 07                	jne    c001e613 <FAT::seek(void*, unsigned long long)+0x21>
c001e60c:	b8 04 00 00 00       	mov    eax,0x4
c001e611:	eb 2f                	jmp    c001e642 <FAT::seek(void*, unsigned long long)+0x50>
c001e613:	83 ec 04             	sub    esp,0x4
c001e616:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e61a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e61e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001e622:	e8 8d 72 fe ff       	call   c00058b4 <f_lseek>
c001e627:	83 c4 10             	add    esp,0x10
c001e62a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e62e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e632:	85 c0                	test   eax,eax
c001e634:	75 07                	jne    c001e63d <FAT::seek(void*, unsigned long long)+0x4b>
c001e636:	b8 00 00 00 00       	mov    eax,0x0
c001e63b:	eb 05                	jmp    c001e642 <FAT::seek(void*, unsigned long long)+0x50>
c001e63d:	b8 01 00 00 00       	mov    eax,0x1
c001e642:	83 c4 2c             	add    esp,0x2c
c001e645:	c3                   	ret    

c001e646 <fatWrapperReadDisk>:
c001e646:	83 ec 1c             	sub    esp,0x1c
c001e649:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e64d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e651:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e655:	89 04 24             	mov    DWORD PTR [esp],eax
c001e658:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e65c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e660:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e665:	8b 04 85 20 ac 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd53e0]
c001e66c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e670:	83 ec 0c             	sub    esp,0xc
c001e673:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e677:	52                   	push   edx
c001e678:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e67c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e680:	50                   	push   eax
c001e681:	e8 d4 71 ff ff       	call   c001585a <LogicalDisk::read(unsigned long long, int, void*)>
c001e686:	83 c4 20             	add    esp,0x20
c001e689:	83 c4 1c             	add    esp,0x1c
c001e68c:	c3                   	ret    

c001e68d <fatWrapperWriteDisk>:
c001e68d:	83 ec 1c             	sub    esp,0x1c
c001e690:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e694:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e698:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e69c:	89 04 24             	mov    DWORD PTR [esp],eax
c001e69f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e6a3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e6a7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e6ac:	8b 04 85 20 ac 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd53e0]
c001e6b3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e6b7:	83 ec 0c             	sub    esp,0xc
c001e6ba:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e6be:	52                   	push   edx
c001e6bf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e6c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e6c7:	50                   	push   eax
c001e6c8:	e8 f9 71 ff ff       	call   c00158c6 <LogicalDisk::write(unsigned long long, int, void*)>
c001e6cd:	83 c4 20             	add    esp,0x20
c001e6d0:	83 c4 1c             	add    esp,0x1c
c001e6d3:	c3                   	ret    

c001e6d4 <fatWrapperIoctl>:
c001e6d4:	53                   	push   ebx
c001e6d5:	83 ec 28             	sub    esp,0x28
c001e6d8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e6dc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e6e0:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001e6e4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001e6e8:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001e6ed:	75 31                	jne    c001e720 <fatWrapperIoctl+0x4c>
c001e6ef:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e6f3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e6f7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e6fc:	8b 04 85 20 ac 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd53e0]
c001e703:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001e709:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e70f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e713:	66 89 02             	mov    WORD PTR [edx],ax
c001e716:	b8 00 00 00 00       	mov    eax,0x0
c001e71b:	e9 b2 00 00 00       	jmp    c001e7d2 <fatWrapperIoctl+0xfe>
c001e720:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001e725:	75 6a                	jne    c001e791 <fatWrapperIoctl+0xbd>
c001e727:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e72b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e72f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e734:	8b 04 85 20 ac 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd53e0]
c001e73b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001e741:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001e747:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001e74d:	89 c8                	mov    eax,ecx
c001e74f:	89 da                	mov    edx,ebx
c001e751:	0f a4 c2 0a          	shld   edx,eax,0xa
c001e755:	c1 e0 0a             	shl    eax,0xa
c001e758:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001e75d:	8b 0c 8d 20 ac 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd53e0]
c001e764:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001e76a:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001e770:	89 cb                	mov    ebx,ecx
c001e772:	c1 fb 1f             	sar    ebx,0x1f
c001e775:	53                   	push   ebx
c001e776:	51                   	push   ecx
c001e777:	52                   	push   edx
c001e778:	50                   	push   eax
c001e779:	e8 be 4d 00 00       	call   c002353c <__udivdi3>
c001e77e:	83 c4 10             	add    esp,0x10
c001e781:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001e785:	89 01                	mov    DWORD PTR [ecx],eax
c001e787:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001e78a:	b8 00 00 00 00       	mov    eax,0x0
c001e78f:	eb 41                	jmp    c001e7d2 <fatWrapperIoctl+0xfe>
c001e791:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001e796:	75 07                	jne    c001e79f <fatWrapperIoctl+0xcb>
c001e798:	b8 00 00 00 00       	mov    eax,0x0
c001e79d:	eb 33                	jmp    c001e7d2 <fatWrapperIoctl+0xfe>
c001e79f:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001e7a4:	75 19                	jne    c001e7bf <fatWrapperIoctl+0xeb>
c001e7a6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e7aa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e7ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e7b2:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001e7b8:	b8 00 00 00 00       	mov    eax,0x0
c001e7bd:	eb 13                	jmp    c001e7d2 <fatWrapperIoctl+0xfe>
c001e7bf:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001e7c4:	75 07                	jne    c001e7cd <fatWrapperIoctl+0xf9>
c001e7c6:	b8 00 00 00 00       	mov    eax,0x0
c001e7cb:	eb 05                	jmp    c001e7d2 <fatWrapperIoctl+0xfe>
c001e7cd:	b8 04 00 00 00       	mov    eax,0x4
c001e7d2:	83 c4 28             	add    esp,0x28
c001e7d5:	5b                   	pop    ebx
c001e7d6:	c3                   	ret    
c001e7d7:	90                   	nop

c001e7d8 <FAT::FAT()>:
c001e7d8:	83 ec 1c             	sub    esp,0x1c
c001e7db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e7df:	83 ec 0c             	sub    esp,0xc
c001e7e2:	50                   	push   eax
c001e7e3:	e8 4c 3d ff ff       	call   c0012534 <Filesystem::Filesystem()>
c001e7e8:	83 c4 10             	add    esp,0x10
c001e7eb:	ba 34 8d 02 c0       	mov    edx,0xc0028d34
c001e7f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e7f4:	89 10                	mov    DWORD PTR [eax],edx
c001e7f6:	c7 05 c0 bb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bbc0,0x0
c001e800:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001e808:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001e80d:	7f 15                	jg     c001e824 <FAT::FAT()+0x4c>
c001e80f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e813:	c7 04 85 e0 bb 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd4420],0xffffffff
c001e81e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001e822:	eb e4                	jmp    c001e808 <FAT::FAT()+0x30>
c001e824:	90                   	nop
c001e825:	83 c4 1c             	add    esp,0x1c
c001e828:	c3                   	ret    
c001e829:	90                   	nop

c001e82a <FAT::fixFilepath(char*)>:
c001e82a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e82e:	8a 00                	mov    al,BYTE PTR [eax]
c001e830:	3c 40                	cmp    al,0x40
c001e832:	7e 2c                	jle    c001e860 <FAT::fixFilepath(char*)+0x36>
c001e834:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e838:	8a 00                	mov    al,BYTE PTR [eax]
c001e83a:	83 e8 41             	sub    eax,0x41
c001e83d:	88 c2                	mov    dl,al
c001e83f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e843:	88 10                	mov    BYTE PTR [eax],dl
c001e845:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e849:	8a 00                	mov    al,BYTE PTR [eax]
c001e84b:	0f be c0             	movsx  eax,al
c001e84e:	8b 04 85 e0 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4420]
c001e855:	83 c0 30             	add    eax,0x30
c001e858:	88 c2                	mov    dl,al
c001e85a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e85e:	88 10                	mov    BYTE PTR [eax],dl
c001e860:	90                   	nop
c001e861:	c3                   	ret    

c001e862 <FAT::open(char const*, void**, FileOpenMode)>:
c001e862:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001e868:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001e870:	74 0a                	je     c001e87c <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c001e872:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001e87a:	75 0a                	jne    c001e886 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c001e87c:	b8 04 00 00 00       	mov    eax,0x4
c001e881:	e9 fd 00 00 00       	jmp    c001e983 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001e886:	83 ec 08             	sub    esp,0x8
c001e889:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001e890:	8d 44 24 14          	lea    eax,[esp+0x14]
c001e894:	50                   	push   eax
c001e895:	e8 82 1e fe ff       	call   c000071c <strcpy>
c001e89a:	83 c4 10             	add    esp,0x10
c001e89d:	83 ec 08             	sub    esp,0x8
c001e8a0:	8d 44 24 10          	lea    eax,[esp+0x10]
c001e8a4:	50                   	push   eax
c001e8a5:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001e8ac:	e8 79 ff ff ff       	call   c001e82a <FAT::fixFilepath(char*)>
c001e8b1:	83 c4 10             	add    esp,0x10
c001e8b4:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001e8bc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001e8c3:	83 e0 01             	and    eax,0x1
c001e8c6:	74 08                	je     c001e8d0 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c001e8c8:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001e8d0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001e8d7:	83 e0 04             	and    eax,0x4
c001e8da:	74 10                	je     c001e8ec <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c001e8dc:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001e8e4:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001e8ec:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001e8f3:	83 e0 02             	and    eax,0x2
c001e8f6:	74 08                	je     c001e900 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c001e8f8:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001e900:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001e907:	83 e0 08             	and    eax,0x8
c001e90a:	74 08                	je     c001e914 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c001e90c:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001e914:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001e91b:	83 e0 10             	and    eax,0x10
c001e91e:	74 08                	je     c001e928 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c001e920:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001e928:	83 ec 0c             	sub    esp,0xc
c001e92b:	68 50 02 00 00       	push   0x250
c001e930:	e8 f1 07 ff ff       	call   c000f126 <malloc>
c001e935:	83 c4 10             	add    esp,0x10
c001e938:	89 c2                	mov    edx,eax
c001e93a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001e941:	89 10                	mov    DWORD PTR [eax],edx
c001e943:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001e94b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001e952:	8b 00                	mov    eax,DWORD PTR [eax]
c001e954:	83 ec 04             	sub    esp,0x4
c001e957:	52                   	push   edx
c001e958:	8d 54 24 10          	lea    edx,[esp+0x10]
c001e95c:	52                   	push   edx
c001e95d:	50                   	push   eax
c001e95e:	e8 d0 63 fe ff       	call   c0004d33 <f_open>
c001e963:	83 c4 10             	add    esp,0x10
c001e966:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001e96d:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001e975:	74 07                	je     c001e97e <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c001e977:	b8 01 00 00 00       	mov    eax,0x1
c001e97c:	eb 05                	jmp    c001e983 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001e97e:	b8 00 00 00 00       	mov    eax,0x0
c001e983:	81 c4 1c 01 00 00    	add    esp,0x11c
c001e989:	c3                   	ret    

c001e98a <FAT::openDir(char const*, void**)>:
c001e98a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001e990:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001e998:	74 0a                	je     c001e9a4 <FAT::openDir(char const*, void**)+0x1a>
c001e99a:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001e9a2:	75 07                	jne    c001e9ab <FAT::openDir(char const*, void**)+0x21>
c001e9a4:	b8 04 00 00 00       	mov    eax,0x4
c001e9a9:	eb 7d                	jmp    c001ea28 <FAT::openDir(char const*, void**)+0x9e>
c001e9ab:	83 ec 08             	sub    esp,0x8
c001e9ae:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001e9b5:	8d 44 24 18          	lea    eax,[esp+0x18]
c001e9b9:	50                   	push   eax
c001e9ba:	e8 5d 1d fe ff       	call   c000071c <strcpy>
c001e9bf:	83 c4 10             	add    esp,0x10
c001e9c2:	83 ec 08             	sub    esp,0x8
c001e9c5:	8d 44 24 14          	lea    eax,[esp+0x14]
c001e9c9:	50                   	push   eax
c001e9ca:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001e9d1:	e8 54 fe ff ff       	call   c001e82a <FAT::fixFilepath(char*)>
c001e9d6:	83 c4 10             	add    esp,0x10
c001e9d9:	83 ec 0c             	sub    esp,0xc
c001e9dc:	6a 4c                	push   0x4c
c001e9de:	e8 43 07 ff ff       	call   c000f126 <malloc>
c001e9e3:	83 c4 10             	add    esp,0x10
c001e9e6:	89 c2                	mov    edx,eax
c001e9e8:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001e9ef:	89 10                	mov    DWORD PTR [eax],edx
c001e9f1:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001e9f8:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9fa:	83 ec 08             	sub    esp,0x8
c001e9fd:	8d 54 24 14          	lea    edx,[esp+0x14]
c001ea01:	52                   	push   edx
c001ea02:	50                   	push   eax
c001ea03:	e8 63 73 fe ff       	call   c0005d6b <f_opendir>
c001ea08:	83 c4 10             	add    esp,0x10
c001ea0b:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001ea12:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001ea1a:	74 07                	je     c001ea23 <FAT::openDir(char const*, void**)+0x99>
c001ea1c:	b8 01 00 00 00       	mov    eax,0x1
c001ea21:	eb 05                	jmp    c001ea28 <FAT::openDir(char const*, void**)+0x9e>
c001ea23:	b8 00 00 00 00       	mov    eax,0x0
c001ea28:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ea2e:	c3                   	ret    
c001ea2f:	90                   	nop

c001ea30 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001ea30:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001ea36:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001ea3e:	75 0a                	jne    c001ea4a <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c001ea40:	b8 04 00 00 00       	mov    eax,0x4
c001ea45:	e9 c9 00 00 00       	jmp    c001eb13 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001ea4a:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001ea52:	75 0a                	jne    c001ea5e <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c001ea54:	b8 04 00 00 00       	mov    eax,0x4
c001ea59:	e9 b5 00 00 00       	jmp    c001eb13 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001ea5e:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001ea66:	75 0a                	jne    c001ea72 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c001ea68:	b8 04 00 00 00       	mov    eax,0x4
c001ea6d:	e9 a1 00 00 00       	jmp    c001eb13 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001ea72:	83 ec 08             	sub    esp,0x8
c001ea75:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ea7c:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001ea83:	50                   	push   eax
c001ea84:	e8 93 1c fe ff       	call   c000071c <strcpy>
c001ea89:	83 c4 10             	add    esp,0x10
c001ea8c:	83 ec 08             	sub    esp,0x8
c001ea8f:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001ea96:	50                   	push   eax
c001ea97:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ea9e:	e8 87 fd ff ff       	call   c001e82a <FAT::fixFilepath(char*)>
c001eaa3:	83 c4 10             	add    esp,0x10
c001eaa6:	83 ec 08             	sub    esp,0x8
c001eaa9:	8d 44 24 08          	lea    eax,[esp+0x8]
c001eaad:	50                   	push   eax
c001eaae:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001eab5:	50                   	push   eax
c001eab6:	e8 6f 74 fe ff       	call   c0005f2a <f_stat>
c001eabb:	83 c4 10             	add    esp,0x10
c001eabe:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001eac5:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001eacc:	85 c0                	test   eax,eax
c001eace:	74 07                	je     c001ead7 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c001ead0:	83 f8 04             	cmp    eax,0x4
c001ead3:	74 32                	je     c001eb07 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c001ead5:	eb 37                	jmp    c001eb0e <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c001ead7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001eadb:	0f b6 c0             	movzx  eax,al
c001eade:	83 e0 10             	and    eax,0x10
c001eae1:	0f 95 c2             	setne  dl
c001eae4:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001eaeb:	88 10                	mov    BYTE PTR [eax],dl
c001eaed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001eaf0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001eaf4:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001eafb:	89 01                	mov    DWORD PTR [ecx],eax
c001eafd:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001eb00:	b8 00 00 00 00       	mov    eax,0x0
c001eb05:	eb 0c                	jmp    c001eb13 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001eb07:	b8 02 00 00 00       	mov    eax,0x2
c001eb0c:	eb 05                	jmp    c001eb13 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001eb0e:	b8 01 00 00 00       	mov    eax,0x1
c001eb13:	81 c4 2c 02 00 00    	add    esp,0x22c
c001eb19:	c3                   	ret    

c001eb1a <FAT::unlink(char const*)>:
c001eb1a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001eb20:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001eb28:	75 07                	jne    c001eb31 <FAT::unlink(char const*)+0x17>
c001eb2a:	b8 04 00 00 00       	mov    eax,0x4
c001eb2f:	eb 5c                	jmp    c001eb8d <FAT::unlink(char const*)+0x73>
c001eb31:	83 ec 08             	sub    esp,0x8
c001eb34:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001eb3b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001eb3f:	50                   	push   eax
c001eb40:	e8 d7 1b fe ff       	call   c000071c <strcpy>
c001eb45:	83 c4 10             	add    esp,0x10
c001eb48:	83 ec 08             	sub    esp,0x8
c001eb4b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001eb4f:	50                   	push   eax
c001eb50:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001eb57:	e8 ce fc ff ff       	call   c001e82a <FAT::fixFilepath(char*)>
c001eb5c:	83 c4 10             	add    esp,0x10
c001eb5f:	83 ec 0c             	sub    esp,0xc
c001eb62:	8d 44 24 18          	lea    eax,[esp+0x18]
c001eb66:	50                   	push   eax
c001eb67:	e8 10 77 fe ff       	call   c000627c <f_unlink>
c001eb6c:	83 c4 10             	add    esp,0x10
c001eb6f:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001eb76:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001eb7d:	85 c0                	test   eax,eax
c001eb7f:	75 07                	jne    c001eb88 <FAT::unlink(char const*)+0x6e>
c001eb81:	b8 00 00 00 00       	mov    eax,0x0
c001eb86:	eb 05                	jmp    c001eb8d <FAT::unlink(char const*)+0x73>
c001eb88:	b8 01 00 00 00       	mov    eax,0x1
c001eb8d:	81 c4 1c 01 00 00    	add    esp,0x11c
c001eb93:	c3                   	ret    

c001eb94 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001eb94:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001eb9a:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001eba1:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001eba8:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001ebac:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001ebb0:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001ebb8:	75 0a                	jne    c001ebc4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001ebba:	b8 04 00 00 00       	mov    eax,0x4
c001ebbf:	e9 1c 01 00 00       	jmp    c001ece0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c001ebc4:	83 ec 08             	sub    esp,0x8
c001ebc7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001ebce:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ebd2:	50                   	push   eax
c001ebd3:	e8 44 1b fe ff       	call   c000071c <strcpy>
c001ebd8:	83 c4 10             	add    esp,0x10
c001ebdb:	83 ec 08             	sub    esp,0x8
c001ebde:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ebe2:	50                   	push   eax
c001ebe3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001ebea:	e8 3b fc ff ff       	call   c001e82a <FAT::fixFilepath(char*)>
c001ebef:	83 c4 10             	add    esp,0x10
c001ebf2:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001ebfa:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001ec02:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ec07:	83 e0 01             	and    eax,0x1
c001ec0a:	74 08                	je     c001ec14 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001ec0c:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001ec14:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ec19:	83 e0 02             	and    eax,0x2
c001ec1c:	74 08                	je     c001ec26 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c001ec1e:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001ec26:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ec2b:	83 e0 04             	and    eax,0x4
c001ec2e:	74 08                	je     c001ec38 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c001ec30:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001ec38:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ec3d:	83 e0 08             	and    eax,0x8
c001ec40:	74 08                	je     c001ec4a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c001ec42:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001ec4a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ec4f:	83 e0 01             	and    eax,0x1
c001ec52:	74 08                	je     c001ec5c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001ec54:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001ec5c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ec61:	83 e0 02             	and    eax,0x2
c001ec64:	74 08                	je     c001ec6e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c001ec66:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001ec6e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ec73:	83 e0 04             	and    eax,0x4
c001ec76:	74 08                	je     c001ec80 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c001ec78:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001ec80:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ec85:	83 e0 08             	and    eax,0x8
c001ec88:	74 08                	je     c001ec92 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c001ec8a:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001ec92:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001ec99:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001eca0:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001eca8:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001ecb0:	83 ec 04             	sub    esp,0x4
c001ecb3:	52                   	push   edx
c001ecb4:	50                   	push   eax
c001ecb5:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ecb9:	50                   	push   eax
c001ecba:	e8 5f 7c fe ff       	call   c000691e <f_chmod>
c001ecbf:	83 c4 10             	add    esp,0x10
c001ecc2:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001ecc9:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001ecd0:	85 c0                	test   eax,eax
c001ecd2:	75 07                	jne    c001ecdb <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c001ecd4:	b8 00 00 00 00       	mov    eax,0x0
c001ecd9:	eb 05                	jmp    c001ece0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c001ecdb:	b8 01 00 00 00       	mov    eax,0x1
c001ece0:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ece6:	c3                   	ret    
c001ece7:	90                   	nop

c001ece8 <FAT::rename(char const*, char const*)>:
c001ece8:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001ecee:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001ecf6:	74 0a                	je     c001ed02 <FAT::rename(char const*, char const*)+0x1a>
c001ecf8:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001ed00:	75 0a                	jne    c001ed0c <FAT::rename(char const*, char const*)+0x24>
c001ed02:	b8 04 00 00 00       	mov    eax,0x4
c001ed07:	e9 98 00 00 00       	jmp    c001eda4 <FAT::rename(char const*, char const*)+0xbc>
c001ed0c:	83 ec 08             	sub    esp,0x8
c001ed0f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001ed16:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001ed1d:	50                   	push   eax
c001ed1e:	e8 f9 19 fe ff       	call   c000071c <strcpy>
c001ed23:	83 c4 10             	add    esp,0x10
c001ed26:	83 ec 08             	sub    esp,0x8
c001ed29:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001ed30:	50                   	push   eax
c001ed31:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001ed38:	e8 ed fa ff ff       	call   c001e82a <FAT::fixFilepath(char*)>
c001ed3d:	83 c4 10             	add    esp,0x10
c001ed40:	83 ec 08             	sub    esp,0x8
c001ed43:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001ed4a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ed4e:	50                   	push   eax
c001ed4f:	e8 c8 19 fe ff       	call   c000071c <strcpy>
c001ed54:	83 c4 10             	add    esp,0x10
c001ed57:	83 ec 08             	sub    esp,0x8
c001ed5a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ed5e:	50                   	push   eax
c001ed5f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001ed66:	e8 bf fa ff ff       	call   c001e82a <FAT::fixFilepath(char*)>
c001ed6b:	83 c4 10             	add    esp,0x10
c001ed6e:	83 ec 08             	sub    esp,0x8
c001ed71:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ed75:	50                   	push   eax
c001ed76:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001ed7d:	50                   	push   eax
c001ed7e:	e8 a8 78 fe ff       	call   c000662b <f_rename>
c001ed83:	83 c4 10             	add    esp,0x10
c001ed86:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001ed8d:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001ed94:	85 c0                	test   eax,eax
c001ed96:	75 07                	jne    c001ed9f <FAT::rename(char const*, char const*)+0xb7>
c001ed98:	b8 00 00 00 00       	mov    eax,0x0
c001ed9d:	eb 05                	jmp    c001eda4 <FAT::rename(char const*, char const*)+0xbc>
c001ed9f:	b8 01 00 00 00       	mov    eax,0x1
c001eda4:	81 c4 1c 02 00 00    	add    esp,0x21c
c001edaa:	c3                   	ret    
c001edab:	90                   	nop

c001edac <FAT::mkdir(char const*)>:
c001edac:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001edb2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001edba:	75 07                	jne    c001edc3 <FAT::mkdir(char const*)+0x17>
c001edbc:	b8 04 00 00 00       	mov    eax,0x4
c001edc1:	eb 5c                	jmp    c001ee1f <FAT::mkdir(char const*)+0x73>
c001edc3:	83 ec 08             	sub    esp,0x8
c001edc6:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001edcd:	8d 44 24 18          	lea    eax,[esp+0x18]
c001edd1:	50                   	push   eax
c001edd2:	e8 45 19 fe ff       	call   c000071c <strcpy>
c001edd7:	83 c4 10             	add    esp,0x10
c001edda:	83 ec 08             	sub    esp,0x8
c001eddd:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ede1:	50                   	push   eax
c001ede2:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ede9:	e8 3c fa ff ff       	call   c001e82a <FAT::fixFilepath(char*)>
c001edee:	83 c4 10             	add    esp,0x10
c001edf1:	83 ec 0c             	sub    esp,0xc
c001edf4:	8d 44 24 18          	lea    eax,[esp+0x18]
c001edf8:	50                   	push   eax
c001edf9:	e8 01 76 fe ff       	call   c00063ff <f_mkdir>
c001edfe:	83 c4 10             	add    esp,0x10
c001ee01:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001ee08:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001ee0f:	85 c0                	test   eax,eax
c001ee11:	75 07                	jne    c001ee1a <FAT::mkdir(char const*)+0x6e>
c001ee13:	b8 00 00 00 00       	mov    eax,0x0
c001ee18:	eb 05                	jmp    c001ee1f <FAT::mkdir(char const*)+0x73>
c001ee1a:	b8 01 00 00 00       	mov    eax,0x1
c001ee1f:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ee25:	c3                   	ret    

c001ee26 <FAT::exists(char const*)>:
c001ee26:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001ee2c:	83 ec 08             	sub    esp,0x8
c001ee2f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ee36:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ee3a:	50                   	push   eax
c001ee3b:	e8 dc 18 fe ff       	call   c000071c <strcpy>
c001ee40:	83 c4 10             	add    esp,0x10
c001ee43:	83 ec 08             	sub    esp,0x8
c001ee46:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ee4a:	50                   	push   eax
c001ee4b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ee52:	e8 d3 f9 ff ff       	call   c001e82a <FAT::fixFilepath(char*)>
c001ee57:	83 c4 10             	add    esp,0x10
c001ee5a:	83 ec 08             	sub    esp,0x8
c001ee5d:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001ee64:	50                   	push   eax
c001ee65:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ee69:	50                   	push   eax
c001ee6a:	e8 bb 70 fe ff       	call   c0005f2a <f_stat>
c001ee6f:	83 c4 10             	add    esp,0x10
c001ee72:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001ee79:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001ee80:	85 c0                	test   eax,eax
c001ee82:	75 04                	jne    c001ee88 <FAT::exists(char const*)+0x62>
c001ee84:	b0 01                	mov    al,0x1
c001ee86:	eb 02                	jmp    c001ee8a <FAT::exists(char const*)+0x64>
c001ee88:	b0 00                	mov    al,0x0
c001ee8a:	81 c4 2c 02 00 00    	add    esp,0x22c
c001ee90:	c3                   	ret    
c001ee91:	90                   	nop

c001ee92 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001ee92:	b8 08 00 00 00       	mov    eax,0x8
c001ee97:	c3                   	ret    

c001ee98 <ISO9660::seek(void*, unsigned long long)>:
c001ee98:	53                   	push   ebx
c001ee99:	b8 04 00 00 00       	mov    eax,0x4
c001ee9e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001eea2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001eea6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001eeaa:	85 d2                	test   edx,edx
c001eeac:	74 17                	je     c001eec5 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001eeae:	89 c8                	mov    eax,ecx
c001eeb0:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001eeb3:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001eeb6:	b8 01 00 00 00       	mov    eax,0x1
c001eebb:	73 08                	jae    c001eec5 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001eebd:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001eec0:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001eec3:	31 c0                	xor    eax,eax
c001eec5:	5b                   	pop    ebx
c001eec6:	c3                   	ret    
c001eec7:	90                   	nop

c001eec8 <ISO9660::tell(void*, unsigned long long*)>:
c001eec8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001eecc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eed0:	85 d2                	test   edx,edx
c001eed2:	74 12                	je     c001eee6 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001eed4:	85 c0                	test   eax,eax
c001eed6:	74 0e                	je     c001eee6 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001eed8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001eedb:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001eede:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001eee1:	89 10                	mov    DWORD PTR [eax],edx
c001eee3:	31 c0                	xor    eax,eax
c001eee5:	c3                   	ret    
c001eee6:	b8 04 00 00 00       	mov    eax,0x4
c001eeeb:	c3                   	ret    

c001eeec <ISO9660::getName()>:
c001eeec:	b8 90 8d 02 c0       	mov    eax,0xc0028d90
c001eef1:	c3                   	ret    

c001eef2 <ISO9660::stat(void*, unsigned long long*)>:
c001eef2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001eef6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eefa:	85 d2                	test   edx,edx
c001eefc:	74 12                	je     c001ef10 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001eefe:	85 c0                	test   eax,eax
c001ef00:	74 0e                	je     c001ef10 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001ef02:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001ef05:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001ef08:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001ef0b:	89 10                	mov    DWORD PTR [eax],edx
c001ef0d:	31 c0                	xor    eax,eax
c001ef0f:	c3                   	ret    
c001ef10:	b8 04 00 00 00       	mov    eax,0x4
c001ef15:	c3                   	ret    

c001ef16 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001ef16:	b8 01 00 00 00       	mov    eax,0x1
c001ef1b:	c3                   	ret    

c001ef1c <ISO9660::unlink(char const*)>:
c001ef1c:	b8 01 00 00 00       	mov    eax,0x1
c001ef21:	c3                   	ret    

c001ef22 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001ef22:	b8 01 00 00 00       	mov    eax,0x1
c001ef27:	c3                   	ret    

c001ef28 <ISO9660::rename(char const*, char const*)>:
c001ef28:	b8 01 00 00 00       	mov    eax,0x1
c001ef2d:	c3                   	ret    

c001ef2e <ISO9660::mkdir(char const*)>:
c001ef2e:	b8 01 00 00 00       	mov    eax,0x1
c001ef33:	c3                   	ret    

c001ef34 <ISO9660::close(void*)>:
c001ef34:	83 ec 0c             	sub    esp,0xc
c001ef37:	b8 04 00 00 00       	mov    eax,0x4
c001ef3c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ef40:	85 d2                	test   edx,edx
c001ef42:	74 0e                	je     c001ef52 <ISO9660::close(void*)+0x1e>
c001ef44:	83 ec 0c             	sub    esp,0xc
c001ef47:	52                   	push   edx
c001ef48:	e8 e9 01 ff ff       	call   c000f136 <free>
c001ef4d:	83 c4 10             	add    esp,0x10
c001ef50:	31 c0                	xor    eax,eax
c001ef52:	83 c4 0c             	add    esp,0xc
c001ef55:	c3                   	ret    

c001ef56 <ISO9660::closeDir(void*)>:
c001ef56:	83 ec 0c             	sub    esp,0xc
c001ef59:	b8 04 00 00 00       	mov    eax,0x4
c001ef5e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ef62:	85 d2                	test   edx,edx
c001ef64:	74 0e                	je     c001ef74 <ISO9660::closeDir(void*)+0x1e>
c001ef66:	83 ec 0c             	sub    esp,0xc
c001ef69:	52                   	push   edx
c001ef6a:	e8 c7 01 ff ff       	call   c000f136 <free>
c001ef6f:	83 c4 10             	add    esp,0x10
c001ef72:	31 c0                	xor    eax,eax
c001ef74:	83 c4 0c             	add    esp,0xc
c001ef77:	c3                   	ret    

c001ef78 <ISO9660::~ISO9660()>:
c001ef78:	83 ec 0c             	sub    esp,0xc
c001ef7b:	ba e4 8d 02 c0       	mov    edx,0xc0028de4
c001ef80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef84:	89 10                	mov    DWORD PTR [eax],edx
c001ef86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef8a:	83 ec 0c             	sub    esp,0xc
c001ef8d:	50                   	push   eax
c001ef8e:	e8 c5 35 ff ff       	call   c0012558 <Filesystem::~Filesystem()>
c001ef93:	83 c4 10             	add    esp,0x10
c001ef96:	90                   	nop
c001ef97:	83 c4 0c             	add    esp,0xc
c001ef9a:	c3                   	ret    
c001ef9b:	90                   	nop

c001ef9c <ISO9660::~ISO9660()>:
c001ef9c:	83 ec 0c             	sub    esp,0xc
c001ef9f:	83 ec 0c             	sub    esp,0xc
c001efa2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001efa6:	e8 cd ff ff ff       	call   c001ef78 <ISO9660::~ISO9660()>
c001efab:	83 c4 10             	add    esp,0x10
c001efae:	83 ec 08             	sub    esp,0x8
c001efb1:	6a 08                	push   0x8
c001efb3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001efb7:	e8 93 31 ff ff       	call   c001214f <operator delete(void*, unsigned long)>
c001efbc:	83 c4 10             	add    esp,0x10
c001efbf:	83 c4 0c             	add    esp,0xc
c001efc2:	c3                   	ret    

c001efc3 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001efc3:	55                   	push   ebp
c001efc4:	31 c9                	xor    ecx,ecx
c001efc6:	57                   	push   edi
c001efc7:	56                   	push   esi
c001efc8:	53                   	push   ebx
c001efc9:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001efcd:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001efd1:	89 eb                	mov    ebx,ebp
c001efd3:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001efd7:	39 ce                	cmp    esi,ecx
c001efd9:	7e 17                	jle    c001eff2 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001efdb:	31 d2                	xor    edx,edx
c001efdd:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001efe1:	7d 13                	jge    c001eff6 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001efe3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001efe7:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001efea:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001efed:	75 0d                	jne    c001effc <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001efef:	42                   	inc    edx
c001eff0:	eb eb                	jmp    c001efdd <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001eff2:	31 c0                	xor    eax,eax
c001eff4:	eb 0a                	jmp    c001f000 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001eff6:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001effa:	eb 04                	jmp    c001f000 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001effc:	41                   	inc    ecx
c001effd:	43                   	inc    ebx
c001effe:	eb d7                	jmp    c001efd7 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001f000:	5b                   	pop    ebx
c001f001:	5e                   	pop    esi
c001f002:	5f                   	pop    edi
c001f003:	5d                   	pop    ebp
c001f004:	c3                   	ret    

c001f005 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001f005:	56                   	push   esi
c001f006:	53                   	push   ebx
c001f007:	52                   	push   edx
c001f008:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f00c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f010:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f014:	39 0d c0 bc 02 c0    	cmp    DWORD PTR ds:0xc002bcc0,ecx
c001f01a:	75 08                	jne    c001f024 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001f01c:	38 05 c8 9b 02 c0    	cmp    BYTE PTR ds:0xc0029bc8,al
c001f022:	74 2b                	je     c001f04f <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c001f024:	83 ec 0c             	sub    esp,0xc
c001f027:	a2 c8 9b 02 c0       	mov    ds:0xc0029bc8,al
c001f02c:	68 e0 bc 02 c0       	push   0xc002bce0
c001f031:	0f be c0             	movsx  eax,al
c001f034:	6a 01                	push   0x1
c001f036:	89 0d c0 bc 02 c0    	mov    DWORD PTR ds:0xc002bcc0,ecx
c001f03c:	31 db                	xor    ebx,ebx
c001f03e:	53                   	push   ebx
c001f03f:	51                   	push   ecx
c001f040:	ff 34 85 1c ab 02 c0 	push   DWORD PTR [eax*4-0x3ffd54e4]
c001f047:	e8 0e 68 ff ff       	call   c001585a <LogicalDisk::read(unsigned long long, int, void*)>
c001f04c:	83 c4 20             	add    esp,0x20
c001f04f:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c001f057:	c7 44 24 14 e0 bc 02 c0 	mov    DWORD PTR [esp+0x14],0xc002bce0
c001f05f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001f063:	58                   	pop    eax
c001f064:	5b                   	pop    ebx
c001f065:	5e                   	pop    esi
c001f066:	e9 dc 15 fe ff       	jmp    c0000647 <memcpy>
c001f06b:	90                   	nop

c001f06c <ISO9660::tryMount(LogicalDisk*, int)>:
c001f06c:	81 ec 10 08 00 00    	sub    esp,0x810
c001f072:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001f079:	83 c0 41             	add    eax,0x41
c001f07c:	0f be c0             	movsx  eax,al
c001f07f:	50                   	push   eax
c001f080:	8d 44 24 08          	lea    eax,[esp+0x8]
c001f084:	50                   	push   eax
c001f085:	6a 10                	push   0x10
c001f087:	e8 79 ff ff ff       	call   c001f005 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f08c:	83 c4 10             	add    esp,0x10
c001f08f:	31 c0                	xor    eax,eax
c001f091:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001f096:	75 1d                	jne    c001f0b5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001f098:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001f09d:	75 16                	jne    c001f0b5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001f09f:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001f0a4:	75 0f                	jne    c001f0b5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001f0a6:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001f0ab:	75 08                	jne    c001f0b5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001f0ad:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001f0b2:	0f 94 c0             	sete   al
c001f0b5:	81 c4 0c 08 00 00    	add    esp,0x80c
c001f0bb:	c3                   	ret    

c001f0bc <ISO9660::read(void*, unsigned long, void*, int*)>:
c001f0bc:	55                   	push   ebp
c001f0bd:	57                   	push   edi
c001f0be:	56                   	push   esi
c001f0bf:	53                   	push   ebx
c001f0c0:	81 ec 34 08 00 00    	sub    esp,0x834
c001f0c6:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c001f0cd:	55                   	push   ebp
c001f0ce:	68 ab 8d 02 c0       	push   0xc0028dab
c001f0d3:	e8 57 31 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c001f0d8:	83 c4 10             	add    esp,0x10
c001f0db:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c001f0e3:	0f 84 06 02 00 00    	je     c001f2ef <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001f0e9:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001f0f1:	0f 84 f8 01 00 00    	je     c001f2ef <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001f0f7:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001f0fe:	b8 01 00 00 00       	mov    eax,0x1
c001f103:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c001f107:	0f 85 e7 01 00 00    	jne    c001f2f4 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001f10d:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c001f110:	31 d2                	xor    edx,edx
c001f112:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c001f115:	89 e9                	mov    ecx,ebp
c001f117:	89 d3                	mov    ebx,edx
c001f119:	01 f1                	add    ecx,esi
c001f11b:	11 fb                	adc    ebx,edi
c001f11d:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001f121:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001f125:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c001f12c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001f12f:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c001f132:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f136:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001f13a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f13e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f142:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001f146:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c001f14a:	72 19                	jb     c001f165 <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c001f14c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f150:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f154:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f158:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001f15b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f15f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f163:	eb 13                	jmp    c001f178 <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c001f165:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f169:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f16d:	29 f0                	sub    eax,esi
c001f16f:	19 fa                	sbb    edx,edi
c001f171:	89 04 24             	mov    DWORD PTR [esp],eax
c001f174:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f178:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c001f17f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001f182:	8b 00                	mov    eax,DWORD PTR [eax]
c001f184:	53                   	push   ebx
c001f185:	0f a4 c2 0b          	shld   edx,eax,0xb
c001f189:	c1 e0 0b             	shl    eax,0xb
c001f18c:	01 c6                	add    esi,eax
c001f18e:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001f195:	11 d7                	adc    edi,edx
c001f197:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001f19b:	89 fa                	mov    edx,edi
c001f19d:	50                   	push   eax
c001f19e:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f1a2:	50                   	push   eax
c001f1a3:	89 f0                	mov    eax,esi
c001f1a5:	0f ac d0 0b          	shrd   eax,edx,0xb
c001f1a9:	50                   	push   eax
c001f1aa:	e8 56 fe ff ff       	call   c001f005 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f1af:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001f1b6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f1ba:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001f1bd:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001f1c1:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001f1c7:	83 c4 10             	add    esp,0x10
c001f1ca:	b8 00 08 00 00       	mov    eax,0x800
c001f1cf:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001f1d3:	29 d0                	sub    eax,edx
c001f1d5:	39 c1                	cmp    ecx,eax
c001f1d7:	83 db 00             	sbb    ebx,0x0
c001f1da:	7d 19                	jge    c001f1f5 <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c001f1dc:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001f1e1:	75 16                	jne    c001f1f9 <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c001f1e3:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001f1ea:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f1f0:	e9 f6 00 00 00       	jmp    c001f2eb <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c001f1f5:	89 c5                	mov    ebp,eax
c001f1f7:	eb 03                	jmp    c001f1fc <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c001f1f9:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c001f1fc:	51                   	push   ecx
c001f1fd:	55                   	push   ebp
c001f1fe:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c001f202:	50                   	push   eax
c001f203:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c001f20a:	e8 38 14 fe ff       	call   c0000647 <memcpy>
c001f20f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f213:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f217:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c001f21e:	01 e8                	add    eax,ebp
c001f220:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f224:	89 e8                	mov    eax,ebp
c001f226:	99                   	cdq    
c001f227:	01 ee                	add    esi,ebp
c001f229:	11 d7                	adc    edi,edx
c001f22b:	29 e9                	sub    ecx,ebp
c001f22d:	19 d3                	sbb    ebx,edx
c001f22f:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001f233:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001f237:	83 c4 10             	add    esp,0x10
c001f23a:	b8 ff 07 00 00       	mov    eax,0x7ff
c001f23f:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001f242:	b8 00 00 00 00       	mov    eax,0x0
c001f247:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001f24b:	7d 3f                	jge    c001f28c <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c001f24d:	52                   	push   edx
c001f24e:	89 fa                	mov    edx,edi
c001f250:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001f257:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001f25b:	50                   	push   eax
c001f25c:	89 f0                	mov    eax,esi
c001f25e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001f262:	0f ac d0 0b          	shrd   eax,edx,0xb
c001f266:	50                   	push   eax
c001f267:	e8 99 fd ff ff       	call   c001f005 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f26c:	81 c6 00 08 00 00    	add    esi,0x800
c001f272:	83 d7 00             	adc    edi,0x0
c001f275:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001f27d:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001f285:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001f28a:	eb ab                	jmp    c001f237 <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c001f28c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f290:	0b 04 24             	or     eax,DWORD PTR [esp]
c001f293:	74 34                	je     c001f2c9 <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c001f295:	89 fa                	mov    edx,edi
c001f297:	50                   	push   eax
c001f298:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001f29f:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001f2a3:	50                   	push   eax
c001f2a4:	89 f0                	mov    eax,esi
c001f2a6:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001f2aa:	0f ac d0 0b          	shrd   eax,edx,0xb
c001f2ae:	55                   	push   ebp
c001f2af:	50                   	push   eax
c001f2b0:	e8 50 fd ff ff       	call   c001f005 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f2b5:	83 c4 0c             	add    esp,0xc
c001f2b8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c001f2bc:	55                   	push   ebp
c001f2bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2c1:	e8 81 13 fe ff       	call   c0000647 <memcpy>
c001f2c6:	83 c4 10             	add    esp,0x10
c001f2c9:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001f2d0:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f2d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f2d8:	89 38                	mov    DWORD PTR [eax],edi
c001f2da:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001f2e1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f2e5:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c001f2e8:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f2eb:	31 c0                	xor    eax,eax
c001f2ed:	eb 05                	jmp    c001f2f4 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001f2ef:	b8 04 00 00 00       	mov    eax,0x4
c001f2f4:	81 c4 2c 08 00 00    	add    esp,0x82c
c001f2fa:	5b                   	pop    ebx
c001f2fb:	5e                   	pop    esi
c001f2fc:	5f                   	pop    edi
c001f2fd:	5d                   	pop    ebp
c001f2fe:	c3                   	ret    
c001f2ff:	90                   	nop

c001f300 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001f300:	55                   	push   ebp
c001f301:	57                   	push   edi
c001f302:	56                   	push   esi
c001f303:	53                   	push   ebx
c001f304:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001f30a:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c001f311:	85 f6                	test   esi,esi
c001f313:	0f 84 64 02 00 00    	je     c001f57d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c001f319:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001f321:	0f 84 56 02 00 00    	je     c001f57d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c001f327:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001f32a:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c001f32d:	75 0a                	jne    c001f339 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001f32f:	b8 07 00 00 00       	mov    eax,0x7
c001f334:	e9 49 02 00 00       	jmp    c001f582 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c001f339:	50                   	push   eax
c001f33a:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001f33e:	50                   	push   eax
c001f33f:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001f346:	53                   	push   ebx
c001f347:	8b 06                	mov    eax,DWORD PTR [esi]
c001f349:	c1 e0 0b             	shl    eax,0xb
c001f34c:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c001f34f:	c1 e8 0b             	shr    eax,0xb
c001f352:	50                   	push   eax
c001f353:	e8 ad fc ff ff       	call   c001f005 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f358:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001f35b:	83 c4 10             	add    esp,0x10
c001f35e:	89 c1                	mov    ecx,eax
c001f360:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c001f363:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f369:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001f36c:	84 db                	test   bl,bl
c001f36e:	0f 85 90 00 00 00    	jne    c001f404 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c001f374:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001f37a:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f380:	29 c7                	sub    edi,eax
c001f382:	89 fb                	mov    ebx,edi
c001f384:	c1 fb 1f             	sar    ebx,0x1f
c001f387:	01 f8                	add    eax,edi
c001f389:	11 da                	adc    edx,ebx
c001f38b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f38f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f393:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c001f396:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c001f399:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001f39c:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001f39f:	89 04 24             	mov    DWORD PTR [esp],eax
c001f3a2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f3a6:	89 d8                	mov    eax,ebx
c001f3a8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f3ab:	ba 00 00 00 00       	mov    edx,0x0
c001f3b0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001f3b4:	b8 00 00 00 00       	mov    eax,0x0
c001f3b9:	73 0b                	jae    c001f3c6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001f3bb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f3be:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f3c2:	29 f8                	sub    eax,edi
c001f3c4:	19 da                	sbb    edx,ebx
c001f3c6:	89 d3                	mov    ebx,edx
c001f3c8:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001f3cb:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001f3ce:	09 c3                	or     ebx,eax
c001f3d0:	0f 84 59 ff ff ff    	je     c001f32f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001f3d6:	55                   	push   ebp
c001f3d7:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001f3db:	50                   	push   eax
c001f3dc:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001f3e3:	53                   	push   ebx
c001f3e4:	8b 06                	mov    eax,DWORD PTR [esi]
c001f3e6:	c1 e0 0b             	shl    eax,0xb
c001f3e9:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001f3ed:	c1 e8 0b             	shr    eax,0xb
c001f3f0:	50                   	push   eax
c001f3f1:	e8 0f fc ff ff       	call   c001f005 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f3f6:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001f3f9:	83 c4 10             	add    esp,0x10
c001f3fc:	25 ff 07 00 00       	and    eax,0x7ff
c001f401:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001f404:	57                   	push   edi
c001f405:	6a 28                	push   0x28
c001f407:	6a 00                	push   0x0
c001f409:	8d 44 24 24          	lea    eax,[esp+0x24]
c001f40d:	50                   	push   eax
c001f40e:	e8 6a 12 fe ff       	call   c000067d <memset>
c001f413:	31 d2                	xor    edx,edx
c001f415:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001f418:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f41e:	89 f8                	mov    eax,edi
c001f420:	83 c0 21             	add    eax,0x21
c001f423:	83 d2 00             	adc    edx,0x0
c001f426:	89 c7                	mov    edi,eax
c001f428:	89 d5                	mov    ebp,edx
c001f42a:	83 c4 10             	add    esp,0x10
c001f42d:	31 c9                	xor    ecx,ecx
c001f42f:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c001f436:	83 f9 28             	cmp    ecx,0x28
c001f439:	88 04 24             	mov    BYTE PTR [esp],al
c001f43c:	0f 94 c2             	sete   dl
c001f43f:	88 d0                	mov    al,dl
c001f441:	ba ff 07 00 00       	mov    edx,0x7ff
c001f446:	39 fa                	cmp    edx,edi
c001f448:	ba 00 00 00 00       	mov    edx,0x0
c001f44d:	19 ea                	sbb    edx,ebp
c001f44f:	0f 92 c2             	setb   dl
c001f452:	09 c2                	or     edx,eax
c001f454:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001f458:	0f 94 c0             	sete   al
c001f45b:	08 d0                	or     al,dl
c001f45d:	75 16                	jne    c001f475 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001f45f:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001f463:	74 10                	je     c001f475 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001f465:	8a 04 24             	mov    al,BYTE PTR [esp]
c001f468:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001f46c:	41                   	inc    ecx
c001f46d:	83 c7 01             	add    edi,0x1
c001f470:	83 d5 00             	adc    ebp,0x0
c001f473:	eb ba                	jmp    c001f42f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c001f475:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001f47c:	83 ec 0c             	sub    esp,0xc
c001f47f:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001f483:	57                   	push   edi
c001f484:	e8 11 12 fe ff       	call   c000069a <strlen>
c001f489:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001f491:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001f495:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c001f49c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001f49f:	5a                   	pop    edx
c001f4a0:	25 ff 07 00 00       	and    eax,0x7ff
c001f4a5:	01 c8                	add    eax,ecx
c001f4a7:	59                   	pop    ecx
c001f4a8:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001f4ae:	83 e0 02             	and    eax,0x2
c001f4b1:	3c 01                	cmp    al,0x1
c001f4b3:	19 c0                	sbb    eax,eax
c001f4b5:	83 c0 02             	add    eax,0x2
c001f4b8:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001f4bc:	57                   	push   edi
c001f4bd:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001f4c1:	50                   	push   eax
c001f4c2:	e8 55 12 fe ff       	call   c000071c <strcpy>
c001f4c7:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001f4cb:	83 c4 10             	add    esp,0x10
c001f4ce:	84 c0                	test   al,al
c001f4d0:	75 21                	jne    c001f4f3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c001f4d2:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001f4da:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001f4e2:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001f4ea:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001f4f1:	eb 28                	jmp    c001f51b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c001f4f3:	fe c8                	dec    al
c001f4f5:	75 24                	jne    c001f51b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c001f4f7:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001f4ff:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001f507:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001f50f:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001f516:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001f51b:	0f b6 fb             	movzx  edi,bl
c001f51e:	31 db                	xor    ebx,ebx
c001f520:	50                   	push   eax
c001f521:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c001f528:	8d 44 24 48          	lea    eax,[esp+0x48]
c001f52c:	50                   	push   eax
c001f52d:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c001f534:	e8 0e 11 fe ff       	call   c0000647 <memcpy>
c001f539:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c001f540:	89 f9                	mov    ecx,edi
c001f542:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001f548:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c001f54b:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001f54e:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c001f551:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001f554:	83 c4 10             	add    esp,0x10
c001f557:	39 c7                	cmp    edi,eax
c001f559:	89 df                	mov    edi,ebx
c001f55b:	19 d7                	sbb    edi,edx
c001f55d:	72 10                	jb     c001f56f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001f55f:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001f566:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c001f56d:	eb 0a                	jmp    c001f579 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c001f56f:	29 c8                	sub    eax,ecx
c001f571:	19 da                	sbb    edx,ebx
c001f573:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001f576:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001f579:	31 c0                	xor    eax,eax
c001f57b:	eb 05                	jmp    c001f582 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c001f57d:	b8 04 00 00 00       	mov    eax,0x4
c001f582:	81 c4 5c 09 00 00    	add    esp,0x95c
c001f588:	5b                   	pop    ebx
c001f589:	5e                   	pop    esi
c001f58a:	5f                   	pop    edi
c001f58b:	5d                   	pop    ebp
c001f58c:	c3                   	ret    

c001f58d <readRoot(unsigned int*, unsigned int*, char)>:
c001f58d:	81 ec 40 08 00 00    	sub    esp,0x840
c001f593:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001f59b:	50                   	push   eax
c001f59c:	8d 44 24 38          	lea    eax,[esp+0x38]
c001f5a0:	50                   	push   eax
c001f5a1:	6a 10                	push   0x10
c001f5a3:	e8 5d fa ff ff       	call   c001f005 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f5a8:	83 c4 0c             	add    esp,0xc
c001f5ab:	6a 22                	push   0x22
c001f5ad:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c001f5b4:	50                   	push   eax
c001f5b5:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001f5b9:	50                   	push   eax
c001f5ba:	e8 88 10 fe ff       	call   c0000647 <memcpy>
c001f5bf:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001f5c6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001f5ca:	89 10                	mov    DWORD PTR [eax],edx
c001f5cc:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001f5d3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001f5d7:	89 10                	mov    DWORD PTR [eax],edx
c001f5d9:	b0 01                	mov    al,0x1
c001f5db:	81 c4 4c 08 00 00    	add    esp,0x84c
c001f5e1:	c3                   	ret    

c001f5e2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001f5e2:	55                   	push   ebp
c001f5e3:	57                   	push   edi
c001f5e4:	56                   	push   esi
c001f5e5:	53                   	push   ebx
c001f5e6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001f5ec:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001f5f3:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001f5fa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f5fe:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001f602:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001f606:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001f60a:	75 03                	jne    c001f60f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001f60c:	83 c3 02             	add    ebx,0x2
c001f60f:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001f612:	75 03                	jne    c001f617 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001f614:	43                   	inc    ebx
c001f615:	eb f8                	jmp    c001f60f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001f617:	51                   	push   ecx
c001f618:	68 00 01 00 00       	push   0x100
c001f61d:	6a 00                	push   0x0
c001f61f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f623:	50                   	push   eax
c001f624:	e8 54 10 fe ff       	call   c000067d <memset>
c001f629:	83 c4 10             	add    esp,0x10
c001f62c:	31 d2                	xor    edx,edx
c001f62e:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001f631:	84 c0                	test   al,al
c001f633:	74 21                	je     c001f656 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001f635:	3c 2f                	cmp    al,0x2f
c001f637:	75 0b                	jne    c001f644 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001f639:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001f63d:	bd 01 00 00 00       	mov    ebp,0x1
c001f642:	eb 14                	jmp    c001f658 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001f644:	8d 48 9f             	lea    ecx,[eax-0x61]
c001f647:	80 f9 19             	cmp    cl,0x19
c001f64a:	77 03                	ja     c001f64f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001f64c:	83 e8 20             	sub    eax,0x20
c001f64f:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001f653:	42                   	inc    edx
c001f654:	eb d8                	jmp    c001f62e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001f656:	31 ed                	xor    ebp,ebp
c001f658:	83 ec 0c             	sub    esp,0xc
c001f65b:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001f662:	e8 bf fa fe ff       	call   c000f126 <malloc>
c001f667:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001f66e:	89 c6                	mov    esi,eax
c001f670:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001f676:	c1 ef 0b             	shr    edi,0xb
c001f679:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001f680:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001f684:	83 c4 10             	add    esp,0x10
c001f687:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001f68c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f690:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001f697:	74 28                	je     c001f6c1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001f699:	52                   	push   edx
c001f69a:	57                   	push   edi
c001f69b:	50                   	push   eax
c001f69c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f6a0:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001f6a7:	e8 59 f9 ff ff       	call   c001f005 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f6ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f6b0:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001f6b7:	05 00 08 00 00       	add    eax,0x800
c001f6bc:	83 c4 10             	add    esp,0x10
c001f6bf:	eb cb                	jmp    c001f68c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001f6c1:	83 ec 0c             	sub    esp,0xc
c001f6c4:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001f6c8:	57                   	push   edi
c001f6c9:	e8 cc 0f fe ff       	call   c000069a <strlen>
c001f6ce:	50                   	push   eax
c001f6cf:	57                   	push   edi
c001f6d0:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001f6d7:	56                   	push   esi
c001f6d8:	e8 e6 f8 ff ff       	call   c001efc3 <__memmem(unsigned char*, int, unsigned char*, int)>
c001f6dd:	83 c4 20             	add    esp,0x20
c001f6e0:	85 c0                	test   eax,eax
c001f6e2:	75 13                	jne    c001f6f7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001f6e4:	83 ec 0c             	sub    esp,0xc
c001f6e7:	56                   	push   esi
c001f6e8:	e8 49 fa fe ff       	call   c000f136 <free>
c001f6ed:	83 c4 10             	add    esp,0x10
c001f6f0:	31 c0                	xor    eax,eax
c001f6f2:	e9 b3 00 00 00       	jmp    c001f7aa <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001f6f7:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001f6fb:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001f6ff:	c1 e7 08             	shl    edi,0x8
c001f702:	c1 e2 10             	shl    edx,0x10
c001f705:	09 d7                	or     edi,edx
c001f707:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001f70b:	09 d7                	or     edi,edx
c001f70d:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001f711:	c1 e2 18             	shl    edx,0x18
c001f714:	09 d7                	or     edi,edx
c001f716:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001f71a:	89 d1                	mov    ecx,edx
c001f71c:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001f720:	c1 e1 08             	shl    ecx,0x8
c001f723:	c1 e2 10             	shl    edx,0x10
c001f726:	09 ca                	or     edx,ecx
c001f728:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001f72c:	09 ca                	or     edx,ecx
c001f72e:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001f732:	c1 e1 18             	shl    ecx,0x18
c001f735:	09 ca                	or     edx,ecx
c001f737:	89 e9                	mov    ecx,ebp
c001f739:	84 c9                	test   cl,cl
c001f73b:	74 3c                	je     c001f779 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001f73d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f741:	83 ec 0c             	sub    esp,0xc
c001f744:	56                   	push   esi
c001f745:	e8 ec f9 fe ff       	call   c000f136 <free>
c001f74a:	83 c4 0c             	add    esp,0xc
c001f74d:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001f754:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001f759:	50                   	push   eax
c001f75a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001f761:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001f768:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f76c:	52                   	push   edx
c001f76d:	57                   	push   edi
c001f76e:	53                   	push   ebx
c001f76f:	e8 6e fe ff ff       	call   c001f5e2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001f774:	83 c4 20             	add    esp,0x20
c001f777:	eb 31                	jmp    c001f7aa <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001f779:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001f77c:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001f783:	d0 e8                	shr    al,1
c001f785:	89 3b                	mov    DWORD PTR [ebx],edi
c001f787:	83 e0 01             	and    eax,0x1
c001f78a:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001f791:	83 ec 0c             	sub    esp,0xc
c001f794:	89 13                	mov    DWORD PTR [ebx],edx
c001f796:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001f79d:	89 03                	mov    DWORD PTR [ebx],eax
c001f79f:	56                   	push   esi
c001f7a0:	e8 91 f9 fe ff       	call   c000f136 <free>
c001f7a5:	83 c4 10             	add    esp,0x10
c001f7a8:	b0 01                	mov    al,0x1
c001f7aa:	81 c4 1c 01 00 00    	add    esp,0x11c
c001f7b0:	5b                   	pop    ebx
c001f7b1:	5e                   	pop    esi
c001f7b2:	5f                   	pop    edi
c001f7b3:	5d                   	pop    ebp
c001f7b4:	c3                   	ret    

c001f7b5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001f7b5:	55                   	push   ebp
c001f7b6:	57                   	push   edi
c001f7b7:	56                   	push   esi
c001f7b8:	53                   	push   ebx
c001f7b9:	83 ec 20             	sub    esp,0x20
c001f7bc:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001f7c0:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001f7c4:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001f7c8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001f7d0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f7d8:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001f7dd:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001f7e3:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001f7e9:	57                   	push   edi
c001f7ea:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f7ee:	50                   	push   eax
c001f7ef:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f7f3:	50                   	push   eax
c001f7f4:	e8 94 fd ff ff       	call   c001f58d <readRoot(unsigned int*, unsigned int*, char)>
c001f7f9:	5a                   	pop    edx
c001f7fa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001f7fe:	e8 97 0e fe ff       	call   c000069a <strlen>
c001f803:	83 c4 10             	add    esp,0x10
c001f806:	83 f8 03             	cmp    eax,0x3
c001f809:	77 17                	ja     c001f822 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001f80b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f80f:	89 03                	mov    DWORD PTR [ebx],eax
c001f811:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f815:	89 06                	mov    DWORD PTR [esi],eax
c001f817:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001f81e:	b0 01                	mov    al,0x1
c001f820:	eb 19                	jmp    c001f83b <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001f822:	50                   	push   eax
c001f823:	55                   	push   ebp
c001f824:	57                   	push   edi
c001f825:	56                   	push   esi
c001f826:	53                   	push   ebx
c001f827:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001f82b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001f82f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001f833:	e8 aa fd ff ff       	call   c001f5e2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001f838:	83 c4 20             	add    esp,0x20
c001f83b:	83 c4 1c             	add    esp,0x1c
c001f83e:	5b                   	pop    ebx
c001f83f:	5e                   	pop    esi
c001f840:	5f                   	pop    edi
c001f841:	5d                   	pop    ebp
c001f842:	c3                   	ret    
c001f843:	90                   	nop

c001f844 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001f844:	57                   	push   edi
c001f845:	56                   	push   esi
c001f846:	53                   	push   ebx
c001f847:	83 ec 10             	sub    esp,0x10
c001f84a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001f84e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001f852:	85 ff                	test   edi,edi
c001f854:	74 7b                	je     c001f8d1 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001f856:	85 f6                	test   esi,esi
c001f858:	74 77                	je     c001f8d1 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001f85a:	83 ec 0c             	sub    esp,0xc
c001f85d:	6a 1c                	push   0x1c
c001f85f:	e8 c2 f8 fe ff       	call   c000f126 <malloc>
c001f864:	89 07                	mov    DWORD PTR [edi],eax
c001f866:	89 c3                	mov    ebx,eax
c001f868:	58                   	pop    eax
c001f869:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f86d:	50                   	push   eax
c001f86e:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001f871:	50                   	push   eax
c001f872:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f876:	50                   	push   eax
c001f877:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f87b:	50                   	push   eax
c001f87c:	56                   	push   esi
c001f87d:	e8 33 ff ff ff       	call   c001f7b5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001f882:	83 c4 20             	add    esp,0x20
c001f885:	84 c0                	test   al,al
c001f887:	74 07                	je     c001f890 <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c001f889:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f88e:	74 0b                	je     c001f89b <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001f890:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001f894:	b8 01 00 00 00       	mov    eax,0x1
c001f899:	eb 3b                	jmp    c001f8d6 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001f89b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f89f:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001f8a3:	89 03                	mov    DWORD PTR [ebx],eax
c001f8a5:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001f8ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f8b0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001f8b7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f8be:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001f8c1:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001f8c8:	8a 06                	mov    al,BYTE PTR [esi]
c001f8ca:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001f8cd:	31 c0                	xor    eax,eax
c001f8cf:	eb 05                	jmp    c001f8d6 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001f8d1:	b8 04 00 00 00       	mov    eax,0x4
c001f8d6:	83 c4 10             	add    esp,0x10
c001f8d9:	5b                   	pop    ebx
c001f8da:	5e                   	pop    esi
c001f8db:	5f                   	pop    edi
c001f8dc:	c3                   	ret    
c001f8dd:	90                   	nop

c001f8de <ISO9660::exists(char const*)>:
c001f8de:	83 ec 28             	sub    esp,0x28
c001f8e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001f8e5:	8d 54 24 18          	lea    edx,[esp+0x18]
c001f8e9:	52                   	push   edx
c001f8ea:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001f8ed:	52                   	push   edx
c001f8ee:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001f8f2:	52                   	push   edx
c001f8f3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001f8f7:	52                   	push   edx
c001f8f8:	50                   	push   eax
c001f8f9:	e8 b7 fe ff ff       	call   c001f7b5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001f8fe:	83 c4 3c             	add    esp,0x3c
c001f901:	c3                   	ret    

c001f902 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001f902:	56                   	push   esi
c001f903:	53                   	push   ebx
c001f904:	83 ec 14             	sub    esp,0x14
c001f907:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001f90b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001f90f:	85 db                	test   ebx,ebx
c001f911:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001f915:	0f 94 c2             	sete   dl
c001f918:	85 f6                	test   esi,esi
c001f91a:	0f 94 c0             	sete   al
c001f91d:	08 c2                	or     dl,al
c001f91f:	75 68                	jne    c001f989 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001f921:	85 c9                	test   ecx,ecx
c001f923:	74 64                	je     c001f989 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001f925:	83 ec 0c             	sub    esp,0xc
c001f928:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001f92b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f92f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001f935:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f93c:	50                   	push   eax
c001f93d:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001f940:	50                   	push   eax
c001f941:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f945:	50                   	push   eax
c001f946:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f94a:	50                   	push   eax
c001f94b:	51                   	push   ecx
c001f94c:	e8 64 fe ff ff       	call   c001f7b5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001f951:	83 c4 20             	add    esp,0x20
c001f954:	ba 01 00 00 00       	mov    edx,0x1
c001f959:	84 c0                	test   al,al
c001f95b:	74 31                	je     c001f98e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001f95d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f961:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f968:	89 03                	mov    DWORD PTR [ebx],eax
c001f96a:	ba 00 00 00 00       	mov    edx,0x0
c001f96f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f973:	85 c0                	test   eax,eax
c001f975:	0f 95 06             	setne  BYTE PTR [esi]
c001f978:	74 14                	je     c001f98e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001f97a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001f980:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f987:	eb 05                	jmp    c001f98e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001f989:	ba 04 00 00 00       	mov    edx,0x4
c001f98e:	83 c4 14             	add    esp,0x14
c001f991:	89 d0                	mov    eax,edx
c001f993:	5b                   	pop    ebx
c001f994:	5e                   	pop    esi
c001f995:	c3                   	ret    

c001f996 <ISO9660::openDir(char const*, void**)>:
c001f996:	57                   	push   edi
c001f997:	56                   	push   esi
c001f998:	53                   	push   ebx
c001f999:	83 ec 10             	sub    esp,0x10
c001f99c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001f9a0:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001f9a4:	85 ff                	test   edi,edi
c001f9a6:	0f 84 95 00 00 00    	je     c001fa41 <ISO9660::openDir(char const*, void**)+0xab>
c001f9ac:	85 f6                	test   esi,esi
c001f9ae:	0f 84 8d 00 00 00    	je     c001fa41 <ISO9660::openDir(char const*, void**)+0xab>
c001f9b4:	83 ec 0c             	sub    esp,0xc
c001f9b7:	6a 1c                	push   0x1c
c001f9b9:	e8 68 f7 fe ff       	call   c000f126 <malloc>
c001f9be:	89 07                	mov    DWORD PTR [edi],eax
c001f9c0:	89 c3                	mov    ebx,eax
c001f9c2:	59                   	pop    ecx
c001f9c3:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f9c7:	50                   	push   eax
c001f9c8:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001f9cb:	50                   	push   eax
c001f9cc:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f9d0:	50                   	push   eax
c001f9d1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f9d5:	50                   	push   eax
c001f9d6:	56                   	push   esi
c001f9d7:	e8 d9 fd ff ff       	call   c001f7b5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001f9dc:	83 c4 20             	add    esp,0x20
c001f9df:	84 c0                	test   al,al
c001f9e1:	74 07                	je     c001f9ea <ISO9660::openDir(char const*, void**)+0x54>
c001f9e3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f9e8:	75 21                	jne    c001fa0b <ISO9660::openDir(char const*, void**)+0x75>
c001f9ea:	0f b6 c0             	movzx  eax,al
c001f9ed:	52                   	push   edx
c001f9ee:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001f9f2:	50                   	push   eax
c001f9f3:	68 be 8d 02 c0       	push   0xc0028dbe
c001f9f8:	e8 32 28 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c001f9fd:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001fa01:	83 c4 10             	add    esp,0x10
c001fa04:	b8 01 00 00 00       	mov    eax,0x1
c001fa09:	eb 3b                	jmp    c001fa46 <ISO9660::openDir(char const*, void**)+0xb0>
c001fa0b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa0f:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001fa13:	89 03                	mov    DWORD PTR [ebx],eax
c001fa15:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001fa1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fa20:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001fa27:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001fa2e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001fa31:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001fa38:	8a 06                	mov    al,BYTE PTR [esi]
c001fa3a:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001fa3d:	31 c0                	xor    eax,eax
c001fa3f:	eb 05                	jmp    c001fa46 <ISO9660::openDir(char const*, void**)+0xb0>
c001fa41:	b8 04 00 00 00       	mov    eax,0x4
c001fa46:	83 c4 10             	add    esp,0x10
c001fa49:	5b                   	pop    ebx
c001fa4a:	5e                   	pop    esi
c001fa4b:	5f                   	pop    edi
c001fa4c:	c3                   	ret    
c001fa4d:	90                   	nop

c001fa4e <ISO9660::ISO9660()>:
c001fa4e:	83 ec 0c             	sub    esp,0xc
c001fa51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa55:	83 ec 0c             	sub    esp,0xc
c001fa58:	50                   	push   eax
c001fa59:	e8 d6 2a ff ff       	call   c0012534 <Filesystem::Filesystem()>
c001fa5e:	83 c4 10             	add    esp,0x10
c001fa61:	ba e4 8d 02 c0       	mov    edx,0xc0028de4
c001fa66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa6a:	89 10                	mov    DWORD PTR [eax],edx
c001fa6c:	90                   	nop
c001fa6d:	83 c4 0c             	add    esp,0xc
c001fa70:	c3                   	ret    
c001fa71:	90                   	nop

c001fa72 <SoundChannel::~SoundChannel()>:
c001fa72:	83 ec 0c             	sub    esp,0xc
c001fa75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa79:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001fa7c:	83 ec 0c             	sub    esp,0xc
c001fa7f:	50                   	push   eax
c001fa80:	e8 b1 f6 fe ff       	call   c000f136 <free>
c001fa85:	83 c4 10             	add    esp,0x10
c001fa88:	90                   	nop
c001fa89:	83 c4 0c             	add    esp,0xc
c001fa8c:	c3                   	ret    
c001fa8d:	90                   	nop

c001fa8e <SoundChannel::setSpeed(float)>:
c001fa8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa92:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fa96:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001fa99:	c3                   	ret    

c001fa9a <SoundChannel::getSpeed()>:
c001fa9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa9e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001faa1:	c3                   	ret    

c001faa2 <SoundChannel::setVolume(int)>:
c001faa2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001faa6:	83 f8 64             	cmp    eax,0x64
c001faa9:	7e 05                	jle    c001fab0 <SoundChannel::setVolume(int)+0xe>
c001faab:	b8 64 00 00 00       	mov    eax,0x64
c001fab0:	85 c0                	test   eax,eax
c001fab2:	79 02                	jns    c001fab6 <SoundChannel::setVolume(int)+0x14>
c001fab4:	31 c0                	xor    eax,eax
c001fab6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001faba:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001fabd:	c3                   	ret    

c001fabe <SoundChannel::getVolume()>:
c001fabe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fac2:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001fac5:	c3                   	ret    

c001fac6 <SoundChannel::pause()>:
c001fac6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faca:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c001face:	c3                   	ret    
c001facf:	90                   	nop

c001fad0 <SoundChannel::SoundChannel(int, int, int, int)>:
c001fad0:	83 ec 1c             	sub    esp,0x1c
c001fad3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001fad7:	e8 ea ff ff ff       	call   c001fac6 <SoundChannel::pause()>
c001fadc:	83 c4 04             	add    esp,0x4
c001fadf:	6a 50                	push   0x50
c001fae1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001fae5:	e8 b8 ff ff ff       	call   c001faa2 <SoundChannel::setVolume(int)>
c001faea:	83 c4 08             	add    esp,0x8
c001faed:	a1 5c 8e 02 c0       	mov    eax,ds:0xc0028e5c
c001faf2:	50                   	push   eax
c001faf3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001faf7:	e8 92 ff ff ff       	call   c001fa8e <SoundChannel::setSpeed(float)>
c001fafc:	83 c4 08             	add    esp,0x8
c001faff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fb03:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001fb07:	89 10                	mov    DWORD PTR [eax],edx
c001fb09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fb0d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001fb11:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fb14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fb18:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001fb1c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fb1f:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c001fb24:	75 23                	jne    c001fb49 <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c001fb26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fb2a:	8b 10                	mov    edx,DWORD PTR [eax]
c001fb2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fb30:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb33:	0f af c2             	imul   eax,edx
c001fb36:	85 c0                	test   eax,eax
c001fb38:	79 03                	jns    c001fb3d <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c001fb3a:	83 c0 03             	add    eax,0x3
c001fb3d:	c1 f8 02             	sar    eax,0x2
c001fb40:	05 a0 0f 00 00       	add    eax,0xfa0
c001fb45:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001fb49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fb4d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001fb51:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001fb54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fb58:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001fb5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fb63:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001fb6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fb6e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001fb71:	c1 e0 02             	shl    eax,0x2
c001fb74:	83 ec 0c             	sub    esp,0xc
c001fb77:	50                   	push   eax
c001fb78:	e8 a9 f5 fe ff       	call   c000f126 <malloc>
c001fb7d:	83 c4 10             	add    esp,0x10
c001fb80:	89 c2                	mov    edx,eax
c001fb82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fb86:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001fb89:	83 ec 04             	sub    esp,0x4
c001fb8c:	8d 44 24 08          	lea    eax,[esp+0x8]
c001fb90:	50                   	push   eax
c001fb91:	6a 01                	push   0x1
c001fb93:	6a 04                	push   0x4
c001fb95:	e8 85 8d fe ff       	call   c000891f <src_new>
c001fb9a:	83 c4 10             	add    esp,0x10
c001fb9d:	89 c2                	mov    edx,eax
c001fb9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fba3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001fba6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbaa:	85 c0                	test   eax,eax
c001fbac:	74 10                	je     c001fbbe <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c001fbae:	83 ec 0c             	sub    esp,0xc
c001fbb1:	68 40 8e 02 c0       	push   0xc0028e40
c001fbb6:	e8 ec 8e ff ff       	call   c0018aa7 <Krnl::panic(char const*)>
c001fbbb:	83 c4 10             	add    esp,0x10
c001fbbe:	a0 e0 c8 02 c0       	mov    al,ds:0xc002c8e0
c001fbc3:	83 f0 01             	xor    eax,0x1
c001fbc6:	84 c0                	test   al,al
c001fbc8:	74 57                	je     c001fc21 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c001fbca:	a1 60 8e 02 c0       	mov    eax,ds:0xc0028e60
c001fbcf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fbd3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001fbdb:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c001fbe3:	7f 35                	jg     c001fc1a <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c001fbe5:	83 ec 0c             	sub    esp,0xc
c001fbe8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fbec:	e8 76 42 00 00       	call   c0023e67 <__floatsisf>
c001fbf1:	83 c4 10             	add    esp,0x10
c001fbf4:	8b 15 60 8e 02 c0    	mov    edx,DWORD PTR ds:0xc0028e60
c001fbfa:	83 ec 08             	sub    esp,0x8
c001fbfd:	52                   	push   edx
c001fbfe:	50                   	push   eax
c001fbff:	e8 75 3e 00 00       	call   c0023a79 <__mulsf3>
c001fc04:	83 c4 10             	add    esp,0x10
c001fc07:	89 c2                	mov    edx,eax
c001fc09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fc0d:	89 14 85 e0 c4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3b20],edx
c001fc14:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001fc18:	eb c1                	jmp    c001fbdb <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c001fc1a:	c6 05 e0 c8 02 c0 01 	mov    BYTE PTR ds:0xc002c8e0,0x1
c001fc21:	90                   	nop
c001fc22:	83 c4 1c             	add    esp,0x1c
c001fc25:	c3                   	ret    

c001fc26 <SoundChannel::play()>:
c001fc26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc2a:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c001fc2e:	c3                   	ret    
c001fc2f:	90                   	nop

c001fc30 <SoundChannel::paused()>:
c001fc30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc34:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c001fc37:	c3                   	ret    

c001fc38 <SoundChannel::getSampleRate()>:
c001fc38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc3c:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc3e:	c3                   	ret    
c001fc3f:	90                   	nop

c001fc40 <SoundChannel::getBits()>:
c001fc40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc44:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc47:	c3                   	ret    

c001fc48 <SoundChannel::getBufferUsed()>:
c001fc48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc4c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001fc4f:	c3                   	ret    

c001fc50 <SoundChannel::getBufferSize()>:
c001fc50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc54:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001fc57:	c3                   	ret    

c001fc58 <SoundChannel::unbuffer(float*, int, int)>:
c001fc58:	56                   	push   esi
c001fc59:	53                   	push   ebx
c001fc5a:	83 ec 40             	sub    esp,0x40
c001fc5d:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001fc61:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001fc64:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001fc68:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001fc6b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001fc6f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001fc73:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001fc77:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001fc7b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001fc7f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001fc83:	e8 df 41 00 00       	call   c0023e67 <__floatsisf>
c001fc88:	5a                   	pop    edx
c001fc89:	89 c6                	mov    esi,eax
c001fc8b:	ff 33                	push   DWORD PTR [ebx]
c001fc8d:	e8 d5 41 00 00       	call   c0023e67 <__floatsisf>
c001fc92:	59                   	pop    ecx
c001fc93:	5a                   	pop    edx
c001fc94:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001fc97:	50                   	push   eax
c001fc98:	e8 dc 3d 00 00       	call   c0023a79 <__mulsf3>
c001fc9d:	59                   	pop    ecx
c001fc9e:	5a                   	pop    edx
c001fc9f:	50                   	push   eax
c001fca0:	56                   	push   esi
c001fca1:	e8 96 3f 00 00       	call   c0023c3c <__divsf3>
c001fca6:	89 04 24             	mov    DWORD PTR [esp],eax
c001fca9:	e8 89 54 00 00       	call   c0025137 <__extendsfdf2>
c001fcae:	59                   	pop    ecx
c001fcaf:	5e                   	pop    esi
c001fcb0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001fcb4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001fcb8:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001fcc0:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fcc4:	50                   	push   eax
c001fcc5:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001fcc8:	e8 cc 88 fe ff       	call   c0008599 <src_process>
c001fccd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001fcd1:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001fcd4:	83 c4 0c             	add    esp,0xc
c001fcd7:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001fcda:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c001fcdd:	29 d0                	sub    eax,edx
c001fcdf:	c1 e0 02             	shl    eax,0x2
c001fce2:	50                   	push   eax
c001fce3:	8d 04 91             	lea    eax,[ecx+edx*4]
c001fce6:	50                   	push   eax
c001fce7:	51                   	push   ecx
c001fce8:	e8 22 09 fe ff       	call   c000060f <memmove>
c001fced:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001fcf1:	83 c4 44             	add    esp,0x44
c001fcf4:	5b                   	pop    ebx
c001fcf5:	5e                   	pop    esi
c001fcf6:	c3                   	ret    
c001fcf7:	90                   	nop

c001fcf8 <SoundChannel::buffer8(unsigned char*, int)>:
c001fcf8:	55                   	push   ebp
c001fcf9:	57                   	push   edi
c001fcfa:	56                   	push   esi
c001fcfb:	53                   	push   ebx
c001fcfc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd00:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001fd04:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c001fd07:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001fd0b:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c001fd0e:	74 7a                	je     c001fd8a <SoundChannel::buffer8(unsigned char*, int)+0x92>
c001fd10:	85 ff                	test   edi,edi
c001fd12:	7e 76                	jle    c001fd8a <SoundChannel::buffer8(unsigned char*, int)+0x92>
c001fd14:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c001fd18:	8d 70 01             	lea    esi,[eax+0x1]
c001fd1b:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c001fd1e:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c001fd21:	8b 1c 9d e0 c4 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd3b20]
c001fd28:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c001fd2b:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c001fd2e:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c001fd31:	74 5e                	je     c001fd91 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c001fd33:	83 ff 01             	cmp    edi,0x1
c001fd36:	74 4b                	je     c001fd83 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c001fd38:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001fd3c:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c001fd3f:	8d 70 01             	lea    esi,[eax+0x1]
c001fd42:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c001fd45:	8b 1c 9d e0 c4 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd3b20]
c001fd4c:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c001fd4f:	b8 02 00 00 00       	mov    eax,0x2
c001fd54:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c001fd57:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c001fd5a:	75 23                	jne    c001fd7f <SoundChannel::buffer8(unsigned char*, int)+0x87>
c001fd5c:	eb 27                	jmp    c001fd85 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c001fd5e:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c001fd63:	8d 71 01             	lea    esi,[ecx+0x1]
c001fd66:	40                   	inc    eax
c001fd67:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c001fd6a:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c001fd6d:	8b 1c 9d e0 c4 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd3b20]
c001fd74:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001fd77:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c001fd7a:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c001fd7d:	74 06                	je     c001fd85 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c001fd7f:	39 c7                	cmp    edi,eax
c001fd81:	75 db                	jne    c001fd5e <SoundChannel::buffer8(unsigned char*, int)+0x66>
c001fd83:	89 f8                	mov    eax,edi
c001fd85:	5b                   	pop    ebx
c001fd86:	5e                   	pop    esi
c001fd87:	5f                   	pop    edi
c001fd88:	5d                   	pop    ebp
c001fd89:	c3                   	ret    
c001fd8a:	5b                   	pop    ebx
c001fd8b:	31 c0                	xor    eax,eax
c001fd8d:	5e                   	pop    esi
c001fd8e:	5f                   	pop    edi
c001fd8f:	5d                   	pop    ebp
c001fd90:	c3                   	ret    
c001fd91:	b8 01 00 00 00       	mov    eax,0x1
c001fd96:	eb ed                	jmp    c001fd85 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c001fd98 <SoundDevice::SoundDevice(char const*)>:
c001fd98:	83 ec 1c             	sub    esp,0x1c
c001fd9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fd9f:	83 ec 08             	sub    esp,0x8
c001fda2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001fda6:	50                   	push   eax
c001fda7:	e8 7e 3a ff ff       	call   c001382a <Device::Device(char const*)>
c001fdac:	83 c4 10             	add    esp,0x10
c001fdaf:	ba 6c 8e 02 c0       	mov    edx,0xc0028e6c
c001fdb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fdb8:	89 10                	mov    DWORD PTR [eax],edx
c001fdba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fdbe:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001fdc8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fdcc:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001fdd6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001fdde:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001fde3:	7f 19                	jg     c001fdfe <SoundDevice::SoundDevice(char const*)+0x66>
c001fde5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fde9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fded:	83 c2 54             	add    edx,0x54
c001fdf0:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c001fdf8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001fdfc:	eb e0                	jmp    c001fdde <SoundDevice::SoundDevice(char const*)+0x46>
c001fdfe:	90                   	nop
c001fdff:	83 c4 1c             	add    esp,0x1c
c001fe02:	c3                   	ret    
c001fe03:	90                   	nop

c001fe04 <SoundDevice::~SoundDevice()>:
c001fe04:	53                   	push   ebx
c001fe05:	83 ec 18             	sub    esp,0x18
c001fe08:	ba 6c 8e 02 c0       	mov    edx,0xc0028e6c
c001fe0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fe11:	89 10                	mov    DWORD PTR [eax],edx
c001fe13:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001fe1b:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001fe20:	7f 46                	jg     c001fe68 <SoundDevice::~SoundDevice()+0x64>
c001fe22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fe26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fe2a:	83 c2 54             	add    edx,0x54
c001fe2d:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c001fe31:	85 c0                	test   eax,eax
c001fe33:	74 2d                	je     c001fe62 <SoundDevice::~SoundDevice()+0x5e>
c001fe35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fe39:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fe3d:	83 c2 54             	add    edx,0x54
c001fe40:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c001fe44:	85 db                	test   ebx,ebx
c001fe46:	74 1a                	je     c001fe62 <SoundDevice::~SoundDevice()+0x5e>
c001fe48:	83 ec 0c             	sub    esp,0xc
c001fe4b:	53                   	push   ebx
c001fe4c:	e8 21 fc ff ff       	call   c001fa72 <SoundChannel::~SoundChannel()>
c001fe51:	83 c4 10             	add    esp,0x10
c001fe54:	83 ec 08             	sub    esp,0x8
c001fe57:	6a 2c                	push   0x2c
c001fe59:	53                   	push   ebx
c001fe5a:	e8 f0 22 ff ff       	call   c001214f <operator delete(void*, unsigned long)>
c001fe5f:	83 c4 10             	add    esp,0x10
c001fe62:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001fe66:	eb b3                	jmp    c001fe1b <SoundDevice::~SoundDevice()+0x17>
c001fe68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fe6c:	83 ec 0c             	sub    esp,0xc
c001fe6f:	50                   	push   eax
c001fe70:	e8 67 36 ff ff       	call   c00134dc <Device::~Device()>
c001fe75:	83 c4 10             	add    esp,0x10
c001fe78:	90                   	nop
c001fe79:	83 c4 18             	add    esp,0x18
c001fe7c:	5b                   	pop    ebx
c001fe7d:	c3                   	ret    

c001fe7e <SoundDevice::~SoundDevice()>:
c001fe7e:	83 ec 0c             	sub    esp,0xc
c001fe81:	83 ec 0c             	sub    esp,0xc
c001fe84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe88:	e8 77 ff ff ff       	call   c001fe04 <SoundDevice::~SoundDevice()>
c001fe8d:	83 c4 10             	add    esp,0x10
c001fe90:	83 ec 08             	sub    esp,0x8
c001fe93:	68 e4 01 00 00       	push   0x1e4
c001fe98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe9c:	e8 ae 22 ff ff       	call   c001214f <operator delete(void*, unsigned long)>
c001fea1:	83 c4 10             	add    esp,0x10
c001fea4:	83 c4 0c             	add    esp,0xc
c001fea7:	c3                   	ret    

c001fea8 <SoundDevice::getFreeChannelNum()>:
c001fea8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001feac:	31 c0                	xor    eax,eax
c001feae:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c001feb6:	74 09                	je     c001fec1 <SoundDevice::getFreeChannelNum()+0x19>
c001feb8:	40                   	inc    eax
c001feb9:	83 f8 20             	cmp    eax,0x20
c001febc:	75 f0                	jne    c001feae <SoundDevice::getFreeChannelNum()+0x6>
c001febe:	83 c8 ff             	or     eax,0xffffffff
c001fec1:	c3                   	ret    

c001fec2 <SoundDevice::addChannel(SoundChannel*)>:
c001fec2:	56                   	push   esi
c001fec3:	53                   	push   ebx
c001fec4:	51                   	push   ecx
c001fec5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fec9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001fecd:	53                   	push   ebx
c001fece:	e8 d5 ff ff ff       	call   c001fea8 <SoundDevice::getFreeChannelNum()>
c001fed3:	5a                   	pop    edx
c001fed4:	83 f8 ff             	cmp    eax,0xffffffff
c001fed7:	74 51                	je     c001ff2a <SoundDevice::addChannel(SoundChannel*)+0x68>
c001fed9:	85 f6                	test   esi,esi
c001fedb:	74 4d                	je     c001ff2a <SoundDevice::addChannel(SoundChannel*)+0x68>
c001fedd:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c001fee4:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c001feeb:	75 30                	jne    c001ff1d <SoundDevice::addChannel(SoundChannel*)+0x5b>
c001feed:	83 ec 0c             	sub    esp,0xc
c001fef0:	56                   	push   esi
c001fef1:	e8 42 fd ff ff       	call   c001fc38 <SoundChannel::getSampleRate()>
c001fef6:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c001fefc:	89 34 24             	mov    DWORD PTR [esp],esi
c001feff:	e8 3c fd ff ff       	call   c001fc40 <SoundChannel::getBits()>
c001ff04:	83 c4 0c             	add    esp,0xc
c001ff07:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c001ff0d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001ff0f:	50                   	push   eax
c001ff10:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c001ff16:	53                   	push   ebx
c001ff17:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001ff1a:	83 c4 10             	add    esp,0x10
c001ff1d:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c001ff23:	b8 01 00 00 00       	mov    eax,0x1
c001ff28:	eb 03                	jmp    c001ff2d <SoundDevice::addChannel(SoundChannel*)+0x6b>
c001ff2a:	83 c8 ff             	or     eax,0xffffffff
c001ff2d:	5a                   	pop    edx
c001ff2e:	5b                   	pop    ebx
c001ff2f:	5e                   	pop    esi
c001ff30:	c3                   	ret    
c001ff31:	90                   	nop

c001ff32 <SoundDevice::removeChannel(int)>:
c001ff32:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ff36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff3a:	83 fa 1f             	cmp    edx,0x1f
c001ff3d:	77 23                	ja     c001ff62 <SoundDevice::removeChannel(int)+0x30>
c001ff3f:	8d 14 90             	lea    edx,[eax+edx*4]
c001ff42:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c001ff49:	74 17                	je     c001ff62 <SoundDevice::removeChannel(int)+0x30>
c001ff4b:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c001ff55:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c001ff5b:	75 05                	jne    c001ff62 <SoundDevice::removeChannel(int)+0x30>
c001ff5d:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff5f:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c001ff62:	c3                   	ret    
c001ff63:	90                   	nop

c001ff64 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c001ff64:	57                   	push   edi
c001ff65:	56                   	push   esi
c001ff66:	53                   	push   ebx
c001ff67:	31 db                	xor    ebx,ebx
c001ff69:	83 ec 10             	sub    esp,0x10
c001ff6c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001ff70:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c001ff74:	0f 8d cb 00 00 00    	jge    c0020045 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c001ff7a:	83 ec 0c             	sub    esp,0xc
c001ff7d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ff81:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c001ff84:	e8 ae 51 00 00       	call   c0025137 <__extendsfdf2>
c001ff89:	83 c4 10             	add    esp,0x10
c001ff8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ff90:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ff94:	68 00 00 f0 3f       	push   0x3ff00000
c001ff99:	6a 00                	push   0x0
c001ff9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ff9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ffa3:	e8 1b 41 00 00       	call   c00240c3 <__adddf3>
c001ffa8:	83 c4 10             	add    esp,0x10
c001ffab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ffaf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ffb3:	68 00 00 e0 3f       	push   0x3fe00000
c001ffb8:	6a 00                	push   0x0
c001ffba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ffbe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ffc2:	e8 79 47 00 00       	call   c0024740 <__muldf3>
c001ffc7:	83 c4 10             	add    esp,0x10
c001ffca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ffce:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ffd2:	68 00 00 60 40       	push   0x40600000
c001ffd7:	6a 00                	push   0x0
c001ffd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ffdd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ffe1:	e8 5a 47 00 00       	call   c0024740 <__muldf3>
c001ffe6:	59                   	pop    ecx
c001ffe7:	5f                   	pop    edi
c001ffe8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ffec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001fff0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001fff4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001fff8:	e8 16 50 00 00       	call   c0025013 <__truncdfsf2>
c001fffd:	5a                   	pop    edx
c001fffe:	89 c7                	mov    edi,eax
c0020000:	59                   	pop    ecx
c0020001:	68 00 00 fe 42       	push   0x42fe0000
c0020006:	50                   	push   eax
c0020007:	e8 b1 40 00 00       	call   c00240bd <__gesf2>
c002000c:	83 c4 10             	add    esp,0x10
c002000f:	85 c0                	test   eax,eax
c0020011:	78 06                	js     c0020019 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0020013:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0020017:	eb 26                	jmp    c002003f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0020019:	50                   	push   eax
c002001a:	50                   	push   eax
c002001b:	6a 00                	push   0x0
c002001d:	57                   	push   edi
c002001e:	e8 9e 40 00 00       	call   c00240c1 <__lesf2>
c0020023:	83 c4 10             	add    esp,0x10
c0020026:	85 c0                	test   eax,eax
c0020028:	7f 06                	jg     c0020030 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c002002a:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c002002e:	eb 0f                	jmp    c002003f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0020030:	83 ec 0c             	sub    esp,0xc
c0020033:	57                   	push   edi
c0020034:	e8 93 51 00 00       	call   c00251cc <lrintf>
c0020039:	83 c4 10             	add    esp,0x10
c002003c:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c002003f:	43                   	inc    ebx
c0020040:	e9 2b ff ff ff       	jmp    c001ff70 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0020045:	83 c4 10             	add    esp,0x10
c0020048:	5b                   	pop    ebx
c0020049:	5e                   	pop    esi
c002004a:	5f                   	pop    edi
c002004b:	c3                   	ret    

c002004c <SoundDevice::getAudio(int, float*, float*)>:
c002004c:	55                   	push   ebp
c002004d:	57                   	push   edi
c002004e:	56                   	push   esi
c002004f:	53                   	push   ebx
c0020050:	31 db                	xor    ebx,ebx
c0020052:	83 ec 20             	sub    esp,0x20
c0020055:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020059:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002005d:	c1 e0 02             	shl    eax,0x2
c0020060:	50                   	push   eax
c0020061:	6a 00                	push   0x0
c0020063:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020067:	e8 11 06 fe ff       	call   c000067d <memset>
c002006c:	83 c4 10             	add    esp,0x10
c002006f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0020073:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c002007a:	85 c0                	test   eax,eax
c002007c:	0f 84 d7 00 00 00    	je     c0020159 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0020082:	83 ec 0c             	sub    esp,0xc
c0020085:	50                   	push   eax
c0020086:	e8 a5 fb ff ff       	call   c001fc30 <SoundChannel::paused()>
c002008b:	83 c4 10             	add    esp,0x10
c002008e:	84 c0                	test   al,al
c0020090:	0f 85 c3 00 00 00    	jne    c0020159 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0020096:	83 ec 0c             	sub    esp,0xc
c0020099:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00200a0:	e8 19 fa ff ff       	call   c001fabe <SoundChannel::getVolume()>
c00200a5:	83 c4 10             	add    esp,0x10
c00200a8:	85 c0                	test   eax,eax
c00200aa:	0f 84 a9 00 00 00    	je     c0020159 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00200b0:	83 ec 0c             	sub    esp,0xc
c00200b3:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00200ba:	e8 ff f9 ff ff       	call   c001fabe <SoundChannel::getVolume()>
c00200bf:	83 ec 0c             	sub    esp,0xc
c00200c2:	50                   	push   eax
c00200c3:	e8 9f 3d 00 00       	call   c0023e67 <__floatsisf>
c00200c8:	59                   	pop    ecx
c00200c9:	5d                   	pop    ebp
c00200ca:	31 ed                	xor    ebp,ebp
c00200cc:	68 00 00 c8 42       	push   0x42c80000
c00200d1:	50                   	push   eax
c00200d2:	e8 65 3b 00 00       	call   c0023c3c <__divsf3>
c00200d7:	83 c4 10             	add    esp,0x10
c00200da:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00200de:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00200e2:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c00200e8:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00200ec:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00200f3:	e8 60 fb ff ff       	call   c001fc58 <SoundChannel::unbuffer(float*, int, int)>
c00200f8:	83 c4 20             	add    esp,0x20
c00200fb:	89 c1                	mov    ecx,eax
c00200fd:	39 cd                	cmp    ebp,ecx
c00200ff:	7d 52                	jge    c0020153 <SoundDevice::getAudio(int, float*, float*)+0x107>
c0020101:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0020105:	50                   	push   eax
c0020106:	50                   	push   eax
c0020107:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002010b:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c002010e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020112:	e8 62 39 00 00       	call   c0023a79 <__mulsf3>
c0020117:	5a                   	pop    edx
c0020118:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002011c:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c0020122:	e8 40 3d 00 00       	call   c0023e67 <__floatsisf>
c0020127:	59                   	pop    ecx
c0020128:	5a                   	pop    edx
c0020129:	50                   	push   eax
c002012a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002012e:	e8 09 3b 00 00       	call   c0023c3c <__divsf3>
c0020133:	59                   	pop    ecx
c0020134:	5a                   	pop    edx
c0020135:	50                   	push   eax
c0020136:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002013a:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c002013d:	e8 14 36 00 00       	call   c0023756 <__addsf3>
c0020142:	83 c4 10             	add    esp,0x10
c0020145:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0020149:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002014d:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c0020150:	45                   	inc    ebp
c0020151:	eb aa                	jmp    c00200fd <SoundDevice::getAudio(int, float*, float*)+0xb1>
c0020153:	39 cf                	cmp    edi,ecx
c0020155:	7e 02                	jle    c0020159 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0020157:	89 cf                	mov    edi,ecx
c0020159:	43                   	inc    ebx
c002015a:	83 fb 20             	cmp    ebx,0x20
c002015d:	0f 85 10 ff ff ff    	jne    c0020073 <SoundDevice::getAudio(int, float*, float*)+0x27>
c0020163:	83 c4 1c             	add    esp,0x1c
c0020166:	89 f8                	mov    eax,edi
c0020168:	5b                   	pop    ebx
c0020169:	5e                   	pop    esi
c002016a:	5f                   	pop    edi
c002016b:	5d                   	pop    ebp
c002016c:	c3                   	ret    
c002016d:	90                   	nop

c002016e <PCI::open(int, int, void*)>:
c002016e:	83 ec 18             	sub    esp,0x18
c0020171:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020175:	8b 10                	mov    edx,DWORD PTR [eax]
c0020177:	50                   	push   eax
c0020178:	ff 52 18             	call   DWORD PTR [edx+0x18]
c002017b:	31 c0                	xor    eax,eax
c002017d:	83 c4 1c             	add    esp,0x1c
c0020180:	c3                   	ret    
c0020181:	90                   	nop

c0020182 <PCI::close(int, int, void*)>:
c0020182:	31 c0                	xor    eax,eax
c0020184:	c3                   	ret    
c0020185:	90                   	nop

c0020186 <PCI::PCI()>:
c0020186:	83 ec 0c             	sub    esp,0xc
c0020189:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002018d:	83 ec 08             	sub    esp,0x8
c0020190:	68 9c 8e 02 c0       	push   0xc0028e9c
c0020195:	50                   	push   eax
c0020196:	e8 1b 2d ff ff       	call   c0012eb6 <Bus::Bus(char const*)>
c002019b:	83 c4 10             	add    esp,0x10
c002019e:	ba 28 8f 02 c0       	mov    edx,0xc0028f28
c00201a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201a7:	89 10                	mov    DWORD PTR [eax],edx
c00201a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201ad:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00201b3:	0f b6 d0             	movzx  edx,al
c00201b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201ba:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00201c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201c5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00201cb:	0f b6 d0             	movzx  edx,al
c00201ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201d2:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00201d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201db:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00201e1:	8d 50 01             	lea    edx,[eax+0x1]
c00201e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00201e8:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00201ee:	0f b6 d0             	movzx  edx,al
c00201f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201f5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00201f9:	83 c9 c0             	or     ecx,0xffffffc0
c00201fc:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0020200:	90                   	nop
c0020201:	83 c4 0c             	add    esp,0xc
c0020204:	c3                   	ret    
c0020205:	90                   	nop

c0020206 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0020206:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002020a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002020f:	89 ca                	mov    edx,ecx
c0020211:	c1 e0 10             	shl    eax,0x10
c0020214:	81 e2 fc 00 00 00    	and    edx,0xfc
c002021a:	09 d0                	or     eax,edx
c002021c:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0020221:	c1 e2 08             	shl    edx,0x8
c0020224:	09 d0                	or     eax,edx
c0020226:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c002022b:	c1 e2 0b             	shl    edx,0xb
c002022e:	09 d0                	or     eax,edx
c0020230:	ba f8 0c 00 00       	mov    edx,0xcf8
c0020235:	0d 00 00 00 80       	or     eax,0x80000000
c002023a:	ef                   	out    dx,eax
c002023b:	ba fc 0c 00 00       	mov    edx,0xcfc
c0020240:	ed                   	in     eax,dx
c0020241:	83 e1 02             	and    ecx,0x2
c0020244:	0f b6 c9             	movzx  ecx,cl
c0020247:	c1 e1 03             	shl    ecx,0x3
c002024a:	d3 e8                	shr    eax,cl
c002024c:	c3                   	ret    
c002024d:	90                   	nop

c002024e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c002024e:	6a 00                	push   0x0
c0020250:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020255:	50                   	push   eax
c0020256:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002025b:	50                   	push   eax
c002025c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020261:	50                   	push   eax
c0020262:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020266:	e8 9b ff ff ff       	call   c0020206 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002026b:	83 c4 14             	add    esp,0x14
c002026e:	c3                   	ret    
c002026f:	90                   	nop

c0020270 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0020270:	6a 0e                	push   0xe
c0020272:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020277:	50                   	push   eax
c0020278:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002027d:	50                   	push   eax
c002027e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020283:	50                   	push   eax
c0020284:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020288:	e8 79 ff ff ff       	call   c0020206 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002028d:	83 c4 14             	add    esp,0x14
c0020290:	0f b6 c0             	movzx  eax,al
c0020293:	c3                   	ret    

c0020294 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0020294:	55                   	push   ebp
c0020295:	57                   	push   edi
c0020296:	56                   	push   esi
c0020297:	53                   	push   ebx
c0020298:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c002029d:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c00202a2:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c00202a7:	6a 0a                	push   0xa
c00202a9:	56                   	push   esi
c00202aa:	55                   	push   ebp
c00202ab:	57                   	push   edi
c00202ac:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00202b0:	e8 51 ff ff ff       	call   c0020206 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00202b5:	6a 0a                	push   0xa
c00202b7:	89 c3                	mov    ebx,eax
c00202b9:	56                   	push   esi
c00202ba:	0f b6 db             	movzx  ebx,bl
c00202bd:	55                   	push   ebp
c00202be:	57                   	push   edi
c00202bf:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00202c3:	e8 3e ff ff ff       	call   c0020206 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00202c8:	83 c4 28             	add    esp,0x28
c00202cb:	25 00 ff 00 00       	and    eax,0xff00
c00202d0:	09 d8                	or     eax,ebx
c00202d2:	5b                   	pop    ebx
c00202d3:	5e                   	pop    esi
c00202d4:	5f                   	pop    edi
c00202d5:	5d                   	pop    ebp
c00202d6:	c3                   	ret    
c00202d7:	90                   	nop

c00202d8 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c00202d8:	6a 08                	push   0x8
c00202da:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00202df:	50                   	push   eax
c00202e0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00202e5:	50                   	push   eax
c00202e6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00202eb:	50                   	push   eax
c00202ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00202f0:	e8 11 ff ff ff       	call   c0020206 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00202f5:	83 c4 14             	add    esp,0x14
c00202f8:	0f b6 c4             	movzx  eax,ah
c00202fb:	c3                   	ret    

c00202fc <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c00202fc:	6a 08                	push   0x8
c00202fe:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020303:	50                   	push   eax
c0020304:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020309:	50                   	push   eax
c002030a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002030f:	50                   	push   eax
c0020310:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020314:	e8 ed fe ff ff       	call   c0020206 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020319:	83 c4 14             	add    esp,0x14
c002031c:	c3                   	ret    
c002031d:	90                   	nop

c002031e <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c002031e:	6a 3c                	push   0x3c
c0020320:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020325:	50                   	push   eax
c0020326:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002032b:	50                   	push   eax
c002032c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020331:	50                   	push   eax
c0020332:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020336:	e8 cb fe ff ff       	call   c0020206 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002033b:	83 c4 14             	add    esp,0x14
c002033e:	c3                   	ret    
c002033f:	90                   	nop

c0020340 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0020340:	6a 18                	push   0x18
c0020342:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020347:	50                   	push   eax
c0020348:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002034d:	50                   	push   eax
c002034e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020353:	50                   	push   eax
c0020354:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020358:	e8 a9 fe ff ff       	call   c0020206 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002035d:	83 c4 14             	add    esp,0x14
c0020360:	0f b6 c4             	movzx  eax,ah
c0020363:	c3                   	ret    

c0020364 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0020364:	55                   	push   ebp
c0020365:	57                   	push   edi
c0020366:	56                   	push   esi
c0020367:	53                   	push   ebx
c0020368:	50                   	push   eax
c0020369:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c002036d:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0020372:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0020377:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c002037c:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0020383:	8d 43 12             	lea    eax,[ebx+0x12]
c0020386:	83 c3 10             	add    ebx,0x10
c0020389:	0f b6 c0             	movzx  eax,al
c002038c:	0f b6 db             	movzx  ebx,bl
c002038f:	50                   	push   eax
c0020390:	51                   	push   ecx
c0020391:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0020395:	57                   	push   edi
c0020396:	55                   	push   ebp
c0020397:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c002039b:	e8 66 fe ff ff       	call   c0020206 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00203a0:	53                   	push   ebx
c00203a1:	89 c6                	mov    esi,eax
c00203a3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00203a7:	c1 e6 10             	shl    esi,0x10
c00203aa:	51                   	push   ecx
c00203ab:	57                   	push   edi
c00203ac:	55                   	push   ebp
c00203ad:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00203b1:	e8 50 fe ff ff       	call   c0020206 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00203b6:	83 c4 2c             	add    esp,0x2c
c00203b9:	0f b7 c0             	movzx  eax,ax
c00203bc:	5b                   	pop    ebx
c00203bd:	09 f0                	or     eax,esi
c00203bf:	5e                   	pop    esi
c00203c0:	5f                   	pop    edi
c00203c1:	5d                   	pop    ebp
c00203c2:	c3                   	ret    
c00203c3:	90                   	nop

c00203c4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c00203c4:	53                   	push   ebx
c00203c5:	ba f8 0c 00 00       	mov    edx,0xcf8
c00203ca:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00203cf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00203d3:	c1 e1 10             	shl    ecx,0x10
c00203d6:	25 fc 00 00 00       	and    eax,0xfc
c00203db:	09 c1                	or     ecx,eax
c00203dd:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00203e2:	c1 e0 08             	shl    eax,0x8
c00203e5:	09 c1                	or     ecx,eax
c00203e7:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00203ec:	c1 e0 0b             	shl    eax,0xb
c00203ef:	09 c1                	or     ecx,eax
c00203f1:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00203f7:	89 c8                	mov    eax,ecx
c00203f9:	ef                   	out    dx,eax
c00203fa:	ba fc 0c 00 00       	mov    edx,0xcfc
c00203ff:	ed                   	in     eax,dx
c0020400:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0020405:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c002040a:	74 0a                	je     c0020416 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c002040c:	0f b7 d8             	movzx  ebx,ax
c002040f:	89 d0                	mov    eax,edx
c0020411:	c1 e0 10             	shl    eax,0x10
c0020414:	eb 05                	jmp    c002041b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0020416:	66 31 c0             	xor    ax,ax
c0020419:	89 d3                	mov    ebx,edx
c002041b:	09 c3                	or     ebx,eax
c002041d:	ba f8 0c 00 00       	mov    edx,0xcf8
c0020422:	89 c8                	mov    eax,ecx
c0020424:	ef                   	out    dx,eax
c0020425:	ba fc 0c 00 00       	mov    edx,0xcfc
c002042a:	89 d8                	mov    eax,ebx
c002042c:	ef                   	out    dx,eax
c002042d:	5b                   	pop    ebx
c002042e:	c3                   	ret    
c002042f:	90                   	nop

c0020430 <PCI::checkBus(unsigned char)>:
c0020430:	56                   	push   esi
c0020431:	53                   	push   ebx
c0020432:	31 db                	xor    ebx,ebx
c0020434:	51                   	push   ecx
c0020435:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002043a:	52                   	push   edx
c002043b:	53                   	push   ebx
c002043c:	43                   	inc    ebx
c002043d:	56                   	push   esi
c002043e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020442:	e8 29 03 00 00       	call   c0020770 <PCI::checkDevice(unsigned char, unsigned char)>
c0020447:	83 c4 10             	add    esp,0x10
c002044a:	83 fb 20             	cmp    ebx,0x20
c002044d:	75 eb                	jne    c002043a <PCI::checkBus(unsigned char)+0xa>
c002044f:	58                   	pop    eax
c0020450:	5b                   	pop    ebx
c0020451:	5e                   	pop    esi
c0020452:	c3                   	ret    
c0020453:	90                   	nop

c0020454 <PCI::foundDevice(PCIDeviceInfo)>:
c0020454:	55                   	push   ebp
c0020455:	57                   	push   edi
c0020456:	56                   	push   esi
c0020457:	53                   	push   ebx
c0020458:	83 ec 1c             	sub    esp,0x1c
c002045b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002045f:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0020465:	0f 84 51 01 00 00    	je     c00205bc <PCI::foundDevice(PCIDeviceInfo)+0x168>
c002046b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c002046f:	66 81 f9 06 04       	cmp    cx,0x406
c0020474:	75 2c                	jne    c00204a2 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0020476:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c002047b:	50                   	push   eax
c002047c:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0020481:	50                   	push   eax
c0020482:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0020487:	50                   	push   eax
c0020488:	56                   	push   esi
c0020489:	e8 b2 fe ff ff       	call   c0020340 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c002048e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0020492:	0f b6 c0             	movzx  eax,al
c0020495:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0020499:	83 c4 2c             	add    esp,0x2c
c002049c:	5b                   	pop    ebx
c002049d:	5e                   	pop    esi
c002049e:	5f                   	pop    edi
c002049f:	5d                   	pop    ebp
c00204a0:	eb 8e                	jmp    c0020430 <PCI::checkBus(unsigned char)>
c00204a2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00204a6:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00204ac:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00204b0:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00204b4:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c00204b8:	88 d3                	mov    bl,dl
c00204ba:	85 c0                	test   eax,eax
c00204bc:	74 33                	je     c00204f1 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c00204be:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00204c1:	85 d2                	test   edx,edx
c00204c3:	74 28                	je     c00204ed <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00204c5:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c00204cb:	31 ef                	xor    edi,ebp
c00204cd:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c00204d3:	75 18                	jne    c00204ed <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00204d5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00204d9:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c00204df:	75 0c                	jne    c00204ed <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00204e1:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c00204e7:	0f 84 cf 00 00 00    	je     c00205bc <PCI::foundDevice(PCIDeviceInfo)+0x168>
c00204ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00204ef:	eb c9                	jmp    c00204ba <PCI::foundDevice(PCIDeviceInfo)+0x66>
c00204f1:	66 81 f9 01 06       	cmp    cx,0x601
c00204f6:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c00204fa:	75 18                	jne    c0020514 <PCI::foundDevice(PCIDeviceInfo)+0xc0>
c00204fc:	83 ec 0c             	sub    esp,0xc
c00204ff:	68 58 01 00 00       	push   0x158
c0020504:	e8 37 1c ff ff       	call   c0012140 <operator new(unsigned long)>
c0020509:	59                   	pop    ecx
c002050a:	89 c5                	mov    ebp,eax
c002050c:	5f                   	pop    edi
c002050d:	68 a4 8e 02 c0       	push   0xc0028ea4
c0020512:	eb 7d                	jmp    c0020591 <PCI::foundDevice(PCIDeviceInfo)+0x13d>
c0020514:	66 81 f9 01 01       	cmp    cx,0x101
c0020519:	75 60                	jne    c002057b <PCI::foundDevice(PCIDeviceInfo)+0x127>
c002051b:	83 ec 0c             	sub    esp,0xc
c002051e:	68 70 02 00 00       	push   0x270
c0020523:	e8 18 1c ff ff       	call   c0012140 <operator new(unsigned long)>
c0020528:	89 04 24             	mov    DWORD PTR [esp],eax
c002052b:	89 c5                	mov    ebp,eax
c002052d:	e8 02 03 00 00       	call   c0020834 <IDE::IDE()>
c0020532:	58                   	pop    eax
c0020533:	5a                   	pop    edx
c0020534:	55                   	push   ebp
c0020535:	56                   	push   esi
c0020536:	e8 ff 30 ff ff       	call   c001363a <Device::addChild(Device*)>
c002053b:	83 ec 1c             	sub    esp,0x1c
c002053e:	b9 09 00 00 00       	mov    ecx,0x9
c0020543:	fc                   	cld    
c0020544:	89 e7                	mov    edi,esp
c0020546:	89 de                	mov    esi,ebx
c0020548:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002054a:	55                   	push   ebp
c002054b:	e8 c4 2f ff ff       	call   c0013514 <Device::preOpenPCI(PCIDeviceInfo)>
c0020550:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0020553:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0020557:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c002055f:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0020567:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c002056f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020572:	83 c4 4c             	add    esp,0x4c
c0020575:	5b                   	pop    ebx
c0020576:	5e                   	pop    esi
c0020577:	5f                   	pop    edi
c0020578:	5d                   	pop    ebp
c0020579:	ff e0                	jmp    eax
c002057b:	83 ec 0c             	sub    esp,0xc
c002057e:	68 58 01 00 00       	push   0x158
c0020583:	e8 b8 1b ff ff       	call   c0012140 <operator new(unsigned long)>
c0020588:	59                   	pop    ecx
c0020589:	89 c5                	mov    ebp,eax
c002058b:	5f                   	pop    edi
c002058c:	68 c3 8e 02 c0       	push   0xc0028ec3
c0020591:	55                   	push   ebp
c0020592:	e8 8f 33 ff ff       	call   c0013926 <DriverlessDevice::DriverlessDevice(char const*)>
c0020597:	58                   	pop    eax
c0020598:	5a                   	pop    edx
c0020599:	55                   	push   ebp
c002059a:	56                   	push   esi
c002059b:	e8 9a 30 ff ff       	call   c001363a <Device::addChild(Device*)>
c00205a0:	b9 09 00 00 00       	mov    ecx,0x9
c00205a5:	fc                   	cld    
c00205a6:	89 df                	mov    edi,ebx
c00205a8:	89 de                	mov    esi,ebx
c00205aa:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00205ac:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c00205b0:	83 c4 2c             	add    esp,0x2c
c00205b3:	5b                   	pop    ebx
c00205b4:	5e                   	pop    esi
c00205b5:	5f                   	pop    edi
c00205b6:	5d                   	pop    ebp
c00205b7:	e9 58 2f ff ff       	jmp    c0013514 <Device::preOpenPCI(PCIDeviceInfo)>
c00205bc:	83 c4 1c             	add    esp,0x1c
c00205bf:	5b                   	pop    ebx
c00205c0:	5e                   	pop    esi
c00205c1:	5f                   	pop    edi
c00205c2:	5d                   	pop    ebp
c00205c3:	c3                   	ret    

c00205c4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c00205c4:	55                   	push   ebp
c00205c5:	57                   	push   edi
c00205c6:	56                   	push   esi
c00205c7:	53                   	push   ebx
c00205c8:	83 ec 5c             	sub    esp,0x5c
c00205cb:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00205cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00205d3:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00205d7:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c00205dc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00205e0:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c00205e4:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c00205e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00205ed:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c00205f2:	6a 0c                	push   0xc
c00205f4:	55                   	push   ebp
c00205f5:	53                   	push   ebx
c00205f6:	57                   	push   edi
c00205f7:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c00205fe:	e8 03 fc ff ff       	call   c0020206 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020603:	55                   	push   ebp
c0020604:	53                   	push   ebx
c0020605:	57                   	push   edi
c0020606:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c002060d:	e8 82 fc ff ff       	call   c0020294 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0020612:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0020617:	83 c4 24             	add    esp,0x24
c002061a:	55                   	push   ebp
c002061b:	53                   	push   ebx
c002061c:	57                   	push   edi
c002061d:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0020621:	e8 f8 fc ff ff       	call   c002031e <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0020626:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c002062a:	6a 3c                	push   0x3c
c002062c:	55                   	push   ebp
c002062d:	53                   	push   ebx
c002062e:	57                   	push   edi
c002062f:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0020636:	e8 cb fb ff ff       	call   c0020206 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002063b:	0f b6 c4             	movzx  eax,ah
c002063e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0020642:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0020646:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c002064a:	a1 28 a6 02 c0       	mov    eax,ds:0xc002a628
c002064f:	83 c4 24             	add    esp,0x24
c0020652:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0020658:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c002065f:	74 6c                	je     c00206cd <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0020661:	31 f6                	xor    esi,esi
c0020663:	8b 15 28 a6 02 c0    	mov    edx,DWORD PTR ds:0xc002a628
c0020669:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c002066f:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c0020675:	7e 56                	jle    c00206cd <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0020677:	8d 14 f2             	lea    edx,[edx+esi*8]
c002067a:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0020681:	39 cb                	cmp    ebx,ecx
c0020683:	75 45                	jne    c00206ca <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0020685:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c002068c:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0020690:	75 38                	jne    c00206ca <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0020692:	83 ec 0c             	sub    esp,0xc
c0020695:	68 dd 8e 02 c0       	push   0xc0028edd
c002069a:	e8 90 1b ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c002069f:	8b 15 28 a6 02 c0    	mov    edx,DWORD PTR ds:0xc002a628
c00206a5:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c00206ab:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c00206b3:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c00206b7:	52                   	push   edx
c00206b8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00206bc:	53                   	push   ebx
c00206bd:	68 02 8f 02 c0       	push   0xc0028f02
c00206c2:	e8 68 1b ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c00206c7:	83 c4 20             	add    esp,0x20
c00206ca:	46                   	inc    esi
c00206cb:	eb 96                	jmp    c0020663 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c00206cd:	31 d2                	xor    edx,edx
c00206cf:	83 ec 0c             	sub    esp,0xc
c00206d2:	55                   	push   ebp
c00206d3:	53                   	push   ebx
c00206d4:	57                   	push   edi
c00206d5:	52                   	push   edx
c00206d6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00206da:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c00206e1:	e8 7e fc ff ff       	call   c0020364 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c00206e6:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c00206ea:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00206ee:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c00206f2:	42                   	inc    edx
c00206f3:	83 c4 20             	add    esp,0x20
c00206f6:	83 fa 06             	cmp    edx,0x6
c00206f9:	75 d4                	jne    c00206cf <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c00206fb:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00206ff:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0020703:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0020707:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c002070b:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c002070f:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0020713:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0020718:	86 e0                	xchg   al,ah
c002071a:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c002071f:	55                   	push   ebp
c0020720:	53                   	push   ebx
c0020721:	57                   	push   edi
c0020722:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0020726:	e8 ad fb ff ff       	call   c00202d8 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c002072b:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c002072f:	55                   	push   ebp
c0020730:	53                   	push   ebx
c0020731:	57                   	push   edi
c0020732:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0020739:	e8 10 fb ff ff       	call   c002024e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002073e:	83 ec 0c             	sub    esp,0xc
c0020741:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0020746:	b9 09 00 00 00       	mov    ecx,0x9
c002074b:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c002074f:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0020753:	fc                   	cld    
c0020754:	89 e7                	mov    edi,esp
c0020756:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020758:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c002075f:	e8 f0 fc ff ff       	call   c0020454 <PCI::foundDevice(PCIDeviceInfo)>
c0020764:	81 c4 8c 00 00 00    	add    esp,0x8c
c002076a:	5b                   	pop    ebx
c002076b:	5e                   	pop    esi
c002076c:	5f                   	pop    edi
c002076d:	5d                   	pop    ebp
c002076e:	c3                   	ret    
c002076f:	90                   	nop

c0020770 <PCI::checkDevice(unsigned char, unsigned char)>:
c0020770:	55                   	push   ebp
c0020771:	57                   	push   edi
c0020772:	56                   	push   esi
c0020773:	53                   	push   ebx
c0020774:	83 ec 0c             	sub    esp,0xc
c0020777:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c002077b:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0020780:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0020785:	6a 00                	push   0x0
c0020787:	56                   	push   esi
c0020788:	57                   	push   edi
c0020789:	55                   	push   ebp
c002078a:	e8 bf fa ff ff       	call   c002024e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002078f:	6a 00                	push   0x0
c0020791:	56                   	push   esi
c0020792:	57                   	push   edi
c0020793:	55                   	push   ebp
c0020794:	e8 2b fe ff ff       	call   c00205c4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0020799:	83 c4 20             	add    esp,0x20
c002079c:	6a 00                	push   0x0
c002079e:	56                   	push   esi
c002079f:	57                   	push   edi
c00207a0:	55                   	push   ebp
c00207a1:	e8 ca fa ff ff       	call   c0020270 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00207a6:	83 c4 10             	add    esp,0x10
c00207a9:	84 c0                	test   al,al
c00207ab:	79 27                	jns    c00207d4 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c00207ad:	bb 01 00 00 00       	mov    ebx,0x1
c00207b2:	53                   	push   ebx
c00207b3:	56                   	push   esi
c00207b4:	57                   	push   edi
c00207b5:	55                   	push   ebp
c00207b6:	e8 93 fa ff ff       	call   c002024e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00207bb:	83 c4 10             	add    esp,0x10
c00207be:	66 40                	inc    ax
c00207c0:	74 0c                	je     c00207ce <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c00207c2:	53                   	push   ebx
c00207c3:	56                   	push   esi
c00207c4:	57                   	push   edi
c00207c5:	55                   	push   ebp
c00207c6:	e8 f9 fd ff ff       	call   c00205c4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00207cb:	83 c4 10             	add    esp,0x10
c00207ce:	43                   	inc    ebx
c00207cf:	83 fb 08             	cmp    ebx,0x8
c00207d2:	75 de                	jne    c00207b2 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c00207d4:	83 c4 0c             	add    esp,0xc
c00207d7:	5b                   	pop    ebx
c00207d8:	5e                   	pop    esi
c00207d9:	5f                   	pop    edi
c00207da:	5d                   	pop    ebp
c00207db:	c3                   	ret    

c00207dc <PCI::detect()>:
c00207dc:	56                   	push   esi
c00207dd:	53                   	push   ebx
c00207de:	53                   	push   ebx
c00207df:	31 db                	xor    ebx,ebx
c00207e1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00207e5:	6a 00                	push   0x0
c00207e7:	6a 00                	push   0x0
c00207e9:	6a 00                	push   0x0
c00207eb:	56                   	push   esi
c00207ec:	e8 7f fa ff ff       	call   c0020270 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00207f1:	83 c4 10             	add    esp,0x10
c00207f4:	a8 80                	test   al,0x80
c00207f6:	75 21                	jne    c0020819 <PCI::detect()+0x3d>
c00207f8:	51                   	push   ecx
c00207f9:	51                   	push   ecx
c00207fa:	6a 00                	push   0x0
c00207fc:	56                   	push   esi
c00207fd:	e8 2e fc ff ff       	call   c0020430 <PCI::checkBus(unsigned char)>
c0020802:	83 c4 10             	add    esp,0x10
c0020805:	eb 24                	jmp    c002082b <PCI::detect()+0x4f>
c0020807:	52                   	push   edx
c0020808:	52                   	push   edx
c0020809:	53                   	push   ebx
c002080a:	43                   	inc    ebx
c002080b:	56                   	push   esi
c002080c:	e8 1f fc ff ff       	call   c0020430 <PCI::checkBus(unsigned char)>
c0020811:	83 c4 10             	add    esp,0x10
c0020814:	83 fb 08             	cmp    ebx,0x8
c0020817:	74 12                	je     c002082b <PCI::detect()+0x4f>
c0020819:	53                   	push   ebx
c002081a:	6a 00                	push   0x0
c002081c:	6a 00                	push   0x0
c002081e:	56                   	push   esi
c002081f:	e8 2a fa ff ff       	call   c002024e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0020824:	83 c4 10             	add    esp,0x10
c0020827:	66 40                	inc    ax
c0020829:	74 dc                	je     c0020807 <PCI::detect()+0x2b>
c002082b:	58                   	pop    eax
c002082c:	5b                   	pop    ebx
c002082d:	5e                   	pop    esi
c002082e:	c3                   	ret    
c002082f:	90                   	nop

c0020830 <IDE::close(int, int, void*)>:
c0020830:	83 c8 ff             	or     eax,0xffffffff
c0020833:	c3                   	ret    

c0020834 <IDE::IDE()>:
c0020834:	83 ec 0c             	sub    esp,0xc
c0020837:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002083b:	83 ec 08             	sub    esp,0x8
c002083e:	68 4c 8f 02 c0       	push   0xc0028f4c
c0020843:	50                   	push   eax
c0020844:	e8 73 31 ff ff       	call   c00139bc <HardDiskController::HardDiskController(char const*)>
c0020849:	83 c4 10             	add    esp,0x10
c002084c:	ba 8c 91 02 c0       	mov    edx,0xc002918c
c0020851:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020855:	89 10                	mov    DWORD PTR [eax],edx
c0020857:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002085b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0020862:	90                   	nop
c0020863:	83 c4 0c             	add    esp,0xc
c0020866:	c3                   	ret    
c0020867:	90                   	nop

c0020868 <IDE::prepareInterrupt(unsigned char)>:
c0020868:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002086d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020871:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0020879:	c3                   	ret    

c002087a <selectDrive(unsigned char, unsigned char)>:
c002087a:	c3                   	ret    
c002087b:	90                   	nop

c002087c <IDE::getBase(unsigned char)>:
c002087c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0020881:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020885:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c002088d:	c3                   	ret    

c002088e <IDE::write(unsigned char, unsigned char, unsigned char)>:
c002088e:	55                   	push   ebp
c002088f:	57                   	push   edi
c0020890:	56                   	push   esi
c0020891:	53                   	push   ebx
c0020892:	83 ec 1c             	sub    esp,0x1c
c0020895:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0020899:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002089d:	8d 4b f8             	lea    ecx,[ebx-0x8]
c00208a0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00208a4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00208a8:	80 f9 03             	cmp    cl,0x3
c00208ab:	77 51                	ja     c00208fe <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c00208ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00208b1:	0f b6 f2             	movzx  esi,dl
c00208b4:	0f b6 db             	movzx  ebx,bl
c00208b7:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00208ba:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c00208be:	83 ca 80             	or     edx,0xffffff80
c00208c1:	0f b6 d2             	movzx  edx,dl
c00208c4:	52                   	push   edx
c00208c5:	6a 0c                	push   0xc
c00208c7:	56                   	push   esi
c00208c8:	57                   	push   edi
c00208c9:	e8 c0 ff ff ff       	call   c002088e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00208ce:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c00208d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00208d7:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c00208db:	ee                   	out    dx,al
c00208dc:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c00208e1:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c00208e5:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00208e9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00208ed:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00208f5:	83 c4 2c             	add    esp,0x2c
c00208f8:	5b                   	pop    ebx
c00208f9:	5e                   	pop    esi
c00208fa:	5f                   	pop    edi
c00208fb:	5d                   	pop    ebp
c00208fc:	eb 90                	jmp    c002088e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00208fe:	80 fb 07             	cmp    bl,0x7
c0020901:	77 12                	ja     c0020915 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0020903:	0f b6 d2             	movzx  edx,dl
c0020906:	0f b6 db             	movzx  ebx,bl
c0020909:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0020911:	89 da                	mov    edx,ebx
c0020913:	eb 2f                	jmp    c0020944 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0020915:	80 fb 0d             	cmp    bl,0xd
c0020918:	77 13                	ja     c002092d <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c002091a:	0f b6 d2             	movzx  edx,dl
c002091d:	0f b6 db             	movzx  ebx,bl
c0020920:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0020927:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c002092b:	eb 17                	jmp    c0020944 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c002092d:	80 fb 15             	cmp    bl,0x15
c0020930:	77 13                	ja     c0020945 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0020932:	0f b6 d2             	movzx  edx,dl
c0020935:	0f b6 db             	movzx  ebx,bl
c0020938:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0020940:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0020944:	ee                   	out    dx,al
c0020945:	83 c4 1c             	add    esp,0x1c
c0020948:	5b                   	pop    ebx
c0020949:	5e                   	pop    esi
c002094a:	5f                   	pop    edi
c002094b:	5d                   	pop    ebp
c002094c:	c3                   	ret    
c002094d:	90                   	nop

c002094e <IDE::read(unsigned char, unsigned char)>:
c002094e:	55                   	push   ebp
c002094f:	57                   	push   edi
c0020950:	56                   	push   esi
c0020951:	53                   	push   ebx
c0020952:	83 ec 1c             	sub    esp,0x1c
c0020955:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0020959:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002095d:	8d 43 f8             	lea    eax,[ebx-0x8]
c0020960:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0020964:	3c 03                	cmp    al,0x3
c0020966:	77 43                	ja     c00209ab <IDE::read(unsigned char, unsigned char)+0x5d>
c0020968:	0f b6 f2             	movzx  esi,dl
c002096b:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c002096e:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0020972:	83 c8 80             	or     eax,0xffffff80
c0020975:	0f b6 c0             	movzx  eax,al
c0020978:	50                   	push   eax
c0020979:	6a 0c                	push   0xc
c002097b:	56                   	push   esi
c002097c:	57                   	push   edi
c002097d:	e8 0c ff ff ff       	call   c002088e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020982:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0020987:	0f b6 c3             	movzx  eax,bl
c002098a:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c002098e:	ec                   	in     al,dx
c002098f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0020993:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0020998:	52                   	push   edx
c0020999:	6a 0c                	push   0xc
c002099b:	56                   	push   esi
c002099c:	57                   	push   edi
c002099d:	e8 ec fe ff ff       	call   c002088e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00209a2:	83 c4 20             	add    esp,0x20
c00209a5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00209a9:	eb 49                	jmp    c00209f4 <IDE::read(unsigned char, unsigned char)+0xa6>
c00209ab:	80 fb 07             	cmp    bl,0x7
c00209ae:	77 12                	ja     c00209c2 <IDE::read(unsigned char, unsigned char)+0x74>
c00209b0:	0f b6 d2             	movzx  edx,dl
c00209b3:	0f b6 c3             	movzx  eax,bl
c00209b6:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c00209be:	89 c2                	mov    edx,eax
c00209c0:	eb 31                	jmp    c00209f3 <IDE::read(unsigned char, unsigned char)+0xa5>
c00209c2:	80 fb 0d             	cmp    bl,0xd
c00209c5:	77 13                	ja     c00209da <IDE::read(unsigned char, unsigned char)+0x8c>
c00209c7:	0f b6 d2             	movzx  edx,dl
c00209ca:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c00209d1:	0f b6 d3             	movzx  edx,bl
c00209d4:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c00209d8:	eb 19                	jmp    c00209f3 <IDE::read(unsigned char, unsigned char)+0xa5>
c00209da:	31 c0                	xor    eax,eax
c00209dc:	80 fb 15             	cmp    bl,0x15
c00209df:	77 13                	ja     c00209f4 <IDE::read(unsigned char, unsigned char)+0xa6>
c00209e1:	0f b6 d2             	movzx  edx,dl
c00209e4:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c00209ec:	0f b6 d3             	movzx  edx,bl
c00209ef:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c00209f3:	ec                   	in     al,dx
c00209f4:	83 c4 1c             	add    esp,0x1c
c00209f7:	5b                   	pop    ebx
c00209f8:	5e                   	pop    esi
c00209f9:	5f                   	pop    edi
c00209fa:	5d                   	pop    ebp
c00209fb:	c3                   	ret    

c00209fc <IDE::waitInterrupt(unsigned char)>:
c00209fc:	55                   	push   ebp
c00209fd:	57                   	push   edi
c00209fe:	56                   	push   esi
c00209ff:	53                   	push   ebx
c0020a00:	31 db                	xor    ebx,ebx
c0020a02:	83 ec 0c             	sub    esp,0xc
c0020a05:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0020a09:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0020a0e:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0020a16:	89 e8                	mov    eax,ebp
c0020a18:	84 c0                	test   al,al
c0020a1a:	75 34                	jne    c0020a50 <IDE::waitInterrupt(unsigned char)+0x54>
c0020a1c:	52                   	push   edx
c0020a1d:	6a 0c                	push   0xc
c0020a1f:	56                   	push   esi
c0020a20:	57                   	push   edi
c0020a21:	e8 28 ff ff ff       	call   c002094e <IDE::read(unsigned char, unsigned char)>
c0020a26:	83 c4 10             	add    esp,0x10
c0020a29:	a8 01                	test   al,0x1
c0020a2b:	75 2b                	jne    c0020a58 <IDE::waitInterrupt(unsigned char)+0x5c>
c0020a2d:	f6 c3 04             	test   bl,0x4
c0020a30:	75 16                	jne    c0020a48 <IDE::waitInterrupt(unsigned char)+0x4c>
c0020a32:	83 fb 32             	cmp    ebx,0x32
c0020a35:	7e 11                	jle    c0020a48 <IDE::waitInterrupt(unsigned char)+0x4c>
c0020a37:	50                   	push   eax
c0020a38:	50                   	push   eax
c0020a39:	6a 00                	push   0x0
c0020a3b:	68 80 96 98 00       	push   0x989680
c0020a40:	e8 fd b4 ff ff       	call   c001bf42 <nanoSleep(unsigned long long)>
c0020a45:	83 c4 10             	add    esp,0x10
c0020a48:	83 fb 3c             	cmp    ebx,0x3c
c0020a4b:	74 0b                	je     c0020a58 <IDE::waitInterrupt(unsigned char)+0x5c>
c0020a4d:	43                   	inc    ebx
c0020a4e:	eb be                	jmp    c0020a0e <IDE::waitInterrupt(unsigned char)+0x12>
c0020a50:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0020a58:	83 c4 0c             	add    esp,0xc
c0020a5b:	89 e8                	mov    eax,ebp
c0020a5d:	5b                   	pop    ebx
c0020a5e:	5e                   	pop    esi
c0020a5f:	5f                   	pop    edi
c0020a60:	5d                   	pop    ebp
c0020a61:	c3                   	ret    

c0020a62 <ideChannel0IRQHandler(regs*, void*)>:
c0020a62:	83 ec 10             	sub    esp,0x10
c0020a65:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020a69:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0020a70:	6a 07                	push   0x7
c0020a72:	6a 00                	push   0x0
c0020a74:	50                   	push   eax
c0020a75:	e8 d4 fe ff ff       	call   c002094e <IDE::read(unsigned char, unsigned char)>
c0020a7a:	83 c4 1c             	add    esp,0x1c
c0020a7d:	c3                   	ret    

c0020a7e <ideChannel1IRQHandler(regs*, void*)>:
c0020a7e:	83 ec 10             	sub    esp,0x10
c0020a81:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020a85:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0020a8c:	6a 07                	push   0x7
c0020a8e:	6a 01                	push   0x1
c0020a90:	50                   	push   eax
c0020a91:	e8 b8 fe ff ff       	call   c002094e <IDE::read(unsigned char, unsigned char)>
c0020a96:	83 c4 1c             	add    esp,0x1c
c0020a99:	c3                   	ret    

c0020a9a <IDE::enableIRQs(unsigned char, bool)>:
c0020a9a:	57                   	push   edi
c0020a9b:	56                   	push   esi
c0020a9c:	be 04 00 00 00       	mov    esi,0x4
c0020aa1:	53                   	push   ebx
c0020aa2:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0020aa7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020aab:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0020ab0:	0f 94 c0             	sete   al
c0020ab3:	d1 e0                	shl    eax,1
c0020ab5:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0020abc:	0f b6 c0             	movzx  eax,al
c0020abf:	50                   	push   eax
c0020ac0:	6a 0c                	push   0xc
c0020ac2:	57                   	push   edi
c0020ac3:	53                   	push   ebx
c0020ac4:	e8 c5 fd ff ff       	call   c002088e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020ac9:	83 c4 10             	add    esp,0x10
c0020acc:	50                   	push   eax
c0020acd:	6a 0c                	push   0xc
c0020acf:	57                   	push   edi
c0020ad0:	53                   	push   ebx
c0020ad1:	e8 78 fe ff ff       	call   c002094e <IDE::read(unsigned char, unsigned char)>
c0020ad6:	83 c4 10             	add    esp,0x10
c0020ad9:	4e                   	dec    esi
c0020ada:	75 f0                	jne    c0020acc <IDE::enableIRQs(unsigned char, bool)+0x32>
c0020adc:	5b                   	pop    ebx
c0020add:	5e                   	pop    esi
c0020ade:	5f                   	pop    edi
c0020adf:	c3                   	ret    

c0020ae0 <IDE::open(int, int, void*)>:
c0020ae0:	55                   	push   ebp
c0020ae1:	57                   	push   edi
c0020ae2:	56                   	push   esi
c0020ae3:	53                   	push   ebx
c0020ae4:	83 ec 1c             	sub    esp,0x1c
c0020ae7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0020aeb:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0020af4:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0020afd:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0020b04:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0020b0b:	0f 85 b0 02 00 00    	jne    c0020dc1 <IDE::open(int, int, void*)+0x2e1>
c0020b11:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0020b17:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0020b1b:	83 e0 7f             	and    eax,0x7f
c0020b1e:	3c 05                	cmp    al,0x5
c0020b20:	74 04                	je     c0020b26 <IDE::open(int, int, void*)+0x46>
c0020b22:	3c 0f                	cmp    al,0xf
c0020b24:	75 32                	jne    c0020b58 <IDE::open(int, int, void*)+0x78>
c0020b26:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0020b2c:	83 e0 fc             	and    eax,0xfffffffc
c0020b2f:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0020b36:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0020b3c:	83 e0 fc             	and    eax,0xfffffffc
c0020b3f:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0020b46:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0020b4c:	83 e0 fc             	and    eax,0xfffffffc
c0020b4f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0020b56:	eb 14                	jmp    c0020b6c <IDE::open(int, int, void*)+0x8c>
c0020b58:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0020b62:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0020b6c:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0020b73:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0020b7a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020b7e:	89 c6                	mov    esi,eax
c0020b80:	bf f8 0c 00 00       	mov    edi,0xcf8
c0020b85:	c1 e6 10             	shl    esi,0x10
c0020b88:	89 e8                	mov    eax,ebp
c0020b8a:	89 fa                	mov    edx,edi
c0020b8c:	c1 e0 0b             	shl    eax,0xb
c0020b8f:	09 f0                	or     eax,esi
c0020b91:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0020b98:	c1 e6 08             	shl    esi,0x8
c0020b9b:	09 c6                	or     esi,eax
c0020b9d:	89 f0                	mov    eax,esi
c0020b9f:	0d 08 00 00 80       	or     eax,0x80000008
c0020ba4:	ef                   	out    dx,eax
c0020ba5:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0020baa:	89 ca                	mov    edx,ecx
c0020bac:	ed                   	in     eax,dx
c0020bad:	c1 e8 10             	shr    eax,0x10
c0020bb0:	3d ff ff 00 00       	cmp    eax,0xffff
c0020bb5:	0f 84 f5 00 00 00    	je     c0020cb0 <IDE::open(int, int, void*)+0x1d0>
c0020bbb:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0020bc1:	89 fa                	mov    edx,edi
c0020bc3:	89 f0                	mov    eax,esi
c0020bc5:	ef                   	out    dx,eax
c0020bc6:	b0 fe                	mov    al,0xfe
c0020bc8:	89 ca                	mov    edx,ecx
c0020bca:	ee                   	out    dx,al
c0020bcb:	89 f0                	mov    eax,esi
c0020bcd:	89 fa                	mov    edx,edi
c0020bcf:	ef                   	out    dx,eax
c0020bd0:	89 ca                	mov    edx,ecx
c0020bd2:	ed                   	in     eax,dx
c0020bd3:	3c fe                	cmp    al,0xfe
c0020bd5:	0f 85 a9 00 00 00    	jne    c0020c84 <IDE::open(int, int, void*)+0x1a4>
c0020bdb:	8b 15 28 a6 02 c0    	mov    edx,DWORD PTR ds:0xc002a628
c0020be1:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0020be8:	74 33                	je     c0020c1d <IDE::open(int, int, void*)+0x13d>
c0020bea:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0020bf0:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0020bf4:	40                   	inc    eax
c0020bf5:	83 ec 0c             	sub    esp,0xc
c0020bf8:	0f b6 c0             	movzx  eax,al
c0020bfb:	50                   	push   eax
c0020bfc:	55                   	push   ebp
c0020bfd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020c01:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0020c07:	51                   	push   ecx
c0020c08:	e8 11 63 ff ff       	call   c0016f1e <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0020c0d:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0020c12:	83 c4 1c             	add    esp,0x1c
c0020c15:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0020c1b:	eb 0a                	jmp    c0020c27 <IDE::open(int, int, void*)+0x147>
c0020c1d:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0020c27:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0020c2e:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0020c35:	c1 e1 10             	shl    ecx,0x10
c0020c38:	c1 e0 08             	shl    eax,0x8
c0020c3b:	bf f8 0c 00 00       	mov    edi,0xcf8
c0020c40:	09 c1                	or     ecx,eax
c0020c42:	89 fa                	mov    edx,edi
c0020c44:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0020c4b:	c1 e0 0b             	shl    eax,0xb
c0020c4e:	09 c1                	or     ecx,eax
c0020c50:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0020c56:	89 c8                	mov    eax,ecx
c0020c58:	ef                   	out    dx,eax
c0020c59:	be fc 0c 00 00       	mov    esi,0xcfc
c0020c5e:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0020c64:	89 f2                	mov    edx,esi
c0020c66:	ee                   	out    dx,al
c0020c67:	89 c8                	mov    eax,ecx
c0020c69:	89 fa                	mov    edx,edi
c0020c6b:	ef                   	out    dx,eax
c0020c6c:	89 f2                	mov    edx,esi
c0020c6e:	ed                   	in     eax,dx
c0020c6f:	0f b6 c0             	movzx  eax,al
c0020c72:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0020c78:	74 46                	je     c0020cc0 <IDE::open(int, int, void*)+0x1e0>
c0020c7a:	83 ec 0c             	sub    esp,0xc
c0020c7d:	68 64 8f 02 c0       	push   0xc0028f64
c0020c82:	eb 34                	jmp    c0020cb8 <IDE::open(int, int, void*)+0x1d8>
c0020c84:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0020c8d:	75 17                	jne    c0020ca6 <IDE::open(int, int, void*)+0x1c6>
c0020c8f:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0020c94:	74 07                	je     c0020c9d <IDE::open(int, int, void*)+0x1bd>
c0020c96:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0020c9b:	75 09                	jne    c0020ca6 <IDE::open(int, int, void*)+0x1c6>
c0020c9d:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0020ca4:	eb 1a                	jmp    c0020cc0 <IDE::open(int, int, void*)+0x1e0>
c0020ca6:	83 ec 0c             	sub    esp,0xc
c0020ca9:	68 6c 8f 02 c0       	push   0xc0028f6c
c0020cae:	eb 08                	jmp    c0020cb8 <IDE::open(int, int, void*)+0x1d8>
c0020cb0:	83 ec 0c             	sub    esp,0xc
c0020cb3:	68 9d 8f 02 c0       	push   0xc0028f9d
c0020cb8:	e8 ea 7d ff ff       	call   c0018aa7 <Krnl::panic(char const*)>
c0020cbd:	83 c4 10             	add    esp,0x10
c0020cc0:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0020cc7:	79 1a                	jns    c0020ce3 <IDE::open(int, int, void*)+0x203>
c0020cc9:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0020ccf:	83 e0 fc             	and    eax,0xfffffffc
c0020cd2:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0020cd9:	83 c0 08             	add    eax,0x8
c0020cdc:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0020ce3:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0020ce9:	89 c2                	mov    edx,eax
c0020ceb:	83 e2 0f             	and    edx,0xf
c0020cee:	66 83 fa 08          	cmp    dx,0x8
c0020cf2:	75 0a                	jne    c0020cfe <IDE::open(int, int, void*)+0x21e>
c0020cf4:	83 e8 02             	sub    eax,0x2
c0020cf7:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0020cfe:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0020d04:	89 c2                	mov    edx,eax
c0020d06:	83 e2 0f             	and    edx,0xf
c0020d09:	66 83 fa 08          	cmp    dx,0x8
c0020d0d:	75 0a                	jne    c0020d19 <IDE::open(int, int, void*)+0x239>
c0020d0f:	83 e8 02             	sub    eax,0x2
c0020d12:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0020d19:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0020d20:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0020d27:	89 d0                	mov    eax,edx
c0020d29:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0020d2c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0020d30:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0020d34:	8d 4a 01             	lea    ecx,[edx+0x1]
c0020d37:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0020d3c:	0f b6 c9             	movzx  ecx,cl
c0020d3f:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0020d46:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0020d49:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0020d4d:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0020d51:	8d 50 02             	lea    edx,[eax+0x2]
c0020d54:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0020d59:	0f b6 d2             	movzx  edx,dl
c0020d5c:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0020d62:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0020d65:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0020d69:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0020d6d:	8d 48 03             	lea    ecx,[eax+0x3]
c0020d70:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0020d75:	0f b6 c9             	movzx  ecx,cl
c0020d78:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0020d7e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0020d81:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0020d85:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0020d89:	8d 50 04             	lea    edx,[eax+0x4]
c0020d8c:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0020d92:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0020d97:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0020d9e:	66 85 f6             	test   si,si
c0020da1:	74 3e                	je     c0020de1 <IDE::open(int, int, void*)+0x301>
c0020da3:	0f b6 d2             	movzx  edx,dl
c0020da6:	83 c0 05             	add    eax,0x5
c0020da9:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0020dac:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0020db0:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0020db4:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0020dba:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0020dbf:	eb 20                	jmp    c0020de1 <IDE::open(int, int, void*)+0x301>
c0020dc1:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0020dcb:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0020dd5:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0020ddc:	e9 02 ff ff ff       	jmp    c0020ce3 <IDE::open(int, int, void*)+0x203>
c0020de1:	52                   	push   edx
c0020de2:	52                   	push   edx
c0020de3:	6a 00                	push   0x0
c0020de5:	53                   	push   ebx
c0020de6:	e8 7d fa ff ff       	call   c0020868 <IDE::prepareInterrupt(unsigned char)>
c0020deb:	59                   	pop    ecx
c0020dec:	5e                   	pop    esi
c0020ded:	6a 01                	push   0x1
c0020def:	53                   	push   ebx
c0020df0:	e8 73 fa ff ff       	call   c0020868 <IDE::prepareInterrupt(unsigned char)>
c0020df5:	83 c4 0c             	add    esp,0xc
c0020df8:	6a 00                	push   0x0
c0020dfa:	6a 00                	push   0x0
c0020dfc:	53                   	push   ebx
c0020dfd:	e8 98 fc ff ff       	call   c0020a9a <IDE::enableIRQs(unsigned char, bool)>
c0020e02:	83 c4 0c             	add    esp,0xc
c0020e05:	6a 00                	push   0x0
c0020e07:	6a 01                	push   0x1
c0020e09:	53                   	push   ebx
c0020e0a:	e8 8b fc ff ff       	call   c0020a9a <IDE::enableIRQs(unsigned char, bool)>
c0020e0f:	83 c4 10             	add    esp,0x10
c0020e12:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0020e19:	74 40                	je     c0020e5b <IDE::open(int, int, void*)+0x37b>
c0020e1b:	83 ec 0c             	sub    esp,0xc
c0020e1e:	68 c7 8f 02 c0       	push   0xc0028fc7
c0020e23:	e8 07 14 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c0020e28:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020e2b:	6a 01                	push   0x1
c0020e2d:	68 62 0a 02 c0       	push   0xc0020a62
c0020e32:	6a 0e                	push   0xe
c0020e34:	53                   	push   ebx
c0020e35:	e8 54 27 ff ff       	call   c001358e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020e3a:	83 c4 14             	add    esp,0x14
c0020e3d:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0020e43:	53                   	push   ebx
c0020e44:	6a 01                	push   0x1
c0020e46:	68 7e 0a 02 c0       	push   0xc0020a7e
c0020e4b:	6a 0f                	push   0xf
c0020e4d:	53                   	push   ebx
c0020e4e:	e8 3b 27 ff ff       	call   c001358e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020e53:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0020e59:	eb 4a                	jmp    c0020ea5 <IDE::open(int, int, void*)+0x3c5>
c0020e5b:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0020e65:	50                   	push   eax
c0020e66:	6a 0f                	push   0xf
c0020e68:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0020e6e:	68 e3 8f 02 c0       	push   0xc0028fe3
c0020e73:	e8 b7 13 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c0020e78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020e7b:	6a 00                	push   0x0
c0020e7d:	68 62 0a 02 c0       	push   0xc0020a62
c0020e82:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0020e88:	53                   	push   ebx
c0020e89:	e8 00 27 ff ff       	call   c001358e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020e8e:	83 c4 14             	add    esp,0x14
c0020e91:	53                   	push   ebx
c0020e92:	6a 00                	push   0x0
c0020e94:	68 7e 0a 02 c0       	push   0xc0020a7e
c0020e99:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0020e9f:	53                   	push   ebx
c0020ea0:	e8 e9 26 ff ff       	call   c001358e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020ea5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0020ea7:	83 c4 20             	add    esp,0x20
c0020eaa:	83 ec 0c             	sub    esp,0xc
c0020ead:	53                   	push   ebx
c0020eae:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0020eb1:	83 c4 0c             	add    esp,0xc
c0020eb4:	6a 07                	push   0x7
c0020eb6:	6a 00                	push   0x0
c0020eb8:	53                   	push   ebx
c0020eb9:	e8 90 fa ff ff       	call   c002094e <IDE::read(unsigned char, unsigned char)>
c0020ebe:	83 c4 0c             	add    esp,0xc
c0020ec1:	6a 07                	push   0x7
c0020ec3:	6a 01                	push   0x1
c0020ec5:	53                   	push   ebx
c0020ec6:	e8 83 fa ff ff       	call   c002094e <IDE::read(unsigned char, unsigned char)>
c0020ecb:	83 c4 0c             	add    esp,0xc
c0020ece:	6a 01                	push   0x1
c0020ed0:	6a 00                	push   0x0
c0020ed2:	53                   	push   ebx
c0020ed3:	e8 c2 fb ff ff       	call   c0020a9a <IDE::enableIRQs(unsigned char, bool)>
c0020ed8:	83 c4 0c             	add    esp,0xc
c0020edb:	6a 01                	push   0x1
c0020edd:	6a 01                	push   0x1
c0020edf:	53                   	push   ebx
c0020ee0:	e8 b5 fb ff ff       	call   c0020a9a <IDE::enableIRQs(unsigned char, bool)>
c0020ee5:	83 c4 2c             	add    esp,0x2c
c0020ee8:	31 c0                	xor    eax,eax
c0020eea:	5b                   	pop    ebx
c0020eeb:	5e                   	pop    esi
c0020eec:	5f                   	pop    edi
c0020eed:	5d                   	pop    ebp
c0020eee:	c3                   	ret    
c0020eef:	90                   	nop

c0020ef0 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0020ef0:	55                   	push   ebp
c0020ef1:	57                   	push   edi
c0020ef2:	56                   	push   esi
c0020ef3:	53                   	push   ebx
c0020ef4:	83 ec 1c             	sub    esp,0x1c
c0020ef7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020efb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0020eff:	8d 50 f8             	lea    edx,[eax-0x8]
c0020f02:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020f06:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0020f0a:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0020f0e:	80 fa 03             	cmp    dl,0x3
c0020f11:	77 5d                	ja     c0020f70 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0020f13:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0020f17:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020f1b:	0f b6 db             	movzx  ebx,bl
c0020f1e:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0020f21:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0020f25:	83 ca 80             	or     edx,0xffffff80
c0020f28:	0f b6 d2             	movzx  edx,dl
c0020f2b:	52                   	push   edx
c0020f2c:	6a 0c                	push   0xc
c0020f2e:	53                   	push   ebx
c0020f2f:	56                   	push   esi
c0020f30:	e8 59 f9 ff ff       	call   c002088e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020f35:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0020f3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020f3e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0020f42:	0f b6 c0             	movzx  eax,al
c0020f45:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0020f49:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0020f4b:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0020f50:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0020f54:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0020f58:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020f5c:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0020f64:	83 c4 2c             	add    esp,0x2c
c0020f67:	5b                   	pop    ebx
c0020f68:	5e                   	pop    esi
c0020f69:	5f                   	pop    edi
c0020f6a:	5d                   	pop    ebp
c0020f6b:	e9 1e f9 ff ff       	jmp    c002088e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020f70:	3c 07                	cmp    al,0x7
c0020f72:	77 10                	ja     c0020f84 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0020f74:	0f b6 db             	movzx  ebx,bl
c0020f77:	0f b6 d0             	movzx  edx,al
c0020f7a:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0020f82:	eb 2d                	jmp    c0020fb1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0020f84:	3c 0d                	cmp    al,0xd
c0020f86:	77 13                	ja     c0020f9b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0020f88:	0f b6 db             	movzx  ebx,bl
c0020f8b:	0f b6 c0             	movzx  eax,al
c0020f8e:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0020f95:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0020f99:	eb 16                	jmp    c0020fb1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0020f9b:	3c 15                	cmp    al,0x15
c0020f9d:	77 14                	ja     c0020fb3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0020f9f:	0f b6 db             	movzx  ebx,bl
c0020fa2:	0f b6 c0             	movzx  eax,al
c0020fa5:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0020fad:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0020fb1:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0020fb3:	83 c4 1c             	add    esp,0x1c
c0020fb6:	5b                   	pop    ebx
c0020fb7:	5e                   	pop    esi
c0020fb8:	5f                   	pop    edi
c0020fb9:	5d                   	pop    ebp
c0020fba:	c3                   	ret    
c0020fbb:	90                   	nop

c0020fbc <IDE::detect()>:
c0020fbc:	55                   	push   ebp
c0020fbd:	57                   	push   edi
c0020fbe:	56                   	push   esi
c0020fbf:	53                   	push   ebx
c0020fc0:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0020fc6:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0020fcd:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0020fd4:	0f 85 be 02 00 00    	jne    c0021298 <IDE::detect()+0x2dc>
c0020fda:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0020fe1:	31 f6                	xor    esi,esi
c0020fe3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020feb:	31 ed                	xor    ebp,ebp
c0020fed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020ff1:	c1 e0 06             	shl    eax,0x6
c0020ff4:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0020ffc:	89 e8                	mov    eax,ebp
c0020ffe:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0021002:	c1 e0 04             	shl    eax,0x4
c0021005:	83 c8 a0             	or     eax,0xffffffa0
c0021008:	0f b6 c0             	movzx  eax,al
c002100b:	50                   	push   eax
c002100c:	6a 06                	push   0x6
c002100e:	56                   	push   esi
c002100f:	53                   	push   ebx
c0021010:	e8 79 f8 ff ff       	call   c002088e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021015:	83 c4 0c             	add    esp,0xc
c0021018:	6a 0c                	push   0xc
c002101a:	56                   	push   esi
c002101b:	53                   	push   ebx
c002101c:	e8 2d f9 ff ff       	call   c002094e <IDE::read(unsigned char, unsigned char)>
c0021021:	83 c4 0c             	add    esp,0xc
c0021024:	6a 0c                	push   0xc
c0021026:	56                   	push   esi
c0021027:	53                   	push   ebx
c0021028:	e8 21 f9 ff ff       	call   c002094e <IDE::read(unsigned char, unsigned char)>
c002102d:	83 c4 0c             	add    esp,0xc
c0021030:	6a 0c                	push   0xc
c0021032:	56                   	push   esi
c0021033:	53                   	push   ebx
c0021034:	e8 15 f9 ff ff       	call   c002094e <IDE::read(unsigned char, unsigned char)>
c0021039:	83 c4 0c             	add    esp,0xc
c002103c:	6a 0c                	push   0xc
c002103e:	56                   	push   esi
c002103f:	53                   	push   ebx
c0021040:	e8 09 f9 ff ff       	call   c002094e <IDE::read(unsigned char, unsigned char)>
c0021045:	68 ec 00 00 00       	push   0xec
c002104a:	6a 07                	push   0x7
c002104c:	56                   	push   esi
c002104d:	53                   	push   ebx
c002104e:	e8 3b f8 ff ff       	call   c002088e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021053:	83 c4 1c             	add    esp,0x1c
c0021056:	6a 0c                	push   0xc
c0021058:	56                   	push   esi
c0021059:	53                   	push   ebx
c002105a:	e8 ef f8 ff ff       	call   c002094e <IDE::read(unsigned char, unsigned char)>
c002105f:	83 c4 0c             	add    esp,0xc
c0021062:	6a 0c                	push   0xc
c0021064:	56                   	push   esi
c0021065:	53                   	push   ebx
c0021066:	e8 e3 f8 ff ff       	call   c002094e <IDE::read(unsigned char, unsigned char)>
c002106b:	83 c4 0c             	add    esp,0xc
c002106e:	6a 0c                	push   0xc
c0021070:	56                   	push   esi
c0021071:	53                   	push   ebx
c0021072:	e8 d7 f8 ff ff       	call   c002094e <IDE::read(unsigned char, unsigned char)>
c0021077:	83 c4 0c             	add    esp,0xc
c002107a:	6a 0c                	push   0xc
c002107c:	56                   	push   esi
c002107d:	53                   	push   ebx
c002107e:	e8 cb f8 ff ff       	call   c002094e <IDE::read(unsigned char, unsigned char)>
c0021083:	83 c4 0c             	add    esp,0xc
c0021086:	6a 0c                	push   0xc
c0021088:	56                   	push   esi
c0021089:	53                   	push   ebx
c002108a:	e8 bf f8 ff ff       	call   c002094e <IDE::read(unsigned char, unsigned char)>
c002108f:	83 c4 10             	add    esp,0x10
c0021092:	84 c0                	test   al,al
c0021094:	0f 84 8b 01 00 00    	je     c0021225 <IDE::detect()+0x269>
c002109a:	31 ff                	xor    edi,edi
c002109c:	50                   	push   eax
c002109d:	6a 0c                	push   0xc
c002109f:	56                   	push   esi
c00210a0:	53                   	push   ebx
c00210a1:	e8 a8 f8 ff ff       	call   c002094e <IDE::read(unsigned char, unsigned char)>
c00210a6:	83 c4 10             	add    esp,0x10
c00210a9:	a8 01                	test   al,0x1
c00210ab:	0f 85 8e 01 00 00    	jne    c002123f <IDE::detect()+0x283>
c00210b1:	84 c0                	test   al,al
c00210b3:	78 04                	js     c00210b9 <IDE::detect()+0xfd>
c00210b5:	a8 08                	test   al,0x8
c00210b7:	75 27                	jne    c00210e0 <IDE::detect()+0x124>
c00210b9:	47                   	inc    edi
c00210ba:	81 ff 17 01 00 00    	cmp    edi,0x117
c00210c0:	7e da                	jle    c002109c <IDE::detect()+0xe0>
c00210c2:	50                   	push   eax
c00210c3:	50                   	push   eax
c00210c4:	6a 00                	push   0x0
c00210c6:	68 40 4b 4c 00       	push   0x4c4b40
c00210cb:	e8 72 ae ff ff       	call   c001bf42 <nanoSleep(unsigned long long)>
c00210d0:	83 c4 10             	add    esp,0x10
c00210d3:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c00210d9:	75 c1                	jne    c002109c <IDE::detect()+0xe0>
c00210db:	e9 5f 01 00 00       	jmp    c002123f <IDE::detect()+0x283>
c00210e0:	31 c9                	xor    ecx,ecx
c00210e2:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00210e6:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00210ea:	83 ec 0c             	sub    esp,0xc
c00210ed:	68 80 00 00 00       	push   0x80
c00210f2:	57                   	push   edi
c00210f3:	6a 00                	push   0x0
c00210f5:	56                   	push   esi
c00210f6:	53                   	push   ebx
c00210f7:	e8 f4 fd ff ff       	call   c0020ef0 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c00210fc:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0021101:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0021105:	89 d1                	mov    ecx,edx
c0021107:	c1 e0 06             	shl    eax,0x6
c002110a:	01 d8                	add    eax,ebx
c002110c:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0021113:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c002111a:	89 f2                	mov    edx,esi
c002111c:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0021122:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0021126:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c002112c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021130:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0021137:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c002113f:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0021146:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c002114e:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0021154:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c002115b:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0021161:	8d 54 24 58          	lea    edx,[esp+0x58]
c0021165:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0021169:	83 c4 20             	add    esp,0x20
c002116c:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c002116f:	83 c0 02             	add    eax,0x2
c0021172:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0021178:	83 c7 02             	add    edi,0x2
c002117b:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c002117e:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0021184:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0021188:	75 e2                	jne    c002116c <IDE::detect()+0x1b0>
c002118a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002118e:	c1 e0 06             	shl    eax,0x6
c0021191:	01 d8                	add    eax,ebx
c0021193:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0021199:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00211a0:	66 c1 ea 09          	shr    dx,0x9
c00211a4:	83 e2 01             	and    edx,0x1
c00211a7:	84 c9                	test   cl,cl
c00211a9:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00211af:	75 2f                	jne    c00211e0 <IDE::detect()+0x224>
c00211b1:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c00211b7:	85 c0                	test   eax,eax
c00211b9:	74 66                	je     c0021221 <IDE::detect()+0x265>
c00211bb:	50                   	push   eax
c00211bc:	55                   	push   ebp
c00211bd:	56                   	push   esi
c00211be:	68 ff 8f 02 c0       	push   0xc0028fff
c00211c3:	e8 67 10 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c00211c8:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00211cf:	e8 6c 0f ff ff       	call   c0012140 <operator new(unsigned long)>
c00211d4:	89 c7                	mov    edi,eax
c00211d6:	89 04 24             	mov    DWORD PTR [esp],eax
c00211d9:	e8 e8 02 00 00       	call   c00214c6 <ATA::ATA()>
c00211de:	eb 28                	jmp    c0021208 <IDE::detect()+0x24c>
c00211e0:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c00211e6:	55                   	push   ebp
c00211e7:	56                   	push   esi
c00211e8:	68 2e 90 02 c0       	push   0xc002902e
c00211ed:	e8 3d 10 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c00211f2:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c00211f9:	e8 42 0f ff ff       	call   c0012140 <operator new(unsigned long)>
c00211fe:	89 c7                	mov    edi,eax
c0021200:	89 04 24             	mov    DWORD PTR [esp],eax
c0021203:	e8 ee 08 00 00       	call   c0021af6 <ATAPI::ATAPI()>
c0021208:	5a                   	pop    edx
c0021209:	59                   	pop    ecx
c002120a:	57                   	push   edi
c002120b:	53                   	push   ebx
c002120c:	e8 29 24 ff ff       	call   c001363a <Device::addChild(Device*)>
c0021211:	8b 07                	mov    eax,DWORD PTR [edi]
c0021213:	53                   	push   ebx
c0021214:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021218:	6a 00                	push   0x0
c002121a:	57                   	push   edi
c002121b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002121e:	83 c4 20             	add    esp,0x20
c0021221:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0021225:	4d                   	dec    ebp
c0021226:	74 0a                	je     c0021232 <IDE::detect()+0x276>
c0021228:	bd 01 00 00 00       	mov    ebp,0x1
c002122d:	e9 bb fd ff ff       	jmp    c0020fed <IDE::detect()+0x31>
c0021232:	4e                   	dec    esi
c0021233:	74 63                	je     c0021298 <IDE::detect()+0x2dc>
c0021235:	be 01 00 00 00       	mov    esi,0x1
c002123a:	e9 ac fd ff ff       	jmp    c0020feb <IDE::detect()+0x2f>
c002123f:	50                   	push   eax
c0021240:	6a 04                	push   0x4
c0021242:	56                   	push   esi
c0021243:	53                   	push   ebx
c0021244:	e8 05 f7 ff ff       	call   c002094e <IDE::read(unsigned char, unsigned char)>
c0021249:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c002124d:	83 c4 0c             	add    esp,0xc
c0021250:	6a 05                	push   0x5
c0021252:	56                   	push   esi
c0021253:	53                   	push   ebx
c0021254:	e8 f5 f6 ff ff       	call   c002094e <IDE::read(unsigned char, unsigned char)>
c0021259:	83 c4 10             	add    esp,0x10
c002125c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0021260:	80 fa 14             	cmp    dl,0x14
c0021263:	75 04                	jne    c0021269 <IDE::detect()+0x2ad>
c0021265:	3c eb                	cmp    al,0xeb
c0021267:	eb 07                	jmp    c0021270 <IDE::detect()+0x2b4>
c0021269:	3c 96                	cmp    al,0x96
c002126b:	75 b8                	jne    c0021225 <IDE::detect()+0x269>
c002126d:	80 fa 69             	cmp    dl,0x69
c0021270:	75 b3                	jne    c0021225 <IDE::detect()+0x269>
c0021272:	68 a1 00 00 00       	push   0xa1
c0021277:	6a 07                	push   0x7
c0021279:	56                   	push   esi
c002127a:	53                   	push   ebx
c002127b:	e8 0e f6 ff ff       	call   c002088e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021280:	5f                   	pop    edi
c0021281:	58                   	pop    eax
c0021282:	6a 00                	push   0x0
c0021284:	68 40 42 0f 00       	push   0xf4240
c0021289:	e8 b4 ac ff ff       	call   c001bf42 <nanoSleep(unsigned long long)>
c002128e:	83 c4 10             	add    esp,0x10
c0021291:	b1 01                	mov    cl,0x1
c0021293:	e9 4a fe ff ff       	jmp    c00210e2 <IDE::detect()+0x126>
c0021298:	81 c4 1c 02 00 00    	add    esp,0x21c
c002129e:	5b                   	pop    ebx
c002129f:	5e                   	pop    esi
c00212a0:	5f                   	pop    edi
c00212a1:	5d                   	pop    ebp
c00212a2:	c3                   	ret    
c00212a3:	90                   	nop

c00212a4 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00212a4:	55                   	push   ebp
c00212a5:	57                   	push   edi
c00212a6:	56                   	push   esi
c00212a7:	53                   	push   ebx
c00212a8:	83 ec 1c             	sub    esp,0x1c
c00212ab:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00212af:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00212b3:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00212b7:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00212bb:	88 c3                	mov    bl,al
c00212bd:	84 c0                	test   al,al
c00212bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00212c3:	0f 84 67 01 00 00    	je     c0021430 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c00212c9:	83 ec 0c             	sub    esp,0xc
c00212cc:	68 5f 90 02 c0       	push   0xc002905f
c00212d1:	e8 59 0f ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c00212d6:	83 c4 10             	add    esp,0x10
c00212d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00212dd:	3c 01                	cmp    al,0x1
c00212df:	75 17                	jne    c00212f8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c00212e1:	83 ec 0c             	sub    esp,0xc
c00212e4:	b3 13                	mov    bl,0x13
c00212e6:	68 6b 90 02 c0       	push   0xc002906b
c00212eb:	e8 3f 0f ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c00212f0:	83 c4 10             	add    esp,0x10
c00212f3:	e9 25 01 00 00       	jmp    c002141d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00212f8:	3c 02                	cmp    al,0x2
c00212fa:	0f 85 ef 00 00 00    	jne    c00213ef <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0021300:	d1 e6                	shl    esi,1
c0021302:	09 ee                	or     esi,ebp
c0021304:	52                   	push   edx
c0021305:	89 f0                	mov    eax,esi
c0021307:	6a 01                	push   0x1
c0021309:	0f b6 f0             	movzx  esi,al
c002130c:	c1 e6 06             	shl    esi,0x6
c002130f:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0021317:	50                   	push   eax
c0021318:	57                   	push   edi
c0021319:	e8 30 f6 ff ff       	call   c002094e <IDE::read(unsigned char, unsigned char)>
c002131e:	83 c4 10             	add    esp,0x10
c0021321:	89 c6                	mov    esi,eax
c0021323:	a8 01                	test   al,0x1
c0021325:	74 12                	je     c0021339 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0021327:	83 ec 0c             	sub    esp,0xc
c002132a:	b3 07                	mov    bl,0x7
c002132c:	68 80 90 02 c0       	push   0xc0029080
c0021331:	e8 f9 0e ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c0021336:	83 c4 10             	add    esp,0x10
c0021339:	f7 c6 02 00 00 00    	test   esi,0x2
c002133f:	74 12                	je     c0021353 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0021341:	83 ec 0c             	sub    esp,0xc
c0021344:	b3 03                	mov    bl,0x3
c0021346:	68 9e 90 02 c0       	push   0xc002909e
c002134b:	e8 df 0e ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c0021350:	83 c4 10             	add    esp,0x10
c0021353:	f7 c6 04 00 00 00    	test   esi,0x4
c0021359:	74 12                	je     c002136d <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c002135b:	83 ec 0c             	sub    esp,0xc
c002135e:	b3 14                	mov    bl,0x14
c0021360:	68 be 90 02 c0       	push   0xc00290be
c0021365:	e8 c5 0e ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c002136a:	83 c4 10             	add    esp,0x10
c002136d:	f7 c6 08 00 00 00    	test   esi,0x8
c0021373:	74 12                	je     c0021387 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0021375:	83 ec 0c             	sub    esp,0xc
c0021378:	b3 03                	mov    bl,0x3
c002137a:	68 9e 90 02 c0       	push   0xc002909e
c002137f:	e8 ab 0e ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c0021384:	83 c4 10             	add    esp,0x10
c0021387:	f7 c6 10 00 00 00    	test   esi,0x10
c002138d:	74 12                	je     c00213a1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c002138f:	83 ec 0c             	sub    esp,0xc
c0021392:	b3 15                	mov    bl,0x15
c0021394:	68 d6 90 02 c0       	push   0xc00290d6
c0021399:	e8 91 0e ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c002139e:	83 c4 10             	add    esp,0x10
c00213a1:	f7 c6 20 00 00 00    	test   esi,0x20
c00213a7:	74 12                	je     c00213bb <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c00213a9:	83 ec 0c             	sub    esp,0xc
c00213ac:	b3 03                	mov    bl,0x3
c00213ae:	68 9e 90 02 c0       	push   0xc002909e
c00213b3:	e8 77 0e ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c00213b8:	83 c4 10             	add    esp,0x10
c00213bb:	f7 c6 40 00 00 00    	test   esi,0x40
c00213c1:	74 12                	je     c00213d5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c00213c3:	83 ec 0c             	sub    esp,0xc
c00213c6:	b3 16                	mov    bl,0x16
c00213c8:	68 f0 90 02 c0       	push   0xc00290f0
c00213cd:	e8 5d 0e ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c00213d2:	83 c4 10             	add    esp,0x10
c00213d5:	89 f0                	mov    eax,esi
c00213d7:	84 c0                	test   al,al
c00213d9:	79 42                	jns    c002141d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00213db:	83 ec 0c             	sub    esp,0xc
c00213de:	b3 0d                	mov    bl,0xd
c00213e0:	68 11 91 02 c0       	push   0xc0029111
c00213e5:	e8 45 0e ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c00213ea:	83 c4 10             	add    esp,0x10
c00213ed:	eb 2e                	jmp    c002141d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00213ef:	3c 03                	cmp    al,0x3
c00213f1:	75 14                	jne    c0021407 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c00213f3:	83 ec 0c             	sub    esp,0xc
c00213f6:	b3 17                	mov    bl,0x17
c00213f8:	68 25 91 02 c0       	push   0xc0029125
c00213fd:	e8 2d 0e ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c0021402:	83 c4 10             	add    esp,0x10
c0021405:	eb 16                	jmp    c002141d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0021407:	3c 04                	cmp    al,0x4
c0021409:	75 12                	jne    c002141d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002140b:	83 ec 0c             	sub    esp,0xc
c002140e:	b3 08                	mov    bl,0x8
c0021410:	68 3b 91 02 c0       	push   0xc002913b
c0021415:	e8 15 0e ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c002141a:	83 c4 10             	add    esp,0x10
c002141d:	50                   	push   eax
c002141e:	50                   	push   eax
c002141f:	0f b6 c3             	movzx  eax,bl
c0021422:	50                   	push   eax
c0021423:	68 53 91 02 c0       	push   0xc0029153
c0021428:	e8 02 0e ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c002142d:	83 c4 10             	add    esp,0x10
c0021430:	83 c4 1c             	add    esp,0x1c
c0021433:	88 d8                	mov    al,bl
c0021435:	5b                   	pop    ebx
c0021436:	5e                   	pop    esi
c0021437:	5f                   	pop    edi
c0021438:	5d                   	pop    ebp
c0021439:	c3                   	ret    

c002143a <IDE::polling(unsigned char, unsigned int)>:
c002143a:	57                   	push   edi
c002143b:	56                   	push   esi
c002143c:	53                   	push   ebx
c002143d:	bb 04 00 00 00       	mov    ebx,0x4
c0021442:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0021446:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002144b:	52                   	push   edx
c002144c:	6a 0c                	push   0xc
c002144e:	56                   	push   esi
c002144f:	57                   	push   edi
c0021450:	e8 f9 f4 ff ff       	call   c002094e <IDE::read(unsigned char, unsigned char)>
c0021455:	83 c4 10             	add    esp,0x10
c0021458:	4b                   	dec    ebx
c0021459:	75 f0                	jne    c002144b <IDE::polling(unsigned char, unsigned int)+0x11>
c002145b:	bb a0 86 01 00       	mov    ebx,0x186a0
c0021460:	50                   	push   eax
c0021461:	6a 0c                	push   0xc
c0021463:	56                   	push   esi
c0021464:	57                   	push   edi
c0021465:	e8 e4 f4 ff ff       	call   c002094e <IDE::read(unsigned char, unsigned char)>
c002146a:	83 c4 10             	add    esp,0x10
c002146d:	a8 01                	test   al,0x1
c002146f:	74 12                	je     c0021483 <IDE::polling(unsigned char, unsigned int)+0x49>
c0021471:	83 ec 0c             	sub    esp,0xc
c0021474:	68 6d 91 02 c0       	push   0xc002916d
c0021479:	e8 b1 0d ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c002147e:	83 c4 10             	add    esp,0x10
c0021481:	eb 17                	jmp    c002149a <IDE::polling(unsigned char, unsigned int)+0x60>
c0021483:	a8 20                	test   al,0x20
c0021485:	75 0f                	jne    c0021496 <IDE::polling(unsigned char, unsigned int)+0x5c>
c0021487:	4b                   	dec    ebx
c0021488:	74 10                	je     c002149a <IDE::polling(unsigned char, unsigned int)+0x60>
c002148a:	84 c0                	test   al,al
c002148c:	78 d2                	js     c0021460 <IDE::polling(unsigned char, unsigned int)+0x26>
c002148e:	a8 08                	test   al,0x8
c0021490:	74 ce                	je     c0021460 <IDE::polling(unsigned char, unsigned int)+0x26>
c0021492:	31 c0                	xor    eax,eax
c0021494:	eb 06                	jmp    c002149c <IDE::polling(unsigned char, unsigned int)+0x62>
c0021496:	b0 01                	mov    al,0x1
c0021498:	eb 02                	jmp    c002149c <IDE::polling(unsigned char, unsigned int)+0x62>
c002149a:	b0 02                	mov    al,0x2
c002149c:	5b                   	pop    ebx
c002149d:	5e                   	pop    esi
c002149e:	5f                   	pop    edi
c002149f:	c3                   	ret    

c00214a0 <ATA::close(int, int, void*)>:
c00214a0:	83 ec 0c             	sub    esp,0xc
c00214a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214a7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00214ad:	85 c0                	test   eax,eax
c00214af:	74 0c                	je     c00214bd <ATA::close(int, int, void*)+0x1d>
c00214b1:	83 ec 0c             	sub    esp,0xc
c00214b4:	8b 10                	mov    edx,DWORD PTR [eax]
c00214b6:	50                   	push   eax
c00214b7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00214ba:	83 c4 10             	add    esp,0x10
c00214bd:	31 c0                	xor    eax,eax
c00214bf:	83 c4 0c             	add    esp,0xc
c00214c2:	c3                   	ret    
c00214c3:	90                   	nop

c00214c4 <ATA::powerSaving(PowerSavingLevel)>:
c00214c4:	c3                   	ret    
c00214c5:	90                   	nop

c00214c6 <ATA::ATA()>:
c00214c6:	83 ec 0c             	sub    esp,0xc
c00214c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214cd:	83 ec 04             	sub    esp,0x4
c00214d0:	68 00 02 00 00       	push   0x200
c00214d5:	68 b0 91 02 c0       	push   0xc00291b0
c00214da:	50                   	push   eax
c00214db:	e8 60 25 ff ff       	call   c0013a40 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00214e0:	83 c4 10             	add    esp,0x10
c00214e3:	ba dc 91 02 c0       	mov    edx,0xc00291dc
c00214e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214ec:	89 10                	mov    DWORD PTR [eax],edx
c00214ee:	90                   	nop
c00214ef:	83 c4 0c             	add    esp,0xc
c00214f2:	c3                   	ret    
c00214f3:	90                   	nop

c00214f4 <ATA::flush(bool)>:
c00214f4:	53                   	push   ebx
c00214f5:	83 ec 08             	sub    esp,0x8
c00214f8:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c00214fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021501:	19 c0                	sbb    eax,eax
c0021503:	83 e0 fd             	and    eax,0xfffffffd
c0021506:	05 ea 00 00 00       	add    eax,0xea
c002150b:	50                   	push   eax
c002150c:	6a 07                	push   0x7
c002150e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021515:	50                   	push   eax
c0021516:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002151c:	e8 6d f3 ff ff       	call   c002088e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021521:	83 c4 0c             	add    esp,0xc
c0021524:	6a 00                	push   0x0
c0021526:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002152d:	50                   	push   eax
c002152e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021534:	e8 01 ff ff ff       	call   c002143a <IDE::polling(unsigned char, unsigned int)>
c0021539:	83 c4 18             	add    esp,0x18
c002153c:	5b                   	pop    ebx
c002153d:	c3                   	ret    

c002153e <ATA::readyForCommand()>:
c002153e:	56                   	push   esi
c002153f:	53                   	push   ebx
c0021540:	31 db                	xor    ebx,ebx
c0021542:	50                   	push   eax
c0021543:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0021547:	50                   	push   eax
c0021548:	6a 0c                	push   0xc
c002154a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0021551:	50                   	push   eax
c0021552:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0021558:	e8 f1 f3 ff ff       	call   c002094e <IDE::read(unsigned char, unsigned char)>
c002155d:	83 c4 10             	add    esp,0x10
c0021560:	a8 88                	test   al,0x88
c0021562:	74 23                	je     c0021587 <ATA::readyForCommand()+0x49>
c0021564:	43                   	inc    ebx
c0021565:	83 fb 63             	cmp    ebx,0x63
c0021568:	7e dd                	jle    c0021547 <ATA::readyForCommand()+0x9>
c002156a:	51                   	push   ecx
c002156b:	51                   	push   ecx
c002156c:	6a 00                	push   0x0
c002156e:	68 40 42 0f 00       	push   0xf4240
c0021573:	e8 ca a9 ff ff       	call   c001bf42 <nanoSleep(unsigned long long)>
c0021578:	83 c4 10             	add    esp,0x10
c002157b:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0021581:	75 c4                	jne    c0021547 <ATA::readyForCommand()+0x9>
c0021583:	31 c0                	xor    eax,eax
c0021585:	eb 02                	jmp    c0021589 <ATA::readyForCommand()+0x4b>
c0021587:	b0 01                	mov    al,0x1
c0021589:	5a                   	pop    edx
c002158a:	5b                   	pop    ebx
c002158b:	5e                   	pop    esi
c002158c:	c3                   	ret    
c002158d:	90                   	nop

c002158e <ATA::access(unsigned long long, int, void*, bool)>:
c002158e:	55                   	push   ebp
c002158f:	57                   	push   edi
c0021590:	56                   	push   esi
c0021591:	53                   	push   ebx
c0021592:	83 ec 2c             	sub    esp,0x2c
c0021595:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0021599:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002159d:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00215a1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00215a5:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00215a9:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00215ad:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00215b1:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00215b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00215bb:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00215c1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00215c5:	c1 e0 06             	shl    eax,0x6
c00215c8:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c00215d0:	74 5d                	je     c002162f <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c00215d2:	89 fa                	mov    edx,edi
c00215d4:	89 f0                	mov    eax,esi
c00215d6:	0f ac d0 1c          	shrd   eax,edx,0x1c
c00215da:	c1 ea 1c             	shr    edx,0x1c
c00215dd:	89 d1                	mov    ecx,edx
c00215df:	09 c1                	or     ecx,eax
c00215e1:	74 25                	je     c0021608 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c00215e3:	31 ed                	xor    ebp,ebp
c00215e5:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c00215ec:	89 fa                	mov    edx,edi
c00215ee:	89 f0                	mov    eax,esi
c00215f0:	0f ad d0             	shrd   eax,edx,cl
c00215f3:	d3 ea                	shr    edx,cl
c00215f5:	f6 c1 20             	test   cl,0x20
c00215f8:	74 02                	je     c00215fc <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c00215fa:	89 d0                	mov    eax,edx
c00215fc:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0021600:	45                   	inc    ebp
c0021601:	83 fd 06             	cmp    ebp,0x6
c0021604:	75 df                	jne    c00215e5 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0021606:	eb 76                	jmp    c002167e <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0021608:	89 f0                	mov    eax,esi
c002160a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c002160f:	89 fa                	mov    edx,edi
c0021611:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0021618:	0f ac d0 10          	shrd   eax,edx,0x10
c002161c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0021621:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0021625:	c1 ee 18             	shr    esi,0x18
c0021628:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c002162d:	eb 56                	jmp    c0021685 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c002162f:	6a 00                	push   0x0
c0021631:	6a 3f                	push   0x3f
c0021633:	57                   	push   edi
c0021634:	56                   	push   esi
c0021635:	e8 02 20 00 00       	call   c002363c <__umoddi3>
c002163a:	83 c4 10             	add    esp,0x10
c002163d:	40                   	inc    eax
c002163e:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0021642:	6a 00                	push   0x0
c0021644:	68 f0 03 00 00       	push   0x3f0
c0021649:	57                   	push   edi
c002164a:	56                   	push   esi
c002164b:	e8 ec 1e 00 00       	call   c002353c <__udivdi3>
c0021650:	83 c4 10             	add    esp,0x10
c0021653:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0021658:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002165f:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0021664:	6a 00                	push   0x0
c0021666:	6a 3f                	push   0x3f
c0021668:	57                   	push   edi
c0021669:	56                   	push   esi
c002166a:	e8 cd 1e 00 00       	call   c002353c <__udivdi3>
c002166f:	83 c4 10             	add    esp,0x10
c0021672:	89 c6                	mov    esi,eax
c0021674:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0021679:	83 e6 0f             	and    esi,0xf
c002167c:	eb 07                	jmp    c0021685 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c002167e:	31 f6                	xor    esi,esi
c0021680:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0021685:	bf 01 00 00 00       	mov    edi,0x1
c002168a:	50                   	push   eax
c002168b:	6a 00                	push   0x0
c002168d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021694:	50                   	push   eax
c0021695:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021699:	e8 fc f3 ff ff       	call   c0020a9a <IDE::enableIRQs(unsigned char, bool)>
c002169e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00216a1:	e8 98 fe ff ff       	call   c002153e <ATA::readyForCommand()>
c00216a6:	83 c4 10             	add    esp,0x10
c00216a9:	84 c0                	test   al,al
c00216ab:	0f 84 50 02 00 00    	je     c0021901 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c00216b1:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00216b7:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00216bd:	c1 e0 04             	shl    eax,0x4
c00216c0:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c00216c7:	09 c6                	or     esi,eax
c00216c9:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c00216ce:	75 05                	jne    c00216d5 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c00216d0:	83 ce a0             	or     esi,0xffffffa0
c00216d3:	eb 03                	jmp    c00216d8 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c00216d5:	83 ce e0             	or     esi,0xffffffe0
c00216d8:	89 f0                	mov    eax,esi
c00216da:	0f b6 f0             	movzx  esi,al
c00216dd:	56                   	push   esi
c00216de:	6a 06                	push   0x6
c00216e0:	51                   	push   ecx
c00216e1:	52                   	push   edx
c00216e2:	e8 a7 f1 ff ff       	call   c002088e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00216e7:	83 c4 10             	add    esp,0x10
c00216ea:	6a 00                	push   0x0
c00216ec:	6a 01                	push   0x1
c00216ee:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00216f5:	50                   	push   eax
c00216f6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00216fc:	e8 8d f1 ff ff       	call   c002088e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021701:	83 c4 10             	add    esp,0x10
c0021704:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0021709:	75 6e                	jne    c0021779 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c002170b:	6a 00                	push   0x0
c002170d:	6a 08                	push   0x8
c002170f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021716:	50                   	push   eax
c0021717:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002171d:	e8 6c f1 ff ff       	call   c002088e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021722:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0021727:	50                   	push   eax
c0021728:	6a 09                	push   0x9
c002172a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021731:	50                   	push   eax
c0021732:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021738:	e8 51 f1 ff ff       	call   c002088e <IDE::write(unsigned char, unsigned char, unsigned char)>
c002173d:	83 c4 20             	add    esp,0x20
c0021740:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0021745:	50                   	push   eax
c0021746:	6a 0a                	push   0xa
c0021748:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002174f:	50                   	push   eax
c0021750:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021756:	e8 33 f1 ff ff       	call   c002088e <IDE::write(unsigned char, unsigned char, unsigned char)>
c002175b:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0021760:	50                   	push   eax
c0021761:	6a 0b                	push   0xb
c0021763:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002176a:	50                   	push   eax
c002176b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021771:	e8 18 f1 ff ff       	call   c002088e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021776:	83 c4 20             	add    esp,0x20
c0021779:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c002177e:	50                   	push   eax
c002177f:	6a 02                	push   0x2
c0021781:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021788:	50                   	push   eax
c0021789:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002178f:	e8 fa f0 ff ff       	call   c002088e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021794:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0021799:	50                   	push   eax
c002179a:	6a 03                	push   0x3
c002179c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00217a3:	50                   	push   eax
c00217a4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00217aa:	e8 df f0 ff ff       	call   c002088e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00217af:	83 c4 20             	add    esp,0x20
c00217b2:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00217b7:	50                   	push   eax
c00217b8:	6a 04                	push   0x4
c00217ba:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00217c1:	50                   	push   eax
c00217c2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00217c8:	e8 c1 f0 ff ff       	call   c002088e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00217cd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00217d2:	50                   	push   eax
c00217d3:	6a 05                	push   0x5
c00217d5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00217dc:	50                   	push   eax
c00217dd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00217e3:	e8 a6 f0 ff ff       	call   c002088e <IDE::write(unsigned char, unsigned char, unsigned char)>
c00217e8:	83 c4 20             	add    esp,0x20
c00217eb:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00217f0:	0f 94 c0             	sete   al
c00217f3:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00217f8:	74 09                	je     c0021803 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c00217fa:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0021801:	eb 07                	jmp    c002180a <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0021803:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c002180a:	0f b6 c0             	movzx  eax,al
c002180d:	50                   	push   eax
c002180e:	6a 07                	push   0x7
c0021810:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021817:	50                   	push   eax
c0021818:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002181e:	e8 6b f0 ff ff       	call   c002088e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021823:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0021827:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c002182b:	83 c4 10             	add    esp,0x10
c002182e:	85 f6                	test   esi,esi
c0021830:	0f 84 ac 00 00 00    	je     c00218e2 <ATA::access(unsigned long long, int, void*, bool)+0x354>
c0021836:	50                   	push   eax
c0021837:	6a 01                	push   0x1
c0021839:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021840:	50                   	push   eax
c0021841:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021847:	e8 ee fb ff ff       	call   c002143a <IDE::polling(unsigned char, unsigned int)>
c002184c:	83 c4 10             	add    esp,0x10
c002184f:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0021855:	84 c0                	test   al,al
c0021857:	74 20                	je     c0021879 <ATA::access(unsigned long long, int, void*, bool)+0x2eb>
c0021859:	0f b6 f8             	movzx  edi,al
c002185c:	0f b6 d2             	movzx  edx,dl
c002185f:	57                   	push   edi
c0021860:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0021867:	50                   	push   eax
c0021868:	52                   	push   edx
c0021869:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002186f:	e8 30 fa ff ff       	call   c00212a4 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0021874:	e9 85 00 00 00       	jmp    c00218fe <ATA::access(unsigned long long, int, void*, bool)+0x370>
c0021879:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c002187e:	74 41                	je     c00218c1 <ATA::access(unsigned long long, int, void*, bool)+0x333>
c0021880:	31 c9                	xor    ecx,ecx
c0021882:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c0021886:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002188a:	50                   	push   eax
c002188b:	50                   	push   eax
c002188c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021893:	50                   	push   eax
c0021894:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002189a:	e8 dd ef ff ff       	call   c002087c <IDE::getBase(unsigned char)>
c002189f:	89 c2                	mov    edx,eax
c00218a1:	89 e8                	mov    eax,ebp
c00218a3:	66 ef                	out    dx,ax
c00218a5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00218a9:	83 c4 10             	add    esp,0x10
c00218ac:	41                   	inc    ecx
c00218ad:	81 f9 00 01 00 00    	cmp    ecx,0x100
c00218b3:	75 cd                	jne    c0021882 <ATA::access(unsigned long long, int, void*, bool)+0x2f4>
c00218b5:	4e                   	dec    esi
c00218b6:	81 c7 00 02 00 00    	add    edi,0x200
c00218bc:	e9 6d ff ff ff       	jmp    c002182e <ATA::access(unsigned long long, int, void*, bool)+0x2a0>
c00218c1:	0f b6 d2             	movzx  edx,dl
c00218c4:	51                   	push   ecx
c00218c5:	51                   	push   ecx
c00218c6:	52                   	push   edx
c00218c7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00218cd:	e8 aa ef ff ff       	call   c002087c <IDE::getBase(unsigned char)>
c00218d2:	b9 00 01 00 00       	mov    ecx,0x100
c00218d7:	89 c2                	mov    edx,eax
c00218d9:	fc                   	cld    
c00218da:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c00218dd:	83 c4 10             	add    esp,0x10
c00218e0:	eb d3                	jmp    c00218b5 <ATA::access(unsigned long long, int, void*, bool)+0x327>
c00218e2:	31 ff                	xor    edi,edi
c00218e4:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00218e9:	74 16                	je     c0021901 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c00218eb:	50                   	push   eax
c00218ec:	50                   	push   eax
c00218ed:	31 c0                	xor    eax,eax
c00218ef:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c00218f4:	0f 94 c0             	sete   al
c00218f7:	50                   	push   eax
c00218f8:	53                   	push   ebx
c00218f9:	e8 f6 fb ff ff       	call   c00214f4 <ATA::flush(bool)>
c00218fe:	83 c4 10             	add    esp,0x10
c0021901:	83 c4 2c             	add    esp,0x2c
c0021904:	89 f8                	mov    eax,edi
c0021906:	5b                   	pop    ebx
c0021907:	5e                   	pop    esi
c0021908:	5f                   	pop    edi
c0021909:	5d                   	pop    ebp
c002190a:	c3                   	ret    
c002190b:	90                   	nop

c002190c <ATA::read(unsigned long long, int, void*)>:
c002190c:	57                   	push   edi
c002190d:	b8 04 00 00 00       	mov    eax,0x4
c0021912:	56                   	push   esi
c0021913:	53                   	push   ebx
c0021914:	83 ec 10             	sub    esp,0x10
c0021917:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002191b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002191f:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0021922:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021926:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002192a:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0021930:	77 3b                	ja     c002196d <ATA::read(unsigned long long, int, void*)+0x61>
c0021932:	b8 06 00 00 00       	mov    eax,0x6
c0021937:	85 d2                	test   edx,edx
c0021939:	74 32                	je     c002196d <ATA::read(unsigned long long, int, void*)+0x61>
c002193b:	50                   	push   eax
c002193c:	50                   	push   eax
c002193d:	6a 00                	push   0x0
c002193f:	52                   	push   edx
c0021940:	53                   	push   ebx
c0021941:	57                   	push   edi
c0021942:	56                   	push   esi
c0021943:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021947:	e8 42 fc ff ff       	call   c002158e <ATA::access(unsigned long long, int, void*, bool)>
c002194c:	83 c4 20             	add    esp,0x20
c002194f:	85 c0                	test   eax,eax
c0021951:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021955:	75 11                	jne    c0021968 <ATA::read(unsigned long long, int, void*)+0x5c>
c0021957:	01 1d e8 c8 02 c0    	add    DWORD PTR ds:0xc002c8e8,ebx
c002195d:	e8 a0 e7 fe ff       	call   c0010102 <VgaText::updateDiskUsage()>
c0021962:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021966:	eb 05                	jmp    c002196d <ATA::read(unsigned long long, int, void*)+0x61>
c0021968:	b8 01 00 00 00       	mov    eax,0x1
c002196d:	83 c4 10             	add    esp,0x10
c0021970:	5b                   	pop    ebx
c0021971:	5e                   	pop    esi
c0021972:	5f                   	pop    edi
c0021973:	c3                   	ret    

c0021974 <ATA::write(unsigned long long, int, void*)>:
c0021974:	57                   	push   edi
c0021975:	b8 04 00 00 00       	mov    eax,0x4
c002197a:	56                   	push   esi
c002197b:	53                   	push   ebx
c002197c:	83 ec 10             	sub    esp,0x10
c002197f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0021983:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021987:	8d 4b ff             	lea    ecx,[ebx-0x1]
c002198a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002198e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021992:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0021998:	77 3b                	ja     c00219d5 <ATA::write(unsigned long long, int, void*)+0x61>
c002199a:	b8 06 00 00 00       	mov    eax,0x6
c002199f:	85 d2                	test   edx,edx
c00219a1:	74 32                	je     c00219d5 <ATA::write(unsigned long long, int, void*)+0x61>
c00219a3:	50                   	push   eax
c00219a4:	50                   	push   eax
c00219a5:	6a 01                	push   0x1
c00219a7:	52                   	push   edx
c00219a8:	53                   	push   ebx
c00219a9:	57                   	push   edi
c00219aa:	56                   	push   esi
c00219ab:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00219af:	e8 da fb ff ff       	call   c002158e <ATA::access(unsigned long long, int, void*, bool)>
c00219b4:	83 c4 20             	add    esp,0x20
c00219b7:	85 c0                	test   eax,eax
c00219b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00219bd:	75 11                	jne    c00219d0 <ATA::write(unsigned long long, int, void*)+0x5c>
c00219bf:	01 1d e4 c8 02 c0    	add    DWORD PTR ds:0xc002c8e4,ebx
c00219c5:	e8 38 e7 fe ff       	call   c0010102 <VgaText::updateDiskUsage()>
c00219ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00219ce:	eb 05                	jmp    c00219d5 <ATA::write(unsigned long long, int, void*)+0x61>
c00219d0:	b8 01 00 00 00       	mov    eax,0x1
c00219d5:	83 c4 10             	add    esp,0x10
c00219d8:	5b                   	pop    ebx
c00219d9:	5e                   	pop    esi
c00219da:	5f                   	pop    edi
c00219db:	c3                   	ret    

c00219dc <ATA::detectCHS()>:
c00219dc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00219e0:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c00219e6:	c1 e0 06             	shl    eax,0x6
c00219e9:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c00219ef:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c00219f9:	c7 44 24 04 bf 91 02 c0 	mov    DWORD PTR [esp+0x4],0xc00291bf
c0021a01:	e9 a1 70 ff ff       	jmp    c0018aa7 <Krnl::panic(char const*)>

c0021a06 <ATA::open(int, int, void*)>:
c0021a06:	53                   	push   ebx
c0021a07:	83 ec 08             	sub    esp,0x8
c0021a0a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021a0e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021a12:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021a16:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0021a1c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0021a22:	c1 e0 06             	shl    eax,0x6
c0021a25:	01 d0                	add    eax,edx
c0021a27:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0021a2e:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0021a34:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0021a3b:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0021a45:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0021a4b:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0021a52:	75 0c                	jne    c0021a60 <ATA::open(int, int, void*)+0x5a>
c0021a54:	83 ec 0c             	sub    esp,0xc
c0021a57:	53                   	push   ebx
c0021a58:	e8 7f ff ff ff       	call   c00219dc <ATA::detectCHS()>
c0021a5d:	83 c4 10             	add    esp,0x10
c0021a60:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0021a66:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0021a6c:	c1 e0 06             	shl    eax,0x6
c0021a6f:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0021a76:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0021a80:	d1 e8                	shr    eax,1
c0021a82:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0021a88:	6a 04                	push   0x4
c0021a8a:	6a 0c                	push   0xc
c0021a8c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021a93:	50                   	push   eax
c0021a94:	52                   	push   edx
c0021a95:	e8 f4 ed ff ff       	call   c002088e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021a9a:	90                   	nop
c0021a9b:	90                   	nop
c0021a9c:	6a 00                	push   0x0
c0021a9e:	6a 0c                	push   0xc
c0021aa0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021aa7:	50                   	push   eax
c0021aa8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021aae:	e8 db ed ff ff       	call   c002088e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021ab3:	83 c4 14             	add    esp,0x14
c0021ab6:	53                   	push   ebx
c0021ab7:	e8 ec 1f ff ff       	call   c0013aa8 <PhysicalDisk::startCache()>
c0021abc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021abf:	e8 9a 3f ff ff       	call   c0015a5e <createPartitionsForDisk(PhysicalDisk*)>
c0021ac4:	31 c0                	xor    eax,eax
c0021ac6:	83 c4 18             	add    esp,0x18
c0021ac9:	5b                   	pop    ebx
c0021aca:	c3                   	ret    
c0021acb:	90                   	nop

c0021acc <ATAPI::write(unsigned long long, int, void*)>:
c0021acc:	b8 03 00 00 00       	mov    eax,0x3
c0021ad1:	c3                   	ret    

c0021ad2 <ATAPI::close(int, int, void*)>:
c0021ad2:	83 ec 0c             	sub    esp,0xc
c0021ad5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ad9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0021adf:	85 c0                	test   eax,eax
c0021ae1:	74 0c                	je     c0021aef <ATAPI::close(int, int, void*)+0x1d>
c0021ae3:	83 ec 0c             	sub    esp,0xc
c0021ae6:	8b 10                	mov    edx,DWORD PTR [eax]
c0021ae8:	50                   	push   eax
c0021ae9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0021aec:	83 c4 10             	add    esp,0x10
c0021aef:	31 c0                	xor    eax,eax
c0021af1:	83 c4 0c             	add    esp,0xc
c0021af4:	c3                   	ret    
c0021af5:	90                   	nop

c0021af6 <ATAPI::ATAPI()>:
c0021af6:	83 ec 0c             	sub    esp,0xc
c0021af9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021afd:	83 ec 04             	sub    esp,0x4
c0021b00:	68 00 08 00 00       	push   0x800
c0021b05:	68 08 92 02 c0       	push   0xc0029208
c0021b0a:	50                   	push   eax
c0021b0b:	e8 30 1f ff ff       	call   c0013a40 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0021b10:	83 c4 10             	add    esp,0x10
c0021b13:	ba 48 92 02 c0       	mov    edx,0xc0029248
c0021b18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b1c:	89 10                	mov    DWORD PTR [eax],edx
c0021b1e:	90                   	nop
c0021b1f:	83 c4 0c             	add    esp,0xc
c0021b22:	c3                   	ret    
c0021b23:	90                   	nop

c0021b24 <ATAPI::readyForCommand()>:
c0021b24:	56                   	push   esi
c0021b25:	53                   	push   ebx
c0021b26:	31 db                	xor    ebx,ebx
c0021b28:	50                   	push   eax
c0021b29:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0021b2d:	50                   	push   eax
c0021b2e:	6a 0c                	push   0xc
c0021b30:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0021b37:	50                   	push   eax
c0021b38:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0021b3e:	e8 0b ee ff ff       	call   c002094e <IDE::read(unsigned char, unsigned char)>
c0021b43:	83 c4 10             	add    esp,0x10
c0021b46:	a8 88                	test   al,0x88
c0021b48:	74 23                	je     c0021b6d <ATAPI::readyForCommand()+0x49>
c0021b4a:	43                   	inc    ebx
c0021b4b:	83 fb 63             	cmp    ebx,0x63
c0021b4e:	7e dd                	jle    c0021b2d <ATAPI::readyForCommand()+0x9>
c0021b50:	51                   	push   ecx
c0021b51:	51                   	push   ecx
c0021b52:	6a 00                	push   0x0
c0021b54:	68 40 42 0f 00       	push   0xf4240
c0021b59:	e8 e4 a3 ff ff       	call   c001bf42 <nanoSleep(unsigned long long)>
c0021b5e:	83 c4 10             	add    esp,0x10
c0021b61:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0021b67:	75 c4                	jne    c0021b2d <ATAPI::readyForCommand()+0x9>
c0021b69:	31 c0                	xor    eax,eax
c0021b6b:	eb 02                	jmp    c0021b6f <ATAPI::readyForCommand()+0x4b>
c0021b6d:	b0 01                	mov    al,0x1
c0021b6f:	5a                   	pop    edx
c0021b70:	5b                   	pop    ebx
c0021b71:	5e                   	pop    esi
c0021b72:	c3                   	ret    
c0021b73:	90                   	nop

c0021b74 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0021b74:	55                   	push   ebp
c0021b75:	57                   	push   edi
c0021b76:	56                   	push   esi
c0021b77:	53                   	push   ebx
c0021b78:	83 ec 20             	sub    esp,0x20
c0021b7b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0021b7f:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0021b83:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0021b87:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0021b8b:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021b8f:	6a 01                	push   0x1
c0021b91:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021b98:	50                   	push   eax
c0021b99:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021b9f:	e8 f6 ee ff ff       	call   c0020a9a <IDE::enableIRQs(unsigned char, bool)>
c0021ba4:	5e                   	pop    esi
c0021ba5:	58                   	pop    eax
c0021ba6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021bad:	50                   	push   eax
c0021bae:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021bb4:	e8 af ec ff ff       	call   c0020868 <IDE::prepareInterrupt(unsigned char)>
c0021bb9:	89 3c 24             	mov    DWORD PTR [esp],edi
c0021bbc:	e8 63 ff ff ff       	call   c0021b24 <ATAPI::readyForCommand()>
c0021bc1:	83 c4 10             	add    esp,0x10
c0021bc4:	84 c0                	test   al,al
c0021bc6:	75 0a                	jne    c0021bd2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0021bc8:	bb 01 00 00 00       	mov    ebx,0x1
c0021bcd:	e9 57 02 00 00       	jmp    c0021e29 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0021bd2:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0021bd8:	c1 e0 04             	shl    eax,0x4
c0021bdb:	0f b6 c0             	movzx  eax,al
c0021bde:	50                   	push   eax
c0021bdf:	6a 06                	push   0x6
c0021be1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021be8:	50                   	push   eax
c0021be9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021bef:	e8 9a ec ff ff       	call   c002088e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021bf4:	6a 00                	push   0x0
c0021bf6:	6a 01                	push   0x1
c0021bf8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021bff:	50                   	push   eax
c0021c00:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021c06:	e8 83 ec ff ff       	call   c002088e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021c0b:	83 c4 20             	add    esp,0x20
c0021c0e:	0f b6 c3             	movzx  eax,bl
c0021c11:	0f b6 df             	movzx  ebx,bh
c0021c14:	50                   	push   eax
c0021c15:	6a 04                	push   0x4
c0021c17:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021c1e:	50                   	push   eax
c0021c1f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021c25:	e8 64 ec ff ff       	call   c002088e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021c2a:	53                   	push   ebx
c0021c2b:	6a 05                	push   0x5
c0021c2d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021c34:	50                   	push   eax
c0021c35:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021c3b:	e8 4e ec ff ff       	call   c002088e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021c40:	83 c4 20             	add    esp,0x20
c0021c43:	68 a0 00 00 00       	push   0xa0
c0021c48:	6a 07                	push   0x7
c0021c4a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021c51:	50                   	push   eax
c0021c52:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021c58:	e8 31 ec ff ff       	call   c002088e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021c5d:	83 c4 0c             	add    esp,0xc
c0021c60:	6a 01                	push   0x1
c0021c62:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021c69:	50                   	push   eax
c0021c6a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021c70:	e8 c5 f7 ff ff       	call   c002143a <IDE::polling(unsigned char, unsigned int)>
c0021c75:	83 c4 10             	add    esp,0x10
c0021c78:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0021c7e:	84 c0                	test   al,al
c0021c80:	74 23                	je     c0021ca5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0021c82:	0f b6 d8             	movzx  ebx,al
c0021c85:	0f b6 d2             	movzx  edx,dl
c0021c88:	53                   	push   ebx
c0021c89:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0021c90:	50                   	push   eax
c0021c91:	52                   	push   edx
c0021c92:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021c98:	e8 07 f6 ff ff       	call   c00212a4 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0021c9d:	83 c4 10             	add    esp,0x10
c0021ca0:	e9 84 01 00 00       	jmp    c0021e29 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0021ca5:	0f b6 d2             	movzx  edx,dl
c0021ca8:	53                   	push   ebx
c0021ca9:	53                   	push   ebx
c0021caa:	52                   	push   edx
c0021cab:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021cb1:	e8 c6 eb ff ff       	call   c002087c <IDE::getBase(unsigned char)>
c0021cb6:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0021cba:	b9 06 00 00 00       	mov    ecx,0x6
c0021cbf:	89 c2                	mov    edx,eax
c0021cc1:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0021cc4:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0021cc8:	83 c4 10             	add    esp,0x10
c0021ccb:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0021cd1:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0021cd8:	85 db                	test   ebx,ebx
c0021cda:	0f 84 ec 00 00 00    	je     c0021dcc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0021ce0:	51                   	push   ecx
c0021ce1:	51                   	push   ecx
c0021ce2:	52                   	push   edx
c0021ce3:	50                   	push   eax
c0021ce4:	e8 13 ed ff ff       	call   c00209fc <IDE::waitInterrupt(unsigned char)>
c0021ce9:	83 c4 10             	add    esp,0x10
c0021cec:	84 c0                	test   al,al
c0021cee:	0f 84 d4 fe ff ff    	je     c0021bc8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0021cf4:	56                   	push   esi
c0021cf5:	56                   	push   esi
c0021cf6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021cfd:	50                   	push   eax
c0021cfe:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021d04:	e8 5f eb ff ff       	call   c0020868 <IDE::prepareInterrupt(unsigned char)>
c0021d09:	83 c4 0c             	add    esp,0xc
c0021d0c:	6a 04                	push   0x4
c0021d0e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021d15:	50                   	push   eax
c0021d16:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021d1c:	e8 2d ec ff ff       	call   c002094e <IDE::read(unsigned char, unsigned char)>
c0021d21:	83 c4 0c             	add    esp,0xc
c0021d24:	89 c6                	mov    esi,eax
c0021d26:	6a 05                	push   0x5
c0021d28:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021d2f:	50                   	push   eax
c0021d30:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021d36:	e8 13 ec ff ff       	call   c002094e <IDE::read(unsigned char, unsigned char)>
c0021d3b:	89 f1                	mov    ecx,esi
c0021d3d:	0f b6 c0             	movzx  eax,al
c0021d40:	0f b6 f1             	movzx  esi,cl
c0021d43:	c1 e0 08             	shl    eax,0x8
c0021d46:	09 c6                	or     esi,eax
c0021d48:	d1 fe                	sar    esi,1
c0021d4a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0021d4e:	83 c4 10             	add    esp,0x10
c0021d51:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0021d56:	74 41                	je     c0021d99 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0021d58:	31 c9                	xor    ecx,ecx
c0021d5a:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0021d60:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0021d67:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0021d6b:	75 0a                	jne    c0021d77 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0021d6d:	01 c9                	add    ecx,ecx
c0021d6f:	01 cd                	add    ebp,ecx
c0021d71:	4b                   	dec    ebx
c0021d72:	e9 54 ff ff ff       	jmp    c0021ccb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0021d77:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0021d7c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0021d80:	51                   	push   ecx
c0021d81:	51                   	push   ecx
c0021d82:	52                   	push   edx
c0021d83:	50                   	push   eax
c0021d84:	e8 f3 ea ff ff       	call   c002087c <IDE::getBase(unsigned char)>
c0021d89:	89 c2                	mov    edx,eax
c0021d8b:	89 f0                	mov    eax,esi
c0021d8d:	66 ef                	out    dx,ax
c0021d8f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0021d93:	83 c4 10             	add    esp,0x10
c0021d96:	41                   	inc    ecx
c0021d97:	eb c1                	jmp    c0021d5a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0021d99:	31 f6                	xor    esi,esi
c0021d9b:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0021da1:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0021da8:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0021dac:	75 06                	jne    c0021db4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0021dae:	01 f6                	add    esi,esi
c0021db0:	01 f5                	add    ebp,esi
c0021db2:	eb bd                	jmp    c0021d71 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0021db4:	51                   	push   ecx
c0021db5:	51                   	push   ecx
c0021db6:	52                   	push   edx
c0021db7:	50                   	push   eax
c0021db8:	e8 bf ea ff ff       	call   c002087c <IDE::getBase(unsigned char)>
c0021dbd:	89 c2                	mov    edx,eax
c0021dbf:	66 ed                	in     ax,dx
c0021dc1:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0021dc6:	83 c4 10             	add    esp,0x10
c0021dc9:	46                   	inc    esi
c0021dca:	eb cf                	jmp    c0021d9b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0021dcc:	51                   	push   ecx
c0021dcd:	51                   	push   ecx
c0021dce:	52                   	push   edx
c0021dcf:	50                   	push   eax
c0021dd0:	e8 27 ec ff ff       	call   c00209fc <IDE::waitInterrupt(unsigned char)>
c0021dd5:	83 c4 10             	add    esp,0x10
c0021dd8:	84 c0                	test   al,al
c0021dda:	0f 84 e8 fd ff ff    	je     c0021bc8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0021de0:	bb a0 86 01 00       	mov    ebx,0x186a0
c0021de5:	52                   	push   edx
c0021de6:	52                   	push   edx
c0021de7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021dee:	50                   	push   eax
c0021def:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021df5:	e8 6e ea ff ff       	call   c0020868 <IDE::prepareInterrupt(unsigned char)>
c0021dfa:	83 c4 10             	add    esp,0x10
c0021dfd:	50                   	push   eax
c0021dfe:	50                   	push   eax
c0021dff:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021e06:	50                   	push   eax
c0021e07:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021e0d:	e8 6a ea ff ff       	call   c002087c <IDE::getBase(unsigned char)>
c0021e12:	8d 50 07             	lea    edx,[eax+0x7]
c0021e15:	ec                   	in     al,dx
c0021e16:	83 c4 10             	add    esp,0x10
c0021e19:	a8 88                	test   al,0x88
c0021e1b:	74 0a                	je     c0021e27 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0021e1d:	4b                   	dec    ebx
c0021e1e:	75 dd                	jne    c0021dfd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0021e20:	bb 02 00 00 00       	mov    ebx,0x2
c0021e25:	eb 02                	jmp    c0021e29 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0021e27:	31 db                	xor    ebx,ebx
c0021e29:	83 c4 1c             	add    esp,0x1c
c0021e2c:	89 d8                	mov    eax,ebx
c0021e2e:	5b                   	pop    ebx
c0021e2f:	5e                   	pop    esi
c0021e30:	5f                   	pop    edi
c0021e31:	5d                   	pop    ebp
c0021e32:	c3                   	ret    
c0021e33:	90                   	nop

c0021e34 <ATAPI::diskRemoved()>:
c0021e34:	83 ec 18             	sub    esp,0x18
c0021e37:	68 13 92 02 c0       	push   0xc0029213
c0021e3c:	e8 ee 03 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c0021e41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021e45:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0021e4c:	83 c4 1c             	add    esp,0x1c
c0021e4f:	c3                   	ret    

c0021e50 <ATAPI::eject()>:
c0021e50:	57                   	push   edi
c0021e51:	b9 03 00 00 00       	mov    ecx,0x3
c0021e56:	53                   	push   ebx
c0021e57:	83 ec 14             	sub    esp,0x14
c0021e5a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0021e5e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0021e62:	fc                   	cld    
c0021e63:	31 c0                	xor    eax,eax
c0021e65:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0021e67:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0021e6c:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0021e71:	50                   	push   eax
c0021e72:	50                   	push   eax
c0021e73:	6a 00                	push   0x0
c0021e75:	6a 00                	push   0x0
c0021e77:	6a 00                	push   0x0
c0021e79:	6a 02                	push   0x2
c0021e7b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021e7f:	50                   	push   eax
c0021e80:	53                   	push   ebx
c0021e81:	e8 ee fc ff ff       	call   c0021b74 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0021e86:	83 c4 14             	add    esp,0x14
c0021e89:	53                   	push   ebx
c0021e8a:	e8 a5 ff ff ff       	call   c0021e34 <ATAPI::diskRemoved()>
c0021e8f:	83 c4 24             	add    esp,0x24
c0021e92:	5b                   	pop    ebx
c0021e93:	5f                   	pop    edi
c0021e94:	c3                   	ret    
c0021e95:	90                   	nop

c0021e96 <ATAPI::diskInserted()>:
c0021e96:	53                   	push   ebx
c0021e97:	83 ec 14             	sub    esp,0x14
c0021e9a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0021e9e:	68 29 92 02 c0       	push   0xc0029229
c0021ea3:	e8 87 03 ff ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c0021ea8:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0021eaf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021eb2:	e8 f1 1b ff ff       	call   c0013aa8 <PhysicalDisk::startCache()>
c0021eb7:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0021ebb:	83 c4 18             	add    esp,0x18
c0021ebe:	5b                   	pop    ebx
c0021ebf:	e9 9a 3b ff ff       	jmp    c0015a5e <createPartitionsForDisk(PhysicalDisk*)>

c0021ec4 <ATAPI::detectMedia()>:
c0021ec4:	56                   	push   esi
c0021ec5:	53                   	push   ebx
c0021ec6:	83 ec 28             	sub    esp,0x28
c0021ec9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021ecd:	6a 0c                	push   0xc
c0021ecf:	6a 00                	push   0x0
c0021ed1:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0021ed5:	56                   	push   esi
c0021ed6:	e8 a2 e7 fd ff       	call   c000067d <memset>
c0021edb:	58                   	pop    eax
c0021edc:	5a                   	pop    edx
c0021edd:	6a 00                	push   0x0
c0021edf:	6a 00                	push   0x0
c0021ee1:	6a 00                	push   0x0
c0021ee3:	6a 00                	push   0x0
c0021ee5:	56                   	push   esi
c0021ee6:	53                   	push   ebx
c0021ee7:	e8 88 fc ff ff       	call   c0021b74 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0021eec:	83 c4 1c             	add    esp,0x1c
c0021eef:	6a 0c                	push   0xc
c0021ef1:	6a 00                	push   0x0
c0021ef3:	56                   	push   esi
c0021ef4:	e8 84 e7 fd ff       	call   c000067d <memset>
c0021ef9:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0021efe:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0021f03:	59                   	pop    ecx
c0021f04:	58                   	pop    eax
c0021f05:	6a 01                	push   0x1
c0021f07:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0021f0b:	50                   	push   eax
c0021f0c:	6a 00                	push   0x0
c0021f0e:	6a 12                	push   0x12
c0021f10:	56                   	push   esi
c0021f11:	53                   	push   ebx
c0021f12:	e8 5d fc ff ff       	call   c0021b74 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0021f17:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0021f1b:	83 c4 20             	add    esp,0x20
c0021f1e:	83 e0 7f             	and    eax,0x7f
c0021f21:	3c 70                	cmp    al,0x70
c0021f23:	74 15                	je     c0021f3a <ATAPI::detectMedia()+0x76>
c0021f25:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0021f2c:	75 0c                	jne    c0021f3a <ATAPI::detectMedia()+0x76>
c0021f2e:	83 ec 0c             	sub    esp,0xc
c0021f31:	53                   	push   ebx
c0021f32:	e8 5f ff ff ff       	call   c0021e96 <ATAPI::diskInserted()>
c0021f37:	83 c4 10             	add    esp,0x10
c0021f3a:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0021f3e:	83 e0 0f             	and    eax,0xf
c0021f41:	3c 02                	cmp    al,0x2
c0021f43:	75 1b                	jne    c0021f60 <ATAPI::detectMedia()+0x9c>
c0021f45:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0021f4a:	75 2d                	jne    c0021f79 <ATAPI::detectMedia()+0xb5>
c0021f4c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0021f53:	74 24                	je     c0021f79 <ATAPI::detectMedia()+0xb5>
c0021f55:	83 ec 0c             	sub    esp,0xc
c0021f58:	53                   	push   ebx
c0021f59:	e8 d6 fe ff ff       	call   c0021e34 <ATAPI::diskRemoved()>
c0021f5e:	eb 16                	jmp    c0021f76 <ATAPI::detectMedia()+0xb2>
c0021f60:	84 c0                	test   al,al
c0021f62:	75 15                	jne    c0021f79 <ATAPI::detectMedia()+0xb5>
c0021f64:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0021f6b:	75 0c                	jne    c0021f79 <ATAPI::detectMedia()+0xb5>
c0021f6d:	83 ec 0c             	sub    esp,0xc
c0021f70:	53                   	push   ebx
c0021f71:	e8 20 ff ff ff       	call   c0021e96 <ATAPI::diskInserted()>
c0021f76:	83 c4 10             	add    esp,0x10
c0021f79:	83 c4 24             	add    esp,0x24
c0021f7c:	5b                   	pop    ebx
c0021f7d:	5e                   	pop    esi
c0021f7e:	c3                   	ret    
c0021f7f:	90                   	nop

c0021f80 <ATAPI::open(int, int, void*)>:
c0021f80:	53                   	push   ebx
c0021f81:	83 ec 08             	sub    esp,0x8
c0021f84:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021f88:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021f8c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021f90:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0021f96:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0021f9c:	c1 e0 06             	shl    eax,0x6
c0021f9f:	01 d0                	add    eax,edx
c0021fa1:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0021fa8:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0021fae:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0021fb5:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0021fbf:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0021fc5:	6a 04                	push   0x4
c0021fc7:	6a 0c                	push   0xc
c0021fc9:	51                   	push   ecx
c0021fca:	52                   	push   edx
c0021fcb:	e8 be e8 ff ff       	call   c002088e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021fd0:	90                   	nop
c0021fd1:	90                   	nop
c0021fd2:	6a 00                	push   0x0
c0021fd4:	6a 0c                	push   0xc
c0021fd6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021fdd:	50                   	push   eax
c0021fde:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021fe4:	e8 a5 e8 ff ff       	call   c002088e <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021fe9:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0021ff0:	83 c4 14             	add    esp,0x14
c0021ff3:	53                   	push   ebx
c0021ff4:	e8 cb fe ff ff       	call   c0021ec4 <ATAPI::detectMedia()>
c0021ff9:	31 c0                	xor    eax,eax
c0021ffb:	83 c4 18             	add    esp,0x18
c0021ffe:	5b                   	pop    ebx
c0021fff:	c3                   	ret    

c0022000 <ATAPI::read(unsigned long long, int, void*)>:
c0022000:	55                   	push   ebp
c0022001:	57                   	push   edi
c0022002:	56                   	push   esi
c0022003:	53                   	push   ebx
c0022004:	83 ec 1c             	sub    esp,0x1c
c0022007:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002200b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002200f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0022013:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c002201a:	74 41                	je     c002205d <ATAPI::read(unsigned long long, int, void*)+0x5d>
c002201c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0022020:	b9 03 00 00 00       	mov    ecx,0x3
c0022025:	fc                   	cld    
c0022026:	31 c0                	xor    eax,eax
c0022028:	86 fb                	xchg   bl,bh
c002202a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002202c:	c1 c3 10             	rol    ebx,0x10
c002202f:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0022034:	89 e8                	mov    eax,ebp
c0022036:	86 fb                	xchg   bl,bh
c0022038:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002203c:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0022040:	50                   	push   eax
c0022041:	50                   	push   eax
c0022042:	55                   	push   ebp
c0022043:	c1 e5 0b             	shl    ebp,0xb
c0022046:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002204a:	6a 00                	push   0x0
c002204c:	55                   	push   ebp
c002204d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022051:	50                   	push   eax
c0022052:	56                   	push   esi
c0022053:	e8 1c fb ff ff       	call   c0021b74 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0022058:	83 c4 20             	add    esp,0x20
c002205b:	eb 1a                	jmp    c0022077 <ATAPI::read(unsigned long long, int, void*)+0x77>
c002205d:	83 ec 0c             	sub    esp,0xc
c0022060:	56                   	push   esi
c0022061:	e8 5e fe ff ff       	call   c0021ec4 <ATAPI::detectMedia()>
c0022066:	83 c4 10             	add    esp,0x10
c0022069:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0022070:	75 aa                	jne    c002201c <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0022072:	b8 02 00 00 00       	mov    eax,0x2
c0022077:	83 c4 1c             	add    esp,0x1c
c002207a:	5b                   	pop    ebx
c002207b:	5e                   	pop    esi
c002207c:	5f                   	pop    edi
c002207d:	5d                   	pop    ebp
c002207e:	c3                   	ret    
c002207f:	90                   	nop

c0022080 <AVX::open(int, int, void*)>:
c0022080:	83 ec 0c             	sub    esp,0xc
c0022083:	e8 30 11 00 00       	call   c00231b8 <avxInit>
c0022088:	b8 00 00 00 00       	mov    eax,0x0
c002208d:	83 c4 0c             	add    esp,0xc
c0022090:	c3                   	ret    
c0022091:	90                   	nop

c0022092 <AVX::close(int, int, void*)>:
c0022092:	83 ec 0c             	sub    esp,0xc
c0022095:	e8 1f 11 00 00       	call   c00231b9 <avxClose>
c002209a:	b8 00 00 00 00       	mov    eax,0x0
c002209f:	83 c4 0c             	add    esp,0xc
c00220a2:	c3                   	ret    
c00220a3:	90                   	nop

c00220a4 <AVX::available()>:
c00220a4:	83 ec 0c             	sub    esp,0xc
c00220a7:	e8 04 11 00 00       	call   c00231b0 <avxDetect>
c00220ac:	85 c0                	test   eax,eax
c00220ae:	0f 95 c0             	setne  al
c00220b1:	83 c4 0c             	add    esp,0xc
c00220b4:	c3                   	ret    
c00220b5:	90                   	nop

c00220b6 <AVX::save(void*)>:
c00220b6:	83 ec 0c             	sub    esp,0xc
c00220b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00220bd:	83 ec 0c             	sub    esp,0xc
c00220c0:	50                   	push   eax
c00220c1:	e8 f0 10 00 00       	call   c00231b6 <avxSave>
c00220c6:	83 c4 10             	add    esp,0x10
c00220c9:	90                   	nop
c00220ca:	83 c4 0c             	add    esp,0xc
c00220cd:	c3                   	ret    

c00220ce <AVX::load(void*)>:
c00220ce:	83 ec 0c             	sub    esp,0xc
c00220d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00220d5:	83 ec 0c             	sub    esp,0xc
c00220d8:	50                   	push   eax
c00220d9:	e8 d9 10 00 00       	call   c00231b7 <avxLoad>
c00220de:	83 c4 10             	add    esp,0x10
c00220e1:	90                   	nop
c00220e2:	83 c4 0c             	add    esp,0xc
c00220e5:	c3                   	ret    

c00220e6 <AVX::AVX()>:
c00220e6:	83 ec 0c             	sub    esp,0xc
c00220e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220ed:	83 ec 08             	sub    esp,0x8
c00220f0:	68 74 92 02 c0       	push   0xc0029274
c00220f5:	50                   	push   eax
c00220f6:	e8 23 1a ff ff       	call   c0013b1e <FPU::FPU(char const*)>
c00220fb:	83 c4 10             	add    esp,0x10
c00220fe:	ba 84 92 02 c0       	mov    edx,0xc0029284
c0022103:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022107:	89 10                	mov    DWORD PTR [eax],edx
c0022109:	90                   	nop
c002210a:	83 c4 0c             	add    esp,0xc
c002210d:	c3                   	ret    

c002210e <MMX::available()>:
c002210e:	a1 28 a6 02 c0       	mov    eax,ds:0xc002a628
c0022113:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0022119:	83 e0 20             	and    eax,0x20
c002211c:	84 c0                	test   al,al
c002211e:	0f 95 c0             	setne  al
c0022121:	c3                   	ret    

c0022122 <MMX::open(int, int, void*)>:
c0022122:	83 ec 0c             	sub    esp,0xc
c0022125:	e8 02 11 00 00       	call   c002322c <x87Init>
c002212a:	b8 00 00 00 00       	mov    eax,0x0
c002212f:	83 c4 0c             	add    esp,0xc
c0022132:	c3                   	ret    
c0022133:	90                   	nop

c0022134 <MMX::close(int, int, void*)>:
c0022134:	83 ec 0c             	sub    esp,0xc
c0022137:	e8 0a 11 00 00       	call   c0023246 <x87Close>
c002213c:	b8 00 00 00 00       	mov    eax,0x0
c0022141:	83 c4 0c             	add    esp,0xc
c0022144:	c3                   	ret    
c0022145:	90                   	nop

c0022146 <MMX::save(void*)>:
c0022146:	83 ec 0c             	sub    esp,0xc
c0022149:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002214d:	83 ec 0c             	sub    esp,0xc
c0022150:	50                   	push   eax
c0022151:	e8 cb 10 00 00       	call   c0023221 <x87Save>
c0022156:	83 c4 10             	add    esp,0x10
c0022159:	90                   	nop
c002215a:	83 c4 0c             	add    esp,0xc
c002215d:	c3                   	ret    

c002215e <MMX::load(void*)>:
c002215e:	83 ec 0c             	sub    esp,0xc
c0022161:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022165:	83 ec 0c             	sub    esp,0xc
c0022168:	50                   	push   eax
c0022169:	e8 b9 10 00 00       	call   c0023227 <x87Load>
c002216e:	83 c4 10             	add    esp,0x10
c0022171:	90                   	nop
c0022172:	83 c4 0c             	add    esp,0xc
c0022175:	c3                   	ret    

c0022176 <MMX::MMX()>:
c0022176:	83 ec 0c             	sub    esp,0xc
c0022179:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002217d:	83 ec 08             	sub    esp,0x8
c0022180:	68 b4 92 02 c0       	push   0xc00292b4
c0022185:	50                   	push   eax
c0022186:	e8 93 19 ff ff       	call   c0013b1e <FPU::FPU(char const*)>
c002218b:	83 c4 10             	add    esp,0x10
c002218e:	ba c4 92 02 c0       	mov    edx,0xc00292c4
c0022193:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022197:	89 10                	mov    DWORD PTR [eax],edx
c0022199:	90                   	nop
c002219a:	83 c4 0c             	add    esp,0xc
c002219d:	c3                   	ret    

c002219e <SSE::open(int, int, void*)>:
c002219e:	83 ec 0c             	sub    esp,0xc
c00221a1:	e8 41 10 00 00       	call   c00231e7 <sseInit>
c00221a6:	b8 00 00 00 00       	mov    eax,0x0
c00221ab:	83 c4 0c             	add    esp,0xc
c00221ae:	c3                   	ret    
c00221af:	90                   	nop

c00221b0 <SSE::close(int, int, void*)>:
c00221b0:	83 ec 0c             	sub    esp,0xc
c00221b3:	e8 3f 10 00 00       	call   c00231f7 <sseClose>
c00221b8:	b8 00 00 00 00       	mov    eax,0x0
c00221bd:	83 c4 0c             	add    esp,0xc
c00221c0:	c3                   	ret    
c00221c1:	90                   	nop

c00221c2 <SSE::available()>:
c00221c2:	83 ec 1c             	sub    esp,0x1c
c00221c5:	e8 f6 0f 00 00       	call   c00231c0 <sseDetect>
c00221ca:	85 c0                	test   eax,eax
c00221cc:	0f 95 c0             	setne  al
c00221cf:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00221d3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00221d7:	83 c4 1c             	add    esp,0x1c
c00221da:	c3                   	ret    
c00221db:	90                   	nop

c00221dc <SSE::save(void*)>:
c00221dc:	83 ec 0c             	sub    esp,0xc
c00221df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00221e3:	83 ec 0c             	sub    esp,0xc
c00221e6:	50                   	push   eax
c00221e7:	e8 ef 0f 00 00       	call   c00231db <sseSave>
c00221ec:	83 c4 10             	add    esp,0x10
c00221ef:	90                   	nop
c00221f0:	83 c4 0c             	add    esp,0xc
c00221f3:	c3                   	ret    

c00221f4 <SSE::load(void*)>:
c00221f4:	83 ec 0c             	sub    esp,0xc
c00221f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00221fb:	83 ec 0c             	sub    esp,0xc
c00221fe:	50                   	push   eax
c00221ff:	e8 dd 0f 00 00       	call   c00231e1 <sseLoad>
c0022204:	83 c4 10             	add    esp,0x10
c0022207:	90                   	nop
c0022208:	83 c4 0c             	add    esp,0xc
c002220b:	c3                   	ret    

c002220c <SSE::SSE()>:
c002220c:	83 ec 0c             	sub    esp,0xc
c002220f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022213:	83 ec 08             	sub    esp,0x8
c0022216:	68 f4 92 02 c0       	push   0xc00292f4
c002221b:	50                   	push   eax
c002221c:	e8 fd 18 ff ff       	call   c0013b1e <FPU::FPU(char const*)>
c0022221:	83 c4 10             	add    esp,0x10
c0022224:	ba 04 93 02 c0       	mov    edx,0xc0029304
c0022229:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002222d:	89 10                	mov    DWORD PTR [eax],edx
c002222f:	90                   	nop
c0022230:	83 c4 0c             	add    esp,0xc
c0022233:	c3                   	ret    

c0022234 <x87::open(int, int, void*)>:
c0022234:	83 ec 0c             	sub    esp,0xc
c0022237:	e8 f0 0f 00 00       	call   c002322c <x87Init>
c002223c:	b8 00 00 00 00       	mov    eax,0x0
c0022241:	83 c4 0c             	add    esp,0xc
c0022244:	c3                   	ret    
c0022245:	90                   	nop

c0022246 <x87::close(int, int, void*)>:
c0022246:	83 ec 0c             	sub    esp,0xc
c0022249:	e8 f8 0f 00 00       	call   c0023246 <x87Close>
c002224e:	b8 00 00 00 00       	mov    eax,0x0
c0022253:	83 c4 0c             	add    esp,0xc
c0022256:	c3                   	ret    
c0022257:	90                   	nop

c0022258 <x87::available()>:
c0022258:	83 ec 0c             	sub    esp,0xc
c002225b:	e8 a6 0f 00 00       	call   c0023206 <x87Detect>
c0022260:	85 c0                	test   eax,eax
c0022262:	0f 95 c0             	setne  al
c0022265:	83 c4 0c             	add    esp,0xc
c0022268:	c3                   	ret    
c0022269:	90                   	nop

c002226a <x87::save(void*)>:
c002226a:	83 ec 0c             	sub    esp,0xc
c002226d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022271:	83 ec 0c             	sub    esp,0xc
c0022274:	50                   	push   eax
c0022275:	e8 a7 0f 00 00       	call   c0023221 <x87Save>
c002227a:	83 c4 10             	add    esp,0x10
c002227d:	90                   	nop
c002227e:	83 c4 0c             	add    esp,0xc
c0022281:	c3                   	ret    

c0022282 <x87::load(void*)>:
c0022282:	83 ec 0c             	sub    esp,0xc
c0022285:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022289:	83 ec 0c             	sub    esp,0xc
c002228c:	50                   	push   eax
c002228d:	e8 95 0f 00 00       	call   c0023227 <x87Load>
c0022292:	83 c4 10             	add    esp,0x10
c0022295:	90                   	nop
c0022296:	83 c4 0c             	add    esp,0xc
c0022299:	c3                   	ret    

c002229a <x87::x87()>:
c002229a:	83 ec 0c             	sub    esp,0xc
c002229d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222a1:	83 ec 08             	sub    esp,0x8
c00222a4:	68 34 93 02 c0       	push   0xc0029334
c00222a9:	50                   	push   eax
c00222aa:	e8 6f 18 ff ff       	call   c0013b1e <FPU::FPU(char const*)>
c00222af:	83 c4 10             	add    esp,0x10
c00222b2:	ba 44 93 02 c0       	mov    edx,0xc0029344
c00222b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222bb:	89 10                	mov    DWORD PTR [eax],edx
c00222bd:	90                   	nop
c00222be:	83 c4 0c             	add    esp,0xc
c00222c1:	c3                   	ret    

c00222c2 <APIC::disable()>:
c00222c2:	90                   	nop
c00222c3:	c3                   	ret    

c00222c4 <APIC::close(int, int, void*)>:
c00222c4:	55                   	push   ebp
c00222c5:	89 e5                	mov    ebp,esp
c00222c7:	83 ec 08             	sub    esp,0x8
c00222ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00222cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00222cf:	83 c0 3c             	add    eax,0x3c
c00222d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00222d4:	83 ec 0c             	sub    esp,0xc
c00222d7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00222da:	ff d0                	call   eax
c00222dc:	83 c4 10             	add    esp,0x10
c00222df:	b8 00 00 00 00       	mov    eax,0x0
c00222e4:	c9                   	leave  
c00222e5:	c3                   	ret    

c00222e6 <IOAPIC::close(int, int, void*)>:
c00222e6:	b8 00 00 00 00       	mov    eax,0x0
c00222eb:	c3                   	ret    

c00222ec <APIC::io_wait()>:
c00222ec:	eb 00                	jmp    c00222ee <APIC::io_wait()+0x2>
c00222ee:	eb 00                	jmp    c00222f0 <APIC::io_wait()+0x4>
c00222f0:	90                   	nop
c00222f1:	c3                   	ret    

c00222f2 <APIC::getBase()>:
c00222f2:	55                   	push   ebp
c00222f3:	89 e5                	mov    ebp,esp
c00222f5:	83 ec 18             	sub    esp,0x18
c00222f8:	a1 28 a6 02 c0       	mov    eax,ds:0xc002a628
c00222fd:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0022303:	83 e0 08             	and    eax,0x8
c0022306:	84 c0                	test   al,al
c0022308:	75 07                	jne    c0022311 <APIC::getBase()+0x1f>
c002230a:	b8 00 00 00 00       	mov    eax,0x0
c002230f:	eb 21                	jmp    c0022332 <APIC::getBase()+0x40>
c0022311:	a1 28 a6 02 c0       	mov    eax,ds:0xc002a628
c0022316:	83 ec 08             	sub    esp,0x8
c0022319:	6a 1b                	push   0x1b
c002231b:	50                   	push   eax
c002231c:	e8 a5 c3 fe ff       	call   c000e6c6 <Computer::rdmsr(unsigned int)>
c0022321:	83 c4 10             	add    esp,0x10
c0022324:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0022327:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002232a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002232d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0022332:	c9                   	leave  
c0022333:	c3                   	ret    

c0022334 <APIC::eoi(unsigned char)>:
c0022334:	55                   	push   ebp
c0022335:	89 e5                	mov    ebp,esp
c0022337:	83 ec 28             	sub    esp,0x28
c002233a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002233d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0022340:	83 ec 0c             	sub    esp,0xc
c0022343:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022346:	e8 a7 ff ff ff       	call   c00222f2 <APIC::getBase()>
c002234b:	83 c4 10             	add    esp,0x10
c002234e:	05 b0 00 00 00       	add    eax,0xb0
c0022353:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0022356:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0022359:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c002235f:	90                   	nop
c0022360:	c9                   	leave  
c0022361:	c3                   	ret    

c0022362 <APIC::open(int, int, void*)>:
c0022362:	55                   	push   ebp
c0022363:	89 e5                	mov    ebp,esp
c0022365:	57                   	push   edi
c0022366:	56                   	push   esi
c0022367:	53                   	push   ebx
c0022368:	83 ec 2c             	sub    esp,0x2c
c002236b:	83 ec 0c             	sub    esp,0xc
c002236e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022371:	e8 7c ff ff ff       	call   c00222f2 <APIC::getBase()>
c0022376:	83 c4 10             	add    esp,0x10
c0022379:	89 c2                	mov    edx,eax
c002237b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002237e:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0022384:	0f b6 f8             	movzx  edi,al
c0022387:	89 d0                	mov    eax,edx
c0022389:	ba 00 00 00 00       	mov    edx,0x0
c002238e:	89 c1                	mov    ecx,eax
c0022390:	80 e5 ff             	and    ch,0xff
c0022393:	89 cb                	mov    ebx,ecx
c0022395:	0f b6 f2             	movzx  esi,dl
c0022398:	89 d8                	mov    eax,ebx
c002239a:	89 f2                	mov    edx,esi
c002239c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002239f:	8d 5f 08             	lea    ebx,[edi+0x8]
c00223a2:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00223a6:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00223aa:	83 e0 00             	and    eax,0x0
c00223ad:	09 d0                	or     eax,edx
c00223af:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00223b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00223b6:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00223bc:	8d 50 01             	lea    edx,[eax+0x1]
c00223bf:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00223c2:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00223c8:	0f b6 d0             	movzx  edx,al
c00223cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00223ce:	83 c2 08             	add    edx,0x8
c00223d1:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00223d5:	0f b6 c9             	movzx  ecx,cl
c00223d8:	81 c9 00 00 01 00    	or     ecx,0x10000
c00223de:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00223e2:	83 ec 0c             	sub    esp,0xc
c00223e5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00223e8:	e8 05 ff ff ff       	call   c00222f2 <APIC::getBase()>
c00223ed:	83 c4 10             	add    esp,0x10
c00223f0:	05 f0 00 00 00       	add    eax,0xf0
c00223f5:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00223f8:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00223fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00223fd:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0022400:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0022407:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c002240e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0022411:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0022414:	89 10                	mov    DWORD PTR [eax],edx
c0022416:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c002241d:	a1 d0 ae 02 c0       	mov    eax,ds:0xc002aed0
c0022422:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0022425:	7d 7c                	jge    c00224a3 <APIC::open(int, int, void*)+0x141>
c0022427:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002242a:	8b 04 85 e0 ae 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5120]
c0022431:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0022434:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0022437:	8b 04 85 e0 ae 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5120]
c002243e:	c1 e8 08             	shr    eax,0x8
c0022441:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0022445:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0022448:	8b 04 85 e0 ae 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5120]
c002244f:	c1 e8 18             	shr    eax,0x18
c0022452:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0022455:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0022459:	75 40                	jne    c002249b <APIC::open(int, int, void*)+0x139>
c002245b:	83 ec 0c             	sub    esp,0xc
c002245e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022461:	e8 8c fe ff ff       	call   c00222f2 <APIC::getBase()>
c0022466:	83 c4 10             	add    esp,0x10
c0022469:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c002246d:	75 07                	jne    c0022476 <APIC::open(int, int, void*)+0x114>
c002246f:	ba 60 03 00 00       	mov    edx,0x360
c0022474:	eb 05                	jmp    c002247b <APIC::open(int, int, void*)+0x119>
c0022476:	ba 50 03 00 00       	mov    edx,0x350
c002247b:	01 d0                	add    eax,edx
c002247d:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0022480:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0022483:	8b 00                	mov    eax,DWORD PTR [eax]
c0022485:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0022488:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c002248f:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0022493:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0022496:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0022499:	89 10                	mov    DWORD PTR [eax],edx
c002249b:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c002249e:	e9 7a ff ff ff       	jmp    c002241d <APIC::open(int, int, void*)+0xbb>
c00224a3:	b8 00 00 00 00       	mov    eax,0x0
c00224a8:	8d 65 f4             	lea    esp,[ebp-0xc]
c00224ab:	5b                   	pop    ebx
c00224ac:	5e                   	pop    esi
c00224ad:	5f                   	pop    edi
c00224ae:	5d                   	pop    ebp
c00224af:	c3                   	ret    

c00224b0 <IOAPIC::IOAPIC()>:
c00224b0:	83 ec 0c             	sub    esp,0xc
c00224b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224b7:	83 ec 08             	sub    esp,0x8
c00224ba:	68 74 93 02 c0       	push   0xc0029374
c00224bf:	50                   	push   eax
c00224c0:	e8 65 13 ff ff       	call   c001382a <Device::Device(char const*)>
c00224c5:	83 c4 10             	add    esp,0x10
c00224c8:	ba 9c 94 02 c0       	mov    edx,0xc002949c
c00224cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224d1:	89 10                	mov    DWORD PTR [eax],edx
c00224d3:	90                   	nop
c00224d4:	83 c4 0c             	add    esp,0xc
c00224d7:	c3                   	ret    

c00224d8 <APIC::APIC()>:
c00224d8:	53                   	push   ebx
c00224d9:	83 ec 18             	sub    esp,0x18
c00224dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224e0:	83 ec 08             	sub    esp,0x8
c00224e3:	68 7c 93 02 c0       	push   0xc002937c
c00224e8:	50                   	push   eax
c00224e9:	e8 94 1a ff ff       	call   c0013f82 <InterruptController::InterruptController(char const*)>
c00224ee:	83 c4 10             	add    esp,0x10
c00224f1:	ba 54 94 02 c0       	mov    edx,0xc0029454
c00224f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224fa:	89 10                	mov    DWORD PTR [eax],edx
c00224fc:	a0 40 c9 02 c0       	mov    al,ds:0xc002c940
c0022501:	83 f0 01             	xor    eax,0x1
c0022504:	84 c0                	test   al,al
c0022506:	0f 84 96 00 00 00    	je     c00225a2 <APIC::APIC()+0xca>
c002250c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0022511:	a0 80 af 02 c0       	mov    al,ds:0xc002af80
c0022516:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c002251a:	73 7f                	jae    c002259b <APIC::APIC()+0xc3>
c002251c:	83 ec 0c             	sub    esp,0xc
c002251f:	68 68 01 00 00       	push   0x168
c0022524:	e8 17 fc fe ff       	call   c0012140 <operator new(unsigned long)>
c0022529:	83 c4 10             	add    esp,0x10
c002252c:	89 c3                	mov    ebx,eax
c002252e:	83 ec 0c             	sub    esp,0xc
c0022531:	53                   	push   ebx
c0022532:	e8 79 ff ff ff       	call   c00224b0 <IOAPIC::IOAPIC()>
c0022537:	83 c4 10             	add    esp,0x10
c002253a:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c002253e:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0022543:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022547:	89 14 85 20 c9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd36e0],edx
c002254e:	a1 00 c9 02 c0       	mov    eax,ds:0xc002c900
c0022553:	40                   	inc    eax
c0022554:	a3 00 c9 02 c0       	mov    ds:0xc002c900,eax
c0022559:	a1 28 a6 02 c0       	mov    eax,ds:0xc002a628
c002255e:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022564:	83 ec 08             	sub    esp,0x8
c0022567:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002256b:	50                   	push   eax
c002256c:	e8 c9 10 ff ff       	call   c001363a <Device::addChild(Device*)>
c0022571:	83 c4 10             	add    esp,0x10
c0022574:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022578:	8b 00                	mov    eax,DWORD PTR [eax]
c002257a:	83 c0 08             	add    eax,0x8
c002257d:	8b 00                	mov    eax,DWORD PTR [eax]
c002257f:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0022584:	6a 00                	push   0x0
c0022586:	6a 00                	push   0x0
c0022588:	52                   	push   edx
c0022589:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002258d:	ff d0                	call   eax
c002258f:	83 c4 10             	add    esp,0x10
c0022592:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0022596:	e9 76 ff ff ff       	jmp    c0022511 <APIC::APIC()+0x39>
c002259b:	c6 05 40 c9 02 c0 01 	mov    BYTE PTR ds:0xc002c940,0x1
c00225a2:	90                   	nop
c00225a3:	83 c4 18             	add    esp,0x18
c00225a6:	5b                   	pop    ebx
c00225a7:	c3                   	ret    

c00225a8 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c00225a8:	55                   	push   ebp
c00225a9:	89 e5                	mov    ebp,esp
c00225ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00225ae:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00225b4:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00225b7:	72 1d                	jb     c00225d6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00225b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00225bc:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00225c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00225c5:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c00225cb:	01 d0                	add    eax,edx
c00225cd:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00225d0:	73 04                	jae    c00225d6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00225d2:	b0 01                	mov    al,0x1
c00225d4:	eb 02                	jmp    c00225d8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c00225d6:	b0 00                	mov    al,0x0
c00225d8:	5d                   	pop    ebp
c00225d9:	c3                   	ret    

c00225da <IOAPIC::read(int)>:
c00225da:	55                   	push   ebp
c00225db:	89 e5                	mov    ebp,esp
c00225dd:	83 ec 10             	sub    esp,0x10
c00225e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00225e3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00225e9:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00225ec:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00225ef:	0f b6 d0             	movzx  edx,al
c00225f2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00225f5:	89 10                	mov    DWORD PTR [eax],edx
c00225f7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00225fa:	83 c0 10             	add    eax,0x10
c00225fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00225ff:	c9                   	leave  
c0022600:	c3                   	ret    
c0022601:	90                   	nop

c0022602 <IOAPIC::open(int, int, void*)>:
c0022602:	55                   	push   ebp
c0022603:	89 e5                	mov    ebp,esp
c0022605:	57                   	push   edi
c0022606:	56                   	push   esi
c0022607:	53                   	push   ebx
c0022608:	83 ec 0c             	sub    esp,0xc
c002260b:	83 ec 0c             	sub    esp,0xc
c002260e:	68 a7 93 02 c0       	push   0xc00293a7
c0022613:	e8 17 fc fe ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c0022618:	83 c4 10             	add    esp,0x10
c002261b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002261e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0022621:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022627:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002262a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0022630:	8b 14 85 c0 af 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5040]
c0022637:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002263a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0022640:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022643:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0022649:	8b 14 85 40 b0 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4fc0]
c0022650:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022653:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0022659:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002265c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0022662:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022665:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002266b:	0f b6 f8             	movzx  edi,al
c002266e:	89 d0                	mov    eax,edx
c0022670:	ba 00 00 00 00       	mov    edx,0x0
c0022675:	89 c1                	mov    ecx,eax
c0022677:	80 e5 ff             	and    ch,0xff
c002267a:	89 cb                	mov    ebx,ecx
c002267c:	0f b6 f2             	movzx  esi,dl
c002267f:	89 d8                	mov    eax,ebx
c0022681:	89 f2                	mov    edx,esi
c0022683:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0022686:	8d 5f 08             	lea    ebx,[edi+0x8]
c0022689:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002268d:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0022691:	83 e0 00             	and    eax,0x0
c0022694:	09 d0                	or     eax,edx
c0022696:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002269a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002269d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00226a3:	8d 50 01             	lea    edx,[eax+0x1]
c00226a6:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00226a9:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00226af:	0f b6 d0             	movzx  edx,al
c00226b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00226b5:	83 c2 08             	add    edx,0x8
c00226b8:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00226bc:	0f b6 c9             	movzx  ecx,cl
c00226bf:	81 c9 00 ad de 00    	or     ecx,0xdead00
c00226c5:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00226c9:	83 ec 08             	sub    esp,0x8
c00226cc:	6a 01                	push   0x1
c00226ce:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00226d1:	e8 04 ff ff ff       	call   c00225da <IOAPIC::read(int)>
c00226d6:	83 c4 10             	add    esp,0x10
c00226d9:	c1 f8 10             	sar    eax,0x10
c00226dc:	0f b6 c0             	movzx  eax,al
c00226df:	8d 50 01             	lea    edx,[eax+0x1]
c00226e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00226e5:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c00226eb:	b8 00 00 00 00       	mov    eax,0x0
c00226f0:	8d 65 f4             	lea    esp,[ebp-0xc]
c00226f3:	5b                   	pop    ebx
c00226f4:	5e                   	pop    esi
c00226f5:	5f                   	pop    edi
c00226f6:	5d                   	pop    ebp
c00226f7:	c3                   	ret    

c00226f8 <IOAPIC::write(int, int)>:
c00226f8:	55                   	push   ebp
c00226f9:	89 e5                	mov    ebp,esp
c00226fb:	83 ec 10             	sub    esp,0x10
c00226fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022701:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0022707:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002270a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002270d:	0f b6 d0             	movzx  edx,al
c0022710:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0022713:	89 10                	mov    DWORD PTR [eax],edx
c0022715:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0022718:	8d 50 10             	lea    edx,[eax+0x10]
c002271b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002271e:	89 02                	mov    DWORD PTR [edx],eax
c0022720:	90                   	nop
c0022721:	c9                   	leave  
c0022722:	c3                   	ret    
c0022723:	90                   	nop

c0022724 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0022724:	55                   	push   ebp
c0022725:	89 e5                	mov    ebp,esp
c0022727:	53                   	push   ebx
c0022728:	83 ec 2c             	sub    esp,0x2c
c002272b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002272e:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0022731:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0022734:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0022737:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002273a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002273d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0022740:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0022743:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0022746:	88 d8                	mov    al,bl
c0022748:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c002274b:	88 c8                	mov    al,cl
c002274d:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0022750:	88 d0                	mov    al,dl
c0022752:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0022755:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0022759:	83 c0 08             	add    eax,0x8
c002275c:	01 c0                	add    eax,eax
c002275e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0022761:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0022765:	83 c0 08             	add    eax,0x8
c0022768:	01 c0                	add    eax,eax
c002276a:	40                   	inc    eax
c002276b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002276e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0022771:	50                   	push   eax
c0022772:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022775:	e8 60 fe ff ff       	call   c00225da <IOAPIC::read(int)>
c002277a:	83 c4 08             	add    esp,0x8
c002277d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0022780:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0022787:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002278a:	c1 e0 18             	shl    eax,0x18
c002278d:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0022790:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0022793:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0022796:	52                   	push   edx
c0022797:	50                   	push   eax
c0022798:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002279b:	e8 58 ff ff ff       	call   c00226f8 <IOAPIC::write(int, int)>
c00227a0:	83 c4 0c             	add    esp,0xc
c00227a3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00227a6:	50                   	push   eax
c00227a7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00227aa:	e8 2b fe ff ff       	call   c00225da <IOAPIC::read(int)>
c00227af:	83 c4 08             	add    esp,0x8
c00227b2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00227b5:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c00227bc:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c00227c3:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c00227ca:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00227ce:	74 09                	je     c00227d9 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c00227d0:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c00227d7:	eb 07                	jmp    c00227e0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c00227d9:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c00227e0:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c00227e4:	74 09                	je     c00227ef <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c00227e6:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c00227ed:	eb 07                	jmp    c00227f6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c00227ef:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c00227f6:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c00227fd:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0022801:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0022804:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0022807:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002280a:	52                   	push   edx
c002280b:	50                   	push   eax
c002280c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002280f:	e8 e4 fe ff ff       	call   c00226f8 <IOAPIC::write(int, int)>
c0022814:	83 c4 0c             	add    esp,0xc
c0022817:	90                   	nop
c0022818:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c002281b:	c9                   	leave  
c002281c:	c3                   	ret    
c002281d:	90                   	nop

c002281e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c002281e:	55                   	push   ebp
c002281f:	89 e5                	mov    ebp,esp
c0022821:	57                   	push   edi
c0022822:	56                   	push   esi
c0022823:	53                   	push   ebx
c0022824:	83 ec 2c             	sub    esp,0x2c
c0022827:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002282a:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002282d:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0022831:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0022835:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0022839:	74 5a                	je     c0022895 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002283b:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c002283f:	7f 44                	jg     c0022885 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0022841:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022844:	05 00 99 02 c0       	add    eax,0xc0029900
c0022849:	8a 00                	mov    al,BYTE PTR [eax]
c002284b:	0f b6 c0             	movzx  eax,al
c002284e:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0022851:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022854:	66 8b 84 00 60 af 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd50a0]
c002285c:	0f b7 c0             	movzx  eax,ax
c002285f:	83 e0 02             	and    eax,0x2
c0022862:	85 c0                	test   eax,eax
c0022864:	74 04                	je     c002286a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0022866:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c002286a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002286d:	66 8b 84 00 60 af 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd50a0]
c0022875:	0f b7 c0             	movzx  eax,ax
c0022878:	83 e0 08             	and    eax,0x8
c002287b:	85 c0                	test   eax,eax
c002287d:	74 16                	je     c0022895 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002287f:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0022883:	eb 10                	jmp    c0022895 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0022885:	83 ec 0c             	sub    esp,0xc
c0022888:	68 b8 93 02 c0       	push   0xc00293b8
c002288d:	e8 15 62 ff ff       	call   c0018aa7 <Krnl::panic(char const*)>
c0022892:	83 c4 10             	add    esp,0x10
c0022895:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0022899:	a1 00 c9 02 c0       	mov    eax,ds:0xc002c900
c002289e:	83 ec 08             	sub    esp,0x8
c00228a1:	50                   	push   eax
c00228a2:	68 f0 93 02 c0       	push   0xc00293f0
c00228a7:	e8 83 f9 fe ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c00228ac:	83 c4 10             	add    esp,0x10
c00228af:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c00228b6:	a1 00 c9 02 c0       	mov    eax,ds:0xc002c900
c00228bb:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c00228be:	7d 67                	jge    c0022927 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00228c0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00228c3:	8b 04 85 20 c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd36e0]
c00228ca:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00228cd:	83 ec 08             	sub    esp,0x8
c00228d0:	52                   	push   edx
c00228d1:	50                   	push   eax
c00228d2:	e8 d1 fc ff ff       	call   c00225a8 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c00228d7:	83 c4 10             	add    esp,0x10
c00228da:	84 c0                	test   al,al
c00228dc:	74 44                	je     c0022922 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c00228de:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00228e1:	8b 1c 85 20 c9 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd36e0]
c00228e8:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c00228ec:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00228ef:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c00228f3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00228f6:	83 c0 20             	add    eax,0x20
c00228f9:	0f b6 f0             	movzx  esi,al
c00228fc:	e8 5a 2d 00 00       	call   c002565b <CPU::getNumber()>
c0022901:	99                   	cdq    
c0022902:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0022905:	0f b6 c9             	movzx  ecx,cl
c0022908:	83 ec 04             	sub    esp,0x4
c002290b:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c002290e:	57                   	push   edi
c002290f:	56                   	push   esi
c0022910:	52                   	push   edx
c0022911:	50                   	push   eax
c0022912:	51                   	push   ecx
c0022913:	53                   	push   ebx
c0022914:	e8 0b fe ff ff       	call   c0022724 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0022919:	83 c4 20             	add    esp,0x20
c002291c:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0022920:	eb 05                	jmp    c0022927 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0022922:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0022925:	eb 8f                	jmp    c00228b6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0022927:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c002292a:	83 f0 01             	xor    eax,0x1
c002292d:	84 c0                	test   al,al
c002292f:	74 10                	je     c0022941 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0022931:	83 ec 0c             	sub    esp,0xc
c0022934:	68 07 94 02 c0       	push   0xc0029407
c0022939:	e8 69 61 ff ff       	call   c0018aa7 <Krnl::panic(char const*)>
c002293e:	83 c4 10             	add    esp,0x10
c0022941:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0022945:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c002294c:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0022950:	7f 65                	jg     c00229b7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0022952:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022955:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0022958:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002295f:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0022962:	01 ca                	add    edx,ecx
c0022964:	83 c2 54             	add    edx,0x54
c0022967:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c002296b:	85 c0                	test   eax,eax
c002296d:	75 43                	jne    c00229b2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c002296f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022972:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0022975:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002297c:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002297f:	01 ca                	add    edx,ecx
c0022981:	8d 4a 54             	lea    ecx,[edx+0x54]
c0022984:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0022987:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c002298b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002298e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0022991:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0022998:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002299b:	01 ca                	add    edx,ecx
c002299d:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c00229a3:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00229a6:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00229aa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00229ad:	83 e8 20             	sub    eax,0x20
c00229b0:	eb 1a                	jmp    c00229cc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c00229b2:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c00229b5:	eb 95                	jmp    c002294c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c00229b7:	83 ec 0c             	sub    esp,0xc
c00229ba:	68 14 94 02 c0       	push   0xc0029414
c00229bf:	e8 e3 60 ff ff       	call   c0018aa7 <Krnl::panic(char const*)>
c00229c4:	83 c4 10             	add    esp,0x10
c00229c7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00229cc:	8d 65 f4             	lea    esp,[ebp-0xc]
c00229cf:	5b                   	pop    ebx
c00229d0:	5e                   	pop    esi
c00229d1:	5f                   	pop    edi
c00229d2:	5d                   	pop    ebp
c00229d3:	c3                   	ret    

c00229d4 <PIC::disable()>:
c00229d4:	55                   	push   ebp
c00229d5:	89 e5                	mov    ebp,esp
c00229d7:	83 ec 10             	sub    esp,0x10
c00229da:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c00229e0:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c00229e4:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00229e7:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00229eb:	ee                   	out    dx,al
c00229ec:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c00229f2:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c00229f6:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00229f9:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00229fd:	ee                   	out    dx,al
c00229fe:	90                   	nop
c00229ff:	c9                   	leave  
c0022a00:	c3                   	ret    
c0022a01:	90                   	nop

c0022a02 <PIC::close(int, int, void*)>:
c0022a02:	55                   	push   ebp
c0022a03:	89 e5                	mov    ebp,esp
c0022a05:	83 ec 08             	sub    esp,0x8
c0022a08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022a0b:	8b 00                	mov    eax,DWORD PTR [eax]
c0022a0d:	83 c0 3c             	add    eax,0x3c
c0022a10:	8b 00                	mov    eax,DWORD PTR [eax]
c0022a12:	83 ec 0c             	sub    esp,0xc
c0022a15:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022a18:	ff d0                	call   eax
c0022a1a:	83 c4 10             	add    esp,0x10
c0022a1d:	b8 00 00 00 00       	mov    eax,0x0
c0022a22:	c9                   	leave  
c0022a23:	c3                   	ret    

c0022a24 <PIC::PIC()>:
c0022a24:	83 ec 0c             	sub    esp,0xc
c0022a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a2b:	83 ec 08             	sub    esp,0x8
c0022a2e:	68 c0 94 02 c0       	push   0xc00294c0
c0022a33:	50                   	push   eax
c0022a34:	e8 49 15 ff ff       	call   c0013f82 <InterruptController::InterruptController(char const*)>
c0022a39:	83 c4 10             	add    esp,0x10
c0022a3c:	ba ec 94 02 c0       	mov    edx,0xc00294ec
c0022a41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a45:	89 10                	mov    DWORD PTR [eax],edx
c0022a47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a4b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022a51:	0f b6 d0             	movzx  edx,al
c0022a54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a58:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0022a5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a63:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022a69:	0f b6 d0             	movzx  edx,al
c0022a6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a70:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0022a75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a79:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022a7f:	8d 50 01             	lea    edx,[eax+0x1]
c0022a82:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022a86:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022a8c:	0f b6 d0             	movzx  edx,al
c0022a8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a93:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022a97:	83 e1 3f             	and    ecx,0x3f
c0022a9a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022a9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022aa2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022aa8:	0f b6 d0             	movzx  edx,al
c0022aab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022aaf:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0022ab6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022aba:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022ac0:	0f b6 d0             	movzx  edx,al
c0022ac3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ac7:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0022acc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ad0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022ad6:	8d 50 01             	lea    edx,[eax+0x1]
c0022ad9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022add:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022ae3:	0f b6 d0             	movzx  edx,al
c0022ae6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022aea:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022aee:	83 e1 3f             	and    ecx,0x3f
c0022af1:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022af5:	90                   	nop
c0022af6:	83 c4 0c             	add    esp,0xc
c0022af9:	c3                   	ret    

c0022afa <PIC::ioWait()>:
c0022afa:	eb 00                	jmp    c0022afc <PIC::ioWait()+0x2>
c0022afc:	eb 00                	jmp    c0022afe <PIC::ioWait()+0x4>
c0022afe:	90                   	nop
c0022aff:	c3                   	ret    

c0022b00 <PIC::getIRQReg(int)>:
c0022b00:	55                   	push   ebp
c0022b01:	89 e5                	mov    ebp,esp
c0022b03:	83 ec 10             	sub    esp,0x10
c0022b06:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022b09:	0f b6 c0             	movzx  eax,al
c0022b0c:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0022b12:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0022b15:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0022b18:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0022b1c:	ee                   	out    dx,al
c0022b1d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022b20:	0f b6 c0             	movzx  eax,al
c0022b23:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0022b29:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0022b2c:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0022b2f:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0022b33:	ee                   	out    dx,al
c0022b34:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0022b3a:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0022b3e:	89 c2                	mov    edx,eax
c0022b40:	ec                   	in     al,dx
c0022b41:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0022b44:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0022b47:	0f b6 c0             	movzx  eax,al
c0022b4a:	c1 e0 08             	shl    eax,0x8
c0022b4d:	89 c1                	mov    ecx,eax
c0022b4f:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0022b55:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0022b59:	89 c2                	mov    edx,eax
c0022b5b:	ec                   	in     al,dx
c0022b5c:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0022b5f:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0022b62:	0f b6 c0             	movzx  eax,al
c0022b65:	09 c8                	or     eax,ecx
c0022b67:	c9                   	leave  
c0022b68:	c3                   	ret    
c0022b69:	90                   	nop

c0022b6a <PIC::eoi(unsigned char)>:
c0022b6a:	55                   	push   ebp
c0022b6b:	89 e5                	mov    ebp,esp
c0022b6d:	83 ec 14             	sub    esp,0x14
c0022b70:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022b73:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0022b76:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0022b7a:	75 1e                	jne    c0022b9a <PIC::eoi(unsigned char)+0x30>
c0022b7c:	6a 0b                	push   0xb
c0022b7e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022b81:	e8 7a ff ff ff       	call   c0022b00 <PIC::getIRQReg(int)>
c0022b86:	83 c4 08             	add    esp,0x8
c0022b89:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0022b8d:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0022b91:	25 80 00 00 00       	and    eax,0x80
c0022b96:	85 c0                	test   eax,eax
c0022b98:	74 5f                	je     c0022bf9 <PIC::eoi(unsigned char)+0x8f>
c0022b9a:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0022b9e:	75 2d                	jne    c0022bcd <PIC::eoi(unsigned char)+0x63>
c0022ba0:	6a 0b                	push   0xb
c0022ba2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022ba5:	e8 56 ff ff ff       	call   c0022b00 <PIC::getIRQReg(int)>
c0022baa:	83 c4 08             	add    esp,0x8
c0022bad:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0022bb1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0022bb4:	66 85 c0             	test   ax,ax
c0022bb7:	78 14                	js     c0022bcd <PIC::eoi(unsigned char)+0x63>
c0022bb9:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0022bbf:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0022bc3:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0022bc6:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0022bca:	ee                   	out    dx,al
c0022bcb:	eb 2d                	jmp    c0022bfa <PIC::eoi(unsigned char)+0x90>
c0022bcd:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0022bd1:	76 12                	jbe    c0022be5 <PIC::eoi(unsigned char)+0x7b>
c0022bd3:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0022bd9:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0022bdd:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0022be0:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0022be4:	ee                   	out    dx,al
c0022be5:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0022beb:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0022bef:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0022bf2:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0022bf6:	ee                   	out    dx,al
c0022bf7:	eb 01                	jmp    c0022bfa <PIC::eoi(unsigned char)+0x90>
c0022bf9:	90                   	nop
c0022bfa:	c9                   	leave  
c0022bfb:	c3                   	ret    

c0022bfc <PIC::remap()>:
c0022bfc:	55                   	push   ebp
c0022bfd:	89 e5                	mov    ebp,esp
c0022bff:	83 ec 48             	sub    esp,0x48
c0022c02:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0022c09:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0022c10:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0022c16:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0022c19:	89 c2                	mov    edx,eax
c0022c1b:	ec                   	in     al,dx
c0022c1c:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0022c1f:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0022c22:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0022c25:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0022c2b:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0022c2e:	89 c2                	mov    edx,eax
c0022c30:	ec                   	in     al,dx
c0022c31:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0022c34:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0022c37:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0022c3a:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0022c40:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0022c44:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0022c47:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0022c4a:	ee                   	out    dx,al
c0022c4b:	83 ec 0c             	sub    esp,0xc
c0022c4e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022c51:	e8 a4 fe ff ff       	call   c0022afa <PIC::ioWait()>
c0022c56:	83 c4 10             	add    esp,0x10
c0022c59:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0022c5f:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0022c63:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0022c66:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0022c69:	ee                   	out    dx,al
c0022c6a:	83 ec 0c             	sub    esp,0xc
c0022c6d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022c70:	e8 85 fe ff ff       	call   c0022afa <PIC::ioWait()>
c0022c75:	83 c4 10             	add    esp,0x10
c0022c78:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0022c7b:	0f b6 c0             	movzx  eax,al
c0022c7e:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0022c84:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0022c87:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0022c8a:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0022c8d:	ee                   	out    dx,al
c0022c8e:	83 ec 0c             	sub    esp,0xc
c0022c91:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022c94:	e8 61 fe ff ff       	call   c0022afa <PIC::ioWait()>
c0022c99:	83 c4 10             	add    esp,0x10
c0022c9c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0022c9f:	0f b6 c0             	movzx  eax,al
c0022ca2:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0022ca8:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0022cab:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0022cae:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0022cb1:	ee                   	out    dx,al
c0022cb2:	83 ec 0c             	sub    esp,0xc
c0022cb5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022cb8:	e8 3d fe ff ff       	call   c0022afa <PIC::ioWait()>
c0022cbd:	83 c4 10             	add    esp,0x10
c0022cc0:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0022cc6:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0022cca:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0022ccd:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0022cd0:	ee                   	out    dx,al
c0022cd1:	83 ec 0c             	sub    esp,0xc
c0022cd4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022cd7:	e8 1e fe ff ff       	call   c0022afa <PIC::ioWait()>
c0022cdc:	83 c4 10             	add    esp,0x10
c0022cdf:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0022ce5:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0022ce9:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0022cec:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0022cef:	ee                   	out    dx,al
c0022cf0:	83 ec 0c             	sub    esp,0xc
c0022cf3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022cf6:	e8 ff fd ff ff       	call   c0022afa <PIC::ioWait()>
c0022cfb:	83 c4 10             	add    esp,0x10
c0022cfe:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0022d04:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0022d08:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0022d0b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0022d0e:	ee                   	out    dx,al
c0022d0f:	83 ec 0c             	sub    esp,0xc
c0022d12:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022d15:	e8 e0 fd ff ff       	call   c0022afa <PIC::ioWait()>
c0022d1a:	83 c4 10             	add    esp,0x10
c0022d1d:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0022d23:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0022d27:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0022d2a:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0022d2d:	ee                   	out    dx,al
c0022d2e:	83 ec 0c             	sub    esp,0xc
c0022d31:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022d34:	e8 c1 fd ff ff       	call   c0022afa <PIC::ioWait()>
c0022d39:	83 c4 10             	add    esp,0x10
c0022d3c:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0022d40:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0022d46:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0022d49:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0022d4c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0022d4f:	ee                   	out    dx,al
c0022d50:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0022d54:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0022d5a:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0022d5d:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0022d60:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0022d63:	ee                   	out    dx,al
c0022d64:	90                   	nop
c0022d65:	c9                   	leave  
c0022d66:	c3                   	ret    
c0022d67:	90                   	nop

c0022d68 <PIC::open(int, int, void*)>:
c0022d68:	55                   	push   ebp
c0022d69:	89 e5                	mov    ebp,esp
c0022d6b:	83 ec 18             	sub    esp,0x18
c0022d6e:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0022d74:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0022d78:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0022d7b:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0022d7f:	ee                   	out    dx,al
c0022d80:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0022d86:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0022d8a:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0022d8d:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0022d91:	ee                   	out    dx,al
c0022d92:	83 ec 0c             	sub    esp,0xc
c0022d95:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022d98:	e8 5f fe ff ff       	call   c0022bfc <PIC::remap()>
c0022d9d:	83 c4 10             	add    esp,0x10
c0022da0:	b8 00 00 00 00       	mov    eax,0x0
c0022da5:	c9                   	leave  
c0022da6:	c3                   	ret    
c0022da7:	90                   	nop

c0022da8 <APICTimer::close(int, int, void*)>:
c0022da8:	b8 00 00 00 00       	mov    eax,0x0
c0022dad:	c3                   	ret    

c0022dae <apicTimerHandler(regs*, void*)>:
c0022dae:	83 ec 0c             	sub    esp,0xc
c0022db1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022db5:	8b 00                	mov    eax,DWORD PTR [eax]
c0022db7:	99                   	cdq    
c0022db8:	52                   	push   edx
c0022db9:	50                   	push   eax
c0022dba:	6a 00                	push   0x0
c0022dbc:	68 00 ca 9a 3b       	push   0x3b9aca00
c0022dc1:	e8 76 07 00 00       	call   c002353c <__udivdi3>
c0022dc6:	83 c4 10             	add    esp,0x10
c0022dc9:	83 ec 08             	sub    esp,0x8
c0022dcc:	52                   	push   edx
c0022dcd:	50                   	push   eax
c0022dce:	e8 ac 2f ff ff       	call   c0015d7f <timerHandler(unsigned long long)>
c0022dd3:	83 c4 10             	add    esp,0x10
c0022dd6:	90                   	nop
c0022dd7:	83 c4 0c             	add    esp,0xc
c0022dda:	c3                   	ret    
c0022ddb:	90                   	nop

c0022ddc <APICTimer::open(int, int, void*)>:
c0022ddc:	57                   	push   edi
c0022ddd:	56                   	push   esi
c0022dde:	53                   	push   ebx
c0022ddf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022de3:	8b 00                	mov    eax,DWORD PTR [eax]
c0022de5:	83 c0 24             	add    eax,0x24
c0022de8:	8b 00                	mov    eax,DWORD PTR [eax]
c0022dea:	83 ec 08             	sub    esp,0x8
c0022ded:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022df1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022df5:	ff d0                	call   eax
c0022df7:	83 c4 10             	add    esp,0x10
c0022dfa:	e8 41 24 00 00       	call   c0025240 <CPU::current()>
c0022dff:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0022e05:	83 ec 0c             	sub    esp,0xc
c0022e08:	50                   	push   eax
c0022e09:	e8 e4 f4 ff ff       	call   c00222f2 <APIC::getBase()>
c0022e0e:	83 c4 10             	add    esp,0x10
c0022e11:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0022e17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e1b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0022e21:	0f b6 f8             	movzx  edi,al
c0022e24:	89 d0                	mov    eax,edx
c0022e26:	ba 00 00 00 00       	mov    edx,0x0
c0022e2b:	89 c1                	mov    ecx,eax
c0022e2d:	80 e5 ff             	and    ch,0xff
c0022e30:	89 cb                	mov    ebx,ecx
c0022e32:	0f b6 f2             	movzx  esi,dl
c0022e35:	89 d8                	mov    eax,ebx
c0022e37:	89 f2                	mov    edx,esi
c0022e39:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022e3d:	8d 5f 08             	lea    ebx,[edi+0x8]
c0022e40:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0022e44:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0022e48:	83 e0 00             	and    eax,0x0
c0022e4b:	09 d0                	or     eax,edx
c0022e4d:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0022e51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e55:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0022e5b:	8d 50 01             	lea    edx,[eax+0x1]
c0022e5e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022e62:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0022e68:	0f b6 d0             	movzx  edx,al
c0022e6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e6f:	83 c2 08             	add    edx,0x8
c0022e72:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0022e76:	0f b6 c9             	movzx  ecx,cl
c0022e79:	81 c9 00 00 01 00    	or     ecx,0x10000
c0022e7f:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0022e83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e87:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022e8b:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0022e91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e95:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022e99:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0022e9f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022ea3:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0022ea9:	83 ec 0c             	sub    esp,0xc
c0022eac:	51                   	push   ecx
c0022ead:	6a 01                	push   0x1
c0022eaf:	68 ae 2d 02 c0       	push   0xc0022dae
c0022eb4:	52                   	push   edx
c0022eb5:	50                   	push   eax
c0022eb6:	e8 d3 06 ff ff       	call   c001358e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022ebb:	83 c4 20             	add    esp,0x20
c0022ebe:	89 c2                	mov    edx,eax
c0022ec0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ec4:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0022eca:	b8 00 00 00 00       	mov    eax,0x0
c0022ecf:	5b                   	pop    ebx
c0022ed0:	5e                   	pop    esi
c0022ed1:	5f                   	pop    edi
c0022ed2:	c3                   	ret    
c0022ed3:	90                   	nop

c0022ed4 <APICTimer::write(int)>:
c0022ed4:	53                   	push   ebx
c0022ed5:	83 ec 28             	sub    esp,0x28
c0022ed8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022edc:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022ee0:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022ee6:	e8 55 23 00 00       	call   c0025240 <CPU::current()>
c0022eeb:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0022ef1:	83 ec 0c             	sub    esp,0xc
c0022ef4:	50                   	push   eax
c0022ef5:	e8 f8 f3 ff ff       	call   c00222f2 <APIC::getBase()>
c0022efa:	83 c4 10             	add    esp,0x10
c0022efd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022f01:	a1 90 ac 02 c0       	mov    eax,ds:0xc002ac90
c0022f06:	8b 15 94 ac 02 c0    	mov    edx,DWORD PTR ds:0xc002ac94
c0022f0c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022f10:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022f14:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022f18:	05 e0 03 00 00       	add    eax,0x3e0
c0022f1d:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0022f23:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022f27:	05 80 03 00 00       	add    eax,0x380
c0022f2c:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0022f32:	fb                   	sti    
c0022f33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f37:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022f3b:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0022f40:	83 d2 00             	adc    edx,0x0
c0022f43:	89 c1                	mov    ecx,eax
c0022f45:	89 d3                	mov    ebx,edx
c0022f47:	a1 90 ac 02 c0       	mov    eax,ds:0xc002ac90
c0022f4c:	8b 15 94 ac 02 c0    	mov    edx,DWORD PTR ds:0xc002ac94
c0022f52:	39 c8                	cmp    eax,ecx
c0022f54:	89 d0                	mov    eax,edx
c0022f56:	19 d8                	sbb    eax,ebx
c0022f58:	73 02                	jae    c0022f5c <APICTimer::write(int)+0x88>
c0022f5a:	eb d7                	jmp    c0022f33 <APICTimer::write(int)+0x5f>
c0022f5c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022f60:	05 20 03 00 00       	add    eax,0x320
c0022f65:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0022f6b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022f6f:	05 90 03 00 00       	add    eax,0x390
c0022f74:	8b 00                	mov    eax,DWORD PTR [eax]
c0022f76:	f7 d0                	not    eax
c0022f78:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022f7c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022f80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022f84:	ba 00 00 00 00       	mov    edx,0x0
c0022f89:	f7 f3                	div    ebx
c0022f8b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022f8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022f93:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0022f99:	0d 00 00 02 00       	or     eax,0x20000
c0022f9e:	89 c2                	mov    edx,eax
c0022fa0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022fa4:	05 20 03 00 00       	add    eax,0x320
c0022fa9:	89 10                	mov    DWORD PTR [eax],edx
c0022fab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022faf:	05 e0 03 00 00       	add    eax,0x3e0
c0022fb4:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0022fba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022fbe:	05 80 03 00 00       	add    eax,0x380
c0022fc3:	89 c2                	mov    edx,eax
c0022fc5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022fc9:	89 02                	mov    DWORD PTR [edx],eax
c0022fcb:	90                   	nop
c0022fcc:	83 c4 28             	add    esp,0x28
c0022fcf:	5b                   	pop    ebx
c0022fd0:	c3                   	ret    
c0022fd1:	90                   	nop

c0022fd2 <APICTimer::APICTimer()>:
c0022fd2:	83 ec 0c             	sub    esp,0xc
c0022fd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fd9:	83 ec 08             	sub    esp,0x8
c0022fdc:	68 2c 95 02 c0       	push   0xc002952c
c0022fe1:	50                   	push   eax
c0022fe2:	e8 09 2d ff ff       	call   c0015cf0 <Timer::Timer(char const*)>
c0022fe7:	83 c4 10             	add    esp,0x10
c0022fea:	ba 40 95 02 c0       	mov    edx,0xc0029540
c0022fef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ff3:	89 10                	mov    DWORD PTR [eax],edx
c0022ff5:	90                   	nop
c0022ff6:	83 c4 0c             	add    esp,0xc
c0022ff9:	c3                   	ret    

c0022ffa <PIT::write(int)>:
c0022ffa:	83 ec 10             	sub    esp,0x10
c0022ffd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023001:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0023005:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002300b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002300f:	a3 44 c9 02 c0       	mov    ds:0xc002c944,eax
c0023014:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0023019:	99                   	cdq    
c002301a:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c002301e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023022:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0023029:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c002302e:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0023032:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0023037:	ee                   	out    dx,al
c0023038:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002303c:	0f b6 c0             	movzx  eax,al
c002303f:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0023046:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c002304a:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c002304e:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0023053:	ee                   	out    dx,al
c0023054:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023058:	c1 f8 08             	sar    eax,0x8
c002305b:	0f b6 c0             	movzx  eax,al
c002305e:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0023065:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0023069:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002306d:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0023072:	ee                   	out    dx,al
c0023073:	90                   	nop
c0023074:	83 c4 10             	add    esp,0x10
c0023077:	c3                   	ret    

c0023078 <pitHandler(regs*, void*)>:
c0023078:	83 ec 0c             	sub    esp,0xc
c002307b:	a1 44 c9 02 c0       	mov    eax,ds:0xc002c944
c0023080:	99                   	cdq    
c0023081:	52                   	push   edx
c0023082:	50                   	push   eax
c0023083:	6a 00                	push   0x0
c0023085:	68 00 ca 9a 3b       	push   0x3b9aca00
c002308a:	e8 ad 04 00 00       	call   c002353c <__udivdi3>
c002308f:	83 c4 10             	add    esp,0x10
c0023092:	83 ec 08             	sub    esp,0x8
c0023095:	52                   	push   edx
c0023096:	50                   	push   eax
c0023097:	e8 e3 2c ff ff       	call   c0015d7f <timerHandler(unsigned long long)>
c002309c:	83 c4 10             	add    esp,0x10
c002309f:	90                   	nop
c00230a0:	83 c4 0c             	add    esp,0xc
c00230a3:	c3                   	ret    

c00230a4 <PIT::open(int, int, void*)>:
c00230a4:	83 ec 0c             	sub    esp,0xc
c00230a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00230ad:	83 c0 24             	add    eax,0x24
c00230b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00230b2:	83 ec 08             	sub    esp,0x8
c00230b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00230b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00230bd:	ff d0                	call   eax
c00230bf:	83 c4 10             	add    esp,0x10
c00230c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230c6:	83 ec 0c             	sub    esp,0xc
c00230c9:	6a 00                	push   0x0
c00230cb:	6a 01                	push   0x1
c00230cd:	68 78 30 02 c0       	push   0xc0023078
c00230d2:	6a 00                	push   0x0
c00230d4:	50                   	push   eax
c00230d5:	e8 b4 04 ff ff       	call   c001358e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00230da:	83 c4 20             	add    esp,0x20
c00230dd:	89 c2                	mov    edx,eax
c00230df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230e3:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00230e9:	b8 00 00 00 00       	mov    eax,0x0
c00230ee:	83 c4 0c             	add    esp,0xc
c00230f1:	c3                   	ret    

c00230f2 <PIT::close(int, int, void*)>:
c00230f2:	83 ec 0c             	sub    esp,0xc
c00230f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230f9:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0023103:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023107:	6a 01                	push   0x1
c0023109:	68 78 30 02 c0       	push   0xc0023078
c002310e:	6a 00                	push   0x0
c0023110:	50                   	push   eax
c0023111:	e8 d6 04 ff ff       	call   c00135ec <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0023116:	83 c4 10             	add    esp,0x10
c0023119:	b8 00 00 00 00       	mov    eax,0x0
c002311e:	83 c4 0c             	add    esp,0xc
c0023121:	c3                   	ret    

c0023122 <PIT::PIT()>:
c0023122:	83 ec 0c             	sub    esp,0xc
c0023125:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023129:	83 ec 08             	sub    esp,0x8
c002312c:	68 68 95 02 c0       	push   0xc0029568
c0023131:	50                   	push   eax
c0023132:	e8 b9 2b ff ff       	call   c0015cf0 <Timer::Timer(char const*)>
c0023137:	83 c4 10             	add    esp,0x10
c002313a:	ba 90 95 02 c0       	mov    edx,0xc0029590
c002313f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023143:	89 10                	mov    DWORD PTR [eax],edx
c0023145:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023149:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002314f:	0f b6 d0             	movzx  edx,al
c0023152:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023156:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c002315d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023161:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0023167:	0f b6 d0             	movzx  edx,al
c002316a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002316e:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0023173:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023177:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002317d:	8d 50 01             	lea    edx,[eax+0x1]
c0023180:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0023184:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002318a:	0f b6 d0             	movzx  edx,al
c002318d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023191:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0023195:	83 e1 3f             	and    ecx,0x3f
c0023198:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002319c:	90                   	nop
c002319d:	83 c4 0c             	add    esp,0xc
c00231a0:	c3                   	ret    
c00231a1:	66 90                	xchg   ax,ax
c00231a3:	66 90                	xchg   ax,ax
c00231a5:	66 90                	xchg   ax,ax
c00231a7:	66 90                	xchg   ax,ax
c00231a9:	66 90                	xchg   ax,ax
c00231ab:	66 90                	xchg   ax,ax
c00231ad:	66 90                	xchg   ax,ax
c00231af:	90                   	nop

c00231b0 <avxDetect>:
c00231b0:	b8 00 00 00 00       	mov    eax,0x0
c00231b5:	c3                   	ret    

c00231b6 <avxSave>:
c00231b6:	c3                   	ret    

c00231b7 <avxLoad>:
c00231b7:	c3                   	ret    

c00231b8 <avxInit>:
c00231b8:	c3                   	ret    

c00231b9 <avxClose>:
c00231b9:	c3                   	ret    
c00231ba:	66 90                	xchg   ax,ax
c00231bc:	66 90                	xchg   ax,ax
c00231be:	66 90                	xchg   ax,ax

c00231c0 <sseDetect>:
c00231c0:	b8 01 00 00 00       	mov    eax,0x1
c00231c5:	0f a2                	cpuid  
c00231c7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c00231cd:	74 06                	je     c00231d5 <sseDetect.noSSE>
c00231cf:	b8 01 00 00 00       	mov    eax,0x1
c00231d4:	c3                   	ret    

c00231d5 <sseDetect.noSSE>:
c00231d5:	b8 00 00 00 00       	mov    eax,0x0
c00231da:	c3                   	ret    

c00231db <sseSave>:
c00231db:	0f ae 44 24 08       	fxsave [esp+0x8]
c00231e0:	c3                   	ret    

c00231e1 <sseLoad>:
c00231e1:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c00231e6:	c3                   	ret    

c00231e7 <sseInit>:
c00231e7:	e8 40 00 00 00       	call   c002322c <x87Init>
c00231ec:	0f 20 e0             	mov    eax,cr4
c00231ef:	66 0d 00 06          	or     ax,0x600
c00231f3:	0f 22 e0             	mov    cr4,eax
c00231f6:	c3                   	ret    

c00231f7 <sseClose>:
c00231f7:	c3                   	ret    
c00231f8:	66 90                	xchg   ax,ax
c00231fa:	66 90                	xchg   ax,ax
c00231fc:	66 90                	xchg   ax,ax
c00231fe:	66 90                	xchg   ax,ax

c0023200 <value_37F>:
c0023200:	7f 03                	jg     c0023205 <value_37A+0x1>

c0023202 <value_37E>:
c0023202:	7e 03                	jle    c0023207 <x87Detect+0x1>

c0023204 <value_37A>:
c0023204:	7a 03                	jp     c0023209 <x87Detect+0x3>

c0023206 <x87Detect>:
c0023206:	b8 01 00 00 00       	mov    eax,0x1
c002320b:	0f a2                	cpuid  
c002320d:	f7 c2 01 00 00 00    	test   edx,0x1
c0023213:	74 06                	je     c002321b <x87Detect.nox87>
c0023215:	b8 01 00 00 00       	mov    eax,0x1
c002321a:	c3                   	ret    

c002321b <x87Detect.nox87>:
c002321b:	b8 00 00 00 00       	mov    eax,0x0
c0023220:	c3                   	ret    

c0023221 <x87Save>:
c0023221:	9b dd 74 24 08       	fsave  [esp+0x8]
c0023226:	c3                   	ret    

c0023227 <x87Load>:
c0023227:	dd 64 24 08          	frstor [esp+0x8]
c002322b:	c3                   	ret    

c002322c <x87Init>:
c002322c:	9b db e3             	finit  
c002322f:	0f 20 c0             	mov    eax,cr0
c0023232:	66 25 fb ff          	and    ax,0xfffb
c0023236:	66 0d 22 00          	or     ax,0x22
c002323a:	0f 22 c0             	mov    cr0,eax
c002323d:	0f 06                	clts   
c002323f:	d9 2d 04 32 02 c0    	fldcw  WORD PTR ds:0xc0023204
c0023245:	c3                   	ret    

c0023246 <x87Close>:
c0023246:	c3                   	ret    
c0023247:	90                   	nop

c0023248 <__do_global_ctors_aux>:
c0023248:	a1 8c 5d 02 c0       	mov    eax,ds:0xc0025d8c
c002324d:	83 f8 ff             	cmp    eax,0xffffffff
c0023250:	74 1a                	je     c002326c <__do_global_ctors_aux+0x24>
c0023252:	55                   	push   ebp
c0023253:	89 e5                	mov    ebp,esp
c0023255:	53                   	push   ebx
c0023256:	52                   	push   edx
c0023257:	bb 8c 5d 02 c0       	mov    ebx,0xc0025d8c
c002325c:	ff d0                	call   eax
c002325e:	83 eb 04             	sub    ebx,0x4
c0023261:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023263:	83 f8 ff             	cmp    eax,0xffffffff
c0023266:	75 f4                	jne    c002325c <__do_global_ctors_aux+0x14>
c0023268:	58                   	pop    eax
c0023269:	5b                   	pop    ebx
c002326a:	5d                   	pop    ebp
c002326b:	c3                   	ret    
c002326c:	c3                   	ret    
c002326d:	66 90                	xchg   ax,ax
c002326f:	90                   	nop

c0023270 <__divdi3>:
c0023270:	55                   	push   ebp
c0023271:	57                   	push   edi
c0023272:	56                   	push   esi
c0023273:	53                   	push   ebx
c0023274:	83 ec 1c             	sub    esp,0x1c
c0023277:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002327b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002327f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0023282:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0023286:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002328a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002328e:	85 db                	test   ebx,ebx
c0023290:	0f 88 8e 00 00 00    	js     c0023324 <__divdi3+0xb4>
c0023296:	89 dd                	mov    ebp,ebx
c0023298:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00232a0:	89 d3                	mov    ebx,edx
c00232a2:	85 d2                	test   edx,edx
c00232a4:	79 0d                	jns    c00232b3 <__divdi3+0x43>
c00232a6:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c00232aa:	f7 d8                	neg    eax
c00232ac:	83 d2 00             	adc    edx,0x0
c00232af:	f7 da                	neg    edx
c00232b1:	89 d3                	mov    ebx,edx
c00232b3:	89 c7                	mov    edi,eax
c00232b5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00232b8:	85 db                	test   ebx,ebx
c00232ba:	75 48                	jne    c0023304 <__divdi3+0x94>
c00232bc:	39 ef                	cmp    edi,ebp
c00232be:	76 24                	jbe    c00232e4 <__divdi3+0x74>
c00232c0:	89 ea                	mov    edx,ebp
c00232c2:	f7 f7                	div    edi
c00232c4:	89 c1                	mov    ecx,eax
c00232c6:	31 f6                	xor    esi,esi
c00232c8:	89 c8                	mov    eax,ecx
c00232ca:	89 f2                	mov    edx,esi
c00232cc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00232d0:	85 c9                	test   ecx,ecx
c00232d2:	74 07                	je     c00232db <__divdi3+0x6b>
c00232d4:	f7 d8                	neg    eax
c00232d6:	83 d2 00             	adc    edx,0x0
c00232d9:	f7 da                	neg    edx
c00232db:	83 c4 1c             	add    esp,0x1c
c00232de:	5b                   	pop    ebx
c00232df:	5e                   	pop    esi
c00232e0:	5f                   	pop    edi
c00232e1:	5d                   	pop    ebp
c00232e2:	c3                   	ret    
c00232e3:	90                   	nop
c00232e4:	85 ff                	test   edi,edi
c00232e6:	75 0b                	jne    c00232f3 <__divdi3+0x83>
c00232e8:	b8 01 00 00 00       	mov    eax,0x1
c00232ed:	31 d2                	xor    edx,edx
c00232ef:	f7 f3                	div    ebx
c00232f1:	89 c7                	mov    edi,eax
c00232f3:	31 d2                	xor    edx,edx
c00232f5:	89 e8                	mov    eax,ebp
c00232f7:	f7 f7                	div    edi
c00232f9:	89 c6                	mov    esi,eax
c00232fb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00232fe:	f7 f7                	div    edi
c0023300:	89 c1                	mov    ecx,eax
c0023302:	eb c4                	jmp    c00232c8 <__divdi3+0x58>
c0023304:	39 eb                	cmp    ebx,ebp
c0023306:	77 3c                	ja     c0023344 <__divdi3+0xd4>
c0023308:	0f bd f3             	bsr    esi,ebx
c002330b:	83 f6 1f             	xor    esi,0x1f
c002330e:	75 40                	jne    c0023350 <__divdi3+0xe0>
c0023310:	39 eb                	cmp    ebx,ebp
c0023312:	72 09                	jb     c002331d <__divdi3+0xad>
c0023314:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0023317:	0f 87 97 00 00 00    	ja     c00233b4 <__divdi3+0x144>
c002331d:	b9 01 00 00 00       	mov    ecx,0x1
c0023322:	eb a4                	jmp    c00232c8 <__divdi3+0x58>
c0023324:	f7 d9                	neg    ecx
c0023326:	83 d3 00             	adc    ebx,0x0
c0023329:	f7 db                	neg    ebx
c002332b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002332e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0023332:	89 dd                	mov    ebp,ebx
c0023334:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c002333c:	e9 5f ff ff ff       	jmp    c00232a0 <__divdi3+0x30>
c0023341:	8d 76 00             	lea    esi,[esi+0x0]
c0023344:	31 f6                	xor    esi,esi
c0023346:	31 c9                	xor    ecx,ecx
c0023348:	e9 7b ff ff ff       	jmp    c00232c8 <__divdi3+0x58>
c002334d:	8d 76 00             	lea    esi,[esi+0x0]
c0023350:	b8 20 00 00 00       	mov    eax,0x20
c0023355:	29 f0                	sub    eax,esi
c0023357:	89 f1                	mov    ecx,esi
c0023359:	d3 e3                	shl    ebx,cl
c002335b:	89 fa                	mov    edx,edi
c002335d:	88 c1                	mov    cl,al
c002335f:	d3 ea                	shr    edx,cl
c0023361:	09 da                	or     edx,ebx
c0023363:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0023367:	89 f1                	mov    ecx,esi
c0023369:	d3 e7                	shl    edi,cl
c002336b:	89 eb                	mov    ebx,ebp
c002336d:	88 c1                	mov    cl,al
c002336f:	d3 eb                	shr    ebx,cl
c0023371:	89 f1                	mov    ecx,esi
c0023373:	d3 e5                	shl    ebp,cl
c0023375:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0023378:	88 c1                	mov    cl,al
c002337a:	d3 ea                	shr    edx,cl
c002337c:	09 d5                	or     ebp,edx
c002337e:	89 e8                	mov    eax,ebp
c0023380:	89 da                	mov    edx,ebx
c0023382:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0023386:	89 d3                	mov    ebx,edx
c0023388:	89 c5                	mov    ebp,eax
c002338a:	f7 e7                	mul    edi
c002338c:	39 d3                	cmp    ebx,edx
c002338e:	72 18                	jb     c00233a8 <__divdi3+0x138>
c0023390:	74 0a                	je     c002339c <__divdi3+0x12c>
c0023392:	89 e9                	mov    ecx,ebp
c0023394:	31 f6                	xor    esi,esi
c0023396:	e9 2d ff ff ff       	jmp    c00232c8 <__divdi3+0x58>
c002339b:	90                   	nop
c002339c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002339f:	89 f1                	mov    ecx,esi
c00233a1:	d3 e7                	shl    edi,cl
c00233a3:	39 c7                	cmp    edi,eax
c00233a5:	73 eb                	jae    c0023392 <__divdi3+0x122>
c00233a7:	90                   	nop
c00233a8:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00233ab:	31 f6                	xor    esi,esi
c00233ad:	e9 16 ff ff ff       	jmp    c00232c8 <__divdi3+0x58>
c00233b2:	66 90                	xchg   ax,ax
c00233b4:	31 c9                	xor    ecx,ecx
c00233b6:	e9 0d ff ff ff       	jmp    c00232c8 <__divdi3+0x58>
c00233bb:	90                   	nop

c00233bc <__moddi3>:
c00233bc:	55                   	push   ebp
c00233bd:	57                   	push   edi
c00233be:	56                   	push   esi
c00233bf:	53                   	push   ebx
c00233c0:	83 ec 2c             	sub    esp,0x2c
c00233c3:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00233c7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00233cb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00233cf:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00233d3:	85 db                	test   ebx,ebx
c00233d5:	0f 88 85 00 00 00    	js     c0023460 <__moddi3+0xa4>
c00233db:	89 de                	mov    esi,ebx
c00233dd:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00233e5:	89 d7                	mov    edi,edx
c00233e7:	85 d2                	test   edx,edx
c00233e9:	79 09                	jns    c00233f4 <__moddi3+0x38>
c00233eb:	f7 d8                	neg    eax
c00233ed:	83 d2 00             	adc    edx,0x0
c00233f0:	f7 da                	neg    edx
c00233f2:	89 d7                	mov    edi,edx
c00233f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00233f8:	89 cd                	mov    ebp,ecx
c00233fa:	85 ff                	test   edi,edi
c00233fc:	75 52                	jne    c0023450 <__moddi3+0x94>
c00233fe:	89 c3                	mov    ebx,eax
c0023400:	39 f0                	cmp    eax,esi
c0023402:	76 24                	jbe    c0023428 <__moddi3+0x6c>
c0023404:	89 c8                	mov    eax,ecx
c0023406:	89 f2                	mov    edx,esi
c0023408:	f7 f3                	div    ebx
c002340a:	89 d6                	mov    esi,edx
c002340c:	89 f0                	mov    eax,esi
c002340e:	31 d2                	xor    edx,edx
c0023410:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0023414:	85 c9                	test   ecx,ecx
c0023416:	74 07                	je     c002341f <__moddi3+0x63>
c0023418:	f7 d8                	neg    eax
c002341a:	83 d2 00             	adc    edx,0x0
c002341d:	f7 da                	neg    edx
c002341f:	83 c4 2c             	add    esp,0x2c
c0023422:	5b                   	pop    ebx
c0023423:	5e                   	pop    esi
c0023424:	5f                   	pop    edi
c0023425:	5d                   	pop    ebp
c0023426:	c3                   	ret    
c0023427:	90                   	nop
c0023428:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002342c:	85 db                	test   ebx,ebx
c002342e:	75 0d                	jne    c002343d <__moddi3+0x81>
c0023430:	b8 01 00 00 00       	mov    eax,0x1
c0023435:	31 d2                	xor    edx,edx
c0023437:	f7 f7                	div    edi
c0023439:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002343d:	89 f0                	mov    eax,esi
c002343f:	31 d2                	xor    edx,edx
c0023441:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0023445:	f7 f7                	div    edi
c0023447:	89 e8                	mov    eax,ebp
c0023449:	f7 f7                	div    edi
c002344b:	89 d6                	mov    esi,edx
c002344d:	eb bd                	jmp    c002340c <__moddi3+0x50>
c002344f:	90                   	nop
c0023450:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0023454:	39 f7                	cmp    edi,esi
c0023456:	76 20                	jbe    c0023478 <__moddi3+0xbc>
c0023458:	89 c8                	mov    eax,ecx
c002345a:	89 f2                	mov    edx,esi
c002345c:	eb b2                	jmp    c0023410 <__moddi3+0x54>
c002345e:	66 90                	xchg   ax,ax
c0023460:	f7 d9                	neg    ecx
c0023462:	83 d3 00             	adc    ebx,0x0
c0023465:	f7 db                	neg    ebx
c0023467:	89 de                	mov    esi,ebx
c0023469:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0023471:	e9 6f ff ff ff       	jmp    c00233e5 <__moddi3+0x29>
c0023476:	66 90                	xchg   ax,ax
c0023478:	0f bd c7             	bsr    eax,edi
c002347b:	83 f0 1f             	xor    eax,0x1f
c002347e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0023482:	75 24                	jne    c00234a8 <__moddi3+0xec>
c0023484:	39 f7                	cmp    edi,esi
c0023486:	72 06                	jb     c002348e <__moddi3+0xd2>
c0023488:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c002348c:	77 0c                	ja     c002349a <__moddi3+0xde>
c002348e:	89 e9                	mov    ecx,ebp
c0023490:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0023494:	19 fe                	sbb    esi,edi
c0023496:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002349a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002349e:	89 f2                	mov    edx,esi
c00234a0:	e9 6b ff ff ff       	jmp    c0023410 <__moddi3+0x54>
c00234a5:	8d 76 00             	lea    esi,[esi+0x0]
c00234a8:	b8 20 00 00 00       	mov    eax,0x20
c00234ad:	89 c2                	mov    edx,eax
c00234af:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00234b3:	29 da                	sub    edx,ebx
c00234b5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00234b9:	88 d9                	mov    cl,bl
c00234bb:	d3 e7                	shl    edi,cl
c00234bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00234c1:	88 d1                	mov    cl,dl
c00234c3:	d3 e8                	shr    eax,cl
c00234c5:	09 c7                	or     edi,eax
c00234c7:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00234cb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00234cf:	89 d8                	mov    eax,ebx
c00234d1:	88 d9                	mov    cl,bl
c00234d3:	d3 e7                	shl    edi,cl
c00234d5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00234d9:	89 f3                	mov    ebx,esi
c00234db:	88 d1                	mov    cl,dl
c00234dd:	d3 eb                	shr    ebx,cl
c00234df:	89 c7                	mov    edi,eax
c00234e1:	88 c1                	mov    cl,al
c00234e3:	d3 e6                	shl    esi,cl
c00234e5:	89 e8                	mov    eax,ebp
c00234e7:	88 d1                	mov    cl,dl
c00234e9:	d3 e8                	shr    eax,cl
c00234eb:	09 f0                	or     eax,esi
c00234ed:	89 f9                	mov    ecx,edi
c00234ef:	d3 e5                	shl    ebp,cl
c00234f1:	89 da                	mov    edx,ebx
c00234f3:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c00234f7:	89 d3                	mov    ebx,edx
c00234f9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00234fd:	89 c6                	mov    esi,eax
c00234ff:	89 d1                	mov    ecx,edx
c0023501:	39 d3                	cmp    ebx,edx
c0023503:	72 27                	jb     c002352c <__moddi3+0x170>
c0023505:	74 21                	je     c0023528 <__moddi3+0x16c>
c0023507:	29 f5                	sub    ebp,esi
c0023509:	19 cb                	sbb    ebx,ecx
c002350b:	89 de                	mov    esi,ebx
c002350d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0023511:	d3 e6                	shl    esi,cl
c0023513:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0023517:	89 f9                	mov    ecx,edi
c0023519:	d3 ed                	shr    ebp,cl
c002351b:	09 ee                	or     esi,ebp
c002351d:	89 f0                	mov    eax,esi
c002351f:	d3 eb                	shr    ebx,cl
c0023521:	89 da                	mov    edx,ebx
c0023523:	e9 e8 fe ff ff       	jmp    c0023410 <__moddi3+0x54>
c0023528:	39 c5                	cmp    ebp,eax
c002352a:	73 db                	jae    c0023507 <__moddi3+0x14b>
c002352c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0023530:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0023534:	89 d1                	mov    ecx,edx
c0023536:	89 c6                	mov    esi,eax
c0023538:	eb cd                	jmp    c0023507 <__moddi3+0x14b>
c002353a:	66 90                	xchg   ax,ax

c002353c <__udivdi3>:
c002353c:	55                   	push   ebp
c002353d:	57                   	push   edi
c002353e:	56                   	push   esi
c002353f:	53                   	push   ebx
c0023540:	83 ec 1c             	sub    esp,0x1c
c0023543:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0023547:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002354b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002354f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0023553:	85 d2                	test   edx,edx
c0023555:	75 41                	jne    c0023598 <__udivdi3+0x5c>
c0023557:	39 f7                	cmp    edi,esi
c0023559:	76 15                	jbe    c0023570 <__udivdi3+0x34>
c002355b:	89 e8                	mov    eax,ebp
c002355d:	89 f2                	mov    edx,esi
c002355f:	f7 f7                	div    edi
c0023561:	31 db                	xor    ebx,ebx
c0023563:	89 da                	mov    edx,ebx
c0023565:	83 c4 1c             	add    esp,0x1c
c0023568:	5b                   	pop    ebx
c0023569:	5e                   	pop    esi
c002356a:	5f                   	pop    edi
c002356b:	5d                   	pop    ebp
c002356c:	c3                   	ret    
c002356d:	8d 76 00             	lea    esi,[esi+0x0]
c0023570:	89 f9                	mov    ecx,edi
c0023572:	85 ff                	test   edi,edi
c0023574:	75 0b                	jne    c0023581 <__udivdi3+0x45>
c0023576:	b8 01 00 00 00       	mov    eax,0x1
c002357b:	31 d2                	xor    edx,edx
c002357d:	f7 f7                	div    edi
c002357f:	89 c1                	mov    ecx,eax
c0023581:	31 d2                	xor    edx,edx
c0023583:	89 f0                	mov    eax,esi
c0023585:	f7 f1                	div    ecx
c0023587:	89 c3                	mov    ebx,eax
c0023589:	89 e8                	mov    eax,ebp
c002358b:	f7 f1                	div    ecx
c002358d:	89 da                	mov    edx,ebx
c002358f:	83 c4 1c             	add    esp,0x1c
c0023592:	5b                   	pop    ebx
c0023593:	5e                   	pop    esi
c0023594:	5f                   	pop    edi
c0023595:	5d                   	pop    ebp
c0023596:	c3                   	ret    
c0023597:	90                   	nop
c0023598:	39 f2                	cmp    edx,esi
c002359a:	77 1c                	ja     c00235b8 <__udivdi3+0x7c>
c002359c:	0f bd da             	bsr    ebx,edx
c002359f:	83 f3 1f             	xor    ebx,0x1f
c00235a2:	75 24                	jne    c00235c8 <__udivdi3+0x8c>
c00235a4:	39 f2                	cmp    edx,esi
c00235a6:	72 08                	jb     c00235b0 <__udivdi3+0x74>
c00235a8:	39 ef                	cmp    edi,ebp
c00235aa:	0f 87 84 00 00 00    	ja     c0023634 <__udivdi3+0xf8>
c00235b0:	b8 01 00 00 00       	mov    eax,0x1
c00235b5:	eb ac                	jmp    c0023563 <__udivdi3+0x27>
c00235b7:	90                   	nop
c00235b8:	31 db                	xor    ebx,ebx
c00235ba:	31 c0                	xor    eax,eax
c00235bc:	89 da                	mov    edx,ebx
c00235be:	83 c4 1c             	add    esp,0x1c
c00235c1:	5b                   	pop    ebx
c00235c2:	5e                   	pop    esi
c00235c3:	5f                   	pop    edi
c00235c4:	5d                   	pop    ebp
c00235c5:	c3                   	ret    
c00235c6:	66 90                	xchg   ax,ax
c00235c8:	b8 20 00 00 00       	mov    eax,0x20
c00235cd:	29 d8                	sub    eax,ebx
c00235cf:	88 d9                	mov    cl,bl
c00235d1:	d3 e2                	shl    edx,cl
c00235d3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00235d7:	89 fa                	mov    edx,edi
c00235d9:	88 c1                	mov    cl,al
c00235db:	d3 ea                	shr    edx,cl
c00235dd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00235e1:	09 d1                	or     ecx,edx
c00235e3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00235e7:	88 d9                	mov    cl,bl
c00235e9:	d3 e7                	shl    edi,cl
c00235eb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00235ef:	89 f7                	mov    edi,esi
c00235f1:	88 c1                	mov    cl,al
c00235f3:	d3 ef                	shr    edi,cl
c00235f5:	88 d9                	mov    cl,bl
c00235f7:	d3 e6                	shl    esi,cl
c00235f9:	89 ea                	mov    edx,ebp
c00235fb:	88 c1                	mov    cl,al
c00235fd:	d3 ea                	shr    edx,cl
c00235ff:	09 d6                	or     esi,edx
c0023601:	89 f0                	mov    eax,esi
c0023603:	89 fa                	mov    edx,edi
c0023605:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0023609:	89 d7                	mov    edi,edx
c002360b:	89 c6                	mov    esi,eax
c002360d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0023611:	39 d7                	cmp    edi,edx
c0023613:	72 13                	jb     c0023628 <__udivdi3+0xec>
c0023615:	74 09                	je     c0023620 <__udivdi3+0xe4>
c0023617:	89 f0                	mov    eax,esi
c0023619:	31 db                	xor    ebx,ebx
c002361b:	e9 43 ff ff ff       	jmp    c0023563 <__udivdi3+0x27>
c0023620:	88 d9                	mov    cl,bl
c0023622:	d3 e5                	shl    ebp,cl
c0023624:	39 c5                	cmp    ebp,eax
c0023626:	73 ef                	jae    c0023617 <__udivdi3+0xdb>
c0023628:	8d 46 ff             	lea    eax,[esi-0x1]
c002362b:	31 db                	xor    ebx,ebx
c002362d:	e9 31 ff ff ff       	jmp    c0023563 <__udivdi3+0x27>
c0023632:	66 90                	xchg   ax,ax
c0023634:	31 c0                	xor    eax,eax
c0023636:	e9 28 ff ff ff       	jmp    c0023563 <__udivdi3+0x27>
c002363b:	90                   	nop

c002363c <__umoddi3>:
c002363c:	55                   	push   ebp
c002363d:	57                   	push   edi
c002363e:	56                   	push   esi
c002363f:	53                   	push   ebx
c0023640:	83 ec 1c             	sub    esp,0x1c
c0023643:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023647:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002364b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002364f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023653:	89 da                	mov    edx,ebx
c0023655:	85 c0                	test   eax,eax
c0023657:	75 37                	jne    c0023690 <__umoddi3+0x54>
c0023659:	39 df                	cmp    edi,ebx
c002365b:	76 13                	jbe    c0023670 <__umoddi3+0x34>
c002365d:	89 f0                	mov    eax,esi
c002365f:	f7 f7                	div    edi
c0023661:	89 d0                	mov    eax,edx
c0023663:	31 d2                	xor    edx,edx
c0023665:	83 c4 1c             	add    esp,0x1c
c0023668:	5b                   	pop    ebx
c0023669:	5e                   	pop    esi
c002366a:	5f                   	pop    edi
c002366b:	5d                   	pop    ebp
c002366c:	c3                   	ret    
c002366d:	8d 76 00             	lea    esi,[esi+0x0]
c0023670:	89 fd                	mov    ebp,edi
c0023672:	85 ff                	test   edi,edi
c0023674:	75 0b                	jne    c0023681 <__umoddi3+0x45>
c0023676:	b8 01 00 00 00       	mov    eax,0x1
c002367b:	31 d2                	xor    edx,edx
c002367d:	f7 f7                	div    edi
c002367f:	89 c5                	mov    ebp,eax
c0023681:	89 d8                	mov    eax,ebx
c0023683:	31 d2                	xor    edx,edx
c0023685:	f7 f5                	div    ebp
c0023687:	89 f0                	mov    eax,esi
c0023689:	f7 f5                	div    ebp
c002368b:	89 d0                	mov    eax,edx
c002368d:	eb d4                	jmp    c0023663 <__umoddi3+0x27>
c002368f:	90                   	nop
c0023690:	89 f1                	mov    ecx,esi
c0023692:	39 d8                	cmp    eax,ebx
c0023694:	76 0a                	jbe    c00236a0 <__umoddi3+0x64>
c0023696:	89 f0                	mov    eax,esi
c0023698:	83 c4 1c             	add    esp,0x1c
c002369b:	5b                   	pop    ebx
c002369c:	5e                   	pop    esi
c002369d:	5f                   	pop    edi
c002369e:	5d                   	pop    ebp
c002369f:	c3                   	ret    
c00236a0:	0f bd e8             	bsr    ebp,eax
c00236a3:	83 f5 1f             	xor    ebp,0x1f
c00236a6:	75 1c                	jne    c00236c4 <__umoddi3+0x88>
c00236a8:	39 d8                	cmp    eax,ebx
c00236aa:	72 04                	jb     c00236b0 <__umoddi3+0x74>
c00236ac:	39 f7                	cmp    edi,esi
c00236ae:	77 08                	ja     c00236b8 <__umoddi3+0x7c>
c00236b0:	89 da                	mov    edx,ebx
c00236b2:	29 fe                	sub    esi,edi
c00236b4:	19 c2                	sbb    edx,eax
c00236b6:	89 f1                	mov    ecx,esi
c00236b8:	89 c8                	mov    eax,ecx
c00236ba:	83 c4 1c             	add    esp,0x1c
c00236bd:	5b                   	pop    ebx
c00236be:	5e                   	pop    esi
c00236bf:	5f                   	pop    edi
c00236c0:	5d                   	pop    ebp
c00236c1:	c3                   	ret    
c00236c2:	66 90                	xchg   ax,ax
c00236c4:	ba 20 00 00 00       	mov    edx,0x20
c00236c9:	29 ea                	sub    edx,ebp
c00236cb:	89 e9                	mov    ecx,ebp
c00236cd:	d3 e0                	shl    eax,cl
c00236cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00236d3:	89 f8                	mov    eax,edi
c00236d5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00236d9:	88 d1                	mov    cl,dl
c00236db:	d3 e8                	shr    eax,cl
c00236dd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00236e1:	09 c1                	or     ecx,eax
c00236e3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00236e7:	89 e9                	mov    ecx,ebp
c00236e9:	d3 e7                	shl    edi,cl
c00236eb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00236ef:	89 d8                	mov    eax,ebx
c00236f1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00236f5:	88 d1                	mov    cl,dl
c00236f7:	d3 e8                	shr    eax,cl
c00236f9:	89 c7                	mov    edi,eax
c00236fb:	89 e9                	mov    ecx,ebp
c00236fd:	d3 e3                	shl    ebx,cl
c00236ff:	89 f0                	mov    eax,esi
c0023701:	88 d1                	mov    cl,dl
c0023703:	d3 e8                	shr    eax,cl
c0023705:	09 d8                	or     eax,ebx
c0023707:	89 e9                	mov    ecx,ebp
c0023709:	d3 e6                	shl    esi,cl
c002370b:	89 f3                	mov    ebx,esi
c002370d:	89 fa                	mov    edx,edi
c002370f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0023713:	89 d1                	mov    ecx,edx
c0023715:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0023719:	89 c6                	mov    esi,eax
c002371b:	89 d7                	mov    edi,edx
c002371d:	39 d1                	cmp    ecx,edx
c002371f:	72 27                	jb     c0023748 <__umoddi3+0x10c>
c0023721:	74 21                	je     c0023744 <__umoddi3+0x108>
c0023723:	89 ca                	mov    edx,ecx
c0023725:	29 f3                	sub    ebx,esi
c0023727:	19 fa                	sbb    edx,edi
c0023729:	89 d0                	mov    eax,edx
c002372b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c002372f:	d3 e0                	shl    eax,cl
c0023731:	89 e9                	mov    ecx,ebp
c0023733:	d3 eb                	shr    ebx,cl
c0023735:	09 d8                	or     eax,ebx
c0023737:	d3 ea                	shr    edx,cl
c0023739:	83 c4 1c             	add    esp,0x1c
c002373c:	5b                   	pop    ebx
c002373d:	5e                   	pop    esi
c002373e:	5f                   	pop    edi
c002373f:	5d                   	pop    ebp
c0023740:	c3                   	ret    
c0023741:	8d 76 00             	lea    esi,[esi+0x0]
c0023744:	39 c3                	cmp    ebx,eax
c0023746:	73 db                	jae    c0023723 <__umoddi3+0xe7>
c0023748:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c002374c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0023750:	89 d7                	mov    edi,edx
c0023752:	89 c6                	mov    esi,eax
c0023754:	eb cd                	jmp    c0023723 <__umoddi3+0xe7>

c0023756 <__addsf3>:
c0023756:	55                   	push   ebp
c0023757:	89 e5                	mov    ebp,esp
c0023759:	57                   	push   edi
c002375a:	56                   	push   esi
c002375b:	53                   	push   ebx
c002375c:	83 ec 08             	sub    esp,0x8
c002375f:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0023762:	89 fa                	mov    edx,edi
c0023764:	89 f8                	mov    eax,edi
c0023766:	c1 f8 17             	sar    eax,0x17
c0023769:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002376c:	c1 e2 08             	shl    edx,0x8
c002376f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0023775:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0023778:	89 de                	mov    esi,ebx
c002377a:	c1 fe 17             	sar    esi,0x17
c002377d:	c1 e3 08             	shl    ebx,0x8
c0023780:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0023786:	31 f0                	xor    eax,esi
c0023788:	0f 88 3b 01 00 00    	js     c00238c9 <__addsf3+0x173>
c002378e:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0023791:	29 f1                	sub    ecx,esi
c0023793:	85 c9                	test   ecx,ecx
c0023795:	7e 54                	jle    c00237eb <__addsf3+0x95>
c0023797:	89 f0                	mov    eax,esi
c0023799:	84 c0                	test   al,al
c002379b:	75 10                	jne    c00237ad <__addsf3+0x57>
c002379d:	85 db                	test   ebx,ebx
c002379f:	0f 84 aa 02 00 00    	je     c0023a4f <__addsf3+0x2f9>
c00237a5:	49                   	dec    ecx
c00237a6:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00237a9:	74 38                	je     c00237e3 <__addsf3+0x8d>
c00237ab:	eb 13                	jmp    c00237c0 <__addsf3+0x6a>
c00237ad:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00237b0:	f7 d0                	not    eax
c00237b2:	84 c0                	test   al,al
c00237b4:	0f 84 95 02 00 00    	je     c0023a4f <__addsf3+0x2f9>
c00237ba:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00237c0:	83 f9 1f             	cmp    ecx,0x1f
c00237c3:	0f 8f 86 02 00 00    	jg     c0023a4f <__addsf3+0x2f9>
c00237c9:	89 de                	mov    esi,ebx
c00237cb:	d3 ee                	shr    esi,cl
c00237cd:	b8 20 00 00 00       	mov    eax,0x20
c00237d2:	29 c8                	sub    eax,ecx
c00237d4:	89 c1                	mov    ecx,eax
c00237d6:	d3 e3                	shl    ebx,cl
c00237d8:	31 c0                	xor    eax,eax
c00237da:	85 db                	test   ebx,ebx
c00237dc:	0f 95 c0             	setne  al
c00237df:	09 f0                	or     eax,esi
c00237e1:	01 d0                	add    eax,edx
c00237e3:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00237e6:	e9 b6 00 00 00       	jmp    c00238a1 <__addsf3+0x14b>
c00237eb:	74 5c                	je     c0023849 <__addsf3+0xf3>
c00237ed:	89 f1                	mov    ecx,esi
c00237ef:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c00237f2:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00237f5:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00237f9:	75 14                	jne    c002380f <__addsf3+0xb9>
c00237fb:	85 d2                	test   edx,edx
c00237fd:	0f 84 4c 02 00 00    	je     c0023a4f <__addsf3+0x2f9>
c0023803:	49                   	dec    ecx
c0023804:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0023807:	0f 84 94 00 00 00    	je     c00238a1 <__addsf3+0x14b>
c002380d:	eb 12                	jmp    c0023821 <__addsf3+0xcb>
c002380f:	89 f0                	mov    eax,esi
c0023811:	f7 d0                	not    eax
c0023813:	84 c0                	test   al,al
c0023815:	0f 84 34 02 00 00    	je     c0023a4f <__addsf3+0x2f9>
c002381b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0023821:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0023824:	83 f9 1f             	cmp    ecx,0x1f
c0023827:	0f 8f 22 02 00 00    	jg     c0023a4f <__addsf3+0x2f9>
c002382d:	89 d7                	mov    edi,edx
c002382f:	d3 ef                	shr    edi,cl
c0023831:	b8 20 00 00 00       	mov    eax,0x20
c0023836:	29 c8                	sub    eax,ecx
c0023838:	89 c1                	mov    ecx,eax
c002383a:	d3 e2                	shl    edx,cl
c002383c:	31 c0                	xor    eax,eax
c002383e:	85 d2                	test   edx,edx
c0023840:	0f 95 c0             	setne  al
c0023843:	09 f8                	or     eax,edi
c0023845:	01 d8                	add    eax,ebx
c0023847:	eb 58                	jmp    c00238a1 <__addsf3+0x14b>
c0023849:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002384c:	8d 70 01             	lea    esi,[eax+0x1]
c002384f:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0023855:	75 32                	jne    c0023889 <__addsf3+0x133>
c0023857:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c002385b:	75 1f                	jne    c002387c <__addsf3+0x126>
c002385d:	85 d2                	test   edx,edx
c002385f:	0f 84 e0 01 00 00    	je     c0023a45 <__addsf3+0x2ef>
c0023865:	85 db                	test   ebx,ebx
c0023867:	0f 84 e2 01 00 00    	je     c0023a4f <__addsf3+0x2f9>
c002386d:	89 d0                	mov    eax,edx
c002386f:	01 d8                	add    eax,ebx
c0023871:	0f 89 a9 01 00 00    	jns    c0023a20 <__addsf3+0x2ca>
c0023877:	e9 9d 01 00 00       	jmp    c0023a19 <__addsf3+0x2c3>
c002387c:	85 d2                	test   edx,edx
c002387e:	0f 85 cb 01 00 00    	jne    c0023a4f <__addsf3+0x2f9>
c0023884:	e9 bc 01 00 00       	jmp    c0023a45 <__addsf3+0x2ef>
c0023889:	31 c0                	xor    eax,eax
c002388b:	89 f1                	mov    ecx,esi
c002388d:	f7 d1                	not    ecx
c002388f:	84 c9                	test   cl,cl
c0023891:	0f 84 90 01 00 00    	je     c0023a27 <__addsf3+0x2d1>
c0023897:	8d 04 1a             	lea    eax,[edx+ebx*1]
c002389a:	d1 e8                	shr    eax,1
c002389c:	e9 86 01 00 00       	jmp    c0023a27 <__addsf3+0x2d1>
c00238a1:	85 c0                	test   eax,eax
c00238a3:	0f 89 7e 01 00 00    	jns    c0023a27 <__addsf3+0x2d1>
c00238a9:	46                   	inc    esi
c00238aa:	89 f2                	mov    edx,esi
c00238ac:	f7 d2                	not    edx
c00238ae:	84 d2                	test   dl,dl
c00238b0:	0f 84 6f 01 00 00    	je     c0023a25 <__addsf3+0x2cf>
c00238b6:	89 c2                	mov    edx,eax
c00238b8:	83 e2 01             	and    edx,0x1
c00238bb:	d1 e8                	shr    eax,1
c00238bd:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00238c2:	09 d0                	or     eax,edx
c00238c4:	e9 5e 01 00 00       	jmp    c0023a27 <__addsf3+0x2d1>
c00238c9:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c00238cd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00238d0:	89 f0                	mov    eax,esi
c00238d2:	0f b6 c0             	movzx  eax,al
c00238d5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00238d8:	29 c1                	sub    ecx,eax
c00238da:	85 c9                	test   ecx,ecx
c00238dc:	7e 55                	jle    c0023933 <__addsf3+0x1dd>
c00238de:	85 c0                	test   eax,eax
c00238e0:	75 11                	jne    c00238f3 <__addsf3+0x19d>
c00238e2:	85 db                	test   ebx,ebx
c00238e4:	0f 84 65 01 00 00    	je     c0023a4f <__addsf3+0x2f9>
c00238ea:	49                   	dec    ecx
c00238eb:	75 19                	jne    c0023906 <__addsf3+0x1b0>
c00238ed:	89 d0                	mov    eax,edx
c00238ef:	29 d8                	sub    eax,ebx
c00238f1:	eb 38                	jmp    c002392b <__addsf3+0x1d5>
c00238f3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00238f6:	f7 d0                	not    eax
c00238f8:	84 c0                	test   al,al
c00238fa:	0f 84 4f 01 00 00    	je     c0023a4f <__addsf3+0x2f9>
c0023900:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0023906:	83 f9 1f             	cmp    ecx,0x1f
c0023909:	0f 8f 40 01 00 00    	jg     c0023a4f <__addsf3+0x2f9>
c002390f:	89 de                	mov    esi,ebx
c0023911:	d3 ee                	shr    esi,cl
c0023913:	b8 20 00 00 00       	mov    eax,0x20
c0023918:	29 c8                	sub    eax,ecx
c002391a:	89 c1                	mov    ecx,eax
c002391c:	d3 e3                	shl    ebx,cl
c002391e:	31 c0                	xor    eax,eax
c0023920:	85 db                	test   ebx,ebx
c0023922:	0f 95 c0             	setne  al
c0023925:	09 f0                	or     eax,esi
c0023927:	29 c2                	sub    edx,eax
c0023929:	89 d0                	mov    eax,edx
c002392b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002392e:	e9 af 00 00 00       	jmp    c00239e2 <__addsf3+0x28c>
c0023933:	74 5c                	je     c0023991 <__addsf3+0x23b>
c0023935:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0023938:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002393b:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c002393f:	75 14                	jne    c0023955 <__addsf3+0x1ff>
c0023941:	85 d2                	test   edx,edx
c0023943:	0f 84 06 01 00 00    	je     c0023a4f <__addsf3+0x2f9>
c0023949:	48                   	dec    eax
c002394a:	75 1b                	jne    c0023967 <__addsf3+0x211>
c002394c:	89 d8                	mov    eax,ebx
c002394e:	29 d0                	sub    eax,edx
c0023950:	e9 8d 00 00 00       	jmp    c00239e2 <__addsf3+0x28c>
c0023955:	89 f1                	mov    ecx,esi
c0023957:	f7 d1                	not    ecx
c0023959:	84 c9                	test   cl,cl
c002395b:	0f 84 ee 00 00 00    	je     c0023a4f <__addsf3+0x2f9>
c0023961:	81 ca 00 00 00 80    	or     edx,0x80000000
c0023967:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002396a:	83 f8 1f             	cmp    eax,0x1f
c002396d:	0f 8f dc 00 00 00    	jg     c0023a4f <__addsf3+0x2f9>
c0023973:	89 d7                	mov    edi,edx
c0023975:	88 c1                	mov    cl,al
c0023977:	d3 ef                	shr    edi,cl
c0023979:	b9 20 00 00 00       	mov    ecx,0x20
c002397e:	29 c1                	sub    ecx,eax
c0023980:	d3 e2                	shl    edx,cl
c0023982:	31 c0                	xor    eax,eax
c0023984:	85 d2                	test   edx,edx
c0023986:	0f 95 c0             	setne  al
c0023989:	09 f8                	or     eax,edi
c002398b:	29 c3                	sub    ebx,eax
c002398d:	89 d8                	mov    eax,ebx
c002398f:	eb 51                	jmp    c00239e2 <__addsf3+0x28c>
c0023991:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0023994:	40                   	inc    eax
c0023995:	a8 fe                	test   al,0xfe
c0023997:	75 3d                	jne    c00239d6 <__addsf3+0x280>
c0023999:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c002399d:	0f 85 a7 00 00 00    	jne    c0023a4a <__addsf3+0x2f4>
c00239a3:	85 d2                	test   edx,edx
c00239a5:	75 12                	jne    c00239b9 <__addsf3+0x263>
c00239a7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00239aa:	85 db                	test   ebx,ebx
c00239ac:	0f 85 9d 00 00 00    	jne    c0023a4f <__addsf3+0x2f9>
c00239b2:	31 ff                	xor    edi,edi
c00239b4:	e9 96 00 00 00       	jmp    c0023a4f <__addsf3+0x2f9>
c00239b9:	85 db                	test   ebx,ebx
c00239bb:	0f 84 8e 00 00 00    	je     c0023a4f <__addsf3+0x2f9>
c00239c1:	89 d0                	mov    eax,edx
c00239c3:	29 d8                	sub    eax,ebx
c00239c5:	79 06                	jns    c00239cd <__addsf3+0x277>
c00239c7:	89 d8                	mov    eax,ebx
c00239c9:	29 d0                	sub    eax,edx
c00239cb:	eb 5a                	jmp    c0023a27 <__addsf3+0x2d1>
c00239cd:	bf 00 00 00 00       	mov    edi,0x0
c00239d2:	74 7b                	je     c0023a4f <__addsf3+0x2f9>
c00239d4:	eb 4a                	jmp    c0023a20 <__addsf3+0x2ca>
c00239d6:	89 d0                	mov    eax,edx
c00239d8:	29 d8                	sub    eax,ebx
c00239da:	79 12                	jns    c00239ee <__addsf3+0x298>
c00239dc:	89 d8                	mov    eax,ebx
c00239de:	29 d0                	sub    eax,edx
c00239e0:	eb 09                	jmp    c00239eb <__addsf3+0x295>
c00239e2:	85 c0                	test   eax,eax
c00239e4:	79 41                	jns    c0023a27 <__addsf3+0x2d1>
c00239e6:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00239eb:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c00239ee:	31 f6                	xor    esi,esi
c00239f0:	85 c0                	test   eax,eax
c00239f2:	74 33                	je     c0023a27 <__addsf3+0x2d1>
c00239f4:	0f bd c8             	bsr    ecx,eax
c00239f7:	83 f1 1f             	xor    ecx,0x1f
c00239fa:	d3 e0                	shl    eax,cl
c00239fc:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0023a00:	39 ca                	cmp    edx,ecx
c0023a02:	7f 10                	jg     c0023a14 <__addsf3+0x2be>
c0023a04:	29 d1                	sub    ecx,edx
c0023a06:	41                   	inc    ecx
c0023a07:	d3 e8                	shr    eax,cl
c0023a09:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0023a0c:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0023a12:	eb 13                	jmp    c0023a27 <__addsf3+0x2d1>
c0023a14:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0023a17:	29 ce                	sub    esi,ecx
c0023a19:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0023a1e:	eb 07                	jmp    c0023a27 <__addsf3+0x2d1>
c0023a20:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0023a23:	eb 02                	jmp    c0023a27 <__addsf3+0x2d1>
c0023a25:	31 c0                	xor    eax,eax
c0023a27:	89 c2                	mov    edx,eax
c0023a29:	c1 ea 08             	shr    edx,0x8
c0023a2c:	a8 7f                	test   al,0x7f
c0023a2e:	0f 95 c1             	setne  cl
c0023a31:	09 d1                	or     ecx,edx
c0023a33:	83 e1 01             	and    ecx,0x1
c0023a36:	c1 e8 07             	shr    eax,0x7
c0023a39:	21 c8                	and    eax,ecx
c0023a3b:	c1 e6 17             	shl    esi,0x17
c0023a3e:	09 d6                	or     esi,edx
c0023a40:	8d 3c 30             	lea    edi,[eax+esi*1]
c0023a43:	eb 0a                	jmp    c0023a4f <__addsf3+0x2f9>
c0023a45:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0023a48:	eb 05                	jmp    c0023a4f <__addsf3+0x2f9>
c0023a4a:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0023a4f:	89 f8                	mov    eax,edi
c0023a51:	5a                   	pop    edx
c0023a52:	59                   	pop    ecx
c0023a53:	5b                   	pop    ebx
c0023a54:	5e                   	pop    esi
c0023a55:	5f                   	pop    edi
c0023a56:	5d                   	pop    ebp
c0023a57:	c3                   	ret    

c0023a58 <__subsf3>:
c0023a58:	55                   	push   ebp
c0023a59:	89 e5                	mov    ebp,esp
c0023a5b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0023a5e:	05 00 00 00 80       	add    eax,0x80000000
c0023a63:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0023a66:	5d                   	pop    ebp
c0023a67:	e9 ea fc ff ff       	jmp    c0023756 <__addsf3>

c0023a6c <__negsf2>:
c0023a6c:	55                   	push   ebp
c0023a6d:	89 e5                	mov    ebp,esp
c0023a6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023a72:	05 00 00 00 80       	add    eax,0x80000000
c0023a77:	5d                   	pop    ebp
c0023a78:	c3                   	ret    

c0023a79 <__mulsf3>:
c0023a79:	55                   	push   ebp
c0023a7a:	89 e5                	mov    ebp,esp
c0023a7c:	57                   	push   edi
c0023a7d:	56                   	push   esi
c0023a7e:	53                   	push   ebx
c0023a7f:	83 ec 1c             	sub    esp,0x1c
c0023a82:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0023a85:	89 f0                	mov    eax,esi
c0023a87:	89 f1                	mov    ecx,esi
c0023a89:	c1 f9 17             	sar    ecx,0x17
c0023a8c:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0023a8f:	c1 e0 08             	shl    eax,0x8
c0023a92:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0023a97:	89 c1                	mov    ecx,eax
c0023a99:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0023a9c:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0023a9f:	89 c7                	mov    edi,eax
c0023aa1:	c1 ff 17             	sar    edi,0x17
c0023aa4:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0023aa8:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0023aab:	89 f8                	mov    eax,edi
c0023aad:	0f b6 c0             	movzx  eax,al
c0023ab0:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0023ab3:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0023ab7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0023aba:	42                   	inc    edx
c0023abb:	80 e2 fe             	and    dl,0xfe
c0023abe:	75 7b                	jne    c0023b3b <__mulsf3+0xc2>
c0023ac0:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0023ac4:	74 54                	je     c0023b1a <__mulsf3+0xa1>
c0023ac6:	85 c9                	test   ecx,ecx
c0023ac8:	0f 85 64 01 00 00    	jne    c0023c32 <__mulsf3+0x1b9>
c0023ace:	8d 57 01             	lea    edx,[edi+0x1]
c0023ad1:	80 e2 fe             	and    dl,0xfe
c0023ad4:	75 1f                	jne    c0023af5 <__mulsf3+0x7c>
c0023ad6:	85 c0                	test   eax,eax
c0023ad8:	b8 00 00 00 00       	mov    eax,0x0
c0023add:	74 29                	je     c0023b08 <__mulsf3+0x8f>
c0023adf:	53                   	push   ebx
c0023ae0:	53                   	push   ebx
c0023ae1:	50                   	push   eax
c0023ae2:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023ae5:	e8 96 05 00 00       	call   c0024080 <__nesf2>
c0023aea:	83 c4 10             	add    esp,0x10
c0023aed:	85 c0                	test   eax,eax
c0023aef:	0f 85 3a 01 00 00    	jne    c0023c2f <__mulsf3+0x1b6>
c0023af5:	85 ff                	test   edi,edi
c0023af7:	0f 89 35 01 00 00    	jns    c0023c32 <__mulsf3+0x1b9>
c0023afd:	81 c6 00 00 00 80    	add    esi,0x80000000
c0023b03:	e9 2a 01 00 00       	jmp    c0023c32 <__mulsf3+0x1b9>
c0023b08:	51                   	push   ecx
c0023b09:	51                   	push   ecx
c0023b0a:	50                   	push   eax
c0023b0b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023b0e:	e8 6d 05 00 00       	call   c0024080 <__nesf2>
c0023b13:	83 c4 10             	add    esp,0x10
c0023b16:	85 c0                	test   eax,eax
c0023b18:	eb 15                	jmp    c0023b2f <__mulsf3+0xb6>
c0023b1a:	85 c9                	test   ecx,ecx
c0023b1c:	74 0b                	je     c0023b29 <__mulsf3+0xb0>
c0023b1e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0023b21:	01 c9                	add    ecx,ecx
c0023b23:	78 16                	js     c0023b3b <__mulsf3+0xc2>
c0023b25:	89 d3                	mov    ebx,edx
c0023b27:	eb f5                	jmp    c0023b1e <__mulsf3+0xa5>
c0023b29:	89 f8                	mov    eax,edi
c0023b2b:	f7 d0                	not    eax
c0023b2d:	84 c0                	test   al,al
c0023b2f:	75 c4                	jne    c0023af5 <__mulsf3+0x7c>
c0023b31:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0023b36:	e9 f7 00 00 00       	jmp    c0023c32 <__mulsf3+0x1b9>
c0023b3b:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0023b3e:	c1 e6 08             	shl    esi,0x8
c0023b41:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0023b47:	8d 57 01             	lea    edx,[edi+0x1]
c0023b4a:	80 e2 fe             	and    dl,0xfe
c0023b4d:	75 63                	jne    c0023bb2 <__mulsf3+0x139>
c0023b4f:	85 c0                	test   eax,eax
c0023b51:	74 2f                	je     c0023b82 <__mulsf3+0x109>
c0023b53:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0023b57:	0f 89 d2 00 00 00    	jns    c0023c2f <__mulsf3+0x1b6>
c0023b5d:	52                   	push   edx
c0023b5e:	52                   	push   edx
c0023b5f:	6a 00                	push   0x0
c0023b61:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023b64:	e8 dc 04 00 00       	call   c0024045 <__eqsf2>
c0023b69:	83 c4 10             	add    esp,0x10
c0023b6c:	85 c0                	test   eax,eax
c0023b6e:	0f 85 bb 00 00 00    	jne    c0023c2f <__mulsf3+0x1b6>
c0023b74:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0023b77:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0023b7d:	e9 b0 00 00 00       	jmp    c0023c32 <__mulsf3+0x1b9>
c0023b82:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0023b85:	50                   	push   eax
c0023b86:	50                   	push   eax
c0023b87:	6a 00                	push   0x0
c0023b89:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023b8c:	e8 b4 04 00 00       	call   c0024045 <__eqsf2>
c0023b91:	83 c4 10             	add    esp,0x10
c0023b94:	85 c0                	test   eax,eax
c0023b96:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0023b99:	75 0c                	jne    c0023ba7 <__mulsf3+0x12e>
c0023b9b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0023b9f:	0f 89 8a 00 00 00    	jns    c0023c2f <__mulsf3+0x1b6>
c0023ba5:	eb cd                	jmp    c0023b74 <__mulsf3+0xfb>
c0023ba7:	8d 43 ff             	lea    eax,[ebx-0x1]
c0023baa:	01 f6                	add    esi,esi
c0023bac:	78 04                	js     c0023bb2 <__mulsf3+0x139>
c0023bae:	89 c3                	mov    ebx,eax
c0023bb0:	eb f5                	jmp    c0023ba7 <__mulsf3+0x12e>
c0023bb2:	89 c8                	mov    eax,ecx
c0023bb4:	0d 00 00 00 80       	or     eax,0x80000000
c0023bb9:	81 ce 00 00 00 80    	or     esi,0x80000000
c0023bbf:	f7 e6                	mul    esi
c0023bc1:	85 c0                	test   eax,eax
c0023bc3:	0f 95 c0             	setne  al
c0023bc6:	0f b6 c0             	movzx  eax,al
c0023bc9:	09 c2                	or     edx,eax
c0023bcb:	78 03                	js     c0023bd0 <__mulsf3+0x157>
c0023bcd:	01 d2                	add    edx,edx
c0023bcf:	4b                   	dec    ebx
c0023bd0:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0023bd6:	7f 22                	jg     c0023bfa <__mulsf3+0x181>
c0023bd8:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0023bde:	85 db                	test   ebx,ebx
c0023be0:	7f 23                	jg     c0023c05 <__mulsf3+0x18c>
c0023be2:	83 fb e9             	cmp    ebx,0xffffffe9
c0023be5:	7c 1a                	jl     c0023c01 <__mulsf3+0x188>
c0023be7:	81 ca 00 00 00 80    	or     edx,0x80000000
c0023bed:	b9 01 00 00 00       	mov    ecx,0x1
c0023bf2:	29 d9                	sub    ecx,ebx
c0023bf4:	d3 ea                	shr    edx,cl
c0023bf6:	31 db                	xor    ebx,ebx
c0023bf8:	eb 0b                	jmp    c0023c05 <__mulsf3+0x18c>
c0023bfa:	bb ff 00 00 00       	mov    ebx,0xff
c0023bff:	eb 02                	jmp    c0023c03 <__mulsf3+0x18a>
c0023c01:	31 db                	xor    ebx,ebx
c0023c03:	31 d2                	xor    edx,edx
c0023c05:	89 d0                	mov    eax,edx
c0023c07:	c1 e8 08             	shr    eax,0x8
c0023c0a:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0023c0d:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0023c13:	09 fb                	or     ebx,edi
c0023c15:	c1 e3 17             	shl    ebx,0x17
c0023c18:	09 c3                	or     ebx,eax
c0023c1a:	f6 c2 7f             	test   dl,0x7f
c0023c1d:	0f 95 c1             	setne  cl
c0023c20:	09 c8                	or     eax,ecx
c0023c22:	83 e0 01             	and    eax,0x1
c0023c25:	c1 ea 07             	shr    edx,0x7
c0023c28:	21 c2                	and    edx,eax
c0023c2a:	8d 34 13             	lea    esi,[ebx+edx*1]
c0023c2d:	eb 03                	jmp    c0023c32 <__mulsf3+0x1b9>
c0023c2f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0023c32:	89 f0                	mov    eax,esi
c0023c34:	8d 65 f4             	lea    esp,[ebp-0xc]
c0023c37:	5b                   	pop    ebx
c0023c38:	5e                   	pop    esi
c0023c39:	5f                   	pop    edi
c0023c3a:	5d                   	pop    ebp
c0023c3b:	c3                   	ret    

c0023c3c <__divsf3>:
c0023c3c:	55                   	push   ebp
c0023c3d:	89 e5                	mov    ebp,esp
c0023c3f:	57                   	push   edi
c0023c40:	56                   	push   esi
c0023c41:	53                   	push   ebx
c0023c42:	83 ec 1c             	sub    esp,0x1c
c0023c45:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0023c48:	89 d8                	mov    eax,ebx
c0023c4a:	89 d9                	mov    ecx,ebx
c0023c4c:	c1 f9 17             	sar    ecx,0x17
c0023c4f:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0023c52:	c1 e0 08             	shl    eax,0x8
c0023c55:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0023c5a:	89 c1                	mov    ecx,eax
c0023c5c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0023c5f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0023c62:	89 c7                	mov    edi,eax
c0023c64:	c1 ff 17             	sar    edi,0x17
c0023c67:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0023c6b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0023c6e:	89 f8                	mov    eax,edi
c0023c70:	0f b6 c0             	movzx  eax,al
c0023c73:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0023c76:	29 c6                	sub    esi,eax
c0023c78:	83 c6 7f             	add    esi,0x7f
c0023c7b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0023c7e:	42                   	inc    edx
c0023c7f:	80 e2 fe             	and    dl,0xfe
c0023c82:	0f 85 9c 00 00 00    	jne    c0023d24 <__divsf3+0xe8>
c0023c88:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0023c8c:	74 33                	je     c0023cc1 <__divsf3+0x85>
c0023c8e:	85 c9                	test   ecx,ecx
c0023c90:	0f 85 c7 01 00 00    	jne    c0023e5d <__divsf3+0x221>
c0023c96:	8d 57 01             	lea    edx,[edi+0x1]
c0023c99:	80 e2 fe             	and    dl,0xfe
c0023c9c:	75 2f                	jne    c0023ccd <__divsf3+0x91>
c0023c9e:	85 c0                	test   eax,eax
c0023ca0:	74 2b                	je     c0023ccd <__divsf3+0x91>
c0023ca2:	51                   	push   ecx
c0023ca3:	51                   	push   ecx
c0023ca4:	6a 00                	push   0x0
c0023ca6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023ca9:	e8 d2 03 00 00       	call   c0024080 <__nesf2>
c0023cae:	83 c4 10             	add    esp,0x10
c0023cb1:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0023cb4:	85 c0                	test   eax,eax
c0023cb6:	0f 85 a1 01 00 00    	jne    c0023e5d <__divsf3+0x221>
c0023cbc:	e9 92 01 00 00       	jmp    c0023e53 <__divsf3+0x217>
c0023cc1:	85 c9                	test   ecx,ecx
c0023cc3:	75 1b                	jne    c0023ce0 <__divsf3+0xa4>
c0023cc5:	8d 57 01             	lea    edx,[edi+0x1]
c0023cc8:	80 e2 fe             	and    dl,0xfe
c0023ccb:	74 1e                	je     c0023ceb <__divsf3+0xaf>
c0023ccd:	85 ff                	test   edi,edi
c0023ccf:	0f 89 88 01 00 00    	jns    c0023e5d <__divsf3+0x221>
c0023cd5:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0023cdb:	e9 7d 01 00 00       	jmp    c0023e5d <__divsf3+0x221>
c0023ce0:	8d 56 ff             	lea    edx,[esi-0x1]
c0023ce3:	01 c9                	add    ecx,ecx
c0023ce5:	78 3d                	js     c0023d24 <__divsf3+0xe8>
c0023ce7:	89 d6                	mov    esi,edx
c0023ce9:	eb f5                	jmp    c0023ce0 <__divsf3+0xa4>
c0023ceb:	85 c0                	test   eax,eax
c0023ced:	b8 00 00 00 00       	mov    eax,0x0
c0023cf2:	74 18                	je     c0023d0c <__divsf3+0xd0>
c0023cf4:	52                   	push   edx
c0023cf5:	52                   	push   edx
c0023cf6:	50                   	push   eax
c0023cf7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023cfa:	e8 81 03 00 00       	call   c0024080 <__nesf2>
c0023cff:	83 c4 10             	add    esp,0x10
c0023d02:	85 c0                	test   eax,eax
c0023d04:	0f 85 50 01 00 00    	jne    c0023e5a <__divsf3+0x21e>
c0023d0a:	eb c1                	jmp    c0023ccd <__divsf3+0x91>
c0023d0c:	56                   	push   esi
c0023d0d:	56                   	push   esi
c0023d0e:	50                   	push   eax
c0023d0f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023d12:	e8 69 03 00 00       	call   c0024080 <__nesf2>
c0023d17:	83 c4 10             	add    esp,0x10
c0023d1a:	85 c0                	test   eax,eax
c0023d1c:	0f 84 31 01 00 00    	je     c0023e53 <__divsf3+0x217>
c0023d22:	eb a9                	jmp    c0023ccd <__divsf3+0x91>
c0023d24:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0023d27:	c1 e3 08             	shl    ebx,0x8
c0023d2a:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0023d30:	8d 57 01             	lea    edx,[edi+0x1]
c0023d33:	80 e2 fe             	and    dl,0xfe
c0023d36:	75 71                	jne    c0023da9 <__divsf3+0x16d>
c0023d38:	85 c0                	test   eax,eax
c0023d3a:	ba 00 00 00 00       	mov    edx,0x0
c0023d3f:	74 2f                	je     c0023d70 <__divsf3+0x134>
c0023d41:	51                   	push   ecx
c0023d42:	51                   	push   ecx
c0023d43:	52                   	push   edx
c0023d44:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023d47:	e8 f9 02 00 00       	call   c0024045 <__eqsf2>
c0023d4c:	83 c4 10             	add    esp,0x10
c0023d4f:	85 c0                	test   eax,eax
c0023d51:	0f 85 03 01 00 00    	jne    c0023e5a <__divsf3+0x21e>
c0023d57:	31 d2                	xor    edx,edx
c0023d59:	89 d3                	mov    ebx,edx
c0023d5b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0023d5e:	31 f8                	xor    eax,edi
c0023d60:	0f 89 f7 00 00 00    	jns    c0023e5d <__divsf3+0x221>
c0023d66:	bb 00 00 00 80       	mov    ebx,0x80000000
c0023d6b:	e9 ed 00 00 00       	jmp    c0023e5d <__divsf3+0x221>
c0023d70:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0023d73:	50                   	push   eax
c0023d74:	50                   	push   eax
c0023d75:	52                   	push   edx
c0023d76:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023d79:	e8 c7 02 00 00       	call   c0024045 <__eqsf2>
c0023d7e:	83 c4 10             	add    esp,0x10
c0023d81:	85 c0                	test   eax,eax
c0023d83:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0023d86:	75 16                	jne    c0023d9e <__divsf3+0x162>
c0023d88:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0023d8b:	31 fb                	xor    ebx,edi
c0023d8d:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0023d93:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0023d99:	e9 bf 00 00 00       	jmp    c0023e5d <__divsf3+0x221>
c0023d9e:	8d 46 01             	lea    eax,[esi+0x1]
c0023da1:	01 db                	add    ebx,ebx
c0023da3:	78 04                	js     c0023da9 <__divsf3+0x16d>
c0023da5:	89 c6                	mov    esi,eax
c0023da7:	eb f5                	jmp    c0023d9e <__divsf3+0x162>
c0023da9:	89 c8                	mov    eax,ecx
c0023dab:	0d 00 00 00 80       	or     eax,0x80000000
c0023db0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0023db6:	31 d2                	xor    edx,edx
c0023db8:	39 d8                	cmp    eax,ebx
c0023dba:	72 07                	jb     c0023dc3 <__divsf3+0x187>
c0023dbc:	29 d8                	sub    eax,ebx
c0023dbe:	ba 01 00 00 00       	mov    edx,0x1
c0023dc3:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0023dca:	01 d2                	add    edx,edx
c0023dcc:	89 c1                	mov    ecx,eax
c0023dce:	01 c0                	add    eax,eax
c0023dd0:	85 c9                	test   ecx,ecx
c0023dd2:	78 04                	js     c0023dd8 <__divsf3+0x19c>
c0023dd4:	39 c3                	cmp    ebx,eax
c0023dd6:	77 05                	ja     c0023ddd <__divsf3+0x1a1>
c0023dd8:	29 d8                	sub    eax,ebx
c0023dda:	83 ca 01             	or     edx,0x1
c0023ddd:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0023de0:	75 e8                	jne    c0023dca <__divsf3+0x18e>
c0023de2:	85 c0                	test   eax,eax
c0023de4:	0f 95 c0             	setne  al
c0023de7:	0f b6 c0             	movzx  eax,al
c0023dea:	c1 e2 06             	shl    edx,0x6
c0023ded:	09 c2                	or     edx,eax
c0023def:	78 03                	js     c0023df4 <__divsf3+0x1b8>
c0023df1:	01 d2                	add    edx,edx
c0023df3:	4e                   	dec    esi
c0023df4:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0023dfa:	7f 22                	jg     c0023e1e <__divsf3+0x1e2>
c0023dfc:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0023e02:	85 f6                	test   esi,esi
c0023e04:	7f 23                	jg     c0023e29 <__divsf3+0x1ed>
c0023e06:	83 fe e9             	cmp    esi,0xffffffe9
c0023e09:	7c 1a                	jl     c0023e25 <__divsf3+0x1e9>
c0023e0b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0023e11:	b9 01 00 00 00       	mov    ecx,0x1
c0023e16:	29 f1                	sub    ecx,esi
c0023e18:	d3 ea                	shr    edx,cl
c0023e1a:	31 f6                	xor    esi,esi
c0023e1c:	eb 0b                	jmp    c0023e29 <__divsf3+0x1ed>
c0023e1e:	be ff 00 00 00       	mov    esi,0xff
c0023e23:	eb 02                	jmp    c0023e27 <__divsf3+0x1eb>
c0023e25:	31 f6                	xor    esi,esi
c0023e27:	31 d2                	xor    edx,edx
c0023e29:	89 d0                	mov    eax,edx
c0023e2b:	c1 e8 08             	shr    eax,0x8
c0023e2e:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0023e31:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0023e37:	09 fe                	or     esi,edi
c0023e39:	c1 e6 17             	shl    esi,0x17
c0023e3c:	09 c6                	or     esi,eax
c0023e3e:	f6 c2 7f             	test   dl,0x7f
c0023e41:	0f 95 c1             	setne  cl
c0023e44:	09 c8                	or     eax,ecx
c0023e46:	83 e0 01             	and    eax,0x1
c0023e49:	c1 ea 07             	shr    edx,0x7
c0023e4c:	21 c2                	and    edx,eax
c0023e4e:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0023e51:	eb 0a                	jmp    c0023e5d <__divsf3+0x221>
c0023e53:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0023e58:	eb 03                	jmp    c0023e5d <__divsf3+0x221>
c0023e5a:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0023e5d:	89 d8                	mov    eax,ebx
c0023e5f:	8d 65 f4             	lea    esp,[ebp-0xc]
c0023e62:	5b                   	pop    ebx
c0023e63:	5e                   	pop    esi
c0023e64:	5f                   	pop    edi
c0023e65:	5d                   	pop    ebp
c0023e66:	c3                   	ret    

c0023e67 <__floatsisf>:
c0023e67:	55                   	push   ebp
c0023e68:	89 e5                	mov    ebp,esp
c0023e6a:	53                   	push   ebx
c0023e6b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0023e6e:	85 d2                	test   edx,edx
c0023e70:	7e 2b                	jle    c0023e9d <__floatsisf+0x36>
c0023e72:	0f bd ca             	bsr    ecx,edx
c0023e75:	83 f1 1f             	xor    ecx,0x1f
c0023e78:	d3 e2                	shl    edx,cl
c0023e7a:	89 d0                	mov    eax,edx
c0023e7c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0023e81:	89 c3                	mov    ebx,eax
c0023e83:	c1 eb 08             	shr    ebx,0x8
c0023e86:	80 e2 7f             	and    dl,0x7f
c0023e89:	0f 95 c2             	setne  dl
c0023e8c:	09 da                	or     edx,ebx
c0023e8e:	83 e2 01             	and    edx,0x1
c0023e91:	c1 e8 07             	shr    eax,0x7
c0023e94:	21 c2                	and    edx,eax
c0023e96:	b8 9e 00 00 00       	mov    eax,0x9e
c0023e9b:	eb 32                	jmp    c0023ecf <__floatsisf+0x68>
c0023e9d:	b8 00 00 00 00       	mov    eax,0x0
c0023ea2:	74 34                	je     c0023ed8 <__floatsisf+0x71>
c0023ea4:	f7 da                	neg    edx
c0023ea6:	0f bd ca             	bsr    ecx,edx
c0023ea9:	83 f1 1f             	xor    ecx,0x1f
c0023eac:	d3 e2                	shl    edx,cl
c0023eae:	89 d0                	mov    eax,edx
c0023eb0:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0023eb5:	89 c3                	mov    ebx,eax
c0023eb7:	c1 eb 08             	shr    ebx,0x8
c0023eba:	80 e2 7f             	and    dl,0x7f
c0023ebd:	0f 95 c2             	setne  dl
c0023ec0:	09 da                	or     edx,ebx
c0023ec2:	83 e2 01             	and    edx,0x1
c0023ec5:	c1 e8 07             	shr    eax,0x7
c0023ec8:	21 c2                	and    edx,eax
c0023eca:	b8 9e 01 00 00       	mov    eax,0x19e
c0023ecf:	29 c8                	sub    eax,ecx
c0023ed1:	c1 e0 17             	shl    eax,0x17
c0023ed4:	09 d8                	or     eax,ebx
c0023ed6:	01 d0                	add    eax,edx
c0023ed8:	5b                   	pop    ebx
c0023ed9:	5d                   	pop    ebp
c0023eda:	c3                   	ret    

c0023edb <__floatunsisf>:
c0023edb:	55                   	push   ebp
c0023edc:	89 e5                	mov    ebp,esp
c0023ede:	53                   	push   ebx
c0023edf:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0023ee2:	31 c0                	xor    eax,eax
c0023ee4:	85 d2                	test   edx,edx
c0023ee6:	74 32                	je     c0023f1a <__floatunsisf+0x3f>
c0023ee8:	0f bd ca             	bsr    ecx,edx
c0023eeb:	83 f1 1f             	xor    ecx,0x1f
c0023eee:	d3 e2                	shl    edx,cl
c0023ef0:	89 d0                	mov    eax,edx
c0023ef2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0023ef7:	89 c3                	mov    ebx,eax
c0023ef9:	c1 eb 08             	shr    ebx,0x8
c0023efc:	80 e2 7f             	and    dl,0x7f
c0023eff:	0f 95 c2             	setne  dl
c0023f02:	09 da                	or     edx,ebx
c0023f04:	83 e2 01             	and    edx,0x1
c0023f07:	c1 e8 07             	shr    eax,0x7
c0023f0a:	21 c2                	and    edx,eax
c0023f0c:	b8 9e 00 00 00       	mov    eax,0x9e
c0023f11:	29 c8                	sub    eax,ecx
c0023f13:	c1 e0 17             	shl    eax,0x17
c0023f16:	09 d8                	or     eax,ebx
c0023f18:	01 d0                	add    eax,edx
c0023f1a:	5b                   	pop    ebx
c0023f1b:	5d                   	pop    ebp
c0023f1c:	c3                   	ret    

c0023f1d <__fixsfsi>:
c0023f1d:	55                   	push   ebp
c0023f1e:	89 e5                	mov    ebp,esp
c0023f20:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0023f23:	89 d1                	mov    ecx,edx
c0023f25:	c1 e1 08             	shl    ecx,0x8
c0023f28:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0023f2e:	c1 fa 17             	sar    edx,0x17
c0023f31:	78 1c                	js     c0023f4f <__fixsfsi+0x32>
c0023f33:	83 ea 7f             	sub    edx,0x7f
c0023f36:	31 c0                	xor    eax,eax
c0023f38:	83 fa 1e             	cmp    edx,0x1e
c0023f3b:	77 40                	ja     c0023f7d <__fixsfsi+0x60>
c0023f3d:	89 c8                	mov    eax,ecx
c0023f3f:	0d 00 00 00 80       	or     eax,0x80000000
c0023f44:	b9 1f 00 00 00       	mov    ecx,0x1f
c0023f49:	29 d1                	sub    ecx,edx
c0023f4b:	d3 e8                	shr    eax,cl
c0023f4d:	eb 2e                	jmp    c0023f7d <__fixsfsi+0x60>
c0023f4f:	31 c0                	xor    eax,eax
c0023f51:	81 c2 81 00 00 00    	add    edx,0x81
c0023f57:	78 24                	js     c0023f7d <__fixsfsi+0x60>
c0023f59:	83 fa 1e             	cmp    edx,0x1e
c0023f5c:	7e 09                	jle    c0023f67 <__fixsfsi+0x4a>
c0023f5e:	83 fa 1f             	cmp    edx,0x1f
c0023f61:	75 18                	jne    c0023f7b <__fixsfsi+0x5e>
c0023f63:	85 c9                	test   ecx,ecx
c0023f65:	75 14                	jne    c0023f7b <__fixsfsi+0x5e>
c0023f67:	89 c8                	mov    eax,ecx
c0023f69:	0d 00 00 00 80       	or     eax,0x80000000
c0023f6e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0023f73:	29 d1                	sub    ecx,edx
c0023f75:	d3 e8                	shr    eax,cl
c0023f77:	f7 d8                	neg    eax
c0023f79:	eb 02                	jmp    c0023f7d <__fixsfsi+0x60>
c0023f7b:	31 c0                	xor    eax,eax
c0023f7d:	5d                   	pop    ebp
c0023f7e:	c3                   	ret    

c0023f7f <__fixunssfsi>:
c0023f7f:	55                   	push   ebp
c0023f80:	89 e5                	mov    ebp,esp
c0023f82:	53                   	push   ebx
c0023f83:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0023f86:	89 d3                	mov    ebx,edx
c0023f88:	c1 fb 17             	sar    ebx,0x17
c0023f8b:	83 eb 7f             	sub    ebx,0x7f
c0023f8e:	31 c0                	xor    eax,eax
c0023f90:	83 fb 1f             	cmp    ebx,0x1f
c0023f93:	77 18                	ja     c0023fad <__fixunssfsi+0x2e>
c0023f95:	89 d0                	mov    eax,edx
c0023f97:	c1 e0 08             	shl    eax,0x8
c0023f9a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0023f9f:	0d 00 00 00 80       	or     eax,0x80000000
c0023fa4:	b9 1f 00 00 00       	mov    ecx,0x1f
c0023fa9:	29 d9                	sub    ecx,ebx
c0023fab:	d3 e8                	shr    eax,cl
c0023fad:	5b                   	pop    ebx
c0023fae:	5d                   	pop    ebp
c0023faf:	c3                   	ret    

c0023fb0 <__cmpsf2>:
c0023fb0:	55                   	push   ebp
c0023fb1:	89 e5                	mov    ebp,esp
c0023fb3:	57                   	push   edi
c0023fb4:	56                   	push   esi
c0023fb5:	53                   	push   ebx
c0023fb6:	83 ec 24             	sub    esp,0x24
c0023fb9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023fbc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023fbf:	e8 4f 10 00 00       	call   c0025013 <__truncdfsf2>
c0023fc4:	5a                   	pop    edx
c0023fc5:	59                   	pop    ecx
c0023fc6:	89 c3                	mov    ebx,eax
c0023fc8:	c1 e8 17             	shr    eax,0x17
c0023fcb:	0f b6 f0             	movzx  esi,al
c0023fce:	89 d8                	mov    eax,ebx
c0023fd0:	c1 e8 1f             	shr    eax,0x1f
c0023fd3:	31 c6                	xor    esi,eax
c0023fd5:	c1 e3 08             	shl    ebx,0x8
c0023fd8:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0023fdb:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0023fde:	e8 30 10 00 00       	call   c0025013 <__truncdfsf2>
c0023fe3:	83 c4 10             	add    esp,0x10
c0023fe6:	89 c1                	mov    ecx,eax
c0023fe8:	c1 e9 17             	shr    ecx,0x17
c0023feb:	0f b6 c9             	movzx  ecx,cl
c0023fee:	89 c7                	mov    edi,eax
c0023ff0:	c1 ef 1f             	shr    edi,0x1f
c0023ff3:	89 ca                	mov    edx,ecx
c0023ff5:	31 fa                	xor    edx,edi
c0023ff7:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0023ffa:	c1 e0 08             	shl    eax,0x8
c0023ffd:	89 c2                	mov    edx,eax
c0023fff:	89 d8                	mov    eax,ebx
c0024001:	09 d0                	or     eax,edx
c0024003:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0024008:	09 f0                	or     eax,esi
c002400a:	75 08                	jne    c0024014 <__cmpsf2+0x64>
c002400c:	31 c0                	xor    eax,eax
c002400e:	39 f9                	cmp    ecx,edi
c0024010:	75 0c                	jne    c002401e <__cmpsf2+0x6e>
c0024012:	eb 29                	jmp    c002403d <__cmpsf2+0x8d>
c0024014:	b8 01 00 00 00       	mov    eax,0x1
c0024019:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c002401c:	7f 1f                	jg     c002403d <__cmpsf2+0x8d>
c002401e:	83 c8 ff             	or     eax,0xffffffff
c0024021:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0024024:	7c 17                	jl     c002403d <__cmpsf2+0x8d>
c0024026:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002402c:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0024032:	b8 01 00 00 00       	mov    eax,0x1
c0024037:	39 d3                	cmp    ebx,edx
c0024039:	77 02                	ja     c002403d <__cmpsf2+0x8d>
c002403b:	19 c0                	sbb    eax,eax
c002403d:	8d 65 f4             	lea    esp,[ebp-0xc]
c0024040:	5b                   	pop    ebx
c0024041:	5e                   	pop    esi
c0024042:	5f                   	pop    edi
c0024043:	5d                   	pop    ebp
c0024044:	c3                   	ret    

c0024045 <__eqsf2>:
c0024045:	55                   	push   ebp
c0024046:	89 e5                	mov    ebp,esp
c0024048:	83 ec 24             	sub    esp,0x24
c002404b:	6a 01                	push   0x1
c002404d:	83 ec 0c             	sub    esp,0xc
c0024050:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0024053:	e8 df 10 00 00       	call   c0025137 <__extendsfdf2>
c0024058:	83 c4 10             	add    esp,0x10
c002405b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002405e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0024061:	52                   	push   edx
c0024062:	50                   	push   eax
c0024063:	50                   	push   eax
c0024064:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024067:	e8 cb 10 00 00       	call   c0025137 <__extendsfdf2>
c002406c:	59                   	pop    ecx
c002406d:	59                   	pop    ecx
c002406e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0024071:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0024074:	52                   	push   edx
c0024075:	50                   	push   eax
c0024076:	e8 35 ff ff ff       	call   c0023fb0 <__cmpsf2>
c002407b:	83 c4 20             	add    esp,0x20
c002407e:	c9                   	leave  
c002407f:	c3                   	ret    

c0024080 <__nesf2>:
c0024080:	eb c3                	jmp    c0024045 <__eqsf2>

c0024082 <__gtsf2>:
c0024082:	55                   	push   ebp
c0024083:	89 e5                	mov    ebp,esp
c0024085:	83 ec 24             	sub    esp,0x24
c0024088:	6a ff                	push   0xffffffff
c002408a:	83 ec 0c             	sub    esp,0xc
c002408d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0024090:	e8 a2 10 00 00       	call   c0025137 <__extendsfdf2>
c0024095:	83 c4 10             	add    esp,0x10
c0024098:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002409b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002409e:	52                   	push   edx
c002409f:	50                   	push   eax
c00240a0:	50                   	push   eax
c00240a1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00240a4:	e8 8e 10 00 00       	call   c0025137 <__extendsfdf2>
c00240a9:	59                   	pop    ecx
c00240aa:	59                   	pop    ecx
c00240ab:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00240ae:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00240b1:	52                   	push   edx
c00240b2:	50                   	push   eax
c00240b3:	e8 f8 fe ff ff       	call   c0023fb0 <__cmpsf2>
c00240b8:	83 c4 20             	add    esp,0x20
c00240bb:	c9                   	leave  
c00240bc:	c3                   	ret    

c00240bd <__gesf2>:
c00240bd:	eb c3                	jmp    c0024082 <__gtsf2>

c00240bf <__ltsf2>:
c00240bf:	eb 84                	jmp    c0024045 <__eqsf2>

c00240c1 <__lesf2>:
c00240c1:	eb 82                	jmp    c0024045 <__eqsf2>

c00240c3 <__adddf3>:
c00240c3:	55                   	push   ebp
c00240c4:	89 e5                	mov    ebp,esp
c00240c6:	57                   	push   edi
c00240c7:	56                   	push   esi
c00240c8:	53                   	push   ebx
c00240c9:	83 ec 24             	sub    esp,0x24
c00240cc:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00240cf:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00240d2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00240d5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00240d8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00240db:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00240de:	89 c8                	mov    eax,ecx
c00240e0:	89 ce                	mov    esi,ecx
c00240e2:	c1 fe 14             	sar    esi,0x14
c00240e5:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c00240e8:	89 fb                	mov    ebx,edi
c00240ea:	89 fa                	mov    edx,edi
c00240ec:	c1 e2 0b             	shl    edx,0xb
c00240ef:	c1 e0 0b             	shl    eax,0xb
c00240f2:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00240f7:	c1 eb 15             	shr    ebx,0x15
c00240fa:	09 d8                	or     eax,ebx
c00240fc:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00240ff:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0024102:	c1 fe 14             	sar    esi,0x14
c0024105:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0024108:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002410b:	89 f3                	mov    ebx,esi
c002410d:	c1 e3 0b             	shl    ebx,0xb
c0024110:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0024113:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0024116:	c1 e3 0b             	shl    ebx,0xb
c0024119:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c002411f:	c1 ee 15             	shr    esi,0x15
c0024122:	09 f3                	or     ebx,esi
c0024124:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0024127:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002412a:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c002412d:	0f 88 5f 02 00 00    	js     c0024392 <__adddf3+0x2cf>
c0024133:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0024136:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0024139:	85 db                	test   ebx,ebx
c002413b:	0f 8e c7 00 00 00    	jle    c0024208 <__adddf3+0x145>
c0024141:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0024148:	75 1a                	jne    c0024164 <__adddf3+0xa1>
c002414a:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002414d:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0024150:	0f 84 b2 05 00 00    	je     c0024708 <__adddf3+0x645>
c0024156:	4b                   	dec    ebx
c0024157:	75 23                	jne    c002417c <__adddf3+0xb9>
c0024159:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002415c:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c002415f:	e9 99 00 00 00       	jmp    c00241fd <__adddf3+0x13a>
c0024164:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0024167:	f7 d6                	not    esi
c0024169:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002416f:	0f 84 93 05 00 00    	je     c0024708 <__adddf3+0x645>
c0024175:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002417c:	83 fb 1f             	cmp    ebx,0x1f
c002417f:	7e 42                	jle    c00241c3 <__adddf3+0x100>
c0024181:	83 fb 3f             	cmp    ebx,0x3f
c0024184:	0f 8f 7e 05 00 00    	jg     c0024708 <__adddf3+0x645>
c002418a:	83 e3 1f             	and    ebx,0x1f
c002418d:	89 d9                	mov    ecx,ebx
c002418f:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0024192:	d3 ef                	shr    edi,cl
c0024194:	31 db                	xor    ebx,ebx
c0024196:	85 c9                	test   ecx,ecx
c0024198:	74 15                	je     c00241af <__adddf3+0xec>
c002419a:	be 20 00 00 00       	mov    esi,0x20
c002419f:	29 ce                	sub    esi,ecx
c00241a1:	89 f1                	mov    ecx,esi
c00241a3:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00241a6:	d3 e6                	shl    esi,cl
c00241a8:	31 db                	xor    ebx,ebx
c00241aa:	85 f6                	test   esi,esi
c00241ac:	0f 95 c3             	setne  bl
c00241af:	31 c9                	xor    ecx,ecx
c00241b1:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00241b5:	0f 95 c1             	setne  cl
c00241b8:	09 cf                	or     edi,ecx
c00241ba:	09 fb                	or     ebx,edi
c00241bc:	01 da                	add    edx,ebx
c00241be:	83 d0 00             	adc    eax,0x0
c00241c1:	eb 3a                	jmp    c00241fd <__adddf3+0x13a>
c00241c3:	bf 20 00 00 00       	mov    edi,0x20
c00241c8:	29 df                	sub    edi,ebx
c00241ca:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00241cd:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00241d0:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00241d3:	d3 e6                	shl    esi,cl
c00241d5:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00241d8:	88 d9                	mov    cl,bl
c00241da:	d3 ef                	shr    edi,cl
c00241dc:	09 fe                	or     esi,edi
c00241de:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00241e1:	88 d9                	mov    cl,bl
c00241e3:	d3 ef                	shr    edi,cl
c00241e5:	89 fb                	mov    ebx,edi
c00241e7:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00241ea:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00241ed:	d3 e7                	shl    edi,cl
c00241ef:	85 ff                	test   edi,edi
c00241f1:	0f 95 c1             	setne  cl
c00241f4:	0f b6 c9             	movzx  ecx,cl
c00241f7:	09 ce                	or     esi,ecx
c00241f9:	01 f2                	add    edx,esi
c00241fb:	11 d8                	adc    eax,ebx
c00241fd:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0024200:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0024203:	e9 52 01 00 00       	jmp    c002435a <__adddf3+0x297>
c0024208:	0f 84 d5 00 00 00    	je     c00242e3 <__adddf3+0x220>
c002420e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0024211:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0024214:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0024217:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002421a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0024221:	75 20                	jne    c0024243 <__adddf3+0x180>
c0024223:	89 d6                	mov    esi,edx
c0024225:	09 c6                	or     esi,eax
c0024227:	0f 84 db 04 00 00    	je     c0024708 <__adddf3+0x645>
c002422d:	4b                   	dec    ebx
c002422e:	75 29                	jne    c0024259 <__adddf3+0x196>
c0024230:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024233:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0024236:	01 d1                	add    ecx,edx
c0024238:	11 c6                	adc    esi,eax
c002423a:	89 f0                	mov    eax,esi
c002423c:	89 ca                	mov    edx,ecx
c002423e:	e9 17 01 00 00       	jmp    c002435a <__adddf3+0x297>
c0024243:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0024246:	f7 d6                	not    esi
c0024248:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002424e:	0f 84 b4 04 00 00    	je     c0024708 <__adddf3+0x645>
c0024254:	0d 00 00 00 80       	or     eax,0x80000000
c0024259:	83 fb 1f             	cmp    ebx,0x1f
c002425c:	7e 48                	jle    c00242a6 <__adddf3+0x1e3>
c002425e:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0024261:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0024264:	83 fb 3f             	cmp    ebx,0x3f
c0024267:	0f 8f 9b 04 00 00    	jg     c0024708 <__adddf3+0x645>
c002426d:	83 e3 1f             	and    ebx,0x1f
c0024270:	89 d9                	mov    ecx,ebx
c0024272:	89 c7                	mov    edi,eax
c0024274:	d3 ef                	shr    edi,cl
c0024276:	31 db                	xor    ebx,ebx
c0024278:	85 c9                	test   ecx,ecx
c002427a:	74 12                	je     c002428e <__adddf3+0x1cb>
c002427c:	be 20 00 00 00       	mov    esi,0x20
c0024281:	29 ce                	sub    esi,ecx
c0024283:	89 f1                	mov    ecx,esi
c0024285:	d3 e0                	shl    eax,cl
c0024287:	31 db                	xor    ebx,ebx
c0024289:	85 c0                	test   eax,eax
c002428b:	0f 95 c3             	setne  bl
c002428e:	31 c0                	xor    eax,eax
c0024290:	85 d2                	test   edx,edx
c0024292:	0f 95 c0             	setne  al
c0024295:	09 c7                	or     edi,eax
c0024297:	09 fb                	or     ebx,edi
c0024299:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002429c:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002429f:	01 da                	add    edx,ebx
c00242a1:	83 d6 00             	adc    esi,0x0
c00242a4:	eb 39                	jmp    c00242df <__adddf3+0x21c>
c00242a6:	be 20 00 00 00       	mov    esi,0x20
c00242ab:	29 de                	sub    esi,ebx
c00242ad:	89 c7                	mov    edi,eax
c00242af:	89 f1                	mov    ecx,esi
c00242b1:	d3 e7                	shl    edi,cl
c00242b3:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00242b6:	89 d7                	mov    edi,edx
c00242b8:	88 d9                	mov    cl,bl
c00242ba:	d3 ef                	shr    edi,cl
c00242bc:	89 f9                	mov    ecx,edi
c00242be:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00242c1:	09 cf                	or     edi,ecx
c00242c3:	88 d9                	mov    cl,bl
c00242c5:	d3 e8                	shr    eax,cl
c00242c7:	89 f1                	mov    ecx,esi
c00242c9:	d3 e2                	shl    edx,cl
c00242cb:	85 d2                	test   edx,edx
c00242cd:	0f 95 c2             	setne  dl
c00242d0:	0f b6 d2             	movzx  edx,dl
c00242d3:	09 d7                	or     edi,edx
c00242d5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00242d8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00242db:	01 fa                	add    edx,edi
c00242dd:	11 c6                	adc    esi,eax
c00242df:	89 f0                	mov    eax,esi
c00242e1:	eb 77                	jmp    c002435a <__adddf3+0x297>
c00242e3:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00242e6:	46                   	inc    esi
c00242e7:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00242ea:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00242f0:	75 41                	jne    c0024333 <__adddf3+0x270>
c00242f2:	89 d3                	mov    ebx,edx
c00242f4:	09 c3                	or     ebx,eax
c00242f6:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00242fd:	75 27                	jne    c0024326 <__adddf3+0x263>
c00242ff:	85 db                	test   ebx,ebx
c0024301:	0f 84 fb 03 00 00    	je     c0024702 <__adddf3+0x63f>
c0024307:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002430a:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c002430d:	0f 84 f5 03 00 00    	je     c0024708 <__adddf3+0x645>
c0024313:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0024316:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0024319:	85 c0                	test   eax,eax
c002431b:	0f 89 91 03 00 00    	jns    c00246b2 <__adddf3+0x5ef>
c0024321:	e9 85 03 00 00       	jmp    c00246ab <__adddf3+0x5e8>
c0024326:	85 db                	test   ebx,ebx
c0024328:	0f 85 da 03 00 00    	jne    c0024708 <__adddf3+0x645>
c002432e:	e9 cf 03 00 00       	jmp    c0024702 <__adddf3+0x63f>
c0024333:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0024336:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0024339:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002433c:	f7 d1                	not    ecx
c002433e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0024344:	0f 84 70 03 00 00    	je     c00246ba <__adddf3+0x5f7>
c002434a:	d1 ea                	shr    edx,1
c002434c:	89 c1                	mov    ecx,eax
c002434e:	c1 e1 1f             	shl    ecx,0x1f
c0024351:	09 ca                	or     edx,ecx
c0024353:	d1 e8                	shr    eax,1
c0024355:	e9 6f 03 00 00       	jmp    c00246c9 <__adddf3+0x606>
c002435a:	85 c0                	test   eax,eax
c002435c:	0f 89 67 03 00 00    	jns    c00246c9 <__adddf3+0x606>
c0024362:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0024365:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0024368:	f7 d1                	not    ecx
c002436a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0024370:	0f 84 44 03 00 00    	je     c00246ba <__adddf3+0x5f7>
c0024376:	89 d1                	mov    ecx,edx
c0024378:	d1 e9                	shr    ecx,1
c002437a:	83 e2 01             	and    edx,0x1
c002437d:	09 ca                	or     edx,ecx
c002437f:	89 c1                	mov    ecx,eax
c0024381:	c1 e1 1f             	shl    ecx,0x1f
c0024384:	09 ca                	or     edx,ecx
c0024386:	d1 e8                	shr    eax,1
c0024388:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002438d:	e9 37 03 00 00       	jmp    c00246c9 <__adddf3+0x606>
c0024392:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0024395:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002439b:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c002439e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00243a1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00243a7:	29 de                	sub    esi,ebx
c00243a9:	85 f6                	test   esi,esi
c00243ab:	0f 8e bd 00 00 00    	jle    c002446e <__adddf3+0x3ab>
c00243b1:	85 db                	test   ebx,ebx
c00243b3:	75 17                	jne    c00243cc <__adddf3+0x309>
c00243b5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00243b8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00243bb:	0f 84 47 03 00 00    	je     c0024708 <__adddf3+0x645>
c00243c1:	4e                   	dec    esi
c00243c2:	75 20                	jne    c00243e4 <__adddf3+0x321>
c00243c4:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00243c7:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00243ca:	eb 5b                	jmp    c0024427 <__adddf3+0x364>
c00243cc:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00243cf:	f7 d3                	not    ebx
c00243d1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00243d7:	0f 84 2b 03 00 00    	je     c0024708 <__adddf3+0x645>
c00243dd:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00243e4:	83 fe 1f             	cmp    esi,0x1f
c00243e7:	7e 49                	jle    c0024432 <__adddf3+0x36f>
c00243e9:	83 fe 3f             	cmp    esi,0x3f
c00243ec:	0f 8f 16 03 00 00    	jg     c0024708 <__adddf3+0x645>
c00243f2:	83 e6 1f             	and    esi,0x1f
c00243f5:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00243f8:	89 f1                	mov    ecx,esi
c00243fa:	d3 ef                	shr    edi,cl
c00243fc:	31 db                	xor    ebx,ebx
c00243fe:	85 f6                	test   esi,esi
c0024400:	74 13                	je     c0024415 <__adddf3+0x352>
c0024402:	b9 20 00 00 00       	mov    ecx,0x20
c0024407:	29 f1                	sub    ecx,esi
c0024409:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002440c:	d3 e6                	shl    esi,cl
c002440e:	31 db                	xor    ebx,ebx
c0024410:	85 f6                	test   esi,esi
c0024412:	0f 95 c3             	setne  bl
c0024415:	31 c9                	xor    ecx,ecx
c0024417:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002441b:	0f 95 c1             	setne  cl
c002441e:	09 cf                	or     edi,ecx
c0024420:	09 fb                	or     ebx,edi
c0024422:	29 da                	sub    edx,ebx
c0024424:	83 d8 00             	sbb    eax,0x0
c0024427:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002442a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002442d:	e9 aa 01 00 00       	jmp    c00245dc <__adddf3+0x519>
c0024432:	bf 20 00 00 00       	mov    edi,0x20
c0024437:	29 f7                	sub    edi,esi
c0024439:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002443c:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002443f:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0024442:	d3 e3                	shl    ebx,cl
c0024444:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0024447:	89 f1                	mov    ecx,esi
c0024449:	d3 ef                	shr    edi,cl
c002444b:	09 fb                	or     ebx,edi
c002444d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0024450:	89 f1                	mov    ecx,esi
c0024452:	d3 ef                	shr    edi,cl
c0024454:	89 fe                	mov    esi,edi
c0024456:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0024459:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002445c:	d3 e7                	shl    edi,cl
c002445e:	85 ff                	test   edi,edi
c0024460:	0f 95 c1             	setne  cl
c0024463:	0f b6 c9             	movzx  ecx,cl
c0024466:	09 cb                	or     ebx,ecx
c0024468:	29 da                	sub    edx,ebx
c002446a:	19 f0                	sbb    eax,esi
c002446c:	eb b9                	jmp    c0024427 <__adddf3+0x364>
c002446e:	0f 84 cd 00 00 00    	je     c0024541 <__adddf3+0x47e>
c0024474:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c0024477:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002447a:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002447d:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0024481:	75 1b                	jne    c002449e <__adddf3+0x3db>
c0024483:	89 d6                	mov    esi,edx
c0024485:	09 c6                	or     esi,eax
c0024487:	0f 84 7b 02 00 00    	je     c0024708 <__adddf3+0x645>
c002448d:	4b                   	dec    ebx
c002448e:	75 24                	jne    c00244b4 <__adddf3+0x3f1>
c0024490:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024493:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0024496:	29 d1                	sub    ecx,edx
c0024498:	19 c6                	sbb    esi,eax
c002449a:	89 ca                	mov    edx,ecx
c002449c:	eb 61                	jmp    c00244ff <__adddf3+0x43c>
c002449e:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00244a1:	f7 d6                	not    esi
c00244a3:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00244a9:	0f 84 59 02 00 00    	je     c0024708 <__adddf3+0x645>
c00244af:	0d 00 00 00 80       	or     eax,0x80000000
c00244b4:	83 fb 1f             	cmp    ebx,0x1f
c00244b7:	7e 4d                	jle    c0024506 <__adddf3+0x443>
c00244b9:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00244bc:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00244bf:	83 fb 3f             	cmp    ebx,0x3f
c00244c2:	0f 8f 40 02 00 00    	jg     c0024708 <__adddf3+0x645>
c00244c8:	83 e3 1f             	and    ebx,0x1f
c00244cb:	89 d9                	mov    ecx,ebx
c00244cd:	89 c7                	mov    edi,eax
c00244cf:	d3 ef                	shr    edi,cl
c00244d1:	31 db                	xor    ebx,ebx
c00244d3:	85 c9                	test   ecx,ecx
c00244d5:	74 12                	je     c00244e9 <__adddf3+0x426>
c00244d7:	be 20 00 00 00       	mov    esi,0x20
c00244dc:	29 ce                	sub    esi,ecx
c00244de:	89 f1                	mov    ecx,esi
c00244e0:	d3 e0                	shl    eax,cl
c00244e2:	31 db                	xor    ebx,ebx
c00244e4:	85 c0                	test   eax,eax
c00244e6:	0f 95 c3             	setne  bl
c00244e9:	31 c0                	xor    eax,eax
c00244eb:	85 d2                	test   edx,edx
c00244ed:	0f 95 c0             	setne  al
c00244f0:	09 c7                	or     edi,eax
c00244f2:	09 fb                	or     ebx,edi
c00244f4:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00244f7:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00244fa:	29 da                	sub    edx,ebx
c00244fc:	83 de 00             	sbb    esi,0x0
c00244ff:	89 f0                	mov    eax,esi
c0024501:	e9 d6 00 00 00       	jmp    c00245dc <__adddf3+0x519>
c0024506:	be 20 00 00 00       	mov    esi,0x20
c002450b:	29 de                	sub    esi,ebx
c002450d:	89 c7                	mov    edi,eax
c002450f:	89 f1                	mov    ecx,esi
c0024511:	d3 e7                	shl    edi,cl
c0024513:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0024516:	89 d7                	mov    edi,edx
c0024518:	88 d9                	mov    cl,bl
c002451a:	d3 ef                	shr    edi,cl
c002451c:	89 f9                	mov    ecx,edi
c002451e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0024521:	09 cf                	or     edi,ecx
c0024523:	88 d9                	mov    cl,bl
c0024525:	d3 e8                	shr    eax,cl
c0024527:	89 f1                	mov    ecx,esi
c0024529:	d3 e2                	shl    edx,cl
c002452b:	85 d2                	test   edx,edx
c002452d:	0f 95 c2             	setne  dl
c0024530:	0f b6 d2             	movzx  edx,dl
c0024533:	09 d7                	or     edi,edx
c0024535:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024538:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002453b:	29 fa                	sub    edx,edi
c002453d:	19 c6                	sbb    esi,eax
c002453f:	eb be                	jmp    c00244ff <__adddf3+0x43c>
c0024541:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0024544:	8d 5e 01             	lea    ebx,[esi+0x1]
c0024547:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c002454d:	75 6a                	jne    c00245b9 <__adddf3+0x4f6>
c002454f:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0024553:	75 58                	jne    c00245ad <__adddf3+0x4ea>
c0024555:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0024558:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002455b:	89 d6                	mov    esi,edx
c002455d:	09 c6                	or     esi,eax
c002455f:	75 17                	jne    c0024578 <__adddf3+0x4b5>
c0024561:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0024564:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0024567:	85 db                	test   ebx,ebx
c0024569:	0f 85 99 01 00 00    	jne    c0024708 <__adddf3+0x645>
c002456f:	31 ff                	xor    edi,edi
c0024571:	31 c9                	xor    ecx,ecx
c0024573:	e9 90 01 00 00       	jmp    c0024708 <__adddf3+0x645>
c0024578:	85 db                	test   ebx,ebx
c002457a:	0f 84 88 01 00 00    	je     c0024708 <__adddf3+0x645>
c0024580:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0024583:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0024586:	85 c0                	test   eax,eax
c0024588:	79 10                	jns    c002459a <__adddf3+0x4d7>
c002458a:	31 c9                	xor    ecx,ecx
c002458c:	f7 da                	neg    edx
c002458e:	0f 95 c1             	setne  cl
c0024591:	01 c8                	add    eax,ecx
c0024593:	f7 d8                	neg    eax
c0024595:	e9 2f 01 00 00       	jmp    c00246c9 <__adddf3+0x606>
c002459a:	31 ff                	xor    edi,edi
c002459c:	31 c9                	xor    ecx,ecx
c002459e:	89 c3                	mov    ebx,eax
c00245a0:	09 d3                	or     ebx,edx
c00245a2:	0f 84 60 01 00 00    	je     c0024708 <__adddf3+0x645>
c00245a8:	e9 05 01 00 00       	jmp    c00246b2 <__adddf3+0x5ef>
c00245ad:	31 ff                	xor    edi,edi
c00245af:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00245b4:	e9 4f 01 00 00       	jmp    c0024708 <__adddf3+0x645>
c00245b9:	89 c1                	mov    ecx,eax
c00245bb:	89 d0                	mov    eax,edx
c00245bd:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c00245c0:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c00245c3:	89 ca                	mov    edx,ecx
c00245c5:	85 c9                	test   ecx,ecx
c00245c7:	79 2c                	jns    c00245f5 <__adddf3+0x532>
c00245c9:	31 c9                	xor    ecx,ecx
c00245cb:	f7 d8                	neg    eax
c00245cd:	0f 95 c1             	setne  cl
c00245d0:	01 ca                	add    edx,ecx
c00245d2:	f7 da                	neg    edx
c00245d4:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00245d7:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00245da:	eb 19                	jmp    c00245f5 <__adddf3+0x532>
c00245dc:	85 c0                	test   eax,eax
c00245de:	0f 89 e5 00 00 00    	jns    c00246c9 <__adddf3+0x606>
c00245e4:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00245e9:	89 c1                	mov    ecx,eax
c00245eb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00245ee:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00245f1:	89 d0                	mov    eax,edx
c00245f3:	89 ca                	mov    edx,ecx
c00245f5:	85 d2                	test   edx,edx
c00245f7:	74 59                	je     c0024652 <__adddf3+0x58f>
c00245f9:	0f bd da             	bsr    ebx,edx
c00245fc:	83 f3 1f             	xor    ebx,0x1f
c00245ff:	88 d9                	mov    cl,bl
c0024601:	d3 e2                	shl    edx,cl
c0024603:	bf 20 00 00 00       	mov    edi,0x20
c0024608:	89 f9                	mov    ecx,edi
c002460a:	29 d9                	sub    ecx,ebx
c002460c:	89 c6                	mov    esi,eax
c002460e:	d3 ee                	shr    esi,cl
c0024610:	09 d6                	or     esi,edx
c0024612:	88 d9                	mov    cl,bl
c0024614:	d3 e0                	shl    eax,cl
c0024616:	89 c2                	mov    edx,eax
c0024618:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002461b:	25 ff 07 00 00       	and    eax,0x7ff
c0024620:	39 d8                	cmp    eax,ebx
c0024622:	7f 22                	jg     c0024646 <__adddf3+0x583>
c0024624:	29 c3                	sub    ebx,eax
c0024626:	43                   	inc    ebx
c0024627:	88 d9                	mov    cl,bl
c0024629:	d3 ea                	shr    edx,cl
c002462b:	29 df                	sub    edi,ebx
c002462d:	89 f9                	mov    ecx,edi
c002462f:	89 f0                	mov    eax,esi
c0024631:	d3 e0                	shl    eax,cl
c0024633:	09 c2                	or     edx,eax
c0024635:	89 f0                	mov    eax,esi
c0024637:	88 d9                	mov    cl,bl
c0024639:	d3 e8                	shr    eax,cl
c002463b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002463e:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0024644:	eb 6f                	jmp    c00246b5 <__adddf3+0x5f2>
c0024646:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024649:	29 d8                	sub    eax,ebx
c002464b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002464e:	89 f0                	mov    eax,esi
c0024650:	eb 59                	jmp    c00246ab <__adddf3+0x5e8>
c0024652:	85 c0                	test   eax,eax
c0024654:	74 6a                	je     c00246c0 <__adddf3+0x5fd>
c0024656:	0f bd c8             	bsr    ecx,eax
c0024659:	83 f1 1f             	xor    ecx,0x1f
c002465c:	d3 e0                	shl    eax,cl
c002465e:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0024661:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0024667:	83 c1 20             	add    ecx,0x20
c002466a:	39 cb                	cmp    ebx,ecx
c002466c:	7f 35                	jg     c00246a3 <__adddf3+0x5e0>
c002466e:	29 d9                	sub    ecx,ebx
c0024670:	8d 71 01             	lea    esi,[ecx+0x1]
c0024673:	83 fe 1f             	cmp    esi,0x1f
c0024676:	7e 09                	jle    c0024681 <__adddf3+0x5be>
c0024678:	83 e9 1f             	sub    ecx,0x1f
c002467b:	d3 e8                	shr    eax,cl
c002467d:	89 c3                	mov    ebx,eax
c002467f:	eb 11                	jmp    c0024692 <__adddf3+0x5cf>
c0024681:	b9 20 00 00 00       	mov    ecx,0x20
c0024686:	29 f1                	sub    ecx,esi
c0024688:	89 c3                	mov    ebx,eax
c002468a:	d3 e3                	shl    ebx,cl
c002468c:	89 f1                	mov    ecx,esi
c002468e:	d3 e8                	shr    eax,cl
c0024690:	89 c2                	mov    edx,eax
c0024692:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024695:	25 00 f8 ff ff       	and    eax,0xfffff800
c002469a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002469d:	89 d0                	mov    eax,edx
c002469f:	89 da                	mov    edx,ebx
c00246a1:	eb 26                	jmp    c00246c9 <__adddf3+0x606>
c00246a3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00246a6:	29 cf                	sub    edi,ecx
c00246a8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00246ab:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00246b0:	eb 17                	jmp    c00246c9 <__adddf3+0x606>
c00246b2:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00246b5:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00246b8:	eb 0f                	jmp    c00246c9 <__adddf3+0x606>
c00246ba:	31 d2                	xor    edx,edx
c00246bc:	31 c0                	xor    eax,eax
c00246be:	eb 09                	jmp    c00246c9 <__adddf3+0x606>
c00246c0:	89 c2                	mov    edx,eax
c00246c2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00246c9:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00246cc:	c1 e1 14             	shl    ecx,0x14
c00246cf:	89 c3                	mov    ebx,eax
c00246d1:	c1 eb 0b             	shr    ebx,0xb
c00246d4:	09 d9                	or     ecx,ebx
c00246d6:	89 d3                	mov    ebx,edx
c00246d8:	c1 eb 0b             	shr    ebx,0xb
c00246db:	c1 e0 15             	shl    eax,0x15
c00246de:	09 d8                	or     eax,ebx
c00246e0:	89 c7                	mov    edi,eax
c00246e2:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c00246e8:	0f 95 c0             	setne  al
c00246eb:	89 c6                	mov    esi,eax
c00246ed:	09 f3                	or     ebx,esi
c00246ef:	83 e3 01             	and    ebx,0x1
c00246f2:	c1 ea 0a             	shr    edx,0xa
c00246f5:	21 da                	and    edx,ebx
c00246f7:	89 f8                	mov    eax,edi
c00246f9:	01 d0                	add    eax,edx
c00246fb:	83 d1 00             	adc    ecx,0x0
c00246fe:	89 c7                	mov    edi,eax
c0024700:	eb 06                	jmp    c0024708 <__adddf3+0x645>
c0024702:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0024705:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0024708:	89 f8                	mov    eax,edi
c002470a:	89 ca                	mov    edx,ecx
c002470c:	83 c4 24             	add    esp,0x24
c002470f:	5b                   	pop    ebx
c0024710:	5e                   	pop    esi
c0024711:	5f                   	pop    edi
c0024712:	5d                   	pop    ebp
c0024713:	c3                   	ret    

c0024714 <__subdf3>:
c0024714:	55                   	push   ebp
c0024715:	89 e5                	mov    ebp,esp
c0024717:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002471a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002471d:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0024723:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0024726:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0024729:	5d                   	pop    ebp
c002472a:	e9 94 f9 ff ff       	jmp    c00240c3 <__adddf3>

c002472f <__negdf2>:
c002472f:	55                   	push   ebp
c0024730:	89 e5                	mov    ebp,esp
c0024732:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024735:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0024738:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002473e:	5d                   	pop    ebp
c002473f:	c3                   	ret    

c0024740 <__muldf3>:
c0024740:	55                   	push   ebp
c0024741:	89 e5                	mov    ebp,esp
c0024743:	57                   	push   edi
c0024744:	56                   	push   esi
c0024745:	53                   	push   ebx
c0024746:	83 ec 24             	sub    esp,0x24
c0024749:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002474c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002474f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0024752:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0024755:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0024758:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c002475b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002475e:	89 c8                	mov    eax,ecx
c0024760:	c1 f8 14             	sar    eax,0x14
c0024763:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0024766:	89 f8                	mov    eax,edi
c0024768:	89 fb                	mov    ebx,edi
c002476a:	c1 e3 0b             	shl    ebx,0xb
c002476d:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0024770:	c1 e1 0b             	shl    ecx,0xb
c0024773:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0024779:	c1 e8 15             	shr    eax,0x15
c002477c:	09 c1                	or     ecx,eax
c002477e:	89 d6                	mov    esi,edx
c0024780:	89 d0                	mov    eax,edx
c0024782:	c1 f8 14             	sar    eax,0x14
c0024785:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0024788:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002478b:	89 c3                	mov    ebx,eax
c002478d:	c1 e3 0b             	shl    ebx,0xb
c0024790:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0024793:	c1 e6 0b             	shl    esi,0xb
c0024796:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c002479c:	c1 e8 15             	shr    eax,0x15
c002479f:	09 c6                	or     esi,eax
c00247a1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00247a4:	25 ff 07 00 00       	and    eax,0x7ff
c00247a9:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00247ac:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00247af:	25 ff 07 00 00       	and    eax,0x7ff
c00247b4:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00247b7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00247ba:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c00247bd:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c00247c4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00247c7:	40                   	inc    eax
c00247c8:	a9 fe 07 00 00       	test   eax,0x7fe
c00247cd:	0f 85 8d 00 00 00    	jne    c0024860 <__muldf3+0x120>
c00247d3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00247d6:	09 c8                	or     eax,ecx
c00247d8:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c00247dc:	74 44                	je     c0024822 <__muldf3+0xe2>
c00247de:	85 c0                	test   eax,eax
c00247e0:	0f 85 31 02 00 00    	jne    c0024a17 <__muldf3+0x2d7>
c00247e6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00247e9:	40                   	inc    eax
c00247ea:	a9 fe 07 00 00       	test   eax,0x7fe
c00247ef:	75 13                	jne    c0024804 <__muldf3+0xc4>
c00247f1:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00247f4:	09 f1                	or     ecx,esi
c00247f6:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00247fa:	74 22                	je     c002481e <__muldf3+0xde>
c00247fc:	85 c9                	test   ecx,ecx
c00247fe:	0f 85 0d 02 00 00    	jne    c0024a11 <__muldf3+0x2d1>
c0024804:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0024808:	0f 89 09 02 00 00    	jns    c0024a17 <__muldf3+0x2d7>
c002480e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0024811:	05 00 00 00 80       	add    eax,0x80000000
c0024816:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0024819:	e9 f9 01 00 00       	jmp    c0024a17 <__muldf3+0x2d7>
c002481e:	85 c9                	test   ecx,ecx
c0024820:	eb 2e                	jmp    c0024850 <__muldf3+0x110>
c0024822:	85 c0                	test   eax,eax
c0024824:	74 20                	je     c0024846 <__muldf3+0x106>
c0024826:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0024829:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002482c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002482f:	c1 ef 1f             	shr    edi,0x1f
c0024832:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0024835:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0024838:	8d 43 ff             	lea    eax,[ebx-0x1]
c002483b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002483e:	09 f9                	or     ecx,edi
c0024840:	78 1e                	js     c0024860 <__muldf3+0x120>
c0024842:	89 c3                	mov    ebx,eax
c0024844:	eb e0                	jmp    c0024826 <__muldf3+0xe6>
c0024846:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0024849:	f7 d0                	not    eax
c002484b:	a9 ff 07 00 00       	test   eax,0x7ff
c0024850:	75 b2                	jne    c0024804 <__muldf3+0xc4>
c0024852:	31 ff                	xor    edi,edi
c0024854:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c002485b:	e9 b7 01 00 00       	jmp    c0024a17 <__muldf3+0x2d7>
c0024860:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0024863:	40                   	inc    eax
c0024864:	a9 fe 07 00 00       	test   eax,0x7fe
c0024869:	75 57                	jne    c00248c2 <__muldf3+0x182>
c002486b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002486e:	09 f0                	or     eax,esi
c0024870:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0024874:	74 23                	je     c0024899 <__muldf3+0x159>
c0024876:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c002487a:	0f 89 91 01 00 00    	jns    c0024a11 <__muldf3+0x2d1>
c0024880:	85 c0                	test   eax,eax
c0024882:	0f 85 89 01 00 00    	jne    c0024a11 <__muldf3+0x2d1>
c0024888:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c002488b:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0024891:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0024894:	e9 7e 01 00 00       	jmp    c0024a17 <__muldf3+0x2d7>
c0024899:	85 c0                	test   eax,eax
c002489b:	75 0c                	jne    c00248a9 <__muldf3+0x169>
c002489d:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c00248a1:	0f 89 6a 01 00 00    	jns    c0024a11 <__muldf3+0x2d1>
c00248a7:	eb df                	jmp    c0024888 <__muldf3+0x148>
c00248a9:	01 f6                	add    esi,esi
c00248ab:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00248ae:	c1 ea 1f             	shr    edx,0x1f
c00248b1:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00248b4:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c00248b7:	8d 43 ff             	lea    eax,[ebx-0x1]
c00248ba:	09 d6                	or     esi,edx
c00248bc:	78 04                	js     c00248c2 <__muldf3+0x182>
c00248be:	89 c3                	mov    ebx,eax
c00248c0:	eb e7                	jmp    c00248a9 <__muldf3+0x169>
c00248c2:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00248c8:	81 ce 00 00 00 80    	or     esi,0x80000000
c00248ce:	89 c8                	mov    eax,ecx
c00248d0:	f7 e6                	mul    esi
c00248d2:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c00248d5:	89 c7                	mov    edi,eax
c00248d7:	89 c8                	mov    eax,ecx
c00248d9:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c00248dc:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00248df:	89 c1                	mov    ecx,eax
c00248e1:	89 f0                	mov    eax,esi
c00248e3:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c00248e6:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c00248e9:	89 c6                	mov    esi,eax
c00248eb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00248ee:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c00248f1:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00248f4:	31 c0                	xor    eax,eax
c00248f6:	01 f1                	add    ecx,esi
c00248f8:	0f 92 c0             	setb   al
c00248fb:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c00248fe:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0024901:	83 d6 00             	adc    esi,0x0
c0024904:	01 c7                	add    edi,eax
c0024906:	83 d6 00             	adc    esi,0x0
c0024909:	01 ca                	add    edx,ecx
c002490b:	0f 92 c1             	setb   cl
c002490e:	0f b6 c9             	movzx  ecx,cl
c0024911:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0024914:	83 d6 00             	adc    esi,0x0
c0024917:	01 cf                	add    edi,ecx
c0024919:	83 d6 00             	adc    esi,0x0
c002491c:	31 c9                	xor    ecx,ecx
c002491e:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0024921:	0f 95 c1             	setne  cl
c0024924:	09 cf                	or     edi,ecx
c0024926:	85 f6                	test   esi,esi
c0024928:	78 0c                	js     c0024936 <__muldf3+0x1f6>
c002492a:	01 f6                	add    esi,esi
c002492c:	89 f8                	mov    eax,edi
c002492e:	c1 e8 1f             	shr    eax,0x1f
c0024931:	09 c6                	or     esi,eax
c0024933:	01 ff                	add    edi,edi
c0024935:	4b                   	dec    ebx
c0024936:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c002493c:	0f 8f 85 00 00 00    	jg     c00249c7 <__muldf3+0x287>
c0024942:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0024948:	85 db                	test   ebx,ebx
c002494a:	0f 8f 84 00 00 00    	jg     c00249d4 <__muldf3+0x294>
c0024950:	83 fb cc             	cmp    ebx,0xffffffcc
c0024953:	7c 79                	jl     c00249ce <__muldf3+0x28e>
c0024955:	ba 01 00 00 00       	mov    edx,0x1
c002495a:	29 da                	sub    edx,ebx
c002495c:	81 ce 00 00 00 80    	or     esi,0x80000000
c0024962:	83 fa 1f             	cmp    edx,0x1f
c0024965:	7e 30                	jle    c0024997 <__muldf3+0x257>
c0024967:	83 fa 20             	cmp    edx,0x20
c002496a:	75 0b                	jne    c0024977 <__muldf3+0x237>
c002496c:	31 c0                	xor    eax,eax
c002496e:	85 ff                	test   edi,edi
c0024970:	0f 95 c0             	setne  al
c0024973:	89 c7                	mov    edi,eax
c0024975:	eb 1a                	jmp    c0024991 <__muldf3+0x251>
c0024977:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c002497a:	89 f0                	mov    eax,esi
c002497c:	d3 e0                	shl    eax,cl
c002497e:	09 f8                	or     eax,edi
c0024980:	0f 95 c0             	setne  al
c0024983:	0f b6 c0             	movzx  eax,al
c0024986:	89 c7                	mov    edi,eax
c0024988:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c002498d:	29 d9                	sub    ecx,ebx
c002498f:	d3 ee                	shr    esi,cl
c0024991:	09 f7                	or     edi,esi
c0024993:	31 db                	xor    ebx,ebx
c0024995:	eb 3b                	jmp    c00249d2 <__muldf3+0x292>
c0024997:	83 c3 1f             	add    ebx,0x1f
c002499a:	89 f0                	mov    eax,esi
c002499c:	88 d9                	mov    cl,bl
c002499e:	d3 e0                	shl    eax,cl
c00249a0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00249a3:	89 f8                	mov    eax,edi
c00249a5:	88 d1                	mov    cl,dl
c00249a7:	d3 e8                	shr    eax,cl
c00249a9:	89 c1                	mov    ecx,eax
c00249ab:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00249ae:	09 c8                	or     eax,ecx
c00249b0:	88 d9                	mov    cl,bl
c00249b2:	d3 e7                	shl    edi,cl
c00249b4:	31 db                	xor    ebx,ebx
c00249b6:	85 ff                	test   edi,edi
c00249b8:	0f 95 c3             	setne  bl
c00249bb:	89 df                	mov    edi,ebx
c00249bd:	09 c7                	or     edi,eax
c00249bf:	88 d1                	mov    cl,dl
c00249c1:	d3 ee                	shr    esi,cl
c00249c3:	31 db                	xor    ebx,ebx
c00249c5:	eb 0d                	jmp    c00249d4 <__muldf3+0x294>
c00249c7:	bb ff 07 00 00       	mov    ebx,0x7ff
c00249cc:	eb 02                	jmp    c00249d0 <__muldf3+0x290>
c00249ce:	31 db                	xor    ebx,ebx
c00249d0:	31 ff                	xor    edi,edi
c00249d2:	31 f6                	xor    esi,esi
c00249d4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00249d7:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c00249da:	25 00 f8 ff ff       	and    eax,0xfffff800
c00249df:	09 c3                	or     ebx,eax
c00249e1:	c1 e3 14             	shl    ebx,0x14
c00249e4:	89 f0                	mov    eax,esi
c00249e6:	c1 e8 0b             	shr    eax,0xb
c00249e9:	09 c3                	or     ebx,eax
c00249eb:	89 f8                	mov    eax,edi
c00249ed:	c1 e8 0b             	shr    eax,0xb
c00249f0:	c1 e6 15             	shl    esi,0x15
c00249f3:	09 c6                	or     esi,eax
c00249f5:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c00249fb:	0f 95 c1             	setne  cl
c00249fe:	09 c8                	or     eax,ecx
c0024a00:	83 e0 01             	and    eax,0x1
c0024a03:	c1 ef 0a             	shr    edi,0xa
c0024a06:	21 c7                	and    edi,eax
c0024a08:	01 f7                	add    edi,esi
c0024a0a:	83 d3 00             	adc    ebx,0x0
c0024a0d:	89 da                	mov    edx,ebx
c0024a0f:	eb 03                	jmp    c0024a14 <__muldf3+0x2d4>
c0024a11:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0024a14:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0024a17:	89 f8                	mov    eax,edi
c0024a19:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0024a1c:	83 c4 24             	add    esp,0x24
c0024a1f:	5b                   	pop    ebx
c0024a20:	5e                   	pop    esi
c0024a21:	5f                   	pop    edi
c0024a22:	5d                   	pop    ebp
c0024a23:	c3                   	ret    

c0024a24 <__divdf3>:
c0024a24:	55                   	push   ebp
c0024a25:	89 e5                	mov    ebp,esp
c0024a27:	57                   	push   edi
c0024a28:	56                   	push   esi
c0024a29:	53                   	push   ebx
c0024a2a:	83 ec 2c             	sub    esp,0x2c
c0024a2d:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0024a30:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0024a33:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0024a36:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0024a39:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0024a3c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0024a3f:	89 ce                	mov    esi,ecx
c0024a41:	89 c8                	mov    eax,ecx
c0024a43:	c1 f8 14             	sar    eax,0x14
c0024a46:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0024a49:	89 f8                	mov    eax,edi
c0024a4b:	89 fb                	mov    ebx,edi
c0024a4d:	c1 e3 0b             	shl    ebx,0xb
c0024a50:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0024a53:	c1 e6 0b             	shl    esi,0xb
c0024a56:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0024a5c:	c1 e8 15             	shr    eax,0x15
c0024a5f:	09 c6                	or     esi,eax
c0024a61:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0024a64:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0024a67:	89 c2                	mov    edx,eax
c0024a69:	c1 fa 14             	sar    edx,0x14
c0024a6c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0024a6f:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0024a72:	89 de                	mov    esi,ebx
c0024a74:	c1 e6 0b             	shl    esi,0xb
c0024a77:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0024a7a:	c1 e0 0b             	shl    eax,0xb
c0024a7d:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0024a82:	c1 eb 15             	shr    ebx,0x15
c0024a85:	09 d8                	or     eax,ebx
c0024a87:	89 c2                	mov    edx,eax
c0024a89:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0024a8c:	25 ff 07 00 00       	and    eax,0x7ff
c0024a91:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0024a94:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0024a97:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0024a9d:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0024aa0:	29 d8                	sub    eax,ebx
c0024aa2:	05 ff 03 00 00       	add    eax,0x3ff
c0024aa7:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0024aaa:	46                   	inc    esi
c0024aab:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0024ab1:	0f 85 a5 00 00 00    	jne    c0024b5c <__divdf3+0x138>
c0024ab7:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0024aba:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0024abd:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0024ac1:	74 2a                	je     c0024aed <__divdf3+0xc9>
c0024ac3:	85 f6                	test   esi,esi
c0024ac5:	0f 85 cc 02 00 00    	jne    c0024d97 <__divdf3+0x373>
c0024acb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024ace:	40                   	inc    eax
c0024acf:	a9 fe 07 00 00       	test   eax,0x7fe
c0024ad4:	75 26                	jne    c0024afc <__divdf3+0xd8>
c0024ad6:	85 db                	test   ebx,ebx
c0024ad8:	74 22                	je     c0024afc <__divdf3+0xd8>
c0024ada:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0024add:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0024ae0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0024ae3:	09 d0                	or     eax,edx
c0024ae5:	0f 85 ac 02 00 00    	jne    c0024d97 <__divdf3+0x373>
c0024aeb:	eb 63                	jmp    c0024b50 <__divdf3+0x12c>
c0024aed:	85 f6                	test   esi,esi
c0024aef:	75 22                	jne    c0024b13 <__divdf3+0xef>
c0024af1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024af4:	40                   	inc    eax
c0024af5:	a9 fe 07 00 00       	test   eax,0x7fe
c0024afa:	74 36                	je     c0024b32 <__divdf3+0x10e>
c0024afc:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0024b00:	0f 89 91 02 00 00    	jns    c0024d97 <__divdf3+0x373>
c0024b06:	89 f8                	mov    eax,edi
c0024b08:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0024b0e:	e9 80 02 00 00       	jmp    c0024d93 <__divdf3+0x36f>
c0024b13:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0024b16:	01 f6                	add    esi,esi
c0024b18:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0024b1b:	c1 ef 1f             	shr    edi,0x1f
c0024b1e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0024b21:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0024b24:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024b27:	09 f7                	or     edi,esi
c0024b29:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0024b2c:	78 2e                	js     c0024b5c <__divdf3+0x138>
c0024b2e:	89 c8                	mov    eax,ecx
c0024b30:	eb e1                	jmp    c0024b13 <__divdf3+0xef>
c0024b32:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0024b35:	09 d0                	or     eax,edx
c0024b37:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0024b3b:	74 0f                	je     c0024b4c <__divdf3+0x128>
c0024b3d:	85 c0                	test   eax,eax
c0024b3f:	74 bb                	je     c0024afc <__divdf3+0xd8>
c0024b41:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0024b44:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0024b47:	e9 4b 02 00 00       	jmp    c0024d97 <__divdf3+0x373>
c0024b4c:	85 c0                	test   eax,eax
c0024b4e:	75 ac                	jne    c0024afc <__divdf3+0xd8>
c0024b50:	31 ff                	xor    edi,edi
c0024b52:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0024b57:	e9 3b 02 00 00       	jmp    c0024d97 <__divdf3+0x373>
c0024b5c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0024b5f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0024b62:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0024b68:	75 6b                	jne    c0024bd5 <__divdf3+0x1b1>
c0024b6a:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024b6d:	09 d6                	or     esi,edx
c0024b6f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0024b73:	74 28                	je     c0024b9d <__divdf3+0x179>
c0024b75:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0024b78:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0024b7b:	85 f6                	test   esi,esi
c0024b7d:	0f 85 14 02 00 00    	jne    c0024d97 <__divdf3+0x373>
c0024b83:	31 ff                	xor    edi,edi
c0024b85:	31 c9                	xor    ecx,ecx
c0024b87:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0024b8a:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0024b8d:	0f 89 04 02 00 00    	jns    c0024d97 <__divdf3+0x373>
c0024b93:	b9 00 00 00 80       	mov    ecx,0x80000000
c0024b98:	e9 fa 01 00 00       	jmp    c0024d97 <__divdf3+0x373>
c0024b9d:	85 f6                	test   esi,esi
c0024b9f:	75 1b                	jne    c0024bbc <__divdf3+0x198>
c0024ba1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0024ba4:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0024ba7:	25 00 00 00 80       	and    eax,0x80000000
c0024bac:	31 c9                	xor    ecx,ecx
c0024bae:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0024bb3:	89 cf                	mov    edi,ecx
c0024bb5:	89 c1                	mov    ecx,eax
c0024bb7:	e9 db 01 00 00       	jmp    c0024d97 <__divdf3+0x373>
c0024bbc:	01 d2                	add    edx,edx
c0024bbe:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0024bc1:	c1 eb 1f             	shr    ebx,0x1f
c0024bc4:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024bc7:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0024bca:	8d 48 01             	lea    ecx,[eax+0x1]
c0024bcd:	09 da                	or     edx,ebx
c0024bcf:	78 04                	js     c0024bd5 <__divdf3+0x1b1>
c0024bd1:	89 c8                	mov    eax,ecx
c0024bd3:	eb e7                	jmp    c0024bbc <__divdf3+0x198>
c0024bd5:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0024bd8:	81 ce 00 00 00 80    	or     esi,0x80000000
c0024bde:	81 ca 00 00 00 80    	or     edx,0x80000000
c0024be4:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0024be7:	39 d6                	cmp    esi,edx
c0024be9:	77 0d                	ja     c0024bf8 <__divdf3+0x1d4>
c0024beb:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0024bee:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0024bf1:	72 1b                	jb     c0024c0e <__divdf3+0x1ea>
c0024bf3:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0024bf6:	75 16                	jne    c0024c0e <__divdf3+0x1ea>
c0024bf8:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0024bfb:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0024bfe:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0024c01:	83 de 00             	sbb    esi,0x0
c0024c04:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0024c07:	ba 01 00 00 00       	mov    edx,0x1
c0024c0c:	eb 02                	jmp    c0024c10 <__divdf3+0x1ec>
c0024c0e:	31 d2                	xor    edx,edx
c0024c10:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0024c17:	31 ff                	xor    edi,edi
c0024c19:	01 ff                	add    edi,edi
c0024c1b:	89 d1                	mov    ecx,edx
c0024c1d:	c1 e9 1f             	shr    ecx,0x1f
c0024c20:	09 cf                	or     edi,ecx
c0024c22:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0024c25:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0024c28:	89 da                	mov    edx,ebx
c0024c2a:	89 f3                	mov    ebx,esi
c0024c2c:	8d 34 36             	lea    esi,[esi+esi*1]
c0024c2f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0024c32:	c1 e9 1f             	shr    ecx,0x1f
c0024c35:	09 ce                	or     esi,ecx
c0024c37:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0024c3a:	01 c9                	add    ecx,ecx
c0024c3c:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0024c3f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0024c42:	85 db                	test   ebx,ebx
c0024c44:	78 29                	js     c0024c6f <__divdf3+0x24b>
c0024c46:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0024c49:	72 07                	jb     c0024c52 <__divdf3+0x22e>
c0024c4b:	75 3c                	jne    c0024c89 <__divdf3+0x265>
c0024c4d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0024c50:	77 37                	ja     c0024c89 <__divdf3+0x265>
c0024c52:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0024c55:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0024c58:	31 d2                	xor    edx,edx
c0024c5a:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0024c5d:	0f 97 c2             	seta   dl
c0024c60:	29 d6                	sub    esi,edx
c0024c62:	89 d9                	mov    ecx,ebx
c0024c64:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0024c67:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0024c6a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0024c6d:	eb 17                	jmp    c0024c86 <__divdf3+0x262>
c0024c6f:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0024c72:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0024c75:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0024c78:	0f 97 c1             	seta   cl
c0024c7b:	0f b6 c9             	movzx  ecx,cl
c0024c7e:	29 ce                	sub    esi,ecx
c0024c80:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0024c83:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0024c86:	83 ca 01             	or     edx,0x1
c0024c89:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0024c8c:	75 8b                	jne    c0024c19 <__divdf3+0x1f5>
c0024c8e:	c1 e7 09             	shl    edi,0x9
c0024c91:	89 d1                	mov    ecx,edx
c0024c93:	c1 e9 17             	shr    ecx,0x17
c0024c96:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0024c99:	09 f3                	or     ebx,esi
c0024c9b:	0f 95 c3             	setne  bl
c0024c9e:	0f b6 db             	movzx  ebx,bl
c0024ca1:	c1 e2 09             	shl    edx,0x9
c0024ca4:	09 d3                	or     ebx,edx
c0024ca6:	89 ca                	mov    edx,ecx
c0024ca8:	09 fa                	or     edx,edi
c0024caa:	78 0c                	js     c0024cb8 <__divdf3+0x294>
c0024cac:	01 d2                	add    edx,edx
c0024cae:	89 d9                	mov    ecx,ebx
c0024cb0:	c1 e9 1f             	shr    ecx,0x1f
c0024cb3:	09 ca                	or     edx,ecx
c0024cb5:	01 db                	add    ebx,ebx
c0024cb7:	48                   	dec    eax
c0024cb8:	3d fe 07 00 00       	cmp    eax,0x7fe
c0024cbd:	0f 8f 83 00 00 00    	jg     c0024d46 <__divdf3+0x322>
c0024cc3:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0024cc9:	85 c0                	test   eax,eax
c0024ccb:	0f 8f 82 00 00 00    	jg     c0024d53 <__divdf3+0x32f>
c0024cd1:	83 f8 cc             	cmp    eax,0xffffffcc
c0024cd4:	7c 77                	jl     c0024d4d <__divdf3+0x329>
c0024cd6:	be 01 00 00 00       	mov    esi,0x1
c0024cdb:	29 c6                	sub    esi,eax
c0024cdd:	81 ca 00 00 00 80    	or     edx,0x80000000
c0024ce3:	83 fe 1f             	cmp    esi,0x1f
c0024ce6:	7e 2f                	jle    c0024d17 <__divdf3+0x2f3>
c0024ce8:	83 fe 20             	cmp    esi,0x20
c0024ceb:	75 0a                	jne    c0024cf7 <__divdf3+0x2d3>
c0024ced:	85 db                	test   ebx,ebx
c0024cef:	0f 95 c3             	setne  bl
c0024cf2:	0f b6 db             	movzx  ebx,bl
c0024cf5:	eb 1a                	jmp    c0024d11 <__divdf3+0x2ed>
c0024cf7:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0024cfa:	89 d7                	mov    edi,edx
c0024cfc:	d3 e7                	shl    edi,cl
c0024cfe:	89 f9                	mov    ecx,edi
c0024d00:	09 d9                	or     ecx,ebx
c0024d02:	0f 95 c3             	setne  bl
c0024d05:	0f b6 db             	movzx  ebx,bl
c0024d08:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0024d0d:	29 c1                	sub    ecx,eax
c0024d0f:	d3 ea                	shr    edx,cl
c0024d11:	09 d3                	or     ebx,edx
c0024d13:	31 c0                	xor    eax,eax
c0024d15:	eb 3a                	jmp    c0024d51 <__divdf3+0x32d>
c0024d17:	83 c0 1f             	add    eax,0x1f
c0024d1a:	89 d7                	mov    edi,edx
c0024d1c:	88 c1                	mov    cl,al
c0024d1e:	d3 e7                	shl    edi,cl
c0024d20:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0024d23:	89 df                	mov    edi,ebx
c0024d25:	89 f1                	mov    ecx,esi
c0024d27:	d3 ef                	shr    edi,cl
c0024d29:	89 f9                	mov    ecx,edi
c0024d2b:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0024d2e:	09 cf                	or     edi,ecx
c0024d30:	88 c1                	mov    cl,al
c0024d32:	d3 e3                	shl    ebx,cl
c0024d34:	85 db                	test   ebx,ebx
c0024d36:	0f 95 c3             	setne  bl
c0024d39:	0f b6 db             	movzx  ebx,bl
c0024d3c:	09 fb                	or     ebx,edi
c0024d3e:	89 f1                	mov    ecx,esi
c0024d40:	d3 ea                	shr    edx,cl
c0024d42:	31 c0                	xor    eax,eax
c0024d44:	eb 0d                	jmp    c0024d53 <__divdf3+0x32f>
c0024d46:	b8 ff 07 00 00       	mov    eax,0x7ff
c0024d4b:	eb 02                	jmp    c0024d4f <__divdf3+0x32b>
c0024d4d:	31 c0                	xor    eax,eax
c0024d4f:	31 db                	xor    ebx,ebx
c0024d51:	31 d2                	xor    edx,edx
c0024d53:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0024d56:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0024d59:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0024d5f:	09 c8                	or     eax,ecx
c0024d61:	c1 e0 14             	shl    eax,0x14
c0024d64:	89 d1                	mov    ecx,edx
c0024d66:	c1 e9 0b             	shr    ecx,0xb
c0024d69:	09 c8                	or     eax,ecx
c0024d6b:	89 c6                	mov    esi,eax
c0024d6d:	89 d9                	mov    ecx,ebx
c0024d6f:	c1 e9 0b             	shr    ecx,0xb
c0024d72:	c1 e2 15             	shl    edx,0x15
c0024d75:	09 ca                	or     edx,ecx
c0024d77:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0024d7d:	0f 95 c0             	setne  al
c0024d80:	09 c1                	or     ecx,eax
c0024d82:	83 e1 01             	and    ecx,0x1
c0024d85:	c1 eb 0a             	shr    ebx,0xa
c0024d88:	21 cb                	and    ebx,ecx
c0024d8a:	01 d3                	add    ebx,edx
c0024d8c:	89 d8                	mov    eax,ebx
c0024d8e:	83 d6 00             	adc    esi,0x0
c0024d91:	89 f2                	mov    edx,esi
c0024d93:	89 c7                	mov    edi,eax
c0024d95:	89 d1                	mov    ecx,edx
c0024d97:	89 f8                	mov    eax,edi
c0024d99:	89 ca                	mov    edx,ecx
c0024d9b:	83 c4 2c             	add    esp,0x2c
c0024d9e:	5b                   	pop    ebx
c0024d9f:	5e                   	pop    esi
c0024da0:	5f                   	pop    edi
c0024da1:	5d                   	pop    ebp
c0024da2:	c3                   	ret    

c0024da3 <__floatsidf>:
c0024da3:	55                   	push   ebp
c0024da4:	89 e5                	mov    ebp,esp
c0024da6:	56                   	push   esi
c0024da7:	53                   	push   ebx
c0024da8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0024dab:	85 db                	test   ebx,ebx
c0024dad:	7e 15                	jle    c0024dc4 <__floatsidf+0x21>
c0024daf:	0f bd cb             	bsr    ecx,ebx
c0024db2:	83 f1 1f             	xor    ecx,0x1f
c0024db5:	d3 e3                	shl    ebx,cl
c0024db7:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0024dbd:	b8 1e 04 00 00       	mov    eax,0x41e
c0024dc2:	eb 21                	jmp    c0024de5 <__floatsidf+0x42>
c0024dc4:	b8 00 00 00 00       	mov    eax,0x0
c0024dc9:	ba 00 00 00 00       	mov    edx,0x0
c0024dce:	74 2a                	je     c0024dfa <__floatsidf+0x57>
c0024dd0:	f7 db                	neg    ebx
c0024dd2:	0f bd cb             	bsr    ecx,ebx
c0024dd5:	83 f1 1f             	xor    ecx,0x1f
c0024dd8:	d3 e3                	shl    ebx,cl
c0024dda:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0024de0:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0024de5:	29 c8                	sub    eax,ecx
c0024de7:	c1 e0 14             	shl    eax,0x14
c0024dea:	89 c1                	mov    ecx,eax
c0024dec:	89 de                	mov    esi,ebx
c0024dee:	c1 ee 0b             	shr    esi,0xb
c0024df1:	09 f1                	or     ecx,esi
c0024df3:	89 ca                	mov    edx,ecx
c0024df5:	c1 e3 15             	shl    ebx,0x15
c0024df8:	89 d8                	mov    eax,ebx
c0024dfa:	5b                   	pop    ebx
c0024dfb:	5e                   	pop    esi
c0024dfc:	5d                   	pop    ebp
c0024dfd:	c3                   	ret    

c0024dfe <__floatunsidf>:
c0024dfe:	55                   	push   ebp
c0024dff:	89 e5                	mov    ebp,esp
c0024e01:	56                   	push   esi
c0024e02:	53                   	push   ebx
c0024e03:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0024e06:	85 db                	test   ebx,ebx
c0024e08:	74 2a                	je     c0024e34 <__floatunsidf+0x36>
c0024e0a:	0f bd cb             	bsr    ecx,ebx
c0024e0d:	83 f1 1f             	xor    ecx,0x1f
c0024e10:	d3 e3                	shl    ebx,cl
c0024e12:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0024e18:	b8 1e 04 00 00       	mov    eax,0x41e
c0024e1d:	29 c8                	sub    eax,ecx
c0024e1f:	c1 e0 14             	shl    eax,0x14
c0024e22:	89 c1                	mov    ecx,eax
c0024e24:	89 de                	mov    esi,ebx
c0024e26:	c1 ee 0b             	shr    esi,0xb
c0024e29:	09 f1                	or     ecx,esi
c0024e2b:	89 ca                	mov    edx,ecx
c0024e2d:	c1 e3 15             	shl    ebx,0x15
c0024e30:	89 d8                	mov    eax,ebx
c0024e32:	eb 04                	jmp    c0024e38 <__floatunsidf+0x3a>
c0024e34:	31 c0                	xor    eax,eax
c0024e36:	31 d2                	xor    edx,edx
c0024e38:	5b                   	pop    ebx
c0024e39:	5e                   	pop    esi
c0024e3a:	5d                   	pop    ebp
c0024e3b:	c3                   	ret    

c0024e3c <__fixdfsi>:
c0024e3c:	55                   	push   ebp
c0024e3d:	89 e5                	mov    ebp,esp
c0024e3f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024e42:	89 d1                	mov    ecx,edx
c0024e44:	c1 e1 0b             	shl    ecx,0xb
c0024e47:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0024e4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024e50:	c1 e8 15             	shr    eax,0x15
c0024e53:	09 c1                	or     ecx,eax
c0024e55:	c1 fa 14             	sar    edx,0x14
c0024e58:	78 1f                	js     c0024e79 <__fixdfsi+0x3d>
c0024e5a:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0024e60:	31 c0                	xor    eax,eax
c0024e62:	83 fa 1e             	cmp    edx,0x1e
c0024e65:	77 40                	ja     c0024ea7 <__fixdfsi+0x6b>
c0024e67:	89 c8                	mov    eax,ecx
c0024e69:	0d 00 00 00 80       	or     eax,0x80000000
c0024e6e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0024e73:	29 d1                	sub    ecx,edx
c0024e75:	d3 e8                	shr    eax,cl
c0024e77:	eb 2e                	jmp    c0024ea7 <__fixdfsi+0x6b>
c0024e79:	31 c0                	xor    eax,eax
c0024e7b:	81 c2 01 04 00 00    	add    edx,0x401
c0024e81:	78 24                	js     c0024ea7 <__fixdfsi+0x6b>
c0024e83:	83 fa 1e             	cmp    edx,0x1e
c0024e86:	7e 09                	jle    c0024e91 <__fixdfsi+0x55>
c0024e88:	83 fa 1f             	cmp    edx,0x1f
c0024e8b:	75 18                	jne    c0024ea5 <__fixdfsi+0x69>
c0024e8d:	85 c9                	test   ecx,ecx
c0024e8f:	75 14                	jne    c0024ea5 <__fixdfsi+0x69>
c0024e91:	89 c8                	mov    eax,ecx
c0024e93:	0d 00 00 00 80       	or     eax,0x80000000
c0024e98:	b9 1f 00 00 00       	mov    ecx,0x1f
c0024e9d:	29 d1                	sub    ecx,edx
c0024e9f:	d3 e8                	shr    eax,cl
c0024ea1:	f7 d8                	neg    eax
c0024ea3:	eb 02                	jmp    c0024ea7 <__fixdfsi+0x6b>
c0024ea5:	31 c0                	xor    eax,eax
c0024ea7:	5d                   	pop    ebp
c0024ea8:	c3                   	ret    

c0024ea9 <__fixunsdfsi>:
c0024ea9:	55                   	push   ebp
c0024eaa:	89 e5                	mov    ebp,esp
c0024eac:	53                   	push   ebx
c0024ead:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0024eb0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024eb3:	89 d3                	mov    ebx,edx
c0024eb5:	c1 fb 14             	sar    ebx,0x14
c0024eb8:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0024ebe:	31 c0                	xor    eax,eax
c0024ec0:	83 fb 1f             	cmp    ebx,0x1f
c0024ec3:	77 1d                	ja     c0024ee2 <__fixunsdfsi+0x39>
c0024ec5:	89 d0                	mov    eax,edx
c0024ec7:	c1 e0 0b             	shl    eax,0xb
c0024eca:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0024ecf:	c1 e9 15             	shr    ecx,0x15
c0024ed2:	09 c8                	or     eax,ecx
c0024ed4:	0d 00 00 00 80       	or     eax,0x80000000
c0024ed9:	b9 1f 00 00 00       	mov    ecx,0x1f
c0024ede:	29 d9                	sub    ecx,ebx
c0024ee0:	d3 e8                	shr    eax,cl
c0024ee2:	5b                   	pop    ebx
c0024ee3:	5d                   	pop    ebp
c0024ee4:	c3                   	ret    

c0024ee5 <__cmpdf2>:
c0024ee5:	55                   	push   ebp
c0024ee6:	89 e5                	mov    ebp,esp
c0024ee8:	57                   	push   edi
c0024ee9:	56                   	push   esi
c0024eea:	53                   	push   ebx
c0024eeb:	83 ec 0c             	sub    esp,0xc
c0024eee:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0024ef1:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0024ef4:	89 ca                	mov    edx,ecx
c0024ef6:	c1 ea 14             	shr    edx,0x14
c0024ef9:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0024eff:	89 cb                	mov    ebx,ecx
c0024f01:	c1 fb 1f             	sar    ebx,0x1f
c0024f04:	31 da                	xor    edx,ebx
c0024f06:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0024f09:	89 df                	mov    edi,ebx
c0024f0b:	c1 e7 0b             	shl    edi,0xb
c0024f0e:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0024f11:	c1 e1 0b             	shl    ecx,0xb
c0024f14:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0024f1a:	c1 eb 15             	shr    ebx,0x15
c0024f1d:	09 d9                	or     ecx,ebx
c0024f1f:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0024f22:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0024f25:	89 ce                	mov    esi,ecx
c0024f27:	c1 ee 14             	shr    esi,0x14
c0024f2a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0024f30:	89 cb                	mov    ebx,ecx
c0024f32:	c1 fb 1f             	sar    ebx,0x1f
c0024f35:	31 de                	xor    esi,ebx
c0024f37:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0024f3a:	89 df                	mov    edi,ebx
c0024f3c:	c1 e7 0b             	shl    edi,0xb
c0024f3f:	c1 e1 0b             	shl    ecx,0xb
c0024f42:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0024f48:	c1 eb 15             	shr    ebx,0x15
c0024f4b:	09 d9                	or     ecx,ebx
c0024f4d:	89 d3                	mov    ebx,edx
c0024f4f:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0024f55:	43                   	inc    ebx
c0024f56:	83 fb 01             	cmp    ebx,0x1
c0024f59:	77 08                	ja     c0024f63 <__cmpdf2+0x7e>
c0024f5b:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0024f5e:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0024f61:	75 68                	jne    c0024fcb <__cmpdf2+0xe6>
c0024f63:	89 f3                	mov    ebx,esi
c0024f65:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0024f6b:	43                   	inc    ebx
c0024f6c:	83 fb 01             	cmp    ebx,0x1
c0024f6f:	77 06                	ja     c0024f77 <__cmpdf2+0x92>
c0024f71:	89 fb                	mov    ebx,edi
c0024f73:	09 cb                	or     ebx,ecx
c0024f75:	75 54                	jne    c0024fcb <__cmpdf2+0xe6>
c0024f77:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0024f7a:	09 f8                	or     eax,edi
c0024f7c:	09 c8                	or     eax,ecx
c0024f7e:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0024f81:	75 12                	jne    c0024f95 <__cmpdf2+0xb0>
c0024f83:	8d 42 01             	lea    eax,[edx+0x1]
c0024f86:	83 f8 01             	cmp    eax,0x1
c0024f89:	77 0a                	ja     c0024f95 <__cmpdf2+0xb0>
c0024f8b:	8d 5e 01             	lea    ebx,[esi+0x1]
c0024f8e:	31 c0                	xor    eax,eax
c0024f90:	83 fb 01             	cmp    ebx,0x1
c0024f93:	76 36                	jbe    c0024fcb <__cmpdf2+0xe6>
c0024f95:	b8 01 00 00 00       	mov    eax,0x1
c0024f9a:	39 f2                	cmp    edx,esi
c0024f9c:	7f 2d                	jg     c0024fcb <__cmpdf2+0xe6>
c0024f9e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0024fa3:	7c 26                	jl     c0024fcb <__cmpdf2+0xe6>
c0024fa5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0024fa8:	77 07                	ja     c0024fb1 <__cmpdf2+0xcc>
c0024faa:	72 16                	jb     c0024fc2 <__cmpdf2+0xdd>
c0024fac:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0024faf:	76 0a                	jbe    c0024fbb <__cmpdf2+0xd6>
c0024fb1:	89 d0                	mov    eax,edx
c0024fb3:	c1 f8 1f             	sar    eax,0x1f
c0024fb6:	83 c8 01             	or     eax,0x1
c0024fb9:	eb 10                	jmp    c0024fcb <__cmpdf2+0xe6>
c0024fbb:	b8 00 00 00 00       	mov    eax,0x0
c0024fc0:	73 09                	jae    c0024fcb <__cmpdf2+0xe6>
c0024fc2:	89 d0                	mov    eax,edx
c0024fc4:	c1 f8 1f             	sar    eax,0x1f
c0024fc7:	83 e0 02             	and    eax,0x2
c0024fca:	48                   	dec    eax
c0024fcb:	83 c4 0c             	add    esp,0xc
c0024fce:	5b                   	pop    ebx
c0024fcf:	5e                   	pop    esi
c0024fd0:	5f                   	pop    edi
c0024fd1:	5d                   	pop    ebp
c0024fd2:	c3                   	ret    

c0024fd3 <__eqdf2>:
c0024fd3:	55                   	push   ebp
c0024fd4:	89 e5                	mov    ebp,esp
c0024fd6:	50                   	push   eax
c0024fd7:	6a 01                	push   0x1
c0024fd9:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0024fdc:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0024fdf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0024fe2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024fe5:	e8 fb fe ff ff       	call   c0024ee5 <__cmpdf2>
c0024fea:	83 c4 18             	add    esp,0x18
c0024fed:	c9                   	leave  
c0024fee:	c3                   	ret    

c0024fef <__nedf2>:
c0024fef:	eb e2                	jmp    c0024fd3 <__eqdf2>

c0024ff1 <__gtdf2>:
c0024ff1:	55                   	push   ebp
c0024ff2:	89 e5                	mov    ebp,esp
c0024ff4:	50                   	push   eax
c0024ff5:	6a ff                	push   0xffffffff
c0024ff7:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0024ffa:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0024ffd:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025000:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025003:	e8 dd fe ff ff       	call   c0024ee5 <__cmpdf2>
c0025008:	83 c4 18             	add    esp,0x18
c002500b:	c9                   	leave  
c002500c:	c3                   	ret    

c002500d <__gedf2>:
c002500d:	eb e2                	jmp    c0024ff1 <__gtdf2>

c002500f <__ltdf2>:
c002500f:	eb c2                	jmp    c0024fd3 <__eqdf2>

c0025011 <__ledf2>:
c0025011:	eb c0                	jmp    c0024fd3 <__eqdf2>

c0025013 <__truncdfsf2>:
c0025013:	55                   	push   ebp
c0025014:	89 e5                	mov    ebp,esp
c0025016:	57                   	push   edi
c0025017:	56                   	push   esi
c0025018:	53                   	push   ebx
c0025019:	83 ec 0c             	sub    esp,0xc
c002501c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002501f:	89 d1                	mov    ecx,edx
c0025021:	c1 f9 14             	sar    ecx,0x14
c0025024:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0025027:	89 df                	mov    edi,ebx
c0025029:	c1 e7 0b             	shl    edi,0xb
c002502c:	89 d0                	mov    eax,edx
c002502e:	c1 e0 0b             	shl    eax,0xb
c0025031:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0025036:	c1 eb 15             	shr    ebx,0x15
c0025039:	09 d8                	or     eax,ebx
c002503b:	89 cb                	mov    ebx,ecx
c002503d:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0025043:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0025049:	81 fe fd 00 00 00    	cmp    esi,0xfd
c002504f:	0f 86 9e 00 00 00    	jbe    c00250f3 <__truncdfsf2+0xe0>
c0025055:	85 db                	test   ebx,ebx
c0025057:	75 0a                	jne    c0025063 <__truncdfsf2+0x50>
c0025059:	c1 fa 17             	sar    edx,0x17
c002505c:	30 d2                	xor    dl,dl
c002505e:	e9 84 00 00 00       	jmp    c00250e7 <__truncdfsf2+0xd4>
c0025063:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0025069:	83 fe 83             	cmp    esi,0xffffff83
c002506c:	7d 4b                	jge    c00250b9 <__truncdfsf2+0xa6>
c002506e:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0025073:	29 f1                	sub    ecx,esi
c0025075:	83 f9 1f             	cmp    ecx,0x1f
c0025078:	7f 6b                	jg     c00250e5 <__truncdfsf2+0xd2>
c002507a:	0d 00 00 00 80       	or     eax,0x80000000
c002507f:	89 c3                	mov    ebx,eax
c0025081:	d3 eb                	shr    ebx,cl
c0025083:	be 01 00 00 00       	mov    esi,0x1
c0025088:	d3 e6                	shl    esi,cl
c002508a:	4e                   	dec    esi
c002508b:	21 f0                	and    eax,esi
c002508d:	09 f8                	or     eax,edi
c002508f:	0f 95 c0             	setne  al
c0025092:	0f b6 c0             	movzx  eax,al
c0025095:	09 c3                	or     ebx,eax
c0025097:	89 d9                	mov    ecx,ebx
c0025099:	c1 e9 08             	shr    ecx,0x8
c002509c:	f6 c3 7f             	test   bl,0x7f
c002509f:	0f 95 c0             	setne  al
c00250a2:	09 c8                	or     eax,ecx
c00250a4:	83 e0 01             	and    eax,0x1
c00250a7:	c1 eb 07             	shr    ebx,0x7
c00250aa:	21 c3                	and    ebx,eax
c00250ac:	81 e2 00 00 00 80    	and    edx,0x80000000
c00250b2:	09 d1                	or     ecx,edx
c00250b4:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c00250b7:	eb 76                	jmp    c002512f <__truncdfsf2+0x11c>
c00250b9:	83 c6 80             	add    esi,0xffffff80
c00250bc:	7e 1d                	jle    c00250db <__truncdfsf2+0xc8>
c00250be:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c00250c4:	75 0b                	jne    c00250d1 <__truncdfsf2+0xbe>
c00250c6:	09 f8                	or     eax,edi
c00250c8:	74 09                	je     c00250d3 <__truncdfsf2+0xc0>
c00250ca:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c00250cf:	eb 02                	jmp    c00250d3 <__truncdfsf2+0xc0>
c00250d1:	31 c0                	xor    eax,eax
c00250d3:	c1 fa 17             	sar    edx,0x17
c00250d6:	80 ca ff             	or     dl,0xff
c00250d9:	eb 0e                	jmp    c00250e9 <__truncdfsf2+0xd6>
c00250db:	c1 fa 1f             	sar    edx,0x1f
c00250de:	c1 e2 08             	shl    edx,0x8
c00250e1:	09 ca                	or     edx,ecx
c00250e3:	eb 04                	jmp    c00250e9 <__truncdfsf2+0xd6>
c00250e5:	31 d2                	xor    edx,edx
c00250e7:	31 c0                	xor    eax,eax
c00250e9:	c1 e2 17             	shl    edx,0x17
c00250ec:	c1 e8 08             	shr    eax,0x8
c00250ef:	09 d0                	or     eax,edx
c00250f1:	eb 3c                	jmp    c002512f <__truncdfsf2+0x11c>
c00250f3:	81 e9 80 03 00 00    	sub    ecx,0x380
c00250f9:	89 ca                	mov    edx,ecx
c00250fb:	c1 fa 0b             	sar    edx,0xb
c00250fe:	c1 e2 08             	shl    edx,0x8
c0025101:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0025104:	31 db                	xor    ebx,ebx
c0025106:	85 ff                	test   edi,edi
c0025108:	0f 95 c3             	setne  bl
c002510b:	09 d8                	or     eax,ebx
c002510d:	89 c3                	mov    ebx,eax
c002510f:	c1 eb 08             	shr    ebx,0x8
c0025112:	a8 7f                	test   al,0x7f
c0025114:	0f 95 c2             	setne  dl
c0025117:	89 d6                	mov    esi,edx
c0025119:	09 de                	or     esi,ebx
c002511b:	83 e6 01             	and    esi,0x1
c002511e:	c1 e8 07             	shr    eax,0x7
c0025121:	21 f0                	and    eax,esi
c0025123:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0025126:	09 ca                	or     edx,ecx
c0025128:	c1 e2 17             	shl    edx,0x17
c002512b:	09 da                	or     edx,ebx
c002512d:	01 d0                	add    eax,edx
c002512f:	83 c4 0c             	add    esp,0xc
c0025132:	5b                   	pop    ebx
c0025133:	5e                   	pop    esi
c0025134:	5f                   	pop    edi
c0025135:	5d                   	pop    ebp
c0025136:	c3                   	ret    

c0025137 <__extendsfdf2>:
c0025137:	55                   	push   ebp
c0025138:	89 e5                	mov    ebp,esp
c002513a:	57                   	push   edi
c002513b:	56                   	push   esi
c002513c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002513f:	89 d1                	mov    ecx,edx
c0025141:	c1 f9 17             	sar    ecx,0x17
c0025144:	c1 e2 08             	shl    edx,0x8
c0025147:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002514d:	89 c8                	mov    eax,ecx
c002514f:	80 e4 f8             	and    ah,0xf8
c0025152:	8d 71 01             	lea    esi,[ecx+0x1]
c0025155:	81 e6 fe 00 00 00    	and    esi,0xfe
c002515b:	75 27                	jne    c0025184 <__extendsfdf2+0x4d>
c002515d:	81 e1 ff 00 00 00    	and    ecx,0xff
c0025163:	75 18                	jne    c002517d <__extendsfdf2+0x46>
c0025165:	85 d2                	test   edx,edx
c0025167:	74 20                	je     c0025189 <__extendsfdf2+0x52>
c0025169:	41                   	inc    ecx
c002516a:	01 d2                	add    edx,edx
c002516c:	79 fb                	jns    c0025169 <__extendsfdf2+0x32>
c002516e:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0025174:	29 c8                	sub    eax,ecx
c0025176:	05 81 03 00 00       	add    eax,0x381
c002517b:	eb 0c                	jmp    c0025189 <__extendsfdf2+0x52>
c002517d:	05 00 07 00 00       	add    eax,0x700
c0025182:	eb 05                	jmp    c0025189 <__extendsfdf2+0x52>
c0025184:	05 80 03 00 00       	add    eax,0x380
c0025189:	c1 e0 14             	shl    eax,0x14
c002518c:	89 c1                	mov    ecx,eax
c002518e:	89 d0                	mov    eax,edx
c0025190:	c1 e8 0b             	shr    eax,0xb
c0025193:	09 c1                	or     ecx,eax
c0025195:	c1 e2 15             	shl    edx,0x15
c0025198:	89 d0                	mov    eax,edx
c002519a:	89 ca                	mov    edx,ecx
c002519c:	5e                   	pop    esi
c002519d:	5f                   	pop    edi
c002519e:	5d                   	pop    ebp
c002519f:	c3                   	ret    

c00251a0 <fabs>:
c00251a0:	83 ec 0c             	sub    esp,0xc
c00251a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251a7:	89 04 24             	mov    DWORD PTR [esp],eax
c00251aa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00251ae:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00251b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00251b7:	dd 04 24             	fld    QWORD PTR [esp]
c00251ba:	83 c4 0c             	add    esp,0xc
c00251bd:	c3                   	ret    
c00251be:	66 90                	xchg   ax,ax

c00251c0 <lrint>:
c00251c0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c00251c4:	83 ec 04             	sub    esp,0x4
c00251c7:	db 1c 24             	fistp  DWORD PTR [esp]
c00251ca:	58                   	pop    eax
c00251cb:	c3                   	ret    

c00251cc <lrintf>:
c00251cc:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c00251d0:	83 ec 04             	sub    esp,0x4
c00251d3:	db 1c 24             	fistp  DWORD PTR [esp]
c00251d6:	58                   	pop    eax
c00251d7:	c3                   	ret    

Disassembly of section .init:

c00251d8 <_init>:
c00251d8:	55                   	push   ebp
c00251d9:	89 e5                	mov    ebp,esp
c00251db:	e8 38 af fd ff       	call   c0000118 <frame_dummy>
c00251e0:	e8 63 e0 ff ff       	call   c0023248 <__do_global_ctors_aux>
c00251e5:	5d                   	pop    ebp
c00251e6:	c3                   	ret    

Disassembly of section .fini:

c00251e7 <_fini>:
c00251e7:	55                   	push   ebp
c00251e8:	89 e5                	mov    ebp,esp
c00251ea:	e8 b9 ae fd ff       	call   c00000a8 <__do_global_dtors_aux>
c00251ef:	5d                   	pop    ebp
c00251f0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00251f2 <Computer::~Computer()>:
c00251f2:	83 ec 0c             	sub    esp,0xc
c00251f5:	ba d0 6c 02 c0       	mov    edx,0xc0026cd0
c00251fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251fe:	89 10                	mov    DWORD PTR [eax],edx
c0025200:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025204:	83 ec 0c             	sub    esp,0xc
c0025207:	50                   	push   eax
c0025208:	e8 cf e2 fe ff       	call   c00134dc <Device::~Device()>
c002520d:	83 c4 10             	add    esp,0x10
c0025210:	90                   	nop
c0025211:	83 c4 0c             	add    esp,0xc
c0025214:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0025216 <Computer::~Computer()>:
c0025216:	83 ec 0c             	sub    esp,0xc
c0025219:	83 ec 0c             	sub    esp,0xc
c002521c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025220:	e8 cd ff ff ff       	call   c00251f2 <Computer::~Computer()>
c0025225:	83 c4 10             	add    esp,0x10
c0025228:	83 ec 08             	sub    esp,0x8
c002522b:	68 ec 01 00 00       	push   0x1ec
c0025230:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025234:	e8 16 cf fe ff       	call   c001214f <operator delete(void*, unsigned long)>
c0025239:	83 c4 10             	add    esp,0x10
c002523c:	83 c4 0c             	add    esp,0xc
c002523f:	c3                   	ret    

Disassembly of section .text._ZN3CPU7currentEv:

c0025240 <CPU::current()>:
c0025240:	a1 28 a6 02 c0       	mov    eax,ds:0xc002a628
c0025245:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002524b:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c002524c <idleCommon()>:
c002524c:	83 ec 0c             	sub    esp,0xc
c002524f:	e8 a6 67 ff ff       	call   c001b9fa <lockScheduler()>
c0025254:	e8 d5 6a ff ff       	call   c001bd2e <schedule()>
c0025259:	83 c4 0c             	add    esp,0xc
c002525c:	e9 9b 67 ff ff       	jmp    c001b9fc <unlockScheduler()>

Disassembly of section .text._ZN3CPU7readCR3Ev:

c0025261 <CPU::readCR3()>:
c0025261:	83 ec 10             	sub    esp,0x10
c0025264:	0f 20 d8             	mov    eax,cr3
c0025267:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002526b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002526f:	83 c4 10             	add    esp,0x10
c0025272:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR3Em:

c0025273 <CPU::writeCR3(unsigned long)>:
c0025273:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025277:	0f 22 d8             	mov    cr3,eax
c002527a:	90                   	nop
c002527b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c002527c <LinkedList<UnixFile>::~LinkedList()>:
c002527c:	90                   	nop
c002527d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c002527e <LinkedList<UnixFile>::LinkedList()>:
c002527e:	83 ec 0c             	sub    esp,0xc
c0025281:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025285:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002528b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002528f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025296:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002529a:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00252a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252a5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00252ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252af:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00252b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252ba:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00252c1:	83 ec 0c             	sub    esp,0xc
c00252c4:	68 46 6f 02 c0       	push   0xc0026f46
c00252c9:	e8 61 cf fe ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c00252ce:	83 c4 10             	add    esp,0x10
c00252d1:	90                   	nop
c00252d2:	83 c4 0c             	add    esp,0xc
c00252d5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00252d6 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00252d6:	83 ec 0c             	sub    esp,0xc
c00252d9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00252de:	75 10                	jne    c00252f0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00252e0:	83 ec 0c             	sub    esp,0xc
c00252e3:	68 60 6f 02 c0       	push   0xc0026f60
c00252e8:	e8 ba 37 ff ff       	call   c0018aa7 <Krnl::panic(char const*)>
c00252ed:	83 c4 10             	add    esp,0x10
c00252f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00252f6:	85 c0                	test   eax,eax
c00252f8:	74 34                	je     c002532e <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00252fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025301:	85 c0                	test   eax,eax
c0025303:	74 29                	je     c002532e <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0025305:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025309:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002530c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025310:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0025313:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025317:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002531b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002531e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025322:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025325:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002532c:	eb 65                	jmp    c0025393 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002532e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025332:	8b 00                	mov    eax,DWORD PTR [eax]
c0025334:	85 c0                	test   eax,eax
c0025336:	75 4b                	jne    c0025383 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0025338:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002533c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002533f:	85 c0                	test   eax,eax
c0025341:	75 40                	jne    c0025383 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0025343:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025347:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002534b:	89 10                	mov    DWORD PTR [eax],edx
c002534d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025351:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025355:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0025358:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002535c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002535f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0025366:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002536a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002536d:	85 c0                	test   eax,eax
c002536f:	74 22                	je     c0025393 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0025371:	83 ec 0c             	sub    esp,0xc
c0025374:	68 82 6f 02 c0       	push   0xc0026f82
c0025379:	e8 29 37 ff ff       	call   c0018aa7 <Krnl::panic(char const*)>
c002537e:	83 c4 10             	add    esp,0x10
c0025381:	eb 10                	jmp    c0025393 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0025383:	83 ec 0c             	sub    esp,0xc
c0025386:	68 8c 6f 02 c0       	push   0xc0026f8c
c002538b:	e8 17 37 ff ff       	call   c0018aa7 <Krnl::panic(char const*)>
c0025390:	83 c4 10             	add    esp,0x10
c0025393:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025397:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002539a:	8d 50 01             	lea    edx,[eax+0x1]
c002539d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253a1:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00253a4:	90                   	nop
c00253a5:	83 c4 0c             	add    esp,0xc
c00253a8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00253aa <LinkedList<UnixFile>::getFirstElement()>:
c00253aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00253ae:	8b 00                	mov    eax,DWORD PTR [eax]
c00253b0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00253b2 <LinkedList<UnixFile>::removeFirst()>:
c00253b2:	83 ec 0c             	sub    esp,0xc
c00253b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00253bb:	85 c0                	test   eax,eax
c00253bd:	75 12                	jne    c00253d1 <LinkedList<UnixFile>::removeFirst()+0x1f>
c00253bf:	83 ec 0c             	sub    esp,0xc
c00253c2:	68 98 6f 02 c0       	push   0xc0026f98
c00253c7:	e8 db 36 ff ff       	call   c0018aa7 <Krnl::panic(char const*)>
c00253cc:	83 c4 10             	add    esp,0x10
c00253cf:	eb 7e                	jmp    c002544f <LinkedList<UnixFile>::removeFirst()+0x9d>
c00253d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253d5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00253d8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00253db:	85 c0                	test   eax,eax
c00253dd:	74 10                	je     c00253ef <LinkedList<UnixFile>::removeFirst()+0x3d>
c00253df:	83 ec 0c             	sub    esp,0xc
c00253e2:	68 e3 6f 02 c0       	push   0xc0026fe3
c00253e7:	e8 bb 36 ff ff       	call   c0018aa7 <Krnl::panic(char const*)>
c00253ec:	83 c4 10             	add    esp,0x10
c00253ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00253f5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00253f8:	85 c0                	test   eax,eax
c00253fa:	75 33                	jne    c002542f <LinkedList<UnixFile>::removeFirst()+0x7d>
c00253fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025400:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0025406:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002540a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025411:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025415:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025418:	83 f8 01             	cmp    eax,0x1
c002541b:	74 21                	je     c002543e <LinkedList<UnixFile>::removeFirst()+0x8c>
c002541d:	83 ec 0c             	sub    esp,0xc
c0025420:	68 bc 6f 02 c0       	push   0xc0026fbc
c0025425:	e8 7d 36 ff ff       	call   c0018aa7 <Krnl::panic(char const*)>
c002542a:	83 c4 10             	add    esp,0x10
c002542d:	eb 0f                	jmp    c002543e <LinkedList<UnixFile>::removeFirst()+0x8c>
c002542f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025433:	8b 00                	mov    eax,DWORD PTR [eax]
c0025435:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0025438:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002543c:	89 10                	mov    DWORD PTR [eax],edx
c002543e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025442:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025445:	8d 50 ff             	lea    edx,[eax-0x1]
c0025448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002544c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002544f:	83 c4 0c             	add    esp,0xc
c0025452:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0025454 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0025454:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025458:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002545b:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c002545c <DriverlessDevice::~DriverlessDevice()>:
c002545c:	ba 64 76 02 c0       	mov    edx,0xc0027664
c0025461:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025465:	89 10                	mov    DWORD PTR [eax],edx
c0025467:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002546b:	50                   	push   eax
c002546c:	e8 6b e0 fe ff       	call   c00134dc <Device::~Device()>
c0025471:	83 c4 04             	add    esp,0x4
c0025474:	90                   	nop
c0025475:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0025476 <DriverlessDevice::~DriverlessDevice()>:
c0025476:	83 ec 0c             	sub    esp,0xc
c0025479:	83 ec 0c             	sub    esp,0xc
c002547c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025480:	e8 d7 ff ff ff       	call   c002545c <DriverlessDevice::~DriverlessDevice()>
c0025485:	83 c4 10             	add    esp,0x10
c0025488:	83 ec 08             	sub    esp,0x8
c002548b:	68 58 01 00 00       	push   0x158
c0025490:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025494:	e8 b6 cc fe ff       	call   c001214f <operator delete(void*, unsigned long)>
c0025499:	83 c4 10             	add    esp,0x10
c002549c:	83 c4 0c             	add    esp,0xc
c002549f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00254a0 <LinkedList<Device>::addElement(Device*)>:
c00254a0:	83 ec 0c             	sub    esp,0xc
c00254a3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00254a8:	75 10                	jne    c00254ba <LinkedList<Device>::addElement(Device*)+0x1a>
c00254aa:	83 ec 0c             	sub    esp,0xc
c00254ad:	68 60 6f 02 c0       	push   0xc0026f60
c00254b2:	e8 f0 35 ff ff       	call   c0018aa7 <Krnl::panic(char const*)>
c00254b7:	83 c4 10             	add    esp,0x10
c00254ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254be:	8b 00                	mov    eax,DWORD PTR [eax]
c00254c0:	85 c0                	test   eax,eax
c00254c2:	74 3a                	je     c00254fe <LinkedList<Device>::addElement(Device*)+0x5e>
c00254c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00254cb:	85 c0                	test   eax,eax
c00254cd:	74 2f                	je     c00254fe <LinkedList<Device>::addElement(Device*)+0x5e>
c00254cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254d3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00254d6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00254da:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00254e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254e4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00254e8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00254eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254ef:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00254f2:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00254fc:	eb 68                	jmp    c0025566 <LinkedList<Device>::addElement(Device*)+0xc6>
c00254fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025502:	8b 00                	mov    eax,DWORD PTR [eax]
c0025504:	85 c0                	test   eax,eax
c0025506:	75 4e                	jne    c0025556 <LinkedList<Device>::addElement(Device*)+0xb6>
c0025508:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002550c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002550f:	85 c0                	test   eax,eax
c0025511:	75 43                	jne    c0025556 <LinkedList<Device>::addElement(Device*)+0xb6>
c0025513:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025517:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002551b:	89 10                	mov    DWORD PTR [eax],edx
c002551d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025521:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025525:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0025528:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002552c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002552f:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0025539:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002553d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025540:	85 c0                	test   eax,eax
c0025542:	74 22                	je     c0025566 <LinkedList<Device>::addElement(Device*)+0xc6>
c0025544:	83 ec 0c             	sub    esp,0xc
c0025547:	68 82 6f 02 c0       	push   0xc0026f82
c002554c:	e8 56 35 ff ff       	call   c0018aa7 <Krnl::panic(char const*)>
c0025551:	83 c4 10             	add    esp,0x10
c0025554:	eb 10                	jmp    c0025566 <LinkedList<Device>::addElement(Device*)+0xc6>
c0025556:	83 ec 0c             	sub    esp,0xc
c0025559:	68 8c 6f 02 c0       	push   0xc0026f8c
c002555e:	e8 44 35 ff ff       	call   c0018aa7 <Krnl::panic(char const*)>
c0025563:	83 c4 10             	add    esp,0x10
c0025566:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002556a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002556d:	8d 50 01             	lea    edx,[eax+0x1]
c0025570:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025574:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0025577:	90                   	nop
c0025578:	83 c4 0c             	add    esp,0xc
c002557b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c002557c <LinkedList<Device>::LinkedList()>:
c002557c:	83 ec 0c             	sub    esp,0xc
c002557f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025583:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0025589:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002558d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025594:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025598:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002559f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255a3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00255a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255ad:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00255b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255b8:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00255bf:	83 ec 0c             	sub    esp,0xc
c00255c2:	68 46 6f 02 c0       	push   0xc0026f46
c00255c7:	e8 63 cc fe ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c00255cc:	83 c4 10             	add    esp,0x10
c00255cf:	90                   	nop
c00255d0:	83 c4 0c             	add    esp,0xc
c00255d3:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR0Ev:

c00255d4 <CPU::readCR0()>:
c00255d4:	83 ec 10             	sub    esp,0x10
c00255d7:	0f 20 c0             	mov    eax,cr0
c00255da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00255de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00255e2:	83 c4 10             	add    esp,0x10
c00255e5:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR0Em:

c00255e6 <CPU::writeCR0(unsigned long)>:
c00255e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00255ea:	0f 22 c0             	mov    cr0,eax
c00255ed:	90                   	nop
c00255ee:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR0Ev:

c00255ef <CPU::readDR0()>:
c00255ef:	83 ec 10             	sub    esp,0x10
c00255f2:	0f 21 c0             	mov    eax,db0
c00255f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00255f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00255fd:	83 c4 10             	add    esp,0x10
c0025600:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR1Ev:

c0025601 <CPU::readDR1()>:
c0025601:	83 ec 10             	sub    esp,0x10
c0025604:	0f 21 c8             	mov    eax,db1
c0025607:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002560b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002560f:	83 c4 10             	add    esp,0x10
c0025612:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR2Ev:

c0025613 <CPU::readDR2()>:
c0025613:	83 ec 10             	sub    esp,0x10
c0025616:	0f 21 d0             	mov    eax,db2
c0025619:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002561d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025621:	83 c4 10             	add    esp,0x10
c0025624:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR3Ev:

c0025625 <CPU::readDR3()>:
c0025625:	83 ec 10             	sub    esp,0x10
c0025628:	0f 21 d8             	mov    eax,db3
c002562b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002562f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025633:	83 c4 10             	add    esp,0x10
c0025636:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR6Ev:

c0025637 <CPU::readDR6()>:
c0025637:	83 ec 10             	sub    esp,0x10
c002563a:	0f 21 f0             	mov    eax,db6
c002563d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025641:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025645:	83 c4 10             	add    esp,0x10
c0025648:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR7Ev:

c0025649 <CPU::readDR7()>:
c0025649:	83 ec 10             	sub    esp,0x10
c002564c:	0f 21 f8             	mov    eax,db7
c002564f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025653:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025657:	83 c4 10             	add    esp,0x10
c002565a:	c3                   	ret    

Disassembly of section .text._ZN3CPU9getNumberEv:

c002565b <CPU::getNumber()>:
c002565b:	b8 00 00 00 00       	mov    eax,0x0
c0025660:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0025662 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0025662:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025666:	8b 00                	mov    eax,DWORD PTR [eax]
c0025668:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002566a <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002566a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002566e:	8b 00                	mov    eax,DWORD PTR [eax]
c0025670:	85 c0                	test   eax,eax
c0025672:	75 0e                	jne    c0025682 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0025674:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025678:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002567b:	85 c0                	test   eax,eax
c002567d:	75 03                	jne    c0025682 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002567f:	b0 01                	mov    al,0x1
c0025681:	c3                   	ret    
c0025682:	b0 00                	mov    al,0x0
c0025684:	90                   	nop
c0025685:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0025686 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0025686:	83 ec 0c             	sub    esp,0xc
c0025689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002568d:	8b 00                	mov    eax,DWORD PTR [eax]
c002568f:	85 c0                	test   eax,eax
c0025691:	75 15                	jne    c00256a8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c0025693:	83 ec 0c             	sub    esp,0xc
c0025696:	68 98 6f 02 c0       	push   0xc0026f98
c002569b:	e8 07 34 ff ff       	call   c0018aa7 <Krnl::panic(char const*)>
c00256a0:	83 c4 10             	add    esp,0x10
c00256a3:	e9 88 00 00 00       	jmp    c0025730 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c00256a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00256af:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00256b2:	85 c0                	test   eax,eax
c00256b4:	0f 95 c0             	setne  al
c00256b7:	84 c0                	test   al,al
c00256b9:	74 10                	je     c00256cb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c00256bb:	83 ec 0c             	sub    esp,0xc
c00256be:	68 e3 6f 02 c0       	push   0xc0026fe3
c00256c3:	e8 df 33 ff ff       	call   c0018aa7 <Krnl::panic(char const*)>
c00256c8:	83 c4 10             	add    esp,0x10
c00256cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00256d1:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00256d4:	85 c0                	test   eax,eax
c00256d6:	0f 94 c0             	sete   al
c00256d9:	84 c0                	test   al,al
c00256db:	74 33                	je     c0025710 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c00256dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256e1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00256e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256eb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00256f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256f6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00256f9:	83 f8 01             	cmp    eax,0x1
c00256fc:	74 21                	je     c002571f <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00256fe:	83 ec 0c             	sub    esp,0xc
c0025701:	68 bc 6f 02 c0       	push   0xc0026fbc
c0025706:	e8 9c 33 ff ff       	call   c0018aa7 <Krnl::panic(char const*)>
c002570b:	83 c4 10             	add    esp,0x10
c002570e:	eb 0f                	jmp    c002571f <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0025710:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025714:	8b 00                	mov    eax,DWORD PTR [eax]
c0025716:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0025719:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002571d:	89 10                	mov    DWORD PTR [eax],edx
c002571f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025723:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025726:	8d 50 ff             	lea    edx,[eax-0x1]
c0025729:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002572d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0025730:	83 c4 0c             	add    esp,0xc
c0025733:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0025734 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0025734:	83 ec 0c             	sub    esp,0xc
c0025737:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002573c:	75 10                	jne    c002574e <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c002573e:	83 ec 0c             	sub    esp,0xc
c0025741:	68 60 6f 02 c0       	push   0xc0026f60
c0025746:	e8 5c 33 ff ff       	call   c0018aa7 <Krnl::panic(char const*)>
c002574b:	83 c4 10             	add    esp,0x10
c002574e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025752:	8b 00                	mov    eax,DWORD PTR [eax]
c0025754:	85 c0                	test   eax,eax
c0025756:	74 34                	je     c002578c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0025758:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002575c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002575f:	85 c0                	test   eax,eax
c0025761:	74 29                	je     c002578c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0025763:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025767:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002576a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002576e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0025771:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025775:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025779:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002577c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025780:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025783:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002578a:	eb 65                	jmp    c00257f1 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002578c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025790:	8b 00                	mov    eax,DWORD PTR [eax]
c0025792:	85 c0                	test   eax,eax
c0025794:	75 4b                	jne    c00257e1 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0025796:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002579a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002579d:	85 c0                	test   eax,eax
c002579f:	75 40                	jne    c00257e1 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00257a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257a5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00257a9:	89 10                	mov    DWORD PTR [eax],edx
c00257ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257af:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00257b3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00257b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00257bd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00257c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257c8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00257cb:	85 c0                	test   eax,eax
c00257cd:	74 22                	je     c00257f1 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00257cf:	83 ec 0c             	sub    esp,0xc
c00257d2:	68 82 6f 02 c0       	push   0xc0026f82
c00257d7:	e8 cb 32 ff ff       	call   c0018aa7 <Krnl::panic(char const*)>
c00257dc:	83 c4 10             	add    esp,0x10
c00257df:	eb 10                	jmp    c00257f1 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00257e1:	83 ec 0c             	sub    esp,0xc
c00257e4:	68 8c 6f 02 c0       	push   0xc0026f8c
c00257e9:	e8 b9 32 ff ff       	call   c0018aa7 <Krnl::panic(char const*)>
c00257ee:	83 c4 10             	add    esp,0x10
c00257f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257f5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00257f8:	8d 50 01             	lea    edx,[eax+0x1]
c00257fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257ff:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0025802:	90                   	nop
c0025803:	83 c4 0c             	add    esp,0xc
c0025806:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0025808 <ACPI::~ACPI()>:
c0025808:	83 ec 0c             	sub    esp,0xc
c002580b:	ba 30 7e 02 c0       	mov    edx,0xc0027e30
c0025810:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025814:	89 10                	mov    DWORD PTR [eax],edx
c0025816:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002581a:	83 ec 0c             	sub    esp,0xc
c002581d:	50                   	push   eax
c002581e:	e8 b9 dc fe ff       	call   c00134dc <Device::~Device()>
c0025823:	83 c4 10             	add    esp,0x10
c0025826:	90                   	nop
c0025827:	83 c4 0c             	add    esp,0xc
c002582a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c002582c <ACPI::~ACPI()>:
c002582c:	83 ec 0c             	sub    esp,0xc
c002582f:	83 ec 0c             	sub    esp,0xc
c0025832:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025836:	e8 cd ff ff ff       	call   c0025808 <ACPI::~ACPI()>
c002583b:	83 c4 10             	add    esp,0x10
c002583e:	83 ec 08             	sub    esp,0x8
c0025841:	68 68 22 00 00       	push   0x2268
c0025846:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002584a:	e8 00 c9 fe ff       	call   c001214f <operator delete(void*, unsigned long)>
c002584f:	83 c4 10             	add    esp,0x10
c0025852:	83 c4 0c             	add    esp,0xc
c0025855:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0025856 <CPU::~CPU()>:
c0025856:	83 ec 0c             	sub    esp,0xc
c0025859:	ba 20 82 02 c0       	mov    edx,0xc0028220
c002585e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025862:	89 10                	mov    DWORD PTR [eax],edx
c0025864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025868:	83 ec 0c             	sub    esp,0xc
c002586b:	50                   	push   eax
c002586c:	e8 6b dc fe ff       	call   c00134dc <Device::~Device()>
c0025871:	83 c4 10             	add    esp,0x10
c0025874:	90                   	nop
c0025875:	83 c4 0c             	add    esp,0xc
c0025878:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c002587a <CPU::~CPU()>:
c002587a:	83 ec 0c             	sub    esp,0xc
c002587d:	83 ec 0c             	sub    esp,0xc
c0025880:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025884:	e8 cd ff ff ff       	call   c0025856 <CPU::~CPU()>
c0025889:	83 c4 10             	add    esp,0x10
c002588c:	83 ec 08             	sub    esp,0x8
c002588f:	68 98 11 00 00       	push   0x1198
c0025894:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025898:	e8 b2 c8 fe ff       	call   c001214f <operator delete(void*, unsigned long)>
c002589d:	83 c4 10             	add    esp,0x10
c00258a0:	83 c4 0c             	add    esp,0xc
c00258a3:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR4Ev:

c00258a4 <CPU::readCR4()>:
c00258a4:	83 ec 10             	sub    esp,0x10
c00258a7:	0f 20 e0             	mov    eax,cr4
c00258aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00258ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00258b2:	83 c4 10             	add    esp,0x10
c00258b5:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeDR7Em:

c00258b6 <CPU::writeDR7(unsigned long)>:
c00258b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00258ba:	0f 23 f8             	mov    db7,eax
c00258bd:	90                   	nop
c00258be:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR4Em:

c00258bf <CPU::writeCR4(unsigned long)>:
c00258bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00258c3:	0f 22 e0             	mov    cr4,eax
c00258c6:	90                   	nop
c00258c7:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR2Ev:

c00258c8 <CPU::readCR2()>:
c00258c8:	83 ec 10             	sub    esp,0x10
c00258cb:	0f 20 d0             	mov    eax,cr2
c00258ce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00258d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00258d6:	83 c4 10             	add    esp,0x10
c00258d9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c00258da <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c00258da:	90                   	nop
c00258db:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c00258dc <ThreadControlBlock::ThreadControlBlock()>:
c00258dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00258e0:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00258e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00258eb:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00258f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00258f6:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c00258fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025901:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0025908:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002590c:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0025910:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025914:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0025918:	90                   	nop
c0025919:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002591a <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002591a:	83 ec 0c             	sub    esp,0xc
c002591d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025921:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0025927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002592b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025936:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002593d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025941:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0025947:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002594b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025956:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002595d:	83 ec 0c             	sub    esp,0xc
c0025960:	68 46 6f 02 c0       	push   0xc0026f46
c0025965:	e8 c5 c8 fe ff       	call   c001222f <Dbg::kprintf(char const*, ...)>
c002596a:	83 c4 10             	add    esp,0x10
c002596d:	90                   	nop
c002596e:	83 c4 0c             	add    esp,0xc
c0025971:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0025972 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0025972:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025976:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0025979:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c002597a <Vm::_FPUState::_FPUState()>:
c002597a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002597e:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0025985:	90                   	nop
c0025986:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0025988 <PCI::~PCI()>:
c0025988:	83 ec 0c             	sub    esp,0xc
c002598b:	ba 28 8f 02 c0       	mov    edx,0xc0028f28
c0025990:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025994:	89 10                	mov    DWORD PTR [eax],edx
c0025996:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002599a:	83 ec 0c             	sub    esp,0xc
c002599d:	50                   	push   eax
c002599e:	e8 49 d5 fe ff       	call   c0012eec <Bus::~Bus()>
c00259a3:	83 c4 10             	add    esp,0x10
c00259a6:	90                   	nop
c00259a7:	83 c4 0c             	add    esp,0xc
c00259aa:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00259ac <PCI::~PCI()>:
c00259ac:	83 ec 0c             	sub    esp,0xc
c00259af:	83 ec 0c             	sub    esp,0xc
c00259b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00259b6:	e8 cd ff ff ff       	call   c0025988 <PCI::~PCI()>
c00259bb:	83 c4 10             	add    esp,0x10
c00259be:	83 ec 08             	sub    esp,0x8
c00259c1:	68 58 01 00 00       	push   0x158
c00259c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00259ca:	e8 80 c7 fe ff       	call   c001214f <operator delete(void*, unsigned long)>
c00259cf:	83 c4 10             	add    esp,0x10
c00259d2:	83 c4 0c             	add    esp,0xc
c00259d5:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00259d6 <IDE::~IDE()>:
c00259d6:	83 ec 0c             	sub    esp,0xc
c00259d9:	ba 8c 91 02 c0       	mov    edx,0xc002918c
c00259de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259e2:	89 10                	mov    DWORD PTR [eax],edx
c00259e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259e8:	83 ec 0c             	sub    esp,0xc
c00259eb:	50                   	push   eax
c00259ec:	e8 01 e0 fe ff       	call   c00139f2 <HardDiskController::~HardDiskController()>
c00259f1:	83 c4 10             	add    esp,0x10
c00259f4:	90                   	nop
c00259f5:	83 c4 0c             	add    esp,0xc
c00259f8:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c00259fa <IDE::~IDE()>:
c00259fa:	83 ec 0c             	sub    esp,0xc
c00259fd:	83 ec 0c             	sub    esp,0xc
c0025a00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025a04:	e8 cd ff ff ff       	call   c00259d6 <IDE::~IDE()>
c0025a09:	83 c4 10             	add    esp,0x10
c0025a0c:	83 ec 08             	sub    esp,0x8
c0025a0f:	68 70 02 00 00       	push   0x270
c0025a14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025a18:	e8 32 c7 fe ff       	call   c001214f <operator delete(void*, unsigned long)>
c0025a1d:	83 c4 10             	add    esp,0x10
c0025a20:	83 c4 0c             	add    esp,0xc
c0025a23:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0025a24 <ATA::~ATA()>:
c0025a24:	83 ec 0c             	sub    esp,0xc
c0025a27:	ba dc 91 02 c0       	mov    edx,0xc00291dc
c0025a2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a30:	89 10                	mov    DWORD PTR [eax],edx
c0025a32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a36:	83 ec 0c             	sub    esp,0xc
c0025a39:	50                   	push   eax
c0025a3a:	e8 91 e0 fe ff       	call   c0013ad0 <PhysicalDisk::~PhysicalDisk()>
c0025a3f:	83 c4 10             	add    esp,0x10
c0025a42:	90                   	nop
c0025a43:	83 c4 0c             	add    esp,0xc
c0025a46:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0025a48 <ATA::~ATA()>:
c0025a48:	83 ec 0c             	sub    esp,0xc
c0025a4b:	83 ec 0c             	sub    esp,0xc
c0025a4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025a52:	e8 cd ff ff ff       	call   c0025a24 <ATA::~ATA()>
c0025a57:	83 c4 10             	add    esp,0x10
c0025a5a:	83 ec 08             	sub    esp,0x8
c0025a5d:	68 7c 01 00 00       	push   0x17c
c0025a62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025a66:	e8 e4 c6 fe ff       	call   c001214f <operator delete(void*, unsigned long)>
c0025a6b:	83 c4 10             	add    esp,0x10
c0025a6e:	83 c4 0c             	add    esp,0xc
c0025a71:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0025a72 <ATAPI::~ATAPI()>:
c0025a72:	83 ec 0c             	sub    esp,0xc
c0025a75:	ba 48 92 02 c0       	mov    edx,0xc0029248
c0025a7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a7e:	89 10                	mov    DWORD PTR [eax],edx
c0025a80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a84:	83 ec 0c             	sub    esp,0xc
c0025a87:	50                   	push   eax
c0025a88:	e8 43 e0 fe ff       	call   c0013ad0 <PhysicalDisk::~PhysicalDisk()>
c0025a8d:	83 c4 10             	add    esp,0x10
c0025a90:	90                   	nop
c0025a91:	83 c4 0c             	add    esp,0xc
c0025a94:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0025a96 <ATAPI::~ATAPI()>:
c0025a96:	83 ec 0c             	sub    esp,0xc
c0025a99:	83 ec 0c             	sub    esp,0xc
c0025a9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025aa0:	e8 cd ff ff ff       	call   c0025a72 <ATAPI::~ATAPI()>
c0025aa5:	83 c4 10             	add    esp,0x10
c0025aa8:	83 ec 08             	sub    esp,0x8
c0025aab:	68 80 01 00 00       	push   0x180
c0025ab0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025ab4:	e8 96 c6 fe ff       	call   c001214f <operator delete(void*, unsigned long)>
c0025ab9:	83 c4 10             	add    esp,0x10
c0025abc:	83 c4 0c             	add    esp,0xc
c0025abf:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0025ac0 <AVX::~AVX()>:
c0025ac0:	83 ec 0c             	sub    esp,0xc
c0025ac3:	ba 84 92 02 c0       	mov    edx,0xc0029284
c0025ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025acc:	89 10                	mov    DWORD PTR [eax],edx
c0025ace:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ad2:	83 ec 0c             	sub    esp,0xc
c0025ad5:	50                   	push   eax
c0025ad6:	e8 79 e0 fe ff       	call   c0013b54 <FPU::~FPU()>
c0025adb:	83 c4 10             	add    esp,0x10
c0025ade:	90                   	nop
c0025adf:	83 c4 0c             	add    esp,0xc
c0025ae2:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0025ae4 <AVX::~AVX()>:
c0025ae4:	83 ec 0c             	sub    esp,0xc
c0025ae7:	83 ec 0c             	sub    esp,0xc
c0025aea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025aee:	e8 cd ff ff ff       	call   c0025ac0 <AVX::~AVX()>
c0025af3:	83 c4 10             	add    esp,0x10
c0025af6:	83 ec 08             	sub    esp,0x8
c0025af9:	68 58 01 00 00       	push   0x158
c0025afe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025b02:	e8 48 c6 fe ff       	call   c001214f <operator delete(void*, unsigned long)>
c0025b07:	83 c4 10             	add    esp,0x10
c0025b0a:	83 c4 0c             	add    esp,0xc
c0025b0d:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0025b0e <MMX::~MMX()>:
c0025b0e:	83 ec 0c             	sub    esp,0xc
c0025b11:	ba c4 92 02 c0       	mov    edx,0xc00292c4
c0025b16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b1a:	89 10                	mov    DWORD PTR [eax],edx
c0025b1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b20:	83 ec 0c             	sub    esp,0xc
c0025b23:	50                   	push   eax
c0025b24:	e8 2b e0 fe ff       	call   c0013b54 <FPU::~FPU()>
c0025b29:	83 c4 10             	add    esp,0x10
c0025b2c:	90                   	nop
c0025b2d:	83 c4 0c             	add    esp,0xc
c0025b30:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0025b32 <MMX::~MMX()>:
c0025b32:	83 ec 0c             	sub    esp,0xc
c0025b35:	83 ec 0c             	sub    esp,0xc
c0025b38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025b3c:	e8 cd ff ff ff       	call   c0025b0e <MMX::~MMX()>
c0025b41:	83 c4 10             	add    esp,0x10
c0025b44:	83 ec 08             	sub    esp,0x8
c0025b47:	68 58 01 00 00       	push   0x158
c0025b4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025b50:	e8 fa c5 fe ff       	call   c001214f <operator delete(void*, unsigned long)>
c0025b55:	83 c4 10             	add    esp,0x10
c0025b58:	83 c4 0c             	add    esp,0xc
c0025b5b:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0025b5c <SSE::~SSE()>:
c0025b5c:	83 ec 0c             	sub    esp,0xc
c0025b5f:	ba 04 93 02 c0       	mov    edx,0xc0029304
c0025b64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b68:	89 10                	mov    DWORD PTR [eax],edx
c0025b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b6e:	83 ec 0c             	sub    esp,0xc
c0025b71:	50                   	push   eax
c0025b72:	e8 dd df fe ff       	call   c0013b54 <FPU::~FPU()>
c0025b77:	83 c4 10             	add    esp,0x10
c0025b7a:	90                   	nop
c0025b7b:	83 c4 0c             	add    esp,0xc
c0025b7e:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0025b80 <SSE::~SSE()>:
c0025b80:	83 ec 0c             	sub    esp,0xc
c0025b83:	83 ec 0c             	sub    esp,0xc
c0025b86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025b8a:	e8 cd ff ff ff       	call   c0025b5c <SSE::~SSE()>
c0025b8f:	83 c4 10             	add    esp,0x10
c0025b92:	83 ec 08             	sub    esp,0x8
c0025b95:	68 58 01 00 00       	push   0x158
c0025b9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025b9e:	e8 ac c5 fe ff       	call   c001214f <operator delete(void*, unsigned long)>
c0025ba3:	83 c4 10             	add    esp,0x10
c0025ba6:	83 c4 0c             	add    esp,0xc
c0025ba9:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0025baa <x87::~x87()>:
c0025baa:	83 ec 0c             	sub    esp,0xc
c0025bad:	ba 44 93 02 c0       	mov    edx,0xc0029344
c0025bb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bb6:	89 10                	mov    DWORD PTR [eax],edx
c0025bb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bbc:	83 ec 0c             	sub    esp,0xc
c0025bbf:	50                   	push   eax
c0025bc0:	e8 8f df fe ff       	call   c0013b54 <FPU::~FPU()>
c0025bc5:	83 c4 10             	add    esp,0x10
c0025bc8:	90                   	nop
c0025bc9:	83 c4 0c             	add    esp,0xc
c0025bcc:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0025bce <x87::~x87()>:
c0025bce:	83 ec 0c             	sub    esp,0xc
c0025bd1:	83 ec 0c             	sub    esp,0xc
c0025bd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025bd8:	e8 cd ff ff ff       	call   c0025baa <x87::~x87()>
c0025bdd:	83 c4 10             	add    esp,0x10
c0025be0:	83 ec 08             	sub    esp,0x8
c0025be3:	68 58 01 00 00       	push   0x158
c0025be8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025bec:	e8 5e c5 fe ff       	call   c001214f <operator delete(void*, unsigned long)>
c0025bf1:	83 c4 10             	add    esp,0x10
c0025bf4:	83 c4 0c             	add    esp,0xc
c0025bf7:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0025bf8 <IOAPIC::~IOAPIC()>:
c0025bf8:	83 ec 0c             	sub    esp,0xc
c0025bfb:	ba 9c 94 02 c0       	mov    edx,0xc002949c
c0025c00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c04:	89 10                	mov    DWORD PTR [eax],edx
c0025c06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c0a:	83 ec 0c             	sub    esp,0xc
c0025c0d:	50                   	push   eax
c0025c0e:	e8 c9 d8 fe ff       	call   c00134dc <Device::~Device()>
c0025c13:	83 c4 10             	add    esp,0x10
c0025c16:	90                   	nop
c0025c17:	83 c4 0c             	add    esp,0xc
c0025c1a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0025c1c <IOAPIC::~IOAPIC()>:
c0025c1c:	83 ec 0c             	sub    esp,0xc
c0025c1f:	83 ec 0c             	sub    esp,0xc
c0025c22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025c26:	e8 cd ff ff ff       	call   c0025bf8 <IOAPIC::~IOAPIC()>
c0025c2b:	83 c4 10             	add    esp,0x10
c0025c2e:	83 ec 08             	sub    esp,0x8
c0025c31:	68 68 01 00 00       	push   0x168
c0025c36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025c3a:	e8 10 c5 fe ff       	call   c001214f <operator delete(void*, unsigned long)>
c0025c3f:	83 c4 10             	add    esp,0x10
c0025c42:	83 c4 0c             	add    esp,0xc
c0025c45:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0025c46 <APIC::~APIC()>:
c0025c46:	83 ec 0c             	sub    esp,0xc
c0025c49:	ba 54 94 02 c0       	mov    edx,0xc0029454
c0025c4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c52:	89 10                	mov    DWORD PTR [eax],edx
c0025c54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c58:	83 ec 0c             	sub    esp,0xc
c0025c5b:	50                   	push   eax
c0025c5c:	e8 c7 e3 fe ff       	call   c0014028 <InterruptController::~InterruptController()>
c0025c61:	83 c4 10             	add    esp,0x10
c0025c64:	90                   	nop
c0025c65:	83 c4 0c             	add    esp,0xc
c0025c68:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0025c6a <APIC::~APIC()>:
c0025c6a:	83 ec 0c             	sub    esp,0xc
c0025c6d:	83 ec 0c             	sub    esp,0xc
c0025c70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025c74:	e8 cd ff ff ff       	call   c0025c46 <APIC::~APIC()>
c0025c79:	83 c4 10             	add    esp,0x10
c0025c7c:	83 ec 08             	sub    esp,0x8
c0025c7f:	68 58 21 00 00       	push   0x2158
c0025c84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025c88:	e8 c2 c4 fe ff       	call   c001214f <operator delete(void*, unsigned long)>
c0025c8d:	83 c4 10             	add    esp,0x10
c0025c90:	83 c4 0c             	add    esp,0xc
c0025c93:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0025c94 <PIC::~PIC()>:
c0025c94:	83 ec 0c             	sub    esp,0xc
c0025c97:	ba ec 94 02 c0       	mov    edx,0xc00294ec
c0025c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ca0:	89 10                	mov    DWORD PTR [eax],edx
c0025ca2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ca6:	83 ec 0c             	sub    esp,0xc
c0025ca9:	50                   	push   eax
c0025caa:	e8 79 e3 fe ff       	call   c0014028 <InterruptController::~InterruptController()>
c0025caf:	83 c4 10             	add    esp,0x10
c0025cb2:	90                   	nop
c0025cb3:	83 c4 0c             	add    esp,0xc
c0025cb6:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0025cb8 <PIC::~PIC()>:
c0025cb8:	83 ec 0c             	sub    esp,0xc
c0025cbb:	83 ec 0c             	sub    esp,0xc
c0025cbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025cc2:	e8 cd ff ff ff       	call   c0025c94 <PIC::~PIC()>
c0025cc7:	83 c4 10             	add    esp,0x10
c0025cca:	83 ec 08             	sub    esp,0x8
c0025ccd:	68 58 21 00 00       	push   0x2158
c0025cd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025cd6:	e8 74 c4 fe ff       	call   c001214f <operator delete(void*, unsigned long)>
c0025cdb:	83 c4 10             	add    esp,0x10
c0025cde:	83 c4 0c             	add    esp,0xc
c0025ce1:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0025ce2 <APICTimer::~APICTimer()>:
c0025ce2:	83 ec 0c             	sub    esp,0xc
c0025ce5:	ba 40 95 02 c0       	mov    edx,0xc0029540
c0025cea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cee:	89 10                	mov    DWORD PTR [eax],edx
c0025cf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cf4:	83 ec 0c             	sub    esp,0xc
c0025cf7:	50                   	push   eax
c0025cf8:	e8 29 00 ff ff       	call   c0015d26 <Timer::~Timer()>
c0025cfd:	83 c4 10             	add    esp,0x10
c0025d00:	90                   	nop
c0025d01:	83 c4 0c             	add    esp,0xc
c0025d04:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0025d06 <APICTimer::~APICTimer()>:
c0025d06:	83 ec 0c             	sub    esp,0xc
c0025d09:	83 ec 0c             	sub    esp,0xc
c0025d0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025d10:	e8 cd ff ff ff       	call   c0025ce2 <APICTimer::~APICTimer()>
c0025d15:	83 c4 10             	add    esp,0x10
c0025d18:	83 ec 08             	sub    esp,0x8
c0025d1b:	68 60 01 00 00       	push   0x160
c0025d20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025d24:	e8 26 c4 fe ff       	call   c001214f <operator delete(void*, unsigned long)>
c0025d29:	83 c4 10             	add    esp,0x10
c0025d2c:	83 c4 0c             	add    esp,0xc
c0025d2f:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0025d30 <PIT::~PIT()>:
c0025d30:	83 ec 0c             	sub    esp,0xc
c0025d33:	ba 90 95 02 c0       	mov    edx,0xc0029590
c0025d38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d3c:	89 10                	mov    DWORD PTR [eax],edx
c0025d3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d42:	83 ec 0c             	sub    esp,0xc
c0025d45:	50                   	push   eax
c0025d46:	e8 db ff fe ff       	call   c0015d26 <Timer::~Timer()>
c0025d4b:	83 c4 10             	add    esp,0x10
c0025d4e:	90                   	nop
c0025d4f:	83 c4 0c             	add    esp,0xc
c0025d52:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0025d54 <PIT::~PIT()>:
c0025d54:	83 ec 0c             	sub    esp,0xc
c0025d57:	83 ec 0c             	sub    esp,0xc
c0025d5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025d5e:	e8 cd ff ff ff       	call   c0025d30 <PIT::~PIT()>
c0025d63:	83 c4 10             	add    esp,0x10
c0025d66:	83 ec 08             	sub    esp,0x8
c0025d69:	68 5c 01 00 00       	push   0x15c
c0025d6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025d72:	e8 d8 c3 fe ff       	call   c001214f <operator delete(void*, unsigned long)>
c0025d77:	83 c4 10             	add    esp,0x10
c0025d7a:	83 c4 0c             	add    esp,0xc
c0025d7d:	c3                   	ret    
