
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 62 f8 00 00       	call   c000f882 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 13 70 02 00       	call   c0027038 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 94 7b 02 c0       	mov    ebx,0xc0027b94
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb a0 7b 02 c0    	cmp    ebx,0xc0027ba0
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 d8 be 02 c0       	mov    eax,0xc002bed8
c0000049:	3d d8 be 02 c0       	cmp    eax,0xc002bed8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 d8 be 02 c0       	push   0xc002bed8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 d8 be 02 c0       	mov    eax,0xc002bed8
c0000075:	2d d8 be 02 c0       	sub    eax,0xc002bed8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 d8 be 02 c0       	push   0xc002bed8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 08 c5 02 c0 00 	cmp    BYTE PTR ds:0xc002c508,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb a8 7b 02 c0       	mov    ebx,0xc0027ba8
c00000bb:	81 eb a4 7b 02 c0    	sub    ebx,0xc0027ba4
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be a4 7b 02 c0       	mov    esi,0xc0027ba4
c00000ca:	a1 0c c5 02 c0       	mov    eax,ds:0xc002c50c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 0c c5 02 c0       	mov    ds:0xc002c50c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 0c c5 02 c0       	mov    eax,ds:0xc002c50c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 d8 be 02 c0       	push   0xc002bed8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 08 c5 02 c0 01 	mov    BYTE PTR ds:0xc002c508,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 10 c5 02 c0       	push   0xc002c510
c000012c:	68 d8 be 02 c0       	push   0xc002bed8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <prepareTramp>:
c0000150:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000157:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c000015e:	50                   	push   eax
c000015f:	0f 20 d8             	mov    eax,cr3
c0000162:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000167:	58                   	pop    eax
c0000168:	c3                   	ret    

c0000169 <voodooXADD>:
c0000169:	55                   	push   ebp
c000016a:	89 e5                	mov    ebp,esp
c000016c:	60                   	pusha  
c000016d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000170:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0000173:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0000176:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c0000179:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000017c:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c000017f:	0f 02 ff             	lar    edi,di
c0000182:	c1 ef 0d             	shr    edi,0xd
c0000185:	66 81 e7 03 00       	and    di,0x3
c000018a:	75 09                	jne    c0000195 <voodooXADD.usermode>
c000018c:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c000018f:	81 c4 14 00 00 00    	add    esp,0x14

c0000195 <voodooXADD.usermode>:
c0000195:	89 35 30 02 00 c0    	mov    DWORD PTR ds:0xc0000230,esi
c000019b:	89 25 2c 02 00 c0    	mov    DWORD PTR ds:0xc000022c,esp
c00001a1:	60                   	pusha  
c00001a2:	b0 90                	mov    al,0x90
c00001a4:	b9 20 00 00 00       	mov    ecx,0x20
c00001a9:	bf 03 02 00 c0       	mov    edi,0xc0000203
c00001ae:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001b0:	61                   	popa   
c00001b1:	60                   	pusha  
c00001b2:	89 d6                	mov    esi,edx
c00001b4:	bf 03 02 00 c0       	mov    edi,0xc0000203
c00001b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00001bb:	61                   	popa   
c00001bc:	60                   	pusha  
c00001bd:	89 d6                	mov    esi,edx
c00001bf:	bf 13 02 00 c0       	mov    edi,0xc0000213
c00001c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00001c6:	61                   	popa   
c00001c7:	b1 90                	mov    cl,0x90
c00001c9:	85 db                	test   ebx,ebx
c00001cb:	74 06                	je     c00001d3 <voodooXADD.skipChange>
c00001cd:	8a 8b 02 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdfe]

c00001d3 <voodooXADD.skipChange>:
c00001d3:	88 8b 03 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdfd],cl
c00001d9:	80 ab 04 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdfc],0x3a
c00001e0:	88 8b 13 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffded],cl
c00001e6:	80 ab 14 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffdec],0xbe
c00001ed:	89 c4                	mov    esp,eax
c00001ef:	81 c4 10 00 00 00    	add    esp,0x10
c00001f5:	5f                   	pop    edi
c00001f6:	5e                   	pop    esi
c00001f7:	5d                   	pop    ebp
c00001f8:	5b                   	pop    ebx
c00001f9:	5b                   	pop    ebx
c00001fa:	5a                   	pop    edx
c00001fb:	59                   	pop    ecx
c00001fc:	58                   	pop    eax
c00001fd:	8b 25 30 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000230

c0000203 <voodooXADD.helper>:
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	90                   	nop
c0000217:	90                   	nop
c0000218:	90                   	nop
c0000219:	90                   	nop
c000021a:	90                   	nop
c000021b:	90                   	nop
c000021c:	90                   	nop
c000021d:	90                   	nop
c000021e:	90                   	nop
c000021f:	90                   	nop
c0000220:	90                   	nop
c0000221:	90                   	nop
c0000222:	90                   	nop
c0000223:	8b 25 2c 02 00 c0    	mov    esp,DWORD PTR ds:0xc000022c
c0000229:	61                   	popa   
c000022a:	c9                   	leave  
c000022b:	c3                   	ret    

c000022c <voodooXADD.oldStack>:
c000022c:	00 00                	add    BYTE PTR [eax],al
	...

c0000230 <voodooXADD.newStack>:
c0000230:	00 00                	add    BYTE PTR [eax],al
	...

c0000234 <doTPAUSE>:
c0000234:	fb                   	sti    
c0000235:	31 c0                	xor    eax,eax
c0000237:	31 d2                	xor    edx,edx
c0000239:	66 0f ae f0          	tpause eax
c000023d:	c3                   	ret    

c000023e <hasLegacyFPU>:
c000023e:	0f 20 c2             	mov    edx,cr0
c0000241:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000247:	0f 22 c2             	mov    cr0,edx
c000024a:	db e3                	fninit 
c000024c:	dd 3d 61 02 00 c0    	fnstsw WORD PTR ds:0xc0000261
c0000252:	31 c0                	xor    eax,eax
c0000254:	66 81 3d 61 02 00 c0 00 00 	cmp    WORD PTR ds:0xc0000261,0x0
c000025d:	75 01                	jne    c0000260 <hasLegacyFPU.nofpu>

c000025f <hasLegacyFPU.hasfpu>:
c000025f:	40                   	inc    eax

c0000260 <hasLegacyFPU.nofpu>:
c0000260:	c3                   	ret    

c0000261 <testword>:
c0000261:	aa                   	stos   BYTE PTR es:[edi],al
c0000262:	55                   	push   ebp

c0000263 <is486>:
c0000263:	0f 09                	wbinvd 
c0000265:	31 c0                	xor    eax,eax
c0000267:	40                   	inc    eax
c0000268:	c3                   	ret    
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	90                   	nop
c000026f:	90                   	nop
c0000270:	90                   	nop
c0000271:	90                   	nop
c0000272:	90                   	nop
c0000273:	90                   	nop
c0000274:	90                   	nop
c0000275:	90                   	nop
c0000276:	90                   	nop
c0000277:	90                   	nop
c0000278:	90                   	nop
c0000279:	90                   	nop
c000027a:	90                   	nop
c000027b:	90                   	nop
c000027c:	90                   	nop
c000027d:	90                   	nop
c000027e:	90                   	nop
c000027f:	90                   	nop
c0000280:	90                   	nop
c0000281:	90                   	nop
c0000282:	90                   	nop
c0000283:	90                   	nop
c0000284:	90                   	nop
c0000285:	90                   	nop
c0000286:	90                   	nop
c0000287:	90                   	nop
c0000288:	90                   	nop
c0000289:	90                   	nop
c000028a:	90                   	nop
c000028b:	90                   	nop
c000028c:	90                   	nop
c000028d:	90                   	nop
c000028e:	90                   	nop
c000028f:	90                   	nop
c0000290:	90                   	nop
c0000291:	90                   	nop
c0000292:	90                   	nop
c0000293:	90                   	nop
c0000294:	90                   	nop
c0000295:	90                   	nop
c0000296:	31 c0                	xor    eax,eax
c0000298:	c3                   	ret    

c0000299 <detectCPUID>:
c0000299:	9c                   	pushf  
c000029a:	9c                   	pushf  
c000029b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002a2:	9d                   	popf   
c00002a3:	9c                   	pushf  
c00002a4:	58                   	pop    eax
c00002a5:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002a8:	9d                   	popf   
c00002a9:	25 00 00 20 00       	and    eax,0x200000
c00002ae:	c3                   	ret    

c00002af <goToVM86>:
c00002af:	55                   	push   ebp
c00002b0:	89 e5                	mov    ebp,esp
c00002b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00002b5:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00002b8:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00002bb:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00002be:	25 ff ff 00 00       	and    eax,0xffff
c00002c3:	81 e3 ff ff 00 00    	and    ebx,0xffff
c00002c9:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00002cf:	81 e2 ff ff 00 00    	and    edx,0xffff
c00002d5:	52                   	push   edx
c00002d6:	51                   	push   ecx
c00002d7:	68 02 02 02 00       	push   0x20202
c00002dc:	53                   	push   ebx
c00002dd:	50                   	push   eax
c00002de:	cf                   	iret   

c00002df <goToUsermode>:
c00002df:	55                   	push   ebp
c00002e0:	89 e5                	mov    ebp,esp
c00002e2:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00002e5:	66 b8 23 00          	mov    ax,0x23
c00002e9:	66 8e d8             	mov    ds,ax
c00002ec:	66 8e c0             	mov    es,ax
c00002ef:	66 8e e0             	mov    fs,ax
c00002f2:	66 8e e8             	mov    gs,ax
c00002f5:	89 e0                	mov    eax,esp
c00002f7:	68 23 00 00 00       	push   0x23
c00002fc:	50                   	push   eax
c00002fd:	68 02 02 00 00       	push   0x202
c0000302:	68 1b 00 00 00       	push   0x1b
c0000307:	53                   	push   ebx
c0000308:	cf                   	iret   

c0000309 <switchToThreadASMFirstTime>:
c0000309:	9c                   	pushf  
c000030a:	fa                   	cli    
c000030b:	50                   	push   eax
c000030c:	53                   	push   ebx
c000030d:	51                   	push   ecx
c000030e:	52                   	push   edx
c000030f:	56                   	push   esi
c0000310:	57                   	push   edi
c0000311:	55                   	push   ebp
c0000312:	e9 11 00 00 00       	jmp    c0000328 <commonThreadSwitch>

c0000317 <switchToThreadASM>:
c0000317:	9c                   	pushf  
c0000318:	50                   	push   eax
c0000319:	53                   	push   ebx
c000031a:	51                   	push   ecx
c000031b:	52                   	push   edx
c000031c:	56                   	push   esi
c000031d:	57                   	push   edi
c000031e:	55                   	push   ebp
c000031f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000325:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000328 <commonThreadSwitch>:
c0000328:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000032c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000332:	8b 06                	mov    eax,DWORD PTR [esi]
c0000334:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000337:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000033a:	0f 20 d9             	mov    ecx,cr3
c000033d:	39 c8                	cmp    eax,ecx
c000033f:	74 03                	je     c0000344 <commonThreadSwitch.doneVAS>
c0000341:	0f 22 d8             	mov    cr3,eax

c0000344 <commonThreadSwitch.doneVAS>:
c0000344:	85 d2                	test   edx,edx
c0000346:	75 11                	jne    c0000359 <commonThreadSwitch.firstTime>
c0000348:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000034b:	e8 8e c5 01 00       	call   c001c8de <changeTSS>
c0000350:	5d                   	pop    ebp
c0000351:	5f                   	pop    edi
c0000352:	5e                   	pop    esi
c0000353:	5a                   	pop    edx
c0000354:	59                   	pop    ecx
c0000355:	5b                   	pop    ebx
c0000356:	58                   	pop    eax
c0000357:	9d                   	popf   
c0000358:	c3                   	ret    

c0000359 <commonThreadSwitch.firstTime>:
c0000359:	fa                   	cli    
c000035a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000035d:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c0000362:	60                   	pusha  
c0000363:	e8 e5 21 01 00       	call   c001254d <mapVASFirstTime>
c0000368:	61                   	popa   
c0000369:	89 c4                	mov    esp,eax
c000036b:	56                   	push   esi
c000036c:	52                   	push   edx
c000036d:	e8 6c c5 01 00       	call   c001c8de <changeTSS>
c0000372:	5a                   	pop    edx
c0000373:	5e                   	pop    esi
c0000374:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c000037b:	5d                   	pop    ebp
c000037c:	5f                   	pop    edi
c000037d:	5e                   	pop    esi
c000037e:	59                   	pop    ecx
c000037f:	59                   	pop    ecx
c0000380:	5b                   	pop    ebx
c0000381:	58                   	pop    eax
c0000382:	81 c4 04 00 00 00    	add    esp,0x4
c0000388:	6a 02                	push   0x2
c000038a:	9d                   	popf   
c000038b:	52                   	push   edx
c000038c:	e8 ba c9 01 00       	call   c001cd4b <taskStartupFunction>
c0000391:	5a                   	pop    edx
c0000392:	50                   	push   eax
c0000393:	ff d2                	call   edx
c0000395:	e8 68 cf 01 00       	call   c001d302 <taskReturned>
c000039a:	e9 fb ff ff ff       	jmp    c000039a <commonThreadSwitch.firstTime+0x41>

c000039f <asmQuickAcquireLock>:
c000039f:	55                   	push   ebp
c00003a0:	89 e5                	mov    ebp,esp
c00003a2:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003a5 <asmQuickAcquireLock.retry>:
c00003a5:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003aa:	72 02                	jb     c00003ae <asmQuickAcquireLock.spin_with_pause>
c00003ac:	fa                   	cli    
c00003ad:	c3                   	ret    

c00003ae <asmQuickAcquireLock.spin_with_pause>:
c00003ae:	f3 90                	pause  
c00003b0:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003b6:	75 f6                	jne    c00003ae <asmQuickAcquireLock.spin_with_pause>
c00003b8:	e9 e8 ff ff ff       	jmp    c00003a5 <asmQuickAcquireLock.retry>

c00003bd <asmQuickReleaseLock>:
c00003bd:	55                   	push   ebp
c00003be:	89 e5                	mov    ebp,esp
c00003c0:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00003c7:	5d                   	pop    ebp
c00003c8:	c3                   	ret    

c00003c9 <asmAcquireLock>:
c00003c9:	55                   	push   ebp
c00003ca:	89 e5                	mov    ebp,esp
c00003cc:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003cf <asmAcquireLock.retry>:
c00003cf:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003d4:	72 05                	jb     c00003db <asmAcquireLock.spin_with_pause>
c00003d6:	9c                   	pushf  
c00003d7:	58                   	pop    eax
c00003d8:	fa                   	cli    
c00003d9:	5d                   	pop    ebp
c00003da:	c3                   	ret    

c00003db <asmAcquireLock.spin_with_pause>:
c00003db:	f3 90                	pause  
c00003dd:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003e3:	75 f6                	jne    c00003db <asmAcquireLock.spin_with_pause>
c00003e5:	e9 e5 ff ff ff       	jmp    c00003cf <asmAcquireLock.retry>

c00003ea <asmReleaseLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00003f0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00003f3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00003f9:	52                   	push   edx
c00003fa:	9d                   	popf   
c00003fb:	5d                   	pop    ebp
c00003fc:	c3                   	ret    

c00003fd <loadGDT>:
c00003fd:	0f 01 15 50 c9 02 c0 	lgdtd  ds:0xc002c950
c0000404:	66 b8 10 00          	mov    ax,0x10
c0000408:	66 8e d8             	mov    ds,ax
c000040b:	66 8e c0             	mov    es,ax
c000040e:	66 8e e0             	mov    fs,ax
c0000411:	66 8e e8             	mov    gs,ax
c0000414:	66 8e d0             	mov    ss,ax
c0000417:	e9 00 00 00 00       	jmp    c000041c <flush2>

c000041c <flush2>:
c000041c:	c3                   	ret    

c000041d <isr0>:
c000041d:	fa                   	cli    
c000041e:	68 00 00 00 00       	push   0x0
c0000423:	68 00 00 00 00       	push   0x0
c0000428:	e9 44 01 00 00       	jmp    c0000571 <int_common_stub>

c000042d <isr1>:
c000042d:	fa                   	cli    
c000042e:	6a 00                	push   0x0
c0000430:	6a 01                	push   0x1
c0000432:	e9 3a 01 00 00       	jmp    c0000571 <int_common_stub>

c0000437 <isr2>:
c0000437:	fa                   	cli    
c0000438:	6a 00                	push   0x0
c000043a:	6a 02                	push   0x2
c000043c:	e9 30 01 00 00       	jmp    c0000571 <int_common_stub>

c0000441 <isr3>:
c0000441:	fa                   	cli    
c0000442:	6a 00                	push   0x0
c0000444:	6a 03                	push   0x3
c0000446:	e9 26 01 00 00       	jmp    c0000571 <int_common_stub>

c000044b <isr4>:
c000044b:	fa                   	cli    
c000044c:	6a 00                	push   0x0
c000044e:	6a 04                	push   0x4
c0000450:	e9 1c 01 00 00       	jmp    c0000571 <int_common_stub>

c0000455 <isr5>:
c0000455:	fa                   	cli    
c0000456:	6a 00                	push   0x0
c0000458:	6a 05                	push   0x5
c000045a:	e9 12 01 00 00       	jmp    c0000571 <int_common_stub>

c000045f <isr6>:
c000045f:	fa                   	cli    
c0000460:	6a 00                	push   0x0
c0000462:	6a 06                	push   0x6
c0000464:	e9 08 01 00 00       	jmp    c0000571 <int_common_stub>

c0000469 <isr7>:
c0000469:	fa                   	cli    
c000046a:	6a 00                	push   0x0
c000046c:	6a 07                	push   0x7
c000046e:	e9 fe 00 00 00       	jmp    c0000571 <int_common_stub>

c0000473 <isr8>:
c0000473:	fa                   	cli    
c0000474:	6a 08                	push   0x8
c0000476:	e9 f6 00 00 00       	jmp    c0000571 <int_common_stub>

c000047b <isr9>:
c000047b:	fa                   	cli    
c000047c:	6a 00                	push   0x0
c000047e:	6a 09                	push   0x9
c0000480:	e9 ec 00 00 00       	jmp    c0000571 <int_common_stub>

c0000485 <isr10>:
c0000485:	fa                   	cli    
c0000486:	6a 0a                	push   0xa
c0000488:	e9 e4 00 00 00       	jmp    c0000571 <int_common_stub>

c000048d <isr11>:
c000048d:	fa                   	cli    
c000048e:	6a 0b                	push   0xb
c0000490:	e9 dc 00 00 00       	jmp    c0000571 <int_common_stub>

c0000495 <isr12>:
c0000495:	fa                   	cli    
c0000496:	6a 0c                	push   0xc
c0000498:	e9 d4 00 00 00       	jmp    c0000571 <int_common_stub>

c000049d <isr13>:
c000049d:	fa                   	cli    
c000049e:	6a 0d                	push   0xd
c00004a0:	e9 cc 00 00 00       	jmp    c0000571 <int_common_stub>

c00004a5 <isr14>:
c00004a5:	fa                   	cli    
c00004a6:	6a 0e                	push   0xe
c00004a8:	e9 c4 00 00 00       	jmp    c0000571 <int_common_stub>

c00004ad <isr15>:
c00004ad:	fa                   	cli    
c00004ae:	6a 00                	push   0x0
c00004b0:	6a 0f                	push   0xf
c00004b2:	e9 ba 00 00 00       	jmp    c0000571 <int_common_stub>

c00004b7 <isr16>:
c00004b7:	fa                   	cli    
c00004b8:	6a 00                	push   0x0
c00004ba:	6a 10                	push   0x10
c00004bc:	e9 b0 00 00 00       	jmp    c0000571 <int_common_stub>

c00004c1 <isr17>:
c00004c1:	fa                   	cli    
c00004c2:	6a 00                	push   0x0
c00004c4:	6a 11                	push   0x11
c00004c6:	e9 a6 00 00 00       	jmp    c0000571 <int_common_stub>

c00004cb <isr18>:
c00004cb:	fa                   	cli    
c00004cc:	6a 00                	push   0x0
c00004ce:	6a 12                	push   0x12
c00004d0:	e9 9c 00 00 00       	jmp    c0000571 <int_common_stub>

c00004d5 <irq3>:
c00004d5:	fa                   	cli    
c00004d6:	6a 00                	push   0x0
c00004d8:	6a 23                	push   0x23
c00004da:	e9 92 00 00 00       	jmp    c0000571 <int_common_stub>

c00004df <irq4>:
c00004df:	fa                   	cli    
c00004e0:	6a 00                	push   0x0
c00004e2:	6a 24                	push   0x24
c00004e4:	e9 88 00 00 00       	jmp    c0000571 <int_common_stub>

c00004e9 <irq5>:
c00004e9:	fa                   	cli    
c00004ea:	6a 00                	push   0x0
c00004ec:	6a 25                	push   0x25
c00004ee:	e9 7e 00 00 00       	jmp    c0000571 <int_common_stub>

c00004f3 <irq6>:
c00004f3:	fa                   	cli    
c00004f4:	6a 00                	push   0x0
c00004f6:	6a 26                	push   0x26
c00004f8:	e9 74 00 00 00       	jmp    c0000571 <int_common_stub>

c00004fd <irq7>:
c00004fd:	fa                   	cli    
c00004fe:	6a 00                	push   0x0
c0000500:	6a 27                	push   0x27
c0000502:	e9 6a 00 00 00       	jmp    c0000571 <int_common_stub>

c0000507 <irq8>:
c0000507:	fa                   	cli    
c0000508:	6a 00                	push   0x0
c000050a:	6a 28                	push   0x28
c000050c:	e9 60 00 00 00       	jmp    c0000571 <int_common_stub>

c0000511 <irq9>:
c0000511:	fa                   	cli    
c0000512:	6a 00                	push   0x0
c0000514:	6a 29                	push   0x29
c0000516:	e9 56 00 00 00       	jmp    c0000571 <int_common_stub>

c000051b <irq10>:
c000051b:	fa                   	cli    
c000051c:	6a 00                	push   0x0
c000051e:	6a 2a                	push   0x2a
c0000520:	e9 4c 00 00 00       	jmp    c0000571 <int_common_stub>

c0000525 <irq11>:
c0000525:	fa                   	cli    
c0000526:	6a 00                	push   0x0
c0000528:	6a 2b                	push   0x2b
c000052a:	e9 42 00 00 00       	jmp    c0000571 <int_common_stub>

c000052f <irq12>:
c000052f:	fa                   	cli    
c0000530:	6a 00                	push   0x0
c0000532:	6a 2c                	push   0x2c
c0000534:	e9 38 00 00 00       	jmp    c0000571 <int_common_stub>

c0000539 <irq13>:
c0000539:	fa                   	cli    
c000053a:	6a 00                	push   0x0
c000053c:	6a 2d                	push   0x2d
c000053e:	e9 2e 00 00 00       	jmp    c0000571 <int_common_stub>

c0000543 <irq14>:
c0000543:	fa                   	cli    
c0000544:	6a 00                	push   0x0
c0000546:	6a 2e                	push   0x2e
c0000548:	e9 24 00 00 00       	jmp    c0000571 <int_common_stub>

c000054d <irq15>:
c000054d:	fa                   	cli    
c000054e:	6a 00                	push   0x0
c0000550:	6a 2f                	push   0x2f
c0000552:	e9 1a 00 00 00       	jmp    c0000571 <int_common_stub>

c0000557 <irq1>:
c0000557:	fa                   	cli    
c0000558:	6a 00                	push   0x0
c000055a:	6a 21                	push   0x21
c000055c:	eb 13                	jmp    c0000571 <int_common_stub>

c000055e <irq2>:
c000055e:	fa                   	cli    
c000055f:	6a 00                	push   0x0
c0000561:	6a 22                	push   0x22
c0000563:	eb 0c                	jmp    c0000571 <int_common_stub>

c0000565 <isr96>:
c0000565:	6a 00                	push   0x0
c0000567:	6a 60                	push   0x60
c0000569:	fb                   	sti    
c000056a:	eb 05                	jmp    c0000571 <int_common_stub>

c000056c <irq0>:
c000056c:	fa                   	cli    
c000056d:	6a 00                	push   0x0
c000056f:	6a 20                	push   0x20

c0000571 <int_common_stub>:
c0000571:	60                   	pusha  
c0000572:	1e                   	push   ds
c0000573:	06                   	push   es
c0000574:	0f a0                	push   fs
c0000576:	0f a8                	push   gs
c0000578:	66 b8 10 00          	mov    ax,0x10
c000057c:	66 8e d8             	mov    ds,ax
c000057f:	66 8e c0             	mov    es,ax
c0000582:	66 8e e0             	mov    fs,ax
c0000585:	66 8e e8             	mov    gs,ax
c0000588:	54                   	push   esp
c0000589:	e8 77 3e 01 00       	call   c0014405 <int_handler>
c000058e:	81 c4 04 00 00 00    	add    esp,0x4
c0000594:	0f a9                	pop    gs
c0000596:	0f a1                	pop    fs
c0000598:	07                   	pop    es
c0000599:	1f                   	pop    ds
c000059a:	61                   	popa   
c000059b:	81 c4 08 00 00 00    	add    esp,0x8
c00005a1:	cf                   	iret   

c00005a2 <irq16>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 30                	push   0x30
c00005a7:	e9 c5 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005ac <irq17>:
c00005ac:	fa                   	cli    
c00005ad:	6a 00                	push   0x0
c00005af:	6a 31                	push   0x31
c00005b1:	e9 bb ff ff ff       	jmp    c0000571 <int_common_stub>

c00005b6 <irq18>:
c00005b6:	fa                   	cli    
c00005b7:	6a 00                	push   0x0
c00005b9:	6a 32                	push   0x32
c00005bb:	e9 b1 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005c0 <irq19>:
c00005c0:	fa                   	cli    
c00005c1:	6a 00                	push   0x0
c00005c3:	6a 33                	push   0x33
c00005c5:	e9 a7 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005ca <irq20>:
c00005ca:	fa                   	cli    
c00005cb:	6a 00                	push   0x0
c00005cd:	6a 34                	push   0x34
c00005cf:	e9 9d ff ff ff       	jmp    c0000571 <int_common_stub>

c00005d4 <irq21>:
c00005d4:	fa                   	cli    
c00005d5:	6a 00                	push   0x0
c00005d7:	6a 35                	push   0x35
c00005d9:	e9 93 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005de <irq22>:
c00005de:	fa                   	cli    
c00005df:	6a 00                	push   0x0
c00005e1:	6a 36                	push   0x36
c00005e3:	e9 89 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005e8 <irq23>:
c00005e8:	fa                   	cli    
c00005e9:	6a 00                	push   0x0
c00005eb:	6a 37                	push   0x37
c00005ed:	e9 7f ff ff ff       	jmp    c0000571 <int_common_stub>

c00005f2 <memcmp>:
c00005f2:	56                   	push   esi
c00005f3:	53                   	push   ebx
c00005f4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00005f8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00005fc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000600:	01 d6                	add    esi,edx
c0000602:	39 f2                	cmp    edx,esi
c0000604:	74 0e                	je     c0000614 <memcmp+0x22>
c0000606:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000609:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000060c:	38 c8                	cmp    al,cl
c000060e:	75 08                	jne    c0000618 <memcmp+0x26>
c0000610:	42                   	inc    edx
c0000611:	43                   	inc    ebx
c0000612:	eb ee                	jmp    c0000602 <memcmp+0x10>
c0000614:	31 c0                	xor    eax,eax
c0000616:	eb 02                	jmp    c000061a <memcmp+0x28>
c0000618:	29 c8                	sub    eax,ecx
c000061a:	5b                   	pop    ebx
c000061b:	5e                   	pop    esi
c000061c:	c3                   	ret    

c000061d <memmove>:
c000061d:	56                   	push   esi
c000061e:	53                   	push   ebx
c000061f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000623:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000627:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000062b:	39 c8                	cmp    eax,ecx
c000062d:	73 12                	jae    c0000641 <memmove+0x24>
c000062f:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000632:	89 c3                	mov    ebx,eax
c0000634:	39 f1                	cmp    ecx,esi
c0000636:	74 1a                	je     c0000652 <memmove+0x35>
c0000638:	8a 11                	mov    dl,BYTE PTR [ecx]
c000063a:	43                   	inc    ebx
c000063b:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c000063e:	41                   	inc    ecx
c000063f:	eb f3                	jmp    c0000634 <memmove+0x17>
c0000641:	76 0f                	jbe    c0000652 <memmove+0x35>
c0000643:	85 d2                	test   edx,edx
c0000645:	74 0b                	je     c0000652 <memmove+0x35>
c0000647:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c000064b:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c000064f:	4a                   	dec    edx
c0000650:	eb f1                	jmp    c0000643 <memmove+0x26>
c0000652:	5b                   	pop    ebx
c0000653:	5e                   	pop    esi
c0000654:	c3                   	ret    

c0000655 <memcpy>:
c0000655:	57                   	push   edi
c0000656:	56                   	push   esi
c0000657:	53                   	push   ebx
c0000658:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000065c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000660:	89 da                	mov    edx,ebx
c0000662:	89 d9                	mov    ecx,ebx
c0000664:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000668:	83 e2 fc             	and    edx,0xfffffffc
c000066b:	c1 e9 02             	shr    ecx,0x2
c000066e:	89 c7                	mov    edi,eax
c0000670:	fc                   	cld    
c0000671:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000673:	8d 0c 16             	lea    ecx,[esi+edx*1]
c0000676:	01 c2                	add    edx,eax
c0000678:	01 de                	add    esi,ebx
c000067a:	39 f1                	cmp    ecx,esi
c000067c:	74 09                	je     c0000687 <memcpy+0x32>
c000067e:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000680:	42                   	inc    edx
c0000681:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000684:	41                   	inc    ecx
c0000685:	eb f3                	jmp    c000067a <memcpy+0x25>
c0000687:	5b                   	pop    ebx
c0000688:	5e                   	pop    esi
c0000689:	5f                   	pop    edi
c000068a:	c3                   	ret    

c000068b <memset>:
c000068b:	53                   	push   ebx
c000068c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000690:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000694:	89 c2                	mov    edx,eax
c0000696:	01 c1                	add    ecx,eax
c0000698:	39 ca                	cmp    edx,ecx
c000069a:	74 0a                	je     c00006a6 <memset+0x1b>
c000069c:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00006a0:	42                   	inc    edx
c00006a1:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006a4:	eb f2                	jmp    c0000698 <memset+0xd>
c00006a6:	5b                   	pop    ebx
c00006a7:	c3                   	ret    

c00006a8 <strlen>:
c00006a8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006ac:	31 c0                	xor    eax,eax
c00006ae:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006b2:	74 03                	je     c00006b7 <strlen+0xf>
c00006b4:	40                   	inc    eax
c00006b5:	eb f7                	jmp    c00006ae <strlen+0x6>
c00006b7:	c3                   	ret    

c00006b8 <strpbrk>:
c00006b8:	53                   	push   ebx
c00006b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006bd:	8a 08                	mov    cl,BYTE PTR [eax]
c00006bf:	84 c9                	test   cl,cl
c00006c1:	74 14                	je     c00006d7 <strpbrk+0x1f>
c00006c3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00006c7:	8a 1a                	mov    bl,BYTE PTR [edx]
c00006c9:	84 db                	test   bl,bl
c00006cb:	74 07                	je     c00006d4 <strpbrk+0x1c>
c00006cd:	38 cb                	cmp    bl,cl
c00006cf:	74 08                	je     c00006d9 <strpbrk+0x21>
c00006d1:	42                   	inc    edx
c00006d2:	eb f3                	jmp    c00006c7 <strpbrk+0xf>
c00006d4:	40                   	inc    eax
c00006d5:	eb e6                	jmp    c00006bd <strpbrk+0x5>
c00006d7:	31 c0                	xor    eax,eax
c00006d9:	5b                   	pop    ebx
c00006da:	c3                   	ret    

c00006db <strtok>:
c00006db:	56                   	push   esi
c00006dc:	53                   	push   ebx
c00006dd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00006e1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006e5:	85 db                	test   ebx,ebx
c00006e7:	75 0e                	jne    c00006f7 <strtok+0x1c>
c00006e9:	8b 1d 28 c5 02 c0    	mov    ebx,DWORD PTR ds:0xc002c528
c00006ef:	85 db                	test   ebx,ebx
c00006f1:	75 04                	jne    c00006f7 <strtok+0x1c>
c00006f3:	31 db                	xor    ebx,ebx
c00006f5:	eb 2e                	jmp    c0000725 <strtok+0x4a>
c00006f7:	56                   	push   esi
c00006f8:	53                   	push   ebx
c00006f9:	e8 ba ff ff ff       	call   c00006b8 <strpbrk>
c00006fe:	5a                   	pop    edx
c00006ff:	a3 28 c5 02 c0       	mov    ds:0xc002c528,eax
c0000704:	59                   	pop    ecx
c0000705:	a1 28 c5 02 c0       	mov    eax,ds:0xc002c528
c000070a:	39 d8                	cmp    eax,ebx
c000070c:	75 07                	jne    c0000715 <strtok+0x3a>
c000070e:	43                   	inc    ebx
c000070f:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000713:	eb e2                	jmp    c00006f7 <strtok+0x1c>
c0000715:	85 c0                	test   eax,eax
c0000717:	74 da                	je     c00006f3 <strtok+0x18>
c0000719:	8d 50 01             	lea    edx,[eax+0x1]
c000071c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000071f:	89 15 28 c5 02 c0    	mov    DWORD PTR ds:0xc002c528,edx
c0000725:	89 d8                	mov    eax,ebx
c0000727:	5b                   	pop    ebx
c0000728:	5e                   	pop    esi
c0000729:	c3                   	ret    

c000072a <strcpy>:
c000072a:	53                   	push   ebx
c000072b:	31 d2                	xor    edx,edx
c000072d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000731:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000735:	8d 1c 10             	lea    ebx,[eax+edx*1]
c0000738:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c000073b:	84 c9                	test   cl,cl
c000073d:	74 06                	je     c0000745 <strcpy+0x1b>
c000073f:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0000742:	42                   	inc    edx
c0000743:	eb ec                	jmp    c0000731 <strcpy+0x7>
c0000745:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000748:	5b                   	pop    ebx
c0000749:	c3                   	ret    

c000074a <strncpy>:
c000074a:	56                   	push   esi
c000074b:	53                   	push   ebx
c000074c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000750:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000754:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0000758:	89 c3                	mov    ebx,eax
c000075a:	85 c9                	test   ecx,ecx
c000075c:	74 1a                	je     c0000778 <strncpy+0x2e>
c000075e:	46                   	inc    esi
c000075f:	43                   	inc    ebx
c0000760:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c0000763:	49                   	dec    ecx
c0000764:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c0000767:	84 d2                	test   dl,dl
c0000769:	75 ef                	jne    c000075a <strncpy+0x10>
c000076b:	31 d2                	xor    edx,edx
c000076d:	39 d1                	cmp    ecx,edx
c000076f:	74 07                	je     c0000778 <strncpy+0x2e>
c0000771:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c0000775:	42                   	inc    edx
c0000776:	eb f5                	jmp    c000076d <strncpy+0x23>
c0000778:	5b                   	pop    ebx
c0000779:	5e                   	pop    esi
c000077a:	c3                   	ret    

c000077b <strcmp>:
c000077b:	31 c9                	xor    ecx,ecx
c000077d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000781:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0000785:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0000789:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c000078d:	38 d0                	cmp    al,dl
c000078f:	75 08                	jne    c0000799 <strcmp+0x1e>
c0000791:	41                   	inc    ecx
c0000792:	84 c0                	test   al,al
c0000794:	75 e7                	jne    c000077d <strcmp+0x2>
c0000796:	31 c0                	xor    eax,eax
c0000798:	c3                   	ret    
c0000799:	29 d0                	sub    eax,edx
c000079b:	c3                   	ret    

c000079c <strchr>:
c000079c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007a0:	8a 10                	mov    dl,BYTE PTR [eax]
c00007a2:	84 d2                	test   dl,dl
c00007a4:	74 09                	je     c00007af <strchr+0x13>
c00007a6:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c00007aa:	74 05                	je     c00007b1 <strchr+0x15>
c00007ac:	40                   	inc    eax
c00007ad:	eb f1                	jmp    c00007a0 <strchr+0x4>
c00007af:	31 c0                	xor    eax,eax
c00007b1:	c3                   	ret    

c00007b2 <strncmp>:
c00007b2:	56                   	push   esi
c00007b3:	53                   	push   ebx
c00007b4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00007b8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007bc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007c0:	01 d6                	add    esi,edx
c00007c2:	39 f2                	cmp    edx,esi
c00007c4:	74 12                	je     c00007d8 <strncmp+0x26>
c00007c6:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c00007c9:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007cc:	38 c8                	cmp    al,cl
c00007ce:	75 0c                	jne    c00007dc <strncmp+0x2a>
c00007d0:	42                   	inc    edx
c00007d1:	84 c0                	test   al,al
c00007d3:	74 03                	je     c00007d8 <strncmp+0x26>
c00007d5:	43                   	inc    ebx
c00007d6:	eb ea                	jmp    c00007c2 <strncmp+0x10>
c00007d8:	31 c0                	xor    eax,eax
c00007da:	eb 02                	jmp    c00007de <strncmp+0x2c>
c00007dc:	29 c8                	sub    eax,ecx
c00007de:	5b                   	pop    ebx
c00007df:	5e                   	pop    esi
c00007e0:	c3                   	ret    

c00007e1 <strcat>:
c00007e1:	53                   	push   ebx
c00007e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007e6:	89 c1                	mov    ecx,eax
c00007e8:	8d 51 01             	lea    edx,[ecx+0x1]
c00007eb:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007ef:	74 04                	je     c00007f5 <strcat+0x14>
c00007f1:	89 d1                	mov    ecx,edx
c00007f3:	eb f3                	jmp    c00007e8 <strcat+0x7>
c00007f5:	31 d2                	xor    edx,edx
c00007f7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007fb:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c00007fe:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c0000801:	42                   	inc    edx
c0000802:	84 db                	test   bl,bl
c0000804:	75 f1                	jne    c00007f7 <strcat+0x16>
c0000806:	5b                   	pop    ebx
c0000807:	c3                   	ret    

c0000808 <strncat>:
c0000808:	56                   	push   esi
c0000809:	53                   	push   ebx
c000080a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000080e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000812:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000816:	89 c2                	mov    edx,eax
c0000818:	85 db                	test   ebx,ebx
c000081a:	74 23                	je     c000083f <strncat+0x37>
c000081c:	8d 72 01             	lea    esi,[edx+0x1]
c000081f:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c0000823:	74 04                	je     c0000829 <strncat+0x21>
c0000825:	89 f2                	mov    edx,esi
c0000827:	eb f3                	jmp    c000081c <strncat+0x14>
c0000829:	8d 34 19             	lea    esi,[ecx+ebx*1]
c000082c:	41                   	inc    ecx
c000082d:	42                   	inc    edx
c000082e:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000831:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000834:	84 db                	test   bl,bl
c0000836:	74 07                	je     c000083f <strncat+0x37>
c0000838:	39 f1                	cmp    ecx,esi
c000083a:	75 f0                	jne    c000082c <strncat+0x24>
c000083c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000083f:	5b                   	pop    ebx
c0000840:	5e                   	pop    esi
c0000841:	c3                   	ret    

c0000842 <strstr>:
c0000842:	57                   	push   edi
c0000843:	56                   	push   esi
c0000844:	53                   	push   ebx
c0000845:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000849:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000084d:	57                   	push   edi
c000084e:	e8 55 fe ff ff       	call   c00006a8 <strlen>
c0000853:	59                   	pop    ecx
c0000854:	89 c6                	mov    esi,eax
c0000856:	85 c0                	test   eax,eax
c0000858:	74 1f                	je     c0000879 <strstr+0x37>
c000085a:	53                   	push   ebx
c000085b:	e8 48 fe ff ff       	call   c00006a8 <strlen>
c0000860:	5a                   	pop    edx
c0000861:	39 f0                	cmp    eax,esi
c0000863:	72 12                	jb     c0000877 <strstr+0x35>
c0000865:	56                   	push   esi
c0000866:	57                   	push   edi
c0000867:	53                   	push   ebx
c0000868:	e8 85 fd ff ff       	call   c00005f2 <memcmp>
c000086d:	83 c4 0c             	add    esp,0xc
c0000870:	85 c0                	test   eax,eax
c0000872:	74 05                	je     c0000879 <strstr+0x37>
c0000874:	43                   	inc    ebx
c0000875:	eb e3                	jmp    c000085a <strstr+0x18>
c0000877:	31 db                	xor    ebx,ebx
c0000879:	89 d8                	mov    eax,ebx
c000087b:	5b                   	pop    ebx
c000087c:	5e                   	pop    esi
c000087d:	5f                   	pop    edi
c000087e:	c3                   	ret    

c000087f <toupper>:
c000087f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000883:	0f b6 d0             	movzx  edx,al
c0000886:	f6 82 c0 7b 02 c0 02 	test   BYTE PTR [edx-0x3ffd8440],0x2
c000088d:	74 03                	je     c0000892 <toupper+0x13>
c000088f:	83 e8 20             	sub    eax,0x20
c0000892:	c3                   	ret    

c0000893 <tolower>:
c0000893:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000897:	0f b6 d0             	movzx  edx,al
c000089a:	f6 82 c0 7b 02 c0 01 	test   BYTE PTR [edx-0x3ffd8440],0x1
c00008a1:	74 03                	je     c00008a6 <tolower+0x13>
c00008a3:	83 c0 20             	add    eax,0x20
c00008a6:	c3                   	ret    

c00008a7 <simple_strtoul>:
c00008a7:	55                   	push   ebp
c00008a8:	57                   	push   edi
c00008a9:	56                   	push   esi
c00008aa:	53                   	push   ebx
c00008ab:	83 ec 08             	sub    esp,0x8
c00008ae:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008b2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008b6:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00008b9:	f6 82 c0 7b 02 c0 08 	test   BYTE PTR [edx-0x3ffd8440],0x8
c00008c0:	74 03                	je     c00008c5 <simple_strtoul+0x1e>
c00008c2:	41                   	inc    ecx
c00008c3:	eb f1                	jmp    c00008b6 <simple_strtoul+0xf>
c00008c5:	80 fa 09             	cmp    dl,0x9
c00008c8:	74 f8                	je     c00008c2 <simple_strtoul+0x1b>
c00008ca:	80 fa 2d             	cmp    dl,0x2d
c00008cd:	75 0b                	jne    c00008da <simple_strtoul+0x33>
c00008cf:	41                   	inc    ecx
c00008d0:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00008d8:	eb 0e                	jmp    c00008e8 <simple_strtoul+0x41>
c00008da:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00008e2:	80 fa 2b             	cmp    dl,0x2b
c00008e5:	75 01                	jne    c00008e8 <simple_strtoul+0x41>
c00008e7:	41                   	inc    ecx
c00008e8:	85 f6                	test   esi,esi
c00008ea:	75 22                	jne    c000090e <simple_strtoul+0x67>
c00008ec:	be 0a 00 00 00       	mov    esi,0xa
c00008f1:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c00008f4:	75 5a                	jne    c0000950 <simple_strtoul+0xa9>
c00008f6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c00008fa:	50                   	push   eax
c00008fb:	e8 93 ff ff ff       	call   c0000893 <tolower>
c0000900:	5a                   	pop    edx
c0000901:	83 f8 78             	cmp    eax,0x78
c0000904:	74 03                	je     c0000909 <simple_strtoul+0x62>
c0000906:	41                   	inc    ecx
c0000907:	eb 16                	jmp    c000091f <simple_strtoul+0x78>
c0000909:	83 c1 02             	add    ecx,0x2
c000090c:	eb 22                	jmp    c0000930 <simple_strtoul+0x89>
c000090e:	8d 46 fe             	lea    eax,[esi-0x2]
c0000911:	83 f8 22             	cmp    eax,0x22
c0000914:	0f 87 b7 00 00 00    	ja     c00009d1 <simple_strtoul+0x12a>
c000091a:	83 fe 08             	cmp    esi,0x8
c000091d:	75 0c                	jne    c000092b <simple_strtoul+0x84>
c000091f:	be 08 00 00 00       	mov    esi,0x8
c0000924:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000927:	75 27                	jne    c0000950 <simple_strtoul+0xa9>
c0000929:	eb 1f                	jmp    c000094a <simple_strtoul+0xa3>
c000092b:	83 fe 10             	cmp    esi,0x10
c000092e:	75 20                	jne    c0000950 <simple_strtoul+0xa9>
c0000930:	be 10 00 00 00       	mov    esi,0x10
c0000935:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000938:	75 16                	jne    c0000950 <simple_strtoul+0xa9>
c000093a:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c000093e:	50                   	push   eax
c000093f:	e8 4f ff ff ff       	call   c0000893 <tolower>
c0000944:	5d                   	pop    ebp
c0000945:	83 f8 78             	cmp    eax,0x78
c0000948:	74 03                	je     c000094d <simple_strtoul+0xa6>
c000094a:	41                   	inc    ecx
c000094b:	eb 03                	jmp    c0000950 <simple_strtoul+0xa9>
c000094d:	83 c1 02             	add    ecx,0x2
c0000950:	31 ed                	xor    ebp,ebp
c0000952:	31 db                	xor    ebx,ebx
c0000954:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000095b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000095d:	84 d2                	test   dl,dl
c000095f:	74 27                	je     c0000988 <simple_strtoul+0xe1>
c0000961:	0f b6 fa             	movzx  edi,dl
c0000964:	f6 87 c0 7b 02 c0 04 	test   BYTE PTR [edi-0x3ffd8440],0x4
c000096b:	74 05                	je     c0000972 <simple_strtoul+0xcb>
c000096d:	83 ef 30             	sub    edi,0x30
c0000970:	eb 22                	jmp    c0000994 <simple_strtoul+0xed>
c0000972:	0f be d2             	movsx  edx,dl
c0000975:	52                   	push   edx
c0000976:	e8 04 ff ff ff       	call   c000087f <toupper>
c000097b:	5f                   	pop    edi
c000097c:	0f b6 d0             	movzx  edx,al
c000097f:	f6 82 c0 7b 02 c0 01 	test   BYTE PTR [edx-0x3ffd8440],0x1
c0000986:	75 09                	jne    c0000991 <simple_strtoul+0xea>
c0000988:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000098d:	75 2d                	jne    c00009bc <simple_strtoul+0x115>
c000098f:	eb 57                	jmp    c00009e8 <simple_strtoul+0x141>
c0000991:	8d 78 c9             	lea    edi,[eax-0x37]
c0000994:	39 f7                	cmp    edi,esi
c0000996:	73 f0                	jae    c0000988 <simple_strtoul+0xe1>
c0000998:	31 d2                	xor    edx,edx
c000099a:	89 f8                	mov    eax,edi
c000099c:	f7 d0                	not    eax
c000099e:	f7 f6                	div    esi
c00009a0:	39 d8                	cmp    eax,ebx
c00009a2:	72 0e                	jb     c00009b2 <simple_strtoul+0x10b>
c00009a4:	0f af de             	imul   ebx,esi
c00009a7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009ae:	01 fb                	add    ebx,edi
c00009b0:	eb 07                	jmp    c00009b9 <simple_strtoul+0x112>
c00009b2:	bd 01 00 00 00       	mov    ebp,0x1
c00009b7:	31 db                	xor    ebx,ebx
c00009b9:	41                   	inc    ecx
c00009ba:	eb 9f                	jmp    c000095b <simple_strtoul+0xb4>
c00009bc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009bf:	09 d8                	or     eax,ebx
c00009c1:	75 1f                	jne    c00009e2 <simple_strtoul+0x13b>
c00009c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009c7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00009cb:	31 db                	xor    ebx,ebx
c00009cd:	89 38                	mov    DWORD PTR [eax],edi
c00009cf:	eb 17                	jmp    c00009e8 <simple_strtoul+0x141>
c00009d1:	31 db                	xor    ebx,ebx
c00009d3:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00009d8:	74 14                	je     c00009ee <simple_strtoul+0x147>
c00009da:	31 ed                	xor    ebp,ebp
c00009dc:	85 c9                	test   ecx,ecx
c00009de:	75 e3                	jne    c00009c3 <simple_strtoul+0x11c>
c00009e0:	31 db                	xor    ebx,ebx
c00009e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009e6:	89 08                	mov    DWORD PTR [eax],ecx
c00009e8:	4d                   	dec    ebp
c00009e9:	75 03                	jne    c00009ee <simple_strtoul+0x147>
c00009eb:	83 cb ff             	or     ebx,0xffffffff
c00009ee:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00009f3:	75 02                	jne    c00009f7 <simple_strtoul+0x150>
c00009f5:	f7 db                	neg    ebx
c00009f7:	83 c4 08             	add    esp,0x8
c00009fa:	89 d8                	mov    eax,ebx
c00009fc:	5b                   	pop    ebx
c00009fd:	5e                   	pop    esi
c00009fe:	5f                   	pop    edi
c00009ff:	5d                   	pop    ebp
c0000a00:	c3                   	ret    

c0000a01 <largebin_index>:
c0000a01:	89 c2                	mov    edx,eax
c0000a03:	c1 ea 08             	shr    edx,0x8
c0000a06:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000a0c:	77 10                	ja     c0000a1e <largebin_index+0x1d>
c0000a0e:	0f bd d2             	bsr    edx,edx
c0000a11:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000a14:	d3 e8                	shr    eax,cl
c0000a16:	83 e0 03             	and    eax,0x3
c0000a19:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000a1d:	c3                   	ret    
c0000a1e:	b8 5f 00 00 00       	mov    eax,0x5f
c0000a23:	c3                   	ret    

c0000a24 <malloc_init_state>:
c0000a24:	53                   	push   ebx
c0000a25:	8d 50 34             	lea    edx,[eax+0x34]
c0000a28:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000a2e:	89 d1                	mov    ecx,edx
c0000a30:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000a33:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000a36:	83 c2 08             	add    edx,0x8
c0000a39:	39 da                	cmp    edx,ebx
c0000a3b:	75 f3                	jne    c0000a30 <malloc_init_state+0xc>
c0000a3d:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a3f:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000a49:	83 e2 03             	and    edx,0x3
c0000a4c:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000a56:	83 ca 48             	or     edx,0x48
c0000a59:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000a63:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000a6d:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000a74:	89 10                	mov    DWORD PTR [eax],edx
c0000a76:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000a79:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000a83:	5b                   	pop    ebx
c0000a84:	c3                   	ret    

c0000a85 <malloc_consolidate>:
c0000a85:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a87:	85 d2                	test   edx,edx
c0000a89:	0f 84 d8 00 00 00    	je     c0000b67 <malloc_consolidate+0xe2>
c0000a8f:	55                   	push   ebp
c0000a90:	83 e2 fd             	and    edx,0xfffffffd
c0000a93:	57                   	push   edi
c0000a94:	89 c5                	mov    ebp,eax
c0000a96:	56                   	push   esi
c0000a97:	8d 78 34             	lea    edi,[eax+0x34]
c0000a9a:	53                   	push   ebx
c0000a9b:	83 ec 10             	sub    esp,0x10
c0000a9e:	89 10                	mov    DWORD PTR [eax],edx
c0000aa0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000aa4:	c1 ea 03             	shr    edx,0x3
c0000aa7:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000aab:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000aaf:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ab2:	85 d2                	test   edx,edx
c0000ab4:	0f 84 98 00 00 00    	je     c0000b52 <malloc_consolidate+0xcd>
c0000aba:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ac1:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000ac4:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ac7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000acb:	89 f9                	mov    ecx,edi
c0000acd:	83 e1 fe             	and    ecx,0xfffffffe
c0000ad0:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ad3:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000ad6:	83 e3 fc             	and    ebx,0xfffffffc
c0000ad9:	83 e7 01             	and    edi,0x1
c0000adc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000adf:	75 14                	jne    c0000af5 <malloc_consolidate+0x70>
c0000ae1:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000ae3:	29 fa                	sub    edx,edi
c0000ae5:	01 f9                	add    ecx,edi
c0000ae7:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000aea:	89 fb                	mov    ebx,edi
c0000aec:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000aef:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000af2:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000af5:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000af8:	74 40                	je     c0000b3a <malloc_consolidate+0xb5>
c0000afa:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000afd:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000b00:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000b04:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000b07:	83 e7 01             	and    edi,0x1
c0000b0a:	75 0e                	jne    c0000b1a <malloc_consolidate+0x95>
c0000b0c:	01 d9                	add    ecx,ebx
c0000b0e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000b11:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000b14:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000b17:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000b1a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000b1d:	89 ce                	mov    esi,ecx
c0000b1f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000b22:	83 ce 01             	or     esi,0x1
c0000b25:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000b28:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000b2b:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000b2e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000b32:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000b35:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000b38:	eb 0c                	jmp    c0000b46 <malloc_consolidate+0xc1>
c0000b3a:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000b3d:	83 c9 01             	or     ecx,0x1
c0000b40:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000b43:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000b46:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000b4a:	85 d2                	test   edx,edx
c0000b4c:	0f 85 6f ff ff ff    	jne    c0000ac1 <malloc_consolidate+0x3c>
c0000b52:	83 c5 04             	add    ebp,0x4
c0000b55:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000b59:	0f 85 50 ff ff ff    	jne    c0000aaf <malloc_consolidate+0x2a>
c0000b5f:	83 c4 10             	add    esp,0x10
c0000b62:	5b                   	pop    ebx
c0000b63:	5e                   	pop    esi
c0000b64:	5f                   	pop    edi
c0000b65:	5d                   	pop    ebp
c0000b66:	c3                   	ret    
c0000b67:	e9 b8 fe ff ff       	jmp    c0000a24 <malloc_init_state>

c0000b6c <dlfree>:
c0000b6c:	57                   	push   edi
c0000b6d:	56                   	push   esi
c0000b6e:	53                   	push   ebx
c0000b6f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000b73:	85 db                	test   ebx,ebx
c0000b75:	0f 84 e2 00 00 00    	je     c0000c5d <dlfree+0xf1>
c0000b7b:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000b7e:	8b 0d 40 c5 02 c0    	mov    ecx,DWORD PTR ds:0xc002c540
c0000b84:	89 f0                	mov    eax,esi
c0000b86:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000b89:	83 e0 fc             	and    eax,0xfffffffc
c0000b8c:	39 c1                	cmp    ecx,eax
c0000b8e:	72 24                	jb     c0000bb4 <dlfree+0x48>
c0000b90:	83 c9 03             	or     ecx,0x3
c0000b93:	c1 e8 03             	shr    eax,0x3
c0000b96:	89 0d 40 c5 02 c0    	mov    DWORD PTR ds:0xc002c540,ecx
c0000b9c:	83 e8 02             	sub    eax,0x2
c0000b9f:	8b 0c 85 44 c5 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd3abc]
c0000ba6:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000ba8:	89 14 85 44 c5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3abc],edx
c0000baf:	e9 a9 00 00 00       	jmp    c0000c5d <dlfree+0xf1>
c0000bb4:	83 e6 02             	and    esi,0x2
c0000bb7:	0f 85 a0 00 00 00    	jne    c0000c5d <dlfree+0xf1>
c0000bbd:	83 c9 01             	or     ecx,0x1
c0000bc0:	8d 34 02             	lea    esi,[edx+eax*1]
c0000bc3:	89 0d 40 c5 02 c0    	mov    DWORD PTR ds:0xc002c540,ecx
c0000bc9:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000bcc:	83 e1 fc             	and    ecx,0xfffffffc
c0000bcf:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000bd3:	75 13                	jne    c0000be8 <dlfree+0x7c>
c0000bd5:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000bd8:	29 da                	sub    edx,ebx
c0000bda:	01 d8                	add    eax,ebx
c0000bdc:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000bdf:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000be2:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000be5:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000be8:	39 35 6c c5 02 c0    	cmp    DWORD PTR ds:0xc002c56c,esi
c0000bee:	74 40                	je     c0000c30 <dlfree+0xc4>
c0000bf0:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000bf4:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000bf7:	80 e3 01             	and    bl,0x1
c0000bfa:	75 0e                	jne    c0000c0a <dlfree+0x9e>
c0000bfc:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000bff:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000c02:	01 c8                	add    eax,ecx
c0000c04:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c07:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c0a:	8b 0d 7c c5 02 c0    	mov    ecx,DWORD PTR ds:0xc002c57c
c0000c10:	c7 42 0c 74 c5 02 c0 	mov    DWORD PTR [edx+0xc],0xc002c574
c0000c17:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000c1a:	89 15 7c c5 02 c0    	mov    DWORD PTR ds:0xc002c57c,edx
c0000c20:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000c23:	89 c1                	mov    ecx,eax
c0000c25:	83 c9 01             	or     ecx,0x1
c0000c28:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c2b:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000c2e:	eb 10                	jmp    c0000c40 <dlfree+0xd4>
c0000c30:	01 c8                	add    eax,ecx
c0000c32:	89 c1                	mov    ecx,eax
c0000c34:	83 c9 01             	or     ecx,0x1
c0000c37:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c3a:	89 15 6c c5 02 c0    	mov    DWORD PTR ds:0xc002c56c,edx
c0000c40:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000c45:	76 16                	jbe    c0000c5d <dlfree+0xf1>
c0000c47:	f6 05 40 c5 02 c0 02 	test   BYTE PTR ds:0xc002c540,0x2
c0000c4e:	74 0d                	je     c0000c5d <dlfree+0xf1>
c0000c50:	5b                   	pop    ebx
c0000c51:	b8 40 c5 02 c0       	mov    eax,0xc002c540
c0000c56:	5e                   	pop    esi
c0000c57:	5f                   	pop    edi
c0000c58:	e9 28 fe ff ff       	jmp    c0000a85 <malloc_consolidate>
c0000c5d:	5b                   	pop    ebx
c0000c5e:	5e                   	pop    esi
c0000c5f:	5f                   	pop    edi
c0000c60:	c3                   	ret    

c0000c61 <sYSMALLOc>:
c0000c61:	55                   	push   ebp
c0000c62:	57                   	push   edi
c0000c63:	56                   	push   esi
c0000c64:	53                   	push   ebx
c0000c65:	89 d3                	mov    ebx,edx
c0000c67:	83 ec 2c             	sub    esp,0x2c
c0000c6a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000c6e:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000c74:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000c77:	8d 42 ff             	lea    eax,[edx-0x1]
c0000c7a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000c7e:	74 1f                	je     c0000c9f <sYSMALLOc+0x3e>
c0000c80:	89 d8                	mov    eax,ebx
c0000c82:	e8 fe fd ff ff       	call   c0000a85 <malloc_consolidate>
c0000c87:	83 ec 0c             	sub    esp,0xc
c0000c8a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000c8e:	83 e8 07             	sub    eax,0x7
c0000c91:	50                   	push   eax
c0000c92:	e8 30 02 00 00       	call   c0000ec7 <dlmalloc>
c0000c97:	83 c4 10             	add    esp,0x10
c0000c9a:	e9 20 02 00 00       	jmp    c0000ebf <sYSMALLOc+0x25e>
c0000c9f:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ca2:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ca8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000cab:	83 e0 fc             	and    eax,0xfffffffc
c0000cae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000cb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000cb6:	83 c0 10             	add    eax,0x10
c0000cb9:	01 c1                	add    ecx,eax
c0000cbb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000cbf:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000cc6:	74 04                	je     c0000ccc <sYSMALLOc+0x6b>
c0000cc8:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000ccc:	f7 da                	neg    edx
c0000cce:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000cd2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000cd6:	21 d1                	and    ecx,edx
c0000cd8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000cdc:	7f 07                	jg     c0000ce5 <sYSMALLOc+0x84>
c0000cde:	31 c0                	xor    eax,eax
c0000ce0:	e9 da 01 00 00       	jmp    c0000ebf <sYSMALLOc+0x25e>
c0000ce5:	83 ec 0c             	sub    esp,0xc
c0000ce8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000cec:	e8 3a e6 00 00       	call   c000f32b <sbrk>
c0000cf1:	83 c4 10             	add    esp,0x10
c0000cf4:	89 c6                	mov    esi,eax
c0000cf6:	83 f8 ff             	cmp    eax,0xffffffff
c0000cf9:	74 e3                	je     c0000cde <sYSMALLOc+0x7d>
c0000cfb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000cff:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000d03:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000d06:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000d0c:	39 f1                	cmp    ecx,esi
c0000d0e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000d14:	75 13                	jne    c0000d29 <sYSMALLOc+0xc8>
c0000d16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d1a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d1e:	83 c8 01             	or     eax,0x1
c0000d21:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000d24:	e9 3e 01 00 00       	jmp    c0000e67 <sYSMALLOc+0x206>
c0000d29:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000d2f:	88 d0                	mov    al,dl
c0000d31:	83 e0 01             	and    eax,0x1
c0000d34:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d39:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000d3d:	0f 95 c0             	setne  al
c0000d40:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000d44:	39 f1                	cmp    ecx,esi
c0000d46:	76 12                	jbe    c0000d5a <sYSMALLOc+0xf9>
c0000d48:	84 c0                	test   al,al
c0000d4a:	74 0e                	je     c0000d5a <sYSMALLOc+0xf9>
c0000d4c:	83 e2 fe             	and    edx,0xfffffffe
c0000d4f:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000d55:	e9 83 00 00 00       	jmp    c0000ddd <sYSMALLOc+0x17c>
c0000d5a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000d5f:	74 7c                	je     c0000ddd <sYSMALLOc+0x17c>
c0000d61:	84 c0                	test   al,al
c0000d63:	74 0c                	je     c0000d71 <sYSMALLOc+0x110>
c0000d65:	89 f0                	mov    eax,esi
c0000d67:	29 c8                	sub    eax,ecx
c0000d69:	01 e8                	add    eax,ebp
c0000d6b:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000d71:	89 f2                	mov    edx,esi
c0000d73:	83 e2 07             	and    edx,0x7
c0000d76:	74 0c                	je     c0000d84 <sYSMALLOc+0x123>
c0000d78:	b8 08 00 00 00       	mov    eax,0x8
c0000d7d:	29 d0                	sub    eax,edx
c0000d7f:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000d82:	eb 04                	jmp    c0000d88 <sYSMALLOc+0x127>
c0000d84:	89 f5                	mov    ebp,esi
c0000d86:	31 c0                	xor    eax,eax
c0000d88:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d8c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d90:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d94:	01 c1                	add    ecx,eax
c0000d96:	83 ec 0c             	sub    esp,0xc
c0000d99:	01 f1                	add    ecx,esi
c0000d9b:	01 ca                	add    edx,ecx
c0000d9d:	29 c8                	sub    eax,ecx
c0000d9f:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000da3:	01 c2                	add    edx,eax
c0000da5:	52                   	push   edx
c0000da6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000daa:	e8 7c e5 00 00       	call   c000f32b <sbrk>
c0000daf:	83 c4 10             	add    esp,0x10
c0000db2:	83 f8 ff             	cmp    eax,0xffffffff
c0000db5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000db9:	75 0f                	jne    c0000dca <sYSMALLOc+0x169>
c0000dbb:	83 ec 0c             	sub    esp,0xc
c0000dbe:	6a 00                	push   0x0
c0000dc0:	e8 66 e5 00 00       	call   c000f32b <sbrk>
c0000dc5:	83 c4 10             	add    esp,0x10
c0000dc8:	eb 30                	jmp    c0000dfa <sYSMALLOc+0x199>
c0000dca:	39 c6                	cmp    esi,eax
c0000dcc:	76 33                	jbe    c0000e01 <sYSMALLOc+0x1a0>
c0000dce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000dd2:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000dd9:	01 f0                	add    eax,esi
c0000ddb:	eb 1d                	jmp    c0000dfa <sYSMALLOc+0x199>
c0000ddd:	83 ec 0c             	sub    esp,0xc
c0000de0:	89 f5                	mov    ebp,esi
c0000de2:	6a 00                	push   0x0
c0000de4:	e8 42 e5 00 00       	call   c000f32b <sbrk>
c0000de9:	89 c2                	mov    edx,eax
c0000deb:	29 f2                	sub    edx,esi
c0000ded:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000df1:	83 c4 10             	add    esp,0x10
c0000df4:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000dfa:	31 d2                	xor    edx,edx
c0000dfc:	83 f8 ff             	cmp    eax,0xffffffff
c0000dff:	74 66                	je     c0000e67 <sYSMALLOc+0x206>
c0000e01:	29 e8                	sub    eax,ebp
c0000e03:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000e06:	01 d0                	add    eax,edx
c0000e08:	83 c8 01             	or     eax,0x1
c0000e0b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000e0e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e14:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e19:	74 4c                	je     c0000e67 <sYSMALLOc+0x206>
c0000e1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e1f:	83 e8 0c             	sub    eax,0xc
c0000e22:	83 e0 f8             	and    eax,0xfffffff8
c0000e25:	89 c2                	mov    edx,eax
c0000e27:	83 ca 01             	or     edx,0x1
c0000e2a:	83 f8 0f             	cmp    eax,0xf
c0000e2d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000e30:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000e38:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000e40:	76 25                	jbe    c0000e67 <sYSMALLOc+0x206>
c0000e42:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000e48:	83 ec 0c             	sub    esp,0xc
c0000e4b:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000e55:	83 c7 08             	add    edi,0x8
c0000e58:	57                   	push   edi
c0000e59:	e8 0e fd ff ff       	call   c0000b6c <dlfree>
c0000e5e:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000e64:	83 c4 10             	add    esp,0x10
c0000e67:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000e6d:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000e73:	73 06                	jae    c0000e7b <sYSMALLOc+0x21a>
c0000e75:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000e7b:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000e81:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000e87:	73 06                	jae    c0000e8f <sYSMALLOc+0x22e>
c0000e89:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000e8f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000e92:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000e95:	83 e2 fc             	and    edx,0xfffffffc
c0000e98:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000e9c:	0f 82 3c fe ff ff    	jb     c0000cde <sYSMALLOc+0x7d>
c0000ea2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000ea6:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000ea9:	29 fa                	sub    edx,edi
c0000eab:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000eae:	83 ca 01             	or     edx,0x1
c0000eb1:	89 fb                	mov    ebx,edi
c0000eb3:	83 c0 08             	add    eax,0x8
c0000eb6:	83 cb 01             	or     ebx,0x1
c0000eb9:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000ebc:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000ebf:	83 c4 2c             	add    esp,0x2c
c0000ec2:	5b                   	pop    ebx
c0000ec3:	5e                   	pop    esi
c0000ec4:	5f                   	pop    edi
c0000ec5:	5d                   	pop    ebp
c0000ec6:	c3                   	ret    

c0000ec7 <dlmalloc>:
c0000ec7:	55                   	push   ebp
c0000ec8:	57                   	push   edi
c0000ec9:	56                   	push   esi
c0000eca:	53                   	push   ebx
c0000ecb:	83 ec 1c             	sub    esp,0x1c
c0000ece:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000ed2:	83 f8 df             	cmp    eax,0xffffffdf
c0000ed5:	0f 87 70 03 00 00    	ja     c000124b <dlmalloc+0x384>
c0000edb:	83 c0 0b             	add    eax,0xb
c0000ede:	be 10 00 00 00       	mov    esi,0x10
c0000ee3:	83 f8 0f             	cmp    eax,0xf
c0000ee6:	76 05                	jbe    c0000eed <dlmalloc+0x26>
c0000ee8:	83 e0 f8             	and    eax,0xfffffff8
c0000eeb:	89 c6                	mov    esi,eax
c0000eed:	8b 3d 40 c5 02 c0    	mov    edi,DWORD PTR ds:0xc002c540
c0000ef3:	f7 c7 01 00 00 00    	test   edi,0x1
c0000ef9:	75 17                	jne    c0000f12 <dlmalloc+0x4b>
c0000efb:	85 ff                	test   edi,edi
c0000efd:	0f 85 05 03 00 00    	jne    c0001208 <dlmalloc+0x341>
c0000f03:	b8 40 c5 02 c0       	mov    eax,0xc002c540
c0000f08:	e8 78 fb ff ff       	call   c0000a85 <malloc_consolidate>
c0000f0d:	e9 f6 02 00 00       	jmp    c0001208 <dlmalloc+0x341>
c0000f12:	39 f7                	cmp    edi,esi
c0000f14:	72 1f                	jb     c0000f35 <dlmalloc+0x6e>
c0000f16:	89 f2                	mov    edx,esi
c0000f18:	c1 ea 03             	shr    edx,0x3
c0000f1b:	83 ea 02             	sub    edx,0x2
c0000f1e:	8b 04 95 44 c5 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3abc]
c0000f25:	85 c0                	test   eax,eax
c0000f27:	74 0c                	je     c0000f35 <dlmalloc+0x6e>
c0000f29:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000f2c:	89 0c 95 44 c5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd3abc],ecx
c0000f33:	eb 30                	jmp    c0000f65 <dlmalloc+0x9e>
c0000f35:	89 f0                	mov    eax,esi
c0000f37:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f3d:	77 2e                	ja     c0000f6d <dlmalloc+0xa6>
c0000f3f:	c1 e8 03             	shr    eax,0x3
c0000f42:	8d 14 c5 74 c5 02 c0 	lea    edx,[eax*8-0x3ffd3a8c]
c0000f49:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f4d:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000f50:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000f53:	39 c3                	cmp    ebx,eax
c0000f55:	74 2e                	je     c0000f85 <dlmalloc+0xbe>
c0000f57:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000f5a:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000f5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000f62:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000f65:	83 c0 08             	add    eax,0x8
c0000f68:	e9 e0 02 00 00       	jmp    c000124d <dlmalloc+0x386>
c0000f6d:	e8 8f fa ff ff       	call   c0000a01 <largebin_index>
c0000f72:	83 e7 02             	and    edi,0x2
c0000f75:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f79:	74 0a                	je     c0000f85 <dlmalloc+0xbe>
c0000f7b:	b8 40 c5 02 c0       	mov    eax,0xc002c540
c0000f80:	e8 00 fb ff ff       	call   c0000a85 <malloc_consolidate>
c0000f85:	8d 46 10             	lea    eax,[esi+0x10]
c0000f88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000f8c:	8b 1d 80 c5 02 c0    	mov    ebx,DWORD PTR ds:0xc002c580
c0000f92:	81 fb 74 c5 02 c0    	cmp    ebx,0xc002c574
c0000f98:	0f 84 13 01 00 00    	je     c00010b1 <dlmalloc+0x1ea>
c0000f9e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000fa1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000fa4:	83 e7 fc             	and    edi,0xfffffffc
c0000fa7:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000fad:	77 4c                	ja     c0000ffb <dlmalloc+0x134>
c0000faf:	3d 74 c5 02 c0       	cmp    eax,0xc002c574
c0000fb4:	75 45                	jne    c0000ffb <dlmalloc+0x134>
c0000fb6:	39 1d 70 c5 02 c0    	cmp    DWORD PTR ds:0xc002c570,ebx
c0000fbc:	75 3d                	jne    c0000ffb <dlmalloc+0x134>
c0000fbe:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000fc2:	73 37                	jae    c0000ffb <dlmalloc+0x134>
c0000fc4:	8d 04 33             	lea    eax,[ebx+esi*1]
c0000fc7:	89 fa                	mov    edx,edi
c0000fc9:	a3 7c c5 02 c0       	mov    ds:0xc002c57c,eax
c0000fce:	a3 80 c5 02 c0       	mov    ds:0xc002c580,eax
c0000fd3:	a3 70 c5 02 c0       	mov    ds:0xc002c570,eax
c0000fd8:	29 f2                	sub    edx,esi
c0000fda:	c7 40 08 74 c5 02 c0 	mov    DWORD PTR [eax+0x8],0xc002c574
c0000fe1:	c7 40 0c 74 c5 02 c0 	mov    DWORD PTR [eax+0xc],0xc002c574
c0000fe8:	83 ce 01             	or     esi,0x1
c0000feb:	89 d1                	mov    ecx,edx
c0000fed:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0000ff0:	83 c9 01             	or     ecx,0x1
c0000ff3:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0000ff6:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0000ff9:	eb 15                	jmp    c0001010 <dlmalloc+0x149>
c0000ffb:	a3 80 c5 02 c0       	mov    ds:0xc002c580,eax
c0001000:	39 fe                	cmp    esi,edi
c0001002:	c7 40 08 74 c5 02 c0 	mov    DWORD PTR [eax+0x8],0xc002c574
c0001009:	75 0d                	jne    c0001018 <dlmalloc+0x151>
c000100b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001010:	8d 43 08             	lea    eax,[ebx+0x8]
c0001013:	e9 35 02 00 00       	jmp    c000124d <dlmalloc+0x386>
c0001018:	89 f8                	mov    eax,edi
c000101a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001020:	77 19                	ja     c000103b <dlmalloc+0x174>
c0001022:	c1 e8 03             	shr    eax,0x3
c0001025:	8d 14 00             	lea    edx,[eax+eax*1]
c0001028:	83 c2 0d             	add    edx,0xd
c000102b:	8d 2c 95 38 c5 02 c0 	lea    ebp,[edx*4-0x3ffd3ac8]
c0001032:	8b 14 95 40 c5 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3ac0]
c0001039:	eb 46                	jmp    c0001081 <dlmalloc+0x1ba>
c000103b:	e8 c1 f9 ff ff       	call   c0000a01 <largebin_index>
c0001040:	8d 14 00             	lea    edx,[eax+eax*1]
c0001043:	83 c2 0d             	add    edx,0xd
c0001046:	8d 0c 95 40 c5 02 c0 	lea    ecx,[edx*4-0x3ffd3ac0]
c000104d:	8b 14 95 40 c5 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3ac0]
c0001054:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001057:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000105b:	89 d5                	mov    ebp,edx
c000105d:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001061:	74 1e                	je     c0001081 <dlmalloc+0x1ba>
c0001063:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001066:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001069:	77 12                	ja     c000107d <dlmalloc+0x1b6>
c000106b:	83 cf 01             	or     edi,0x1
c000106e:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001071:	76 05                	jbe    c0001078 <dlmalloc+0x1b1>
c0001073:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001076:	eb f6                	jmp    c000106e <dlmalloc+0x1a7>
c0001078:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c000107b:	eb 04                	jmp    c0001081 <dlmalloc+0x1ba>
c000107d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001081:	89 c7                	mov    edi,eax
c0001083:	88 c1                	mov    cl,al
c0001085:	c1 ff 05             	sar    edi,0x5
c0001088:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000108c:	bf 01 00 00 00       	mov    edi,0x1
c0001091:	d3 e7                	shl    edi,cl
c0001093:	89 f8                	mov    eax,edi
c0001095:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001099:	09 04 bd 74 c8 02 c0 	or     DWORD PTR [edi*4-0x3ffd378c],eax
c00010a0:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00010a3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00010a6:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00010a9:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00010ac:	e9 db fe ff ff       	jmp    c0000f8c <dlmalloc+0xc5>
c00010b1:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010b7:	76 78                	jbe    c0001131 <dlmalloc+0x26a>
c00010b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00010bd:	8d 04 c5 74 c5 02 c0 	lea    eax,[eax*8-0x3ffd3a8c]
c00010c4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00010c7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010ca:	39 ca                	cmp    edx,ecx
c00010cc:	74 63                	je     c0001131 <dlmalloc+0x26a>
c00010ce:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00010d1:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00010d4:	83 e3 fc             	and    ebx,0xfffffffc
c00010d7:	39 de                	cmp    esi,ebx
c00010d9:	77 52                	ja     c000112d <dlmalloc+0x266>
c00010db:	89 df                	mov    edi,ebx
c00010dd:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00010e0:	29 f7                	sub    edi,esi
c00010e2:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00010e5:	01 d3                	add    ebx,edx
c00010e7:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00010ea:	83 ff 0f             	cmp    edi,0xf
c00010ed:	8d 42 08             	lea    eax,[edx+0x8]
c00010f0:	77 09                	ja     c00010fb <dlmalloc+0x234>
c00010f2:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00010f6:	e9 52 01 00 00       	jmp    c000124d <dlmalloc+0x386>
c00010fb:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00010fe:	83 ce 01             	or     esi,0x1
c0001101:	89 0d 7c c5 02 c0    	mov    DWORD PTR ds:0xc002c57c,ecx
c0001107:	89 0d 80 c5 02 c0    	mov    DWORD PTR ds:0xc002c580,ecx
c000110d:	c7 41 08 74 c5 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002c574
c0001114:	c7 41 0c 74 c5 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002c574
c000111b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000111e:	89 fa                	mov    edx,edi
c0001120:	83 ca 01             	or     edx,0x1
c0001123:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001126:	89 3b                	mov    DWORD PTR [ebx],edi
c0001128:	e9 20 01 00 00       	jmp    c000124d <dlmalloc+0x386>
c000112d:	89 c2                	mov    edx,eax
c000112f:	eb 99                	jmp    c00010ca <dlmalloc+0x203>
c0001131:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001135:	b8 01 00 00 00       	mov    eax,0x1
c000113a:	41                   	inc    ecx
c000113b:	89 cb                	mov    ebx,ecx
c000113d:	8d 14 cd 6c c5 02 c0 	lea    edx,[ecx*8-0x3ffd3a94]
c0001144:	c1 eb 05             	shr    ebx,0x5
c0001147:	d3 e0                	shl    eax,cl
c0001149:	8b 3c 9d 74 c8 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd378c]
c0001150:	39 f8                	cmp    eax,edi
c0001152:	77 04                	ja     c0001158 <dlmalloc+0x291>
c0001154:	85 c0                	test   eax,eax
c0001156:	75 26                	jne    c000117e <dlmalloc+0x2b7>
c0001158:	43                   	inc    ebx
c0001159:	83 fb 02             	cmp    ebx,0x2
c000115c:	0f 87 a6 00 00 00    	ja     c0001208 <dlmalloc+0x341>
c0001162:	8b 3c 9d 74 c8 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd378c]
c0001169:	85 ff                	test   edi,edi
c000116b:	74 eb                	je     c0001158 <dlmalloc+0x291>
c000116d:	89 d8                	mov    eax,ebx
c000116f:	c1 e0 06             	shl    eax,0x6
c0001172:	8d 14 85 6c c5 02 c0 	lea    edx,[eax*4-0x3ffd3a94]
c0001179:	b8 01 00 00 00       	mov    eax,0x1
c000117e:	85 f8                	test   eax,edi
c0001180:	75 07                	jne    c0001189 <dlmalloc+0x2c2>
c0001182:	83 c2 08             	add    edx,0x8
c0001185:	01 c0                	add    eax,eax
c0001187:	eb f5                	jmp    c000117e <dlmalloc+0x2b7>
c0001189:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c000118c:	39 ca                	cmp    edx,ecx
c000118e:	75 14                	jne    c00011a4 <dlmalloc+0x2dd>
c0001190:	89 c1                	mov    ecx,eax
c0001192:	83 c2 08             	add    edx,0x8
c0001195:	f7 d1                	not    ecx
c0001197:	01 c0                	add    eax,eax
c0001199:	21 cf                	and    edi,ecx
c000119b:	89 3c 9d 74 c8 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd378c],edi
c00011a2:	eb ac                	jmp    c0001150 <dlmalloc+0x289>
c00011a4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00011a7:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00011aa:	83 e0 fc             	and    eax,0xfffffffc
c00011ad:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00011b0:	89 c3                	mov    ebx,eax
c00011b2:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00011b5:	29 f3                	sub    ebx,esi
c00011b7:	8d 14 01             	lea    edx,[ecx+eax*1]
c00011ba:	83 fb 0f             	cmp    ebx,0xf
c00011bd:	8d 41 08             	lea    eax,[ecx+0x8]
c00011c0:	77 09                	ja     c00011cb <dlmalloc+0x304>
c00011c2:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00011c6:	e9 82 00 00 00       	jmp    c000124d <dlmalloc+0x386>
c00011cb:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00011ce:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d4:	89 3d 7c c5 02 c0    	mov    DWORD PTR ds:0xc002c57c,edi
c00011da:	89 3d 80 c5 02 c0    	mov    DWORD PTR ds:0xc002c580,edi
c00011e0:	c7 47 08 74 c5 02 c0 	mov    DWORD PTR [edi+0x8],0xc002c574
c00011e7:	c7 47 0c 74 c5 02 c0 	mov    DWORD PTR [edi+0xc],0xc002c574
c00011ee:	77 06                	ja     c00011f6 <dlmalloc+0x32f>
c00011f0:	89 3d 70 c5 02 c0    	mov    DWORD PTR ds:0xc002c570,edi
c00011f6:	83 ce 01             	or     esi,0x1
c00011f9:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00011fc:	89 d9                	mov    ecx,ebx
c00011fe:	83 c9 01             	or     ecx,0x1
c0001201:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001204:	89 1a                	mov    DWORD PTR [edx],ebx
c0001206:	eb 45                	jmp    c000124d <dlmalloc+0x386>
c0001208:	a1 6c c5 02 c0       	mov    eax,ds:0xc002c56c
c000120d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001210:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001213:	83 e2 fc             	and    edx,0xfffffffc
c0001216:	39 d1                	cmp    ecx,edx
c0001218:	77 1e                	ja     c0001238 <dlmalloc+0x371>
c000121a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000121d:	89 f3                	mov    ebx,esi
c000121f:	89 0d 6c c5 02 c0    	mov    DWORD PTR ds:0xc002c56c,ecx
c0001225:	83 cb 01             	or     ebx,0x1
c0001228:	29 f2                	sub    edx,esi
c000122a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000122d:	83 ca 01             	or     edx,0x1
c0001230:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001233:	e9 2d fd ff ff       	jmp    c0000f65 <dlmalloc+0x9e>
c0001238:	83 c4 1c             	add    esp,0x1c
c000123b:	89 f0                	mov    eax,esi
c000123d:	5b                   	pop    ebx
c000123e:	ba 40 c5 02 c0       	mov    edx,0xc002c540
c0001243:	5e                   	pop    esi
c0001244:	5f                   	pop    edi
c0001245:	5d                   	pop    ebp
c0001246:	e9 16 fa ff ff       	jmp    c0000c61 <sYSMALLOc>
c000124b:	31 c0                	xor    eax,eax
c000124d:	83 c4 1c             	add    esp,0x1c
c0001250:	5b                   	pop    ebx
c0001251:	5e                   	pop    esi
c0001252:	5f                   	pop    edi
c0001253:	5d                   	pop    ebp
c0001254:	c3                   	ret    

c0001255 <iALLOc>:
c0001255:	55                   	push   ebp
c0001256:	89 c5                	mov    ebp,eax
c0001258:	57                   	push   edi
c0001259:	56                   	push   esi
c000125a:	53                   	push   ebx
c000125b:	83 ec 2c             	sub    esp,0x2c
c000125e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001262:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001266:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000126a:	83 3d 40 c5 02 c0 00 	cmp    DWORD PTR ds:0xc002c540,0x0
c0001271:	75 12                	jne    c0001285 <iALLOc+0x30>
c0001273:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001277:	b8 40 c5 02 c0       	mov    eax,0xc002c540
c000127c:	e8 04 f8 ff ff       	call   c0000a85 <malloc_consolidate>
c0001281:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001285:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000128a:	74 12                	je     c000129e <iALLOc+0x49>
c000128c:	85 ed                	test   ebp,ebp
c000128e:	0f 84 64 01 00 00    	je     c00013f8 <iALLOc+0x1a3>
c0001294:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000129c:	eb 33                	jmp    c00012d1 <iALLOc+0x7c>
c000129e:	85 ed                	test   ebp,ebp
c00012a0:	75 14                	jne    c00012b6 <iALLOc+0x61>
c00012a2:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00012aa:	83 c4 2c             	add    esp,0x2c
c00012ad:	5b                   	pop    ebx
c00012ae:	5e                   	pop    esi
c00012af:	5f                   	pop    edi
c00012b0:	5d                   	pop    ebp
c00012b1:	e9 11 fc ff ff       	jmp    c0000ec7 <dlmalloc>
c00012b6:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00012bd:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00012c5:	83 f8 0f             	cmp    eax,0xf
c00012c8:	76 07                	jbe    c00012d1 <iALLOc+0x7c>
c00012ca:	83 e0 f8             	and    eax,0xfffffff8
c00012cd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00012d1:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00012d6:	75 09                	jne    c00012e1 <iALLOc+0x8c>
c00012d8:	89 d0                	mov    eax,edx
c00012da:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00012dd:	31 f6                	xor    esi,esi
c00012df:	eb 3b                	jmp    c000131c <iALLOc+0xc7>
c00012e1:	8b 02                	mov    eax,DWORD PTR [edx]
c00012e3:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00012eb:	83 c0 0b             	add    eax,0xb
c00012ee:	83 f8 0f             	cmp    eax,0xf
c00012f1:	76 07                	jbe    c00012fa <iALLOc+0xa5>
c00012f3:	83 e0 f8             	and    eax,0xfffffff8
c00012f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00012fa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00012fe:	0f af f5             	imul   esi,ebp
c0001301:	eb 25                	jmp    c0001328 <iALLOc+0xd3>
c0001303:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001305:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001308:	bb 10 00 00 00       	mov    ebx,0x10
c000130d:	83 f9 0f             	cmp    ecx,0xf
c0001310:	76 05                	jbe    c0001317 <iALLOc+0xc2>
c0001312:	83 e1 f8             	and    ecx,0xfffffff8
c0001315:	89 cb                	mov    ebx,ecx
c0001317:	01 de                	add    esi,ebx
c0001319:	83 c0 04             	add    eax,0x4
c000131c:	39 c7                	cmp    edi,eax
c000131e:	75 e3                	jne    c0001303 <iALLOc+0xae>
c0001320:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001328:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000132c:	8b 1d 94 c8 02 c0    	mov    ebx,DWORD PTR ds:0xc002c894
c0001332:	83 ec 0c             	sub    esp,0xc
c0001335:	c7 05 94 c8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c894,0x0
c000133f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001343:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001347:	50                   	push   eax
c0001348:	e8 7a fb ff ff       	call   c0000ec7 <dlmalloc>
c000134d:	83 c4 10             	add    esp,0x10
c0001350:	89 1d 94 c8 02 c0    	mov    DWORD PTR ds:0xc002c894,ebx
c0001356:	85 c0                	test   eax,eax
c0001358:	0f 84 92 00 00 00    	je     c00013f0 <iALLOc+0x19b>
c000135e:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001361:	8d 78 f8             	lea    edi,[eax-0x8]
c0001364:	83 e3 fc             	and    ebx,0xfffffffc
c0001367:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000136b:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001370:	74 1e                	je     c0001390 <iALLOc+0x13b>
c0001372:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001376:	89 d9                	mov    ecx,ebx
c0001378:	52                   	push   edx
c0001379:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000137d:	83 e9 04             	sub    ecx,0x4
c0001380:	51                   	push   ecx
c0001381:	6a 00                	push   0x0
c0001383:	50                   	push   eax
c0001384:	e8 02 f3 ff ff       	call   c000068b <memset>
c0001389:	83 c4 10             	add    esp,0x10
c000138c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001390:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001395:	75 14                	jne    c00013ab <iALLOc+0x156>
c0001397:	8d 04 37             	lea    eax,[edi+esi*1]
c000139a:	29 f3                	sub    ebx,esi
c000139c:	8d 48 08             	lea    ecx,[eax+0x8]
c000139f:	83 cb 01             	or     ebx,0x1
c00013a2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013a6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00013a9:	89 f3                	mov    ebx,esi
c00013ab:	31 c0                	xor    eax,eax
c00013ad:	4d                   	dec    ebp
c00013ae:	8d 4f 08             	lea    ecx,[edi+0x8]
c00013b1:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00013b5:	39 c5                	cmp    ebp,eax
c00013b7:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00013ba:	74 2c                	je     c00013e8 <iALLOc+0x193>
c00013bc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00013c0:	85 c9                	test   ecx,ecx
c00013c2:	75 15                	jne    c00013d9 <iALLOc+0x184>
c00013c4:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00013c7:	8d 71 0b             	lea    esi,[ecx+0xb]
c00013ca:	b9 10 00 00 00       	mov    ecx,0x10
c00013cf:	83 fe 0f             	cmp    esi,0xf
c00013d2:	76 05                	jbe    c00013d9 <iALLOc+0x184>
c00013d4:	83 e6 f8             	and    esi,0xfffffff8
c00013d7:	89 f1                	mov    ecx,esi
c00013d9:	89 ce                	mov    esi,ecx
c00013db:	29 cb                	sub    ebx,ecx
c00013dd:	83 ce 01             	or     esi,0x1
c00013e0:	40                   	inc    eax
c00013e1:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00013e4:	01 cf                	add    edi,ecx
c00013e6:	eb c6                	jmp    c00013ae <iALLOc+0x159>
c00013e8:	83 cb 01             	or     ebx,0x1
c00013eb:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00013ee:	eb 08                	jmp    c00013f8 <iALLOc+0x1a3>
c00013f0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00013f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00013fc:	83 c4 2c             	add    esp,0x2c
c00013ff:	5b                   	pop    ebx
c0001400:	5e                   	pop    esi
c0001401:	5f                   	pop    edi
c0001402:	5d                   	pop    ebp
c0001403:	c3                   	ret    

c0001404 <dlrealloc>:
c0001404:	55                   	push   ebp
c0001405:	57                   	push   edi
c0001406:	56                   	push   esi
c0001407:	53                   	push   ebx
c0001408:	83 ec 1c             	sub    esp,0x1c
c000140b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000140f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001413:	85 db                	test   ebx,ebx
c0001415:	75 10                	jne    c0001427 <dlrealloc+0x23>
c0001417:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000141b:	83 c4 1c             	add    esp,0x1c
c000141e:	5b                   	pop    ebx
c000141f:	5e                   	pop    esi
c0001420:	5f                   	pop    edi
c0001421:	5d                   	pop    ebp
c0001422:	e9 a0 fa ff ff       	jmp    c0000ec7 <dlmalloc>
c0001427:	83 f8 df             	cmp    eax,0xffffffdf
c000142a:	76 07                	jbe    c0001433 <dlrealloc+0x2f>
c000142c:	31 db                	xor    ebx,ebx
c000142e:	e9 7c 01 00 00       	jmp    c00015af <dlrealloc+0x1ab>
c0001433:	83 c0 0b             	add    eax,0xb
c0001436:	bf 10 00 00 00       	mov    edi,0x10
c000143b:	83 f8 0f             	cmp    eax,0xf
c000143e:	76 05                	jbe    c0001445 <dlrealloc+0x41>
c0001440:	83 e0 f8             	and    eax,0xfffffff8
c0001443:	89 c7                	mov    edi,eax
c0001445:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001448:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000144b:	89 c6                	mov    esi,eax
c000144d:	83 e6 fc             	and    esi,0xfffffffc
c0001450:	a8 02                	test   al,0x2
c0001452:	75 d8                	jne    c000142c <dlrealloc+0x28>
c0001454:	39 f7                	cmp    edi,esi
c0001456:	0f 86 15 01 00 00    	jbe    c0001571 <dlrealloc+0x16d>
c000145c:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c0001460:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001463:	39 15 6c c5 02 c0    	cmp    DWORD PTR ds:0xc002c56c,edx
c0001469:	75 33                	jne    c000149e <dlrealloc+0x9a>
c000146b:	83 e1 fc             	and    ecx,0xfffffffc
c000146e:	01 f1                	add    ecx,esi
c0001470:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001474:	8d 4f 10             	lea    ecx,[edi+0x10]
c0001477:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000147b:	77 49                	ja     c00014c6 <dlrealloc+0xc2>
c000147d:	01 fd                	add    ebp,edi
c000147f:	83 e0 01             	and    eax,0x1
c0001482:	09 f8                	or     eax,edi
c0001484:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0001487:	89 2d 6c c5 02 c0    	mov    DWORD PTR ds:0xc002c56c,ebp
c000148d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001491:	29 f8                	sub    eax,edi
c0001493:	83 c8 01             	or     eax,0x1
c0001496:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001499:	e9 11 01 00 00       	jmp    c00015af <dlrealloc+0x1ab>
c000149e:	89 c8                	mov    eax,ecx
c00014a0:	83 e0 fe             	and    eax,0xfffffffe
c00014a3:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00014a8:	75 1c                	jne    c00014c6 <dlrealloc+0xc2>
c00014aa:	83 e1 fc             	and    ecx,0xfffffffc
c00014ad:	01 f1                	add    ecx,esi
c00014af:	39 cf                	cmp    edi,ecx
c00014b1:	77 13                	ja     c00014c6 <dlrealloc+0xc2>
c00014b3:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00014b6:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00014b9:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00014bc:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00014bf:	89 ce                	mov    esi,ecx
c00014c1:	e9 ab 00 00 00       	jmp    c0001571 <dlrealloc+0x16d>
c00014c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00014ca:	8d 47 f9             	lea    eax,[edi-0x7]
c00014cd:	83 ec 0c             	sub    esp,0xc
c00014d0:	50                   	push   eax
c00014d1:	e8 f1 f9 ff ff       	call   c0000ec7 <dlmalloc>
c00014d6:	83 c4 10             	add    esp,0x10
c00014d9:	89 c1                	mov    ecx,eax
c00014db:	85 c0                	test   eax,eax
c00014dd:	0f 84 49 ff ff ff    	je     c000142c <dlrealloc+0x28>
c00014e3:	8d 40 f8             	lea    eax,[eax-0x8]
c00014e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00014ea:	39 c2                	cmp    edx,eax
c00014ec:	75 0a                	jne    c00014f8 <dlrealloc+0xf4>
c00014ee:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00014f1:	83 e0 fc             	and    eax,0xfffffffc
c00014f4:	01 c6                	add    esi,eax
c00014f6:	eb 79                	jmp    c0001571 <dlrealloc+0x16d>
c00014f8:	83 ee 04             	sub    esi,0x4
c00014fb:	83 fe 27             	cmp    esi,0x27
c00014fe:	76 16                	jbe    c0001516 <dlrealloc+0x112>
c0001500:	50                   	push   eax
c0001501:	56                   	push   esi
c0001502:	53                   	push   ebx
c0001503:	51                   	push   ecx
c0001504:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001508:	e8 48 f1 ff ff       	call   c0000655 <memcpy>
c000150d:	83 c4 10             	add    esp,0x10
c0001510:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001514:	eb 43                	jmp    c0001559 <dlrealloc+0x155>
c0001516:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001518:	83 fe 13             	cmp    esi,0x13
c000151b:	89 01                	mov    DWORD PTR [ecx],eax
c000151d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001520:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001523:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001526:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001529:	76 2e                	jbe    c0001559 <dlrealloc+0x155>
c000152b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000152e:	83 fe 1b             	cmp    esi,0x1b
c0001531:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001534:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001537:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000153a:	76 1d                	jbe    c0001559 <dlrealloc+0x155>
c000153c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000153f:	83 fe 23             	cmp    esi,0x23
c0001542:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001545:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001548:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000154b:	76 0c                	jbe    c0001559 <dlrealloc+0x155>
c000154d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0001550:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c0001553:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0001556:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c0001559:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000155d:	83 ec 0c             	sub    esp,0xc
c0001560:	53                   	push   ebx
c0001561:	e8 06 f6 ff ff       	call   c0000b6c <dlfree>
c0001566:	83 c4 10             	add    esp,0x10
c0001569:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000156d:	89 cb                	mov    ebx,ecx
c000156f:	eb 3e                	jmp    c00015af <dlrealloc+0x1ab>
c0001571:	89 f2                	mov    edx,esi
c0001573:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001576:	29 fa                	sub    edx,edi
c0001578:	83 e1 01             	and    ecx,0x1
c000157b:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c000157f:	83 fa 0f             	cmp    edx,0xf
c0001582:	77 0b                	ja     c000158f <dlrealloc+0x18b>
c0001584:	09 ce                	or     esi,ecx
c0001586:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001589:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000158d:	eb 20                	jmp    c00015af <dlrealloc+0x1ab>
c000158f:	01 fd                	add    ebp,edi
c0001591:	83 ec 0c             	sub    esp,0xc
c0001594:	09 cf                	or     edi,ecx
c0001596:	83 ca 01             	or     edx,0x1
c0001599:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c000159c:	83 c5 08             	add    ebp,0x8
c000159f:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00015a2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015a6:	55                   	push   ebp
c00015a7:	e8 c0 f5 ff ff       	call   c0000b6c <dlfree>
c00015ac:	83 c4 10             	add    esp,0x10
c00015af:	83 c4 1c             	add    esp,0x1c
c00015b2:	89 d8                	mov    eax,ebx
c00015b4:	5b                   	pop    ebx
c00015b5:	5e                   	pop    esi
c00015b6:	5f                   	pop    edi
c00015b7:	5d                   	pop    ebp
c00015b8:	c3                   	ret    

c00015b9 <dlmemalign>:
c00015b9:	55                   	push   ebp
c00015ba:	57                   	push   edi
c00015bb:	56                   	push   esi
c00015bc:	53                   	push   ebx
c00015bd:	83 ec 0c             	sub    esp,0xc
c00015c0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00015c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00015c8:	83 fa 08             	cmp    edx,0x8
c00015cb:	77 10                	ja     c00015dd <dlmemalign+0x24>
c00015cd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00015d1:	83 c4 0c             	add    esp,0xc
c00015d4:	5b                   	pop    ebx
c00015d5:	5e                   	pop    esi
c00015d6:	5f                   	pop    edi
c00015d7:	5d                   	pop    ebp
c00015d8:	e9 ea f8 ff ff       	jmp    c0000ec7 <dlmalloc>
c00015dd:	bf 10 00 00 00       	mov    edi,0x10
c00015e2:	83 fa 0f             	cmp    edx,0xf
c00015e5:	76 13                	jbe    c00015fa <dlmemalign+0x41>
c00015e7:	8d 4a ff             	lea    ecx,[edx-0x1]
c00015ea:	85 d1                	test   ecx,edx
c00015ec:	75 04                	jne    c00015f2 <dlmemalign+0x39>
c00015ee:	89 d7                	mov    edi,edx
c00015f0:	eb 08                	jmp    c00015fa <dlmemalign+0x41>
c00015f2:	39 d7                	cmp    edi,edx
c00015f4:	73 04                	jae    c00015fa <dlmemalign+0x41>
c00015f6:	01 ff                	add    edi,edi
c00015f8:	eb f8                	jmp    c00015f2 <dlmemalign+0x39>
c00015fa:	83 f8 df             	cmp    eax,0xffffffdf
c00015fd:	76 07                	jbe    c0001606 <dlmemalign+0x4d>
c00015ff:	31 c0                	xor    eax,eax
c0001601:	e9 ce 00 00 00       	jmp    c00016d4 <dlmemalign+0x11b>
c0001606:	83 c0 0b             	add    eax,0xb
c0001609:	bd 10 00 00 00       	mov    ebp,0x10
c000160e:	83 f8 0f             	cmp    eax,0xf
c0001611:	76 05                	jbe    c0001618 <dlmemalign+0x5f>
c0001613:	83 e0 f8             	and    eax,0xfffffff8
c0001616:	89 c5                	mov    ebp,eax
c0001618:	83 ec 0c             	sub    esp,0xc
c000161b:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000161f:	50                   	push   eax
c0001620:	e8 a2 f8 ff ff       	call   c0000ec7 <dlmalloc>
c0001625:	83 c4 10             	add    esp,0x10
c0001628:	89 c1                	mov    ecx,eax
c000162a:	85 c0                	test   eax,eax
c000162c:	74 d1                	je     c00015ff <dlmemalign+0x46>
c000162e:	31 d2                	xor    edx,edx
c0001630:	8d 70 f8             	lea    esi,[eax-0x8]
c0001633:	f7 f7                	div    edi
c0001635:	85 d2                	test   edx,edx
c0001637:	74 62                	je     c000169b <dlmemalign+0xe2>
c0001639:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000163d:	89 f8                	mov    eax,edi
c000163f:	f7 d8                	neg    eax
c0001641:	21 c3                	and    ebx,eax
c0001643:	83 eb 08             	sub    ebx,0x8
c0001646:	89 d8                	mov    eax,ebx
c0001648:	29 f0                	sub    eax,esi
c000164a:	83 f8 0f             	cmp    eax,0xf
c000164d:	77 02                	ja     c0001651 <dlmemalign+0x98>
c000164f:	01 fb                	add    ebx,edi
c0001651:	89 d8                	mov    eax,ebx
c0001653:	29 f0                	sub    eax,esi
c0001655:	89 c6                	mov    esi,eax
c0001657:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000165a:	89 c2                	mov    edx,eax
c000165c:	83 e2 fc             	and    edx,0xfffffffc
c000165f:	29 f2                	sub    edx,esi
c0001661:	a8 02                	test   al,0x2
c0001663:	74 10                	je     c0001675 <dlmemalign+0xbc>
c0001665:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001668:	83 ca 02             	or     edx,0x2
c000166b:	8d 43 08             	lea    eax,[ebx+0x8]
c000166e:	89 33                	mov    DWORD PTR [ebx],esi
c0001670:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001673:	eb 5f                	jmp    c00016d4 <dlmemalign+0x11b>
c0001675:	83 ec 0c             	sub    esp,0xc
c0001678:	89 d0                	mov    eax,edx
c000167a:	83 c8 01             	or     eax,0x1
c000167d:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001680:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001685:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001688:	83 e0 01             	and    eax,0x1
c000168b:	09 f0                	or     eax,esi
c000168d:	89 de                	mov    esi,ebx
c000168f:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001692:	51                   	push   ecx
c0001693:	e8 d4 f4 ff ff       	call   c0000b6c <dlfree>
c0001698:	83 c4 10             	add    esp,0x10
c000169b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000169e:	a8 02                	test   al,0x2
c00016a0:	75 2f                	jne    c00016d1 <dlmemalign+0x118>
c00016a2:	83 e0 fc             	and    eax,0xfffffffc
c00016a5:	8d 55 10             	lea    edx,[ebp+0x10]
c00016a8:	39 c2                	cmp    edx,eax
c00016aa:	73 25                	jae    c00016d1 <dlmemalign+0x118>
c00016ac:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00016af:	83 ec 0c             	sub    esp,0xc
c00016b2:	29 e8                	sub    eax,ebp
c00016b4:	83 c2 08             	add    edx,0x8
c00016b7:	83 c8 01             	or     eax,0x1
c00016ba:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00016bd:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016c0:	83 e0 01             	and    eax,0x1
c00016c3:	09 c5                	or     ebp,eax
c00016c5:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00016c8:	52                   	push   edx
c00016c9:	e8 9e f4 ff ff       	call   c0000b6c <dlfree>
c00016ce:	83 c4 10             	add    esp,0x10
c00016d1:	8d 46 08             	lea    eax,[esi+0x8]
c00016d4:	83 c4 0c             	add    esp,0xc
c00016d7:	5b                   	pop    ebx
c00016d8:	5e                   	pop    esi
c00016d9:	5f                   	pop    edi
c00016da:	5d                   	pop    ebp
c00016db:	c3                   	ret    

c00016dc <dlcalloc>:
c00016dc:	53                   	push   ebx
c00016dd:	83 ec 14             	sub    esp,0x14
c00016e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00016e4:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00016e9:	50                   	push   eax
c00016ea:	e8 d8 f7 ff ff       	call   c0000ec7 <dlmalloc>
c00016ef:	83 c4 10             	add    esp,0x10
c00016f2:	89 c3                	mov    ebx,eax
c00016f4:	85 c0                	test   eax,eax
c00016f6:	74 77                	je     c000176f <dlcalloc+0x93>
c00016f8:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00016fb:	89 d0                	mov    eax,edx
c00016fd:	83 e0 fc             	and    eax,0xfffffffc
c0001700:	80 e2 02             	and    dl,0x2
c0001703:	75 5a                	jne    c000175f <dlcalloc+0x83>
c0001705:	83 e8 04             	sub    eax,0x4
c0001708:	83 f8 27             	cmp    eax,0x27
c000170b:	76 03                	jbe    c0001710 <dlcalloc+0x34>
c000170d:	51                   	push   ecx
c000170e:	eb 53                	jmp    c0001763 <dlcalloc+0x87>
c0001710:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001716:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000171d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001724:	83 f8 13             	cmp    eax,0x13
c0001727:	76 46                	jbe    c000176f <dlcalloc+0x93>
c0001729:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001730:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001737:	83 f8 1b             	cmp    eax,0x1b
c000173a:	76 33                	jbe    c000176f <dlcalloc+0x93>
c000173c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001743:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000174a:	83 f8 23             	cmp    eax,0x23
c000174d:	76 20                	jbe    c000176f <dlcalloc+0x93>
c000174f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001756:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000175d:	eb 10                	jmp    c000176f <dlcalloc+0x93>
c000175f:	83 e8 08             	sub    eax,0x8
c0001762:	52                   	push   edx
c0001763:	50                   	push   eax
c0001764:	6a 00                	push   0x0
c0001766:	53                   	push   ebx
c0001767:	e8 1f ef ff ff       	call   c000068b <memset>
c000176c:	83 c4 10             	add    esp,0x10
c000176f:	89 d8                	mov    eax,ebx
c0001771:	83 c4 08             	add    esp,0x8
c0001774:	5b                   	pop    ebx
c0001775:	c3                   	ret    

c0001776 <dlcfree>:
c0001776:	e9 f1 f3 ff ff       	jmp    c0000b6c <dlfree>

c000177b <dlindependent_calloc>:
c000177b:	83 ec 28             	sub    esp,0x28
c000177e:	b9 03 00 00 00       	mov    ecx,0x3
c0001783:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001787:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000178b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000178f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001793:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001797:	e8 b9 fa ff ff       	call   c0001255 <iALLOc>
c000179c:	83 c4 2c             	add    esp,0x2c
c000179f:	c3                   	ret    

c00017a0 <dlindependent_comalloc>:
c00017a0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00017a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00017a8:	31 c9                	xor    ecx,ecx
c00017aa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00017ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00017b2:	e9 9e fa ff ff       	jmp    c0001255 <iALLOc>

c00017b7 <dlvalloc>:
c00017b7:	83 ec 0c             	sub    esp,0xc
c00017ba:	83 3d 40 c5 02 c0 00 	cmp    DWORD PTR ds:0xc002c540,0x0
c00017c1:	75 0a                	jne    c00017cd <dlvalloc+0x16>
c00017c3:	b8 40 c5 02 c0       	mov    eax,0xc002c540
c00017c8:	e8 b8 f2 ff ff       	call   c0000a85 <malloc_consolidate>
c00017cd:	50                   	push   eax
c00017ce:	50                   	push   eax
c00017cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00017d3:	ff 35 9c c8 02 c0    	push   DWORD PTR ds:0xc002c89c
c00017d9:	e8 db fd ff ff       	call   c00015b9 <dlmemalign>
c00017de:	83 c4 1c             	add    esp,0x1c
c00017e1:	c3                   	ret    

c00017e2 <dlpvalloc>:
c00017e2:	83 ec 0c             	sub    esp,0xc
c00017e5:	83 3d 40 c5 02 c0 00 	cmp    DWORD PTR ds:0xc002c540,0x0
c00017ec:	75 0a                	jne    c00017f8 <dlpvalloc+0x16>
c00017ee:	b8 40 c5 02 c0       	mov    eax,0xc002c540
c00017f3:	e8 8d f2 ff ff       	call   c0000a85 <malloc_consolidate>
c00017f8:	a1 9c c8 02 c0       	mov    eax,ds:0xc002c89c
c00017fd:	89 c1                	mov    ecx,eax
c00017ff:	52                   	push   edx
c0001800:	f7 d9                	neg    ecx
c0001802:	52                   	push   edx
c0001803:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001807:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c000180b:	21 ca                	and    edx,ecx
c000180d:	52                   	push   edx
c000180e:	50                   	push   eax
c000180f:	e8 a5 fd ff ff       	call   c00015b9 <dlmemalign>
c0001814:	83 c4 1c             	add    esp,0x1c
c0001817:	c3                   	ret    

c0001818 <dlmalloc_trim>:
c0001818:	b8 40 c5 02 c0       	mov    eax,0xc002c540
c000181d:	e8 63 f2 ff ff       	call   c0000a85 <malloc_consolidate>
c0001822:	31 c0                	xor    eax,eax
c0001824:	c3                   	ret    

c0001825 <dlmalloc_usable_size>:
c0001825:	53                   	push   ebx
c0001826:	31 c0                	xor    eax,eax
c0001828:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000182c:	85 c9                	test   ecx,ecx
c000182e:	74 24                	je     c0001854 <dlmalloc_usable_size+0x2f>
c0001830:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001833:	f6 c2 02             	test   dl,0x2
c0001836:	74 08                	je     c0001840 <dlmalloc_usable_size+0x1b>
c0001838:	83 e2 fc             	and    edx,0xfffffffc
c000183b:	8d 42 f8             	lea    eax,[edx-0x8]
c000183e:	eb 14                	jmp    c0001854 <dlmalloc_usable_size+0x2f>
c0001840:	89 d3                	mov    ebx,edx
c0001842:	31 c0                	xor    eax,eax
c0001844:	83 e3 fe             	and    ebx,0xfffffffe
c0001847:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c000184c:	74 06                	je     c0001854 <dlmalloc_usable_size+0x2f>
c000184e:	83 e2 fc             	and    edx,0xfffffffc
c0001851:	8d 42 fc             	lea    eax,[edx-0x4]
c0001854:	5b                   	pop    ebx
c0001855:	c3                   	ret    

c0001856 <dlmallinfo>:
c0001856:	55                   	push   ebp
c0001857:	57                   	push   edi
c0001858:	56                   	push   esi
c0001859:	53                   	push   ebx
c000185a:	83 ec 08             	sub    esp,0x8
c000185d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001861:	83 3d 6c c5 02 c0 00 	cmp    DWORD PTR ds:0xc002c56c,0x0
c0001868:	75 0a                	jne    c0001874 <dlmallinfo+0x1e>
c000186a:	b8 40 c5 02 c0       	mov    eax,0xc002c540
c000186f:	e8 11 f2 ff ff       	call   c0000a85 <malloc_consolidate>
c0001874:	a1 6c c5 02 c0       	mov    eax,ds:0xc002c56c
c0001879:	31 ed                	xor    ebp,ebp
c000187b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000187e:	31 c9                	xor    ecx,ecx
c0001880:	83 e0 fc             	and    eax,0xfffffffc
c0001883:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001887:	31 c0                	xor    eax,eax
c0001889:	8b 14 85 44 c5 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3abc]
c0001890:	85 d2                	test   edx,edx
c0001892:	74 0e                	je     c00018a2 <dlmallinfo+0x4c>
c0001894:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001897:	45                   	inc    ebp
c0001898:	83 e6 fc             	and    esi,0xfffffffc
c000189b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000189e:	01 f1                	add    ecx,esi
c00018a0:	eb ee                	jmp    c0001890 <dlmallinfo+0x3a>
c00018a2:	40                   	inc    eax
c00018a3:	83 f8 0a             	cmp    eax,0xa
c00018a6:	75 e1                	jne    c0001889 <dlmallinfo+0x33>
c00018a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018ac:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00018b3:	8d 14 01             	lea    edx,[ecx+eax*1]
c00018b6:	b8 74 c5 02 c0       	mov    eax,0xc002c574
c00018bb:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00018be:	39 f0                	cmp    eax,esi
c00018c0:	74 10                	je     c00018d2 <dlmallinfo+0x7c>
c00018c2:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00018c5:	ff 04 24             	inc    DWORD PTR [esp]
c00018c8:	83 e7 fc             	and    edi,0xfffffffc
c00018cb:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00018ce:	01 fa                	add    edx,edi
c00018d0:	eb ec                	jmp    c00018be <dlmallinfo+0x68>
c00018d2:	83 c0 08             	add    eax,0x8
c00018d5:	3d 6c c8 02 c0       	cmp    eax,0xc002c86c
c00018da:	75 df                	jne    c00018bb <dlmallinfo+0x65>
c00018dc:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c00018df:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00018e2:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c00018e5:	a1 a8 c8 02 c0       	mov    eax,ds:0xc002c8a8
c00018ea:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00018ed:	89 03                	mov    DWORD PTR [ebx],eax
c00018ef:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c00018f2:	8b 35 90 c8 02 c0    	mov    esi,DWORD PTR ds:0xc002c890
c00018f8:	29 d0                	sub    eax,edx
c00018fa:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c00018fd:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001900:	8b 35 a4 c8 02 c0    	mov    esi,DWORD PTR ds:0xc002c8a4
c0001906:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000190a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c000190d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001910:	8b 35 b4 c8 02 c0    	mov    esi,DWORD PTR ds:0xc002c8b4
c0001916:	89 d8                	mov    eax,ebx
c0001918:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000191b:	83 c4 08             	add    esp,0x8
c000191e:	5b                   	pop    ebx
c000191f:	5e                   	pop    esi
c0001920:	5f                   	pop    edi
c0001921:	5d                   	pop    ebp
c0001922:	c2 04 00             	ret    0x4

c0001925 <dlmalloc_stats>:
c0001925:	83 ec 30             	sub    esp,0x30
c0001928:	8d 44 24 08          	lea    eax,[esp+0x8]
c000192c:	50                   	push   eax
c000192d:	e8 24 ff ff ff       	call   c0001856 <dlmallinfo>
c0001932:	83 c4 30             	add    esp,0x30
c0001935:	c3                   	ret    

c0001936 <dlmallopt>:
c0001936:	56                   	push   esi
c0001937:	b8 40 c5 02 c0       	mov    eax,0xc002c540
c000193c:	53                   	push   ebx
c000193d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001941:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001945:	e8 3b f1 ff ff       	call   c0000a85 <malloc_consolidate>
c000194a:	8d 46 04             	lea    eax,[esi+0x4]
c000194d:	83 f8 05             	cmp    eax,0x5
c0001950:	77 67                	ja     c00019b9 <dlmallopt+0x83>
c0001952:	ff 24 85 c4 7c 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd833c]
c0001959:	83 fb 50             	cmp    ebx,0x50
c000195c:	77 5b                	ja     c00019b9 <dlmallopt+0x83>
c000195e:	ba 08 00 00 00       	mov    edx,0x8
c0001963:	85 db                	test   ebx,ebx
c0001965:	74 12                	je     c0001979 <dlmallopt+0x43>
c0001967:	83 c3 0b             	add    ebx,0xb
c000196a:	ba 10 00 00 00       	mov    edx,0x10
c000196f:	83 fb 0f             	cmp    ebx,0xf
c0001972:	76 05                	jbe    c0001979 <dlmallopt+0x43>
c0001974:	89 da                	mov    edx,ebx
c0001976:	83 e2 f8             	and    edx,0xfffffff8
c0001979:	a1 40 c5 02 c0       	mov    eax,ds:0xc002c540
c000197e:	83 e0 03             	and    eax,0x3
c0001981:	09 d0                	or     eax,edx
c0001983:	a3 40 c5 02 c0       	mov    ds:0xc002c540,eax
c0001988:	eb 31                	jmp    c00019bb <dlmallopt+0x85>
c000198a:	89 1d 84 c8 02 c0    	mov    DWORD PTR ds:0xc002c884,ebx
c0001990:	eb 06                	jmp    c0001998 <dlmallopt+0x62>
c0001992:	89 1d 88 c8 02 c0    	mov    DWORD PTR ds:0xc002c888,ebx
c0001998:	be 01 00 00 00       	mov    esi,0x1
c000199d:	eb 1c                	jmp    c00019bb <dlmallopt+0x85>
c000199f:	89 1d 8c c8 02 c0    	mov    DWORD PTR ds:0xc002c88c,ebx
c00019a5:	eb f1                	jmp    c0001998 <dlmallopt+0x62>
c00019a7:	31 f6                	xor    esi,esi
c00019a9:	85 db                	test   ebx,ebx
c00019ab:	75 0e                	jne    c00019bb <dlmallopt+0x85>
c00019ad:	c7 05 94 c8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c894,0x0
c00019b7:	eb df                	jmp    c0001998 <dlmallopt+0x62>
c00019b9:	31 f6                	xor    esi,esi
c00019bb:	89 f0                	mov    eax,esi
c00019bd:	5b                   	pop    ebx
c00019be:	5e                   	pop    esi
c00019bf:	c3                   	ret    

c00019c0 <disk_status>:
c00019c0:	31 c0                	xor    eax,eax
c00019c2:	c3                   	ret    

c00019c3 <disk_initialize>:
c00019c3:	31 c0                	xor    eax,eax
c00019c5:	c3                   	ret    

c00019c6 <disk_read>:
c00019c6:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00019cb:	0f b6 04 85 00 e0 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd2000]
c00019d3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019d7:	e9 1e e3 01 00       	jmp    c001fcfa <fatWrapperReadDisk>

c00019dc <disk_write>:
c00019dc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00019e1:	0f b6 04 85 00 e0 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd2000]
c00019e9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019ed:	e9 4f e3 01 00       	jmp    c001fd41 <fatWrapperWriteDisk>

c00019f2 <disk_ioctl>:
c00019f2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00019f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00019fb:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a00:	0f b6 04 85 00 e0 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd2000]
c0001a08:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a0c:	e9 77 e3 01 00       	jmp    c001fd88 <fatWrapperIoctl>

c0001a11 <ld_word>:
c0001a11:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a15:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a18:	c1 e2 08             	shl    edx,0x8
c0001a1b:	09 d0                	or     eax,edx
c0001a1d:	c3                   	ret    

c0001a1e <ld_dword>:
c0001a1e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001a22:	89 d1                	mov    ecx,edx
c0001a24:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a28:	c1 e1 08             	shl    ecx,0x8
c0001a2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a2e:	09 ca                	or     edx,ecx
c0001a30:	c1 e2 08             	shl    edx,0x8
c0001a33:	09 d0                	or     eax,edx
c0001a35:	c3                   	ret    

c0001a36 <ld_qword>:
c0001a36:	57                   	push   edi
c0001a37:	56                   	push   esi
c0001a38:	53                   	push   ebx
c0001a39:	31 db                	xor    ebx,ebx
c0001a3b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001a3e:	89 df                	mov    edi,ebx
c0001a40:	89 ce                	mov    esi,ecx
c0001a42:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001a46:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a4a:	c1 e6 08             	shl    esi,0x8
c0001a4d:	09 f2                	or     edx,esi
c0001a4f:	89 d6                	mov    esi,edx
c0001a51:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001a55:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a59:	c1 e6 08             	shl    esi,0x8
c0001a5c:	09 f2                	or     edx,esi
c0001a5e:	89 d6                	mov    esi,edx
c0001a60:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a64:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a68:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a6b:	c1 e6 08             	shl    esi,0x8
c0001a6e:	89 fb                	mov    ebx,edi
c0001a70:	09 f2                	or     edx,esi
c0001a72:	89 d1                	mov    ecx,edx
c0001a74:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001a78:	c1 e1 08             	shl    ecx,0x8
c0001a7b:	89 da                	mov    edx,ebx
c0001a7d:	09 c8                	or     eax,ecx
c0001a7f:	5b                   	pop    ebx
c0001a80:	5e                   	pop    esi
c0001a81:	5f                   	pop    edi
c0001a82:	c3                   	ret    

c0001a83 <st_word>:
c0001a83:	66 89 10             	mov    WORD PTR [eax],dx
c0001a86:	c3                   	ret    

c0001a87 <st_dword>:
c0001a87:	89 10                	mov    DWORD PTR [eax],edx
c0001a89:	c3                   	ret    

c0001a8a <st_qword>:
c0001a8a:	89 10                	mov    DWORD PTR [eax],edx
c0001a8c:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001a8f:	c3                   	ret    

c0001a90 <mem_cpy>:
c0001a90:	85 c9                	test   ecx,ecx
c0001a92:	74 10                	je     c0001aa4 <mem_cpy+0x14>
c0001a94:	57                   	push   edi
c0001a95:	01 c1                	add    ecx,eax
c0001a97:	56                   	push   esi
c0001a98:	89 c7                	mov    edi,eax
c0001a9a:	89 d6                	mov    esi,edx
c0001a9c:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001a9d:	39 f9                	cmp    ecx,edi
c0001a9f:	75 fb                	jne    c0001a9c <mem_cpy+0xc>
c0001aa1:	5e                   	pop    esi
c0001aa2:	5f                   	pop    edi
c0001aa3:	c3                   	ret    
c0001aa4:	c3                   	ret    

c0001aa5 <mem_set>:
c0001aa5:	01 c1                	add    ecx,eax
c0001aa7:	40                   	inc    eax
c0001aa8:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001aab:	39 c8                	cmp    eax,ecx
c0001aad:	75 f8                	jne    c0001aa7 <mem_set+0x2>
c0001aaf:	c3                   	ret    

c0001ab0 <mem_cmp>:
c0001ab0:	57                   	push   edi
c0001ab1:	56                   	push   esi
c0001ab2:	89 c6                	mov    esi,eax
c0001ab4:	53                   	push   ebx
c0001ab5:	46                   	inc    esi
c0001ab6:	42                   	inc    edx
c0001ab7:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001abb:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001abf:	29 fb                	sub    ebx,edi
c0001ac1:	89 cf                	mov    edi,ecx
c0001ac3:	29 f7                	sub    edi,esi
c0001ac5:	01 c7                	add    edi,eax
c0001ac7:	74 04                	je     c0001acd <mem_cmp+0x1d>
c0001ac9:	85 db                	test   ebx,ebx
c0001acb:	74 e8                	je     c0001ab5 <mem_cmp+0x5>
c0001acd:	89 d8                	mov    eax,ebx
c0001acf:	5b                   	pop    ebx
c0001ad0:	5e                   	pop    esi
c0001ad1:	5f                   	pop    edi
c0001ad2:	c3                   	ret    

c0001ad3 <chk_chr>:
c0001ad3:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001ad6:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001ad9:	74 07                	je     c0001ae2 <chk_chr+0xf>
c0001adb:	39 d1                	cmp    ecx,edx
c0001add:	74 03                	je     c0001ae2 <chk_chr+0xf>
c0001adf:	40                   	inc    eax
c0001ae0:	eb f1                	jmp    c0001ad3 <chk_chr>
c0001ae2:	89 c8                	mov    eax,ecx
c0001ae4:	c3                   	ret    

c0001ae5 <dbc_1st>:
c0001ae5:	31 c0                	xor    eax,eax
c0001ae7:	c3                   	ret    

c0001ae8 <dbc_2nd>:
c0001ae8:	31 c0                	xor    eax,eax
c0001aea:	c3                   	ret    

c0001aeb <tchar2uni>:
c0001aeb:	57                   	push   edi
c0001aec:	89 c7                	mov    edi,eax
c0001aee:	56                   	push   esi
c0001aef:	53                   	push   ebx
c0001af0:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001af2:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001af4:	8d 73 01             	lea    esi,[ebx+0x1]
c0001af7:	84 c9                	test   cl,cl
c0001af9:	78 0a                	js     c0001b05 <tchar2uni+0x1a>
c0001afb:	0f b6 d1             	movzx  edx,cl
c0001afe:	89 f3                	mov    ebx,esi
c0001b00:	e9 9f 00 00 00       	jmp    c0001ba4 <tchar2uni+0xb9>
c0001b05:	88 ca                	mov    dl,cl
c0001b07:	83 e2 e0             	and    edx,0xffffffe0
c0001b0a:	80 fa c0             	cmp    dl,0xc0
c0001b0d:	75 0c                	jne    c0001b1b <tchar2uni+0x30>
c0001b0f:	89 ca                	mov    edx,ecx
c0001b11:	b9 01 00 00 00       	mov    ecx,0x1
c0001b16:	83 e2 1f             	and    edx,0x1f
c0001b19:	eb 2e                	jmp    c0001b49 <tchar2uni+0x5e>
c0001b1b:	88 ca                	mov    dl,cl
c0001b1d:	83 e2 f0             	and    edx,0xfffffff0
c0001b20:	80 fa e0             	cmp    dl,0xe0
c0001b23:	75 0c                	jne    c0001b31 <tchar2uni+0x46>
c0001b25:	89 ca                	mov    edx,ecx
c0001b27:	b9 02 00 00 00       	mov    ecx,0x2
c0001b2c:	83 e2 0f             	and    edx,0xf
c0001b2f:	eb 18                	jmp    c0001b49 <tchar2uni+0x5e>
c0001b31:	88 ca                	mov    dl,cl
c0001b33:	83 e2 f8             	and    edx,0xfffffff8
c0001b36:	88 d0                	mov    al,dl
c0001b38:	83 ca ff             	or     edx,0xffffffff
c0001b3b:	3c f0                	cmp    al,0xf0
c0001b3d:	75 6c                	jne    c0001bab <tchar2uni+0xc0>
c0001b3f:	89 ca                	mov    edx,ecx
c0001b41:	b9 03 00 00 00       	mov    ecx,0x3
c0001b46:	83 e2 07             	and    edx,0x7
c0001b49:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001b4d:	46                   	inc    esi
c0001b4e:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001b51:	88 c8                	mov    al,cl
c0001b53:	83 e0 c0             	and    eax,0xffffffc0
c0001b56:	3c 80                	cmp    al,0x80
c0001b58:	75 4e                	jne    c0001ba8 <tchar2uni+0xbd>
c0001b5a:	c1 e2 06             	shl    edx,0x6
c0001b5d:	83 e1 3f             	and    ecx,0x3f
c0001b60:	09 ca                	or     edx,ecx
c0001b62:	39 de                	cmp    esi,ebx
c0001b64:	75 e7                	jne    c0001b4d <tchar2uni+0x62>
c0001b66:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001b69:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001b6f:	77 37                	ja     c0001ba8 <tchar2uni+0xbd>
c0001b71:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001b77:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001b7d:	76 29                	jbe    c0001ba8 <tchar2uni+0xbd>
c0001b7f:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001b85:	76 1d                	jbe    c0001ba4 <tchar2uni+0xb9>
c0001b87:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001b8d:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001b93:	c1 e1 06             	shl    ecx,0x6
c0001b96:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001b9c:	09 ca                	or     edx,ecx
c0001b9e:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001ba4:	89 1f                	mov    DWORD PTR [edi],ebx
c0001ba6:	eb 03                	jmp    c0001bab <tchar2uni+0xc0>
c0001ba8:	83 ca ff             	or     edx,0xffffffff
c0001bab:	5b                   	pop    ebx
c0001bac:	89 d0                	mov    eax,edx
c0001bae:	5e                   	pop    esi
c0001baf:	5f                   	pop    edi
c0001bb0:	c3                   	ret    

c0001bb1 <put_utf>:
c0001bb1:	53                   	push   ebx
c0001bb2:	83 f8 7f             	cmp    eax,0x7f
c0001bb5:	89 c3                	mov    ebx,eax
c0001bb7:	b0 00                	mov    al,0x0
c0001bb9:	77 11                	ja     c0001bcc <put_utf+0x1b>
c0001bbb:	85 c9                	test   ecx,ecx
c0001bbd:	0f 84 e5 00 00 00    	je     c0001ca8 <put_utf+0xf7>
c0001bc3:	88 1a                	mov    BYTE PTR [edx],bl
c0001bc5:	b0 01                	mov    al,0x1
c0001bc7:	e9 dc 00 00 00       	jmp    c0001ca8 <put_utf+0xf7>
c0001bcc:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001bd2:	77 23                	ja     c0001bf7 <put_utf+0x46>
c0001bd4:	83 f9 01             	cmp    ecx,0x1
c0001bd7:	0f 86 cb 00 00 00    	jbe    c0001ca8 <put_utf+0xf7>
c0001bdd:	89 d8                	mov    eax,ebx
c0001bdf:	83 e3 3f             	and    ebx,0x3f
c0001be2:	c1 e8 06             	shr    eax,0x6
c0001be5:	83 cb 80             	or     ebx,0xffffff80
c0001be8:	83 c8 c0             	or     eax,0xffffffc0
c0001beb:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001bee:	88 02                	mov    BYTE PTR [edx],al
c0001bf0:	b0 02                	mov    al,0x2
c0001bf2:	e9 b1 00 00 00       	jmp    c0001ca8 <put_utf+0xf7>
c0001bf7:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001bfd:	77 40                	ja     c0001c3f <put_utf+0x8e>
c0001bff:	83 f9 02             	cmp    ecx,0x2
c0001c02:	0f 86 a0 00 00 00    	jbe    c0001ca8 <put_utf+0xf7>
c0001c08:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001c0e:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001c14:	0f 86 8e 00 00 00    	jbe    c0001ca8 <put_utf+0xf7>
c0001c1a:	89 d8                	mov    eax,ebx
c0001c1c:	c1 e8 0c             	shr    eax,0xc
c0001c1f:	83 c8 e0             	or     eax,0xffffffe0
c0001c22:	88 02                	mov    BYTE PTR [edx],al
c0001c24:	89 d8                	mov    eax,ebx
c0001c26:	83 e3 3f             	and    ebx,0x3f
c0001c29:	c1 e8 06             	shr    eax,0x6
c0001c2c:	83 cb 80             	or     ebx,0xffffff80
c0001c2f:	83 e0 3f             	and    eax,0x3f
c0001c32:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001c35:	83 c8 80             	or     eax,0xffffff80
c0001c38:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c3b:	b0 03                	mov    al,0x3
c0001c3d:	eb 69                	jmp    c0001ca8 <put_utf+0xf7>
c0001c3f:	83 f9 03             	cmp    ecx,0x3
c0001c42:	76 64                	jbe    c0001ca8 <put_utf+0xf7>
c0001c44:	89 d9                	mov    ecx,ebx
c0001c46:	0f b7 c3             	movzx  eax,bx
c0001c49:	66 31 c9             	xor    cx,cx
c0001c4c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001c52:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001c58:	c1 e9 06             	shr    ecx,0x6
c0001c5b:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001c61:	77 43                	ja     c0001ca6 <put_utf+0xf5>
c0001c63:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001c69:	77 3b                	ja     c0001ca6 <put_utf+0xf5>
c0001c6b:	09 cb                	or     ebx,ecx
c0001c6d:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001c73:	89 d8                	mov    eax,ebx
c0001c75:	c1 e8 12             	shr    eax,0x12
c0001c78:	83 c8 f0             	or     eax,0xfffffff0
c0001c7b:	88 02                	mov    BYTE PTR [edx],al
c0001c7d:	89 d8                	mov    eax,ebx
c0001c7f:	c1 e8 0c             	shr    eax,0xc
c0001c82:	83 e0 3f             	and    eax,0x3f
c0001c85:	83 c8 80             	or     eax,0xffffff80
c0001c88:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c8b:	89 d8                	mov    eax,ebx
c0001c8d:	83 e3 3f             	and    ebx,0x3f
c0001c90:	c1 e8 06             	shr    eax,0x6
c0001c93:	83 cb 80             	or     ebx,0xffffff80
c0001c96:	83 e0 3f             	and    eax,0x3f
c0001c99:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001c9c:	83 c8 80             	or     eax,0xffffff80
c0001c9f:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ca2:	b0 04                	mov    al,0x4
c0001ca4:	eb 02                	jmp    c0001ca8 <put_utf+0xf7>
c0001ca6:	31 c0                	xor    eax,eax
c0001ca8:	5b                   	pop    ebx
c0001ca9:	c3                   	ret    

c0001caa <clst2sect>:
c0001caa:	89 c1                	mov    ecx,eax
c0001cac:	83 ea 02             	sub    edx,0x2
c0001caf:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001cb2:	83 e8 02             	sub    eax,0x2
c0001cb5:	39 d0                	cmp    eax,edx
c0001cb7:	76 0d                	jbe    c0001cc6 <clst2sect+0x1c>
c0001cb9:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001cbd:	f7 e2                	mul    edx
c0001cbf:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001cc2:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001cc5:	c3                   	ret    
c0001cc6:	31 c0                	xor    eax,eax
c0001cc8:	31 d2                	xor    edx,edx
c0001cca:	c3                   	ret    

c0001ccb <clmt_clust>:
c0001ccb:	57                   	push   edi
c0001ccc:	89 cf                	mov    edi,ecx
c0001cce:	56                   	push   esi
c0001ccf:	89 d6                	mov    esi,edx
c0001cd1:	53                   	push   ebx
c0001cd2:	0f ac fe 09          	shrd   esi,edi,0x9
c0001cd6:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001cd9:	89 f2                	mov    edx,esi
c0001cdb:	8b 00                	mov    eax,DWORD PTR [eax]
c0001cdd:	c1 ef 09             	shr    edi,0x9
c0001ce0:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001ce4:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001ce7:	89 f9                	mov    ecx,edi
c0001ce9:	31 ff                	xor    edi,edi
c0001ceb:	57                   	push   edi
c0001cec:	56                   	push   esi
c0001ced:	51                   	push   ecx
c0001cee:	52                   	push   edx
c0001cef:	e8 a8 36 02 00       	call   c002539c <__udivdi3>
c0001cf4:	83 c4 10             	add    esp,0x10
c0001cf7:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001cf9:	85 d2                	test   edx,edx
c0001cfb:	74 10                	je     c0001d0d <clmt_clust+0x42>
c0001cfd:	39 d0                	cmp    eax,edx
c0001cff:	72 07                	jb     c0001d08 <clmt_clust+0x3d>
c0001d01:	29 d0                	sub    eax,edx
c0001d03:	83 c3 08             	add    ebx,0x8
c0001d06:	eb ef                	jmp    c0001cf7 <clmt_clust+0x2c>
c0001d08:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001d0b:	89 c2                	mov    edx,eax
c0001d0d:	5b                   	pop    ebx
c0001d0e:	89 d0                	mov    eax,edx
c0001d10:	5e                   	pop    esi
c0001d11:	5f                   	pop    edi
c0001d12:	c3                   	ret    

c0001d13 <pick_lfn>:
c0001d13:	55                   	push   ebp
c0001d14:	57                   	push   edi
c0001d15:	56                   	push   esi
c0001d16:	89 d6                	mov    esi,edx
c0001d18:	53                   	push   ebx
c0001d19:	89 c3                	mov    ebx,eax
c0001d1b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d1e:	e8 ee fc ff ff       	call   c0001a11 <ld_word>
c0001d23:	66 85 c0             	test   ax,ax
c0001d26:	74 04                	je     c0001d2c <pick_lfn+0x19>
c0001d28:	31 c0                	xor    eax,eax
c0001d2a:	eb 5c                	jmp    c0001d88 <pick_lfn+0x75>
c0001d2c:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001d2f:	bd 01 00 00 00       	mov    ebp,0x1
c0001d34:	83 e1 bf             	and    ecx,0xffffffbf
c0001d37:	31 ff                	xor    edi,edi
c0001d39:	49                   	dec    ecx
c0001d3a:	6b c9 0d             	imul   ecx,ecx,0xd
c0001d3d:	0f b6 87 e0 7d 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd8220]
c0001d44:	01 f0                	add    eax,esi
c0001d46:	e8 c6 fc ff ff       	call   c0001a11 <ld_word>
c0001d4b:	66 85 ed             	test   bp,bp
c0001d4e:	74 11                	je     c0001d61 <pick_lfn+0x4e>
c0001d50:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d56:	77 d0                	ja     c0001d28 <pick_lfn+0x15>
c0001d58:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001d5c:	89 c5                	mov    ebp,eax
c0001d5e:	41                   	inc    ecx
c0001d5f:	eb 04                	jmp    c0001d65 <pick_lfn+0x52>
c0001d61:	66 40                	inc    ax
c0001d63:	75 c3                	jne    c0001d28 <pick_lfn+0x15>
c0001d65:	47                   	inc    edi
c0001d66:	83 ff 0d             	cmp    edi,0xd
c0001d69:	75 d2                	jne    c0001d3d <pick_lfn+0x2a>
c0001d6b:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001d6e:	74 13                	je     c0001d83 <pick_lfn+0x70>
c0001d70:	66 85 ed             	test   bp,bp
c0001d73:	74 0e                	je     c0001d83 <pick_lfn+0x70>
c0001d75:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d7b:	77 ab                	ja     c0001d28 <pick_lfn+0x15>
c0001d7d:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001d83:	b8 01 00 00 00       	mov    eax,0x1
c0001d88:	5b                   	pop    ebx
c0001d89:	5e                   	pop    esi
c0001d8a:	5f                   	pop    edi
c0001d8b:	5d                   	pop    ebp
c0001d8c:	c3                   	ret    

c0001d8d <put_lfn>:
c0001d8d:	55                   	push   ebp
c0001d8e:	31 ed                	xor    ebp,ebp
c0001d90:	57                   	push   edi
c0001d91:	89 d7                	mov    edi,edx
c0001d93:	56                   	push   esi
c0001d94:	31 f6                	xor    esi,esi
c0001d96:	53                   	push   ebx
c0001d97:	83 ec 08             	sub    esp,0x8
c0001d9a:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d9d:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001da1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001da5:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001dab:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001dae:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001db1:	31 d2                	xor    edx,edx
c0001db3:	e8 cb fc ff ff       	call   c0001a83 <st_word>
c0001db8:	0f b6 d9             	movzx  ebx,cl
c0001dbb:	4b                   	dec    ebx
c0001dbc:	6b db 0d             	imul   ebx,ebx,0xd
c0001dbf:	66 83 fe ff          	cmp    si,0xffff
c0001dc3:	74 08                	je     c0001dcd <put_lfn+0x40>
c0001dc5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001dc8:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001dcc:	43                   	inc    ebx
c0001dcd:	0f b6 85 e0 7d 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd8220]
c0001dd4:	0f b7 d6             	movzx  edx,si
c0001dd7:	01 f8                	add    eax,edi
c0001dd9:	e8 a5 fc ff ff       	call   c0001a83 <st_word>
c0001dde:	66 85 f6             	test   si,si
c0001de1:	75 03                	jne    c0001de6 <put_lfn+0x59>
c0001de3:	83 ce ff             	or     esi,0xffffffff
c0001de6:	45                   	inc    ebp
c0001de7:	83 fd 0d             	cmp    ebp,0xd
c0001dea:	75 d3                	jne    c0001dbf <put_lfn+0x32>
c0001dec:	66 46                	inc    si
c0001dee:	74 0a                	je     c0001dfa <put_lfn+0x6d>
c0001df0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001df3:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001df8:	75 09                	jne    c0001e03 <put_lfn+0x76>
c0001dfa:	88 c8                	mov    al,cl
c0001dfc:	83 c8 40             	or     eax,0x40
c0001dff:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001e03:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001e07:	88 07                	mov    BYTE PTR [edi],al
c0001e09:	83 c4 08             	add    esp,0x8
c0001e0c:	5b                   	pop    ebx
c0001e0d:	5e                   	pop    esi
c0001e0e:	5f                   	pop    edi
c0001e0f:	5d                   	pop    ebp
c0001e10:	c3                   	ret    

c0001e11 <gen_numname>:
c0001e11:	57                   	push   edi
c0001e12:	89 cf                	mov    edi,ecx
c0001e14:	56                   	push   esi
c0001e15:	b9 0b 00 00 00       	mov    ecx,0xb
c0001e1a:	53                   	push   ebx
c0001e1b:	89 c6                	mov    esi,eax
c0001e1d:	83 ec 10             	sub    esp,0x10
c0001e20:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001e24:	e8 67 fc ff ff       	call   c0001a90 <mem_cpy>
c0001e29:	83 fb 05             	cmp    ebx,0x5
c0001e2c:	76 2d                	jbe    c0001e5b <gen_numname+0x4a>
c0001e2e:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001e31:	66 85 c0             	test   ax,ax
c0001e34:	74 25                	je     c0001e5b <gen_numname+0x4a>
c0001e36:	83 c7 02             	add    edi,0x2
c0001e39:	ba 10 00 00 00       	mov    edx,0x10
c0001e3e:	01 db                	add    ebx,ebx
c0001e40:	89 c1                	mov    ecx,eax
c0001e42:	66 d1 e8             	shr    ax,1
c0001e45:	83 e1 01             	and    ecx,0x1
c0001e48:	01 cb                	add    ebx,ecx
c0001e4a:	0f ba e3 10          	bt     ebx,0x10
c0001e4e:	73 06                	jae    c0001e56 <gen_numname+0x45>
c0001e50:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001e56:	4a                   	dec    edx
c0001e57:	75 e5                	jne    c0001e3e <gen_numname+0x2d>
c0001e59:	eb d3                	jmp    c0001e2e <gen_numname+0x1d>
c0001e5b:	b8 07 00 00 00       	mov    eax,0x7
c0001e60:	88 d9                	mov    cl,bl
c0001e62:	83 e1 0f             	and    ecx,0xf
c0001e65:	8d 51 30             	lea    edx,[ecx+0x30]
c0001e68:	80 fa 39             	cmp    dl,0x39
c0001e6b:	76 03                	jbe    c0001e70 <gen_numname+0x5f>
c0001e6d:	8d 51 37             	lea    edx,[ecx+0x37]
c0001e70:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001e73:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001e77:	89 da                	mov    edx,ebx
c0001e79:	c1 ea 04             	shr    edx,0x4
c0001e7c:	83 fb 0f             	cmp    ebx,0xf
c0001e7f:	76 06                	jbe    c0001e87 <gen_numname+0x76>
c0001e81:	89 c8                	mov    eax,ecx
c0001e83:	89 d3                	mov    ebx,edx
c0001e85:	eb d9                	jmp    c0001e60 <gen_numname+0x4f>
c0001e87:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001e8c:	31 d2                	xor    edx,edx
c0001e8e:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001e91:	8d 04 16             	lea    eax,[esi+edx*1]
c0001e94:	39 ca                	cmp    edx,ecx
c0001e96:	73 18                	jae    c0001eb0 <gen_numname+0x9f>
c0001e98:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e9b:	3c 20                	cmp    al,0x20
c0001e9d:	74 11                	je     c0001eb0 <gen_numname+0x9f>
c0001e9f:	e8 41 fc ff ff       	call   c0001ae5 <dbc_1st>
c0001ea4:	85 c0                	test   eax,eax
c0001ea6:	74 05                	je     c0001ead <gen_numname+0x9c>
c0001ea8:	39 d3                	cmp    ebx,edx
c0001eaa:	74 04                	je     c0001eb0 <gen_numname+0x9f>
c0001eac:	42                   	inc    edx
c0001ead:	42                   	inc    edx
c0001eae:	eb e1                	jmp    c0001e91 <gen_numname+0x80>
c0001eb0:	b0 20                	mov    al,0x20
c0001eb2:	83 f9 07             	cmp    ecx,0x7
c0001eb5:	77 05                	ja     c0001ebc <gen_numname+0xab>
c0001eb7:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001ebb:	41                   	inc    ecx
c0001ebc:	42                   	inc    edx
c0001ebd:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001ec1:	83 fa 07             	cmp    edx,0x7
c0001ec4:	76 ea                	jbe    c0001eb0 <gen_numname+0x9f>
c0001ec6:	83 c4 10             	add    esp,0x10
c0001ec9:	5b                   	pop    ebx
c0001eca:	5e                   	pop    esi
c0001ecb:	5f                   	pop    edi
c0001ecc:	c3                   	ret    

c0001ecd <sum_sfn>:
c0001ecd:	31 c9                	xor    ecx,ecx
c0001ecf:	31 d2                	xor    edx,edx
c0001ed1:	d0 ca                	ror    dl,1
c0001ed3:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001ed6:	41                   	inc    ecx
c0001ed7:	83 f9 0b             	cmp    ecx,0xb
c0001eda:	75 f5                	jne    c0001ed1 <sum_sfn+0x4>
c0001edc:	88 d0                	mov    al,dl
c0001ede:	c3                   	ret    

c0001edf <xdir_sum>:
c0001edf:	56                   	push   esi
c0001ee0:	31 c9                	xor    ecx,ecx
c0001ee2:	53                   	push   ebx
c0001ee3:	31 d2                	xor    edx,edx
c0001ee5:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001ee9:	43                   	inc    ebx
c0001eea:	c1 e3 05             	shl    ebx,0x5
c0001eed:	83 fa 02             	cmp    edx,0x2
c0001ef0:	74 0b                	je     c0001efd <xdir_sum+0x1e>
c0001ef2:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001ef6:	66 d1 c9             	ror    cx,1
c0001ef9:	01 f1                	add    ecx,esi
c0001efb:	eb 05                	jmp    c0001f02 <xdir_sum+0x23>
c0001efd:	ba 03 00 00 00       	mov    edx,0x3
c0001f02:	42                   	inc    edx
c0001f03:	39 d3                	cmp    ebx,edx
c0001f05:	77 e6                	ja     c0001eed <xdir_sum+0xe>
c0001f07:	89 c8                	mov    eax,ecx
c0001f09:	5b                   	pop    ebx
c0001f0a:	5e                   	pop    esi
c0001f0b:	c3                   	ret    

c0001f0c <xsum32>:
c0001f0c:	d1 ca                	ror    edx,1
c0001f0e:	0f b6 c0             	movzx  eax,al
c0001f11:	01 d0                	add    eax,edx
c0001f13:	c3                   	ret    

c0001f14 <get_xfileinfo>:
c0001f14:	55                   	push   ebp
c0001f15:	31 c9                	xor    ecx,ecx
c0001f17:	57                   	push   edi
c0001f18:	bd 40 00 00 00       	mov    ebp,0x40
c0001f1d:	56                   	push   esi
c0001f1e:	31 ff                	xor    edi,edi
c0001f20:	53                   	push   ebx
c0001f21:	89 c6                	mov    esi,eax
c0001f23:	83 ec 0c             	sub    esp,0xc
c0001f26:	89 d3                	mov    ebx,edx
c0001f28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001f2f:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001f33:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001f36:	76 6d                	jbe    c0001fa5 <get_xfileinfo+0x91>
c0001f38:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001f3e:	76 0b                	jbe    c0001f4b <get_xfileinfo+0x37>
c0001f40:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001f44:	bf 01 00 00 00       	mov    edi,0x1
c0001f49:	eb 63                	jmp    c0001fae <get_xfileinfo+0x9a>
c0001f4b:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001f51:	75 03                	jne    c0001f56 <get_xfileinfo+0x42>
c0001f53:	83 c5 02             	add    ebp,0x2
c0001f56:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001f59:	83 c5 02             	add    ebp,0x2
c0001f5c:	e8 b0 fa ff ff       	call   c0001a11 <ld_word>
c0001f61:	ff 04 24             	inc    DWORD PTR [esp]
c0001f64:	66 85 c9             	test   cx,cx
c0001f67:	75 0d                	jne    c0001f76 <get_xfileinfo+0x62>
c0001f69:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001f6f:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001f74:	76 2b                	jbe    c0001fa1 <get_xfileinfo+0x8d>
c0001f76:	c1 e1 10             	shl    ecx,0x10
c0001f79:	ba ff 00 00 00       	mov    edx,0xff
c0001f7e:	0f b7 c0             	movzx  eax,ax
c0001f81:	29 fa                	sub    edx,edi
c0001f83:	09 c8                	or     eax,ecx
c0001f85:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001f89:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001f8d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001f91:	e8 1b fc ff ff       	call   c0001bb1 <put_utf>
c0001f96:	84 c0                	test   al,al
c0001f98:	74 a6                	je     c0001f40 <get_xfileinfo+0x2c>
c0001f9a:	0f b6 c0             	movzx  eax,al
c0001f9d:	01 c7                	add    edi,eax
c0001f9f:	31 c0                	xor    eax,eax
c0001fa1:	89 c1                	mov    ecx,eax
c0001fa3:	eb 8a                	jmp    c0001f2f <get_xfileinfo+0x1b>
c0001fa5:	85 ff                	test   edi,edi
c0001fa7:	74 97                	je     c0001f40 <get_xfileinfo+0x2c>
c0001fa9:	66 85 c9             	test   cx,cx
c0001fac:	75 92                	jne    c0001f40 <get_xfileinfo+0x2c>
c0001fae:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001fb3:	31 c0                	xor    eax,eax
c0001fb5:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001fb9:	31 d2                	xor    edx,edx
c0001fbb:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001fbe:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001fc1:	80 e1 10             	and    cl,0x10
c0001fc4:	75 08                	jne    c0001fce <get_xfileinfo+0xba>
c0001fc6:	8d 46 38             	lea    eax,[esi+0x38]
c0001fc9:	e8 68 fa ff ff       	call   c0001a36 <ld_qword>
c0001fce:	89 03                	mov    DWORD PTR [ebx],eax
c0001fd0:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001fd3:	8d 46 0c             	lea    eax,[esi+0xc]
c0001fd6:	e8 36 fa ff ff       	call   c0001a11 <ld_word>
c0001fdb:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0001fdf:	8d 46 0e             	lea    eax,[esi+0xe]
c0001fe2:	e8 2a fa ff ff       	call   c0001a11 <ld_word>
c0001fe7:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0001feb:	83 c4 0c             	add    esp,0xc
c0001fee:	5b                   	pop    ebx
c0001fef:	5e                   	pop    esi
c0001ff0:	5f                   	pop    edi
c0001ff1:	5d                   	pop    ebp
c0001ff2:	c3                   	ret    

c0001ff3 <get_ldnumber>:
c0001ff3:	8b 10                	mov    edx,DWORD PTR [eax]
c0001ff5:	85 d2                	test   edx,edx
c0001ff7:	74 14                	je     c000200d <get_ldnumber+0x1a>
c0001ff9:	56                   	push   esi
c0001ffa:	53                   	push   ebx
c0001ffb:	89 d3                	mov    ebx,edx
c0001ffd:	43                   	inc    ebx
c0001ffe:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002001:	80 f9 1f             	cmp    cl,0x1f
c0002004:	76 0d                	jbe    c0002013 <get_ldnumber+0x20>
c0002006:	80 f9 3a             	cmp    cl,0x3a
c0002009:	75 f2                	jne    c0001ffd <get_ldnumber+0xa>
c000200b:	eb 0a                	jmp    c0002017 <get_ldnumber+0x24>
c000200d:	83 c9 ff             	or     ecx,0xffffffff
c0002010:	89 c8                	mov    eax,ecx
c0002012:	c3                   	ret    
c0002013:	31 c9                	xor    ecx,ecx
c0002015:	eb 24                	jmp    c000203b <get_ldnumber+0x48>
c0002017:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000201a:	8d 4e d0             	lea    ecx,[esi-0x30]
c000201d:	80 f9 09             	cmp    cl,0x9
c0002020:	77 16                	ja     c0002038 <get_ldnumber+0x45>
c0002022:	83 c2 02             	add    edx,0x2
c0002025:	83 c9 ff             	or     ecx,0xffffffff
c0002028:	39 d3                	cmp    ebx,edx
c000202a:	75 0f                	jne    c000203b <get_ldnumber+0x48>
c000202c:	89 f2                	mov    edx,esi
c000202e:	89 18                	mov    DWORD PTR [eax],ebx
c0002030:	0f be ca             	movsx  ecx,dl
c0002033:	83 e9 30             	sub    ecx,0x30
c0002036:	eb 03                	jmp    c000203b <get_ldnumber+0x48>
c0002038:	83 c9 ff             	or     ecx,0xffffffff
c000203b:	89 c8                	mov    eax,ecx
c000203d:	5b                   	pop    ebx
c000203e:	5e                   	pop    esi
c000203f:	c3                   	ret    

c0002040 <crc32>:
c0002040:	56                   	push   esi
c0002041:	89 d6                	mov    esi,edx
c0002043:	53                   	push   ebx
c0002044:	b2 01                	mov    dl,0x1
c0002046:	bb 08 00 00 00       	mov    ebx,0x8
c000204b:	89 f1                	mov    ecx,esi
c000204d:	84 d1                	test   cl,dl
c000204f:	0f 95 c1             	setne  cl
c0002052:	0f b6 c9             	movzx  ecx,cl
c0002055:	31 c1                	xor    ecx,eax
c0002057:	89 c8                	mov    eax,ecx
c0002059:	d1 e8                	shr    eax,1
c000205b:	80 e1 01             	and    cl,0x1
c000205e:	74 05                	je     c0002065 <crc32+0x25>
c0002060:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0002065:	d1 e2                	shl    edx,1
c0002067:	4b                   	dec    ebx
c0002068:	75 e1                	jne    c000204b <crc32+0xb>
c000206a:	5b                   	pop    ebx
c000206b:	5e                   	pop    esi
c000206c:	c3                   	ret    

c000206d <test_gpt_header>:
c000206d:	55                   	push   ebp
c000206e:	b9 10 00 00 00       	mov    ecx,0x10
c0002073:	57                   	push   edi
c0002074:	ba e0 7c 02 c0       	mov    edx,0xc0027ce0
c0002079:	56                   	push   esi
c000207a:	31 ff                	xor    edi,edi
c000207c:	53                   	push   ebx
c000207d:	89 c3                	mov    ebx,eax
c000207f:	e8 2c fa ff ff       	call   c0001ab0 <mem_cmp>
c0002084:	85 c0                	test   eax,eax
c0002086:	75 55                	jne    c00020dd <test_gpt_header+0x70>
c0002088:	89 c7                	mov    edi,eax
c000208a:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c000208f:	83 ce ff             	or     esi,0xffffffff
c0002092:	31 d2                	xor    edx,edx
c0002094:	83 fd 03             	cmp    ebp,0x3
c0002097:	76 05                	jbe    c000209e <test_gpt_header+0x31>
c0002099:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c000209e:	89 f0                	mov    eax,esi
c00020a0:	45                   	inc    ebp
c00020a1:	e8 9a ff ff ff       	call   c0002040 <crc32>
c00020a6:	83 fd 4c             	cmp    ebp,0x4c
c00020a9:	89 c6                	mov    esi,eax
c00020ab:	75 e5                	jne    c0002092 <test_gpt_header+0x25>
c00020ad:	8d 43 10             	lea    eax,[ebx+0x10]
c00020b0:	f7 d6                	not    esi
c00020b2:	e8 67 f9 ff ff       	call   c0001a1e <ld_dword>
c00020b7:	39 c6                	cmp    esi,eax
c00020b9:	75 22                	jne    c00020dd <test_gpt_header+0x70>
c00020bb:	8d 43 54             	lea    eax,[ebx+0x54]
c00020be:	e8 5b f9 ff ff       	call   c0001a1e <ld_dword>
c00020c3:	83 c0 80             	add    eax,0xffffff80
c00020c6:	75 15                	jne    c00020dd <test_gpt_header+0x70>
c00020c8:	8d 43 50             	lea    eax,[ebx+0x50]
c00020cb:	e8 4e f9 ff ff       	call   c0001a1e <ld_dword>
c00020d0:	3d 80 00 00 00       	cmp    eax,0x80
c00020d5:	0f 96 c0             	setbe  al
c00020d8:	0f b6 c0             	movzx  eax,al
c00020db:	89 c7                	mov    edi,eax
c00020dd:	5b                   	pop    ebx
c00020de:	89 f8                	mov    eax,edi
c00020e0:	5e                   	pop    esi
c00020e1:	5f                   	pop    edi
c00020e2:	5d                   	pop    ebp
c00020e3:	c3                   	ret    

c00020e4 <make_rand>:
c00020e4:	56                   	push   esi
c00020e5:	85 c0                	test   eax,eax
c00020e7:	53                   	push   ebx
c00020e8:	75 05                	jne    c00020ef <make_rand+0xb>
c00020ea:	b8 01 00 00 00       	mov    eax,0x1
c00020ef:	01 d1                	add    ecx,edx
c00020f1:	bb 08 00 00 00       	mov    ebx,0x8
c00020f6:	89 c6                	mov    esi,eax
c00020f8:	d1 e8                	shr    eax,1
c00020fa:	83 e6 01             	and    esi,0x1
c00020fd:	85 f6                	test   esi,esi
c00020ff:	74 05                	je     c0002106 <make_rand+0x22>
c0002101:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002106:	4b                   	dec    ebx
c0002107:	75 ed                	jne    c00020f6 <make_rand+0x12>
c0002109:	42                   	inc    edx
c000210a:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000210d:	39 ca                	cmp    edx,ecx
c000210f:	75 e0                	jne    c00020f1 <make_rand+0xd>
c0002111:	5b                   	pop    ebx
c0002112:	5e                   	pop    esi
c0002113:	c3                   	ret    

c0002114 <validate>:
c0002114:	56                   	push   esi
c0002115:	53                   	push   ebx
c0002116:	89 d6                	mov    esi,edx
c0002118:	51                   	push   ecx
c0002119:	85 c0                	test   eax,eax
c000211b:	75 09                	jne    c0002126 <validate+0x12>
c000211d:	b8 09 00 00 00       	mov    eax,0x9
c0002122:	31 c9                	xor    ecx,ecx
c0002124:	eb 2f                	jmp    c0002155 <validate+0x41>
c0002126:	89 c3                	mov    ebx,eax
c0002128:	8b 00                	mov    eax,DWORD PTR [eax]
c000212a:	85 c0                	test   eax,eax
c000212c:	74 ef                	je     c000211d <validate+0x9>
c000212e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002131:	74 ea                	je     c000211d <validate+0x9>
c0002133:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002137:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000213b:	75 e0                	jne    c000211d <validate+0x9>
c000213d:	83 ec 0c             	sub    esp,0xc
c0002140:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002144:	50                   	push   eax
c0002145:	e8 76 f8 ff ff       	call   c00019c0 <disk_status>
c000214a:	83 c4 10             	add    esp,0x10
c000214d:	a8 01                	test   al,0x1
c000214f:	75 cc                	jne    c000211d <validate+0x9>
c0002151:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002153:	31 c0                	xor    eax,eax
c0002155:	89 0e                	mov    DWORD PTR [esi],ecx
c0002157:	5a                   	pop    edx
c0002158:	5b                   	pop    ebx
c0002159:	5e                   	pop    esi
c000215a:	c3                   	ret    

c000215b <sync_window>:
c000215b:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c000215f:	0f 84 85 00 00 00    	je     c00021ea <sync_window+0x8f>
c0002165:	55                   	push   ebp
c0002166:	8d 68 54             	lea    ebp,[eax+0x54]
c0002169:	57                   	push   edi
c000216a:	56                   	push   esi
c000216b:	53                   	push   ebx
c000216c:	89 c3                	mov    ebx,eax
c000216e:	83 ec 28             	sub    esp,0x28
c0002171:	6a 01                	push   0x1
c0002173:	ff 70 50             	push   DWORD PTR [eax+0x50]
c0002176:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c0002179:	55                   	push   ebp
c000217a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000217e:	50                   	push   eax
c000217f:	e8 58 f8 ff ff       	call   c00019dc <disk_write>
c0002184:	83 c4 20             	add    esp,0x20
c0002187:	ba 01 00 00 00       	mov    edx,0x1
c000218c:	85 c0                	test   eax,eax
c000218e:	75 50                	jne    c00021e0 <sync_window+0x85>
c0002190:	31 ff                	xor    edi,edi
c0002192:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0002195:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0002199:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000219d:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00021a0:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00021a3:	89 c6                	mov    esi,eax
c00021a5:	89 d7                	mov    edi,edx
c00021a7:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00021aa:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00021ae:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00021b1:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00021b5:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00021b9:	73 23                	jae    c00021de <sync_window+0x83>
c00021bb:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00021bf:	75 1d                	jne    c00021de <sync_window+0x83>
c00021c1:	83 ec 0c             	sub    esp,0xc
c00021c4:	6a 01                	push   0x1
c00021c6:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00021ca:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00021ce:	52                   	push   edx
c00021cf:	50                   	push   eax
c00021d0:	55                   	push   ebp
c00021d1:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00021d5:	50                   	push   eax
c00021d6:	e8 01 f8 ff ff       	call   c00019dc <disk_write>
c00021db:	83 c4 20             	add    esp,0x20
c00021de:	31 d2                	xor    edx,edx
c00021e0:	83 c4 1c             	add    esp,0x1c
c00021e3:	89 d0                	mov    eax,edx
c00021e5:	5b                   	pop    ebx
c00021e6:	5e                   	pop    esi
c00021e7:	5f                   	pop    edi
c00021e8:	5d                   	pop    ebp
c00021e9:	c3                   	ret    
c00021ea:	31 d2                	xor    edx,edx
c00021ec:	89 d0                	mov    eax,edx
c00021ee:	c3                   	ret    

c00021ef <move_window>:
c00021ef:	56                   	push   esi
c00021f0:	53                   	push   ebx
c00021f1:	89 c3                	mov    ebx,eax
c00021f3:	83 ec 14             	sub    esp,0x14
c00021f6:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c00021f9:	75 07                	jne    c0002202 <move_window+0x13>
c00021fb:	31 f6                	xor    esi,esi
c00021fd:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002200:	74 59                	je     c000225b <move_window+0x6c>
c0002202:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002206:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000220a:	89 d8                	mov    eax,ebx
c000220c:	e8 4a ff ff ff       	call   c000215b <sync_window>
c0002211:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002215:	89 c6                	mov    esi,eax
c0002217:	85 c0                	test   eax,eax
c0002219:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000221d:	75 3c                	jne    c000225b <move_window+0x6c>
c000221f:	83 ec 0c             	sub    esp,0xc
c0002222:	8d 43 54             	lea    eax,[ebx+0x54]
c0002225:	6a 01                	push   0x1
c0002227:	51                   	push   ecx
c0002228:	52                   	push   edx
c0002229:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000222d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002231:	50                   	push   eax
c0002232:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002236:	50                   	push   eax
c0002237:	e8 8a f7 ff ff       	call   c00019c6 <disk_read>
c000223c:	83 c4 20             	add    esp,0x20
c000223f:	85 c0                	test   eax,eax
c0002241:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002245:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002249:	74 0a                	je     c0002255 <move_window+0x66>
c000224b:	83 ca ff             	or     edx,0xffffffff
c000224e:	be 01 00 00 00       	mov    esi,0x1
c0002253:	89 d1                	mov    ecx,edx
c0002255:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c0002258:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c000225b:	89 f0                	mov    eax,esi
c000225d:	83 c4 14             	add    esp,0x14
c0002260:	5b                   	pop    ebx
c0002261:	5e                   	pop    esi
c0002262:	c3                   	ret    

c0002263 <check_fs>:
c0002263:	53                   	push   ebx
c0002264:	89 c3                	mov    ebx,eax
c0002266:	83 ec 08             	sub    esp,0x8
c0002269:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000226d:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c0002274:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c000227b:	e8 6f ff ff ff       	call   c00021ef <move_window>
c0002280:	ba 04 00 00 00       	mov    edx,0x4
c0002285:	85 c0                	test   eax,eax
c0002287:	0f 85 89 00 00 00    	jne    c0002316 <check_fs+0xb3>
c000228d:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0002293:	e8 79 f7 ff ff       	call   c0001a11 <ld_word>
c0002298:	ba 03 00 00 00       	mov    edx,0x3
c000229d:	66 3d 55 aa          	cmp    ax,0xaa55
c00022a1:	75 73                	jne    c0002316 <check_fs+0xb3>
c00022a3:	ba 00 7e 02 c0       	mov    edx,0xc0027e00
c00022a8:	8d 43 54             	lea    eax,[ebx+0x54]
c00022ab:	b9 0b 00 00 00       	mov    ecx,0xb
c00022b0:	e8 fb f7 ff ff       	call   c0001ab0 <mem_cmp>
c00022b5:	ba 01 00 00 00       	mov    edx,0x1
c00022ba:	85 c0                	test   eax,eax
c00022bc:	74 58                	je     c0002316 <check_fs+0xb3>
c00022be:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00022c1:	8d 50 18             	lea    edx,[eax+0x18]
c00022c4:	80 fa 01             	cmp    dl,0x1
c00022c7:	76 09                	jbe    c00022d2 <check_fs+0x6f>
c00022c9:	ba 02 00 00 00       	mov    edx,0x2
c00022ce:	3c eb                	cmp    al,0xeb
c00022d0:	75 44                	jne    c0002316 <check_fs+0xb3>
c00022d2:	ba b0 ad 02 c0       	mov    edx,0xc002adb0
c00022d7:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00022dd:	b9 03 00 00 00       	mov    ecx,0x3
c00022e2:	e8 c9 f7 ff ff       	call   c0001ab0 <mem_cmp>
c00022e7:	31 d2                	xor    edx,edx
c00022e9:	85 c0                	test   eax,eax
c00022eb:	74 29                	je     c0002316 <check_fs+0xb3>
c00022ed:	ba 0c 7e 02 c0       	mov    edx,0xc0027e0c
c00022f2:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c00022f8:	b9 05 00 00 00       	mov    ecx,0x5
c00022fd:	e8 ae f7 ff ff       	call   c0001ab0 <mem_cmp>
c0002302:	31 d2                	xor    edx,edx
c0002304:	85 c0                	test   eax,eax
c0002306:	74 0e                	je     c0002316 <check_fs+0xb3>
c0002308:	31 d2                	xor    edx,edx
c000230a:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002311:	0f 95 c2             	setne  dl
c0002314:	01 d2                	add    edx,edx
c0002316:	89 d0                	mov    eax,edx
c0002318:	83 c4 08             	add    esp,0x8
c000231b:	5b                   	pop    ebx
c000231c:	c3                   	ret    

c000231d <find_volume>:
c000231d:	55                   	push   ebp
c000231e:	31 c9                	xor    ecx,ecx
c0002320:	57                   	push   edi
c0002321:	56                   	push   esi
c0002322:	89 d6                	mov    esi,edx
c0002324:	53                   	push   ebx
c0002325:	31 d2                	xor    edx,edx
c0002327:	83 ec 3c             	sub    esp,0x3c
c000232a:	89 c3                	mov    ebx,eax
c000232c:	e8 32 ff ff ff       	call   c0002263 <check_fs>
c0002331:	83 f8 02             	cmp    eax,0x2
c0002334:	74 0e                	je     c0002344 <find_volume+0x27>
c0002336:	0f 87 5d 01 00 00    	ja     c0002499 <find_volume+0x17c>
c000233c:	85 f6                	test   esi,esi
c000233e:	0f 84 55 01 00 00    	je     c0002499 <find_volume+0x17c>
c0002344:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000234b:	0f 85 dd 00 00 00    	jne    c000242e <find_volume+0x111>
c0002351:	31 c9                	xor    ecx,ecx
c0002353:	ba 01 00 00 00       	mov    edx,0x1
c0002358:	89 d8                	mov    eax,ebx
c000235a:	e8 90 fe ff ff       	call   c00021ef <move_window>
c000235f:	85 c0                	test   eax,eax
c0002361:	74 0a                	je     c000236d <find_volume+0x50>
c0002363:	b8 04 00 00 00       	mov    eax,0x4
c0002368:	e9 2c 01 00 00       	jmp    c0002499 <find_volume+0x17c>
c000236d:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002370:	89 e8                	mov    eax,ebp
c0002372:	e8 f6 fc ff ff       	call   c000206d <test_gpt_header>
c0002377:	85 c0                	test   eax,eax
c0002379:	75 0a                	jne    c0002385 <find_volume+0x68>
c000237b:	b8 03 00 00 00       	mov    eax,0x3
c0002380:	e9 14 01 00 00       	jmp    c0002499 <find_volume+0x17c>
c0002385:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c000238b:	e8 8e f6 ff ff       	call   c0001a1e <ld_dword>
c0002390:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002394:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c000239a:	e8 97 f6 ff ff       	call   c0001a36 <ld_qword>
c000239f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00023a7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00023ab:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00023af:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00023b7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00023bb:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00023bf:	74 ba                	je     c000237b <find_volume+0x5e>
c00023c1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00023c5:	31 c9                	xor    ecx,ecx
c00023c7:	c1 e7 07             	shl    edi,0x7
c00023ca:	89 d8                	mov    eax,ebx
c00023cc:	89 fa                	mov    edx,edi
c00023ce:	c1 ea 09             	shr    edx,0x9
c00023d1:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00023d5:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00023d9:	e8 11 fe ff ff       	call   c00021ef <move_window>
c00023de:	85 c0                	test   eax,eax
c00023e0:	75 81                	jne    c0002363 <find_volume+0x46>
c00023e2:	81 e7 80 01 00 00    	and    edi,0x180
c00023e8:	b9 10 00 00 00       	mov    ecx,0x10
c00023ed:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c00023f1:	ba f0 7d 02 c0       	mov    edx,0xc0027df0
c00023f6:	e8 b5 f6 ff ff       	call   c0001ab0 <mem_cmp>
c00023fb:	85 c0                	test   eax,eax
c00023fd:	75 29                	jne    c0002428 <find_volume+0x10b>
c00023ff:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002403:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002407:	e8 2a f6 ff ff       	call   c0001a36 <ld_qword>
c000240c:	89 d1                	mov    ecx,edx
c000240e:	89 c2                	mov    edx,eax
c0002410:	89 d8                	mov    eax,ebx
c0002412:	e8 4c fe ff ff       	call   c0002263 <check_fs>
c0002417:	85 f6                	test   esi,esi
c0002419:	75 07                	jne    c0002422 <find_volume+0x105>
c000241b:	83 f8 01             	cmp    eax,0x1
c000241e:	77 08                	ja     c0002428 <find_volume+0x10b>
c0002420:	eb 77                	jmp    c0002499 <find_volume+0x17c>
c0002422:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002426:	74 71                	je     c0002499 <find_volume+0x17c>
c0002428:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000242c:	eb 89                	jmp    c00023b7 <find_volume+0x9a>
c000242e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002432:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002438:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000243e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002442:	89 cd                	mov    ebp,ecx
c0002444:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002448:	89 f8                	mov    eax,edi
c000244a:	83 c7 10             	add    edi,0x10
c000244d:	e8 cc f5 ff ff       	call   c0001a1e <ld_dword>
c0002452:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002456:	89 01                	mov    DWORD PTR [ecx],eax
c0002458:	83 c1 04             	add    ecx,0x4
c000245b:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000245f:	75 e3                	jne    c0002444 <find_volume+0x127>
c0002461:	31 ff                	xor    edi,edi
c0002463:	85 f6                	test   esi,esi
c0002465:	74 03                	je     c000246a <find_volume+0x14d>
c0002467:	8d 7e ff             	lea    edi,[esi-0x1]
c000246a:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c000246e:	85 d2                	test   edx,edx
c0002470:	74 14                	je     c0002486 <find_volume+0x169>
c0002472:	31 c9                	xor    ecx,ecx
c0002474:	89 d8                	mov    eax,ebx
c0002476:	e8 e8 fd ff ff       	call   c0002263 <check_fs>
c000247b:	83 f8 01             	cmp    eax,0x1
c000247e:	76 19                	jbe    c0002499 <find_volume+0x17c>
c0002480:	85 f6                	test   esi,esi
c0002482:	74 0f                	je     c0002493 <find_volume+0x176>
c0002484:	eb 13                	jmp    c0002499 <find_volume+0x17c>
c0002486:	85 f6                	test   esi,esi
c0002488:	0f 85 ed fe ff ff    	jne    c000237b <find_volume+0x5e>
c000248e:	b8 03 00 00 00       	mov    eax,0x3
c0002493:	47                   	inc    edi
c0002494:	83 ff 03             	cmp    edi,0x3
c0002497:	76 d1                	jbe    c000246a <find_volume+0x14d>
c0002499:	83 c4 3c             	add    esp,0x3c
c000249c:	5b                   	pop    ebx
c000249d:	5e                   	pop    esi
c000249e:	5f                   	pop    edi
c000249f:	5d                   	pop    ebp
c00024a0:	c3                   	ret    

c00024a1 <mount_volume>:
c00024a1:	55                   	push   ebp
c00024a2:	57                   	push   edi
c00024a3:	89 cf                	mov    edi,ecx
c00024a5:	56                   	push   esi
c00024a6:	53                   	push   ebx
c00024a7:	bb 0b 00 00 00       	mov    ebx,0xb
c00024ac:	83 ec 3c             	sub    esp,0x3c
c00024af:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024b5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00024b9:	e8 35 fb ff ff       	call   c0001ff3 <get_ldnumber>
c00024be:	85 c0                	test   eax,eax
c00024c0:	0f 88 3a 05 00 00    	js     c0002a00 <mount_volume+0x55f>
c00024c6:	8b 2c 85 e0 c8 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd3720]
c00024cd:	89 c6                	mov    esi,eax
c00024cf:	bb 0c 00 00 00       	mov    ebx,0xc
c00024d4:	85 ed                	test   ebp,ebp
c00024d6:	0f 84 24 05 00 00    	je     c0002a00 <mount_volume+0x55f>
c00024dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00024e0:	83 e7 fe             	and    edi,0xfffffffe
c00024e3:	89 2a                	mov    DWORD PTR [edx],ebp
c00024e5:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00024e9:	74 32                	je     c000251d <mount_volume+0x7c>
c00024eb:	83 ec 0c             	sub    esp,0xc
c00024ee:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00024f2:	50                   	push   eax
c00024f3:	e8 c8 f4 ff ff       	call   c00019c0 <disk_status>
c00024f8:	83 c4 10             	add    esp,0x10
c00024fb:	a8 01                	test   al,0x1
c00024fd:	75 1e                	jne    c000251d <mount_volume+0x7c>
c00024ff:	31 db                	xor    ebx,ebx
c0002501:	89 f9                	mov    ecx,edi
c0002503:	84 c9                	test   cl,cl
c0002505:	0f 84 f5 04 00 00    	je     c0002a00 <mount_volume+0x55f>
c000250b:	a8 04                	test   al,0x4
c000250d:	0f 84 ed 04 00 00    	je     c0002a00 <mount_volume+0x55f>
c0002513:	bb 0a 00 00 00       	mov    ebx,0xa
c0002518:	e9 e3 04 00 00       	jmp    c0002a00 <mount_volume+0x55f>
c000251d:	83 ec 0c             	sub    esp,0xc
c0002520:	89 f0                	mov    eax,esi
c0002522:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002526:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002529:	0f b6 f0             	movzx  esi,al
c000252c:	bb 03 00 00 00       	mov    ebx,0x3
c0002531:	56                   	push   esi
c0002532:	e8 8c f4 ff ff       	call   c00019c3 <disk_initialize>
c0002537:	83 c4 10             	add    esp,0x10
c000253a:	a8 01                	test   al,0x1
c000253c:	0f 85 be 04 00 00    	jne    c0002a00 <mount_volume+0x55f>
c0002542:	89 f9                	mov    ecx,edi
c0002544:	84 c9                	test   cl,cl
c0002546:	74 04                	je     c000254c <mount_volume+0xab>
c0002548:	a8 04                	test   al,0x4
c000254a:	75 c7                	jne    c0002513 <mount_volume+0x72>
c000254c:	31 d2                	xor    edx,edx
c000254e:	89 e8                	mov    eax,ebp
c0002550:	e8 c8 fd ff ff       	call   c000231d <find_volume>
c0002555:	83 f8 04             	cmp    eax,0x4
c0002558:	75 0a                	jne    c0002564 <mount_volume+0xc3>
c000255a:	bb 01 00 00 00       	mov    ebx,0x1
c000255f:	e9 9c 04 00 00       	jmp    c0002a00 <mount_volume+0x55f>
c0002564:	83 f8 01             	cmp    eax,0x1
c0002567:	76 0a                	jbe    c0002573 <mount_volume+0xd2>
c0002569:	bb 0d 00 00 00       	mov    ebx,0xd
c000256e:	e9 8d 04 00 00       	jmp    c0002a00 <mount_volume+0x55f>
c0002573:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c0002576:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c0002579:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000257d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002581:	75 17                	jne    c000259a <mount_volume+0xf9>
c0002583:	b8 0b 00 00 00       	mov    eax,0xb
c0002588:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c000258d:	75 da                	jne    c0002569 <mount_volume+0xc8>
c000258f:	40                   	inc    eax
c0002590:	83 f8 40             	cmp    eax,0x40
c0002593:	75 f3                	jne    c0002588 <mount_volume+0xe7>
c0002595:	e9 5a 02 00 00       	jmp    c00027f4 <mount_volume+0x353>
c000259a:	8d 45 5f             	lea    eax,[ebp+0x5f]
c000259d:	e8 6f f4 ff ff       	call   c0001a11 <ld_word>
c00025a2:	66 3d 00 02          	cmp    ax,0x200
c00025a6:	75 c1                	jne    c0002569 <mount_volume+0xc8>
c00025a8:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00025ab:	e8 61 f4 ff ff       	call   c0001a11 <ld_word>
c00025b0:	0f b7 c0             	movzx  eax,ax
c00025b3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025b7:	85 c0                	test   eax,eax
c00025b9:	75 0c                	jne    c00025c7 <mount_volume+0x126>
c00025bb:	8d 45 78             	lea    eax,[ebp+0x78]
c00025be:	e8 5b f4 ff ff       	call   c0001a1e <ld_dword>
c00025c3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00025cb:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00025ce:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00025d1:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00025d5:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00025d8:	48                   	dec    eax
c00025d9:	3c 01                	cmp    al,0x1
c00025db:	77 8c                	ja     c0002569 <mount_volume+0xc8>
c00025dd:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00025e1:	89 c3                	mov    ebx,eax
c00025e3:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00025e7:	66 85 c0             	test   ax,ax
c00025ea:	0f 84 79 ff ff ff    	je     c0002569 <mount_volume+0xc8>
c00025f0:	8d 40 ff             	lea    eax,[eax-0x1]
c00025f3:	85 d8                	test   eax,ebx
c00025f5:	0f 85 6e ff ff ff    	jne    c0002569 <mount_volume+0xc8>
c00025fb:	8d 45 65             	lea    eax,[ebp+0x65]
c00025fe:	e8 0e f4 ff ff       	call   c0001a11 <ld_word>
c0002603:	89 c7                	mov    edi,eax
c0002605:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002609:	a8 0f                	test   al,0xf
c000260b:	0f 85 58 ff ff ff    	jne    c0002569 <mount_volume+0xc8>
c0002611:	8d 45 67             	lea    eax,[ebp+0x67]
c0002614:	e8 f8 f3 ff ff       	call   c0001a11 <ld_word>
c0002619:	0f b7 f0             	movzx  esi,ax
c000261c:	85 f6                	test   esi,esi
c000261e:	75 0a                	jne    c000262a <mount_volume+0x189>
c0002620:	8d 45 74             	lea    eax,[ebp+0x74]
c0002623:	e8 f6 f3 ff ff       	call   c0001a1e <ld_dword>
c0002628:	89 c6                	mov    esi,eax
c000262a:	8d 45 62             	lea    eax,[ebp+0x62]
c000262d:	e8 df f3 ff ff       	call   c0001a11 <ld_word>
c0002632:	66 85 c0             	test   ax,ax
c0002635:	0f 84 2e ff ff ff    	je     c0002569 <mount_volume+0xc8>
c000263b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002640:	0f b7 c8             	movzx  ecx,ax
c0002643:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002648:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000264c:	89 fa                	mov    edx,edi
c000264e:	66 c1 ea 04          	shr    dx,0x4
c0002652:	0f b7 d2             	movzx  edx,dx
c0002655:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c0002659:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000265c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002660:	39 c6                	cmp    esi,eax
c0002662:	0f 82 01 ff ff ff    	jb     c0002569 <mount_volume+0xc8>
c0002668:	29 c6                	sub    esi,eax
c000266a:	31 d2                	xor    edx,edx
c000266c:	89 f0                	mov    eax,esi
c000266e:	f7 f3                	div    ebx
c0002670:	39 de                	cmp    esi,ebx
c0002672:	0f 82 f1 fe ff ff    	jb     c0002569 <mount_volume+0xc8>
c0002678:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000267d:	0f 87 e6 fe ff ff    	ja     c0002569 <mount_volume+0xc8>
c0002683:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002688:	0f 86 63 03 00 00    	jbe    c00029f1 <mount_volume+0x550>
c000268e:	bb 03 00 00 00       	mov    ebx,0x3
c0002693:	8d 70 02             	lea    esi,[eax+0x2]
c0002696:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000269a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000269e:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00026a1:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00026a4:	31 d2                	xor    edx,edx
c00026a6:	89 c8                	mov    eax,ecx
c00026a8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00026ab:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026af:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026b3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00026b7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00026bb:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00026be:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00026c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00026c5:	31 d2                	xor    edx,edx
c00026c7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026cb:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026cf:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00026d2:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00026d5:	83 fb 03             	cmp    ebx,0x3
c00026d8:	75 2b                	jne    c0002705 <mount_volume+0x264>
c00026da:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00026dd:	e8 2f f3 ff ff       	call   c0001a11 <ld_word>
c00026e2:	66 09 c7             	or     di,ax
c00026e5:	0f 85 7e fe ff ff    	jne    c0002569 <mount_volume+0xc8>
c00026eb:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c00026f1:	c1 e6 02             	shl    esi,0x2
c00026f4:	e8 25 f3 ff ff       	call   c0001a1e <ld_dword>
c00026f9:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002700:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002703:	eb 30                	jmp    c0002735 <mount_volume+0x294>
c0002705:	66 85 ff             	test   di,di
c0002708:	0f 84 5b fe ff ff    	je     c0002569 <mount_volume+0xc8>
c000270e:	31 d2                	xor    edx,edx
c0002710:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002714:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002718:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000271c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000271f:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002722:	83 fb 02             	cmp    ebx,0x2
c0002725:	75 04                	jne    c000272b <mount_volume+0x28a>
c0002727:	01 f6                	add    esi,esi
c0002729:	eb 0a                	jmp    c0002735 <mount_volume+0x294>
c000272b:	8d 04 76             	lea    eax,[esi+esi*2]
c000272e:	83 e6 01             	and    esi,0x1
c0002731:	d1 e8                	shr    eax,1
c0002733:	01 c6                	add    esi,eax
c0002735:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000273b:	c1 ee 09             	shr    esi,0x9
c000273e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002742:	0f 87 21 fe ff ff    	ja     c0002569 <mount_volume+0xc8>
c0002748:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000274f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002756:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c000275a:	83 fb 03             	cmp    ebx,0x3
c000275d:	75 7a                	jne    c00027d9 <mount_volume+0x338>
c000275f:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c0002765:	e8 a7 f2 ff ff       	call   c0001a11 <ld_word>
c000276a:	66 48                	dec    ax
c000276c:	75 6b                	jne    c00027d9 <mount_volume+0x338>
c000276e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002772:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002776:	83 c2 01             	add    edx,0x1
c0002779:	89 e8                	mov    eax,ebp
c000277b:	83 d1 00             	adc    ecx,0x0
c000277e:	e8 6c fa ff ff       	call   c00021ef <move_window>
c0002783:	85 c0                	test   eax,eax
c0002785:	75 52                	jne    c00027d9 <mount_volume+0x338>
c0002787:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c000278b:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c0002791:	e8 7b f2 ff ff       	call   c0001a11 <ld_word>
c0002796:	66 3d 55 aa          	cmp    ax,0xaa55
c000279a:	75 3d                	jne    c00027d9 <mount_volume+0x338>
c000279c:	8d 45 54             	lea    eax,[ebp+0x54]
c000279f:	e8 7a f2 ff ff       	call   c0001a1e <ld_dword>
c00027a4:	3d 52 52 61 41       	cmp    eax,0x41615252
c00027a9:	75 2e                	jne    c00027d9 <mount_volume+0x338>
c00027ab:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00027b1:	e8 68 f2 ff ff       	call   c0001a1e <ld_dword>
c00027b6:	3d 72 72 41 61       	cmp    eax,0x61417272
c00027bb:	75 1c                	jne    c00027d9 <mount_volume+0x338>
c00027bd:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00027c3:	e8 56 f2 ff ff       	call   c0001a1e <ld_dword>
c00027c8:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00027cb:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00027d1:	e8 48 f2 ff ff       	call   c0001a1e <ld_dword>
c00027d6:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00027d9:	66 a1 c0 c8 02 c0    	mov    ax,ds:0xc002c8c0
c00027df:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00027e2:	40                   	inc    eax
c00027e3:	31 db                	xor    ebx,ebx
c00027e5:	66 a3 c0 c8 02 c0    	mov    ds:0xc002c8c0,ax
c00027eb:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c00027ef:	e9 0c 02 00 00       	jmp    c0002a00 <mount_volume+0x55f>
c00027f4:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c00027fa:	e8 12 f2 ff ff       	call   c0001a11 <ld_word>
c00027ff:	66 3d 00 01          	cmp    ax,0x100
c0002803:	0f 85 60 fd ff ff    	jne    c0002569 <mount_volume+0xc8>
c0002809:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002810:	0f 85 53 fd ff ff    	jne    c0002569 <mount_volume+0xc8>
c0002816:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c000281c:	e8 15 f2 ff ff       	call   c0001a36 <ld_qword>
c0002821:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002825:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002829:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c000282f:	e8 ea f1 ff ff       	call   c0001a1e <ld_dword>
c0002834:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002837:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c000283d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002840:	fe c8                	dec    al
c0002842:	0f 85 21 fd ff ff    	jne    c0002569 <mount_volume+0xc8>
c0002848:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c000284f:	bb 01 00 00 00       	mov    ebx,0x1
c0002854:	d3 e3                	shl    ebx,cl
c0002856:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c000285a:	66 85 db             	test   bx,bx
c000285d:	0f 84 06 fd ff ff    	je     c0002569 <mount_volume+0xc8>
c0002863:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002869:	e8 b0 f1 ff ff       	call   c0001a1e <ld_dword>
c000286e:	89 c6                	mov    esi,eax
c0002870:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002875:	0f 87 ee fc ff ff    	ja     c0002569 <mount_volume+0xc8>
c000287b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000287f:	8d 40 02             	lea    eax,[eax+0x2]
c0002882:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002885:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002888:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000288c:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000288f:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002895:	e8 84 f1 ff ff       	call   c0001a1e <ld_dword>
c000289a:	31 d2                	xor    edx,edx
c000289c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028a0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00028a8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00028ac:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028af:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028b2:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c00028b8:	e8 61 f1 ff ff       	call   c0001a1e <ld_dword>
c00028bd:	31 d2                	xor    edx,edx
c00028bf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00028c3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c7:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028cb:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028ce:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028d1:	0f b7 c3             	movzx  eax,bx
c00028d4:	31 d2                	xor    edx,edx
c00028d6:	0f af f0             	imul   esi,eax
c00028d9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00028dd:	89 f0                	mov    eax,esi
c00028df:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00028e3:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c00028e7:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c00028eb:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c00028ef:	39 c1                	cmp    ecx,eax
c00028f1:	89 df                	mov    edi,ebx
c00028f3:	19 d7                	sbb    edi,edx
c00028f5:	0f 82 6e fc ff ff    	jb     c0002569 <mount_volume+0xc8>
c00028fb:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002901:	31 db                	xor    ebx,ebx
c0002903:	e8 16 f1 ff ff       	call   c0001a1e <ld_dword>
c0002908:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000290f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002912:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000291a:	85 db                	test   ebx,ebx
c000291c:	75 39                	jne    c0002957 <mount_volume+0x4b6>
c000291e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002922:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002926:	0f 86 3d fc ff ff    	jbe    c0002569 <mount_volume+0xc8>
c000292c:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c000292f:	31 ff                	xor    edi,edi
c0002931:	89 e8                	mov    eax,ebp
c0002933:	e8 72 f3 ff ff       	call   c0001caa <clst2sect>
c0002938:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000293c:	01 c6                	add    esi,eax
c000293e:	89 e8                	mov    eax,ebp
c0002940:	11 d7                	adc    edi,edx
c0002942:	89 f2                	mov    edx,esi
c0002944:	89 f9                	mov    ecx,edi
c0002946:	e8 a4 f8 ff ff       	call   c00021ef <move_window>
c000294b:	85 c0                	test   eax,eax
c000294d:	0f 85 07 fc ff ff    	jne    c000255a <mount_volume+0xb9>
c0002953:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002957:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c000295c:	74 0b                	je     c0002969 <mount_volume+0x4c8>
c000295e:	83 c3 20             	add    ebx,0x20
c0002961:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002967:	eb b1                	jmp    c000291a <mount_volume+0x479>
c0002969:	8d 75 54             	lea    esi,[ebp+0x54]
c000296c:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002970:	e8 a9 f0 ff ff       	call   c0001a1e <ld_dword>
c0002975:	89 c3                	mov    ebx,eax
c0002977:	83 f8 01             	cmp    eax,0x1
c000297a:	0f 86 e9 fb ff ff    	jbe    c0002569 <mount_volume+0xc8>
c0002980:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002983:	0f 86 e0 fb ff ff    	jbe    c0002569 <mount_volume+0xc8>
c0002989:	8d 53 fe             	lea    edx,[ebx-0x2]
c000298c:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002990:	0f af c2             	imul   eax,edx
c0002993:	31 d2                	xor    edx,edx
c0002995:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002998:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c000299b:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c000299e:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c00029a1:	31 c9                	xor    ecx,ecx
c00029a3:	89 da                	mov    edx,ebx
c00029a5:	89 e8                	mov    eax,ebp
c00029a7:	c1 ea 07             	shr    edx,0x7
c00029aa:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c00029ad:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c00029b0:	e8 3a f8 ff ff       	call   c00021ef <move_window>
c00029b5:	85 c0                	test   eax,eax
c00029b7:	0f 85 9d fb ff ff    	jne    c000255a <mount_volume+0xb9>
c00029bd:	89 d8                	mov    eax,ebx
c00029bf:	83 e0 7f             	and    eax,0x7f
c00029c2:	8d 04 86             	lea    eax,[esi+eax*4]
c00029c5:	e8 54 f0 ff ff       	call   c0001a1e <ld_dword>
c00029ca:	83 f8 ff             	cmp    eax,0xffffffff
c00029cd:	74 0a                	je     c00029d9 <mount_volume+0x538>
c00029cf:	43                   	inc    ebx
c00029d0:	39 d8                	cmp    eax,ebx
c00029d2:	74 cd                	je     c00029a1 <mount_volume+0x500>
c00029d4:	e9 90 fb ff ff       	jmp    c0002569 <mount_volume+0xc8>
c00029d9:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00029e0:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029e7:	bb 04 00 00 00       	mov    ebx,0x4
c00029ec:	e9 e8 fd ff ff       	jmp    c00027d9 <mount_volume+0x338>
c00029f1:	3d f6 0f 00 00       	cmp    eax,0xff6
c00029f6:	19 db                	sbb    ebx,ebx
c00029f8:	83 c3 02             	add    ebx,0x2
c00029fb:	e9 93 fc ff ff       	jmp    c0002693 <mount_volume+0x1f2>
c0002a00:	83 c4 3c             	add    esp,0x3c
c0002a03:	89 d8                	mov    eax,ebx
c0002a05:	5b                   	pop    ebx
c0002a06:	5e                   	pop    esi
c0002a07:	5f                   	pop    edi
c0002a08:	5d                   	pop    ebp
c0002a09:	c3                   	ret    

c0002a0a <find_bitmap>:
c0002a0a:	55                   	push   ebp
c0002a0b:	57                   	push   edi
c0002a0c:	89 c7                	mov    edi,eax
c0002a0e:	56                   	push   esi
c0002a0f:	8d 72 fe             	lea    esi,[edx-0x2]
c0002a12:	53                   	push   ebx
c0002a13:	83 ec 1c             	sub    esp,0x1c
c0002a16:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002a19:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002a1d:	83 e8 02             	sub    eax,0x2
c0002a20:	39 f0                	cmp    eax,esi
c0002a22:	77 02                	ja     c0002a26 <find_bitmap+0x1c>
c0002a24:	31 f6                	xor    esi,esi
c0002a26:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002a2a:	89 f3                	mov    ebx,esi
c0002a2c:	31 ed                	xor    ebp,ebp
c0002a2e:	31 c9                	xor    ecx,ecx
c0002a30:	89 da                	mov    edx,ebx
c0002a32:	89 f8                	mov    eax,edi
c0002a34:	c1 ea 0c             	shr    edx,0xc
c0002a37:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002a3a:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002a3d:	e8 ad f7 ff ff       	call   c00021ef <move_window>
c0002a42:	85 c0                	test   eax,eax
c0002a44:	75 68                	jne    c0002aae <find_bitmap+0xa4>
c0002a46:	89 da                	mov    edx,ebx
c0002a48:	89 d9                	mov    ecx,ebx
c0002a4a:	c1 ea 03             	shr    edx,0x3
c0002a4d:	83 e1 07             	and    ecx,0x7
c0002a50:	b8 01 00 00 00       	mov    eax,0x1
c0002a55:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002a5b:	d3 e0                	shl    eax,cl
c0002a5d:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002a60:	83 e9 02             	sub    ecx,0x2
c0002a63:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002a67:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002a6b:	43                   	inc    ebx
c0002a6c:	21 c1                	and    ecx,eax
c0002a6e:	d1 e0                	shl    eax,1
c0002a70:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002a74:	77 09                	ja     c0002a7f <find_bitmap+0x75>
c0002a76:	31 db                	xor    ebx,ebx
c0002a78:	ba 00 02 00 00       	mov    edx,0x200
c0002a7d:	31 c0                	xor    eax,eax
c0002a7f:	84 c9                	test   cl,cl
c0002a81:	75 10                	jne    c0002a93 <find_bitmap+0x89>
c0002a83:	45                   	inc    ebp
c0002a84:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002a88:	75 0f                	jne    c0002a99 <find_bitmap+0x8f>
c0002a8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002a8e:	83 c0 02             	add    eax,0x2
c0002a91:	eb 22                	jmp    c0002ab5 <find_bitmap+0xab>
c0002a93:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002a97:	31 ed                	xor    ebp,ebp
c0002a99:	39 de                	cmp    esi,ebx
c0002a9b:	74 16                	je     c0002ab3 <find_bitmap+0xa9>
c0002a9d:	84 c0                	test   al,al
c0002a9f:	75 c6                	jne    c0002a67 <find_bitmap+0x5d>
c0002aa1:	42                   	inc    edx
c0002aa2:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002aa8:	77 84                	ja     c0002a2e <find_bitmap+0x24>
c0002aaa:	b0 01                	mov    al,0x1
c0002aac:	eb b9                	jmp    c0002a67 <find_bitmap+0x5d>
c0002aae:	83 c8 ff             	or     eax,0xffffffff
c0002ab1:	eb 02                	jmp    c0002ab5 <find_bitmap+0xab>
c0002ab3:	31 c0                	xor    eax,eax
c0002ab5:	83 c4 1c             	add    esp,0x1c
c0002ab8:	5b                   	pop    ebx
c0002ab9:	5e                   	pop    esi
c0002aba:	5f                   	pop    edi
c0002abb:	5d                   	pop    ebp
c0002abc:	c3                   	ret    

c0002abd <change_bitmap>:
c0002abd:	55                   	push   ebp
c0002abe:	89 cd                	mov    ebp,ecx
c0002ac0:	57                   	push   edi
c0002ac1:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002ac4:	56                   	push   esi
c0002ac5:	89 c7                	mov    edi,eax
c0002ac7:	53                   	push   ebx
c0002ac8:	89 c8                	mov    eax,ecx
c0002aca:	83 ec 1c             	sub    esp,0x1c
c0002acd:	31 d2                	xor    edx,edx
c0002acf:	89 ce                	mov    esi,ecx
c0002ad1:	c1 e8 0c             	shr    eax,0xc
c0002ad4:	bb 01 00 00 00       	mov    ebx,0x1
c0002ad9:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002adc:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002adf:	c1 ee 03             	shr    esi,0x3
c0002ae2:	83 e1 07             	and    ecx,0x7
c0002ae5:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002aeb:	d3 e3                	shl    ebx,cl
c0002aed:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002af1:	89 c1                	mov    ecx,eax
c0002af3:	89 d3                	mov    ebx,edx
c0002af5:	83 c1 01             	add    ecx,0x1
c0002af8:	83 d3 00             	adc    ebx,0x0
c0002afb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002aff:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002b03:	89 d1                	mov    ecx,edx
c0002b05:	89 c2                	mov    edx,eax
c0002b07:	89 f8                	mov    eax,edi
c0002b09:	e8 e1 f6 ff ff       	call   c00021ef <move_window>
c0002b0e:	89 c1                	mov    ecx,eax
c0002b10:	85 c0                	test   eax,eax
c0002b12:	75 48                	jne    c0002b5c <change_bitmap+0x9f>
c0002b14:	31 d2                	xor    edx,edx
c0002b16:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002b1a:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002b1e:	0f 95 c2             	setne  dl
c0002b21:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002b25:	74 3c                	je     c0002b63 <change_bitmap+0xa6>
c0002b27:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002b2b:	4d                   	dec    ebp
c0002b2c:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002b30:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002b34:	74 32                	je     c0002b68 <change_bitmap+0xab>
c0002b36:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002b3a:	75 d8                	jne    c0002b14 <change_bitmap+0x57>
c0002b3c:	8d 46 01             	lea    eax,[esi+0x1]
c0002b3f:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002b44:	89 c3                	mov    ebx,eax
c0002b46:	31 f6                	xor    esi,esi
c0002b48:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b4c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b50:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b56:	74 99                	je     c0002af1 <change_bitmap+0x34>
c0002b58:	89 de                	mov    esi,ebx
c0002b5a:	eb b8                	jmp    c0002b14 <change_bitmap+0x57>
c0002b5c:	b9 01 00 00 00       	mov    ecx,0x1
c0002b61:	eb 05                	jmp    c0002b68 <change_bitmap+0xab>
c0002b63:	b9 02 00 00 00       	mov    ecx,0x2
c0002b68:	83 c4 1c             	add    esp,0x1c
c0002b6b:	89 c8                	mov    eax,ecx
c0002b6d:	5b                   	pop    ebx
c0002b6e:	5e                   	pop    esi
c0002b6f:	5f                   	pop    edi
c0002b70:	5d                   	pop    ebp
c0002b71:	c3                   	ret    

c0002b72 <put_fat>:
c0002b72:	83 fa 01             	cmp    edx,0x1
c0002b75:	0f 86 7b 01 00 00    	jbe    c0002cf6 <put_fat+0x184>
c0002b7b:	55                   	push   ebp
c0002b7c:	57                   	push   edi
c0002b7d:	89 cf                	mov    edi,ecx
c0002b7f:	56                   	push   esi
c0002b80:	b9 02 00 00 00       	mov    ecx,0x2
c0002b85:	53                   	push   ebx
c0002b86:	89 c6                	mov    esi,eax
c0002b88:	83 ec 1c             	sub    esp,0x1c
c0002b8b:	89 d3                	mov    ebx,edx
c0002b8d:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002b90:	0f 86 68 01 00 00    	jbe    c0002cfe <put_fat+0x18c>
c0002b96:	8a 00                	mov    al,BYTE PTR [eax]
c0002b98:	3c 02                	cmp    al,0x2
c0002b9a:	0f 84 c7 00 00 00    	je     c0002c67 <put_fat+0xf5>
c0002ba0:	77 09                	ja     c0002bab <put_fat+0x39>
c0002ba2:	fe c8                	dec    al
c0002ba4:	74 17                	je     c0002bbd <put_fat+0x4b>
c0002ba6:	e9 53 01 00 00       	jmp    c0002cfe <put_fat+0x18c>
c0002bab:	b9 02 00 00 00       	mov    ecx,0x2
c0002bb0:	3c 04                	cmp    al,0x4
c0002bb2:	0f 86 e1 00 00 00    	jbe    c0002c99 <put_fat+0x127>
c0002bb8:	e9 41 01 00 00       	jmp    c0002cfe <put_fat+0x18c>
c0002bbd:	89 d5                	mov    ebp,edx
c0002bbf:	31 c9                	xor    ecx,ecx
c0002bc1:	d1 ed                	shr    ebp,1
c0002bc3:	89 f0                	mov    eax,esi
c0002bc5:	01 d5                	add    ebp,edx
c0002bc7:	89 ea                	mov    edx,ebp
c0002bc9:	c1 ea 09             	shr    edx,0x9
c0002bcc:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002bcf:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002bd2:	e8 18 f6 ff ff       	call   c00021ef <move_window>
c0002bd7:	89 c1                	mov    ecx,eax
c0002bd9:	85 c0                	test   eax,eax
c0002bdb:	0f 85 1d 01 00 00    	jne    c0002cfe <put_fat+0x18c>
c0002be1:	8d 46 54             	lea    eax,[esi+0x54]
c0002be4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002be8:	8d 45 01             	lea    eax,[ebp+0x1]
c0002beb:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002bf1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002bf5:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002bf9:	89 f8                	mov    eax,edi
c0002bfb:	83 e3 01             	and    ebx,0x1
c0002bfe:	74 0d                	je     c0002c0d <put_fat+0x9b>
c0002c00:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002c03:	89 fa                	mov    edx,edi
c0002c05:	83 e0 0f             	and    eax,0xf
c0002c08:	c1 e2 04             	shl    edx,0x4
c0002c0b:	09 d0                	or     eax,edx
c0002c0d:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002c10:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c14:	31 c9                	xor    ecx,ecx
c0002c16:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c1a:	c1 ea 09             	shr    edx,0x9
c0002c1d:	89 f0                	mov    eax,esi
c0002c1f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c22:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c25:	e8 c5 f5 ff ff       	call   c00021ef <move_window>
c0002c2a:	89 c1                	mov    ecx,eax
c0002c2c:	85 c0                	test   eax,eax
c0002c2e:	0f 85 ca 00 00 00    	jne    c0002cfe <put_fat+0x18c>
c0002c34:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002c38:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c3e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c42:	85 db                	test   ebx,ebx
c0002c44:	74 07                	je     c0002c4d <put_fat+0xdb>
c0002c46:	c1 ef 04             	shr    edi,0x4
c0002c49:	89 fa                	mov    edx,edi
c0002c4b:	eb 0e                	jmp    c0002c5b <put_fat+0xe9>
c0002c4d:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002c50:	c1 ef 08             	shr    edi,0x8
c0002c53:	83 e2 f0             	and    edx,0xfffffff0
c0002c56:	83 e7 0f             	and    edi,0xf
c0002c59:	09 fa                	or     edx,edi
c0002c5b:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002c5e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c62:	e9 97 00 00 00       	jmp    c0002cfe <put_fat+0x18c>
c0002c67:	31 c9                	xor    ecx,ecx
c0002c69:	c1 ea 08             	shr    edx,0x8
c0002c6c:	89 f0                	mov    eax,esi
c0002c6e:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c71:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c74:	e8 76 f5 ff ff       	call   c00021ef <move_window>
c0002c79:	89 c1                	mov    ecx,eax
c0002c7b:	85 c0                	test   eax,eax
c0002c7d:	75 7f                	jne    c0002cfe <put_fat+0x18c>
c0002c7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c83:	01 db                	add    ebx,ebx
c0002c85:	0f b7 d7             	movzx  edx,di
c0002c88:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002c8e:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002c92:	e8 ec ed ff ff       	call   c0001a83 <st_word>
c0002c97:	eb 53                	jmp    c0002cec <put_fat+0x17a>
c0002c99:	31 c9                	xor    ecx,ecx
c0002c9b:	c1 ea 07             	shr    edx,0x7
c0002c9e:	89 f0                	mov    eax,esi
c0002ca0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ca3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ca6:	e8 44 f5 ff ff       	call   c00021ef <move_window>
c0002cab:	89 c1                	mov    ecx,eax
c0002cad:	85 c0                	test   eax,eax
c0002caf:	75 4d                	jne    c0002cfe <put_fat+0x18c>
c0002cb1:	c1 e3 02             	shl    ebx,0x2
c0002cb4:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002cba:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002cbd:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002cc1:	74 1c                	je     c0002cdf <put_fat+0x16d>
c0002cc3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cc7:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ccd:	89 d8                	mov    eax,ebx
c0002ccf:	e8 4a ed ff ff       	call   c0001a1e <ld_dword>
c0002cd4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002cd8:	25 00 00 00 f0       	and    eax,0xf0000000
c0002cdd:	09 c7                	or     edi,eax
c0002cdf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ce3:	89 fa                	mov    edx,edi
c0002ce5:	89 d8                	mov    eax,ebx
c0002ce7:	e8 9b ed ff ff       	call   c0001a87 <st_dword>
c0002cec:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002cf0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002cf4:	eb 08                	jmp    c0002cfe <put_fat+0x18c>
c0002cf6:	b9 02 00 00 00       	mov    ecx,0x2
c0002cfb:	89 c8                	mov    eax,ecx
c0002cfd:	c3                   	ret    
c0002cfe:	83 c4 1c             	add    esp,0x1c
c0002d01:	89 c8                	mov    eax,ecx
c0002d03:	5b                   	pop    ebx
c0002d04:	5e                   	pop    esi
c0002d05:	5f                   	pop    edi
c0002d06:	5d                   	pop    ebp
c0002d07:	c3                   	ret    

c0002d08 <fill_last_frag>:
c0002d08:	57                   	push   edi
c0002d09:	89 cf                	mov    edi,ecx
c0002d0b:	56                   	push   esi
c0002d0c:	89 d6                	mov    esi,edx
c0002d0e:	53                   	push   ebx
c0002d0f:	89 c3                	mov    ebx,eax
c0002d11:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002d14:	85 c0                	test   eax,eax
c0002d16:	74 21                	je     c0002d39 <fill_last_frag+0x31>
c0002d18:	89 f9                	mov    ecx,edi
c0002d1a:	83 f8 01             	cmp    eax,0x1
c0002d1d:	76 05                	jbe    c0002d24 <fill_last_frag+0x1c>
c0002d1f:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002d22:	29 c1                	sub    ecx,eax
c0002d24:	8d 56 01             	lea    edx,[esi+0x1]
c0002d27:	29 c2                	sub    edx,eax
c0002d29:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d2b:	e8 42 fe ff ff       	call   c0002b72 <put_fat>
c0002d30:	85 c0                	test   eax,eax
c0002d32:	75 05                	jne    c0002d39 <fill_last_frag+0x31>
c0002d34:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002d37:	eb d8                	jmp    c0002d11 <fill_last_frag+0x9>
c0002d39:	5b                   	pop    ebx
c0002d3a:	5e                   	pop    esi
c0002d3b:	5f                   	pop    edi
c0002d3c:	c3                   	ret    

c0002d3d <fill_first_frag>:
c0002d3d:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002d41:	75 2d                	jne    c0002d70 <fill_first_frag+0x33>
c0002d43:	57                   	push   edi
c0002d44:	56                   	push   esi
c0002d45:	53                   	push   ebx
c0002d46:	89 c3                	mov    ebx,eax
c0002d48:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002d4b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002d4e:	01 d7                	add    edi,edx
c0002d50:	39 fa                	cmp    edx,edi
c0002d52:	74 14                	je     c0002d68 <fill_first_frag+0x2b>
c0002d54:	8d 72 01             	lea    esi,[edx+0x1]
c0002d57:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d59:	89 f1                	mov    ecx,esi
c0002d5b:	e8 12 fe ff ff       	call   c0002b72 <put_fat>
c0002d60:	89 f2                	mov    edx,esi
c0002d62:	85 c0                	test   eax,eax
c0002d64:	74 ea                	je     c0002d50 <fill_first_frag+0x13>
c0002d66:	eb 0b                	jmp    c0002d73 <fill_first_frag+0x36>
c0002d68:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002d6c:	31 c0                	xor    eax,eax
c0002d6e:	eb 03                	jmp    c0002d73 <fill_first_frag+0x36>
c0002d70:	31 c0                	xor    eax,eax
c0002d72:	c3                   	ret    
c0002d73:	5b                   	pop    ebx
c0002d74:	5e                   	pop    esi
c0002d75:	5f                   	pop    edi
c0002d76:	c3                   	ret    

c0002d77 <get_fat>:
c0002d77:	83 fa 01             	cmp    edx,0x1
c0002d7a:	0f 86 db 01 00 00    	jbe    c0002f5b <get_fat+0x1e4>
c0002d80:	55                   	push   ebp
c0002d81:	b9 01 00 00 00       	mov    ecx,0x1
c0002d86:	57                   	push   edi
c0002d87:	56                   	push   esi
c0002d88:	53                   	push   ebx
c0002d89:	83 ec 1c             	sub    esp,0x1c
c0002d8c:	8b 38                	mov    edi,DWORD PTR [eax]
c0002d8e:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002d91:	0f 86 cc 01 00 00    	jbe    c0002f63 <get_fat+0x1ec>
c0002d97:	89 c3                	mov    ebx,eax
c0002d99:	89 d6                	mov    esi,edx
c0002d9b:	8a 07                	mov    al,BYTE PTR [edi]
c0002d9d:	3c 02                	cmp    al,0x2
c0002d9f:	0f 84 99 00 00 00    	je     c0002e3e <get_fat+0xc7>
c0002da5:	77 09                	ja     c0002db0 <get_fat+0x39>
c0002da7:	fe c8                	dec    al
c0002da9:	74 1a                	je     c0002dc5 <get_fat+0x4e>
c0002dab:	e9 b3 01 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002db0:	3c 03                	cmp    al,0x3
c0002db2:	0f 84 b5 00 00 00    	je     c0002e6d <get_fat+0xf6>
c0002db8:	3c 04                	cmp    al,0x4
c0002dba:	0f 84 e3 00 00 00    	je     c0002ea3 <get_fat+0x12c>
c0002dc0:	e9 9e 01 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002dc5:	89 d3                	mov    ebx,edx
c0002dc7:	31 c9                	xor    ecx,ecx
c0002dc9:	d1 eb                	shr    ebx,1
c0002dcb:	89 f8                	mov    eax,edi
c0002dcd:	01 d3                	add    ebx,edx
c0002dcf:	89 da                	mov    edx,ebx
c0002dd1:	c1 ea 09             	shr    edx,0x9
c0002dd4:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002dd7:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002dda:	e8 10 f4 ff ff       	call   c00021ef <move_window>
c0002ddf:	85 c0                	test   eax,eax
c0002de1:	74 08                	je     c0002deb <get_fat+0x74>
c0002de3:	83 c9 ff             	or     ecx,0xffffffff
c0002de6:	e9 78 01 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002deb:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002dee:	31 c9                	xor    ecx,ecx
c0002df0:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002df6:	89 ea                	mov    edx,ebp
c0002df8:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002dfc:	c1 ea 09             	shr    edx,0x9
c0002dff:	89 f8                	mov    eax,edi
c0002e01:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e04:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e07:	e8 e3 f3 ff ff       	call   c00021ef <move_window>
c0002e0c:	85 c0                	test   eax,eax
c0002e0e:	75 d3                	jne    c0002de3 <get_fat+0x6c>
c0002e10:	0f b6 c3             	movzx  eax,bl
c0002e13:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e19:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002e1e:	c1 e3 08             	shl    ebx,0x8
c0002e21:	09 c3                	or     ebx,eax
c0002e23:	89 d9                	mov    ecx,ebx
c0002e25:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002e2b:	83 e6 01             	and    esi,0x1
c0002e2e:	0f 84 2f 01 00 00    	je     c0002f63 <get_fat+0x1ec>
c0002e34:	89 d9                	mov    ecx,ebx
c0002e36:	c1 e9 04             	shr    ecx,0x4
c0002e39:	e9 25 01 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002e3e:	31 c9                	xor    ecx,ecx
c0002e40:	c1 ea 08             	shr    edx,0x8
c0002e43:	89 f8                	mov    eax,edi
c0002e45:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e48:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e4b:	e8 9f f3 ff ff       	call   c00021ef <move_window>
c0002e50:	85 c0                	test   eax,eax
c0002e52:	75 8f                	jne    c0002de3 <get_fat+0x6c>
c0002e54:	01 f6                	add    esi,esi
c0002e56:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002e5c:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e60:	e8 ac eb ff ff       	call   c0001a11 <ld_word>
c0002e65:	0f b7 c8             	movzx  ecx,ax
c0002e68:	e9 f6 00 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002e6d:	31 c9                	xor    ecx,ecx
c0002e6f:	c1 ea 07             	shr    edx,0x7
c0002e72:	89 f8                	mov    eax,edi
c0002e74:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e77:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e7a:	e8 70 f3 ff ff       	call   c00021ef <move_window>
c0002e7f:	85 c0                	test   eax,eax
c0002e81:	0f 85 5c ff ff ff    	jne    c0002de3 <get_fat+0x6c>
c0002e87:	c1 e6 02             	shl    esi,0x2
c0002e8a:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002e90:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e94:	e8 85 eb ff ff       	call   c0001a1e <ld_dword>
c0002e99:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002e9e:	e9 b4 00 00 00       	jmp    c0002f57 <get_fat+0x1e0>
c0002ea3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002ea6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ea9:	89 d1                	mov    ecx,edx
c0002eab:	09 c1                	or     ecx,eax
c0002ead:	74 06                	je     c0002eb5 <get_fat+0x13e>
c0002eaf:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002eb3:	75 0f                	jne    c0002ec4 <get_fat+0x14d>
c0002eb5:	b9 01 00 00 00       	mov    ecx,0x1
c0002eba:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002ebe:	0f 85 9f 00 00 00    	jne    c0002f63 <get_fat+0x1ec>
c0002ec4:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002ec8:	89 f5                	mov    ebp,esi
c0002eca:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002ecf:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002ed2:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002ed5:	80 f9 02             	cmp    cl,0x2
c0002ed8:	75 35                	jne    c0002f0f <get_fat+0x198>
c0002eda:	83 c0 ff             	add    eax,0xffffffff
c0002edd:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002ee2:	83 d2 ff             	adc    edx,0xffffffff
c0002ee5:	31 db                	xor    ebx,ebx
c0002ee7:	0f ac d0 09          	shrd   eax,edx,0x9
c0002eeb:	53                   	push   ebx
c0002eec:	c1 ea 09             	shr    edx,0x9
c0002eef:	51                   	push   ecx
c0002ef0:	52                   	push   edx
c0002ef1:	50                   	push   eax
c0002ef2:	e8 a5 24 02 00       	call   c002539c <__udivdi3>
c0002ef7:	83 c4 10             	add    esp,0x10
c0002efa:	b9 01 00 00 00       	mov    ecx,0x1
c0002eff:	39 c5                	cmp    ebp,eax
c0002f01:	77 60                	ja     c0002f63 <get_fat+0x1ec>
c0002f03:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f08:	74 59                	je     c0002f63 <get_fat+0x1ec>
c0002f0a:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002f0d:	eb 54                	jmp    c0002f63 <get_fat+0x1ec>
c0002f0f:	80 f9 03             	cmp    cl,0x3
c0002f12:	75 05                	jne    c0002f19 <get_fat+0x1a2>
c0002f14:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002f17:	77 f1                	ja     c0002f0a <get_fat+0x193>
c0002f19:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f1e:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002f22:	75 3f                	jne    c0002f63 <get_fat+0x1ec>
c0002f24:	31 c9                	xor    ecx,ecx
c0002f26:	89 f2                	mov    edx,esi
c0002f28:	89 f8                	mov    eax,edi
c0002f2a:	c1 ea 07             	shr    edx,0x7
c0002f2d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f30:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f33:	e8 b7 f2 ff ff       	call   c00021ef <move_window>
c0002f38:	85 c0                	test   eax,eax
c0002f3a:	0f 85 a3 fe ff ff    	jne    c0002de3 <get_fat+0x6c>
c0002f40:	c1 e6 02             	shl    esi,0x2
c0002f43:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002f49:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002f4d:	e8 cc ea ff ff       	call   c0001a1e <ld_dword>
c0002f52:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002f57:	89 c1                	mov    ecx,eax
c0002f59:	eb 08                	jmp    c0002f63 <get_fat+0x1ec>
c0002f5b:	b9 01 00 00 00       	mov    ecx,0x1
c0002f60:	89 c8                	mov    eax,ecx
c0002f62:	c3                   	ret    
c0002f63:	83 c4 1c             	add    esp,0x1c
c0002f66:	89 c8                	mov    eax,ecx
c0002f68:	5b                   	pop    ebx
c0002f69:	5e                   	pop    esi
c0002f6a:	5f                   	pop    edi
c0002f6b:	5d                   	pop    ebp
c0002f6c:	c3                   	ret    

c0002f6d <dir_sdi>:
c0002f6d:	55                   	push   ebp
c0002f6e:	57                   	push   edi
c0002f6f:	56                   	push   esi
c0002f70:	53                   	push   ebx
c0002f71:	89 c3                	mov    ebx,eax
c0002f73:	83 ec 1c             	sub    esp,0x1c
c0002f76:	8b 38                	mov    edi,DWORD PTR [eax]
c0002f78:	31 c0                	xor    eax,eax
c0002f7a:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002f7d:	0f 94 c0             	sete   al
c0002f80:	48                   	dec    eax
c0002f81:	25 00 00 20 f0       	and    eax,0xf0200000
c0002f86:	05 00 00 00 10       	add    eax,0x10000000
c0002f8b:	39 d0                	cmp    eax,edx
c0002f8d:	77 0a                	ja     c0002f99 <dir_sdi+0x2c>
c0002f8f:	b8 02 00 00 00       	mov    eax,0x2
c0002f94:	e9 c4 00 00 00       	jmp    c000305d <dir_sdi+0xf0>
c0002f99:	89 d6                	mov    esi,edx
c0002f9b:	f6 c2 1f             	test   dl,0x1f
c0002f9e:	75 ef                	jne    c0002f8f <dir_sdi+0x22>
c0002fa0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002fa3:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002fa6:	85 c9                	test   ecx,ecx
c0002fa8:	75 2d                	jne    c0002fd7 <dir_sdi+0x6a>
c0002faa:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002fad:	77 1b                	ja     c0002fca <dir_sdi+0x5d>
c0002faf:	89 f2                	mov    edx,esi
c0002fb1:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002fb5:	c1 ea 05             	shr    edx,0x5
c0002fb8:	39 c2                	cmp    edx,eax
c0002fba:	73 d3                	jae    c0002f8f <dir_sdi+0x22>
c0002fbc:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002fbf:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002fc2:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fc5:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002fc8:	eb 4b                	jmp    c0003015 <dir_sdi+0xa8>
c0002fca:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002fcd:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fd1:	85 c0                	test   eax,eax
c0002fd3:	74 da                	je     c0002faf <dir_sdi+0x42>
c0002fd5:	89 c1                	mov    ecx,eax
c0002fd7:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0002fdb:	c1 e5 09             	shl    ebp,0x9
c0002fde:	89 ca                	mov    edx,ecx
c0002fe0:	39 ee                	cmp    esi,ebp
c0002fe2:	72 1c                	jb     c0003000 <dir_sdi+0x93>
c0002fe4:	89 d8                	mov    eax,ebx
c0002fe6:	e8 8c fd ff ff       	call   c0002d77 <get_fat>
c0002feb:	89 c1                	mov    ecx,eax
c0002fed:	83 f8 ff             	cmp    eax,0xffffffff
c0002ff0:	74 66                	je     c0003058 <dir_sdi+0xeb>
c0002ff2:	83 f8 01             	cmp    eax,0x1
c0002ff5:	76 98                	jbe    c0002f8f <dir_sdi+0x22>
c0002ff7:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0002ffa:	76 93                	jbe    c0002f8f <dir_sdi+0x22>
c0002ffc:	29 ee                	sub    esi,ebp
c0002ffe:	eb de                	jmp    c0002fde <dir_sdi+0x71>
c0003000:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003004:	89 f8                	mov    eax,edi
c0003006:	e8 9f ec ff ff       	call   c0001caa <clst2sect>
c000300b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000300f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003012:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003015:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003018:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000301b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000301e:	89 d1                	mov    ecx,edx
c0003020:	09 c1                	or     ecx,eax
c0003022:	0f 84 67 ff ff ff    	je     c0002f8f <dir_sdi+0x22>
c0003028:	89 f1                	mov    ecx,esi
c000302a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003032:	c1 e9 09             	shr    ecx,0x9
c0003035:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003039:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000303d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003041:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003044:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000304a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000304d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003051:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003054:	31 c0                	xor    eax,eax
c0003056:	eb 05                	jmp    c000305d <dir_sdi+0xf0>
c0003058:	b8 01 00 00 00       	mov    eax,0x1
c000305d:	83 c4 1c             	add    esp,0x1c
c0003060:	5b                   	pop    ebx
c0003061:	5e                   	pop    esi
c0003062:	5f                   	pop    edi
c0003063:	5d                   	pop    ebp
c0003064:	c3                   	ret    

c0003065 <create_chain>:
c0003065:	55                   	push   ebp
c0003066:	89 c5                	mov    ebp,eax
c0003068:	57                   	push   edi
c0003069:	56                   	push   esi
c000306a:	53                   	push   ebx
c000306b:	83 ec 1c             	sub    esp,0x1c
c000306e:	85 d2                	test   edx,edx
c0003070:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003074:	8b 30                	mov    esi,DWORD PTR [eax]
c0003076:	75 0e                	jne    c0003086 <create_chain+0x21>
c0003078:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c000307b:	85 ff                	test   edi,edi
c000307d:	74 39                	je     c00030b8 <create_chain+0x53>
c000307f:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003082:	77 39                	ja     c00030bd <create_chain+0x58>
c0003084:	eb 32                	jmp    c00030b8 <create_chain+0x53>
c0003086:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000308a:	e8 e8 fc ff ff       	call   c0002d77 <get_fat>
c000308f:	89 c3                	mov    ebx,eax
c0003091:	83 f8 01             	cmp    eax,0x1
c0003094:	77 0a                	ja     c00030a0 <create_chain+0x3b>
c0003096:	bb 01 00 00 00       	mov    ebx,0x1
c000309b:	e9 ba 01 00 00       	jmp    c000325a <create_chain+0x1f5>
c00030a0:	83 f8 ff             	cmp    eax,0xffffffff
c00030a3:	0f 84 62 01 00 00    	je     c000320b <create_chain+0x1a6>
c00030a9:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030ac:	0f 87 a8 01 00 00    	ja     c000325a <create_chain+0x1f5>
c00030b2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00030b6:	eb 05                	jmp    c00030bd <create_chain+0x58>
c00030b8:	bf 01 00 00 00       	mov    edi,0x1
c00030bd:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00030c1:	75 07                	jne    c00030ca <create_chain+0x65>
c00030c3:	31 db                	xor    ebx,ebx
c00030c5:	e9 90 01 00 00       	jmp    c000325a <create_chain+0x1f5>
c00030ca:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00030cd:	75 74                	jne    c0003143 <create_chain+0xde>
c00030cf:	b9 01 00 00 00       	mov    ecx,0x1
c00030d4:	89 fa                	mov    edx,edi
c00030d6:	89 f0                	mov    eax,esi
c00030d8:	e8 2d f9 ff ff       	call   c0002a0a <find_bitmap>
c00030dd:	89 c3                	mov    ebx,eax
c00030df:	8d 40 ff             	lea    eax,[eax-0x1]
c00030e2:	83 f8 fd             	cmp    eax,0xfffffffd
c00030e5:	0f 87 6f 01 00 00    	ja     c000325a <create_chain+0x1f5>
c00030eb:	83 ec 0c             	sub    esp,0xc
c00030ee:	b9 01 00 00 00       	mov    ecx,0x1
c00030f3:	6a 01                	push   0x1
c00030f5:	89 da                	mov    edx,ebx
c00030f7:	89 f0                	mov    eax,esi
c00030f9:	e8 bf f9 ff ff       	call   c0002abd <change_bitmap>
c00030fe:	83 c4 10             	add    esp,0x10
c0003101:	83 f8 02             	cmp    eax,0x2
c0003104:	74 90                	je     c0003096 <create_chain+0x31>
c0003106:	83 f8 01             	cmp    eax,0x1
c0003109:	0f 84 fc 00 00 00    	je     c000320b <create_chain+0x1a6>
c000310f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003114:	75 09                	jne    c000311f <create_chain+0xba>
c0003116:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000311a:	e9 0c 01 00 00       	jmp    c000322b <create_chain+0x1c6>
c000311f:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003123:	0f 85 e7 00 00 00    	jne    c0003210 <create_chain+0x1ab>
c0003129:	8d 57 01             	lea    edx,[edi+0x1]
c000312c:	39 da                	cmp    edx,ebx
c000312e:	0f 84 f7 00 00 00    	je     c000322b <create_chain+0x1c6>
c0003134:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003137:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000313b:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000313e:	e9 cd 00 00 00       	jmp    c0003210 <create_chain+0x1ab>
c0003143:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003147:	75 41                	jne    c000318a <create_chain+0x125>
c0003149:	8d 5f 01             	lea    ebx,[edi+0x1]
c000314c:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000314f:	77 05                	ja     c0003156 <create_chain+0xf1>
c0003151:	bb 02 00 00 00       	mov    ebx,0x2
c0003156:	89 da                	mov    edx,ebx
c0003158:	89 e8                	mov    eax,ebp
c000315a:	e8 18 fc ff ff       	call   c0002d77 <get_fat>
c000315f:	83 f8 01             	cmp    eax,0x1
c0003162:	0f 84 2e ff ff ff    	je     c0003096 <create_chain+0x31>
c0003168:	83 f8 ff             	cmp    eax,0xffffffff
c000316b:	0f 84 9a 00 00 00    	je     c000320b <create_chain+0x1a6>
c0003171:	85 c0                	test   eax,eax
c0003173:	74 11                	je     c0003186 <create_chain+0x121>
c0003175:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0003178:	83 f8 01             	cmp    eax,0x1
c000317b:	76 0d                	jbe    c000318a <create_chain+0x125>
c000317d:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003180:	76 08                	jbe    c000318a <create_chain+0x125>
c0003182:	89 c7                	mov    edi,eax
c0003184:	eb 04                	jmp    c000318a <create_chain+0x125>
c0003186:	85 db                	test   ebx,ebx
c0003188:	75 38                	jne    c00031c2 <create_chain+0x15d>
c000318a:	89 fb                	mov    ebx,edi
c000318c:	43                   	inc    ebx
c000318d:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003190:	77 0e                	ja     c00031a0 <create_chain+0x13b>
c0003192:	83 ff 01             	cmp    edi,0x1
c0003195:	0f 86 28 ff ff ff    	jbe    c00030c3 <create_chain+0x5e>
c000319b:	bb 02 00 00 00       	mov    ebx,0x2
c00031a0:	89 da                	mov    edx,ebx
c00031a2:	89 e8                	mov    eax,ebp
c00031a4:	e8 ce fb ff ff       	call   c0002d77 <get_fat>
c00031a9:	85 c0                	test   eax,eax
c00031ab:	74 15                	je     c00031c2 <create_chain+0x15d>
c00031ad:	83 f8 01             	cmp    eax,0x1
c00031b0:	0f 84 e0 fe ff ff    	je     c0003096 <create_chain+0x31>
c00031b6:	40                   	inc    eax
c00031b7:	74 52                	je     c000320b <create_chain+0x1a6>
c00031b9:	39 fb                	cmp    ebx,edi
c00031bb:	75 cf                	jne    c000318c <create_chain+0x127>
c00031bd:	e9 01 ff ff ff       	jmp    c00030c3 <create_chain+0x5e>
c00031c2:	83 c9 ff             	or     ecx,0xffffffff
c00031c5:	89 da                	mov    edx,ebx
c00031c7:	89 f0                	mov    eax,esi
c00031c9:	e8 a4 f9 ff ff       	call   c0002b72 <put_fat>
c00031ce:	85 c0                	test   eax,eax
c00031d0:	75 32                	jne    c0003204 <create_chain+0x19f>
c00031d2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00031d7:	74 11                	je     c00031ea <create_chain+0x185>
c00031d9:	89 d9                	mov    ecx,ebx
c00031db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031df:	89 f0                	mov    eax,esi
c00031e1:	e8 8c f9 ff ff       	call   c0002b72 <put_fat>
c00031e6:	85 c0                	test   eax,eax
c00031e8:	75 1a                	jne    c0003204 <create_chain+0x19f>
c00031ea:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00031ed:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c00031f0:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c00031f3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00031f6:	39 d0                	cmp    eax,edx
c00031f8:	77 04                	ja     c00031fe <create_chain+0x199>
c00031fa:	48                   	dec    eax
c00031fb:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00031fe:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003202:	eb 56                	jmp    c000325a <create_chain+0x1f5>
c0003204:	48                   	dec    eax
c0003205:	0f 85 8b fe ff ff    	jne    c0003096 <create_chain+0x31>
c000320b:	83 cb ff             	or     ebx,0xffffffff
c000320e:	eb 4a                	jmp    c000325a <create_chain+0x1f5>
c0003210:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003214:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003217:	41                   	inc    ecx
c0003218:	39 d9                	cmp    ecx,ebx
c000321a:	75 19                	jne    c0003235 <create_chain+0x1d0>
c000321c:	b9 02 00 00 00       	mov    ecx,0x2
c0003221:	85 d2                	test   edx,edx
c0003223:	74 03                	je     c0003228 <create_chain+0x1c3>
c0003225:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003228:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000322b:	85 c0                	test   eax,eax
c000322d:	0f 85 63 fe ff ff    	jne    c0003096 <create_chain+0x31>
c0003233:	eb b5                	jmp    c00031ea <create_chain+0x185>
c0003235:	85 d2                	test   edx,edx
c0003237:	75 07                	jne    c0003240 <create_chain+0x1db>
c0003239:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003240:	89 d9                	mov    ecx,ebx
c0003242:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003246:	89 e8                	mov    eax,ebp
c0003248:	e8 bb fa ff ff       	call   c0002d08 <fill_last_frag>
c000324d:	85 c0                	test   eax,eax
c000324f:	75 b3                	jne    c0003204 <create_chain+0x19f>
c0003251:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003258:	eb 90                	jmp    c00031ea <create_chain+0x185>
c000325a:	83 c4 1c             	add    esp,0x1c
c000325d:	89 d8                	mov    eax,ebx
c000325f:	5b                   	pop    ebx
c0003260:	5e                   	pop    esi
c0003261:	5f                   	pop    edi
c0003262:	5d                   	pop    ebp
c0003263:	c3                   	ret    

c0003264 <remove_chain>:
c0003264:	55                   	push   ebp
c0003265:	57                   	push   edi
c0003266:	56                   	push   esi
c0003267:	53                   	push   ebx
c0003268:	83 ec 1c             	sub    esp,0x1c
c000326b:	83 fa 01             	cmp    edx,0x1
c000326e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003272:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003274:	77 0a                	ja     c0003280 <remove_chain+0x1c>
c0003276:	b8 02 00 00 00       	mov    eax,0x2
c000327b:	e9 24 01 00 00       	jmp    c00033a4 <remove_chain+0x140>
c0003280:	89 d6                	mov    esi,edx
c0003282:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c0003285:	76 ef                	jbe    c0003276 <remove_chain+0x12>
c0003287:	89 c7                	mov    edi,eax
c0003289:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000328e:	75 06                	jne    c0003296 <remove_chain+0x32>
c0003290:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003294:	eb 54                	jmp    c00032ea <remove_chain+0x86>
c0003296:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003299:	75 06                	jne    c00032a1 <remove_chain+0x3d>
c000329b:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c000329f:	74 ef                	je     c0003290 <remove_chain+0x2c>
c00032a1:	83 c9 ff             	or     ecx,0xffffffff
c00032a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00032a8:	89 d8                	mov    eax,ebx
c00032aa:	e8 c3 f8 ff ff       	call   c0002b72 <put_fat>
c00032af:	85 c0                	test   eax,eax
c00032b1:	74 dd                	je     c0003290 <remove_chain+0x2c>
c00032b3:	e9 ec 00 00 00       	jmp    c00033a4 <remove_chain+0x140>
c00032b8:	83 f8 01             	cmp    eax,0x1
c00032bb:	74 b9                	je     c0003276 <remove_chain+0x12>
c00032bd:	83 f8 ff             	cmp    eax,0xffffffff
c00032c0:	74 6d                	je     c000332f <remove_chain+0xcb>
c00032c2:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032c5:	75 6f                	jne    c0003336 <remove_chain+0xd2>
c00032c7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00032ca:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00032cd:	8d 51 fe             	lea    edx,[ecx-0x2]
c00032d0:	39 d0                	cmp    eax,edx
c00032d2:	73 08                	jae    c00032dc <remove_chain+0x78>
c00032d4:	40                   	inc    eax
c00032d5:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00032d9:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00032dc:	8d 4e 01             	lea    ecx,[esi+0x1]
c00032df:	39 e9                	cmp    ecx,ebp
c00032e1:	75 64                	jne    c0003347 <remove_chain+0xe3>
c00032e3:	89 ee                	mov    esi,ebp
c00032e5:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00032e8:	76 0f                	jbe    c00032f9 <remove_chain+0x95>
c00032ea:	89 f2                	mov    edx,esi
c00032ec:	89 f8                	mov    eax,edi
c00032ee:	e8 84 fa ff ff       	call   c0002d77 <get_fat>
c00032f3:	89 c5                	mov    ebp,eax
c00032f5:	85 c0                	test   eax,eax
c00032f7:	75 bf                	jne    c00032b8 <remove_chain+0x54>
c00032f9:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032fc:	0f 85 a0 00 00 00    	jne    c00033a2 <remove_chain+0x13e>
c0003302:	eb 6c                	jmp    c0003370 <remove_chain+0x10c>
c0003304:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003307:	84 c0                	test   al,al
c0003309:	75 7d                	jne    c0003388 <remove_chain+0x124>
c000330b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000330e:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003312:	0f 84 86 00 00 00    	je     c000339e <remove_chain+0x13a>
c0003318:	89 da                	mov    edx,ebx
c000331a:	89 f8                	mov    eax,edi
c000331c:	e8 56 fa ff ff       	call   c0002d77 <get_fat>
c0003321:	83 f8 01             	cmp    eax,0x1
c0003324:	0f 86 4c ff ff ff    	jbe    c0003276 <remove_chain+0x12>
c000332a:	83 f8 ff             	cmp    eax,0xffffffff
c000332d:	75 4e                	jne    c000337d <remove_chain+0x119>
c000332f:	b8 01 00 00 00       	mov    eax,0x1
c0003334:	eb 6e                	jmp    c00033a4 <remove_chain+0x140>
c0003336:	31 c9                	xor    ecx,ecx
c0003338:	89 f2                	mov    edx,esi
c000333a:	89 d8                	mov    eax,ebx
c000333c:	e8 31 f8 ff ff       	call   c0002b72 <put_fat>
c0003341:	85 c0                	test   eax,eax
c0003343:	74 82                	je     c00032c7 <remove_chain+0x63>
c0003345:	eb 5d                	jmp    c00033a4 <remove_chain+0x140>
c0003347:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000334a:	75 1b                	jne    c0003367 <remove_chain+0x103>
c000334c:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003350:	89 d8                	mov    eax,ebx
c0003352:	83 ec 0c             	sub    esp,0xc
c0003355:	6a 00                	push   0x0
c0003357:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000335b:	e8 5d f7 ff ff       	call   c0002abd <change_bitmap>
c0003360:	83 c4 10             	add    esp,0x10
c0003363:	85 c0                	test   eax,eax
c0003365:	75 3d                	jne    c00033a4 <remove_chain+0x140>
c0003367:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c000336b:	e9 73 ff ff ff       	jmp    c00032e3 <remove_chain+0x7f>
c0003370:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003375:	75 8d                	jne    c0003304 <remove_chain+0xa0>
c0003377:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c000337b:	eb 25                	jmp    c00033a2 <remove_chain+0x13e>
c000337d:	8d 53 01             	lea    edx,[ebx+0x1]
c0003380:	89 c3                	mov    ebx,eax
c0003382:	39 c2                	cmp    edx,eax
c0003384:	74 88                	je     c000330e <remove_chain+0xaa>
c0003386:	eb 1a                	jmp    c00033a2 <remove_chain+0x13e>
c0003388:	3c 03                	cmp    al,0x3
c000338a:	75 16                	jne    c00033a2 <remove_chain+0x13e>
c000338c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000338f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003393:	77 0d                	ja     c00033a2 <remove_chain+0x13e>
c0003395:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c0003398:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000339c:	72 04                	jb     c00033a2 <remove_chain+0x13e>
c000339e:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00033a2:	31 c0                	xor    eax,eax
c00033a4:	83 c4 1c             	add    esp,0x1c
c00033a7:	5b                   	pop    ebx
c00033a8:	5e                   	pop    esi
c00033a9:	5f                   	pop    edi
c00033aa:	5d                   	pop    ebp
c00033ab:	c3                   	ret    

c00033ac <dir_clear>:
c00033ac:	55                   	push   ebp
c00033ad:	57                   	push   edi
c00033ae:	56                   	push   esi
c00033af:	89 c6                	mov    esi,eax
c00033b1:	53                   	push   ebx
c00033b2:	83 ec 1c             	sub    esp,0x1c
c00033b5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00033b9:	e8 9d ed ff ff       	call   c000215b <sync_window>
c00033be:	85 c0                	test   eax,eax
c00033c0:	0f 85 de 00 00 00    	jne    c00034a4 <dir_clear+0xf8>
c00033c6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033ca:	89 f0                	mov    eax,esi
c00033cc:	8d 6e 54             	lea    ebp,[esi+0x54]
c00033cf:	e8 d6 e8 ff ff       	call   c0001caa <clst2sect>
c00033d4:	b9 00 02 00 00       	mov    ecx,0x200
c00033d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00033dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00033e1:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00033e4:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00033e7:	89 e8                	mov    eax,ebp
c00033e9:	31 d2                	xor    edx,edx
c00033eb:	e8 b5 e6 ff ff       	call   c0001aa5 <mem_set>
c00033f0:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c00033f4:	c1 e3 09             	shl    ebx,0x9
c00033f7:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c00033fd:	76 1f                	jbe    c000341e <dir_clear+0x72>
c00033ff:	bb 00 80 00 00       	mov    ebx,0x8000
c0003404:	eb 18                	jmp    c000341e <dir_clear+0x72>
c0003406:	83 ec 0c             	sub    esp,0xc
c0003409:	53                   	push   ebx
c000340a:	e8 35 4e 00 00       	call   c0008244 <ff_memalloc>
c000340f:	83 c4 10             	add    esp,0x10
c0003412:	89 c7                	mov    edi,eax
c0003414:	85 c0                	test   eax,eax
c0003416:	0f 85 8f 00 00 00    	jne    c00034ab <dir_clear+0xff>
c000341c:	d1 eb                	shr    ebx,1
c000341e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003424:	77 e0                	ja     c0003406 <dir_clear+0x5a>
c0003426:	31 db                	xor    ebx,ebx
c0003428:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000342c:	39 d8                	cmp    eax,ebx
c000342e:	76 66                	jbe    c0003496 <dir_clear+0xea>
c0003430:	83 ec 0c             	sub    esp,0xc
c0003433:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003437:	6a 01                	push   0x1
c0003439:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000343d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003441:	55                   	push   ebp
c0003442:	50                   	push   eax
c0003443:	e8 94 e5 ff ff       	call   c00019dc <disk_write>
c0003448:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000344d:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003452:	83 c4 20             	add    esp,0x20
c0003455:	85 c0                	test   eax,eax
c0003457:	75 3d                	jne    c0003496 <dir_clear+0xea>
c0003459:	43                   	inc    ebx
c000345a:	eb cc                	jmp    c0003428 <dir_clear+0x7c>
c000345c:	83 ec 0c             	sub    esp,0xc
c000345f:	31 d2                	xor    edx,edx
c0003461:	55                   	push   ebp
c0003462:	89 d8                	mov    eax,ebx
c0003464:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0003468:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000346c:	52                   	push   edx
c000346d:	50                   	push   eax
c000346e:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003472:	57                   	push   edi
c0003473:	50                   	push   eax
c0003474:	e8 63 e5 ff ff       	call   c00019dc <disk_write>
c0003479:	83 c4 20             	add    esp,0x20
c000347c:	85 c0                	test   eax,eax
c000347e:	75 0a                	jne    c000348a <dir_clear+0xde>
c0003480:	01 eb                	add    ebx,ebp
c0003482:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003486:	39 d8                	cmp    eax,ebx
c0003488:	77 d2                	ja     c000345c <dir_clear+0xb0>
c000348a:	83 ec 0c             	sub    esp,0xc
c000348d:	57                   	push   edi
c000348e:	e8 c7 4d 00 00       	call   c000825a <ff_memfree>
c0003493:	83 c4 10             	add    esp,0x10
c0003496:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000349a:	39 d8                	cmp    eax,ebx
c000349c:	0f 95 c0             	setne  al
c000349f:	0f b6 c0             	movzx  eax,al
c00034a2:	eb 19                	jmp    c00034bd <dir_clear+0x111>
c00034a4:	b8 01 00 00 00       	mov    eax,0x1
c00034a9:	eb 12                	jmp    c00034bd <dir_clear+0x111>
c00034ab:	89 d9                	mov    ecx,ebx
c00034ad:	31 d2                	xor    edx,edx
c00034af:	c1 eb 09             	shr    ebx,0x9
c00034b2:	e8 ee e5 ff ff       	call   c0001aa5 <mem_set>
c00034b7:	89 dd                	mov    ebp,ebx
c00034b9:	31 db                	xor    ebx,ebx
c00034bb:	eb c5                	jmp    c0003482 <dir_clear+0xd6>
c00034bd:	83 c4 1c             	add    esp,0x1c
c00034c0:	5b                   	pop    ebx
c00034c1:	5e                   	pop    esi
c00034c2:	5f                   	pop    edi
c00034c3:	5d                   	pop    ebp
c00034c4:	c3                   	ret    

c00034c5 <dir_next>:
c00034c5:	55                   	push   ebp
c00034c6:	57                   	push   edi
c00034c7:	56                   	push   esi
c00034c8:	53                   	push   ebx
c00034c9:	89 c3                	mov    ebx,eax
c00034cb:	83 ec 1c             	sub    esp,0x1c
c00034ce:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034d0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00034d4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00034d7:	8d 78 20             	lea    edi,[eax+0x20]
c00034da:	31 c0                	xor    eax,eax
c00034dc:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00034e0:	0f 94 c0             	sete   al
c00034e3:	48                   	dec    eax
c00034e4:	25 00 00 20 f0       	and    eax,0xf0200000
c00034e9:	05 00 00 00 10       	add    eax,0x10000000
c00034ee:	39 f8                	cmp    eax,edi
c00034f0:	77 0e                	ja     c0003500 <dir_next+0x3b>
c00034f2:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00034f9:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003500:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003503:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003506:	b8 04 00 00 00       	mov    eax,0x4
c000350b:	89 ce                	mov    esi,ecx
c000350d:	09 d6                	or     esi,edx
c000350f:	0f 84 da 00 00 00    	je     c00035ef <dir_next+0x12a>
c0003515:	89 f8                	mov    eax,edi
c0003517:	25 ff 01 00 00       	and    eax,0x1ff
c000351c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003520:	0f 85 b9 00 00 00    	jne    c00035df <dir_next+0x11a>
c0003526:	83 c2 01             	add    edx,0x1
c0003529:	83 d1 00             	adc    ecx,0x0
c000352c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000352f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003532:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003535:	85 d2                	test   edx,edx
c0003537:	75 29                	jne    c0003562 <dir_next+0x9d>
c0003539:	89 fa                	mov    edx,edi
c000353b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000353f:	c1 ea 05             	shr    edx,0x5
c0003542:	39 c2                	cmp    edx,eax
c0003544:	0f 82 95 00 00 00    	jb     c00035df <dir_next+0x11a>
c000354a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003551:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003558:	b8 04 00 00 00       	mov    eax,0x4
c000355d:	e9 8d 00 00 00       	jmp    c00035ef <dir_next+0x12a>
c0003562:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003566:	89 f9                	mov    ecx,edi
c0003568:	48                   	dec    eax
c0003569:	c1 e9 09             	shr    ecx,0x9
c000356c:	85 c8                	test   eax,ecx
c000356e:	75 6f                	jne    c00035df <dir_next+0x11a>
c0003570:	89 d8                	mov    eax,ebx
c0003572:	e8 00 f8 ff ff       	call   c0002d77 <get_fat>
c0003577:	89 c6                	mov    esi,eax
c0003579:	83 f8 01             	cmp    eax,0x1
c000357c:	77 07                	ja     c0003585 <dir_next+0xc0>
c000357e:	b8 02 00 00 00       	mov    eax,0x2
c0003583:	eb 6a                	jmp    c00035ef <dir_next+0x12a>
c0003585:	83 f8 ff             	cmp    eax,0xffffffff
c0003588:	75 07                	jne    c0003591 <dir_next+0xcc>
c000358a:	b8 01 00 00 00       	mov    eax,0x1
c000358f:	eb 5e                	jmp    c00035ef <dir_next+0x12a>
c0003591:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0003594:	77 37                	ja     c00035cd <dir_next+0x108>
c0003596:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000359b:	74 ad                	je     c000354a <dir_next+0x85>
c000359d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00035a0:	89 d8                	mov    eax,ebx
c00035a2:	e8 be fa ff ff       	call   c0003065 <create_chain>
c00035a7:	89 c6                	mov    esi,eax
c00035a9:	b8 07 00 00 00       	mov    eax,0x7
c00035ae:	85 f6                	test   esi,esi
c00035b0:	74 3d                	je     c00035ef <dir_next+0x12a>
c00035b2:	83 fe 01             	cmp    esi,0x1
c00035b5:	74 c7                	je     c000357e <dir_next+0xb9>
c00035b7:	83 fe ff             	cmp    esi,0xffffffff
c00035ba:	74 ce                	je     c000358a <dir_next+0xc5>
c00035bc:	89 f2                	mov    edx,esi
c00035be:	89 e8                	mov    eax,ebp
c00035c0:	e8 e7 fd ff ff       	call   c00033ac <dir_clear>
c00035c5:	85 c0                	test   eax,eax
c00035c7:	75 c1                	jne    c000358a <dir_next+0xc5>
c00035c9:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00035cd:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00035d0:	89 f2                	mov    edx,esi
c00035d2:	89 e8                	mov    eax,ebp
c00035d4:	e8 d1 e6 ff ff       	call   c0001caa <clst2sect>
c00035d9:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00035dc:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00035df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00035e3:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00035e6:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c00035ea:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00035ed:	31 c0                	xor    eax,eax
c00035ef:	83 c4 1c             	add    esp,0x1c
c00035f2:	5b                   	pop    ebx
c00035f3:	5e                   	pop    esi
c00035f4:	5f                   	pop    edi
c00035f5:	5d                   	pop    ebp
c00035f6:	c3                   	ret    

c00035f7 <load_xdir>:
c00035f7:	55                   	push   ebp
c00035f8:	57                   	push   edi
c00035f9:	56                   	push   esi
c00035fa:	89 c6                	mov    esi,eax
c00035fc:	53                   	push   ebx
c00035fd:	83 ec 1c             	sub    esp,0x1c
c0003600:	8b 00                	mov    eax,DWORD PTR [eax]
c0003602:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003605:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003608:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000360b:	e8 df eb ff ff       	call   c00021ef <move_window>
c0003610:	89 c3                	mov    ebx,eax
c0003612:	85 c0                	test   eax,eax
c0003614:	0f 85 0c 01 00 00    	jne    c0003726 <load_xdir+0x12f>
c000361a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000361d:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003620:	0f 85 fb 00 00 00    	jne    c0003721 <load_xdir+0x12a>
c0003626:	89 f8                	mov    eax,edi
c0003628:	b9 20 00 00 00       	mov    ecx,0x20
c000362d:	e8 5e e4 ff ff       	call   c0001a90 <mem_cpy>
c0003632:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003636:	40                   	inc    eax
c0003637:	c1 e0 05             	shl    eax,0x5
c000363a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000363e:	83 e8 60             	sub    eax,0x60
c0003641:	3d 00 02 00 00       	cmp    eax,0x200
c0003646:	0f 87 d5 00 00 00    	ja     c0003721 <load_xdir+0x12a>
c000364c:	31 d2                	xor    edx,edx
c000364e:	89 f0                	mov    eax,esi
c0003650:	e8 70 fe ff ff       	call   c00034c5 <dir_next>
c0003655:	89 c3                	mov    ebx,eax
c0003657:	83 f8 04             	cmp    eax,0x4
c000365a:	0f 84 c1 00 00 00    	je     c0003721 <load_xdir+0x12a>
c0003660:	85 c0                	test   eax,eax
c0003662:	0f 85 be 00 00 00    	jne    c0003726 <load_xdir+0x12f>
c0003668:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000366b:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000366e:	8b 06                	mov    eax,DWORD PTR [esi]
c0003670:	e8 7a eb ff ff       	call   c00021ef <move_window>
c0003675:	89 c3                	mov    ebx,eax
c0003677:	85 c0                	test   eax,eax
c0003679:	0f 85 a7 00 00 00    	jne    c0003726 <load_xdir+0x12f>
c000367f:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003682:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c0003685:	0f 85 96 00 00 00    	jne    c0003721 <load_xdir+0x12a>
c000368b:	8d 47 20             	lea    eax,[edi+0x20]
c000368e:	b9 20 00 00 00       	mov    ecx,0x20
c0003693:	e8 f8 e3 ff ff       	call   c0001a90 <mem_cpy>
c0003698:	31 d2                	xor    edx,edx
c000369a:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c000369e:	b9 0f 00 00 00       	mov    ecx,0xf
c00036a3:	83 c0 2c             	add    eax,0x2c
c00036a6:	f7 f1                	div    ecx
c00036a8:	c1 e0 05             	shl    eax,0x5
c00036ab:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00036af:	77 70                	ja     c0003721 <load_xdir+0x12a>
c00036b1:	bd 40 00 00 00       	mov    ebp,0x40
c00036b6:	31 d2                	xor    edx,edx
c00036b8:	89 f0                	mov    eax,esi
c00036ba:	e8 06 fe ff ff       	call   c00034c5 <dir_next>
c00036bf:	89 c3                	mov    ebx,eax
c00036c1:	83 f8 04             	cmp    eax,0x4
c00036c4:	74 5b                	je     c0003721 <load_xdir+0x12a>
c00036c6:	85 c0                	test   eax,eax
c00036c8:	75 5c                	jne    c0003726 <load_xdir+0x12f>
c00036ca:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00036cd:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00036d0:	8b 06                	mov    eax,DWORD PTR [esi]
c00036d2:	e8 18 eb ff ff       	call   c00021ef <move_window>
c00036d7:	89 c3                	mov    ebx,eax
c00036d9:	85 c0                	test   eax,eax
c00036db:	75 49                	jne    c0003726 <load_xdir+0x12f>
c00036dd:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00036e0:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00036e3:	75 3c                	jne    c0003721 <load_xdir+0x12a>
c00036e5:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c00036eb:	77 0d                	ja     c00036fa <load_xdir+0x103>
c00036ed:	8d 04 2f             	lea    eax,[edi+ebp*1]
c00036f0:	b9 20 00 00 00       	mov    ecx,0x20
c00036f5:	e8 96 e3 ff ff       	call   c0001a90 <mem_cpy>
c00036fa:	83 c5 20             	add    ebp,0x20
c00036fd:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003701:	77 b3                	ja     c00036b6 <load_xdir+0xbf>
c0003703:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003709:	77 1b                	ja     c0003726 <load_xdir+0x12f>
c000370b:	89 f8                	mov    eax,edi
c000370d:	e8 cd e7 ff ff       	call   c0001edf <xdir_sum>
c0003712:	89 c1                	mov    ecx,eax
c0003714:	8d 47 02             	lea    eax,[edi+0x2]
c0003717:	e8 f5 e2 ff ff       	call   c0001a11 <ld_word>
c000371c:	66 39 c1             	cmp    cx,ax
c000371f:	74 05                	je     c0003726 <load_xdir+0x12f>
c0003721:	bb 02 00 00 00       	mov    ebx,0x2
c0003726:	83 c4 1c             	add    esp,0x1c
c0003729:	89 d8                	mov    eax,ebx
c000372b:	5b                   	pop    ebx
c000372c:	5e                   	pop    esi
c000372d:	5f                   	pop    edi
c000372e:	5d                   	pop    ebp
c000372f:	c3                   	ret    

c0003730 <load_obj_xdir>:
c0003730:	53                   	push   ebx
c0003731:	89 c3                	mov    ebx,eax
c0003733:	83 ec 08             	sub    esp,0x8
c0003736:	8b 02                	mov    eax,DWORD PTR [edx]
c0003738:	89 03                	mov    DWORD PTR [ebx],eax
c000373a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000373d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003740:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003743:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003746:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003749:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003750:	30 c0                	xor    al,al
c0003752:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003759:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000375c:	89 d8                	mov    eax,ebx
c000375e:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003761:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c0003764:	e8 04 f8 ff ff       	call   c0002f6d <dir_sdi>
c0003769:	85 c0                	test   eax,eax
c000376b:	75 0b                	jne    c0003778 <load_obj_xdir+0x48>
c000376d:	89 d8                	mov    eax,ebx
c000376f:	83 c4 08             	add    esp,0x8
c0003772:	5b                   	pop    ebx
c0003773:	e9 7f fe ff ff       	jmp    c00035f7 <load_xdir>
c0003778:	83 c4 08             	add    esp,0x8
c000377b:	5b                   	pop    ebx
c000377c:	c3                   	ret    

c000377d <dir_read>:
c000377d:	55                   	push   ebp
c000377e:	bd 04 00 00 00       	mov    ebp,0x4
c0003783:	57                   	push   edi
c0003784:	56                   	push   esi
c0003785:	be ff ff ff ff       	mov    esi,0xffffffff
c000378a:	53                   	push   ebx
c000378b:	89 c3                	mov    ebx,eax
c000378d:	83 ec 1c             	sub    esp,0x1c
c0003790:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003794:	8b 38                	mov    edi,DWORD PTR [eax]
c0003796:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000379b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000379e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00037a1:	89 c8                	mov    eax,ecx
c00037a3:	09 d0                	or     eax,edx
c00037a5:	0f 84 25 01 00 00    	je     c00038d0 <dir_read+0x153>
c00037ab:	89 f8                	mov    eax,edi
c00037ad:	e8 3d ea ff ff       	call   c00021ef <move_window>
c00037b2:	89 c5                	mov    ebp,eax
c00037b4:	85 c0                	test   eax,eax
c00037b6:	0f 85 23 01 00 00    	jne    c00038df <dir_read+0x162>
c00037bc:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00037bf:	8a 0a                	mov    cl,BYTE PTR [edx]
c00037c1:	84 c9                	test   cl,cl
c00037c3:	0f 84 11 01 00 00    	je     c00038da <dir_read+0x15d>
c00037c9:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00037cc:	75 48                	jne    c0003816 <dir_read+0x99>
c00037ce:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037d3:	74 10                	je     c00037e5 <dir_read+0x68>
c00037d5:	80 f9 83             	cmp    cl,0x83
c00037d8:	0f 85 dd 00 00 00    	jne    c00038bb <dir_read+0x13e>
c00037de:	31 ed                	xor    ebp,ebp
c00037e0:	e9 08 01 00 00       	jmp    c00038ed <dir_read+0x170>
c00037e5:	80 f9 85             	cmp    cl,0x85
c00037e8:	0f 85 cd 00 00 00    	jne    c00038bb <dir_read+0x13e>
c00037ee:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00037f1:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00037f4:	89 d8                	mov    eax,ebx
c00037f6:	e8 fc fd ff ff       	call   c00035f7 <load_xdir>
c00037fb:	89 c5                	mov    ebp,eax
c00037fd:	85 c0                	test   eax,eax
c00037ff:	0f 85 da 00 00 00    	jne    c00038df <dir_read+0x162>
c0003805:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003808:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c000380b:	83 e0 3f             	and    eax,0x3f
c000380e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003811:	e9 d7 00 00 00       	jmp    c00038ed <dir_read+0x170>
c0003816:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003819:	83 e0 3f             	and    eax,0x3f
c000381c:	80 f9 2e             	cmp    cl,0x2e
c000381f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003823:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003826:	0f 84 8a 00 00 00    	je     c00038b6 <dir_read+0x139>
c000382c:	80 f9 e5             	cmp    cl,0xe5
c000382f:	0f 84 81 00 00 00    	je     c00038b6 <dir_read+0x139>
c0003835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003839:	83 e0 1f             	and    eax,0x1f
c000383c:	83 f8 08             	cmp    eax,0x8
c000383f:	0f 94 c0             	sete   al
c0003842:	0f b6 c0             	movzx  eax,al
c0003845:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003849:	75 6b                	jne    c00038b6 <dir_read+0x139>
c000384b:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003850:	75 44                	jne    c0003896 <dir_read+0x119>
c0003852:	f6 c1 40             	test   cl,0x40
c0003855:	74 12                	je     c0003869 <dir_read+0xec>
c0003857:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000385a:	83 e1 bf             	and    ecx,0xffffffbf
c000385d:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003861:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003864:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003867:	eb 06                	jmp    c000386f <dir_read+0xf2>
c0003869:	89 f0                	mov    eax,esi
c000386b:	38 c8                	cmp    al,cl
c000386d:	75 47                	jne    c00038b6 <dir_read+0x139>
c000386f:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003873:	be ff ff ff ff       	mov    esi,0xffffffff
c0003878:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c000387b:	75 3e                	jne    c00038bb <dir_read+0x13e>
c000387d:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003881:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003884:	e8 8a e4 ff ff       	call   c0001d13 <pick_lfn>
c0003889:	85 c0                	test   eax,eax
c000388b:	74 2e                	je     c00038bb <dir_read+0x13e>
c000388d:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003891:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003894:	eb 25                	jmp    c00038bb <dir_read+0x13e>
c0003896:	89 f0                	mov    eax,esi
c0003898:	84 c0                	test   al,al
c000389a:	75 11                	jne    c00038ad <dir_read+0x130>
c000389c:	89 d0                	mov    eax,edx
c000389e:	e8 2a e6 ff ff       	call   c0001ecd <sum_sfn>
c00038a3:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00038a7:	0f 84 31 ff ff ff    	je     c00037de <dir_read+0x61>
c00038ad:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00038b4:	eb 37                	jmp    c00038ed <dir_read+0x170>
c00038b6:	be ff ff ff ff       	mov    esi,0xffffffff
c00038bb:	31 d2                	xor    edx,edx
c00038bd:	89 d8                	mov    eax,ebx
c00038bf:	e8 01 fc ff ff       	call   c00034c5 <dir_next>
c00038c4:	89 c5                	mov    ebp,eax
c00038c6:	85 c0                	test   eax,eax
c00038c8:	0f 84 cd fe ff ff    	je     c000379b <dir_read+0x1e>
c00038ce:	eb 0f                	jmp    c00038df <dir_read+0x162>
c00038d0:	85 ed                	test   ebp,ebp
c00038d2:	0f 84 06 ff ff ff    	je     c00037de <dir_read+0x61>
c00038d8:	eb 05                	jmp    c00038df <dir_read+0x162>
c00038da:	bd 04 00 00 00       	mov    ebp,0x4
c00038df:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00038e6:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00038ed:	83 c4 1c             	add    esp,0x1c
c00038f0:	89 e8                	mov    eax,ebp
c00038f2:	5b                   	pop    ebx
c00038f3:	5e                   	pop    esi
c00038f4:	5f                   	pop    edi
c00038f5:	5d                   	pop    ebp
c00038f6:	c3                   	ret    

c00038f7 <dir_alloc>:
c00038f7:	55                   	push   ebp
c00038f8:	89 d5                	mov    ebp,edx
c00038fa:	57                   	push   edi
c00038fb:	31 d2                	xor    edx,edx
c00038fd:	56                   	push   esi
c00038fe:	53                   	push   ebx
c00038ff:	89 c3                	mov    ebx,eax
c0003901:	83 ec 0c             	sub    esp,0xc
c0003904:	8b 38                	mov    edi,DWORD PTR [eax]
c0003906:	e8 62 f6 ff ff       	call   c0002f6d <dir_sdi>
c000390b:	85 c0                	test   eax,eax
c000390d:	75 4e                	jne    c000395d <dir_alloc+0x66>
c000390f:	31 f6                	xor    esi,esi
c0003911:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003914:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003917:	89 f8                	mov    eax,edi
c0003919:	e8 d1 e8 ff ff       	call   c00021ef <move_window>
c000391e:	85 c0                	test   eax,eax
c0003920:	75 3b                	jne    c000395d <dir_alloc+0x66>
c0003922:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003925:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003928:	8a 12                	mov    dl,BYTE PTR [edx]
c000392a:	75 07                	jne    c0003933 <dir_alloc+0x3c>
c000392c:	f7 d2                	not    edx
c000392e:	c0 ea 07             	shr    dl,0x7
c0003931:	eb 0d                	jmp    c0003940 <dir_alloc+0x49>
c0003933:	84 d2                	test   dl,dl
c0003935:	0f 94 c1             	sete   cl
c0003938:	80 fa e5             	cmp    dl,0xe5
c000393b:	0f 94 c2             	sete   dl
c000393e:	09 ca                	or     edx,ecx
c0003940:	84 d2                	test   dl,dl
c0003942:	74 07                	je     c000394b <dir_alloc+0x54>
c0003944:	46                   	inc    esi
c0003945:	39 ee                	cmp    esi,ebp
c0003947:	75 04                	jne    c000394d <dir_alloc+0x56>
c0003949:	eb 1c                	jmp    c0003967 <dir_alloc+0x70>
c000394b:	31 f6                	xor    esi,esi
c000394d:	ba 01 00 00 00       	mov    edx,0x1
c0003952:	89 d8                	mov    eax,ebx
c0003954:	e8 6c fb ff ff       	call   c00034c5 <dir_next>
c0003959:	85 c0                	test   eax,eax
c000395b:	74 b4                	je     c0003911 <dir_alloc+0x1a>
c000395d:	83 f8 04             	cmp    eax,0x4
c0003960:	75 05                	jne    c0003967 <dir_alloc+0x70>
c0003962:	b8 07 00 00 00       	mov    eax,0x7
c0003967:	83 c4 0c             	add    esp,0xc
c000396a:	5b                   	pop    ebx
c000396b:	5e                   	pop    esi
c000396c:	5f                   	pop    edi
c000396d:	5d                   	pop    ebp
c000396e:	c3                   	ret    

c000396f <store_xdir>:
c000396f:	55                   	push   ebp
c0003970:	57                   	push   edi
c0003971:	89 c7                	mov    edi,eax
c0003973:	56                   	push   esi
c0003974:	53                   	push   ebx
c0003975:	83 ec 0c             	sub    esp,0xc
c0003978:	8b 00                	mov    eax,DWORD PTR [eax]
c000397a:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c000397d:	89 e8                	mov    eax,ebp
c000397f:	e8 5b e5 ff ff       	call   c0001edf <xdir_sum>
c0003984:	0f b7 d0             	movzx  edx,ax
c0003987:	8d 45 02             	lea    eax,[ebp+0x2]
c000398a:	e8 f4 e0 ff ff       	call   c0001a83 <st_word>
c000398f:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003993:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003996:	89 f8                	mov    eax,edi
c0003998:	e8 d0 f5 ff ff       	call   c0002f6d <dir_sdi>
c000399d:	89 c6                	mov    esi,eax
c000399f:	85 f6                	test   esi,esi
c00039a1:	75 3d                	jne    c00039e0 <store_xdir+0x71>
c00039a3:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c00039a6:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c00039a9:	8b 07                	mov    eax,DWORD PTR [edi]
c00039ab:	e8 3f e8 ff ff       	call   c00021ef <move_window>
c00039b0:	89 c6                	mov    esi,eax
c00039b2:	85 c0                	test   eax,eax
c00039b4:	75 2a                	jne    c00039e0 <store_xdir+0x71>
c00039b6:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c00039b9:	b9 20 00 00 00       	mov    ecx,0x20
c00039be:	89 ea                	mov    edx,ebp
c00039c0:	e8 cb e0 ff ff       	call   c0001a90 <mem_cpy>
c00039c5:	8b 07                	mov    eax,DWORD PTR [edi]
c00039c7:	85 db                	test   ebx,ebx
c00039c9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00039cd:	74 11                	je     c00039e0 <store_xdir+0x71>
c00039cf:	31 d2                	xor    edx,edx
c00039d1:	89 f8                	mov    eax,edi
c00039d3:	83 c5 20             	add    ebp,0x20
c00039d6:	e8 ea fa ff ff       	call   c00034c5 <dir_next>
c00039db:	4b                   	dec    ebx
c00039dc:	89 c6                	mov    esi,eax
c00039de:	eb bf                	jmp    c000399f <store_xdir+0x30>
c00039e0:	89 f0                	mov    eax,esi
c00039e2:	83 fe 02             	cmp    esi,0x2
c00039e5:	76 05                	jbe    c00039ec <store_xdir+0x7d>
c00039e7:	b8 02 00 00 00       	mov    eax,0x2
c00039ec:	83 c4 0c             	add    esp,0xc
c00039ef:	5b                   	pop    ebx
c00039f0:	5e                   	pop    esi
c00039f1:	5f                   	pop    edi
c00039f2:	5d                   	pop    ebp
c00039f3:	c3                   	ret    

c00039f4 <dir_remove>:
c00039f4:	57                   	push   edi
c00039f5:	56                   	push   esi
c00039f6:	53                   	push   ebx
c00039f7:	89 c3                	mov    ebx,eax
c00039f9:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00039fc:	8b 30                	mov    esi,DWORD PTR [eax]
c00039fe:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003a01:	83 fa ff             	cmp    edx,0xffffffff
c0003a04:	74 09                	je     c0003a0f <dir_remove+0x1b>
c0003a06:	e8 62 f5 ff ff       	call   c0002f6d <dir_sdi>
c0003a0b:	85 c0                	test   eax,eax
c0003a0d:	75 41                	jne    c0003a50 <dir_remove+0x5c>
c0003a0f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a12:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a15:	89 f0                	mov    eax,esi
c0003a17:	e8 d3 e7 ff ff       	call   c00021ef <move_window>
c0003a1c:	85 c0                	test   eax,eax
c0003a1e:	75 26                	jne    c0003a46 <dir_remove+0x52>
c0003a20:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a23:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003a26:	75 05                	jne    c0003a2d <dir_remove+0x39>
c0003a28:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003a2b:	eb 03                	jmp    c0003a30 <dir_remove+0x3c>
c0003a2d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a30:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a34:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003a37:	73 17                	jae    c0003a50 <dir_remove+0x5c>
c0003a39:	31 d2                	xor    edx,edx
c0003a3b:	89 d8                	mov    eax,ebx
c0003a3d:	e8 83 fa ff ff       	call   c00034c5 <dir_next>
c0003a42:	85 c0                	test   eax,eax
c0003a44:	74 c9                	je     c0003a0f <dir_remove+0x1b>
c0003a46:	83 f8 04             	cmp    eax,0x4
c0003a49:	75 05                	jne    c0003a50 <dir_remove+0x5c>
c0003a4b:	b8 02 00 00 00       	mov    eax,0x2
c0003a50:	5b                   	pop    ebx
c0003a51:	5e                   	pop    esi
c0003a52:	5f                   	pop    edi
c0003a53:	c3                   	ret    

c0003a54 <create_name>:
c0003a54:	55                   	push   ebp
c0003a55:	89 d5                	mov    ebp,edx
c0003a57:	57                   	push   edi
c0003a58:	89 c7                	mov    edi,eax
c0003a5a:	56                   	push   esi
c0003a5b:	31 f6                	xor    esi,esi
c0003a5d:	53                   	push   ebx
c0003a5e:	83 ec 3c             	sub    esp,0x3c
c0003a61:	8b 02                	mov    eax,DWORD PTR [edx]
c0003a63:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003a67:	8b 07                	mov    eax,DWORD PTR [edi]
c0003a69:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003a6c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003a70:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003a74:	e8 72 e0 ff ff       	call   c0001aeb <tchar2uni>
c0003a79:	89 c3                	mov    ebx,eax
c0003a7b:	83 f8 ff             	cmp    eax,0xffffffff
c0003a7e:	75 0a                	jne    c0003a8a <create_name+0x36>
c0003a80:	b8 06 00 00 00       	mov    eax,0x6
c0003a85:	e9 9e 02 00 00       	jmp    c0003d28 <create_name+0x2d4>
c0003a8a:	3d ff ff 00 00       	cmp    eax,0xffff
c0003a8f:	76 0c                	jbe    c0003a9d <create_name+0x49>
c0003a91:	c1 e8 10             	shr    eax,0x10
c0003a94:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003a98:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003a9c:	46                   	inc    esi
c0003a9d:	66 83 fb 1f          	cmp    bx,0x1f
c0003aa1:	76 4f                	jbe    c0003af2 <create_name+0x9e>
c0003aa3:	66 83 fb 5c          	cmp    bx,0x5c
c0003aa7:	74 35                	je     c0003ade <create_name+0x8a>
c0003aa9:	66 83 fb 2f          	cmp    bx,0x2f
c0003aad:	74 2f                	je     c0003ade <create_name+0x8a>
c0003aaf:	66 83 fb 7f          	cmp    bx,0x7f
c0003ab3:	77 11                	ja     c0003ac6 <create_name+0x72>
c0003ab5:	0f b7 d3             	movzx  edx,bx
c0003ab8:	b8 12 7e 02 c0       	mov    eax,0xc0027e12
c0003abd:	e8 11 e0 ff ff       	call   c0001ad3 <chk_chr>
c0003ac2:	85 c0                	test   eax,eax
c0003ac4:	75 ba                	jne    c0003a80 <create_name+0x2c>
c0003ac6:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003acc:	77 b2                	ja     c0003a80 <create_name+0x2c>
c0003ace:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ad2:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003ad6:	46                   	inc    esi
c0003ad7:	eb 97                	jmp    c0003a70 <create_name+0x1c>
c0003ad9:	40                   	inc    eax
c0003ada:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ade:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003ae2:	8a 10                	mov    dl,BYTE PTR [eax]
c0003ae4:	80 fa 2f             	cmp    dl,0x2f
c0003ae7:	74 f0                	je     c0003ad9 <create_name+0x85>
c0003ae9:	80 fa 5c             	cmp    dl,0x5c
c0003aec:	74 eb                	je     c0003ad9 <create_name+0x85>
c0003aee:	31 db                	xor    ebx,ebx
c0003af0:	eb 02                	jmp    c0003af4 <create_name+0xa0>
c0003af2:	b3 04                	mov    bl,0x4
c0003af4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003af8:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003afb:	85 f6                	test   esi,esi
c0003afd:	74 18                	je     c0003b17 <create_name+0xc3>
c0003aff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b03:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003b08:	66 83 f8 20          	cmp    ax,0x20
c0003b0c:	74 06                	je     c0003b14 <create_name+0xc0>
c0003b0e:	66 83 f8 2e          	cmp    ax,0x2e
c0003b12:	75 03                	jne    c0003b17 <create_name+0xc3>
c0003b14:	4e                   	dec    esi
c0003b15:	eb e4                	jmp    c0003afb <create_name+0xa7>
c0003b17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b1b:	31 ed                	xor    ebp,ebp
c0003b1d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003b23:	85 f6                	test   esi,esi
c0003b25:	0f 84 55 ff ff ff    	je     c0003a80 <create_name+0x2c>
c0003b2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b2f:	8d 55 01             	lea    edx,[ebp+0x1]
c0003b32:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003b36:	66 83 f8 20          	cmp    ax,0x20
c0003b3a:	75 04                	jne    c0003b40 <create_name+0xec>
c0003b3c:	89 d5                	mov    ebp,edx
c0003b3e:	eb eb                	jmp    c0003b2b <create_name+0xd7>
c0003b40:	85 ed                	test   ebp,ebp
c0003b42:	75 06                	jne    c0003b4a <create_name+0xf6>
c0003b44:	66 83 f8 2e          	cmp    ax,0x2e
c0003b48:	75 08                	jne    c0003b52 <create_name+0xfe>
c0003b4a:	83 cb 03             	or     ebx,0x3
c0003b4d:	eb 03                	jmp    c0003b52 <create_name+0xfe>
c0003b4f:	4e                   	dec    esi
c0003b50:	74 0c                	je     c0003b5e <create_name+0x10a>
c0003b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b56:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003b5c:	75 f1                	jne    c0003b4f <create_name+0xfb>
c0003b5e:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b63:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003b66:	ba 20 00 00 00       	mov    edx,0x20
c0003b6b:	e8 35 df ff ff       	call   c0001aa5 <mem_set>
c0003b70:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003b78:	31 c9                	xor    ecx,ecx
c0003b7a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003b7f:	8d 45 01             	lea    eax,[ebp+0x1]
c0003b82:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003b86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b8a:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003b8e:	66 85 ed             	test   bp,bp
c0003b91:	0f 84 30 01 00 00    	je     c0003cc7 <create_name+0x273>
c0003b97:	66 83 fd 20          	cmp    bp,0x20
c0003b9b:	74 10                	je     c0003bad <create_name+0x159>
c0003b9d:	66 83 fd 2e          	cmp    bp,0x2e
c0003ba1:	75 13                	jne    c0003bb6 <create_name+0x162>
c0003ba3:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003ba7:	0f 84 6b 01 00 00    	je     c0003d18 <create_name+0x2c4>
c0003bad:	83 cb 03             	or     ebx,0x3
c0003bb0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003bb4:	eb c9                	jmp    c0003b7f <create_name+0x12b>
c0003bb6:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003bba:	73 0b                	jae    c0003bc7 <create_name+0x173>
c0003bbc:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003bc0:	75 47                	jne    c0003c09 <create_name+0x1b5>
c0003bc2:	e9 51 01 00 00       	jmp    c0003d18 <create_name+0x2c4>
c0003bc7:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003bcc:	75 10                	jne    c0003bde <create_name+0x18a>
c0003bce:	83 cb 03             	or     ebx,0x3
c0003bd1:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003bd9:	e9 e9 00 00 00       	jmp    c0003cc7 <create_name+0x273>
c0003bde:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003be2:	74 0d                	je     c0003bf1 <create_name+0x19d>
c0003be4:	83 cb 03             	or     ebx,0x3
c0003be7:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003beb:	0f 87 d6 00 00 00    	ja     c0003cc7 <create_name+0x273>
c0003bf1:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003bf6:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003bfa:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003c02:	b9 08 00 00 00       	mov    ecx,0x8
c0003c07:	eb a7                	jmp    c0003bb0 <create_name+0x15c>
c0003c09:	66 83 fd 7f          	cmp    bp,0x7f
c0003c0d:	76 68                	jbe    c0003c77 <create_name+0x223>
c0003c0f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003c13:	88 da                	mov    dl,bl
c0003c15:	83 ca 02             	or     edx,0x2
c0003c18:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003c1c:	50                   	push   eax
c0003c1d:	50                   	push   eax
c0003c1e:	68 b5 01 00 00       	push   0x1b5
c0003c23:	55                   	push   ebp
c0003c24:	e8 48 46 00 00       	call   c0008271 <ff_uni2oem>
c0003c29:	83 c4 10             	add    esp,0x10
c0003c2c:	89 c5                	mov    ebp,eax
c0003c2e:	a8 80                	test   al,0x80
c0003c30:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003c34:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003c38:	74 0c                	je     c0003c46 <create_name+0x1f2>
c0003c3a:	83 e5 7f             	and    ebp,0x7f
c0003c3d:	0f b6 ad 60 7d 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd82a0]
c0003c44:	eb 2a                	jmp    c0003c70 <create_name+0x21c>
c0003c46:	66 3d ff 00          	cmp    ax,0xff
c0003c4a:	76 24                	jbe    c0003c70 <create_name+0x21c>
c0003c4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003c50:	48                   	dec    eax
c0003c51:	39 c8                	cmp    eax,ecx
c0003c53:	77 0c                	ja     c0003c61 <create_name+0x20d>
c0003c55:	83 cb 03             	or     ebx,0x3
c0003c58:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003c5c:	e9 4f ff ff ff       	jmp    c0003bb0 <create_name+0x15c>
c0003c61:	89 e8                	mov    eax,ebp
c0003c63:	88 d3                	mov    bl,dl
c0003c65:	66 c1 e8 08          	shr    ax,0x8
c0003c69:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003c6d:	41                   	inc    ecx
c0003c6e:	eb 4b                	jmp    c0003cbb <create_name+0x267>
c0003c70:	88 d3                	mov    bl,dl
c0003c72:	66 85 ed             	test   bp,bp
c0003c75:	74 19                	je     c0003c90 <create_name+0x23c>
c0003c77:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003c7b:	0f b7 d5             	movzx  edx,bp
c0003c7e:	b8 1b 7e 02 c0       	mov    eax,0xc0027e1b
c0003c83:	e8 4b de ff ff       	call   c0001ad3 <chk_chr>
c0003c88:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003c8c:	85 c0                	test   eax,eax
c0003c8e:	74 0a                	je     c0003c9a <create_name+0x246>
c0003c90:	83 cb 03             	or     ebx,0x3
c0003c93:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003c98:	eb 21                	jmp    c0003cbb <create_name+0x267>
c0003c9a:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003c9d:	66 83 f8 19          	cmp    ax,0x19
c0003ca1:	77 07                	ja     c0003caa <create_name+0x256>
c0003ca3:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ca8:	eb 11                	jmp    c0003cbb <create_name+0x267>
c0003caa:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003cad:	66 83 f8 19          	cmp    ax,0x19
c0003cb1:	77 08                	ja     c0003cbb <create_name+0x267>
c0003cb3:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003cb8:	83 ed 20             	sub    ebp,0x20
c0003cbb:	89 e8                	mov    eax,ebp
c0003cbd:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003cc1:	41                   	inc    ecx
c0003cc2:	e9 e9 fe ff ff       	jmp    c0003bb0 <create_name+0x15c>
c0003cc7:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ccb:	75 04                	jne    c0003cd1 <create_name+0x27d>
c0003ccd:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003cd1:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003cd6:	75 05                	jne    c0003cdd <create_name+0x289>
c0003cd8:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003cdd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003ce1:	83 e0 0c             	and    eax,0xc
c0003ce4:	3c 0c                	cmp    al,0xc
c0003ce6:	74 0b                	je     c0003cf3 <create_name+0x29f>
c0003ce8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003cec:	83 e0 03             	and    eax,0x3
c0003cef:	3c 03                	cmp    al,0x3
c0003cf1:	75 05                	jne    c0003cf8 <create_name+0x2a4>
c0003cf3:	83 cb 02             	or     ebx,0x2
c0003cf6:	eb 19                	jmp    c0003d11 <create_name+0x2bd>
c0003cf8:	f6 c3 02             	test   bl,0x2
c0003cfb:	75 14                	jne    c0003d11 <create_name+0x2bd>
c0003cfd:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003d02:	74 03                	je     c0003d07 <create_name+0x2b3>
c0003d04:	83 cb 10             	or     ebx,0x10
c0003d07:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003d0c:	74 03                	je     c0003d11 <create_name+0x2bd>
c0003d0e:	83 cb 08             	or     ebx,0x8
c0003d11:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003d14:	31 c0                	xor    eax,eax
c0003d16:	eb 10                	jmp    c0003d28 <create_name+0x2d4>
c0003d18:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d1d:	0f 85 ce fe ff ff    	jne    c0003bf1 <create_name+0x19d>
c0003d23:	e9 a6 fe ff ff       	jmp    c0003bce <create_name+0x17a>
c0003d28:	83 c4 3c             	add    esp,0x3c
c0003d2b:	5b                   	pop    ebx
c0003d2c:	5e                   	pop    esi
c0003d2d:	5f                   	pop    edi
c0003d2e:	5d                   	pop    ebp
c0003d2f:	c3                   	ret    

c0003d30 <xname_sum>:
c0003d30:	56                   	push   esi
c0003d31:	53                   	push   ebx
c0003d32:	89 c6                	mov    esi,eax
c0003d34:	51                   	push   ecx
c0003d35:	31 db                	xor    ebx,ebx
c0003d37:	83 c6 02             	add    esi,0x2
c0003d3a:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003d3e:	66 85 c0             	test   ax,ax
c0003d41:	74 1f                	je     c0003d62 <xname_sum+0x32>
c0003d43:	83 ec 0c             	sub    esp,0xc
c0003d46:	66 d1 cb             	ror    bx,1
c0003d49:	50                   	push   eax
c0003d4a:	e8 1e 46 00 00       	call   c000836d <ff_wtoupper>
c0003d4f:	83 c4 10             	add    esp,0x10
c0003d52:	0f b6 d0             	movzx  edx,al
c0003d55:	66 c1 e8 08          	shr    ax,0x8
c0003d59:	01 d3                	add    ebx,edx
c0003d5b:	66 d1 cb             	ror    bx,1
c0003d5e:	01 c3                	add    ebx,eax
c0003d60:	eb d5                	jmp    c0003d37 <xname_sum+0x7>
c0003d62:	89 d8                	mov    eax,ebx
c0003d64:	5a                   	pop    edx
c0003d65:	5b                   	pop    ebx
c0003d66:	5e                   	pop    esi
c0003d67:	c3                   	ret    

c0003d68 <create_xdir>:
c0003d68:	55                   	push   ebp
c0003d69:	b9 40 00 00 00       	mov    ecx,0x40
c0003d6e:	57                   	push   edi
c0003d6f:	bd 01 00 00 00       	mov    ebp,0x1
c0003d74:	56                   	push   esi
c0003d75:	31 ff                	xor    edi,edi
c0003d77:	53                   	push   ebx
c0003d78:	be 40 00 00 00       	mov    esi,0x40
c0003d7d:	89 c3                	mov    ebx,eax
c0003d7f:	83 ec 1c             	sub    esp,0x1c
c0003d82:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003d86:	31 d2                	xor    edx,edx
c0003d88:	e8 18 dd ff ff       	call   c0001aa5 <mem_set>
c0003d8d:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003d90:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003d94:	31 c9                	xor    ecx,ecx
c0003d96:	8d 46 01             	lea    eax,[esi+0x1]
c0003d99:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003d9d:	83 c6 02             	add    esi,0x2
c0003da0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003da4:	66 85 ed             	test   bp,bp
c0003da7:	74 12                	je     c0003dbb <create_xdir+0x53>
c0003da9:	0f b6 c1             	movzx  eax,cl
c0003dac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003db0:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003db4:	66 83 fd 01          	cmp    bp,0x1
c0003db8:	80 d9 ff             	sbb    cl,0xff
c0003dbb:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003dbe:	0f b7 d5             	movzx  edx,bp
c0003dc1:	83 c6 02             	add    esi,0x2
c0003dc4:	e8 ba dc ff ff       	call   c0001a83 <st_word>
c0003dc9:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003dcf:	75 d3                	jne    c0003da4 <create_xdir+0x3c>
c0003dd1:	8d 47 01             	lea    eax,[edi+0x1]
c0003dd4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003dd8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003ddc:	0f b6 c1             	movzx  eax,cl
c0003ddf:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003de4:	74 07                	je     c0003ded <create_xdir+0x85>
c0003de6:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003deb:	eb a9                	jmp    c0003d96 <create_xdir+0x2e>
c0003ded:	8d 47 02             	lea    eax,[edi+0x2]
c0003df0:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003df3:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003df6:	89 d0                	mov    eax,edx
c0003df8:	e8 33 ff ff ff       	call   c0003d30 <xname_sum>
c0003dfd:	83 c4 1c             	add    esp,0x1c
c0003e00:	0f b7 d0             	movzx  edx,ax
c0003e03:	8d 43 24             	lea    eax,[ebx+0x24]
c0003e06:	5b                   	pop    ebx
c0003e07:	5e                   	pop    esi
c0003e08:	5f                   	pop    edi
c0003e09:	5d                   	pop    ebp
c0003e0a:	e9 74 dc ff ff       	jmp    c0001a83 <st_word>

c0003e0f <cmp_lfn>:
c0003e0f:	55                   	push   ebp
c0003e10:	57                   	push   edi
c0003e11:	89 d7                	mov    edi,edx
c0003e13:	56                   	push   esi
c0003e14:	53                   	push   ebx
c0003e15:	83 ec 1c             	sub    esp,0x1c
c0003e18:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e1c:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003e1f:	e8 ed db ff ff       	call   c0001a11 <ld_word>
c0003e24:	66 85 c0             	test   ax,ax
c0003e27:	74 07                	je     c0003e30 <cmp_lfn+0x21>
c0003e29:	31 c0                	xor    eax,eax
c0003e2b:	e9 9a 00 00 00       	jmp    c0003eca <cmp_lfn+0xbb>
c0003e30:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003e32:	bd 01 00 00 00       	mov    ebp,0x1
c0003e37:	83 e3 3f             	and    ebx,0x3f
c0003e3a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003e42:	4b                   	dec    ebx
c0003e43:	6b db 0d             	imul   ebx,ebx,0xd
c0003e46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003e4a:	0f b6 80 e0 7d 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd8220]
c0003e51:	01 f8                	add    eax,edi
c0003e53:	e8 b9 db ff ff       	call   c0001a11 <ld_word>
c0003e58:	66 85 ed             	test   bp,bp
c0003e5b:	89 c6                	mov    esi,eax
c0003e5d:	74 3c                	je     c0003e9b <cmp_lfn+0x8c>
c0003e5f:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003e65:	77 c2                	ja     c0003e29 <cmp_lfn+0x1a>
c0003e67:	83 ec 0c             	sub    esp,0xc
c0003e6a:	0f b7 c0             	movzx  eax,ax
c0003e6d:	50                   	push   eax
c0003e6e:	e8 fa 44 00 00       	call   c000836d <ff_wtoupper>
c0003e73:	89 c5                	mov    ebp,eax
c0003e75:	8d 43 01             	lea    eax,[ebx+0x1]
c0003e78:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003e7c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003e80:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003e84:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e87:	e8 e1 44 00 00       	call   c000836d <ff_wtoupper>
c0003e8c:	83 c4 10             	add    esp,0x10
c0003e8f:	39 c5                	cmp    ebp,eax
c0003e91:	75 96                	jne    c0003e29 <cmp_lfn+0x1a>
c0003e93:	89 f5                	mov    ebp,esi
c0003e95:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003e99:	eb 04                	jmp    c0003e9f <cmp_lfn+0x90>
c0003e9b:	66 46                	inc    si
c0003e9d:	75 8a                	jne    c0003e29 <cmp_lfn+0x1a>
c0003e9f:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003ea3:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003ea8:	75 9c                	jne    c0003e46 <cmp_lfn+0x37>
c0003eaa:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003ead:	74 16                	je     c0003ec5 <cmp_lfn+0xb6>
c0003eaf:	66 85 ed             	test   bp,bp
c0003eb2:	74 11                	je     c0003ec5 <cmp_lfn+0xb6>
c0003eb4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003eb8:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003ebd:	0f 94 c0             	sete   al
c0003ec0:	0f b6 c0             	movzx  eax,al
c0003ec3:	eb 05                	jmp    c0003eca <cmp_lfn+0xbb>
c0003ec5:	b8 01 00 00 00       	mov    eax,0x1
c0003eca:	83 c4 1c             	add    esp,0x1c
c0003ecd:	5b                   	pop    ebx
c0003ece:	5e                   	pop    esi
c0003ecf:	5f                   	pop    edi
c0003ed0:	5d                   	pop    ebp
c0003ed1:	c3                   	ret    

c0003ed2 <dir_find>:
c0003ed2:	55                   	push   ebp
c0003ed3:	31 d2                	xor    edx,edx
c0003ed5:	57                   	push   edi
c0003ed6:	56                   	push   esi
c0003ed7:	53                   	push   ebx
c0003ed8:	89 c3                	mov    ebx,eax
c0003eda:	83 ec 1c             	sub    esp,0x1c
c0003edd:	8b 30                	mov    esi,DWORD PTR [eax]
c0003edf:	e8 89 f0 ff ff       	call   c0002f6d <dir_sdi>
c0003ee4:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ee7:	85 c0                	test   eax,eax
c0003ee9:	0f 85 9e 01 00 00    	jne    c000408d <dir_find+0x1bb>
c0003eef:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003ef2:	0f 85 8d 00 00 00    	jne    c0003f85 <dir_find+0xb3>
c0003ef8:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003efb:	e8 30 fe ff ff       	call   c0003d30 <xname_sum>
c0003f00:	89 c7                	mov    edi,eax
c0003f02:	31 d2                	xor    edx,edx
c0003f04:	89 d8                	mov    eax,ebx
c0003f06:	e8 72 f8 ff ff       	call   c000377d <dir_read>
c0003f0b:	85 c0                	test   eax,eax
c0003f0d:	0f 85 5e 01 00 00    	jne    c0004071 <dir_find+0x19f>
c0003f13:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003f16:	8d 41 24             	lea    eax,[ecx+0x24]
c0003f19:	e8 f3 da ff ff       	call   c0001a11 <ld_word>
c0003f1e:	66 39 f8             	cmp    ax,di
c0003f21:	75 df                	jne    c0003f02 <dir_find+0x30>
c0003f23:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0003f26:	31 ed                	xor    ebp,ebp
c0003f28:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003f2c:	ba 40 00 00 00       	mov    edx,0x40
c0003f31:	89 e9                	mov    ecx,ebp
c0003f33:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0003f37:	0f 84 42 01 00 00    	je     c000407f <dir_find+0x1ad>
c0003f3d:	f6 c2 1f             	test   dl,0x1f
c0003f40:	75 03                	jne    c0003f45 <dir_find+0x73>
c0003f42:	83 c2 02             	add    edx,0x2
c0003f45:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003f49:	89 d0                	mov    eax,edx
c0003f4b:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003f4e:	e8 be da ff ff       	call   c0001a11 <ld_word>
c0003f53:	83 ec 0c             	sub    esp,0xc
c0003f56:	0f b7 c0             	movzx  eax,ax
c0003f59:	50                   	push   eax
c0003f5a:	e8 0e 44 00 00       	call   c000836d <ff_wtoupper>
c0003f5f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003f63:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f66:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0003f6a:	89 04 24             	mov    DWORD PTR [esp],eax
c0003f6d:	e8 fb 43 00 00       	call   c000836d <ff_wtoupper>
c0003f72:	83 c4 10             	add    esp,0x10
c0003f75:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003f79:	75 87                	jne    c0003f02 <dir_find+0x30>
c0003f7b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003f7f:	45                   	inc    ebp
c0003f80:	83 c2 02             	add    edx,0x2
c0003f83:	eb ac                	jmp    c0003f31 <dir_find+0x5f>
c0003f85:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003f8c:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003f91:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f96:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003f99:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003f9c:	89 f0                	mov    eax,esi
c0003f9e:	e8 4c e2 ff ff       	call   c00021ef <move_window>
c0003fa3:	85 c0                	test   eax,eax
c0003fa5:	0f 85 c6 00 00 00    	jne    c0004071 <dir_find+0x19f>
c0003fab:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003fae:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003fb1:	84 c9                	test   cl,cl
c0003fb3:	0f 84 bd 00 00 00    	je     c0004076 <dir_find+0x1a4>
c0003fb9:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003fbc:	88 d0                	mov    al,dl
c0003fbe:	83 e0 3f             	and    eax,0x3f
c0003fc1:	80 f9 e5             	cmp    cl,0xe5
c0003fc4:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003fc7:	0f 84 87 00 00 00    	je     c0004054 <dir_find+0x182>
c0003fcd:	80 e2 08             	and    dl,0x8
c0003fd0:	74 06                	je     c0003fd8 <dir_find+0x106>
c0003fd2:	3c 0f                	cmp    al,0xf
c0003fd4:	75 7e                	jne    c0004054 <dir_find+0x182>
c0003fd6:	eb 04                	jmp    c0003fdc <dir_find+0x10a>
c0003fd8:	3c 0f                	cmp    al,0xf
c0003fda:	75 4c                	jne    c0004028 <dir_find+0x156>
c0003fdc:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0003fe0:	75 7e                	jne    c0004060 <dir_find+0x18e>
c0003fe2:	f6 c1 40             	test   cl,0x40
c0003fe5:	74 12                	je     c0003ff9 <dir_find+0x127>
c0003fe7:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003fea:	83 e1 bf             	and    ecx,0xffffffbf
c0003fed:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0003ff1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003ff4:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003ff7:	eb 06                	jmp    c0003fff <dir_find+0x12d>
c0003ff9:	89 f8                	mov    eax,edi
c0003ffb:	38 c8                	cmp    al,cl
c0003ffd:	75 5c                	jne    c000405b <dir_find+0x189>
c0003fff:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004003:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004008:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000400b:	75 53                	jne    c0004060 <dir_find+0x18e>
c000400d:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004011:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004014:	89 ea                	mov    edx,ebp
c0004016:	e8 f4 fd ff ff       	call   c0003e0f <cmp_lfn>
c000401b:	85 c0                	test   eax,eax
c000401d:	74 41                	je     c0004060 <dir_find+0x18e>
c000401f:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004023:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004026:	eb 38                	jmp    c0004060 <dir_find+0x18e>
c0004028:	89 f8                	mov    eax,edi
c000402a:	84 c0                	test   al,al
c000402c:	75 0d                	jne    c000403b <dir_find+0x169>
c000402e:	89 e8                	mov    eax,ebp
c0004030:	e8 98 de ff ff       	call   c0001ecd <sum_sfn>
c0004035:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004039:	74 52                	je     c000408d <dir_find+0x1bb>
c000403b:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000403f:	75 13                	jne    c0004054 <dir_find+0x182>
c0004041:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004044:	b9 0b 00 00 00       	mov    ecx,0xb
c0004049:	89 e8                	mov    eax,ebp
c000404b:	e8 60 da ff ff       	call   c0001ab0 <mem_cmp>
c0004050:	85 c0                	test   eax,eax
c0004052:	74 39                	je     c000408d <dir_find+0x1bb>
c0004054:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c000405b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004060:	31 d2                	xor    edx,edx
c0004062:	89 d8                	mov    eax,ebx
c0004064:	e8 5c f4 ff ff       	call   c00034c5 <dir_next>
c0004069:	85 c0                	test   eax,eax
c000406b:	0f 84 25 ff ff ff    	je     c0003f96 <dir_find+0xc4>
c0004071:	89 04 24             	mov    DWORD PTR [esp],eax
c0004074:	eb 17                	jmp    c000408d <dir_find+0x1bb>
c0004076:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000407d:	eb 0e                	jmp    c000408d <dir_find+0x1bb>
c000407f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004082:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c0004087:	0f 85 75 fe ff ff    	jne    c0003f02 <dir_find+0x30>
c000408d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004090:	83 c4 1c             	add    esp,0x1c
c0004093:	5b                   	pop    ebx
c0004094:	5e                   	pop    esi
c0004095:	5f                   	pop    edi
c0004096:	5d                   	pop    ebp
c0004097:	c3                   	ret    

c0004098 <dir_register>:
c0004098:	55                   	push   ebp
c0004099:	57                   	push   edi
c000409a:	56                   	push   esi
c000409b:	be 06 00 00 00       	mov    esi,0x6
c00040a0:	53                   	push   ebx
c00040a1:	83 ec 6c             	sub    esp,0x6c
c00040a4:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00040a8:	0f 85 62 02 00 00    	jne    c0004310 <dir_register+0x278>
c00040ae:	8b 28                	mov    ebp,DWORD PTR [eax]
c00040b0:	31 ff                	xor    edi,edi
c00040b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00040b5:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00040ba:	74 03                	je     c00040bf <dir_register+0x27>
c00040bc:	47                   	inc    edi
c00040bd:	eb f6                	jmp    c00040b5 <dir_register+0x1d>
c00040bf:	89 c3                	mov    ebx,eax
c00040c1:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00040c5:	0f 85 e1 00 00 00    	jne    c00041ac <dir_register+0x114>
c00040cb:	83 c7 0e             	add    edi,0xe
c00040ce:	b9 0f 00 00 00       	mov    ecx,0xf
c00040d3:	89 f8                	mov    eax,edi
c00040d5:	31 d2                	xor    edx,edx
c00040d7:	f7 f1                	div    ecx
c00040d9:	8d 50 02             	lea    edx,[eax+0x2]
c00040dc:	89 c7                	mov    edi,eax
c00040de:	89 d8                	mov    eax,ebx
c00040e0:	e8 12 f8 ff ff       	call   c00038f7 <dir_alloc>
c00040e5:	89 c6                	mov    esi,eax
c00040e7:	85 c0                	test   eax,eax
c00040e9:	0f 85 21 02 00 00    	jne    c0004310 <dir_register+0x278>
c00040ef:	81 c7 01 00 00 08    	add    edi,0x8000001
c00040f5:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00040f8:	c1 e7 05             	shl    edi,0x5
c00040fb:	29 f8                	sub    eax,edi
c00040fd:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004100:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004103:	a8 04                	test   al,0x4
c0004105:	0f 84 91 00 00 00    	je     c000419c <dir_register+0x104>
c000410b:	83 e0 fb             	and    eax,0xfffffffb
c000410e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004111:	89 d8                	mov    eax,ebx
c0004113:	e8 25 ec ff ff       	call   c0002d3d <fill_first_frag>
c0004118:	85 c0                	test   eax,eax
c000411a:	0f 85 ee 01 00 00    	jne    c000430e <dir_register+0x276>
c0004120:	83 c9 ff             	or     ecx,0xffffffff
c0004123:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004126:	89 d8                	mov    eax,ebx
c0004128:	e8 db eb ff ff       	call   c0002d08 <fill_last_frag>
c000412d:	85 c0                	test   eax,eax
c000412f:	0f 85 d9 01 00 00    	jne    c000430e <dir_register+0x276>
c0004135:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004139:	74 61                	je     c000419c <dir_register+0x104>
c000413b:	89 da                	mov    edx,ebx
c000413d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004141:	e8 ea f5 ff ff       	call   c0003730 <load_obj_xdir>
c0004146:	85 c0                	test   eax,eax
c0004148:	0f 85 c0 01 00 00    	jne    c000430e <dir_register+0x276>
c000414e:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004152:	31 c9                	xor    ecx,ecx
c0004154:	c1 e2 09             	shl    edx,0x9
c0004157:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c000415a:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c000415d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004160:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004163:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004166:	83 c0 38             	add    eax,0x38
c0004169:	e8 1c d9 ff ff       	call   c0001a8a <st_qword>
c000416e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004171:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004174:	83 c0 28             	add    eax,0x28
c0004177:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000417a:	e8 0b d9 ff ff       	call   c0001a8a <st_qword>
c000417f:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004182:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0004185:	83 c8 01             	or     eax,0x1
c0004188:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c000418b:	8d 44 24 14          	lea    eax,[esp+0x14]
c000418f:	e8 db f7 ff ff       	call   c000396f <store_xdir>
c0004194:	85 c0                	test   eax,eax
c0004196:	0f 85 72 01 00 00    	jne    c000430e <dir_register+0x276>
c000419c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000419f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041a2:	e8 c1 fb ff ff       	call   c0003d68 <create_xdir>
c00041a7:	e9 64 01 00 00       	jmp    c0004310 <dir_register+0x278>
c00041ac:	8d 40 3c             	lea    eax,[eax+0x3c]
c00041af:	b9 0c 00 00 00       	mov    ecx,0xc
c00041b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00041b8:	89 c2                	mov    edx,eax
c00041ba:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041be:	e8 cd d8 ff ff       	call   c0001a90 <mem_cpy>
c00041c3:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00041c8:	74 58                	je     c0004222 <dir_register+0x18a>
c00041ca:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00041ce:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00041d6:	83 ec 0c             	sub    esp,0xc
c00041d9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00041dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00041e0:	8d 54 24 24          	lea    edx,[esp+0x24]
c00041e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00041e8:	e8 24 dc ff ff       	call   c0001e11 <gen_numname>
c00041ed:	89 d8                	mov    eax,ebx
c00041ef:	e8 de fc ff ff       	call   c0003ed2 <dir_find>
c00041f4:	83 c4 10             	add    esp,0x10
c00041f7:	89 c6                	mov    esi,eax
c00041f9:	85 c0                	test   eax,eax
c00041fb:	75 15                	jne    c0004212 <dir_register+0x17a>
c00041fd:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004201:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004206:	75 ce                	jne    c00041d6 <dir_register+0x13e>
c0004208:	be 07 00 00 00       	mov    esi,0x7
c000420d:	e9 fe 00 00 00       	jmp    c0004310 <dir_register+0x278>
c0004212:	83 f8 04             	cmp    eax,0x4
c0004215:	0f 85 f5 00 00 00    	jne    c0004310 <dir_register+0x278>
c000421b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000421f:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004222:	b9 01 00 00 00       	mov    ecx,0x1
c0004227:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000422c:	74 0f                	je     c000423d <dir_register+0x1a5>
c000422e:	b9 0d 00 00 00       	mov    ecx,0xd
c0004233:	8d 47 0c             	lea    eax,[edi+0xc]
c0004236:	31 d2                	xor    edx,edx
c0004238:	f7 f1                	div    ecx
c000423a:	8d 48 01             	lea    ecx,[eax+0x1]
c000423d:	89 ca                	mov    edx,ecx
c000423f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004243:	89 d8                	mov    eax,ebx
c0004245:	e8 ad f6 ff ff       	call   c00038f7 <dir_alloc>
c000424a:	89 c6                	mov    esi,eax
c000424c:	85 c0                	test   eax,eax
c000424e:	0f 85 bc 00 00 00    	jne    c0004310 <dir_register+0x278>
c0004254:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004258:	49                   	dec    ecx
c0004259:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000425d:	74 6a                	je     c00042c9 <dir_register+0x231>
c000425f:	89 c8                	mov    eax,ecx
c0004261:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004264:	c1 e0 05             	shl    eax,0x5
c0004267:	29 c2                	sub    edx,eax
c0004269:	89 d8                	mov    eax,ebx
c000426b:	e8 fd ec ff ff       	call   c0002f6d <dir_sdi>
c0004270:	89 c6                	mov    esi,eax
c0004272:	85 c0                	test   eax,eax
c0004274:	0f 85 96 00 00 00    	jne    c0004310 <dir_register+0x278>
c000427a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000427e:	e8 4a dc ff ff       	call   c0001ecd <sum_sfn>
c0004283:	0f b6 f8             	movzx  edi,al
c0004286:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004289:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000428c:	89 e8                	mov    eax,ebp
c000428e:	e8 5c df ff ff       	call   c00021ef <move_window>
c0004293:	89 c6                	mov    esi,eax
c0004295:	85 c0                	test   eax,eax
c0004297:	75 77                	jne    c0004310 <dir_register+0x278>
c0004299:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c000429e:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00042a1:	83 ec 0c             	sub    esp,0xc
c00042a4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00042a7:	57                   	push   edi
c00042a8:	e8 e0 da ff ff       	call   c0001d8d <put_lfn>
c00042ad:	31 d2                	xor    edx,edx
c00042af:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00042b3:	89 d8                	mov    eax,ebx
c00042b5:	e8 0b f2 ff ff       	call   c00034c5 <dir_next>
c00042ba:	83 c4 10             	add    esp,0x10
c00042bd:	89 c6                	mov    esi,eax
c00042bf:	85 c0                	test   eax,eax
c00042c1:	75 4d                	jne    c0004310 <dir_register+0x278>
c00042c3:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00042c7:	75 bd                	jne    c0004286 <dir_register+0x1ee>
c00042c9:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00042cc:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00042cf:	89 e8                	mov    eax,ebp
c00042d1:	e8 19 df ff ff       	call   c00021ef <move_window>
c00042d6:	89 c6                	mov    esi,eax
c00042d8:	85 c0                	test   eax,eax
c00042da:	75 34                	jne    c0004310 <dir_register+0x278>
c00042dc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00042df:	b9 20 00 00 00       	mov    ecx,0x20
c00042e4:	31 d2                	xor    edx,edx
c00042e6:	e8 ba d7 ff ff       	call   c0001aa5 <mem_set>
c00042eb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00042ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00042f2:	b9 0b 00 00 00       	mov    ecx,0xb
c00042f7:	e8 94 d7 ff ff       	call   c0001a90 <mem_cpy>
c00042fc:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c00042ff:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004302:	83 e0 18             	and    eax,0x18
c0004305:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004308:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000430c:	eb 02                	jmp    c0004310 <dir_register+0x278>
c000430e:	89 c6                	mov    esi,eax
c0004310:	83 c4 6c             	add    esp,0x6c
c0004313:	89 f0                	mov    eax,esi
c0004315:	5b                   	pop    ebx
c0004316:	5e                   	pop    esi
c0004317:	5f                   	pop    edi
c0004318:	5d                   	pop    ebp
c0004319:	c3                   	ret    

c000431a <sync_fs>:
c000431a:	56                   	push   esi
c000431b:	53                   	push   ebx
c000431c:	53                   	push   ebx
c000431d:	89 c3                	mov    ebx,eax
c000431f:	e8 37 de ff ff       	call   c000215b <sync_window>
c0004324:	85 c0                	test   eax,eax
c0004326:	0f 85 b1 00 00 00    	jne    c00043dd <sync_fs+0xc3>
c000432c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000432f:	0f 85 8e 00 00 00    	jne    c00043c3 <sync_fs+0xa9>
c0004335:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004339:	0f 85 84 00 00 00    	jne    c00043c3 <sync_fs+0xa9>
c000433f:	b9 00 02 00 00       	mov    ecx,0x200
c0004344:	8d 73 54             	lea    esi,[ebx+0x54]
c0004347:	31 d2                	xor    edx,edx
c0004349:	89 f0                	mov    eax,esi
c000434b:	e8 55 d7 ff ff       	call   c0001aa5 <mem_set>
c0004350:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0004356:	ba 55 aa 00 00       	mov    edx,0xaa55
c000435b:	e8 23 d7 ff ff       	call   c0001a83 <st_word>
c0004360:	ba 52 52 61 41       	mov    edx,0x41615252
c0004365:	89 f0                	mov    eax,esi
c0004367:	e8 1b d7 ff ff       	call   c0001a87 <st_dword>
c000436c:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004372:	ba 72 72 41 61       	mov    edx,0x61417272
c0004377:	e8 0b d7 ff ff       	call   c0001a87 <st_dword>
c000437c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000437f:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c0004385:	e8 fd d6 ff ff       	call   c0001a87 <st_dword>
c000438a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000438d:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c0004393:	e8 ef d6 ff ff       	call   c0001a87 <st_dword>
c0004398:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000439b:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000439e:	83 c0 01             	add    eax,0x1
c00043a1:	83 d2 00             	adc    edx,0x0
c00043a4:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00043a7:	83 ec 0c             	sub    esp,0xc
c00043aa:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00043ad:	6a 01                	push   0x1
c00043af:	52                   	push   edx
c00043b0:	50                   	push   eax
c00043b1:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043b5:	56                   	push   esi
c00043b6:	50                   	push   eax
c00043b7:	e8 20 d6 ff ff       	call   c00019dc <disk_write>
c00043bc:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00043c0:	83 c4 20             	add    esp,0x20
c00043c3:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043c7:	51                   	push   ecx
c00043c8:	6a 00                	push   0x0
c00043ca:	6a 00                	push   0x0
c00043cc:	50                   	push   eax
c00043cd:	e8 20 d6 ff ff       	call   c00019f2 <disk_ioctl>
c00043d2:	83 c4 10             	add    esp,0x10
c00043d5:	85 c0                	test   eax,eax
c00043d7:	0f 95 c0             	setne  al
c00043da:	0f b6 c0             	movzx  eax,al
c00043dd:	5a                   	pop    edx
c00043de:	5b                   	pop    ebx
c00043df:	5e                   	pop    esi
c00043e0:	c3                   	ret    

c00043e1 <create_partition>:
c00043e1:	55                   	push   ebp
c00043e2:	0f b6 c0             	movzx  eax,al
c00043e5:	57                   	push   edi
c00043e6:	56                   	push   esi
c00043e7:	53                   	push   ebx
c00043e8:	83 ec 60             	sub    esp,0x60
c00043eb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00043ef:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c00043f3:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00043f7:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00043fb:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c00043ff:	50                   	push   eax
c0004400:	6a 01                	push   0x1
c0004402:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004406:	e8 e7 d5 ff ff       	call   c00019f2 <disk_ioctl>
c000440b:	83 c4 10             	add    esp,0x10
c000440e:	85 c0                	test   eax,eax
c0004410:	74 0a                	je     c000441c <create_partition+0x3b>
c0004412:	b8 01 00 00 00       	mov    eax,0x1
c0004417:	e9 67 05 00 00       	jmp    c0004983 <create_partition+0x5a2>
c000441c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004420:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004424:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004428:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000442c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004431:	0f 86 ed 03 00 00    	jbe    c0004824 <create_partition+0x443>
c0004437:	83 c0 df             	add    eax,0xffffffdf
c000443a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004442:	83 d2 ff             	adc    edx,0xffffffff
c0004445:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004449:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000444d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004451:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004455:	83 c0 bd             	add    eax,0xffffffbd
c0004458:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000445f:	83 d2 ff             	adc    edx,0xffffffff
c0004462:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0004466:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000446a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004472:	be 22 00 00 00       	mov    esi,0x22
c0004477:	31 ff                	xor    edi,edi
c0004479:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004481:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c0004489:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0004491:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004495:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000449b:	75 0e                	jne    c00044ab <create_partition+0xca>
c000449d:	b9 00 02 00 00       	mov    ecx,0x200
c00044a2:	31 d2                	xor    edx,edx
c00044a4:	89 d8                	mov    eax,ebx
c00044a6:	e8 fa d5 ff ff       	call   c0001aa5 <mem_set>
c00044ab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00044af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00044b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044b7:	0b 04 24             	or     eax,DWORD PTR [esp]
c00044ba:	0f 84 23 01 00 00    	je     c00045e3 <create_partition+0x202>
c00044c0:	89 f0                	mov    eax,esi
c00044c2:	89 fa                	mov    edx,edi
c00044c4:	05 ff 07 00 00       	add    eax,0x7ff
c00044c9:	83 d2 00             	adc    edx,0x0
c00044cc:	89 c1                	mov    ecx,eax
c00044ce:	89 d7                	mov    edi,edx
c00044d0:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00044d6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00044da:	89 ce                	mov    esi,ecx
c00044dc:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00044e0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00044e4:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00044e8:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c00044eb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00044ef:	89 04 24             	mov    DWORD PTR [esp],eax
c00044f2:	b8 64 00 00 00       	mov    eax,0x64
c00044f7:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00044fa:	b8 00 00 00 00       	mov    eax,0x0
c00044ff:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004503:	72 41                	jb     c0004546 <create_partition+0x165>
c0004505:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004509:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000450d:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004511:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004516:	01 c1                	add    ecx,eax
c0004518:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000451c:	f7 24 24             	mul    DWORD PTR [esp]
c000451f:	6a 00                	push   0x0
c0004521:	01 ca                	add    edx,ecx
c0004523:	6a 64                	push   0x64
c0004525:	52                   	push   edx
c0004526:	50                   	push   eax
c0004527:	e8 70 0e 02 00       	call   c002539c <__udivdi3>
c000452c:	83 c4 10             	add    esp,0x10
c000452f:	05 ff 07 00 00       	add    eax,0x7ff
c0004534:	83 d2 00             	adc    edx,0x0
c0004537:	89 c1                	mov    ecx,eax
c0004539:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000453d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004543:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004546:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004549:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000454d:	01 f0                	add    eax,esi
c000454f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004553:	11 fa                	adc    edx,edi
c0004555:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0004559:	19 d1                	sbb    ecx,edx
c000455b:	73 2e                	jae    c000458b <create_partition+0x1aa>
c000455d:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004561:	89 f8                	mov    eax,edi
c0004563:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000456a:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c000456e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004576:	73 6b                	jae    c00045e3 <create_partition+0x202>
c0004578:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000457c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004580:	29 f0                	sub    eax,esi
c0004582:	19 fa                	sbb    edx,edi
c0004584:	89 04 24             	mov    DWORD PTR [esp],eax
c0004587:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000458b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000458f:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004592:	74 4f                	je     c00045e3 <create_partition+0x202>
c0004594:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0004597:	b9 10 00 00 00       	mov    ecx,0x10
c000459c:	ba f0 7d 02 c0       	mov    edx,0xc0027df0
c00045a1:	e8 ea d4 ff ff       	call   c0001a90 <mem_cpy>
c00045a6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00045aa:	b9 10 00 00 00       	mov    ecx,0x10
c00045af:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00045b3:	e8 2c db ff ff       	call   c00020e4 <make_rand>
c00045b8:	89 f2                	mov    edx,esi
c00045ba:	89 f9                	mov    ecx,edi
c00045bc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00045c0:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00045c4:	e8 c1 d4 ff ff       	call   c0001a8a <st_qword>
c00045c9:	03 34 24             	add    esi,DWORD PTR [esp]
c00045cc:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00045d0:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00045d4:	89 f2                	mov    edx,esi
c00045d6:	89 f9                	mov    ecx,edi
c00045d8:	83 c2 ff             	add    edx,0xffffffff
c00045db:	83 d1 ff             	adc    ecx,0xffffffff
c00045de:	e8 a7 d4 ff ff       	call   c0001a8a <st_qword>
c00045e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00045e7:	83 e8 80             	sub    eax,0xffffff80
c00045ea:	89 c5                	mov    ebp,eax
c00045ec:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00045f0:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00045f6:	75 6b                	jne    c0004663 <create_partition+0x282>
c00045f8:	45                   	inc    ebp
c00045f9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045fd:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004602:	e8 39 da ff ff       	call   c0002040 <crc32>
c0004607:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000460d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004611:	75 e5                	jne    c00045f8 <create_partition+0x217>
c0004613:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004617:	31 d2                	xor    edx,edx
c0004619:	83 ec 0c             	sub    esp,0xc
c000461c:	c1 ed 09             	shr    ebp,0x9
c000461f:	6a 01                	push   0x1
c0004621:	8d 45 02             	lea    eax,[ebp+0x2]
c0004624:	52                   	push   edx
c0004625:	50                   	push   eax
c0004626:	53                   	push   ebx
c0004627:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000462b:	e8 ac d3 ff ff       	call   c00019dc <disk_write>
c0004630:	83 c4 20             	add    esp,0x20
c0004633:	85 c0                	test   eax,eax
c0004635:	0f 85 d7 fd ff ff    	jne    c0004412 <create_partition+0x31>
c000463b:	83 ec 0c             	sub    esp,0xc
c000463e:	31 d2                	xor    edx,edx
c0004640:	6a 01                	push   0x1
c0004642:	89 e8                	mov    eax,ebp
c0004644:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004648:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000464c:	52                   	push   edx
c000464d:	50                   	push   eax
c000464e:	53                   	push   ebx
c000464f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004653:	e8 84 d3 ff ff       	call   c00019dc <disk_write>
c0004658:	83 c4 20             	add    esp,0x20
c000465b:	85 c0                	test   eax,eax
c000465d:	0f 85 af fd ff ff    	jne    c0004412 <create_partition+0x31>
c0004663:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004667:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000466b:	3d 00 40 00 00       	cmp    eax,0x4000
c0004670:	74 0d                	je     c000467f <create_partition+0x29e>
c0004672:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0004676:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000467a:	e9 12 fe ff ff       	jmp    c0004491 <create_partition+0xb0>
c000467f:	31 d2                	xor    edx,edx
c0004681:	b9 00 02 00 00       	mov    ecx,0x200
c0004686:	89 d8                	mov    eax,ebx
c0004688:	8d 6b 20             	lea    ebp,[ebx+0x20]
c000468b:	e8 15 d4 ff ff       	call   c0001aa5 <mem_set>
c0004690:	8d 7b 48             	lea    edi,[ebx+0x48]
c0004693:	b9 10 00 00 00       	mov    ecx,0x10
c0004698:	ba e0 7c 02 c0       	mov    edx,0xc0027ce0
c000469d:	89 d8                	mov    eax,ebx
c000469f:	e8 ec d3 ff ff       	call   c0001a90 <mem_cpy>
c00046a4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00046a8:	8d 43 58             	lea    eax,[ebx+0x58]
c00046ab:	f7 d2                	not    edx
c00046ad:	e8 d5 d3 ff ff       	call   c0001a87 <st_dword>
c00046b2:	8d 43 18             	lea    eax,[ebx+0x18]
c00046b5:	31 c9                	xor    ecx,ecx
c00046b7:	89 04 24             	mov    DWORD PTR [esp],eax
c00046ba:	ba 01 00 00 00       	mov    edx,0x1
c00046bf:	e8 c6 d3 ff ff       	call   c0001a8a <st_qword>
c00046c4:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00046c8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00046cc:	83 c2 ff             	add    edx,0xffffffff
c00046cf:	89 e8                	mov    eax,ebp
c00046d1:	83 d1 ff             	adc    ecx,0xffffffff
c00046d4:	e8 b1 d3 ff ff       	call   c0001a8a <st_qword>
c00046d9:	31 c9                	xor    ecx,ecx
c00046db:	8d 43 28             	lea    eax,[ebx+0x28]
c00046de:	ba 22 00 00 00       	mov    edx,0x22
c00046e3:	e8 a2 d3 ff ff       	call   c0001a8a <st_qword>
c00046e8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00046ec:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00046f0:	83 c2 de             	add    edx,0xffffffde
c00046f3:	8d 43 30             	lea    eax,[ebx+0x30]
c00046f6:	83 d1 ff             	adc    ecx,0xffffffff
c00046f9:	31 f6                	xor    esi,esi
c00046fb:	e8 8a d3 ff ff       	call   c0001a8a <st_qword>
c0004700:	8d 43 54             	lea    eax,[ebx+0x54]
c0004703:	ba 80 00 00 00       	mov    edx,0x80
c0004708:	e8 7a d3 ff ff       	call   c0001a87 <st_dword>
c000470d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004710:	ba 80 00 00 00       	mov    edx,0x80
c0004715:	e8 6d d3 ff ff       	call   c0001a87 <st_dword>
c000471a:	ba 02 00 00 00       	mov    edx,0x2
c000471f:	89 f8                	mov    eax,edi
c0004721:	e8 61 d3 ff ff       	call   c0001a87 <st_dword>
c0004726:	8d 53 38             	lea    edx,[ebx+0x38]
c0004729:	b9 10 00 00 00       	mov    ecx,0x10
c000472e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004732:	e8 ad d9 ff ff       	call   c00020e4 <make_rand>
c0004737:	83 c8 ff             	or     eax,0xffffffff
c000473a:	46                   	inc    esi
c000473b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004740:	e8 fb d8 ff ff       	call   c0002040 <crc32>
c0004745:	83 fe 5c             	cmp    esi,0x5c
c0004748:	75 f0                	jne    c000473a <create_partition+0x359>
c000474a:	f7 d0                	not    eax
c000474c:	8d 73 10             	lea    esi,[ebx+0x10]
c000474f:	89 c2                	mov    edx,eax
c0004751:	89 f0                	mov    eax,esi
c0004753:	e8 2f d3 ff ff       	call   c0001a87 <st_dword>
c0004758:	83 ec 0c             	sub    esp,0xc
c000475b:	6a 01                	push   0x1
c000475d:	6a 00                	push   0x0
c000475f:	6a 01                	push   0x1
c0004761:	53                   	push   ebx
c0004762:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004766:	e8 71 d2 ff ff       	call   c00019dc <disk_write>
c000476b:	83 c4 20             	add    esp,0x20
c000476e:	85 c0                	test   eax,eax
c0004770:	0f 85 9c fc ff ff    	jne    c0004412 <create_partition+0x31>
c0004776:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000477a:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000477e:	83 c2 ff             	add    edx,0xffffffff
c0004781:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004784:	83 d1 ff             	adc    ecx,0xffffffff
c0004787:	e8 fe d2 ff ff       	call   c0001a8a <st_qword>
c000478c:	ba 01 00 00 00       	mov    edx,0x1
c0004791:	31 c9                	xor    ecx,ecx
c0004793:	89 e8                	mov    eax,ebp
c0004795:	e8 f0 d2 ff ff       	call   c0001a8a <st_qword>
c000479a:	89 f8                	mov    eax,edi
c000479c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00047a0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047a4:	31 ff                	xor    edi,edi
c00047a6:	e8 df d2 ff ff       	call   c0001a8a <st_qword>
c00047ab:	89 f0                	mov    eax,esi
c00047ad:	31 d2                	xor    edx,edx
c00047af:	e8 d3 d2 ff ff       	call   c0001a87 <st_dword>
c00047b4:	83 c8 ff             	or     eax,0xffffffff
c00047b7:	47                   	inc    edi
c00047b8:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00047bd:	e8 7e d8 ff ff       	call   c0002040 <crc32>
c00047c2:	83 ff 5c             	cmp    edi,0x5c
c00047c5:	75 f0                	jne    c00047b7 <create_partition+0x3d6>
c00047c7:	f7 d0                	not    eax
c00047c9:	89 c2                	mov    edx,eax
c00047cb:	89 f0                	mov    eax,esi
c00047cd:	e8 b5 d2 ff ff       	call   c0001a87 <st_dword>
c00047d2:	83 ec 0c             	sub    esp,0xc
c00047d5:	6a 01                	push   0x1
c00047d7:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00047db:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00047df:	83 c0 ff             	add    eax,0xffffffff
c00047e2:	83 d2 ff             	adc    edx,0xffffffff
c00047e5:	52                   	push   edx
c00047e6:	50                   	push   eax
c00047e7:	53                   	push   ebx
c00047e8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00047ec:	e8 eb d1 ff ff       	call   c00019dc <disk_write>
c00047f1:	83 c4 20             	add    esp,0x20
c00047f4:	85 c0                	test   eax,eax
c00047f6:	0f 85 16 fc ff ff    	jne    c0004412 <create_partition+0x31>
c00047fc:	31 d2                	xor    edx,edx
c00047fe:	89 d8                	mov    eax,ebx
c0004800:	b9 00 02 00 00       	mov    ecx,0x200
c0004805:	e8 9b d2 ff ff       	call   c0001aa5 <mem_set>
c000480a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004810:	b9 10 00 00 00       	mov    ecx,0x10
c0004815:	ba f0 7c 02 c0       	mov    edx,0xc0027cf0
c000481a:	e8 71 d2 ff ff       	call   c0001a90 <mem_cpy>
c000481f:	e9 21 01 00 00       	jmp    c0004945 <create_partition+0x564>
c0004824:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004828:	b9 05 00 00 00       	mov    ecx,0x5
c000482d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004830:	bf 08 00 00 00       	mov    edi,0x8
c0004835:	89 f8                	mov    eax,edi
c0004837:	31 d2                	xor    edx,edx
c0004839:	0f b6 f0             	movzx  esi,al
c000483c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000483f:	f7 f6                	div    esi
c0004841:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004846:	76 0a                	jbe    c0004852 <create_partition+0x471>
c0004848:	d1 e7                	shl    edi,1
c000484a:	49                   	dec    ecx
c000484b:	75 e8                	jne    c0004835 <create_partition+0x454>
c000484d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004852:	b9 00 02 00 00       	mov    ecx,0x200
c0004857:	31 d2                	xor    edx,edx
c0004859:	89 d8                	mov    eax,ebx
c000485b:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004861:	e8 3f d2 ff ff       	call   c0001aa5 <mem_set>
c0004866:	b9 64 00 00 00       	mov    ecx,0x64
c000486b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000486e:	31 d2                	xor    edx,edx
c0004870:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004878:	f7 f1                	div    ecx
c000487a:	b9 3f 00 00 00       	mov    ecx,0x3f
c000487f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004883:	89 f8                	mov    eax,edi
c0004885:	0f b6 c0             	movzx  eax,al
c0004888:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000488c:	e9 80 00 00 00       	jmp    c0004911 <create_partition+0x530>
c0004891:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004894:	29 cf                	sub    edi,ecx
c0004896:	89 ca                	mov    edx,ecx
c0004898:	89 f0                	mov    eax,esi
c000489a:	bd 3f 00 00 00       	mov    ebp,0x3f
c000489f:	e8 e3 d1 ff ff       	call   c0001a87 <st_dword>
c00048a4:	8d 46 04             	lea    eax,[esi+0x4]
c00048a7:	89 fa                	mov    edx,edi
c00048a9:	83 c6 10             	add    esi,0x10
c00048ac:	e8 d6 d1 ff ff       	call   c0001a87 <st_dword>
c00048b1:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00048b5:	31 d2                	xor    edx,edx
c00048b7:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c00048ba:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c00048be:	89 c8                	mov    eax,ecx
c00048c0:	01 f9                	add    ecx,edi
c00048c2:	f7 f5                	div    ebp
c00048c4:	89 d5                	mov    ebp,edx
c00048c6:	31 d2                	xor    edx,edx
c00048c8:	45                   	inc    ebp
c00048c9:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c00048cd:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c00048d0:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c00048d3:	89 c2                	mov    edx,eax
c00048d5:	8d 41 ff             	lea    eax,[ecx-0x1]
c00048d8:	c1 ea 02             	shr    edx,0x2
c00048db:	83 e2 c0             	and    edx,0xffffffc0
c00048de:	09 ea                	or     edx,ebp
c00048e0:	bd 3f 00 00 00       	mov    ebp,0x3f
c00048e5:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c00048e8:	31 d2                	xor    edx,edx
c00048ea:	f7 f5                	div    ebp
c00048ec:	89 d7                	mov    edi,edx
c00048ee:	31 d2                	xor    edx,edx
c00048f0:	47                   	inc    edi
c00048f1:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c00048f5:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c00048f8:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c00048fb:	89 c5                	mov    ebp,eax
c00048fd:	c1 ed 02             	shr    ebp,0x2
c0004900:	83 e5 c0             	and    ebp,0xffffffc0
c0004903:	09 ef                	or     edi,ebp
c0004905:	89 fa                	mov    edx,edi
c0004907:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c000490a:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c000490f:	74 34                	je     c0004945 <create_partition+0x564>
c0004911:	85 c9                	test   ecx,ecx
c0004913:	74 30                	je     c0004945 <create_partition+0x564>
c0004915:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004918:	76 2b                	jbe    c0004945 <create_partition+0x564>
c000491a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000491e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004922:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004925:	83 ff 64             	cmp    edi,0x64
c0004928:	76 4b                	jbe    c0004975 <create_partition+0x594>
c000492a:	89 f8                	mov    eax,edi
c000492c:	01 c8                	add    eax,ecx
c000492e:	0f 82 5d ff ff ff    	jb     c0004891 <create_partition+0x4b0>
c0004934:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004937:	0f 87 54 ff ff ff    	ja     c0004891 <create_partition+0x4b0>
c000493d:	85 ff                	test   edi,edi
c000493f:	0f 85 51 ff ff ff    	jne    c0004896 <create_partition+0x4b5>
c0004945:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000494b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004950:	e8 2e d1 ff ff       	call   c0001a83 <st_word>
c0004955:	83 ec 0c             	sub    esp,0xc
c0004958:	6a 01                	push   0x1
c000495a:	6a 00                	push   0x0
c000495c:	6a 00                	push   0x0
c000495e:	53                   	push   ebx
c000495f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004963:	e8 74 d0 ff ff       	call   c00019dc <disk_write>
c0004968:	83 c4 20             	add    esp,0x20
c000496b:	85 c0                	test   eax,eax
c000496d:	0f 95 c0             	setne  al
c0004970:	0f b6 c0             	movzx  eax,al
c0004973:	eb 0e                	jmp    c0004983 <create_partition+0x5a2>
c0004975:	74 07                	je     c000497e <create_partition+0x59d>
c0004977:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c000497c:	eb ac                	jmp    c000492a <create_partition+0x549>
c000497e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004981:	eb a7                	jmp    c000492a <create_partition+0x549>
c0004983:	83 c4 5c             	add    esp,0x5c
c0004986:	5b                   	pop    ebx
c0004987:	5e                   	pop    esi
c0004988:	5f                   	pop    edi
c0004989:	5d                   	pop    ebp
c000498a:	c3                   	ret    

c000498b <get_fileinfo>:
c000498b:	55                   	push   ebp
c000498c:	57                   	push   edi
c000498d:	56                   	push   esi
c000498e:	53                   	push   ebx
c000498f:	83 ec 1c             	sub    esp,0x1c
c0004992:	8b 30                	mov    esi,DWORD PTR [eax]
c0004994:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004998:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000499c:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c000499f:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c00049a2:	0f 84 dc 01 00 00    	je     c0004b84 <get_fileinfo+0x1f9>
c00049a8:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00049ab:	75 0f                	jne    c00049bc <get_fileinfo+0x31>
c00049ad:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00049b0:	83 c4 1c             	add    esp,0x1c
c00049b3:	5b                   	pop    ebx
c00049b4:	5e                   	pop    esi
c00049b5:	5f                   	pop    edi
c00049b6:	5d                   	pop    ebp
c00049b7:	e9 58 d5 ff ff       	jmp    c0001f14 <get_xfileinfo>
c00049bc:	89 d3                	mov    ebx,edx
c00049be:	89 c6                	mov    esi,eax
c00049c0:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c00049c4:	74 6a                	je     c0004a30 <get_fileinfo+0xa5>
c00049c6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00049ce:	31 ed                	xor    ebp,ebp
c00049d0:	31 ff                	xor    edi,edi
c00049d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00049d6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049da:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00049dd:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c00049e1:	66 85 d2             	test   dx,dx
c00049e4:	74 3e                	je     c0004a24 <get_fileinfo+0x99>
c00049e6:	66 85 ed             	test   bp,bp
c00049e9:	75 0c                	jne    c00049f7 <get_fileinfo+0x6c>
c00049eb:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c00049f1:	66 3d ff 07          	cmp    ax,0x7ff
c00049f5:	76 22                	jbe    c0004a19 <get_fileinfo+0x8e>
c00049f7:	b9 ff 00 00 00       	mov    ecx,0xff
c00049fc:	89 e8                	mov    eax,ebp
c00049fe:	29 f9                	sub    ecx,edi
c0004a00:	c1 e0 10             	shl    eax,0x10
c0004a03:	09 d0                	or     eax,edx
c0004a05:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004a09:	e8 a3 d1 ff ff       	call   c0001bb1 <put_utf>
c0004a0e:	84 c0                	test   al,al
c0004a10:	74 10                	je     c0004a22 <get_fileinfo+0x97>
c0004a12:	0f b6 c0             	movzx  eax,al
c0004a15:	31 d2                	xor    edx,edx
c0004a17:	01 c7                	add    edi,eax
c0004a19:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004a1e:	89 d5                	mov    ebp,edx
c0004a20:	eb b0                	jmp    c00049d2 <get_fileinfo+0x47>
c0004a22:	31 ff                	xor    edi,edi
c0004a24:	66 85 ed             	test   bp,bp
c0004a27:	74 02                	je     c0004a2b <get_fileinfo+0xa0>
c0004a29:	31 ff                	xor    edi,edi
c0004a2b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004a30:	31 ff                	xor    edi,edi
c0004a32:	31 c9                	xor    ecx,ecx
c0004a34:	83 f9 0a             	cmp    ecx,0xa
c0004a37:	0f 87 ad 00 00 00    	ja     c0004aea <get_fileinfo+0x15f>
c0004a3d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a40:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004a43:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004a47:	66 83 fa 20          	cmp    dx,0x20
c0004a4b:	0f 84 92 00 00 00    	je     c0004ae3 <get_fileinfo+0x158>
c0004a51:	66 83 fa 05          	cmp    dx,0x5
c0004a55:	75 05                	jne    c0004a5c <get_fileinfo+0xd1>
c0004a57:	ba e5 00 00 00       	mov    edx,0xe5
c0004a5c:	83 ff 0b             	cmp    edi,0xb
c0004a5f:	77 0b                	ja     c0004a6c <get_fileinfo+0xe1>
c0004a61:	83 fd 09             	cmp    ebp,0x9
c0004a64:	75 06                	jne    c0004a6c <get_fileinfo+0xe1>
c0004a66:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004a6b:	47                   	inc    edi
c0004a6c:	0f b7 c2             	movzx  eax,dx
c0004a6f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a73:	e8 6d d0 ff ff       	call   c0001ae5 <dbc_1st>
c0004a78:	85 c0                	test   eax,eax
c0004a7a:	74 2f                	je     c0004aab <get_fileinfo+0x120>
c0004a7c:	83 fd 08             	cmp    ebp,0x8
c0004a7f:	74 2a                	je     c0004aab <get_fileinfo+0x120>
c0004a81:	83 fd 0b             	cmp    ebp,0xb
c0004a84:	74 25                	je     c0004aab <get_fileinfo+0x120>
c0004a86:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a89:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004a8d:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004a91:	e8 52 d0 ff ff       	call   c0001ae8 <dbc_2nd>
c0004a96:	85 c0                	test   eax,eax
c0004a98:	74 11                	je     c0004aab <get_fileinfo+0x120>
c0004a9a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a9e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004aa3:	c1 e2 08             	shl    edx,0x8
c0004aa6:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004aa9:	09 c2                	or     edx,eax
c0004aab:	0f b7 d2             	movzx  edx,dx
c0004aae:	50                   	push   eax
c0004aaf:	50                   	push   eax
c0004ab0:	68 b5 01 00 00       	push   0x1b5
c0004ab5:	52                   	push   edx
c0004ab6:	e8 46 38 00 00       	call   c0008301 <ff_oem2uni>
c0004abb:	83 c4 10             	add    esp,0x10
c0004abe:	66 85 c0             	test   ax,ax
c0004ac1:	75 04                	jne    c0004ac7 <get_fileinfo+0x13c>
c0004ac3:	31 ff                	xor    edi,edi
c0004ac5:	eb 23                	jmp    c0004aea <get_fileinfo+0x15f>
c0004ac7:	b9 0c 00 00 00       	mov    ecx,0xc
c0004acc:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ad0:	29 f9                	sub    ecx,edi
c0004ad2:	0f b7 c0             	movzx  eax,ax
c0004ad5:	e8 d7 d0 ff ff       	call   c0001bb1 <put_utf>
c0004ada:	84 c0                	test   al,al
c0004adc:	74 e5                	je     c0004ac3 <get_fileinfo+0x138>
c0004ade:	0f b6 c0             	movzx  eax,al
c0004ae1:	01 c7                	add    edi,eax
c0004ae3:	89 e9                	mov    ecx,ebp
c0004ae5:	e9 4a ff ff ff       	jmp    c0004a34 <get_fileinfo+0xa9>
c0004aea:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004aef:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004af3:	75 54                	jne    c0004b49 <get_fileinfo+0x1be>
c0004af5:	85 ff                	test   edi,edi
c0004af7:	75 0b                	jne    c0004b04 <get_fileinfo+0x179>
c0004af9:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004afd:	ba 01 00 00 00       	mov    edx,0x1
c0004b02:	eb 33                	jmp    c0004b37 <get_fileinfo+0x1ac>
c0004b04:	b1 08                	mov    cl,0x8
c0004b06:	31 d2                	xor    edx,edx
c0004b08:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004b0e:	84 c0                	test   al,al
c0004b10:	74 25                	je     c0004b37 <get_fileinfo+0x1ac>
c0004b12:	66 83 f8 2e          	cmp    ax,0x2e
c0004b16:	74 16                	je     c0004b2e <get_fileinfo+0x1a3>
c0004b18:	8d 78 bf             	lea    edi,[eax-0x41]
c0004b1b:	66 83 ff 19          	cmp    di,0x19
c0004b1f:	77 0f                	ja     c0004b30 <get_fileinfo+0x1a5>
c0004b21:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004b24:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004b27:	74 07                	je     c0004b30 <get_fileinfo+0x1a5>
c0004b29:	83 c0 20             	add    eax,0x20
c0004b2c:	eb 02                	jmp    c0004b30 <get_fileinfo+0x1a5>
c0004b2e:	b1 10                	mov    cl,0x10
c0004b30:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004b34:	42                   	inc    edx
c0004b35:	eb d1                	jmp    c0004b08 <get_fileinfo+0x17d>
c0004b37:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004b3c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b3f:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004b43:	75 04                	jne    c0004b49 <get_fileinfo+0x1be>
c0004b45:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004b49:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b4c:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004b4f:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004b52:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b55:	83 c0 1c             	add    eax,0x1c
c0004b58:	e8 c1 ce ff ff       	call   c0001a1e <ld_dword>
c0004b5d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004b64:	89 03                	mov    DWORD PTR [ebx],eax
c0004b66:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b69:	83 c0 16             	add    eax,0x16
c0004b6c:	e8 a0 ce ff ff       	call   c0001a11 <ld_word>
c0004b71:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004b75:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b78:	83 c0 18             	add    eax,0x18
c0004b7b:	e8 91 ce ff ff       	call   c0001a11 <ld_word>
c0004b80:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004b84:	83 c4 1c             	add    esp,0x1c
c0004b87:	5b                   	pop    ebx
c0004b88:	5e                   	pop    esi
c0004b89:	5f                   	pop    edi
c0004b8a:	5d                   	pop    ebp
c0004b8b:	c3                   	ret    

c0004b8c <ld_clust.isra.0>:
c0004b8c:	56                   	push   esi
c0004b8d:	89 c6                	mov    esi,eax
c0004b8f:	53                   	push   ebx
c0004b90:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004b93:	89 d3                	mov    ebx,edx
c0004b95:	e8 77 ce ff ff       	call   c0001a11 <ld_word>
c0004b9a:	0f b7 c8             	movzx  ecx,ax
c0004b9d:	89 f0                	mov    eax,esi
c0004b9f:	3c 03                	cmp    al,0x3
c0004ba1:	75 0d                	jne    c0004bb0 <ld_clust.isra.0+0x24>
c0004ba3:	8d 43 14             	lea    eax,[ebx+0x14]
c0004ba6:	e8 66 ce ff ff       	call   c0001a11 <ld_word>
c0004bab:	c1 e0 10             	shl    eax,0x10
c0004bae:	09 c1                	or     ecx,eax
c0004bb0:	89 c8                	mov    eax,ecx
c0004bb2:	5b                   	pop    ebx
c0004bb3:	5e                   	pop    esi
c0004bb4:	c3                   	ret    

c0004bb5 <st_clust.isra.1>:
c0004bb5:	56                   	push   esi
c0004bb6:	89 c6                	mov    esi,eax
c0004bb8:	53                   	push   ebx
c0004bb9:	89 d3                	mov    ebx,edx
c0004bbb:	0f b7 d1             	movzx  edx,cx
c0004bbe:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004bc1:	e8 bd ce ff ff       	call   c0001a83 <st_word>
c0004bc6:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004bc9:	75 0f                	jne    c0004bda <st_clust.isra.1+0x25>
c0004bcb:	c1 e9 10             	shr    ecx,0x10
c0004bce:	8d 43 14             	lea    eax,[ebx+0x14]
c0004bd1:	89 ca                	mov    edx,ecx
c0004bd3:	5b                   	pop    ebx
c0004bd4:	5e                   	pop    esi
c0004bd5:	e9 a9 ce ff ff       	jmp    c0001a83 <st_word>
c0004bda:	5b                   	pop    ebx
c0004bdb:	5e                   	pop    esi
c0004bdc:	c3                   	ret    

c0004bdd <init_alloc_info.isra.2>:
c0004bdd:	56                   	push   esi
c0004bde:	53                   	push   ebx
c0004bdf:	89 c6                	mov    esi,eax
c0004be1:	89 d3                	mov    ebx,edx
c0004be3:	51                   	push   ecx
c0004be4:	8b 00                	mov    eax,DWORD PTR [eax]
c0004be6:	83 c0 34             	add    eax,0x34
c0004be9:	e8 30 ce ff ff       	call   c0001a1e <ld_dword>
c0004bee:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004bf1:	8b 06                	mov    eax,DWORD PTR [esi]
c0004bf3:	83 c0 38             	add    eax,0x38
c0004bf6:	e8 3b ce ff ff       	call   c0001a36 <ld_qword>
c0004bfb:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004bfe:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004c01:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c03:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004c06:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c0d:	83 e0 02             	and    eax,0x2
c0004c10:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004c13:	5b                   	pop    ebx
c0004c14:	5b                   	pop    ebx
c0004c15:	5e                   	pop    esi
c0004c16:	c3                   	ret    

c0004c17 <follow_path>:
c0004c17:	56                   	push   esi
c0004c18:	53                   	push   ebx
c0004c19:	89 c3                	mov    ebx,eax
c0004c1b:	83 ec 14             	sub    esp,0x14
c0004c1e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004c22:	8b 30                	mov    esi,DWORD PTR [eax]
c0004c24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c28:	8a 10                	mov    dl,BYTE PTR [eax]
c0004c2a:	80 fa 5c             	cmp    dl,0x5c
c0004c2d:	75 07                	jne    c0004c36 <follow_path+0x1f>
c0004c2f:	40                   	inc    eax
c0004c30:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c34:	eb ee                	jmp    c0004c24 <follow_path+0xd>
c0004c36:	80 fa 2f             	cmp    dl,0x2f
c0004c39:	74 f4                	je     c0004c2f <follow_path+0x18>
c0004c3b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004c42:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c49:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004c4c:	77 52                	ja     c0004ca0 <follow_path+0x89>
c0004c4e:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004c52:	31 d2                	xor    edx,edx
c0004c54:	89 d8                	mov    eax,ebx
c0004c56:	e8 12 e3 ff ff       	call   c0002f6d <dir_sdi>
c0004c5b:	eb 7c                	jmp    c0004cd9 <follow_path+0xc2>
c0004c5d:	89 d8                	mov    eax,ebx
c0004c5f:	e8 6e f2 ff ff       	call   c0003ed2 <dir_find>
c0004c64:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004c67:	85 c0                	test   eax,eax
c0004c69:	75 46                	jne    c0004cb1 <follow_path+0x9a>
c0004c6b:	80 e2 04             	and    dl,0x4
c0004c6e:	75 69                	jne    c0004cd9 <follow_path+0xc2>
c0004c70:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004c74:	74 5e                	je     c0004cd4 <follow_path+0xbd>
c0004c76:	8a 06                	mov    al,BYTE PTR [esi]
c0004c78:	3c 04                	cmp    al,0x4
c0004c7a:	75 41                	jne    c0004cbd <follow_path+0xa6>
c0004c7c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004c7f:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004c83:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004c86:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004c89:	30 c0                	xor    al,al
c0004c8b:	09 d0                	or     eax,edx
c0004c8d:	89 da                	mov    edx,ebx
c0004c8f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004c92:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004c95:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004c98:	8d 46 10             	lea    eax,[esi+0x10]
c0004c9b:	e8 3d ff ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c0004ca0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ca4:	89 d8                	mov    eax,ebx
c0004ca6:	e8 a9 ed ff ff       	call   c0003a54 <create_name>
c0004cab:	85 c0                	test   eax,eax
c0004cad:	74 ae                	je     c0004c5d <follow_path+0x46>
c0004caf:	eb 28                	jmp    c0004cd9 <follow_path+0xc2>
c0004cb1:	83 f8 04             	cmp    eax,0x4
c0004cb4:	75 23                	jne    c0004cd9 <follow_path+0xc2>
c0004cb6:	80 e2 04             	and    dl,0x4
c0004cb9:	74 19                	je     c0004cd4 <follow_path+0xbd>
c0004cbb:	eb 1c                	jmp    c0004cd9 <follow_path+0xc2>
c0004cbd:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004cc0:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004cc6:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004cca:	e8 bd fe ff ff       	call   c0004b8c <ld_clust.isra.0>
c0004ccf:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004cd2:	eb cc                	jmp    c0004ca0 <follow_path+0x89>
c0004cd4:	b8 05 00 00 00       	mov    eax,0x5
c0004cd9:	83 c4 14             	add    esp,0x14
c0004cdc:	5b                   	pop    ebx
c0004cdd:	5e                   	pop    esi
c0004cde:	c3                   	ret    

c0004cdf <f_mount>:
c0004cdf:	53                   	push   ebx
c0004ce0:	83 ec 18             	sub    esp,0x18
c0004ce3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004ce7:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004ceb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cef:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004cf3:	e8 fb d2 ff ff       	call   c0001ff3 <get_ldnumber>
c0004cf8:	89 c2                	mov    edx,eax
c0004cfa:	b8 0b 00 00 00       	mov    eax,0xb
c0004cff:	85 d2                	test   edx,edx
c0004d01:	78 39                	js     c0004d3c <f_mount+0x5d>
c0004d03:	8b 04 95 e0 c8 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3720]
c0004d0a:	85 c0                	test   eax,eax
c0004d0c:	74 03                	je     c0004d11 <f_mount+0x32>
c0004d0e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d15:	85 c0                	test   eax,eax
c0004d17:	74 03                	je     c0004d1c <f_mount+0x3d>
c0004d19:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d20:	89 04 95 e0 c8 02 c0 	mov    DWORD PTR [edx*4-0x3ffd3720],eax
c0004d27:	31 c0                	xor    eax,eax
c0004d29:	84 db                	test   bl,bl
c0004d2b:	74 0f                	je     c0004d3c <f_mount+0x5d>
c0004d2d:	31 c9                	xor    ecx,ecx
c0004d2f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d33:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d37:	e8 65 d7 ff ff       	call   c00024a1 <mount_volume>
c0004d3c:	83 c4 18             	add    esp,0x18
c0004d3f:	5b                   	pop    ebx
c0004d40:	c3                   	ret    

c0004d41 <f_open>:
c0004d41:	55                   	push   ebp
c0004d42:	bd 09 00 00 00       	mov    ebp,0x9
c0004d47:	57                   	push   edi
c0004d48:	56                   	push   esi
c0004d49:	53                   	push   ebx
c0004d4a:	83 ec 7c             	sub    esp,0x7c
c0004d4d:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004d54:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004d5b:	85 db                	test   ebx,ebx
c0004d5d:	0f 84 10 04 00 00    	je     c0005173 <f_open+0x432>
c0004d63:	89 fe                	mov    esi,edi
c0004d65:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d69:	83 e6 3f             	and    esi,0x3f
c0004d6c:	89 f0                	mov    eax,esi
c0004d6e:	0f b6 c8             	movzx  ecx,al
c0004d71:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004d78:	e8 24 d7 ff ff       	call   c00024a1 <mount_volume>
c0004d7d:	89 c5                	mov    ebp,eax
c0004d7f:	85 c0                	test   eax,eax
c0004d81:	0f 85 e6 03 00 00    	jne    c000516d <f_open+0x42c>
c0004d87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d8b:	bd 11 00 00 00       	mov    ebp,0x11
c0004d90:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d94:	83 ec 0c             	sub    esp,0xc
c0004d97:	68 60 04 00 00       	push   0x460
c0004d9c:	e8 a3 34 00 00       	call   c0008244 <ff_memalloc>
c0004da1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004da5:	83 c4 10             	add    esp,0x10
c0004da8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004dad:	0f 84 c0 03 00 00    	je     c0005173 <f_open+0x432>
c0004db3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004db7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004dbb:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004dc1:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004dc4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004dc7:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004dce:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004dd2:	e8 40 fe ff ff       	call   c0004c17 <follow_path>
c0004dd7:	89 c5                	mov    ebp,eax
c0004dd9:	85 c0                	test   eax,eax
c0004ddb:	75 0c                	jne    c0004de9 <f_open+0xa8>
c0004ddd:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004de2:	79 05                	jns    c0004de9 <f_open+0xa8>
c0004de4:	bd 06 00 00 00       	mov    ebp,0x6
c0004de9:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004def:	0f 84 84 01 00 00    	je     c0004f79 <f_open+0x238>
c0004df5:	85 ed                	test   ebp,ebp
c0004df7:	74 20                	je     c0004e19 <f_open+0xd8>
c0004df9:	83 fd 04             	cmp    ebp,0x4
c0004dfc:	0f 85 58 03 00 00    	jne    c000515a <f_open+0x419>
c0004e02:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e06:	83 ce 08             	or     esi,0x8
c0004e09:	e8 8a f2 ff ff       	call   c0004098 <dir_register>
c0004e0e:	89 c5                	mov    ebp,eax
c0004e10:	85 c0                	test   eax,eax
c0004e12:	74 2f                	je     c0004e43 <f_open+0x102>
c0004e14:	e9 41 03 00 00       	jmp    c000515a <f_open+0x419>
c0004e19:	bd 07 00 00 00       	mov    ebp,0x7
c0004e1e:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004e23:	0f 85 31 03 00 00    	jne    c000515a <f_open+0x419>
c0004e29:	bd 08 00 00 00       	mov    ebp,0x8
c0004e2e:	f7 c7 04 00 00 00    	test   edi,0x4
c0004e34:	0f 85 20 03 00 00    	jne    c000515a <f_open+0x419>
c0004e3a:	83 e7 08             	and    edi,0x8
c0004e3d:	0f 84 65 01 00 00    	je     c0004fa8 <f_open+0x267>
c0004e43:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e47:	8a 02                	mov    al,BYTE PTR [edx]
c0004e49:	3c 04                	cmp    al,0x4
c0004e4b:	0f 85 97 00 00 00    	jne    c0004ee8 <f_open+0x1a7>
c0004e51:	8d 42 10             	lea    eax,[edx+0x10]
c0004e54:	89 13                	mov    DWORD PTR [ebx],edx
c0004e56:	89 da                	mov    edx,ebx
c0004e58:	e8 80 fd ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c0004e5d:	31 d2                	xor    edx,edx
c0004e5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e63:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004e68:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e6b:	83 c0 02             	add    eax,0x2
c0004e6e:	e8 32 cc ff ff       	call   c0001aa5 <mem_set>
c0004e73:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004e78:	31 d2                	xor    edx,edx
c0004e7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e7e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e81:	83 c0 26             	add    eax,0x26
c0004e84:	e8 1c cc ff ff       	call   c0001aa5 <mem_set>
c0004e89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e8d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004e90:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004e94:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e99:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e9c:	83 c0 08             	add    eax,0x8
c0004e9f:	e8 e3 cb ff ff       	call   c0001a87 <st_dword>
c0004ea4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ea8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004eab:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004eaf:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004eb3:	e8 b7 ea ff ff       	call   c000396f <store_xdir>
c0004eb8:	89 c5                	mov    ebp,eax
c0004eba:	85 c0                	test   eax,eax
c0004ebc:	0f 85 98 02 00 00    	jne    c000515a <f_open+0x419>
c0004ec2:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004ec5:	85 d2                	test   edx,edx
c0004ec7:	0f 84 db 00 00 00    	je     c0004fa8 <f_open+0x267>
c0004ecd:	31 c9                	xor    ecx,ecx
c0004ecf:	89 d8                	mov    eax,ebx
c0004ed1:	e8 8e e3 ff ff       	call   c0003264 <remove_chain>
c0004ed6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004eda:	89 c5                	mov    ebp,eax
c0004edc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004edf:	48                   	dec    eax
c0004ee0:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004ee3:	e9 b8 00 00 00       	jmp    c0004fa0 <f_open+0x25f>
c0004ee8:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004eec:	89 ea                	mov    edx,ebp
c0004eee:	e8 99 fc ff ff       	call   c0004b8c <ld_clust.isra.0>
c0004ef3:	ba 00 00 21 50       	mov    edx,0x50210000
c0004ef8:	89 c7                	mov    edi,eax
c0004efa:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004efd:	e8 85 cb ff ff       	call   c0001a87 <st_dword>
c0004f02:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f06:	31 c9                	xor    ecx,ecx
c0004f08:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004f0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f10:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f14:	e8 9c fc ff ff       	call   c0004bb5 <st_clust.isra.1>
c0004f19:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f1d:	31 d2                	xor    edx,edx
c0004f1f:	83 c0 1c             	add    eax,0x1c
c0004f22:	e8 60 cb ff ff       	call   c0001a87 <st_dword>
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	85 ff                	test   edi,edi
c0004f2d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f31:	74 75                	je     c0004fa8 <f_open+0x267>
c0004f33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f37:	31 c9                	xor    ecx,ecx
c0004f39:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004f3c:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004f3f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004f43:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004f47:	89 fa                	mov    edx,edi
c0004f49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f4d:	e8 12 e3 ff ff       	call   c0003264 <remove_chain>
c0004f52:	89 c5                	mov    ebp,eax
c0004f54:	85 c0                	test   eax,eax
c0004f56:	0f 85 fe 01 00 00    	jne    c000515a <f_open+0x419>
c0004f5c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004f60:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004f64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f68:	4f                   	dec    edi
c0004f69:	e8 81 d2 ff ff       	call   c00021ef <move_window>
c0004f6e:	89 c5                	mov    ebp,eax
c0004f70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f74:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004f77:	eb 27                	jmp    c0004fa0 <f_open+0x25f>
c0004f79:	85 ed                	test   ebp,ebp
c0004f7b:	0f 85 d9 01 00 00    	jne    c000515a <f_open+0x419>
c0004f81:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004f85:	bd 04 00 00 00       	mov    ebp,0x4
c0004f8a:	a8 10                	test   al,0x10
c0004f8c:	0f 85 c8 01 00 00    	jne    c000515a <f_open+0x419>
c0004f92:	83 e7 02             	and    edi,0x2
c0004f95:	74 11                	je     c0004fa8 <f_open+0x267>
c0004f97:	bd 07 00 00 00       	mov    ebp,0x7
c0004f9c:	a8 01                	test   al,0x1
c0004f9e:	eb 02                	jmp    c0004fa2 <f_open+0x261>
c0004fa0:	85 ed                	test   ebp,ebp
c0004fa2:	0f 85 b2 01 00 00    	jne    c000515a <f_open+0x419>
c0004fa8:	f7 c6 08 00 00 00    	test   esi,0x8
c0004fae:	74 03                	je     c0004fb3 <f_open+0x272>
c0004fb0:	83 ce 40             	or     esi,0x40
c0004fb3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004fb7:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004fba:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004fbd:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004fc0:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004fc3:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0004fc7:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0004fca:	8a 02                	mov    al,BYTE PTR [edx]
c0004fcc:	3c 04                	cmp    al,0x4
c0004fce:	75 2a                	jne    c0004ffa <f_open+0x2b9>
c0004fd0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004fd4:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0004fd9:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004fdc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004fe0:	30 c0                	xor    al,al
c0004fe2:	09 c8                	or     eax,ecx
c0004fe4:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004fe7:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0004feb:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004fee:	8d 42 10             	lea    eax,[edx+0x10]
c0004ff1:	89 da                	mov    edx,ebx
c0004ff3:	e8 e5 fb ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c0004ff8:	eb 1c                	jmp    c0005016 <f_open+0x2d5>
c0004ffa:	89 fa                	mov    edx,edi
c0004ffc:	e8 8b fb ff ff       	call   c0004b8c <ld_clust.isra.0>
c0005001:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005004:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005007:	e8 12 ca ff ff       	call   c0001a1e <ld_dword>
c000500c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005013:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005016:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000501a:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005021:	89 03                	mov    DWORD PTR [ebx],eax
c0005023:	31 d2                	xor    edx,edx
c0005025:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005029:	b9 00 02 00 00       	mov    ecx,0x200
c000502e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005032:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005036:	89 f0                	mov    eax,esi
c0005038:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000503f:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005042:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005049:	8d 43 50             	lea    eax,[ebx+0x50]
c000504c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005053:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000505a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000505e:	e8 42 ca ff ff       	call   c0001aa5 <mem_set>
c0005063:	83 e6 20             	and    esi,0x20
c0005066:	75 07                	jne    c000506f <f_open+0x32e>
c0005068:	31 ed                	xor    ebp,ebp
c000506a:	e9 eb 00 00 00       	jmp    c000515a <f_open+0x419>
c000506f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005072:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005075:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005079:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000507d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005081:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005085:	74 e1                	je     c0005068 <f_open+0x327>
c0005087:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000508b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000508f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005092:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005095:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005099:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000509c:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00050a0:	31 ff                	xor    edi,edi
c00050a2:	c1 e5 09             	shl    ebp,0x9
c00050a5:	89 ee                	mov    esi,ebp
c00050a7:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00050ab:	89 f8                	mov    eax,edi
c00050ad:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00050b1:	73 22                	jae    c00050d5 <f_open+0x394>
c00050b3:	89 d8                	mov    eax,ebx
c00050b5:	e8 bd dc ff ff       	call   c0002d77 <get_fat>
c00050ba:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00050be:	89 c2                	mov    edx,eax
c00050c0:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00050c4:	83 f8 01             	cmp    eax,0x1
c00050c7:	76 10                	jbe    c00050d9 <f_open+0x398>
c00050c9:	83 f8 ff             	cmp    eax,0xffffffff
c00050cc:	75 d9                	jne    c00050a7 <f_open+0x366>
c00050ce:	bd 01 00 00 00       	mov    ebp,0x1
c00050d3:	eb 09                	jmp    c00050de <f_open+0x39d>
c00050d5:	31 ed                	xor    ebp,ebp
c00050d7:	eb 05                	jmp    c00050de <f_open+0x39d>
c00050d9:	bd 02 00 00 00       	mov    ebp,0x2
c00050de:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00050e1:	85 ed                	test   ebp,ebp
c00050e3:	75 75                	jne    c000515a <f_open+0x419>
c00050e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00050e9:	25 ff 01 00 00       	and    eax,0x1ff
c00050ee:	0f 84 74 ff ff ff    	je     c0005068 <f_open+0x327>
c00050f4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00050f8:	bd 02 00 00 00       	mov    ebp,0x2
c00050fd:	89 c8                	mov    eax,ecx
c00050ff:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005103:	e8 a2 cb ff ff       	call   c0001caa <clst2sect>
c0005108:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000510c:	89 d7                	mov    edi,edx
c000510e:	09 c7                	or     edi,eax
c0005110:	74 48                	je     c000515a <f_open+0x419>
c0005112:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005116:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000511a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005122:	0f ac fe 09          	shrd   esi,edi,0x9
c0005126:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000512a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000512e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005131:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005135:	83 ec 0c             	sub    esp,0xc
c0005138:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000513b:	6a 01                	push   0x1
c000513d:	52                   	push   edx
c000513e:	50                   	push   eax
c000513f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005143:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005147:	50                   	push   eax
c0005148:	e8 79 c8 ff ff       	call   c00019c6 <disk_read>
c000514d:	83 c4 20             	add    esp,0x20
c0005150:	85 c0                	test   eax,eax
c0005152:	0f 95 c0             	setne  al
c0005155:	0f b6 c0             	movzx  eax,al
c0005158:	89 c5                	mov    ebp,eax
c000515a:	83 ec 0c             	sub    esp,0xc
c000515d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005161:	e8 f4 30 00 00       	call   c000825a <ff_memfree>
c0005166:	83 c4 10             	add    esp,0x10
c0005169:	85 ed                	test   ebp,ebp
c000516b:	74 06                	je     c0005173 <f_open+0x432>
c000516d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005173:	83 c4 7c             	add    esp,0x7c
c0005176:	89 e8                	mov    eax,ebp
c0005178:	5b                   	pop    ebx
c0005179:	5e                   	pop    esi
c000517a:	5f                   	pop    edi
c000517b:	5d                   	pop    ebp
c000517c:	c3                   	ret    

c000517d <f_read>:
c000517d:	55                   	push   ebp
c000517e:	57                   	push   edi
c000517f:	56                   	push   esi
c0005180:	53                   	push   ebx
c0005181:	83 ec 2c             	sub    esp,0x2c
c0005184:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005188:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000518c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005192:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005196:	89 d8                	mov    eax,ebx
c0005198:	e8 77 cf ff ff       	call   c0002114 <validate>
c000519d:	89 c5                	mov    ebp,eax
c000519f:	85 c0                	test   eax,eax
c00051a1:	0f 85 4c 02 00 00    	jne    c00053f3 <f_read+0x276>
c00051a7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00051ab:	85 ed                	test   ebp,ebp
c00051ad:	0f 85 40 02 00 00    	jne    c00053f3 <f_read+0x276>
c00051b3:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00051b7:	0f 84 31 02 00 00    	je     c00053ee <f_read+0x271>
c00051bd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051c0:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051c3:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00051c6:	bf 00 00 00 00       	mov    edi,0x0
c00051cb:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00051ce:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00051d2:	89 d1                	mov    ecx,edx
c00051d4:	19 f9                	sbb    ecx,edi
c00051d6:	0f 83 cf 00 00 00    	jae    c00052ab <f_read+0x12e>
c00051dc:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00051e0:	e9 c6 00 00 00       	jmp    c00052ab <f_read+0x12e>
c00051e5:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00051e8:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00051eb:	89 d0                	mov    eax,edx
c00051ed:	25 ff 01 00 00       	and    eax,0x1ff
c00051f2:	0f 85 c9 01 00 00    	jne    c00053c1 <f_read+0x244>
c00051f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051fc:	89 d6                	mov    esi,edx
c00051fe:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005202:	89 cf                	mov    edi,ecx
c0005204:	48                   	dec    eax
c0005205:	0f ac fe 09          	shrd   esi,edi,0x9
c0005209:	21 f0                	and    eax,esi
c000520b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000520f:	0f 84 a6 00 00 00    	je     c00052bb <f_read+0x13e>
c0005215:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005219:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000521c:	89 c8                	mov    eax,ecx
c000521e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005221:	e8 84 ca ff ff       	call   c0001caa <clst2sect>
c0005226:	89 d7                	mov    edi,edx
c0005228:	09 c7                	or     edi,eax
c000522a:	0f 84 b4 00 00 00    	je     c00052e4 <f_read+0x167>
c0005230:	31 ff                	xor    edi,edi
c0005232:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005236:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005239:	01 c6                	add    esi,eax
c000523b:	11 d7                	adc    edi,edx
c000523d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005245:	0f 86 fd 00 00 00    	jbe    c0005348 <f_read+0x1cb>
c000524b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000524f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005253:	c1 e8 09             	shr    eax,0x9
c0005256:	89 04 24             	mov    DWORD PTR [esp],eax
c0005259:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000525d:	03 14 24             	add    edx,DWORD PTR [esp]
c0005260:	39 c2                	cmp    edx,eax
c0005262:	76 07                	jbe    c000526b <f_read+0xee>
c0005264:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005268:	89 04 24             	mov    DWORD PTR [esp],eax
c000526b:	83 ec 0c             	sub    esp,0xc
c000526e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005272:	57                   	push   edi
c0005273:	56                   	push   esi
c0005274:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005278:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000527c:	50                   	push   eax
c000527d:	e8 44 c7 ff ff       	call   c00019c6 <disk_read>
c0005282:	83 c4 20             	add    esp,0x20
c0005285:	85 c0                	test   eax,eax
c0005287:	75 6e                	jne    c00052f7 <f_read+0x17a>
c0005289:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000528d:	78 7e                	js     c000530d <f_read+0x190>
c000528f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005292:	c1 e6 09             	shl    esi,0x9
c0005295:	31 ff                	xor    edi,edi
c0005297:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000529b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000529f:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00052a3:	01 30                	add    DWORD PTR [eax],esi
c00052a5:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00052a8:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00052ab:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00052b0:	0f 85 2f ff ff ff    	jne    c00051e5 <f_read+0x68>
c00052b6:	e9 38 01 00 00       	jmp    c00053f3 <f_read+0x276>
c00052bb:	89 c8                	mov    eax,ecx
c00052bd:	09 d0                	or     eax,edx
c00052bf:	75 05                	jne    c00052c6 <f_read+0x149>
c00052c1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00052c4:	eb 19                	jmp    c00052df <f_read+0x162>
c00052c6:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00052ca:	74 09                	je     c00052d5 <f_read+0x158>
c00052cc:	89 d8                	mov    eax,ebx
c00052ce:	e8 f8 c9 ff ff       	call   c0001ccb <clmt_clust>
c00052d3:	eb 0a                	jmp    c00052df <f_read+0x162>
c00052d5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00052d8:	89 d8                	mov    eax,ebx
c00052da:	e8 98 da ff ff       	call   c0002d77 <get_fat>
c00052df:	83 f8 01             	cmp    eax,0x1
c00052e2:	77 0e                	ja     c00052f2 <f_read+0x175>
c00052e4:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00052e8:	bd 02 00 00 00       	mov    ebp,0x2
c00052ed:	e9 01 01 00 00       	jmp    c00053f3 <f_read+0x276>
c00052f2:	83 f8 ff             	cmp    eax,0xffffffff
c00052f5:	75 0e                	jne    c0005305 <f_read+0x188>
c00052f7:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00052fb:	bd 01 00 00 00       	mov    ebp,0x1
c0005300:	e9 ee 00 00 00       	jmp    c00053f3 <f_read+0x276>
c0005305:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005308:	e9 08 ff ff ff       	jmp    c0005215 <f_read+0x98>
c000530d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005310:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005313:	29 f0                	sub    eax,esi
c0005315:	19 fa                	sbb    edx,edi
c0005317:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000531a:	89 d7                	mov    edi,edx
c000531c:	ba 00 00 00 00       	mov    edx,0x0
c0005321:	89 f9                	mov    ecx,edi
c0005323:	19 d1                	sbb    ecx,edx
c0005325:	0f 83 64 ff ff ff    	jae    c000528f <f_read+0x112>
c000532b:	89 c7                	mov    edi,eax
c000532d:	8d 53 50             	lea    edx,[ebx+0x50]
c0005330:	c1 e7 09             	shl    edi,0x9
c0005333:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005337:	b9 00 02 00 00       	mov    ecx,0x200
c000533c:	01 f8                	add    eax,edi
c000533e:	e8 4d c7 ff ff       	call   c0001a90 <mem_cpy>
c0005343:	e9 47 ff ff ff       	jmp    c000528f <f_read+0x112>
c0005348:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000534b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000534e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005351:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005355:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c0005359:	75 05                	jne    c0005360 <f_read+0x1e3>
c000535b:	39 34 24             	cmp    DWORD PTR [esp],esi
c000535e:	74 5b                	je     c00053bb <f_read+0x23e>
c0005360:	8d 43 50             	lea    eax,[ebx+0x50]
c0005363:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005367:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000536b:	79 2a                	jns    c0005397 <f_read+0x21a>
c000536d:	83 ec 0c             	sub    esp,0xc
c0005370:	6a 01                	push   0x1
c0005372:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005376:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000537a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000537e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005382:	50                   	push   eax
c0005383:	e8 54 c6 ff ff       	call   c00019dc <disk_write>
c0005388:	83 c4 20             	add    esp,0x20
c000538b:	85 c0                	test   eax,eax
c000538d:	0f 85 64 ff ff ff    	jne    c00052f7 <f_read+0x17a>
c0005393:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005397:	83 ec 0c             	sub    esp,0xc
c000539a:	6a 01                	push   0x1
c000539c:	57                   	push   edi
c000539d:	56                   	push   esi
c000539e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053a2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00053a6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00053aa:	50                   	push   eax
c00053ab:	e8 16 c6 ff ff       	call   c00019c6 <disk_read>
c00053b0:	83 c4 20             	add    esp,0x20
c00053b3:	85 c0                	test   eax,eax
c00053b5:	0f 85 3c ff ff ff    	jne    c00052f7 <f_read+0x17a>
c00053bb:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00053be:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00053c1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053c4:	ba 00 02 00 00       	mov    edx,0x200
c00053c9:	25 ff 01 00 00       	and    eax,0x1ff
c00053ce:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00053d2:	29 c2                	sub    edx,eax
c00053d4:	39 d6                	cmp    esi,edx
c00053d6:	76 02                	jbe    c00053da <f_read+0x25d>
c00053d8:	89 d6                	mov    esi,edx
c00053da:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00053de:	89 f1                	mov    ecx,esi
c00053e0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053e4:	e8 a7 c6 ff ff       	call   c0001a90 <mem_cpy>
c00053e9:	e9 a7 fe ff ff       	jmp    c0005295 <f_read+0x118>
c00053ee:	bd 07 00 00 00       	mov    ebp,0x7
c00053f3:	83 c4 2c             	add    esp,0x2c
c00053f6:	89 e8                	mov    eax,ebp
c00053f8:	5b                   	pop    ebx
c00053f9:	5e                   	pop    esi
c00053fa:	5f                   	pop    edi
c00053fb:	5d                   	pop    ebp
c00053fc:	c3                   	ret    

c00053fd <f_write>:
c00053fd:	55                   	push   ebp
c00053fe:	57                   	push   edi
c00053ff:	56                   	push   esi
c0005400:	53                   	push   ebx
c0005401:	83 ec 2c             	sub    esp,0x2c
c0005404:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005408:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000540c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005412:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005416:	89 d8                	mov    eax,ebx
c0005418:	e8 f7 cc ff ff       	call   c0002114 <validate>
c000541d:	89 c5                	mov    ebp,eax
c000541f:	85 c0                	test   eax,eax
c0005421:	0f 85 86 02 00 00    	jne    c00056ad <f_write+0x2b0>
c0005427:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000542b:	85 ed                	test   ebp,ebp
c000542d:	0f 85 7a 02 00 00    	jne    c00056ad <f_write+0x2b0>
c0005433:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005437:	0f 84 6b 02 00 00    	je     c00056a8 <f_write+0x2ab>
c000543d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005441:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005444:	0f 84 43 01 00 00    	je     c000558d <f_write+0x190>
c000544a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000544d:	89 c1                	mov    ecx,eax
c000544f:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005453:	0f 83 34 01 00 00    	jae    c000558d <f_write+0x190>
c0005459:	f7 d0                	not    eax
c000545b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000545f:	e9 29 01 00 00       	jmp    c000558d <f_write+0x190>
c0005464:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005467:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000546a:	89 d0                	mov    eax,edx
c000546c:	25 ff 01 00 00       	and    eax,0x1ff
c0005471:	0f 85 00 02 00 00    	jne    c0005677 <f_write+0x27a>
c0005477:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000547b:	89 d6                	mov    esi,edx
c000547d:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005481:	89 cf                	mov    edi,ecx
c0005483:	48                   	dec    eax
c0005484:	0f ac fe 09          	shrd   esi,edi,0x9
c0005488:	21 f0                	and    eax,esi
c000548a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000548e:	0f 84 06 01 00 00    	je     c000559a <f_write+0x19d>
c0005494:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005498:	0f 88 6e 01 00 00    	js     c000560c <f_write+0x20f>
c000549e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00054a2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054a5:	89 c8                	mov    eax,ecx
c00054a7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00054ab:	e8 fa c7 ff ff       	call   c0001caa <clst2sect>
c00054b0:	89 d1                	mov    ecx,edx
c00054b2:	09 c1                	or     ecx,eax
c00054b4:	0f 84 1c 01 00 00    	je     c00055d6 <f_write+0x1d9>
c00054ba:	31 ff                	xor    edi,edi
c00054bc:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00054c0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00054c4:	01 c6                	add    esi,eax
c00054c6:	11 d7                	adc    edi,edx
c00054c8:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00054d0:	0f 86 63 01 00 00    	jbe    c0005639 <f_write+0x23c>
c00054d6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054da:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054de:	c1 e8 09             	shr    eax,0x9
c00054e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054e5:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054e9:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c00054ed:	39 c2                	cmp    edx,eax
c00054ef:	76 08                	jbe    c00054f9 <f_write+0xfc>
c00054f1:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054f9:	83 ec 0c             	sub    esp,0xc
c00054fc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005500:	57                   	push   edi
c0005501:	56                   	push   esi
c0005502:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005506:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000550a:	50                   	push   eax
c000550b:	e8 cc c4 ff ff       	call   c00019dc <disk_write>
c0005510:	83 c4 20             	add    esp,0x20
c0005513:	85 c0                	test   eax,eax
c0005515:	0f 85 ce 00 00 00    	jne    c00055e9 <f_write+0x1ec>
c000551b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000551e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005521:	29 f0                	sub    eax,esi
c0005523:	19 fa                	sbb    edx,edi
c0005525:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005529:	89 d7                	mov    edi,edx
c000552b:	ba 00 00 00 00       	mov    edx,0x0
c0005530:	89 f9                	mov    ecx,edi
c0005532:	19 d1                	sbb    ecx,edx
c0005534:	73 1c                	jae    c0005552 <f_write+0x155>
c0005536:	89 c7                	mov    edi,eax
c0005538:	b9 00 02 00 00       	mov    ecx,0x200
c000553d:	c1 e7 09             	shl    edi,0x9
c0005540:	8d 43 50             	lea    eax,[ebx+0x50]
c0005543:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005547:	89 fa                	mov    edx,edi
c0005549:	e8 42 c5 ff ff       	call   c0001a90 <mem_cpy>
c000554e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005552:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005556:	c1 e6 09             	shl    esi,0x9
c0005559:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000555d:	31 ff                	xor    edi,edi
c000555f:	01 30                	add    DWORD PTR [eax],esi
c0005561:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005565:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005569:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000556c:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c000556f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005572:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c0005575:	89 c1                	mov    ecx,eax
c0005577:	39 f2                	cmp    edx,esi
c0005579:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000557c:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c000557f:	19 f9                	sbb    ecx,edi
c0005581:	73 04                	jae    c0005587 <f_write+0x18a>
c0005583:	89 f2                	mov    edx,esi
c0005585:	89 f8                	mov    eax,edi
c0005587:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000558a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000558d:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005592:	0f 85 cc fe ff ff    	jne    c0005464 <f_write+0x67>
c0005598:	eb 2e                	jmp    c00055c8 <f_write+0x1cb>
c000559a:	89 c8                	mov    eax,ecx
c000559c:	09 d0                	or     eax,edx
c000559e:	75 0b                	jne    c00055ab <f_write+0x1ae>
c00055a0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00055a3:	31 d2                	xor    edx,edx
c00055a5:	85 c0                	test   eax,eax
c00055a7:	75 28                	jne    c00055d1 <f_write+0x1d4>
c00055a9:	eb 12                	jmp    c00055bd <f_write+0x1c0>
c00055ab:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00055af:	74 09                	je     c00055ba <f_write+0x1bd>
c00055b1:	89 d8                	mov    eax,ebx
c00055b3:	e8 13 c7 ff ff       	call   c0001ccb <clmt_clust>
c00055b8:	eb 0a                	jmp    c00055c4 <f_write+0x1c7>
c00055ba:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055bd:	89 d8                	mov    eax,ebx
c00055bf:	e8 a1 da ff ff       	call   c0003065 <create_chain>
c00055c4:	85 c0                	test   eax,eax
c00055c6:	75 09                	jne    c00055d1 <f_write+0x1d4>
c00055c8:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00055cc:	e9 dc 00 00 00       	jmp    c00056ad <f_write+0x2b0>
c00055d1:	83 f8 01             	cmp    eax,0x1
c00055d4:	75 0e                	jne    c00055e4 <f_write+0x1e7>
c00055d6:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00055da:	bd 02 00 00 00       	mov    ebp,0x2
c00055df:	e9 c9 00 00 00       	jmp    c00056ad <f_write+0x2b0>
c00055e4:	83 f8 ff             	cmp    eax,0xffffffff
c00055e7:	75 0e                	jne    c00055f7 <f_write+0x1fa>
c00055e9:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00055ed:	bd 01 00 00 00       	mov    ebp,0x1
c00055f2:	e9 b6 00 00 00       	jmp    c00056ad <f_write+0x2b0>
c00055f7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00055fa:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00055fe:	0f 85 90 fe ff ff    	jne    c0005494 <f_write+0x97>
c0005604:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005607:	e9 88 fe ff ff       	jmp    c0005494 <f_write+0x97>
c000560c:	83 ec 0c             	sub    esp,0xc
c000560f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005612:	6a 01                	push   0x1
c0005614:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005617:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000561a:	50                   	push   eax
c000561b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000561f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005623:	50                   	push   eax
c0005624:	e8 b3 c3 ff ff       	call   c00019dc <disk_write>
c0005629:	83 c4 20             	add    esp,0x20
c000562c:	85 c0                	test   eax,eax
c000562e:	75 b9                	jne    c00055e9 <f_write+0x1ec>
c0005630:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005634:	e9 65 fe ff ff       	jmp    c000549e <f_write+0xa1>
c0005639:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000563c:	75 05                	jne    c0005643 <f_write+0x246>
c000563e:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005641:	74 2e                	je     c0005671 <f_write+0x274>
c0005643:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005646:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005649:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000564c:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000564f:	73 20                	jae    c0005671 <f_write+0x274>
c0005651:	83 ec 0c             	sub    esp,0xc
c0005654:	8d 43 50             	lea    eax,[ebx+0x50]
c0005657:	6a 01                	push   0x1
c0005659:	57                   	push   edi
c000565a:	56                   	push   esi
c000565b:	50                   	push   eax
c000565c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005660:	50                   	push   eax
c0005661:	e8 60 c3 ff ff       	call   c00019c6 <disk_read>
c0005666:	83 c4 20             	add    esp,0x20
c0005669:	85 c0                	test   eax,eax
c000566b:	0f 85 78 ff ff ff    	jne    c00055e9 <f_write+0x1ec>
c0005671:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005674:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005677:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000567a:	ba 00 02 00 00       	mov    edx,0x200
c000567f:	25 ff 01 00 00       	and    eax,0x1ff
c0005684:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005688:	29 c2                	sub    edx,eax
c000568a:	39 d6                	cmp    esi,edx
c000568c:	76 02                	jbe    c0005690 <f_write+0x293>
c000568e:	89 d6                	mov    esi,edx
c0005690:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c0005694:	89 f1                	mov    ecx,esi
c0005696:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000569a:	e8 f1 c3 ff ff       	call   c0001a90 <mem_cpy>
c000569f:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00056a3:	e9 b1 fe ff ff       	jmp    c0005559 <f_write+0x15c>
c00056a8:	bd 07 00 00 00       	mov    ebp,0x7
c00056ad:	83 c4 2c             	add    esp,0x2c
c00056b0:	89 e8                	mov    eax,ebp
c00056b2:	5b                   	pop    ebx
c00056b3:	5e                   	pop    esi
c00056b4:	5f                   	pop    edi
c00056b5:	5d                   	pop    ebp
c00056b6:	c3                   	ret    

c00056b7 <f_sync>:
c00056b7:	56                   	push   esi
c00056b8:	53                   	push   ebx
c00056b9:	83 ec 64             	sub    esp,0x64
c00056bc:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00056c0:	8d 54 24 10          	lea    edx,[esp+0x10]
c00056c4:	89 d8                	mov    eax,ebx
c00056c6:	e8 49 ca ff ff       	call   c0002114 <validate>
c00056cb:	85 c0                	test   eax,eax
c00056cd:	0f 85 ba 01 00 00    	jne    c000588d <f_sync+0x1d6>
c00056d3:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00056d6:	f6 c2 40             	test   dl,0x40
c00056d9:	0f 84 ae 01 00 00    	je     c000588d <f_sync+0x1d6>
c00056df:	84 d2                	test   dl,dl
c00056e1:	79 33                	jns    c0005716 <f_sync+0x5f>
c00056e3:	83 ec 0c             	sub    esp,0xc
c00056e6:	8d 43 50             	lea    eax,[ebx+0x50]
c00056e9:	6a 01                	push   0x1
c00056eb:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00056ee:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00056f1:	50                   	push   eax
c00056f2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00056fa:	50                   	push   eax
c00056fb:	e8 dc c2 ff ff       	call   c00019dc <disk_write>
c0005700:	83 c4 20             	add    esp,0x20
c0005703:	89 c2                	mov    edx,eax
c0005705:	b8 01 00 00 00       	mov    eax,0x1
c000570a:	85 d2                	test   edx,edx
c000570c:	0f 85 7b 01 00 00    	jne    c000588d <f_sync+0x1d6>
c0005712:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000571a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000571d:	0f 85 11 01 00 00    	jne    c0005834 <f_sync+0x17d>
c0005723:	89 d8                	mov    eax,ebx
c0005725:	e8 13 d6 ff ff       	call   c0002d3d <fill_first_frag>
c000572a:	85 c0                	test   eax,eax
c000572c:	0f 85 5b 01 00 00    	jne    c000588d <f_sync+0x1d6>
c0005732:	83 c9 ff             	or     ecx,0xffffffff
c0005735:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005738:	89 d8                	mov    eax,ebx
c000573a:	e8 c9 d5 ff ff       	call   c0002d08 <fill_last_frag>
c000573f:	85 c0                	test   eax,eax
c0005741:	0f 85 46 01 00 00    	jne    c000588d <f_sync+0x1d6>
c0005747:	83 ec 0c             	sub    esp,0xc
c000574a:	68 60 04 00 00       	push   0x460
c000574f:	e8 f0 2a 00 00       	call   c0008244 <ff_memalloc>
c0005754:	83 c4 10             	add    esp,0x10
c0005757:	89 c6                	mov    esi,eax
c0005759:	b8 11 00 00 00       	mov    eax,0x11
c000575e:	85 f6                	test   esi,esi
c0005760:	0f 84 27 01 00 00    	je     c000588d <f_sync+0x1d6>
c0005766:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000576a:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005770:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005773:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005776:	89 da                	mov    edx,ebx
c0005778:	8d 44 24 14          	lea    eax,[esp+0x14]
c000577c:	e8 af df ff ff       	call   c0003730 <load_obj_xdir>
c0005781:	85 c0                	test   eax,eax
c0005783:	0f 85 95 00 00 00    	jne    c000581e <f_sync+0x167>
c0005789:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000578d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005790:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c0005794:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c0005797:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c000579a:	83 ca 01             	or     edx,0x1
c000579d:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00057a0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00057a3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057a6:	83 c0 34             	add    eax,0x34
c00057a9:	e8 d9 c2 ff ff       	call   c0001a87 <st_dword>
c00057ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057b2:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057b5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057b8:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057bb:	83 c0 38             	add    eax,0x38
c00057be:	e8 c7 c2 ff ff       	call   c0001a8a <st_qword>
c00057c3:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057ca:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057cd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057d0:	83 c0 28             	add    eax,0x28
c00057d3:	e8 b2 c2 ff ff       	call   c0001a8a <st_qword>
c00057d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057dc:	ba 00 00 21 50       	mov    edx,0x50210000
c00057e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057e4:	83 c0 0c             	add    eax,0xc
c00057e7:	e8 9b c2 ff ff       	call   c0001a87 <st_dword>
c00057ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057f0:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00057f3:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c00057f7:	31 d2                	xor    edx,edx
c00057f9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057fc:	83 c0 10             	add    eax,0x10
c00057ff:	e8 83 c2 ff ff       	call   c0001a87 <st_dword>
c0005804:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005808:	e8 62 e1 ff ff       	call   c000396f <store_xdir>
c000580d:	85 c0                	test   eax,eax
c000580f:	75 0d                	jne    c000581e <f_sync+0x167>
c0005811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005815:	e8 00 eb ff ff       	call   c000431a <sync_fs>
c000581a:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000581e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005822:	83 ec 0c             	sub    esp,0xc
c0005825:	56                   	push   esi
c0005826:	e8 2f 2a 00 00       	call   c000825a <ff_memfree>
c000582b:	83 c4 10             	add    esp,0x10
c000582e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005832:	eb 59                	jmp    c000588d <f_sync+0x1d6>
c0005834:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005837:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c000583a:	e8 b0 c9 ff ff       	call   c00021ef <move_window>
c000583f:	85 c0                	test   eax,eax
c0005841:	75 4a                	jne    c000588d <f_sync+0x1d6>
c0005843:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005846:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c000584a:	89 f2                	mov    edx,esi
c000584c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000584f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005851:	e8 5f f3 ff ff       	call   c0004bb5 <st_clust.isra.1>
c0005856:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005859:	8d 46 1c             	lea    eax,[esi+0x1c]
c000585c:	e8 26 c2 ff ff       	call   c0001a87 <st_dword>
c0005861:	8d 46 16             	lea    eax,[esi+0x16]
c0005864:	ba 00 00 21 50       	mov    edx,0x50210000
c0005869:	e8 19 c2 ff ff       	call   c0001a87 <st_dword>
c000586e:	8d 46 12             	lea    eax,[esi+0x12]
c0005871:	31 d2                	xor    edx,edx
c0005873:	e8 0b c2 ff ff       	call   c0001a83 <st_word>
c0005878:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000587c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005884:	e8 91 ea ff ff       	call   c000431a <sync_fs>
c0005889:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000588d:	83 c4 64             	add    esp,0x64
c0005890:	5b                   	pop    ebx
c0005891:	5e                   	pop    esi
c0005892:	c3                   	ret    

c0005893 <f_close>:
c0005893:	53                   	push   ebx
c0005894:	83 ec 24             	sub    esp,0x24
c0005897:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000589b:	53                   	push   ebx
c000589c:	e8 16 fe ff ff       	call   c00056b7 <f_sync>
c00058a1:	83 c4 10             	add    esp,0x10
c00058a4:	85 c0                	test   eax,eax
c00058a6:	75 15                	jne    c00058bd <f_close+0x2a>
c00058a8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00058ac:	89 d8                	mov    eax,ebx
c00058ae:	e8 61 c8 ff ff       	call   c0002114 <validate>
c00058b3:	85 c0                	test   eax,eax
c00058b5:	75 06                	jne    c00058bd <f_close+0x2a>
c00058b7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00058bd:	83 c4 18             	add    esp,0x18
c00058c0:	5b                   	pop    ebx
c00058c1:	c3                   	ret    

c00058c2 <f_lseek>:
c00058c2:	55                   	push   ebp
c00058c3:	57                   	push   edi
c00058c4:	56                   	push   esi
c00058c5:	53                   	push   ebx
c00058c6:	83 ec 3c             	sub    esp,0x3c
c00058c9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00058cd:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00058d1:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00058d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00058d8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00058dc:	89 d8                	mov    eax,ebx
c00058de:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00058e2:	e8 2d c8 ff ff       	call   c0002114 <validate>
c00058e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00058eb:	85 c0                	test   eax,eax
c00058ed:	0f 85 7a 04 00 00    	jne    c0005d6d <f_lseek+0x4ab>
c00058f3:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c00058f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00058fb:	85 c0                	test   eax,eax
c00058fd:	0f 85 6a 04 00 00    	jne    c0005d6d <f_lseek+0x4ab>
c0005903:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005907:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000590a:	74 0c                	je     c0005918 <f_lseek+0x56>
c000590c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000590f:	85 c0                	test   eax,eax
c0005911:	75 1f                	jne    c0005932 <f_lseek+0x70>
c0005913:	e9 b5 01 00 00       	jmp    c0005acd <f_lseek+0x20b>
c0005918:	83 c9 ff             	or     ecx,0xffffffff
c000591b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000591e:	89 d8                	mov    eax,ebx
c0005920:	e8 e3 d3 ff ff       	call   c0002d08 <fill_last_frag>
c0005925:	85 c0                	test   eax,eax
c0005927:	74 e3                	je     c000590c <f_lseek+0x4a>
c0005929:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000592d:	e9 3b 04 00 00       	jmp    c0005d6d <f_lseek+0x4ab>
c0005932:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005937:	0f 85 ac 00 00 00    	jne    c00059e9 <f_lseek+0x127>
c000593d:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005941:	0f 85 a2 00 00 00    	jne    c00059e9 <f_lseek+0x127>
c0005947:	8d 78 04             	lea    edi,[eax+0x4]
c000594a:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c000594d:	8b 00                	mov    eax,DWORD PTR [eax]
c000594f:	be 02 00 00 00       	mov    esi,0x2
c0005954:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005958:	85 ed                	test   ebp,ebp
c000595a:	74 73                	je     c00059cf <f_lseek+0x10d>
c000595c:	89 e9                	mov    ecx,ebp
c000595e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005965:	ff 04 24             	inc    DWORD PTR [esp]
c0005968:	89 ca                	mov    edx,ecx
c000596a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000596e:	89 d8                	mov    eax,ebx
c0005970:	e8 02 d4 ff ff       	call   c0002d77 <get_fat>
c0005975:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005979:	83 f8 01             	cmp    eax,0x1
c000597c:	77 11                	ja     c000598f <f_lseek+0xcd>
c000597e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005982:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c000598a:	e9 de 03 00 00       	jmp    c0005d6d <f_lseek+0x4ab>
c000598f:	83 f8 ff             	cmp    eax,0xffffffff
c0005992:	75 11                	jne    c00059a5 <f_lseek+0xe3>
c0005994:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005998:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c00059a0:	e9 c8 03 00 00       	jmp    c0005d6d <f_lseek+0x4ab>
c00059a5:	8d 51 01             	lea    edx,[ecx+0x1]
c00059a8:	89 c1                	mov    ecx,eax
c00059aa:	39 c2                	cmp    edx,eax
c00059ac:	74 b7                	je     c0005965 <f_lseek+0xa3>
c00059ae:	83 c6 02             	add    esi,0x2
c00059b1:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c00059b5:	72 0b                	jb     c00059c2 <f_lseek+0x100>
c00059b7:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00059ba:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c00059bd:	89 0f                	mov    DWORD PTR [edi],ecx
c00059bf:	83 c7 08             	add    edi,0x8
c00059c2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00059c6:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c00059c9:	76 04                	jbe    c00059cf <f_lseek+0x10d>
c00059cb:	89 c5                	mov    ebp,eax
c00059cd:	eb 8d                	jmp    c000595c <f_lseek+0x9a>
c00059cf:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00059d2:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00059d6:	89 30                	mov    DWORD PTR [eax],esi
c00059d8:	0f 87 87 03 00 00    	ja     c0005d65 <f_lseek+0x4a3>
c00059de:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c00059e4:	e9 84 03 00 00       	jmp    c0005d6d <f_lseek+0x4ab>
c00059e9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00059ec:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00059ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00059f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00059f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00059fb:	39 04 24             	cmp    DWORD PTR [esp],eax
c00059fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005a02:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005a06:	73 0f                	jae    c0005a17 <f_lseek+0x155>
c0005a08:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005a0b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005a0f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a13:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a17:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a1b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005a1f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005a22:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005a25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a29:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005a2d:	0f 84 3a 03 00 00    	je     c0005d6d <f_lseek+0x4ab>
c0005a33:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005a37:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005a3b:	83 c6 ff             	add    esi,0xffffffff
c0005a3e:	89 d8                	mov    eax,ebx
c0005a40:	83 d7 ff             	adc    edi,0xffffffff
c0005a43:	89 f2                	mov    edx,esi
c0005a45:	89 f9                	mov    ecx,edi
c0005a47:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005a4b:	89 34 24             	mov    DWORD PTR [esp],esi
c0005a4e:	e8 78 c2 ff ff       	call   c0001ccb <clmt_clust>
c0005a53:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a57:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005a5a:	89 c2                	mov    edx,eax
c0005a5c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005a60:	89 c8                	mov    eax,ecx
c0005a62:	e8 43 c2 ff ff       	call   c0001caa <clst2sect>
c0005a67:	89 d7                	mov    edi,edx
c0005a69:	09 c7                	or     edi,eax
c0005a6b:	0f 84 0d ff ff ff    	je     c000597e <f_lseek+0xbc>
c0005a71:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005a75:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005a7b:	0f 84 ec 02 00 00    	je     c0005d6d <f_lseek+0x4ab>
c0005a81:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a85:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005a89:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005a8c:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005a90:	0f ac fe 09          	shrd   esi,edi,0x9
c0005a94:	4d                   	dec    ebp
c0005a95:	31 ff                	xor    edi,edi
c0005a97:	21 ee                	and    esi,ebp
c0005a99:	01 c6                	add    esi,eax
c0005a9b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005a9e:	11 d7                	adc    edi,edx
c0005aa0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005aa3:	39 fa                	cmp    edx,edi
c0005aa5:	75 08                	jne    c0005aaf <f_lseek+0x1ed>
c0005aa7:	39 f0                	cmp    eax,esi
c0005aa9:	0f 84 be 02 00 00    	je     c0005d6d <f_lseek+0x4ab>
c0005aaf:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005ab2:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ab6:	0f 89 80 02 00 00    	jns    c0005d3c <f_lseek+0x47a>
c0005abc:	83 ec 0c             	sub    esp,0xc
c0005abf:	6a 01                	push   0x1
c0005ac1:	52                   	push   edx
c0005ac2:	50                   	push   eax
c0005ac3:	55                   	push   ebp
c0005ac4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005ac8:	e9 5a 02 00 00       	jmp    c0005d27 <f_lseek+0x465>
c0005acd:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ad1:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005ad4:	74 16                	je     c0005aec <f_lseek+0x22a>
c0005ad6:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005adb:	76 0f                	jbe    c0005aec <f_lseek+0x22a>
c0005add:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005ae4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005aec:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005aef:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005af2:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005af5:	89 c7                	mov    edi,eax
c0005af7:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005afb:	73 0d                	jae    c0005b0a <f_lseek+0x248>
c0005afd:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005b01:	75 07                	jne    c0005b0a <f_lseek+0x248>
c0005b03:	89 14 24             	mov    DWORD PTR [esp],edx
c0005b06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005b0a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005b0d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005b10:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005b14:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005b1b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005b22:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005b25:	75 09                	jne    c0005b30 <f_lseek+0x26e>
c0005b27:	31 f6                	xor    esi,esi
c0005b29:	31 ff                	xor    edi,edi
c0005b2b:	e9 af 01 00 00       	jmp    c0005cdf <f_lseek+0x41d>
c0005b30:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005b34:	89 d7                	mov    edi,edx
c0005b36:	c1 e1 09             	shl    ecx,0x9
c0005b39:	09 c7                	or     edi,eax
c0005b3b:	89 cd                	mov    ebp,ecx
c0005b3d:	74 6d                	je     c0005bac <f_lseek+0x2ea>
c0005b3f:	83 c0 ff             	add    eax,0xffffffff
c0005b42:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b46:	83 d2 ff             	adc    edx,0xffffffff
c0005b49:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b4c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b50:	83 c0 ff             	add    eax,0xffffffff
c0005b53:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b57:	83 d2 ff             	adc    edx,0xffffffff
c0005b5a:	31 ff                	xor    edi,edi
c0005b5c:	57                   	push   edi
c0005b5d:	51                   	push   ecx
c0005b5e:	52                   	push   edx
c0005b5f:	50                   	push   eax
c0005b60:	e8 37 f8 01 00       	call   c002539c <__udivdi3>
c0005b65:	83 c4 10             	add    esp,0x10
c0005b68:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b6c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005b70:	57                   	push   edi
c0005b71:	55                   	push   ebp
c0005b72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b7a:	e8 1d f8 01 00       	call   c002539c <__udivdi3>
c0005b7f:	83 c4 10             	add    esp,0x10
c0005b82:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005b86:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005b8a:	19 d1                	sbb    ecx,edx
c0005b8c:	72 1e                	jb     c0005bac <f_lseek+0x2ea>
c0005b8e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b92:	89 e9                	mov    ecx,ebp
c0005b94:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b97:	f7 d9                	neg    ecx
c0005b99:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005b9c:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005ba0:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005ba3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005ba6:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005baa:	eb 28                	jmp    c0005bd4 <f_lseek+0x312>
c0005bac:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005baf:	85 c0                	test   eax,eax
c0005bb1:	75 1e                	jne    c0005bd1 <f_lseek+0x30f>
c0005bb3:	31 d2                	xor    edx,edx
c0005bb5:	89 d8                	mov    eax,ebx
c0005bb7:	e8 a9 d4 ff ff       	call   c0003065 <create_chain>
c0005bbc:	83 f8 01             	cmp    eax,0x1
c0005bbf:	0f 84 b9 fd ff ff    	je     c000597e <f_lseek+0xbc>
c0005bc5:	83 f8 ff             	cmp    eax,0xffffffff
c0005bc8:	0f 84 c6 fd ff ff    	je     c0005994 <f_lseek+0xd2>
c0005bce:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005bd1:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005bd4:	85 c0                	test   eax,eax
c0005bd6:	0f 84 4b ff ff ff    	je     c0005b27 <f_lseek+0x265>
c0005bdc:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005be0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005be8:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005beb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005bef:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005bf2:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005bf5:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005bf9:	0f 83 9d 00 00 00    	jae    c0005c9c <f_lseek+0x3da>
c0005bff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005c03:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005c07:	29 34 24             	sub    DWORD PTR [esp],esi
c0005c0a:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005c0e:	01 f2                	add    edx,esi
c0005c10:	11 f9                	adc    ecx,edi
c0005c12:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005c16:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005c1a:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005c1d:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005c20:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005c23:	f6 c1 02             	test   cl,0x2
c0005c26:	74 35                	je     c0005c5d <f_lseek+0x39b>
c0005c28:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005c2c:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005c2f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005c32:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005c36:	73 16                	jae    c0005c4e <f_lseek+0x38c>
c0005c38:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c3c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c40:	88 ca                	mov    dl,cl
c0005c42:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005c45:	83 ca 40             	or     edx,0x40
c0005c48:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005c4b:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005c4e:	89 c2                	mov    edx,eax
c0005c50:	89 d8                	mov    eax,ebx
c0005c52:	e8 0e d4 ff ff       	call   c0003065 <create_chain>
c0005c57:	85 c0                	test   eax,eax
c0005c59:	75 0b                	jne    c0005c66 <f_lseek+0x3a4>
c0005c5b:	eb 30                	jmp    c0005c8d <f_lseek+0x3cb>
c0005c5d:	89 c2                	mov    edx,eax
c0005c5f:	89 d8                	mov    eax,ebx
c0005c61:	e8 11 d1 ff ff       	call   c0002d77 <get_fat>
c0005c66:	83 f8 ff             	cmp    eax,0xffffffff
c0005c69:	0f 84 25 fd ff ff    	je     c0005994 <f_lseek+0xd2>
c0005c6f:	83 f8 01             	cmp    eax,0x1
c0005c72:	0f 86 06 fd ff ff    	jbe    c000597e <f_lseek+0xbc>
c0005c78:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c7c:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c7f:	0f 86 f9 fc ff ff    	jbe    c000597e <f_lseek+0xbc>
c0005c85:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c88:	e9 5b ff ff ff       	jmp    c0005be8 <f_lseek+0x326>
c0005c8d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005c94:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c9c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005c9f:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ca3:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ca6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ca9:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005cac:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005cb2:	0f 84 6f fe ff ff    	je     c0005b27 <f_lseek+0x265>
c0005cb8:	89 c2                	mov    edx,eax
c0005cba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005cbe:	e8 e7 bf ff ff       	call   c0001caa <clst2sect>
c0005cc3:	89 d7                	mov    edi,edx
c0005cc5:	09 c7                	or     edi,eax
c0005cc7:	0f 84 b1 fc ff ff    	je     c000597e <f_lseek+0xbc>
c0005ccd:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cd1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cd4:	0f ac fe 09          	shrd   esi,edi,0x9
c0005cd8:	c1 ef 09             	shr    edi,0x9
c0005cdb:	01 c6                	add    esi,eax
c0005cdd:	11 d7                	adc    edi,edx
c0005cdf:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ce2:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005ce5:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005ce8:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005ceb:	19 d1                	sbb    ecx,edx
c0005ced:	73 0a                	jae    c0005cf9 <f_lseek+0x437>
c0005cef:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005cf2:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005cf5:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005cf9:	a9 ff 01 00 00       	test   eax,0x1ff
c0005cfe:	74 6d                	je     c0005d6d <f_lseek+0x4ab>
c0005d00:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005d03:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005d06:	39 fa                	cmp    edx,edi
c0005d08:	75 04                	jne    c0005d0e <f_lseek+0x44c>
c0005d0a:	39 f0                	cmp    eax,esi
c0005d0c:	74 5f                	je     c0005d6d <f_lseek+0x4ab>
c0005d0e:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d11:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d15:	79 25                	jns    c0005d3c <f_lseek+0x47a>
c0005d17:	83 ec 0c             	sub    esp,0xc
c0005d1a:	6a 01                	push   0x1
c0005d1c:	52                   	push   edx
c0005d1d:	50                   	push   eax
c0005d1e:	55                   	push   ebp
c0005d1f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d23:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d27:	50                   	push   eax
c0005d28:	e8 af bc ff ff       	call   c00019dc <disk_write>
c0005d2d:	83 c4 20             	add    esp,0x20
c0005d30:	85 c0                	test   eax,eax
c0005d32:	0f 85 5c fc ff ff    	jne    c0005994 <f_lseek+0xd2>
c0005d38:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005d3c:	83 ec 0c             	sub    esp,0xc
c0005d3f:	6a 01                	push   0x1
c0005d41:	57                   	push   edi
c0005d42:	56                   	push   esi
c0005d43:	55                   	push   ebp
c0005d44:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d48:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d4c:	50                   	push   eax
c0005d4d:	e8 74 bc ff ff       	call   c00019c6 <disk_read>
c0005d52:	83 c4 20             	add    esp,0x20
c0005d55:	85 c0                	test   eax,eax
c0005d57:	0f 85 37 fc ff ff    	jne    c0005994 <f_lseek+0xd2>
c0005d5d:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005d60:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005d63:	eb 08                	jmp    c0005d6d <f_lseek+0x4ab>
c0005d65:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005d6d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005d71:	83 c4 3c             	add    esp,0x3c
c0005d74:	5b                   	pop    ebx
c0005d75:	5e                   	pop    esi
c0005d76:	5f                   	pop    edi
c0005d77:	5d                   	pop    ebp
c0005d78:	c3                   	ret    

c0005d79 <f_opendir>:
c0005d79:	56                   	push   esi
c0005d7a:	b8 09 00 00 00       	mov    eax,0x9
c0005d7f:	53                   	push   ebx
c0005d80:	83 ec 24             	sub    esp,0x24
c0005d83:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005d87:	85 db                	test   ebx,ebx
c0005d89:	0f 84 e6 00 00 00    	je     c0005e75 <f_opendir+0xfc>
c0005d8f:	31 c9                	xor    ecx,ecx
c0005d91:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005d95:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005d99:	e8 03 c7 ff ff       	call   c00024a1 <mount_volume>
c0005d9e:	85 c0                	test   eax,eax
c0005da0:	0f 85 c9 00 00 00    	jne    c0005e6f <f_opendir+0xf6>
c0005da6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005daa:	83 ec 0c             	sub    esp,0xc
c0005dad:	89 03                	mov    DWORD PTR [ebx],eax
c0005daf:	68 60 04 00 00       	push   0x460
c0005db4:	e8 8b 24 00 00       	call   c0008244 <ff_memalloc>
c0005db9:	83 c4 10             	add    esp,0x10
c0005dbc:	89 c6                	mov    esi,eax
c0005dbe:	b8 11 00 00 00       	mov    eax,0x11
c0005dc3:	85 f6                	test   esi,esi
c0005dc5:	0f 84 aa 00 00 00    	je     c0005e75 <f_opendir+0xfc>
c0005dcb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005dcf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005dd5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005dd8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ddb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005ddf:	89 d8                	mov    eax,ebx
c0005de1:	e8 31 ee ff ff       	call   c0004c17 <follow_path>
c0005de6:	85 c0                	test   eax,eax
c0005de8:	75 61                	jne    c0005e4b <f_opendir+0xd2>
c0005dea:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005dee:	78 46                	js     c0005e36 <f_opendir+0xbd>
c0005df0:	b8 05 00 00 00       	mov    eax,0x5
c0005df5:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005df9:	74 50                	je     c0005e4b <f_opendir+0xd2>
c0005dfb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dff:	8a 01                	mov    al,BYTE PTR [ecx]
c0005e01:	3c 04                	cmp    al,0x4
c0005e03:	75 26                	jne    c0005e2b <f_opendir+0xb2>
c0005e05:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005e08:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005e0b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005e0e:	30 d2                	xor    dl,dl
c0005e10:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005e14:	09 c2                	or     edx,eax
c0005e16:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005e19:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005e1c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005e1f:	89 da                	mov    edx,ebx
c0005e21:	8d 41 10             	lea    eax,[ecx+0x10]
c0005e24:	e8 b4 ed ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c0005e29:	eb 0b                	jmp    c0005e36 <f_opendir+0xbd>
c0005e2b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005e2e:	e8 59 ed ff ff       	call   c0004b8c <ld_clust.isra.0>
c0005e33:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e36:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e3a:	31 d2                	xor    edx,edx
c0005e3c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005e40:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005e44:	89 d8                	mov    eax,ebx
c0005e46:	e8 22 d1 ff ff       	call   c0002f6d <dir_sdi>
c0005e4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e4f:	83 ec 0c             	sub    esp,0xc
c0005e52:	56                   	push   esi
c0005e53:	e8 02 24 00 00       	call   c000825a <ff_memfree>
c0005e58:	83 c4 10             	add    esp,0x10
c0005e5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e5f:	83 f8 04             	cmp    eax,0x4
c0005e62:	74 06                	je     c0005e6a <f_opendir+0xf1>
c0005e64:	85 c0                	test   eax,eax
c0005e66:	74 0d                	je     c0005e75 <f_opendir+0xfc>
c0005e68:	eb 05                	jmp    c0005e6f <f_opendir+0xf6>
c0005e6a:	b8 05 00 00 00       	mov    eax,0x5
c0005e6f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e75:	83 c4 24             	add    esp,0x24
c0005e78:	5b                   	pop    ebx
c0005e79:	5e                   	pop    esi
c0005e7a:	c3                   	ret    

c0005e7b <f_closedir>:
c0005e7b:	53                   	push   ebx
c0005e7c:	83 ec 18             	sub    esp,0x18
c0005e7f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005e83:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005e87:	89 d8                	mov    eax,ebx
c0005e89:	e8 86 c2 ff ff       	call   c0002114 <validate>
c0005e8e:	85 c0                	test   eax,eax
c0005e90:	75 06                	jne    c0005e98 <f_closedir+0x1d>
c0005e92:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e98:	83 c4 18             	add    esp,0x18
c0005e9b:	5b                   	pop    ebx
c0005e9c:	c3                   	ret    

c0005e9d <f_readdir>:
c0005e9d:	57                   	push   edi
c0005e9e:	56                   	push   esi
c0005e9f:	53                   	push   ebx
c0005ea0:	83 ec 20             	sub    esp,0x20
c0005ea3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ea7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005eab:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005eaf:	89 d8                	mov    eax,ebx
c0005eb1:	e8 5e c2 ff ff       	call   c0002114 <validate>
c0005eb6:	85 c0                	test   eax,eax
c0005eb8:	75 77                	jne    c0005f31 <f_readdir+0x94>
c0005eba:	85 ff                	test   edi,edi
c0005ebc:	75 0b                	jne    c0005ec9 <f_readdir+0x2c>
c0005ebe:	31 d2                	xor    edx,edx
c0005ec0:	89 d8                	mov    eax,ebx
c0005ec2:	e8 a6 d0 ff ff       	call   c0002f6d <dir_sdi>
c0005ec7:	eb 68                	jmp    c0005f31 <f_readdir+0x94>
c0005ec9:	83 ec 0c             	sub    esp,0xc
c0005ecc:	68 60 04 00 00       	push   0x460
c0005ed1:	e8 6e 23 00 00       	call   c0008244 <ff_memalloc>
c0005ed6:	83 c4 10             	add    esp,0x10
c0005ed9:	89 c6                	mov    esi,eax
c0005edb:	b8 11 00 00 00       	mov    eax,0x11
c0005ee0:	85 f6                	test   esi,esi
c0005ee2:	74 4d                	je     c0005f31 <f_readdir+0x94>
c0005ee4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ee8:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005eee:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005ef1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ef4:	31 d2                	xor    edx,edx
c0005ef6:	89 d8                	mov    eax,ebx
c0005ef8:	e8 80 d8 ff ff       	call   c000377d <dir_read>
c0005efd:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005f02:	75 19                	jne    c0005f1d <f_readdir+0x80>
c0005f04:	89 fa                	mov    edx,edi
c0005f06:	89 d8                	mov    eax,ebx
c0005f08:	e8 7e ea ff ff       	call   c000498b <get_fileinfo>
c0005f0d:	31 d2                	xor    edx,edx
c0005f0f:	89 d8                	mov    eax,ebx
c0005f11:	e8 af d5 ff ff       	call   c00034c5 <dir_next>
c0005f16:	83 f8 04             	cmp    eax,0x4
c0005f19:	75 02                	jne    c0005f1d <f_readdir+0x80>
c0005f1b:	31 c0                	xor    eax,eax
c0005f1d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f21:	83 ec 0c             	sub    esp,0xc
c0005f24:	56                   	push   esi
c0005f25:	e8 30 23 00 00       	call   c000825a <ff_memfree>
c0005f2a:	83 c4 10             	add    esp,0x10
c0005f2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f31:	83 c4 20             	add    esp,0x20
c0005f34:	5b                   	pop    ebx
c0005f35:	5e                   	pop    esi
c0005f36:	5f                   	pop    edi
c0005f37:	c3                   	ret    

c0005f38 <f_stat>:
c0005f38:	57                   	push   edi
c0005f39:	31 c9                	xor    ecx,ecx
c0005f3b:	56                   	push   esi
c0005f3c:	53                   	push   ebx
c0005f3d:	83 ec 50             	sub    esp,0x50
c0005f40:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005f44:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005f48:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005f4c:	e8 50 c5 ff ff       	call   c00024a1 <mount_volume>
c0005f51:	89 c3                	mov    ebx,eax
c0005f53:	85 c0                	test   eax,eax
c0005f55:	75 67                	jne    c0005fbe <f_stat+0x86>
c0005f57:	83 ec 0c             	sub    esp,0xc
c0005f5a:	bb 11 00 00 00       	mov    ebx,0x11
c0005f5f:	68 60 04 00 00       	push   0x460
c0005f64:	e8 db 22 00 00       	call   c0008244 <ff_memalloc>
c0005f69:	83 c4 10             	add    esp,0x10
c0005f6c:	89 c6                	mov    esi,eax
c0005f6e:	85 c0                	test   eax,eax
c0005f70:	74 4c                	je     c0005fbe <f_stat+0x86>
c0005f72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f76:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f7c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f7f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f82:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005f86:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f8a:	e8 88 ec ff ff       	call   c0004c17 <follow_path>
c0005f8f:	89 c3                	mov    ebx,eax
c0005f91:	85 c0                	test   eax,eax
c0005f93:	75 1d                	jne    c0005fb2 <f_stat+0x7a>
c0005f95:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005f9a:	78 11                	js     c0005fad <f_stat+0x75>
c0005f9c:	85 ff                	test   edi,edi
c0005f9e:	74 12                	je     c0005fb2 <f_stat+0x7a>
c0005fa0:	89 fa                	mov    edx,edi
c0005fa2:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005fa6:	e8 e0 e9 ff ff       	call   c000498b <get_fileinfo>
c0005fab:	eb 05                	jmp    c0005fb2 <f_stat+0x7a>
c0005fad:	bb 06 00 00 00       	mov    ebx,0x6
c0005fb2:	83 ec 0c             	sub    esp,0xc
c0005fb5:	56                   	push   esi
c0005fb6:	e8 9f 22 00 00       	call   c000825a <ff_memfree>
c0005fbb:	83 c4 10             	add    esp,0x10
c0005fbe:	83 c4 50             	add    esp,0x50
c0005fc1:	89 d8                	mov    eax,ebx
c0005fc3:	5b                   	pop    ebx
c0005fc4:	5e                   	pop    esi
c0005fc5:	5f                   	pop    edi
c0005fc6:	c3                   	ret    

c0005fc7 <f_getfree>:
c0005fc7:	55                   	push   ebp
c0005fc8:	31 c9                	xor    ecx,ecx
c0005fca:	57                   	push   edi
c0005fcb:	56                   	push   esi
c0005fcc:	53                   	push   ebx
c0005fcd:	83 ec 5c             	sub    esp,0x5c
c0005fd0:	8d 54 24 24          	lea    edx,[esp+0x24]
c0005fd4:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005fd8:	e8 c4 c4 ff ff       	call   c00024a1 <mount_volume>
c0005fdd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005fe1:	85 c0                	test   eax,eax
c0005fe3:	0f 85 9d 01 00 00    	jne    c0006186 <f_getfree+0x1bf>
c0005fe9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005fed:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0005ff1:	89 02                	mov    DWORD PTR [edx],eax
c0005ff3:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0005ff6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0005ff9:	8d 71 fe             	lea    esi,[ecx-0x2]
c0005ffc:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006000:	39 f2                	cmp    edx,esi
c0006002:	77 0b                	ja     c000600f <f_getfree+0x48>
c0006004:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006008:	89 10                	mov    DWORD PTR [eax],edx
c000600a:	e9 77 01 00 00       	jmp    c0006186 <f_getfree+0x1bf>
c000600f:	8a 10                	mov    dl,BYTE PTR [eax]
c0006011:	80 fa 01             	cmp    dl,0x1
c0006014:	75 3a                	jne    c0006050 <f_getfree+0x89>
c0006016:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000601a:	be 02 00 00 00       	mov    esi,0x2
c000601f:	31 db                	xor    ebx,ebx
c0006021:	89 f2                	mov    edx,esi
c0006023:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006027:	e8 4b cd ff ff       	call   c0002d77 <get_fat>
c000602c:	83 f8 ff             	cmp    eax,0xffffffff
c000602f:	0f 84 28 01 00 00    	je     c000615d <f_getfree+0x196>
c0006035:	83 f8 01             	cmp    eax,0x1
c0006038:	0f 84 29 01 00 00    	je     c0006167 <f_getfree+0x1a0>
c000603e:	83 d3 00             	adc    ebx,0x0
c0006041:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006045:	46                   	inc    esi
c0006046:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006049:	77 d6                	ja     c0006021 <f_getfree+0x5a>
c000604b:	e9 25 01 00 00       	jmp    c0006175 <f_getfree+0x1ae>
c0006050:	80 fa 04             	cmp    dl,0x4
c0006053:	0f 85 88 00 00 00    	jne    c00060e1 <f_getfree+0x11a>
c0006059:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c000605c:	31 ed                	xor    ebp,ebp
c000605e:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006061:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006065:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006069:	31 db                	xor    ebx,ebx
c000606b:	85 ed                	test   ebp,ebp
c000606d:	75 3f                	jne    c00060ae <f_getfree+0xe7>
c000606f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006073:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0006077:	83 c0 01             	add    eax,0x1
c000607a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000607e:	83 d2 00             	adc    edx,0x0
c0006081:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0006085:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006089:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000608d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006091:	e8 59 c1 ff ff       	call   c00021ef <move_window>
c0006096:	85 c0                	test   eax,eax
c0006098:	0f 85 d3 00 00 00    	jne    c0006171 <f_getfree+0x1aa>
c000609e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060a2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00060a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00060aa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00060ae:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060b2:	8d 4e f8             	lea    ecx,[esi-0x8]
c00060b5:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00060b9:	89 cf                	mov    edi,ecx
c00060bb:	85 f6                	test   esi,esi
c00060bd:	74 12                	je     c00060d1 <f_getfree+0x10a>
c00060bf:	88 c1                	mov    cl,al
c00060c1:	83 e1 01             	and    ecx,0x1
c00060c4:	80 f9 01             	cmp    cl,0x1
c00060c7:	83 d3 00             	adc    ebx,0x0
c00060ca:	d0 e8                	shr    al,1
c00060cc:	4e                   	dec    esi
c00060cd:	39 fe                	cmp    esi,edi
c00060cf:	75 ea                	jne    c00060bb <f_getfree+0xf4>
c00060d1:	45                   	inc    ebp
c00060d2:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00060d8:	85 f6                	test   esi,esi
c00060da:	75 8f                	jne    c000606b <f_getfree+0xa4>
c00060dc:	e9 94 00 00 00       	jmp    c0006175 <f_getfree+0x1ae>
c00060e1:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00060e4:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00060e7:	31 f6                	xor    esi,esi
c00060e9:	31 db                	xor    ebx,ebx
c00060eb:	85 f6                	test   esi,esi
c00060ed:	75 1b                	jne    c000610a <f_getfree+0x143>
c00060ef:	89 d7                	mov    edi,edx
c00060f1:	89 cd                	mov    ebp,ecx
c00060f3:	83 c7 01             	add    edi,0x1
c00060f6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060fa:	83 d5 00             	adc    ebp,0x0
c00060fd:	e8 ed c0 ff ff       	call   c00021ef <move_window>
c0006102:	85 c0                	test   eax,eax
c0006104:	75 6b                	jne    c0006171 <f_getfree+0x1aa>
c0006106:	89 fa                	mov    edx,edi
c0006108:	89 e9                	mov    ecx,ebp
c000610a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000610e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006112:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006116:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006119:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000611d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006121:	75 11                	jne    c0006134 <f_getfree+0x16d>
c0006123:	e8 e9 b8 ff ff       	call   c0001a11 <ld_word>
c0006128:	66 83 f8 01          	cmp    ax,0x1
c000612c:	83 d3 00             	adc    ebx,0x0
c000612f:	83 c6 02             	add    esi,0x2
c0006132:	eb 13                	jmp    c0006147 <f_getfree+0x180>
c0006134:	e8 e5 b8 ff ff       	call   c0001a1e <ld_dword>
c0006139:	25 ff ff ff 0f       	and    eax,0xfffffff
c000613e:	83 f8 01             	cmp    eax,0x1
c0006141:	83 d3 00             	adc    ebx,0x0
c0006144:	83 c6 04             	add    esi,0x4
c0006147:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000614d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006151:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006155:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c0006159:	75 90                	jne    c00060eb <f_getfree+0x124>
c000615b:	eb 18                	jmp    c0006175 <f_getfree+0x1ae>
c000615d:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0006165:	eb 0e                	jmp    c0006175 <f_getfree+0x1ae>
c0006167:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c000616f:	eb 04                	jmp    c0006175 <f_getfree+0x1ae>
c0006171:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006175:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006179:	89 18                	mov    DWORD PTR [eax],ebx
c000617b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000617f:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006182:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0006186:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000618a:	83 c4 5c             	add    esp,0x5c
c000618d:	5b                   	pop    ebx
c000618e:	5e                   	pop    esi
c000618f:	5f                   	pop    edi
c0006190:	5d                   	pop    ebp
c0006191:	c3                   	ret    

c0006192 <f_truncate>:
c0006192:	56                   	push   esi
c0006193:	53                   	push   ebx
c0006194:	83 ec 14             	sub    esp,0x14
c0006197:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000619b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000619f:	89 d8                	mov    eax,ebx
c00061a1:	e8 6e bf ff ff       	call   c0002114 <validate>
c00061a6:	89 c6                	mov    esi,eax
c00061a8:	85 c0                	test   eax,eax
c00061aa:	0f 85 d2 00 00 00    	jne    c0006282 <f_truncate+0xf0>
c00061b0:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00061b4:	85 f6                	test   esi,esi
c00061b6:	0f 85 c6 00 00 00    	jne    c0006282 <f_truncate+0xf0>
c00061bc:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00061c0:	0f 84 b7 00 00 00    	je     c000627d <f_truncate+0xeb>
c00061c6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00061c9:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00061cc:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00061cf:	89 d1                	mov    ecx,edx
c00061d1:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00061d4:	0f 83 a8 00 00 00    	jae    c0006282 <f_truncate+0xf0>
c00061da:	09 c2                	or     edx,eax
c00061dc:	75 15                	jne    c00061f3 <f_truncate+0x61>
c00061de:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00061e1:	31 c9                	xor    ecx,ecx
c00061e3:	89 d8                	mov    eax,ebx
c00061e5:	e8 7a d0 ff ff       	call   c0003264 <remove_chain>
c00061ea:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00061f1:	eb 35                	jmp    c0006228 <f_truncate+0x96>
c00061f3:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00061f6:	89 d8                	mov    eax,ebx
c00061f8:	e8 7a cb ff ff       	call   c0002d77 <get_fat>
c00061fd:	89 c2                	mov    edx,eax
c00061ff:	b8 01 00 00 00       	mov    eax,0x1
c0006204:	83 fa ff             	cmp    edx,0xffffffff
c0006207:	74 1f                	je     c0006228 <f_truncate+0x96>
c0006209:	b8 02 00 00 00       	mov    eax,0x2
c000620e:	83 fa 01             	cmp    edx,0x1
c0006211:	74 15                	je     c0006228 <f_truncate+0x96>
c0006213:	31 c0                	xor    eax,eax
c0006215:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006219:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000621c:	76 0a                	jbe    c0006228 <f_truncate+0x96>
c000621e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006221:	89 d8                	mov    eax,ebx
c0006223:	e8 3c d0 ff ff       	call   c0003264 <remove_chain>
c0006228:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000622b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000622e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006231:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006234:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006237:	83 ca 40             	or     edx,0x40
c000623a:	85 c0                	test   eax,eax
c000623c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000623f:	75 35                	jne    c0006276 <f_truncate+0xe4>
c0006241:	84 d2                	test   dl,dl
c0006243:	79 3d                	jns    c0006282 <f_truncate+0xf0>
c0006245:	83 ec 0c             	sub    esp,0xc
c0006248:	8d 43 50             	lea    eax,[ebx+0x50]
c000624b:	6a 01                	push   0x1
c000624d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006250:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006253:	50                   	push   eax
c0006254:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006258:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000625c:	50                   	push   eax
c000625d:	e8 7a b7 ff ff       	call   c00019dc <disk_write>
c0006262:	83 c4 20             	add    esp,0x20
c0006265:	85 c0                	test   eax,eax
c0006267:	75 08                	jne    c0006271 <f_truncate+0xdf>
c0006269:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000626d:	31 f6                	xor    esi,esi
c000626f:	eb 11                	jmp    c0006282 <f_truncate+0xf0>
c0006271:	b8 01 00 00 00       	mov    eax,0x1
c0006276:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c0006279:	89 c6                	mov    esi,eax
c000627b:	eb 05                	jmp    c0006282 <f_truncate+0xf0>
c000627d:	be 07 00 00 00       	mov    esi,0x7
c0006282:	89 f0                	mov    eax,esi
c0006284:	83 c4 14             	add    esp,0x14
c0006287:	5b                   	pop    ebx
c0006288:	5e                   	pop    esi
c0006289:	c3                   	ret    

c000628a <f_unlink>:
c000628a:	56                   	push   esi
c000628b:	b9 02 00 00 00       	mov    ecx,0x2
c0006290:	53                   	push   ebx
c0006291:	81 ec e4 00 00 00    	sub    esp,0xe4
c0006297:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000629b:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00062a2:	e8 fa c1 ff ff       	call   c00024a1 <mount_volume>
c00062a7:	85 c0                	test   eax,eax
c00062a9:	0f 85 55 01 00 00    	jne    c0006404 <f_unlink+0x17a>
c00062af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062b3:	83 ec 0c             	sub    esp,0xc
c00062b6:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00062ba:	68 60 04 00 00       	push   0x460
c00062bf:	e8 80 1f 00 00       	call   c0008244 <ff_memalloc>
c00062c4:	83 c4 10             	add    esp,0x10
c00062c7:	89 c3                	mov    ebx,eax
c00062c9:	b8 11 00 00 00       	mov    eax,0x11
c00062ce:	85 db                	test   ebx,ebx
c00062d0:	0f 84 2e 01 00 00    	je     c0006404 <f_unlink+0x17a>
c00062d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062da:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00062e0:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00062e3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00062e6:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c00062ed:	8d 44 24 48          	lea    eax,[esp+0x48]
c00062f1:	e8 21 e9 ff ff       	call   c0004c17 <follow_path>
c00062f6:	85 c0                	test   eax,eax
c00062f8:	0f 85 f2 00 00 00    	jne    c00063f0 <f_unlink+0x166>
c00062fe:	b8 06 00 00 00       	mov    eax,0x6
c0006303:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000630b:	0f 88 df 00 00 00    	js     c00063f0 <f_unlink+0x166>
c0006311:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006316:	74 0a                	je     c0006322 <f_unlink+0x98>
c0006318:	b8 07 00 00 00       	mov    eax,0x7
c000631d:	e9 ce 00 00 00       	jmp    c00063f0 <f_unlink+0x166>
c0006322:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006326:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000632a:	8a 02                	mov    al,BYTE PTR [edx]
c000632c:	3c 04                	cmp    al,0x4
c000632e:	75 12                	jne    c0006342 <f_unlink+0xb8>
c0006330:	8d 42 10             	lea    eax,[edx+0x10]
c0006333:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006337:	e8 a1 e8 ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c000633c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006340:	eb 0e                	jmp    c0006350 <f_unlink+0xc6>
c0006342:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006349:	e8 3e e8 ff ff       	call   c0004b8c <ld_clust.isra.0>
c000634e:	89 c6                	mov    esi,eax
c0006350:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c0006355:	75 12                	jne    c0006369 <f_unlink+0xdf>
c0006357:	8d 44 24 48          	lea    eax,[esp+0x48]
c000635b:	e8 94 d6 ff ff       	call   c00039f4 <dir_remove>
c0006360:	85 c0                	test   eax,eax
c0006362:	74 6c                	je     c00063d0 <f_unlink+0x146>
c0006364:	e9 87 00 00 00       	jmp    c00063f0 <f_unlink+0x166>
c0006369:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000636d:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c0006374:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c000637b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000637e:	75 21                	jne    c00063a1 <f_unlink+0x117>
c0006380:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0006384:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0006388:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c000638f:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c0006396:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c000639a:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00063a1:	31 d2                	xor    edx,edx
c00063a3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063aa:	e8 be cb ff ff       	call   c0002f6d <dir_sdi>
c00063af:	85 c0                	test   eax,eax
c00063b1:	75 3d                	jne    c00063f0 <f_unlink+0x166>
c00063b3:	31 d2                	xor    edx,edx
c00063b5:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063bc:	e8 bc d3 ff ff       	call   c000377d <dir_read>
c00063c1:	85 c0                	test   eax,eax
c00063c3:	0f 84 4f ff ff ff    	je     c0006318 <f_unlink+0x8e>
c00063c9:	83 f8 04             	cmp    eax,0x4
c00063cc:	75 22                	jne    c00063f0 <f_unlink+0x166>
c00063ce:	eb 87                	jmp    c0006357 <f_unlink+0xcd>
c00063d0:	85 f6                	test   esi,esi
c00063d2:	75 0b                	jne    c00063df <f_unlink+0x155>
c00063d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063d8:	e8 3d df ff ff       	call   c000431a <sync_fs>
c00063dd:	eb 11                	jmp    c00063f0 <f_unlink+0x166>
c00063df:	31 c9                	xor    ecx,ecx
c00063e1:	89 f2                	mov    edx,esi
c00063e3:	8d 44 24 20          	lea    eax,[esp+0x20]
c00063e7:	e8 78 ce ff ff       	call   c0003264 <remove_chain>
c00063ec:	85 c0                	test   eax,eax
c00063ee:	74 e4                	je     c00063d4 <f_unlink+0x14a>
c00063f0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063f4:	83 ec 0c             	sub    esp,0xc
c00063f7:	53                   	push   ebx
c00063f8:	e8 5d 1e 00 00       	call   c000825a <ff_memfree>
c00063fd:	83 c4 10             	add    esp,0x10
c0006400:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006404:	81 c4 e4 00 00 00    	add    esp,0xe4
c000640a:	5b                   	pop    ebx
c000640b:	5e                   	pop    esi
c000640c:	c3                   	ret    

c000640d <f_mkdir>:
c000640d:	57                   	push   edi
c000640e:	b9 02 00 00 00       	mov    ecx,0x2
c0006413:	56                   	push   esi
c0006414:	53                   	push   ebx
c0006415:	83 c4 80             	add    esp,0xffffff80
c0006418:	8d 54 24 08          	lea    edx,[esp+0x8]
c000641c:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006423:	e8 79 c0 ff ff       	call   c00024a1 <mount_volume>
c0006428:	89 c3                	mov    ebx,eax
c000642a:	85 c0                	test   eax,eax
c000642c:	0f 85 fe 01 00 00    	jne    c0006630 <f_mkdir+0x223>
c0006432:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006436:	bb 11 00 00 00       	mov    ebx,0x11
c000643b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000643f:	83 ec 0c             	sub    esp,0xc
c0006442:	68 60 04 00 00       	push   0x460
c0006447:	e8 f8 1d 00 00       	call   c0008244 <ff_memalloc>
c000644c:	83 c4 10             	add    esp,0x10
c000644f:	89 c7                	mov    edi,eax
c0006451:	85 c0                	test   eax,eax
c0006453:	0f 84 d7 01 00 00    	je     c0006630 <f_mkdir+0x223>
c0006459:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000645d:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006463:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0006466:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006469:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006470:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006474:	e8 9e e7 ff ff       	call   c0004c17 <follow_path>
c0006479:	89 c3                	mov    ebx,eax
c000647b:	85 c0                	test   eax,eax
c000647d:	74 3e                	je     c00064bd <f_mkdir+0xb0>
c000647f:	83 f8 04             	cmp    eax,0x4
c0006482:	75 3e                	jne    c00064c2 <f_mkdir+0xb5>
c0006484:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006488:	31 d2                	xor    edx,edx
c000648a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000648e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006492:	e8 ce cb ff ff       	call   c0003065 <create_chain>
c0006497:	89 c6                	mov    esi,eax
c0006499:	85 c0                	test   eax,eax
c000649b:	74 0c                	je     c00064a9 <f_mkdir+0x9c>
c000649d:	bb 02 00 00 00       	mov    ebx,0x2
c00064a2:	83 f8 01             	cmp    eax,0x1
c00064a5:	74 07                	je     c00064ae <f_mkdir+0xa1>
c00064a7:	eb 2a                	jmp    c00064d3 <f_mkdir+0xc6>
c00064a9:	bb 07 00 00 00       	mov    ebx,0x7
c00064ae:	31 c9                	xor    ecx,ecx
c00064b0:	89 f2                	mov    edx,esi
c00064b2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064b6:	e8 a9 cd ff ff       	call   c0003264 <remove_chain>
c00064bb:	eb 05                	jmp    c00064c2 <f_mkdir+0xb5>
c00064bd:	bb 08 00 00 00       	mov    ebx,0x8
c00064c2:	83 ec 0c             	sub    esp,0xc
c00064c5:	57                   	push   edi
c00064c6:	e8 8f 1d 00 00       	call   c000825a <ff_memfree>
c00064cb:	83 c4 10             	add    esp,0x10
c00064ce:	e9 5d 01 00 00       	jmp    c0006630 <f_mkdir+0x223>
c00064d3:	bb 01 00 00 00       	mov    ebx,0x1
c00064d8:	83 f8 ff             	cmp    eax,0xffffffff
c00064db:	74 d1                	je     c00064ae <f_mkdir+0xa1>
c00064dd:	89 f2                	mov    edx,esi
c00064df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064e3:	e8 c4 ce ff ff       	call   c00033ac <dir_clear>
c00064e8:	89 c3                	mov    ebx,eax
c00064ea:	85 c0                	test   eax,eax
c00064ec:	75 c0                	jne    c00064ae <f_mkdir+0xa1>
c00064ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064f2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064f5:	74 69                	je     c0006560 <f_mkdir+0x153>
c00064f7:	b9 0b 00 00 00       	mov    ecx,0xb
c00064fc:	83 c0 54             	add    eax,0x54
c00064ff:	ba 20 00 00 00       	mov    edx,0x20
c0006504:	e8 9c b5 ff ff       	call   c0001aa5 <mem_set>
c0006509:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000650d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006512:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006516:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000651a:	83 c0 6a             	add    eax,0x6a
c000651d:	e8 65 b5 ff ff       	call   c0001a87 <st_dword>
c0006522:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006526:	89 f1                	mov    ecx,esi
c0006528:	8d 50 54             	lea    edx,[eax+0x54]
c000652b:	e8 85 e6 ff ff       	call   c0004bb5 <st_clust.isra.1>
c0006530:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006534:	b9 20 00 00 00       	mov    ecx,0x20
c0006539:	8d 50 54             	lea    edx,[eax+0x54]
c000653c:	83 c0 74             	add    eax,0x74
c000653f:	e8 4c b5 ff ff       	call   c0001a90 <mem_cpy>
c0006544:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006548:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000654c:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006550:	8d 50 74             	lea    edx,[eax+0x74]
c0006553:	e8 5d e6 ff ff       	call   c0004bb5 <st_clust.isra.1>
c0006558:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000655c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006560:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006564:	e8 2f db ff ff       	call   c0004098 <dir_register>
c0006569:	89 c3                	mov    ebx,eax
c000656b:	85 c0                	test   eax,eax
c000656d:	0f 85 3b ff ff ff    	jne    c00064ae <f_mkdir+0xa1>
c0006573:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006577:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000657a:	75 74                	jne    c00065f0 <f_mkdir+0x1e3>
c000657c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000657f:	ba 00 00 21 50       	mov    edx,0x50210000
c0006584:	83 c0 0c             	add    eax,0xc
c0006587:	e8 fb b4 ff ff       	call   c0001a87 <st_dword>
c000658c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006590:	89 f2                	mov    edx,esi
c0006592:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006595:	83 c0 34             	add    eax,0x34
c0006598:	e8 ea b4 ff ff       	call   c0001a87 <st_dword>
c000659d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a1:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065a5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065a8:	c1 e2 09             	shl    edx,0x9
c00065ab:	83 c0 38             	add    eax,0x38
c00065ae:	e8 d4 b4 ff ff       	call   c0001a87 <st_dword>
c00065b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065b7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065be:	c1 e2 09             	shl    edx,0x9
c00065c1:	83 c0 28             	add    eax,0x28
c00065c4:	e8 be b4 ff ff       	call   c0001a87 <st_dword>
c00065c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00065d0:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00065d4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065d7:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00065db:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065df:	e8 8b d3 ff ff       	call   c000396f <store_xdir>
c00065e4:	89 c3                	mov    ebx,eax
c00065e6:	85 c0                	test   eax,eax
c00065e8:	0f 85 d4 fe ff ff    	jne    c00064c2 <f_mkdir+0xb5>
c00065ee:	eb 30                	jmp    c0006620 <f_mkdir+0x213>
c00065f0:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00065f4:	ba 00 00 21 50       	mov    edx,0x50210000
c00065f9:	83 c0 16             	add    eax,0x16
c00065fc:	e8 86 b4 ff ff       	call   c0001a87 <st_dword>
c0006601:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006605:	89 f1                	mov    ecx,esi
c0006607:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000660b:	e8 a5 e5 ff ff       	call   c0004bb5 <st_clust.isra.1>
c0006610:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006614:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006618:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000661c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006620:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006624:	e8 f1 dc ff ff       	call   c000431a <sync_fs>
c0006629:	89 c3                	mov    ebx,eax
c000662b:	e9 92 fe ff ff       	jmp    c00064c2 <f_mkdir+0xb5>
c0006630:	83 ec 80             	sub    esp,0xffffff80
c0006633:	89 d8                	mov    eax,ebx
c0006635:	5b                   	pop    ebx
c0006636:	5e                   	pop    esi
c0006637:	5f                   	pop    edi
c0006638:	c3                   	ret    

c0006639 <f_rename>:
c0006639:	55                   	push   ebp
c000663a:	57                   	push   edi
c000663b:	56                   	push   esi
c000663c:	53                   	push   ebx
c000663d:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006643:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000664a:	e8 a4 b9 ff ff       	call   c0001ff3 <get_ldnumber>
c000664f:	b9 02 00 00 00       	mov    ecx,0x2
c0006654:	8d 54 24 14          	lea    edx,[esp+0x14]
c0006658:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c000665f:	e8 3d be ff ff       	call   c00024a1 <mount_volume>
c0006664:	85 c0                	test   eax,eax
c0006666:	0f 85 b5 02 00 00    	jne    c0006921 <f_rename+0x2e8>
c000666c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006670:	83 ec 0c             	sub    esp,0xc
c0006673:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0006677:	68 60 04 00 00       	push   0x460
c000667c:	e8 c3 1b 00 00       	call   c0008244 <ff_memalloc>
c0006681:	83 c4 10             	add    esp,0x10
c0006684:	89 c3                	mov    ebx,eax
c0006686:	b8 11 00 00 00       	mov    eax,0x11
c000668b:	85 db                	test   ebx,ebx
c000668d:	0f 84 8e 02 00 00    	je     c0006921 <f_rename+0x2e8>
c0006693:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006697:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000669d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00066a0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066a3:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00066aa:	8d 44 24 58          	lea    eax,[esp+0x58]
c00066ae:	e8 64 e5 ff ff       	call   c0004c17 <follow_path>
c00066b3:	85 c0                	test   eax,eax
c00066b5:	0f 85 52 02 00 00    	jne    c000690d <f_rename+0x2d4>
c00066bb:	b8 06 00 00 00       	mov    eax,0x6
c00066c0:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00066c8:	0f 85 3f 02 00 00    	jne    c000690d <f_rename+0x2d4>
c00066ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066d2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066d5:	0f 85 05 01 00 00    	jne    c00067e0 <f_rename+0x1a7>
c00066db:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00066de:	b9 40 00 00 00       	mov    ecx,0x40
c00066e3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00066e7:	e8 a4 b3 ff ff       	call   c0001a90 <mem_cpy>
c00066ec:	b9 4c 00 00 00       	mov    ecx,0x4c
c00066f1:	8d 54 24 58          	lea    edx,[esp+0x58]
c00066f5:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066fc:	e8 8f b3 ff ff       	call   c0001a90 <mem_cpy>
c0006701:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006708:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000670f:	e8 03 e5 ff ff       	call   c0004c17 <follow_path>
c0006714:	85 c0                	test   eax,eax
c0006716:	75 29                	jne    c0006741 <f_rename+0x108>
c0006718:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000671c:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006723:	74 0a                	je     c000672f <f_rename+0xf6>
c0006725:	b8 08 00 00 00       	mov    eax,0x8
c000672a:	e9 de 01 00 00       	jmp    c000690d <f_rename+0x2d4>
c000672f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006736:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000673d:	75 e6                	jne    c0006725 <f_rename+0xec>
c000673f:	eb 09                	jmp    c000674a <f_rename+0x111>
c0006741:	83 f8 04             	cmp    eax,0x4
c0006744:	0f 85 c3 01 00 00    	jne    c000690d <f_rename+0x2d4>
c000674a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006751:	e8 42 d9 ff ff       	call   c0004098 <dir_register>
c0006756:	85 c0                	test   eax,eax
c0006758:	0f 85 af 01 00 00    	jne    c000690d <f_rename+0x2d4>
c000675e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006762:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c0006765:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0006768:	89 c5                	mov    ebp,eax
c000676a:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c000676d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006771:	8d 46 24             	lea    eax,[esi+0x24]
c0006774:	e8 98 b2 ff ff       	call   c0001a11 <ld_word>
c0006779:	b9 40 00 00 00       	mov    ecx,0x40
c000677e:	89 c7                	mov    edi,eax
c0006780:	8d 54 24 18          	lea    edx,[esp+0x18]
c0006784:	89 f0                	mov    eax,esi
c0006786:	e8 05 b3 ff ff       	call   c0001a90 <mem_cpy>
c000678b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000678f:	89 e9                	mov    ecx,ebp
c0006791:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006794:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c0006797:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c000679b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000679f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067a2:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00067a5:	0f b7 d7             	movzx  edx,di
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 24             	add    eax,0x24
c00067ae:	e8 d0 b2 ff ff       	call   c0001a83 <st_word>
c00067b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067b7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067ba:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00067bd:	a8 10                	test   al,0x10
c00067bf:	75 06                	jne    c00067c7 <f_rename+0x18e>
c00067c1:	83 c8 20             	or     eax,0x20
c00067c4:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00067c7:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067ce:	e8 9c d1 ff ff       	call   c000396f <store_xdir>
c00067d3:	85 c0                	test   eax,eax
c00067d5:	0f 84 1c 01 00 00    	je     c00068f7 <f_rename+0x2be>
c00067db:	e9 2d 01 00 00       	jmp    c000690d <f_rename+0x2d4>
c00067e0:	b9 20 00 00 00       	mov    ecx,0x20
c00067e5:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00067ec:	8d 44 24 18          	lea    eax,[esp+0x18]
c00067f0:	e8 9b b2 ff ff       	call   c0001a90 <mem_cpy>
c00067f5:	b9 4c 00 00 00       	mov    ecx,0x4c
c00067fa:	8d 54 24 58          	lea    edx,[esp+0x58]
c00067fe:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006805:	e8 86 b2 ff ff       	call   c0001a90 <mem_cpy>
c000680a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006811:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006818:	e8 fa e3 ff ff       	call   c0004c17 <follow_path>
c000681d:	85 c0                	test   eax,eax
c000681f:	75 27                	jne    c0006848 <f_rename+0x20f>
c0006821:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006825:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000682c:	0f 85 f3 fe ff ff    	jne    c0006725 <f_rename+0xec>
c0006832:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006839:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006840:	0f 85 df fe ff ff    	jne    c0006725 <f_rename+0xec>
c0006846:	eb 09                	jmp    c0006851 <f_rename+0x218>
c0006848:	83 f8 04             	cmp    eax,0x4
c000684b:	0f 85 bc 00 00 00    	jne    c000690d <f_rename+0x2d4>
c0006851:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006858:	e8 3b d8 ff ff       	call   c0004098 <dir_register>
c000685d:	85 c0                	test   eax,eax
c000685f:	0f 85 a8 00 00 00    	jne    c000690d <f_rename+0x2d4>
c0006865:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c000686c:	b9 13 00 00 00       	mov    ecx,0x13
c0006871:	8d 46 0d             	lea    eax,[esi+0xd]
c0006874:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006878:	e8 13 b2 ff ff       	call   c0001a90 <mem_cpy>
c000687d:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006881:	a8 10                	test   al,0x10
c0006883:	75 03                	jne    c0006888 <f_rename+0x24f>
c0006885:	83 c8 20             	or     eax,0x20
c0006888:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c000688b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000688f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006893:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006897:	74 5e                	je     c00068f7 <f_rename+0x2be>
c0006899:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00068a0:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00068a4:	74 51                	je     c00068f7 <f_rename+0x2be>
c00068a6:	89 f2                	mov    edx,esi
c00068a8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00068ac:	8a 07                	mov    al,BYTE PTR [edi]
c00068ae:	e8 d9 e2 ff ff       	call   c0004b8c <ld_clust.isra.0>
c00068b3:	89 c2                	mov    edx,eax
c00068b5:	89 f8                	mov    eax,edi
c00068b7:	e8 ee b3 ff ff       	call   c0001caa <clst2sect>
c00068bc:	89 c6                	mov    esi,eax
c00068be:	89 d1                	mov    ecx,edx
c00068c0:	b8 02 00 00 00       	mov    eax,0x2
c00068c5:	09 f2                	or     edx,esi
c00068c7:	74 44                	je     c000690d <f_rename+0x2d4>
c00068c9:	89 f2                	mov    edx,esi
c00068cb:	89 f8                	mov    eax,edi
c00068cd:	e8 1d b9 ff ff       	call   c00021ef <move_window>
c00068d2:	85 c0                	test   eax,eax
c00068d4:	75 37                	jne    c000690d <f_rename+0x2d4>
c00068d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068da:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c00068de:	75 17                	jne    c00068f7 <f_rename+0x2be>
c00068e0:	8d 50 74             	lea    edx,[eax+0x74]
c00068e3:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c00068ea:	e8 c6 e2 ff ff       	call   c0004bb5 <st_clust.isra.1>
c00068ef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068f3:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00068f7:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068fb:	e8 f4 d0 ff ff       	call   c00039f4 <dir_remove>
c0006900:	85 c0                	test   eax,eax
c0006902:	75 09                	jne    c000690d <f_rename+0x2d4>
c0006904:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006908:	e8 0d da ff ff       	call   c000431a <sync_fs>
c000690d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006911:	83 ec 0c             	sub    esp,0xc
c0006914:	53                   	push   ebx
c0006915:	e8 40 19 00 00       	call   c000825a <ff_memfree>
c000691a:	83 c4 10             	add    esp,0x10
c000691d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006921:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006927:	5b                   	pop    ebx
c0006928:	5e                   	pop    esi
c0006929:	5f                   	pop    edi
c000692a:	5d                   	pop    ebp
c000692b:	c3                   	ret    

c000692c <f_chmod>:
c000692c:	57                   	push   edi
c000692d:	b9 02 00 00 00       	mov    ecx,0x2
c0006932:	56                   	push   esi
c0006933:	53                   	push   ebx
c0006934:	83 ec 60             	sub    esp,0x60
c0006937:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000693b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000693f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006943:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006947:	e8 55 bb ff ff       	call   c00024a1 <mount_volume>
c000694c:	85 c0                	test   eax,eax
c000694e:	0f 85 af 00 00 00    	jne    c0006a03 <f_chmod+0xd7>
c0006954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006958:	83 ec 0c             	sub    esp,0xc
c000695b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000695f:	68 60 04 00 00       	push   0x460
c0006964:	e8 db 18 00 00       	call   c0008244 <ff_memalloc>
c0006969:	83 c4 10             	add    esp,0x10
c000696c:	89 c6                	mov    esi,eax
c000696e:	b8 11 00 00 00       	mov    eax,0x11
c0006973:	85 f6                	test   esi,esi
c0006975:	0f 84 88 00 00 00    	je     c0006a03 <f_chmod+0xd7>
c000697b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000697f:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006985:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006988:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000698b:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c000698f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006993:	e8 7f e2 ff ff       	call   c0004c17 <follow_path>
c0006998:	85 c0                	test   eax,eax
c000699a:	75 53                	jne    c00069ef <f_chmod+0xc3>
c000699c:	b8 06 00 00 00       	mov    eax,0x6
c00069a1:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c00069a6:	75 47                	jne    c00069ef <f_chmod+0xc3>
c00069a8:	89 f9                	mov    ecx,edi
c00069aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069ae:	83 e1 27             	and    ecx,0x27
c00069b1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00069b4:	75 1d                	jne    c00069d3 <f_chmod+0xa7>
c00069b6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069b9:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069bc:	21 cb                	and    ebx,ecx
c00069be:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069c1:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c00069c4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069c8:	e8 a2 cf ff ff       	call   c000396f <store_xdir>
c00069cd:	85 c0                	test   eax,eax
c00069cf:	75 1e                	jne    c00069ef <f_chmod+0xc3>
c00069d1:	eb 13                	jmp    c00069e6 <f_chmod+0xba>
c00069d3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00069d7:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069da:	21 cb                	and    ebx,ecx
c00069dc:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069df:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c00069e2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069ea:	e8 2b d9 ff ff       	call   c000431a <sync_fs>
c00069ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00069f3:	83 ec 0c             	sub    esp,0xc
c00069f6:	56                   	push   esi
c00069f7:	e8 5e 18 00 00       	call   c000825a <ff_memfree>
c00069fc:	83 c4 10             	add    esp,0x10
c00069ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a03:	83 c4 60             	add    esp,0x60
c0006a06:	5b                   	pop    ebx
c0006a07:	5e                   	pop    esi
c0006a08:	5f                   	pop    edi
c0006a09:	c3                   	ret    

c0006a0a <f_utime>:
c0006a0a:	56                   	push   esi
c0006a0b:	b9 02 00 00 00       	mov    ecx,0x2
c0006a10:	53                   	push   ebx
c0006a11:	83 ec 64             	sub    esp,0x64
c0006a14:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006a18:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a1c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a20:	e8 7c ba ff ff       	call   c00024a1 <mount_volume>
c0006a25:	85 c0                	test   eax,eax
c0006a27:	0f 85 b5 00 00 00    	jne    c0006ae2 <f_utime+0xd8>
c0006a2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a31:	83 ec 0c             	sub    esp,0xc
c0006a34:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006a38:	68 60 04 00 00       	push   0x460
c0006a3d:	e8 02 18 00 00       	call   c0008244 <ff_memalloc>
c0006a42:	83 c4 10             	add    esp,0x10
c0006a45:	89 c3                	mov    ebx,eax
c0006a47:	b8 11 00 00 00       	mov    eax,0x11
c0006a4c:	85 db                	test   ebx,ebx
c0006a4e:	0f 84 8e 00 00 00    	je     c0006ae2 <f_utime+0xd8>
c0006a54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a58:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006a5e:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006a61:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006a64:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006a68:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a6c:	e8 a6 e1 ff ff       	call   c0004c17 <follow_path>
c0006a71:	85 c0                	test   eax,eax
c0006a73:	75 59                	jne    c0006ace <f_utime+0xc4>
c0006a75:	b8 06 00 00 00       	mov    eax,0x6
c0006a7a:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006a7f:	75 4d                	jne    c0006ace <f_utime+0xc4>
c0006a81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a85:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006a89:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006a8d:	c1 e2 10             	shl    edx,0x10
c0006a90:	09 ca                	or     edx,ecx
c0006a92:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006a95:	75 1a                	jne    c0006ab1 <f_utime+0xa7>
c0006a97:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a9a:	83 c0 0c             	add    eax,0xc
c0006a9d:	e8 e5 af ff ff       	call   c0001a87 <st_dword>
c0006aa2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006aa6:	e8 c4 ce ff ff       	call   c000396f <store_xdir>
c0006aab:	85 c0                	test   eax,eax
c0006aad:	75 1f                	jne    c0006ace <f_utime+0xc4>
c0006aaf:	eb 14                	jmp    c0006ac5 <f_utime+0xbb>
c0006ab1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ab5:	83 c0 16             	add    eax,0x16
c0006ab8:	e8 ca af ff ff       	call   c0001a87 <st_dword>
c0006abd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac1:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac9:	e8 4c d8 ff ff       	call   c000431a <sync_fs>
c0006ace:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ad2:	83 ec 0c             	sub    esp,0xc
c0006ad5:	53                   	push   ebx
c0006ad6:	e8 7f 17 00 00       	call   c000825a <ff_memfree>
c0006adb:	83 c4 10             	add    esp,0x10
c0006ade:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006ae2:	83 c4 64             	add    esp,0x64
c0006ae5:	5b                   	pop    ebx
c0006ae6:	5e                   	pop    esi
c0006ae7:	c3                   	ret    

c0006ae8 <f_getlabel>:
c0006ae8:	55                   	push   ebp
c0006ae9:	31 c9                	xor    ecx,ecx
c0006aeb:	57                   	push   edi
c0006aec:	56                   	push   esi
c0006aed:	53                   	push   ebx
c0006aee:	83 ec 6c             	sub    esp,0x6c
c0006af1:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006af5:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006afc:	e8 a0 b9 ff ff       	call   c00024a1 <mount_volume>
c0006b01:	89 c6                	mov    esi,eax
c0006b03:	85 c0                	test   eax,eax
c0006b05:	0f 85 c1 01 00 00    	jne    c0006ccc <f_getlabel+0x1e4>
c0006b0b:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006b13:	0f 84 5f 01 00 00    	je     c0006c78 <f_getlabel+0x190>
c0006b19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b1d:	31 d2                	xor    edx,edx
c0006b1f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006b23:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006b2b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b2f:	e8 39 c4 ff ff       	call   c0002f6d <dir_sdi>
c0006b34:	85 c0                	test   eax,eax
c0006b36:	0f 85 2d 01 00 00    	jne    c0006c69 <f_getlabel+0x181>
c0006b3c:	ba 01 00 00 00       	mov    edx,0x1
c0006b41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b45:	e8 33 cc ff ff       	call   c000377d <dir_read>
c0006b4a:	85 c0                	test   eax,eax
c0006b4c:	0f 85 17 01 00 00    	jne    c0006c69 <f_getlabel+0x181>
c0006b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b56:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006b59:	74 09                	je     c0006b64 <f_getlabel+0x7c>
c0006b5b:	31 db                	xor    ebx,ebx
c0006b5d:	31 c9                	xor    ecx,ecx
c0006b5f:	e9 c8 00 00 00       	jmp    c0006c2c <f_getlabel+0x144>
c0006b64:	31 ed                	xor    ebp,ebp
c0006b66:	31 db                	xor    ebx,ebx
c0006b68:	31 ff                	xor    edi,edi
c0006b6a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006b6e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006b72:	39 fa                	cmp    edx,edi
c0006b74:	76 4b                	jbe    c0006bc1 <f_getlabel+0xd9>
c0006b76:	47                   	inc    edi
c0006b77:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006b7a:	01 d0                	add    eax,edx
c0006b7c:	e8 90 ae ff ff       	call   c0001a11 <ld_word>
c0006b81:	66 85 ed             	test   bp,bp
c0006b84:	75 0d                	jne    c0006b93 <f_getlabel+0xab>
c0006b86:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006b8c:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006b91:	76 28                	jbe    c0006bbb <f_getlabel+0xd3>
c0006b93:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b9a:	89 e9                	mov    ecx,ebp
c0006b9c:	01 da                	add    edx,ebx
c0006b9e:	c1 e1 10             	shl    ecx,0x10
c0006ba1:	0f b7 c0             	movzx  eax,ax
c0006ba4:	09 c8                	or     eax,ecx
c0006ba6:	b9 04 00 00 00       	mov    ecx,0x4
c0006bab:	e8 01 b0 ff ff       	call   c0001bb1 <put_utf>
c0006bb0:	84 c0                	test   al,al
c0006bb2:	74 0b                	je     c0006bbf <f_getlabel+0xd7>
c0006bb4:	0f b6 c0             	movzx  eax,al
c0006bb7:	01 c3                	add    ebx,eax
c0006bb9:	31 c0                	xor    eax,eax
c0006bbb:	89 c5                	mov    ebp,eax
c0006bbd:	eb ab                	jmp    c0006b6a <f_getlabel+0x82>
c0006bbf:	31 db                	xor    ebx,ebx
c0006bc1:	66 85 ed             	test   bp,bp
c0006bc4:	74 02                	je     c0006bc8 <f_getlabel+0xe0>
c0006bc6:	31 db                	xor    ebx,ebx
c0006bc8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006bcf:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006bd3:	e9 a0 00 00 00       	jmp    c0006c78 <f_getlabel+0x190>
c0006bd8:	83 ff 0b             	cmp    edi,0xb
c0006bdb:	74 11                	je     c0006bee <f_getlabel+0x106>
c0006bdd:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006be2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006be6:	8d 79 02             	lea    edi,[ecx+0x2]
c0006be9:	c1 e0 08             	shl    eax,0x8
c0006bec:	09 c2                	or     edx,eax
c0006bee:	0f b7 d2             	movzx  edx,dx
c0006bf1:	50                   	push   eax
c0006bf2:	50                   	push   eax
c0006bf3:	68 b5 01 00 00       	push   0x1b5
c0006bf8:	52                   	push   edx
c0006bf9:	e8 03 17 00 00       	call   c0008301 <ff_oem2uni>
c0006bfe:	83 c4 10             	add    esp,0x10
c0006c01:	66 85 c0             	test   ax,ax
c0006c04:	74 46                	je     c0006c4c <f_getlabel+0x164>
c0006c06:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006c0d:	0f b7 c0             	movzx  eax,ax
c0006c10:	01 da                	add    edx,ebx
c0006c12:	b9 04 00 00 00       	mov    ecx,0x4
c0006c17:	e8 95 af ff ff       	call   c0001bb1 <put_utf>
c0006c1c:	84 c0                	test   al,al
c0006c1e:	74 2c                	je     c0006c4c <f_getlabel+0x164>
c0006c20:	0f b6 c0             	movzx  eax,al
c0006c23:	01 c3                	add    ebx,eax
c0006c25:	83 ff 0b             	cmp    edi,0xb
c0006c28:	74 24                	je     c0006c4e <f_getlabel+0x166>
c0006c2a:	89 f9                	mov    ecx,edi
c0006c2c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006c30:	8d 79 01             	lea    edi,[ecx+0x1]
c0006c33:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006c38:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006c3d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c41:	e8 9f ae ff ff       	call   c0001ae5 <dbc_1st>
c0006c46:	85 c0                	test   eax,eax
c0006c48:	74 a4                	je     c0006bee <f_getlabel+0x106>
c0006c4a:	eb 8c                	jmp    c0006bd8 <f_getlabel+0xf0>
c0006c4c:	31 db                	xor    ebx,ebx
c0006c4e:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006c55:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006c58:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006c5f:	74 17                	je     c0006c78 <f_getlabel+0x190>
c0006c61:	4b                   	dec    ebx
c0006c62:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006c65:	74 ee                	je     c0006c55 <f_getlabel+0x16d>
c0006c67:	eb 0f                	jmp    c0006c78 <f_getlabel+0x190>
c0006c69:	83 f8 04             	cmp    eax,0x4
c0006c6c:	75 5c                	jne    c0006cca <f_getlabel+0x1e2>
c0006c6e:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006c75:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006c78:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006c80:	74 4a                	je     c0006ccc <f_getlabel+0x1e4>
c0006c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c86:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006c89:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006c8c:	e8 5e b5 ff ff       	call   c00021ef <move_window>
c0006c91:	89 c6                	mov    esi,eax
c0006c93:	85 c0                	test   eax,eax
c0006c95:	75 35                	jne    c0006ccc <f_getlabel+0x1e4>
c0006c97:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006c9b:	b8 43 00 00 00       	mov    eax,0x43
c0006ca0:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ca2:	80 f9 03             	cmp    cl,0x3
c0006ca5:	74 0f                	je     c0006cb6 <f_getlabel+0x1ce>
c0006ca7:	31 c0                	xor    eax,eax
c0006ca9:	80 f9 04             	cmp    cl,0x4
c0006cac:	0f 94 c0             	sete   al
c0006caf:	48                   	dec    eax
c0006cb0:	83 e0 c3             	and    eax,0xffffffc3
c0006cb3:	83 c0 64             	add    eax,0x64
c0006cb6:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006cba:	e8 5f ad ff ff       	call   c0001a1e <ld_dword>
c0006cbf:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006cc6:	89 07                	mov    DWORD PTR [edi],eax
c0006cc8:	eb 02                	jmp    c0006ccc <f_getlabel+0x1e4>
c0006cca:	89 c6                	mov    esi,eax
c0006ccc:	83 c4 6c             	add    esp,0x6c
c0006ccf:	89 f0                	mov    eax,esi
c0006cd1:	5b                   	pop    ebx
c0006cd2:	5e                   	pop    esi
c0006cd3:	5f                   	pop    edi
c0006cd4:	5d                   	pop    ebp
c0006cd5:	c3                   	ret    

c0006cd6 <f_setlabel>:
c0006cd6:	56                   	push   esi
c0006cd7:	b9 02 00 00 00       	mov    ecx,0x2
c0006cdc:	53                   	push   ebx
c0006cdd:	83 ec 74             	sub    esp,0x74
c0006ce0:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006ce4:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006ceb:	e8 b1 b7 ff ff       	call   c00024a1 <mount_volume>
c0006cf0:	89 c6                	mov    esi,eax
c0006cf2:	85 c0                	test   eax,eax
c0006cf4:	0f 85 41 02 00 00    	jne    c0006f3b <f_setlabel+0x265>
c0006cfa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006cfe:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d01:	0f 85 8e 00 00 00    	jne    c0006d95 <f_setlabel+0xbf>
c0006d07:	b9 16 00 00 00       	mov    ecx,0x16
c0006d0c:	31 d2                	xor    edx,edx
c0006d0e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d12:	31 db                	xor    ebx,ebx
c0006d14:	e8 8c ad ff ff       	call   c0001aa5 <mem_set>
c0006d19:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d20:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d23:	0f 86 0a 01 00 00    	jbe    c0006e33 <f_setlabel+0x15d>
c0006d29:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d30:	e8 b6 ad ff ff       	call   c0001aeb <tchar2uni>
c0006d35:	89 c6                	mov    esi,eax
c0006d37:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d3c:	76 2a                	jbe    c0006d68 <f_setlabel+0x92>
c0006d3e:	83 f8 ff             	cmp    eax,0xffffffff
c0006d41:	74 05                	je     c0006d48 <f_setlabel+0x72>
c0006d43:	83 fb 09             	cmp    ebx,0x9
c0006d46:	76 0a                	jbe    c0006d52 <f_setlabel+0x7c>
c0006d48:	be 06 00 00 00       	mov    esi,0x6
c0006d4d:	e9 e9 01 00 00       	jmp    c0006f3b <f_setlabel+0x265>
c0006d52:	89 c2                	mov    edx,eax
c0006d54:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d58:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d5b:	c1 ea 10             	shr    edx,0x10
c0006d5e:	01 c8                	add    eax,ecx
c0006d60:	43                   	inc    ebx
c0006d61:	e8 1d ad ff ff       	call   c0001a83 <st_word>
c0006d66:	eb 04                	jmp    c0006d6c <f_setlabel+0x96>
c0006d68:	85 c0                	test   eax,eax
c0006d6a:	74 dc                	je     c0006d48 <f_setlabel+0x72>
c0006d6c:	89 f2                	mov    edx,esi
c0006d6e:	b8 37 7d 02 c0       	mov    eax,0xc0027d37
c0006d73:	e8 5b ad ff ff       	call   c0001ad3 <chk_chr>
c0006d78:	85 c0                	test   eax,eax
c0006d7a:	75 cc                	jne    c0006d48 <f_setlabel+0x72>
c0006d7c:	83 fb 0a             	cmp    ebx,0xa
c0006d7f:	77 c7                	ja     c0006d48 <f_setlabel+0x72>
c0006d81:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d84:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d88:	0f b7 d6             	movzx  edx,si
c0006d8b:	01 c8                	add    eax,ecx
c0006d8d:	43                   	inc    ebx
c0006d8e:	e8 f0 ac ff ff       	call   c0001a83 <st_word>
c0006d93:	eb 84                	jmp    c0006d19 <f_setlabel+0x43>
c0006d95:	b9 0b 00 00 00       	mov    ecx,0xb
c0006d9a:	ba 20 00 00 00       	mov    edx,0x20
c0006d9f:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006da3:	31 db                	xor    ebx,ebx
c0006da5:	e8 fb ac ff ff       	call   c0001aa5 <mem_set>
c0006daa:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006db1:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006db4:	76 60                	jbe    c0006e16 <f_setlabel+0x140>
c0006db6:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006dbd:	e8 29 ad ff ff       	call   c0001aeb <tchar2uni>
c0006dc2:	3d ff ff 00 00       	cmp    eax,0xffff
c0006dc7:	0f 87 7b ff ff ff    	ja     c0006d48 <f_setlabel+0x72>
c0006dcd:	83 ec 0c             	sub    esp,0xc
c0006dd0:	50                   	push   eax
c0006dd1:	e8 97 15 00 00       	call   c000836d <ff_wtoupper>
c0006dd6:	5a                   	pop    edx
c0006dd7:	59                   	pop    ecx
c0006dd8:	68 b5 01 00 00       	push   0x1b5
c0006ddd:	50                   	push   eax
c0006dde:	e8 8e 14 00 00       	call   c0008271 <ff_uni2oem>
c0006de3:	83 c4 10             	add    esp,0x10
c0006de6:	89 c6                	mov    esi,eax
c0006de8:	66 85 c0             	test   ax,ax
c0006deb:	0f 84 57 ff ff ff    	je     c0006d48 <f_setlabel+0x72>
c0006df1:	0f b7 d0             	movzx  edx,ax
c0006df4:	b8 30 7d 02 c0       	mov    eax,0xc0027d30
c0006df9:	e8 d5 ac ff ff       	call   c0001ad3 <chk_chr>
c0006dfe:	85 c0                	test   eax,eax
c0006e00:	0f 85 42 ff ff ff    	jne    c0006d48 <f_setlabel+0x72>
c0006e06:	66 81 fe ff 00       	cmp    si,0xff
c0006e0b:	0f 87 14 01 00 00    	ja     c0006f25 <f_setlabel+0x24f>
c0006e11:	e9 fa 00 00 00       	jmp    c0006f10 <f_setlabel+0x23a>
c0006e16:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006e1b:	0f 84 27 ff ff ff    	je     c0006d48 <f_setlabel+0x72>
c0006e21:	85 db                	test   ebx,ebx
c0006e23:	74 0e                	je     c0006e33 <f_setlabel+0x15d>
c0006e25:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006e28:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006e2d:	75 04                	jne    c0006e33 <f_setlabel+0x15d>
c0006e2f:	89 c3                	mov    ebx,eax
c0006e31:	eb ee                	jmp    c0006e21 <f_setlabel+0x14b>
c0006e33:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e37:	31 d2                	xor    edx,edx
c0006e39:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006e3d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006e45:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e49:	e8 1f c1 ff ff       	call   c0002f6d <dir_sdi>
c0006e4e:	89 c6                	mov    esi,eax
c0006e50:	85 c0                	test   eax,eax
c0006e52:	0f 85 e3 00 00 00    	jne    c0006f3b <f_setlabel+0x265>
c0006e58:	ba 01 00 00 00       	mov    edx,0x1
c0006e5d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e61:	e8 17 c9 ff ff       	call   c000377d <dir_read>
c0006e66:	85 c0                	test   eax,eax
c0006e68:	75 21                	jne    c0006e8b <f_setlabel+0x1b5>
c0006e6a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006e6e:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e72:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006e75:	74 5d                	je     c0006ed4 <f_setlabel+0x1fe>
c0006e77:	85 db                	test   ebx,ebx
c0006e79:	74 0b                	je     c0006e86 <f_setlabel+0x1b0>
c0006e7b:	b9 0b 00 00 00       	mov    ecx,0xb
c0006e80:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e84:	eb 70                	jmp    c0006ef6 <f_setlabel+0x220>
c0006e86:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006e89:	eb 70                	jmp    c0006efb <f_setlabel+0x225>
c0006e8b:	83 f8 04             	cmp    eax,0x4
c0006e8e:	75 7c                	jne    c0006f0c <f_setlabel+0x236>
c0006e90:	85 db                	test   ebx,ebx
c0006e92:	0f 84 a3 00 00 00    	je     c0006f3b <f_setlabel+0x265>
c0006e98:	ba 01 00 00 00       	mov    edx,0x1
c0006e9d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006ea1:	e8 51 ca ff ff       	call   c00038f7 <dir_alloc>
c0006ea6:	89 c6                	mov    esi,eax
c0006ea8:	85 c0                	test   eax,eax
c0006eaa:	0f 85 8b 00 00 00    	jne    c0006f3b <f_setlabel+0x265>
c0006eb0:	31 d2                	xor    edx,edx
c0006eb2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006eb6:	b9 20 00 00 00       	mov    ecx,0x20
c0006ebb:	e8 e5 ab ff ff       	call   c0001aa5 <mem_set>
c0006ec0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006ec4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ec7:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ecb:	75 18                	jne    c0006ee5 <f_setlabel+0x20f>
c0006ecd:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006ed0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ed4:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006ed7:	b9 16 00 00 00       	mov    ecx,0x16
c0006edc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ee0:	83 c0 02             	add    eax,0x2
c0006ee3:	eb 9b                	jmp    c0006e80 <f_setlabel+0x1aa>
c0006ee5:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006ee9:	b9 0b 00 00 00       	mov    ecx,0xb
c0006eee:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006ef2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ef6:	e8 95 ab ff ff       	call   c0001a90 <mem_cpy>
c0006efb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006eff:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006f03:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f07:	e8 0e d4 ff ff       	call   c000431a <sync_fs>
c0006f0c:	89 c6                	mov    esi,eax
c0006f0e:	eb 2b                	jmp    c0006f3b <f_setlabel+0x265>
c0006f10:	83 fb 0a             	cmp    ebx,0xa
c0006f13:	0f 87 2f fe ff ff    	ja     c0006d48 <f_setlabel+0x72>
c0006f19:	89 f0                	mov    eax,esi
c0006f1b:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f1f:	43                   	inc    ebx
c0006f20:	e9 85 fe ff ff       	jmp    c0006daa <f_setlabel+0xd4>
c0006f25:	83 fb 09             	cmp    ebx,0x9
c0006f28:	0f 87 1a fe ff ff    	ja     c0006d48 <f_setlabel+0x72>
c0006f2e:	89 f0                	mov    eax,esi
c0006f30:	66 c1 e8 08          	shr    ax,0x8
c0006f34:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f38:	43                   	inc    ebx
c0006f39:	eb de                	jmp    c0006f19 <f_setlabel+0x243>
c0006f3b:	89 f0                	mov    eax,esi
c0006f3d:	83 c4 74             	add    esp,0x74
c0006f40:	5b                   	pop    ebx
c0006f41:	5e                   	pop    esi
c0006f42:	c3                   	ret    

c0006f43 <f_forward>:
c0006f43:	55                   	push   ebp
c0006f44:	57                   	push   edi
c0006f45:	56                   	push   esi
c0006f46:	53                   	push   ebx
c0006f47:	83 ec 2c             	sub    esp,0x2c
c0006f4a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006f4e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006f52:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006f58:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006f5c:	89 d8                	mov    eax,ebx
c0006f5e:	e8 b1 b1 ff ff       	call   c0002114 <validate>
c0006f63:	89 c5                	mov    ebp,eax
c0006f65:	85 c0                	test   eax,eax
c0006f67:	0f 85 aa 01 00 00    	jne    c0007117 <f_forward+0x1d4>
c0006f6d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006f71:	85 ed                	test   ebp,ebp
c0006f73:	0f 85 9e 01 00 00    	jne    c0007117 <f_forward+0x1d4>
c0006f79:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006f7d:	0f 84 8f 01 00 00    	je     c0007112 <f_forward+0x1cf>
c0006f83:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006f86:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006f89:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006f8c:	bf 00 00 00 00       	mov    edi,0x0
c0006f91:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006f94:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006f98:	89 d1                	mov    ecx,edx
c0006f9a:	19 f9                	sbb    ecx,edi
c0006f9c:	0f 83 cf 00 00 00    	jae    c0007071 <f_forward+0x12e>
c0006fa2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006fa6:	e9 c6 00 00 00       	jmp    c0007071 <f_forward+0x12e>
c0006fab:	50                   	push   eax
c0006fac:	50                   	push   eax
c0006fad:	6a 00                	push   0x0
c0006faf:	6a 00                	push   0x0
c0006fb1:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006fb5:	83 c4 10             	add    esp,0x10
c0006fb8:	85 c0                	test   eax,eax
c0006fba:	0f 84 57 01 00 00    	je     c0007117 <f_forward+0x1d4>
c0006fc0:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006fc3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fc7:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006fca:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0006fce:	89 d7                	mov    edi,edx
c0006fd0:	8d 4e ff             	lea    ecx,[esi-0x1]
c0006fd3:	89 c6                	mov    esi,eax
c0006fd5:	0f ac fe 09          	shrd   esi,edi,0x9
c0006fd9:	21 ce                	and    esi,ecx
c0006fdb:	89 c1                	mov    ecx,eax
c0006fdd:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0006fe3:	0f 84 98 00 00 00    	je     c0007081 <f_forward+0x13e>
c0006fe9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fed:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006ff0:	89 c8                	mov    eax,ecx
c0006ff2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006ff6:	e8 af ac ff ff       	call   c0001caa <clst2sect>
c0006ffb:	89 d7                	mov    edi,edx
c0006ffd:	09 c7                	or     edi,eax
c0006fff:	0f 84 9e 00 00 00    	je     c00070a3 <f_forward+0x160>
c0007005:	31 ff                	xor    edi,edi
c0007007:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000700a:	01 c6                	add    esi,eax
c000700c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007010:	11 d7                	adc    edi,edx
c0007012:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007015:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007018:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000701c:	39 fa                	cmp    edx,edi
c000701e:	0f 85 a2 00 00 00    	jne    c00070c6 <f_forward+0x183>
c0007024:	39 f0                	cmp    eax,esi
c0007026:	0f 85 9a 00 00 00    	jne    c00070c6 <f_forward+0x183>
c000702c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000702f:	ba 00 02 00 00       	mov    edx,0x200
c0007034:	25 ff 01 00 00       	and    eax,0x1ff
c0007039:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000703d:	29 c2                	sub    edx,eax
c000703f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007042:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007045:	39 d1                	cmp    ecx,edx
c0007047:	76 02                	jbe    c000704b <f_forward+0x108>
c0007049:	89 d1                	mov    ecx,edx
c000704b:	8d 73 50             	lea    esi,[ebx+0x50]
c000704e:	52                   	push   edx
c000704f:	01 c6                	add    esi,eax
c0007051:	52                   	push   edx
c0007052:	51                   	push   ecx
c0007053:	56                   	push   esi
c0007054:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007058:	83 c4 10             	add    esp,0x10
c000705b:	85 c0                	test   eax,eax
c000705d:	74 44                	je     c00070a3 <f_forward+0x160>
c000705f:	31 ff                	xor    edi,edi
c0007061:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c0007064:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0007067:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c000706b:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c000706f:	01 07                	add    DWORD PTR [edi],eax
c0007071:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0007076:	0f 85 2f ff ff ff    	jne    c0006fab <f_forward+0x68>
c000707c:	e9 96 00 00 00       	jmp    c0007117 <f_forward+0x1d4>
c0007081:	85 f6                	test   esi,esi
c0007083:	0f 85 60 ff ff ff    	jne    c0006fe9 <f_forward+0xa6>
c0007089:	89 d7                	mov    edi,edx
c000708b:	09 c7                	or     edi,eax
c000708d:	75 05                	jne    c0007094 <f_forward+0x151>
c000708f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007092:	eb 0a                	jmp    c000709e <f_forward+0x15b>
c0007094:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007097:	89 d8                	mov    eax,ebx
c0007099:	e8 d9 bc ff ff       	call   c0002d77 <get_fat>
c000709e:	83 f8 01             	cmp    eax,0x1
c00070a1:	77 0b                	ja     c00070ae <f_forward+0x16b>
c00070a3:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00070a7:	bd 02 00 00 00       	mov    ebp,0x2
c00070ac:	eb 69                	jmp    c0007117 <f_forward+0x1d4>
c00070ae:	83 f8 ff             	cmp    eax,0xffffffff
c00070b1:	75 0b                	jne    c00070be <f_forward+0x17b>
c00070b3:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00070b7:	bd 01 00 00 00       	mov    ebp,0x1
c00070bc:	eb 59                	jmp    c0007117 <f_forward+0x1d4>
c00070be:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00070c1:	e9 23 ff ff ff       	jmp    c0006fe9 <f_forward+0xa6>
c00070c6:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00070ca:	79 20                	jns    c00070ec <f_forward+0x1a9>
c00070cc:	83 ec 0c             	sub    esp,0xc
c00070cf:	6a 01                	push   0x1
c00070d1:	52                   	push   edx
c00070d2:	50                   	push   eax
c00070d3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070d7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00070db:	50                   	push   eax
c00070dc:	e8 fb a8 ff ff       	call   c00019dc <disk_write>
c00070e1:	83 c4 20             	add    esp,0x20
c00070e4:	85 c0                	test   eax,eax
c00070e6:	75 cb                	jne    c00070b3 <f_forward+0x170>
c00070e8:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00070ec:	83 ec 0c             	sub    esp,0xc
c00070ef:	6a 01                	push   0x1
c00070f1:	57                   	push   edi
c00070f2:	56                   	push   esi
c00070f3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070f7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00070fb:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00070ff:	50                   	push   eax
c0007100:	e8 c1 a8 ff ff       	call   c00019c6 <disk_read>
c0007105:	83 c4 20             	add    esp,0x20
c0007108:	85 c0                	test   eax,eax
c000710a:	0f 84 1c ff ff ff    	je     c000702c <f_forward+0xe9>
c0007110:	eb a1                	jmp    c00070b3 <f_forward+0x170>
c0007112:	bd 07 00 00 00       	mov    ebp,0x7
c0007117:	83 c4 2c             	add    esp,0x2c
c000711a:	89 e8                	mov    eax,ebp
c000711c:	5b                   	pop    ebx
c000711d:	5e                   	pop    esi
c000711e:	5f                   	pop    edi
c000711f:	5d                   	pop    ebp
c0007120:	c3                   	ret    

c0007121 <f_mkfs>:
c0007121:	55                   	push   ebp
c0007122:	57                   	push   edi
c0007123:	56                   	push   esi
c0007124:	53                   	push   ebx
c0007125:	bb 0b 00 00 00       	mov    ebx,0xb
c000712a:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007130:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007137:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000713e:	e8 b0 ae ff ff       	call   c0001ff3 <get_ldnumber>
c0007143:	85 c0                	test   eax,eax
c0007145:	0f 88 ec 10 00 00    	js     c0008237 <f_mkfs+0x1116>
c000714b:	8b 14 85 e0 c8 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3720]
c0007152:	85 d2                	test   edx,edx
c0007154:	74 03                	je     c0007159 <f_mkfs+0x38>
c0007156:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0007159:	85 f6                	test   esi,esi
c000715b:	75 05                	jne    c0007162 <f_mkfs+0x41>
c000715d:	be 20 7d 02 c0       	mov    esi,0xc0027d20
c0007162:	83 ec 0c             	sub    esp,0xc
c0007165:	0f b6 c0             	movzx  eax,al
c0007168:	bb 03 00 00 00       	mov    ebx,0x3
c000716d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007171:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007175:	e8 49 a8 ff ff       	call   c00019c3 <disk_initialize>
c000717a:	83 c4 10             	add    esp,0x10
c000717d:	a8 01                	test   al,0x1
c000717f:	0f 85 b2 10 00 00    	jne    c0008237 <f_mkfs+0x1116>
c0007185:	bb 0a 00 00 00       	mov    ebx,0xa
c000718a:	a8 04                	test   al,0x4
c000718c:	0f 85 a5 10 00 00    	jne    c0008237 <f_mkfs+0x1116>
c0007192:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007195:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007199:	85 c0                	test   eax,eax
c000719b:	75 20                	jne    c00071bd <f_mkfs+0x9c>
c000719d:	51                   	push   ecx
c000719e:	8d 44 24 78          	lea    eax,[esp+0x78]
c00071a2:	50                   	push   eax
c00071a3:	6a 03                	push   0x3
c00071a5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071a9:	e8 44 a8 ff ff       	call   c00019f2 <disk_ioctl>
c00071ae:	83 c4 10             	add    esp,0x10
c00071b1:	85 c0                	test   eax,eax
c00071b3:	74 08                	je     c00071bd <f_mkfs+0x9c>
c00071b5:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071bd:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00071c1:	8d 42 ff             	lea    eax,[edx-0x1]
c00071c4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071c9:	77 04                	ja     c00071cf <f_mkfs+0xae>
c00071cb:	85 c2                	test   edx,eax
c00071cd:	74 08                	je     c00071d7 <f_mkfs+0xb6>
c00071cf:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071d7:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00071da:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00071de:	48                   	dec    eax
c00071df:	3c 01                	cmp    al,0x1
c00071e1:	76 05                	jbe    c00071e8 <f_mkfs+0xc7>
c00071e3:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c00071e8:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00071eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00071ef:	48                   	dec    eax
c00071f0:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071f5:	77 07                	ja     c00071fe <f_mkfs+0xdd>
c00071f7:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c00071fc:	74 08                	je     c0007206 <f_mkfs+0xe5>
c00071fe:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007206:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007209:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000720f:	77 07                	ja     c0007218 <f_mkfs+0xf7>
c0007211:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007214:	85 d8                	test   eax,ebx
c0007216:	74 02                	je     c000721a <f_mkfs+0xf9>
c0007218:	31 db                	xor    ebx,ebx
c000721a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007225:	77 0a                	ja     c0007231 <f_mkfs+0x110>
c0007227:	bb 11 00 00 00       	mov    ebx,0x11
c000722c:	e9 06 10 00 00       	jmp    c0008237 <f_mkfs+0x1116>
c0007231:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007238:	8b 36                	mov    esi,DWORD PTR [esi]
c000723a:	85 ed                	test   ebp,ebp
c000723c:	75 1e                	jne    c000725c <f_mkfs+0x13b>
c000723e:	83 ec 0c             	sub    esp,0xc
c0007241:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007248:	25 00 fe ff ff       	and    eax,0xfffffe00
c000724d:	50                   	push   eax
c000724e:	e8 f1 0f 00 00       	call   c0008244 <ff_memalloc>
c0007253:	83 c4 10             	add    esp,0x10
c0007256:	89 c5                	mov    ebp,eax
c0007258:	85 c0                	test   eax,eax
c000725a:	74 cb                	je     c0007227 <f_mkfs+0x106>
c000725c:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c0007264:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c000726c:	52                   	push   edx
c000726d:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007271:	50                   	push   eax
c0007272:	6a 01                	push   0x1
c0007274:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007278:	e8 75 a7 ff ff       	call   c00019f2 <disk_ioctl>
c000727d:	83 c4 10             	add    esp,0x10
c0007280:	85 c0                	test   eax,eax
c0007282:	0f 85 4a 0f 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007288:	89 f1                	mov    ecx,esi
c000728a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007292:	83 e1 0f             	and    ecx,0xf
c0007295:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000729d:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00072a1:	83 e6 08             	and    esi,0x8
c00072a4:	75 56                	jne    c00072fc <f_mkfs+0x1db>
c00072a6:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00072aa:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00072ae:	83 ff 00             	cmp    edi,0x0
c00072b1:	76 20                	jbe    c00072d3 <f_mkfs+0x1b2>
c00072b3:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00072b8:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00072c0:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00072c6:	83 d7 ff             	adc    edi,0xffffffff
c00072c9:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072cd:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072d1:	eb 21                	jmp    c00072f4 <f_mkfs+0x1d3>
c00072d3:	ba 3f 00 00 00       	mov    edx,0x3f
c00072d8:	39 f2                	cmp    edx,esi
c00072da:	19 f8                	sbb    eax,edi
c00072dc:	73 1e                	jae    c00072fc <f_mkfs+0x1db>
c00072de:	83 c6 c1             	add    esi,0xffffffc1
c00072e1:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00072e9:	83 d7 ff             	adc    edi,0xffffffff
c00072ec:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072f0:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072f4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072fc:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007300:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007304:	89 04 24             	mov    DWORD PTR [esp],eax
c0007307:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000730b:	31 c0                	xor    eax,eax
c000730d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007312:	89 c7                	mov    edi,eax
c0007314:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007317:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000731b:	0f 83 c5 0a 00 00    	jae    c0007de6 <f_mkfs+0xcc5>
c0007321:	89 df                	mov    edi,ebx
c0007323:	c1 ef 09             	shr    edi,0x9
c0007326:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000732a:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007331:	c1 ef 09             	shr    edi,0x9
c0007334:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007339:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000733d:	74 29                	je     c0007368 <f_mkfs+0x247>
c000733f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007345:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000734a:	0f 97 c2             	seta   dl
c000734d:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007350:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007354:	0f 92 c0             	setb   al
c0007357:	08 c2                	or     dl,al
c0007359:	75 5b                	jne    c00073b6 <f_mkfs+0x295>
c000735b:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000735f:	83 e0 07             	and    eax,0x7
c0007362:	3c 04                	cmp    al,0x4
c0007364:	74 50                	je     c00073b6 <f_mkfs+0x295>
c0007366:	eb 1b                	jmp    c0007383 <f_mkfs+0x262>
c0007368:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000736d:	0f 87 73 0a 00 00    	ja     c0007de6 <f_mkfs+0xcc5>
c0007373:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007379:	76 08                	jbe    c0007383 <f_mkfs+0x262>
c000737b:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007383:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007387:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c000738b:	83 e0 01             	and    eax,0x1
c000738e:	80 e1 02             	and    cl,0x2
c0007391:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007395:	74 0d                	je     c00073a4 <f_mkfs+0x283>
c0007397:	84 c0                	test   al,al
c0007399:	0f 84 53 09 00 00    	je     c0007cf2 <f_mkfs+0xbd1>
c000739f:	e9 12 08 00 00       	jmp    c0007bb6 <f_mkfs+0xa95>
c00073a4:	bb 13 00 00 00       	mov    ebx,0x13
c00073a9:	84 c0                	test   al,al
c00073ab:	0f 85 05 08 00 00    	jne    c0007bb6 <f_mkfs+0xa95>
c00073b1:	e9 39 0e 00 00       	jmp    c00081ef <f_mkfs+0x10ce>
c00073b6:	31 c0                	xor    eax,eax
c00073b8:	ba ff 0f 00 00       	mov    edx,0xfff
c00073bd:	89 c7                	mov    edi,eax
c00073bf:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073c2:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00073c6:	0f 83 1a 0a 00 00    	jae    c0007de6 <f_mkfs+0xcc5>
c00073cc:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00073d2:	77 39                	ja     c000740d <f_mkfs+0x2ec>
c00073d4:	ba ff ff 07 00       	mov    edx,0x7ffff
c00073d9:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00073e1:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073e4:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00073e8:	73 08                	jae    c00073f2 <f_mkfs+0x2d1>
c00073ea:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c00073f2:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c00073f7:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00073fa:	b8 00 00 00 00       	mov    eax,0x0
c00073ff:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007403:	73 08                	jae    c000740d <f_mkfs+0x2ec>
c0007405:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000740d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007411:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007415:	83 c0 20             	add    eax,0x20
c0007418:	83 d2 00             	adc    edx,0x0
c000741b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000741f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007423:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007427:	31 d2                	xor    edx,edx
c0007429:	31 ff                	xor    edi,edi
c000742b:	52                   	push   edx
c000742c:	89 fb                	mov    ebx,edi
c000742e:	50                   	push   eax
c000742f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007433:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007437:	e8 60 df 01 00       	call   c002539c <__udivdi3>
c000743c:	83 c4 10             	add    esp,0x10
c000743f:	c1 e0 02             	shl    eax,0x2
c0007442:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007446:	05 07 02 00 00       	add    eax,0x207
c000744b:	89 f1                	mov    ecx,esi
c000744d:	c1 e8 09             	shr    eax,0x9
c0007450:	83 c1 ff             	add    ecx,0xffffffff
c0007453:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0007457:	83 d3 ff             	adc    ebx,0xffffffff
c000745a:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000745e:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007462:	31 d2                	xor    edx,edx
c0007464:	01 c8                	add    eax,ecx
c0007466:	11 da                	adc    edx,ebx
c0007468:	89 c1                	mov    ecx,eax
c000746a:	f7 de                	neg    esi
c000746c:	89 d0                	mov    eax,edx
c000746e:	83 d7 00             	adc    edi,0x0
c0007471:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007475:	f7 df                	neg    edi
c0007477:	21 f1                	and    ecx,esi
c0007479:	21 f8                	and    eax,edi
c000747b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000747f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007483:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007487:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000748b:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000748f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007492:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007496:	0f ac d0 01          	shrd   eax,edx,0x1
c000749a:	89 df                	mov    edi,ebx
c000749c:	d1 ea                	shr    edx,1
c000749e:	39 c1                	cmp    ecx,eax
c00074a0:	19 d7                	sbb    edi,edx
c00074a2:	0f 83 3e 09 00 00    	jae    c0007de6 <f_mkfs+0xcc5>
c00074a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074ac:	31 d2                	xor    edx,edx
c00074ae:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00074b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00074b6:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00074ba:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074bd:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00074c1:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00074c5:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00074c9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00074cd:	83 f8 0f             	cmp    eax,0xf
c00074d0:	0f 86 10 09 00 00    	jbe    c0007de6 <f_mkfs+0xcc5>
c00074d6:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00074de:	0f 87 02 09 00 00    	ja     c0007de6 <f_mkfs+0xcc5>
c00074e4:	31 d2                	xor    edx,edx
c00074e6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00074ea:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00074f2:	83 c0 07             	add    eax,0x7
c00074f5:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00074fd:	c1 e8 03             	shr    eax,0x3
c0007500:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007507:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000750b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000750f:	c1 e0 09             	shl    eax,0x9
c0007512:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007516:	48                   	dec    eax
c0007517:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000751b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000751f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007523:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007527:	31 d2                	xor    edx,edx
c0007529:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000752d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007534:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007538:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000753d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007541:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007545:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007549:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000754d:	31 ff                	xor    edi,edi
c000754f:	31 f6                	xor    esi,esi
c0007551:	31 db                	xor    ebx,ebx
c0007553:	85 ff                	test   edi,edi
c0007555:	74 05                	je     c000755c <f_mkfs+0x43b>
c0007557:	4f                   	dec    edi
c0007558:	74 44                	je     c000759e <f_mkfs+0x47d>
c000755a:	eb 4f                	jmp    c00075ab <f_mkfs+0x48a>
c000755c:	83 ec 0c             	sub    esp,0xc
c000755f:	0f b7 c3             	movzx  eax,bx
c0007562:	50                   	push   eax
c0007563:	e8 05 0e 00 00       	call   c000836d <ff_wtoupper>
c0007568:	83 c4 10             	add    esp,0x10
c000756b:	89 c1                	mov    ecx,eax
c000756d:	8d 53 01             	lea    edx,[ebx+0x1]
c0007570:	66 39 c3             	cmp    bx,ax
c0007573:	75 3e                	jne    c00075b3 <f_mkfs+0x492>
c0007575:	be 01 00 00 00       	mov    esi,0x1
c000757a:	89 df                	mov    edi,ebx
c000757c:	66 01 f7             	add    di,si
c000757f:	75 07                	jne    c0007588 <f_mkfs+0x467>
c0007581:	83 fe 7f             	cmp    esi,0x7f
c0007584:	77 31                	ja     c00075b7 <f_mkfs+0x496>
c0007586:	eb 16                	jmp    c000759e <f_mkfs+0x47d>
c0007588:	83 ec 0c             	sub    esp,0xc
c000758b:	0f b7 ff             	movzx  edi,di
c000758e:	57                   	push   edi
c000758f:	e8 d9 0d 00 00       	call   c000836d <ff_wtoupper>
c0007594:	83 c4 10             	add    esp,0x10
c0007597:	39 c7                	cmp    edi,eax
c0007599:	75 e6                	jne    c0007581 <f_mkfs+0x460>
c000759b:	46                   	inc    esi
c000759c:	eb dc                	jmp    c000757a <f_mkfs+0x459>
c000759e:	31 c0                	xor    eax,eax
c00075a0:	89 d9                	mov    ecx,ebx
c00075a2:	4e                   	dec    esi
c00075a3:	0f 95 c0             	setne  al
c00075a6:	43                   	inc    ebx
c00075a7:	89 c7                	mov    edi,eax
c00075a9:	eb 14                	jmp    c00075bf <f_mkfs+0x49e>
c00075ab:	89 f1                	mov    ecx,esi
c00075ad:	01 f3                	add    ebx,esi
c00075af:	31 ff                	xor    edi,edi
c00075b1:	eb 0c                	jmp    c00075bf <f_mkfs+0x49e>
c00075b3:	89 d3                	mov    ebx,edx
c00075b5:	eb 08                	jmp    c00075bf <f_mkfs+0x49e>
c00075b7:	bf 02 00 00 00       	mov    edi,0x2
c00075bc:	83 c9 ff             	or     ecx,0xffffffff
c00075bf:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00075c3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075c6:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00075ca:	0f b6 c1             	movzx  eax,cl
c00075cd:	e8 3a a9 ff ff       	call   c0001f0c <xsum32>
c00075d2:	66 c1 e9 08          	shr    cx,0x8
c00075d6:	89 c2                	mov    edx,eax
c00075d8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075db:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00075df:	0f b7 c1             	movzx  eax,cx
c00075e2:	e8 25 a9 ff ff       	call   c0001f0c <xsum32>
c00075e7:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c00075ec:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00075f0:	66 85 db             	test   bx,bx
c00075f3:	74 1f                	je     c0007614 <f_mkfs+0x4f3>
c00075f5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075f8:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c00075ff:	83 c0 02             	add    eax,0x2
c0007602:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007608:	39 c2                	cmp    edx,eax
c000760a:	74 08                	je     c0007614 <f_mkfs+0x4f3>
c000760c:	89 04 24             	mov    DWORD PTR [esp],eax
c000760f:	e9 3f ff ff ff       	jmp    c0007553 <f_mkfs+0x432>
c0007614:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007617:	83 ec 0c             	sub    esp,0xc
c000761a:	05 01 02 00 00       	add    eax,0x201
c000761f:	c1 e8 09             	shr    eax,0x9
c0007622:	50                   	push   eax
c0007623:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007627:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000762b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000762f:	55                   	push   ebp
c0007630:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007634:	e8 a3 a3 ff ff       	call   c00019dc <disk_write>
c0007639:	83 c4 20             	add    esp,0x20
c000763c:	85 c0                	test   eax,eax
c000763e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007641:	0f 85 8b 0b 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007647:	89 d0                	mov    eax,edx
c0007649:	31 d2                	xor    edx,edx
c000764b:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000764f:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007653:	66 85 db             	test   bx,bx
c0007656:	74 04                	je     c000765c <f_mkfs+0x53b>
c0007658:	31 c0                	xor    eax,eax
c000765a:	eb b0                	jmp    c000760c <f_mkfs+0x4eb>
c000765c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007660:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0007664:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c0007668:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c000766e:	31 d2                	xor    edx,edx
c0007670:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c000767b:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000767f:	c1 eb 09             	shr    ebx,0x9
c0007682:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007689:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000768d:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007691:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007695:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007699:	8d 70 01             	lea    esi,[eax+0x1]
c000769c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00076a4:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00076ab:	31 d2                	xor    edx,edx
c00076ad:	25 00 fe ff ff       	and    eax,0xfffffe00
c00076b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00076b5:	89 c1                	mov    ecx,eax
c00076b7:	89 e8                	mov    eax,ebp
c00076b9:	e8 e7 a3 ff ff       	call   c0001aa5 <mem_set>
c00076be:	31 c0                	xor    eax,eax
c00076c0:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076c3:	76 10                	jbe    c00076d5 <f_mkfs+0x5b4>
c00076c5:	83 fe 07             	cmp    esi,0x7
c00076c8:	76 0b                	jbe    c00076d5 <f_mkfs+0x5b4>
c00076ca:	40                   	inc    eax
c00076cb:	83 ee 08             	sub    esi,0x8
c00076ce:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00076d3:	eb eb                	jmp    c00076c0 <f_mkfs+0x59f>
c00076d5:	b2 01                	mov    dl,0x1
c00076d7:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00076db:	85 f6                	test   esi,esi
c00076dd:	74 0c                	je     c00076eb <f_mkfs+0x5ca>
c00076df:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076e2:	76 07                	jbe    c00076eb <f_mkfs+0x5ca>
c00076e4:	08 11                	or     BYTE PTR [ecx],dl
c00076e6:	4e                   	dec    esi
c00076e7:	d1 e2                	shl    edx,1
c00076e9:	eb f0                	jmp    c00076db <f_mkfs+0x5ba>
c00076eb:	89 df                	mov    edi,ebx
c00076ed:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00076f1:	76 04                	jbe    c00076f7 <f_mkfs+0x5d6>
c00076f3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00076f7:	83 ec 0c             	sub    esp,0xc
c00076fa:	57                   	push   edi
c00076fb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00076ff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007703:	55                   	push   ebp
c0007704:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007708:	e8 cf a2 ff ff       	call   c00019dc <disk_write>
c000770d:	83 c4 20             	add    esp,0x20
c0007710:	85 c0                	test   eax,eax
c0007712:	0f 85 ba 0a 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007718:	31 d2                	xor    edx,edx
c000771a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000771e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007722:	29 fb                	sub    ebx,edi
c0007724:	0f 85 7a ff ff ff    	jne    c00076a4 <f_mkfs+0x583>
c000772a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000772e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007736:	31 f6                	xor    esi,esi
c0007738:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000773c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000773f:	31 d2                	xor    edx,edx
c0007741:	89 e8                	mov    eax,ebp
c0007743:	e8 5d a3 ff ff       	call   c0001aa5 <mem_set>
c0007748:	31 c9                	xor    ecx,ecx
c000774a:	85 db                	test   ebx,ebx
c000774c:	75 40                	jne    c000778e <f_mkfs+0x66d>
c000774e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007753:	89 e8                	mov    eax,ebp
c0007755:	bb 02 00 00 00       	mov    ebx,0x2
c000775a:	e8 28 a3 ff ff       	call   c0001a87 <st_dword>
c000775f:	8d 45 04             	lea    eax,[ebp+0x4]
c0007762:	83 ca ff             	or     edx,0xffffffff
c0007765:	e8 1d a3 ff ff       	call   c0001a87 <st_dword>
c000776a:	b9 08 00 00 00       	mov    ecx,0x8
c000776f:	eb 1d                	jmp    c000778e <f_mkfs+0x66d>
c0007771:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007774:	76 3b                	jbe    c00077b1 <f_mkfs+0x690>
c0007776:	43                   	inc    ebx
c0007777:	83 fe 01             	cmp    esi,0x1
c000777a:	89 da                	mov    edx,ebx
c000777c:	77 03                	ja     c0007781 <f_mkfs+0x660>
c000777e:	83 ca ff             	or     edx,0xffffffff
c0007781:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007785:	4e                   	dec    esi
c0007786:	e8 fc a2 ff ff       	call   c0001a87 <st_dword>
c000778b:	83 c1 04             	add    ecx,0x4
c000778e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007792:	85 f6                	test   esi,esi
c0007794:	75 db                	jne    c0007771 <f_mkfs+0x650>
c0007796:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c000779b:	77 14                	ja     c00077b1 <f_mkfs+0x690>
c000779d:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00077a1:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00077a8:	85 f6                	test   esi,esi
c00077aa:	74 05                	je     c00077b1 <f_mkfs+0x690>
c00077ac:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00077af:	77 dd                	ja     c000778e <f_mkfs+0x66d>
c00077b1:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00077b5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077b9:	39 cf                	cmp    edi,ecx
c00077bb:	76 02                	jbe    c00077bf <f_mkfs+0x69e>
c00077bd:	89 cf                	mov    edi,ecx
c00077bf:	83 ec 0c             	sub    esp,0xc
c00077c2:	57                   	push   edi
c00077c3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00077c7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00077cb:	55                   	push   ebp
c00077cc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00077d0:	e8 07 a2 ff ff       	call   c00019dc <disk_write>
c00077d5:	83 c4 20             	add    esp,0x20
c00077d8:	85 c0                	test   eax,eax
c00077da:	0f 85 f2 09 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c00077e0:	31 d2                	xor    edx,edx
c00077e2:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c00077e6:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c00077ea:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c00077ee:	0f 85 48 ff ff ff    	jne    c000773c <f_mkfs+0x61b>
c00077f4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00077f7:	31 d2                	xor    edx,edx
c00077f9:	89 e8                	mov    eax,ebp
c00077fb:	31 ff                	xor    edi,edi
c00077fd:	e8 a3 a2 ff ff       	call   c0001aa5 <mem_set>
c0007802:	8d 45 34             	lea    eax,[ebp+0x34]
c0007805:	ba 02 00 00 00       	mov    edx,0x2
c000780a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c000780e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007812:	e8 70 a2 ff ff       	call   c0001a87 <st_dword>
c0007817:	8d 45 38             	lea    eax,[ebp+0x38]
c000781a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000781e:	e8 64 a2 ff ff       	call   c0001a87 <st_dword>
c0007823:	8d 45 44             	lea    eax,[ebp+0x44]
c0007826:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000782a:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c000782e:	e8 54 a2 ff ff       	call   c0001a87 <st_dword>
c0007833:	8d 45 54             	lea    eax,[ebp+0x54]
c0007836:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000783a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000783e:	83 c2 02             	add    edx,0x2
c0007841:	e8 41 a2 ff ff       	call   c0001a87 <st_dword>
c0007846:	8d 45 58             	lea    eax,[ebp+0x58]
c0007849:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c000784d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007851:	e8 31 a2 ff ff       	call   c0001a87 <st_dword>
c0007856:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000785a:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000785f:	89 c6                	mov    esi,eax
c0007861:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007865:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007869:	89 04 24             	mov    DWORD PTR [esp],eax
c000786c:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007870:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007873:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007877:	39 cb                	cmp    ebx,ecx
c0007879:	76 02                	jbe    c000787d <f_mkfs+0x75c>
c000787b:	89 cb                	mov    ebx,ecx
c000787d:	83 ec 0c             	sub    esp,0xc
c0007880:	53                   	push   ebx
c0007881:	57                   	push   edi
c0007882:	56                   	push   esi
c0007883:	55                   	push   ebp
c0007884:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007888:	e8 4f a1 ff ff       	call   c00019dc <disk_write>
c000788d:	83 c4 20             	add    esp,0x20
c0007890:	85 c0                	test   eax,eax
c0007892:	0f 85 3a 09 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007898:	31 d2                	xor    edx,edx
c000789a:	b9 00 02 00 00       	mov    ecx,0x200
c000789f:	89 e8                	mov    eax,ebp
c00078a1:	e8 ff a1 ff ff       	call   c0001aa5 <mem_set>
c00078a6:	31 d2                	xor    edx,edx
c00078a8:	01 de                	add    esi,ebx
c00078aa:	11 d7                	adc    edi,edx
c00078ac:	29 1c 24             	sub    DWORD PTR [esp],ebx
c00078af:	75 bf                	jne    c0007870 <f_mkfs+0x74f>
c00078b1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00078b5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00078b9:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c00078c1:	b9 00 02 00 00       	mov    ecx,0x200
c00078c6:	31 d2                	xor    edx,edx
c00078c8:	89 e8                	mov    eax,ebp
c00078ca:	e8 d6 a1 ff ff       	call   c0001aa5 <mem_set>
c00078cf:	b9 0b 00 00 00       	mov    ecx,0xb
c00078d4:	ba 00 7e 02 c0       	mov    edx,0xc0027e00
c00078d9:	89 e8                	mov    eax,ebp
c00078db:	e8 b0 a1 ff ff       	call   c0001a90 <mem_cpy>
c00078e0:	8d 45 40             	lea    eax,[ebp+0x40]
c00078e3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00078e7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00078eb:	e8 9a a1 ff ff       	call   c0001a8a <st_qword>
c00078f0:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00078f4:	8d 45 48             	lea    eax,[ebp+0x48]
c00078f7:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00078fb:	e8 8a a1 ff ff       	call   c0001a8a <st_qword>
c0007900:	8d 45 50             	lea    eax,[ebp+0x50]
c0007903:	ba 20 00 00 00       	mov    edx,0x20
c0007908:	e8 7a a1 ff ff       	call   c0001a87 <st_dword>
c000790d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007911:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007915:	e8 6d a1 ff ff       	call   c0001a87 <st_dword>
c000791a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000791e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007922:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007926:	e8 5c a1 ff ff       	call   c0001a87 <st_dword>
c000792b:	8d 45 5c             	lea    eax,[ebp+0x5c]
c000792e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007932:	e8 50 a1 ff ff       	call   c0001a87 <st_dword>
c0007937:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000793b:	8d 50 02             	lea    edx,[eax+0x2]
c000793e:	8d 45 60             	lea    eax,[ebp+0x60]
c0007941:	e8 41 a1 ff ff       	call   c0001a87 <st_dword>
c0007946:	8d 45 64             	lea    eax,[ebp+0x64]
c0007949:	ba 00 00 21 50       	mov    edx,0x50210000
c000794e:	e8 34 a1 ff ff       	call   c0001a87 <st_dword>
c0007953:	8d 45 68             	lea    eax,[ebp+0x68]
c0007956:	ba 00 01 00 00       	mov    edx,0x100
c000795b:	e8 23 a1 ff ff       	call   c0001a83 <st_word>
c0007960:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007964:	b8 0a 00 00 00       	mov    eax,0xa
c0007969:	48                   	dec    eax
c000796a:	74 05                	je     c0007971 <f_mkfs+0x850>
c000796c:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c000796f:	eb f8                	jmp    c0007969 <f_mkfs+0x848>
c0007971:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007975:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007979:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000797d:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007981:	74 05                	je     c0007988 <f_mkfs+0x867>
c0007983:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007986:	eb f5                	jmp    c000797d <f_mkfs+0x85c>
c0007988:	8d 45 78             	lea    eax,[ebp+0x78]
c000798b:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007990:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007996:	31 db                	xor    ebx,ebx
c0007998:	e8 e6 a0 ff ff       	call   c0001a83 <st_word>
c000799d:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c00079a3:	ba 55 aa 00 00       	mov    edx,0xaa55
c00079a8:	89 04 24             	mov    DWORD PTR [esp],eax
c00079ab:	e8 d3 a0 ff ff       	call   c0001a83 <st_word>
c00079b0:	31 c9                	xor    ecx,ecx
c00079b2:	8d 41 96             	lea    eax,[ecx-0x6a]
c00079b5:	83 f8 01             	cmp    eax,0x1
c00079b8:	76 13                	jbe    c00079cd <f_mkfs+0x8ac>
c00079ba:	83 f9 70             	cmp    ecx,0x70
c00079bd:	74 0e                	je     c00079cd <f_mkfs+0x8ac>
c00079bf:	89 da                	mov    edx,ebx
c00079c1:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c00079c6:	e8 41 a5 ff ff       	call   c0001f0c <xsum32>
c00079cb:	89 c3                	mov    ebx,eax
c00079cd:	41                   	inc    ecx
c00079ce:	81 f9 00 02 00 00    	cmp    ecx,0x200
c00079d4:	75 dc                	jne    c00079b2 <f_mkfs+0x891>
c00079d6:	89 f0                	mov    eax,esi
c00079d8:	89 fa                	mov    edx,edi
c00079da:	83 c0 01             	add    eax,0x1
c00079dd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00079e1:	83 d2 00             	adc    edx,0x0
c00079e4:	83 ec 0c             	sub    esp,0xc
c00079e7:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00079eb:	6a 01                	push   0x1
c00079ed:	57                   	push   edi
c00079ee:	56                   	push   esi
c00079ef:	55                   	push   ebp
c00079f0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079f4:	e8 e3 9f ff ff       	call   c00019dc <disk_write>
c00079f9:	83 c4 20             	add    esp,0x20
c00079fc:	85 c0                	test   eax,eax
c00079fe:	0f 85 ce 07 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007a04:	31 d2                	xor    edx,edx
c0007a06:	b9 00 02 00 00       	mov    ecx,0x200
c0007a0b:	89 e8                	mov    eax,ebp
c0007a0d:	e8 93 a0 ff ff       	call   c0001aa5 <mem_set>
c0007a12:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007a17:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a1a:	e8 64 a0 ff ff       	call   c0001a83 <st_word>
c0007a1f:	89 f0                	mov    eax,esi
c0007a21:	89 fa                	mov    edx,edi
c0007a23:	83 c0 09             	add    eax,0x9
c0007a26:	83 d2 00             	adc    edx,0x0
c0007a29:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a2c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007a30:	31 c9                	xor    ecx,ecx
c0007a32:	41                   	inc    ecx
c0007a33:	89 da                	mov    edx,ebx
c0007a35:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a3a:	e8 cd a4 ff ff       	call   c0001f0c <xsum32>
c0007a3f:	89 c3                	mov    ebx,eax
c0007a41:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a47:	75 e9                	jne    c0007a32 <f_mkfs+0x911>
c0007a49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007a4d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007a51:	83 c0 01             	add    eax,0x1
c0007a54:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007a58:	83 d2 00             	adc    edx,0x0
c0007a5b:	83 ec 0c             	sub    esp,0xc
c0007a5e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007a62:	6a 01                	push   0x1
c0007a64:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a68:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a6c:	55                   	push   ebp
c0007a6d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a71:	e8 66 9f ff ff       	call   c00019dc <disk_write>
c0007a76:	83 c4 20             	add    esp,0x20
c0007a79:	85 c0                	test   eax,eax
c0007a7b:	0f 85 51 07 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007a81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a85:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007a89:	75 09                	jne    c0007a94 <f_mkfs+0x973>
c0007a8b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a8e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007a92:	74 12                	je     c0007aa6 <f_mkfs+0x985>
c0007a94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a98:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007a9c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007aa0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007aa4:	eb 8a                	jmp    c0007a30 <f_mkfs+0x90f>
c0007aa6:	31 d2                	xor    edx,edx
c0007aa8:	b9 00 02 00 00       	mov    ecx,0x200
c0007aad:	89 e8                	mov    eax,ebp
c0007aaf:	e8 f1 9f ff ff       	call   c0001aa5 <mem_set>
c0007ab4:	83 c6 0b             	add    esi,0xb
c0007ab7:	83 d7 00             	adc    edi,0x0
c0007aba:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007abe:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007ac2:	31 c9                	xor    ecx,ecx
c0007ac4:	41                   	inc    ecx
c0007ac5:	89 da                	mov    edx,ebx
c0007ac7:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007acc:	e8 3b a4 ff ff       	call   c0001f0c <xsum32>
c0007ad1:	89 c3                	mov    ebx,eax
c0007ad3:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007ad9:	75 e9                	jne    c0007ac4 <f_mkfs+0x9a3>
c0007adb:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ade:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ae2:	83 c6 01             	add    esi,0x1
c0007ae5:	83 d7 00             	adc    edi,0x0
c0007ae8:	83 ec 0c             	sub    esp,0xc
c0007aeb:	6a 01                	push   0x1
c0007aed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007af1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007af5:	55                   	push   ebp
c0007af6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007afa:	e8 dd 9e ff ff       	call   c00019dc <disk_write>
c0007aff:	83 c4 20             	add    esp,0x20
c0007b02:	85 c0                	test   eax,eax
c0007b04:	0f 85 c8 06 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007b0a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007b0e:	75 06                	jne    c0007b16 <f_mkfs+0x9f5>
c0007b10:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007b14:	74 09                	je     c0007b1f <f_mkfs+0x9fe>
c0007b16:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b19:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007b1d:	eb a3                	jmp    c0007ac2 <f_mkfs+0x9a1>
c0007b1f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007b23:	89 da                	mov    edx,ebx
c0007b25:	01 e8                	add    eax,ebp
c0007b27:	e8 5b 9f ff ff       	call   c0001a87 <st_dword>
c0007b2c:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007b31:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007b39:	75 e4                	jne    c0007b1f <f_mkfs+0x9fe>
c0007b3b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b3e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b42:	83 c6 02             	add    esi,0x2
c0007b45:	83 d7 00             	adc    edi,0x0
c0007b48:	83 ec 0c             	sub    esp,0xc
c0007b4b:	6a 01                	push   0x1
c0007b4d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b51:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b55:	55                   	push   ebp
c0007b56:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b5a:	e8 7d 9e ff ff       	call   c00019dc <disk_write>
c0007b5f:	83 c4 20             	add    esp,0x20
c0007b62:	85 c0                	test   eax,eax
c0007b64:	0f 85 68 06 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007b6a:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007b6f:	74 0d                	je     c0007b7e <f_mkfs+0xa5d>
c0007b71:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007b79:	e9 43 fd ff ff       	jmp    c00078c1 <f_mkfs+0x7a0>
c0007b7e:	b1 07                	mov    cl,0x7
c0007b80:	e9 e3 05 00 00       	jmp    c0008168 <f_mkfs+0x1047>
c0007b85:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007b8a:	0f 85 4f 02 00 00    	jne    c0007ddf <f_mkfs+0xcbe>
c0007b90:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007b95:	0f 86 22 02 00 00    	jbe    c0007dbd <f_mkfs+0xc9c>
c0007b9b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ba0:	0f 85 81 06 00 00    	jne    c0008227 <f_mkfs+0x1106>
c0007ba6:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007ba9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007bad:	83 f8 40             	cmp    eax,0x40
c0007bb0:	0f 87 51 06 00 00    	ja     c0008207 <f_mkfs+0x10e6>
c0007bb6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007bba:	85 ff                	test   edi,edi
c0007bbc:	75 1c                	jne    c0007bda <f_mkfs+0xab9>
c0007bbe:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007bc1:	ba 00 7d 02 c0       	mov    edx,0xc0027d00
c0007bc6:	c1 e9 0c             	shr    ecx,0xc
c0007bc9:	bf 01 00 00 00       	mov    edi,0x1
c0007bce:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007bd1:	66 85 c0             	test   ax,ax
c0007bd4:	0f 85 95 01 00 00    	jne    c0007d6f <f_mkfs+0xc4e>
c0007bda:	31 d2                	xor    edx,edx
c0007bdc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007bdf:	f7 f7                	div    edi
c0007be1:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007be6:	0f 86 95 01 00 00    	jbe    c0007d81 <f_mkfs+0xc60>
c0007bec:	83 c0 02             	add    eax,0x2
c0007bef:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007bf4:	01 c0                	add    eax,eax
c0007bf6:	05 ff 01 00 00       	add    eax,0x1ff
c0007bfb:	be 01 00 00 00       	mov    esi,0x1
c0007c00:	c1 e8 09             	shr    eax,0x9
c0007c03:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007c07:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c0b:	c1 e0 05             	shl    eax,0x5
c0007c0e:	c1 e8 09             	shr    eax,0x9
c0007c11:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007c15:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007c1a:	31 d2                	xor    edx,edx
c0007c1c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007c20:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007c24:	89 f0                	mov    eax,esi
c0007c26:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007c2a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007c2e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007c32:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007c36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007c3a:	31 d2                	xor    edx,edx
c0007c3c:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007c41:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007c45:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007c49:	31 db                	xor    ebx,ebx
c0007c4b:	01 c8                	add    eax,ecx
c0007c4d:	11 da                	adc    edx,ebx
c0007c4f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007c53:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007c57:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007c5b:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007c5f:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007c63:	f7 da                	neg    edx
c0007c65:	21 d1                	and    ecx,edx
c0007c67:	29 d9                	sub    ecx,ebx
c0007c69:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007c6e:	0f 85 20 01 00 00    	jne    c0007d94 <f_mkfs+0xc73>
c0007c74:	31 db                	xor    ebx,ebx
c0007c76:	01 ce                	add    esi,ecx
c0007c78:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007c7c:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007c80:	31 d2                	xor    edx,edx
c0007c82:	89 f8                	mov    eax,edi
c0007c84:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007c88:	c1 e0 04             	shl    eax,0x4
c0007c8b:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007c8f:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007c93:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007c97:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007c9b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007c9e:	19 d3                	sbb    ebx,edx
c0007ca0:	0f 82 40 01 00 00    	jb     c0007de6 <f_mkfs+0xcc5>
c0007ca6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ca9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007cad:	89 c8                	mov    eax,ecx
c0007caf:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007cb4:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007cb8:	29 f0                	sub    eax,esi
c0007cba:	29 d0                	sub    eax,edx
c0007cbc:	31 d2                	xor    edx,edx
c0007cbe:	f7 f7                	div    edi
c0007cc0:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007cc5:	89 c3                	mov    ebx,eax
c0007cc7:	0f 85 b8 fe ff ff    	jne    c0007b85 <f_mkfs+0xa64>
c0007ccd:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007cd2:	0f 87 1d 01 00 00    	ja     c0007df5 <f_mkfs+0xcd4>
c0007cd8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007cdd:	0f 85 03 01 00 00    	jne    c0007de6 <f_mkfs+0xcc5>
c0007ce3:	83 ff 01             	cmp    edi,0x1
c0007ce6:	0f 86 fa 00 00 00    	jbe    c0007de6 <f_mkfs+0xcc5>
c0007cec:	d1 ef                	shr    edi,1
c0007cee:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007cf2:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007cf6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007cf9:	85 db                	test   ebx,ebx
c0007cfb:	75 2d                	jne    c0007d2a <f_mkfs+0xc09>
c0007cfd:	89 cb                	mov    ebx,ecx
c0007cff:	ba 10 7d 02 c0       	mov    edx,0xc0027d10
c0007d04:	c1 eb 11             	shr    ebx,0x11
c0007d07:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007d0f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007d12:	66 85 c0             	test   ax,ax
c0007d15:	74 11                	je     c0007d28 <f_mkfs+0xc07>
c0007d17:	83 c2 02             	add    edx,0x2
c0007d1a:	39 d8                	cmp    eax,ebx
c0007d1c:	77 0a                	ja     c0007d28 <f_mkfs+0xc07>
c0007d1e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007d22:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007d26:	eb e7                	jmp    c0007d0f <f_mkfs+0xbee>
c0007d28:	31 db                	xor    ebx,ebx
c0007d2a:	31 d2                	xor    edx,edx
c0007d2c:	89 c8                	mov    eax,ecx
c0007d2e:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007d32:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007d39:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007d3e:	c1 ea 09             	shr    edx,0x9
c0007d41:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007d46:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d4a:	0f 87 96 00 00 00    	ja     c0007de6 <f_mkfs+0xcc5>
c0007d50:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d54:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007d5c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007d60:	be 20 00 00 00       	mov    esi,0x20
c0007d65:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007d6a:	e9 a6 fe ff ff       	jmp    c0007c15 <f_mkfs+0xaf4>
c0007d6f:	83 c2 02             	add    edx,0x2
c0007d72:	39 c8                	cmp    eax,ecx
c0007d74:	0f 87 60 fe ff ff    	ja     c0007bda <f_mkfs+0xab9>
c0007d7a:	01 ff                	add    edi,edi
c0007d7c:	e9 4d fe ff ff       	jmp    c0007bce <f_mkfs+0xaad>
c0007d81:	8d 04 40             	lea    eax,[eax+eax*2]
c0007d84:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d89:	40                   	inc    eax
c0007d8a:	d1 e8                	shr    eax,1
c0007d8c:	83 c0 03             	add    eax,0x3
c0007d8f:	e9 62 fe ff ff       	jmp    c0007bf6 <f_mkfs+0xad5>
c0007d94:	31 d2                	xor    edx,edx
c0007d96:	89 c8                	mov    eax,ecx
c0007d98:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007d9c:	85 d2                	test   edx,edx
c0007d9e:	74 0c                	je     c0007dac <f_mkfs+0xc8b>
c0007da0:	49                   	dec    ecx
c0007da1:	46                   	inc    esi
c0007da2:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007da7:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007dac:	89 c8                	mov    eax,ecx
c0007dae:	31 d2                	xor    edx,edx
c0007db0:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007db4:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007db8:	e9 c3 fe ff ff       	jmp    c0007c80 <f_mkfs+0xb5f>
c0007dbd:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dc2:	77 31                	ja     c0007df5 <f_mkfs+0xcd4>
c0007dc4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007dc9:	75 1b                	jne    c0007de6 <f_mkfs+0xcc5>
c0007dcb:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dd2:	3d 80 00 00 00       	cmp    eax,0x80
c0007dd7:	0f 86 d9 fd ff ff    	jbe    c0007bb6 <f_mkfs+0xa95>
c0007ddd:	eb 07                	jmp    c0007de6 <f_mkfs+0xcc5>
c0007ddf:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007de4:	76 0a                	jbe    c0007df0 <f_mkfs+0xccf>
c0007de6:	bb 0e 00 00 00       	mov    ebx,0xe
c0007deb:	e9 ff 03 00 00       	jmp    c00081ef <f_mkfs+0x10ce>
c0007df0:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007df5:	31 d2                	xor    edx,edx
c0007df7:	b9 00 02 00 00       	mov    ecx,0x200
c0007dfc:	89 e8                	mov    eax,ebp
c0007dfe:	e8 a2 9c ff ff       	call   c0001aa5 <mem_set>
c0007e03:	b9 0b 00 00 00       	mov    ecx,0xb
c0007e08:	ba 22 7e 02 c0       	mov    edx,0xc0027e22
c0007e0d:	89 e8                	mov    eax,ebp
c0007e0f:	e8 7c 9c ff ff       	call   c0001a90 <mem_cpy>
c0007e14:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007e17:	ba 00 02 00 00       	mov    edx,0x200
c0007e1c:	e8 62 9c ff ff       	call   c0001a83 <st_word>
c0007e21:	89 f8                	mov    eax,edi
c0007e23:	0f b7 d6             	movzx  edx,si
c0007e26:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007e29:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007e2c:	e8 52 9c ff ff       	call   c0001a83 <st_word>
c0007e31:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007e35:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e3a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007e3d:	75 08                	jne    c0007e47 <f_mkfs+0xd26>
c0007e3f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007e47:	8d 45 11             	lea    eax,[ebp+0x11]
c0007e4a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007e4e:	e8 30 9c ff ff       	call   c0001a83 <st_word>
c0007e53:	b8 ff ff 00 00       	mov    eax,0xffff
c0007e58:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007e5c:	39 d0                	cmp    eax,edx
c0007e5e:	b8 00 00 00 00       	mov    eax,0x0
c0007e63:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007e67:	72 0a                	jb     c0007e73 <f_mkfs+0xd52>
c0007e69:	8d 45 13             	lea    eax,[ebp+0x13]
c0007e6c:	e8 12 9c ff ff       	call   c0001a83 <st_word>
c0007e71:	eb 08                	jmp    c0007e7b <f_mkfs+0xd5a>
c0007e73:	8d 45 20             	lea    eax,[ebp+0x20]
c0007e76:	e8 0c 9c ff ff       	call   c0001a87 <st_dword>
c0007e7b:	8d 45 18             	lea    eax,[ebp+0x18]
c0007e7e:	ba 3f 00 00 00       	mov    edx,0x3f
c0007e83:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007e87:	e8 f7 9b ff ff       	call   c0001a83 <st_word>
c0007e8c:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007e8f:	ba ff 00 00 00       	mov    edx,0xff
c0007e94:	e8 ea 9b ff ff       	call   c0001a83 <st_word>
c0007e99:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007e9c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007ea0:	e8 e2 9b ff ff       	call   c0001a87 <st_dword>
c0007ea5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007eaa:	75 57                	jne    c0007f03 <f_mkfs+0xde2>
c0007eac:	8d 45 43             	lea    eax,[ebp+0x43]
c0007eaf:	ba 00 00 21 50       	mov    edx,0x50210000
c0007eb4:	e8 ce 9b ff ff       	call   c0001a87 <st_dword>
c0007eb9:	8d 45 24             	lea    eax,[ebp+0x24]
c0007ebc:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ec0:	e8 c2 9b ff ff       	call   c0001a87 <st_dword>
c0007ec5:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007ec8:	ba 02 00 00 00       	mov    edx,0x2
c0007ecd:	e8 b5 9b ff ff       	call   c0001a87 <st_dword>
c0007ed2:	8d 45 30             	lea    eax,[ebp+0x30]
c0007ed5:	ba 01 00 00 00       	mov    edx,0x1
c0007eda:	e8 a4 9b ff ff       	call   c0001a83 <st_word>
c0007edf:	8d 45 32             	lea    eax,[ebp+0x32]
c0007ee2:	ba 06 00 00 00       	mov    edx,0x6
c0007ee7:	e8 97 9b ff ff       	call   c0001a83 <st_word>
c0007eec:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007ef0:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007ef4:	8d 45 47             	lea    eax,[ebp+0x47]
c0007ef7:	b9 13 00 00 00       	mov    ecx,0x13
c0007efc:	ba 2e 7e 02 c0       	mov    edx,0xc0027e2e
c0007f01:	eb 2f                	jmp    c0007f32 <f_mkfs+0xe11>
c0007f03:	8d 45 27             	lea    eax,[ebp+0x27]
c0007f06:	ba 00 00 21 50       	mov    edx,0x50210000
c0007f0b:	e8 77 9b ff ff       	call   c0001a87 <st_dword>
c0007f10:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007f15:	8d 45 16             	lea    eax,[ebp+0x16]
c0007f18:	e8 66 9b ff ff       	call   c0001a83 <st_word>
c0007f1d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007f21:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007f25:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007f28:	b9 13 00 00 00       	mov    ecx,0x13
c0007f2d:	ba 42 7e 02 c0       	mov    edx,0xc0027e42
c0007f32:	e8 59 9b ff ff       	call   c0001a90 <mem_cpy>
c0007f37:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007f3d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f42:	89 f0                	mov    eax,esi
c0007f44:	e8 3a 9b ff ff       	call   c0001a83 <st_word>
c0007f49:	83 ec 0c             	sub    esp,0xc
c0007f4c:	6a 01                	push   0x1
c0007f4e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f52:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f56:	55                   	push   ebp
c0007f57:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f5b:	e8 7c 9a ff ff       	call   c00019dc <disk_write>
c0007f60:	83 c4 20             	add    esp,0x20
c0007f63:	85 c0                	test   eax,eax
c0007f65:	0f 85 67 02 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007f6b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f70:	0f 85 b7 00 00 00    	jne    c000802d <f_mkfs+0xf0c>
c0007f76:	83 ec 0c             	sub    esp,0xc
c0007f79:	6a 01                	push   0x1
c0007f7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f7f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f83:	83 c0 06             	add    eax,0x6
c0007f86:	83 d2 00             	adc    edx,0x0
c0007f89:	52                   	push   edx
c0007f8a:	50                   	push   eax
c0007f8b:	55                   	push   ebp
c0007f8c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f90:	e8 47 9a ff ff       	call   c00019dc <disk_write>
c0007f95:	83 c4 20             	add    esp,0x20
c0007f98:	b9 00 02 00 00       	mov    ecx,0x200
c0007f9d:	31 d2                	xor    edx,edx
c0007f9f:	89 e8                	mov    eax,ebp
c0007fa1:	e8 ff 9a ff ff       	call   c0001aa5 <mem_set>
c0007fa6:	ba 52 52 61 41       	mov    edx,0x41615252
c0007fab:	89 e8                	mov    eax,ebp
c0007fad:	e8 d5 9a ff ff       	call   c0001a87 <st_dword>
c0007fb2:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007fb8:	ba 72 72 41 61       	mov    edx,0x61417272
c0007fbd:	e8 c5 9a ff ff       	call   c0001a87 <st_dword>
c0007fc2:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007fc5:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0007fcb:	e8 b7 9a ff ff       	call   c0001a87 <st_dword>
c0007fd0:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0007fd6:	ba 02 00 00 00       	mov    edx,0x2
c0007fdb:	e8 a7 9a ff ff       	call   c0001a87 <st_dword>
c0007fe0:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007fe5:	89 f0                	mov    eax,esi
c0007fe7:	e8 97 9a ff ff       	call   c0001a83 <st_word>
c0007fec:	83 ec 0c             	sub    esp,0xc
c0007fef:	6a 01                	push   0x1
c0007ff1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ff5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007ff9:	83 c0 07             	add    eax,0x7
c0007ffc:	83 d2 00             	adc    edx,0x0
c0007fff:	52                   	push   edx
c0008000:	50                   	push   eax
c0008001:	55                   	push   ebp
c0008002:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008006:	e8 d1 99 ff ff       	call   c00019dc <disk_write>
c000800b:	83 c4 14             	add    esp,0x14
c000800e:	6a 01                	push   0x1
c0008010:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008014:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008018:	83 c0 01             	add    eax,0x1
c000801b:	83 d2 00             	adc    edx,0x0
c000801e:	52                   	push   edx
c000801f:	50                   	push   eax
c0008020:	55                   	push   ebp
c0008021:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008025:	e8 b2 99 ff ff       	call   c00019dc <disk_write>
c000802a:	83 c4 20             	add    esp,0x20
c000802d:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008034:	31 d2                	xor    edx,edx
c0008036:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000803c:	31 db                	xor    ebx,ebx
c000803e:	89 e8                	mov    eax,ebp
c0008040:	e8 60 9a ff ff       	call   c0001aa5 <mem_set>
c0008045:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000804a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008051:	0f 94 c3             	sete   bl
c0008054:	4b                   	dec    ebx
c0008055:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c000805b:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008061:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008066:	75 21                	jne    c0008089 <f_mkfs+0xf68>
c0008068:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c000806d:	89 e8                	mov    eax,ebp
c000806f:	e8 13 9a ff ff       	call   c0001a87 <st_dword>
c0008074:	8d 45 04             	lea    eax,[ebp+0x4]
c0008077:	83 ca ff             	or     edx,0xffffffff
c000807a:	e8 08 9a ff ff       	call   c0001a87 <st_dword>
c000807f:	8d 45 08             	lea    eax,[ebp+0x8]
c0008082:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008087:	eb 04                	jmp    c000808d <f_mkfs+0xf6c>
c0008089:	89 da                	mov    edx,ebx
c000808b:	89 e8                	mov    eax,ebp
c000808d:	e8 f5 99 ff ff       	call   c0001a87 <st_dword>
c0008092:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008096:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000809a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000809e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00080a2:	39 ce                	cmp    esi,ecx
c00080a4:	76 02                	jbe    c00080a8 <f_mkfs+0xf87>
c00080a6:	89 ce                	mov    esi,ecx
c00080a8:	83 ec 0c             	sub    esp,0xc
c00080ab:	56                   	push   esi
c00080ac:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080b0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080b4:	55                   	push   ebp
c00080b5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080b9:	e8 1e 99 ff ff       	call   c00019dc <disk_write>
c00080be:	83 c4 20             	add    esp,0x20
c00080c1:	85 c0                	test   eax,eax
c00080c3:	0f 85 09 01 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c00080c9:	31 d2                	xor    edx,edx
c00080cb:	b9 00 02 00 00       	mov    ecx,0x200
c00080d0:	89 e8                	mov    eax,ebp
c00080d2:	e8 ce 99 ff ff       	call   c0001aa5 <mem_set>
c00080d7:	31 d2                	xor    edx,edx
c00080d9:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00080dd:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00080e1:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00080e5:	75 b3                	jne    c000809a <f_mkfs+0xf79>
c00080e7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00080ea:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00080f1:	40                   	inc    eax
c00080f2:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c00080f6:	0f 87 65 ff ff ff    	ja     c0008061 <f_mkfs+0xf40>
c00080fc:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008101:	74 04                	je     c0008107 <f_mkfs+0xfe6>
c0008103:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008107:	89 fb                	mov    ebx,edi
c0008109:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000810d:	76 04                	jbe    c0008113 <f_mkfs+0xff2>
c000810f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008113:	83 ec 0c             	sub    esp,0xc
c0008116:	53                   	push   ebx
c0008117:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000811b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000811f:	55                   	push   ebp
c0008120:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008124:	e8 b3 98 ff ff       	call   c00019dc <disk_write>
c0008129:	83 c4 20             	add    esp,0x20
c000812c:	85 c0                	test   eax,eax
c000812e:	0f 85 9e 00 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0008134:	31 d2                	xor    edx,edx
c0008136:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000813a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000813e:	29 df                	sub    edi,ebx
c0008140:	75 c5                	jne    c0008107 <f_mkfs+0xfe6>
c0008142:	b1 0c                	mov    cl,0xc
c0008144:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008149:	74 1d                	je     c0008168 <f_mkfs+0x1047>
c000814b:	b8 ff ff 00 00       	mov    eax,0xffff
c0008150:	b1 06                	mov    cl,0x6
c0008152:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c0008156:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c000815a:	72 0c                	jb     c0008168 <f_mkfs+0x1047>
c000815c:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008161:	0f 94 c1             	sete   cl
c0008164:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c0008168:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c000816d:	75 4c                	jne    c00081bb <f_mkfs+0x109a>
c000816f:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008173:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0008177:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000817e:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008185:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008190:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c000819b:	0f b6 c9             	movzx  ecx,cl
c000819e:	83 ec 0c             	sub    esp,0xc
c00081a1:	55                   	push   ebp
c00081a2:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00081a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00081ad:	e8 2f c2 ff ff       	call   c00043e1 <create_partition>
c00081b2:	83 c4 10             	add    esp,0x10
c00081b5:	89 c3                	mov    ebx,eax
c00081b7:	85 c0                	test   eax,eax
c00081b9:	75 34                	jne    c00081ef <f_mkfs+0x10ce>
c00081bb:	31 db                	xor    ebx,ebx
c00081bd:	50                   	push   eax
c00081be:	6a 00                	push   0x0
c00081c0:	6a 00                	push   0x0
c00081c2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00081c6:	e8 27 98 ff ff       	call   c00019f2 <disk_ioctl>
c00081cb:	83 c4 10             	add    esp,0x10
c00081ce:	85 c0                	test   eax,eax
c00081d0:	74 1d                	je     c00081ef <f_mkfs+0x10ce>
c00081d2:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081da:	75 0c                	jne    c00081e8 <f_mkfs+0x10c7>
c00081dc:	83 ec 0c             	sub    esp,0xc
c00081df:	55                   	push   ebp
c00081e0:	e8 75 00 00 00       	call   c000825a <ff_memfree>
c00081e5:	83 c4 10             	add    esp,0x10
c00081e8:	bb 01 00 00 00       	mov    ebx,0x1
c00081ed:	eb 48                	jmp    c0008237 <f_mkfs+0x1116>
c00081ef:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081f7:	75 3e                	jne    c0008237 <f_mkfs+0x1116>
c00081f9:	83 ec 0c             	sub    esp,0xc
c00081fc:	55                   	push   ebp
c00081fd:	e8 58 00 00 00       	call   c000825a <ff_memfree>
c0008202:	83 c4 10             	add    esp,0x10
c0008205:	eb 30                	jmp    c0008237 <f_mkfs+0x1116>
c0008207:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000820c:	0f 85 eb fa ff ff    	jne    c0007cfd <f_mkfs+0xbdc>
c0008212:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008216:	81 ff 80 00 00 00    	cmp    edi,0x80
c000821c:	0f 86 b8 f9 ff ff    	jbe    c0007bda <f_mkfs+0xab9>
c0008222:	e9 bf fb ff ff       	jmp    c0007de6 <f_mkfs+0xcc5>
c0008227:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000822c:	0f 85 c0 fa ff ff    	jne    c0007cf2 <f_mkfs+0xbd1>
c0008232:	e9 af fb ff ff       	jmp    c0007de6 <f_mkfs+0xcc5>
c0008237:	81 c4 9c 00 00 00    	add    esp,0x9c
c000823d:	89 d8                	mov    eax,ebx
c000823f:	5b                   	pop    ebx
c0008240:	5e                   	pop    esi
c0008241:	5f                   	pop    edi
c0008242:	5d                   	pop    ebp
c0008243:	c3                   	ret    

c0008244 <ff_memalloc>:
c0008244:	83 ec 0c             	sub    esp,0xc
c0008247:	83 ec 0c             	sub    esp,0xc
c000824a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000824e:	e8 81 72 00 00       	call   c000f4d4 <malloc>
c0008253:	83 c4 10             	add    esp,0x10
c0008256:	83 c4 0c             	add    esp,0xc
c0008259:	c3                   	ret    

c000825a <ff_memfree>:
c000825a:	83 ec 0c             	sub    esp,0xc
c000825d:	83 ec 0c             	sub    esp,0xc
c0008260:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008264:	e8 7b 72 00 00       	call   c000f4e4 <free>
c0008269:	83 c4 10             	add    esp,0x10
c000826c:	90                   	nop
c000826d:	83 c4 0c             	add    esp,0xc
c0008270:	c3                   	ret    

c0008271 <ff_uni2oem>:
c0008271:	83 ec 14             	sub    esp,0x14
c0008274:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008278:	66 89 04 24          	mov    WORD PTR [esp],ax
c000827c:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008283:	c7 44 24 0c 60 81 02 c0 	mov    DWORD PTR [esp+0xc],0xc0028160
c000828b:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008290:	77 0b                	ja     c000829d <ff_uni2oem+0x2c>
c0008292:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008296:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000829b:	eb 5b                	jmp    c00082f8 <ff_uni2oem+0x87>
c000829d:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00082a5:	77 51                	ja     c00082f8 <ff_uni2oem+0x87>
c00082a7:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00082ad:	75 49                	jne    c00082f8 <ff_uni2oem+0x87>
c00082af:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082b6:	eb 0b                	jmp    c00082c3 <ff_uni2oem+0x52>
c00082b8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082bd:	40                   	inc    eax
c00082be:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082c3:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00082c9:	77 1b                	ja     c00082e6 <ff_uni2oem+0x75>
c00082cb:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00082d0:	01 c0                	add    eax,eax
c00082d2:	89 c2                	mov    edx,eax
c00082d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082d8:	01 d0                	add    eax,edx
c00082da:	66 8b 00             	mov    ax,WORD PTR [eax]
c00082dd:	0f b7 c0             	movzx  eax,ax
c00082e0:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00082e4:	75 d2                	jne    c00082b8 <ff_uni2oem+0x47>
c00082e6:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082eb:	83 e8 80             	sub    eax,0xffffff80
c00082ee:	25 ff 00 00 00       	and    eax,0xff
c00082f3:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082f8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082fd:	83 c4 14             	add    esp,0x14
c0008300:	c3                   	ret    

c0008301 <ff_oem2uni>:
c0008301:	83 ec 18             	sub    esp,0x18
c0008304:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008308:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000830c:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008311:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008315:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000831c:	c7 44 24 10 60 81 02 c0 	mov    DWORD PTR [esp+0x10],0xc0028160
c0008324:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000832a:	77 0b                	ja     c0008337 <ff_oem2uni+0x36>
c000832c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008330:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008335:	eb 2d                	jmp    c0008364 <ff_oem2uni+0x63>
c0008337:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000833d:	75 25                	jne    c0008364 <ff_oem2uni+0x63>
c000833f:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008346:	77 1c                	ja     c0008364 <ff_oem2uni+0x63>
c0008348:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000834d:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008352:	01 c0                	add    eax,eax
c0008354:	89 c2                	mov    edx,eax
c0008356:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000835a:	01 d0                	add    eax,edx
c000835c:	66 8b 00             	mov    ax,WORD PTR [eax]
c000835f:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008364:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0008369:	83 c4 18             	add    esp,0x18
c000836c:	c3                   	ret    

c000836d <ff_wtoupper>:
c000836d:	83 ec 10             	sub    esp,0x10
c0008370:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0008378:	0f 87 3e 01 00 00    	ja     c00084bc <ff_wtoupper+0x14f>
c000837e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008382:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008387:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c000838e:	77 07                	ja     c0008397 <ff_wtoupper+0x2a>
c0008390:	b8 60 7f 02 c0       	mov    eax,0xc0027f60
c0008395:	eb 05                	jmp    c000839c <ff_wtoupper+0x2f>
c0008397:	b8 a0 7e 02 c0       	mov    eax,0xc0027ea0
c000839c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083a4:	8d 50 02             	lea    edx,[eax+0x2]
c00083a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083ab:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083ae:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00083b3:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00083b9:	0f 84 f4 00 00 00    	je     c00084b3 <ff_wtoupper+0x146>
c00083bf:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083c4:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00083c9:	0f 82 e4 00 00 00    	jb     c00084b3 <ff_wtoupper+0x146>
c00083cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083d3:	8d 50 02             	lea    edx,[eax+0x2]
c00083d6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083da:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083dd:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00083e2:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00083e7:	66 c1 e8 08          	shr    ax,0x8
c00083eb:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c00083f0:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c00083f7:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00083fc:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008401:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008406:	01 ca                	add    edx,ecx
c0008408:	39 d0                	cmp    eax,edx
c000840a:	0f 8d 86 00 00 00    	jge    c0008496 <ff_wtoupper+0x129>
c0008410:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008415:	83 f8 08             	cmp    eax,0x8
c0008418:	0f 87 94 00 00 00    	ja     c00084b2 <ff_wtoupper+0x145>
c000841e:	8b 04 85 60 7e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd81a0]
c0008425:	ff e0                	jmp    eax
c0008427:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000842c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008431:	29 c2                	sub    edx,eax
c0008433:	89 d0                	mov    eax,edx
c0008435:	01 c0                	add    eax,eax
c0008437:	89 c2                	mov    edx,eax
c0008439:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000843d:	01 d0                	add    eax,edx
c000843f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008442:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008447:	eb 4b                	jmp    c0008494 <ff_wtoupper+0x127>
c0008449:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000844e:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008452:	83 e0 01             	and    eax,0x1
c0008455:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c000845a:	eb 38                	jmp    c0008494 <ff_wtoupper+0x127>
c000845c:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008462:	eb 30                	jmp    c0008494 <ff_wtoupper+0x127>
c0008464:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c000846a:	eb 28                	jmp    c0008494 <ff_wtoupper+0x127>
c000846c:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008472:	eb 20                	jmp    c0008494 <ff_wtoupper+0x127>
c0008474:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c000847a:	eb 18                	jmp    c0008494 <ff_wtoupper+0x127>
c000847c:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008482:	eb 10                	jmp    c0008494 <ff_wtoupper+0x127>
c0008484:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c000848a:	eb 08                	jmp    c0008494 <ff_wtoupper+0x127>
c000848c:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0008493:	90                   	nop
c0008494:	eb 1c                	jmp    c00084b2 <ff_wtoupper+0x145>
c0008496:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c000849c:	0f 85 fe fe ff ff    	jne    c00083a0 <ff_wtoupper+0x33>
c00084a2:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00084a7:	01 c0                	add    eax,eax
c00084a9:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00084ad:	e9 ee fe ff ff       	jmp    c00083a0 <ff_wtoupper+0x33>
c00084b2:	90                   	nop
c00084b3:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00084b8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00084bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084c0:	83 c4 10             	add    esp,0x10
c00084c3:	c3                   	ret    

c00084c4 <psrc_set_converter>:
c00084c4:	56                   	push   esi
c00084c5:	89 d6                	mov    esi,edx
c00084c7:	53                   	push   ebx
c00084c8:	89 c3                	mov    ebx,eax
c00084ca:	83 ec 0c             	sub    esp,0xc
c00084cd:	52                   	push   edx
c00084ce:	50                   	push   eax
c00084cf:	e8 6f 55 00 00       	call   c000da43 <sinc_set_converter>
c00084d4:	83 c4 10             	add    esp,0x10
c00084d7:	85 c0                	test   eax,eax
c00084d9:	74 25                	je     c0008500 <psrc_set_converter+0x3c>
c00084db:	50                   	push   eax
c00084dc:	50                   	push   eax
c00084dd:	56                   	push   esi
c00084de:	53                   	push   ebx
c00084df:	e8 17 5d 00 00       	call   c000e1fb <zoh_set_converter>
c00084e4:	83 c4 10             	add    esp,0x10
c00084e7:	85 c0                	test   eax,eax
c00084e9:	74 15                	je     c0008500 <psrc_set_converter+0x3c>
c00084eb:	51                   	push   ecx
c00084ec:	51                   	push   ecx
c00084ed:	56                   	push   esi
c00084ee:	53                   	push   ebx
c00084ef:	e8 0f 11 00 00       	call   c0009603 <linear_set_converter>
c00084f4:	83 c4 10             	add    esp,0x10
c00084f7:	ba 0a 00 00 00       	mov    edx,0xa
c00084fc:	85 c0                	test   eax,eax
c00084fe:	75 02                	jne    c0008502 <psrc_set_converter+0x3e>
c0008500:	31 d2                	xor    edx,edx
c0008502:	89 d0                	mov    eax,edx
c0008504:	5a                   	pop    edx
c0008505:	5b                   	pop    ebx
c0008506:	5e                   	pop    esi
c0008507:	c3                   	ret    

c0008508 <src_delete>:
c0008508:	53                   	push   ebx
c0008509:	83 ec 08             	sub    esp,0x8
c000850c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008510:	85 db                	test   ebx,ebx
c0008512:	74 29                	je     c000853d <src_delete+0x35>
c0008514:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008517:	85 c0                	test   eax,eax
c0008519:	74 0c                	je     c0008527 <src_delete+0x1f>
c000851b:	83 ec 0c             	sub    esp,0xc
c000851e:	50                   	push   eax
c000851f:	e8 c0 6f 00 00       	call   c000f4e4 <free>
c0008524:	83 c4 10             	add    esp,0x10
c0008527:	50                   	push   eax
c0008528:	6a 3c                	push   0x3c
c000852a:	6a 00                	push   0x0
c000852c:	53                   	push   ebx
c000852d:	e8 59 81 ff ff       	call   c000068b <memset>
c0008532:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008535:	e8 aa 6f 00 00       	call   c000f4e4 <free>
c000853a:	83 c4 10             	add    esp,0x10
c000853d:	31 c0                	xor    eax,eax
c000853f:	83 c4 08             	add    esp,0x8
c0008542:	5b                   	pop    ebx
c0008543:	c3                   	ret    

c0008544 <src_process>:
c0008544:	55                   	push   ebp
c0008545:	57                   	push   edi
c0008546:	56                   	push   esi
c0008547:	53                   	push   ebx
c0008548:	83 ec 1c             	sub    esp,0x1c
c000854b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000854f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008553:	85 ed                	test   ebp,ebp
c0008555:	0f 84 6f 01 00 00    	je     c00086ca <src_process+0x186>
c000855b:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c000855f:	0f 84 6c 01 00 00    	je     c00086d1 <src_process+0x18d>
c0008565:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c0008569:	0f 84 62 01 00 00    	je     c00086d1 <src_process+0x18d>
c000856f:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c0008576:	0f 85 5c 01 00 00    	jne    c00086d8 <src_process+0x194>
c000857c:	85 db                	test   ebx,ebx
c000857e:	0f 84 5b 01 00 00    	je     c00086df <src_process+0x19b>
c0008584:	8b 33                	mov    esi,DWORD PTR [ebx]
c0008586:	85 f6                	test   esi,esi
c0008588:	0f 84 58 01 00 00    	je     c00086e6 <src_process+0x1a2>
c000858e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0008591:	85 ff                	test   edi,edi
c0008593:	0f 84 4d 01 00 00    	je     c00086e6 <src_process+0x1a2>
c0008599:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000859c:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000859f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00085a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085a7:	68 00 00 70 3f       	push   0x3f700000
c00085ac:	6a 00                	push   0x0
c00085ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085b6:	e8 b4 e8 01 00       	call   c0026e6f <__ltdf2>
c00085bb:	83 c4 10             	add    esp,0x10
c00085be:	85 c0                	test   eax,eax
c00085c0:	0f 88 27 01 00 00    	js     c00086ed <src_process+0x1a9>
c00085c6:	68 00 00 70 40       	push   0x40700000
c00085cb:	6a 00                	push   0x0
c00085cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085d5:	e8 77 e8 01 00       	call   c0026e51 <__gtdf2>
c00085da:	83 c4 10             	add    esp,0x10
c00085dd:	85 c0                	test   eax,eax
c00085df:	0f 8f 08 01 00 00    	jg     c00086ed <src_process+0x1a9>
c00085e5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00085e9:	79 07                	jns    c00085f2 <src_process+0xae>
c00085eb:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00085f2:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00085f5:	85 c0                	test   eax,eax
c00085f7:	79 50                	jns    c0008649 <src_process+0x105>
c00085f9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008600:	39 fe                	cmp    esi,edi
c0008602:	72 37                	jb     c000863b <src_process+0xf7>
c0008604:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000860b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008612:	68 00 00 70 3f       	push   0x3f700000
c0008617:	6a 00                	push   0x0
c0008619:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000861c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000861f:	e8 4b e8 01 00       	call   c0026e6f <__ltdf2>
c0008624:	83 c4 10             	add    esp,0x10
c0008627:	85 c0                	test   eax,eax
c0008629:	79 37                	jns    c0008662 <src_process+0x11e>
c000862b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000862f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008633:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008636:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008639:	eb 27                	jmp    c0008662 <src_process+0x11e>
c000863b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000863e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008642:	8d 04 86             	lea    eax,[esi+eax*4]
c0008645:	39 c7                	cmp    edi,eax
c0008647:	eb 0d                	jmp    c0008656 <src_process+0x112>
c0008649:	39 fe                	cmp    esi,edi
c000864b:	72 ee                	jb     c000863b <src_process+0xf7>
c000864d:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008651:	8d 04 87             	lea    eax,[edi+eax*4]
c0008654:	39 c6                	cmp    esi,eax
c0008656:	73 ac                	jae    c0008604 <src_process+0xc0>
c0008658:	b8 10 00 00 00       	mov    eax,0x10
c000865d:	e9 90 00 00 00       	jmp    c00086f2 <src_process+0x1ae>
c0008662:	83 ec 10             	sub    esp,0x10
c0008665:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008668:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000866b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000866e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008671:	e8 fe de 01 00       	call   c0026574 <__subdf3>
c0008676:	83 c4 18             	add    esp,0x18
c0008679:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000867d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008681:	52                   	push   edx
c0008682:	50                   	push   eax
c0008683:	e8 78 e9 01 00       	call   c0027000 <fabs>
c0008688:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000868c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008690:	83 c4 10             	add    esp,0x10
c0008693:	68 af 03 d2 3c       	push   0x3cd203af
c0008698:	68 16 56 e7 9e       	push   0x9ee75616
c000869d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00086a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00086a5:	e8 c5 e7 01 00       	call   c0026e6f <__ltdf2>
c00086aa:	83 c4 10             	add    esp,0x10
c00086ad:	85 c0                	test   eax,eax
c00086af:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00086b3:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00086b7:	79 05                	jns    c00086be <src_process+0x17a>
c00086b9:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00086bc:	eb 03                	jmp    c00086c1 <src_process+0x17d>
c00086be:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00086c1:	83 c4 1c             	add    esp,0x1c
c00086c4:	5b                   	pop    ebx
c00086c5:	5e                   	pop    esi
c00086c6:	5f                   	pop    edi
c00086c7:	5d                   	pop    ebp
c00086c8:	ff e0                	jmp    eax
c00086ca:	b8 02 00 00 00       	mov    eax,0x2
c00086cf:	eb 21                	jmp    c00086f2 <src_process+0x1ae>
c00086d1:	b8 07 00 00 00       	mov    eax,0x7
c00086d6:	eb 1a                	jmp    c00086f2 <src_process+0x1ae>
c00086d8:	b8 12 00 00 00       	mov    eax,0x12
c00086dd:	eb 13                	jmp    c00086f2 <src_process+0x1ae>
c00086df:	b8 03 00 00 00       	mov    eax,0x3
c00086e4:	eb 0c                	jmp    c00086f2 <src_process+0x1ae>
c00086e6:	b8 04 00 00 00       	mov    eax,0x4
c00086eb:	eb 05                	jmp    c00086f2 <src_process+0x1ae>
c00086ed:	b8 06 00 00 00       	mov    eax,0x6
c00086f2:	83 c4 1c             	add    esp,0x1c
c00086f5:	5b                   	pop    ebx
c00086f6:	5e                   	pop    esi
c00086f7:	5f                   	pop    edi
c00086f8:	5d                   	pop    ebp
c00086f9:	c3                   	ret    

c00086fa <src_callback_read>:
c00086fa:	55                   	push   ebp
c00086fb:	57                   	push   edi
c00086fc:	56                   	push   esi
c00086fd:	53                   	push   ebx
c00086fe:	83 ec 3c             	sub    esp,0x3c
c0008701:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008705:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008709:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000870d:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008711:	85 ed                	test   ebp,ebp
c0008713:	0f 8e 52 01 00 00    	jle    c000886b <src_callback_read+0x171>
c0008719:	85 db                	test   ebx,ebx
c000871b:	0f 84 4a 01 00 00    	je     c000886b <src_callback_read+0x171>
c0008721:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008728:	74 0c                	je     c0008736 <src_callback_read+0x3c>
c000872a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008731:	e9 35 01 00 00       	jmp    c000886b <src_callback_read+0x171>
c0008736:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000873a:	75 0c                	jne    c0008748 <src_callback_read+0x4e>
c000873c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008743:	e9 23 01 00 00       	jmp    c000886b <src_callback_read+0x171>
c0008748:	51                   	push   ecx
c0008749:	6a 24                	push   0x24
c000874b:	6a 00                	push   0x0
c000874d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008751:	50                   	push   eax
c0008752:	e8 34 7f ff ff       	call   c000068b <memset>
c0008757:	83 c4 10             	add    esp,0x10
c000875a:	68 00 00 70 3f       	push   0x3f700000
c000875f:	6a 00                	push   0x0
c0008761:	57                   	push   edi
c0008762:	56                   	push   esi
c0008763:	e8 07 e7 01 00       	call   c0026e6f <__ltdf2>
c0008768:	83 c4 10             	add    esp,0x10
c000876b:	85 c0                	test   eax,eax
c000876d:	78 3e                	js     c00087ad <src_callback_read+0xb3>
c000876f:	68 00 00 70 40       	push   0x40700000
c0008774:	6a 00                	push   0x0
c0008776:	57                   	push   edi
c0008777:	56                   	push   esi
c0008778:	e8 d4 e6 01 00       	call   c0026e51 <__gtdf2>
c000877d:	83 c4 10             	add    esp,0x10
c0008780:	85 c0                	test   eax,eax
c0008782:	7f 29                	jg     c00087ad <src_callback_read+0xb3>
c0008784:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0008788:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000878c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008790:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0008794:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0008797:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000879b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000879f:	31 f6                	xor    esi,esi
c00087a1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00087a4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00087a8:	e9 97 00 00 00       	jmp    c0008844 <src_callback_read+0x14a>
c00087ad:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00087b4:	e9 b2 00 00 00       	jmp    c000886b <src_callback_read+0x171>
c00087b9:	8d 44 24 04          	lea    eax,[esp+0x4]
c00087bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087c1:	52                   	push   edx
c00087c2:	52                   	push   edx
c00087c3:	8d 44 24 10          	lea    eax,[esp+0x10]
c00087c7:	50                   	push   eax
c00087c8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087cb:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00087ce:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00087d2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00087d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00087da:	83 c4 10             	add    esp,0x10
c00087dd:	85 c0                	test   eax,eax
c00087df:	75 08                	jne    c00087e9 <src_callback_read+0xef>
c00087e1:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00087e9:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c00087f0:	50                   	push   eax
c00087f1:	50                   	push   eax
c00087f2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00087f6:	50                   	push   eax
c00087f7:	53                   	push   ebx
c00087f8:	e8 47 fd ff ff       	call   c0008544 <src_process>
c00087fd:	83 c4 10             	add    esp,0x10
c0008800:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008807:	85 c0                	test   eax,eax
c0008809:	75 49                	jne    c0008854 <src_callback_read+0x15a>
c000880b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000880f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008812:	89 f9                	mov    ecx,edi
c0008814:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008818:	0f af ca             	imul   ecx,edx
c000881b:	c1 e1 02             	shl    ecx,0x2
c000881e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008822:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008826:	0f af d1             	imul   edx,ecx
c0008829:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c000882d:	c1 e2 02             	shl    edx,0x2
c0008830:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008834:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008837:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000883c:	74 12                	je     c0008850 <src_callback_read+0x156>
c000883e:	39 d5                	cmp    ebp,edx
c0008840:	7e 14                	jle    c0008856 <src_callback_read+0x15c>
c0008842:	89 d6                	mov    esi,edx
c0008844:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008849:	75 9e                	jne    c00087e9 <src_callback_read+0xef>
c000884b:	e9 69 ff ff ff       	jmp    c00087b9 <src_callback_read+0xbf>
c0008850:	85 c9                	test   ecx,ecx
c0008852:	75 ea                	jne    c000883e <src_callback_read+0x144>
c0008854:	89 f2                	mov    edx,esi
c0008856:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000885a:	85 c0                	test   eax,eax
c000885c:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c000885f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008863:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008866:	74 05                	je     c000886d <src_callback_read+0x173>
c0008868:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000886b:	31 d2                	xor    edx,edx
c000886d:	83 c4 3c             	add    esp,0x3c
c0008870:	89 d0                	mov    eax,edx
c0008872:	5b                   	pop    ebx
c0008873:	5e                   	pop    esi
c0008874:	5f                   	pop    edi
c0008875:	5d                   	pop    ebp
c0008876:	c3                   	ret    

c0008877 <src_set_ratio>:
c0008877:	57                   	push   edi
c0008878:	ba 02 00 00 00       	mov    edx,0x2
c000887d:	56                   	push   esi
c000887e:	53                   	push   ebx
c000887f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008883:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008887:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000888b:	85 db                	test   ebx,ebx
c000888d:	74 4c                	je     c00088db <src_set_ratio+0x64>
c000888f:	ba 07 00 00 00       	mov    edx,0x7
c0008894:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008898:	74 41                	je     c00088db <src_set_ratio+0x64>
c000889a:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c000889e:	74 3b                	je     c00088db <src_set_ratio+0x64>
c00088a0:	68 00 00 70 3f       	push   0x3f700000
c00088a5:	6a 00                	push   0x0
c00088a7:	57                   	push   edi
c00088a8:	56                   	push   esi
c00088a9:	e8 c1 e5 01 00       	call   c0026e6f <__ltdf2>
c00088ae:	83 c4 10             	add    esp,0x10
c00088b1:	ba 06 00 00 00       	mov    edx,0x6
c00088b6:	85 c0                	test   eax,eax
c00088b8:	78 21                	js     c00088db <src_set_ratio+0x64>
c00088ba:	68 00 00 70 40       	push   0x40700000
c00088bf:	6a 00                	push   0x0
c00088c1:	57                   	push   edi
c00088c2:	56                   	push   esi
c00088c3:	e8 89 e5 01 00       	call   c0026e51 <__gtdf2>
c00088c8:	83 c4 10             	add    esp,0x10
c00088cb:	ba 06 00 00 00       	mov    edx,0x6
c00088d0:	85 c0                	test   eax,eax
c00088d2:	7f 07                	jg     c00088db <src_set_ratio+0x64>
c00088d4:	89 33                	mov    DWORD PTR [ebx],esi
c00088d6:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c00088d9:	31 d2                	xor    edx,edx
c00088db:	5b                   	pop    ebx
c00088dc:	89 d0                	mov    eax,edx
c00088de:	5e                   	pop    esi
c00088df:	5f                   	pop    edi
c00088e0:	c3                   	ret    

c00088e1 <src_get_channels>:
c00088e1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00088e5:	b8 02 00 00 00       	mov    eax,0x2
c00088ea:	85 d2                	test   edx,edx
c00088ec:	74 14                	je     c0008902 <src_get_channels+0x21>
c00088ee:	b8 07 00 00 00       	mov    eax,0x7
c00088f3:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c00088f7:	74 09                	je     c0008902 <src_get_channels+0x21>
c00088f9:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c00088fd:	74 03                	je     c0008902 <src_get_channels+0x21>
c00088ff:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008902:	c3                   	ret    

c0008903 <src_reset>:
c0008903:	53                   	push   ebx
c0008904:	b8 02 00 00 00       	mov    eax,0x2
c0008909:	83 ec 08             	sub    esp,0x8
c000890c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008910:	85 db                	test   ebx,ebx
c0008912:	74 36                	je     c000894a <src_reset+0x47>
c0008914:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008917:	85 c0                	test   eax,eax
c0008919:	74 09                	je     c0008924 <src_reset+0x21>
c000891b:	83 ec 0c             	sub    esp,0xc
c000891e:	53                   	push   ebx
c000891f:	ff d0                	call   eax
c0008921:	83 c4 10             	add    esp,0x10
c0008924:	31 c0                	xor    eax,eax
c0008926:	31 d2                	xor    edx,edx
c0008928:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000892b:	89 03                	mov    DWORD PTR [ebx],eax
c000892d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008930:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008933:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000893a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008941:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008948:	31 c0                	xor    eax,eax
c000894a:	83 c4 08             	add    esp,0x8
c000894d:	5b                   	pop    ebx
c000894e:	c3                   	ret    

c000894f <src_new>:
c000894f:	57                   	push   edi
c0008950:	56                   	push   esi
c0008951:	53                   	push   ebx
c0008952:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008956:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000895a:	85 f6                	test   esi,esi
c000895c:	74 73                	je     c00089d1 <src_new+0x82>
c000895e:	85 ff                	test   edi,edi
c0008960:	7f 08                	jg     c000896a <src_new+0x1b>
c0008962:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008968:	eb 1e                	jmp    c0008988 <src_new+0x39>
c000896a:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008970:	50                   	push   eax
c0008971:	50                   	push   eax
c0008972:	6a 3c                	push   0x3c
c0008974:	6a 01                	push   0x1
c0008976:	e8 89 6b 00 00       	call   c000f504 <calloc>
c000897b:	83 c4 10             	add    esp,0x10
c000897e:	89 c3                	mov    ebx,eax
c0008980:	85 c0                	test   eax,eax
c0008982:	75 10                	jne    c0008994 <src_new+0x45>
c0008984:	85 f6                	test   esi,esi
c0008986:	75 04                	jne    c000898c <src_new+0x3d>
c0008988:	31 db                	xor    ebx,ebx
c000898a:	eb 4b                	jmp    c00089d7 <src_new+0x88>
c000898c:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008992:	eb 43                	jmp    c00089d7 <src_new+0x88>
c0008994:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008997:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c000899e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00089a2:	e8 1d fb ff ff       	call   c00084c4 <psrc_set_converter>
c00089a7:	85 c0                	test   eax,eax
c00089a9:	74 18                	je     c00089c3 <src_new+0x74>
c00089ab:	85 f6                	test   esi,esi
c00089ad:	74 06                	je     c00089b5 <src_new+0x66>
c00089af:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c00089b5:	83 ec 0c             	sub    esp,0xc
c00089b8:	53                   	push   ebx
c00089b9:	31 db                	xor    ebx,ebx
c00089bb:	e8 24 6b 00 00       	call   c000f4e4 <free>
c00089c0:	83 c4 10             	add    esp,0x10
c00089c3:	83 ec 0c             	sub    esp,0xc
c00089c6:	53                   	push   ebx
c00089c7:	e8 37 ff ff ff       	call   c0008903 <src_reset>
c00089cc:	83 c4 10             	add    esp,0x10
c00089cf:	eb 06                	jmp    c00089d7 <src_new+0x88>
c00089d1:	85 ff                	test   edi,edi
c00089d3:	7f 9b                	jg     c0008970 <src_new+0x21>
c00089d5:	eb b1                	jmp    c0008988 <src_new+0x39>
c00089d7:	89 d8                	mov    eax,ebx
c00089d9:	5b                   	pop    ebx
c00089da:	5e                   	pop    esi
c00089db:	5f                   	pop    edi
c00089dc:	c3                   	ret    

c00089dd <src_callback_new>:
c00089dd:	56                   	push   esi
c00089de:	53                   	push   ebx
c00089df:	53                   	push   ebx
c00089e0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00089e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00089e8:	85 f6                	test   esi,esi
c00089ea:	75 0e                	jne    c00089fa <src_callback_new+0x1d>
c00089ec:	31 db                	xor    ebx,ebx
c00089ee:	85 c0                	test   eax,eax
c00089f0:	74 47                	je     c0008a39 <src_callback_new+0x5c>
c00089f2:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c00089f8:	eb 3f                	jmp    c0008a39 <src_callback_new+0x5c>
c00089fa:	85 c0                	test   eax,eax
c00089fc:	74 06                	je     c0008a04 <src_callback_new+0x27>
c00089fe:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008a04:	51                   	push   ecx
c0008a05:	50                   	push   eax
c0008a06:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a0a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a0e:	e8 3c ff ff ff       	call   c000894f <src_new>
c0008a13:	83 c4 10             	add    esp,0x10
c0008a16:	89 c3                	mov    ebx,eax
c0008a18:	85 c0                	test   eax,eax
c0008a1a:	74 1d                	je     c0008a39 <src_callback_new+0x5c>
c0008a1c:	83 ec 0c             	sub    esp,0xc
c0008a1f:	50                   	push   eax
c0008a20:	e8 de fe ff ff       	call   c0008903 <src_reset>
c0008a25:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008a29:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a30:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008a33:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008a36:	83 c4 10             	add    esp,0x10
c0008a39:	89 d8                	mov    eax,ebx
c0008a3b:	5a                   	pop    edx
c0008a3c:	5b                   	pop    ebx
c0008a3d:	5e                   	pop    esi
c0008a3e:	c3                   	ret    

c0008a3f <src_get_name>:
c0008a3f:	53                   	push   ebx
c0008a40:	83 ec 14             	sub    esp,0x14
c0008a43:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a47:	53                   	push   ebx
c0008a48:	e8 d0 4f 00 00       	call   c000da1d <sinc_get_name>
c0008a4d:	83 c4 10             	add    esp,0x10
c0008a50:	85 c0                	test   eax,eax
c0008a52:	75 1d                	jne    c0008a71 <src_get_name+0x32>
c0008a54:	83 ec 0c             	sub    esp,0xc
c0008a57:	53                   	push   ebx
c0008a58:	e8 80 57 00 00       	call   c000e1dd <zoh_get_name>
c0008a5d:	83 c4 10             	add    esp,0x10
c0008a60:	85 c0                	test   eax,eax
c0008a62:	75 0d                	jne    c0008a71 <src_get_name+0x32>
c0008a64:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a68:	83 c4 08             	add    esp,0x8
c0008a6b:	5b                   	pop    ebx
c0008a6c:	e9 74 0b 00 00       	jmp    c00095e5 <linear_get_name>
c0008a71:	83 c4 08             	add    esp,0x8
c0008a74:	5b                   	pop    ebx
c0008a75:	c3                   	ret    

c0008a76 <src_get_description>:
c0008a76:	53                   	push   ebx
c0008a77:	83 ec 14             	sub    esp,0x14
c0008a7a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a7e:	53                   	push   ebx
c0008a7f:	e8 ac 4f 00 00       	call   c000da30 <sinc_get_description>
c0008a84:	83 c4 10             	add    esp,0x10
c0008a87:	85 c0                	test   eax,eax
c0008a89:	75 1d                	jne    c0008aa8 <src_get_description+0x32>
c0008a8b:	83 ec 0c             	sub    esp,0xc
c0008a8e:	53                   	push   ebx
c0008a8f:	e8 58 57 00 00       	call   c000e1ec <zoh_get_description>
c0008a94:	83 c4 10             	add    esp,0x10
c0008a97:	85 c0                	test   eax,eax
c0008a99:	75 0d                	jne    c0008aa8 <src_get_description+0x32>
c0008a9b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a9f:	83 c4 08             	add    esp,0x8
c0008aa2:	5b                   	pop    ebx
c0008aa3:	e9 4c 0b 00 00       	jmp    c00095f4 <linear_get_description>
c0008aa8:	83 c4 08             	add    esp,0x8
c0008aab:	5b                   	pop    ebx
c0008aac:	c3                   	ret    

c0008aad <src_get_version>:
c0008aad:	b8 60 82 02 c0       	mov    eax,0xc0028260
c0008ab2:	c3                   	ret    

c0008ab3 <src_is_valid_ratio>:
c0008ab3:	83 ec 1c             	sub    esp,0x1c
c0008ab6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008aba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008abe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ac2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ac6:	68 00 00 70 3f       	push   0x3f700000
c0008acb:	6a 00                	push   0x0
c0008acd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ad1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ad5:	e8 95 e3 01 00       	call   c0026e6f <__ltdf2>
c0008ada:	83 c4 10             	add    esp,0x10
c0008add:	31 d2                	xor    edx,edx
c0008adf:	85 c0                	test   eax,eax
c0008ae1:	78 1e                	js     c0008b01 <src_is_valid_ratio+0x4e>
c0008ae3:	68 00 00 70 40       	push   0x40700000
c0008ae8:	6a 00                	push   0x0
c0008aea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008aee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008af2:	e8 5a e3 01 00       	call   c0026e51 <__gtdf2>
c0008af7:	31 d2                	xor    edx,edx
c0008af9:	83 c4 10             	add    esp,0x10
c0008afc:	85 c0                	test   eax,eax
c0008afe:	0f 9e c2             	setle  dl
c0008b01:	89 d0                	mov    eax,edx
c0008b03:	83 c4 1c             	add    esp,0x1c
c0008b06:	c3                   	ret    

c0008b07 <src_error>:
c0008b07:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b0b:	31 c0                	xor    eax,eax
c0008b0d:	85 d2                	test   edx,edx
c0008b0f:	74 03                	je     c0008b14 <src_error+0xd>
c0008b11:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008b14:	c3                   	ret    

c0008b15 <src_strerror>:
c0008b15:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b19:	31 c0                	xor    eax,eax
c0008b1b:	83 fa 17             	cmp    edx,0x17
c0008b1e:	77 07                	ja     c0008b27 <src_strerror+0x12>
c0008b20:	8b 04 95 c0 86 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7940]
c0008b27:	c3                   	ret    

c0008b28 <src_simple>:
c0008b28:	56                   	push   esi
c0008b29:	53                   	push   ebx
c0008b2a:	83 ec 18             	sub    esp,0x18
c0008b2d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b31:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008b35:	50                   	push   eax
c0008b36:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b3a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b3e:	e8 0c fe ff ff       	call   c000894f <src_new>
c0008b43:	83 c4 10             	add    esp,0x10
c0008b46:	85 c0                	test   eax,eax
c0008b48:	75 06                	jne    c0008b50 <src_simple+0x28>
c0008b4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b4e:	eb 25                	jmp    c0008b75 <src_simple+0x4d>
c0008b50:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008b57:	89 c3                	mov    ebx,eax
c0008b59:	50                   	push   eax
c0008b5a:	50                   	push   eax
c0008b5b:	56                   	push   esi
c0008b5c:	53                   	push   ebx
c0008b5d:	e8 e2 f9 ff ff       	call   c0008544 <src_process>
c0008b62:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008b65:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008b69:	e8 9a f9 ff ff       	call   c0008508 <src_delete>
c0008b6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b72:	83 c4 10             	add    esp,0x10
c0008b75:	83 c4 14             	add    esp,0x14
c0008b78:	5b                   	pop    ebx
c0008b79:	5e                   	pop    esi
c0008b7a:	c3                   	ret    

c0008b7b <src_short_to_float_array>:
c0008b7b:	53                   	push   ebx
c0008b7c:	83 ec 18             	sub    esp,0x18
c0008b7f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008b83:	85 db                	test   ebx,ebx
c0008b85:	74 54                	je     c0008bdb <src_short_to_float_array+0x60>
c0008b87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008b8b:	4b                   	dec    ebx
c0008b8c:	83 ec 0c             	sub    esp,0xc
c0008b8f:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008b93:	50                   	push   eax
c0008b94:	e8 6a e0 01 00       	call   c0026c03 <__floatsidf>
c0008b99:	83 c4 10             	add    esp,0x10
c0008b9c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ba0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ba4:	68 00 00 00 3f       	push   0x3f000000
c0008ba9:	6a 00                	push   0x0
c0008bab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008baf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bb3:	e8 e8 d9 01 00       	call   c00265a0 <__muldf3>
c0008bb8:	59                   	pop    ecx
c0008bb9:	59                   	pop    ecx
c0008bba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008bbe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008bc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bca:	e8 a4 e2 01 00       	call   c0026e73 <__truncdfsf2>
c0008bcf:	83 c4 10             	add    esp,0x10
c0008bd2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008bd6:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008bd9:	eb a8                	jmp    c0008b83 <src_short_to_float_array+0x8>
c0008bdb:	83 c4 18             	add    esp,0x18
c0008bde:	5b                   	pop    ebx
c0008bdf:	c3                   	ret    

c0008be0 <src_float_to_short_array>:
c0008be0:	56                   	push   esi
c0008be1:	53                   	push   ebx
c0008be2:	83 ec 14             	sub    esp,0x14
c0008be5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008be9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008bed:	85 db                	test   ebx,ebx
c0008bef:	0f 84 a4 00 00 00    	je     c0008c99 <src_float_to_short_array+0xb9>
c0008bf5:	83 ec 0c             	sub    esp,0xc
c0008bf8:	4b                   	dec    ebx
c0008bf9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008bfd:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008c00:	e8 92 e3 01 00       	call   c0026f97 <__extendsfdf2>
c0008c05:	83 c4 10             	add    esp,0x10
c0008c08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c0c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c10:	68 00 00 e0 41       	push   0x41e00000
c0008c15:	6a 00                	push   0x0
c0008c17:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c1b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c1f:	e8 7c d9 01 00       	call   c00265a0 <__muldf3>
c0008c24:	83 c4 10             	add    esp,0x10
c0008c27:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c2b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c2f:	68 ff ff df 41       	push   0x41dfffff
c0008c34:	68 00 00 c0 ff       	push   0xffc00000
c0008c39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c41:	e8 27 e2 01 00       	call   c0026e6d <__gedf2>
c0008c46:	83 c4 10             	add    esp,0x10
c0008c49:	85 c0                	test   eax,eax
c0008c4b:	78 08                	js     c0008c55 <src_float_to_short_array+0x75>
c0008c4d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008c53:	eb 98                	jmp    c0008bed <src_float_to_short_array+0xd>
c0008c55:	68 00 00 e0 c1       	push   0xc1e00000
c0008c5a:	6a 00                	push   0x0
c0008c5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c64:	e8 08 e2 01 00       	call   c0026e71 <__ledf2>
c0008c69:	83 c4 10             	add    esp,0x10
c0008c6c:	85 c0                	test   eax,eax
c0008c6e:	7f 0b                	jg     c0008c7b <src_float_to_short_array+0x9b>
c0008c70:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008c76:	e9 72 ff ff ff       	jmp    c0008bed <src_float_to_short_array+0xd>
c0008c7b:	50                   	push   eax
c0008c7c:	50                   	push   eax
c0008c7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c85:	e8 96 e3 01 00       	call   c0027020 <lrint>
c0008c8a:	83 c4 10             	add    esp,0x10
c0008c8d:	c1 f8 10             	sar    eax,0x10
c0008c90:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008c94:	e9 54 ff ff ff       	jmp    c0008bed <src_float_to_short_array+0xd>
c0008c99:	83 c4 14             	add    esp,0x14
c0008c9c:	5b                   	pop    ebx
c0008c9d:	5e                   	pop    esi
c0008c9e:	c3                   	ret    

c0008c9f <src_int_to_float_array>:
c0008c9f:	53                   	push   ebx
c0008ca0:	83 ec 18             	sub    esp,0x18
c0008ca3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ca7:	85 db                	test   ebx,ebx
c0008ca9:	74 52                	je     c0008cfd <src_int_to_float_array+0x5e>
c0008cab:	83 ec 0c             	sub    esp,0xc
c0008cae:	4b                   	dec    ebx
c0008caf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008cb3:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008cb6:	e8 48 df 01 00       	call   c0026c03 <__floatsidf>
c0008cbb:	83 c4 10             	add    esp,0x10
c0008cbe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cc2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cc6:	68 00 00 00 3e       	push   0x3e000000
c0008ccb:	6a 00                	push   0x0
c0008ccd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cd1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cd5:	e8 c6 d8 01 00       	call   c00265a0 <__muldf3>
c0008cda:	59                   	pop    ecx
c0008cdb:	59                   	pop    ecx
c0008cdc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ce0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008ce4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ce8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cec:	e8 82 e1 01 00       	call   c0026e73 <__truncdfsf2>
c0008cf1:	83 c4 10             	add    esp,0x10
c0008cf4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cf8:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008cfb:	eb aa                	jmp    c0008ca7 <src_int_to_float_array+0x8>
c0008cfd:	83 c4 18             	add    esp,0x18
c0008d00:	5b                   	pop    ebx
c0008d01:	c3                   	ret    

c0008d02 <src_float_to_int_array>:
c0008d02:	56                   	push   esi
c0008d03:	53                   	push   ebx
c0008d04:	83 ec 14             	sub    esp,0x14
c0008d07:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d0b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d0f:	85 db                	test   ebx,ebx
c0008d11:	0f 84 a2 00 00 00    	je     c0008db9 <src_float_to_int_array+0xb7>
c0008d17:	83 ec 0c             	sub    esp,0xc
c0008d1a:	4b                   	dec    ebx
c0008d1b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008d1f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008d22:	e8 70 e2 01 00       	call   c0026f97 <__extendsfdf2>
c0008d27:	83 c4 10             	add    esp,0x10
c0008d2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d32:	68 00 00 e0 41       	push   0x41e00000
c0008d37:	6a 00                	push   0x0
c0008d39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d41:	e8 5a d8 01 00       	call   c00265a0 <__muldf3>
c0008d46:	83 c4 10             	add    esp,0x10
c0008d49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d4d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d51:	68 ff ff df 41       	push   0x41dfffff
c0008d56:	68 00 00 c0 ff       	push   0xffc00000
c0008d5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d63:	e8 05 e1 01 00       	call   c0026e6d <__gedf2>
c0008d68:	83 c4 10             	add    esp,0x10
c0008d6b:	85 c0                	test   eax,eax
c0008d6d:	78 09                	js     c0008d78 <src_float_to_int_array+0x76>
c0008d6f:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008d76:	eb 97                	jmp    c0008d0f <src_float_to_int_array+0xd>
c0008d78:	68 00 00 e0 c1       	push   0xc1e00000
c0008d7d:	6a 00                	push   0x0
c0008d7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d83:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d87:	e8 e5 e0 01 00       	call   c0026e71 <__ledf2>
c0008d8c:	83 c4 10             	add    esp,0x10
c0008d8f:	85 c0                	test   eax,eax
c0008d91:	7f 0c                	jg     c0008d9f <src_float_to_int_array+0x9d>
c0008d93:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008d9a:	e9 70 ff ff ff       	jmp    c0008d0f <src_float_to_int_array+0xd>
c0008d9f:	50                   	push   eax
c0008da0:	50                   	push   eax
c0008da1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008da5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008da9:	e8 72 e2 01 00       	call   c0027020 <lrint>
c0008dae:	83 c4 10             	add    esp,0x10
c0008db1:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008db4:	e9 56 ff ff ff       	jmp    c0008d0f <src_float_to_int_array+0xd>
c0008db9:	83 c4 14             	add    esp,0x14
c0008dbc:	5b                   	pop    ebx
c0008dbd:	5e                   	pop    esi
c0008dbe:	c3                   	ret    

c0008dbf <linear_vari_process>:
c0008dbf:	55                   	push   ebp
c0008dc0:	31 d2                	xor    edx,edx
c0008dc2:	57                   	push   edi
c0008dc3:	56                   	push   esi
c0008dc4:	53                   	push   ebx
c0008dc5:	83 ec 3c             	sub    esp,0x3c
c0008dc8:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008dcc:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008dd0:	0f 8e d3 07 00 00    	jle    c00095a9 <linear_vari_process+0x7ea>
c0008dd6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008dda:	ba 05 00 00 00       	mov    edx,0x5
c0008ddf:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008de2:	85 db                	test   ebx,ebx
c0008de4:	0f 84 bf 07 00 00    	je     c00095a9 <linear_vari_process+0x7ea>
c0008dea:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008ded:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008df1:	74 19                	je     c0008e0c <linear_vari_process+0x4d>
c0008df3:	31 d2                	xor    edx,edx
c0008df5:	39 c2                	cmp    edx,eax
c0008df7:	7d 0c                	jge    c0008e05 <linear_vari_process+0x46>
c0008df9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008dfb:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0008dfe:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0008e02:	42                   	inc    edx
c0008e03:	eb f0                	jmp    c0008df5 <linear_vari_process+0x36>
c0008e05:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008e0c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008e0f:	0f af d0             	imul   edx,eax
c0008e12:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008e15:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008e19:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008e20:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008e23:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008e2a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008e2e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008e31:	8b 00                	mov    eax,DWORD PTR [eax]
c0008e33:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e37:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e3b:	68 00 00 70 3f       	push   0x3f700000
c0008e40:	6a 00                	push   0x0
c0008e42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e4a:	e8 20 e0 01 00       	call   c0026e6f <__ltdf2>
c0008e4f:	83 c4 10             	add    esp,0x10
c0008e52:	ba 16 00 00 00       	mov    edx,0x16
c0008e57:	85 c0                	test   eax,eax
c0008e59:	0f 88 4a 07 00 00    	js     c00095a9 <linear_vari_process+0x7ea>
c0008e5f:	68 00 00 70 40       	push   0x40700000
c0008e64:	6a 00                	push   0x0
c0008e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e6e:	e8 de df 01 00       	call   c0026e51 <__gtdf2>
c0008e73:	83 c4 10             	add    esp,0x10
c0008e76:	ba 16 00 00 00       	mov    edx,0x16
c0008e7b:	85 c0                	test   eax,eax
c0008e7d:	0f 8f 26 07 00 00    	jg     c00095a9 <linear_vari_process+0x7ea>
c0008e83:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008e87:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0008e8a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008e8d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e91:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e95:	68 00 00 f0 3f       	push   0x3ff00000
c0008e9a:	6a 00                	push   0x0
c0008e9c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ea0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ea4:	e8 c6 df 01 00       	call   c0026e6f <__ltdf2>
c0008ea9:	83 c4 10             	add    esp,0x10
c0008eac:	85 c0                	test   eax,eax
c0008eae:	0f 89 89 02 00 00    	jns    c000913d <linear_vari_process+0x37e>
c0008eb4:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0008eb7:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c0008eba:	0f 8d 7d 02 00 00    	jge    c000913d <linear_vari_process+0x37e>
c0008ec0:	83 ec 0c             	sub    esp,0xc
c0008ec3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0008ec6:	e8 38 dd 01 00       	call   c0026c03 <__floatsidf>
c0008ecb:	83 c4 10             	add    esp,0x10
c0008ece:	89 04 24             	mov    DWORD PTR [esp],eax
c0008ed1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008ed5:	68 00 00 f0 3f       	push   0x3ff00000
c0008eda:	6a 00                	push   0x0
c0008edc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee4:	e8 3a d0 01 00       	call   c0025f23 <__adddf3>
c0008ee9:	83 c4 10             	add    esp,0x10
c0008eec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008ef0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008ef4:	52                   	push   edx
c0008ef5:	50                   	push   eax
c0008ef6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008efa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008efe:	e8 9d d6 01 00       	call   c00265a0 <__muldf3>
c0008f03:	5d                   	pop    ebp
c0008f04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008f08:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008f0c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0008f0f:	e8 ef dc 01 00       	call   c0026c03 <__floatsidf>
c0008f14:	83 c4 10             	add    esp,0x10
c0008f17:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f1b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f1f:	52                   	push   edx
c0008f20:	50                   	push   eax
c0008f21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f25:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f29:	e8 f5 cf 01 00       	call   c0025f23 <__adddf3>
c0008f2e:	59                   	pop    ecx
c0008f2f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008f33:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008f37:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0008f3a:	e8 c4 dc 01 00       	call   c0026c03 <__floatsidf>
c0008f3f:	83 c4 10             	add    esp,0x10
c0008f42:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f46:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f4a:	52                   	push   edx
c0008f4b:	50                   	push   eax
c0008f4c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f54:	e8 14 df 01 00       	call   c0026e6d <__gedf2>
c0008f59:	83 c4 10             	add    esp,0x10
c0008f5c:	85 c0                	test   eax,eax
c0008f5e:	0f 89 d9 01 00 00    	jns    c000913d <linear_vari_process+0x37e>
c0008f64:	85 ff                	test   edi,edi
c0008f66:	0f 8e f4 00 00 00    	jle    c0009060 <linear_vari_process+0x2a1>
c0008f6c:	83 ec 10             	sub    esp,0x10
c0008f6f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0008f72:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0008f75:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0008f79:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0008f7c:	ff 30                	push   DWORD PTR [eax]
c0008f7e:	e8 f1 d5 01 00       	call   c0026574 <__subdf3>
c0008f83:	83 c4 18             	add    esp,0x18
c0008f86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f8a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f8e:	52                   	push   edx
c0008f8f:	50                   	push   eax
c0008f90:	e8 6b e0 01 00       	call   c0027000 <fabs>
c0008f95:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f99:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f9d:	83 c4 10             	add    esp,0x10
c0008fa0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0008fa5:	68 23 42 92 0c       	push   0xc924223
c0008faa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fb2:	e8 9a de 01 00       	call   c0026e51 <__gtdf2>
c0008fb7:	83 c4 10             	add    esp,0x10
c0008fba:	85 c0                	test   eax,eax
c0008fbc:	0f 8e 9e 00 00 00    	jle    c0009060 <linear_vari_process+0x2a1>
c0008fc2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008fc6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008fc9:	8b 00                	mov    eax,DWORD PTR [eax]
c0008fcb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008fcf:	89 04 24             	mov    DWORD PTR [esp],eax
c0008fd2:	52                   	push   edx
c0008fd3:	50                   	push   eax
c0008fd4:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0008fd7:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0008fda:	e8 95 d5 01 00       	call   c0026574 <__subdf3>
c0008fdf:	59                   	pop    ecx
c0008fe0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008fe4:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0008fe8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008feb:	e8 13 dc 01 00       	call   c0026c03 <__floatsidf>
c0008ff0:	83 c4 10             	add    esp,0x10
c0008ff3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008ff7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008ffb:	52                   	push   edx
c0008ffc:	50                   	push   eax
c0008ffd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009001:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009005:	e8 96 d5 01 00       	call   c00265a0 <__muldf3>
c000900a:	5f                   	pop    edi
c000900b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000900f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009013:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009016:	e8 e8 db 01 00       	call   c0026c03 <__floatsidf>
c000901b:	83 c4 10             	add    esp,0x10
c000901e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009022:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009026:	52                   	push   edx
c0009027:	50                   	push   eax
c0009028:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000902c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009030:	e8 4f d8 01 00       	call   c0026884 <__divdf3>
c0009035:	83 c4 10             	add    esp,0x10
c0009038:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000903c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009040:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009044:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009048:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000904c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009050:	e8 ce ce 01 00       	call   c0025f23 <__adddf3>
c0009055:	83 c4 10             	add    esp,0x10
c0009058:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000905c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009060:	31 ff                	xor    edi,edi
c0009062:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c0009065:	0f 8e 9d 00 00 00    	jle    c0009108 <linear_vari_process+0x349>
c000906b:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c000906e:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c0009072:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009075:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0009079:	89 04 24             	mov    DWORD PTR [esp],eax
c000907c:	8b 06                	mov    eax,DWORD PTR [esi]
c000907e:	52                   	push   edx
c000907f:	52                   	push   edx
c0009080:	55                   	push   ebp
c0009081:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c0009084:	47                   	inc    edi
c0009085:	e8 2e c8 01 00       	call   c00258b8 <__subsf3>
c000908a:	89 04 24             	mov    DWORD PTR [esp],eax
c000908d:	e8 05 df 01 00       	call   c0026f97 <__extendsfdf2>
c0009092:	83 c4 10             	add    esp,0x10
c0009095:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009099:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000909d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00090a1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00090a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090ad:	e8 ee d4 01 00       	call   c00265a0 <__muldf3>
c00090b2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00090b5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00090b9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00090bd:	e8 d5 de 01 00       	call   c0026f97 <__extendsfdf2>
c00090c2:	83 c4 10             	add    esp,0x10
c00090c5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00090c9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00090cd:	52                   	push   edx
c00090ce:	50                   	push   eax
c00090cf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090d3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090d7:	e8 47 ce 01 00       	call   c0025f23 <__adddf3>
c00090dc:	59                   	pop    ecx
c00090dd:	5d                   	pop    ebp
c00090de:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00090e2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00090e6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090ea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090ee:	e8 80 dd 01 00       	call   c0026e73 <__truncdfsf2>
c00090f3:	83 c4 10             	add    esp,0x10
c00090f6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00090f9:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00090fd:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009100:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009103:	e9 5a ff ff ff       	jmp    c0009062 <linear_vari_process+0x2a3>
c0009108:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000910c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009110:	68 00 00 f0 3f       	push   0x3ff00000
c0009115:	6a 00                	push   0x0
c0009117:	e8 68 d7 01 00       	call   c0026884 <__divdf3>
c000911c:	83 c4 10             	add    esp,0x10
c000911f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009122:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009126:	52                   	push   edx
c0009127:	50                   	push   eax
c0009128:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000912c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009130:	e8 ee cd 01 00       	call   c0025f23 <__adddf3>
c0009135:	83 c4 10             	add    esp,0x10
c0009138:	e9 50 fd ff ff       	jmp    c0008e8d <linear_vari_process+0xce>
c000913d:	50                   	push   eax
c000913e:	50                   	push   eax
c000913f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009143:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009147:	e8 d4 de 01 00       	call   c0027020 <lrint>
c000914c:	83 ec 0c             	sub    esp,0xc
c000914f:	50                   	push   eax
c0009150:	e8 ae da 01 00       	call   c0026c03 <__floatsidf>
c0009155:	83 c4 10             	add    esp,0x10
c0009158:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000915c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009160:	52                   	push   edx
c0009161:	50                   	push   eax
c0009162:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009166:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000916a:	e8 05 d4 01 00       	call   c0026574 <__subdf3>
c000916f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009173:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009177:	83 c4 20             	add    esp,0x20
c000917a:	6a 00                	push   0x0
c000917c:	6a 00                	push   0x0
c000917e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009182:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009186:	e8 e4 dc 01 00       	call   c0026e6f <__ltdf2>
c000918b:	83 c4 10             	add    esp,0x10
c000918e:	85 c0                	test   eax,eax
c0009190:	79 1e                	jns    c00091b0 <linear_vari_process+0x3f1>
c0009192:	68 00 00 f0 3f       	push   0x3ff00000
c0009197:	6a 00                	push   0x0
c0009199:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000919d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a1:	e8 7d cd 01 00       	call   c0025f23 <__adddf3>
c00091a6:	83 c4 10             	add    esp,0x10
c00091a9:	89 04 24             	mov    DWORD PTR [esp],eax
c00091ac:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091b0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00091b3:	83 ec 10             	sub    esp,0x10
c00091b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091c6:	e8 a9 d3 01 00       	call   c0026574 <__subdf3>
c00091cb:	83 c4 18             	add    esp,0x18
c00091ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091d2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091d6:	52                   	push   edx
c00091d7:	50                   	push   eax
c00091d8:	e8 43 de 01 00       	call   c0027020 <lrint>
c00091dd:	83 c4 10             	add    esp,0x10
c00091e0:	0f af f8             	imul   edi,eax
c00091e3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00091e6:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c00091e9:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00091ec:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c00091ef:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c00091f2:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c00091f6:	0f 8d 13 03 00 00    	jge    c000950f <linear_vari_process+0x750>
c00091fc:	83 ec 0c             	sub    esp,0xc
c00091ff:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009202:	e8 fc d9 01 00       	call   c0026c03 <__floatsidf>
c0009207:	83 c4 10             	add    esp,0x10
c000920a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000920e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009212:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009216:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000921a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000921e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009222:	e8 79 d3 01 00       	call   c00265a0 <__muldf3>
c0009227:	89 3c 24             	mov    DWORD PTR [esp],edi
c000922a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000922e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009232:	e8 cc d9 01 00       	call   c0026c03 <__floatsidf>
c0009237:	83 c4 10             	add    esp,0x10
c000923a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000923e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009242:	52                   	push   edx
c0009243:	50                   	push   eax
c0009244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009248:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000924c:	e8 d2 cc 01 00       	call   c0025f23 <__adddf3>
c0009251:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009254:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009258:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000925c:	e8 a2 d9 01 00       	call   c0026c03 <__floatsidf>
c0009261:	83 c4 10             	add    esp,0x10
c0009264:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009268:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000926c:	52                   	push   edx
c000926d:	50                   	push   eax
c000926e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009272:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009276:	e8 f4 db 01 00       	call   c0026e6f <__ltdf2>
c000927b:	83 c4 10             	add    esp,0x10
c000927e:	85 c0                	test   eax,eax
c0009280:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009284:	0f 89 85 02 00 00    	jns    c000950f <linear_vari_process+0x750>
c000928a:	85 c9                	test   ecx,ecx
c000928c:	0f 8e f5 00 00 00    	jle    c0009387 <linear_vari_process+0x5c8>
c0009292:	83 ec 10             	sub    esp,0x10
c0009295:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009298:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000929b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000929f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00092a2:	ff 30                	push   DWORD PTR [eax]
c00092a4:	e8 cb d2 01 00       	call   c0026574 <__subdf3>
c00092a9:	83 c4 18             	add    esp,0x18
c00092ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b4:	52                   	push   edx
c00092b5:	50                   	push   eax
c00092b6:	e8 45 dd 01 00       	call   c0027000 <fabs>
c00092bb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092bf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092c3:	83 c4 10             	add    esp,0x10
c00092c6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00092cb:	68 23 42 92 0c       	push   0xc924223
c00092d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092d8:	e8 74 db 01 00       	call   c0026e51 <__gtdf2>
c00092dd:	83 c4 10             	add    esp,0x10
c00092e0:	85 c0                	test   eax,eax
c00092e2:	0f 8e 9f 00 00 00    	jle    c0009387 <linear_vari_process+0x5c8>
c00092e8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00092ec:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00092ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00092f1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00092f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00092f9:	52                   	push   edx
c00092fa:	50                   	push   eax
c00092fb:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00092fe:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009301:	e8 6e d2 01 00       	call   c0026574 <__subdf3>
c0009306:	5f                   	pop    edi
c0009307:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000930b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000930f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009312:	e8 ec d8 01 00       	call   c0026c03 <__floatsidf>
c0009317:	83 c4 10             	add    esp,0x10
c000931a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000931e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009322:	52                   	push   edx
c0009323:	50                   	push   eax
c0009324:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009328:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000932c:	e8 6f d2 01 00       	call   c00265a0 <__muldf3>
c0009331:	5d                   	pop    ebp
c0009332:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009336:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000933a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000933d:	e8 c1 d8 01 00       	call   c0026c03 <__floatsidf>
c0009342:	83 c4 10             	add    esp,0x10
c0009345:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009349:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000934d:	52                   	push   edx
c000934e:	50                   	push   eax
c000934f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009353:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009357:	e8 28 d5 01 00       	call   c0026884 <__divdf3>
c000935c:	83 c4 10             	add    esp,0x10
c000935f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009363:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009367:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000936b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000936f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009373:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009377:	e8 a7 cb 01 00       	call   c0025f23 <__adddf3>
c000937c:	83 c4 10             	add    esp,0x10
c000937f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009383:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009387:	31 ff                	xor    edi,edi
c0009389:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000938c:	39 f8                	cmp    eax,edi
c000938e:	0f 8e ac 00 00 00    	jle    c0009440 <linear_vari_process+0x681>
c0009394:	8b 16                	mov    edx,DWORD PTR [esi]
c0009396:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0009399:	29 c1                	sub    ecx,eax
c000939b:	89 c8                	mov    eax,ecx
c000939d:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00093a0:	01 f8                	add    eax,edi
c00093a2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00093a6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00093a9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00093ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093b0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00093b3:	51                   	push   ecx
c00093b4:	01 f8                	add    eax,edi
c00093b6:	51                   	push   ecx
c00093b7:	47                   	inc    edi
c00093b8:	55                   	push   ebp
c00093b9:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00093bc:	e8 f7 c4 01 00       	call   c00258b8 <__subsf3>
c00093c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00093c4:	e8 ce db 01 00       	call   c0026f97 <__extendsfdf2>
c00093c9:	83 c4 10             	add    esp,0x10
c00093cc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00093d0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00093d4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00093d8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00093dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093e0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093e4:	e8 b7 d1 01 00       	call   c00265a0 <__muldf3>
c00093e9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00093ec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00093f0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00093f4:	e8 9e db 01 00       	call   c0026f97 <__extendsfdf2>
c00093f9:	83 c4 10             	add    esp,0x10
c00093fc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009400:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009404:	52                   	push   edx
c0009405:	50                   	push   eax
c0009406:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000940a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000940e:	e8 10 cb 01 00       	call   c0025f23 <__adddf3>
c0009413:	5d                   	pop    ebp
c0009414:	59                   	pop    ecx
c0009415:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009419:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000941d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009421:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009425:	e8 49 da 01 00       	call   c0026e73 <__truncdfsf2>
c000942a:	83 c4 10             	add    esp,0x10
c000942d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009431:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009435:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009438:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000943b:	e9 49 ff ff ff       	jmp    c0009389 <linear_vari_process+0x5ca>
c0009440:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009444:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009448:	68 00 00 f0 3f       	push   0x3ff00000
c000944d:	6a 00                	push   0x0
c000944f:	e8 30 d4 01 00       	call   c0026884 <__divdf3>
c0009454:	83 c4 10             	add    esp,0x10
c0009457:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000945b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000945f:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009463:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009467:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946f:	e8 af ca 01 00       	call   c0025f23 <__adddf3>
c0009474:	59                   	pop    ecx
c0009475:	5f                   	pop    edi
c0009476:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000947a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000947e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009482:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009486:	e8 95 db 01 00       	call   c0027020 <lrint>
c000948b:	83 ec 0c             	sub    esp,0xc
c000948e:	50                   	push   eax
c000948f:	e8 6f d7 01 00       	call   c0026c03 <__floatsidf>
c0009494:	83 c4 10             	add    esp,0x10
c0009497:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000949b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000949f:	52                   	push   edx
c00094a0:	50                   	push   eax
c00094a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094a9:	e8 c6 d0 01 00       	call   c0026574 <__subdf3>
c00094ae:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00094b2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00094b6:	83 c4 20             	add    esp,0x20
c00094b9:	6a 00                	push   0x0
c00094bb:	6a 00                	push   0x0
c00094bd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094c1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094c5:	e8 a5 d9 01 00       	call   c0026e6f <__ltdf2>
c00094ca:	83 c4 10             	add    esp,0x10
c00094cd:	85 c0                	test   eax,eax
c00094cf:	79 1e                	jns    c00094ef <linear_vari_process+0x730>
c00094d1:	68 00 00 f0 3f       	push   0x3ff00000
c00094d6:	6a 00                	push   0x0
c00094d8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094dc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094e0:	e8 3e ca 01 00       	call   c0025f23 <__adddf3>
c00094e5:	83 c4 10             	add    esp,0x10
c00094e8:	89 04 24             	mov    DWORD PTR [esp],eax
c00094eb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00094ef:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00094f2:	83 ec 10             	sub    esp,0x10
c00094f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009501:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009505:	e8 6a d0 01 00       	call   c0026574 <__subdf3>
c000950a:	e9 bc fc ff ff       	jmp    c00091cb <linear_vari_process+0x40c>
c000950f:	39 fd                	cmp    ebp,edi
c0009511:	7d 38                	jge    c000954b <linear_vari_process+0x78c>
c0009513:	83 ec 0c             	sub    esp,0xc
c0009516:	89 f8                	mov    eax,edi
c0009518:	29 e8                	sub    eax,ebp
c000951a:	99                   	cdq    
c000951b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000951e:	50                   	push   eax
c000951f:	e8 df d6 01 00       	call   c0026c03 <__floatsidf>
c0009524:	83 c4 10             	add    esp,0x10
c0009527:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000952b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000952f:	52                   	push   edx
c0009530:	50                   	push   eax
c0009531:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009535:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009539:	e8 e5 c9 01 00       	call   c0025f23 <__adddf3>
c000953e:	83 c4 10             	add    esp,0x10
c0009541:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009544:	89 04 24             	mov    DWORD PTR [esp],eax
c0009547:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000954b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000954f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009552:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009556:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0009559:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000955c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000955f:	85 c0                	test   eax,eax
c0009561:	7f 29                	jg     c000958c <linear_vari_process+0x7cd>
c0009563:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009567:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000956b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000956f:	89 01                	mov    DWORD PTR [ecx],eax
c0009571:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0009574:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009577:	99                   	cdq    
c0009578:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000957b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000957e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009581:	99                   	cdq    
c0009582:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009585:	31 d2                	xor    edx,edx
c0009587:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000958a:	eb 1d                	jmp    c00095a9 <linear_vari_process+0x7ea>
c000958c:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000958f:	31 d2                	xor    edx,edx
c0009591:	29 c8                	sub    eax,ecx
c0009593:	c1 e0 02             	shl    eax,0x2
c0009596:	39 d1                	cmp    ecx,edx
c0009598:	7e c9                	jle    c0009563 <linear_vari_process+0x7a4>
c000959a:	8b 3e                	mov    edi,DWORD PTR [esi]
c000959c:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c000959f:	83 c0 04             	add    eax,0x4
c00095a2:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00095a6:	42                   	inc    edx
c00095a7:	eb ed                	jmp    c0009596 <linear_vari_process+0x7d7>
c00095a9:	83 c4 3c             	add    esp,0x3c
c00095ac:	89 d0                	mov    eax,edx
c00095ae:	5b                   	pop    ebx
c00095af:	5e                   	pop    esi
c00095b0:	5f                   	pop    edi
c00095b1:	5d                   	pop    ebp
c00095b2:	c3                   	ret    

c00095b3 <linear_reset>:
c00095b3:	83 ec 0c             	sub    esp,0xc
c00095b6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00095ba:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00095bd:	85 c0                	test   eax,eax
c00095bf:	74 20                	je     c00095e1 <linear_reset+0x2e>
c00095c1:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00095c4:	83 c0 1c             	add    eax,0x1c
c00095c7:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00095ca:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00095d1:	c1 e2 02             	shl    edx,0x2
c00095d4:	51                   	push   ecx
c00095d5:	52                   	push   edx
c00095d6:	6a 00                	push   0x0
c00095d8:	50                   	push   eax
c00095d9:	e8 ad 70 ff ff       	call   c000068b <memset>
c00095de:	83 c4 10             	add    esp,0x10
c00095e1:	83 c4 0c             	add    esp,0xc
c00095e4:	c3                   	ret    

c00095e5 <linear_get_name>:
c00095e5:	31 c0                	xor    eax,eax
c00095e7:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c00095ec:	75 05                	jne    c00095f3 <linear_get_name+0xe>
c00095ee:	b8 20 87 02 c0       	mov    eax,0xc0028720
c00095f3:	c3                   	ret    

c00095f4 <linear_get_description>:
c00095f4:	31 c0                	xor    eax,eax
c00095f6:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c00095fb:	75 05                	jne    c0009602 <linear_get_description+0xe>
c00095fd:	b8 34 87 02 c0       	mov    eax,0xc0028734
c0009602:	c3                   	ret    

c0009603 <linear_set_converter>:
c0009603:	53                   	push   ebx
c0009604:	b8 0a 00 00 00       	mov    eax,0xa
c0009609:	83 ec 08             	sub    esp,0x8
c000960c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009610:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009615:	75 6e                	jne    c0009685 <linear_set_converter+0x82>
c0009617:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000961a:	85 c0                	test   eax,eax
c000961c:	74 13                	je     c0009631 <linear_set_converter+0x2e>
c000961e:	83 ec 0c             	sub    esp,0xc
c0009621:	50                   	push   eax
c0009622:	e8 bd 5e 00 00       	call   c000f4e4 <free>
c0009627:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000962e:	83 c4 10             	add    esp,0x10
c0009631:	50                   	push   eax
c0009632:	50                   	push   eax
c0009633:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009636:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000963d:	50                   	push   eax
c000963e:	6a 01                	push   0x1
c0009640:	e8 bf 5e 00 00       	call   c000f504 <calloc>
c0009645:	83 c4 10             	add    esp,0x10
c0009648:	89 c2                	mov    edx,eax
c000964a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000964d:	85 d2                	test   edx,edx
c000964f:	b8 01 00 00 00       	mov    eax,0x1
c0009654:	74 2f                	je     c0009685 <linear_set_converter+0x82>
c0009656:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009659:	83 ec 0c             	sub    esp,0xc
c000965c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000965f:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0009665:	c7 43 24 bf 8d 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008dbf
c000966c:	c7 43 20 bf 8d 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008dbf
c0009673:	c7 43 28 b3 95 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00095b3
c000967a:	53                   	push   ebx
c000967b:	e8 33 ff ff ff       	call   c00095b3 <linear_reset>
c0009680:	83 c4 10             	add    esp,0x10
c0009683:	31 c0                	xor    eax,eax
c0009685:	83 c4 08             	add    esp,0x8
c0009688:	5b                   	pop    ebx
c0009689:	c3                   	ret    

c000968a <int_to_fp>:
c000968a:	c1 e0 0c             	shl    eax,0xc
c000968d:	c3                   	ret    

c000968e <fp_to_int>:
c000968e:	c1 f8 0c             	sar    eax,0xc
c0009691:	c3                   	ret    

c0009692 <fp_fraction_part>:
c0009692:	25 ff 0f 00 00       	and    eax,0xfff
c0009697:	c3                   	ret    

c0009698 <fp_to_double>:
c0009698:	83 ec 1c             	sub    esp,0x1c
c000969b:	e8 f2 ff ff ff       	call   c0009692 <fp_fraction_part>
c00096a0:	83 ec 0c             	sub    esp,0xc
c00096a3:	50                   	push   eax
c00096a4:	e8 5a d5 01 00       	call   c0026c03 <__floatsidf>
c00096a9:	83 c4 10             	add    esp,0x10
c00096ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096b4:	68 00 00 30 3f       	push   0x3f300000
c00096b9:	6a 00                	push   0x0
c00096bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096c3:	e8 d8 ce 01 00       	call   c00265a0 <__muldf3>
c00096c8:	83 c4 2c             	add    esp,0x2c
c00096cb:	c3                   	ret    

c00096cc <calc_output_single>:
c00096cc:	55                   	push   ebp
c00096cd:	57                   	push   edi
c00096ce:	56                   	push   esi
c00096cf:	89 c6                	mov    esi,eax
c00096d1:	53                   	push   ebx
c00096d2:	89 d3                	mov    ebx,edx
c00096d4:	83 ec 4c             	sub    esp,0x4c
c00096d7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00096db:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00096de:	e8 a7 ff ff ff       	call   c000968a <int_to_fp>
c00096e3:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c00096e6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00096ea:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00096ee:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c00096f2:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c00096f5:	99                   	cdq    
c00096f6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00096fe:	f7 fb                	idiv   ebx
c0009700:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009708:	89 da                	mov    edx,ebx
c000970a:	0f af d0             	imul   edx,eax
c000970d:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009711:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009715:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009719:	29 c2                	sub    edx,eax
c000971b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000971e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009722:	83 c5 04             	add    ebp,0x4
c0009725:	e8 6e ff ff ff       	call   c0009698 <fp_to_double>
c000972a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000972e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009736:	e8 53 ff ff ff       	call   c000968e <fp_to_int>
c000973b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000973e:	52                   	push   edx
c000973f:	52                   	push   edx
c0009740:	51                   	push   ecx
c0009741:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009745:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009749:	e8 6a c1 01 00       	call   c00258b8 <__subsf3>
c000974e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009751:	e8 41 d8 01 00       	call   c0026f97 <__extendsfdf2>
c0009756:	83 c4 10             	add    esp,0x10
c0009759:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000975d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009761:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009765:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009769:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000976d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009771:	e8 2a ce 01 00       	call   c00265a0 <__muldf3>
c0009776:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000977a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000977e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009781:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009785:	e8 0d d8 01 00       	call   c0026f97 <__extendsfdf2>
c000978a:	83 c4 10             	add    esp,0x10
c000978d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009791:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009795:	52                   	push   edx
c0009796:	50                   	push   eax
c0009797:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000979b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000979f:	e8 7f c7 01 00       	call   c0025f23 <__adddf3>
c00097a4:	59                   	pop    ecx
c00097a5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00097a9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00097ad:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00097b3:	e8 df d7 01 00       	call   c0026f97 <__extendsfdf2>
c00097b8:	83 c4 10             	add    esp,0x10
c00097bb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00097bf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00097c3:	52                   	push   edx
c00097c4:	50                   	push   eax
c00097c5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097c9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097cd:	e8 ce cd 01 00       	call   c00265a0 <__muldf3>
c00097d2:	83 c4 10             	add    esp,0x10
c00097d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00097d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00097dd:	52                   	push   edx
c00097de:	50                   	push   eax
c00097df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00097e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00097e7:	e8 37 c7 01 00       	call   c0025f23 <__adddf3>
c00097ec:	83 c4 10             	add    esp,0x10
c00097ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00097f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00097f7:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c00097fb:	0f 89 1d ff ff ff    	jns    c000971e <calc_output_single+0x52>
c0009801:	89 d9                	mov    ecx,ebx
c0009803:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009807:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000980b:	89 dd                	mov    ebp,ebx
c000980d:	29 c8                	sub    eax,ecx
c000980f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009817:	99                   	cdq    
c0009818:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009820:	f7 fb                	idiv   ebx
c0009822:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009826:	0f af e8             	imul   ebp,eax
c0009829:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c000982d:	01 cd                	add    ebp,ecx
c000982f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009832:	89 e8                	mov    eax,ebp
c0009834:	83 ee 04             	sub    esi,0x4
c0009837:	e8 5c fe ff ff       	call   c0009698 <fp_to_double>
c000983c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009840:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009844:	89 e8                	mov    eax,ebp
c0009846:	29 dd                	sub    ebp,ebx
c0009848:	e8 41 fe ff ff       	call   c000968e <fp_to_int>
c000984d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009850:	52                   	push   edx
c0009851:	52                   	push   edx
c0009852:	51                   	push   ecx
c0009853:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009857:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000985b:	e8 58 c0 01 00       	call   c00258b8 <__subsf3>
c0009860:	89 04 24             	mov    DWORD PTR [esp],eax
c0009863:	e8 2f d7 01 00       	call   c0026f97 <__extendsfdf2>
c0009868:	83 c4 10             	add    esp,0x10
c000986b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000986f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009873:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009877:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000987b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000987f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009883:	e8 18 cd 01 00       	call   c00265a0 <__muldf3>
c0009888:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000988c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009890:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009893:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009897:	e8 fb d6 01 00       	call   c0026f97 <__extendsfdf2>
c000989c:	83 c4 10             	add    esp,0x10
c000989f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098a3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00098a7:	52                   	push   edx
c00098a8:	50                   	push   eax
c00098a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098ad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098b1:	e8 6d c6 01 00       	call   c0025f23 <__adddf3>
c00098b6:	59                   	pop    ecx
c00098b7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00098bb:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00098bf:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c00098c5:	e8 cd d6 01 00       	call   c0026f97 <__extendsfdf2>
c00098ca:	83 c4 10             	add    esp,0x10
c00098cd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098d1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00098d5:	52                   	push   edx
c00098d6:	50                   	push   eax
c00098d7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098db:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098df:	e8 bc cc 01 00       	call   c00265a0 <__muldf3>
c00098e4:	83 c4 10             	add    esp,0x10
c00098e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00098eb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00098ef:	52                   	push   edx
c00098f0:	50                   	push   eax
c00098f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098f9:	e8 25 c6 01 00       	call   c0025f23 <__adddf3>
c00098fe:	83 c4 10             	add    esp,0x10
c0009901:	85 ed                	test   ebp,ebp
c0009903:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009907:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000990b:	0f 8f 21 ff ff ff    	jg     c0009832 <calc_output_single+0x166>
c0009911:	52                   	push   edx
c0009912:	50                   	push   eax
c0009913:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009917:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000991b:	e8 03 c6 01 00       	call   c0025f23 <__adddf3>
c0009920:	83 c4 5c             	add    esp,0x5c
c0009923:	5b                   	pop    ebx
c0009924:	5e                   	pop    esi
c0009925:	5f                   	pop    edi
c0009926:	5d                   	pop    ebp
c0009927:	c3                   	ret    

c0009928 <calc_output_stereo>:
c0009928:	55                   	push   ebp
c0009929:	89 cd                	mov    ebp,ecx
c000992b:	57                   	push   edi
c000992c:	56                   	push   esi
c000992d:	53                   	push   ebx
c000992e:	89 c3                	mov    ebx,eax
c0009930:	83 ec 6c             	sub    esp,0x6c
c0009933:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009937:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000993e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009945:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009949:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000994d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009950:	e8 35 fd ff ff       	call   c000968a <int_to_fp>
c0009955:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000995d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009961:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009969:	29 c8                	sub    eax,ecx
c000996b:	99                   	cdq    
c000996c:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009970:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009974:	0f af d0             	imul   edx,eax
c0009977:	8d 34 0a             	lea    esi,[edx+ecx*1]
c000997a:	31 d2                	xor    edx,edx
c000997c:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009980:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009984:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009987:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000998b:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c000998e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009992:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009996:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009999:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000999e:	29 c1                	sub    ecx,eax
c00099a0:	31 c0                	xor    eax,eax
c00099a2:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c00099a5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00099a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00099ad:	83 c7 08             	add    edi,0x8
c00099b0:	e8 e3 fc ff ff       	call   c0009698 <fp_to_double>
c00099b5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00099b9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00099bd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00099c1:	e8 c8 fc ff ff       	call   c000968e <fp_to_int>
c00099c6:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c00099c9:	52                   	push   edx
c00099ca:	52                   	push   edx
c00099cb:	51                   	push   ecx
c00099cc:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c00099d0:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c00099d4:	e8 df be 01 00       	call   c00258b8 <__subsf3>
c00099d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00099dc:	e8 b6 d5 01 00       	call   c0026f97 <__extendsfdf2>
c00099e1:	83 c4 10             	add    esp,0x10
c00099e4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00099e8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c00099ec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00099f0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00099f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00099f8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00099fc:	e8 9f cb 01 00       	call   c00265a0 <__muldf3>
c0009a01:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009a05:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009a09:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009a0c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009a10:	e8 82 d5 01 00       	call   c0026f97 <__extendsfdf2>
c0009a15:	83 c4 10             	add    esp,0x10
c0009a18:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a1c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a20:	52                   	push   edx
c0009a21:	50                   	push   eax
c0009a22:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a26:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a2a:	e8 f4 c4 01 00       	call   c0025f23 <__adddf3>
c0009a2f:	59                   	pop    ecx
c0009a30:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009a34:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009a38:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009a3e:	e8 54 d5 01 00       	call   c0026f97 <__extendsfdf2>
c0009a43:	83 c4 10             	add    esp,0x10
c0009a46:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a4a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a4e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a52:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a56:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a5a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a5e:	e8 3d cb 01 00       	call   c00265a0 <__muldf3>
c0009a63:	83 c4 10             	add    esp,0x10
c0009a66:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a6a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a6e:	52                   	push   edx
c0009a6f:	50                   	push   eax
c0009a70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a78:	e8 a6 c4 01 00       	call   c0025f23 <__adddf3>
c0009a7d:	59                   	pop    ecx
c0009a7e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009a82:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009a86:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009a8c:	e8 06 d5 01 00       	call   c0026f97 <__extendsfdf2>
c0009a91:	83 c4 10             	add    esp,0x10
c0009a94:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a98:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a9c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009aa0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009aa4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009aa8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009aac:	e8 ef ca 01 00       	call   c00265a0 <__muldf3>
c0009ab1:	83 c4 10             	add    esp,0x10
c0009ab4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009ab8:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009abc:	52                   	push   edx
c0009abd:	50                   	push   eax
c0009abe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ac2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ac6:	e8 58 c4 01 00       	call   c0025f23 <__adddf3>
c0009acb:	83 c4 10             	add    esp,0x10
c0009ace:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ad2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ad6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ada:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009ade:	0f 89 c5 fe ff ff    	jns    c00099a9 <calc_output_stereo+0x81>
c0009ae4:	29 e9                	sub    ecx,ebp
c0009ae6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009aea:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009aee:	29 c8                	sub    eax,ecx
c0009af0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009af8:	99                   	cdq    
c0009af9:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009afd:	31 d2                	xor    edx,edx
c0009aff:	0f af f8             	imul   edi,eax
c0009b02:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b06:	40                   	inc    eax
c0009b07:	01 cf                	add    edi,ecx
c0009b09:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009b0e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009b12:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009b1a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009b1d:	31 c0                	xor    eax,eax
c0009b1f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b23:	89 f8                	mov    eax,edi
c0009b25:	83 eb 08             	sub    ebx,0x8
c0009b28:	e8 6b fb ff ff       	call   c0009698 <fp_to_double>
c0009b2d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009b31:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009b35:	89 f8                	mov    eax,edi
c0009b37:	e8 52 fb ff ff       	call   c000968e <fp_to_int>
c0009b3c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009b3f:	52                   	push   edx
c0009b40:	52                   	push   edx
c0009b41:	55                   	push   ebp
c0009b42:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009b46:	e8 6d bd 01 00       	call   c00258b8 <__subsf3>
c0009b4b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b4e:	e8 44 d4 01 00       	call   c0026f97 <__extendsfdf2>
c0009b53:	83 c4 10             	add    esp,0x10
c0009b56:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b5a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009b5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009b62:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009b66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009b6a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009b6e:	e8 2d ca 01 00       	call   c00265a0 <__muldf3>
c0009b73:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009b76:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b7a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b7e:	e8 14 d4 01 00       	call   c0026f97 <__extendsfdf2>
c0009b83:	83 c4 10             	add    esp,0x10
c0009b86:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b8a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009b8e:	52                   	push   edx
c0009b8f:	50                   	push   eax
c0009b90:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009b94:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009b98:	e8 86 c3 01 00       	call   c0025f23 <__adddf3>
c0009b9d:	59                   	pop    ecx
c0009b9e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009ba2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009ba6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009bac:	e8 e6 d3 01 00       	call   c0026f97 <__extendsfdf2>
c0009bb1:	83 c4 10             	add    esp,0x10
c0009bb4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bbc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bc0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bc4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009bc8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009bcc:	e8 cf c9 01 00       	call   c00265a0 <__muldf3>
c0009bd1:	83 c4 10             	add    esp,0x10
c0009bd4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bd8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bdc:	52                   	push   edx
c0009bdd:	50                   	push   eax
c0009bde:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009be2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009be6:	e8 38 c3 01 00       	call   c0025f23 <__adddf3>
c0009beb:	5d                   	pop    ebp
c0009bec:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009bf0:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009bf4:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009bfa:	e8 98 d3 01 00       	call   c0026f97 <__extendsfdf2>
c0009bff:	83 c4 10             	add    esp,0x10
c0009c02:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009c06:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009c0a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c0e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c12:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c16:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c1a:	e8 81 c9 01 00       	call   c00265a0 <__muldf3>
c0009c1f:	83 c4 10             	add    esp,0x10
c0009c22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009c26:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009c2a:	52                   	push   edx
c0009c2b:	50                   	push   eax
c0009c2c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c30:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c34:	e8 ea c2 01 00       	call   c0025f23 <__adddf3>
c0009c39:	83 c4 10             	add    esp,0x10
c0009c3c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009c40:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009c44:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009c48:	85 ff                	test   edi,edi
c0009c4a:	0f 8f d3 fe ff ff    	jg     c0009b23 <calc_output_stereo+0x1fb>
c0009c50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c60:	e8 be c2 01 00       	call   c0025f23 <__adddf3>
c0009c65:	83 c4 10             	add    esp,0x10
c0009c68:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c6c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009c70:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c74:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c78:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c80:	e8 1b c9 01 00       	call   c00265a0 <__muldf3>
c0009c85:	59                   	pop    ecx
c0009c86:	5b                   	pop    ebx
c0009c87:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009c8b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c97:	e8 d7 d1 01 00       	call   c0026e73 <__truncdfsf2>
c0009c9c:	83 c4 10             	add    esp,0x10
c0009c9f:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ca6:	89 03                	mov    DWORD PTR [ebx],eax
c0009ca8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cb0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cb4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cb8:	e8 66 c2 01 00       	call   c0025f23 <__adddf3>
c0009cbd:	83 c4 10             	add    esp,0x10
c0009cc0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009cc4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009cc8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ccc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009cd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cd4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cd8:	e8 c3 c8 01 00       	call   c00265a0 <__muldf3>
c0009cdd:	5e                   	pop    esi
c0009cde:	5f                   	pop    edi
c0009cdf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ce3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ce7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ceb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cef:	e8 7f d1 01 00       	call   c0026e73 <__truncdfsf2>
c0009cf4:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009cfb:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009cfe:	83 c4 7c             	add    esp,0x7c
c0009d01:	5b                   	pop    ebx
c0009d02:	5e                   	pop    esi
c0009d03:	5f                   	pop    edi
c0009d04:	5d                   	pop    ebp
c0009d05:	c3                   	ret    

c0009d06 <calc_output_quad>:
c0009d06:	55                   	push   ebp
c0009d07:	57                   	push   edi
c0009d08:	56                   	push   esi
c0009d09:	89 c6                	mov    esi,eax
c0009d0b:	53                   	push   ebx
c0009d0c:	83 ec 7c             	sub    esp,0x7c
c0009d0f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d13:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009d17:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009d1e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009d25:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d29:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d2d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009d30:	e8 55 f9 ff ff       	call   c000968a <int_to_fp>
c0009d35:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009d38:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009d3b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009d3f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009d43:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009d47:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009d4b:	99                   	cdq    
c0009d4c:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009d50:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d54:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009d57:	31 d2                	xor    edx,edx
c0009d59:	0f af d8             	imul   ebx,eax
c0009d5c:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009d64:	0f af c7             	imul   eax,edi
c0009d67:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009d6b:	29 c1                	sub    ecx,eax
c0009d6d:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009d75:	31 c0                	xor    eax,eax
c0009d77:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009d7a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d7e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d82:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d86:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d8a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d8e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d92:	89 d8                	mov    eax,ebx
c0009d94:	83 c7 10             	add    edi,0x10
c0009d97:	e8 fc f8 ff ff       	call   c0009698 <fp_to_double>
c0009d9c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009da0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009da4:	89 d8                	mov    eax,ebx
c0009da6:	e8 e3 f8 ff ff       	call   c000968e <fp_to_int>
c0009dab:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009daf:	52                   	push   edx
c0009db0:	52                   	push   edx
c0009db1:	51                   	push   ecx
c0009db2:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009db6:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009dba:	e8 f9 ba 01 00       	call   c00258b8 <__subsf3>
c0009dbf:	89 04 24             	mov    DWORD PTR [esp],eax
c0009dc2:	e8 d0 d1 01 00       	call   c0026f97 <__extendsfdf2>
c0009dc7:	83 c4 10             	add    esp,0x10
c0009dca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009dce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009dd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dda:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009dde:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009de2:	e8 b9 c7 01 00       	call   c00265a0 <__muldf3>
c0009de7:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0009deb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009def:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009df2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009df6:	e8 9c d1 01 00       	call   c0026f97 <__extendsfdf2>
c0009dfb:	83 c4 10             	add    esp,0x10
c0009dfe:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e02:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e06:	52                   	push   edx
c0009e07:	50                   	push   eax
c0009e08:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e0c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e10:	e8 0e c1 01 00       	call   c0025f23 <__adddf3>
c0009e15:	59                   	pop    ecx
c0009e16:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e1a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e1e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c0009e24:	e8 6e d1 01 00       	call   c0026f97 <__extendsfdf2>
c0009e29:	83 c4 10             	add    esp,0x10
c0009e2c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e30:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e3c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e40:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e44:	e8 57 c7 01 00       	call   c00265a0 <__muldf3>
c0009e49:	83 c4 10             	add    esp,0x10
c0009e4c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e50:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e54:	52                   	push   edx
c0009e55:	50                   	push   eax
c0009e56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009e5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009e5e:	e8 c0 c0 01 00       	call   c0025f23 <__adddf3>
c0009e63:	59                   	pop    ecx
c0009e64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0009e68:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009e6c:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c0009e72:	e8 20 d1 01 00       	call   c0026f97 <__extendsfdf2>
c0009e77:	83 c4 10             	add    esp,0x10
c0009e7a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e7e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e8a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e8e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e92:	e8 09 c7 01 00       	call   c00265a0 <__muldf3>
c0009e97:	83 c4 10             	add    esp,0x10
c0009e9a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e9e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ea2:	52                   	push   edx
c0009ea3:	50                   	push   eax
c0009ea4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ea8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009eac:	e8 72 c0 01 00       	call   c0025f23 <__adddf3>
c0009eb1:	59                   	pop    ecx
c0009eb2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0009eb6:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0009eba:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009ec0:	e8 d2 d0 01 00       	call   c0026f97 <__extendsfdf2>
c0009ec5:	83 c4 10             	add    esp,0x10
c0009ec8:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009ecc:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ed0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ed4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ed8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009edc:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ee0:	e8 bb c6 01 00       	call   c00265a0 <__muldf3>
c0009ee5:	83 c4 10             	add    esp,0x10
c0009ee8:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009eec:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ef0:	52                   	push   edx
c0009ef1:	50                   	push   eax
c0009ef2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009ef6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009efa:	e8 24 c0 01 00       	call   c0025f23 <__adddf3>
c0009eff:	59                   	pop    ecx
c0009f00:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009f04:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009f08:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009f0e:	e8 84 d0 01 00       	call   c0026f97 <__extendsfdf2>
c0009f13:	83 c4 10             	add    esp,0x10
c0009f16:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f1a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f26:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f2a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f2e:	e8 6d c6 01 00       	call   c00265a0 <__muldf3>
c0009f33:	83 c4 10             	add    esp,0x10
c0009f36:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f3a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009f3e:	52                   	push   edx
c0009f3f:	50                   	push   eax
c0009f40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009f44:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009f48:	e8 d6 bf 01 00       	call   c0025f23 <__adddf3>
c0009f4d:	83 c4 10             	add    esp,0x10
c0009f50:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009f54:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009f58:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c0009f5c:	0f 89 30 fe ff ff    	jns    c0009d92 <calc_output_quad+0x8c>
c0009f62:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0009f66:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009f6a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f6e:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0009f72:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0009f7a:	29 c8                	sub    eax,ecx
c0009f7c:	99                   	cdq    
c0009f7d:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f81:	31 d2                	xor    edx,edx
c0009f83:	0f af d8             	imul   ebx,eax
c0009f86:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009f8a:	40                   	inc    eax
c0009f8b:	01 cb                	add    ebx,ecx
c0009f8d:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0009f92:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009f96:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c0009f9a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009f9e:	8d 34 86             	lea    esi,[esi+eax*4]
c0009fa1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0009fa9:	31 c0                	xor    eax,eax
c0009fab:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009faf:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009fb3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009fb7:	89 d8                	mov    eax,ebx
c0009fb9:	83 ee 10             	sub    esi,0x10
c0009fbc:	e8 d7 f6 ff ff       	call   c0009698 <fp_to_double>
c0009fc1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fc5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fc9:	89 d8                	mov    eax,ebx
c0009fcb:	e8 be f6 ff ff       	call   c000968e <fp_to_int>
c0009fd0:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c0009fd4:	52                   	push   edx
c0009fd5:	52                   	push   edx
c0009fd6:	57                   	push   edi
c0009fd7:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009fdb:	e8 d8 b8 01 00       	call   c00258b8 <__subsf3>
c0009fe0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fe3:	e8 af cf 01 00       	call   c0026f97 <__extendsfdf2>
c0009fe8:	83 c4 10             	add    esp,0x10
c0009feb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fef:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ff3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ff7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ffb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009fff:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a003:	e8 98 c5 01 00       	call   c00265a0 <__muldf3>
c000a008:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a00b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a00f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a013:	e8 7f cf 01 00       	call   c0026f97 <__extendsfdf2>
c000a018:	83 c4 10             	add    esp,0x10
c000a01b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a01f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a023:	52                   	push   edx
c000a024:	50                   	push   eax
c000a025:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a029:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a02d:	e8 f1 be 01 00       	call   c0025f23 <__adddf3>
c000a032:	59                   	pop    ecx
c000a033:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a037:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a03b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a041:	e8 51 cf 01 00       	call   c0026f97 <__extendsfdf2>
c000a046:	83 c4 10             	add    esp,0x10
c000a049:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a04d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a051:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a055:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a059:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a05d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a061:	e8 3a c5 01 00       	call   c00265a0 <__muldf3>
c000a066:	83 c4 10             	add    esp,0x10
c000a069:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a06d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a071:	52                   	push   edx
c000a072:	50                   	push   eax
c000a073:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a077:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a07b:	e8 a3 be 01 00       	call   c0025f23 <__adddf3>
c000a080:	5f                   	pop    edi
c000a081:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a085:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a089:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a08f:	e8 03 cf 01 00       	call   c0026f97 <__extendsfdf2>
c000a094:	83 c4 10             	add    esp,0x10
c000a097:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a09b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a09f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0ab:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0af:	e8 ec c4 01 00       	call   c00265a0 <__muldf3>
c000a0b4:	83 c4 10             	add    esp,0x10
c000a0b7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0bb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0bf:	52                   	push   edx
c000a0c0:	50                   	push   eax
c000a0c1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a0c5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a0c9:	e8 55 be 01 00       	call   c0025f23 <__adddf3>
c000a0ce:	59                   	pop    ecx
c000a0cf:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a0d3:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a0d7:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a0dd:	e8 b5 ce 01 00       	call   c0026f97 <__extendsfdf2>
c000a0e2:	83 c4 10             	add    esp,0x10
c000a0e5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0e9:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0f5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0fd:	e8 9e c4 01 00       	call   c00265a0 <__muldf3>
c000a102:	83 c4 10             	add    esp,0x10
c000a105:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a109:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a10d:	52                   	push   edx
c000a10e:	50                   	push   eax
c000a10f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a113:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a117:	e8 07 be 01 00       	call   c0025f23 <__adddf3>
c000a11c:	5f                   	pop    edi
c000a11d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a121:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a125:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a12b:	e8 67 ce 01 00       	call   c0026f97 <__extendsfdf2>
c000a130:	83 c4 10             	add    esp,0x10
c000a133:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a137:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a13b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a13f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a143:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a147:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a14b:	e8 50 c4 01 00       	call   c00265a0 <__muldf3>
c000a150:	83 c4 10             	add    esp,0x10
c000a153:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a157:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a15b:	52                   	push   edx
c000a15c:	50                   	push   eax
c000a15d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a161:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a165:	e8 b9 bd 01 00       	call   c0025f23 <__adddf3>
c000a16a:	83 c4 10             	add    esp,0x10
c000a16d:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a171:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a175:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a179:	85 db                	test   ebx,ebx
c000a17b:	0f 8f 36 fe ff ff    	jg     c0009fb7 <calc_output_quad+0x2b1>
c000a181:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a185:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a189:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a18d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a191:	e8 8d bd 01 00       	call   c0025f23 <__adddf3>
c000a196:	83 c4 10             	add    esp,0x10
c000a199:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a19d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a1a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1b1:	e8 ea c3 01 00       	call   c00265a0 <__muldf3>
c000a1b6:	59                   	pop    ecx
c000a1b7:	5b                   	pop    ebx
c000a1b8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a1bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a1c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1c8:	e8 a6 cc 01 00       	call   c0026e73 <__truncdfsf2>
c000a1cd:	83 c4 10             	add    esp,0x10
c000a1d0:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a1d7:	89 06                	mov    DWORD PTR [esi],eax
c000a1d9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a1dd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a1e1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a1e5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a1e9:	e8 35 bd 01 00       	call   c0025f23 <__adddf3>
c000a1ee:	83 c4 10             	add    esp,0x10
c000a1f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a1f5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a1f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a201:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a205:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a209:	e8 92 c3 01 00       	call   c00265a0 <__muldf3>
c000a20e:	5e                   	pop    esi
c000a20f:	5f                   	pop    edi
c000a210:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a214:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a218:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a21c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a220:	e8 4e cc 01 00       	call   c0026e73 <__truncdfsf2>
c000a225:	83 c4 10             	add    esp,0x10
c000a228:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a22f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a232:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a236:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a23a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a23e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a242:	e8 dc bc 01 00       	call   c0025f23 <__adddf3>
c000a247:	83 c4 10             	add    esp,0x10
c000a24a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a24e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a252:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a256:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a25a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a25e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a262:	e8 39 c3 01 00       	call   c00265a0 <__muldf3>
c000a267:	5d                   	pop    ebp
c000a268:	59                   	pop    ecx
c000a269:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a26d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a271:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a275:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a279:	e8 f5 cb 01 00       	call   c0026e73 <__truncdfsf2>
c000a27e:	83 c4 10             	add    esp,0x10
c000a281:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a288:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a28b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a28f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a293:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a297:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a29b:	e8 83 bc 01 00       	call   c0025f23 <__adddf3>
c000a2a0:	83 c4 10             	add    esp,0x10
c000a2a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a2a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a2ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2bb:	e8 e0 c2 01 00       	call   c00265a0 <__muldf3>
c000a2c0:	5b                   	pop    ebx
c000a2c1:	5e                   	pop    esi
c000a2c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a2c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a2ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2d2:	e8 9c cb 01 00       	call   c0026e73 <__truncdfsf2>
c000a2d7:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a2de:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a2e1:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a2e7:	5b                   	pop    ebx
c000a2e8:	5e                   	pop    esi
c000a2e9:	5f                   	pop    edi
c000a2ea:	5d                   	pop    ebp
c000a2eb:	c3                   	ret    

c000a2ec <calc_output_hex>:
c000a2ec:	55                   	push   ebp
c000a2ed:	89 cd                	mov    ebp,ecx
c000a2ef:	57                   	push   edi
c000a2f0:	56                   	push   esi
c000a2f1:	53                   	push   ebx
c000a2f2:	89 c3                	mov    ebx,eax
c000a2f4:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a2fa:	89 14 24             	mov    DWORD PTR [esp],edx
c000a2fd:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a304:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a30b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a30f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a313:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a316:	e8 6f f3 ff ff       	call   c000968a <int_to_fp>
c000a31b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a31e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a322:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a325:	29 c8                	sub    eax,ecx
c000a327:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a32b:	99                   	cdq    
c000a32c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a334:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a337:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a33f:	0f af f8             	imul   edi,eax
c000a342:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a345:	01 cf                	add    edi,ecx
c000a347:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a34b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a34e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a352:	0f af c2             	imul   eax,edx
c000a355:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a359:	29 c1                	sub    ecx,eax
c000a35b:	31 d2                	xor    edx,edx
c000a35d:	31 c0                	xor    eax,eax
c000a35f:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a362:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a366:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a36a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a36e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a372:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a376:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a37a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a37e:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a382:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a386:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a38a:	89 f8                	mov    eax,edi
c000a38c:	e8 07 f3 ff ff       	call   c0009698 <fp_to_double>
c000a391:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a395:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a399:	89 f8                	mov    eax,edi
c000a39b:	e8 ee f2 ff ff       	call   c000968e <fp_to_int>
c000a3a0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a3a4:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a3a7:	52                   	push   edx
c000a3a8:	52                   	push   edx
c000a3a9:	51                   	push   ecx
c000a3aa:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a3ae:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a3b5:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a3b9:	e8 fa b4 01 00       	call   c00258b8 <__subsf3>
c000a3be:	89 04 24             	mov    DWORD PTR [esp],eax
c000a3c1:	e8 d1 cb 01 00       	call   c0026f97 <__extendsfdf2>
c000a3c6:	83 c4 10             	add    esp,0x10
c000a3c9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a3cd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a3d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a3dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a3e1:	e8 ba c1 01 00       	call   c00265a0 <__muldf3>
c000a3e6:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a3ea:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a3ee:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a3f1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a3f5:	e8 9d cb 01 00       	call   c0026f97 <__extendsfdf2>
c000a3fa:	83 c4 10             	add    esp,0x10
c000a3fd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a401:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a405:	52                   	push   edx
c000a406:	50                   	push   eax
c000a407:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a40b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a40f:	e8 0f bb 01 00       	call   c0025f23 <__adddf3>
c000a414:	59                   	pop    ecx
c000a415:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a419:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a41d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a423:	e8 6f cb 01 00       	call   c0026f97 <__extendsfdf2>
c000a428:	83 c4 10             	add    esp,0x10
c000a42b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a42f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a433:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a437:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a43b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a43f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a443:	e8 58 c1 01 00       	call   c00265a0 <__muldf3>
c000a448:	83 c4 10             	add    esp,0x10
c000a44b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a44f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a453:	52                   	push   edx
c000a454:	50                   	push   eax
c000a455:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a459:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a45d:	e8 c1 ba 01 00       	call   c0025f23 <__adddf3>
c000a462:	59                   	pop    ecx
c000a463:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a467:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a46b:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a471:	e8 21 cb 01 00       	call   c0026f97 <__extendsfdf2>
c000a476:	83 c4 10             	add    esp,0x10
c000a479:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a47d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a481:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a485:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a489:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a48d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a491:	e8 0a c1 01 00       	call   c00265a0 <__muldf3>
c000a496:	83 c4 10             	add    esp,0x10
c000a499:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a49d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4a1:	52                   	push   edx
c000a4a2:	50                   	push   eax
c000a4a3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ab:	e8 73 ba 01 00       	call   c0025f23 <__adddf3>
c000a4b0:	59                   	pop    ecx
c000a4b1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a4b5:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a4b9:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a4bf:	e8 d3 ca 01 00       	call   c0026f97 <__extendsfdf2>
c000a4c4:	83 c4 10             	add    esp,0x10
c000a4c7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4cb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4db:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4df:	e8 bc c0 01 00       	call   c00265a0 <__muldf3>
c000a4e4:	83 c4 10             	add    esp,0x10
c000a4e7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4eb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4ef:	52                   	push   edx
c000a4f0:	50                   	push   eax
c000a4f1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a4f5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a4f9:	e8 25 ba 01 00       	call   c0025f23 <__adddf3>
c000a4fe:	59                   	pop    ecx
c000a4ff:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a503:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a507:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a50d:	e8 85 ca 01 00       	call   c0026f97 <__extendsfdf2>
c000a512:	83 c4 10             	add    esp,0x10
c000a515:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a519:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a51d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a521:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a525:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a529:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a52d:	e8 6e c0 01 00       	call   c00265a0 <__muldf3>
c000a532:	83 c4 10             	add    esp,0x10
c000a535:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a539:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a53d:	52                   	push   edx
c000a53e:	50                   	push   eax
c000a53f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a543:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a547:	e8 d7 b9 01 00       	call   c0025f23 <__adddf3>
c000a54c:	59                   	pop    ecx
c000a54d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a551:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a555:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a55b:	e8 37 ca 01 00       	call   c0026f97 <__extendsfdf2>
c000a560:	83 c4 10             	add    esp,0x10
c000a563:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a567:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a56b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a56f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a573:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a577:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a57b:	e8 20 c0 01 00       	call   c00265a0 <__muldf3>
c000a580:	83 c4 10             	add    esp,0x10
c000a583:	83 c6 18             	add    esi,0x18
c000a586:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a58a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a58e:	52                   	push   edx
c000a58f:	50                   	push   eax
c000a590:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a594:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a598:	e8 86 b9 01 00       	call   c0025f23 <__adddf3>
c000a59d:	59                   	pop    ecx
c000a59e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a5a2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a5a6:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a5ac:	e8 e6 c9 01 00       	call   c0026f97 <__extendsfdf2>
c000a5b1:	83 c4 10             	add    esp,0x10
c000a5b4:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5b8:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5c4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5c8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5cc:	e8 cf bf 01 00       	call   c00265a0 <__muldf3>
c000a5d1:	83 c4 10             	add    esp,0x10
c000a5d4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5d8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5dc:	52                   	push   edx
c000a5dd:	50                   	push   eax
c000a5de:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a5e2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a5e6:	e8 38 b9 01 00       	call   c0025f23 <__adddf3>
c000a5eb:	83 c4 10             	add    esp,0x10
c000a5ee:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a5f2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a5f6:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a5f9:	0f 89 8b fd ff ff    	jns    c000a38a <calc_output_hex+0x9e>
c000a5ff:	31 f6                	xor    esi,esi
c000a601:	31 ff                	xor    edi,edi
c000a603:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a607:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a60a:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a60e:	29 e9                	sub    ecx,ebp
c000a610:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a614:	29 c8                	sub    eax,ecx
c000a616:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a619:	99                   	cdq    
c000a61a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a61e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a621:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a625:	0f af e8             	imul   ebp,eax
c000a628:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a62c:	40                   	inc    eax
c000a62d:	01 cd                	add    ebp,ecx
c000a62f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a634:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a638:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a63c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a640:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a643:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a647:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a64b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a64f:	89 e8                	mov    eax,ebp
c000a651:	e8 42 f0 ff ff       	call   c0009698 <fp_to_double>
c000a656:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a65a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a65e:	89 e8                	mov    eax,ebp
c000a660:	e8 29 f0 ff ff       	call   c000968e <fp_to_int>
c000a665:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a669:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a66c:	52                   	push   edx
c000a66d:	52                   	push   edx
c000a66e:	51                   	push   ecx
c000a66f:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a676:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a67d:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a681:	e8 32 b2 01 00       	call   c00258b8 <__subsf3>
c000a686:	89 04 24             	mov    DWORD PTR [esp],eax
c000a689:	e8 09 c9 01 00       	call   c0026f97 <__extendsfdf2>
c000a68e:	83 c4 10             	add    esp,0x10
c000a691:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a695:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a699:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6a1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a6a5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a6a9:	e8 f2 be 01 00       	call   c00265a0 <__muldf3>
c000a6ae:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a6b5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a6b9:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a6bc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a6c0:	e8 d2 c8 01 00       	call   c0026f97 <__extendsfdf2>
c000a6c5:	83 c4 10             	add    esp,0x10
c000a6c8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a6cc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a6d0:	52                   	push   edx
c000a6d1:	50                   	push   eax
c000a6d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6da:	e8 44 b8 01 00       	call   c0025f23 <__adddf3>
c000a6df:	59                   	pop    ecx
c000a6e0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a6e4:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a6e8:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a6ee:	e8 a4 c8 01 00       	call   c0026f97 <__extendsfdf2>
c000a6f3:	83 c4 10             	add    esp,0x10
c000a6f6:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a6fa:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a6fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a702:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a706:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a70a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a70e:	e8 8d be 01 00       	call   c00265a0 <__muldf3>
c000a713:	83 c4 10             	add    esp,0x10
c000a716:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a71a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a71e:	52                   	push   edx
c000a71f:	50                   	push   eax
c000a720:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a724:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a728:	e8 f6 b7 01 00       	call   c0025f23 <__adddf3>
c000a72d:	59                   	pop    ecx
c000a72e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a732:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a736:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a73c:	e8 56 c8 01 00       	call   c0026f97 <__extendsfdf2>
c000a741:	83 c4 10             	add    esp,0x10
c000a744:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a748:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a74c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a750:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a754:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a758:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a75c:	e8 3f be 01 00       	call   c00265a0 <__muldf3>
c000a761:	83 c4 10             	add    esp,0x10
c000a764:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a768:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a76c:	52                   	push   edx
c000a76d:	50                   	push   eax
c000a76e:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a772:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a776:	e8 a8 b7 01 00       	call   c0025f23 <__adddf3>
c000a77b:	59                   	pop    ecx
c000a77c:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a780:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a784:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a78a:	e8 08 c8 01 00       	call   c0026f97 <__extendsfdf2>
c000a78f:	83 c4 10             	add    esp,0x10
c000a792:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a796:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a79a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a79e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7a2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7a6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7aa:	e8 f1 bd 01 00       	call   c00265a0 <__muldf3>
c000a7af:	83 c4 10             	add    esp,0x10
c000a7b2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7b6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7ba:	52                   	push   edx
c000a7bb:	50                   	push   eax
c000a7bc:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c4:	e8 5a b7 01 00       	call   c0025f23 <__adddf3>
c000a7c9:	59                   	pop    ecx
c000a7ca:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a7ce:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a7d2:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a7d8:	e8 ba c7 01 00       	call   c0026f97 <__extendsfdf2>
c000a7dd:	83 c4 10             	add    esp,0x10
c000a7e0:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7e4:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7f0:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7f4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7f8:	e8 a3 bd 01 00       	call   c00265a0 <__muldf3>
c000a7fd:	83 c4 10             	add    esp,0x10
c000a800:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a804:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a808:	52                   	push   edx
c000a809:	50                   	push   eax
c000a80a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a80e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a812:	e8 0c b7 01 00       	call   c0025f23 <__adddf3>
c000a817:	59                   	pop    ecx
c000a818:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a81c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a820:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000a826:	e8 6c c7 01 00       	call   c0026f97 <__extendsfdf2>
c000a82b:	83 c4 10             	add    esp,0x10
c000a82e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a832:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a836:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a83a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a83e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a842:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a846:	e8 55 bd 01 00       	call   c00265a0 <__muldf3>
c000a84b:	83 c4 10             	add    esp,0x10
c000a84e:	83 eb 18             	sub    ebx,0x18
c000a851:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a855:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a859:	52                   	push   edx
c000a85a:	50                   	push   eax
c000a85b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a85f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a863:	e8 bb b6 01 00       	call   c0025f23 <__adddf3>
c000a868:	59                   	pop    ecx
c000a869:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a86d:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000a871:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000a877:	e8 1b c7 01 00       	call   c0026f97 <__extendsfdf2>
c000a87c:	83 c4 10             	add    esp,0x10
c000a87f:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a883:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a887:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a88b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a88f:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a893:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a897:	e8 04 bd 01 00       	call   c00265a0 <__muldf3>
c000a89c:	83 c4 10             	add    esp,0x10
c000a89f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8a3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8a7:	52                   	push   edx
c000a8a8:	50                   	push   eax
c000a8a9:	57                   	push   edi
c000a8aa:	56                   	push   esi
c000a8ab:	e8 73 b6 01 00       	call   c0025f23 <__adddf3>
c000a8b0:	83 c4 10             	add    esp,0x10
c000a8b3:	89 c6                	mov    esi,eax
c000a8b5:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000a8b8:	89 d7                	mov    edi,edx
c000a8ba:	85 ed                	test   ebp,ebp
c000a8bc:	0f 8f 8d fd ff ff    	jg     c000a64f <calc_output_hex+0x363>
c000a8c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8c6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8d2:	e8 4c b6 01 00       	call   c0025f23 <__adddf3>
c000a8d7:	83 c4 10             	add    esp,0x10
c000a8da:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8dd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a8e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8f1:	e8 aa bc 01 00       	call   c00265a0 <__muldf3>
c000a8f6:	59                   	pop    ecx
c000a8f7:	5b                   	pop    ebx
c000a8f8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a8fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a900:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a904:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a908:	e8 66 c5 01 00       	call   c0026e73 <__truncdfsf2>
c000a90d:	83 c4 10             	add    esp,0x10
c000a910:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a917:	89 03                	mov    DWORD PTR [ebx],eax
c000a919:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a91d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a921:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a925:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a929:	e8 f5 b5 01 00       	call   c0025f23 <__adddf3>
c000a92e:	83 c4 10             	add    esp,0x10
c000a931:	89 04 24             	mov    DWORD PTR [esp],eax
c000a934:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a938:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a93c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a940:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a944:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a948:	e8 53 bc 01 00       	call   c00265a0 <__muldf3>
c000a94d:	5d                   	pop    ebp
c000a94e:	59                   	pop    ecx
c000a94f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a953:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a957:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a95b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a95f:	e8 0f c5 01 00       	call   c0026e73 <__truncdfsf2>
c000a964:	83 c4 10             	add    esp,0x10
c000a967:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a96e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000a971:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a975:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a979:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a97d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a981:	e8 9d b5 01 00       	call   c0025f23 <__adddf3>
c000a986:	83 c4 10             	add    esp,0x10
c000a989:	89 04 24             	mov    DWORD PTR [esp],eax
c000a98c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a990:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a994:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a998:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a99c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9a0:	e8 fb bb 01 00       	call   c00265a0 <__muldf3>
c000a9a5:	5b                   	pop    ebx
c000a9a6:	5d                   	pop    ebp
c000a9a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a9ab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9b7:	e8 b7 c4 01 00       	call   c0026e73 <__truncdfsf2>
c000a9bc:	83 c4 10             	add    esp,0x10
c000a9bf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a9c6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000a9c9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a9cd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a9d1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a9d5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a9d9:	e8 45 b5 01 00       	call   c0025f23 <__adddf3>
c000a9de:	83 c4 10             	add    esp,0x10
c000a9e1:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9e4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9e8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9ec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9f8:	e8 a3 bb 01 00       	call   c00265a0 <__muldf3>
c000a9fd:	59                   	pop    ecx
c000a9fe:	5b                   	pop    ebx
c000a9ff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa03:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa07:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa0b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa0f:	e8 5f c4 01 00       	call   c0026e73 <__truncdfsf2>
c000aa14:	83 c4 10             	add    esp,0x10
c000aa17:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa1e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000aa21:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa25:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa29:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa2d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa31:	e8 ed b4 01 00       	call   c0025f23 <__adddf3>
c000aa36:	83 c4 10             	add    esp,0x10
c000aa39:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa48:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa4c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa50:	e8 4b bb 01 00       	call   c00265a0 <__muldf3>
c000aa55:	5d                   	pop    ebp
c000aa56:	59                   	pop    ecx
c000aa57:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa5b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa5f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa63:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa67:	e8 07 c4 01 00       	call   c0026e73 <__truncdfsf2>
c000aa6c:	83 c4 10             	add    esp,0x10
c000aa6f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa76:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000aa79:	57                   	push   edi
c000aa7a:	56                   	push   esi
c000aa7b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa7f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa83:	e8 9b b4 01 00       	call   c0025f23 <__adddf3>
c000aa88:	83 c4 10             	add    esp,0x10
c000aa8b:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa8e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa92:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa96:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa9a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa9e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaa2:	e8 f9 ba 01 00       	call   c00265a0 <__muldf3>
c000aaa7:	5b                   	pop    ebx
c000aaa8:	5e                   	pop    esi
c000aaa9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aaad:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aab1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aab5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aab9:	e8 b5 c3 01 00       	call   c0026e73 <__truncdfsf2>
c000aabe:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000aac5:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000aac8:	81 c4 9c 00 00 00    	add    esp,0x9c
c000aace:	5b                   	pop    ebx
c000aacf:	5e                   	pop    esi
c000aad0:	5f                   	pop    edi
c000aad1:	5d                   	pop    ebp
c000aad2:	c3                   	ret    

c000aad3 <sinc_reset>:
c000aad3:	56                   	push   esi
c000aad4:	53                   	push   ebx
c000aad5:	51                   	push   ecx
c000aad6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aada:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000aadd:	85 db                	test   ebx,ebx
c000aadf:	74 59                	je     c000ab3a <sinc_reset+0x67>
c000aae1:	31 d2                	xor    edx,edx
c000aae3:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000aaea:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000aaed:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000aaf0:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000aaf7:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000aafe:	31 c0                	xor    eax,eax
c000ab00:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ab06:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ab09:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ab0c:	52                   	push   edx
c000ab0d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab10:	c1 e0 02             	shl    eax,0x2
c000ab13:	50                   	push   eax
c000ab14:	6a 00                	push   0x0
c000ab16:	56                   	push   esi
c000ab17:	e8 6f 5b ff ff       	call   c000068b <memset>
c000ab1c:	83 c4 0c             	add    esp,0xc
c000ab1f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ab22:	c1 e0 02             	shl    eax,0x2
c000ab25:	50                   	push   eax
c000ab26:	68 aa 00 00 00       	push   0xaa
c000ab2b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab2e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ab31:	50                   	push   eax
c000ab32:	e8 54 5b ff ff       	call   c000068b <memset>
c000ab37:	83 c4 10             	add    esp,0x10
c000ab3a:	58                   	pop    eax
c000ab3b:	5b                   	pop    ebx
c000ab3c:	5e                   	pop    esi
c000ab3d:	c3                   	ret    

c000ab3e <calc_output_multi>:
c000ab3e:	55                   	push   ebp
c000ab3f:	57                   	push   edi
c000ab40:	56                   	push   esi
c000ab41:	89 c6                	mov    esi,eax
c000ab43:	53                   	push   ebx
c000ab44:	83 ec 4c             	sub    esp,0x4c
c000ab47:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ab4b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ab4f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ab53:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ab57:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ab5b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ab5f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ab63:	8d 46 44             	lea    eax,[esi+0x44]
c000ab66:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab69:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ab6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ab73:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ab76:	e8 0f eb ff ff       	call   c000968a <int_to_fp>
c000ab7b:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ab7e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ab82:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ab86:	99                   	cdq    
c000ab87:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ab8b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ab8f:	0f af d0             	imul   edx,eax
c000ab92:	0f af c3             	imul   eax,ebx
c000ab95:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ab99:	29 c1                	sub    ecx,eax
c000ab9b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ab9f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000aba3:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000abaa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000abae:	57                   	push   edi
c000abaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000abb3:	6a 00                	push   0x0
c000abb5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb9:	e8 cd 5a ff ff       	call   c000068b <memset>
c000abbe:	83 c4 10             	add    esp,0x10
c000abc1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000abc5:	89 df                	mov    edi,ebx
c000abc7:	e8 cc ea ff ff       	call   c0009698 <fp_to_double>
c000abcc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000abd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000abd4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000abd8:	e8 b1 ea ff ff       	call   c000968e <fp_to_int>
c000abdd:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000abe0:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000abe3:	51                   	push   ecx
c000abe4:	51                   	push   ecx
c000abe5:	55                   	push   ebp
c000abe6:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000abea:	e8 c9 ac 01 00       	call   c00258b8 <__subsf3>
c000abef:	89 04 24             	mov    DWORD PTR [esp],eax
c000abf2:	e8 a0 c3 01 00       	call   c0026f97 <__extendsfdf2>
c000abf7:	83 c4 10             	add    esp,0x10
c000abfa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000abfe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac0a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac0e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac12:	e8 89 b9 01 00       	call   c00265a0 <__muldf3>
c000ac17:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ac1a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ac1e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ac22:	e8 70 c3 01 00       	call   c0026f97 <__extendsfdf2>
c000ac27:	83 c4 10             	add    esp,0x10
c000ac2a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac2e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac32:	52                   	push   edx
c000ac33:	50                   	push   eax
c000ac34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac3c:	e8 e2 b2 01 00       	call   c0025f23 <__adddf3>
c000ac41:	83 c4 10             	add    esp,0x10
c000ac44:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac48:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ac4c:	89 f8                	mov    eax,edi
c000ac4e:	b9 08 00 00 00       	mov    ecx,0x8
c000ac53:	99                   	cdq    
c000ac54:	f7 f9                	idiv   ecx
c000ac56:	4a                   	dec    edx
c000ac57:	83 fa 06             	cmp    edx,0x6
c000ac5a:	77 07                	ja     c000ac63 <calc_output_multi+0x125>
c000ac5c:	ff 24 95 64 87 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd789c]
c000ac63:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ac66:	4f                   	dec    edi
c000ac67:	83 ec 0c             	sub    esp,0xc
c000ac6a:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ac6d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac71:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ac78:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ac7c:	e8 16 c3 01 00       	call   c0026f97 <__extendsfdf2>
c000ac81:	83 c4 10             	add    esp,0x10
c000ac84:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac88:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac90:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac94:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac98:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac9c:	e8 ff b8 01 00       	call   c00265a0 <__muldf3>
c000aca1:	83 c4 10             	add    esp,0x10
c000aca4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aca8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000acac:	52                   	push   edx
c000acad:	50                   	push   eax
c000acae:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000acb1:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000acb4:	e8 6a b2 01 00       	call   c0025f23 <__adddf3>
c000acb9:	83 c4 10             	add    esp,0x10
c000acbc:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000acbf:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000acc2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000acc5:	4f                   	dec    edi
c000acc6:	83 ec 0c             	sub    esp,0xc
c000acc9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000accc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000acd0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000acd7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000acdb:	e8 b7 c2 01 00       	call   c0026f97 <__extendsfdf2>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ace7:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aceb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acf3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000acf7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000acfb:	e8 a0 b8 01 00       	call   c00265a0 <__muldf3>
c000ad00:	83 c4 10             	add    esp,0x10
c000ad03:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad07:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad0b:	52                   	push   edx
c000ad0c:	50                   	push   eax
c000ad0d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad10:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad13:	e8 0b b2 01 00       	call   c0025f23 <__adddf3>
c000ad18:	83 c4 10             	add    esp,0x10
c000ad1b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad1e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ad21:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad24:	4f                   	dec    edi
c000ad25:	83 ec 0c             	sub    esp,0xc
c000ad28:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad2b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad2f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad36:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad3a:	e8 58 c2 01 00       	call   c0026f97 <__extendsfdf2>
c000ad3f:	83 c4 10             	add    esp,0x10
c000ad42:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad46:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad52:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad56:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad5a:	e8 41 b8 01 00       	call   c00265a0 <__muldf3>
c000ad5f:	83 c4 10             	add    esp,0x10
c000ad62:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad66:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad6a:	52                   	push   edx
c000ad6b:	50                   	push   eax
c000ad6c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad6f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad72:	e8 ac b1 01 00       	call   c0025f23 <__adddf3>
c000ad77:	83 c4 10             	add    esp,0x10
c000ad7a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad7d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ad80:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad83:	4f                   	dec    edi
c000ad84:	83 ec 0c             	sub    esp,0xc
c000ad87:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad8a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad8e:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad95:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad99:	e8 f9 c1 01 00       	call   c0026f97 <__extendsfdf2>
c000ad9e:	83 c4 10             	add    esp,0x10
c000ada1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ada5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ada9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000adad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000adb1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adb5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adb9:	e8 e2 b7 01 00       	call   c00265a0 <__muldf3>
c000adbe:	83 c4 10             	add    esp,0x10
c000adc1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000adc5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000adc9:	52                   	push   edx
c000adca:	50                   	push   eax
c000adcb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000adce:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000add1:	e8 4d b1 01 00       	call   c0025f23 <__adddf3>
c000add6:	83 c4 10             	add    esp,0x10
c000add9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000addc:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000addf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ade2:	4f                   	dec    edi
c000ade3:	83 ec 0c             	sub    esp,0xc
c000ade6:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ade9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aded:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000adf4:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000adf8:	e8 9a c1 01 00       	call   c0026f97 <__extendsfdf2>
c000adfd:	83 c4 10             	add    esp,0x10
c000ae00:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae04:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae10:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae14:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae18:	e8 83 b7 01 00       	call   c00265a0 <__muldf3>
c000ae1d:	83 c4 10             	add    esp,0x10
c000ae20:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae24:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae28:	52                   	push   edx
c000ae29:	50                   	push   eax
c000ae2a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae2d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae30:	e8 ee b0 01 00       	call   c0025f23 <__adddf3>
c000ae35:	83 c4 10             	add    esp,0x10
c000ae38:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae3b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae3e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae41:	4f                   	dec    edi
c000ae42:	83 ec 0c             	sub    esp,0xc
c000ae45:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae48:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae4c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae53:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae57:	e8 3b c1 01 00       	call   c0026f97 <__extendsfdf2>
c000ae5c:	83 c4 10             	add    esp,0x10
c000ae5f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae63:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae6f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae73:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae77:	e8 24 b7 01 00       	call   c00265a0 <__muldf3>
c000ae7c:	83 c4 10             	add    esp,0x10
c000ae7f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae83:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae87:	52                   	push   edx
c000ae88:	50                   	push   eax
c000ae89:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae8c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae8f:	e8 8f b0 01 00       	call   c0025f23 <__adddf3>
c000ae94:	83 c4 10             	add    esp,0x10
c000ae97:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae9a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae9d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aea0:	4f                   	dec    edi
c000aea1:	83 ec 0c             	sub    esp,0xc
c000aea4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aea7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aeab:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeb2:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aeb6:	e8 dc c0 01 00       	call   c0026f97 <__extendsfdf2>
c000aebb:	83 c4 10             	add    esp,0x10
c000aebe:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aec2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aec6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aece:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aed2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aed6:	e8 c5 b6 01 00       	call   c00265a0 <__muldf3>
c000aedb:	83 c4 10             	add    esp,0x10
c000aede:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aee2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aee6:	52                   	push   edx
c000aee7:	50                   	push   eax
c000aee8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aeeb:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aeee:	e8 30 b0 01 00       	call   c0025f23 <__adddf3>
c000aef3:	83 c4 10             	add    esp,0x10
c000aef6:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aef9:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aefc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeff:	4f                   	dec    edi
c000af00:	83 ec 0c             	sub    esp,0xc
c000af03:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af06:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af0a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af11:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af15:	e8 7d c0 01 00       	call   c0026f97 <__extendsfdf2>
c000af1a:	83 c4 10             	add    esp,0x10
c000af1d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af21:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af2d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af31:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af35:	e8 66 b6 01 00       	call   c00265a0 <__muldf3>
c000af3a:	83 c4 10             	add    esp,0x10
c000af3d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af41:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af45:	52                   	push   edx
c000af46:	50                   	push   eax
c000af47:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af4a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af4d:	e8 d1 af 01 00       	call   c0025f23 <__adddf3>
c000af52:	83 c4 10             	add    esp,0x10
c000af55:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af58:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af5b:	85 ff                	test   edi,edi
c000af5d:	0f 8f e9 fc ff ff    	jg     c000ac4c <calc_output_multi+0x10e>
c000af63:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000af67:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000af6b:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000af6f:	0f 89 4c fc ff ff    	jns    c000abc1 <calc_output_multi+0x83>
c000af75:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000af79:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000af7d:	29 c8                	sub    eax,ecx
c000af7f:	99                   	cdq    
c000af80:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000af84:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000af88:	0f af d0             	imul   edx,eax
c000af8b:	40                   	inc    eax
c000af8c:	01 d1                	add    ecx,edx
c000af8e:	0f af c3             	imul   eax,ebx
c000af91:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000af95:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000af98:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000af9c:	55                   	push   ebp
c000af9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000afa1:	6a 00                	push   0x0
c000afa3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000afa7:	e8 df 56 ff ff       	call   c000068b <memset>
c000afac:	83 c4 10             	add    esp,0x10
c000afaf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000afb3:	e8 e0 e6 ff ff       	call   c0009698 <fp_to_double>
c000afb8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000afbc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000afc0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000afc4:	e8 c5 e6 ff ff       	call   c000968e <fp_to_int>
c000afc9:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000afcc:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000afcf:	57                   	push   edi
c000afd0:	57                   	push   edi
c000afd1:	89 df                	mov    edi,ebx
c000afd3:	55                   	push   ebp
c000afd4:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000afd8:	e8 db a8 01 00       	call   c00258b8 <__subsf3>
c000afdd:	89 04 24             	mov    DWORD PTR [esp],eax
c000afe0:	e8 b2 bf 01 00       	call   c0026f97 <__extendsfdf2>
c000afe5:	83 c4 10             	add    esp,0x10
c000afe8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000afec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000aff0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aff4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aff8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000affc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b000:	e8 9b b5 01 00       	call   c00265a0 <__muldf3>
c000b005:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b008:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b00c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b010:	e8 82 bf 01 00       	call   c0026f97 <__extendsfdf2>
c000b015:	83 c4 10             	add    esp,0x10
c000b018:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b01c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b020:	52                   	push   edx
c000b021:	50                   	push   eax
c000b022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b02a:	e8 f4 ae 01 00       	call   c0025f23 <__adddf3>
c000b02f:	83 c4 10             	add    esp,0x10
c000b032:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b036:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b03a:	89 f8                	mov    eax,edi
c000b03c:	b9 08 00 00 00       	mov    ecx,0x8
c000b041:	99                   	cdq    
c000b042:	f7 f9                	idiv   ecx
c000b044:	4a                   	dec    edx
c000b045:	83 fa 06             	cmp    edx,0x6
c000b048:	77 07                	ja     c000b051 <calc_output_multi+0x513>
c000b04a:	ff 24 95 80 87 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd7880]
c000b051:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b055:	4f                   	dec    edi
c000b056:	83 ec 0c             	sub    esp,0xc
c000b059:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b05c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b060:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b067:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b06b:	e8 27 bf 01 00       	call   c0026f97 <__extendsfdf2>
c000b070:	83 c4 10             	add    esp,0x10
c000b073:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b077:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b07b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b07f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b083:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b087:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b08b:	e8 10 b5 01 00       	call   c00265a0 <__muldf3>
c000b090:	83 c4 10             	add    esp,0x10
c000b093:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b097:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b09b:	52                   	push   edx
c000b09c:	50                   	push   eax
c000b09d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0a0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0a3:	e8 7b ae 01 00       	call   c0025f23 <__adddf3>
c000b0a8:	83 c4 10             	add    esp,0x10
c000b0ab:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0ae:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0b5:	4f                   	dec    edi
c000b0b6:	83 ec 0c             	sub    esp,0xc
c000b0b9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0c0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0cb:	e8 c7 be 01 00       	call   c0026f97 <__extendsfdf2>
c000b0d0:	83 c4 10             	add    esp,0x10
c000b0d3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0d7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0eb:	e8 b0 b4 01 00       	call   c00265a0 <__muldf3>
c000b0f0:	83 c4 10             	add    esp,0x10
c000b0f3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0fb:	52                   	push   edx
c000b0fc:	50                   	push   eax
c000b0fd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b100:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b103:	e8 1b ae 01 00       	call   c0025f23 <__adddf3>
c000b108:	83 c4 10             	add    esp,0x10
c000b10b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b111:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b115:	4f                   	dec    edi
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b11c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b120:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b127:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b12b:	e8 67 be 01 00       	call   c0026f97 <__extendsfdf2>
c000b130:	83 c4 10             	add    esp,0x10
c000b133:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b137:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b143:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b147:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b14b:	e8 50 b4 01 00       	call   c00265a0 <__muldf3>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b157:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b15b:	52                   	push   edx
c000b15c:	50                   	push   eax
c000b15d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b160:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b163:	e8 bb ad 01 00       	call   c0025f23 <__adddf3>
c000b168:	83 c4 10             	add    esp,0x10
c000b16b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b171:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b175:	4f                   	dec    edi
c000b176:	83 ec 0c             	sub    esp,0xc
c000b179:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b17c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b180:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b187:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b18b:	e8 07 be 01 00       	call   c0026f97 <__extendsfdf2>
c000b190:	83 c4 10             	add    esp,0x10
c000b193:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b197:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b19b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b19f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1a3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1a7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1ab:	e8 f0 b3 01 00       	call   c00265a0 <__muldf3>
c000b1b0:	83 c4 10             	add    esp,0x10
c000b1b3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1b7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1bb:	52                   	push   edx
c000b1bc:	50                   	push   eax
c000b1bd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b1c0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b1c3:	e8 5b ad 01 00       	call   c0025f23 <__adddf3>
c000b1c8:	83 c4 10             	add    esp,0x10
c000b1cb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1ce:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b1d5:	4f                   	dec    edi
c000b1d6:	83 ec 0c             	sub    esp,0xc
c000b1d9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b1dc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b1e0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b1e7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b1eb:	e8 a7 bd 01 00       	call   c0026f97 <__extendsfdf2>
c000b1f0:	83 c4 10             	add    esp,0x10
c000b1f3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b203:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b207:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b20b:	e8 90 b3 01 00       	call   c00265a0 <__muldf3>
c000b210:	83 c4 10             	add    esp,0x10
c000b213:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b217:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b21b:	52                   	push   edx
c000b21c:	50                   	push   eax
c000b21d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b220:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b223:	e8 fb ac 01 00       	call   c0025f23 <__adddf3>
c000b228:	83 c4 10             	add    esp,0x10
c000b22b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b22e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b231:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b235:	4f                   	dec    edi
c000b236:	83 ec 0c             	sub    esp,0xc
c000b239:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b23c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b240:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b247:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b24b:	e8 47 bd 01 00       	call   c0026f97 <__extendsfdf2>
c000b250:	83 c4 10             	add    esp,0x10
c000b253:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b257:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b25b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b25f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b263:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b267:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b26b:	e8 30 b3 01 00       	call   c00265a0 <__muldf3>
c000b270:	83 c4 10             	add    esp,0x10
c000b273:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b277:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b27b:	52                   	push   edx
c000b27c:	50                   	push   eax
c000b27d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b280:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b283:	e8 9b ac 01 00       	call   c0025f23 <__adddf3>
c000b288:	83 c4 10             	add    esp,0x10
c000b28b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b28e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b291:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b295:	4f                   	dec    edi
c000b296:	83 ec 0c             	sub    esp,0xc
c000b299:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b29c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2a0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2a7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2ab:	e8 e7 bc 01 00       	call   c0026f97 <__extendsfdf2>
c000b2b0:	83 c4 10             	add    esp,0x10
c000b2b3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2b7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2cb:	e8 d0 b2 01 00       	call   c00265a0 <__muldf3>
c000b2d0:	83 c4 10             	add    esp,0x10
c000b2d3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2d7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2db:	52                   	push   edx
c000b2dc:	50                   	push   eax
c000b2dd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2e0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2e3:	e8 3b ac 01 00       	call   c0025f23 <__adddf3>
c000b2e8:	83 c4 10             	add    esp,0x10
c000b2eb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2ee:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2f5:	4f                   	dec    edi
c000b2f6:	83 ec 0c             	sub    esp,0xc
c000b2f9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2fc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b300:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b307:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b30b:	e8 87 bc 01 00       	call   c0026f97 <__extendsfdf2>
c000b310:	83 c4 10             	add    esp,0x10
c000b313:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b317:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b31b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b31f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b323:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b327:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b32b:	e8 70 b2 01 00       	call   c00265a0 <__muldf3>
c000b330:	83 c4 10             	add    esp,0x10
c000b333:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b337:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b33b:	52                   	push   edx
c000b33c:	50                   	push   eax
c000b33d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b340:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b343:	e8 db ab 01 00       	call   c0025f23 <__adddf3>
c000b348:	83 c4 10             	add    esp,0x10
c000b34b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b34e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b351:	85 ff                	test   edi,edi
c000b353:	0f 8f e1 fc ff ff    	jg     c000b03a <calc_output_multi+0x4fc>
c000b359:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b35d:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b361:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b365:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b36a:	0f 8f 3f fc ff ff    	jg     c000afaf <calc_output_multi+0x471>
c000b370:	be 08 00 00 00       	mov    esi,0x8
c000b375:	89 d8                	mov    eax,ebx
c000b377:	99                   	cdq    
c000b378:	f7 fe                	idiv   esi
c000b37a:	4a                   	dec    edx
c000b37b:	83 fa 06             	cmp    edx,0x6
c000b37e:	77 07                	ja     c000b387 <calc_output_multi+0x849>
c000b380:	ff 24 95 9c 87 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd7864]
c000b387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b38b:	4b                   	dec    ebx
c000b38c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b390:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b393:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b397:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b39b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b39e:	e8 80 ab 01 00       	call   c0025f23 <__adddf3>
c000b3a3:	83 c4 10             	add    esp,0x10
c000b3a6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b3aa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b3ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3be:	e8 dd b1 01 00       	call   c00265a0 <__muldf3>
c000b3c3:	5d                   	pop    ebp
c000b3c4:	59                   	pop    ecx
c000b3c5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b3c9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b3cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3d5:	e8 99 ba 01 00       	call   c0026e73 <__truncdfsf2>
c000b3da:	83 c4 10             	add    esp,0x10
c000b3dd:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b3e1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b3e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3e8:	4b                   	dec    ebx
c000b3e9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3ed:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b3f4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3f8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3fb:	e8 23 ab 01 00       	call   c0025f23 <__adddf3>
c000b400:	83 c4 10             	add    esp,0x10
c000b403:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b407:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b40b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b40f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b413:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b417:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b41b:	e8 80 b1 01 00       	call   c00265a0 <__muldf3>
c000b420:	59                   	pop    ecx
c000b421:	5f                   	pop    edi
c000b422:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b426:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b42a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b42e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b432:	e8 3c ba 01 00       	call   c0026e73 <__truncdfsf2>
c000b437:	83 c4 10             	add    esp,0x10
c000b43a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b43e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b441:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b445:	4b                   	dec    ebx
c000b446:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b44a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b44d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b451:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b455:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b458:	e8 c6 aa 01 00       	call   c0025f23 <__adddf3>
c000b45d:	83 c4 10             	add    esp,0x10
c000b460:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b464:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b468:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b46c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b478:	e8 23 b1 01 00       	call   c00265a0 <__muldf3>
c000b47d:	5f                   	pop    edi
c000b47e:	5d                   	pop    ebp
c000b47f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b483:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b487:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b48b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b48f:	e8 df b9 01 00       	call   c0026e73 <__truncdfsf2>
c000b494:	83 c4 10             	add    esp,0x10
c000b497:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b49b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b49e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4a2:	4b                   	dec    ebx
c000b4a3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4a7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b4ae:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4b2:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4b5:	e8 69 aa 01 00       	call   c0025f23 <__adddf3>
c000b4ba:	83 c4 10             	add    esp,0x10
c000b4bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b4c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b4c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d5:	e8 c6 b0 01 00       	call   c00265a0 <__muldf3>
c000b4da:	5d                   	pop    ebp
c000b4db:	59                   	pop    ecx
c000b4dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b4e0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b4e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4ec:	e8 82 b9 01 00       	call   c0026e73 <__truncdfsf2>
c000b4f1:	83 c4 10             	add    esp,0x10
c000b4f4:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b4f8:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b4fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ff:	4b                   	dec    ebx
c000b500:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b504:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b507:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b50b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b50f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b512:	e8 0c aa 01 00       	call   c0025f23 <__adddf3>
c000b517:	83 c4 10             	add    esp,0x10
c000b51a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b51e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b522:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b526:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b52a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b52e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b532:	e8 69 b0 01 00       	call   c00265a0 <__muldf3>
c000b537:	59                   	pop    ecx
c000b538:	5f                   	pop    edi
c000b539:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b53d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b541:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b545:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b549:	e8 25 b9 01 00       	call   c0026e73 <__truncdfsf2>
c000b54e:	83 c4 10             	add    esp,0x10
c000b551:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b555:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b558:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b55c:	4b                   	dec    ebx
c000b55d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b561:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b564:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b568:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b56c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b56f:	e8 af a9 01 00       	call   c0025f23 <__adddf3>
c000b574:	83 c4 10             	add    esp,0x10
c000b577:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b57b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b57f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b583:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b587:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b58b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b58f:	e8 0c b0 01 00       	call   c00265a0 <__muldf3>
c000b594:	5f                   	pop    edi
c000b595:	5d                   	pop    ebp
c000b596:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b59a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b59e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5a6:	e8 c8 b8 01 00       	call   c0026e73 <__truncdfsf2>
c000b5ab:	83 c4 10             	add    esp,0x10
c000b5ae:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5b2:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5b9:	4b                   	dec    ebx
c000b5ba:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5be:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5c5:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5c9:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5cc:	e8 52 a9 01 00       	call   c0025f23 <__adddf3>
c000b5d1:	83 c4 10             	add    esp,0x10
c000b5d4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5d8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5ec:	e8 af af 01 00       	call   c00265a0 <__muldf3>
c000b5f1:	5d                   	pop    ebp
c000b5f2:	59                   	pop    ecx
c000b5f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5f7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b603:	e8 6b b8 01 00       	call   c0026e73 <__truncdfsf2>
c000b608:	83 c4 10             	add    esp,0x10
c000b60b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b60f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b612:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b616:	4b                   	dec    ebx
c000b617:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b61b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b61e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b622:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b626:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b629:	e8 f5 a8 01 00       	call   c0025f23 <__adddf3>
c000b62e:	83 c4 10             	add    esp,0x10
c000b631:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b635:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b639:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b63d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b641:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b645:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b649:	e8 52 af 01 00       	call   c00265a0 <__muldf3>
c000b64e:	59                   	pop    ecx
c000b64f:	5f                   	pop    edi
c000b650:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b654:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b658:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b65c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b660:	e8 0e b8 01 00       	call   c0026e73 <__truncdfsf2>
c000b665:	83 c4 10             	add    esp,0x10
c000b668:	85 db                	test   ebx,ebx
c000b66a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b66e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b671:	0f 8f fe fc ff ff    	jg     c000b375 <calc_output_multi+0x837>
c000b677:	83 c4 4c             	add    esp,0x4c
c000b67a:	5b                   	pop    ebx
c000b67b:	5e                   	pop    esi
c000b67c:	5f                   	pop    edi
c000b67d:	5d                   	pop    ebp
c000b67e:	c3                   	ret    

c000b67f <double_to_fp>:
c000b67f:	83 ec 0c             	sub    esp,0xc
c000b682:	68 00 00 b0 40       	push   0x40b00000
c000b687:	6a 00                	push   0x0
c000b689:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b68d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b691:	e8 0a af 01 00       	call   c00265a0 <__muldf3>
c000b696:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b69a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b69e:	83 c4 1c             	add    esp,0x1c
c000b6a1:	e9 7a b9 01 00       	jmp    c0027020 <lrint>

c000b6a6 <prepare_data>:
c000b6a6:	55                   	push   ebp
c000b6a7:	57                   	push   edi
c000b6a8:	56                   	push   esi
c000b6a9:	53                   	push   ebx
c000b6aa:	83 ec 1c             	sub    esp,0x1c
c000b6ad:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b6b1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b6b5:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b6b9:	0f 89 57 01 00 00    	jns    c000b816 <prepare_data+0x170>
c000b6bf:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b6c2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b6c5:	85 d2                	test   edx,edx
c000b6c7:	75 0d                	jne    c000b6d6 <prepare_data+0x30>
c000b6c9:	8d 14 36             	lea    edx,[esi+esi*1]
c000b6cc:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b6cf:	29 d0                	sub    eax,edx
c000b6d1:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b6d4:	eb 44                	jmp    c000b71a <prepare_data+0x74>
c000b6d6:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b6d9:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b6dc:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b6df:	39 c1                	cmp    ecx,eax
c000b6e1:	7d 04                	jge    c000b6e7 <prepare_data+0x41>
c000b6e3:	29 d0                	sub    eax,edx
c000b6e5:	eb 2d                	jmp    c000b714 <prepare_data+0x6e>
c000b6e7:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b6ed:	29 d7                	sub    edi,edx
c000b6ef:	01 f7                	add    edi,esi
c000b6f1:	51                   	push   ecx
c000b6f2:	29 f2                	sub    edx,esi
c000b6f4:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b6fb:	8d 14 90             	lea    edx,[eax+edx*4]
c000b6fe:	51                   	push   ecx
c000b6ff:	52                   	push   edx
c000b700:	50                   	push   eax
c000b701:	e8 17 4f ff ff       	call   c000061d <memmove>
c000b706:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b709:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b70c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b70f:	29 f0                	sub    eax,esi
c000b711:	83 c4 10             	add    esp,0x10
c000b714:	29 f0                	sub    eax,esi
c000b716:	79 02                	jns    c000b71a <prepare_data+0x74>
c000b718:	31 c0                	xor    eax,eax
c000b71a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b71d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b720:	29 ef                	sub    edi,ebp
c000b722:	39 c7                	cmp    edi,eax
c000b724:	7e 02                	jle    c000b728 <prepare_data+0x82>
c000b726:	89 c7                	mov    edi,eax
c000b728:	89 f8                	mov    eax,edi
c000b72a:	99                   	cdq    
c000b72b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b72e:	b8 15 00 00 00       	mov    eax,0x15
c000b733:	29 d7                	sub    edi,edx
c000b735:	0f 88 dd 00 00 00    	js     c000b818 <prepare_data+0x172>
c000b73b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b73e:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b741:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b744:	0f 8f ce 00 00 00    	jg     c000b818 <prepare_data+0x172>
c000b74a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b750:	50                   	push   eax
c000b751:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b758:	50                   	push   eax
c000b759:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b75d:	8b 00                	mov    eax,DWORD PTR [eax]
c000b75f:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b762:	50                   	push   eax
c000b763:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b766:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b76a:	50                   	push   eax
c000b76b:	e8 e5 4e ff ff       	call   c0000655 <memcpy>
c000b770:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b773:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b776:	01 fd                	add    ebp,edi
c000b778:	01 f9                	add    ecx,edi
c000b77a:	83 c4 10             	add    esp,0x10
c000b77d:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b780:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b783:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b786:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b78a:	0f 85 86 00 00 00    	jne    c000b816 <prepare_data+0x170>
c000b790:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b793:	89 e8                	mov    eax,ebp
c000b795:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b798:	29 c8                	sub    eax,ecx
c000b79a:	39 f8                	cmp    eax,edi
c000b79c:	7d 78                	jge    c000b816 <prepare_data+0x170>
c000b79e:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b7a2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b7a6:	74 6e                	je     c000b816 <prepare_data+0x170>
c000b7a8:	8d 7e 04             	lea    edi,[esi+0x4]
c000b7ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b7af:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b7b2:	29 ef                	sub    edi,ebp
c000b7b4:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b7b8:	7c 29                	jl     c000b7e3 <prepare_data+0x13d>
c000b7ba:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b7bd:	29 f1                	sub    ecx,esi
c000b7bf:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b7c6:	55                   	push   ebp
c000b7c7:	50                   	push   eax
c000b7c8:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b7cb:	50                   	push   eax
c000b7cc:	52                   	push   edx
c000b7cd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b7d1:	e8 47 4e ff ff       	call   c000061d <memmove>
c000b7d6:	83 c4 10             	add    esp,0x10
c000b7d9:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b7dc:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b7df:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b7e3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b7e6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b7e9:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000b7ec:	83 c6 05             	add    esi,0x5
c000b7ef:	78 07                	js     c000b7f8 <prepare_data+0x152>
c000b7f1:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b7f4:	39 cf                	cmp    edi,ecx
c000b7f6:	7e 04                	jle    c000b7fc <prepare_data+0x156>
c000b7f8:	89 ce                	mov    esi,ecx
c000b7fa:	29 c6                	sub    esi,eax
c000b7fc:	8d 04 82             	lea    eax,[edx+eax*4]
c000b7ff:	51                   	push   ecx
c000b800:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000b807:	51                   	push   ecx
c000b808:	6a 00                	push   0x0
c000b80a:	50                   	push   eax
c000b80b:	e8 7b 4e ff ff       	call   c000068b <memset>
c000b810:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000b813:	83 c4 10             	add    esp,0x10
c000b816:	31 c0                	xor    eax,eax
c000b818:	83 c4 1c             	add    esp,0x1c
c000b81b:	5b                   	pop    ebx
c000b81c:	5e                   	pop    esi
c000b81d:	5f                   	pop    edi
c000b81e:	5d                   	pop    ebp
c000b81f:	c3                   	ret    

c000b820 <sinc_multichan_vari_process>:
c000b820:	55                   	push   ebp
c000b821:	ba 05 00 00 00       	mov    edx,0x5
c000b826:	57                   	push   edi
c000b827:	56                   	push   esi
c000b828:	53                   	push   ebx
c000b829:	83 ec 4c             	sub    esp,0x4c
c000b82c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000b830:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000b834:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000b837:	85 db                	test   ebx,ebx
c000b839:	0f 84 9b 06 00 00    	je     c000beda <sinc_multichan_vari_process+0x6ba>
c000b83f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000b842:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000b845:	0f af c5             	imul   eax,ebp
c000b848:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000b84b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000b84e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b855:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000b85c:	0f af c5             	imul   eax,ebp
c000b85f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000b862:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000b865:	8b 06                	mov    eax,DWORD PTR [esi]
c000b867:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b86b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b86f:	68 00 00 70 3f       	push   0x3f700000
c000b874:	6a 00                	push   0x0
c000b876:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b87a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b87e:	e8 ec b5 01 00       	call   c0026e6f <__ltdf2>
c000b883:	83 c4 10             	add    esp,0x10
c000b886:	ba 16 00 00 00       	mov    edx,0x16
c000b88b:	85 c0                	test   eax,eax
c000b88d:	0f 88 47 06 00 00    	js     c000beda <sinc_multichan_vari_process+0x6ba>
c000b893:	68 00 00 70 40       	push   0x40700000
c000b898:	6a 00                	push   0x0
c000b89a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b89e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a2:	e8 aa b5 01 00       	call   c0026e51 <__gtdf2>
c000b8a7:	83 c4 10             	add    esp,0x10
c000b8aa:	ba 16 00 00 00       	mov    edx,0x16
c000b8af:	85 c0                	test   eax,eax
c000b8b1:	0f 8f 23 06 00 00    	jg     c000beda <sinc_multichan_vari_process+0x6ba>
c000b8b7:	83 ec 0c             	sub    esp,0xc
c000b8ba:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b8bd:	e8 41 b3 01 00       	call   c0026c03 <__floatsidf>
c000b8c2:	83 c4 10             	add    esp,0x10
c000b8c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b8c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b8cd:	68 00 00 00 40       	push   0x40000000
c000b8d2:	6a 00                	push   0x0
c000b8d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8dc:	e8 42 a6 01 00       	call   c0025f23 <__adddf3>
c000b8e1:	59                   	pop    ecx
c000b8e2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b8e6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b8ea:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000b8ed:	e8 11 b3 01 00       	call   c0026c03 <__floatsidf>
c000b8f2:	83 c4 10             	add    esp,0x10
c000b8f5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b8f9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b8fd:	52                   	push   edx
c000b8fe:	50                   	push   eax
c000b8ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b903:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b907:	e8 78 af 01 00       	call   c0026884 <__divdf3>
c000b90c:	83 c4 10             	add    esp,0x10
c000b90f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b913:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b917:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000b91a:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000b91d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b921:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b925:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b929:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b92d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b931:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b935:	e8 17 b5 01 00       	call   c0026e51 <__gtdf2>
c000b93a:	83 c4 10             	add    esp,0x10
c000b93d:	85 c0                	test   eax,eax
c000b93f:	7e 2d                	jle    c000b96e <sinc_multichan_vari_process+0x14e>
c000b941:	68 00 00 f0 3f       	push   0x3ff00000
c000b946:	6a 00                	push   0x0
c000b948:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b94c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b950:	e8 1a b5 01 00       	call   c0026e6f <__ltdf2>
c000b955:	83 c4 10             	add    esp,0x10
c000b958:	85 c0                	test   eax,eax
c000b95a:	79 4d                	jns    c000b9a9 <sinc_multichan_vari_process+0x189>
c000b95c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b960:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b964:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b968:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b96c:	eb 1b                	jmp    c000b989 <sinc_multichan_vari_process+0x169>
c000b96e:	68 00 00 f0 3f       	push   0x3ff00000
c000b973:	6a 00                	push   0x0
c000b975:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b979:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b97d:	e8 ed b4 01 00       	call   c0026e6f <__ltdf2>
c000b982:	83 c4 10             	add    esp,0x10
c000b985:	85 c0                	test   eax,eax
c000b987:	79 20                	jns    c000b9a9 <sinc_multichan_vari_process+0x189>
c000b989:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b98d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b991:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b995:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b999:	e8 e6 ae 01 00       	call   c0026884 <__divdf3>
c000b99e:	83 c4 10             	add    esp,0x10
c000b9a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b9a5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9a9:	50                   	push   eax
c000b9aa:	50                   	push   eax
c000b9ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9b3:	e8 68 b6 01 00       	call   c0027020 <lrint>
c000b9b8:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000b9bb:	40                   	inc    eax
c000b9bc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b9c0:	0f af c5             	imul   eax,ebp
c000b9c3:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000b9c7:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000b9ca:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b9ce:	58                   	pop    eax
c000b9cf:	5a                   	pop    edx
c000b9d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9d8:	e8 43 b6 01 00       	call   c0027020 <lrint>
c000b9dd:	83 ec 0c             	sub    esp,0xc
c000b9e0:	50                   	push   eax
c000b9e1:	e8 1d b2 01 00       	call   c0026c03 <__floatsidf>
c000b9e6:	83 c4 10             	add    esp,0x10
c000b9e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b9ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9f1:	52                   	push   edx
c000b9f2:	50                   	push   eax
c000b9f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b9f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b9fb:	e8 74 ab 01 00       	call   c0026574 <__subdf3>
c000ba00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ba04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ba08:	83 c4 20             	add    esp,0x20
c000ba0b:	6a 00                	push   0x0
c000ba0d:	6a 00                	push   0x0
c000ba0f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba13:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba17:	e8 53 b4 01 00       	call   c0026e6f <__ltdf2>
c000ba1c:	83 c4 10             	add    esp,0x10
c000ba1f:	85 c0                	test   eax,eax
c000ba21:	79 1f                	jns    c000ba42 <sinc_multichan_vari_process+0x222>
c000ba23:	68 00 00 f0 3f       	push   0x3ff00000
c000ba28:	6a 00                	push   0x0
c000ba2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba32:	e8 ec a4 01 00       	call   c0025f23 <__adddf3>
c000ba37:	83 c4 10             	add    esp,0x10
c000ba3a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba3e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ba42:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ba45:	83 ec 10             	sub    esp,0x10
c000ba48:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ba4c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba57:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba5b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba5f:	e8 10 ab 01 00       	call   c0026574 <__subdf3>
c000ba64:	83 c4 18             	add    esp,0x18
c000ba67:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ba6b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ba6f:	52                   	push   edx
c000ba70:	50                   	push   eax
c000ba71:	e8 aa b5 01 00       	call   c0027020 <lrint>
c000ba76:	0f af e8             	imul   ebp,eax
c000ba79:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ba7d:	01 e8                	add    eax,ebp
c000ba7f:	99                   	cdq    
c000ba80:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ba83:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ba86:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba8a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba8e:	68 00 00 f0 3f       	push   0x3ff00000
c000ba93:	6a 00                	push   0x0
c000ba95:	e8 ea ad 01 00       	call   c0026884 <__divdf3>
c000ba9a:	83 c4 10             	add    esp,0x10
c000ba9d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000baa1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000baa5:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000baaa:	68 23 42 92 0c       	push   0xc924223
c000baaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bab3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bab7:	e8 67 a4 01 00       	call   c0025f23 <__adddf3>
c000babc:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bac0:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bac4:	83 c4 20             	add    esp,0x20
c000bac7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bacf:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bad7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bada:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000badd:	7d 50                	jge    c000bb2f <sinc_multichan_vari_process+0x30f>
c000badf:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bae2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bae5:	01 c8                	add    eax,ecx
c000bae7:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000baea:	99                   	cdq    
c000baeb:	f7 f9                	idiv   ecx
c000baed:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000baf1:	7d 0c                	jge    c000baff <sinc_multichan_vari_process+0x2df>
c000baf3:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000baf6:	85 ed                	test   ebp,ebp
c000baf8:	79 6b                	jns    c000bb65 <sinc_multichan_vari_process+0x345>
c000bafa:	e9 e6 00 00 00       	jmp    c000bbe5 <sinc_multichan_vari_process+0x3c5>
c000baff:	50                   	push   eax
c000bb00:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bb04:	57                   	push   edi
c000bb05:	53                   	push   ebx
c000bb06:	e8 9b fb ff ff       	call   c000b6a6 <prepare_data>
c000bb0b:	83 c4 10             	add    esp,0x10
c000bb0e:	89 c2                	mov    edx,eax
c000bb10:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bb13:	85 c0                	test   eax,eax
c000bb15:	0f 85 bf 03 00 00    	jne    c000beda <sinc_multichan_vari_process+0x6ba>
c000bb1b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bb1e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bb21:	01 c8                	add    eax,ecx
c000bb23:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bb26:	99                   	cdq    
c000bb27:	f7 f9                	idiv   ecx
c000bb29:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bb2d:	7c c4                	jl     c000baf3 <sinc_multichan_vari_process+0x2d3>
c000bb2f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bb33:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bb37:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bb3a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bb3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb41:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb45:	89 06                	mov    DWORD PTR [esi],eax
c000bb47:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bb4a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bb4d:	99                   	cdq    
c000bb4e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb51:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bb54:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bb57:	99                   	cdq    
c000bb58:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb5b:	31 d2                	xor    edx,edx
c000bb5d:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bb60:	e9 75 03 00 00       	jmp    c000beda <sinc_multichan_vari_process+0x6ba>
c000bb65:	83 ec 0c             	sub    esp,0xc
c000bb68:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bb6b:	e8 93 b0 01 00       	call   c0026c03 <__floatsidf>
c000bb70:	83 c4 10             	add    esp,0x10
c000bb73:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bb77:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bb7b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bb7f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bb83:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb87:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb8b:	e8 93 a3 01 00       	call   c0025f23 <__adddf3>
c000bb90:	83 c4 10             	add    esp,0x10
c000bb93:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bb97:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bb9b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bb9f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bba3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bba7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbab:	e8 73 a3 01 00       	call   c0025f23 <__adddf3>
c000bbb0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bbb3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bbb7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bbbb:	e8 43 b0 01 00       	call   c0026c03 <__floatsidf>
c000bbc0:	83 c4 10             	add    esp,0x10
c000bbc3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbc7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbcb:	52                   	push   edx
c000bbcc:	50                   	push   eax
c000bbcd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbd1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbd5:	e8 93 b2 01 00       	call   c0026e6d <__gedf2>
c000bbda:	83 c4 10             	add    esp,0x10
c000bbdd:	85 c0                	test   eax,eax
c000bbdf:	0f 89 4a ff ff ff    	jns    c000bb2f <sinc_multichan_vari_process+0x30f>
c000bbe5:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bbe9:	0f 8e ed 00 00 00    	jle    c000bcdc <sinc_multichan_vari_process+0x4bc>
c000bbef:	83 ec 10             	sub    esp,0x10
c000bbf2:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bbf5:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bbf8:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000bbfb:	ff 36                	push   DWORD PTR [esi]
c000bbfd:	e8 72 a9 01 00       	call   c0026574 <__subdf3>
c000bc02:	83 c4 18             	add    esp,0x18
c000bc05:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc09:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc0d:	52                   	push   edx
c000bc0e:	50                   	push   eax
c000bc0f:	e8 ec b3 01 00       	call   c0027000 <fabs>
c000bc14:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc18:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bc1c:	83 c4 10             	add    esp,0x10
c000bc1f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000bc24:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000bc29:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc2d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc31:	e8 1b b2 01 00       	call   c0026e51 <__gtdf2>
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	85 c0                	test   eax,eax
c000bc3b:	0f 8e 9b 00 00 00    	jle    c000bcdc <sinc_multichan_vari_process+0x4bc>
c000bc41:	8b 06                	mov    eax,DWORD PTR [esi]
c000bc43:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bc46:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bc4a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bc4e:	52                   	push   edx
c000bc4f:	50                   	push   eax
c000bc50:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bc53:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bc56:	e8 19 a9 01 00       	call   c0026574 <__subdf3>
c000bc5b:	59                   	pop    ecx
c000bc5c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bc60:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bc64:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000bc67:	e8 97 af 01 00       	call   c0026c03 <__floatsidf>
c000bc6c:	83 c4 10             	add    esp,0x10
c000bc6f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc73:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc77:	52                   	push   edx
c000bc78:	50                   	push   eax
c000bc79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc81:	e8 1a a9 01 00       	call   c00265a0 <__muldf3>
c000bc86:	5d                   	pop    ebp
c000bc87:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bc8b:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bc8f:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bc92:	e8 6c af 01 00       	call   c0026c03 <__floatsidf>
c000bc97:	83 c4 10             	add    esp,0x10
c000bc9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bca2:	52                   	push   edx
c000bca3:	50                   	push   eax
c000bca4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bca8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcac:	e8 d3 ab 01 00       	call   c0026884 <__divdf3>
c000bcb1:	83 c4 10             	add    esp,0x10
c000bcb4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcb8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcbc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bcc0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bcc4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcc8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bccc:	e8 52 a2 01 00       	call   c0025f23 <__adddf3>
c000bcd1:	83 c4 10             	add    esp,0x10
c000bcd4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bcd8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bcdc:	83 ec 0c             	sub    esp,0xc
c000bcdf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bce2:	e8 1c af 01 00       	call   c0026c03 <__floatsidf>
c000bce7:	83 c4 10             	add    esp,0x10
c000bcea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd02:	e8 68 b1 01 00       	call   c0026e6f <__ltdf2>
c000bd07:	83 c4 10             	add    esp,0x10
c000bd0a:	85 c0                	test   eax,eax
c000bd0c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd10:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bd14:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bd18:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bd1c:	78 10                	js     c000bd2e <sinc_multichan_vari_process+0x50e>
c000bd1e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bd22:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bd26:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd2a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd3a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd3e:	e8 5d a8 01 00       	call   c00265a0 <__muldf3>
c000bd43:	59                   	pop    ecx
c000bd44:	5d                   	pop    ebp
c000bd45:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd49:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd4d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd51:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd55:	e8 25 f9 ff ff       	call   c000b67f <double_to_fp>
c000bd5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd5e:	89 c5                	mov    ebp,eax
c000bd60:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd68:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd6c:	e8 2f a8 01 00       	call   c00265a0 <__muldf3>
c000bd71:	83 c4 18             	add    esp,0x18
c000bd74:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bd78:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bd7c:	52                   	push   edx
c000bd7d:	50                   	push   eax
c000bd7e:	e8 fc f8 ff ff       	call   c000b67f <double_to_fp>
c000bd83:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bd86:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bd8a:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bd8d:	8d 04 90             	lea    eax,[eax+edx*4]
c000bd90:	50                   	push   eax
c000bd91:	50                   	push   eax
c000bd92:	50                   	push   eax
c000bd93:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bd96:	e8 68 ae 01 00       	call   c0026c03 <__floatsidf>
c000bd9b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bd9f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bda3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bda7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdab:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdaf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdb3:	e8 cc aa 01 00       	call   c0026884 <__divdf3>
c000bdb8:	83 c4 1c             	add    esp,0x1c
c000bdbb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bdbf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bdc3:	52                   	push   edx
c000bdc4:	89 ea                	mov    edx,ebp
c000bdc6:	50                   	push   eax
c000bdc7:	89 d8                	mov    eax,ebx
c000bdc9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bdcc:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000bdd0:	e8 69 ed ff ff       	call   c000ab3e <calc_output_multi>
c000bdd5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bdd8:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000bddb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bddf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bde3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bde7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bdeb:	e8 94 aa 01 00       	call   c0026884 <__divdf3>
c000bdf0:	83 c4 10             	add    esp,0x10
c000bdf3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000bdf7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000bdfb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be03:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be07:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be0b:	e8 13 a1 01 00       	call   c0025f23 <__adddf3>
c000be10:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000be14:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000be18:	83 c4 28             	add    esp,0x28
c000be1b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be1f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be23:	e8 f8 b1 01 00       	call   c0027020 <lrint>
c000be28:	83 ec 0c             	sub    esp,0xc
c000be2b:	50                   	push   eax
c000be2c:	e8 d2 ad 01 00       	call   c0026c03 <__floatsidf>
c000be31:	83 c4 10             	add    esp,0x10
c000be34:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000be38:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000be3c:	52                   	push   edx
c000be3d:	50                   	push   eax
c000be3e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be42:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be46:	e8 29 a7 01 00       	call   c0026574 <__subdf3>
c000be4b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be4f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be53:	83 c4 20             	add    esp,0x20
c000be56:	6a 00                	push   0x0
c000be58:	6a 00                	push   0x0
c000be5a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be62:	e8 08 b0 01 00       	call   c0026e6f <__ltdf2>
c000be67:	83 c4 10             	add    esp,0x10
c000be6a:	85 c0                	test   eax,eax
c000be6c:	79 20                	jns    c000be8e <sinc_multichan_vari_process+0x66e>
c000be6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be7e:	e8 a0 a0 01 00       	call   c0025f23 <__adddf3>
c000be83:	83 c4 10             	add    esp,0x10
c000be86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be8a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000be8e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000be91:	83 ec 10             	sub    esp,0x10
c000be94:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000be98:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000be9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bea3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bea7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000beab:	e8 c4 a6 01 00       	call   c0026574 <__subdf3>
c000beb0:	83 c4 18             	add    esp,0x18
c000beb3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000beb7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bebb:	52                   	push   edx
c000bebc:	50                   	push   eax
c000bebd:	e8 5e b1 01 00       	call   c0027020 <lrint>
c000bec2:	0f af e8             	imul   ebp,eax
c000bec5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000bec9:	83 c4 10             	add    esp,0x10
c000becc:	01 e8                	add    eax,ebp
c000bece:	99                   	cdq    
c000becf:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bed2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bed5:	e9 fd fb ff ff       	jmp    c000bad7 <sinc_multichan_vari_process+0x2b7>
c000beda:	83 c4 4c             	add    esp,0x4c
c000bedd:	89 d0                	mov    eax,edx
c000bedf:	5b                   	pop    ebx
c000bee0:	5e                   	pop    esi
c000bee1:	5f                   	pop    edi
c000bee2:	5d                   	pop    ebp
c000bee3:	c3                   	ret    

c000bee4 <sinc_hex_vari_process>:
c000bee4:	55                   	push   ebp
c000bee5:	ba 05 00 00 00       	mov    edx,0x5
c000beea:	57                   	push   edi
c000beeb:	56                   	push   esi
c000beec:	53                   	push   ebx
c000beed:	83 ec 4c             	sub    esp,0x4c
c000bef0:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000bef4:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000bef8:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000befb:	85 db                	test   ebx,ebx
c000befd:	0f 84 9c 06 00 00    	je     c000c59f <sinc_hex_vari_process+0x6bb>
c000bf03:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bf06:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000bf09:	0f af c7             	imul   eax,edi
c000bf0c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000bf0f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000bf12:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000bf19:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000bf20:	0f af c7             	imul   eax,edi
c000bf23:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bf26:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000bf29:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000bf2c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf30:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf34:	68 00 00 70 3f       	push   0x3f700000
c000bf39:	6a 00                	push   0x0
c000bf3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf43:	e8 27 af 01 00       	call   c0026e6f <__ltdf2>
c000bf48:	83 c4 10             	add    esp,0x10
c000bf4b:	ba 16 00 00 00       	mov    edx,0x16
c000bf50:	85 c0                	test   eax,eax
c000bf52:	0f 88 47 06 00 00    	js     c000c59f <sinc_hex_vari_process+0x6bb>
c000bf58:	68 00 00 70 40       	push   0x40700000
c000bf5d:	6a 00                	push   0x0
c000bf5f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf67:	e8 e5 ae 01 00       	call   c0026e51 <__gtdf2>
c000bf6c:	83 c4 10             	add    esp,0x10
c000bf6f:	ba 16 00 00 00       	mov    edx,0x16
c000bf74:	85 c0                	test   eax,eax
c000bf76:	0f 8f 23 06 00 00    	jg     c000c59f <sinc_hex_vari_process+0x6bb>
c000bf7c:	83 ec 0c             	sub    esp,0xc
c000bf7f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bf82:	e8 7c ac 01 00       	call   c0026c03 <__floatsidf>
c000bf87:	83 c4 10             	add    esp,0x10
c000bf8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bf8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bf92:	68 00 00 00 40       	push   0x40000000
c000bf97:	6a 00                	push   0x0
c000bf99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfa1:	e8 7d 9f 01 00       	call   c0025f23 <__adddf3>
c000bfa6:	59                   	pop    ecx
c000bfa7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bfab:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bfaf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfb2:	e8 4c ac 01 00       	call   c0026c03 <__floatsidf>
c000bfb7:	83 c4 10             	add    esp,0x10
c000bfba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bfbe:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bfc2:	52                   	push   edx
c000bfc3:	50                   	push   eax
c000bfc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfcc:	e8 b3 a8 01 00       	call   c0026884 <__divdf3>
c000bfd1:	83 c4 10             	add    esp,0x10
c000bfd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bfd8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bfdc:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000bfdf:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000bfe2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bfe6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bfea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bff2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bff6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bffa:	e8 52 ae 01 00       	call   c0026e51 <__gtdf2>
c000bfff:	83 c4 10             	add    esp,0x10
c000c002:	85 c0                	test   eax,eax
c000c004:	7e 2d                	jle    c000c033 <sinc_hex_vari_process+0x14f>
c000c006:	68 00 00 f0 3f       	push   0x3ff00000
c000c00b:	6a 00                	push   0x0
c000c00d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c011:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c015:	e8 55 ae 01 00       	call   c0026e6f <__ltdf2>
c000c01a:	83 c4 10             	add    esp,0x10
c000c01d:	85 c0                	test   eax,eax
c000c01f:	79 4d                	jns    c000c06e <sinc_hex_vari_process+0x18a>
c000c021:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c025:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c029:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c02d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c031:	eb 1b                	jmp    c000c04e <sinc_hex_vari_process+0x16a>
c000c033:	68 00 00 f0 3f       	push   0x3ff00000
c000c038:	6a 00                	push   0x0
c000c03a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c03e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c042:	e8 28 ae 01 00       	call   c0026e6f <__ltdf2>
c000c047:	83 c4 10             	add    esp,0x10
c000c04a:	85 c0                	test   eax,eax
c000c04c:	79 20                	jns    c000c06e <sinc_hex_vari_process+0x18a>
c000c04e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c052:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c056:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c05a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c05e:	e8 21 a8 01 00       	call   c0026884 <__divdf3>
c000c063:	83 c4 10             	add    esp,0x10
c000c066:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c06a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c06e:	50                   	push   eax
c000c06f:	50                   	push   eax
c000c070:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c074:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c078:	e8 a3 af 01 00       	call   c0027020 <lrint>
c000c07d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c080:	40                   	inc    eax
c000c081:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c085:	0f af c7             	imul   eax,edi
c000c088:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c08c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c08f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c093:	58                   	pop    eax
c000c094:	5a                   	pop    edx
c000c095:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c099:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c09d:	e8 7e af 01 00       	call   c0027020 <lrint>
c000c0a2:	83 ec 0c             	sub    esp,0xc
c000c0a5:	50                   	push   eax
c000c0a6:	e8 58 ab 01 00       	call   c0026c03 <__floatsidf>
c000c0ab:	83 c4 10             	add    esp,0x10
c000c0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c0b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c0b6:	52                   	push   edx
c000c0b7:	50                   	push   eax
c000c0b8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0c0:	e8 af a4 01 00       	call   c0026574 <__subdf3>
c000c0c5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0cd:	83 c4 20             	add    esp,0x20
c000c0d0:	6a 00                	push   0x0
c000c0d2:	6a 00                	push   0x0
c000c0d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0dc:	e8 8e ad 01 00       	call   c0026e6f <__ltdf2>
c000c0e1:	83 c4 10             	add    esp,0x10
c000c0e4:	85 c0                	test   eax,eax
c000c0e6:	79 1f                	jns    c000c107 <sinc_hex_vari_process+0x223>
c000c0e8:	68 00 00 f0 3f       	push   0x3ff00000
c000c0ed:	6a 00                	push   0x0
c000c0ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0f7:	e8 27 9e 01 00       	call   c0025f23 <__adddf3>
c000c0fc:	83 c4 10             	add    esp,0x10
c000c0ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c103:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c107:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c10a:	83 ec 10             	sub    esp,0x10
c000c10d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c111:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c118:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c11c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c120:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c124:	e8 4b a4 01 00       	call   c0026574 <__subdf3>
c000c129:	83 c4 18             	add    esp,0x18
c000c12c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c130:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c134:	52                   	push   edx
c000c135:	50                   	push   eax
c000c136:	e8 e5 ae 01 00       	call   c0027020 <lrint>
c000c13b:	0f af f8             	imul   edi,eax
c000c13e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c142:	01 f8                	add    eax,edi
c000c144:	99                   	cdq    
c000c145:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c148:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c14b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c14f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c153:	68 00 00 f0 3f       	push   0x3ff00000
c000c158:	6a 00                	push   0x0
c000c15a:	e8 25 a7 01 00       	call   c0026884 <__divdf3>
c000c15f:	83 c4 10             	add    esp,0x10
c000c162:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c166:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c16a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c16f:	68 23 42 92 0c       	push   0xc924223
c000c174:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c178:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c17c:	e8 a2 9d 01 00       	call   c0025f23 <__adddf3>
c000c181:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c185:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c189:	83 c4 20             	add    esp,0x20
c000c18c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c194:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c19c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c19f:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c1a2:	7d 50                	jge    c000c1f4 <sinc_hex_vari_process+0x310>
c000c1a4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c1a7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c1aa:	01 c8                	add    eax,ecx
c000c1ac:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c1af:	99                   	cdq    
c000c1b0:	f7 f9                	idiv   ecx
c000c1b2:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c1b6:	7d 0c                	jge    c000c1c4 <sinc_hex_vari_process+0x2e0>
c000c1b8:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c1bb:	85 ff                	test   edi,edi
c000c1bd:	79 6c                	jns    c000c22b <sinc_hex_vari_process+0x347>
c000c1bf:	e9 e7 00 00 00       	jmp    c000c2ab <sinc_hex_vari_process+0x3c7>
c000c1c4:	50                   	push   eax
c000c1c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c1c9:	56                   	push   esi
c000c1ca:	53                   	push   ebx
c000c1cb:	e8 d6 f4 ff ff       	call   c000b6a6 <prepare_data>
c000c1d0:	83 c4 10             	add    esp,0x10
c000c1d3:	89 c2                	mov    edx,eax
c000c1d5:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c1d8:	85 c0                	test   eax,eax
c000c1da:	0f 85 bf 03 00 00    	jne    c000c59f <sinc_hex_vari_process+0x6bb>
c000c1e0:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c1e3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c1e6:	01 c8                	add    eax,ecx
c000c1e8:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c1eb:	99                   	cdq    
c000c1ec:	f7 f9                	idiv   ecx
c000c1ee:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c1f2:	7c c4                	jl     c000c1b8 <sinc_hex_vari_process+0x2d4>
c000c1f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c1f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c1fc:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c1ff:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c206:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c20a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c20d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c210:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c213:	99                   	cdq    
c000c214:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c217:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c21a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c21d:	99                   	cdq    
c000c21e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c221:	31 d2                	xor    edx,edx
c000c223:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c226:	e9 74 03 00 00       	jmp    c000c59f <sinc_hex_vari_process+0x6bb>
c000c22b:	83 ec 0c             	sub    esp,0xc
c000c22e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c231:	e8 cd a9 01 00       	call   c0026c03 <__floatsidf>
c000c236:	83 c4 10             	add    esp,0x10
c000c239:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c23d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c241:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c245:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c249:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c24d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c251:	e8 cd 9c 01 00       	call   c0025f23 <__adddf3>
c000c256:	83 c4 10             	add    esp,0x10
c000c259:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c25d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c261:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c265:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c269:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c26d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c271:	e8 ad 9c 01 00       	call   c0025f23 <__adddf3>
c000c276:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c279:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c27d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c281:	e8 7d a9 01 00       	call   c0026c03 <__floatsidf>
c000c286:	83 c4 10             	add    esp,0x10
c000c289:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c28d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c291:	52                   	push   edx
c000c292:	50                   	push   eax
c000c293:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c297:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c29b:	e8 cd ab 01 00       	call   c0026e6d <__gedf2>
c000c2a0:	83 c4 10             	add    esp,0x10
c000c2a3:	85 c0                	test   eax,eax
c000c2a5:	0f 89 49 ff ff ff    	jns    c000c1f4 <sinc_hex_vari_process+0x310>
c000c2ab:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c2af:	0f 8e ef 00 00 00    	jle    c000c3a4 <sinc_hex_vari_process+0x4c0>
c000c2b5:	83 ec 10             	sub    esp,0x10
c000c2b8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c2bb:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c2be:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c2c1:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c2c4:	e8 ab a2 01 00       	call   c0026574 <__subdf3>
c000c2c9:	83 c4 18             	add    esp,0x18
c000c2cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2d0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2d4:	52                   	push   edx
c000c2d5:	50                   	push   eax
c000c2d6:	e8 25 ad 01 00       	call   c0027000 <fabs>
c000c2db:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c2df:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c2e3:	83 c4 10             	add    esp,0x10
c000c2e6:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c2eb:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c2f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2f8:	e8 54 ab 01 00       	call   c0026e51 <__gtdf2>
c000c2fd:	83 c4 10             	add    esp,0x10
c000c300:	85 c0                	test   eax,eax
c000c302:	0f 8e 9c 00 00 00    	jle    c000c3a4 <sinc_hex_vari_process+0x4c0>
c000c308:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c30b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c30e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c312:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c316:	52                   	push   edx
c000c317:	50                   	push   eax
c000c318:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c31b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c31e:	e8 51 a2 01 00       	call   c0026574 <__subdf3>
c000c323:	59                   	pop    ecx
c000c324:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c328:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c32c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c32f:	e8 cf a8 01 00       	call   c0026c03 <__floatsidf>
c000c334:	83 c4 10             	add    esp,0x10
c000c337:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c33b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c33f:	52                   	push   edx
c000c340:	50                   	push   eax
c000c341:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c345:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c349:	e8 52 a2 01 00       	call   c00265a0 <__muldf3>
c000c34e:	5f                   	pop    edi
c000c34f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c353:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c357:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c35a:	e8 a4 a8 01 00       	call   c0026c03 <__floatsidf>
c000c35f:	83 c4 10             	add    esp,0x10
c000c362:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c366:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c36a:	52                   	push   edx
c000c36b:	50                   	push   eax
c000c36c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c370:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c374:	e8 0b a5 01 00       	call   c0026884 <__divdf3>
c000c379:	83 c4 10             	add    esp,0x10
c000c37c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c380:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c384:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c388:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c38c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c390:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c394:	e8 8a 9b 01 00       	call   c0025f23 <__adddf3>
c000c399:	83 c4 10             	add    esp,0x10
c000c39c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c3a0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c3a4:	83 ec 0c             	sub    esp,0xc
c000c3a7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c3aa:	e8 54 a8 01 00       	call   c0026c03 <__floatsidf>
c000c3af:	83 c4 10             	add    esp,0x10
c000c3b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3ca:	e8 a0 aa 01 00       	call   c0026e6f <__ltdf2>
c000c3cf:	83 c4 10             	add    esp,0x10
c000c3d2:	85 c0                	test   eax,eax
c000c3d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c3d8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c3dc:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c3e0:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c3e4:	78 10                	js     c000c3f6 <sinc_hex_vari_process+0x512>
c000c3e6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c3ea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c3ee:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c3f2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c3f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3fa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c402:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c406:	e8 95 a1 01 00       	call   c00265a0 <__muldf3>
c000c40b:	59                   	pop    ecx
c000c40c:	5f                   	pop    edi
c000c40d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c411:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c415:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c419:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c41d:	e8 5d f2 ff ff       	call   c000b67f <double_to_fp>
c000c422:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c426:	89 c7                	mov    edi,eax
c000c428:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c42c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c430:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c434:	e8 67 a1 01 00       	call   c00265a0 <__muldf3>
c000c439:	83 c4 18             	add    esp,0x18
c000c43c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c440:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c444:	52                   	push   edx
c000c445:	50                   	push   eax
c000c446:	e8 34 f2 ff ff       	call   c000b67f <double_to_fp>
c000c44b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c44e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c452:	83 c4 0c             	add    esp,0xc
c000c455:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c458:	8d 04 90             	lea    eax,[eax+edx*4]
c000c45b:	50                   	push   eax
c000c45c:	50                   	push   eax
c000c45d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c460:	e8 9e a7 01 00       	call   c0026c03 <__floatsidf>
c000c465:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c469:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c46d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c471:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c475:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c479:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c47d:	e8 02 a4 01 00       	call   c0026884 <__divdf3>
c000c482:	83 c4 18             	add    esp,0x18
c000c485:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c489:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c48d:	52                   	push   edx
c000c48e:	89 fa                	mov    edx,edi
c000c490:	50                   	push   eax
c000c491:	89 d8                	mov    eax,ebx
c000c493:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c497:	e8 50 de ff ff       	call   c000a2ec <calc_output_hex>
c000c49c:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c4a0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4a4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4a8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4ac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b0:	e8 cf a3 01 00       	call   c0026884 <__divdf3>
c000c4b5:	83 c4 10             	add    esp,0x10
c000c4b8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4bc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4c8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4cc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4d0:	e8 4e 9a 01 00       	call   c0025f23 <__adddf3>
c000c4d5:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c4d9:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c4dd:	83 c4 18             	add    esp,0x18
c000c4e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e8:	e8 33 ab 01 00       	call   c0027020 <lrint>
c000c4ed:	83 ec 0c             	sub    esp,0xc
c000c4f0:	50                   	push   eax
c000c4f1:	e8 0d a7 01 00       	call   c0026c03 <__floatsidf>
c000c4f6:	83 c4 10             	add    esp,0x10
c000c4f9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c4fd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c501:	52                   	push   edx
c000c502:	50                   	push   eax
c000c503:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c507:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c50b:	e8 64 a0 01 00       	call   c0026574 <__subdf3>
c000c510:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c514:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c518:	83 c4 20             	add    esp,0x20
c000c51b:	6a 00                	push   0x0
c000c51d:	6a 00                	push   0x0
c000c51f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c523:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c527:	e8 43 a9 01 00       	call   c0026e6f <__ltdf2>
c000c52c:	83 c4 10             	add    esp,0x10
c000c52f:	85 c0                	test   eax,eax
c000c531:	79 20                	jns    c000c553 <sinc_hex_vari_process+0x66f>
c000c533:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c537:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c53b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c53f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c543:	e8 db 99 01 00       	call   c0025f23 <__adddf3>
c000c548:	83 c4 10             	add    esp,0x10
c000c54b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c54f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c553:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c556:	83 ec 10             	sub    esp,0x10
c000c559:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c55d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c560:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c564:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c568:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c56c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c570:	e8 ff 9f 01 00       	call   c0026574 <__subdf3>
c000c575:	83 c4 18             	add    esp,0x18
c000c578:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c57c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c580:	52                   	push   edx
c000c581:	50                   	push   eax
c000c582:	e8 99 aa 01 00       	call   c0027020 <lrint>
c000c587:	0f af f8             	imul   edi,eax
c000c58a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c58e:	83 c4 10             	add    esp,0x10
c000c591:	01 f8                	add    eax,edi
c000c593:	99                   	cdq    
c000c594:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c597:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c59a:	e9 fd fb ff ff       	jmp    c000c19c <sinc_hex_vari_process+0x2b8>
c000c59f:	83 c4 4c             	add    esp,0x4c
c000c5a2:	89 d0                	mov    eax,edx
c000c5a4:	5b                   	pop    ebx
c000c5a5:	5e                   	pop    esi
c000c5a6:	5f                   	pop    edi
c000c5a7:	5d                   	pop    ebp
c000c5a8:	c3                   	ret    

c000c5a9 <sinc_quad_vari_process>:
c000c5a9:	55                   	push   ebp
c000c5aa:	ba 05 00 00 00       	mov    edx,0x5
c000c5af:	57                   	push   edi
c000c5b0:	56                   	push   esi
c000c5b1:	53                   	push   ebx
c000c5b2:	83 ec 4c             	sub    esp,0x4c
c000c5b5:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c5b9:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c5bd:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c5c0:	85 db                	test   ebx,ebx
c000c5c2:	0f 84 9c 06 00 00    	je     c000cc64 <sinc_quad_vari_process+0x6bb>
c000c5c8:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c5cb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c5ce:	0f af c7             	imul   eax,edi
c000c5d1:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c5d4:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c5d7:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c5de:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c5e5:	0f af c7             	imul   eax,edi
c000c5e8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c5eb:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c5ee:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c5f1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5f5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f9:	68 00 00 70 3f       	push   0x3f700000
c000c5fe:	6a 00                	push   0x0
c000c600:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c604:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c608:	e8 62 a8 01 00       	call   c0026e6f <__ltdf2>
c000c60d:	83 c4 10             	add    esp,0x10
c000c610:	ba 16 00 00 00       	mov    edx,0x16
c000c615:	85 c0                	test   eax,eax
c000c617:	0f 88 47 06 00 00    	js     c000cc64 <sinc_quad_vari_process+0x6bb>
c000c61d:	68 00 00 70 40       	push   0x40700000
c000c622:	6a 00                	push   0x0
c000c624:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c628:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c62c:	e8 20 a8 01 00       	call   c0026e51 <__gtdf2>
c000c631:	83 c4 10             	add    esp,0x10
c000c634:	ba 16 00 00 00       	mov    edx,0x16
c000c639:	85 c0                	test   eax,eax
c000c63b:	0f 8f 23 06 00 00    	jg     c000cc64 <sinc_quad_vari_process+0x6bb>
c000c641:	83 ec 0c             	sub    esp,0xc
c000c644:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c647:	e8 b7 a5 01 00       	call   c0026c03 <__floatsidf>
c000c64c:	83 c4 10             	add    esp,0x10
c000c64f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c653:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c657:	68 00 00 00 40       	push   0x40000000
c000c65c:	6a 00                	push   0x0
c000c65e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c662:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c666:	e8 b8 98 01 00       	call   c0025f23 <__adddf3>
c000c66b:	59                   	pop    ecx
c000c66c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c670:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c674:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c677:	e8 87 a5 01 00       	call   c0026c03 <__floatsidf>
c000c67c:	83 c4 10             	add    esp,0x10
c000c67f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c683:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c687:	52                   	push   edx
c000c688:	50                   	push   eax
c000c689:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c68d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c691:	e8 ee a1 01 00       	call   c0026884 <__divdf3>
c000c696:	83 c4 10             	add    esp,0x10
c000c699:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c69d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c6a1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c6a4:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c6a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c6ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c6af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6bf:	e8 8d a7 01 00       	call   c0026e51 <__gtdf2>
c000c6c4:	83 c4 10             	add    esp,0x10
c000c6c7:	85 c0                	test   eax,eax
c000c6c9:	7e 2d                	jle    c000c6f8 <sinc_quad_vari_process+0x14f>
c000c6cb:	68 00 00 f0 3f       	push   0x3ff00000
c000c6d0:	6a 00                	push   0x0
c000c6d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6da:	e8 90 a7 01 00       	call   c0026e6f <__ltdf2>
c000c6df:	83 c4 10             	add    esp,0x10
c000c6e2:	85 c0                	test   eax,eax
c000c6e4:	79 4d                	jns    c000c733 <sinc_quad_vari_process+0x18a>
c000c6e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c6ee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c6f2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c6f6:	eb 1b                	jmp    c000c713 <sinc_quad_vari_process+0x16a>
c000c6f8:	68 00 00 f0 3f       	push   0x3ff00000
c000c6fd:	6a 00                	push   0x0
c000c6ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c703:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c707:	e8 63 a7 01 00       	call   c0026e6f <__ltdf2>
c000c70c:	83 c4 10             	add    esp,0x10
c000c70f:	85 c0                	test   eax,eax
c000c711:	79 20                	jns    c000c733 <sinc_quad_vari_process+0x18a>
c000c713:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c717:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c71b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c71f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c723:	e8 5c a1 01 00       	call   c0026884 <__divdf3>
c000c728:	83 c4 10             	add    esp,0x10
c000c72b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c72f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c733:	50                   	push   eax
c000c734:	50                   	push   eax
c000c735:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c739:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c73d:	e8 de a8 01 00       	call   c0027020 <lrint>
c000c742:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c745:	40                   	inc    eax
c000c746:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c74a:	0f af c7             	imul   eax,edi
c000c74d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c751:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c754:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c758:	58                   	pop    eax
c000c759:	5a                   	pop    edx
c000c75a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c75e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c762:	e8 b9 a8 01 00       	call   c0027020 <lrint>
c000c767:	83 ec 0c             	sub    esp,0xc
c000c76a:	50                   	push   eax
c000c76b:	e8 93 a4 01 00       	call   c0026c03 <__floatsidf>
c000c770:	83 c4 10             	add    esp,0x10
c000c773:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c777:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c77b:	52                   	push   edx
c000c77c:	50                   	push   eax
c000c77d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c781:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c785:	e8 ea 9d 01 00       	call   c0026574 <__subdf3>
c000c78a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c78e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c792:	83 c4 20             	add    esp,0x20
c000c795:	6a 00                	push   0x0
c000c797:	6a 00                	push   0x0
c000c799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7a1:	e8 c9 a6 01 00       	call   c0026e6f <__ltdf2>
c000c7a6:	83 c4 10             	add    esp,0x10
c000c7a9:	85 c0                	test   eax,eax
c000c7ab:	79 1f                	jns    c000c7cc <sinc_quad_vari_process+0x223>
c000c7ad:	68 00 00 f0 3f       	push   0x3ff00000
c000c7b2:	6a 00                	push   0x0
c000c7b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7bc:	e8 62 97 01 00       	call   c0025f23 <__adddf3>
c000c7c1:	83 c4 10             	add    esp,0x10
c000c7c4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c7c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7cc:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7cf:	83 ec 10             	sub    esp,0x10
c000c7d2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c7d6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7e1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7e5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7e9:	e8 86 9d 01 00       	call   c0026574 <__subdf3>
c000c7ee:	83 c4 18             	add    esp,0x18
c000c7f1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c7f5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c7f9:	52                   	push   edx
c000c7fa:	50                   	push   eax
c000c7fb:	e8 20 a8 01 00       	call   c0027020 <lrint>
c000c800:	0f af f8             	imul   edi,eax
c000c803:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c807:	01 f8                	add    eax,edi
c000c809:	99                   	cdq    
c000c80a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c80d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c810:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c814:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c818:	68 00 00 f0 3f       	push   0x3ff00000
c000c81d:	6a 00                	push   0x0
c000c81f:	e8 60 a0 01 00       	call   c0026884 <__divdf3>
c000c824:	83 c4 10             	add    esp,0x10
c000c827:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c82b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c82f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c834:	68 23 42 92 0c       	push   0xc924223
c000c839:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c83d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c841:	e8 dd 96 01 00       	call   c0025f23 <__adddf3>
c000c846:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c84a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c84e:	83 c4 20             	add    esp,0x20
c000c851:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c859:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c861:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c864:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c867:	7d 50                	jge    c000c8b9 <sinc_quad_vari_process+0x310>
c000c869:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c86c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c86f:	01 c8                	add    eax,ecx
c000c871:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c874:	99                   	cdq    
c000c875:	f7 f9                	idiv   ecx
c000c877:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c87b:	7d 0c                	jge    c000c889 <sinc_quad_vari_process+0x2e0>
c000c87d:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c880:	85 ff                	test   edi,edi
c000c882:	79 6c                	jns    c000c8f0 <sinc_quad_vari_process+0x347>
c000c884:	e9 e7 00 00 00       	jmp    c000c970 <sinc_quad_vari_process+0x3c7>
c000c889:	50                   	push   eax
c000c88a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c88e:	56                   	push   esi
c000c88f:	53                   	push   ebx
c000c890:	e8 11 ee ff ff       	call   c000b6a6 <prepare_data>
c000c895:	83 c4 10             	add    esp,0x10
c000c898:	89 c2                	mov    edx,eax
c000c89a:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c89d:	85 c0                	test   eax,eax
c000c89f:	0f 85 bf 03 00 00    	jne    c000cc64 <sinc_quad_vari_process+0x6bb>
c000c8a5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c8a8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c8ab:	01 c8                	add    eax,ecx
c000c8ad:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c8b0:	99                   	cdq    
c000c8b1:	f7 f9                	idiv   ecx
c000c8b3:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c8b7:	7c c4                	jl     c000c87d <sinc_quad_vari_process+0x2d4>
c000c8b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c8bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c8c1:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c8c4:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c8c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c8cf:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c8d2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c8d5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c8d8:	99                   	cdq    
c000c8d9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c8dc:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c8df:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c8e2:	99                   	cdq    
c000c8e3:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c8e6:	31 d2                	xor    edx,edx
c000c8e8:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c8eb:	e9 74 03 00 00       	jmp    c000cc64 <sinc_quad_vari_process+0x6bb>
c000c8f0:	83 ec 0c             	sub    esp,0xc
c000c8f3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c8f6:	e8 08 a3 01 00       	call   c0026c03 <__floatsidf>
c000c8fb:	83 c4 10             	add    esp,0x10
c000c8fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c902:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c906:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c90a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c90e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c912:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c916:	e8 08 96 01 00       	call   c0025f23 <__adddf3>
c000c91b:	83 c4 10             	add    esp,0x10
c000c91e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c922:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c926:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c92a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c92e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c932:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c936:	e8 e8 95 01 00       	call   c0025f23 <__adddf3>
c000c93b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c93e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c942:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c946:	e8 b8 a2 01 00       	call   c0026c03 <__floatsidf>
c000c94b:	83 c4 10             	add    esp,0x10
c000c94e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c952:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c956:	52                   	push   edx
c000c957:	50                   	push   eax
c000c958:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c95c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c960:	e8 08 a5 01 00       	call   c0026e6d <__gedf2>
c000c965:	83 c4 10             	add    esp,0x10
c000c968:	85 c0                	test   eax,eax
c000c96a:	0f 89 49 ff ff ff    	jns    c000c8b9 <sinc_quad_vari_process+0x310>
c000c970:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c974:	0f 8e ef 00 00 00    	jle    c000ca69 <sinc_quad_vari_process+0x4c0>
c000c97a:	83 ec 10             	sub    esp,0x10
c000c97d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c980:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c983:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c986:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c989:	e8 e6 9b 01 00       	call   c0026574 <__subdf3>
c000c98e:	83 c4 18             	add    esp,0x18
c000c991:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c995:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c999:	52                   	push   edx
c000c99a:	50                   	push   eax
c000c99b:	e8 60 a6 01 00       	call   c0027000 <fabs>
c000c9a0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9a4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c9a8:	83 c4 10             	add    esp,0x10
c000c9ab:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c9b0:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c9b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9bd:	e8 8f a4 01 00       	call   c0026e51 <__gtdf2>
c000c9c2:	83 c4 10             	add    esp,0x10
c000c9c5:	85 c0                	test   eax,eax
c000c9c7:	0f 8e 9c 00 00 00    	jle    c000ca69 <sinc_quad_vari_process+0x4c0>
c000c9cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c9d0:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c9d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c9d7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c9db:	52                   	push   edx
c000c9dc:	50                   	push   eax
c000c9dd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c9e0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c9e3:	e8 8c 9b 01 00       	call   c0026574 <__subdf3>
c000c9e8:	59                   	pop    ecx
c000c9e9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c9ed:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c9f1:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c9f4:	e8 0a a2 01 00       	call   c0026c03 <__floatsidf>
c000c9f9:	83 c4 10             	add    esp,0x10
c000c9fc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca00:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca04:	52                   	push   edx
c000ca05:	50                   	push   eax
c000ca06:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca0a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca0e:	e8 8d 9b 01 00       	call   c00265a0 <__muldf3>
c000ca13:	5f                   	pop    edi
c000ca14:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ca18:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ca1c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000ca1f:	e8 df a1 01 00       	call   c0026c03 <__floatsidf>
c000ca24:	83 c4 10             	add    esp,0x10
c000ca27:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca2b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca2f:	52                   	push   edx
c000ca30:	50                   	push   eax
c000ca31:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca35:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca39:	e8 46 9e 01 00       	call   c0026884 <__divdf3>
c000ca3e:	83 c4 10             	add    esp,0x10
c000ca41:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca45:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca49:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca51:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca59:	e8 c5 94 01 00       	call   c0025f23 <__adddf3>
c000ca5e:	83 c4 10             	add    esp,0x10
c000ca61:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca65:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ca69:	83 ec 0c             	sub    esp,0xc
c000ca6c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ca6f:	e8 8f a1 01 00       	call   c0026c03 <__floatsidf>
c000ca74:	83 c4 10             	add    esp,0x10
c000ca77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca83:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca8f:	e8 db a3 01 00       	call   c0026e6f <__ltdf2>
c000ca94:	83 c4 10             	add    esp,0x10
c000ca97:	85 c0                	test   eax,eax
c000ca99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ca9d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000caa1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000caa5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000caa9:	78 10                	js     c000cabb <sinc_quad_vari_process+0x512>
c000caab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000caaf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cab3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cab7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cabb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cabf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cac3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cac7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cacb:	e8 d0 9a 01 00       	call   c00265a0 <__muldf3>
c000cad0:	59                   	pop    ecx
c000cad1:	5f                   	pop    edi
c000cad2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cad6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cada:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cade:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cae2:	e8 98 eb ff ff       	call   c000b67f <double_to_fp>
c000cae7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000caeb:	89 c7                	mov    edi,eax
c000caed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000caf1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000caf5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000caf9:	e8 a2 9a 01 00       	call   c00265a0 <__muldf3>
c000cafe:	83 c4 18             	add    esp,0x18
c000cb01:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb05:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb09:	52                   	push   edx
c000cb0a:	50                   	push   eax
c000cb0b:	e8 6f eb ff ff       	call   c000b67f <double_to_fp>
c000cb10:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cb13:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cb17:	83 c4 0c             	add    esp,0xc
c000cb1a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cb1d:	8d 04 90             	lea    eax,[eax+edx*4]
c000cb20:	50                   	push   eax
c000cb21:	50                   	push   eax
c000cb22:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cb25:	e8 d9 a0 01 00       	call   c0026c03 <__floatsidf>
c000cb2a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cb2e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cb32:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb36:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb3a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb3e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb42:	e8 3d 9d 01 00       	call   c0026884 <__divdf3>
c000cb47:	83 c4 18             	add    esp,0x18
c000cb4a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb4e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb52:	52                   	push   edx
c000cb53:	89 fa                	mov    edx,edi
c000cb55:	50                   	push   eax
c000cb56:	89 d8                	mov    eax,ebx
c000cb58:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cb5c:	e8 a5 d1 ff ff       	call   c0009d06 <calc_output_quad>
c000cb61:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cb65:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb69:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb75:	e8 0a 9d 01 00       	call   c0026884 <__divdf3>
c000cb7a:	83 c4 10             	add    esp,0x10
c000cb7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb81:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb8d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb91:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb95:	e8 89 93 01 00       	call   c0025f23 <__adddf3>
c000cb9a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cb9e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cba2:	83 c4 18             	add    esp,0x18
c000cba5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cba9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbad:	e8 6e a4 01 00       	call   c0027020 <lrint>
c000cbb2:	83 ec 0c             	sub    esp,0xc
c000cbb5:	50                   	push   eax
c000cbb6:	e8 48 a0 01 00       	call   c0026c03 <__floatsidf>
c000cbbb:	83 c4 10             	add    esp,0x10
c000cbbe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cbc2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cbc6:	52                   	push   edx
c000cbc7:	50                   	push   eax
c000cbc8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cbcc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cbd0:	e8 9f 99 01 00       	call   c0026574 <__subdf3>
c000cbd5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbd9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbdd:	83 c4 20             	add    esp,0x20
c000cbe0:	6a 00                	push   0x0
c000cbe2:	6a 00                	push   0x0
c000cbe4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbe8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbec:	e8 7e a2 01 00       	call   c0026e6f <__ltdf2>
c000cbf1:	83 c4 10             	add    esp,0x10
c000cbf4:	85 c0                	test   eax,eax
c000cbf6:	79 20                	jns    c000cc18 <sinc_quad_vari_process+0x66f>
c000cbf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc08:	e8 16 93 01 00       	call   c0025f23 <__adddf3>
c000cc0d:	83 c4 10             	add    esp,0x10
c000cc10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cc18:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000cc1b:	83 ec 10             	sub    esp,0x10
c000cc1e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cc22:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc2d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc31:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc35:	e8 3a 99 01 00       	call   c0026574 <__subdf3>
c000cc3a:	83 c4 18             	add    esp,0x18
c000cc3d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc41:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc45:	52                   	push   edx
c000cc46:	50                   	push   eax
c000cc47:	e8 d4 a3 01 00       	call   c0027020 <lrint>
c000cc4c:	0f af f8             	imul   edi,eax
c000cc4f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cc53:	83 c4 10             	add    esp,0x10
c000cc56:	01 f8                	add    eax,edi
c000cc58:	99                   	cdq    
c000cc59:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000cc5c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cc5f:	e9 fd fb ff ff       	jmp    c000c861 <sinc_quad_vari_process+0x2b8>
c000cc64:	83 c4 4c             	add    esp,0x4c
c000cc67:	89 d0                	mov    eax,edx
c000cc69:	5b                   	pop    ebx
c000cc6a:	5e                   	pop    esi
c000cc6b:	5f                   	pop    edi
c000cc6c:	5d                   	pop    ebp
c000cc6d:	c3                   	ret    

c000cc6e <sinc_stereo_vari_process>:
c000cc6e:	55                   	push   ebp
c000cc6f:	ba 05 00 00 00       	mov    edx,0x5
c000cc74:	57                   	push   edi
c000cc75:	56                   	push   esi
c000cc76:	53                   	push   ebx
c000cc77:	83 ec 4c             	sub    esp,0x4c
c000cc7a:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cc7e:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000cc82:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000cc85:	85 db                	test   ebx,ebx
c000cc87:	0f 84 9c 06 00 00    	je     c000d329 <sinc_stereo_vari_process+0x6bb>
c000cc8d:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cc90:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc93:	0f af c7             	imul   eax,edi
c000cc96:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cc99:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000cc9c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cca3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ccaa:	0f af c7             	imul   eax,edi
c000ccad:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ccb0:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ccb3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ccb6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccbe:	68 00 00 70 3f       	push   0x3f700000
c000ccc3:	6a 00                	push   0x0
c000ccc5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccc9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cccd:	e8 9d a1 01 00       	call   c0026e6f <__ltdf2>
c000ccd2:	83 c4 10             	add    esp,0x10
c000ccd5:	ba 16 00 00 00       	mov    edx,0x16
c000ccda:	85 c0                	test   eax,eax
c000ccdc:	0f 88 47 06 00 00    	js     c000d329 <sinc_stereo_vari_process+0x6bb>
c000cce2:	68 00 00 70 40       	push   0x40700000
c000cce7:	6a 00                	push   0x0
c000cce9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cced:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccf1:	e8 5b a1 01 00       	call   c0026e51 <__gtdf2>
c000ccf6:	83 c4 10             	add    esp,0x10
c000ccf9:	ba 16 00 00 00       	mov    edx,0x16
c000ccfe:	85 c0                	test   eax,eax
c000cd00:	0f 8f 23 06 00 00    	jg     c000d329 <sinc_stereo_vari_process+0x6bb>
c000cd06:	83 ec 0c             	sub    esp,0xc
c000cd09:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cd0c:	e8 f2 9e 01 00       	call   c0026c03 <__floatsidf>
c000cd11:	83 c4 10             	add    esp,0x10
c000cd14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cd18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cd1c:	68 00 00 00 40       	push   0x40000000
c000cd21:	6a 00                	push   0x0
c000cd23:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd27:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd2b:	e8 f3 91 01 00       	call   c0025f23 <__adddf3>
c000cd30:	59                   	pop    ecx
c000cd31:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cd35:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cd39:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd3c:	e8 c2 9e 01 00       	call   c0026c03 <__floatsidf>
c000cd41:	83 c4 10             	add    esp,0x10
c000cd44:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd48:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd4c:	52                   	push   edx
c000cd4d:	50                   	push   eax
c000cd4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd56:	e8 29 9b 01 00       	call   c0026884 <__divdf3>
c000cd5b:	83 c4 10             	add    esp,0x10
c000cd5e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd62:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd66:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cd69:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cd6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cd70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cd74:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd78:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd84:	e8 c8 a0 01 00       	call   c0026e51 <__gtdf2>
c000cd89:	83 c4 10             	add    esp,0x10
c000cd8c:	85 c0                	test   eax,eax
c000cd8e:	7e 2d                	jle    c000cdbd <sinc_stereo_vari_process+0x14f>
c000cd90:	68 00 00 f0 3f       	push   0x3ff00000
c000cd95:	6a 00                	push   0x0
c000cd97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9f:	e8 cb a0 01 00       	call   c0026e6f <__ltdf2>
c000cda4:	83 c4 10             	add    esp,0x10
c000cda7:	85 c0                	test   eax,eax
c000cda9:	79 4d                	jns    c000cdf8 <sinc_stereo_vari_process+0x18a>
c000cdab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdaf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cdb3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cdb7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cdbb:	eb 1b                	jmp    c000cdd8 <sinc_stereo_vari_process+0x16a>
c000cdbd:	68 00 00 f0 3f       	push   0x3ff00000
c000cdc2:	6a 00                	push   0x0
c000cdc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdcc:	e8 9e a0 01 00       	call   c0026e6f <__ltdf2>
c000cdd1:	83 c4 10             	add    esp,0x10
c000cdd4:	85 c0                	test   eax,eax
c000cdd6:	79 20                	jns    c000cdf8 <sinc_stereo_vari_process+0x18a>
c000cdd8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cddc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cde0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cde4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cde8:	e8 97 9a 01 00       	call   c0026884 <__divdf3>
c000cded:	83 c4 10             	add    esp,0x10
c000cdf0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdf4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cdf8:	50                   	push   eax
c000cdf9:	50                   	push   eax
c000cdfa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdfe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce02:	e8 19 a2 01 00       	call   c0027020 <lrint>
c000ce07:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000ce0a:	40                   	inc    eax
c000ce0b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce0f:	0f af c7             	imul   eax,edi
c000ce12:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000ce16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce19:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce1d:	58                   	pop    eax
c000ce1e:	5a                   	pop    edx
c000ce1f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce23:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce27:	e8 f4 a1 01 00       	call   c0027020 <lrint>
c000ce2c:	83 ec 0c             	sub    esp,0xc
c000ce2f:	50                   	push   eax
c000ce30:	e8 ce 9d 01 00       	call   c0026c03 <__floatsidf>
c000ce35:	83 c4 10             	add    esp,0x10
c000ce38:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce3c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce40:	52                   	push   edx
c000ce41:	50                   	push   eax
c000ce42:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce46:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce4a:	e8 25 97 01 00       	call   c0026574 <__subdf3>
c000ce4f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce53:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce57:	83 c4 20             	add    esp,0x20
c000ce5a:	6a 00                	push   0x0
c000ce5c:	6a 00                	push   0x0
c000ce5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce62:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce66:	e8 04 a0 01 00       	call   c0026e6f <__ltdf2>
c000ce6b:	83 c4 10             	add    esp,0x10
c000ce6e:	85 c0                	test   eax,eax
c000ce70:	79 1f                	jns    c000ce91 <sinc_stereo_vari_process+0x223>
c000ce72:	68 00 00 f0 3f       	push   0x3ff00000
c000ce77:	6a 00                	push   0x0
c000ce79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce81:	e8 9d 90 01 00       	call   c0025f23 <__adddf3>
c000ce86:	83 c4 10             	add    esp,0x10
c000ce89:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce8d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce91:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce94:	83 ec 10             	sub    esp,0x10
c000ce97:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ce9b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cea2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cea6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ceaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ceae:	e8 c1 96 01 00       	call   c0026574 <__subdf3>
c000ceb3:	83 c4 18             	add    esp,0x18
c000ceb6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ceba:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cebe:	52                   	push   edx
c000cebf:	50                   	push   eax
c000cec0:	e8 5b a1 01 00       	call   c0027020 <lrint>
c000cec5:	0f af f8             	imul   edi,eax
c000cec8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cecc:	01 f8                	add    eax,edi
c000cece:	99                   	cdq    
c000cecf:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ced2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ced5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ced9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cedd:	68 00 00 f0 3f       	push   0x3ff00000
c000cee2:	6a 00                	push   0x0
c000cee4:	e8 9b 99 01 00       	call   c0026884 <__divdf3>
c000cee9:	83 c4 10             	add    esp,0x10
c000ceec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cef0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cef4:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000cef9:	68 23 42 92 0c       	push   0xc924223
c000cefe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf02:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf06:	e8 18 90 01 00       	call   c0025f23 <__adddf3>
c000cf0b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000cf0f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000cf13:	83 c4 20             	add    esp,0x20
c000cf16:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000cf1e:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cf26:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cf29:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cf2c:	7d 50                	jge    c000cf7e <sinc_stereo_vari_process+0x310>
c000cf2e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cf31:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cf34:	01 c8                	add    eax,ecx
c000cf36:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cf39:	99                   	cdq    
c000cf3a:	f7 f9                	idiv   ecx
c000cf3c:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cf40:	7d 0c                	jge    c000cf4e <sinc_stereo_vari_process+0x2e0>
c000cf42:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cf45:	85 ff                	test   edi,edi
c000cf47:	79 6c                	jns    c000cfb5 <sinc_stereo_vari_process+0x347>
c000cf49:	e9 e7 00 00 00       	jmp    c000d035 <sinc_stereo_vari_process+0x3c7>
c000cf4e:	50                   	push   eax
c000cf4f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf53:	56                   	push   esi
c000cf54:	53                   	push   ebx
c000cf55:	e8 4c e7 ff ff       	call   c000b6a6 <prepare_data>
c000cf5a:	83 c4 10             	add    esp,0x10
c000cf5d:	89 c2                	mov    edx,eax
c000cf5f:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cf62:	85 c0                	test   eax,eax
c000cf64:	0f 85 bf 03 00 00    	jne    c000d329 <sinc_stereo_vari_process+0x6bb>
c000cf6a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cf6d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cf70:	01 c8                	add    eax,ecx
c000cf72:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cf75:	99                   	cdq    
c000cf76:	f7 f9                	idiv   ecx
c000cf78:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cf7c:	7c c4                	jl     c000cf42 <sinc_stereo_vari_process+0x2d4>
c000cf7e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cf82:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cf86:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cf89:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cf8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf90:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cf94:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cf97:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cf9a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cf9d:	99                   	cdq    
c000cf9e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cfa1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cfa4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cfa7:	99                   	cdq    
c000cfa8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cfab:	31 d2                	xor    edx,edx
c000cfad:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cfb0:	e9 74 03 00 00       	jmp    c000d329 <sinc_stereo_vari_process+0x6bb>
c000cfb5:	83 ec 0c             	sub    esp,0xc
c000cfb8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cfbb:	e8 43 9c 01 00       	call   c0026c03 <__floatsidf>
c000cfc0:	83 c4 10             	add    esp,0x10
c000cfc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cfc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cfcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cfcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cfd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cfd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cfdb:	e8 43 8f 01 00       	call   c0025f23 <__adddf3>
c000cfe0:	83 c4 10             	add    esp,0x10
c000cfe3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cfe7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cfeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cff3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cff7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cffb:	e8 23 8f 01 00       	call   c0025f23 <__adddf3>
c000d000:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d003:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d007:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d00b:	e8 f3 9b 01 00       	call   c0026c03 <__floatsidf>
c000d010:	83 c4 10             	add    esp,0x10
c000d013:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d017:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d01b:	52                   	push   edx
c000d01c:	50                   	push   eax
c000d01d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d021:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d025:	e8 43 9e 01 00       	call   c0026e6d <__gedf2>
c000d02a:	83 c4 10             	add    esp,0x10
c000d02d:	85 c0                	test   eax,eax
c000d02f:	0f 89 49 ff ff ff    	jns    c000cf7e <sinc_stereo_vari_process+0x310>
c000d035:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d039:	0f 8e ef 00 00 00    	jle    c000d12e <sinc_stereo_vari_process+0x4c0>
c000d03f:	83 ec 10             	sub    esp,0x10
c000d042:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d045:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d048:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d04b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d04e:	e8 21 95 01 00       	call   c0026574 <__subdf3>
c000d053:	83 c4 18             	add    esp,0x18
c000d056:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d05a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d05e:	52                   	push   edx
c000d05f:	50                   	push   eax
c000d060:	e8 9b 9f 01 00       	call   c0027000 <fabs>
c000d065:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d069:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d06d:	83 c4 10             	add    esp,0x10
c000d070:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d075:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d07a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d07e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d082:	e8 ca 9d 01 00       	call   c0026e51 <__gtdf2>
c000d087:	83 c4 10             	add    esp,0x10
c000d08a:	85 c0                	test   eax,eax
c000d08c:	0f 8e 9c 00 00 00    	jle    c000d12e <sinc_stereo_vari_process+0x4c0>
c000d092:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d095:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d098:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d09c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d0a0:	52                   	push   edx
c000d0a1:	50                   	push   eax
c000d0a2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d0a5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d0a8:	e8 c7 94 01 00       	call   c0026574 <__subdf3>
c000d0ad:	59                   	pop    ecx
c000d0ae:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d0b2:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d0b6:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d0b9:	e8 45 9b 01 00       	call   c0026c03 <__floatsidf>
c000d0be:	83 c4 10             	add    esp,0x10
c000d0c1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0c5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0c9:	52                   	push   edx
c000d0ca:	50                   	push   eax
c000d0cb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0cf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0d3:	e8 c8 94 01 00       	call   c00265a0 <__muldf3>
c000d0d8:	5f                   	pop    edi
c000d0d9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d0dd:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d0e1:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d0e4:	e8 1a 9b 01 00       	call   c0026c03 <__floatsidf>
c000d0e9:	83 c4 10             	add    esp,0x10
c000d0ec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0f0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0f4:	52                   	push   edx
c000d0f5:	50                   	push   eax
c000d0f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0fe:	e8 81 97 01 00       	call   c0026884 <__divdf3>
c000d103:	83 c4 10             	add    esp,0x10
c000d106:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d10a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d10e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d112:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d116:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d11a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d11e:	e8 00 8e 01 00       	call   c0025f23 <__adddf3>
c000d123:	83 c4 10             	add    esp,0x10
c000d126:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d12a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d12e:	83 ec 0c             	sub    esp,0xc
c000d131:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d134:	e8 ca 9a 01 00       	call   c0026c03 <__floatsidf>
c000d139:	83 c4 10             	add    esp,0x10
c000d13c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d140:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d144:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d148:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d14c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d150:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d154:	e8 16 9d 01 00       	call   c0026e6f <__ltdf2>
c000d159:	83 c4 10             	add    esp,0x10
c000d15c:	85 c0                	test   eax,eax
c000d15e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d162:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d166:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d16a:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d16e:	78 10                	js     c000d180 <sinc_stereo_vari_process+0x512>
c000d170:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d174:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d178:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d17c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d180:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d184:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d188:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d18c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d190:	e8 0b 94 01 00       	call   c00265a0 <__muldf3>
c000d195:	59                   	pop    ecx
c000d196:	5f                   	pop    edi
c000d197:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d19b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d19f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1a7:	e8 d3 e4 ff ff       	call   c000b67f <double_to_fp>
c000d1ac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1b0:	89 c7                	mov    edi,eax
c000d1b2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1be:	e8 dd 93 01 00       	call   c00265a0 <__muldf3>
c000d1c3:	83 c4 18             	add    esp,0x18
c000d1c6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d1ca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d1ce:	52                   	push   edx
c000d1cf:	50                   	push   eax
c000d1d0:	e8 aa e4 ff ff       	call   c000b67f <double_to_fp>
c000d1d5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d1d8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d1dc:	83 c4 0c             	add    esp,0xc
c000d1df:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d1e2:	8d 04 90             	lea    eax,[eax+edx*4]
c000d1e5:	50                   	push   eax
c000d1e6:	50                   	push   eax
c000d1e7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d1ea:	e8 14 9a 01 00       	call   c0026c03 <__floatsidf>
c000d1ef:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d1f3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d1f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1fb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1ff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d203:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d207:	e8 78 96 01 00       	call   c0026884 <__divdf3>
c000d20c:	83 c4 18             	add    esp,0x18
c000d20f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d213:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d217:	52                   	push   edx
c000d218:	89 fa                	mov    edx,edi
c000d21a:	50                   	push   eax
c000d21b:	89 d8                	mov    eax,ebx
c000d21d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d221:	e8 02 c7 ff ff       	call   c0009928 <calc_output_stereo>
c000d226:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d22a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d22e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d232:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d236:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d23a:	e8 45 96 01 00       	call   c0026884 <__divdf3>
c000d23f:	83 c4 10             	add    esp,0x10
c000d242:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d246:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d24a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d24e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d252:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d256:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d25a:	e8 c4 8c 01 00       	call   c0025f23 <__adddf3>
c000d25f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d263:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d267:	83 c4 18             	add    esp,0x18
c000d26a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d26e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d272:	e8 a9 9d 01 00       	call   c0027020 <lrint>
c000d277:	83 ec 0c             	sub    esp,0xc
c000d27a:	50                   	push   eax
c000d27b:	e8 83 99 01 00       	call   c0026c03 <__floatsidf>
c000d280:	83 c4 10             	add    esp,0x10
c000d283:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d287:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d28b:	52                   	push   edx
c000d28c:	50                   	push   eax
c000d28d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d291:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d295:	e8 da 92 01 00       	call   c0026574 <__subdf3>
c000d29a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d29e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2a2:	83 c4 20             	add    esp,0x20
c000d2a5:	6a 00                	push   0x0
c000d2a7:	6a 00                	push   0x0
c000d2a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2b1:	e8 b9 9b 01 00       	call   c0026e6f <__ltdf2>
c000d2b6:	83 c4 10             	add    esp,0x10
c000d2b9:	85 c0                	test   eax,eax
c000d2bb:	79 20                	jns    c000d2dd <sinc_stereo_vari_process+0x66f>
c000d2bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2cd:	e8 51 8c 01 00       	call   c0025f23 <__adddf3>
c000d2d2:	83 c4 10             	add    esp,0x10
c000d2d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d2d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d2dd:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d2e0:	83 ec 10             	sub    esp,0x10
c000d2e3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d2e7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d2ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2f2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d2f6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d2fa:	e8 75 92 01 00       	call   c0026574 <__subdf3>
c000d2ff:	83 c4 18             	add    esp,0x18
c000d302:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d306:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	e8 0f 9d 01 00       	call   c0027020 <lrint>
c000d311:	0f af f8             	imul   edi,eax
c000d314:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d318:	83 c4 10             	add    esp,0x10
c000d31b:	01 f8                	add    eax,edi
c000d31d:	99                   	cdq    
c000d31e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d321:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d324:	e9 fd fb ff ff       	jmp    c000cf26 <sinc_stereo_vari_process+0x2b8>
c000d329:	83 c4 4c             	add    esp,0x4c
c000d32c:	89 d0                	mov    eax,edx
c000d32e:	5b                   	pop    ebx
c000d32f:	5e                   	pop    esi
c000d330:	5f                   	pop    edi
c000d331:	5d                   	pop    ebp
c000d332:	c3                   	ret    

c000d333 <sinc_mono_vari_process>:
c000d333:	55                   	push   ebp
c000d334:	ba 05 00 00 00       	mov    edx,0x5
c000d339:	57                   	push   edi
c000d33a:	56                   	push   esi
c000d33b:	53                   	push   ebx
c000d33c:	83 ec 4c             	sub    esp,0x4c
c000d33f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d343:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d347:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d34a:	85 db                	test   ebx,ebx
c000d34c:	0f 84 c1 06 00 00    	je     c000da13 <sinc_mono_vari_process+0x6e0>
c000d352:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d355:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d358:	0f af c7             	imul   eax,edi
c000d35b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d35e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d361:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d368:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d36f:	0f af c7             	imul   eax,edi
c000d372:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d375:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d379:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d37c:	8b 00                	mov    eax,DWORD PTR [eax]
c000d37e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d382:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d386:	68 00 00 70 3f       	push   0x3f700000
c000d38b:	6a 00                	push   0x0
c000d38d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d391:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d395:	e8 d5 9a 01 00       	call   c0026e6f <__ltdf2>
c000d39a:	83 c4 10             	add    esp,0x10
c000d39d:	ba 16 00 00 00       	mov    edx,0x16
c000d3a2:	85 c0                	test   eax,eax
c000d3a4:	0f 88 69 06 00 00    	js     c000da13 <sinc_mono_vari_process+0x6e0>
c000d3aa:	68 00 00 70 40       	push   0x40700000
c000d3af:	6a 00                	push   0x0
c000d3b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3b9:	e8 93 9a 01 00       	call   c0026e51 <__gtdf2>
c000d3be:	83 c4 10             	add    esp,0x10
c000d3c1:	ba 16 00 00 00       	mov    edx,0x16
c000d3c6:	85 c0                	test   eax,eax
c000d3c8:	0f 8f 45 06 00 00    	jg     c000da13 <sinc_mono_vari_process+0x6e0>
c000d3ce:	83 ec 0c             	sub    esp,0xc
c000d3d1:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d3d4:	e8 2a 98 01 00       	call   c0026c03 <__floatsidf>
c000d3d9:	83 c4 10             	add    esp,0x10
c000d3dc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d3e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d3e4:	68 00 00 00 40       	push   0x40000000
c000d3e9:	6a 00                	push   0x0
c000d3eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d3ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d3f3:	e8 2b 8b 01 00       	call   c0025f23 <__adddf3>
c000d3f8:	59                   	pop    ecx
c000d3f9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d3fd:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d401:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d404:	e8 fa 97 01 00       	call   c0026c03 <__floatsidf>
c000d409:	83 c4 10             	add    esp,0x10
c000d40c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d410:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d414:	52                   	push   edx
c000d415:	50                   	push   eax
c000d416:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d41a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d41e:	e8 61 94 01 00       	call   c0026884 <__divdf3>
c000d423:	83 c4 10             	add    esp,0x10
c000d426:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d42a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d42e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d431:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d434:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d438:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d43c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d440:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d444:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d448:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d44c:	e8 00 9a 01 00       	call   c0026e51 <__gtdf2>
c000d451:	83 c4 10             	add    esp,0x10
c000d454:	85 c0                	test   eax,eax
c000d456:	7e 2d                	jle    c000d485 <sinc_mono_vari_process+0x152>
c000d458:	68 00 00 f0 3f       	push   0x3ff00000
c000d45d:	6a 00                	push   0x0
c000d45f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d463:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d467:	e8 03 9a 01 00       	call   c0026e6f <__ltdf2>
c000d46c:	83 c4 10             	add    esp,0x10
c000d46f:	85 c0                	test   eax,eax
c000d471:	79 4d                	jns    c000d4c0 <sinc_mono_vari_process+0x18d>
c000d473:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d477:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d47b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d47f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d483:	eb 1b                	jmp    c000d4a0 <sinc_mono_vari_process+0x16d>
c000d485:	68 00 00 f0 3f       	push   0x3ff00000
c000d48a:	6a 00                	push   0x0
c000d48c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d490:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d494:	e8 d6 99 01 00       	call   c0026e6f <__ltdf2>
c000d499:	83 c4 10             	add    esp,0x10
c000d49c:	85 c0                	test   eax,eax
c000d49e:	79 20                	jns    c000d4c0 <sinc_mono_vari_process+0x18d>
c000d4a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d4a4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d4a8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4ac:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4b0:	e8 cf 93 01 00       	call   c0026884 <__divdf3>
c000d4b5:	83 c4 10             	add    esp,0x10
c000d4b8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4bc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4c0:	50                   	push   eax
c000d4c1:	50                   	push   eax
c000d4c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4c6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4ca:	e8 51 9b 01 00       	call   c0027020 <lrint>
c000d4cf:	40                   	inc    eax
c000d4d0:	0f af c7             	imul   eax,edi
c000d4d3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d4d7:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d4db:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d4de:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d4e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4e5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4e9:	58                   	pop    eax
c000d4ea:	5a                   	pop    edx
c000d4eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4f3:	e8 28 9b 01 00       	call   c0027020 <lrint>
c000d4f8:	83 ec 0c             	sub    esp,0xc
c000d4fb:	50                   	push   eax
c000d4fc:	e8 02 97 01 00       	call   c0026c03 <__floatsidf>
c000d501:	83 c4 10             	add    esp,0x10
c000d504:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d508:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d50c:	52                   	push   edx
c000d50d:	50                   	push   eax
c000d50e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d512:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d516:	e8 59 90 01 00       	call   c0026574 <__subdf3>
c000d51b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d51f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d523:	83 c4 20             	add    esp,0x20
c000d526:	6a 00                	push   0x0
c000d528:	6a 00                	push   0x0
c000d52a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d52e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d532:	e8 38 99 01 00       	call   c0026e6f <__ltdf2>
c000d537:	83 c4 10             	add    esp,0x10
c000d53a:	85 c0                	test   eax,eax
c000d53c:	79 1f                	jns    c000d55d <sinc_mono_vari_process+0x22a>
c000d53e:	68 00 00 f0 3f       	push   0x3ff00000
c000d543:	6a 00                	push   0x0
c000d545:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d549:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d54d:	e8 d1 89 01 00       	call   c0025f23 <__adddf3>
c000d552:	83 c4 10             	add    esp,0x10
c000d555:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d559:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d55d:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d560:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d563:	83 ec 10             	sub    esp,0x10
c000d566:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d56a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d56e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d572:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d576:	e8 f9 8f 01 00       	call   c0026574 <__subdf3>
c000d57b:	83 c4 18             	add    esp,0x18
c000d57e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d582:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d586:	52                   	push   edx
c000d587:	50                   	push   eax
c000d588:	e8 93 9a 01 00       	call   c0027020 <lrint>
c000d58d:	0f af f8             	imul   edi,eax
c000d590:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d593:	31 ff                	xor    edi,edi
c000d595:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d59a:	99                   	cdq    
c000d59b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d59e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d5a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5a9:	55                   	push   ebp
c000d5aa:	57                   	push   edi
c000d5ab:	e8 d4 92 01 00       	call   c0026884 <__divdf3>
c000d5b0:	83 c4 10             	add    esp,0x10
c000d5b3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d5b7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d5bb:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d5c0:	68 23 42 92 0c       	push   0xc924223
c000d5c5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5c9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5cd:	e8 51 89 01 00       	call   c0025f23 <__adddf3>
c000d5d2:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d5d6:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d5da:	83 c4 20             	add    esp,0x20
c000d5dd:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d5e1:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d5e5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d5e8:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d5eb:	7d 54                	jge    c000d641 <sinc_mono_vari_process+0x30e>
c000d5ed:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d5f0:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d5f3:	01 c8                	add    eax,ecx
c000d5f5:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d5f8:	99                   	cdq    
c000d5f9:	f7 f9                	idiv   ecx
c000d5fb:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d5ff:	7d 0c                	jge    c000d60d <sinc_mono_vari_process+0x2da>
c000d601:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d604:	85 ff                	test   edi,edi
c000d606:	79 73                	jns    c000d67b <sinc_mono_vari_process+0x348>
c000d608:	e9 ee 00 00 00       	jmp    c000d6fb <sinc_mono_vari_process+0x3c8>
c000d60d:	50                   	push   eax
c000d60e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d612:	56                   	push   esi
c000d613:	53                   	push   ebx
c000d614:	e8 8d e0 ff ff       	call   c000b6a6 <prepare_data>
c000d619:	89 c2                	mov    edx,eax
c000d61b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d61f:	83 c4 10             	add    esp,0x10
c000d622:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d625:	85 d2                	test   edx,edx
c000d627:	0f 85 e6 03 00 00    	jne    c000da13 <sinc_mono_vari_process+0x6e0>
c000d62d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d630:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d633:	01 c8                	add    eax,ecx
c000d635:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d638:	99                   	cdq    
c000d639:	f7 f9                	idiv   ecx
c000d63b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d63f:	7c c0                	jl     c000d601 <sinc_mono_vari_process+0x2ce>
c000d641:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d645:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d649:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d64d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d650:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d653:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d657:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d65b:	89 01                	mov    DWORD PTR [ecx],eax
c000d65d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d660:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d663:	99                   	cdq    
c000d664:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d667:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d66a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d66d:	99                   	cdq    
c000d66e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d671:	31 d2                	xor    edx,edx
c000d673:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d676:	e9 98 03 00 00       	jmp    c000da13 <sinc_mono_vari_process+0x6e0>
c000d67b:	83 ec 0c             	sub    esp,0xc
c000d67e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d681:	e8 7d 95 01 00       	call   c0026c03 <__floatsidf>
c000d686:	83 c4 10             	add    esp,0x10
c000d689:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d68d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d691:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d695:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d699:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d69d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6a1:	e8 7d 88 01 00       	call   c0025f23 <__adddf3>
c000d6a6:	83 c4 10             	add    esp,0x10
c000d6a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6b1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6b5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6c1:	e8 5d 88 01 00       	call   c0025f23 <__adddf3>
c000d6c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d6c9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d6cd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d6d1:	e8 2d 95 01 00       	call   c0026c03 <__floatsidf>
c000d6d6:	83 c4 10             	add    esp,0x10
c000d6d9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d6dd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d6e1:	52                   	push   edx
c000d6e2:	50                   	push   eax
c000d6e3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6eb:	e8 61 97 01 00       	call   c0026e51 <__gtdf2>
c000d6f0:	83 c4 10             	add    esp,0x10
c000d6f3:	85 c0                	test   eax,eax
c000d6f5:	0f 8f 46 ff ff ff    	jg     c000d641 <sinc_mono_vari_process+0x30e>
c000d6fb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d6ff:	0f 8e f5 00 00 00    	jle    c000d7fa <sinc_mono_vari_process+0x4c7>
c000d705:	83 ec 10             	sub    esp,0x10
c000d708:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d70b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d70e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d712:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d715:	ff 30                	push   DWORD PTR [eax]
c000d717:	e8 58 8e 01 00       	call   c0026574 <__subdf3>
c000d71c:	83 c4 18             	add    esp,0x18
c000d71f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d723:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d727:	52                   	push   edx
c000d728:	50                   	push   eax
c000d729:	e8 d2 98 01 00       	call   c0027000 <fabs>
c000d72e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d732:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d736:	83 c4 10             	add    esp,0x10
c000d739:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d73e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d743:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d747:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d74b:	e8 01 97 01 00       	call   c0026e51 <__gtdf2>
c000d750:	83 c4 10             	add    esp,0x10
c000d753:	85 c0                	test   eax,eax
c000d755:	0f 8e 9f 00 00 00    	jle    c000d7fa <sinc_mono_vari_process+0x4c7>
c000d75b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d75f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d762:	8b 00                	mov    eax,DWORD PTR [eax]
c000d764:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d768:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d76c:	52                   	push   edx
c000d76d:	50                   	push   eax
c000d76e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d771:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d774:	e8 fb 8d 01 00       	call   c0026574 <__subdf3>
c000d779:	5f                   	pop    edi
c000d77a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d77e:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d782:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d785:	e8 79 94 01 00       	call   c0026c03 <__floatsidf>
c000d78a:	83 c4 10             	add    esp,0x10
c000d78d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d791:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d795:	52                   	push   edx
c000d796:	50                   	push   eax
c000d797:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d79b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d79f:	e8 fc 8d 01 00       	call   c00265a0 <__muldf3>
c000d7a4:	5d                   	pop    ebp
c000d7a5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d7a9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d7ad:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d7b0:	e8 4e 94 01 00       	call   c0026c03 <__floatsidf>
c000d7b5:	83 c4 10             	add    esp,0x10
c000d7b8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d7bc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d7c0:	52                   	push   edx
c000d7c1:	50                   	push   eax
c000d7c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7ca:	e8 b5 90 01 00       	call   c0026884 <__divdf3>
c000d7cf:	83 c4 10             	add    esp,0x10
c000d7d2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7d6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7e2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7e6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7ea:	e8 34 87 01 00       	call   c0025f23 <__adddf3>
c000d7ef:	83 c4 10             	add    esp,0x10
c000d7f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d7f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d7fa:	83 ec 0c             	sub    esp,0xc
c000d7fd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d800:	e8 fe 93 01 00       	call   c0026c03 <__floatsidf>
c000d805:	83 c4 10             	add    esp,0x10
c000d808:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d80c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d810:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d814:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d818:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d81c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d820:	e8 4a 96 01 00       	call   c0026e6f <__ltdf2>
c000d825:	83 c4 10             	add    esp,0x10
c000d828:	85 c0                	test   eax,eax
c000d82a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000d82e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000d832:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000d836:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000d83a:	78 10                	js     c000d84c <sinc_mono_vari_process+0x519>
c000d83c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d840:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d844:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d848:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d84c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d850:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d854:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d858:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d85c:	e8 3f 8d 01 00       	call   c00265a0 <__muldf3>
c000d861:	59                   	pop    ecx
c000d862:	5f                   	pop    edi
c000d863:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d867:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d86b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d86f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d873:	e8 07 de ff ff       	call   c000b67f <double_to_fp>
c000d878:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d87c:	89 c7                	mov    edi,eax
c000d87e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d882:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d886:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d88a:	e8 11 8d 01 00       	call   c00265a0 <__muldf3>
c000d88f:	83 c4 18             	add    esp,0x18
c000d892:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d896:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d89a:	52                   	push   edx
c000d89b:	50                   	push   eax
c000d89c:	e8 de dd ff ff       	call   c000b67f <double_to_fp>
c000d8a1:	83 ec 0c             	sub    esp,0xc
c000d8a4:	89 c5                	mov    ebp,eax
c000d8a6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d8a9:	e8 55 93 01 00       	call   c0026c03 <__floatsidf>
c000d8ae:	83 c4 10             	add    esp,0x10
c000d8b1:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d8b5:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d8b9:	52                   	push   edx
c000d8ba:	50                   	push   eax
c000d8bb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8c3:	e8 bc 8f 01 00       	call   c0026884 <__divdf3>
c000d8c8:	83 c4 10             	add    esp,0x10
c000d8cb:	89 e9                	mov    ecx,ebp
c000d8cd:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d8d1:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d8d5:	89 d8                	mov    eax,ebx
c000d8d7:	89 fa                	mov    edx,edi
c000d8d9:	e8 ee bd ff ff       	call   c00096cc <calc_output_single>
c000d8de:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000d8e1:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000d8e4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8e8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8ec:	52                   	push   edx
c000d8ed:	50                   	push   eax
c000d8ee:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d8f2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d8f6:	e8 a5 8c 01 00       	call   c00265a0 <__muldf3>
c000d8fb:	59                   	pop    ecx
c000d8fc:	59                   	pop    ecx
c000d8fd:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d901:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d905:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d909:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d90d:	e8 61 95 01 00       	call   c0026e73 <__truncdfsf2>
c000d912:	83 c4 10             	add    esp,0x10
c000d915:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000d918:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000d91b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d91f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d923:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d927:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d92b:	e8 54 8f 01 00       	call   c0026884 <__divdf3>
c000d930:	83 c4 10             	add    esp,0x10
c000d933:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d937:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d93b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d93f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d943:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d947:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d94b:	e8 d3 85 01 00       	call   c0025f23 <__adddf3>
c000d950:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000d954:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d958:	83 c4 18             	add    esp,0x18
c000d95b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d963:	e8 b8 96 01 00       	call   c0027020 <lrint>
c000d968:	83 ec 0c             	sub    esp,0xc
c000d96b:	50                   	push   eax
c000d96c:	e8 92 92 01 00       	call   c0026c03 <__floatsidf>
c000d971:	83 c4 10             	add    esp,0x10
c000d974:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d978:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d97c:	52                   	push   edx
c000d97d:	50                   	push   eax
c000d97e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d982:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d986:	e8 e9 8b 01 00       	call   c0026574 <__subdf3>
c000d98b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d98f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d993:	83 c4 20             	add    esp,0x20
c000d996:	6a 00                	push   0x0
c000d998:	6a 00                	push   0x0
c000d99a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d99e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9a2:	e8 c8 94 01 00       	call   c0026e6f <__ltdf2>
c000d9a7:	83 c4 10             	add    esp,0x10
c000d9aa:	85 c0                	test   eax,eax
c000d9ac:	79 20                	jns    c000d9ce <sinc_mono_vari_process+0x69b>
c000d9ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9be:	e8 60 85 01 00       	call   c0025f23 <__adddf3>
c000d9c3:	83 c4 10             	add    esp,0x10
c000d9c6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d9ca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d9ce:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d9d1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d9d4:	83 ec 10             	sub    esp,0x10
c000d9d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9df:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d9e3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d9e7:	e8 88 8b 01 00       	call   c0026574 <__subdf3>
c000d9ec:	83 c4 18             	add    esp,0x18
c000d9ef:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9f3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9f7:	52                   	push   edx
c000d9f8:	50                   	push   eax
c000d9f9:	e8 22 96 01 00       	call   c0027020 <lrint>
c000d9fe:	83 c4 10             	add    esp,0x10
c000da01:	0f af f8             	imul   edi,eax
c000da04:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000da07:	99                   	cdq    
c000da08:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000da0b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000da0e:	e9 d2 fb ff ff       	jmp    c000d5e5 <sinc_mono_vari_process+0x2b2>
c000da13:	83 c4 4c             	add    esp,0x4c
c000da16:	89 d0                	mov    eax,edx
c000da18:	5b                   	pop    ebx
c000da19:	5e                   	pop    esi
c000da1a:	5f                   	pop    edi
c000da1b:	5d                   	pop    ebp
c000da1c:	c3                   	ret    

c000da1d <sinc_get_name>:
c000da1d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da21:	31 c0                	xor    eax,eax
c000da23:	83 fa 02             	cmp    edx,0x2
c000da26:	77 07                	ja     c000da2f <sinc_get_name+0x12>
c000da28:	8b 04 95 c4 87 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd783c]
c000da2f:	c3                   	ret    

c000da30 <sinc_get_description>:
c000da30:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da34:	31 c0                	xor    eax,eax
c000da36:	83 fa 02             	cmp    edx,0x2
c000da39:	77 07                	ja     c000da42 <sinc_get_description+0x12>
c000da3b:	8b 04 95 b8 87 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7848]
c000da42:	c3                   	ret    

c000da43 <sinc_set_converter>:
c000da43:	53                   	push   ebx
c000da44:	81 ec 58 08 00 00    	sub    esp,0x858
c000da4a:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000da51:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000da54:	85 c0                	test   eax,eax
c000da56:	74 13                	je     c000da6b <sinc_set_converter+0x28>
c000da58:	83 ec 0c             	sub    esp,0xc
c000da5b:	50                   	push   eax
c000da5c:	e8 83 1a 00 00       	call   c000f4e4 <free>
c000da61:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000da68:	83 c4 10             	add    esp,0x10
c000da6b:	50                   	push   eax
c000da6c:	68 44 08 00 00       	push   0x844
c000da71:	6a 00                	push   0x0
c000da73:	8d 44 24 18          	lea    eax,[esp+0x18]
c000da77:	50                   	push   eax
c000da78:	e8 0e 2c ff ff       	call   c000068b <memset>
c000da7d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000da80:	83 c4 10             	add    esp,0x10
c000da83:	b8 0b 00 00 00       	mov    eax,0xb
c000da88:	81 fa 80 00 00 00    	cmp    edx,0x80
c000da8e:	7f 6e                	jg     c000dafe <sinc_set_converter+0xbb>
c000da90:	83 fa 01             	cmp    edx,0x1
c000da93:	75 10                	jne    c000daa5 <sinc_set_converter+0x62>
c000da95:	c7 43 24 33 d3 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d333
c000da9c:	c7 43 20 33 d3 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d333
c000daa3:	eb 4d                	jmp    c000daf2 <sinc_set_converter+0xaf>
c000daa5:	83 fa 02             	cmp    edx,0x2
c000daa8:	75 10                	jne    c000daba <sinc_set_converter+0x77>
c000daaa:	c7 43 24 6e cc 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cc6e
c000dab1:	c7 43 20 6e cc 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cc6e
c000dab8:	eb 38                	jmp    c000daf2 <sinc_set_converter+0xaf>
c000daba:	83 fa 04             	cmp    edx,0x4
c000dabd:	75 10                	jne    c000dacf <sinc_set_converter+0x8c>
c000dabf:	c7 43 24 a9 c5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c5a9
c000dac6:	c7 43 20 a9 c5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c5a9
c000dacd:	eb 23                	jmp    c000daf2 <sinc_set_converter+0xaf>
c000dacf:	83 fa 06             	cmp    edx,0x6
c000dad2:	75 10                	jne    c000dae4 <sinc_set_converter+0xa1>
c000dad4:	c7 43 24 e4 be 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000bee4
c000dadb:	c7 43 20 e4 be 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000bee4
c000dae2:	eb 0e                	jmp    c000daf2 <sinc_set_converter+0xaf>
c000dae4:	c7 43 24 20 b8 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000b820
c000daeb:	c7 43 20 20 b8 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000b820
c000daf2:	c7 43 28 d3 aa 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000aad3
c000daf9:	b8 0a 00 00 00       	mov    eax,0xa
c000dafe:	81 c4 58 08 00 00    	add    esp,0x858
c000db04:	5b                   	pop    ebx
c000db05:	c3                   	ret    

c000db06 <zoh_vari_process>:
c000db06:	55                   	push   ebp
c000db07:	31 d2                	xor    edx,edx
c000db09:	57                   	push   edi
c000db0a:	56                   	push   esi
c000db0b:	53                   	push   ebx
c000db0c:	83 ec 3c             	sub    esp,0x3c
c000db0f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000db13:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000db17:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000db1b:	0f 8e 80 06 00 00    	jle    c000e1a1 <zoh_vari_process+0x69b>
c000db21:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000db24:	ba 05 00 00 00       	mov    edx,0x5
c000db29:	85 db                	test   ebx,ebx
c000db2b:	0f 84 70 06 00 00    	je     c000e1a1 <zoh_vari_process+0x69b>
c000db31:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000db34:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000db38:	74 19                	je     c000db53 <zoh_vari_process+0x4d>
c000db3a:	31 d2                	xor    edx,edx
c000db3c:	39 c2                	cmp    edx,eax
c000db3e:	7d 0c                	jge    c000db4c <zoh_vari_process+0x46>
c000db40:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000db42:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000db45:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000db49:	42                   	inc    edx
c000db4a:	eb f0                	jmp    c000db3c <zoh_vari_process+0x36>
c000db4c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000db53:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000db56:	0f af d0             	imul   edx,eax
c000db59:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000db5c:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000db60:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000db67:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000db6a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000db71:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000db74:	8b 07                	mov    eax,DWORD PTR [edi]
c000db76:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000db7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000db7e:	68 00 00 70 3f       	push   0x3f700000
c000db83:	6a 00                	push   0x0
c000db85:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db8d:	e8 dd 92 01 00       	call   c0026e6f <__ltdf2>
c000db92:	83 c4 10             	add    esp,0x10
c000db95:	ba 16 00 00 00       	mov    edx,0x16
c000db9a:	85 c0                	test   eax,eax
c000db9c:	0f 88 ff 05 00 00    	js     c000e1a1 <zoh_vari_process+0x69b>
c000dba2:	68 00 00 70 40       	push   0x40700000
c000dba7:	6a 00                	push   0x0
c000dba9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb1:	e8 9b 92 01 00       	call   c0026e51 <__gtdf2>
c000dbb6:	83 c4 10             	add    esp,0x10
c000dbb9:	ba 16 00 00 00       	mov    edx,0x16
c000dbbe:	85 c0                	test   eax,eax
c000dbc0:	0f 8f db 05 00 00    	jg     c000e1a1 <zoh_vari_process+0x69b>
c000dbc6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dbc9:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dbcc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dbd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dbd4:	68 00 00 f0 3f       	push   0x3ff00000
c000dbd9:	6a 00                	push   0x0
c000dbdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbdf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbe3:	e8 87 92 01 00       	call   c0026e6f <__ltdf2>
c000dbe8:	83 c4 10             	add    esp,0x10
c000dbeb:	85 c0                	test   eax,eax
c000dbed:	0f 89 da 01 00 00    	jns    c000ddcd <zoh_vari_process+0x2c7>
c000dbf3:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000dbf6:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000dbf9:	0f 8d ce 01 00 00    	jge    c000ddcd <zoh_vari_process+0x2c7>
c000dbff:	83 ec 0c             	sub    esp,0xc
c000dc02:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dc05:	e8 f9 8f 01 00       	call   c0026c03 <__floatsidf>
c000dc0a:	83 c4 10             	add    esp,0x10
c000dc0d:	89 04 24             	mov    DWORD PTR [esp],eax
c000dc10:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dc14:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc24:	e8 77 89 01 00       	call   c00265a0 <__muldf3>
c000dc29:	59                   	pop    ecx
c000dc2a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc2e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dc32:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000dc35:	e8 c9 8f 01 00       	call   c0026c03 <__floatsidf>
c000dc3a:	83 c4 10             	add    esp,0x10
c000dc3d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc41:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc45:	52                   	push   edx
c000dc46:	50                   	push   eax
c000dc47:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc4b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc4f:	e8 cf 82 01 00       	call   c0025f23 <__adddf3>
c000dc54:	59                   	pop    ecx
c000dc55:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc59:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dc5d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000dc60:	e8 9e 8f 01 00       	call   c0026c03 <__floatsidf>
c000dc65:	83 c4 10             	add    esp,0x10
c000dc68:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc6c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc70:	52                   	push   edx
c000dc71:	50                   	push   eax
c000dc72:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc76:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc7a:	e8 ee 91 01 00       	call   c0026e6d <__gedf2>
c000dc7f:	83 c4 10             	add    esp,0x10
c000dc82:	85 c0                	test   eax,eax
c000dc84:	0f 89 43 01 00 00    	jns    c000ddcd <zoh_vari_process+0x2c7>
c000dc8a:	85 ed                	test   ebp,ebp
c000dc8c:	0f 8e ec 00 00 00    	jle    c000dd7e <zoh_vari_process+0x278>
c000dc92:	83 ec 10             	sub    esp,0x10
c000dc95:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dc98:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dc9b:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000dc9e:	ff 37                	push   DWORD PTR [edi]
c000dca0:	e8 cf 88 01 00       	call   c0026574 <__subdf3>
c000dca5:	83 c4 18             	add    esp,0x18
c000dca8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dcac:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dcb0:	52                   	push   edx
c000dcb1:	50                   	push   eax
c000dcb2:	e8 49 93 01 00       	call   c0027000 <fabs>
c000dcb7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dcbb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dcbf:	83 c4 10             	add    esp,0x10
c000dcc2:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dcc7:	68 23 42 92 0c       	push   0xc924223
c000dccc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dcd0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dcd4:	e8 78 91 01 00       	call   c0026e51 <__gtdf2>
c000dcd9:	83 c4 10             	add    esp,0x10
c000dcdc:	85 c0                	test   eax,eax
c000dcde:	0f 8e 9a 00 00 00    	jle    c000dd7e <zoh_vari_process+0x278>
c000dce4:	8b 07                	mov    eax,DWORD PTR [edi]
c000dce6:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dce9:	89 04 24             	mov    DWORD PTR [esp],eax
c000dcec:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dcf0:	52                   	push   edx
c000dcf1:	50                   	push   eax
c000dcf2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dcf5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dcf8:	e8 77 88 01 00       	call   c0026574 <__subdf3>
c000dcfd:	59                   	pop    ecx
c000dcfe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd02:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd06:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000dd09:	e8 f5 8e 01 00       	call   c0026c03 <__floatsidf>
c000dd0e:	83 c4 10             	add    esp,0x10
c000dd11:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd15:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd19:	52                   	push   edx
c000dd1a:	50                   	push   eax
c000dd1b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd1f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd23:	e8 78 88 01 00       	call   c00265a0 <__muldf3>
c000dd28:	5d                   	pop    ebp
c000dd29:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd2d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd31:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dd34:	e8 ca 8e 01 00       	call   c0026c03 <__floatsidf>
c000dd39:	83 c4 10             	add    esp,0x10
c000dd3c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd40:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd44:	52                   	push   edx
c000dd45:	50                   	push   eax
c000dd46:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd4e:	e8 31 8b 01 00       	call   c0026884 <__divdf3>
c000dd53:	83 c4 10             	add    esp,0x10
c000dd56:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd5a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd5e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd62:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd66:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd6e:	e8 b0 81 01 00       	call   c0025f23 <__adddf3>
c000dd73:	83 c4 10             	add    esp,0x10
c000dd76:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd7a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd7e:	31 c0                	xor    eax,eax
c000dd80:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dd83:	7e 13                	jle    c000dd98 <zoh_vari_process+0x292>
c000dd85:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dd89:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dd8c:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dd8f:	40                   	inc    eax
c000dd90:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dd93:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dd96:	eb e8                	jmp    c000dd80 <zoh_vari_process+0x27a>
c000dd98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dda0:	68 00 00 f0 3f       	push   0x3ff00000
c000dda5:	6a 00                	push   0x0
c000dda7:	e8 d8 8a 01 00       	call   c0026884 <__divdf3>
c000ddac:	83 c4 10             	add    esp,0x10
c000ddaf:	89 04 24             	mov    DWORD PTR [esp],eax
c000ddb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ddb6:	52                   	push   edx
c000ddb7:	50                   	push   eax
c000ddb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddc0:	e8 5e 81 01 00       	call   c0025f23 <__adddf3>
c000ddc5:	83 c4 10             	add    esp,0x10
c000ddc8:	e9 ff fd ff ff       	jmp    c000dbcc <zoh_vari_process+0xc6>
c000ddcd:	55                   	push   ebp
c000ddce:	55                   	push   ebp
c000ddcf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddd7:	e8 44 92 01 00       	call   c0027020 <lrint>
c000dddc:	83 ec 0c             	sub    esp,0xc
c000dddf:	50                   	push   eax
c000dde0:	e8 1e 8e 01 00       	call   c0026c03 <__floatsidf>
c000dde5:	83 c4 10             	add    esp,0x10
c000dde8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ddec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ddf0:	52                   	push   edx
c000ddf1:	50                   	push   eax
c000ddf2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ddf6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ddfa:	e8 75 87 01 00       	call   c0026574 <__subdf3>
c000ddff:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000de03:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000de07:	83 c4 20             	add    esp,0x20
c000de0a:	6a 00                	push   0x0
c000de0c:	6a 00                	push   0x0
c000de0e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de12:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de16:	e8 54 90 01 00       	call   c0026e6f <__ltdf2>
c000de1b:	83 c4 10             	add    esp,0x10
c000de1e:	85 c0                	test   eax,eax
c000de20:	79 1e                	jns    c000de40 <zoh_vari_process+0x33a>
c000de22:	68 00 00 f0 3f       	push   0x3ff00000
c000de27:	6a 00                	push   0x0
c000de29:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de2d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de31:	e8 ed 80 01 00       	call   c0025f23 <__adddf3>
c000de36:	83 c4 10             	add    esp,0x10
c000de39:	89 04 24             	mov    DWORD PTR [esp],eax
c000de3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de40:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000de43:	83 ec 10             	sub    esp,0x10
c000de46:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de4e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de52:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de56:	e8 19 87 01 00       	call   c0026574 <__subdf3>
c000de5b:	83 c4 18             	add    esp,0x18
c000de5e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de62:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de66:	52                   	push   edx
c000de67:	50                   	push   eax
c000de68:	e8 b3 91 01 00       	call   c0027020 <lrint>
c000de6d:	83 c4 10             	add    esp,0x10
c000de70:	0f af e8             	imul   ebp,eax
c000de73:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000de76:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000de79:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000de7d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000de80:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000de83:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de87:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000de8a:	0f 8d 7a 02 00 00    	jge    c000e10a <zoh_vari_process+0x604>
c000de90:	83 ec 0c             	sub    esp,0xc
c000de93:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de96:	e8 68 8d 01 00       	call   c0026c03 <__floatsidf>
c000de9b:	83 c4 10             	add    esp,0x10
c000de9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dea2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dea6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000deaa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000deae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000deb2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000deb6:	e8 e5 86 01 00       	call   c00265a0 <__muldf3>
c000debb:	59                   	pop    ecx
c000debc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000dec0:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000dec4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dec8:	e8 36 8d 01 00       	call   c0026c03 <__floatsidf>
c000decd:	83 c4 10             	add    esp,0x10
c000ded0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ded4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ded8:	52                   	push   edx
c000ded9:	50                   	push   eax
c000deda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dede:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dee2:	e8 3c 80 01 00       	call   c0025f23 <__adddf3>
c000dee7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000deea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000deee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000def2:	e8 0c 8d 01 00       	call   c0026c03 <__floatsidf>
c000def7:	83 c4 10             	add    esp,0x10
c000defa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000defe:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000df02:	52                   	push   edx
c000df03:	50                   	push   eax
c000df04:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df08:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df0c:	e8 60 8f 01 00       	call   c0026e71 <__ledf2>
c000df11:	83 c4 10             	add    esp,0x10
c000df14:	85 c0                	test   eax,eax
c000df16:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000df1a:	0f 8f ea 01 00 00    	jg     c000e10a <zoh_vari_process+0x604>
c000df20:	85 c9                	test   ecx,ecx
c000df22:	0f 8e ed 00 00 00    	jle    c000e015 <zoh_vari_process+0x50f>
c000df28:	83 ec 10             	sub    esp,0x10
c000df2b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df2e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df31:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000df34:	ff 37                	push   DWORD PTR [edi]
c000df36:	e8 39 86 01 00       	call   c0026574 <__subdf3>
c000df3b:	83 c4 18             	add    esp,0x18
c000df3e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df42:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df46:	52                   	push   edx
c000df47:	50                   	push   eax
c000df48:	e8 b3 90 01 00       	call   c0027000 <fabs>
c000df4d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000df51:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000df55:	83 c4 10             	add    esp,0x10
c000df58:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df5d:	68 23 42 92 0c       	push   0xc924223
c000df62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df6a:	e8 e2 8e 01 00       	call   c0026e51 <__gtdf2>
c000df6f:	83 c4 10             	add    esp,0x10
c000df72:	85 c0                	test   eax,eax
c000df74:	0f 8e 9b 00 00 00    	jle    c000e015 <zoh_vari_process+0x50f>
c000df7a:	8b 07                	mov    eax,DWORD PTR [edi]
c000df7c:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df83:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df87:	52                   	push   edx
c000df88:	50                   	push   eax
c000df89:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df8c:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df8f:	e8 e0 85 01 00       	call   c0026574 <__subdf3>
c000df94:	5d                   	pop    ebp
c000df95:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000df99:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000df9d:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000dfa0:	e8 5e 8c 01 00       	call   c0026c03 <__floatsidf>
c000dfa5:	83 c4 10             	add    esp,0x10
c000dfa8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dfac:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dfb0:	52                   	push   edx
c000dfb1:	50                   	push   eax
c000dfb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfba:	e8 e1 85 01 00       	call   c00265a0 <__muldf3>
c000dfbf:	59                   	pop    ecx
c000dfc0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dfc4:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000dfc8:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dfcb:	e8 33 8c 01 00       	call   c0026c03 <__floatsidf>
c000dfd0:	83 c4 10             	add    esp,0x10
c000dfd3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dfd7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dfdb:	52                   	push   edx
c000dfdc:	50                   	push   eax
c000dfdd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe5:	e8 9a 88 01 00       	call   c0026884 <__divdf3>
c000dfea:	83 c4 10             	add    esp,0x10
c000dfed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dff1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dff5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dffd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e001:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e005:	e8 19 7f 01 00       	call   c0025f23 <__adddf3>
c000e00a:	83 c4 10             	add    esp,0x10
c000e00d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e011:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e015:	31 d2                	xor    edx,edx
c000e017:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e01a:	39 d0                	cmp    eax,edx
c000e01c:	7e 1d                	jle    c000e03b <zoh_vari_process+0x535>
c000e01e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e021:	29 c1                	sub    ecx,eax
c000e023:	89 c8                	mov    eax,ecx
c000e025:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e027:	01 d0                	add    eax,edx
c000e029:	42                   	inc    edx
c000e02a:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e02d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e030:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e033:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e036:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e039:	eb dc                	jmp    c000e017 <zoh_vari_process+0x511>
c000e03b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e03f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e043:	68 00 00 f0 3f       	push   0x3ff00000
c000e048:	6a 00                	push   0x0
c000e04a:	e8 35 88 01 00       	call   c0026884 <__divdf3>
c000e04f:	83 c4 10             	add    esp,0x10
c000e052:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e056:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e05a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e05e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e062:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e066:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e06a:	e8 b4 7e 01 00       	call   c0025f23 <__adddf3>
c000e06f:	5d                   	pop    ebp
c000e070:	59                   	pop    ecx
c000e071:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e075:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e079:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e07d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e081:	e8 9a 8f 01 00       	call   c0027020 <lrint>
c000e086:	83 ec 0c             	sub    esp,0xc
c000e089:	50                   	push   eax
c000e08a:	e8 74 8b 01 00       	call   c0026c03 <__floatsidf>
c000e08f:	83 c4 10             	add    esp,0x10
c000e092:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e096:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e09a:	52                   	push   edx
c000e09b:	50                   	push   eax
c000e09c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a4:	e8 cb 84 01 00       	call   c0026574 <__subdf3>
c000e0a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0b1:	83 c4 20             	add    esp,0x20
c000e0b4:	6a 00                	push   0x0
c000e0b6:	6a 00                	push   0x0
c000e0b8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0bc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0c0:	e8 aa 8d 01 00       	call   c0026e6f <__ltdf2>
c000e0c5:	83 c4 10             	add    esp,0x10
c000e0c8:	85 c0                	test   eax,eax
c000e0ca:	79 1e                	jns    c000e0ea <zoh_vari_process+0x5e4>
c000e0cc:	68 00 00 f0 3f       	push   0x3ff00000
c000e0d1:	6a 00                	push   0x0
c000e0d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0db:	e8 43 7e 01 00       	call   c0025f23 <__adddf3>
c000e0e0:	83 c4 10             	add    esp,0x10
c000e0e3:	89 04 24             	mov    DWORD PTR [esp],eax
c000e0e6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e0ea:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e0ed:	83 ec 10             	sub    esp,0x10
c000e0f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e100:	e8 6f 84 01 00       	call   c0026574 <__subdf3>
c000e105:	e9 51 fd ff ff       	jmp    c000de5b <zoh_vari_process+0x355>
c000e10a:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e10e:	7d 3a                	jge    c000e14a <zoh_vari_process+0x644>
c000e110:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e114:	83 ec 0c             	sub    esp,0xc
c000e117:	29 e8                	sub    eax,ebp
c000e119:	99                   	cdq    
c000e11a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e11d:	50                   	push   eax
c000e11e:	e8 e0 8a 01 00       	call   c0026c03 <__floatsidf>
c000e123:	83 c4 10             	add    esp,0x10
c000e126:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e12a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e12e:	52                   	push   edx
c000e12f:	50                   	push   eax
c000e130:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e134:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e138:	e8 e6 7d 01 00       	call   c0025f23 <__adddf3>
c000e13d:	83 c4 10             	add    esp,0x10
c000e140:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e143:	89 04 24             	mov    DWORD PTR [esp],eax
c000e146:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e14a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e14d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e151:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e154:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e157:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e15a:	85 c0                	test   eax,eax
c000e15c:	7f 25                	jg     c000e183 <zoh_vari_process+0x67d>
c000e15e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e162:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e166:	89 07                	mov    DWORD PTR [edi],eax
c000e168:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e16b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e16e:	99                   	cdq    
c000e16f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e172:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e175:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e178:	99                   	cdq    
c000e179:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e17c:	31 d2                	xor    edx,edx
c000e17e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e181:	eb 1e                	jmp    c000e1a1 <zoh_vari_process+0x69b>
c000e183:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e186:	31 d2                	xor    edx,edx
c000e188:	29 c8                	sub    eax,ecx
c000e18a:	c1 e0 02             	shl    eax,0x2
c000e18d:	39 d1                	cmp    ecx,edx
c000e18f:	7e cd                	jle    c000e15e <zoh_vari_process+0x658>
c000e191:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e193:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e197:	83 c0 04             	add    eax,0x4
c000e19a:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e19e:	42                   	inc    edx
c000e19f:	eb ec                	jmp    c000e18d <zoh_vari_process+0x687>
c000e1a1:	83 c4 3c             	add    esp,0x3c
c000e1a4:	89 d0                	mov    eax,edx
c000e1a6:	5b                   	pop    ebx
c000e1a7:	5e                   	pop    esi
c000e1a8:	5f                   	pop    edi
c000e1a9:	5d                   	pop    ebp
c000e1aa:	c3                   	ret    

c000e1ab <zoh_reset>:
c000e1ab:	83 ec 0c             	sub    esp,0xc
c000e1ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e1b2:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e1b5:	85 c0                	test   eax,eax
c000e1b7:	74 20                	je     c000e1d9 <zoh_reset+0x2e>
c000e1b9:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e1bc:	83 c0 1c             	add    eax,0x1c
c000e1bf:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e1c2:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e1c9:	c1 e2 02             	shl    edx,0x2
c000e1cc:	51                   	push   ecx
c000e1cd:	52                   	push   edx
c000e1ce:	6a 00                	push   0x0
c000e1d0:	50                   	push   eax
c000e1d1:	e8 b5 24 ff ff       	call   c000068b <memset>
c000e1d6:	83 c4 10             	add    esp,0x10
c000e1d9:	83 c4 0c             	add    esp,0xc
c000e1dc:	c3                   	ret    

c000e1dd <zoh_get_name>:
c000e1dd:	31 c0                	xor    eax,eax
c000e1df:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e1e4:	75 05                	jne    c000e1eb <zoh_get_name+0xe>
c000e1e6:	b8 de 88 02 c0       	mov    eax,0xc00288de
c000e1eb:	c3                   	ret    

c000e1ec <zoh_get_description>:
c000e1ec:	31 c0                	xor    eax,eax
c000e1ee:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e1f3:	75 05                	jne    c000e1fa <zoh_get_description+0xe>
c000e1f5:	b8 ef 88 02 c0       	mov    eax,0xc00288ef
c000e1fa:	c3                   	ret    

c000e1fb <zoh_set_converter>:
c000e1fb:	53                   	push   ebx
c000e1fc:	b8 0a 00 00 00       	mov    eax,0xa
c000e201:	83 ec 08             	sub    esp,0x8
c000e204:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e208:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e20d:	75 6e                	jne    c000e27d <zoh_set_converter+0x82>
c000e20f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e212:	85 c0                	test   eax,eax
c000e214:	74 13                	je     c000e229 <zoh_set_converter+0x2e>
c000e216:	83 ec 0c             	sub    esp,0xc
c000e219:	50                   	push   eax
c000e21a:	e8 c5 12 00 00       	call   c000f4e4 <free>
c000e21f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e226:	83 c4 10             	add    esp,0x10
c000e229:	50                   	push   eax
c000e22a:	50                   	push   eax
c000e22b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e22e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e235:	50                   	push   eax
c000e236:	6a 01                	push   0x1
c000e238:	e8 c7 12 00 00       	call   c000f504 <calloc>
c000e23d:	83 c4 10             	add    esp,0x10
c000e240:	89 c2                	mov    edx,eax
c000e242:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e245:	85 d2                	test   edx,edx
c000e247:	b8 01 00 00 00       	mov    eax,0x1
c000e24c:	74 2f                	je     c000e27d <zoh_set_converter+0x82>
c000e24e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e251:	83 ec 0c             	sub    esp,0xc
c000e254:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e257:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e25d:	c7 43 24 06 db 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000db06
c000e264:	c7 43 20 06 db 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000db06
c000e26b:	c7 43 28 ab e1 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e1ab
c000e272:	53                   	push   ebx
c000e273:	e8 33 ff ff ff       	call   c000e1ab <zoh_reset>
c000e278:	83 c4 10             	add    esp,0x10
c000e27b:	31 c0                	xor    eax,eax
c000e27d:	83 c4 08             	add    esp,0x8
c000e280:	5b                   	pop    ebx
c000e281:	c3                   	ret    

c000e282 <CPU::current()>:
c000e282:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c000e287:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e28d:	90                   	nop
c000e28e:	c3                   	ret    

c000e28f <operator new(unsigned long)>:
c000e28f:	83 ec 0c             	sub    esp,0xc
c000e292:	83 ec 0c             	sub    esp,0xc
c000e295:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e299:	e8 36 12 00 00       	call   c000f4d4 <malloc>
c000e29e:	83 c4 10             	add    esp,0x10
c000e2a1:	83 c4 0c             	add    esp,0xc
c000e2a4:	c3                   	ret    
c000e2a5:	90                   	nop

c000e2a6 <Computer::close(int, int, void*)>:
c000e2a6:	57                   	push   edi
c000e2a7:	56                   	push   esi
c000e2a8:	53                   	push   ebx
c000e2a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e2ad:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e2b1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e2b5:	83 ec 0c             	sub    esp,0xc
c000e2b8:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e2be:	e8 11 5a 00 00       	call   c0013cd4 <Device::closeAll()>
c000e2c3:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e2c9:	83 c4 10             	add    esp,0x10
c000e2cc:	8b 10                	mov    edx,DWORD PTR [eax]
c000e2ce:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e2d2:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e2da:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e2de:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2e2:	5b                   	pop    ebx
c000e2e3:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e2e6:	5e                   	pop    esi
c000e2e7:	5f                   	pop    edi
c000e2e8:	ff e0                	jmp    eax

c000e2ea <Computer::Computer()>:
c000e2ea:	83 ec 0c             	sub    esp,0xc
c000e2ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2f1:	83 ec 08             	sub    esp,0x8
c000e2f4:	68 26 89 02 c0       	push   0xc0028926
c000e2f9:	50                   	push   eax
c000e2fa:	e8 4f 5a 00 00       	call   c0013d4e <Device::Device(char const*)>
c000e2ff:	83 c4 10             	add    esp,0x10
c000e302:	ba f0 8a 02 c0       	mov    edx,0xc0028af0
c000e307:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e30b:	89 10                	mov    DWORD PTR [eax],edx
c000e30d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e311:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e31b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e31f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e329:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e32d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e333:	83 ca 04             	or     edx,0x4
c000e336:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e33c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e340:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e346:	0f b6 d0             	movzx  edx,al
c000e349:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e34d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e354:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e358:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e35e:	0f b6 d0             	movzx  edx,al
c000e361:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e365:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e36a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e36e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e374:	8d 50 01             	lea    edx,[eax+0x1]
c000e377:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e37b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e381:	0f b6 d0             	movzx  edx,al
c000e384:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e388:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e38c:	83 e1 3f             	and    ecx,0x3f
c000e38f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e393:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e397:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e39d:	0f b6 d0             	movzx  edx,al
c000e3a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3a4:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e3ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3af:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e3b5:	0f b6 d0             	movzx  edx,al
c000e3b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3bc:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e3c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3c5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e3cb:	8d 50 01             	lea    edx,[eax+0x1]
c000e3ce:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e3d2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e3d8:	0f b6 d0             	movzx  edx,al
c000e3db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3df:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e3e3:	83 e1 3f             	and    ecx,0x3f
c000e3e6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e3ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3ee:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e3f4:	0f b6 d0             	movzx  edx,al
c000e3f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3fb:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e402:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e406:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e40c:	0f b6 d0             	movzx  edx,al
c000e40f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e413:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e41c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e422:	8d 50 01             	lea    edx,[eax+0x1]
c000e425:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e429:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e42f:	0f b6 d0             	movzx  edx,al
c000e432:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e436:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e43a:	83 e1 3f             	and    ecx,0x3f
c000e43d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e441:	90                   	nop
c000e442:	83 c4 0c             	add    esp,0xc
c000e445:	c3                   	ret    

c000e446 <Computer::setBootMessage(char const*)>:
c000e446:	c3                   	ret    
c000e447:	90                   	nop

c000e448 <Computer::start()>:
c000e448:	56                   	push   esi
c000e449:	53                   	push   ebx
c000e44a:	83 ec 10             	sub    esp,0x10
c000e44d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e451:	fb                   	sti    
c000e452:	68 3f 07 00 00       	push   0x73f
c000e457:	e8 78 10 00 00       	call   c000f4d4 <malloc>
c000e45c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e463:	89 c6                	mov    esi,eax
c000e465:	ff 35 94 de 02 c0    	push   DWORD PTR ds:0xc002de94
c000e46b:	68 2f 89 02 c0       	push   0xc002892f
c000e470:	6a 01                	push   0x1
c000e472:	50                   	push   eax
c000e473:	e8 d4 e6 00 00       	call   c001cb4c <Process::Process(bool, char const*, Process*, char**)>
c000e478:	83 c4 20             	add    esp,0x20
c000e47b:	68 ff 00 00 00       	push   0xff
c000e480:	6a 00                	push   0x0
c000e482:	68 69 ee 00 c0       	push   0xc000ee69
c000e487:	56                   	push   esi
c000e488:	e8 bd e9 00 00       	call   c001ce4a <Process::createThread(void (*)(void*), void*, int)>
c000e48d:	6a 7a                	push   0x7a
c000e48f:	6a 00                	push   0x0
c000e491:	68 a8 d6 01 c0       	push   0xc001d6a8
c000e496:	ff 35 94 de 02 c0    	push   DWORD PTR ds:0xc002de94
c000e49c:	e8 a9 e9 00 00       	call   c001ce4a <Process::createThread(void (*)(void*), void*, int)>
c000e4a1:	83 c4 20             	add    esp,0x20
c000e4a4:	a3 48 de 02 c0       	mov    ds:0xc002de48,eax
c000e4a9:	e8 7b f5 00 00       	call   c001da29 <Vm::initialise8086()>
c000e4ae:	c6 05 4d c9 02 c0 01 	mov    BYTE PTR ds:0xc002c94d,0x1
c000e4b5:	e8 10 46 00 00       	call   c0012aca <initVFS()>
c000e4ba:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e4c0:	8b 10                	mov    edx,DWORD PTR [eax]
c000e4c2:	6a 00                	push   0x0
c000e4c4:	6a 00                	push   0x0
c000e4c6:	6a 00                	push   0x0
c000e4c8:	50                   	push   eax
c000e4c9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e4cc:	e8 7f b2 00 00       	call   c0019750 <Krnl::loadSystemEnv()>
c000e4d1:	e8 1e d0 00 00       	call   c001b4f4 <setupSystemCalls()>
c000e4d6:	e8 01 51 00 00       	call   c00135dc <loadClockSettings()>
c000e4db:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e4de:	e8 c5 57 00 00       	call   c0013ca8 <Device::loadDriversForAll()>
c000e4e3:	58                   	pop    eax
c000e4e4:	8b 1d 48 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c948
c000e4ea:	5a                   	pop    edx
c000e4eb:	6a 01                	push   0x1
c000e4ed:	68 3c 89 02 c0       	push   0xc002893c
c000e4f2:	e8 ad e1 00 00       	call   c001c6a4 <Thr::loadDLL(char const*, bool)>
c000e4f7:	59                   	pop    ecx
c000e4f8:	5e                   	pop    esi
c000e4f9:	53                   	push   ebx
c000e4fa:	50                   	push   eax
c000e4fb:	e8 b3 e3 00 00       	call   c001c8b3 <Thr::executeDLL(unsigned long, void*)>
c000e500:	c7 04 24 b8 9b 02 c0 	mov    DWORD PTR [esp],0xc0029bb8
c000e507:	e8 63 42 00 00       	call   c001276f <Dbg::kprintf(char const*, ...)>
c000e50c:	83 c4 10             	add    esp,0x10
c000e50f:	83 ec 0c             	sub    esp,0xc
c000e512:	6a 02                	push   0x2
c000e514:	e8 95 ec 00 00       	call   c001d1ae <blockTask(TaskState)>
c000e519:	83 c4 10             	add    esp,0x10
c000e51c:	eb f1                	jmp    c000e50f <Computer::start()+0xc7>

c000e51e <firstTask()>:
c000e51e:	83 ec 18             	sub    esp,0x18
c000e521:	ff 35 48 c9 02 c0    	push   DWORD PTR ds:0xc002c948
c000e527:	e8 1c ff ff ff       	call   c000e448 <Computer::start()>

c000e52c <Computer::detectFeatures()>:
c000e52c:	55                   	push   ebp
c000e52d:	57                   	push   edi
c000e52e:	56                   	push   esi
c000e52f:	53                   	push   ebx
c000e530:	83 ec 1c             	sub    esp,0x1c
c000e533:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e537:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e541:	e8 53 1d ff ff       	call   c0000299 <detectCPUID>
c000e546:	85 c0                	test   eax,eax
c000e548:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e54e:	0f 95 c2             	setne  dl
c000e551:	83 e0 fd             	and    eax,0xfffffffd
c000e554:	d1 e2                	shl    edx,1
c000e556:	09 d0                	or     eax,edx
c000e558:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e55e:	a8 02                	test   al,0x2
c000e560:	75 46                	jne    c000e5a8 <Computer::detectFeatures()+0x7c>
c000e562:	f6 05 61 c9 02 c0 04 	test   BYTE PTR ds:0xc002c961,0x4
c000e569:	74 07                	je     c000e572 <Computer::detectFeatures()+0x46>
c000e56b:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e572:	e8 ef 6a 01 00       	call   c0025066 <x87Detect>
c000e577:	83 e0 01             	and    eax,0x1
c000e57a:	c1 e0 04             	shl    eax,0x4
c000e57d:	88 c2                	mov    dl,al
c000e57f:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e585:	83 e0 ef             	and    eax,0xffffffef
c000e588:	09 d0                	or     eax,edx
c000e58a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e590:	a8 10                	test   al,0x10
c000e592:	0f 85 2a 01 00 00    	jne    c000e6c2 <Computer::detectFeatures()+0x196>
c000e598:	84 c0                	test   al,al
c000e59a:	0f 88 45 01 00 00    	js     c000e6e5 <Computer::detectFeatures()+0x1b9>
c000e5a0:	83 c4 1c             	add    esp,0x1c
c000e5a3:	5b                   	pop    ebx
c000e5a4:	5e                   	pop    esi
c000e5a5:	5f                   	pop    edi
c000e5a6:	5d                   	pop    ebp
c000e5a7:	c3                   	ret    
c000e5a8:	83 ec 0c             	sub    esp,0xc
c000e5ab:	6a 20                	push   0x20
c000e5ad:	e8 60 9b 00 00       	call   c0018112 <CPU::cpuidCheckEDX(unsigned int)>
c000e5b2:	83 e0 01             	and    eax,0x1
c000e5b5:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e5bc:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e5c2:	83 e0 f7             	and    eax,0xfffffff7
c000e5c5:	09 d0                	or     eax,edx
c000e5c7:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e5cd:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e5d4:	e8 39 9b 00 00       	call   c0018112 <CPU::cpuidCheckEDX(unsigned int)>
c000e5d9:	83 e0 01             	and    eax,0x1
c000e5dc:	88 c2                	mov    dl,al
c000e5de:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e5e4:	83 e0 fe             	and    eax,0xfffffffe
c000e5e7:	09 d0                	or     eax,edx
c000e5e9:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e5ef:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e5f6:	e8 17 9b 00 00       	call   c0018112 <CPU::cpuidCheckEDX(unsigned int)>
c000e5fb:	c1 e0 07             	shl    eax,0x7
c000e5fe:	88 c2                	mov    dl,al
c000e600:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e606:	83 e0 7f             	and    eax,0x7f
c000e609:	09 d0                	or     eax,edx
c000e60b:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e611:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e618:	e8 f5 9a 00 00       	call   c0018112 <CPU::cpuidCheckEDX(unsigned int)>
c000e61d:	83 c4 10             	add    esp,0x10
c000e620:	83 e0 01             	and    eax,0x1
c000e623:	c1 e0 05             	shl    eax,0x5
c000e626:	88 c2                	mov    dl,al
c000e628:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e62e:	83 e0 df             	and    eax,0xffffffdf
c000e631:	09 d0                	or     eax,edx
c000e633:	f7 05 60 c9 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002c960,0x401
c000e63d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e643:	0f 84 c2 00 00 00    	je     c000e70b <Computer::detectFeatures()+0x1df>
c000e649:	83 e0 fe             	and    eax,0xfffffffe
c000e64c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e652:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e658:	88 c2                	mov    dl,al
c000e65a:	83 e2 09             	and    edx,0x9
c000e65d:	fe ca                	dec    dl
c000e65f:	75 09                	jne    c000e66a <Computer::detectFeatures()+0x13e>
c000e661:	83 e0 fe             	and    eax,0xfffffffe
c000e664:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e66a:	83 ec 0c             	sub    esp,0xc
c000e66d:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e671:	50                   	push   eax
c000e672:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e676:	55                   	push   ebp
c000e677:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e67b:	57                   	push   edi
c000e67c:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e680:	56                   	push   esi
c000e681:	68 00 00 00 80       	push   0x80000000
c000e686:	e8 03 9a 00 00       	call   c001808e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e68b:	83 c4 20             	add    esp,0x20
c000e68e:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000e695:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e699:	0f 86 c3 fe ff ff    	jbe    c000e562 <Computer::detectFeatures()+0x36>
c000e69f:	83 ec 0c             	sub    esp,0xc
c000e6a2:	50                   	push   eax
c000e6a3:	55                   	push   ebp
c000e6a4:	57                   	push   edi
c000e6a5:	56                   	push   esi
c000e6a6:	68 01 00 00 80       	push   0x80000001
c000e6ab:	e8 de 99 00 00       	call   c001808e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e6b0:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000e6ba:	83 c4 20             	add    esp,0x20
c000e6bd:	e9 a0 fe ff ff       	jmp    c000e562 <Computer::detectFeatures()+0x36>
c000e6c2:	e8 59 69 01 00       	call   c0025020 <absolutelyNoChanceInHell>
c000e6c7:	88 c2                	mov    dl,al
c000e6c9:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e6cf:	c1 e2 07             	shl    edx,0x7
c000e6d2:	83 e0 7f             	and    eax,0x7f
c000e6d5:	09 d0                	or     eax,edx
c000e6d7:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e6dd:	84 c0                	test   al,al
c000e6df:	0f 89 bb fe ff ff    	jns    c000e5a0 <Computer::detectFeatures()+0x74>
c000e6e5:	e8 16 69 01 00       	call   c0025000 <avxDetect>
c000e6ea:	83 e0 01             	and    eax,0x1
c000e6ed:	c1 e0 05             	shl    eax,0x5
c000e6f0:	88 c2                	mov    dl,al
c000e6f2:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e6f8:	83 e0 df             	and    eax,0xffffffdf
c000e6fb:	09 d0                	or     eax,edx
c000e6fd:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e703:	83 c4 1c             	add    esp,0x1c
c000e706:	5b                   	pop    ebx
c000e707:	5e                   	pop    esi
c000e708:	5f                   	pop    edi
c000e709:	5d                   	pop    ebp
c000e70a:	c3                   	ret    
c000e70b:	83 ec 0c             	sub    esp,0xc
c000e70e:	68 00 02 00 00       	push   0x200
c000e713:	e8 fa 99 00 00       	call   c0018112 <CPU::cpuidCheckEDX(unsigned int)>
c000e718:	83 c4 10             	add    esp,0x10
c000e71b:	83 e0 01             	and    eax,0x1
c000e71e:	88 c2                	mov    dl,al
c000e720:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e726:	83 e0 fe             	and    eax,0xfffffffe
c000e729:	09 d0                	or     eax,edx
c000e72b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e731:	e9 1c ff ff ff       	jmp    c000e652 <Computer::detectFeatures()+0x126>

c000e736 <Computer::displayFeatures()>:
c000e736:	53                   	push   ebx
c000e737:	83 ec 14             	sub    esp,0x14
c000e73a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e73e:	68 5f 89 02 c0       	push   0xc002895f
c000e743:	e8 27 40 00 00       	call   c001276f <Dbg::kprintf(char const*, ...)>
c000e748:	83 c4 10             	add    esp,0x10
c000e74b:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000e752:	0f 85 73 02 00 00    	jne    c000e9cb <Computer::displayFeatures()+0x295>
c000e758:	b8 5c 89 02 c0       	mov    eax,0xc002895c
c000e75d:	83 ec 08             	sub    esp,0x8
c000e760:	50                   	push   eax
c000e761:	68 72 89 02 c0       	push   0xc0028972
c000e766:	e8 04 40 00 00       	call   c001276f <Dbg::kprintf(char const*, ...)>
c000e76b:	83 c4 10             	add    esp,0x10
c000e76e:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000e775:	0f 85 8c 02 00 00    	jne    c000ea07 <Computer::displayFeatures()+0x2d1>
c000e77b:	b8 5c 89 02 c0       	mov    eax,0xc002895c
c000e780:	83 ec 08             	sub    esp,0x8
c000e783:	50                   	push   eax
c000e784:	68 83 89 02 c0       	push   0xc0028983
c000e789:	e8 e1 3f 00 00       	call   c001276f <Dbg::kprintf(char const*, ...)>
c000e78e:	83 c4 10             	add    esp,0x10
c000e791:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000e798:	0f 85 5f 02 00 00    	jne    c000e9fd <Computer::displayFeatures()+0x2c7>
c000e79e:	b8 5c 89 02 c0       	mov    eax,0xc002895c
c000e7a3:	83 ec 08             	sub    esp,0x8
c000e7a6:	50                   	push   eax
c000e7a7:	68 94 89 02 c0       	push   0xc0028994
c000e7ac:	e8 be 3f 00 00       	call   c001276f <Dbg::kprintf(char const*, ...)>
c000e7b1:	83 c4 10             	add    esp,0x10
c000e7b4:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000e7bb:	0f 85 32 02 00 00    	jne    c000e9f3 <Computer::displayFeatures()+0x2bd>
c000e7c1:	b8 5c 89 02 c0       	mov    eax,0xc002895c
c000e7c6:	83 ec 08             	sub    esp,0x8
c000e7c9:	50                   	push   eax
c000e7ca:	68 a5 89 02 c0       	push   0xc00289a5
c000e7cf:	e8 9b 3f 00 00       	call   c001276f <Dbg::kprintf(char const*, ...)>
c000e7d4:	83 c4 10             	add    esp,0x10
c000e7d7:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000e7de:	0f 85 05 02 00 00    	jne    c000e9e9 <Computer::displayFeatures()+0x2b3>
c000e7e4:	b8 5c 89 02 c0       	mov    eax,0xc002895c
c000e7e9:	83 ec 08             	sub    esp,0x8
c000e7ec:	50                   	push   eax
c000e7ed:	68 b6 89 02 c0       	push   0xc00289b6
c000e7f2:	e8 78 3f 00 00       	call   c001276f <Dbg::kprintf(char const*, ...)>
c000e7f7:	83 c4 10             	add    esp,0x10
c000e7fa:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000e801:	0f 85 d8 01 00 00    	jne    c000e9df <Computer::displayFeatures()+0x2a9>
c000e807:	b8 5c 89 02 c0       	mov    eax,0xc002895c
c000e80c:	83 ec 08             	sub    esp,0x8
c000e80f:	50                   	push   eax
c000e810:	68 c7 89 02 c0       	push   0xc00289c7
c000e815:	e8 55 3f 00 00       	call   c001276f <Dbg::kprintf(char const*, ...)>
c000e81a:	83 c4 10             	add    esp,0x10
c000e81d:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000e824:	0f 85 ab 01 00 00    	jne    c000e9d5 <Computer::displayFeatures()+0x29f>
c000e82a:	b8 5c 89 02 c0       	mov    eax,0xc002895c
c000e82f:	83 ec 08             	sub    esp,0x8
c000e832:	50                   	push   eax
c000e833:	68 d8 89 02 c0       	push   0xc00289d8
c000e838:	e8 32 3f 00 00       	call   c001276f <Dbg::kprintf(char const*, ...)>
c000e83d:	83 c4 10             	add    esp,0x10
c000e840:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000e847:	0f 88 1b 02 00 00    	js     c000ea68 <Computer::displayFeatures()+0x332>
c000e84d:	b8 5c 89 02 c0       	mov    eax,0xc002895c
c000e852:	83 ec 08             	sub    esp,0x8
c000e855:	50                   	push   eax
c000e856:	68 e9 89 02 c0       	push   0xc00289e9
c000e85b:	e8 0f 3f 00 00       	call   c001276f <Dbg::kprintf(char const*, ...)>
c000e860:	83 c4 10             	add    esp,0x10
c000e863:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000e86a:	0f 85 a1 01 00 00    	jne    c000ea11 <Computer::displayFeatures()+0x2db>
c000e870:	b8 5c 89 02 c0       	mov    eax,0xc002895c
c000e875:	83 ec 08             	sub    esp,0x8
c000e878:	50                   	push   eax
c000e879:	68 fa 89 02 c0       	push   0xc00289fa
c000e87e:	e8 ec 3e 00 00       	call   c001276f <Dbg::kprintf(char const*, ...)>
c000e883:	83 c4 10             	add    esp,0x10
c000e886:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000e88d:	0f 85 cb 01 00 00    	jne    c000ea5e <Computer::displayFeatures()+0x328>
c000e893:	b8 5c 89 02 c0       	mov    eax,0xc002895c
c000e898:	83 ec 08             	sub    esp,0x8
c000e89b:	50                   	push   eax
c000e89c:	68 0b 8a 02 c0       	push   0xc0028a0b
c000e8a1:	e8 c9 3e 00 00       	call   c001276f <Dbg::kprintf(char const*, ...)>
c000e8a6:	83 c4 10             	add    esp,0x10
c000e8a9:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000e8b0:	0f 85 9e 01 00 00    	jne    c000ea54 <Computer::displayFeatures()+0x31e>
c000e8b6:	b8 5c 89 02 c0       	mov    eax,0xc002895c
c000e8bb:	83 ec 08             	sub    esp,0x8
c000e8be:	50                   	push   eax
c000e8bf:	68 1c 8a 02 c0       	push   0xc0028a1c
c000e8c4:	e8 a6 3e 00 00       	call   c001276f <Dbg::kprintf(char const*, ...)>
c000e8c9:	83 c4 10             	add    esp,0x10
c000e8cc:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000e8d3:	0f 85 71 01 00 00    	jne    c000ea4a <Computer::displayFeatures()+0x314>
c000e8d9:	b8 5c 89 02 c0       	mov    eax,0xc002895c
c000e8de:	83 ec 08             	sub    esp,0x8
c000e8e1:	50                   	push   eax
c000e8e2:	68 2d 8a 02 c0       	push   0xc0028a2d
c000e8e7:	e8 83 3e 00 00       	call   c001276f <Dbg::kprintf(char const*, ...)>
c000e8ec:	83 c4 10             	add    esp,0x10
c000e8ef:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000e8f6:	0f 85 44 01 00 00    	jne    c000ea40 <Computer::displayFeatures()+0x30a>
c000e8fc:	b8 5c 89 02 c0       	mov    eax,0xc002895c
c000e901:	83 ec 08             	sub    esp,0x8
c000e904:	50                   	push   eax
c000e905:	68 3e 8a 02 c0       	push   0xc0028a3e
c000e90a:	e8 60 3e 00 00       	call   c001276f <Dbg::kprintf(char const*, ...)>
c000e90f:	83 c4 10             	add    esp,0x10
c000e912:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000e919:	0f 85 17 01 00 00    	jne    c000ea36 <Computer::displayFeatures()+0x300>
c000e91f:	b8 5c 89 02 c0       	mov    eax,0xc002895c
c000e924:	83 ec 08             	sub    esp,0x8
c000e927:	50                   	push   eax
c000e928:	68 4f 8a 02 c0       	push   0xc0028a4f
c000e92d:	e8 3d 3e 00 00       	call   c001276f <Dbg::kprintf(char const*, ...)>
c000e932:	83 c4 10             	add    esp,0x10
c000e935:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000e93c:	0f 85 ea 00 00 00    	jne    c000ea2c <Computer::displayFeatures()+0x2f6>
c000e942:	b8 5c 89 02 c0       	mov    eax,0xc002895c
c000e947:	83 ec 08             	sub    esp,0x8
c000e94a:	50                   	push   eax
c000e94b:	68 60 8a 02 c0       	push   0xc0028a60
c000e950:	e8 1a 3e 00 00       	call   c001276f <Dbg::kprintf(char const*, ...)>
c000e955:	83 c4 10             	add    esp,0x10
c000e958:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000e95f:	0f 88 0d 01 00 00    	js     c000ea72 <Computer::displayFeatures()+0x33c>
c000e965:	b8 5c 89 02 c0       	mov    eax,0xc002895c
c000e96a:	83 ec 08             	sub    esp,0x8
c000e96d:	50                   	push   eax
c000e96e:	68 71 8a 02 c0       	push   0xc0028a71
c000e973:	e8 f7 3d 00 00       	call   c001276f <Dbg::kprintf(char const*, ...)>
c000e978:	83 c4 10             	add    esp,0x10
c000e97b:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000e982:	0f 85 9a 00 00 00    	jne    c000ea22 <Computer::displayFeatures()+0x2ec>
c000e988:	b8 5c 89 02 c0       	mov    eax,0xc002895c
c000e98d:	83 ec 08             	sub    esp,0x8
c000e990:	50                   	push   eax
c000e991:	68 82 8a 02 c0       	push   0xc0028a82
c000e996:	e8 d4 3d 00 00       	call   c001276f <Dbg::kprintf(char const*, ...)>
c000e99b:	83 c4 10             	add    esp,0x10
c000e99e:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000e9a5:	75 74                	jne    c000ea1b <Computer::displayFeatures()+0x2e5>
c000e9a7:	b8 5c 89 02 c0       	mov    eax,0xc002895c
c000e9ac:	83 ec 08             	sub    esp,0x8
c000e9af:	50                   	push   eax
c000e9b0:	68 93 8a 02 c0       	push   0xc0028a93
c000e9b5:	e8 b5 3d 00 00       	call   c001276f <Dbg::kprintf(char const*, ...)>
c000e9ba:	c7 44 24 20 5b a2 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a25b
c000e9c2:	83 c4 18             	add    esp,0x18
c000e9c5:	5b                   	pop    ebx
c000e9c6:	e9 a4 3d 00 00       	jmp    c001276f <Dbg::kprintf(char const*, ...)>
c000e9cb:	b8 58 89 02 c0       	mov    eax,0xc0028958
c000e9d0:	e9 88 fd ff ff       	jmp    c000e75d <Computer::displayFeatures()+0x27>
c000e9d5:	b8 58 89 02 c0       	mov    eax,0xc0028958
c000e9da:	e9 50 fe ff ff       	jmp    c000e82f <Computer::displayFeatures()+0xf9>
c000e9df:	b8 58 89 02 c0       	mov    eax,0xc0028958
c000e9e4:	e9 23 fe ff ff       	jmp    c000e80c <Computer::displayFeatures()+0xd6>
c000e9e9:	b8 58 89 02 c0       	mov    eax,0xc0028958
c000e9ee:	e9 f6 fd ff ff       	jmp    c000e7e9 <Computer::displayFeatures()+0xb3>
c000e9f3:	b8 58 89 02 c0       	mov    eax,0xc0028958
c000e9f8:	e9 c9 fd ff ff       	jmp    c000e7c6 <Computer::displayFeatures()+0x90>
c000e9fd:	b8 58 89 02 c0       	mov    eax,0xc0028958
c000ea02:	e9 9c fd ff ff       	jmp    c000e7a3 <Computer::displayFeatures()+0x6d>
c000ea07:	b8 58 89 02 c0       	mov    eax,0xc0028958
c000ea0c:	e9 6f fd ff ff       	jmp    c000e780 <Computer::displayFeatures()+0x4a>
c000ea11:	b8 58 89 02 c0       	mov    eax,0xc0028958
c000ea16:	e9 5a fe ff ff       	jmp    c000e875 <Computer::displayFeatures()+0x13f>
c000ea1b:	b8 58 89 02 c0       	mov    eax,0xc0028958
c000ea20:	eb 8a                	jmp    c000e9ac <Computer::displayFeatures()+0x276>
c000ea22:	b8 58 89 02 c0       	mov    eax,0xc0028958
c000ea27:	e9 61 ff ff ff       	jmp    c000e98d <Computer::displayFeatures()+0x257>
c000ea2c:	b8 58 89 02 c0       	mov    eax,0xc0028958
c000ea31:	e9 11 ff ff ff       	jmp    c000e947 <Computer::displayFeatures()+0x211>
c000ea36:	b8 58 89 02 c0       	mov    eax,0xc0028958
c000ea3b:	e9 e4 fe ff ff       	jmp    c000e924 <Computer::displayFeatures()+0x1ee>
c000ea40:	b8 58 89 02 c0       	mov    eax,0xc0028958
c000ea45:	e9 b7 fe ff ff       	jmp    c000e901 <Computer::displayFeatures()+0x1cb>
c000ea4a:	b8 58 89 02 c0       	mov    eax,0xc0028958
c000ea4f:	e9 8a fe ff ff       	jmp    c000e8de <Computer::displayFeatures()+0x1a8>
c000ea54:	b8 58 89 02 c0       	mov    eax,0xc0028958
c000ea59:	e9 5d fe ff ff       	jmp    c000e8bb <Computer::displayFeatures()+0x185>
c000ea5e:	b8 58 89 02 c0       	mov    eax,0xc0028958
c000ea63:	e9 30 fe ff ff       	jmp    c000e898 <Computer::displayFeatures()+0x162>
c000ea68:	b8 58 89 02 c0       	mov    eax,0xc0028958
c000ea6d:	e9 e0 fd ff ff       	jmp    c000e852 <Computer::displayFeatures()+0x11c>
c000ea72:	b8 58 89 02 c0       	mov    eax,0xc0028958
c000ea77:	e9 ee fe ff ff       	jmp    c000e96a <Computer::displayFeatures()+0x234>

c000ea7c <Computer::rdmsr(unsigned int)>:
c000ea7c:	83 ec 0c             	sub    esp,0xc
c000ea7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea83:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ea8a:	74 0a                	je     c000ea96 <Computer::rdmsr(unsigned int)+0x1a>
c000ea8c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ea90:	0f 32                	rdmsr  
c000ea92:	83 c4 0c             	add    esp,0xc
c000ea95:	c3                   	ret    
c000ea96:	83 ec 0c             	sub    esp,0xc
c000ea99:	68 a4 8a 02 c0       	push   0xc0028aa4
c000ea9e:	e8 e6 ad 00 00       	call   c0019889 <Krnl::panic(char const*)>
c000eaa3:	83 c4 10             	add    esp,0x10
c000eaa6:	eb e4                	jmp    c000ea8c <Computer::rdmsr(unsigned int)+0x10>

c000eaa8 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000eaa8:	57                   	push   edi
c000eaa9:	56                   	push   esi
c000eaaa:	52                   	push   edx
c000eaab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eaaf:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000eab3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000eab7:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eabe:	74 0e                	je     c000eace <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000eac0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eac4:	89 f0                	mov    eax,esi
c000eac6:	89 fa                	mov    edx,edi
c000eac8:	0f 30                	wrmsr  
c000eaca:	58                   	pop    eax
c000eacb:	5e                   	pop    esi
c000eacc:	5f                   	pop    edi
c000eacd:	c3                   	ret    
c000eace:	83 ec 0c             	sub    esp,0xc
c000ead1:	68 aa 8a 02 c0       	push   0xc0028aaa
c000ead6:	e8 ae ad 00 00       	call   c0019889 <Krnl::panic(char const*)>
c000eadb:	83 c4 10             	add    esp,0x10
c000eade:	eb e0                	jmp    c000eac0 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000eae0 <Computer::nmiEnabled()>:
c000eae0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eae4:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000eaea:	c3                   	ret    
c000eaeb:	90                   	nop

c000eaec <Computer::readCMOS(unsigned char)>:
c000eaec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eaf0:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eaf7:	19 c0                	sbb    eax,eax
c000eaf9:	83 e0 80             	and    eax,0xffffff80
c000eafc:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000eb00:	e6 70                	out    0x70,al
c000eb02:	e4 71                	in     al,0x71
c000eb04:	c3                   	ret    
c000eb05:	90                   	nop

c000eb06 <Computer::enableNMI(bool)>:
c000eb06:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eb0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eb0e:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000eb14:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000eb1c:	eb ce                	jmp    c000eaec <Computer::readCMOS(unsigned char)>

c000eb1e <Computer::open(int, int, void*)>:
c000eb1e:	56                   	push   esi
c000eb1f:	53                   	push   ebx
c000eb20:	83 ec 10             	sub    esp,0x10
c000eb23:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eb27:	f6 05 60 c9 02 c0 04 	test   BYTE PTR ds:0xc002c960,0x4
c000eb2e:	68 68 22 00 00       	push   0x2268
c000eb33:	0f 94 05 84 b8 02 c0 	sete   BYTE PTR ds:0xc002b884
c000eb3a:	e8 95 09 00 00       	call   c000f4d4 <malloc>
c000eb3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000eb42:	89 c6                	mov    esi,eax
c000eb44:	e8 d5 8b 00 00       	call   c001771e <ACPI::ACPI()>
c000eb49:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eb4f:	58                   	pop    eax
c000eb50:	5a                   	pop    edx
c000eb51:	56                   	push   esi
c000eb52:	53                   	push   ebx
c000eb53:	e8 06 50 00 00       	call   c0013b5e <Device::addChild(Device*)>
c000eb58:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eb5b:	e8 cc f9 ff ff       	call   c000e52c <Computer::detectFeatures()>
c000eb60:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eb63:	e8 ce fb ff ff       	call   c000e736 <Computer::displayFeatures()>
c000eb68:	59                   	pop    ecx
c000eb69:	5e                   	pop    esi
c000eb6a:	6a 01                	push   0x1
c000eb6c:	53                   	push   ebx
c000eb6d:	e8 94 ff ff ff       	call   c000eb06 <Computer::enableNMI(bool)>
c000eb72:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eb79:	e8 56 09 00 00       	call   c000f4d4 <malloc>
c000eb7e:	89 04 24             	mov    DWORD PTR [esp],eax
c000eb81:	89 c6                	mov    esi,eax
c000eb83:	e8 42 96 00 00       	call   c00181ca <CPU::CPU()>
c000eb88:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000eb8e:	58                   	pop    eax
c000eb8f:	5a                   	pop    edx
c000eb90:	56                   	push   esi
c000eb91:	53                   	push   ebx
c000eb92:	e8 c7 4f 00 00       	call   c0013b5e <Device::addChild(Device*)>
c000eb97:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000eb9d:	8b 10                	mov    edx,DWORD PTR [eax]
c000eb9f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000eba3:	6a 00                	push   0x0
c000eba5:	6a 00                	push   0x0
c000eba7:	50                   	push   eax
c000eba8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ebab:	83 c4 20             	add    esp,0x20
c000ebae:	e8 1d 55 00 00       	call   c00140d0 <setupFPU()>
c000ebb3:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ebb9:	85 c0                	test   eax,eax
c000ebbb:	74 1f                	je     c000ebdc <Computer::open(int, int, void*)+0xbe>
c000ebbd:	83 ec 08             	sub    esp,0x8
c000ebc0:	50                   	push   eax
c000ebc1:	53                   	push   ebx
c000ebc2:	e8 97 4f 00 00       	call   c0013b5e <Device::addChild(Device*)>
c000ebc7:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ebcd:	8b 10                	mov    edx,DWORD PTR [eax]
c000ebcf:	6a 00                	push   0x0
c000ebd1:	6a 00                	push   0x0
c000ebd3:	6a 00                	push   0x0
c000ebd5:	50                   	push   eax
c000ebd6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ebd9:	83 c4 20             	add    esp,0x20
c000ebdc:	83 ec 0c             	sub    esp,0xc
c000ebdf:	68 1e e5 00 c0       	push   0xc000e51e
c000ebe4:	e8 61 e3 00 00       	call   c001cf4a <setupMultitasking(void (*)())>
c000ebe9:	83 c4 14             	add    esp,0x14
c000ebec:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ebf1:	5b                   	pop    ebx
c000ebf2:	5e                   	pop    esi
c000ebf3:	c3                   	ret    

c000ebf4 <Computer::disableNMI()>:
c000ebf4:	6a 00                	push   0x0
c000ebf6:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ebfa:	e8 07 ff ff ff       	call   c000eb06 <Computer::enableNMI(bool)>
c000ebff:	58                   	pop    eax
c000ec00:	5a                   	pop    edx
c000ec01:	c3                   	ret    

c000ec02 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ec02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec06:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ec0d:	19 c0                	sbb    eax,eax
c000ec0f:	83 e0 80             	and    eax,0xffffff80
c000ec12:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ec16:	e6 70                	out    0x70,al
c000ec18:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ec1c:	e6 71                	out    0x71,al
c000ec1e:	c3                   	ret    
c000ec1f:	90                   	nop

c000ec20 <Computer::handleNMI()>:
c000ec20:	56                   	push   esi
c000ec21:	53                   	push   ebx
c000ec22:	83 ec 10             	sub    esp,0x10
c000ec25:	e4 92                	in     al,0x92
c000ec27:	89 c6                	mov    esi,eax
c000ec29:	e4 61                	in     al,0x61
c000ec2b:	68 b0 8a 02 c0       	push   0xc0028ab0
c000ec30:	88 c3                	mov    bl,al
c000ec32:	e8 38 3b 00 00       	call   c001276f <Dbg::kprintf(char const*, ...)>
c000ec37:	83 c4 10             	add    esp,0x10
c000ec3a:	83 e6 10             	and    esi,0x10
c000ec3d:	75 0d                	jne    c000ec4c <Computer::handleNMI()+0x2c>
c000ec3f:	f6 c3 40             	test   bl,0x40
c000ec42:	75 1d                	jne    c000ec61 <Computer::handleNMI()+0x41>
c000ec44:	84 db                	test   bl,bl
c000ec46:	78 2d                	js     c000ec75 <Computer::handleNMI()+0x55>
c000ec48:	58                   	pop    eax
c000ec49:	5b                   	pop    ebx
c000ec4a:	5e                   	pop    esi
c000ec4b:	c3                   	ret    
c000ec4c:	83 ec 0c             	sub    esp,0xc
c000ec4f:	68 c1 8a 02 c0       	push   0xc0028ac1
c000ec54:	e8 30 ac 00 00       	call   c0019889 <Krnl::panic(char const*)>
c000ec59:	83 c4 10             	add    esp,0x10
c000ec5c:	f6 c3 40             	test   bl,0x40
c000ec5f:	74 e3                	je     c000ec44 <Computer::handleNMI()+0x24>
c000ec61:	83 ec 0c             	sub    esp,0xc
c000ec64:	68 ce 8a 02 c0       	push   0xc0028ace
c000ec69:	e8 1b ac 00 00       	call   c0019889 <Krnl::panic(char const*)>
c000ec6e:	83 c4 10             	add    esp,0x10
c000ec71:	84 db                	test   bl,bl
c000ec73:	79 d3                	jns    c000ec48 <Computer::handleNMI()+0x28>
c000ec75:	c7 44 24 10 d8 8a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0028ad8
c000ec7d:	5a                   	pop    edx
c000ec7e:	5b                   	pop    ebx
c000ec7f:	5e                   	pop    esi
c000ec80:	e9 04 ac 00 00       	jmp    c0019889 <Krnl::panic(char const*)>
c000ec85:	90                   	nop

c000ec86 <Computer::setDiskActivityLight(int, bool)>:
c000ec86:	56                   	push   esi
c000ec87:	53                   	push   ebx
c000ec88:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ec8c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ec91:	77 1b                	ja     c000ecae <Computer::setDiskActivityLight(int, bool)+0x28>
c000ec93:	e4 92                	in     al,0x92
c000ec95:	bb 40 00 00 00       	mov    ebx,0x40
c000ec9a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000ec9e:	89 da                	mov    edx,ebx
c000eca0:	d3 e2                	shl    edx,cl
c000eca2:	89 f1                	mov    ecx,esi
c000eca4:	f7 d2                	not    edx
c000eca6:	d3 e3                	shl    ebx,cl
c000eca8:	21 d0                	and    eax,edx
c000ecaa:	09 d8                	or     eax,ebx
c000ecac:	e6 92                	out    0x92,al
c000ecae:	5b                   	pop    ebx
c000ecaf:	5e                   	pop    esi
c000ecb0:	c3                   	ret    
c000ecb1:	90                   	nop

c000ecb2 <GDTEntry::setBase(unsigned int)>:
c000ecb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ecb6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ecba:	89 c1                	mov    ecx,eax
c000ecbc:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000ecc0:	c1 e9 10             	shr    ecx,0x10
c000ecc3:	c1 e8 18             	shr    eax,0x18
c000ecc6:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000ecc9:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000eccc:	c3                   	ret    
c000eccd:	90                   	nop

c000ecce <GDTEntry::setLimit(unsigned int)>:
c000ecce:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ecd2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ecd6:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000ecd9:	66 89 01             	mov    WORD PTR [ecx],ax
c000ecdc:	83 e2 f0             	and    edx,0xfffffff0
c000ecdf:	c1 e8 10             	shr    eax,0x10
c000ece2:	83 e0 0f             	and    eax,0xf
c000ece5:	09 d0                	or     eax,edx
c000ece7:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000ecea:	c3                   	ret    
c000eceb:	90                   	nop

c000ecec <GDT::GDT()>:
c000ecec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ecf0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ecf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ecfa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ed00:	90                   	nop
c000ed01:	c3                   	ret    

c000ed02 <GDT::addEntry(GDTEntry)>:
c000ed02:	53                   	push   ebx
c000ed03:	83 ec 0c             	sub    esp,0xc
c000ed06:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ed0a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ed0c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000ed13:	52                   	push   edx
c000ed14:	50                   	push   eax
c000ed15:	68 14 8b 02 c0       	push   0xc0028b14
c000ed1a:	e8 50 3a 00 00       	call   c001276f <Dbg::kprintf(char const*, ...)>
c000ed1f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ed21:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ed25:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ed29:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000ed2d:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000ed31:	8d 50 01             	lea    edx,[eax+0x1]
c000ed34:	c1 e0 03             	shl    eax,0x3
c000ed37:	89 13                	mov    DWORD PTR [ebx],edx
c000ed39:	83 c4 18             	add    esp,0x18
c000ed3c:	5b                   	pop    ebx
c000ed3d:	c3                   	ret    

c000ed3e <GDT::getNumberOfEntries()>:
c000ed3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed42:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed44:	c3                   	ret    
c000ed45:	90                   	nop

c000ed46 <GDT::flush()>:
c000ed46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed4a:	8b 10                	mov    edx,DWORD PTR [eax]
c000ed4c:	83 c0 04             	add    eax,0x4
c000ed4f:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000ed56:	a3 52 c9 02 c0       	mov    ds:0xc002c952,eax
c000ed5b:	66 89 15 50 c9 02 c0 	mov    WORD PTR ds:0xc002c950,dx
c000ed62:	e9 96 16 ff ff       	jmp    c00003fd <loadGDT>
c000ed67:	90                   	nop

c000ed68 <GDT::setup()>:
c000ed68:	55                   	push   ebp
c000ed69:	57                   	push   edi
c000ed6a:	56                   	push   esi
c000ed6b:	53                   	push   ebx
c000ed6c:	83 ec 3c             	sub    esp,0x3c
c000ed6f:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000ed73:	6a 00                	push   0x0
c000ed75:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000ed79:	53                   	push   ebx
c000ed7a:	e8 33 ff ff ff       	call   c000ecb2 <GDTEntry::setBase(unsigned int)>
c000ed7f:	6a 00                	push   0x0
c000ed81:	53                   	push   ebx
c000ed82:	e8 47 ff ff ff       	call   c000ecce <GDTEntry::setLimit(unsigned int)>
c000ed87:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000ed8f:	6a 00                	push   0x0
c000ed91:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000ed95:	53                   	push   ebx
c000ed96:	e8 17 ff ff ff       	call   c000ecb2 <GDTEntry::setBase(unsigned int)>
c000ed9b:	68 ff ff ff 00       	push   0xffffff
c000eda0:	53                   	push   ebx
c000eda1:	e8 28 ff ff ff       	call   c000ecce <GDTEntry::setLimit(unsigned int)>
c000eda6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000edaa:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000edaf:	0d 00 9a c0 00       	or     eax,0xc09a00
c000edb4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000edb8:	83 c4 20             	add    esp,0x20
c000edbb:	6a 00                	push   0x0
c000edbd:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000edc1:	53                   	push   ebx
c000edc2:	e8 eb fe ff ff       	call   c000ecb2 <GDTEntry::setBase(unsigned int)>
c000edc7:	68 ff ff ff 00       	push   0xffffff
c000edcc:	53                   	push   ebx
c000edcd:	e8 fc fe ff ff       	call   c000ecce <GDTEntry::setLimit(unsigned int)>
c000edd2:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000edd6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000edda:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000edde:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000ede2:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ede6:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000edeb:	0d 00 92 c0 00       	or     eax,0xc09200
c000edf0:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000edf4:	89 d8                	mov    eax,ebx
c000edf6:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000edfa:	80 cc 60             	or     ah,0x60
c000edfd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ee01:	83 c4 0c             	add    esp,0xc
c000ee04:	89 f8                	mov    eax,edi
c000ee06:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ee0a:	80 cc 60             	or     ah,0x60
c000ee0d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ee11:	89 c7                	mov    edi,eax
c000ee13:	55                   	push   ebp
c000ee14:	e8 e9 fe ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c000ee19:	83 c4 0c             	add    esp,0xc
c000ee1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ee20:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ee24:	55                   	push   ebp
c000ee25:	e8 d8 fe ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c000ee2a:	83 c4 0c             	add    esp,0xc
c000ee2d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ee31:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ee35:	55                   	push   ebp
c000ee36:	e8 c7 fe ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c000ee3b:	83 c4 0c             	add    esp,0xc
c000ee3e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ee42:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ee46:	53                   	push   ebx
c000ee47:	51                   	push   ecx
c000ee48:	55                   	push   ebp
c000ee49:	e8 b4 fe ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c000ee4e:	83 c4 0c             	add    esp,0xc
c000ee51:	57                   	push   edi
c000ee52:	56                   	push   esi
c000ee53:	55                   	push   ebp
c000ee54:	e8 a9 fe ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c000ee59:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ee5c:	e8 e5 fe ff ff       	call   c000ed46 <GDT::flush()>
c000ee61:	83 c4 4c             	add    esp,0x4c
c000ee64:	5b                   	pop    ebx
c000ee65:	5e                   	pop    esi
c000ee66:	5f                   	pop    edi
c000ee67:	5d                   	pop    ebp
c000ee68:	c3                   	ret    

c000ee69 <idleFunction(void*)>:
c000ee69:	53                   	push   ebx
c000ee6a:	83 ec 08             	sub    esp,0x8
c000ee6d:	e8 a8 de 00 00       	call   c001cd1a <unlockScheduler()>
c000ee72:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c000ee77:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000ee7d:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000ee84:	74 3c                	je     c000eec2 <idleFunction(void*)+0x59>
c000ee86:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee8d:	74 33                	je     c000eec2 <idleFunction(void*)+0x59>
c000ee8f:	31 db                	xor    ebx,ebx
c000ee91:	52                   	push   edx
c000ee92:	52                   	push   edx
c000ee93:	68 e1 00 00 00       	push   0xe1
c000ee98:	50                   	push   eax
c000ee99:	e8 de fb ff ff       	call   c000ea7c <Computer::rdmsr(unsigned int)>
c000ee9e:	53                   	push   ebx
c000ee9f:	83 e0 02             	and    eax,0x2
c000eea2:	50                   	push   eax
c000eea3:	68 e1 00 00 00       	push   0xe1
c000eea8:	ff 35 48 c9 02 c0    	push   DWORD PTR ds:0xc002c948
c000eeae:	e8 f5 fb ff ff       	call   c000eaa8 <Computer::wrmsr(unsigned int, unsigned long long)>
c000eeb3:	83 c4 20             	add    esp,0x20
c000eeb6:	e8 79 13 ff ff       	call   c0000234 <doTPAUSE>
c000eebb:	e8 e0 81 01 00       	call   c00270a0 <idleCommon()>
c000eec0:	eb f4                	jmp    c000eeb6 <idleFunction(void*)+0x4d>
c000eec2:	fb                   	sti    
c000eec3:	f4                   	hlt    
c000eec4:	e8 d7 81 01 00       	call   c00270a0 <idleCommon()>
c000eec9:	eb f7                	jmp    c000eec2 <idleFunction(void*)+0x59>
c000eecb:	90                   	nop

c000eecc <IDTEntry::IDTEntry(bool)>:
c000eecc:	83 ec 04             	sub    esp,0x4
c000eecf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eed3:	88 04 24             	mov    BYTE PTR [esp],al
c000eed6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eeda:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000eee0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eee4:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000eee8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eeec:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eeef:	83 e2 f0             	and    edx,0xfffffff0
c000eef2:	83 ca 0e             	or     edx,0xe
c000eef5:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eef8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eefc:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eeff:	83 e2 ef             	and    edx,0xffffffef
c000ef02:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef05:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000ef09:	74 04                	je     c000ef0f <IDTEntry::IDTEntry(bool)+0x43>
c000ef0b:	b2 03                	mov    dl,0x3
c000ef0d:	eb 02                	jmp    c000ef11 <IDTEntry::IDTEntry(bool)+0x45>
c000ef0f:	b2 00                	mov    dl,0x0
c000ef11:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef15:	83 e2 03             	and    edx,0x3
c000ef18:	88 d1                	mov    cl,dl
c000ef1a:	c1 e1 05             	shl    ecx,0x5
c000ef1d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ef20:	83 e2 9f             	and    edx,0xffffff9f
c000ef23:	09 ca                	or     edx,ecx
c000ef25:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef2c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ef2f:	83 ca 80             	or     edx,0xffffff80
c000ef32:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef35:	90                   	nop
c000ef36:	83 c4 04             	add    esp,0x4
c000ef39:	c3                   	ret    

c000ef3a <IDTEntry::setOffset(unsigned int)>:
c000ef3a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ef3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef42:	66 89 02             	mov    WORD PTR [edx],ax
c000ef45:	c1 e8 10             	shr    eax,0x10
c000ef48:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000ef4c:	c3                   	ret    
c000ef4d:	90                   	nop

c000ef4e <IDT::IDT()>:
c000ef4e:	90                   	nop
c000ef4f:	c3                   	ret    

c000ef50 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000ef50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef54:	83 c0 30             	add    eax,0x30
c000ef57:	c3                   	ret    

c000ef58 <IDT::addEntry(IDTEntry, int)>:
c000ef58:	53                   	push   ebx
c000ef59:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef5d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ef61:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ef65:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ef69:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000ef6c:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000ef70:	5b                   	pop    ebx
c000ef71:	c3                   	ret    

c000ef72 <IDT::addEntry(int, void (*)(), bool)>:
c000ef72:	53                   	push   ebx
c000ef73:	83 ec 10             	sub    esp,0x10
c000ef76:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000ef7b:	50                   	push   eax
c000ef7c:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000ef80:	53                   	push   ebx
c000ef81:	e8 46 ff ff ff       	call   c000eecc <IDTEntry::IDTEntry(bool)>
c000ef86:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ef8a:	53                   	push   ebx
c000ef8b:	e8 aa ff ff ff       	call   c000ef3a <IDTEntry::setOffset(unsigned int)>
c000ef90:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef94:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef98:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef9c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000efa0:	e8 b3 ff ff ff       	call   c000ef58 <IDT::addEntry(IDTEntry, int)>
c000efa5:	83 c4 30             	add    esp,0x30
c000efa8:	5b                   	pop    ebx
c000efa9:	c3                   	ret    

c000efaa <IDT::flush()>:
c000efaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000efae:	66 c7 05 58 c9 02 c0 ff 07 	mov    WORD PTR ds:0xc002c958,0x7ff
c000efb7:	a3 5a c9 02 c0       	mov    ds:0xc002c95a,eax
c000efbc:	0f 01 1d 58 c9 02 c0 	lidtd  ds:0xc002c958
c000efc3:	c3                   	ret    

c000efc4 <IDT::setup()>:
c000efc4:	57                   	push   edi
c000efc5:	56                   	push   esi
c000efc6:	53                   	push   ebx
c000efc7:	83 ec 10             	sub    esp,0x10
c000efca:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000efce:	6a 00                	push   0x0
c000efd0:	68 1d 04 00 c0       	push   0xc000041d
c000efd5:	6a 00                	push   0x0
c000efd7:	53                   	push   ebx
c000efd8:	e8 95 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000efdd:	6a 00                	push   0x0
c000efdf:	68 2d 04 00 c0       	push   0xc000042d
c000efe4:	6a 01                	push   0x1
c000efe6:	53                   	push   ebx
c000efe7:	e8 86 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000efec:	83 c4 20             	add    esp,0x20
c000efef:	6a 00                	push   0x0
c000eff1:	68 37 04 00 c0       	push   0xc0000437
c000eff6:	6a 02                	push   0x2
c000eff8:	53                   	push   ebx
c000eff9:	e8 74 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000effe:	6a 00                	push   0x0
c000f000:	68 41 04 00 c0       	push   0xc0000441
c000f005:	6a 03                	push   0x3
c000f007:	53                   	push   ebx
c000f008:	e8 65 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f00d:	83 c4 20             	add    esp,0x20
c000f010:	6a 00                	push   0x0
c000f012:	68 4b 04 00 c0       	push   0xc000044b
c000f017:	6a 04                	push   0x4
c000f019:	53                   	push   ebx
c000f01a:	e8 53 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f01f:	6a 00                	push   0x0
c000f021:	68 55 04 00 c0       	push   0xc0000455
c000f026:	6a 05                	push   0x5
c000f028:	53                   	push   ebx
c000f029:	e8 44 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f02e:	83 c4 20             	add    esp,0x20
c000f031:	6a 00                	push   0x0
c000f033:	68 5f 04 00 c0       	push   0xc000045f
c000f038:	6a 06                	push   0x6
c000f03a:	53                   	push   ebx
c000f03b:	e8 32 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f040:	6a 00                	push   0x0
c000f042:	68 69 04 00 c0       	push   0xc0000469
c000f047:	6a 07                	push   0x7
c000f049:	53                   	push   ebx
c000f04a:	e8 23 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f04f:	83 c4 20             	add    esp,0x20
c000f052:	6a 00                	push   0x0
c000f054:	68 73 04 00 c0       	push   0xc0000473
c000f059:	6a 08                	push   0x8
c000f05b:	53                   	push   ebx
c000f05c:	e8 11 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f061:	6a 00                	push   0x0
c000f063:	68 7b 04 00 c0       	push   0xc000047b
c000f068:	6a 09                	push   0x9
c000f06a:	53                   	push   ebx
c000f06b:	e8 02 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f070:	83 c4 20             	add    esp,0x20
c000f073:	6a 00                	push   0x0
c000f075:	68 85 04 00 c0       	push   0xc0000485
c000f07a:	6a 0a                	push   0xa
c000f07c:	53                   	push   ebx
c000f07d:	e8 f0 fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f082:	6a 00                	push   0x0
c000f084:	68 8d 04 00 c0       	push   0xc000048d
c000f089:	6a 0b                	push   0xb
c000f08b:	53                   	push   ebx
c000f08c:	e8 e1 fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f091:	83 c4 20             	add    esp,0x20
c000f094:	6a 00                	push   0x0
c000f096:	68 95 04 00 c0       	push   0xc0000495
c000f09b:	6a 0c                	push   0xc
c000f09d:	53                   	push   ebx
c000f09e:	e8 cf fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0a3:	6a 00                	push   0x0
c000f0a5:	68 9d 04 00 c0       	push   0xc000049d
c000f0aa:	6a 0d                	push   0xd
c000f0ac:	53                   	push   ebx
c000f0ad:	e8 c0 fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0b2:	83 c4 20             	add    esp,0x20
c000f0b5:	6a 00                	push   0x0
c000f0b7:	68 a5 04 00 c0       	push   0xc00004a5
c000f0bc:	6a 0e                	push   0xe
c000f0be:	53                   	push   ebx
c000f0bf:	e8 ae fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0c4:	6a 00                	push   0x0
c000f0c6:	68 ad 04 00 c0       	push   0xc00004ad
c000f0cb:	6a 0f                	push   0xf
c000f0cd:	53                   	push   ebx
c000f0ce:	e8 9f fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0d3:	83 c4 20             	add    esp,0x20
c000f0d6:	6a 00                	push   0x0
c000f0d8:	68 b7 04 00 c0       	push   0xc00004b7
c000f0dd:	6a 10                	push   0x10
c000f0df:	53                   	push   ebx
c000f0e0:	e8 8d fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0e5:	6a 00                	push   0x0
c000f0e7:	68 c1 04 00 c0       	push   0xc00004c1
c000f0ec:	6a 11                	push   0x11
c000f0ee:	53                   	push   ebx
c000f0ef:	e8 7e fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0f4:	83 c4 20             	add    esp,0x20
c000f0f7:	6a 00                	push   0x0
c000f0f9:	68 cb 04 00 c0       	push   0xc00004cb
c000f0fe:	6a 12                	push   0x12
c000f100:	53                   	push   ebx
c000f101:	e8 6c fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f106:	6a 01                	push   0x1
c000f108:	68 65 05 00 c0       	push   0xc0000565
c000f10d:	6a 60                	push   0x60
c000f10f:	53                   	push   ebx
c000f110:	e8 5d fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f115:	83 c4 20             	add    esp,0x20
c000f118:	6a 00                	push   0x0
c000f11a:	68 6c 05 00 c0       	push   0xc000056c
c000f11f:	6a 20                	push   0x20
c000f121:	53                   	push   ebx
c000f122:	e8 4b fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f127:	6a 00                	push   0x0
c000f129:	68 57 05 00 c0       	push   0xc0000557
c000f12e:	6a 21                	push   0x21
c000f130:	53                   	push   ebx
c000f131:	e8 3c fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f136:	83 c4 20             	add    esp,0x20
c000f139:	6a 00                	push   0x0
c000f13b:	68 5e 05 00 c0       	push   0xc000055e
c000f140:	6a 22                	push   0x22
c000f142:	53                   	push   ebx
c000f143:	e8 2a fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f148:	6a 00                	push   0x0
c000f14a:	68 d5 04 00 c0       	push   0xc00004d5
c000f14f:	6a 23                	push   0x23
c000f151:	53                   	push   ebx
c000f152:	e8 1b fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f157:	83 c4 20             	add    esp,0x20
c000f15a:	6a 00                	push   0x0
c000f15c:	68 df 04 00 c0       	push   0xc00004df
c000f161:	6a 24                	push   0x24
c000f163:	53                   	push   ebx
c000f164:	e8 09 fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f169:	6a 00                	push   0x0
c000f16b:	68 e9 04 00 c0       	push   0xc00004e9
c000f170:	6a 25                	push   0x25
c000f172:	53                   	push   ebx
c000f173:	e8 fa fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f178:	83 c4 20             	add    esp,0x20
c000f17b:	6a 00                	push   0x0
c000f17d:	68 f3 04 00 c0       	push   0xc00004f3
c000f182:	6a 26                	push   0x26
c000f184:	53                   	push   ebx
c000f185:	e8 e8 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f18a:	6a 00                	push   0x0
c000f18c:	68 fd 04 00 c0       	push   0xc00004fd
c000f191:	6a 27                	push   0x27
c000f193:	53                   	push   ebx
c000f194:	e8 d9 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f199:	83 c4 20             	add    esp,0x20
c000f19c:	6a 00                	push   0x0
c000f19e:	68 07 05 00 c0       	push   0xc0000507
c000f1a3:	6a 28                	push   0x28
c000f1a5:	53                   	push   ebx
c000f1a6:	e8 c7 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1ab:	6a 00                	push   0x0
c000f1ad:	68 11 05 00 c0       	push   0xc0000511
c000f1b2:	6a 29                	push   0x29
c000f1b4:	53                   	push   ebx
c000f1b5:	e8 b8 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1ba:	83 c4 20             	add    esp,0x20
c000f1bd:	6a 00                	push   0x0
c000f1bf:	68 1b 05 00 c0       	push   0xc000051b
c000f1c4:	6a 2a                	push   0x2a
c000f1c6:	53                   	push   ebx
c000f1c7:	e8 a6 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1cc:	6a 00                	push   0x0
c000f1ce:	68 25 05 00 c0       	push   0xc0000525
c000f1d3:	6a 2b                	push   0x2b
c000f1d5:	53                   	push   ebx
c000f1d6:	e8 97 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1db:	83 c4 20             	add    esp,0x20
c000f1de:	6a 00                	push   0x0
c000f1e0:	68 2f 05 00 c0       	push   0xc000052f
c000f1e5:	6a 2c                	push   0x2c
c000f1e7:	53                   	push   ebx
c000f1e8:	e8 85 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1ed:	6a 00                	push   0x0
c000f1ef:	68 39 05 00 c0       	push   0xc0000539
c000f1f4:	6a 2d                	push   0x2d
c000f1f6:	53                   	push   ebx
c000f1f7:	e8 76 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1fc:	83 c4 20             	add    esp,0x20
c000f1ff:	6a 00                	push   0x0
c000f201:	68 43 05 00 c0       	push   0xc0000543
c000f206:	6a 2e                	push   0x2e
c000f208:	53                   	push   ebx
c000f209:	e8 64 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f20e:	6a 00                	push   0x0
c000f210:	68 4d 05 00 c0       	push   0xc000054d
c000f215:	6a 2f                	push   0x2f
c000f217:	53                   	push   ebx
c000f218:	e8 55 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f21d:	83 c4 20             	add    esp,0x20
c000f220:	6a 00                	push   0x0
c000f222:	68 a2 05 00 c0       	push   0xc00005a2
c000f227:	6a 30                	push   0x30
c000f229:	53                   	push   ebx
c000f22a:	e8 43 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f22f:	6a 00                	push   0x0
c000f231:	68 ac 05 00 c0       	push   0xc00005ac
c000f236:	6a 31                	push   0x31
c000f238:	53                   	push   ebx
c000f239:	e8 34 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f23e:	83 c4 20             	add    esp,0x20
c000f241:	6a 00                	push   0x0
c000f243:	68 b6 05 00 c0       	push   0xc00005b6
c000f248:	6a 32                	push   0x32
c000f24a:	53                   	push   ebx
c000f24b:	e8 22 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f250:	6a 00                	push   0x0
c000f252:	68 c0 05 00 c0       	push   0xc00005c0
c000f257:	6a 33                	push   0x33
c000f259:	53                   	push   ebx
c000f25a:	e8 13 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f25f:	83 c4 20             	add    esp,0x20
c000f262:	6a 00                	push   0x0
c000f264:	68 ca 05 00 c0       	push   0xc00005ca
c000f269:	6a 34                	push   0x34
c000f26b:	53                   	push   ebx
c000f26c:	e8 01 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f271:	6a 00                	push   0x0
c000f273:	68 d4 05 00 c0       	push   0xc00005d4
c000f278:	6a 35                	push   0x35
c000f27a:	53                   	push   ebx
c000f27b:	e8 f2 fc ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f280:	83 c4 20             	add    esp,0x20
c000f283:	6a 00                	push   0x0
c000f285:	68 de 05 00 c0       	push   0xc00005de
c000f28a:	6a 36                	push   0x36
c000f28c:	53                   	push   ebx
c000f28d:	e8 e0 fc ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f292:	6a 00                	push   0x0
c000f294:	68 e8 05 00 c0       	push   0xc00005e8
c000f299:	6a 37                	push   0x37
c000f29b:	53                   	push   ebx
c000f29c:	e8 d1 fc ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f2a1:	83 c4 20             	add    esp,0x20
c000f2a4:	e8 66 26 00 00       	call   c001190f <Virt::getAKernelVAS()>
c000f2a9:	52                   	push   edx
c000f2aa:	6a 03                	push   0x3
c000f2ac:	6a 02                	push   0x2
c000f2ae:	50                   	push   eax
c000f2af:	e8 96 2c 00 00       	call   c0011f4a <VAS::allocatePages(int, int)>
c000f2b4:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f2bb:	89 c6                	mov    esi,eax
c000f2bd:	e8 12 02 00 00       	call   c000f4d4 <malloc>
c000f2c2:	81 c6 00 20 00 00    	add    esi,0x2000
c000f2c8:	89 04 24             	mov    DWORD PTR [esp],eax
c000f2cb:	89 c7                	mov    edi,eax
c000f2cd:	e8 de 1d 00 00       	call   c00110b0 <TSS::TSS()>
c000f2d2:	83 c4 0c             	add    esp,0xc
c000f2d5:	68 73 04 00 c0       	push   0xc0000473
c000f2da:	56                   	push   esi
c000f2db:	57                   	push   edi
c000f2dc:	e8 0f 1e 00 00       	call   c00110f0 <TSS::setup(unsigned long, unsigned long)>
c000f2e1:	59                   	pop    ecx
c000f2e2:	89 c6                	mov    esi,eax
c000f2e4:	5f                   	pop    edi
c000f2e5:	6a 00                	push   0x0
c000f2e7:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f2eb:	50                   	push   eax
c000f2ec:	e8 db fb ff ff       	call   c000eecc <IDTEntry::IDTEntry(bool)>
c000f2f1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f2f5:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f2fa:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f301:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f307:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f30b:	80 ce 05             	or     dh,0x5
c000f30e:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f311:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f315:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f319:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f31c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f31f:	e8 86 fc ff ff       	call   c000efaa <IDT::flush()>
c000f324:	83 c4 20             	add    esp,0x20
c000f327:	5b                   	pop    ebx
c000f328:	5e                   	pop    esi
c000f329:	5f                   	pop    edi
c000f32a:	c3                   	ret    

c000f32b <sbrk>:
c000f32b:	55                   	push   ebp
c000f32c:	57                   	push   edi
c000f32d:	56                   	push   esi
c000f32e:	53                   	push   ebx
c000f32f:	83 ec 1c             	sub    esp,0x1c
c000f332:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f336:	85 c0                	test   eax,eax
c000f338:	74 3e                	je     c000f378 <sbrk+0x4d>
c000f33a:	78 43                	js     c000f37f <sbrk+0x54>
c000f33c:	8b 15 48 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c948
c000f342:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f348:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f34e:	83 e2 01             	and    edx,0x1
c000f351:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f355:	8b 0d 6c b8 02 c0    	mov    ecx,DWORD PTR ds:0xc002b86c
c000f35b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f35f:	05 ff 0f 00 00       	add    eax,0xfff
c000f364:	89 c2                	mov    edx,eax
c000f366:	78 2f                	js     c000f397 <sbrk+0x6c>
c000f368:	c1 fa 0c             	sar    edx,0xc
c000f36b:	89 d7                	mov    edi,edx
c000f36d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f371:	be 00 00 00 00       	mov    esi,0x0
c000f376:	eb 36                	jmp    c000f3ae <sbrk+0x83>
c000f378:	a1 6c b8 02 c0       	mov    eax,ds:0xc002b86c
c000f37d:	eb 74                	jmp    c000f3f3 <sbrk+0xc8>
c000f37f:	83 ec 08             	sub    esp,0x8
c000f382:	50                   	push   eax
c000f383:	68 30 8b 02 c0       	push   0xc0028b30
c000f388:	e8 e2 33 00 00       	call   c001276f <Dbg::kprintf(char const*, ...)>
c000f38d:	83 c4 10             	add    esp,0x10
c000f390:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f395:	eb 5c                	jmp    c000f3f3 <sbrk+0xc8>
c000f397:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f39d:	eb c9                	jmp    c000f368 <sbrk+0x3d>
c000f39f:	81 05 6c b8 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002b86c,0x1000
c000f3a9:	46                   	inc    esi
c000f3aa:	39 f7                	cmp    edi,esi
c000f3ac:	74 34                	je     c000f3e2 <sbrk+0xb7>
c000f3ae:	e8 5c 25 00 00       	call   c001190f <Virt::getAKernelVAS()>
c000f3b3:	89 c3                	mov    ebx,eax
c000f3b5:	8b 2d 6c b8 02 c0    	mov    ebp,DWORD PTR ds:0xc002b86c
c000f3bb:	e8 7d 07 00 00       	call   c000fb3d <Phys::allocatePage()>
c000f3c0:	68 01 04 00 00       	push   0x401
c000f3c5:	55                   	push   ebp
c000f3c6:	50                   	push   eax
c000f3c7:	53                   	push   ebx
c000f3c8:	e8 7d 2a 00 00       	call   c0011e4a <VAS::mapPage(unsigned long, unsigned long, int)>
c000f3cd:	83 c4 10             	add    esp,0x10
c000f3d0:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f3d5:	74 c8                	je     c000f39f <sbrk+0x74>
c000f3d7:	8b 1d 6c b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b86c
c000f3dd:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f3e0:	eb bd                	jmp    c000f39f <sbrk+0x74>
c000f3e2:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f3e7:	75 12                	jne    c000f3fb <sbrk+0xd0>
c000f3e9:	0f 20 d8             	mov    eax,cr3
c000f3ec:	0f 22 d8             	mov    cr3,eax
c000f3ef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f3f3:	83 c4 1c             	add    esp,0x1c
c000f3f6:	5b                   	pop    ebx
c000f3f7:	5e                   	pop    esi
c000f3f8:	5f                   	pop    edi
c000f3f9:	5d                   	pop    ebp
c000f3fa:	c3                   	ret    
c000f3fb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f3ff:	89 cb                	mov    ebx,ecx
c000f401:	c1 eb 0a             	shr    ebx,0xa
c000f404:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f40a:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f410:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f414:	c1 e0 0c             	shl    eax,0xc
c000f417:	01 c8                	add    eax,ecx
c000f419:	c1 e8 0a             	shr    eax,0xa
c000f41c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f421:	2d 00 00 40 00       	sub    eax,0x400000
c000f426:	39 c3                	cmp    ebx,eax
c000f428:	77 c5                	ja     c000f3ef <sbrk+0xc4>
c000f42a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f42d:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f433:	39 d8                	cmp    eax,ebx
c000f435:	73 f3                	jae    c000f42a <sbrk+0xff>
c000f437:	eb b6                	jmp    c000f3ef <sbrk+0xc4>

c000f439 <mmap>:
c000f439:	83 ec 18             	sub    esp,0x18
c000f43c:	68 60 8b 02 c0       	push   0xc0028b60
c000f441:	e8 43 a4 00 00       	call   c0019889 <Krnl::panic(char const*)>
c000f446:	b8 00 00 00 00       	mov    eax,0x0
c000f44b:	83 c4 1c             	add    esp,0x1c
c000f44e:	c3                   	ret    

c000f44f <munmap>:
c000f44f:	83 ec 18             	sub    esp,0x18
c000f452:	68 65 8b 02 c0       	push   0xc0028b65
c000f457:	e8 2d a4 00 00       	call   c0019889 <Krnl::panic(char const*)>
c000f45c:	b8 00 00 00 00       	mov    eax,0x0
c000f461:	83 c4 1c             	add    esp,0x1c
c000f464:	c3                   	ret    

c000f465 <liballoc_lock()>:
c000f465:	83 ec 0c             	sub    esp,0xc
c000f468:	e8 ab d8 00 00       	call   c001cd18 <lockScheduler()>
c000f46d:	b8 00 00 00 00       	mov    eax,0x0
c000f472:	83 c4 0c             	add    esp,0xc
c000f475:	c3                   	ret    

c000f476 <liballoc_unlock()>:
c000f476:	83 ec 0c             	sub    esp,0xc
c000f479:	e8 9c d8 00 00       	call   c001cd1a <unlockScheduler()>
c000f47e:	b8 00 00 00 00       	mov    eax,0x0
c000f483:	83 c4 0c             	add    esp,0xc
c000f486:	c3                   	ret    

c000f487 <liballoc_alloc(int)>:
c000f487:	83 ec 0c             	sub    esp,0xc
c000f48a:	e8 80 24 00 00       	call   c001190f <Virt::getAKernelVAS()>
c000f48f:	83 ec 04             	sub    esp,0x4
c000f492:	6a 01                	push   0x1
c000f494:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f498:	50                   	push   eax
c000f499:	e8 ac 2a 00 00       	call   c0011f4a <VAS::allocatePages(int, int)>
c000f49e:	83 c4 1c             	add    esp,0x1c
c000f4a1:	c3                   	ret    

c000f4a2 <liballoc_free(void*, int)>:
c000f4a2:	83 ec 0c             	sub    esp,0xc
c000f4a5:	e8 65 24 00 00       	call   c001190f <Virt::getAKernelVAS()>
c000f4aa:	83 ec 08             	sub    esp,0x8
c000f4ad:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f4b1:	50                   	push   eax
c000f4b2:	e8 4f 27 00 00       	call   c0011c06 <VAS::freeAllocatedPages(unsigned long)>
c000f4b7:	b8 00 00 00 00       	mov    eax,0x0
c000f4bc:	83 c4 1c             	add    esp,0x1c
c000f4bf:	c3                   	ret    

c000f4c0 <realloc>:
c000f4c0:	83 ec 14             	sub    esp,0x14
c000f4c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4cb:	e8 34 1f ff ff       	call   c0001404 <dlrealloc>
c000f4d0:	83 c4 1c             	add    esp,0x1c
c000f4d3:	c3                   	ret    

c000f4d4 <malloc>:
c000f4d4:	83 ec 18             	sub    esp,0x18
c000f4d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4db:	e8 e7 19 ff ff       	call   c0000ec7 <dlmalloc>
c000f4e0:	83 c4 1c             	add    esp,0x1c
c000f4e3:	c3                   	ret    

c000f4e4 <free>:
c000f4e4:	83 ec 18             	sub    esp,0x18
c000f4e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4eb:	e8 7c 16 ff ff       	call   c0000b6c <dlfree>
c000f4f0:	83 c4 1c             	add    esp,0x1c
c000f4f3:	c3                   	ret    

c000f4f4 <rfree>:
c000f4f4:	83 ec 18             	sub    esp,0x18
c000f4f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4fb:	e8 6c 16 ff ff       	call   c0000b6c <dlfree>
c000f500:	83 c4 1c             	add    esp,0x1c
c000f503:	c3                   	ret    

c000f504 <calloc>:
c000f504:	56                   	push   esi
c000f505:	53                   	push   ebx
c000f506:	83 ec 10             	sub    esp,0x10
c000f509:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f50d:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f512:	53                   	push   ebx
c000f513:	e8 bc ff ff ff       	call   c000f4d4 <malloc>
c000f518:	89 c6                	mov    esi,eax
c000f51a:	83 c4 0c             	add    esp,0xc
c000f51d:	53                   	push   ebx
c000f51e:	6a 00                	push   0x0
c000f520:	50                   	push   eax
c000f521:	e8 65 11 ff ff       	call   c000068b <memset>
c000f526:	89 f0                	mov    eax,esi
c000f528:	83 c4 14             	add    esp,0x14
c000f52b:	5b                   	pop    ebx
c000f52c:	5e                   	pop    esi
c000f52d:	c3                   	ret    

c000f52e <hwTextMode_loadInData(VgaText*)>:
c000f52e:	55                   	push   ebp
c000f52f:	a1 80 b8 02 c0       	mov    eax,ds:0xc002b880
c000f534:	57                   	push   edi
c000f535:	56                   	push   esi
c000f536:	53                   	push   ebx
c000f537:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f53b:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f541:	85 d2                	test   edx,edx
c000f543:	7e 2f                	jle    c000f574 <hwTextMode_loadInData(VgaText*)+0x46>
c000f545:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f54b:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f54e:	31 f6                	xor    esi,esi
c000f550:	29 fd                	sub    ebp,edi
c000f552:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f555:	31 c0                	xor    eax,eax
c000f557:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f55b:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f55f:	40                   	inc    eax
c000f560:	83 f8 50             	cmp    eax,0x50
c000f563:	75 f2                	jne    c000f557 <hwTextMode_loadInData(VgaText*)+0x29>
c000f565:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f56b:	46                   	inc    esi
c000f56c:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f572:	7f de                	jg     c000f552 <hwTextMode_loadInData(VgaText*)+0x24>
c000f574:	5b                   	pop    ebx
c000f575:	5e                   	pop    esi
c000f576:	5f                   	pop    edi
c000f577:	5d                   	pop    ebp
c000f578:	c3                   	ret    

c000f579 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f579:	55                   	push   ebp
c000f57a:	80 3d e0 c9 02 c0 00 	cmp    BYTE PTR ds:0xc002c9e0,0x0
c000f581:	57                   	push   edi
c000f582:	56                   	push   esi
c000f583:	53                   	push   ebx
c000f584:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f588:	75 50                	jne    c000f5da <hwTextMode_loadInTitle(VgaText*, char*)+0x61>
c000f58a:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f590:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f596:	8b 15 80 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b880
c000f59c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f5a0:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f5a6:	eb 0e                	jmp    c000f5b6 <hwTextMode_loadInTitle(VgaText*, char*)+0x3d>
c000f5a8:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f5ae:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f5b4:	89 da                	mov    edx,ebx
c000f5b6:	83 e5 0f             	and    ebp,0xf
c000f5b9:	c1 e0 04             	shl    eax,0x4
c000f5bc:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f5bf:	0f b6 c0             	movzx  eax,al
c000f5c2:	41                   	inc    ecx
c000f5c3:	09 e8                	or     eax,ebp
c000f5c5:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f5c9:	c1 e0 08             	shl    eax,0x8
c000f5cc:	09 e8                	or     eax,ebp
c000f5ce:	39 fb                	cmp    ebx,edi
c000f5d0:	66 89 02             	mov    WORD PTR [edx],ax
c000f5d3:	75 d3                	jne    c000f5a8 <hwTextMode_loadInTitle(VgaText*, char*)+0x2f>
c000f5d5:	5b                   	pop    ebx
c000f5d6:	5e                   	pop    esi
c000f5d7:	5f                   	pop    edi
c000f5d8:	5d                   	pop    ebp
c000f5d9:	c3                   	ret    
c000f5da:	c7 86 d8 0f 00 00 02 00 00 00 	mov    DWORD PTR [esi+0xfd8],0x2
c000f5e4:	c7 86 d4 0f 00 00 00 00 00 00 	mov    DWORD PTR [esi+0xfd4],0x0
c000f5ee:	31 c0                	xor    eax,eax
c000f5f0:	bd 02 00 00 00       	mov    ebp,0x2
c000f5f5:	eb 9f                	jmp    c000f596 <hwTextMode_loadInTitle(VgaText*, char*)+0x1d>

c000f5f7 <hwTextMode_showCursor(VgaText*, bool)>:
c000f5f7:	56                   	push   esi
c000f5f8:	80 3d e0 c9 02 c0 00 	cmp    BYTE PTR ds:0xc002c9e0,0x0
c000f5ff:	53                   	push   ebx
c000f600:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f604:	75 39                	jne    c000f63f <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f606:	84 c0                	test   al,al
c000f608:	74 38                	je     c000f642 <hwTextMode_showCursor(VgaText*, bool)+0x4b>
c000f60a:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f60f:	b0 0a                	mov    al,0xa
c000f611:	89 da                	mov    edx,ebx
c000f613:	ee                   	out    dx,al
c000f614:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f619:	89 ca                	mov    edx,ecx
c000f61b:	ec                   	in     al,dx
c000f61c:	b2 0f                	mov    dl,0xf
c000f61e:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f622:	83 e0 c0             	and    eax,0xffffffc0
c000f625:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f62b:	09 d0                	or     eax,edx
c000f62d:	89 ca                	mov    edx,ecx
c000f62f:	ee                   	out    dx,al
c000f630:	b0 0b                	mov    al,0xb
c000f632:	89 da                	mov    edx,ebx
c000f634:	ee                   	out    dx,al
c000f635:	89 ca                	mov    edx,ecx
c000f637:	ec                   	in     al,dx
c000f638:	83 e0 e0             	and    eax,0xffffffe0
c000f63b:	83 c8 0f             	or     eax,0xf
c000f63e:	ee                   	out    dx,al
c000f63f:	5b                   	pop    ebx
c000f640:	5e                   	pop    esi
c000f641:	c3                   	ret    
c000f642:	b0 0a                	mov    al,0xa
c000f644:	ba d4 03 00 00       	mov    edx,0x3d4
c000f649:	ee                   	out    dx,al
c000f64a:	b0 20                	mov    al,0x20
c000f64c:	ba d5 03 00 00       	mov    edx,0x3d5
c000f651:	ee                   	out    dx,al
c000f652:	5b                   	pop    ebx
c000f653:	5e                   	pop    esi
c000f654:	c3                   	ret    

c000f655 <hwTextMode_update(VgaText*)>:
c000f655:	c3                   	ret    

c000f656 <hwTextMode_updateCursor(VgaText*)>:
c000f656:	56                   	push   esi
c000f657:	80 3d e0 c9 02 c0 00 	cmp    BYTE PTR ds:0xc002c9e0,0x0
c000f65e:	53                   	push   ebx
c000f65f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f663:	75 3f                	jne    c000f6a4 <hwTextMode_updateCursor(VgaText*)+0x4e>
c000f665:	be d4 03 00 00       	mov    esi,0x3d4
c000f66a:	b9 19 00 00 00       	mov    ecx,0x19
c000f66f:	89 f2                	mov    edx,esi
c000f671:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f677:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f67d:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f680:	c1 e1 04             	shl    ecx,0x4
c000f683:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f689:	b0 0f                	mov    al,0xf
c000f68b:	ee                   	out    dx,al
c000f68c:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f691:	88 c8                	mov    al,cl
c000f693:	89 da                	mov    edx,ebx
c000f695:	ee                   	out    dx,al
c000f696:	b0 0e                	mov    al,0xe
c000f698:	89 f2                	mov    edx,esi
c000f69a:	ee                   	out    dx,al
c000f69b:	89 c8                	mov    eax,ecx
c000f69d:	89 da                	mov    edx,ebx
c000f69f:	66 c1 e8 08          	shr    ax,0x8
c000f6a3:	ee                   	out    dx,al
c000f6a4:	5b                   	pop    ebx
c000f6a5:	5e                   	pop    esi
c000f6a6:	c3                   	ret    

c000f6a7 <hwTextMode_disableBlink(VgaText*, bool)>:
c000f6a7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f6ab:	80 3d e0 c9 02 c0 00 	cmp    BYTE PTR ds:0xc002c9e0,0x0
c000f6b2:	75 38                	jne    c000f6ec <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000f6b4:	ba da 03 00 00       	mov    edx,0x3da
c000f6b9:	84 c0                	test   al,al
c000f6bb:	75 18                	jne    c000f6d5 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000f6bd:	ec                   	in     al,dx
c000f6be:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f6c3:	b0 30                	mov    al,0x30
c000f6c5:	89 ca                	mov    edx,ecx
c000f6c7:	ee                   	out    dx,al
c000f6c8:	ba c1 03 00 00       	mov    edx,0x3c1
c000f6cd:	ec                   	in     al,dx
c000f6ce:	83 c8 08             	or     eax,0x8
c000f6d1:	89 ca                	mov    edx,ecx
c000f6d3:	ee                   	out    dx,al
c000f6d4:	c3                   	ret    
c000f6d5:	ec                   	in     al,dx
c000f6d6:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f6db:	b0 30                	mov    al,0x30
c000f6dd:	89 ca                	mov    edx,ecx
c000f6df:	ee                   	out    dx,al
c000f6e0:	ba c1 03 00 00       	mov    edx,0x3c1
c000f6e5:	ec                   	in     al,dx
c000f6e6:	83 e0 f7             	and    eax,0xfffffff7
c000f6e9:	89 ca                	mov    edx,ecx
c000f6eb:	ee                   	out    dx,al
c000f6ec:	c3                   	ret    

c000f6ed <hwTextMode_scrollScreen(VgaText*)>:
c000f6ed:	55                   	push   ebp
c000f6ee:	57                   	push   edi
c000f6ef:	56                   	push   esi
c000f6f0:	53                   	push   ebx
c000f6f1:	83 ec 1c             	sub    esp,0x1c
c000f6f4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f6f8:	80 3d e0 c9 02 c0 00 	cmp    BYTE PTR ds:0xc002c9e0,0x0
c000f6ff:	74 14                	je     c000f715 <hwTextMode_scrollScreen(VgaText*)+0x28>
c000f701:	c7 81 d0 0f 00 00 02 00 00 00 	mov    DWORD PTR [ecx+0xfd0],0x2
c000f70b:	c7 81 cc 0f 00 00 00 00 00 00 	mov    DWORD PTR [ecx+0xfcc],0x0
c000f715:	a1 80 b8 02 c0       	mov    eax,ds:0xc002b880
c000f71a:	bd 02 00 00 00       	mov    ebp,0x2
c000f71f:	05 a0 00 00 00       	add    eax,0xa0
c000f724:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f728:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f72c:	31 c0                	xor    eax,eax
c000f72e:	eb 0b                	jmp    c000f73b <hwTextMode_scrollScreen(VgaText*)+0x4e>
c000f730:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f736:	74 57                	je     c000f78f <hwTextMode_scrollScreen(VgaText*)+0xa2>
c000f738:	43                   	inc    ebx
c000f739:	89 f0                	mov    eax,esi
c000f73b:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000f741:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000f747:	88 13                	mov    BYTE PTR [ebx],dl
c000f749:	8d 70 01             	lea    esi,[eax+0x1]
c000f74c:	83 fd 18             	cmp    ebp,0x18
c000f74f:	75 df                	jne    c000f730 <hwTextMode_scrollScreen(VgaText*)+0x43>
c000f751:	a8 01                	test   al,0x1
c000f753:	75 13                	jne    c000f768 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000f755:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000f758:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f75e:	75 d8                	jne    c000f738 <hwTextMode_scrollScreen(VgaText*)+0x4b>
c000f760:	83 c4 1c             	add    esp,0x1c
c000f763:	5b                   	pop    ebx
c000f764:	5e                   	pop    esi
c000f765:	5f                   	pop    edi
c000f766:	5d                   	pop    ebp
c000f767:	c3                   	ret    
c000f768:	83 ec 08             	sub    esp,0x8
c000f76b:	0f b6 81 cc 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfcc]
c000f772:	50                   	push   eax
c000f773:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000f777:	0f b6 81 d0 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfd0]
c000f77e:	50                   	push   eax
c000f77f:	e8 fe 0b 00 00       	call   c0010382 <VgaText::combineColours(unsigned char, unsigned char)>
c000f784:	83 c4 10             	add    esp,0x10
c000f787:	88 07                	mov    BYTE PTR [edi],al
c000f789:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f78d:	eb c9                	jmp    c000f758 <hwTextMode_scrollScreen(VgaText*)+0x6b>
c000f78f:	45                   	inc    ebp
c000f790:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000f798:	eb 8e                	jmp    c000f728 <hwTextMode_scrollScreen(VgaText*)+0x3b>

c000f79a <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000f79a:	56                   	push   esi
c000f79b:	53                   	push   ebx
c000f79c:	53                   	push   ebx
c000f79d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f7a1:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000f7a5:	80 3d e0 c9 02 c0 00 	cmp    BYTE PTR ds:0xc002c9e0,0x0
c000f7ac:	75 5b                	jne    c000f809 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x6f>
c000f7ae:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000f7b3:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000f7b8:	83 ec 08             	sub    esp,0x8
c000f7bb:	52                   	push   edx
c000f7bc:	50                   	push   eax
c000f7bd:	e8 c0 0b 00 00       	call   c0010382 <VgaText::combineColours(unsigned char, unsigned char)>
c000f7c2:	5a                   	pop    edx
c000f7c3:	0f b6 c0             	movzx  eax,al
c000f7c6:	59                   	pop    ecx
c000f7c7:	50                   	push   eax
c000f7c8:	0f be c3             	movsx  eax,bl
c000f7cb:	66 0f be db          	movsx  bx,bl
c000f7cf:	50                   	push   eax
c000f7d0:	80 cf 02             	or     bh,0x2
c000f7d3:	e8 50 0c 00 00       	call   c0010428 <VgaText::combineCharAndColour(char, unsigned char)>
c000f7d8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000f7dc:	b8 19 00 00 00       	mov    eax,0x19
c000f7e1:	2b 82 ac 0f 00 00    	sub    eax,DWORD PTR [edx+0xfac]
c000f7e7:	8d 14 b6             	lea    edx,[esi+esi*4]
c000f7ea:	8d 04 80             	lea    eax,[eax+eax*4]
c000f7ed:	c1 e2 04             	shl    edx,0x4
c000f7f0:	c1 e0 04             	shl    eax,0x4
c000f7f3:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
c000f7f7:	01 d0                	add    eax,edx
c000f7f9:	8b 15 80 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b880
c000f7ff:	66 89 1c 42          	mov    WORD PTR [edx+eax*2],bx
c000f803:	83 c4 14             	add    esp,0x14
c000f806:	5b                   	pop    ebx
c000f807:	5e                   	pop    esi
c000f808:	c3                   	ret    
c000f809:	b8 02 00 00 00       	mov    eax,0x2
c000f80e:	31 d2                	xor    edx,edx
c000f810:	eb a6                	jmp    c000f7b8 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000f812 <setupTextMode()>:
c000f812:	a1 10 04 00 00       	mov    eax,ds:0x410
c000f817:	83 e0 30             	and    eax,0x30
c000f81a:	66 83 f8 30          	cmp    ax,0x30
c000f81e:	74 11                	je     c000f831 <setupTextMode()+0x1f>
c000f820:	81 2d 80 b8 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002b880,0x8000
c000f82a:	c6 05 e0 c9 02 c0 01 	mov    BYTE PTR ds:0xc002c9e0,0x1
c000f831:	c7 05 18 ca 02 c0 a7 f6 00 c0 	mov    DWORD PTR ds:0xc002ca18,0xc000f6a7
c000f83b:	c7 05 04 ca 02 c0 2e f5 00 c0 	mov    DWORD PTR ds:0xc002ca04,0xc000f52e
c000f845:	c7 05 00 ca 02 c0 79 f5 00 c0 	mov    DWORD PTR ds:0xc002ca00,0xc000f579
c000f84f:	c7 05 0c ca 02 c0 ed f6 00 c0 	mov    DWORD PTR ds:0xc002ca0c,0xc000f6ed
c000f859:	c7 05 14 ca 02 c0 f7 f5 00 c0 	mov    DWORD PTR ds:0xc002ca14,0xc000f5f7
c000f863:	c7 05 08 ca 02 c0 55 f6 00 c0 	mov    DWORD PTR ds:0xc002ca08,0xc000f655
c000f86d:	c7 05 10 ca 02 c0 56 f6 00 c0 	mov    DWORD PTR ds:0xc002ca10,0xc000f656
c000f877:	c7 05 1c ca 02 c0 9a f7 00 c0 	mov    DWORD PTR ds:0xc002ca1c,0xc000f79a
c000f881:	c3                   	ret    

c000f882 <kernel_main>:
c000f882:	57                   	push   edi
c000f883:	bf f9 03 00 00       	mov    edi,0x3f9
c000f888:	56                   	push   esi
c000f889:	31 f6                	xor    esi,esi
c000f88b:	53                   	push   ebx
c000f88c:	83 ec 10             	sub    esp,0x10
c000f88f:	e8 48 09 00 00       	call   c00101dc <installVgaTextImplementation()>
c000f894:	e8 79 ff ff ff       	call   c000f812 <setupTextMode()>
c000f899:	89 f0                	mov    eax,esi
c000f89b:	89 fa                	mov    edx,edi
c000f89d:	ee                   	out    dx,al
c000f89e:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f8a3:	b0 80                	mov    al,0x80
c000f8a5:	89 da                	mov    edx,ebx
c000f8a7:	ee                   	out    dx,al
c000f8a8:	b1 03                	mov    cl,0x3
c000f8aa:	ba f8 03 00 00       	mov    edx,0x3f8
c000f8af:	88 c8                	mov    al,cl
c000f8b1:	ee                   	out    dx,al
c000f8b2:	89 f0                	mov    eax,esi
c000f8b4:	89 fa                	mov    edx,edi
c000f8b6:	ee                   	out    dx,al
c000f8b7:	88 c8                	mov    al,cl
c000f8b9:	89 da                	mov    edx,ebx
c000f8bb:	ee                   	out    dx,al
c000f8bc:	b0 c7                	mov    al,0xc7
c000f8be:	ba fa 03 00 00       	mov    edx,0x3fa
c000f8c3:	ee                   	out    dx,al
c000f8c4:	b0 0b                	mov    al,0xb
c000f8c6:	ba fc 03 00 00       	mov    edx,0x3fc
c000f8cb:	ee                   	out    dx,al
c000f8cc:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f8d1:	83 ec 0c             	sub    esp,0xc
c000f8d4:	05 ff 0f 00 00       	add    eax,0xfff
c000f8d9:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f8de:	50                   	push   eax
c000f8df:	e8 b3 03 00 00       	call   c000fc97 <Phys::physicalMemorySetup(unsigned int)>
c000f8e4:	e8 a7 1f 00 00       	call   c0011890 <Virt::virtualMemorySetup()>
c000f8e9:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000f8ef:	83 c4 10             	add    esp,0x10
c000f8f2:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000f8f8:	75 0e                	jne    c000f908 <kernel_main+0x86>
c000f8fa:	89 d8                	mov    eax,ebx
c000f8fc:	25 48 03 00 00       	and    eax,0x348
c000f901:	3d 00 03 00 00       	cmp    eax,0x300
c000f906:	74 10                	je     c000f918 <kernel_main+0x96>
c000f908:	83 ec 0c             	sub    esp,0xc
c000f90b:	68 5c a2 02 c0       	push   0xc002a25c
c000f910:	e8 74 9f 00 00       	call   c0019889 <Krnl::panic(char const*)>
c000f915:	83 c4 10             	add    esp,0x10
c000f918:	83 ec 0c             	sub    esp,0xc
c000f91b:	89 1d 60 c9 02 c0    	mov    DWORD PTR ds:0xc002c960,ebx
c000f921:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f925:	53                   	push   ebx
c000f926:	e8 19 21 00 00       	call   c0011a44 <VAS::VAS()>
c000f92b:	89 1d c4 ca 02 c0    	mov    DWORD PTR ds:0xc002cac4,ebx
c000f931:	e8 ea 06 ff ff       	call   c0000020 <callGlobalConstructors>
c000f936:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000f93d:	e8 92 fb ff ff       	call   c000f4d4 <malloc>
c000f942:	89 04 24             	mov    DWORD PTR [esp],eax
c000f945:	89 c6                	mov    esi,eax
c000f947:	e8 9e e9 ff ff       	call   c000e2ea <Computer::Computer()>
c000f94c:	6a 00                	push   0x0
c000f94e:	89 35 48 c9 02 c0    	mov    DWORD PTR ds:0xc002c948,esi
c000f954:	6a 00                	push   0x0
c000f956:	6a 00                	push   0x0
c000f958:	56                   	push   esi
c000f959:	e8 c0 f1 ff ff       	call   c000eb1e <Computer::open(int, int, void*)>
c000f95e:	83 c4 14             	add    esp,0x14
c000f961:	53                   	push   ebx
c000f962:	e8 77 23 00 00       	call   c0011cde <VAS::~VAS()>
c000f967:	c7 04 24 6c 8b 02 c0 	mov    DWORD PTR [esp],0xc0028b6c
c000f96e:	e8 16 9f 00 00       	call   c0019889 <Krnl::panic(char const*)>
c000f973:	83 c4 20             	add    esp,0x20
c000f976:	5b                   	pop    ebx
c000f977:	5e                   	pop    esi
c000f978:	5f                   	pop    edi
c000f979:	c3                   	ret    

c000f97a <Phys::allocateDMA(unsigned long)>:
c000f97a:	55                   	push   ebp
c000f97b:	31 d2                	xor    edx,edx
c000f97d:	57                   	push   edi
c000f97e:	31 ed                	xor    ebp,ebp
c000f980:	56                   	push   esi
c000f981:	31 c9                	xor    ecx,ecx
c000f983:	53                   	push   ebx
c000f984:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f988:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000f98e:	31 c0                	xor    eax,eax
c000f990:	c1 ee 0c             	shr    esi,0xc
c000f993:	eb 17                	jmp    c000f9ac <Phys::allocateDMA(unsigned long)+0x32>
c000f995:	85 c9                	test   ecx,ecx
c000f997:	75 04                	jne    c000f99d <Phys::allocateDMA(unsigned long)+0x23>
c000f999:	89 d5                	mov    ebp,edx
c000f99b:	89 d0                	mov    eax,edx
c000f99d:	8d 59 01             	lea    ebx,[ecx+0x1]
c000f9a0:	39 de                	cmp    esi,ebx
c000f9a2:	74 20                	je     c000f9c4 <Phys::allocateDMA(unsigned long)+0x4a>
c000f9a4:	42                   	inc    edx
c000f9a5:	89 d9                	mov    ecx,ebx
c000f9a7:	83 fa 2f             	cmp    edx,0x2f
c000f9aa:	7f 11                	jg     c000f9bd <Phys::allocateDMA(unsigned long)+0x43>
c000f9ac:	80 ba a0 c9 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd3660],0x0
c000f9b3:	74 e0                	je     c000f995 <Phys::allocateDMA(unsigned long)+0x1b>
c000f9b5:	31 c9                	xor    ecx,ecx
c000f9b7:	42                   	inc    edx
c000f9b8:	83 fa 2f             	cmp    edx,0x2f
c000f9bb:	7e ef                	jle    c000f9ac <Phys::allocateDMA(unsigned long)+0x32>
c000f9bd:	5b                   	pop    ebx
c000f9be:	31 c0                	xor    eax,eax
c000f9c0:	5e                   	pop    esi
c000f9c1:	5f                   	pop    edi
c000f9c2:	5d                   	pop    ebp
c000f9c3:	c3                   	ret    
c000f9c4:	8d 14 30             	lea    edx,[eax+esi*1]
c000f9c7:	89 d7                	mov    edi,edx
c000f9c9:	4f                   	dec    edi
c000f9ca:	79 03                	jns    c000f9cf <Phys::allocateDMA(unsigned long)+0x55>
c000f9cc:	8d 7a 0e             	lea    edi,[edx+0xe]
c000f9cf:	c1 ff 04             	sar    edi,0x4
c000f9d2:	89 c2                	mov    edx,eax
c000f9d4:	c1 fa 04             	sar    edx,0x4
c000f9d7:	39 fa                	cmp    edx,edi
c000f9d9:	75 2f                	jne    c000fa0a <Phys::allocateDMA(unsigned long)+0x90>
c000f9db:	85 db                	test   ebx,ebx
c000f9dd:	74 1a                	je     c000f9f9 <Phys::allocateDMA(unsigned long)+0x7f>
c000f9df:	be a0 c9 02 c0       	mov    esi,0xc002c9a0
c000f9e4:	8d 90 a0 c9 02 c0    	lea    edx,[eax-0x3ffd3660]
c000f9ea:	f7 d6                	not    esi
c000f9ec:	29 c6                	sub    esi,eax
c000f9ee:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000f9f1:	42                   	inc    edx
c000f9f2:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000f9f5:	39 d9                	cmp    ecx,ebx
c000f9f7:	7f f5                	jg     c000f9ee <Phys::allocateDMA(unsigned long)+0x74>
c000f9f9:	85 ff                	test   edi,edi
c000f9fb:	74 13                	je     c000fa10 <Phys::allocateDMA(unsigned long)+0x96>
c000f9fd:	5b                   	pop    ebx
c000f9fe:	05 50 20 0c 00       	add    eax,0xc2050
c000fa03:	5e                   	pop    esi
c000fa04:	c1 e0 0c             	shl    eax,0xc
c000fa07:	5f                   	pop    edi
c000fa08:	5d                   	pop    ebp
c000fa09:	c3                   	ret    
c000fa0a:	89 ea                	mov    edx,ebp
c000fa0c:	31 c9                	xor    ecx,ecx
c000fa0e:	eb a7                	jmp    c000f9b7 <Phys::allocateDMA(unsigned long)+0x3d>
c000fa10:	5b                   	pop    ebx
c000fa11:	c1 e0 0c             	shl    eax,0xc
c000fa14:	5e                   	pop    esi
c000fa15:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fa1a:	5f                   	pop    edi
c000fa1b:	5d                   	pop    ebp
c000fa1c:	c3                   	ret    

c000fa1d <Phys::freeDMA(unsigned long, unsigned long)>:
c000fa1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fa21:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fa25:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fa2b:	c1 e9 0c             	shr    ecx,0xc
c000fa2e:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fa33:	76 25                	jbe    c000fa5a <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fa35:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fa3a:	c1 e8 0c             	shr    eax,0xc
c000fa3d:	8d 50 10             	lea    edx,[eax+0x10]
c000fa40:	85 c9                	test   ecx,ecx
c000fa42:	74 15                	je     c000fa59 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fa44:	8d 82 a0 c9 02 c0    	lea    eax,[edx-0x3ffd3660]
c000fa4a:	8d 94 11 a0 c9 02 c0 	lea    edx,[ecx+edx*1-0x3ffd3660]
c000fa51:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fa54:	40                   	inc    eax
c000fa55:	39 d0                	cmp    eax,edx
c000fa57:	75 f8                	jne    c000fa51 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fa59:	c3                   	ret    
c000fa5a:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fa60:	c1 ea 0c             	shr    edx,0xc
c000fa63:	eb db                	jmp    c000fa40 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fa65 <Phys::setPageState(unsigned long, bool)>:
c000fa65:	56                   	push   esi
c000fa66:	ba 01 00 00 00       	mov    edx,0x1
c000fa6b:	53                   	push   ebx
c000fa6c:	8b 35 70 b8 02 c0    	mov    esi,DWORD PTR ds:0xc002b870
c000fa72:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fa76:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fa7a:	89 c8                	mov    eax,ecx
c000fa7c:	83 e1 07             	and    ecx,0x7
c000fa7f:	c1 e8 03             	shr    eax,0x3
c000fa82:	d3 e3                	shl    ebx,cl
c000fa84:	01 c6                	add    esi,eax
c000fa86:	d3 e2                	shl    edx,cl
c000fa88:	f7 d2                	not    edx
c000fa8a:	20 16                	and    BYTE PTR [esi],dl
c000fa8c:	03 05 70 b8 02 c0    	add    eax,DWORD PTR ds:0xc002b870
c000fa92:	08 18                	or     BYTE PTR [eax],bl
c000fa94:	5b                   	pop    ebx
c000fa95:	5e                   	pop    esi
c000fa96:	c3                   	ret    

c000fa97 <Phys::getPageState(unsigned long)>:
c000fa97:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fa9b:	8b 15 70 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b870
c000faa1:	89 c8                	mov    eax,ecx
c000faa3:	83 e1 07             	and    ecx,0x7
c000faa6:	c1 e8 03             	shr    eax,0x3
c000faa9:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000faad:	d3 f8                	sar    eax,cl
c000faaf:	83 e0 01             	and    eax,0x1
c000fab2:	c3                   	ret    

c000fab3 <Phys::freePage(unsigned long)>:
c000fab3:	53                   	push   ebx
c000fab4:	83 ec 08             	sub    esp,0x8
c000fab7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fabb:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fac1:	76 57                	jbe    c000fb1a <Phys::freePage(unsigned long)+0x67>
c000fac3:	c1 eb 0c             	shr    ebx,0xc
c000fac6:	53                   	push   ebx
c000fac7:	e8 cb ff ff ff       	call   c000fa97 <Phys::getPageState(unsigned long)>
c000facc:	5a                   	pop    edx
c000facd:	84 c0                	test   al,al
c000facf:	74 5b                	je     c000fb2c <Phys::freePage(unsigned long)+0x79>
c000fad1:	a1 8c c9 02 c0       	mov    eax,ds:0xc002c98c
c000fad6:	48                   	dec    eax
c000fad7:	a3 8c c9 02 c0       	mov    ds:0xc002c98c,eax
c000fadc:	8d 04 80             	lea    eax,[eax+eax*4]
c000fadf:	8d 04 80             	lea    eax,[eax+eax*4]
c000fae2:	c1 e0 02             	shl    eax,0x2
c000fae5:	99                   	cdq    
c000fae6:	f7 3d 90 c9 02 c0    	idiv   DWORD PTR ds:0xc002c990
c000faec:	39 05 88 c9 02 c0    	cmp    DWORD PTR ds:0xc002c988,eax
c000faf2:	75 13                	jne    c000fb07 <Phys::freePage(unsigned long)+0x54>
c000faf4:	83 ec 08             	sub    esp,0x8
c000faf7:	6a 00                	push   0x0
c000faf9:	53                   	push   ebx
c000fafa:	e8 66 ff ff ff       	call   c000fa65 <Phys::setPageState(unsigned long, bool)>
c000faff:	83 c4 10             	add    esp,0x10
c000fb02:	83 c4 08             	add    esp,0x8
c000fb05:	5b                   	pop    ebx
c000fb06:	c3                   	ret    
c000fb07:	83 ec 0c             	sub    esp,0xc
c000fb0a:	a3 88 c9 02 c0       	mov    ds:0xc002c988,eax
c000fb0f:	50                   	push   eax
c000fb10:	e8 5b 0a 00 00       	call   c0010570 <VgaText::updateRAMUsageDisplay(int)>
c000fb15:	83 c4 10             	add    esp,0x10
c000fb18:	eb da                	jmp    c000faf4 <Phys::freePage(unsigned long)+0x41>
c000fb1a:	68 00 10 00 00       	push   0x1000
c000fb1f:	53                   	push   ebx
c000fb20:	e8 f8 fe ff ff       	call   c000fa1d <Phys::freeDMA(unsigned long, unsigned long)>
c000fb25:	59                   	pop    ecx
c000fb26:	5b                   	pop    ebx
c000fb27:	83 c4 08             	add    esp,0x8
c000fb2a:	5b                   	pop    ebx
c000fb2b:	c3                   	ret    
c000fb2c:	c7 44 24 10 87 8b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0028b87
c000fb34:	83 c4 08             	add    esp,0x8
c000fb37:	5b                   	pop    ebx
c000fb38:	e9 4c 9d 00 00       	jmp    c0019889 <Krnl::panic(char const*)>

c000fb3d <Phys::allocatePage()>:
c000fb3d:	56                   	push   esi
c000fb3e:	53                   	push   ebx
c000fb3f:	51                   	push   ecx
c000fb40:	8b 35 80 c9 02 c0    	mov    esi,DWORD PTR ds:0xc002c980
c000fb46:	89 f3                	mov    ebx,esi
c000fb48:	eb 0a                	jmp    c000fb54 <Phys::allocatePage()+0x17>
c000fb4a:	89 1d 80 c9 02 c0    	mov    DWORD PTR ds:0xc002c980,ebx
c000fb50:	39 de                	cmp    esi,ebx
c000fb52:	74 24                	je     c000fb78 <Phys::allocatePage()+0x3b>
c000fb54:	53                   	push   ebx
c000fb55:	e8 3d ff ff ff       	call   c000fa97 <Phys::getPageState(unsigned long)>
c000fb5a:	5a                   	pop    edx
c000fb5b:	84 c0                	test   al,al
c000fb5d:	74 5a                	je     c000fbb9 <Phys::allocatePage()+0x7c>
c000fb5f:	43                   	inc    ebx
c000fb60:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fb66:	75 e2                	jne    c000fb4a <Phys::allocatePage()+0xd>
c000fb68:	31 db                	xor    ebx,ebx
c000fb6a:	c7 05 80 c9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c980,0x0
c000fb74:	39 de                	cmp    esi,ebx
c000fb76:	75 dc                	jne    c000fb54 <Phys::allocatePage()+0x17>
c000fb78:	83 ec 0c             	sub    esp,0xc
c000fb7b:	68 9d 8b 02 c0       	push   0xc0028b9d
c000fb80:	e8 ea 2b 00 00       	call   c001276f <Dbg::kprintf(char const*, ...)>
c000fb85:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000fb8c:	e8 e9 fd ff ff       	call   c000f97a <Phys::allocateDMA(unsigned long)>
c000fb91:	83 c4 10             	add    esp,0x10
c000fb94:	85 c0                	test   eax,eax
c000fb96:	75 56                	jne    c000fbee <Phys::allocatePage()+0xb1>
c000fb98:	83 ec 0c             	sub    esp,0xc
c000fb9b:	68 ae 8b 02 c0       	push   0xc0028bae
c000fba0:	e8 e4 9c 00 00       	call   c0019889 <Krnl::panic(char const*)>
c000fba5:	83 c4 10             	add    esp,0x10
c000fba8:	8b 1d 80 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c980
c000fbae:	53                   	push   ebx
c000fbaf:	e8 e3 fe ff ff       	call   c000fa97 <Phys::getPageState(unsigned long)>
c000fbb4:	5a                   	pop    edx
c000fbb5:	84 c0                	test   al,al
c000fbb7:	75 a6                	jne    c000fb5f <Phys::allocatePage()+0x22>
c000fbb9:	6a 01                	push   0x1
c000fbbb:	53                   	push   ebx
c000fbbc:	e8 a4 fe ff ff       	call   c000fa65 <Phys::setPageState(unsigned long, bool)>
c000fbc1:	a1 8c c9 02 c0       	mov    eax,ds:0xc002c98c
c000fbc6:	59                   	pop    ecx
c000fbc7:	40                   	inc    eax
c000fbc8:	5b                   	pop    ebx
c000fbc9:	a3 8c c9 02 c0       	mov    ds:0xc002c98c,eax
c000fbce:	8d 04 80             	lea    eax,[eax+eax*4]
c000fbd1:	8d 04 80             	lea    eax,[eax+eax*4]
c000fbd4:	c1 e0 02             	shl    eax,0x2
c000fbd7:	99                   	cdq    
c000fbd8:	f7 3d 90 c9 02 c0    	idiv   DWORD PTR ds:0xc002c990
c000fbde:	39 05 88 c9 02 c0    	cmp    DWORD PTR ds:0xc002c988,eax
c000fbe4:	75 0c                	jne    c000fbf2 <Phys::allocatePage()+0xb5>
c000fbe6:	a1 80 c9 02 c0       	mov    eax,ds:0xc002c980
c000fbeb:	c1 e0 0c             	shl    eax,0xc
c000fbee:	5a                   	pop    edx
c000fbef:	5b                   	pop    ebx
c000fbf0:	5e                   	pop    esi
c000fbf1:	c3                   	ret    
c000fbf2:	83 ec 0c             	sub    esp,0xc
c000fbf5:	a3 88 c9 02 c0       	mov    ds:0xc002c988,eax
c000fbfa:	50                   	push   eax
c000fbfb:	e8 70 09 00 00       	call   c0010570 <VgaText::updateRAMUsageDisplay(int)>
c000fc00:	83 c4 10             	add    esp,0x10
c000fc03:	eb e1                	jmp    c000fbe6 <Phys::allocatePage()+0xa9>

c000fc05 <Phys::allocateContiguousPages(int)>:
c000fc05:	57                   	push   edi
c000fc06:	56                   	push   esi
c000fc07:	53                   	push   ebx
c000fc08:	31 db                	xor    ebx,ebx
c000fc0a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000fc0e:	e8 05 d1 00 00       	call   c001cd18 <lockScheduler()>
c000fc13:	85 db                	test   ebx,ebx
c000fc15:	75 11                	jne    c000fc28 <Phys::allocateContiguousPages(int)+0x23>
c000fc17:	e8 21 ff ff ff       	call   c000fb3d <Phys::allocatePage()>
c000fc1c:	83 ff 01             	cmp    edi,0x1
c000fc1f:	89 c6                	mov    esi,eax
c000fc21:	74 21                	je     c000fc44 <Phys::allocateContiguousPages(int)+0x3f>
c000fc23:	bb 01 00 00 00       	mov    ebx,0x1
c000fc28:	e8 10 ff ff ff       	call   c000fb3d <Phys::allocatePage()>
c000fc2d:	89 da                	mov    edx,ebx
c000fc2f:	c1 e2 0c             	shl    edx,0xc
c000fc32:	01 f2                	add    edx,esi
c000fc34:	39 c2                	cmp    edx,eax
c000fc36:	74 17                	je     c000fc4f <Phys::allocateContiguousPages(int)+0x4a>
c000fc38:	bb 01 00 00 00       	mov    ebx,0x1
c000fc3d:	89 c6                	mov    esi,eax
c000fc3f:	83 ff 01             	cmp    edi,0x1
c000fc42:	75 e4                	jne    c000fc28 <Phys::allocateContiguousPages(int)+0x23>
c000fc44:	e8 d1 d0 00 00       	call   c001cd1a <unlockScheduler()>
c000fc49:	89 f0                	mov    eax,esi
c000fc4b:	5b                   	pop    ebx
c000fc4c:	5e                   	pop    esi
c000fc4d:	5f                   	pop    edi
c000fc4e:	c3                   	ret    
c000fc4f:	43                   	inc    ebx
c000fc50:	39 fb                	cmp    ebx,edi
c000fc52:	75 bf                	jne    c000fc13 <Phys::allocateContiguousPages(int)+0xe>
c000fc54:	e8 c1 d0 00 00       	call   c001cd1a <unlockScheduler()>
c000fc59:	89 f0                	mov    eax,esi
c000fc5b:	5b                   	pop    ebx
c000fc5c:	5e                   	pop    esi
c000fc5d:	5f                   	pop    edi
c000fc5e:	c3                   	ret    

c000fc5f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fc5f:	56                   	push   esi
c000fc60:	53                   	push   ebx
c000fc61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fc65:	39 1d 84 c9 02 c0    	cmp    DWORD PTR ds:0xc002c984,ebx
c000fc6b:	73 06                	jae    c000fc73 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000fc6d:	89 1d 84 c9 02 c0    	mov    DWORD PTR ds:0xc002c984,ebx
c000fc73:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fc77:	c1 eb 0c             	shr    ebx,0xc
c000fc7a:	c1 e8 0c             	shr    eax,0xc
c000fc7d:	39 d8                	cmp    eax,ebx
c000fc7f:	73 13                	jae    c000fc94 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fc81:	6a 00                	push   0x0
c000fc83:	8d 70 01             	lea    esi,[eax+0x1]
c000fc86:	50                   	push   eax
c000fc87:	e8 d9 fd ff ff       	call   c000fa65 <Phys::setPageState(unsigned long, bool)>
c000fc8c:	5a                   	pop    edx
c000fc8d:	89 f0                	mov    eax,esi
c000fc8f:	59                   	pop    ecx
c000fc90:	39 f3                	cmp    ebx,esi
c000fc92:	75 ed                	jne    c000fc81 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fc94:	5b                   	pop    ebx
c000fc95:	5e                   	pop    esi
c000fc96:	c3                   	ret    

c000fc97 <Phys::physicalMemorySetup(unsigned int)>:
c000fc97:	55                   	push   ebp
c000fc98:	57                   	push   edi
c000fc99:	56                   	push   esi
c000fc9a:	53                   	push   ebx
c000fc9b:	31 db                	xor    ebx,ebx
c000fc9d:	83 ec 40             	sub    esp,0x40
c000fca0:	6a 30                	push   0x30
c000fca2:	6a 00                	push   0x0
c000fca4:	68 a0 c9 02 c0       	push   0xc002c9a0
c000fca9:	e8 dd 09 ff ff       	call   c000068b <memset>
c000fcae:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fcb2:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fcb7:	05 00 10 00 00       	add    eax,0x1000
c000fcbc:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000fcc0:	83 c4 10             	add    esp,0x10
c000fcc3:	83 ec 08             	sub    esp,0x8
c000fcc6:	6a 01                	push   0x1
c000fcc8:	53                   	push   ebx
c000fcc9:	43                   	inc    ebx
c000fcca:	e8 96 fd ff ff       	call   c000fa65 <Phys::setPageState(unsigned long, bool)>
c000fccf:	83 c4 10             	add    esp,0x10
c000fcd2:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fcd8:	75 e9                	jne    c000fcc3 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000fcda:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fce1:	66 85 c0             	test   ax,ax
c000fce4:	0f 84 8e 01 00 00    	je     c000fe78 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c000fcea:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fcee:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fcf6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fcfa:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fcff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fd03:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fd0b:	eb 15                	jmp    c000fd22 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c000fd0d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000fd11:	83 c3 18             	add    ebx,0x18
c000fd14:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd18:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000fd1c:	0f 84 66 01 00 00    	je     c000fe88 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fd22:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000fd25:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000fd28:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000fd2b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fd2f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fd33:	8b 33                	mov    esi,DWORD PTR [ebx]
c000fd35:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000fd38:	01 f0                	add    eax,esi
c000fd3a:	55                   	push   ebp
c000fd3b:	11 fa                	adc    edx,edi
c000fd3d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fd41:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000fd45:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fd49:	56                   	push   esi
c000fd4a:	68 e8 8b 02 c0       	push   0xc0028be8
c000fd4f:	e8 1b 2a 00 00       	call   c001276f <Dbg::kprintf(char const*, ...)>
c000fd54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fd58:	83 c4 10             	add    esp,0x10
c000fd5b:	09 f8                	or     eax,edi
c000fd5d:	0f 85 25 01 00 00    	jne    c000fe88 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fd63:	4d                   	dec    ebp
c000fd64:	75 a7                	jne    c000fd0d <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fd66:	ba 00 00 08 00       	mov    edx,0x80000
c000fd6b:	89 c1                	mov    ecx,eax
c000fd6d:	39 f2                	cmp    edx,esi
c000fd6f:	19 f9                	sbb    ecx,edi
c000fd71:	0f 82 a7 00 00 00    	jb     c000fe1e <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fd77:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000fd7b:	89 c1                	mov    ecx,eax
c000fd7d:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000fd81:	0f 83 97 00 00 00    	jae    c000fe1e <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fd87:	ba 00 00 0a 00       	mov    edx,0xa0000
c000fd8c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fd90:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fd94:	39 fa                	cmp    edx,edi
c000fd96:	19 e8                	sbb    eax,ebp
c000fd98:	0f 82 14 01 00 00    	jb     c000feb2 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c000fd9e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fda2:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fda6:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000fdac:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fdb1:	83 d5 ff             	adc    ebp,0xffffffff
c000fdb4:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000fdb8:	31 c0                	xor    eax,eax
c000fdba:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000fdbe:	39 fa                	cmp    edx,edi
c000fdc0:	89 c1                	mov    ecx,eax
c000fdc2:	19 e9                	sbb    ecx,ebp
c000fdc4:	0f 83 43 ff ff ff    	jae    c000fd0d <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fdca:	be 00 00 08 00       	mov    esi,0x80000
c000fdcf:	50                   	push   eax
c000fdd0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000fdd4:	57                   	push   edi
c000fdd5:	56                   	push   esi
c000fdd6:	68 0c 8c 02 c0       	push   0xc0028c0c
c000fddb:	e8 8f 29 00 00       	call   c001276f <Dbg::kprintf(char const*, ...)>
c000fde0:	5a                   	pop    edx
c000fde1:	59                   	pop    ecx
c000fde2:	57                   	push   edi
c000fde3:	56                   	push   esi
c000fde4:	e8 76 fe ff ff       	call   c000fc5f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000fde9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000fded:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fdf1:	83 c4 0c             	add    esp,0xc
c000fdf4:	0f ac d0 0c          	shrd   eax,edx,0xc
c000fdf8:	03 05 90 c9 02 c0    	add    eax,DWORD PTR ds:0xc002c990
c000fdfe:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fe05:	a3 90 c9 02 c0       	mov    ds:0xc002c990,eax
c000fe0a:	52                   	push   edx
c000fe0b:	50                   	push   eax
c000fe0c:	68 ca 8b 02 c0       	push   0xc0028bca
c000fe11:	e8 59 29 00 00       	call   c001276f <Dbg::kprintf(char const*, ...)>
c000fe16:	83 c4 10             	add    esp,0x10
c000fe19:	e9 ef fe ff ff       	jmp    c000fd0d <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fe1e:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000fe22:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fe26:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe2a:	39 ea                	cmp    edx,ebp
c000fe2c:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000fe30:	0f 82 d7 fe ff ff    	jb     c000fd0d <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fe36:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fe3b:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000fe3f:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000fe43:	0f 83 c4 fe ff ff    	jae    c000fd0d <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fe49:	39 ee                	cmp    esi,ebp
c000fe4b:	89 f8                	mov    eax,edi
c000fe4d:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000fe51:	0f 83 78 ff ff ff    	jae    c000fdcf <Phys::physicalMemorySetup(unsigned int)+0x138>
c000fe57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fe5b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fe5f:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000fe63:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000fe67:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000fe6b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fe6f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fe73:	e9 57 ff ff ff       	jmp    c000fdcf <Phys::physicalMemorySetup(unsigned int)+0x138>
c000fe78:	83 ec 0c             	sub    esp,0xc
c000fe7b:	68 bc 8b 02 c0       	push   0xc0028bbc
c000fe80:	e8 04 9a 00 00       	call   c0019889 <Krnl::panic(char const*)>
c000fe85:	83 c4 10             	add    esp,0x10
c000fe88:	bb 40 01 00 00       	mov    ebx,0x140
c000fe8d:	83 ec 08             	sub    esp,0x8
c000fe90:	6a 00                	push   0x0
c000fe92:	53                   	push   ebx
c000fe93:	43                   	inc    ebx
c000fe94:	e8 cc fb ff ff       	call   c000fa65 <Phys::setPageState(unsigned long, bool)>
c000fe99:	ff 05 90 c9 02 c0    	inc    DWORD PTR ds:0xc002c990
c000fe9f:	83 c4 10             	add    esp,0x10
c000fea2:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000fea8:	75 e3                	jne    c000fe8d <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c000feaa:	83 c4 3c             	add    esp,0x3c
c000fead:	5b                   	pop    ebx
c000feae:	5e                   	pop    esi
c000feaf:	5f                   	pop    edi
c000feb0:	5d                   	pop    ebp
c000feb1:	c3                   	ret    
c000feb2:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000feba:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fec2:	e9 d7 fe ff ff       	jmp    c000fd9e <Phys::physicalMemorySetup(unsigned int)+0x107>
c000fec7:	90                   	nop

c000fec8 <Pipe::isAtty()>:
c000fec8:	31 c0                	xor    eax,eax
c000feca:	c3                   	ret    
c000fecb:	90                   	nop

c000fecc <Pipe::~Pipe()>:
c000fecc:	83 ec 0c             	sub    esp,0xc
c000fecf:	ba 78 8c 02 c0       	mov    edx,0xc0028c78
c000fed4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fed8:	89 10                	mov    DWORD PTR [eax],edx
c000feda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fede:	83 ec 0c             	sub    esp,0xc
c000fee1:	50                   	push   eax
c000fee2:	e8 37 16 00 00       	call   c001151e <UnixFile::~UnixFile()>
c000fee7:	83 c4 10             	add    esp,0x10
c000feea:	90                   	nop
c000feeb:	83 c4 0c             	add    esp,0xc
c000feee:	c3                   	ret    
c000feef:	90                   	nop

c000fef0 <Pipe::~Pipe()>:
c000fef0:	83 ec 0c             	sub    esp,0xc
c000fef3:	83 ec 0c             	sub    esp,0xc
c000fef6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fefa:	e8 cd ff ff ff       	call   c000fecc <Pipe::~Pipe()>
c000feff:	83 c4 10             	add    esp,0x10
c000ff02:	83 ec 08             	sub    esp,0x8
c000ff05:	6a 20                	push   0x20
c000ff07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff0b:	e8 7f 27 00 00       	call   c001268f <operator delete(void*, unsigned long)>
c000ff10:	83 c4 10             	add    esp,0x10
c000ff13:	83 c4 0c             	add    esp,0xc
c000ff16:	c3                   	ret    
c000ff17:	90                   	nop

c000ff18 <Pipe::read(unsigned long long, void*, int*)>:
c000ff18:	55                   	push   ebp
c000ff19:	57                   	push   edi
c000ff1a:	56                   	push   esi
c000ff1b:	53                   	push   ebx
c000ff1c:	83 ec 1c             	sub    esp,0x1c
c000ff1f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000ff23:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000ff27:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ff2b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000ff2e:	89 c8                	mov    eax,ecx
c000ff30:	99                   	cdq    
c000ff31:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000ff35:	74 19                	je     c000ff50 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000ff37:	39 f9                	cmp    ecx,edi
c000ff39:	89 d1                	mov    ecx,edx
c000ff3b:	19 f1                	sbb    ecx,esi
c000ff3d:	73 11                	jae    c000ff50 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000ff3f:	e8 d4 cd 00 00       	call   c001cd18 <lockScheduler()>
c000ff44:	e8 0b d1 00 00       	call   c001d054 <schedule()>
c000ff49:	e8 cc cd 00 00       	call   c001cd1a <unlockScheduler()>
c000ff4e:	eb db                	jmp    c000ff2b <Pipe::read(unsigned long long, void*, int*)+0x13>
c000ff50:	39 f8                	cmp    eax,edi
c000ff52:	89 d1                	mov    ecx,edx
c000ff54:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000ff58:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000ff5c:	19 f1                	sbb    ecx,esi
c000ff5e:	73 08                	jae    c000ff68 <Pipe::read(unsigned long long, void*, int*)+0x50>
c000ff60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ff64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ff68:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ff6b:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000ff6e:	29 c6                	sub    esi,eax
c000ff70:	89 f1                	mov    ecx,esi
c000ff72:	c1 f9 1f             	sar    ecx,0x1f
c000ff75:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000ff79:	89 ca                	mov    edx,ecx
c000ff7b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ff7f:	19 d1                	sbb    ecx,edx
c000ff81:	73 04                	jae    c000ff87 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000ff83:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000ff87:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000ff8b:	89 fd                	mov    ebp,edi
c000ff8d:	29 f5                	sub    ebp,esi
c000ff8f:	85 f6                	test   esi,esi
c000ff91:	74 12                	je     c000ffa5 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000ff93:	52                   	push   edx
c000ff94:	56                   	push   esi
c000ff95:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000ff98:	50                   	push   eax
c000ff99:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000ff9d:	e8 b3 06 ff ff       	call   c0000655 <memcpy>
c000ffa2:	83 c4 10             	add    esp,0x10
c000ffa5:	85 ed                	test   ebp,ebp
c000ffa7:	74 12                	je     c000ffbb <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000ffa9:	50                   	push   eax
c000ffaa:	55                   	push   ebp
c000ffab:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000ffae:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000ffb2:	56                   	push   esi
c000ffb3:	e8 9d 06 ff ff       	call   c0000655 <memcpy>
c000ffb8:	83 c4 10             	add    esp,0x10
c000ffbb:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000ffbe:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ffc1:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000ffc4:	99                   	cdq    
c000ffc5:	89 f7                	mov    edi,esi
c000ffc7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000ffcb:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000ffcf:	c1 ff 1f             	sar    edi,0x1f
c000ffd2:	57                   	push   edi
c000ffd3:	56                   	push   esi
c000ffd4:	52                   	push   edx
c000ffd5:	50                   	push   eax
c000ffd6:	e8 c1 54 01 00       	call   c002549c <__umoddi3>
c000ffdb:	83 c4 10             	add    esp,0x10
c000ffde:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ffe1:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000ffe6:	75 10                	jne    c000fff8 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000ffe8:	83 ec 0c             	sub    esp,0xc
c000ffeb:	68 35 8c 02 c0       	push   0xc0028c35
c000fff0:	e8 94 98 00 00       	call   c0019889 <Krnl::panic(char const*)>
c000fff5:	83 c4 10             	add    esp,0x10
c000fff8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fffc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010000:	89 10                	mov    DWORD PTR [eax],edx
c0010002:	83 c4 1c             	add    esp,0x1c
c0010005:	31 c0                	xor    eax,eax
c0010007:	5b                   	pop    ebx
c0010008:	5e                   	pop    esi
c0010009:	5f                   	pop    edi
c001000a:	5d                   	pop    ebp
c001000b:	c3                   	ret    

c001000c <Pipe::write(unsigned long long, void*, int*)>:
c001000c:	55                   	push   ebp
c001000d:	57                   	push   edi
c001000e:	56                   	push   esi
c001000f:	53                   	push   ebx
c0010010:	83 ec 1c             	sub    esp,0x1c
c0010013:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010017:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001001b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001001f:	89 04 24             	mov    DWORD PTR [esp],eax
c0010022:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0010025:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c0010028:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001002c:	89 de                	mov    esi,ebx
c001002e:	89 df                	mov    edi,ebx
c0010030:	c1 ff 1f             	sar    edi,0x1f
c0010033:	01 c6                	add    esi,eax
c0010035:	89 c8                	mov    eax,ecx
c0010037:	11 d7                	adc    edi,edx
c0010039:	99                   	cdq    
c001003a:	39 f1                	cmp    ecx,esi
c001003c:	89 d0                	mov    eax,edx
c001003e:	19 f8                	sbb    eax,edi
c0010040:	b8 01 00 00 00       	mov    eax,0x1
c0010045:	0f 82 80 00 00 00    	jb     c00100cb <Pipe::write(unsigned long long, void*, int*)+0xbf>
c001004b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001004e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0010051:	01 d8                	add    eax,ebx
c0010053:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0010057:	99                   	cdq    
c0010058:	f7 f9                	idiv   ecx
c001005a:	29 d1                	sub    ecx,edx
c001005c:	89 d7                	mov    edi,edx
c001005e:	89 c8                	mov    eax,ecx
c0010060:	99                   	cdq    
c0010061:	39 ce                	cmp    esi,ecx
c0010063:	19 d3                	sbb    ebx,edx
c0010065:	bb 00 00 00 00       	mov    ebx,0x0
c001006a:	72 04                	jb     c0010070 <Pipe::write(unsigned long long, void*, int*)+0x64>
c001006c:	89 f3                	mov    ebx,esi
c001006e:	29 cb                	sub    ebx,ecx
c0010070:	89 f1                	mov    ecx,esi
c0010072:	29 d9                	sub    ecx,ebx
c0010074:	74 1a                	je     c0010090 <Pipe::write(unsigned long long, void*, int*)+0x84>
c0010076:	52                   	push   edx
c0010077:	51                   	push   ecx
c0010078:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001007c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0010080:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0010083:	57                   	push   edi
c0010084:	e8 cc 05 ff ff       	call   c0000655 <memcpy>
c0010089:	83 c4 10             	add    esp,0x10
c001008c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010090:	85 db                	test   ebx,ebx
c0010092:	74 12                	je     c00100a6 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c0010094:	50                   	push   eax
c0010095:	53                   	push   ebx
c0010096:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c001009a:	51                   	push   ecx
c001009b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001009e:	e8 b2 05 ff ff       	call   c0000655 <memcpy>
c00100a3:	83 c4 10             	add    esp,0x10
c00100a6:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c00100a9:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00100ae:	75 10                	jne    c00100c0 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c00100b0:	83 ec 0c             	sub    esp,0xc
c00100b3:	68 51 8c 02 c0       	push   0xc0028c51
c00100b8:	e8 cc 97 00 00       	call   c0019889 <Krnl::panic(char const*)>
c00100bd:	83 c4 10             	add    esp,0x10
c00100c0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00100c4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00100c7:	89 38                	mov    DWORD PTR [eax],edi
c00100c9:	31 c0                	xor    eax,eax
c00100cb:	83 c4 1c             	add    esp,0x1c
c00100ce:	5b                   	pop    ebx
c00100cf:	5e                   	pop    esi
c00100d0:	5f                   	pop    edi
c00100d1:	5d                   	pop    ebp
c00100d2:	c3                   	ret    
c00100d3:	90                   	nop

c00100d4 <Pipe::Pipe(int)>:
c00100d4:	83 ec 0c             	sub    esp,0xc
c00100d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100db:	83 ec 08             	sub    esp,0x8
c00100de:	6a 00                	push   0x0
c00100e0:	50                   	push   eax
c00100e1:	e8 56 12 00 00       	call   c001133c <UnixFile::UnixFile(int)>
c00100e6:	83 c4 10             	add    esp,0x10
c00100e9:	ba 78 8c 02 c0       	mov    edx,0xc0028c78
c00100ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100f2:	89 10                	mov    DWORD PTR [eax],edx
c00100f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100f8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00100fc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00100ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010103:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c001010a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001010e:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0010115:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010119:	83 ec 0c             	sub    esp,0xc
c001011c:	50                   	push   eax
c001011d:	e8 b2 f3 ff ff       	call   c000f4d4 <malloc>
c0010122:	83 c4 10             	add    esp,0x10
c0010125:	89 c2                	mov    edx,eax
c0010127:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001012b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001012e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010132:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0010136:	90                   	nop
c0010137:	83 c4 0c             	add    esp,0xc
c001013a:	c3                   	ret    
c001013b:	90                   	nop

c001013c <VgaText::isAtty()>:
c001013c:	b0 01                	mov    al,0x1
c001013e:	c3                   	ret    
c001013f:	90                   	nop

c0010140 <VgaText::~VgaText()>:
c0010140:	83 ec 0c             	sub    esp,0xc
c0010143:	ba 34 8d 02 c0       	mov    edx,0xc0028d34
c0010148:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001014c:	89 10                	mov    DWORD PTR [eax],edx
c001014e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010152:	83 ec 0c             	sub    esp,0xc
c0010155:	50                   	push   eax
c0010156:	e8 c3 13 00 00       	call   c001151e <UnixFile::~UnixFile()>
c001015b:	83 c4 10             	add    esp,0x10
c001015e:	90                   	nop
c001015f:	83 c4 0c             	add    esp,0xc
c0010162:	c3                   	ret    
c0010163:	90                   	nop

c0010164 <VgaText::~VgaText()>:
c0010164:	83 ec 0c             	sub    esp,0xc
c0010167:	83 ec 0c             	sub    esp,0xc
c001016a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001016e:	e8 cd ff ff ff       	call   c0010140 <VgaText::~VgaText()>
c0010173:	83 c4 10             	add    esp,0x10
c0010176:	83 ec 08             	sub    esp,0x8
c0010179:	68 60 12 00 00       	push   0x1260
c001017e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010182:	e8 08 25 00 00       	call   c001268f <operator delete(void*, unsigned long)>
c0010187:	83 c4 10             	add    esp,0x10
c001018a:	83 c4 0c             	add    esp,0xc
c001018d:	c3                   	ret    

c001018e <VgaText::read(unsigned long long, void*, int*)>:
c001018e:	83 ec 10             	sub    esp,0x10
c0010191:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010195:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010199:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001019d:	e8 01 58 00 00       	call   c00159a3 <readKeyboard(VgaText*, char*, unsigned long)>
c00101a2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00101a6:	89 02                	mov    DWORD PTR [edx],eax
c00101a8:	31 c0                	xor    eax,eax
c00101aa:	83 c4 1c             	add    esp,0x1c
c00101ad:	c3                   	ret    

c00101ae <setTerminalScrollLock(bool)>:
c00101ae:	c3                   	ret    

c00101af <addToTerminalCycle(VgaText*)>:
c00101af:	8b 15 20 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca20
c00101b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101b9:	85 d2                	test   edx,edx
c00101bb:	75 0c                	jne    c00101c9 <addToTerminalCycle(VgaText*)+0x1a>
c00101bd:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c00101c3:	a3 20 ca 02 c0       	mov    ds:0xc002ca20,eax
c00101c8:	c3                   	ret    
c00101c9:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c00101cf:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c00101d5:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c00101db:	c3                   	ret    

c00101dc <installVgaTextImplementation()>:
c00101dc:	83 ec 10             	sub    esp,0x10
c00101df:	6a 20                	push   0x20
c00101e1:	6a 00                	push   0x0
c00101e3:	68 00 ca 02 c0       	push   0xc002ca00
c00101e8:	e8 9e 04 ff ff       	call   c000068b <memset>
c00101ed:	83 c4 1c             	add    esp,0x1c
c00101f0:	c3                   	ret    

c00101f1 <scrollTerminalScrollLock(int)>:
c00101f1:	c3                   	ret    

c00101f2 <VgaText::load()>:
c00101f2:	53                   	push   ebx
c00101f3:	31 c0                	xor    eax,eax
c00101f5:	83 ec 58             	sub    esp,0x58
c00101f8:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00101fc:	89 e2                	mov    edx,esp
c00101fe:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c0010202:	40                   	inc    eax
c0010203:	83 f8 50             	cmp    eax,0x50
c0010206:	75 f6                	jne    c00101fe <VgaText::load()+0xc>
c0010208:	31 c0                	xor    eax,eax
c001020a:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c0010211:	84 c9                	test   cl,cl
c0010213:	74 06                	je     c001021b <VgaText::load()+0x29>
c0010215:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0010218:	40                   	inc    eax
c0010219:	eb ef                	jmp    c001020a <VgaText::load()+0x18>
c001021b:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c0010221:	85 c0                	test   eax,eax
c0010223:	74 09                	je     c001022e <VgaText::load()+0x3c>
c0010225:	51                   	push   ecx
c0010226:	51                   	push   ecx
c0010227:	52                   	push   edx
c0010228:	53                   	push   ebx
c0010229:	ff d0                	call   eax
c001022b:	83 c4 10             	add    esp,0x10
c001022e:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c0010234:	85 c0                	test   eax,eax
c0010236:	74 09                	je     c0010241 <VgaText::load()+0x4f>
c0010238:	83 ec 0c             	sub    esp,0xc
c001023b:	53                   	push   ebx
c001023c:	ff d0                	call   eax
c001023e:	83 c4 10             	add    esp,0x10
c0010241:	83 c4 58             	add    esp,0x58
c0010244:	5b                   	pop    ebx
c0010245:	c3                   	ret    

c0010246 <VgaText::updateCursor()>:
c0010246:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001024a:	39 05 24 ca 02 c0    	cmp    DWORD PTR ds:0xc002ca24,eax
c0010250:	75 0c                	jne    c001025e <VgaText::updateCursor()+0x18>
c0010252:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c0010258:	85 c0                	test   eax,eax
c001025a:	74 02                	je     c001025e <VgaText::updateCursor()+0x18>
c001025c:	ff e0                	jmp    eax
c001025e:	c3                   	ret    
c001025f:	90                   	nop

c0010260 <VgaText::showCursor(bool)>:
c0010260:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010264:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010268:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c001026e:	c3                   	ret    
c001026f:	90                   	nop

c0010270 <VgaText::disableBlink(bool)>:
c0010270:	56                   	push   esi
c0010271:	53                   	push   ebx
c0010272:	51                   	push   ecx
c0010273:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010277:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001027b:	39 1d 24 ca 02 c0    	cmp    DWORD PTR ds:0xc002ca24,ebx
c0010281:	75 18                	jne    c001029b <VgaText::disableBlink(bool)+0x2b>
c0010283:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c0010289:	85 c0                	test   eax,eax
c001028b:	74 0e                	je     c001029b <VgaText::disableBlink(bool)+0x2b>
c001028d:	89 f1                	mov    ecx,esi
c001028f:	52                   	push   edx
c0010290:	52                   	push   edx
c0010291:	0f b6 d1             	movzx  edx,cl
c0010294:	52                   	push   edx
c0010295:	53                   	push   ebx
c0010296:	ff d0                	call   eax
c0010298:	83 c4 10             	add    esp,0x10
c001029b:	89 f0                	mov    eax,esi
c001029d:	83 f0 01             	xor    eax,0x1
c00102a0:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c00102a6:	58                   	pop    eax
c00102a7:	5b                   	pop    ebx
c00102a8:	5e                   	pop    esi
c00102a9:	c3                   	ret    

c00102aa <VgaText::doANSI_SGR(int)>:
c00102aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00102ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102b2:	85 d2                	test   edx,edx
c00102b4:	75 14                	jne    c00102ca <VgaText::doANSI_SGR(int)+0x20>
c00102b6:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c00102bc:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00102c2:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c00102c8:	eb 65                	jmp    c001032f <VgaText::doANSI_SGR(int)+0x85>
c00102ca:	83 fa 07             	cmp    edx,0x7
c00102cd:	75 14                	jne    c00102e3 <VgaText::doANSI_SGR(int)+0x39>
c00102cf:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c00102d5:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c00102db:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c00102e1:	eb 4c                	jmp    c001032f <VgaText::doANSI_SGR(int)+0x85>
c00102e3:	83 fa 1b             	cmp    edx,0x1b
c00102e6:	74 ce                	je     c00102b6 <VgaText::doANSI_SGR(int)+0xc>
c00102e8:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00102eb:	83 f9 07             	cmp    ecx,0x7
c00102ee:	77 09                	ja     c00102f9 <VgaText::doANSI_SGR(int)+0x4f>
c00102f0:	8b 14 8d a0 b8 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd4760]
c00102f7:	eb 20                	jmp    c0010319 <VgaText::doANSI_SGR(int)+0x6f>
c00102f9:	8d 4a d8             	lea    ecx,[edx-0x28]
c00102fc:	83 f9 07             	cmp    ecx,0x7
c00102ff:	77 09                	ja     c001030a <VgaText::doANSI_SGR(int)+0x60>
c0010301:	8b 14 8d a0 b8 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd4760]
c0010308:	eb 25                	jmp    c001032f <VgaText::doANSI_SGR(int)+0x85>
c001030a:	8d 4a a6             	lea    ecx,[edx-0x5a]
c001030d:	83 f9 07             	cmp    ecx,0x7
c0010310:	77 0e                	ja     c0010320 <VgaText::doANSI_SGR(int)+0x76>
c0010312:	8b 14 95 58 b7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd48a8]
c0010319:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c001031f:	c3                   	ret    
c0010320:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010323:	83 f9 07             	cmp    ecx,0x7
c0010326:	77 0d                	ja     c0010335 <VgaText::doANSI_SGR(int)+0x8b>
c0010328:	8b 14 95 30 b7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd48d0]
c001032f:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010335:	c3                   	ret    

c0010336 <VgaText::setDefaultBgColour(VgaColour)>:
c0010336:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001033a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001033e:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c0010344:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c001034a:	c3                   	ret    
c001034b:	90                   	nop

c001034c <VgaText::setDefaultFgColour(VgaColour)>:
c001034c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010350:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010354:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c001035a:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010360:	c3                   	ret    
c0010361:	90                   	nop

c0010362 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010362:	53                   	push   ebx
c0010363:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010367:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001036b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001036f:	51                   	push   ecx
c0010370:	e8 c1 ff ff ff       	call   c0010336 <VgaText::setDefaultBgColour(VgaColour)>
c0010375:	58                   	pop    eax
c0010376:	5a                   	pop    edx
c0010377:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001037b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001037f:	5b                   	pop    ebx
c0010380:	eb ca                	jmp    c001034c <VgaText::setDefaultFgColour(VgaColour)>

c0010382 <VgaText::combineColours(unsigned char, unsigned char)>:
c0010382:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0010386:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001038b:	83 e0 0f             	and    eax,0xf
c001038e:	c1 e2 04             	shl    edx,0x4
c0010391:	09 d0                	or     eax,edx
c0010393:	c3                   	ret    

c0010394 <VgaText::scrollScreen()>:
c0010394:	57                   	push   edi
c0010395:	56                   	push   esi
c0010396:	be 01 00 00 00       	mov    esi,0x1
c001039b:	53                   	push   ebx
c001039c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00103a0:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c00103a6:	31 ff                	xor    edi,edi
c00103a8:	01 d9                	add    ecx,ebx
c00103aa:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c00103ad:	83 fe 17             	cmp    esi,0x17
c00103b0:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c00103b6:	75 28                	jne    c00103e0 <VgaText::scrollScreen()+0x4c>
c00103b8:	f7 c7 01 00 00 00    	test   edi,0x1
c00103be:	74 1c                	je     c00103dc <VgaText::scrollScreen()+0x48>
c00103c0:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c00103c7:	50                   	push   eax
c00103c8:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c00103cf:	50                   	push   eax
c00103d0:	e8 ad ff ff ff       	call   c0010382 <VgaText::combineColours(unsigned char, unsigned char)>
c00103d5:	5a                   	pop    edx
c00103d6:	5a                   	pop    edx
c00103d7:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c00103da:	eb 04                	jmp    c00103e0 <VgaText::scrollScreen()+0x4c>
c00103dc:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c00103e0:	47                   	inc    edi
c00103e1:	41                   	inc    ecx
c00103e2:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00103e8:	75 c0                	jne    c00103aa <VgaText::scrollScreen()+0x16>
c00103ea:	46                   	inc    esi
c00103eb:	83 fe 18             	cmp    esi,0x18
c00103ee:	75 b0                	jne    c00103a0 <VgaText::scrollScreen()+0xc>
c00103f0:	39 1d 24 ca 02 c0    	cmp    DWORD PTR ds:0xc002ca24,ebx
c00103f6:	75 24                	jne    c001041c <VgaText::scrollScreen()+0x88>
c00103f8:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c00103ff:	74 08                	je     c0010409 <VgaText::scrollScreen()+0x75>
c0010401:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c0010407:	eb 13                	jmp    c001041c <VgaText::scrollScreen()+0x88>
c0010409:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c001040f:	85 c0                	test   eax,eax
c0010411:	74 09                	je     c001041c <VgaText::scrollScreen()+0x88>
c0010413:	83 ec 0c             	sub    esp,0xc
c0010416:	53                   	push   ebx
c0010417:	ff d0                	call   eax
c0010419:	83 c4 10             	add    esp,0x10
c001041c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010420:	5b                   	pop    ebx
c0010421:	5e                   	pop    esi
c0010422:	5f                   	pop    edi
c0010423:	e9 1e fe ff ff       	jmp    c0010246 <VgaText::updateCursor()>

c0010428 <VgaText::combineCharAndColour(char, unsigned char)>:
c0010428:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001042d:	c1 e0 08             	shl    eax,0x8
c0010430:	89 c2                	mov    edx,eax
c0010432:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0010437:	09 d0                	or     eax,edx
c0010439:	c3                   	ret    

c001043a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c001043a:	53                   	push   ebx
c001043b:	83 ec 08             	sub    esp,0x8
c001043e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010442:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010447:	50                   	push   eax
c0010448:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001044d:	50                   	push   eax
c001044e:	e8 2f ff ff ff       	call   c0010382 <VgaText::combineColours(unsigned char, unsigned char)>
c0010453:	5a                   	pop    edx
c0010454:	0f b6 c0             	movzx  eax,al
c0010457:	5b                   	pop    ebx
c0010458:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c001045d:	50                   	push   eax
c001045e:	53                   	push   ebx
c001045f:	e8 c4 ff ff ff       	call   c0010428 <VgaText::combineCharAndColour(char, unsigned char)>
c0010464:	5a                   	pop    edx
c0010465:	5a                   	pop    edx
c0010466:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c001046c:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010470:	0f b7 d2             	movzx  edx,dx
c0010473:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c0010478:	39 0d 24 ca 02 c0    	cmp    DWORD PTR ds:0xc002ca24,ecx
c001047e:	75 14                	jne    c0010494 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010480:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c0010486:	85 c0                	test   eax,eax
c0010488:	74 0a                	je     c0010494 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c001048a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001048e:	83 c4 08             	add    esp,0x8
c0010491:	5b                   	pop    ebx
c0010492:	ff e0                	jmp    eax
c0010494:	83 c4 08             	add    esp,0x8
c0010497:	5b                   	pop    ebx
c0010498:	c3                   	ret    
c0010499:	90                   	nop

c001049a <VgaText::getCursorX()>:
c001049a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001049e:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c00104a4:	c3                   	ret    
c00104a5:	90                   	nop

c00104a6 <VgaText::getCursorY()>:
c00104a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104aa:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c00104b0:	c3                   	ret    
c00104b1:	90                   	nop

c00104b2 <VgaText::setCursor(int, int)>:
c00104b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00104ba:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c00104c0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00104c4:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c00104ca:	e9 77 fd ff ff       	jmp    c0010246 <VgaText::updateCursor()>
c00104cf:	90                   	nop

c00104d0 <VgaText::setCursorX(int)>:
c00104d0:	83 ec 10             	sub    esp,0x10
c00104d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00104d7:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c00104dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104e1:	50                   	push   eax
c00104e2:	e8 cb ff ff ff       	call   c00104b2 <VgaText::setCursor(int, int)>
c00104e7:	83 c4 1c             	add    esp,0x1c
c00104ea:	c3                   	ret    
c00104eb:	90                   	nop

c00104ec <VgaText::setCursorY(int)>:
c00104ec:	83 ec 10             	sub    esp,0x10
c00104ef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00104f3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00104f7:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c00104fd:	50                   	push   eax
c00104fe:	e8 af ff ff ff       	call   c00104b2 <VgaText::setCursor(int, int)>
c0010503:	83 c4 1c             	add    esp,0x1c
c0010506:	c3                   	ret    
c0010507:	90                   	nop

c0010508 <VgaText::incrementCursor(bool)>:
c0010508:	56                   	push   esi
c0010509:	53                   	push   ebx
c001050a:	51                   	push   ecx
c001050b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001050f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010513:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c0010519:	40                   	inc    eax
c001051a:	83 f8 50             	cmp    eax,0x50
c001051d:	74 08                	je     c0010527 <VgaText::incrementCursor(bool)+0x1f>
c001051f:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c0010525:	eb 33                	jmp    c001055a <VgaText::incrementCursor(bool)+0x52>
c0010527:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c001052d:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010537:	8d 50 01             	lea    edx,[eax+0x1]
c001053a:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010540:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010546:	75 12                	jne    c001055a <VgaText::incrementCursor(bool)+0x52>
c0010548:	83 ec 0c             	sub    esp,0xc
c001054b:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010551:	53                   	push   ebx
c0010552:	e8 3d fe ff ff       	call   c0010394 <VgaText::scrollScreen()>
c0010557:	83 c4 10             	add    esp,0x10
c001055a:	89 f0                	mov    eax,esi
c001055c:	84 c0                	test   al,al
c001055e:	74 0c                	je     c001056c <VgaText::incrementCursor(bool)+0x64>
c0010560:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010564:	5a                   	pop    edx
c0010565:	5b                   	pop    ebx
c0010566:	5e                   	pop    esi
c0010567:	e9 da fc ff ff       	jmp    c0010246 <VgaText::updateCursor()>
c001056c:	58                   	pop    eax
c001056d:	5b                   	pop    ebx
c001056e:	5e                   	pop    esi
c001056f:	c3                   	ret    

c0010570 <VgaText::updateRAMUsageDisplay(int)>:
c0010570:	56                   	push   esi
c0010571:	8b 35 80 b8 02 c0    	mov    esi,DWORD PTR ds:0xc002b880
c0010577:	53                   	push   ebx
c0010578:	bb 0a 00 00 00       	mov    ebx,0xa
c001057d:	6a 0f                	push   0xf
c001057f:	6a 00                	push   0x0
c0010581:	e8 fc fd ff ff       	call   c0010382 <VgaText::combineColours(unsigned char, unsigned char)>
c0010586:	5a                   	pop    edx
c0010587:	59                   	pop    ecx
c0010588:	0f b6 c8             	movzx  ecx,al
c001058b:	51                   	push   ecx
c001058c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010590:	99                   	cdq    
c0010591:	f7 fb                	idiv   ebx
c0010593:	89 d3                	mov    ebx,edx
c0010595:	83 c0 30             	add    eax,0x30
c0010598:	83 c3 30             	add    ebx,0x30
c001059b:	0f be c0             	movsx  eax,al
c001059e:	0f b6 db             	movzx  ebx,bl
c00105a1:	50                   	push   eax
c00105a2:	e8 81 fe ff ff       	call   c0010428 <VgaText::combineCharAndColour(char, unsigned char)>
c00105a7:	5a                   	pop    edx
c00105a8:	5a                   	pop    edx
c00105a9:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c00105b0:	51                   	push   ecx
c00105b1:	53                   	push   ebx
c00105b2:	e8 71 fe ff ff       	call   c0010428 <VgaText::combineCharAndColour(char, unsigned char)>
c00105b7:	5b                   	pop    ebx
c00105b8:	5a                   	pop    edx
c00105b9:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c00105c0:	51                   	push   ecx
c00105c1:	6a 25                	push   0x25
c00105c3:	e8 60 fe ff ff       	call   c0010428 <VgaText::combineCharAndColour(char, unsigned char)>
c00105c8:	59                   	pop    ecx
c00105c9:	5b                   	pop    ebx
c00105ca:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c00105d1:	5b                   	pop    ebx
c00105d2:	5e                   	pop    esi
c00105d3:	c3                   	ret    

c00105d4 <VgaText::updateDiskUsage()>:
c00105d4:	55                   	push   ebp
c00105d5:	bd 10 27 00 00       	mov    ebp,0x2710
c00105da:	57                   	push   edi
c00105db:	8b 3d 80 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b880
c00105e1:	56                   	push   esi
c00105e2:	53                   	push   ebx
c00105e3:	6a 0f                	push   0xf
c00105e5:	6a 00                	push   0x0
c00105e7:	e8 96 fd ff ff       	call   c0010382 <VgaText::combineColours(unsigned char, unsigned char)>
c00105ec:	5a                   	pop    edx
c00105ed:	0f b6 d8             	movzx  ebx,al
c00105f0:	59                   	pop    ecx
c00105f1:	8b 35 88 ec 02 c0    	mov    esi,DWORD PTR ds:0xc002ec88
c00105f7:	53                   	push   ebx
c00105f8:	b9 0a 00 00 00       	mov    ecx,0xa
c00105fd:	89 f0                	mov    eax,esi
c00105ff:	99                   	cdq    
c0010600:	f7 fd                	idiv   ebp
c0010602:	99                   	cdq    
c0010603:	f7 f9                	idiv   ecx
c0010605:	8d 42 30             	lea    eax,[edx+0x30]
c0010608:	0f b6 c0             	movzx  eax,al
c001060b:	50                   	push   eax
c001060c:	e8 17 fe ff ff       	call   c0010428 <VgaText::combineCharAndColour(char, unsigned char)>
c0010611:	5d                   	pop    ebp
c0010612:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010617:	5a                   	pop    edx
c0010618:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c001061c:	53                   	push   ebx
c001061d:	89 f0                	mov    eax,esi
c001061f:	99                   	cdq    
c0010620:	f7 fd                	idiv   ebp
c0010622:	99                   	cdq    
c0010623:	f7 f9                	idiv   ecx
c0010625:	8d 42 30             	lea    eax,[edx+0x30]
c0010628:	0f b6 c0             	movzx  eax,al
c001062b:	50                   	push   eax
c001062c:	e8 f7 fd ff ff       	call   c0010428 <VgaText::combineCharAndColour(char, unsigned char)>
c0010631:	5d                   	pop    ebp
c0010632:	bd 64 00 00 00       	mov    ebp,0x64
c0010637:	5a                   	pop    edx
c0010638:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c001063f:	53                   	push   ebx
c0010640:	89 f0                	mov    eax,esi
c0010642:	99                   	cdq    
c0010643:	f7 fd                	idiv   ebp
c0010645:	99                   	cdq    
c0010646:	f7 f9                	idiv   ecx
c0010648:	8d 42 30             	lea    eax,[edx+0x30]
c001064b:	0f b6 c0             	movzx  eax,al
c001064e:	50                   	push   eax
c001064f:	e8 d4 fd ff ff       	call   c0010428 <VgaText::combineCharAndColour(char, unsigned char)>
c0010654:	5d                   	pop    ebp
c0010655:	5a                   	pop    edx
c0010656:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c001065d:	53                   	push   ebx
c001065e:	89 f0                	mov    eax,esi
c0010660:	99                   	cdq    
c0010661:	f7 f9                	idiv   ecx
c0010663:	89 d6                	mov    esi,edx
c0010665:	99                   	cdq    
c0010666:	f7 f9                	idiv   ecx
c0010668:	8d 42 30             	lea    eax,[edx+0x30]
c001066b:	0f b6 c0             	movzx  eax,al
c001066e:	50                   	push   eax
c001066f:	e8 b4 fd ff ff       	call   c0010428 <VgaText::combineCharAndColour(char, unsigned char)>
c0010674:	5d                   	pop    ebp
c0010675:	5a                   	pop    edx
c0010676:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c001067d:	53                   	push   ebx
c001067e:	8d 46 30             	lea    eax,[esi+0x30]
c0010681:	0f b6 f0             	movzx  esi,al
c0010684:	56                   	push   esi
c0010685:	e8 9e fd ff ff       	call   c0010428 <VgaText::combineCharAndColour(char, unsigned char)>
c001068a:	5e                   	pop    esi
c001068b:	8b 35 84 ec 02 c0    	mov    esi,DWORD PTR ds:0xc002ec84
c0010691:	5d                   	pop    ebp
c0010692:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010699:	bd 10 27 00 00       	mov    ebp,0x2710
c001069e:	53                   	push   ebx
c001069f:	89 f0                	mov    eax,esi
c00106a1:	99                   	cdq    
c00106a2:	f7 fd                	idiv   ebp
c00106a4:	99                   	cdq    
c00106a5:	f7 f9                	idiv   ecx
c00106a7:	8d 42 30             	lea    eax,[edx+0x30]
c00106aa:	0f b6 c0             	movzx  eax,al
c00106ad:	50                   	push   eax
c00106ae:	e8 75 fd ff ff       	call   c0010428 <VgaText::combineCharAndColour(char, unsigned char)>
c00106b3:	5a                   	pop    edx
c00106b4:	5d                   	pop    ebp
c00106b5:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c00106bc:	bd e8 03 00 00       	mov    ebp,0x3e8
c00106c1:	53                   	push   ebx
c00106c2:	89 f0                	mov    eax,esi
c00106c4:	99                   	cdq    
c00106c5:	f7 fd                	idiv   ebp
c00106c7:	99                   	cdq    
c00106c8:	f7 f9                	idiv   ecx
c00106ca:	8d 42 30             	lea    eax,[edx+0x30]
c00106cd:	0f b6 c0             	movzx  eax,al
c00106d0:	50                   	push   eax
c00106d1:	e8 52 fd ff ff       	call   c0010428 <VgaText::combineCharAndColour(char, unsigned char)>
c00106d6:	5a                   	pop    edx
c00106d7:	5d                   	pop    ebp
c00106d8:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c00106df:	bd 64 00 00 00       	mov    ebp,0x64
c00106e4:	53                   	push   ebx
c00106e5:	89 f0                	mov    eax,esi
c00106e7:	99                   	cdq    
c00106e8:	f7 fd                	idiv   ebp
c00106ea:	99                   	cdq    
c00106eb:	f7 f9                	idiv   ecx
c00106ed:	83 c2 30             	add    edx,0x30
c00106f0:	0f b6 d2             	movzx  edx,dl
c00106f3:	52                   	push   edx
c00106f4:	e8 2f fd ff ff       	call   c0010428 <VgaText::combineCharAndColour(char, unsigned char)>
c00106f9:	5a                   	pop    edx
c00106fa:	5d                   	pop    ebp
c00106fb:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010702:	53                   	push   ebx
c0010703:	89 f0                	mov    eax,esi
c0010705:	99                   	cdq    
c0010706:	f7 f9                	idiv   ecx
c0010708:	89 d6                	mov    esi,edx
c001070a:	99                   	cdq    
c001070b:	f7 f9                	idiv   ecx
c001070d:	8d 42 30             	lea    eax,[edx+0x30]
c0010710:	0f b6 c0             	movzx  eax,al
c0010713:	50                   	push   eax
c0010714:	e8 0f fd ff ff       	call   c0010428 <VgaText::combineCharAndColour(char, unsigned char)>
c0010719:	5a                   	pop    edx
c001071a:	59                   	pop    ecx
c001071b:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010722:	53                   	push   ebx
c0010723:	8d 46 30             	lea    eax,[esi+0x30]
c0010726:	0f b6 f0             	movzx  esi,al
c0010729:	56                   	push   esi
c001072a:	e8 f9 fc ff ff       	call   c0010428 <VgaText::combineCharAndColour(char, unsigned char)>
c001072f:	5b                   	pop    ebx
c0010730:	5e                   	pop    esi
c0010731:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010738:	5b                   	pop    ebx
c0010739:	5e                   	pop    esi
c001073a:	5f                   	pop    edi
c001073b:	5d                   	pop    ebp
c001073c:	c3                   	ret    
c001073d:	90                   	nop

c001073e <VgaText::updateTitle()>:
c001073e:	53                   	push   ebx
c001073f:	31 c0                	xor    eax,eax
c0010741:	83 ec 58             	sub    esp,0x58
c0010744:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010748:	89 e1                	mov    ecx,esp
c001074a:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c001074e:	40                   	inc    eax
c001074f:	83 f8 50             	cmp    eax,0x50
c0010752:	75 f6                	jne    c001074a <VgaText::updateTitle()+0xc>
c0010754:	31 c0                	xor    eax,eax
c0010756:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c001075d:	84 db                	test   bl,bl
c001075f:	74 06                	je     c0010767 <VgaText::updateTitle()+0x29>
c0010761:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010764:	40                   	inc    eax
c0010765:	eb ef                	jmp    c0010756 <VgaText::updateTitle()+0x18>
c0010767:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c001076d:	85 c0                	test   eax,eax
c001076f:	74 09                	je     c001077a <VgaText::updateTitle()+0x3c>
c0010771:	53                   	push   ebx
c0010772:	53                   	push   ebx
c0010773:	51                   	push   ecx
c0010774:	52                   	push   edx
c0010775:	ff d0                	call   eax
c0010777:	83 c4 10             	add    esp,0x10
c001077a:	e8 55 fe ff ff       	call   c00105d4 <VgaText::updateDiskUsage()>
c001077f:	83 c4 58             	add    esp,0x58
c0010782:	5b                   	pop    ebx
c0010783:	c3                   	ret    

c0010784 <VgaText::setTitleTextColour(VgaColour)>:
c0010784:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010788:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001078c:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c0010792:	eb aa                	jmp    c001073e <VgaText::updateTitle()>

c0010794 <VgaText::setTitleColour(VgaColour)>:
c0010794:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010798:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001079c:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c00107a2:	eb 9a                	jmp    c001073e <VgaText::updateTitle()>

c00107a4 <VgaText::setTitle(char*)>:
c00107a4:	53                   	push   ebx
c00107a5:	83 ec 10             	sub    esp,0x10
c00107a8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00107ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00107b0:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c00107b6:	50                   	push   eax
c00107b7:	e8 6e ff fe ff       	call   c000072a <strcpy>
c00107bc:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00107c0:	83 c4 18             	add    esp,0x18
c00107c3:	5b                   	pop    ebx
c00107c4:	e9 75 ff ff ff       	jmp    c001073e <VgaText::updateTitle()>
c00107c9:	90                   	nop

c00107ca <VgaText::decrementCursor(bool)>:
c00107ca:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00107ce:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00107d2:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c00107d8:	85 c0                	test   eax,eax
c00107da:	74 07                	je     c00107e3 <VgaText::decrementCursor(bool)+0x19>
c00107dc:	48                   	dec    eax
c00107dd:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c00107e3:	84 c9                	test   cl,cl
c00107e5:	74 09                	je     c00107f0 <VgaText::decrementCursor(bool)+0x26>
c00107e7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00107eb:	e9 56 fa ff ff       	jmp    c0010246 <VgaText::updateCursor()>
c00107f0:	c3                   	ret    
c00107f1:	90                   	nop

c00107f2 <VgaText::putchar(char, VgaColour, VgaColour)>:
c00107f2:	53                   	push   ebx
c00107f3:	83 ec 08             	sub    esp,0x8
c00107f6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00107fa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00107fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010802:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010806:	3c 07                	cmp    al,0x7
c0010808:	75 2a                	jne    c0010834 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c001080a:	a1 cc ca 02 c0       	mov    eax,ds:0xc002cacc
c001080f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010817:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c001081f:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010827:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001082b:	83 c4 08             	add    esp,0x8
c001082e:	5b                   	pop    ebx
c001082f:	e9 3a 2d 00 00       	jmp    c001356e <Buzzer::beep(int, int, bool)>
c0010834:	3c 0d                	cmp    al,0xd
c0010836:	75 0c                	jne    c0010844 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010838:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010842:	eb 3b                	jmp    c001087f <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010844:	3c 0a                	cmp    al,0xa
c0010846:	75 40                	jne    c0010888 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010848:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c001084e:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010858:	8d 50 01             	lea    edx,[eax+0x1]
c001085b:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010861:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010867:	75 12                	jne    c001087b <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010869:	83 ec 0c             	sub    esp,0xc
c001086c:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010872:	53                   	push   ebx
c0010873:	e8 1c fb ff ff       	call   c0010394 <VgaText::scrollScreen()>
c0010878:	83 c4 10             	add    esp,0x10
c001087b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001087f:	83 c4 08             	add    esp,0x8
c0010882:	5b                   	pop    ebx
c0010883:	e9 be f9 ff ff       	jmp    c0010246 <VgaText::updateCursor()>
c0010888:	3c 08                	cmp    al,0x8
c001088a:	75 31                	jne    c00108bd <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c001088c:	50                   	push   eax
c001088d:	50                   	push   eax
c001088e:	6a 01                	push   0x1
c0010890:	53                   	push   ebx
c0010891:	e8 34 ff ff ff       	call   c00107ca <VgaText::decrementCursor(bool)>
c0010896:	5a                   	pop    edx
c0010897:	59                   	pop    ecx
c0010898:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c001089e:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00108a4:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c00108aa:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c00108b0:	6a 20                	push   0x20
c00108b2:	53                   	push   ebx
c00108b3:	e8 82 fb ff ff       	call   c001043a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00108b8:	83 c4 28             	add    esp,0x28
c00108bb:	5b                   	pop    ebx
c00108bc:	c3                   	ret    
c00108bd:	83 ec 08             	sub    esp,0x8
c00108c0:	0f be c0             	movsx  eax,al
c00108c3:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00108c9:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00108cf:	51                   	push   ecx
c00108d0:	52                   	push   edx
c00108d1:	50                   	push   eax
c00108d2:	53                   	push   ebx
c00108d3:	e8 62 fb ff ff       	call   c001043a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00108d8:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00108dc:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00108e4:	83 c4 28             	add    esp,0x28
c00108e7:	5b                   	pop    ebx
c00108e8:	e9 1b fc ff ff       	jmp    c0010508 <VgaText::incrementCursor(bool)>
c00108ed:	90                   	nop

c00108ee <VgaText::isShowingCursor()>:
c00108ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108f2:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c00108f8:	c3                   	ret    
c00108f9:	90                   	nop

c00108fa <VgaText::isBlinkDisabled()>:
c00108fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108fe:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010904:	83 f0 01             	xor    eax,0x1
c0010907:	c3                   	ret    

c0010908 <VgaText::setCursorHeight(int)>:
c0010908:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001090c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010910:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010916:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c001091d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010921:	e9 3a f9 ff ff       	jmp    c0010260 <VgaText::showCursor(bool)>

c0010926 <VgaText::getCursorHeight()>:
c0010926:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001092a:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010930:	c3                   	ret    

c0010931 <setActiveTerminal(VgaText*)>:
c0010931:	53                   	push   ebx
c0010932:	83 ec 08             	sub    esp,0x8
c0010935:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010939:	85 db                	test   ebx,ebx
c001093b:	75 11                	jne    c001094e <setActiveTerminal(VgaText*)+0x1d>
c001093d:	c7 44 24 10 8c 8c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0028c8c
c0010945:	83 c4 08             	add    esp,0x8
c0010948:	5b                   	pop    ebx
c0010949:	e9 3b 8f 00 00       	jmp    c0019889 <Krnl::panic(char const*)>
c001094e:	50                   	push   eax
c001094f:	50                   	push   eax
c0010950:	53                   	push   ebx
c0010951:	68 9a 8c 02 c0       	push   0xc0028c9a
c0010956:	e8 14 1e 00 00       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001095b:	a1 24 ca 02 c0       	mov    eax,ds:0xc002ca24
c0010960:	83 c4 10             	add    esp,0x10
c0010963:	85 c0                	test   eax,eax
c0010965:	74 0c                	je     c0010973 <setActiveTerminal(VgaText*)+0x42>
c0010967:	83 ec 0c             	sub    esp,0xc
c001096a:	50                   	push   eax
c001096b:	e8 d6 f8 ff ff       	call   c0010246 <VgaText::updateCursor()>
c0010970:	83 c4 10             	add    esp,0x10
c0010973:	89 1d 24 ca 02 c0    	mov    DWORD PTR ds:0xc002ca24,ebx
c0010979:	51                   	push   ecx
c001097a:	51                   	push   ecx
c001097b:	53                   	push   ebx
c001097c:	68 b2 8c 02 c0       	push   0xc0028cb2
c0010981:	e8 e9 1d 00 00       	call   c001276f <Dbg::kprintf(char const*, ...)>
c0010986:	83 c4 0c             	add    esp,0xc
c0010989:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c001098f:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010995:	53                   	push   ebx
c0010996:	e8 17 fb ff ff       	call   c00104b2 <VgaText::setCursor(int, int)>
c001099b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001099e:	e8 57 ff ff ff       	call   c00108fa <VgaText::isBlinkDisabled()>
c00109a3:	5a                   	pop    edx
c00109a4:	0f b6 c0             	movzx  eax,al
c00109a7:	59                   	pop    ecx
c00109a8:	50                   	push   eax
c00109a9:	53                   	push   ebx
c00109aa:	e8 c1 f8 ff ff       	call   c0010270 <VgaText::disableBlink(bool)>
c00109af:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00109b2:	e8 6f ff ff ff       	call   c0010926 <VgaText::getCursorHeight()>
c00109b7:	5a                   	pop    edx
c00109b8:	59                   	pop    ecx
c00109b9:	50                   	push   eax
c00109ba:	53                   	push   ebx
c00109bb:	e8 48 ff ff ff       	call   c0010908 <VgaText::setCursorHeight(int)>
c00109c0:	83 c4 10             	add    esp,0x10
c00109c3:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c00109ca:	75 0a                	jne    c00109d6 <setActiveTerminal(VgaText*)+0xa5>
c00109cc:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c00109d6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00109da:	83 c4 08             	add    esp,0x8
c00109dd:	5b                   	pop    ebx
c00109de:	e9 0f f8 ff ff       	jmp    c00101f2 <VgaText::load()>

c00109e3 <doTerminalCycle()>:
c00109e3:	83 ec 18             	sub    esp,0x18
c00109e6:	a1 20 ca 02 c0       	mov    eax,ds:0xc002ca20
c00109eb:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c00109f1:	50                   	push   eax
c00109f2:	a3 20 ca 02 c0       	mov    ds:0xc002ca20,eax
c00109f7:	e8 35 ff ff ff       	call   c0010931 <setActiveTerminal(VgaText*)>
c00109fc:	83 c4 1c             	add    esp,0x1c
c00109ff:	c3                   	ret    

c0010a00 <VgaText::doUpdate()>:
c0010a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a04:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010a0a:	85 c0                	test   eax,eax
c0010a0c:	74 02                	je     c0010a10 <VgaText::doUpdate()+0x10>
c0010a0e:	ff e0                	jmp    eax
c0010a10:	c3                   	ret    
c0010a11:	90                   	nop

c0010a12 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010a12:	55                   	push   ebp
c0010a13:	57                   	push   edi
c0010a14:	56                   	push   esi
c0010a15:	53                   	push   ebx
c0010a16:	83 ec 1c             	sub    esp,0x1c
c0010a19:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010a1d:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010a22:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010a29:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010a2c:	50                   	push   eax
c0010a2d:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010a32:	50                   	push   eax
c0010a33:	e8 4a f9 ff ff       	call   c0010382 <VgaText::combineColours(unsigned char, unsigned char)>
c0010a38:	59                   	pop    ecx
c0010a39:	0f b6 c0             	movzx  eax,al
c0010a3c:	5b                   	pop    ebx
c0010a3d:	31 c9                	xor    ecx,ecx
c0010a3f:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010a47:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010a4b:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010a51:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010a55:	0f b7 db             	movzx  ebx,bx
c0010a58:	01 db                	add    ebx,ebx
c0010a5a:	01 fb                	add    ebx,edi
c0010a5c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010a5f:	84 c0                	test   al,al
c0010a61:	0f 84 38 01 00 00    	je     c0010b9f <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010a67:	3c 0d                	cmp    al,0xd
c0010a69:	75 0f                	jne    c0010a7a <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010a6b:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010a75:	e9 1f 01 00 00       	jmp    c0010b99 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010a7a:	3c 0a                	cmp    al,0xa
c0010a7c:	75 5b                	jne    c0010ad9 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010a7e:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010a84:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010a8e:	8d 48 01             	lea    ecx,[eax+0x1]
c0010a91:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010a97:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010a9d:	75 12                	jne    c0010ab1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010a9f:	83 ec 0c             	sub    esp,0xc
c0010aa2:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010aa8:	55                   	push   ebp
c0010aa9:	e8 e6 f8 ff ff       	call   c0010394 <VgaText::scrollScreen()>
c0010aae:	83 c4 10             	add    esp,0x10
c0010ab1:	83 ec 0c             	sub    esp,0xc
c0010ab4:	55                   	push   ebp
c0010ab5:	e8 8c f7 ff ff       	call   c0010246 <VgaText::updateCursor()>
c0010aba:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010ac2:	83 c4 10             	add    esp,0x10
c0010ac5:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010acb:	31 c9                	xor    ecx,ecx
c0010acd:	0f b7 db             	movzx  ebx,bx
c0010ad0:	01 db                	add    ebx,ebx
c0010ad2:	01 fb                	add    ebx,edi
c0010ad4:	e9 c0 00 00 00       	jmp    c0010b99 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010ad9:	3c 08                	cmp    al,0x8
c0010adb:	75 4e                	jne    c0010b2b <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010add:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010ae1:	53                   	push   ebx
c0010ae2:	53                   	push   ebx
c0010ae3:	6a 01                	push   0x1
c0010ae5:	55                   	push   ebp
c0010ae6:	e8 df fc ff ff       	call   c00107ca <VgaText::decrementCursor(bool)>
c0010aeb:	58                   	pop    eax
c0010aec:	5a                   	pop    edx
c0010aed:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010af3:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010af9:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010aff:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010b05:	6a 20                	push   0x20
c0010b07:	55                   	push   ebp
c0010b08:	e8 2d f9 ff ff       	call   c001043a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010b0d:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010b15:	83 c4 20             	add    esp,0x20
c0010b18:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010b1e:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010b22:	0f b7 db             	movzx  ebx,bx
c0010b25:	01 db                	add    ebx,ebx
c0010b27:	01 fb                	add    ebx,edi
c0010b29:	eb 6e                	jmp    c0010b99 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010b2b:	51                   	push   ecx
c0010b2c:	51                   	push   ecx
c0010b2d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010b31:	50                   	push   eax
c0010b32:	e8 f1 f8 ff ff       	call   c0010428 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b37:	83 c4 10             	add    esp,0x10
c0010b3a:	66 89 03             	mov    WORD PTR [ebx],ax
c0010b3d:	39 2d 24 ca 02 c0    	cmp    DWORD PTR ds:0xc002ca24,ebp
c0010b43:	75 2a                	jne    c0010b6f <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010b45:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010b4b:	85 c0                	test   eax,eax
c0010b4d:	74 20                	je     c0010b6f <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010b4f:	52                   	push   edx
c0010b50:	52                   	push   edx
c0010b51:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010b57:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010b5d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010b61:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010b65:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010b68:	51                   	push   ecx
c0010b69:	55                   	push   ebp
c0010b6a:	ff d0                	call   eax
c0010b6c:	83 c4 20             	add    esp,0x20
c0010b6f:	83 c3 02             	add    ebx,0x2
c0010b72:	50                   	push   eax
c0010b73:	50                   	push   eax
c0010b74:	6a 00                	push   0x0
c0010b76:	55                   	push   ebp
c0010b77:	e8 8c f9 ff ff       	call   c0010508 <VgaText::incrementCursor(bool)>
c0010b7c:	83 c4 10             	add    esp,0x10
c0010b7f:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010b86:	75 0f                	jne    c0010b97 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010b88:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010b90:	0f b7 db             	movzx  ebx,bx
c0010b93:	01 db                	add    ebx,ebx
c0010b95:	01 fb                	add    ebx,edi
c0010b97:	b1 01                	mov    cl,0x1
c0010b99:	46                   	inc    esi
c0010b9a:	e9 bd fe ff ff       	jmp    c0010a5c <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010b9f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010ba3:	83 ec 0c             	sub    esp,0xc
c0010ba6:	55                   	push   ebp
c0010ba7:	e8 9a f6 ff ff       	call   c0010246 <VgaText::updateCursor()>
c0010bac:	83 c4 10             	add    esp,0x10
c0010baf:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010bb3:	84 c9                	test   cl,cl
c0010bb5:	74 0c                	je     c0010bc3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010bb7:	83 ec 0c             	sub    esp,0xc
c0010bba:	55                   	push   ebp
c0010bbb:	e8 40 fe ff ff       	call   c0010a00 <VgaText::doUpdate()>
c0010bc0:	83 c4 10             	add    esp,0x10
c0010bc3:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010bca:	83 c4 1c             	add    esp,0x1c
c0010bcd:	5b                   	pop    ebx
c0010bce:	5e                   	pop    esi
c0010bcf:	5f                   	pop    edi
c0010bd0:	5d                   	pop    ebp
c0010bd1:	c3                   	ret    

c0010bd2 <VgaText::clearScreen()>:
c0010bd2:	57                   	push   edi
c0010bd3:	56                   	push   esi
c0010bd4:	31 f6                	xor    esi,esi
c0010bd6:	53                   	push   ebx
c0010bd7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010bdb:	52                   	push   edx
c0010bdc:	6a 00                	push   0x0
c0010bde:	6a 00                	push   0x0
c0010be0:	53                   	push   ebx
c0010be1:	e8 cc f8 ff ff       	call   c00104b2 <VgaText::setCursor(int, int)>
c0010be6:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010bed:	83 c4 10             	add    esp,0x10
c0010bf0:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010bf6:	7e 26                	jle    c0010c1e <VgaText::clearScreen()+0x4c>
c0010bf8:	31 ff                	xor    edi,edi
c0010bfa:	50                   	push   eax
c0010bfb:	50                   	push   eax
c0010bfc:	56                   	push   esi
c0010bfd:	57                   	push   edi
c0010bfe:	47                   	inc    edi
c0010bff:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010c05:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010c0b:	6a 20                	push   0x20
c0010c0d:	53                   	push   ebx
c0010c0e:	e8 27 f8 ff ff       	call   c001043a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c13:	83 c4 20             	add    esp,0x20
c0010c16:	83 ff 50             	cmp    edi,0x50
c0010c19:	75 df                	jne    c0010bfa <VgaText::clearScreen()+0x28>
c0010c1b:	46                   	inc    esi
c0010c1c:	eb d2                	jmp    c0010bf0 <VgaText::clearScreen()+0x1e>
c0010c1e:	83 ec 0c             	sub    esp,0xc
c0010c21:	53                   	push   ebx
c0010c22:	e8 d9 fd ff ff       	call   c0010a00 <VgaText::doUpdate()>
c0010c27:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0010c2e:	83 c4 10             	add    esp,0x10
c0010c31:	5b                   	pop    ebx
c0010c32:	5e                   	pop    esi
c0010c33:	5f                   	pop    edi
c0010c34:	c3                   	ret    
c0010c35:	90                   	nop

c0010c36 <VgaText::putchar(char)>:
c0010c36:	56                   	push   esi
c0010c37:	53                   	push   ebx
c0010c38:	83 ec 14             	sub    esp,0x14
c0010c3b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010c3f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010c43:	3c 5b                	cmp    al,0x5b
c0010c45:	75 21                	jne    c0010c68 <VgaText::putchar(char)+0x32>
c0010c47:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c0010c4e:	74 28                	je     c0010c78 <VgaText::putchar(char)+0x42>
c0010c50:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0010c59:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c0010c63:	e9 e2 00 00 00       	jmp    c0010d4a <VgaText::putchar(char)+0x114>
c0010c68:	3c 1b                	cmp    al,0x1b
c0010c6a:	75 0c                	jne    c0010c78 <VgaText::putchar(char)+0x42>
c0010c6c:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c0010c73:	e9 d2 00 00 00       	jmp    c0010d4a <VgaText::putchar(char)+0x114>
c0010c78:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c0010c7e:	84 c9                	test   cl,cl
c0010c80:	0f 84 ab 00 00 00    	je     c0010d31 <VgaText::putchar(char)+0xfb>
c0010c86:	8d 50 c0             	lea    edx,[eax-0x40]
c0010c89:	80 fa 3e             	cmp    dl,0x3e
c0010c8c:	0f 87 82 00 00 00    	ja     c0010d14 <VgaText::putchar(char)+0xde>
c0010c92:	3c 6d                	cmp    al,0x6d
c0010c94:	75 4d                	jne    c0010ce3 <VgaText::putchar(char)+0xad>
c0010c96:	31 f6                	xor    esi,esi
c0010c98:	31 d2                	xor    edx,edx
c0010c9a:	31 c0                	xor    eax,eax
c0010c9c:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c0010ca2:	7e 30                	jle    c0010cd4 <VgaText::putchar(char)+0x9e>
c0010ca4:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c0010cac:	80 fa 3b             	cmp    dl,0x3b
c0010caf:	75 17                	jne    c0010cc8 <VgaText::putchar(char)+0x92>
c0010cb1:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010cb5:	50                   	push   eax
c0010cb6:	53                   	push   ebx
c0010cb7:	e8 ee f5 ff ff       	call   c00102aa <VgaText::doANSI_SGR(int)>
c0010cbc:	59                   	pop    ecx
c0010cbd:	31 d2                	xor    edx,edx
c0010cbf:	58                   	pop    eax
c0010cc0:	31 c0                	xor    eax,eax
c0010cc2:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010cc6:	eb 09                	jmp    c0010cd1 <VgaText::putchar(char)+0x9b>
c0010cc8:	6b c0 0a             	imul   eax,eax,0xa
c0010ccb:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010ccf:	88 ca                	mov    dl,cl
c0010cd1:	46                   	inc    esi
c0010cd2:	eb c8                	jmp    c0010c9c <VgaText::putchar(char)+0x66>
c0010cd4:	84 d2                	test   dl,dl
c0010cd6:	74 31                	je     c0010d09 <VgaText::putchar(char)+0xd3>
c0010cd8:	50                   	push   eax
c0010cd9:	53                   	push   ebx
c0010cda:	e8 cb f5 ff ff       	call   c00102aa <VgaText::doANSI_SGR(int)>
c0010cdf:	58                   	pop    eax
c0010ce0:	5a                   	pop    edx
c0010ce1:	eb 26                	jmp    c0010d09 <VgaText::putchar(char)+0xd3>
c0010ce3:	3c 4a                	cmp    al,0x4a
c0010ce5:	75 22                	jne    c0010d09 <VgaText::putchar(char)+0xd3>
c0010ce7:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c0010cee:	75 19                	jne    c0010d09 <VgaText::putchar(char)+0xd3>
c0010cf0:	83 ec 0c             	sub    esp,0xc
c0010cf3:	53                   	push   ebx
c0010cf4:	e8 d9 fe ff ff       	call   c0010bd2 <VgaText::clearScreen()>
c0010cf9:	83 c4 0c             	add    esp,0xc
c0010cfc:	6a 00                	push   0x0
c0010cfe:	6a 00                	push   0x0
c0010d00:	53                   	push   ebx
c0010d01:	e8 ac f7 ff ff       	call   c00104b2 <VgaText::setCursor(int, int)>
c0010d06:	83 c4 10             	add    esp,0x10
c0010d09:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c0010d12:	eb 36                	jmp    c0010d4a <VgaText::putchar(char)+0x114>
c0010d14:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c0010d1a:	83 fa 0e             	cmp    edx,0xe
c0010d1d:	7f 2b                	jg     c0010d4a <VgaText::putchar(char)+0x114>
c0010d1f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010d22:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c0010d28:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c0010d2f:	eb 19                	jmp    c0010d4a <VgaText::putchar(char)+0x114>
c0010d31:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010d37:	0f be c0             	movsx  eax,al
c0010d3a:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010d40:	50                   	push   eax
c0010d41:	53                   	push   ebx
c0010d42:	e8 ab fa ff ff       	call   c00107f2 <VgaText::putchar(char, VgaColour, VgaColour)>
c0010d47:	83 c4 10             	add    esp,0x10
c0010d4a:	83 c4 14             	add    esp,0x14
c0010d4d:	5b                   	pop    ebx
c0010d4e:	5e                   	pop    esi
c0010d4f:	c3                   	ret    

c0010d50 <VgaText::puts(char const*)>:
c0010d50:	53                   	push   ebx
c0010d51:	83 ec 08             	sub    esp,0x8
c0010d54:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010d58:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010d5b:	84 c0                	test   al,al
c0010d5d:	74 12                	je     c0010d71 <VgaText::puts(char const*)+0x21>
c0010d5f:	43                   	inc    ebx
c0010d60:	51                   	push   ecx
c0010d61:	51                   	push   ecx
c0010d62:	50                   	push   eax
c0010d63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d67:	e8 ca fe ff ff       	call   c0010c36 <VgaText::putchar(char)>
c0010d6c:	83 c4 10             	add    esp,0x10
c0010d6f:	eb e7                	jmp    c0010d58 <VgaText::puts(char const*)+0x8>
c0010d71:	83 c4 08             	add    esp,0x8
c0010d74:	5b                   	pop    ebx
c0010d75:	c3                   	ret    

c0010d76 <VgaText::putx(unsigned int)>:
c0010d76:	57                   	push   edi
c0010d77:	b9 11 00 00 00       	mov    ecx,0x11
c0010d7c:	56                   	push   esi
c0010d7d:	be ce 8c 02 c0       	mov    esi,0xc0028cce
c0010d82:	53                   	push   ebx
c0010d83:	83 ec 20             	sub    esp,0x20
c0010d86:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010d8a:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010d8e:	fc                   	cld    
c0010d8f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010d91:	be 08 00 00 00       	mov    esi,0x8
c0010d96:	50                   	push   eax
c0010d97:	50                   	push   eax
c0010d98:	89 d8                	mov    eax,ebx
c0010d9a:	c1 e3 04             	shl    ebx,0x4
c0010d9d:	c1 e8 1c             	shr    eax,0x1c
c0010da0:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010da5:	50                   	push   eax
c0010da6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010daa:	e8 87 fe ff ff       	call   c0010c36 <VgaText::putchar(char)>
c0010daf:	83 c4 10             	add    esp,0x10
c0010db2:	4e                   	dec    esi
c0010db3:	75 e1                	jne    c0010d96 <VgaText::putx(unsigned int)+0x20>
c0010db5:	83 c4 20             	add    esp,0x20
c0010db8:	5b                   	pop    ebx
c0010db9:	5e                   	pop    esi
c0010dba:	5f                   	pop    edi
c0010dbb:	c3                   	ret    

c0010dbc <VgaText::VgaText(char const*)>:
c0010dbc:	57                   	push   edi
c0010dbd:	56                   	push   esi
c0010dbe:	53                   	push   ebx
c0010dbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dc3:	83 ec 08             	sub    esp,0x8
c0010dc6:	6a 00                	push   0x0
c0010dc8:	50                   	push   eax
c0010dc9:	e8 6e 05 00 00       	call   c001133c <UnixFile::UnixFile(int)>
c0010dce:	83 c4 10             	add    esp,0x10
c0010dd1:	ba 34 8d 02 c0       	mov    edx,0xc0028d34
c0010dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dda:	89 10                	mov    DWORD PTR [eax],edx
c0010ddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010de0:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c0010dea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dee:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c0010df8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dfc:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c0010e03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e07:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c0010e0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e12:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c0010e1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e20:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c0010e2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e2e:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0010e35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e39:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c0010e40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e44:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c0010e4a:	bb 00 ca 02 c0       	mov    ebx,0xc002ca00
c0010e4f:	b8 08 00 00 00       	mov    eax,0x8
c0010e54:	fc                   	cld    
c0010e55:	89 d7                	mov    edi,edx
c0010e57:	89 de                	mov    esi,ebx
c0010e59:	89 c1                	mov    ecx,eax
c0010e5b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010e5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e61:	05 1e 10 00 00       	add    eax,0x101e
c0010e66:	83 ec 08             	sub    esp,0x8
c0010e69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e6d:	50                   	push   eax
c0010e6e:	e8 b7 f8 fe ff       	call   c000072a <strcpy>
c0010e73:	83 c4 10             	add    esp,0x10
c0010e76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e7a:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c0010e84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e88:	83 c0 0c             	add    eax,0xc
c0010e8b:	83 ec 04             	sub    esp,0x4
c0010e8e:	68 00 0f 00 00       	push   0xf00
c0010e93:	6a 00                	push   0x0
c0010e95:	50                   	push   eax
c0010e96:	e8 f0 f7 fe ff       	call   c000068b <memset>
c0010e9b:	83 c4 10             	add    esp,0x10
c0010e9e:	83 ec 04             	sub    esp,0x4
c0010ea1:	6a 00                	push   0x0
c0010ea3:	6a 07                	push   0x7
c0010ea5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ea9:	e8 b4 f4 ff ff       	call   c0010362 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010eae:	83 c4 10             	add    esp,0x10
c0010eb1:	83 ec 08             	sub    esp,0x8
c0010eb4:	6a 02                	push   0x2
c0010eb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010eba:	e8 49 fa ff ff       	call   c0010908 <VgaText::setCursorHeight(int)>
c0010ebf:	83 c4 10             	add    esp,0x10
c0010ec2:	83 ec 04             	sub    esp,0x4
c0010ec5:	6a 00                	push   0x0
c0010ec7:	6a 00                	push   0x0
c0010ec9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ecd:	e8 e0 f5 ff ff       	call   c00104b2 <VgaText::setCursor(int, int)>
c0010ed2:	83 c4 10             	add    esp,0x10
c0010ed5:	83 ec 08             	sub    esp,0x8
c0010ed8:	6a 01                	push   0x1
c0010eda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ede:	e8 7d f3 ff ff       	call   c0010260 <VgaText::showCursor(bool)>
c0010ee3:	83 c4 10             	add    esp,0x10
c0010ee6:	83 ec 08             	sub    esp,0x8
c0010ee9:	6a 01                	push   0x1
c0010eeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010eef:	e8 7c f3 ff ff       	call   c0010270 <VgaText::disableBlink(bool)>
c0010ef4:	83 c4 10             	add    esp,0x10
c0010ef7:	83 ec 0c             	sub    esp,0xc
c0010efa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010efe:	e8 cf fc ff ff       	call   c0010bd2 <VgaText::clearScreen()>
c0010f03:	83 c4 10             	add    esp,0x10
c0010f06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f0a:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c0010f11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f15:	05 9e 10 00 00       	add    eax,0x109e
c0010f1a:	83 ec 04             	sub    esp,0x4
c0010f1d:	68 96 00 00 00       	push   0x96
c0010f22:	6a 00                	push   0x0
c0010f24:	50                   	push   eax
c0010f25:	e8 61 f7 fe ff       	call   c000068b <memset>
c0010f2a:	83 c4 10             	add    esp,0x10
c0010f2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f31:	05 34 11 00 00       	add    eax,0x1134
c0010f36:	83 ec 04             	sub    esp,0x4
c0010f39:	68 2c 01 00 00       	push   0x12c
c0010f3e:	6a 00                	push   0x0
c0010f40:	50                   	push   eax
c0010f41:	e8 45 f7 fe ff       	call   c000068b <memset>
c0010f46:	83 c4 10             	add    esp,0x10
c0010f49:	90                   	nop
c0010f4a:	5b                   	pop    ebx
c0010f4b:	5e                   	pop    esi
c0010f4c:	5f                   	pop    edi
c0010f4d:	c3                   	ret    

c0010f4e <VgaText::receiveKey(unsigned char)>:
c0010f4e:	55                   	push   ebp
c0010f4f:	57                   	push   edi
c0010f50:	56                   	push   esi
c0010f51:	53                   	push   ebx
c0010f52:	83 ec 1c             	sub    esp,0x1c
c0010f55:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010f59:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010f5d:	84 db                	test   bl,bl
c0010f5f:	0f 84 c9 00 00 00    	je     c001102e <VgaText::receiveKey(unsigned char)+0xe0>
c0010f65:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0010f6b:	80 fb 08             	cmp    bl,0x8
c0010f6e:	75 2c                	jne    c0010f9c <VgaText::receiveKey(unsigned char)+0x4e>
c0010f70:	83 ec 0c             	sub    esp,0xc
c0010f73:	57                   	push   edi
c0010f74:	e8 2f f7 fe ff       	call   c00006a8 <strlen>
c0010f79:	83 c4 10             	add    esp,0x10
c0010f7c:	85 c0                	test   eax,eax
c0010f7e:	74 41                	je     c0010fc1 <VgaText::receiveKey(unsigned char)+0x73>
c0010f80:	50                   	push   eax
c0010f81:	50                   	push   eax
c0010f82:	6a 08                	push   0x8
c0010f84:	56                   	push   esi
c0010f85:	e8 ac fc ff ff       	call   c0010c36 <VgaText::putchar(char)>
c0010f8a:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010f8d:	e8 16 f7 fe ff       	call   c00006a8 <strlen>
c0010f92:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c0010f9a:	eb 22                	jmp    c0010fbe <VgaText::receiveKey(unsigned char)+0x70>
c0010f9c:	0f be c3             	movsx  eax,bl
c0010f9f:	52                   	push   edx
c0010fa0:	52                   	push   edx
c0010fa1:	50                   	push   eax
c0010fa2:	56                   	push   esi
c0010fa3:	e8 8e fc ff ff       	call   c0010c36 <VgaText::putchar(char)>
c0010fa8:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010fac:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010fb1:	59                   	pop    ecx
c0010fb2:	5d                   	pop    ebp
c0010fb3:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010fb7:	50                   	push   eax
c0010fb8:	57                   	push   edi
c0010fb9:	e8 23 f8 fe ff       	call   c00007e1 <strcat>
c0010fbe:	83 c4 10             	add    esp,0x10
c0010fc1:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c0010fc8:	75 05                	jne    c0010fcf <VgaText::receiveKey(unsigned char)+0x81>
c0010fca:	80 fb 0a             	cmp    bl,0xa
c0010fcd:	75 53                	jne    c0011022 <VgaText::receiveKey(unsigned char)+0xd4>
c0010fcf:	83 ec 0c             	sub    esp,0xc
c0010fd2:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c0010fd8:	53                   	push   ebx
c0010fd9:	e8 ca f6 fe ff       	call   c00006a8 <strlen>
c0010fde:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010fe1:	89 c5                	mov    ebp,eax
c0010fe3:	e8 c0 f6 fe ff       	call   c00006a8 <strlen>
c0010fe8:	83 c4 10             	add    esp,0x10
c0010feb:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010fef:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010ff4:	76 10                	jbe    c0011006 <VgaText::receiveKey(unsigned char)+0xb8>
c0010ff6:	83 ec 0c             	sub    esp,0xc
c0010ff9:	68 df 8c 02 c0       	push   0xc0028cdf
c0010ffe:	e8 86 88 00 00       	call   c0019889 <Krnl::panic(char const*)>
c0011003:	83 c4 10             	add    esp,0x10
c0011006:	50                   	push   eax
c0011007:	50                   	push   eax
c0011008:	57                   	push   edi
c0011009:	53                   	push   ebx
c001100a:	e8 d2 f7 fe ff       	call   c00007e1 <strcat>
c001100f:	83 c4 0c             	add    esp,0xc
c0011012:	68 96 00 00 00       	push   0x96
c0011017:	6a 00                	push   0x0
c0011019:	57                   	push   edi
c001101a:	e8 6c f6 fe ff       	call   c000068b <memset>
c001101f:	83 c4 10             	add    esp,0x10
c0011022:	83 ec 0c             	sub    esp,0xc
c0011025:	56                   	push   esi
c0011026:	e8 d5 f9 ff ff       	call   c0010a00 <VgaText::doUpdate()>
c001102b:	83 c4 10             	add    esp,0x10
c001102e:	83 c4 1c             	add    esp,0x1c
c0011031:	5b                   	pop    ebx
c0011032:	5e                   	pop    esi
c0011033:	5f                   	pop    edi
c0011034:	5d                   	pop    ebp
c0011035:	c3                   	ret    

c0011036 <VgaText::write(unsigned long long, void*, int*)>:
c0011036:	55                   	push   ebp
c0011037:	57                   	push   edi
c0011038:	56                   	push   esi
c0011039:	53                   	push   ebx
c001103a:	83 ec 0c             	sub    esp,0xc
c001103d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011041:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011045:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011049:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c0011050:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0011053:	39 eb                	cmp    ebx,ebp
c0011055:	74 13                	je     c001106a <VgaText::write(unsigned long long, void*, int*)+0x34>
c0011057:	43                   	inc    ebx
c0011058:	50                   	push   eax
c0011059:	50                   	push   eax
c001105a:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c001105e:	50                   	push   eax
c001105f:	56                   	push   esi
c0011060:	e8 d1 fb ff ff       	call   c0010c36 <VgaText::putchar(char)>
c0011065:	83 c4 10             	add    esp,0x10
c0011068:	eb e9                	jmp    c0011053 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c001106a:	83 ec 0c             	sub    esp,0xc
c001106d:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0011074:	56                   	push   esi
c0011075:	e8 86 f9 ff ff       	call   c0010a00 <VgaText::doUpdate()>
c001107a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001107e:	89 38                	mov    DWORD PTR [eax],edi
c0011080:	83 c4 1c             	add    esp,0x1c
c0011083:	31 c0                	xor    eax,eax
c0011085:	5b                   	pop    ebx
c0011086:	5e                   	pop    esi
c0011087:	5f                   	pop    edi
c0011088:	5d                   	pop    ebp
c0011089:	c3                   	ret    

c001108a <newTerminal(char*)>:
c001108a:	83 ec 28             	sub    esp,0x28
c001108d:	68 60 12 00 00       	push   0x1260
c0011092:	e8 3d e4 ff ff       	call   c000f4d4 <malloc>
c0011097:	5a                   	pop    edx
c0011098:	59                   	pop    ecx
c0011099:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001109d:	50                   	push   eax
c001109e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00110a2:	e8 15 fd ff ff       	call   c0010dbc <VgaText::VgaText(char const*)>
c00110a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00110ab:	83 c4 2c             	add    esp,0x2c
c00110ae:	c3                   	ret    
c00110af:	90                   	nop

c00110b0 <TSS::TSS()>:
c00110b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00110b4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00110bb:	90                   	nop
c00110bc:	c3                   	ret    
c00110bd:	90                   	nop

c00110be <TSS::setESP(unsigned long)>:
c00110be:	55                   	push   ebp
c00110bf:	89 e5                	mov    ebp,esp
c00110c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110c7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00110ca:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00110cd:	90                   	nop
c00110ce:	5d                   	pop    ebp
c00110cf:	c3                   	ret    

c00110d0 <TSS::flush()>:
c00110d0:	55                   	push   ebp
c00110d1:	89 e5                	mov    ebp,esp
c00110d3:	83 ec 10             	sub    esp,0x10
c00110d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00110db:	83 c8 03             	or     eax,0x3
c00110de:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00110e2:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00110e6:	66 89 d0             	mov    ax,dx
c00110e9:	0f 00 d8             	ltr    ax
c00110ec:	90                   	nop
c00110ed:	c9                   	leave  
c00110ee:	c3                   	ret    
c00110ef:	90                   	nop

c00110f0 <TSS::setup(unsigned long, unsigned long)>:
c00110f0:	55                   	push   ebp
c00110f1:	89 e5                	mov    ebp,esp
c00110f3:	83 ec 18             	sub    esp,0x18
c00110f6:	83 ec 0c             	sub    esp,0xc
c00110f9:	6a 68                	push   0x68
c00110fb:	e8 d4 e3 ff ff       	call   c000f4d4 <malloc>
c0011100:	83 c4 10             	add    esp,0x10
c0011103:	89 c2                	mov    edx,eax
c0011105:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011108:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001110b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001110e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011111:	83 ec 04             	sub    esp,0x4
c0011114:	6a 68                	push   0x68
c0011116:	6a 00                	push   0x0
c0011118:	50                   	push   eax
c0011119:	e8 6d f5 fe ff       	call   c000068b <memset>
c001111e:	83 c4 10             	add    esp,0x10
c0011121:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011124:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011127:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c001112d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011130:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011133:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0011139:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001113c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001113f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011142:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011145:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011148:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001114b:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0011151:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011154:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011157:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c001115d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011160:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011163:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0011169:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001116c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001116f:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0011175:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011178:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001117b:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0011181:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011184:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011187:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c001118d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011190:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011193:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0011196:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0011199:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001119c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001119f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00111a2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00111a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00111a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00111ab:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00111b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00111b5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00111b8:	0f 20 da             	mov    edx,cr3
c00111bb:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00111be:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00111c1:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00111c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00111c7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00111ca:	83 ec 08             	sub    esp,0x8
c00111cd:	50                   	push   eax
c00111ce:	8d 45 ec             	lea    eax,[ebp-0x14]
c00111d1:	50                   	push   eax
c00111d2:	e8 db da ff ff       	call   c000ecb2 <GDTEntry::setBase(unsigned int)>
c00111d7:	83 c4 10             	add    esp,0x10
c00111da:	83 ec 08             	sub    esp,0x8
c00111dd:	6a 68                	push   0x68
c00111df:	8d 45 ec             	lea    eax,[ebp-0x14]
c00111e2:	50                   	push   eax
c00111e3:	e8 e6 da ff ff       	call   c000ecce <GDTEntry::setLimit(unsigned int)>
c00111e8:	83 c4 10             	add    esp,0x10
c00111eb:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00111ef:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00111f2:	83 e0 0f             	and    eax,0xf
c00111f5:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00111f8:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00111fb:	83 c8 40             	or     eax,0x40
c00111fe:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011201:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c0011206:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001120c:	05 78 01 00 00       	add    eax,0x178
c0011211:	83 ec 04             	sub    esp,0x4
c0011214:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011217:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001121a:	50                   	push   eax
c001121b:	e8 e2 da ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c0011220:	83 c4 10             	add    esp,0x10
c0011223:	89 c2                	mov    edx,eax
c0011225:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011228:	89 10                	mov    DWORD PTR [eax],edx
c001122a:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c001122f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011235:	05 78 01 00 00       	add    eax,0x178
c001123a:	83 ec 0c             	sub    esp,0xc
c001123d:	50                   	push   eax
c001123e:	e8 03 db ff ff       	call   c000ed46 <GDT::flush()>
c0011243:	83 c4 10             	add    esp,0x10
c0011246:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011249:	8b 00                	mov    eax,DWORD PTR [eax]
c001124b:	83 ec 08             	sub    esp,0x8
c001124e:	50                   	push   eax
c001124f:	68 48 8d 02 c0       	push   0xc0028d48
c0011254:	e8 16 15 00 00       	call   c001276f <Dbg::kprintf(char const*, ...)>
c0011259:	83 c4 10             	add    esp,0x10
c001125c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001125f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011261:	c9                   	leave  
c0011262:	c3                   	ret    
c0011263:	90                   	nop

c0011264 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011264:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011268:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001126c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001126f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011274:	75 08                	jne    c001127e <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011276:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c001127c:	eb 38                	jmp    c00112b6 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c001127e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011283:	75 17                	jne    c001129c <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0011285:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001128a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001128d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011293:	8b 10                	mov    edx,DWORD PTR [eax]
c0011295:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011299:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c001129c:	89 c1                	mov    ecx,eax
c001129e:	83 e1 fd             	and    ecx,0xfffffffd
c00112a1:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00112a7:	74 cd                	je     c0011276 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00112a9:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00112ae:	83 e0 ef             	and    eax,0xffffffef
c00112b1:	83 f8 08             	cmp    eax,0x8
c00112b4:	76 c0                	jbe    c0011276 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00112b6:	31 c0                	xor    eax,eax
c00112b8:	c3                   	ret    
c00112b9:	90                   	nop

c00112ba <ReservedFilename::isAtty()>:
c00112ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112be:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00112c1:	31 c0                	xor    eax,eax
c00112c3:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00112c9:	74 09                	je     c00112d4 <ReservedFilename::isAtty()+0x1a>
c00112cb:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00112d1:	0f 94 c0             	sete   al
c00112d4:	c3                   	ret    
c00112d5:	90                   	nop

c00112d6 <ReservedFilename::write(unsigned long long, void*, int*)>:
c00112d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112da:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00112de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112e1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00112e5:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00112ea:	75 08                	jne    c00112f4 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00112ec:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00112f2:	eb 3d                	jmp    c0011331 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00112f4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00112f9:	75 17                	jne    c0011312 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c00112fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011300:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011303:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011309:	8b 10                	mov    edx,DWORD PTR [eax]
c001130b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001130f:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011312:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011317:	75 04                	jne    c001131d <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0011319:	89 0a                	mov    DWORD PTR [edx],ecx
c001131b:	eb 14                	jmp    c0011331 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001131d:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011322:	74 c8                	je     c00112ec <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011324:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011329:	83 e0 ef             	and    eax,0xffffffef
c001132c:	83 f8 08             	cmp    eax,0x8
c001132f:	76 bb                	jbe    c00112ec <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011331:	31 c0                	xor    eax,eax
c0011333:	c3                   	ret    

c0011334 <UnixFile::getFileDescriptor()>:
c0011334:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011338:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001133b:	c3                   	ret    

c001133c <UnixFile::UnixFile(int)>:
c001133c:	53                   	push   ebx
c001133d:	83 ec 28             	sub    esp,0x28
c0011340:	ba 34 8e 02 c0       	mov    edx,0xc0028e34
c0011345:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011349:	89 10                	mov    DWORD PTR [eax],edx
c001134b:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0011353:	0f 8f 8c 01 00 00    	jg     c00114e5 <UnixFile::UnixFile(int)+0x1a9>
c0011359:	a1 e0 b8 02 c0       	mov    eax,ds:0xc002b8e0
c001135e:	8d 50 01             	lea    edx,[eax+0x1]
c0011361:	89 15 e0 b8 02 c0    	mov    DWORD PTR ds:0xc002b8e0,edx
c0011367:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001136b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001136e:	83 ec 08             	sub    esp,0x8
c0011371:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011375:	68 b8 ca 02 c0       	push   0xc002cab8
c001137a:	e8 91 5d 01 00       	call   c0027110 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001137f:	83 c4 10             	add    esp,0x10
c0011382:	a0 b4 ca 02 c0       	mov    al,ds:0xc002cab4
c0011387:	83 f0 01             	xor    eax,0x1
c001138a:	84 c0                	test   al,al
c001138c:	0f 84 54 01 00 00    	je     c00114e6 <UnixFile::UnixFile(int)+0x1aa>
c0011392:	c6 05 b4 ca 02 c0 01 	mov    BYTE PTR ds:0xc002cab4,0x1
c0011399:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00113a1:	83 ec 0c             	sub    esp,0xc
c00113a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00113a8:	e8 27 e1 ff ff       	call   c000f4d4 <malloc>
c00113ad:	83 c4 10             	add    esp,0x10
c00113b0:	89 c3                	mov    ebx,eax
c00113b2:	83 ec 08             	sub    esp,0x8
c00113b5:	68 03 ff ff 0f       	push   0xfffff03
c00113ba:	53                   	push   ebx
c00113bb:	e8 2c 01 00 00       	call   c00114ec <ReservedFilename::ReservedFilename(int)>
c00113c0:	83 c4 10             	add    esp,0x10
c00113c3:	89 1d ac ca 02 c0    	mov    DWORD PTR ds:0xc002caac,ebx
c00113c9:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00113d1:	83 ec 0c             	sub    esp,0xc
c00113d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113d8:	e8 f7 e0 ff ff       	call   c000f4d4 <malloc>
c00113dd:	83 c4 10             	add    esp,0x10
c00113e0:	89 c3                	mov    ebx,eax
c00113e2:	83 ec 08             	sub    esp,0x8
c00113e5:	68 01 ff ff 0f       	push   0xfffff01
c00113ea:	53                   	push   ebx
c00113eb:	e8 fc 00 00 00       	call   c00114ec <ReservedFilename::ReservedFilename(int)>
c00113f0:	83 c4 10             	add    esp,0x10
c00113f3:	89 1d b0 ca 02 c0    	mov    DWORD PTR ds:0xc002cab0,ebx
c00113f9:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011401:	83 ec 0c             	sub    esp,0xc
c0011404:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011408:	e8 c7 e0 ff ff       	call   c000f4d4 <malloc>
c001140d:	83 c4 10             	add    esp,0x10
c0011410:	89 c3                	mov    ebx,eax
c0011412:	83 ec 08             	sub    esp,0x8
c0011415:	68 00 ff ff 0f       	push   0xfffff00
c001141a:	53                   	push   ebx
c001141b:	e8 cc 00 00 00       	call   c00114ec <ReservedFilename::ReservedFilename(int)>
c0011420:	83 c4 10             	add    esp,0x10
c0011423:	89 1d a4 ca 02 c0    	mov    DWORD PTR ds:0xc002caa4,ebx
c0011429:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0011431:	83 ec 0c             	sub    esp,0xc
c0011434:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011438:	e8 97 e0 ff ff       	call   c000f4d4 <malloc>
c001143d:	83 c4 10             	add    esp,0x10
c0011440:	89 c3                	mov    ebx,eax
c0011442:	83 ec 08             	sub    esp,0x8
c0011445:	68 02 ff ff 0f       	push   0xfffff02
c001144a:	53                   	push   ebx
c001144b:	e8 9c 00 00 00       	call   c00114ec <ReservedFilename::ReservedFilename(int)>
c0011450:	83 c4 10             	add    esp,0x10
c0011453:	89 1d a8 ca 02 c0    	mov    DWORD PTR ds:0xc002caa8,ebx
c0011459:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011461:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011466:	7f 7e                	jg     c00114e6 <UnixFile::UnixFile(int)+0x1aa>
c0011468:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011470:	83 ec 0c             	sub    esp,0xc
c0011473:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011477:	e8 58 e0 ff ff       	call   c000f4d4 <malloc>
c001147c:	83 c4 10             	add    esp,0x10
c001147f:	89 c3                	mov    ebx,eax
c0011481:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011485:	05 10 ff ff 0f       	add    eax,0xfffff10
c001148a:	83 ec 08             	sub    esp,0x8
c001148d:	50                   	push   eax
c001148e:	53                   	push   ebx
c001148f:	e8 58 00 00 00       	call   c00114ec <ReservedFilename::ReservedFilename(int)>
c0011494:	83 c4 10             	add    esp,0x10
c0011497:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001149b:	89 1c 85 80 ca 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3580],ebx
c00114a2:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00114aa:	83 ec 0c             	sub    esp,0xc
c00114ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00114b1:	e8 1e e0 ff ff       	call   c000f4d4 <malloc>
c00114b6:	83 c4 10             	add    esp,0x10
c00114b9:	89 c3                	mov    ebx,eax
c00114bb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114bf:	05 20 ff ff 0f       	add    eax,0xfffff20
c00114c4:	83 ec 08             	sub    esp,0x8
c00114c7:	50                   	push   eax
c00114c8:	53                   	push   ebx
c00114c9:	e8 1e 00 00 00       	call   c00114ec <ReservedFilename::ReservedFilename(int)>
c00114ce:	83 c4 10             	add    esp,0x10
c00114d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114d5:	89 1c 85 40 ca 02 c0 	mov    DWORD PTR [eax*4-0x3ffd35c0],ebx
c00114dc:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00114e0:	e9 7c ff ff ff       	jmp    c0011461 <UnixFile::UnixFile(int)+0x125>
c00114e5:	90                   	nop
c00114e6:	83 c4 28             	add    esp,0x28
c00114e9:	5b                   	pop    ebx
c00114ea:	c3                   	ret    
c00114eb:	90                   	nop

c00114ec <ReservedFilename::ReservedFilename(int)>:
c00114ec:	83 ec 0c             	sub    esp,0xc
c00114ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00114f3:	83 ec 08             	sub    esp,0x8
c00114f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114fa:	50                   	push   eax
c00114fb:	e8 3c fe ff ff       	call   c001133c <UnixFile::UnixFile(int)>
c0011500:	83 c4 10             	add    esp,0x10
c0011503:	ba 50 8e 02 c0       	mov    edx,0xc0028e50
c0011508:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001150c:	89 10                	mov    DWORD PTR [eax],edx
c001150e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011512:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011516:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011519:	90                   	nop
c001151a:	83 c4 0c             	add    esp,0xc
c001151d:	c3                   	ret    

c001151e <UnixFile::~UnixFile()>:
c001151e:	83 ec 1c             	sub    esp,0x1c
c0011521:	ba 34 8e 02 c0       	mov    edx,0xc0028e34
c0011526:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001152a:	89 10                	mov    DWORD PTR [eax],edx
c001152c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011530:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011533:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011538:	7f 73                	jg     c00115ad <UnixFile::~UnixFile()+0x8f>
c001153a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011542:	83 ec 0c             	sub    esp,0xc
c0011545:	68 b8 ca 02 c0       	push   0xc002cab8
c001154a:	e8 95 5c 01 00       	call   c00271e4 <LinkedList<UnixFile>::getFirstElement()>
c001154f:	83 c4 10             	add    esp,0x10
c0011552:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011556:	83 ec 0c             	sub    esp,0xc
c0011559:	68 b8 ca 02 c0       	push   0xc002cab8
c001155e:	e8 89 5c 01 00       	call   c00271ec <LinkedList<UnixFile>::removeFirst()>
c0011563:	83 c4 10             	add    esp,0x10
c0011566:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001156a:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001156e:	74 40                	je     c00115b0 <UnixFile::~UnixFile()+0x92>
c0011570:	83 ec 08             	sub    esp,0x8
c0011573:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011577:	68 b8 ca 02 c0       	push   0xc002cab8
c001157c:	e8 8f 5b 01 00       	call   c0027110 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011581:	83 c4 10             	add    esp,0x10
c0011584:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011588:	8d 50 01             	lea    edx,[eax+0x1]
c001158b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001158f:	3d 88 13 00 00       	cmp    eax,0x1388
c0011594:	0f 94 c0             	sete   al
c0011597:	84 c0                	test   al,al
c0011599:	74 a7                	je     c0011542 <UnixFile::~UnixFile()+0x24>
c001159b:	83 ec 0c             	sub    esp,0xc
c001159e:	68 0c 8e 02 c0       	push   0xc0028e0c
c00115a3:	e8 e1 82 00 00       	call   c0019889 <Krnl::panic(char const*)>
c00115a8:	83 c4 10             	add    esp,0x10
c00115ab:	eb 95                	jmp    c0011542 <UnixFile::~UnixFile()+0x24>
c00115ad:	90                   	nop
c00115ae:	eb 01                	jmp    c00115b1 <UnixFile::~UnixFile()+0x93>
c00115b0:	90                   	nop
c00115b1:	90                   	nop
c00115b2:	83 c4 1c             	add    esp,0x1c
c00115b5:	c3                   	ret    

c00115b6 <UnixFile::~UnixFile()>:
c00115b6:	83 ec 0c             	sub    esp,0xc
c00115b9:	83 ec 0c             	sub    esp,0xc
c00115bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115c0:	e8 59 ff ff ff       	call   c001151e <UnixFile::~UnixFile()>
c00115c5:	83 c4 10             	add    esp,0x10
c00115c8:	83 ec 08             	sub    esp,0x8
c00115cb:	6a 0c                	push   0xc
c00115cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115d1:	e8 b9 10 00 00       	call   c001268f <operator delete(void*, unsigned long)>
c00115d6:	83 c4 10             	add    esp,0x10
c00115d9:	83 c4 0c             	add    esp,0xc
c00115dc:	c3                   	ret    
c00115dd:	90                   	nop

c00115de <ReservedFilename::~ReservedFilename()>:
c00115de:	83 ec 0c             	sub    esp,0xc
c00115e1:	ba 50 8e 02 c0       	mov    edx,0xc0028e50
c00115e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115ea:	89 10                	mov    DWORD PTR [eax],edx
c00115ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115f0:	83 ec 0c             	sub    esp,0xc
c00115f3:	50                   	push   eax
c00115f4:	e8 25 ff ff ff       	call   c001151e <UnixFile::~UnixFile()>
c00115f9:	83 c4 10             	add    esp,0x10
c00115fc:	90                   	nop
c00115fd:	83 c4 0c             	add    esp,0xc
c0011600:	c3                   	ret    
c0011601:	90                   	nop

c0011602 <ReservedFilename::~ReservedFilename()>:
c0011602:	83 ec 0c             	sub    esp,0xc
c0011605:	83 ec 0c             	sub    esp,0xc
c0011608:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001160c:	e8 cd ff ff ff       	call   c00115de <ReservedFilename::~ReservedFilename()>
c0011611:	83 c4 10             	add    esp,0x10
c0011614:	83 ec 08             	sub    esp,0x8
c0011617:	6a 0c                	push   0xc
c0011619:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001161d:	e8 6d 10 00 00       	call   c001268f <operator delete(void*, unsigned long)>
c0011622:	83 c4 10             	add    esp,0x10
c0011625:	83 c4 0c             	add    esp,0xc
c0011628:	c3                   	ret    

c0011629 <getFromFileDescriptor(int)>:
c0011629:	53                   	push   ebx
c001162a:	83 ec 08             	sub    esp,0x8
c001162d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011631:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011637:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c001163d:	7f 2c                	jg     c001166b <getFromFileDescriptor(int)+0x42>
c001163f:	83 ec 0c             	sub    esp,0xc
c0011642:	68 b8 ca 02 c0       	push   0xc002cab8
c0011647:	e8 98 5b 01 00       	call   c00271e4 <LinkedList<UnixFile>::getFirstElement()>
c001164c:	83 c4 10             	add    esp,0x10
c001164f:	85 c0                	test   eax,eax
c0011651:	75 04                	jne    c0011657 <getFromFileDescriptor(int)+0x2e>
c0011653:	31 c0                	xor    eax,eax
c0011655:	eb 6e                	jmp    c00116c5 <getFromFileDescriptor(int)+0x9c>
c0011657:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c001165a:	74 69                	je     c00116c5 <getFromFileDescriptor(int)+0x9c>
c001165c:	52                   	push   edx
c001165d:	52                   	push   edx
c001165e:	50                   	push   eax
c001165f:	68 b8 ca 02 c0       	push   0xc002cab8
c0011664:	e8 25 5c 01 00       	call   c002728e <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011669:	eb e1                	jmp    c001164c <getFromFileDescriptor(int)+0x23>
c001166b:	a1 ac ca 02 c0       	mov    eax,ds:0xc002caac
c0011670:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011676:	74 4d                	je     c00116c5 <getFromFileDescriptor(int)+0x9c>
c0011678:	a1 b0 ca 02 c0       	mov    eax,ds:0xc002cab0
c001167d:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011683:	74 40                	je     c00116c5 <getFromFileDescriptor(int)+0x9c>
c0011685:	a1 a8 ca 02 c0       	mov    eax,ds:0xc002caa8
c001168a:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011690:	74 33                	je     c00116c5 <getFromFileDescriptor(int)+0x9c>
c0011692:	a1 a4 ca 02 c0       	mov    eax,ds:0xc002caa4
c0011697:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001169d:	74 26                	je     c00116c5 <getFromFileDescriptor(int)+0x9c>
c001169f:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00116a5:	83 f8 08             	cmp    eax,0x8
c00116a8:	77 09                	ja     c00116b3 <getFromFileDescriptor(int)+0x8a>
c00116aa:	8b 04 85 80 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3580]
c00116b1:	eb 12                	jmp    c00116c5 <getFromFileDescriptor(int)+0x9c>
c00116b3:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00116b9:	83 fb 08             	cmp    ebx,0x8
c00116bc:	77 95                	ja     c0011653 <getFromFileDescriptor(int)+0x2a>
c00116be:	8b 04 9d 40 ca 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd35c0]
c00116c5:	83 c4 08             	add    esp,0x8
c00116c8:	5b                   	pop    ebx
c00116c9:	c3                   	ret    

c00116ca <__static_initialization_and_destruction_0(int, int)>:
c00116ca:	83 ec 0c             	sub    esp,0xc
c00116cd:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00116d2:	75 34                	jne    c0011708 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00116d4:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00116dc:	75 2a                	jne    c0011708 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00116de:	83 ec 0c             	sub    esp,0xc
c00116e1:	68 b8 ca 02 c0       	push   0xc002cab8
c00116e6:	e8 cd 59 01 00       	call   c00270b8 <LinkedList<UnixFile>::LinkedList()>
c00116eb:	83 c4 10             	add    esp,0x10
c00116ee:	83 ec 04             	sub    esp,0x4
c00116f1:	68 68 b8 02 c0       	push   0xc002b868
c00116f6:	68 b8 ca 02 c0       	push   0xc002cab8
c00116fb:	68 b6 70 02 c0       	push   0xc00270b6
c0011700:	e8 04 0f 00 00       	call   c0012609 <__cxa_atexit>
c0011705:	83 c4 10             	add    esp,0x10
c0011708:	90                   	nop
c0011709:	83 c4 0c             	add    esp,0xc
c001170c:	c3                   	ret    

c001170d <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c001170d:	83 ec 0c             	sub    esp,0xc
c0011710:	83 ec 08             	sub    esp,0x8
c0011713:	68 ff ff 00 00       	push   0xffff
c0011718:	6a 01                	push   0x1
c001171a:	e8 ab ff ff ff       	call   c00116ca <__static_initialization_and_destruction_0(int, int)>
c001171f:	83 c4 10             	add    esp,0x10
c0011722:	83 c4 0c             	add    esp,0xc
c0011725:	c3                   	ret    

c0011726 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011726:	53                   	push   ebx
c0011727:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001172b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001172f:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011735:	89 c8                	mov    eax,ecx
c0011737:	d1 e8                	shr    eax,1
c0011739:	03 05 e8 b8 02 c0    	add    eax,DWORD PTR ds:0xc002b8e8
c001173f:	83 e1 01             	and    ecx,0x1
c0011742:	8a 10                	mov    dl,BYTE PTR [eax]
c0011744:	75 09                	jne    c001174f <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011746:	83 e2 f0             	and    edx,0xfffffff0
c0011749:	09 da                	or     edx,ebx
c001174b:	88 10                	mov    BYTE PTR [eax],dl
c001174d:	5b                   	pop    ebx
c001174e:	c3                   	ret    
c001174f:	c1 e3 04             	shl    ebx,0x4
c0011752:	83 e2 0f             	and    edx,0xf
c0011755:	09 da                	or     edx,ebx
c0011757:	88 10                	mov    BYTE PTR [eax],dl
c0011759:	5b                   	pop    ebx
c001175a:	c3                   	ret    

c001175b <Virt::getPageState(unsigned long)>:
c001175b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001175f:	8b 0d e8 b8 02 c0    	mov    ecx,DWORD PTR ds:0xc002b8e8
c0011765:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c001176b:	89 d0                	mov    eax,edx
c001176d:	d1 e8                	shr    eax,1
c001176f:	83 e2 01             	and    edx,0x1
c0011772:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011775:	75 04                	jne    c001177b <Virt::getPageState(unsigned long)+0x20>
c0011777:	83 e0 0f             	and    eax,0xf
c001177a:	c3                   	ret    
c001177b:	c0 e8 04             	shr    al,0x4
c001177e:	c3                   	ret    

c001177f <Virt::allocateKernelVirtualPages(int)>:
c001177f:	55                   	push   ebp
c0011780:	31 ed                	xor    ebp,ebp
c0011782:	57                   	push   edi
c0011783:	56                   	push   esi
c0011784:	53                   	push   ebx
c0011785:	31 db                	xor    ebx,ebx
c0011787:	83 ec 1c             	sub    esp,0x1c
c001178a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001178e:	8b 3d e4 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b8e4
c0011794:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011799:	57                   	push   edi
c001179a:	e8 bc ff ff ff       	call   c001175b <Virt::getPageState(unsigned long)>
c001179f:	5a                   	pop    edx
c00117a0:	84 c0                	test   al,al
c00117a2:	75 3a                	jne    c00117de <Virt::allocateKernelVirtualPages(int)+0x5f>
c00117a4:	85 db                	test   ebx,ebx
c00117a6:	75 02                	jne    c00117aa <Virt::allocateKernelVirtualPages(int)+0x2b>
c00117a8:	89 fd                	mov    ebp,edi
c00117aa:	43                   	inc    ebx
c00117ab:	39 f3                	cmp    ebx,esi
c00117ad:	74 5a                	je     c0011809 <Virt::allocateKernelVirtualPages(int)+0x8a>
c00117af:	47                   	inc    edi
c00117b0:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00117b6:	76 31                	jbe    c00117e9 <Virt::allocateKernelVirtualPages(int)+0x6a>
c00117b8:	c7 05 e4 b8 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002b8e4,0xc8000
c00117c2:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00117c7:	75 28                	jne    c00117f1 <Virt::allocateKernelVirtualPages(int)+0x72>
c00117c9:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00117ce:	bf 00 80 0c 00       	mov    edi,0xc8000
c00117d3:	57                   	push   edi
c00117d4:	e8 82 ff ff ff       	call   c001175b <Virt::getPageState(unsigned long)>
c00117d9:	5a                   	pop    edx
c00117da:	84 c0                	test   al,al
c00117dc:	74 c6                	je     c00117a4 <Virt::allocateKernelVirtualPages(int)+0x25>
c00117de:	31 db                	xor    ebx,ebx
c00117e0:	47                   	inc    edi
c00117e1:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00117e7:	77 cf                	ja     c00117b8 <Virt::allocateKernelVirtualPages(int)+0x39>
c00117e9:	89 3d e4 b8 02 c0    	mov    DWORD PTR ds:0xc002b8e4,edi
c00117ef:	eb a8                	jmp    c0011799 <Virt::allocateKernelVirtualPages(int)+0x1a>
c00117f1:	83 ec 0c             	sub    esp,0xc
c00117f4:	68 64 8e 02 c0       	push   0xc0028e64
c00117f9:	e8 8b 80 00 00       	call   c0019889 <Krnl::panic(char const*)>
c00117fe:	8b 3d e4 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b8e4
c0011804:	83 c4 10             	add    esp,0x10
c0011807:	eb 90                	jmp    c0011799 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011809:	89 2d e4 b8 02 c0    	mov    DWORD PTR ds:0xc002b8e4,ebp
c001180f:	4b                   	dec    ebx
c0011810:	74 5f                	je     c0011871 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011812:	85 f6                	test   esi,esi
c0011814:	74 3d                	je     c0011853 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011816:	89 e8                	mov    eax,ebp
c0011818:	31 db                	xor    ebx,ebx
c001181a:	8d 7e ff             	lea    edi,[esi-0x1]
c001181d:	eb 14                	jmp    c0011833 <Virt::allocateKernelVirtualPages(int)+0xb4>
c001181f:	6a 01                	push   0x1
c0011821:	43                   	inc    ebx
c0011822:	50                   	push   eax
c0011823:	e8 fe fe ff ff       	call   c0011726 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011828:	58                   	pop    eax
c0011829:	39 f3                	cmp    ebx,esi
c001182b:	5a                   	pop    edx
c001182c:	74 25                	je     c0011853 <Virt::allocateKernelVirtualPages(int)+0xd4>
c001182e:	a1 e4 b8 02 c0       	mov    eax,ds:0xc002b8e4
c0011833:	8d 50 01             	lea    edx,[eax+0x1]
c0011836:	85 db                	test   ebx,ebx
c0011838:	89 15 e4 b8 02 c0    	mov    DWORD PTR ds:0xc002b8e4,edx
c001183e:	74 20                	je     c0011860 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011840:	39 df                	cmp    edi,ebx
c0011842:	75 db                	jne    c001181f <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011844:	6a 03                	push   0x3
c0011846:	43                   	inc    ebx
c0011847:	50                   	push   eax
c0011848:	e8 d9 fe ff ff       	call   c0011726 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001184d:	59                   	pop    ecx
c001184e:	39 f3                	cmp    ebx,esi
c0011850:	58                   	pop    eax
c0011851:	75 db                	jne    c001182e <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011853:	83 c4 1c             	add    esp,0x1c
c0011856:	89 e8                	mov    eax,ebp
c0011858:	5b                   	pop    ebx
c0011859:	c1 e0 0c             	shl    eax,0xc
c001185c:	5e                   	pop    esi
c001185d:	5f                   	pop    edi
c001185e:	5d                   	pop    ebp
c001185f:	c3                   	ret    
c0011860:	6a 02                	push   0x2
c0011862:	bb 01 00 00 00       	mov    ebx,0x1
c0011867:	50                   	push   eax
c0011868:	e8 b9 fe ff ff       	call   c0011726 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001186d:	58                   	pop    eax
c001186e:	5a                   	pop    edx
c001186f:	eb bd                	jmp    c001182e <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011871:	6a 04                	push   0x4
c0011873:	8d 45 01             	lea    eax,[ebp+0x1]
c0011876:	55                   	push   ebp
c0011877:	a3 e4 b8 02 c0       	mov    ds:0xc002b8e4,eax
c001187c:	e8 a5 fe ff ff       	call   c0011726 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011881:	59                   	pop    ecx
c0011882:	89 e8                	mov    eax,ebp
c0011884:	5b                   	pop    ebx
c0011885:	c1 e0 0c             	shl    eax,0xc
c0011888:	83 c4 1c             	add    esp,0x1c
c001188b:	5b                   	pop    ebx
c001188c:	5e                   	pop    esi
c001188d:	5f                   	pop    edi
c001188e:	5d                   	pop    ebp
c001188f:	c3                   	ret    

c0011890 <Virt::virtualMemorySetup()>:
c0011890:	53                   	push   ebx
c0011891:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011896:	83 ec 08             	sub    esp,0x8
c0011899:	6a 0f                	push   0xf
c001189b:	53                   	push   ebx
c001189c:	43                   	inc    ebx
c001189d:	e8 84 fe ff ff       	call   c0011726 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00118a2:	59                   	pop    ecx
c00118a3:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00118a9:	58                   	pop    eax
c00118aa:	75 ed                	jne    c0011899 <Virt::virtualMemorySetup()+0x9>
c00118ac:	83 ec 08             	sub    esp,0x8
c00118af:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00118b4:	68 00 00 00 c8       	push   0xc8000000
c00118b9:	68 eb 8f 02 c0       	push   0xc0028feb
c00118be:	e8 ac 0e 00 00       	call   c001276f <Dbg::kprintf(char const*, ...)>
c00118c3:	58                   	pop    eax
c00118c4:	5a                   	pop    edx
c00118c5:	68 00 f0 ff ef       	push   0xeffff000
c00118ca:	68 ff 8f 02 c0       	push   0xc0028fff
c00118cf:	e8 9b 0e 00 00       	call   c001276f <Dbg::kprintf(char const*, ...)>
c00118d4:	83 c4 10             	add    esp,0x10
c00118d7:	83 ec 08             	sub    esp,0x8
c00118da:	6a 00                	push   0x0
c00118dc:	53                   	push   ebx
c00118dd:	43                   	inc    ebx
c00118de:	e8 43 fe ff ff       	call   c0011726 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00118e3:	83 c4 10             	add    esp,0x10
c00118e6:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00118ec:	75 e9                	jne    c00118d7 <Virt::virtualMemorySetup()+0x47>
c00118ee:	bb 00 00 0d 00       	mov    ebx,0xd0000
c00118f3:	83 ec 08             	sub    esp,0x8
c00118f6:	6a 0f                	push   0xf
c00118f8:	53                   	push   ebx
c00118f9:	43                   	inc    ebx
c00118fa:	e8 27 fe ff ff       	call   c0011726 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00118ff:	83 c4 10             	add    esp,0x10
c0011902:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011908:	75 e9                	jne    c00118f3 <Virt::virtualMemorySetup()+0x63>
c001190a:	83 c4 08             	add    esp,0x8
c001190d:	5b                   	pop    ebx
c001190e:	c3                   	ret    

c001190f <Virt::getAKernelVAS()>:
c001190f:	a1 c4 ca 02 c0       	mov    eax,ds:0xc002cac4
c0011914:	c3                   	ret    

c0011915 <Virt::setupPageSwapping(int)>:
c0011915:	57                   	push   edi
c0011916:	56                   	push   esi
c0011917:	53                   	push   ebx
c0011918:	83 ec 1c             	sub    esp,0x1c
c001191b:	68 14 01 00 00       	push   0x114
c0011920:	e8 af db ff ff       	call   c000f4d4 <malloc>
c0011925:	83 c4 0c             	add    esp,0xc
c0011928:	89 c6                	mov    esi,eax
c001192a:	ff 35 94 de 02 c0    	push   DWORD PTR ds:0xc002de94
c0011930:	68 13 90 02 c0       	push   0xc0029013
c0011935:	50                   	push   eax
c0011936:	e8 63 13 00 00       	call   c0012c9e <File::File(char const*, Process*)>
c001193b:	89 34 24             	mov    DWORD PTR [esp],esi
c001193e:	e8 37 15 00 00       	call   c0012e7a <File::unlink()>
c0011943:	58                   	pop    eax
c0011944:	5a                   	pop    edx
c0011945:	6a 12                	push   0x12
c0011947:	56                   	push   esi
c0011948:	e8 b5 13 00 00       	call   c0012d02 <File::open(FileOpenMode)>
c001194d:	83 c4 10             	add    esp,0x10
c0011950:	85 c0                	test   eax,eax
c0011952:	0f 85 ca 00 00 00    	jne    c0011a22 <Virt::setupPageSwapping(int)+0x10d>
c0011958:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001195c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011964:	c1 e3 08             	shl    ebx,0x8
c0011967:	83 ec 0c             	sub    esp,0xc
c001196a:	68 00 00 01 00       	push   0x10000
c001196f:	e8 60 db ff ff       	call   c000f4d4 <malloc>
c0011974:	83 c4 0c             	add    esp,0xc
c0011977:	89 c7                	mov    edi,eax
c0011979:	68 00 00 01 00       	push   0x10000
c001197e:	6a 00                	push   0x0
c0011980:	50                   	push   eax
c0011981:	e8 05 ed fe ff       	call   c000068b <memset>
c0011986:	83 c4 10             	add    esp,0x10
c0011989:	85 db                	test   ebx,ebx
c001198b:	79 03                	jns    c0011990 <Virt::setupPageSwapping(int)+0x7b>
c001198d:	83 c3 0f             	add    ebx,0xf
c0011990:	c1 fb 04             	sar    ebx,0x4
c0011993:	4b                   	dec    ebx
c0011994:	83 fb ff             	cmp    ebx,0xffffffff
c0011997:	74 4b                	je     c00119e4 <Virt::setupPageSwapping(int)+0xcf>
c0011999:	83 ec 0c             	sub    esp,0xc
c001199c:	8b 06                	mov    eax,DWORD PTR [esi]
c001199e:	8d 54 24 18          	lea    edx,[esp+0x18]
c00119a2:	52                   	push   edx
c00119a3:	57                   	push   edi
c00119a4:	6a 00                	push   0x0
c00119a6:	68 00 00 01 00       	push   0x10000
c00119ab:	56                   	push   esi
c00119ac:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00119af:	83 c4 20             	add    esp,0x20
c00119b2:	85 c0                	test   eax,eax
c00119b4:	75 59                	jne    c0011a0f <Virt::setupPageSwapping(int)+0xfa>
c00119b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119ba:	3d 00 00 01 00       	cmp    eax,0x10000
c00119bf:	74 d2                	je     c0011993 <Virt::setupPageSwapping(int)+0x7e>
c00119c1:	83 ec 08             	sub    esp,0x8
c00119c4:	4b                   	dec    ebx
c00119c5:	50                   	push   eax
c00119c6:	68 66 90 02 c0       	push   0xc0029066
c00119cb:	e8 9f 0d 00 00       	call   c001276f <Dbg::kprintf(char const*, ...)>
c00119d0:	c7 04 24 6f 90 02 c0 	mov    DWORD PTR [esp],0xc002906f
c00119d7:	e8 ad 7e 00 00       	call   c0019889 <Krnl::panic(char const*)>
c00119dc:	83 c4 10             	add    esp,0x10
c00119df:	83 fb ff             	cmp    ebx,0xffffffff
c00119e2:	75 b5                	jne    c0011999 <Virt::setupPageSwapping(int)+0x84>
c00119e4:	83 ec 0c             	sub    esp,0xc
c00119e7:	56                   	push   esi
c00119e8:	e8 73 13 00 00       	call   c0012d60 <File::close()>
c00119ed:	89 3c 24             	mov    DWORD PTR [esp],edi
c00119f0:	e8 ff da ff ff       	call   c000f4f4 <rfree>
c00119f5:	83 c4 10             	add    esp,0x10
c00119f8:	85 f6                	test   esi,esi
c00119fa:	74 0c                	je     c0011a08 <Virt::setupPageSwapping(int)+0xf3>
c00119fc:	83 ec 0c             	sub    esp,0xc
c00119ff:	8b 06                	mov    eax,DWORD PTR [esi]
c0011a01:	56                   	push   esi
c0011a02:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011a05:	83 c4 10             	add    esp,0x10
c0011a08:	83 c4 10             	add    esp,0x10
c0011a0b:	5b                   	pop    ebx
c0011a0c:	5e                   	pop    esi
c0011a0d:	5f                   	pop    edi
c0011a0e:	c3                   	ret    
c0011a0f:	83 ec 08             	sub    esp,0x8
c0011a12:	50                   	push   eax
c0011a13:	68 4e 90 02 c0       	push   0xc002904e
c0011a18:	e8 52 0d 00 00       	call   c001276f <Dbg::kprintf(char const*, ...)>
c0011a1d:	83 c4 10             	add    esp,0x10
c0011a20:	eb 94                	jmp    c00119b6 <Virt::setupPageSwapping(int)+0xa1>
c0011a22:	83 ec 08             	sub    esp,0x8
c0011a25:	50                   	push   eax
c0011a26:	68 2a 90 02 c0       	push   0xc002902a
c0011a2b:	e8 3f 0d 00 00       	call   c001276f <Dbg::kprintf(char const*, ...)>
c0011a30:	c7 04 24 33 90 02 c0 	mov    DWORD PTR [esp],0xc0029033
c0011a37:	e8 4d 7e 00 00       	call   c0019889 <Krnl::panic(char const*)>
c0011a3c:	83 c4 10             	add    esp,0x10
c0011a3f:	e9 14 ff ff ff       	jmp    c0011958 <Virt::setupPageSwapping(int)+0x43>

c0011a44 <VAS::VAS()>:
c0011a44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a48:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011a4f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a53:	a3 c4 ca 02 c0       	mov    ds:0xc002cac4,eax
c0011a58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a5c:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011a60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a64:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011a67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a6b:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011a72:	90                   	nop
c0011a73:	c3                   	ret    

c0011a74 <VAS::VAS(VAS*)>:
c0011a74:	83 ec 0c             	sub    esp,0xc
c0011a77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a7b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011a82:	83 ec 0c             	sub    esp,0xc
c0011a85:	68 84 8e 02 c0       	push   0xc0028e84
c0011a8a:	e8 fa 7d 00 00       	call   c0019889 <Krnl::panic(char const*)>
c0011a8f:	83 c4 10             	add    esp,0x10
c0011a92:	90                   	nop
c0011a93:	83 c4 0c             	add    esp,0xc
c0011a96:	c3                   	ret    
c0011a97:	90                   	nop

c0011a98 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011a98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011a9c:	89 c2                	mov    edx,eax
c0011a9e:	c1 e8 0a             	shr    eax,0xa
c0011aa1:	c1 ea 16             	shr    edx,0x16
c0011aa4:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011aa9:	19 c9                	sbb    ecx,ecx
c0011aab:	c1 e2 0c             	shl    edx,0xc
c0011aae:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011ab4:	25 fc 0f 00 00       	and    eax,0xffc
c0011ab9:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011ac0:	01 d0                	add    eax,edx
c0011ac2:	c3                   	ret    
c0011ac3:	90                   	nop

c0011ac4 <VAS::getPageTableEntry(unsigned long)>:
c0011ac4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011ac8:	89 ca                	mov    edx,ecx
c0011aca:	c1 e9 0a             	shr    ecx,0xa
c0011acd:	c1 ea 16             	shr    edx,0x16
c0011ad0:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011ad6:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011adc:	c1 e0 0c             	shl    eax,0xc
c0011adf:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011ae2:	c3                   	ret    

c0011ae3 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011ae3:	57                   	push   edi
c0011ae4:	56                   	push   esi
c0011ae5:	be 01 00 00 00       	mov    esi,0x1
c0011aea:	53                   	push   ebx
c0011aeb:	83 ec 10             	sub    esp,0x10
c0011aee:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011af2:	c1 eb 0c             	shr    ebx,0xc
c0011af5:	eb 3f                	jmp    c0011b36 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011af7:	e8 13 fe ff ff       	call   c001190f <Virt::getAKernelVAS()>
c0011afc:	83 ec 08             	sub    esp,0x8
c0011aff:	57                   	push   edi
c0011b00:	50                   	push   eax
c0011b01:	e8 be ff ff ff       	call   c0011ac4 <VAS::getPageTableEntry(unsigned long)>
c0011b06:	83 c4 10             	add    esp,0x10
c0011b09:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b0b:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011b0f:	f6 c4 04             	test   ah,0x4
c0011b12:	75 5f                	jne    c0011b73 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011b14:	80 fa 04             	cmp    dl,0x4
c0011b17:	74 78                	je     c0011b91 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011b19:	80 fa 02             	cmp    dl,0x2
c0011b1c:	0f 84 88 00 00 00    	je     c0011baa <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011b22:	80 fa 03             	cmp    dl,0x3
c0011b25:	0f 84 ad 00 00 00    	je     c0011bd8 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011b2b:	fe ca                	dec    dl
c0011b2d:	0f 84 92 00 00 00    	je     c0011bc5 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011b33:	43                   	inc    ebx
c0011b34:	31 f6                	xor    esi,esi
c0011b36:	53                   	push   ebx
c0011b37:	e8 1f fc ff ff       	call   c001175b <Virt::getPageState(unsigned long)>
c0011b3c:	5f                   	pop    edi
c0011b3d:	89 df                	mov    edi,ebx
c0011b3f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011b43:	c1 e7 0c             	shl    edi,0xc
c0011b46:	84 c0                	test   al,al
c0011b48:	75 ad                	jne    c0011af7 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011b4a:	83 ec 0c             	sub    esp,0xc
c0011b4d:	68 75 90 02 c0       	push   0xc0029075
c0011b52:	e8 32 7d 00 00       	call   c0019889 <Krnl::panic(char const*)>
c0011b57:	e8 b3 fd ff ff       	call   c001190f <Virt::getAKernelVAS()>
c0011b5c:	5a                   	pop    edx
c0011b5d:	59                   	pop    ecx
c0011b5e:	57                   	push   edi
c0011b5f:	50                   	push   eax
c0011b60:	e8 5f ff ff ff       	call   c0011ac4 <VAS::getPageTableEntry(unsigned long)>
c0011b65:	83 c4 10             	add    esp,0x10
c0011b68:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b6a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011b6e:	f6 c4 04             	test   ah,0x4
c0011b71:	74 c0                	je     c0011b33 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011b73:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011b77:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011b7c:	83 ec 0c             	sub    esp,0xc
c0011b7f:	50                   	push   eax
c0011b80:	e8 2e df ff ff       	call   c000fab3 <Phys::freePage(unsigned long)>
c0011b85:	83 c4 10             	add    esp,0x10
c0011b88:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011b8c:	80 fa 04             	cmp    dl,0x4
c0011b8f:	75 88                	jne    c0011b19 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011b91:	89 f0                	mov    eax,esi
c0011b93:	84 c0                	test   al,al
c0011b95:	75 47                	jne    c0011bde <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011b97:	c7 44 24 20 a8 8e 02 c0 	mov    DWORD PTR [esp+0x20],0xc0028ea8
c0011b9f:	83 c4 10             	add    esp,0x10
c0011ba2:	5b                   	pop    ebx
c0011ba3:	5e                   	pop    esi
c0011ba4:	5f                   	pop    edi
c0011ba5:	e9 df 7c 00 00       	jmp    c0019889 <Krnl::panic(char const*)>
c0011baa:	89 f0                	mov    eax,esi
c0011bac:	84 c0                	test   al,al
c0011bae:	75 15                	jne    c0011bc5 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011bb0:	83 ec 0c             	sub    esp,0xc
c0011bb3:	68 91 90 02 c0       	push   0xc0029091
c0011bb8:	e8 cc 7c 00 00       	call   c0019889 <Krnl::panic(char const*)>
c0011bbd:	83 c4 10             	add    esp,0x10
c0011bc0:	e9 6e ff ff ff       	jmp    c0011b33 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011bc5:	83 ec 08             	sub    esp,0x8
c0011bc8:	6a 00                	push   0x0
c0011bca:	53                   	push   ebx
c0011bcb:	e8 56 fb ff ff       	call   c0011726 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011bd0:	83 c4 10             	add    esp,0x10
c0011bd3:	e9 5b ff ff ff       	jmp    c0011b33 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011bd8:	89 f0                	mov    eax,esi
c0011bda:	84 c0                	test   al,al
c0011bdc:	75 15                	jne    c0011bf3 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011bde:	83 ec 08             	sub    esp,0x8
c0011be1:	6a 00                	push   0x0
c0011be3:	53                   	push   ebx
c0011be4:	e8 3d fb ff ff       	call   c0011726 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011be9:	83 c4 10             	add    esp,0x10
c0011bec:	83 c4 10             	add    esp,0x10
c0011bef:	5b                   	pop    ebx
c0011bf0:	5e                   	pop    esi
c0011bf1:	5f                   	pop    edi
c0011bf2:	c3                   	ret    
c0011bf3:	c7 44 24 20 ad 90 02 c0 	mov    DWORD PTR [esp+0x20],0xc00290ad
c0011bfb:	83 c4 10             	add    esp,0x10
c0011bfe:	5b                   	pop    ebx
c0011bff:	5e                   	pop    esi
c0011c00:	5f                   	pop    edi
c0011c01:	e9 83 7c 00 00       	jmp    c0019889 <Krnl::panic(char const*)>

c0011c06 <VAS::freeAllocatedPages(unsigned long)>:
c0011c06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c0a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011c0e:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011c12:	74 09                	je     c0011c1d <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011c14:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011c18:	e9 c6 fe ff ff       	jmp    c0011ae3 <Virt::freeKernelVirtualPages(unsigned long)>
c0011c1d:	c7 44 24 04 cc 8e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0028ecc
c0011c25:	e9 45 0b 00 00       	jmp    c001276f <Dbg::kprintf(char const*, ...)>

c0011c2a <VAS::virtualToPhysical(unsigned long)>:
c0011c2a:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011c2e:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011c32:	e8 8d fe ff ff       	call   c0011ac4 <VAS::getPageTableEntry(unsigned long)>
c0011c37:	5a                   	pop    edx
c0011c38:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c3a:	59                   	pop    ecx
c0011c3b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011c40:	c3                   	ret    
c0011c41:	90                   	nop

c0011c42 <VAS::reflagRange(unsigned long, int, int, int)>:
c0011c42:	55                   	push   ebp
c0011c43:	57                   	push   edi
c0011c44:	56                   	push   esi
c0011c45:	53                   	push   ebx
c0011c46:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011c4a:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011c4e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011c52:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011c56:	85 db                	test   ebx,ebx
c0011c58:	7e 22                	jle    c0011c7c <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011c5a:	c1 e3 0c             	shl    ebx,0xc
c0011c5d:	01 f3                	add    ebx,esi
c0011c5f:	56                   	push   esi
c0011c60:	81 c6 00 10 00 00    	add    esi,0x1000
c0011c66:	55                   	push   ebp
c0011c67:	e8 58 fe ff ff       	call   c0011ac4 <VAS::getPageTableEntry(unsigned long)>
c0011c6c:	5a                   	pop    edx
c0011c6d:	59                   	pop    ecx
c0011c6e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011c70:	21 f9                	and    ecx,edi
c0011c72:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0011c76:	39 f3                	cmp    ebx,esi
c0011c78:	89 08                	mov    DWORD PTR [eax],ecx
c0011c7a:	75 e3                	jne    c0011c5f <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011c7c:	5b                   	pop    ebx
c0011c7d:	5e                   	pop    esi
c0011c7e:	5f                   	pop    edi
c0011c7f:	5d                   	pop    ebp
c0011c80:	c3                   	ret    
c0011c81:	90                   	nop

c0011c82 <VAS::setToWriteCombining(unsigned long, int)>:
c0011c82:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c0011c87:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011c8d:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0011c94:	75 01                	jne    c0011c97 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0011c96:	c3                   	ret    
c0011c97:	68 80 00 00 00       	push   0x80
c0011c9c:	6a ff                	push   0xffffffff
c0011c9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011ca2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011ca6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011caa:	e8 93 ff ff ff       	call   c0011c42 <VAS::reflagRange(unsigned long, int, int, int)>
c0011caf:	83 c4 14             	add    esp,0x14
c0011cb2:	c3                   	ret    
c0011cb3:	90                   	nop

c0011cb4 <VAS::mapOtherVASIn(bool, VAS*)>:
c0011cb4:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011cb9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011cbd:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0011cc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011cc4:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0011cc7:	19 c0                	sbb    eax,eax
c0011cc9:	83 ca 03             	or     edx,0x3
c0011ccc:	83 e0 fc             	and    eax,0xfffffffc
c0011ccf:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0011cd6:	0f 20 d8             	mov    eax,cr3
c0011cd9:	0f 22 d8             	mov    cr3,eax
c0011cdc:	c3                   	ret    
c0011cdd:	90                   	nop

c0011cde <VAS::~VAS()>:
c0011cde:	83 ec 2c             	sub    esp,0x2c
c0011ce1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011ce9:	e8 2a b0 00 00       	call   c001cd18 <lockScheduler()>
c0011cee:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011cf3:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cf5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011cf8:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011cfe:	83 ec 04             	sub    esp,0x4
c0011d01:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011d05:	6a 01                	push   0x1
c0011d07:	50                   	push   eax
c0011d08:	e8 a7 ff ff ff       	call   c0011cb4 <VAS::mapOtherVASIn(bool, VAS*)>
c0011d0d:	83 c4 10             	add    esp,0x10
c0011d10:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011d18:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0011d20:	0f 8f d7 00 00 00    	jg     c0011dfd <VAS::~VAS()+0x11f>
c0011d26:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011d2a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011d2d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011d31:	c1 e2 02             	shl    edx,0x2
c0011d34:	01 d0                	add    eax,edx
c0011d36:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d38:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011d3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d40:	83 e0 01             	and    eax,0x1
c0011d43:	0f 84 ab 00 00 00    	je     c0011df4 <VAS::~VAS()+0x116>
c0011d49:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011d51:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011d59:	7f 75                	jg     c0011dd0 <VAS::~VAS()+0xf2>
c0011d5b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011d5f:	c1 e0 0a             	shl    eax,0xa
c0011d62:	89 c2                	mov    edx,eax
c0011d64:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011d68:	01 d0                	add    eax,edx
c0011d6a:	c1 e0 0c             	shl    eax,0xc
c0011d6d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011d71:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011d76:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d78:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011d7b:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011d81:	83 ec 04             	sub    esp,0x4
c0011d84:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011d88:	6a 01                	push   0x1
c0011d8a:	50                   	push   eax
c0011d8b:	e8 08 fd ff ff       	call   c0011a98 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011d90:	83 c4 10             	add    esp,0x10
c0011d93:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011d97:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011d9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d9d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011da1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011da5:	25 01 04 00 00       	and    eax,0x401
c0011daa:	3d 01 04 00 00       	cmp    eax,0x401
c0011daf:	75 19                	jne    c0011dca <VAS::~VAS()+0xec>
c0011db1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011db5:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011dba:	83 ec 0c             	sub    esp,0xc
c0011dbd:	50                   	push   eax
c0011dbe:	e8 f0 dc ff ff       	call   c000fab3 <Phys::freePage(unsigned long)>
c0011dc3:	83 c4 10             	add    esp,0x10
c0011dc6:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011dca:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0011dce:	eb 81                	jmp    c0011d51 <VAS::~VAS()+0x73>
c0011dd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011dd4:	25 00 04 00 00       	and    eax,0x400
c0011dd9:	74 19                	je     c0011df4 <VAS::~VAS()+0x116>
c0011ddb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ddf:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011de4:	83 ec 0c             	sub    esp,0xc
c0011de7:	50                   	push   eax
c0011de8:	e8 c6 dc ff ff       	call   c000fab3 <Phys::freePage(unsigned long)>
c0011ded:	83 c4 10             	add    esp,0x10
c0011df0:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011df4:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011df8:	e9 1b ff ff ff       	jmp    c0011d18 <VAS::~VAS()+0x3a>
c0011dfd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e01:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011e04:	83 ec 0c             	sub    esp,0xc
c0011e07:	50                   	push   eax
c0011e08:	e8 d6 fc ff ff       	call   c0011ae3 <Virt::freeKernelVirtualPages(unsigned long)>
c0011e0d:	83 c4 10             	add    esp,0x10
c0011e10:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e14:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011e17:	83 ec 0c             	sub    esp,0xc
c0011e1a:	50                   	push   eax
c0011e1b:	e8 93 dc ff ff       	call   c000fab3 <Phys::freePage(unsigned long)>
c0011e20:	83 c4 10             	add    esp,0x10
c0011e23:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011e27:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011e2b:	c1 e0 02             	shl    eax,0x2
c0011e2e:	83 ec 08             	sub    esp,0x8
c0011e31:	50                   	push   eax
c0011e32:	68 f0 8e 02 c0       	push   0xc0028ef0
c0011e37:	e8 33 09 00 00       	call   c001276f <Dbg::kprintf(char const*, ...)>
c0011e3c:	83 c4 10             	add    esp,0x10
c0011e3f:	e8 d6 ae 00 00       	call   c001cd1a <unlockScheduler()>
c0011e44:	90                   	nop
c0011e45:	83 c4 2c             	add    esp,0x2c
c0011e48:	c3                   	ret    
c0011e49:	90                   	nop

c0011e4a <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011e4a:	55                   	push   ebp
c0011e4b:	57                   	push   edi
c0011e4c:	56                   	push   esi
c0011e4d:	53                   	push   ebx
c0011e4e:	83 ec 1c             	sub    esp,0x1c
c0011e51:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011e55:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011e59:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011e5f:	77 08                	ja     c0011e69 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011e61:	0f 20 d8             	mov    eax,cr3
c0011e64:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c0011e67:	75 47                	jne    c0011eb0 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011e69:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e6d:	09 d8                	or     eax,ebx
c0011e6f:	a9 ff 0f 00 00       	test   eax,0xfff
c0011e74:	75 57                	jne    c0011ecd <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011e76:	89 de                	mov    esi,ebx
c0011e78:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011e7b:	c1 ee 16             	shr    esi,0x16
c0011e7e:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011e85:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011e89:	74 54                	je     c0011edf <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011e8b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011e8f:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0011e95:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011e99:	c1 e6 0c             	shl    esi,0xc
c0011e9c:	c1 eb 0a             	shr    ebx,0xa
c0011e9f:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0011ea5:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0011ea8:	83 c4 1c             	add    esp,0x1c
c0011eab:	5b                   	pop    ebx
c0011eac:	5e                   	pop    esi
c0011ead:	5f                   	pop    edi
c0011eae:	5d                   	pop    ebp
c0011eaf:	c3                   	ret    
c0011eb0:	83 ec 0c             	sub    esp,0xc
c0011eb3:	68 10 8f 02 c0       	push   0xc0028f10
c0011eb8:	e8 b2 08 00 00       	call   c001276f <Dbg::kprintf(char const*, ...)>
c0011ebd:	83 c4 10             	add    esp,0x10
c0011ec0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011ec4:	09 d8                	or     eax,ebx
c0011ec6:	a9 ff 0f 00 00       	test   eax,0xfff
c0011ecb:	74 a9                	je     c0011e76 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011ecd:	83 ec 0c             	sub    esp,0xc
c0011ed0:	68 78 8f 02 c0       	push   0xc0028f78
c0011ed5:	e8 af 79 00 00       	call   c0019889 <Krnl::panic(char const*)>
c0011eda:	83 c4 10             	add    esp,0x10
c0011edd:	eb 97                	jmp    c0011e76 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011edf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011ee3:	e8 55 dc ff ff       	call   c000fb3d <Phys::allocatePage()>
c0011ee8:	89 c5                	mov    ebp,eax
c0011eea:	e8 20 fa ff ff       	call   c001190f <Virt::getAKernelVAS()>
c0011eef:	83 ec 0c             	sub    esp,0xc
c0011ef2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011ef6:	6a 01                	push   0x1
c0011ef8:	e8 82 f8 ff ff       	call   c001177f <Virt::allocateKernelVirtualPages(int)>
c0011efd:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011f04:	6a 01                	push   0x1
c0011f06:	50                   	push   eax
c0011f07:	55                   	push   ebp
c0011f08:	81 cd 07 04 00 00    	or     ebp,0x407
c0011f0e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011f12:	51                   	push   ecx
c0011f13:	e8 26 02 00 00       	call   c001213e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011f18:	83 c4 1c             	add    esp,0x1c
c0011f1b:	68 00 10 00 00       	push   0x1000
c0011f20:	6a 00                	push   0x0
c0011f22:	50                   	push   eax
c0011f23:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011f27:	e8 5f e7 fe ff       	call   c000068b <memset>
c0011f2c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011f30:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011f33:	e8 ab fb ff ff       	call   c0011ae3 <Virt::freeKernelVirtualPages(unsigned long)>
c0011f38:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011f3c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011f3f:	83 c4 10             	add    esp,0x10
c0011f42:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011f45:	e9 41 ff ff ff       	jmp    c0011e8b <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c0011f4a <VAS::allocatePages(int, int)>:
c0011f4a:	55                   	push   ebp
c0011f4b:	57                   	push   edi
c0011f4c:	56                   	push   esi
c0011f4d:	53                   	push   ebx
c0011f4e:	83 ec 1c             	sub    esp,0x1c
c0011f51:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011f55:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c0011f5a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011f60:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011f66:	83 e0 01             	and    eax,0x1
c0011f69:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011f6d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011f71:	0f 85 cc 00 00 00    	jne    c0012043 <VAS::allocatePages(int, int)+0xf9>
c0011f77:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011f7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011f7e:	85 c0                	test   eax,eax
c0011f80:	0f 84 a1 00 00 00    	je     c0012027 <VAS::allocatePages(int, int)+0xdd>
c0011f86:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011f8a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011f8e:	c1 e6 0c             	shl    esi,0xc
c0011f91:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011f95:	85 c0                	test   eax,eax
c0011f97:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011f9a:	7e 33                	jle    c0011fcf <VAS::allocatePages(int, int)+0x85>
c0011f9c:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011fa0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011fa4:	81 cd 00 04 00 00    	or     ebp,0x400
c0011faa:	e8 8e db ff ff       	call   c000fb3d <Phys::allocatePage()>
c0011faf:	55                   	push   ebp
c0011fb0:	53                   	push   ebx
c0011fb1:	50                   	push   eax
c0011fb2:	57                   	push   edi
c0011fb3:	e8 92 fe ff ff       	call   c0011e4a <VAS::mapPage(unsigned long, unsigned long, int)>
c0011fb8:	83 c4 10             	add    esp,0x10
c0011fbb:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011fc0:	74 03                	je     c0011fc5 <VAS::allocatePages(int, int)+0x7b>
c0011fc2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011fc5:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011fcb:	39 de                	cmp    esi,ebx
c0011fcd:	75 db                	jne    c0011faa <VAS::allocatePages(int, int)+0x60>
c0011fcf:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011fd4:	75 12                	jne    c0011fe8 <VAS::allocatePages(int, int)+0x9e>
c0011fd6:	0f 20 d8             	mov    eax,cr3
c0011fd9:	0f 22 d8             	mov    cr3,eax
c0011fdc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011fe0:	83 c4 1c             	add    esp,0x1c
c0011fe3:	5b                   	pop    ebx
c0011fe4:	5e                   	pop    esi
c0011fe5:	5f                   	pop    edi
c0011fe6:	5d                   	pop    ebp
c0011fe7:	c3                   	ret    
c0011fe8:	c1 ee 0a             	shr    esi,0xa
c0011feb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011fef:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011ff5:	c1 eb 0a             	shr    ebx,0xa
c0011ff8:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0011ffe:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012004:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001200a:	39 c3                	cmp    ebx,eax
c001200c:	77 ce                	ja     c0011fdc <VAS::allocatePages(int, int)+0x92>
c001200e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012011:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012017:	39 d8                	cmp    eax,ebx
c0012019:	73 f3                	jae    c001200e <VAS::allocatePages(int, int)+0xc4>
c001201b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001201f:	83 c4 1c             	add    esp,0x1c
c0012022:	5b                   	pop    ebx
c0012023:	5e                   	pop    esi
c0012024:	5f                   	pop    edi
c0012025:	5d                   	pop    ebp
c0012026:	c3                   	ret    
c0012027:	83 ec 0c             	sub    esp,0xc
c001202a:	68 9c 8f 02 c0       	push   0xc0028f9c
c001202f:	e8 55 78 00 00       	call   c0019889 <Krnl::panic(char const*)>
c0012034:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012037:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001203b:	83 c4 10             	add    esp,0x10
c001203e:	e9 43 ff ff ff       	jmp    c0011f86 <VAS::allocatePages(int, int)+0x3c>
c0012043:	83 ec 0c             	sub    esp,0xc
c0012046:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001204a:	e8 30 f7 ff ff       	call   c001177f <Virt::allocateKernelVirtualPages(int)>
c001204f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012053:	83 c4 10             	add    esp,0x10
c0012056:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c001205b:	0f 87 9b 00 00 00    	ja     c00120fc <VAS::allocatePages(int, int)+0x1b2>
c0012061:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012065:	85 d2                	test   edx,edx
c0012067:	7e 3c                	jle    c00120a5 <VAS::allocatePages(int, int)+0x15b>
c0012069:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001206d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012071:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012075:	c1 e5 0c             	shl    ebp,0xc
c0012078:	81 ce 00 04 00 00    	or     esi,0x400
c001207e:	01 dd                	add    ebp,ebx
c0012080:	e8 b8 da ff ff       	call   c000fb3d <Phys::allocatePage()>
c0012085:	56                   	push   esi
c0012086:	53                   	push   ebx
c0012087:	50                   	push   eax
c0012088:	57                   	push   edi
c0012089:	e8 bc fd ff ff       	call   c0011e4a <VAS::mapPage(unsigned long, unsigned long, int)>
c001208e:	83 c4 10             	add    esp,0x10
c0012091:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012096:	74 03                	je     c001209b <VAS::allocatePages(int, int)+0x151>
c0012098:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001209b:	81 c3 00 10 00 00    	add    ebx,0x1000
c00120a1:	39 dd                	cmp    ebp,ebx
c00120a3:	75 db                	jne    c0012080 <VAS::allocatePages(int, int)+0x136>
c00120a5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00120aa:	0f 84 26 ff ff ff    	je     c0011fd6 <VAS::allocatePages(int, int)+0x8c>
c00120b0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00120b4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00120b8:	89 d3                	mov    ebx,edx
c00120ba:	c1 e0 0c             	shl    eax,0xc
c00120bd:	c1 eb 0a             	shr    ebx,0xa
c00120c0:	01 d0                	add    eax,edx
c00120c2:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00120c8:	c1 e8 0a             	shr    eax,0xa
c00120cb:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00120d1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00120d6:	2d 00 00 40 00       	sub    eax,0x400000
c00120db:	39 c3                	cmp    ebx,eax
c00120dd:	0f 87 f9 fe ff ff    	ja     c0011fdc <VAS::allocatePages(int, int)+0x92>
c00120e3:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00120e6:	81 c3 00 10 00 00    	add    ebx,0x1000
c00120ec:	39 d8                	cmp    eax,ebx
c00120ee:	73 f3                	jae    c00120e3 <VAS::allocatePages(int, int)+0x199>
c00120f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00120f4:	83 c4 1c             	add    esp,0x1c
c00120f7:	5b                   	pop    ebx
c00120f8:	5e                   	pop    esi
c00120f9:	5f                   	pop    edi
c00120fa:	5d                   	pop    ebp
c00120fb:	c3                   	ret    
c00120fc:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c0012101:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012107:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c001210e:	0f 84 4d ff ff ff    	je     c0012061 <VAS::allocatePages(int, int)+0x117>
c0012114:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c001211c:	e9 40 ff ff ff       	jmp    c0012061 <VAS::allocatePages(int, int)+0x117>
c0012121:	90                   	nop

c0012122 <VAS::setCPUSpecific(unsigned long)>:
c0012122:	83 ec 0c             	sub    esp,0xc
c0012125:	6a 05                	push   0x5
c0012127:	68 00 00 40 c2       	push   0xc2400000
c001212c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012130:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012134:	e8 11 fd ff ff       	call   c0011e4a <VAS::mapPage(unsigned long, unsigned long, int)>
c0012139:	83 c4 1c             	add    esp,0x1c
c001213c:	c3                   	ret    
c001213d:	90                   	nop

c001213e <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c001213e:	55                   	push   ebp
c001213f:	57                   	push   edi
c0012140:	56                   	push   esi
c0012141:	53                   	push   ebx
c0012142:	83 ec 1c             	sub    esp,0x1c
c0012145:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c001214a:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001214e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012154:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012158:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c001215e:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012162:	83 e0 01             	and    eax,0x1
c0012165:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012169:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001216d:	85 c0                	test   eax,eax
c001216f:	7e 39                	jle    c00121aa <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0012171:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012175:	89 f3                	mov    ebx,esi
c0012177:	c1 e0 0c             	shl    eax,0xc
c001217a:	01 f0                	add    eax,esi
c001217c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012180:	55                   	push   ebp
c0012181:	53                   	push   ebx
c0012182:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012186:	29 f0                	sub    eax,esi
c0012188:	01 d8                	add    eax,ebx
c001218a:	50                   	push   eax
c001218b:	57                   	push   edi
c001218c:	e8 b9 fc ff ff       	call   c0011e4a <VAS::mapPage(unsigned long, unsigned long, int)>
c0012191:	83 c4 10             	add    esp,0x10
c0012194:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012199:	74 03                	je     c001219e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c001219b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001219e:	81 c3 00 10 00 00    	add    ebx,0x1000
c00121a4:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c00121a8:	75 d6                	jne    c0012180 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c00121aa:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00121af:	75 10                	jne    c00121c1 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c00121b1:	0f 20 d8             	mov    eax,cr3
c00121b4:	0f 22 d8             	mov    cr3,eax
c00121b7:	83 c4 1c             	add    esp,0x1c
c00121ba:	89 f0                	mov    eax,esi
c00121bc:	5b                   	pop    ebx
c00121bd:	5e                   	pop    esi
c00121be:	5f                   	pop    edi
c00121bf:	5d                   	pop    ebp
c00121c0:	c3                   	ret    
c00121c1:	89 f3                	mov    ebx,esi
c00121c3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00121c7:	c1 eb 0a             	shr    ebx,0xa
c00121ca:	c1 e0 0c             	shl    eax,0xc
c00121cd:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00121d3:	01 f0                	add    eax,esi
c00121d5:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00121db:	c1 e8 0a             	shr    eax,0xa
c00121de:	25 00 f0 ff ff       	and    eax,0xfffff000
c00121e3:	2d 00 00 40 00       	sub    eax,0x400000
c00121e8:	39 c3                	cmp    ebx,eax
c00121ea:	77 cb                	ja     c00121b7 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c00121ec:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00121ef:	81 c3 00 10 00 00    	add    ebx,0x1000
c00121f5:	39 d8                	cmp    eax,ebx
c00121f7:	73 f3                	jae    c00121ec <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c00121f9:	83 c4 1c             	add    esp,0x1c
c00121fc:	89 f0                	mov    eax,esi
c00121fe:	5b                   	pop    ebx
c00121ff:	5e                   	pop    esi
c0012200:	5f                   	pop    edi
c0012201:	5d                   	pop    ebp
c0012202:	c3                   	ret    
c0012203:	90                   	nop

c0012204 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0012204:	55                   	push   ebp
c0012205:	57                   	push   edi
c0012206:	56                   	push   esi
c0012207:	53                   	push   ebx
c0012208:	83 ec 1c             	sub    esp,0x1c
c001220b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001220f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012213:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0012217:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001221b:	a9 ff 0f 00 00       	test   eax,0xfff
c0012220:	75 4a                	jne    c001226c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0012222:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012226:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012229:	c1 eb 16             	shr    ebx,0x16
c001222c:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0012233:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0012237:	74 4d                	je     c0012286 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0012239:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001223d:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0012241:	c1 e8 0a             	shr    eax,0xa
c0012244:	80 fa 01             	cmp    dl,0x1
c0012247:	19 d2                	sbb    edx,edx
c0012249:	c1 e3 0c             	shl    ebx,0xc
c001224c:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0012250:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0012256:	25 fc 0f 00 00       	and    eax,0xffc
c001225b:	01 d8                	add    eax,ebx
c001225d:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0012264:	83 c4 1c             	add    esp,0x1c
c0012267:	5b                   	pop    ebx
c0012268:	5e                   	pop    esi
c0012269:	5f                   	pop    edi
c001226a:	5d                   	pop    ebp
c001226b:	c3                   	ret    
c001226c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0012270:	83 ec 0c             	sub    esp,0xc
c0012273:	68 c8 8f 02 c0       	push   0xc0028fc8
c0012278:	e8 0c 76 00 00       	call   c0019889 <Krnl::panic(char const*)>
c001227d:	83 c4 10             	add    esp,0x10
c0012280:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012284:	eb 9c                	jmp    c0012222 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0012286:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001228a:	e8 ae d8 ff ff       	call   c000fb3d <Phys::allocatePage()>
c001228f:	89 c5                	mov    ebp,eax
c0012291:	e8 79 f6 ff ff       	call   c001190f <Virt::getAKernelVAS()>
c0012296:	83 ec 0c             	sub    esp,0xc
c0012299:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001229d:	6a 01                	push   0x1
c001229f:	e8 db f4 ff ff       	call   c001177f <Virt::allocateKernelVirtualPages(int)>
c00122a4:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00122ab:	6a 01                	push   0x1
c00122ad:	50                   	push   eax
c00122ae:	55                   	push   ebp
c00122af:	81 cd 07 04 00 00    	or     ebp,0x407
c00122b5:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00122b9:	51                   	push   ecx
c00122ba:	e8 7f fe ff ff       	call   c001213e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00122bf:	83 c4 1c             	add    esp,0x1c
c00122c2:	68 00 10 00 00       	push   0x1000
c00122c7:	6a 00                	push   0x0
c00122c9:	50                   	push   eax
c00122ca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00122ce:	e8 b8 e3 fe ff       	call   c000068b <memset>
c00122d3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00122d7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00122da:	e8 04 f8 ff ff       	call   c0011ae3 <Virt::freeKernelVirtualPages(unsigned long)>
c00122df:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00122e2:	83 c4 10             	add    esp,0x10
c00122e5:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c00122e8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00122ec:	e9 48 ff ff ff       	jmp    c0012239 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c00122f1:	90                   	nop

c00122f2 <VAS::VAS(bool)>:
c00122f2:	53                   	push   ebx
c00122f3:	83 ec 28             	sub    esp,0x28
c00122f6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00122fa:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00122fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012302:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012309:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001230d:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012311:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012314:	e8 24 d8 ff ff       	call   c000fb3d <Phys::allocatePage()>
c0012319:	89 c2                	mov    edx,eax
c001231b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001231f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012322:	e8 e8 f5 ff ff       	call   c001190f <Virt::getAKernelVAS()>
c0012327:	89 c3                	mov    ebx,eax
c0012329:	83 ec 0c             	sub    esp,0xc
c001232c:	6a 01                	push   0x1
c001232e:	e8 4c f4 ff ff       	call   c001177f <Virt::allocateKernelVirtualPages(int)>
c0012333:	83 c4 10             	add    esp,0x10
c0012336:	89 c2                	mov    edx,eax
c0012338:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001233c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001233f:	83 ec 0c             	sub    esp,0xc
c0012342:	6a 03                	push   0x3
c0012344:	6a 01                	push   0x1
c0012346:	52                   	push   edx
c0012347:	50                   	push   eax
c0012348:	53                   	push   ebx
c0012349:	e8 f0 fd ff ff       	call   c001213e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001234e:	83 c4 20             	add    esp,0x20
c0012351:	89 c2                	mov    edx,eax
c0012353:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012357:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001235a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012362:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c001236a:	7f 1c                	jg     c0012388 <VAS::VAS(bool)+0x96>
c001236c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012370:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012373:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012377:	c1 e2 02             	shl    edx,0x2
c001237a:	01 d0                	add    eax,edx
c001237c:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012382:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012386:	eb da                	jmp    c0012362 <VAS::VAS(bool)+0x70>
c0012388:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0012390:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0012398:	7f 7a                	jg     c0012414 <VAS::VAS(bool)+0x122>
c001239a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001239e:	2d 00 02 00 00       	sub    eax,0x200
c00123a3:	c1 e0 0c             	shl    eax,0xc
c00123a6:	83 c8 03             	or     eax,0x3
c00123a9:	89 c2                	mov    edx,eax
c00123ab:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c00123b0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00123b6:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00123bc:	83 e0 10             	and    eax,0x10
c00123bf:	84 c0                	test   al,al
c00123c1:	74 07                	je     c00123ca <VAS::VAS(bool)+0xd8>
c00123c3:	b8 00 01 00 00       	mov    eax,0x100
c00123c8:	eb 05                	jmp    c00123cf <VAS::VAS(bool)+0xdd>
c00123ca:	b8 00 00 00 00       	mov    eax,0x0
c00123cf:	09 d0                	or     eax,edx
c00123d1:	89 c1                	mov    ecx,eax
c00123d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123d7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00123da:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00123de:	c1 e2 02             	shl    edx,0x2
c00123e1:	01 d0                	add    eax,edx
c00123e3:	89 ca                	mov    edx,ecx
c00123e5:	89 10                	mov    DWORD PTR [eax],edx
c00123e7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00123eb:	2d 40 03 00 00       	sub    eax,0x340
c00123f0:	83 f8 7f             	cmp    eax,0x7f
c00123f3:	77 16                	ja     c001240b <VAS::VAS(bool)+0x119>
c00123f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123f9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00123fc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012400:	c1 e2 02             	shl    edx,0x2
c0012403:	01 d0                	add    eax,edx
c0012405:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c001240b:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001240f:	e9 7c ff ff ff       	jmp    c0012390 <VAS::VAS(bool)+0x9e>
c0012414:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c0012419:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001241f:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012425:	83 e0 10             	and    eax,0x10
c0012428:	84 c0                	test   al,al
c001242a:	74 07                	je     c0012433 <VAS::VAS(bool)+0x141>
c001242c:	b8 03 41 00 00       	mov    eax,0x4103
c0012431:	eb 05                	jmp    c0012438 <VAS::VAS(bool)+0x146>
c0012433:	b8 03 40 00 00       	mov    eax,0x4003
c0012438:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001243c:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001243f:	81 c2 20 0c 00 00    	add    edx,0xc20
c0012445:	89 02                	mov    DWORD PTR [edx],eax
c0012447:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c001244c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012452:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0012458:	83 ec 08             	sub    esp,0x8
c001245b:	50                   	push   eax
c001245c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012460:	e8 bd fc ff ff       	call   c0012122 <VAS::setCPUSpecific(unsigned long)>
c0012465:	83 c4 10             	add    esp,0x10
c0012468:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001246c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001246f:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c0012474:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001247a:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012480:	83 e0 10             	and    eax,0x10
c0012483:	84 c0                	test   al,al
c0012485:	74 07                	je     c001248e <VAS::VAS(bool)+0x19c>
c0012487:	b8 00 01 00 00       	mov    eax,0x100
c001248c:	eb 05                	jmp    c0012493 <VAS::VAS(bool)+0x1a1>
c001248e:	b8 00 00 00 00       	mov    eax,0x0
c0012493:	09 c2                	or     edx,eax
c0012495:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012499:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001249c:	05 fc 0f 00 00       	add    eax,0xffc
c00124a1:	83 ca 03             	or     edx,0x3
c00124a4:	89 10                	mov    DWORD PTR [eax],edx
c00124a6:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c00124ab:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00124b1:	83 ec 0c             	sub    esp,0xc
c00124b4:	50                   	push   eax
c00124b5:	e8 90 19 00 00       	call   c0013e4a <Device::getName()>
c00124ba:	83 c4 10             	add    esp,0x10
c00124bd:	83 ec 08             	sub    esp,0x8
c00124c0:	68 c7 90 02 c0       	push   0xc00290c7
c00124c5:	50                   	push   eax
c00124c6:	e8 b0 e2 fe ff       	call   c000077b <strcmp>
c00124cb:	83 c4 10             	add    esp,0x10
c00124ce:	85 c0                	test   eax,eax
c00124d0:	0f 94 c0             	sete   al
c00124d3:	84 c0                	test   al,al
c00124d5:	74 70                	je     c0012547 <VAS::VAS(bool)+0x255>
c00124d7:	e8 1f a8 00 00       	call   c001ccfb <disableIRQs()>
c00124dc:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c00124e1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00124e7:	05 7c 09 00 00       	add    eax,0x97c
c00124ec:	83 ec 0c             	sub    esp,0xc
c00124ef:	50                   	push   eax
c00124f0:	e8 5b ca ff ff       	call   c000ef50 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00124f5:	83 c4 10             	add    esp,0x10
c00124f8:	25 00 f0 ff ff       	and    eax,0xfffff000
c00124fd:	89 c3                	mov    ebx,eax
c00124ff:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c0012504:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001250a:	05 7c 09 00 00       	add    eax,0x97c
c001250f:	83 ec 0c             	sub    esp,0xc
c0012512:	50                   	push   eax
c0012513:	e8 38 ca ff ff       	call   c000ef50 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012518:	83 c4 10             	add    esp,0x10
c001251b:	83 ec 08             	sub    esp,0x8
c001251e:	50                   	push   eax
c001251f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012523:	e8 9c f5 ff ff       	call   c0011ac4 <VAS::getPageTableEntry(unsigned long)>
c0012528:	83 c4 10             	add    esp,0x10
c001252b:	8b 00                	mov    eax,DWORD PTR [eax]
c001252d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012532:	6a 11                	push   0x11
c0012534:	53                   	push   ebx
c0012535:	50                   	push   eax
c0012536:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001253a:	e8 0b f9 ff ff       	call   c0011e4a <VAS::mapPage(unsigned long, unsigned long, int)>
c001253f:	83 c4 10             	add    esp,0x10
c0012542:	e8 c2 a7 00 00       	call   c001cd09 <enableIRQs()>
c0012547:	90                   	nop
c0012548:	83 c4 28             	add    esp,0x28
c001254b:	5b                   	pop    ebx
c001254c:	c3                   	ret    

c001254d <mapVASFirstTime>:
c001254d:	55                   	push   ebp
c001254e:	57                   	push   edi
c001254f:	56                   	push   esi
c0012550:	53                   	push   ebx
c0012551:	83 ec 0c             	sub    esp,0xc
c0012554:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012559:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001255c:	4a                   	dec    edx
c001255d:	0f 84 8e 00 00 00    	je     c00125f1 <mapVASFirstTime+0xa4>
c0012563:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012566:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012569:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c001256e:	c1 e5 15             	shl    ebp,0x15
c0012571:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c0012576:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c001257c:	29 eb                	sub    ebx,ebp
c001257e:	29 ee                	sub    esi,ebp
c0012580:	e8 b8 d5 ff ff       	call   c000fb3d <Phys::allocatePage()>
c0012585:	83 ec 0c             	sub    esp,0xc
c0012588:	68 03 04 00 00       	push   0x403
c001258d:	6a 01                	push   0x1
c001258f:	53                   	push   ebx
c0012590:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012596:	50                   	push   eax
c0012597:	57                   	push   edi
c0012598:	e8 a1 fb ff ff       	call   c001213e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001259d:	83 c4 20             	add    esp,0x20
c00125a0:	39 f3                	cmp    ebx,esi
c00125a2:	75 dc                	jne    c0012580 <mapVASFirstTime+0x33>
c00125a4:	be 00 f0 ff 01       	mov    esi,0x1fff000
c00125a9:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c00125ae:	29 ee                	sub    esi,ebp
c00125b0:	29 e8                	sub    eax,ebp
c00125b2:	89 c5                	mov    ebp,eax
c00125b4:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c00125b8:	19 db                	sbb    ebx,ebx
c00125ba:	e8 7e d5 ff ff       	call   c000fb3d <Phys::allocatePage()>
c00125bf:	83 e3 04             	and    ebx,0x4
c00125c2:	83 ec 0c             	sub    esp,0xc
c00125c5:	81 c3 03 04 00 00    	add    ebx,0x403
c00125cb:	53                   	push   ebx
c00125cc:	6a 01                	push   0x1
c00125ce:	56                   	push   esi
c00125cf:	81 ee 00 10 00 00    	sub    esi,0x1000
c00125d5:	50                   	push   eax
c00125d6:	57                   	push   edi
c00125d7:	e8 62 fb ff ff       	call   c001213e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00125dc:	83 c4 20             	add    esp,0x20
c00125df:	39 f5                	cmp    ebp,esi
c00125e1:	75 d1                	jne    c00125b4 <mapVASFirstTime+0x67>
c00125e3:	0f 20 d8             	mov    eax,cr3
c00125e6:	0f 22 d8             	mov    cr3,eax
c00125e9:	83 c4 0c             	add    esp,0xc
c00125ec:	5b                   	pop    ebx
c00125ed:	5e                   	pop    esi
c00125ee:	5f                   	pop    edi
c00125ef:	5d                   	pop    ebp
c00125f0:	c3                   	ret    
c00125f1:	83 ec 0c             	sub    esp,0xc
c00125f4:	68 d5 90 02 c0       	push   0xc00290d5
c00125f9:	e8 71 01 00 00       	call   c001276f <Dbg::kprintf(char const*, ...)>
c00125fe:	83 c4 10             	add    esp,0x10
c0012601:	83 c4 0c             	add    esp,0xc
c0012604:	5b                   	pop    ebx
c0012605:	5e                   	pop    esi
c0012606:	5f                   	pop    edi
c0012607:	5d                   	pop    ebp
c0012608:	c3                   	ret    

c0012609 <__cxa_atexit>:
c0012609:	31 c0                	xor    eax,eax
c001260b:	c3                   	ret    

c001260c <__cxa_finalize>:
c001260c:	c3                   	ret    

c001260d <__stack_chk_fail>:
c001260d:	55                   	push   ebp
c001260e:	89 e5                	mov    ebp,esp
c0012610:	83 ec 14             	sub    esp,0x14
c0012613:	68 ee 90 02 c0       	push   0xc00290ee
c0012618:	e8 52 01 00 00       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001261d:	58                   	pop    eax
c001261e:	5a                   	pop    edx
c001261f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012622:	68 3e 91 02 c0       	push   0xc002913e
c0012627:	e8 43 01 00 00       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001262c:	59                   	pop    ecx
c001262d:	58                   	pop    eax
c001262e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012631:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012634:	68 3e 91 02 c0       	push   0xc002913e
c0012639:	e8 31 01 00 00       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001263e:	5a                   	pop    edx
c001263f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012642:	59                   	pop    ecx
c0012643:	8b 00                	mov    eax,DWORD PTR [eax]
c0012645:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012648:	68 3e 91 02 c0       	push   0xc002913e
c001264d:	e8 1d 01 00 00       	call   c001276f <Dbg::kprintf(char const*, ...)>
c0012652:	5a                   	pop    edx
c0012653:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012656:	59                   	pop    ecx
c0012657:	8b 00                	mov    eax,DWORD PTR [eax]
c0012659:	8b 00                	mov    eax,DWORD PTR [eax]
c001265b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001265e:	68 3e 91 02 c0       	push   0xc002913e
c0012663:	e8 07 01 00 00       	call   c001276f <Dbg::kprintf(char const*, ...)>
c0012668:	c7 04 24 46 91 02 c0 	mov    DWORD PTR [esp],0xc0029146
c001266f:	e8 15 72 00 00       	call   c0019889 <Krnl::panic(char const*)>
c0012674:	83 c4 10             	add    esp,0x10
c0012677:	c9                   	leave  
c0012678:	c3                   	ret    

c0012679 <__cxa_pure_virtual>:
c0012679:	83 ec 18             	sub    esp,0x18
c001267c:	68 5e 91 02 c0       	push   0xc002915e
c0012681:	e8 03 72 00 00       	call   c0019889 <Krnl::panic(char const*)>
c0012686:	83 c4 1c             	add    esp,0x1c
c0012689:	c3                   	ret    

c001268a <operator new[](unsigned long)>:
c001268a:	e9 45 ce ff ff       	jmp    c000f4d4 <malloc>

c001268f <operator delete(void*, unsigned long)>:
c001268f:	e9 60 ce ff ff       	jmp    c000f4f4 <rfree>

c0012694 <operator delete[](void*)>:
c0012694:	e9 5b ce ff ff       	jmp    c000f4f4 <rfree>

c0012699 <operator delete[](void*, unsigned long)>:
c0012699:	e9 56 ce ff ff       	jmp    c000f4f4 <rfree>

c001269e <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c001269e:	57                   	push   edi
c001269f:	b9 3f 00 00 00       	mov    ecx,0x3f
c00126a4:	56                   	push   esi
c00126a5:	be 74 91 02 c0       	mov    esi,0xc0029174
c00126aa:	53                   	push   ebx
c00126ab:	83 ec 40             	sub    esp,0x40
c00126ae:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00126b2:	8d 7c 24 01          	lea    edi,[esp+0x1]
c00126b6:	fc                   	cld    
c00126b7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00126b9:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c00126bd:	83 f9 3e             	cmp    ecx,0x3e
c00126c0:	7e 05                	jle    c00126c7 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c00126c2:	b9 3e 00 00 00       	mov    ecx,0x3e
c00126c7:	89 df                	mov    edi,ebx
c00126c9:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00126cd:	eb 02                	jmp    c00126d1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c00126cf:	89 c7                	mov    edi,eax
c00126d1:	31 d2                	xor    edx,edx
c00126d3:	46                   	inc    esi
c00126d4:	89 f8                	mov    eax,edi
c00126d6:	f7 f1                	div    ecx
c00126d8:	39 cf                	cmp    edi,ecx
c00126da:	73 f3                	jae    c00126cf <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c00126dc:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00126df:	eb 02                	jmp    c00126e3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c00126e1:	89 c3                	mov    ebx,eax
c00126e3:	31 d2                	xor    edx,edx
c00126e5:	4e                   	dec    esi
c00126e6:	89 d8                	mov    eax,ebx
c00126e8:	f7 f1                	div    ecx
c00126ea:	39 cb                	cmp    ebx,ecx
c00126ec:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c00126f0:	88 16                	mov    BYTE PTR [esi],dl
c00126f2:	73 ed                	jae    c00126e1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c00126f4:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00126f8:	83 c4 40             	add    esp,0x40
c00126fb:	5b                   	pop    ebx
c00126fc:	5e                   	pop    esi
c00126fd:	5f                   	pop    edi
c00126fe:	c3                   	ret    

c00126ff <Dbg::logc(char)>:
c00126ff:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012703:	ba fd 03 00 00       	mov    edx,0x3fd
c0012708:	ec                   	in     al,dx
c0012709:	a8 20                	test   al,0x20
c001270b:	74 fb                	je     c0012708 <Dbg::logc(char)+0x9>
c001270d:	ba f8 03 00 00       	mov    edx,0x3f8
c0012712:	88 c8                	mov    al,cl
c0012714:	ee                   	out    dx,al
c0012715:	c3                   	ret    

c0012716 <Dbg::logs(char*)>:
c0012716:	53                   	push   ebx
c0012717:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001271b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001271e:	84 c0                	test   al,al
c0012720:	74 0f                	je     c0012731 <Dbg::logs(char*)+0x1b>
c0012722:	50                   	push   eax
c0012723:	43                   	inc    ebx
c0012724:	e8 d6 ff ff ff       	call   c00126ff <Dbg::logc(char)>
c0012729:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001272c:	5a                   	pop    edx
c001272d:	84 c0                	test   al,al
c001272f:	75 f1                	jne    c0012722 <Dbg::logs(char*)+0xc>
c0012731:	5b                   	pop    ebx
c0012732:	c3                   	ret    

c0012733 <Dbg::logWriteInt(unsigned int)>:
c0012733:	83 ec 10             	sub    esp,0x10
c0012736:	6a 0a                	push   0xa
c0012738:	8d 44 24 08          	lea    eax,[esp+0x8]
c001273c:	50                   	push   eax
c001273d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012741:	e8 58 ff ff ff       	call   c001269e <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012746:	50                   	push   eax
c0012747:	e8 ca ff ff ff       	call   c0012716 <Dbg::logs(char*)>
c001274c:	83 c4 20             	add    esp,0x20
c001274f:	c3                   	ret    

c0012750 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012750:	83 ec 10             	sub    esp,0x10
c0012753:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012757:	8d 44 24 08          	lea    eax,[esp+0x8]
c001275b:	50                   	push   eax
c001275c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012760:	e8 39 ff ff ff       	call   c001269e <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012765:	50                   	push   eax
c0012766:	e8 ab ff ff ff       	call   c0012716 <Dbg::logs(char*)>
c001276b:	83 c4 20             	add    esp,0x20
c001276e:	c3                   	ret    

c001276f <Dbg::kprintf(char const*, ...)>:
c001276f:	55                   	push   ebp
c0012770:	57                   	push   edi
c0012771:	56                   	push   esi
c0012772:	53                   	push   ebx
c0012773:	83 ec 0c             	sub    esp,0xc
c0012776:	8d 44 24 24          	lea    eax,[esp+0x24]
c001277a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001277e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012782:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012785:	84 c0                	test   al,al
c0012787:	74 4a                	je     c00127d3 <Dbg::kprintf(char const*, ...)+0x64>
c0012789:	31 db                	xor    ebx,ebx
c001278b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001278e:	3c 25                	cmp    al,0x25
c0012790:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012793:	0f 85 e4 00 00 00    	jne    c001287d <Dbg::kprintf(char const*, ...)+0x10e>
c0012799:	83 c3 02             	add    ebx,0x2
c001279c:	8a 07                	mov    al,BYTE PTR [edi]
c001279e:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c00127a1:	83 e8 25             	sub    eax,0x25
c00127a4:	3c 53                	cmp    al,0x53
c00127a6:	0f 87 ba 00 00 00    	ja     c0012866 <Dbg::kprintf(char const*, ...)+0xf7>
c00127ac:	0f b6 c0             	movzx  eax,al
c00127af:	ff 24 85 b4 91 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6e4c]
c00127b6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00127ba:	89 c8                	mov    eax,ecx
c00127bc:	83 c1 04             	add    ecx,0x4
c00127bf:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00127c3:	ff 30                	push   DWORD PTR [eax]
c00127c5:	e8 4c ff ff ff       	call   c0012716 <Dbg::logs(char*)>
c00127ca:	58                   	pop    eax
c00127cb:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00127cf:	84 c0                	test   al,al
c00127d1:	75 b8                	jne    c001278b <Dbg::kprintf(char const*, ...)+0x1c>
c00127d3:	83 c4 0c             	add    esp,0xc
c00127d6:	5b                   	pop    ebx
c00127d7:	5e                   	pop    esi
c00127d8:	5f                   	pop    edi
c00127d9:	5d                   	pop    ebp
c00127da:	c3                   	ret    
c00127db:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00127df:	89 d0                	mov    eax,edx
c00127e1:	83 c2 04             	add    edx,0x4
c00127e4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00127e8:	ff 30                	push   DWORD PTR [eax]
c00127ea:	e8 44 ff ff ff       	call   c0012733 <Dbg::logWriteInt(unsigned int)>
c00127ef:	58                   	pop    eax
c00127f0:	eb d9                	jmp    c00127cb <Dbg::kprintf(char const*, ...)+0x5c>
c00127f2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00127f6:	89 d0                	mov    eax,edx
c00127f8:	83 c2 04             	add    edx,0x4
c00127fb:	0f be 00             	movsx  eax,BYTE PTR [eax]
c00127fe:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012802:	50                   	push   eax
c0012803:	e8 f7 fe ff ff       	call   c00126ff <Dbg::logc(char)>
c0012808:	58                   	pop    eax
c0012809:	eb c0                	jmp    c00127cb <Dbg::kprintf(char const*, ...)+0x5c>
c001280b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001280f:	89 c8                	mov    eax,ecx
c0012811:	83 c1 04             	add    ecx,0x4
c0012814:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012818:	ff 30                	push   DWORD PTR [eax]
c001281a:	e8 14 ff ff ff       	call   c0012733 <Dbg::logWriteInt(unsigned int)>
c001281f:	5f                   	pop    edi
c0012820:	eb a9                	jmp    c00127cb <Dbg::kprintf(char const*, ...)+0x5c>
c0012822:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012826:	89 c8                	mov    eax,ecx
c0012828:	83 c1 04             	add    ecx,0x4
c001282b:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001282f:	6a 10                	push   0x10
c0012831:	ff 30                	push   DWORD PTR [eax]
c0012833:	e8 18 ff ff ff       	call   c0012750 <Dbg::logWriteIntBase(unsigned int, int)>
c0012838:	59                   	pop    ecx
c0012839:	5f                   	pop    edi
c001283a:	eb 8f                	jmp    c00127cb <Dbg::kprintf(char const*, ...)+0x5c>
c001283c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012840:	89 d0                	mov    eax,edx
c0012842:	83 c2 08             	add    edx,0x8
c0012845:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012849:	6a 10                	push   0x10
c001284b:	ff 30                	push   DWORD PTR [eax]
c001284d:	e8 fe fe ff ff       	call   c0012750 <Dbg::logWriteIntBase(unsigned int, int)>
c0012852:	58                   	pop    eax
c0012853:	5a                   	pop    edx
c0012854:	e9 72 ff ff ff       	jmp    c00127cb <Dbg::kprintf(char const*, ...)+0x5c>
c0012859:	6a 25                	push   0x25
c001285b:	e8 9f fe ff ff       	call   c00126ff <Dbg::logc(char)>
c0012860:	58                   	pop    eax
c0012861:	e9 65 ff ff ff       	jmp    c00127cb <Dbg::kprintf(char const*, ...)+0x5c>
c0012866:	6a 25                	push   0x25
c0012868:	e8 92 fe ff ff       	call   c00126ff <Dbg::logc(char)>
c001286d:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012870:	50                   	push   eax
c0012871:	e8 89 fe ff ff       	call   c00126ff <Dbg::logc(char)>
c0012876:	5a                   	pop    edx
c0012877:	59                   	pop    ecx
c0012878:	e9 4e ff ff ff       	jmp    c00127cb <Dbg::kprintf(char const*, ...)+0x5c>
c001287d:	50                   	push   eax
c001287e:	89 eb                	mov    ebx,ebp
c0012880:	e8 7a fe ff ff       	call   c00126ff <Dbg::logc(char)>
c0012885:	89 fd                	mov    ebp,edi
c0012887:	58                   	pop    eax
c0012888:	e9 3e ff ff ff       	jmp    c00127cb <Dbg::kprintf(char const*, ...)+0x5c>
c001288d:	90                   	nop

c001288e <File::read(unsigned long long, void*, int*)>:
c001288e:	53                   	push   ebx
c001288f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012893:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012897:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001289e:	3c 19                	cmp    al,0x19
c00128a0:	77 35                	ja     c00128d7 <File::read(unsigned long long, void*, int*)+0x49>
c00128a2:	8b 04 85 60 cf 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd30a0]
c00128a9:	85 c0                	test   eax,eax
c00128ab:	74 2a                	je     c00128d7 <File::read(unsigned long long, void*, int*)+0x49>
c00128ad:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00128b3:	85 c0                	test   eax,eax
c00128b5:	74 20                	je     c00128d7 <File::read(unsigned long long, void*, int*)+0x49>
c00128b7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00128bb:	74 21                	je     c00128de <File::read(unsigned long long, void*, int*)+0x50>
c00128bd:	8b 08                	mov    ecx,DWORD PTR [eax]
c00128bf:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00128c3:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00128c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00128cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00128d1:	5b                   	pop    ebx
c00128d2:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c00128d5:	ff e0                	jmp    eax
c00128d7:	b8 0b 00 00 00       	mov    eax,0xb
c00128dc:	eb 05                	jmp    c00128e3 <File::read(unsigned long long, void*, int*)+0x55>
c00128de:	b8 05 00 00 00       	mov    eax,0x5
c00128e3:	5b                   	pop    ebx
c00128e4:	c3                   	ret    
c00128e5:	90                   	nop

c00128e6 <File::write(unsigned long long, void*, int*)>:
c00128e6:	53                   	push   ebx
c00128e7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00128eb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00128ef:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00128f6:	3c 19                	cmp    al,0x19
c00128f8:	77 35                	ja     c001292f <File::write(unsigned long long, void*, int*)+0x49>
c00128fa:	8b 04 85 60 cf 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd30a0]
c0012901:	85 c0                	test   eax,eax
c0012903:	74 2a                	je     c001292f <File::write(unsigned long long, void*, int*)+0x49>
c0012905:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001290b:	85 c0                	test   eax,eax
c001290d:	74 20                	je     c001292f <File::write(unsigned long long, void*, int*)+0x49>
c001290f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012913:	74 21                	je     c0012936 <File::write(unsigned long long, void*, int*)+0x50>
c0012915:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012917:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001291b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012921:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012925:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012929:	5b                   	pop    ebx
c001292a:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c001292d:	ff e0                	jmp    eax
c001292f:	b8 0b 00 00 00       	mov    eax,0xb
c0012934:	eb 05                	jmp    c001293b <File::write(unsigned long long, void*, int*)+0x55>
c0012936:	b8 05 00 00 00       	mov    eax,0x5
c001293b:	5b                   	pop    ebx
c001293c:	c3                   	ret    
c001293d:	90                   	nop

c001293e <Directory::read(unsigned long long, void*, int*)>:
c001293e:	53                   	push   ebx
c001293f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012943:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012947:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001294e:	3c 19                	cmp    al,0x19
c0012950:	77 35                	ja     c0012987 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012952:	8b 04 85 60 cf 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd30a0]
c0012959:	85 c0                	test   eax,eax
c001295b:	74 2a                	je     c0012987 <Directory::read(unsigned long long, void*, int*)+0x49>
c001295d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012963:	85 c0                	test   eax,eax
c0012965:	74 20                	je     c0012987 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012967:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001296b:	74 21                	je     c001298e <Directory::read(unsigned long long, void*, int*)+0x50>
c001296d:	8b 08                	mov    ecx,DWORD PTR [eax]
c001296f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012973:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012979:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001297d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012981:	5b                   	pop    ebx
c0012982:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012985:	ff e0                	jmp    eax
c0012987:	b8 0b 00 00 00       	mov    eax,0xb
c001298c:	eb 05                	jmp    c0012993 <Directory::read(unsigned long long, void*, int*)+0x55>
c001298e:	b8 05 00 00 00       	mov    eax,0x5
c0012993:	5b                   	pop    ebx
c0012994:	c3                   	ret    
c0012995:	90                   	nop

c0012996 <Directory::write(unsigned long long, void*, int*)>:
c0012996:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001299a:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c00129a1:	b8 0b 00 00 00       	mov    eax,0xb
c00129a6:	80 fa 19             	cmp    dl,0x19
c00129a9:	77 18                	ja     c00129c3 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00129ab:	8b 14 95 60 cf 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd30a0]
c00129b2:	85 d2                	test   edx,edx
c00129b4:	74 0d                	je     c00129c3 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00129b6:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c00129bd:	19 c0                	sbb    eax,eax
c00129bf:	83 e0 0a             	and    eax,0xa
c00129c2:	40                   	inc    eax
c00129c3:	c3                   	ret    

c00129c4 <File::isAtty()>:
c00129c4:	31 c0                	xor    eax,eax
c00129c6:	c3                   	ret    
c00129c7:	90                   	nop

c00129c8 <Directory::isAtty()>:
c00129c8:	31 c0                	xor    eax,eax
c00129ca:	c3                   	ret    
c00129cb:	90                   	nop

c00129cc <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00129cc:	b8 0a 00 00 00       	mov    eax,0xa
c00129d1:	c3                   	ret    

c00129d2 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c00129d2:	b8 0a 00 00 00       	mov    eax,0xa
c00129d7:	c3                   	ret    

c00129d8 <File::~File()>:
c00129d8:	83 ec 0c             	sub    esp,0xc
c00129db:	ba 70 93 02 c0       	mov    edx,0xc0029370
c00129e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00129e4:	89 10                	mov    DWORD PTR [eax],edx
c00129e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00129ea:	83 ec 0c             	sub    esp,0xc
c00129ed:	50                   	push   eax
c00129ee:	e8 2b eb ff ff       	call   c001151e <UnixFile::~UnixFile()>
c00129f3:	83 c4 10             	add    esp,0x10
c00129f6:	90                   	nop
c00129f7:	83 c4 0c             	add    esp,0xc
c00129fa:	c3                   	ret    
c00129fb:	90                   	nop

c00129fc <File::~File()>:
c00129fc:	83 ec 0c             	sub    esp,0xc
c00129ff:	83 ec 0c             	sub    esp,0xc
c0012a02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a06:	e8 cd ff ff ff       	call   c00129d8 <File::~File()>
c0012a0b:	83 c4 10             	add    esp,0x10
c0012a0e:	83 ec 08             	sub    esp,0x8
c0012a11:	68 14 01 00 00       	push   0x114
c0012a16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a1a:	e8 70 fc ff ff       	call   c001268f <operator delete(void*, unsigned long)>
c0012a1f:	83 c4 10             	add    esp,0x10
c0012a22:	83 c4 0c             	add    esp,0xc
c0012a25:	c3                   	ret    

c0012a26 <Directory::~Directory()>:
c0012a26:	83 ec 0c             	sub    esp,0xc
c0012a29:	ba 8c 93 02 c0       	mov    edx,0xc002938c
c0012a2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a32:	89 10                	mov    DWORD PTR [eax],edx
c0012a34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a38:	83 ec 0c             	sub    esp,0xc
c0012a3b:	50                   	push   eax
c0012a3c:	e8 dd ea ff ff       	call   c001151e <UnixFile::~UnixFile()>
c0012a41:	83 c4 10             	add    esp,0x10
c0012a44:	90                   	nop
c0012a45:	83 c4 0c             	add    esp,0xc
c0012a48:	c3                   	ret    
c0012a49:	90                   	nop

c0012a4a <Directory::~Directory()>:
c0012a4a:	83 ec 0c             	sub    esp,0xc
c0012a4d:	83 ec 0c             	sub    esp,0xc
c0012a50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a54:	e8 cd ff ff ff       	call   c0012a26 <Directory::~Directory()>
c0012a59:	83 c4 10             	add    esp,0x10
c0012a5c:	83 ec 08             	sub    esp,0x8
c0012a5f:	68 14 01 00 00       	push   0x114
c0012a64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a68:	e8 22 fc ff ff       	call   c001268f <operator delete(void*, unsigned long)>
c0012a6d:	83 c4 10             	add    esp,0x10
c0012a70:	83 c4 0c             	add    esp,0xc
c0012a73:	c3                   	ret    

c0012a74 <Filesystem::Filesystem()>:
c0012a74:	ba 0c 93 02 c0       	mov    edx,0xc002930c
c0012a79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a7d:	89 10                	mov    DWORD PTR [eax],edx
c0012a7f:	8b 15 c8 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002cac8
c0012a85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a89:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012a8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a90:	a3 c8 ca 02 c0       	mov    ds:0xc002cac8,eax
c0012a95:	90                   	nop
c0012a96:	c3                   	ret    
c0012a97:	90                   	nop

c0012a98 <Filesystem::~Filesystem()>:
c0012a98:	ba 0c 93 02 c0       	mov    edx,0xc002930c
c0012a9d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012aa1:	89 10                	mov    DWORD PTR [eax],edx
c0012aa3:	90                   	nop
c0012aa4:	c3                   	ret    
c0012aa5:	90                   	nop

c0012aa6 <Filesystem::~Filesystem()>:
c0012aa6:	83 ec 0c             	sub    esp,0xc
c0012aa9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012aad:	e8 e6 ff ff ff       	call   c0012a98 <Filesystem::~Filesystem()>
c0012ab2:	83 c4 04             	add    esp,0x4
c0012ab5:	83 ec 08             	sub    esp,0x8
c0012ab8:	6a 08                	push   0x8
c0012aba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012abe:	e8 cc fb ff ff       	call   c001268f <operator delete(void*, unsigned long)>
c0012ac3:	83 c4 10             	add    esp,0x10
c0012ac6:	83 c4 0c             	add    esp,0xc
c0012ac9:	c3                   	ret    

c0012aca <initVFS()>:
c0012aca:	83 ec 18             	sub    esp,0x18
c0012acd:	6a 08                	push   0x8
c0012acf:	e8 00 ca ff ff       	call   c000f4d4 <malloc>
c0012ad4:	89 04 24             	mov    DWORD PTR [esp],eax
c0012ad7:	e8 b0 d3 00 00       	call   c001fe8c <FAT::FAT()>
c0012adc:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012ae3:	e8 ec c9 ff ff       	call   c000f4d4 <malloc>
c0012ae8:	89 04 24             	mov    DWORD PTR [esp],eax
c0012aeb:	e8 12 e6 00 00       	call   c0021102 <ISO9660::ISO9660()>
c0012af0:	83 c4 1c             	add    esp,0x1c
c0012af3:	c3                   	ret    

c0012af4 <standardiseFiles(char*, char const*, char const*)>:
c0012af4:	55                   	push   ebp
c0012af5:	57                   	push   edi
c0012af6:	56                   	push   esi
c0012af7:	53                   	push   ebx
c0012af8:	81 ec 10 04 00 00    	sub    esp,0x410
c0012afe:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012b05:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012b0c:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012b13:	68 00 04 00 00       	push   0x400
c0012b18:	6a 00                	push   0x0
c0012b1a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012b1e:	56                   	push   esi
c0012b1f:	e8 67 db fe ff       	call   c000068b <memset>
c0012b24:	83 c4 10             	add    esp,0x10
c0012b27:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012b2b:	75 0b                	jne    c0012b38 <standardiseFiles(char*, char const*, char const*)+0x44>
c0012b2d:	50                   	push   eax
c0012b2e:	50                   	push   eax
c0012b2f:	57                   	push   edi
c0012b30:	56                   	push   esi
c0012b31:	e8 f4 db fe ff       	call   c000072a <strcpy>
c0012b36:	eb 41                	jmp    c0012b79 <standardiseFiles(char*, char const*, char const*)+0x85>
c0012b38:	8a 07                	mov    al,BYTE PTR [edi]
c0012b3a:	3c 5c                	cmp    al,0x5c
c0012b3c:	74 04                	je     c0012b42 <standardiseFiles(char*, char const*, char const*)+0x4e>
c0012b3e:	3c 2f                	cmp    al,0x2f
c0012b40:	75 18                	jne    c0012b5a <standardiseFiles(char*, char const*, char const*)+0x66>
c0012b42:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012b45:	3c 60                	cmp    al,0x60
c0012b47:	7e 03                	jle    c0012b4c <standardiseFiles(char*, char const*, char const*)+0x58>
c0012b49:	83 e8 20             	sub    eax,0x20
c0012b4c:	88 04 24             	mov    BYTE PTR [esp],al
c0012b4f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012b56:	50                   	push   eax
c0012b57:	50                   	push   eax
c0012b58:	eb 18                	jmp    c0012b72 <standardiseFiles(char*, char const*, char const*)+0x7e>
c0012b5a:	50                   	push   eax
c0012b5b:	50                   	push   eax
c0012b5c:	55                   	push   ebp
c0012b5d:	56                   	push   esi
c0012b5e:	e8 c7 db fe ff       	call   c000072a <strcpy>
c0012b63:	5a                   	pop    edx
c0012b64:	59                   	pop    ecx
c0012b65:	68 86 a7 02 c0       	push   0xc002a786
c0012b6a:	56                   	push   esi
c0012b6b:	e8 71 dc fe ff       	call   c00007e1 <strcat>
c0012b70:	5d                   	pop    ebp
c0012b71:	58                   	pop    eax
c0012b72:	57                   	push   edi
c0012b73:	56                   	push   esi
c0012b74:	e8 68 dc fe ff       	call   c00007e1 <strcat>
c0012b79:	83 c4 10             	add    esp,0x10
c0012b7c:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012b7f:	3c 60                	cmp    al,0x60
c0012b81:	7e 03                	jle    c0012b86 <standardiseFiles(char*, char const*, char const*)+0x92>
c0012b83:	83 e8 20             	sub    eax,0x20
c0012b86:	88 04 24             	mov    BYTE PTR [esp],al
c0012b89:	88 03                	mov    BYTE PTR [ebx],al
c0012b8b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012b92:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012b98:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012b9c:	bf 03 00 00 00       	mov    edi,0x3
c0012ba1:	b8 03 00 00 00       	mov    eax,0x3
c0012ba6:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012ba9:	84 d2                	test   dl,dl
c0012bab:	0f 84 91 00 00 00    	je     c0012c42 <standardiseFiles(char*, char const*, char const*)+0x14e>
c0012bb1:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012bb4:	80 fa 5c             	cmp    dl,0x5c
c0012bb7:	74 05                	je     c0012bbe <standardiseFiles(char*, char const*, char const*)+0xca>
c0012bb9:	80 fa 2f             	cmp    dl,0x2f
c0012bbc:	75 12                	jne    c0012bd0 <standardiseFiles(char*, char const*, char const*)+0xdc>
c0012bbe:	89 c5                	mov    ebp,eax
c0012bc0:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012bc5:	74 09                	je     c0012bd0 <standardiseFiles(char*, char const*, char const*)+0xdc>
c0012bc7:	40                   	inc    eax
c0012bc8:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012bcc:	89 cf                	mov    edi,ecx
c0012bce:	eb d6                	jmp    c0012ba6 <standardiseFiles(char*, char const*, char const*)+0xb2>
c0012bd0:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012bd5:	75 5b                	jne    c0012c32 <standardiseFiles(char*, char const*, char const*)+0x13e>
c0012bd7:	80 fa 2e             	cmp    dl,0x2e
c0012bda:	75 56                	jne    c0012c32 <standardiseFiles(char*, char const*, char const*)+0x13e>
c0012bdc:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012be0:	74 19                	je     c0012bfb <standardiseFiles(char*, char const*, char const*)+0x107>
c0012be2:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012be7:	74 53                	je     c0012c3c <standardiseFiles(char*, char const*, char const*)+0x148>
c0012be9:	89 f9                	mov    ecx,edi
c0012beb:	41                   	inc    ecx
c0012bec:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012bef:	80 fa 2f             	cmp    dl,0x2f
c0012bf2:	74 f7                	je     c0012beb <standardiseFiles(char*, char const*, char const*)+0xf7>
c0012bf4:	80 fa 5c             	cmp    dl,0x5c
c0012bf7:	74 f2                	je     c0012beb <standardiseFiles(char*, char const*, char const*)+0xf7>
c0012bf9:	eb d1                	jmp    c0012bcc <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012bfb:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012c00:	74 3a                	je     c0012c3c <standardiseFiles(char*, char const*, char const*)+0x148>
c0012c02:	83 f8 03             	cmp    eax,0x3
c0012c05:	74 c5                	je     c0012bcc <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c07:	41                   	inc    ecx
c0012c08:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012c0b:	80 fa 2f             	cmp    dl,0x2f
c0012c0e:	74 f7                	je     c0012c07 <standardiseFiles(char*, char const*, char const*)+0x113>
c0012c10:	80 fa 5c             	cmp    dl,0x5c
c0012c13:	74 f2                	je     c0012c07 <standardiseFiles(char*, char const*, char const*)+0x113>
c0012c15:	48                   	dec    eax
c0012c16:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012c1a:	75 06                	jne    c0012c22 <standardiseFiles(char*, char const*, char const*)+0x12e>
c0012c1c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012c20:	eb f3                	jmp    c0012c15 <standardiseFiles(char*, char const*, char const*)+0x121>
c0012c22:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012c26:	74 07                	je     c0012c2f <standardiseFiles(char*, char const*, char const*)+0x13b>
c0012c28:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012c2c:	48                   	dec    eax
c0012c2d:	eb f3                	jmp    c0012c22 <standardiseFiles(char*, char const*, char const*)+0x12e>
c0012c2f:	40                   	inc    eax
c0012c30:	eb 9a                	jmp    c0012bcc <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c32:	80 fa 2f             	cmp    dl,0x2f
c0012c35:	74 95                	je     c0012bcc <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c37:	80 fa 5c             	cmp    dl,0x5c
c0012c3a:	74 90                	je     c0012bcc <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c3c:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012c3f:	40                   	inc    eax
c0012c40:	eb 8a                	jmp    c0012bcc <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c42:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012c46:	83 ec 0c             	sub    esp,0xc
c0012c49:	53                   	push   ebx
c0012c4a:	e8 59 da fe ff       	call   c00006a8 <strlen>
c0012c4f:	83 c4 10             	add    esp,0x10
c0012c52:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012c57:	75 26                	jne    c0012c7f <standardiseFiles(char*, char const*, char const*)+0x18b>
c0012c59:	83 ec 0c             	sub    esp,0xc
c0012c5c:	53                   	push   ebx
c0012c5d:	e8 46 da fe ff       	call   c00006a8 <strlen>
c0012c62:	83 c4 10             	add    esp,0x10
c0012c65:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012c6a:	74 26                	je     c0012c92 <standardiseFiles(char*, char const*, char const*)+0x19e>
c0012c6c:	83 ec 0c             	sub    esp,0xc
c0012c6f:	53                   	push   ebx
c0012c70:	e8 33 da fe ff       	call   c00006a8 <strlen>
c0012c75:	83 c4 10             	add    esp,0x10
c0012c78:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012c7d:	eb c7                	jmp    c0012c46 <standardiseFiles(char*, char const*, char const*)+0x152>
c0012c7f:	83 ec 0c             	sub    esp,0xc
c0012c82:	53                   	push   ebx
c0012c83:	e8 20 da fe ff       	call   c00006a8 <strlen>
c0012c88:	83 c4 10             	add    esp,0x10
c0012c8b:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012c90:	74 c7                	je     c0012c59 <standardiseFiles(char*, char const*, char const*)+0x165>
c0012c92:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012c98:	5b                   	pop    ebx
c0012c99:	5e                   	pop    esi
c0012c9a:	5f                   	pop    edi
c0012c9b:	5d                   	pop    ebp
c0012c9c:	c3                   	ret    
c0012c9d:	90                   	nop

c0012c9e <File::File(char const*, Process*)>:
c0012c9e:	83 ec 0c             	sub    esp,0xc
c0012ca1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ca5:	83 ec 08             	sub    esp,0x8
c0012ca8:	6a 00                	push   0x0
c0012caa:	50                   	push   eax
c0012cab:	e8 8c e6 ff ff       	call   c001133c <UnixFile::UnixFile(int)>
c0012cb0:	83 c4 10             	add    esp,0x10
c0012cb3:	ba 70 93 02 c0       	mov    edx,0xc0029370
c0012cb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cbc:	89 10                	mov    DWORD PTR [eax],edx
c0012cbe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012cc2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012cc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ccc:	83 c0 0d             	add    eax,0xd
c0012ccf:	83 ec 04             	sub    esp,0x4
c0012cd2:	52                   	push   edx
c0012cd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012cd7:	50                   	push   eax
c0012cd8:	e8 17 fe ff ff       	call   c0012af4 <standardiseFiles(char*, char const*, char const*)>
c0012cdd:	83 c4 10             	add    esp,0x10
c0012ce0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ce4:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012ce7:	8d 50 bf             	lea    edx,[eax-0x41]
c0012cea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cee:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012cf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cf8:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012cfc:	90                   	nop
c0012cfd:	83 c4 0c             	add    esp,0xc
c0012d00:	c3                   	ret    
c0012d01:	90                   	nop

c0012d02 <File::open(FileOpenMode)>:
c0012d02:	53                   	push   ebx
c0012d03:	b8 0b 00 00 00       	mov    eax,0xb
c0012d08:	83 ec 08             	sub    esp,0x8
c0012d0b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012d0f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012d16:	80 fa 19             	cmp    dl,0x19
c0012d19:	77 40                	ja     c0012d5b <File::open(FileOpenMode)+0x59>
c0012d1b:	8b 14 95 60 cf 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd30a0]
c0012d22:	85 d2                	test   edx,edx
c0012d24:	74 35                	je     c0012d5b <File::open(FileOpenMode)+0x59>
c0012d26:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012d2c:	85 d2                	test   edx,edx
c0012d2e:	74 2b                	je     c0012d5b <File::open(FileOpenMode)+0x59>
c0012d30:	b8 06 00 00 00       	mov    eax,0x6
c0012d35:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012d39:	75 20                	jne    c0012d5b <File::open(FileOpenMode)+0x59>
c0012d3b:	8b 02                	mov    eax,DWORD PTR [edx]
c0012d3d:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012d43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012d47:	51                   	push   ecx
c0012d48:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012d4b:	51                   	push   ecx
c0012d4c:	52                   	push   edx
c0012d4d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012d50:	83 c4 10             	add    esp,0x10
c0012d53:	85 c0                	test   eax,eax
c0012d55:	75 04                	jne    c0012d5b <File::open(FileOpenMode)+0x59>
c0012d57:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012d5b:	83 c4 08             	add    esp,0x8
c0012d5e:	5b                   	pop    ebx
c0012d5f:	c3                   	ret    

c0012d60 <File::close()>:
c0012d60:	53                   	push   ebx
c0012d61:	b8 0b 00 00 00       	mov    eax,0xb
c0012d66:	83 ec 08             	sub    esp,0x8
c0012d69:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012d6d:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012d74:	80 fa 19             	cmp    dl,0x19
c0012d77:	77 41                	ja     c0012dba <File::close()+0x5a>
c0012d79:	8b 1c 95 60 cf 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd30a0]
c0012d80:	85 db                	test   ebx,ebx
c0012d82:	74 36                	je     c0012dba <File::close()+0x5a>
c0012d84:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012d8b:	74 2d                	je     c0012dba <File::close()+0x5a>
c0012d8d:	b8 05 00 00 00       	mov    eax,0x5
c0012d92:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012d96:	74 22                	je     c0012dba <File::close()+0x5a>
c0012d98:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012d9c:	8b 04 95 60 cf 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd30a0]
c0012da3:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012da9:	53                   	push   ebx
c0012daa:	53                   	push   ebx
c0012dab:	8b 10                	mov    edx,DWORD PTR [eax]
c0012dad:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012db3:	50                   	push   eax
c0012db4:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012db7:	83 c4 10             	add    esp,0x10
c0012dba:	83 c4 08             	add    esp,0x8
c0012dbd:	5b                   	pop    ebx
c0012dbe:	c3                   	ret    
c0012dbf:	90                   	nop

c0012dc0 <File::seek(unsigned long long)>:
c0012dc0:	56                   	push   esi
c0012dc1:	53                   	push   ebx
c0012dc2:	b8 0b 00 00 00       	mov    eax,0xb
c0012dc7:	51                   	push   ecx
c0012dc8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012dcc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012dd0:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012dd7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012ddb:	80 fa 19             	cmp    dl,0x19
c0012dde:	77 31                	ja     c0012e11 <File::seek(unsigned long long)+0x51>
c0012de0:	8b 14 95 60 cf 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd30a0]
c0012de7:	85 d2                	test   edx,edx
c0012de9:	74 26                	je     c0012e11 <File::seek(unsigned long long)+0x51>
c0012deb:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012df1:	85 d2                	test   edx,edx
c0012df3:	74 1c                	je     c0012e11 <File::seek(unsigned long long)+0x51>
c0012df5:	b8 05 00 00 00       	mov    eax,0x5
c0012dfa:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012dfe:	74 11                	je     c0012e11 <File::seek(unsigned long long)+0x51>
c0012e00:	8b 02                	mov    eax,DWORD PTR [edx]
c0012e02:	53                   	push   ebx
c0012e03:	51                   	push   ecx
c0012e04:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012e0a:	52                   	push   edx
c0012e0b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012e0e:	83 c4 10             	add    esp,0x10
c0012e11:	5a                   	pop    edx
c0012e12:	5b                   	pop    ebx
c0012e13:	5e                   	pop    esi
c0012e14:	c3                   	ret    
c0012e15:	90                   	nop

c0012e16 <File::tell(unsigned long long*)>:
c0012e16:	83 ec 0c             	sub    esp,0xc
c0012e19:	b8 0b 00 00 00       	mov    eax,0xb
c0012e1e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012e22:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012e29:	80 fa 19             	cmp    dl,0x19
c0012e2c:	77 34                	ja     c0012e62 <File::tell(unsigned long long*)+0x4c>
c0012e2e:	8b 14 95 60 cf 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd30a0]
c0012e35:	85 d2                	test   edx,edx
c0012e37:	74 29                	je     c0012e62 <File::tell(unsigned long long*)+0x4c>
c0012e39:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012e3f:	85 d2                	test   edx,edx
c0012e41:	74 1f                	je     c0012e62 <File::tell(unsigned long long*)+0x4c>
c0012e43:	b8 05 00 00 00       	mov    eax,0x5
c0012e48:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012e4c:	74 14                	je     c0012e62 <File::tell(unsigned long long*)+0x4c>
c0012e4e:	50                   	push   eax
c0012e4f:	8b 02                	mov    eax,DWORD PTR [edx]
c0012e51:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012e55:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012e5b:	52                   	push   edx
c0012e5c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012e5f:	83 c4 10             	add    esp,0x10
c0012e62:	83 c4 0c             	add    esp,0xc
c0012e65:	c3                   	ret    

c0012e66 <File::rewind()>:
c0012e66:	83 ec 10             	sub    esp,0x10
c0012e69:	6a 00                	push   0x0
c0012e6b:	6a 00                	push   0x0
c0012e6d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e71:	e8 4a ff ff ff       	call   c0012dc0 <File::seek(unsigned long long)>
c0012e76:	83 c4 1c             	add    esp,0x1c
c0012e79:	c3                   	ret    

c0012e7a <File::unlink()>:
c0012e7a:	83 ec 0c             	sub    esp,0xc
c0012e7d:	b8 0b 00 00 00       	mov    eax,0xb
c0012e82:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e86:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e8d:	80 f9 19             	cmp    cl,0x19
c0012e90:	77 2f                	ja     c0012ec1 <File::unlink()+0x47>
c0012e92:	8b 0c 8d 60 cf 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd30a0]
c0012e99:	85 c9                	test   ecx,ecx
c0012e9b:	74 24                	je     c0012ec1 <File::unlink()+0x47>
c0012e9d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012ea3:	85 c9                	test   ecx,ecx
c0012ea5:	74 1a                	je     c0012ec1 <File::unlink()+0x47>
c0012ea7:	b8 06 00 00 00       	mov    eax,0x6
c0012eac:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012eb0:	75 0f                	jne    c0012ec1 <File::unlink()+0x47>
c0012eb2:	83 c2 0d             	add    edx,0xd
c0012eb5:	50                   	push   eax
c0012eb6:	50                   	push   eax
c0012eb7:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012eb9:	52                   	push   edx
c0012eba:	51                   	push   ecx
c0012ebb:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012ebe:	83 c4 10             	add    esp,0x10
c0012ec1:	83 c4 0c             	add    esp,0xc
c0012ec4:	c3                   	ret    
c0012ec5:	90                   	nop

c0012ec6 <File::rename(char const*)>:
c0012ec6:	83 ec 0c             	sub    esp,0xc
c0012ec9:	b8 0b 00 00 00       	mov    eax,0xb
c0012ece:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012ed2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012ed9:	80 f9 19             	cmp    cl,0x19
c0012edc:	77 32                	ja     c0012f10 <File::rename(char const*)+0x4a>
c0012ede:	8b 0c 8d 60 cf 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd30a0]
c0012ee5:	85 c9                	test   ecx,ecx
c0012ee7:	74 27                	je     c0012f10 <File::rename(char const*)+0x4a>
c0012ee9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012eef:	85 c9                	test   ecx,ecx
c0012ef1:	74 1d                	je     c0012f10 <File::rename(char const*)+0x4a>
c0012ef3:	b8 06 00 00 00       	mov    eax,0x6
c0012ef8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012efc:	75 12                	jne    c0012f10 <File::rename(char const*)+0x4a>
c0012efe:	83 c2 0d             	add    edx,0xd
c0012f01:	50                   	push   eax
c0012f02:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012f04:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012f08:	52                   	push   edx
c0012f09:	51                   	push   ecx
c0012f0a:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012f0d:	83 c4 10             	add    esp,0x10
c0012f10:	83 c4 0c             	add    esp,0xc
c0012f13:	c3                   	ret    

c0012f14 <File::chfatattr(unsigned char, unsigned char)>:
c0012f14:	57                   	push   edi
c0012f15:	b8 0b 00 00 00       	mov    eax,0xb
c0012f1a:	56                   	push   esi
c0012f1b:	53                   	push   ebx
c0012f1c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012f20:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012f24:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012f2b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012f2f:	80 f9 19             	cmp    cl,0x19
c0012f32:	77 37                	ja     c0012f6b <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012f34:	8b 0c 8d 60 cf 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd30a0]
c0012f3b:	85 c9                	test   ecx,ecx
c0012f3d:	74 2c                	je     c0012f6b <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012f3f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012f45:	85 c9                	test   ecx,ecx
c0012f47:	74 22                	je     c0012f6b <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012f49:	b8 06 00 00 00       	mov    eax,0x6
c0012f4e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f52:	75 17                	jne    c0012f6b <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012f54:	8b 39                	mov    edi,DWORD PTR [ecx]
c0012f56:	89 f0                	mov    eax,esi
c0012f58:	83 c2 0d             	add    edx,0xd
c0012f5b:	0f b6 f0             	movzx  esi,al
c0012f5e:	0f b6 db             	movzx  ebx,bl
c0012f61:	56                   	push   esi
c0012f62:	53                   	push   ebx
c0012f63:	52                   	push   edx
c0012f64:	51                   	push   ecx
c0012f65:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0012f68:	83 c4 10             	add    esp,0x10
c0012f6b:	5b                   	pop    ebx
c0012f6c:	5e                   	pop    esi
c0012f6d:	5f                   	pop    edi
c0012f6e:	c3                   	ret    
c0012f6f:	90                   	nop

c0012f70 <File::exists()>:
c0012f70:	83 ec 0c             	sub    esp,0xc
c0012f73:	31 c0                	xor    eax,eax
c0012f75:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012f79:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012f80:	80 f9 19             	cmp    cl,0x19
c0012f83:	77 24                	ja     c0012fa9 <File::exists()+0x39>
c0012f85:	8b 0c 8d 60 cf 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd30a0]
c0012f8c:	85 c9                	test   ecx,ecx
c0012f8e:	74 19                	je     c0012fa9 <File::exists()+0x39>
c0012f90:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012f96:	85 c9                	test   ecx,ecx
c0012f98:	74 0f                	je     c0012fa9 <File::exists()+0x39>
c0012f9a:	83 c2 0d             	add    edx,0xd
c0012f9d:	50                   	push   eax
c0012f9e:	50                   	push   eax
c0012f9f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012fa1:	52                   	push   edx
c0012fa2:	51                   	push   ecx
c0012fa3:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012fa6:	83 c4 10             	add    esp,0x10
c0012fa9:	83 c4 0c             	add    esp,0xc
c0012fac:	c3                   	ret    
c0012fad:	90                   	nop

c0012fae <File::stat(unsigned long long*, bool*)>:
c0012fae:	56                   	push   esi
c0012faf:	53                   	push   ebx
c0012fb0:	50                   	push   eax
c0012fb1:	b8 0b 00 00 00       	mov    eax,0xb
c0012fb6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012fba:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012fbe:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012fc5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012fc9:	80 f9 19             	cmp    cl,0x19
c0012fcc:	77 3d                	ja     c001300b <File::stat(unsigned long long*, bool*)+0x5d>
c0012fce:	8b 0c 8d 60 cf 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd30a0]
c0012fd5:	85 c9                	test   ecx,ecx
c0012fd7:	74 32                	je     c001300b <File::stat(unsigned long long*, bool*)+0x5d>
c0012fd9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012fdf:	85 c9                	test   ecx,ecx
c0012fe1:	74 28                	je     c001300b <File::stat(unsigned long long*, bool*)+0x5d>
c0012fe3:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012fe5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012fe9:	74 13                	je     c0012ffe <File::stat(unsigned long long*, bool*)+0x50>
c0012feb:	83 ec 04             	sub    esp,0x4
c0012fee:	56                   	push   esi
c0012fef:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0012ff5:	51                   	push   ecx
c0012ff6:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0012ff9:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012ffc:	eb 0a                	jmp    c0013008 <File::stat(unsigned long long*, bool*)+0x5a>
c0012ffe:	53                   	push   ebx
c0012fff:	83 c2 0d             	add    edx,0xd
c0013002:	56                   	push   esi
c0013003:	52                   	push   edx
c0013004:	51                   	push   ecx
c0013005:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0013008:	83 c4 10             	add    esp,0x10
c001300b:	5a                   	pop    edx
c001300c:	5b                   	pop    ebx
c001300d:	5e                   	pop    esi
c001300e:	c3                   	ret    

c001300f <getcwd(Process*, char*, int)>:
c001300f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013013:	31 c0                	xor    eax,eax
c0013015:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0013018:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001301c:	7d 15                	jge    c0013033 <getcwd(Process*, char*, int)+0x24>
c001301e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013022:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0013029:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001302c:	84 c9                	test   cl,cl
c001302e:	74 06                	je     c0013036 <getcwd(Process*, char*, int)+0x27>
c0013030:	40                   	inc    eax
c0013031:	eb e2                	jmp    c0013015 <getcwd(Process*, char*, int)+0x6>
c0013033:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0013036:	31 c0                	xor    eax,eax
c0013038:	c3                   	ret    

c0013039 <setcwd(Process*, char*)>:
c0013039:	55                   	push   ebp
c001303a:	57                   	push   edi
c001303b:	56                   	push   esi
c001303c:	53                   	push   ebx
c001303d:	81 ec 20 02 00 00    	sub    esp,0x220
c0013043:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c001304a:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0013050:	57                   	push   edi
c0013051:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0013058:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c001305c:	56                   	push   esi
c001305d:	e8 92 fa ff ff       	call   c0012af4 <standardiseFiles(char*, char const*, char const*)>
c0013062:	89 34 24             	mov    DWORD PTR [esp],esi
c0013065:	e8 3e d6 fe ff       	call   c00006a8 <strlen>
c001306a:	83 c4 10             	add    esp,0x10
c001306d:	83 f8 02             	cmp    eax,0x2
c0013070:	77 17                	ja     c0013089 <setcwd(Process*, char*)+0x50>
c0013072:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0013077:	83 e8 41             	sub    eax,0x41
c001307a:	83 f8 19             	cmp    eax,0x19
c001307d:	76 24                	jbe    c00130a3 <setcwd(Process*, char*)+0x6a>
c001307f:	b8 03 00 00 00       	mov    eax,0x3
c0013084:	e9 e0 00 00 00       	jmp    c0013169 <setcwd(Process*, char*)+0x130>
c0013089:	83 ec 0c             	sub    esp,0xc
c001308c:	56                   	push   esi
c001308d:	e8 16 d6 fe ff       	call   c00006a8 <strlen>
c0013092:	83 c4 10             	add    esp,0x10
c0013095:	83 f8 03             	cmp    eax,0x3
c0013098:	75 34                	jne    c00130ce <setcwd(Process*, char*)+0x95>
c001309a:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c001309f:	75 2d                	jne    c00130ce <setcwd(Process*, char*)+0x95>
c00130a1:	eb cf                	jmp    c0013072 <setcwd(Process*, char*)+0x39>
c00130a3:	8b 14 85 60 cf 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd30a0]
c00130aa:	b8 05 00 00 00       	mov    eax,0x5
c00130af:	85 d2                	test   edx,edx
c00130b1:	0f 84 b2 00 00 00    	je     c0013169 <setcwd(Process*, char*)+0x130>
c00130b7:	b8 06 00 00 00       	mov    eax,0x6
c00130bc:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00130c3:	0f 85 92 00 00 00    	jne    c001315b <setcwd(Process*, char*)+0x122>
c00130c9:	e9 9b 00 00 00       	jmp    c0013169 <setcwd(Process*, char*)+0x130>
c00130ce:	83 ec 0c             	sub    esp,0xc
c00130d1:	68 14 01 00 00       	push   0x114
c00130d6:	e8 f9 c3 ff ff       	call   c000f4d4 <malloc>
c00130db:	83 c4 0c             	add    esp,0xc
c00130de:	89 c3                	mov    ebx,eax
c00130e0:	55                   	push   ebp
c00130e1:	56                   	push   esi
c00130e2:	50                   	push   eax
c00130e3:	e8 b6 fb ff ff       	call   c0012c9e <File::File(char const*, Process*)>
c00130e8:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00130ed:	83 c4 0c             	add    esp,0xc
c00130f0:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00130f4:	50                   	push   eax
c00130f5:	8d 44 24 10          	lea    eax,[esp+0x10]
c00130f9:	50                   	push   eax
c00130fa:	53                   	push   ebx
c00130fb:	e8 ae fe ff ff       	call   c0012fae <File::stat(unsigned long long*, bool*)>
c0013100:	83 c4 10             	add    esp,0x10
c0013103:	83 f8 02             	cmp    eax,0x2
c0013106:	74 04                	je     c001310c <setcwd(Process*, char*)+0xd3>
c0013108:	85 c0                	test   eax,eax
c001310a:	74 1c                	je     c0013128 <setcwd(Process*, char*)+0xef>
c001310c:	b8 01 00 00 00       	mov    eax,0x1
c0013111:	85 db                	test   ebx,ebx
c0013113:	74 54                	je     c0013169 <setcwd(Process*, char*)+0x130>
c0013115:	83 ec 0c             	sub    esp,0xc
c0013118:	8b 03                	mov    eax,DWORD PTR [ebx]
c001311a:	53                   	push   ebx
c001311b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001311e:	83 c4 10             	add    esp,0x10
c0013121:	b8 01 00 00 00       	mov    eax,0x1
c0013126:	eb 41                	jmp    c0013169 <setcwd(Process*, char*)+0x130>
c0013128:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001312d:	75 1c                	jne    c001314b <setcwd(Process*, char*)+0x112>
c001312f:	b8 02 00 00 00       	mov    eax,0x2
c0013134:	85 db                	test   ebx,ebx
c0013136:	74 31                	je     c0013169 <setcwd(Process*, char*)+0x130>
c0013138:	83 ec 0c             	sub    esp,0xc
c001313b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001313d:	53                   	push   ebx
c001313e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013141:	83 c4 10             	add    esp,0x10
c0013144:	b8 02 00 00 00       	mov    eax,0x2
c0013149:	eb 1e                	jmp    c0013169 <setcwd(Process*, char*)+0x130>
c001314b:	85 db                	test   ebx,ebx
c001314d:	74 0c                	je     c001315b <setcwd(Process*, char*)+0x122>
c001314f:	83 ec 0c             	sub    esp,0xc
c0013152:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013154:	53                   	push   ebx
c0013155:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013158:	83 c4 10             	add    esp,0x10
c001315b:	50                   	push   eax
c001315c:	50                   	push   eax
c001315d:	56                   	push   esi
c001315e:	57                   	push   edi
c001315f:	e8 c6 d5 fe ff       	call   c000072a <strcpy>
c0013164:	83 c4 10             	add    esp,0x10
c0013167:	31 c0                	xor    eax,eax
c0013169:	81 c4 1c 02 00 00    	add    esp,0x21c
c001316f:	5b                   	pop    ebx
c0013170:	5e                   	pop    esi
c0013171:	5f                   	pop    edi
c0013172:	5d                   	pop    ebp
c0013173:	c3                   	ret    

c0013174 <Directory::Directory(char const*, Process*)>:
c0013174:	83 ec 0c             	sub    esp,0xc
c0013177:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001317b:	83 ec 08             	sub    esp,0x8
c001317e:	6a 00                	push   0x0
c0013180:	50                   	push   eax
c0013181:	e8 b6 e1 ff ff       	call   c001133c <UnixFile::UnixFile(int)>
c0013186:	83 c4 10             	add    esp,0x10
c0013189:	ba 8c 93 02 c0       	mov    edx,0xc002938c
c001318e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013192:	89 10                	mov    DWORD PTR [eax],edx
c0013194:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013198:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001319e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131a2:	83 c0 0d             	add    eax,0xd
c00131a5:	83 ec 04             	sub    esp,0x4
c00131a8:	52                   	push   edx
c00131a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131ad:	50                   	push   eax
c00131ae:	e8 41 f9 ff ff       	call   c0012af4 <standardiseFiles(char*, char const*, char const*)>
c00131b3:	83 c4 10             	add    esp,0x10
c00131b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131ba:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00131bd:	8d 50 bf             	lea    edx,[eax-0x41]
c00131c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131c4:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00131ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131ce:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00131d2:	90                   	nop
c00131d3:	83 c4 0c             	add    esp,0xc
c00131d6:	c3                   	ret    
c00131d7:	90                   	nop

c00131d8 <Directory::open()>:
c00131d8:	53                   	push   ebx
c00131d9:	b8 0b 00 00 00       	mov    eax,0xb
c00131de:	83 ec 08             	sub    esp,0x8
c00131e1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00131e5:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00131ec:	80 fa 19             	cmp    dl,0x19
c00131ef:	77 3d                	ja     c001322e <Directory::open()+0x56>
c00131f1:	8b 14 95 60 cf 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd30a0]
c00131f8:	85 d2                	test   edx,edx
c00131fa:	74 32                	je     c001322e <Directory::open()+0x56>
c00131fc:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013202:	85 d2                	test   edx,edx
c0013204:	74 28                	je     c001322e <Directory::open()+0x56>
c0013206:	b8 06 00 00 00       	mov    eax,0x6
c001320b:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001320f:	75 1d                	jne    c001322e <Directory::open()+0x56>
c0013211:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013217:	50                   	push   eax
c0013218:	8b 02                	mov    eax,DWORD PTR [edx]
c001321a:	51                   	push   ecx
c001321b:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001321e:	51                   	push   ecx
c001321f:	52                   	push   edx
c0013220:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013223:	83 c4 10             	add    esp,0x10
c0013226:	85 c0                	test   eax,eax
c0013228:	75 04                	jne    c001322e <Directory::open()+0x56>
c001322a:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001322e:	83 c4 08             	add    esp,0x8
c0013231:	5b                   	pop    ebx
c0013232:	c3                   	ret    
c0013233:	90                   	nop

c0013234 <Directory::close()>:
c0013234:	53                   	push   ebx
c0013235:	b8 0b 00 00 00       	mov    eax,0xb
c001323a:	83 ec 08             	sub    esp,0x8
c001323d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013241:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013248:	80 fa 19             	cmp    dl,0x19
c001324b:	77 41                	ja     c001328e <Directory::close()+0x5a>
c001324d:	8b 1c 95 60 cf 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd30a0]
c0013254:	85 db                	test   ebx,ebx
c0013256:	74 36                	je     c001328e <Directory::close()+0x5a>
c0013258:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c001325f:	74 2d                	je     c001328e <Directory::close()+0x5a>
c0013261:	b8 05 00 00 00       	mov    eax,0x5
c0013266:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001326a:	74 22                	je     c001328e <Directory::close()+0x5a>
c001326c:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013270:	8b 04 95 60 cf 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd30a0]
c0013277:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001327d:	53                   	push   ebx
c001327e:	53                   	push   ebx
c001327f:	8b 10                	mov    edx,DWORD PTR [eax]
c0013281:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013287:	50                   	push   eax
c0013288:	ff 52 20             	call   DWORD PTR [edx+0x20]
c001328b:	83 c4 10             	add    esp,0x10
c001328e:	83 c4 08             	add    esp,0x8
c0013291:	5b                   	pop    ebx
c0013292:	c3                   	ret    
c0013293:	90                   	nop

c0013294 <Directory::unlink()>:
c0013294:	83 ec 0c             	sub    esp,0xc
c0013297:	b8 0b 00 00 00       	mov    eax,0xb
c001329c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00132a0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00132a7:	80 f9 19             	cmp    cl,0x19
c00132aa:	77 2f                	ja     c00132db <Directory::unlink()+0x47>
c00132ac:	8b 0c 8d 60 cf 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd30a0]
c00132b3:	85 c9                	test   ecx,ecx
c00132b5:	74 24                	je     c00132db <Directory::unlink()+0x47>
c00132b7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00132bd:	85 c9                	test   ecx,ecx
c00132bf:	74 1a                	je     c00132db <Directory::unlink()+0x47>
c00132c1:	b8 06 00 00 00       	mov    eax,0x6
c00132c6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00132ca:	75 0f                	jne    c00132db <Directory::unlink()+0x47>
c00132cc:	83 c2 0d             	add    edx,0xd
c00132cf:	50                   	push   eax
c00132d0:	50                   	push   eax
c00132d1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00132d3:	52                   	push   edx
c00132d4:	51                   	push   ecx
c00132d5:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00132d8:	83 c4 10             	add    esp,0x10
c00132db:	83 c4 0c             	add    esp,0xc
c00132de:	c3                   	ret    
c00132df:	90                   	nop

c00132e0 <Directory::rename(char const*)>:
c00132e0:	83 ec 0c             	sub    esp,0xc
c00132e3:	b8 0b 00 00 00       	mov    eax,0xb
c00132e8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00132ec:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00132f3:	80 f9 19             	cmp    cl,0x19
c00132f6:	77 32                	ja     c001332a <Directory::rename(char const*)+0x4a>
c00132f8:	8b 0c 8d 60 cf 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd30a0]
c00132ff:	85 c9                	test   ecx,ecx
c0013301:	74 27                	je     c001332a <Directory::rename(char const*)+0x4a>
c0013303:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013309:	85 c9                	test   ecx,ecx
c001330b:	74 1d                	je     c001332a <Directory::rename(char const*)+0x4a>
c001330d:	b8 06 00 00 00       	mov    eax,0x6
c0013312:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013316:	75 12                	jne    c001332a <Directory::rename(char const*)+0x4a>
c0013318:	83 c2 0d             	add    edx,0xd
c001331b:	50                   	push   eax
c001331c:	8b 01                	mov    eax,DWORD PTR [ecx]
c001331e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013322:	52                   	push   edx
c0013323:	51                   	push   ecx
c0013324:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013327:	83 c4 10             	add    esp,0x10
c001332a:	83 c4 0c             	add    esp,0xc
c001332d:	c3                   	ret    

c001332e <Directory::exists()>:
c001332e:	83 ec 0c             	sub    esp,0xc
c0013331:	31 c0                	xor    eax,eax
c0013333:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013337:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001333e:	80 f9 19             	cmp    cl,0x19
c0013341:	77 24                	ja     c0013367 <Directory::exists()+0x39>
c0013343:	8b 0c 8d 60 cf 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd30a0]
c001334a:	85 c9                	test   ecx,ecx
c001334c:	74 19                	je     c0013367 <Directory::exists()+0x39>
c001334e:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013354:	85 c9                	test   ecx,ecx
c0013356:	74 0f                	je     c0013367 <Directory::exists()+0x39>
c0013358:	83 c2 0d             	add    edx,0xd
c001335b:	50                   	push   eax
c001335c:	50                   	push   eax
c001335d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001335f:	52                   	push   edx
c0013360:	51                   	push   ecx
c0013361:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013364:	83 c4 10             	add    esp,0x10
c0013367:	83 c4 0c             	add    esp,0xc
c001336a:	c3                   	ret    
c001336b:	90                   	nop

c001336c <Directory::read(dirent*)>:
c001336c:	83 ec 1c             	sub    esp,0x1c
c001336f:	b8 0b 00 00 00       	mov    eax,0xb
c0013374:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013378:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001337f:	80 fa 19             	cmp    dl,0x19
c0013382:	77 30                	ja     c00133b4 <Directory::read(dirent*)+0x48>
c0013384:	8b 14 95 60 cf 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd30a0]
c001338b:	85 d2                	test   edx,edx
c001338d:	74 25                	je     c00133b4 <Directory::read(dirent*)+0x48>
c001338f:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013396:	74 1c                	je     c00133b4 <Directory::read(dirent*)+0x48>
c0013398:	83 ec 0c             	sub    esp,0xc
c001339b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001339d:	8d 54 24 18          	lea    edx,[esp+0x18]
c00133a1:	52                   	push   edx
c00133a2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00133a6:	6a 00                	push   0x0
c00133a8:	68 10 01 00 00       	push   0x110
c00133ad:	51                   	push   ecx
c00133ae:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00133b1:	83 c4 20             	add    esp,0x20
c00133b4:	83 c4 1c             	add    esp,0x1c
c00133b7:	c3                   	ret    

c00133b8 <Directory::create()>:
c00133b8:	83 ec 0c             	sub    esp,0xc
c00133bb:	b8 0b 00 00 00       	mov    eax,0xb
c00133c0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00133c4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00133cb:	80 f9 19             	cmp    cl,0x19
c00133ce:	77 2f                	ja     c00133ff <Directory::create()+0x47>
c00133d0:	8b 0c 8d 60 cf 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd30a0]
c00133d7:	85 c9                	test   ecx,ecx
c00133d9:	74 24                	je     c00133ff <Directory::create()+0x47>
c00133db:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00133e1:	85 c9                	test   ecx,ecx
c00133e3:	74 1a                	je     c00133ff <Directory::create()+0x47>
c00133e5:	b8 06 00 00 00       	mov    eax,0x6
c00133ea:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00133ee:	75 0f                	jne    c00133ff <Directory::create()+0x47>
c00133f0:	83 c2 0d             	add    edx,0xd
c00133f3:	50                   	push   eax
c00133f4:	50                   	push   eax
c00133f5:	8b 01                	mov    eax,DWORD PTR [ecx]
c00133f7:	52                   	push   edx
c00133f8:	51                   	push   ecx
c00133f9:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c00133fc:	83 c4 10             	add    esp,0x10
c00133ff:	83 c4 0c             	add    esp,0xc
c0013402:	c3                   	ret    
c0013403:	90                   	nop

c0013404 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013404:	b8 0a 00 00 00       	mov    eax,0xa
c0013409:	c3                   	ret    

c001340a <Bus::Bus(char const*)>:
c001340a:	83 ec 0c             	sub    esp,0xc
c001340d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013411:	83 ec 08             	sub    esp,0x8
c0013414:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013418:	50                   	push   eax
c0013419:	e8 30 09 00 00       	call   c0013d4e <Device::Device(char const*)>
c001341e:	83 c4 10             	add    esp,0x10
c0013421:	ba a8 93 02 c0       	mov    edx,0xc00293a8
c0013426:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001342a:	89 10                	mov    DWORD PTR [eax],edx
c001342c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013430:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c001343a:	90                   	nop
c001343b:	83 c4 0c             	add    esp,0xc
c001343e:	c3                   	ret    
c001343f:	90                   	nop

c0013440 <Bus::~Bus()>:
c0013440:	83 ec 0c             	sub    esp,0xc
c0013443:	ba a8 93 02 c0       	mov    edx,0xc00293a8
c0013448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001344c:	89 10                	mov    DWORD PTR [eax],edx
c001344e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013452:	83 ec 0c             	sub    esp,0xc
c0013455:	50                   	push   eax
c0013456:	e8 d5 05 00 00       	call   c0013a30 <Device::~Device()>
c001345b:	83 c4 10             	add    esp,0x10
c001345e:	90                   	nop
c001345f:	83 c4 0c             	add    esp,0xc
c0013462:	c3                   	ret    
c0013463:	90                   	nop

c0013464 <Bus::~Bus()>:
c0013464:	83 ec 0c             	sub    esp,0xc
c0013467:	83 ec 0c             	sub    esp,0xc
c001346a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001346e:	e8 cd ff ff ff       	call   c0013440 <Bus::~Bus()>
c0013473:	83 c4 10             	add    esp,0x10
c0013476:	83 ec 08             	sub    esp,0x8
c0013479:	68 58 01 00 00       	push   0x158
c001347e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013482:	e8 08 f2 ff ff       	call   c001268f <operator delete(void*, unsigned long)>
c0013487:	83 c4 10             	add    esp,0x10
c001348a:	83 c4 0c             	add    esp,0xc
c001348d:	c3                   	ret    

c001348e <Buzzer::Buzzer(char const*)>:
c001348e:	83 ec 0c             	sub    esp,0xc
c0013491:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013495:	83 ec 08             	sub    esp,0x8
c0013498:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001349c:	50                   	push   eax
c001349d:	e8 ac 08 00 00       	call   c0013d4e <Device::Device(char const*)>
c00134a2:	83 c4 10             	add    esp,0x10
c00134a5:	ba d4 93 02 c0       	mov    edx,0xc00293d4
c00134aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134ae:	89 10                	mov    DWORD PTR [eax],edx
c00134b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134b4:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00134be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134c2:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c00134cc:	90                   	nop
c00134cd:	83 c4 0c             	add    esp,0xc
c00134d0:	c3                   	ret    
c00134d1:	90                   	nop

c00134d2 <Buzzer::~Buzzer()>:
c00134d2:	83 ec 0c             	sub    esp,0xc
c00134d5:	ba d4 93 02 c0       	mov    edx,0xc00293d4
c00134da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134de:	89 10                	mov    DWORD PTR [eax],edx
c00134e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134e4:	83 ec 0c             	sub    esp,0xc
c00134e7:	50                   	push   eax
c00134e8:	e8 43 05 00 00       	call   c0013a30 <Device::~Device()>
c00134ed:	83 c4 10             	add    esp,0x10
c00134f0:	90                   	nop
c00134f1:	83 c4 0c             	add    esp,0xc
c00134f4:	c3                   	ret    
c00134f5:	90                   	nop

c00134f6 <Buzzer::~Buzzer()>:
c00134f6:	83 ec 0c             	sub    esp,0xc
c00134f9:	83 ec 0c             	sub    esp,0xc
c00134fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013500:	e8 cd ff ff ff       	call   c00134d2 <Buzzer::~Buzzer()>
c0013505:	83 c4 10             	add    esp,0x10
c0013508:	83 ec 08             	sub    esp,0x8
c001350b:	68 5c 01 00 00       	push   0x15c
c0013510:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013514:	e8 76 f1 ff ff       	call   c001268f <operator delete(void*, unsigned long)>
c0013519:	83 c4 10             	add    esp,0x10
c001351c:	83 c4 0c             	add    esp,0xc
c001351f:	c3                   	ret    

c0013520 <Buzzer::stop()>:
c0013520:	83 ec 14             	sub    esp,0x14
c0013523:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013527:	8b 10                	mov    edx,DWORD PTR [eax]
c0013529:	6a 00                	push   0x0
c001352b:	50                   	push   eax
c001352c:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001352f:	83 c4 1c             	add    esp,0x1c
c0013532:	c3                   	ret    

c0013533 <beepThread(void*)>:
c0013533:	53                   	push   ebx
c0013534:	83 ec 08             	sub    esp,0x8
c0013537:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001353b:	e8 da 97 00 00       	call   c001cd1a <unlockScheduler()>
c0013540:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013545:	52                   	push   edx
c0013546:	52                   	push   edx
c0013547:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c001354d:	52                   	push   edx
c001354e:	50                   	push   eax
c001354f:	e8 14 9d 00 00       	call   c001d268 <nanoSleep(unsigned long long)>
c0013554:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013557:	e8 c4 ff ff ff       	call   c0013520 <Buzzer::stop()>
c001355c:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013564:	83 c4 18             	add    esp,0x18
c0013567:	5b                   	pop    ebx
c0013568:	e9 41 9c 00 00       	jmp    c001d1ae <blockTask(TaskState)>
c001356d:	90                   	nop

c001356e <Buzzer::beep(int, int, bool)>:
c001356e:	57                   	push   edi
c001356f:	56                   	push   esi
c0013570:	53                   	push   ebx
c0013571:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013575:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013579:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001357d:	52                   	push   edx
c001357e:	52                   	push   edx
c001357f:	8b 06                	mov    eax,DWORD PTR [esi]
c0013581:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013585:	56                   	push   esi
c0013586:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013589:	83 c4 10             	add    esp,0x10
c001358c:	89 f8                	mov    eax,edi
c001358e:	84 c0                	test   al,al
c0013590:	74 1f                	je     c00135b1 <Buzzer::beep(int, int, bool)+0x43>
c0013592:	50                   	push   eax
c0013593:	50                   	push   eax
c0013594:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c001359a:	99                   	cdq    
c001359b:	52                   	push   edx
c001359c:	50                   	push   eax
c001359d:	e8 c6 9c 00 00       	call   c001d268 <nanoSleep(unsigned long long)>
c00135a2:	83 c4 10             	add    esp,0x10
c00135a5:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00135a9:	5b                   	pop    ebx
c00135aa:	5e                   	pop    esi
c00135ab:	5f                   	pop    edi
c00135ac:	e9 6f ff ff ff       	jmp    c0013520 <Buzzer::stop()>
c00135b1:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c00135b7:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c00135bc:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c00135c4:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c00135c8:	c7 44 24 14 33 35 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013533
c00135d0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00135d4:	5b                   	pop    ebx
c00135d5:	5e                   	pop    esi
c00135d6:	5f                   	pop    edi
c00135d7:	e9 6e 98 00 00       	jmp    c001ce4a <Process::createThread(void (*)(void*), void*, int)>

c00135dc <loadClockSettings()>:
c00135dc:	c7 05 d4 ca 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002cad4,0xa
c00135e6:	c6 05 d1 ca 02 c0 00 	mov    BYTE PTR ds:0xc002cad1,0x0
c00135ed:	c6 05 d0 ca 02 c0 01 	mov    BYTE PTR ds:0xc002cad0,0x1
c00135f4:	c3                   	ret    
c00135f5:	90                   	nop

c00135f6 <Clock::Clock(char const*)>:
c00135f6:	83 ec 0c             	sub    esp,0xc
c00135f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135fd:	83 ec 08             	sub    esp,0x8
c0013600:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013604:	50                   	push   eax
c0013605:	e8 44 07 00 00       	call   c0013d4e <Device::Device(char const*)>
c001360a:	83 c4 10             	add    esp,0x10
c001360d:	ba 04 94 02 c0       	mov    edx,0xc0029404
c0013612:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013616:	89 10                	mov    DWORD PTR [eax],edx
c0013618:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001361c:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013626:	90                   	nop
c0013627:	83 c4 0c             	add    esp,0xc
c001362a:	c3                   	ret    
c001362b:	90                   	nop

c001362c <Clock::~Clock()>:
c001362c:	83 ec 0c             	sub    esp,0xc
c001362f:	ba 04 94 02 c0       	mov    edx,0xc0029404
c0013634:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013638:	89 10                	mov    DWORD PTR [eax],edx
c001363a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001363e:	83 ec 0c             	sub    esp,0xc
c0013641:	50                   	push   eax
c0013642:	e8 e9 03 00 00       	call   c0013a30 <Device::~Device()>
c0013647:	83 c4 10             	add    esp,0x10
c001364a:	90                   	nop
c001364b:	83 c4 0c             	add    esp,0xc
c001364e:	c3                   	ret    
c001364f:	90                   	nop

c0013650 <Clock::~Clock()>:
c0013650:	83 ec 0c             	sub    esp,0xc
c0013653:	83 ec 0c             	sub    esp,0xc
c0013656:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001365a:	e8 cd ff ff ff       	call   c001362c <Clock::~Clock()>
c001365f:	83 c4 10             	add    esp,0x10
c0013662:	83 ec 08             	sub    esp,0x8
c0013665:	68 58 01 00 00       	push   0x158
c001366a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001366e:	e8 1c f0 ff ff       	call   c001268f <operator delete(void*, unsigned long)>
c0013673:	83 c4 10             	add    esp,0x10
c0013676:	83 c4 0c             	add    esp,0xc
c0013679:	c3                   	ret    

c001367a <Clock::timeInSecondsLocal()>:
c001367a:	53                   	push   ebx
c001367b:	83 ec 14             	sub    esp,0x14
c001367e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013682:	8b 10                	mov    edx,DWORD PTR [eax]
c0013684:	50                   	push   eax
c0013685:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013688:	0f b6 0d d0 ca 02 c0 	movzx  ecx,BYTE PTR ds:0xc002cad0
c001368f:	03 0d d4 ca 02 c0    	add    ecx,DWORD PTR ds:0xc002cad4
c0013695:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001369b:	89 cb                	mov    ebx,ecx
c001369d:	c1 fb 1f             	sar    ebx,0x1f
c00136a0:	01 c8                	add    eax,ecx
c00136a2:	11 da                	adc    edx,ebx
c00136a4:	83 c4 10             	add    esp,0x10
c00136a7:	31 c9                	xor    ecx,ecx
c00136a9:	80 3d d1 ca 02 c0 00 	cmp    BYTE PTR ds:0xc002cad1,0x0
c00136b0:	74 05                	je     c00136b7 <Clock::timeInSecondsLocal()+0x3d>
c00136b2:	b9 08 07 00 00       	mov    ecx,0x708
c00136b7:	31 db                	xor    ebx,ebx
c00136b9:	01 c8                	add    eax,ecx
c00136bb:	11 da                	adc    edx,ebx
c00136bd:	83 c4 08             	add    esp,0x8
c00136c0:	5b                   	pop    ebx
c00136c1:	c3                   	ret    

c00136c2 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c00136c2:	57                   	push   edi
c00136c3:	56                   	push   esi
c00136c4:	53                   	push   ebx
c00136c5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00136c9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00136cd:	8b 01                	mov    eax,DWORD PTR [ecx]
c00136cf:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00136d3:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c00136d6:	0f b6 05 d0 ca 02 c0 	movzx  eax,BYTE PTR ds:0xc002cad0
c00136dd:	03 05 d4 ca 02 c0    	add    eax,DWORD PTR ds:0xc002cad4
c00136e3:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00136e9:	99                   	cdq    
c00136ea:	29 c6                	sub    esi,eax
c00136ec:	19 d7                	sbb    edi,edx
c00136ee:	89 f0                	mov    eax,esi
c00136f0:	89 fa                	mov    edx,edi
c00136f2:	31 f6                	xor    esi,esi
c00136f4:	80 3d d1 ca 02 c0 00 	cmp    BYTE PTR ds:0xc002cad1,0x0
c00136fb:	74 05                	je     c0013702 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c00136fd:	be 08 07 00 00       	mov    esi,0x708
c0013702:	31 ff                	xor    edi,edi
c0013704:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013708:	29 f0                	sub    eax,esi
c001370a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001370e:	19 fa                	sbb    edx,edi
c0013710:	89 d8                	mov    eax,ebx
c0013712:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013716:	5b                   	pop    ebx
c0013717:	5e                   	pop    esi
c0013718:	5f                   	pop    edi
c0013719:	ff e0                	jmp    eax

c001371b <datetimeToSeconds(datetime_t)>:
c001371b:	55                   	push   ebp
c001371c:	57                   	push   edi
c001371d:	56                   	push   esi
c001371e:	53                   	push   ebx
c001371f:	83 ec 14             	sub    esp,0x14
c0013722:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013726:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001372a:	89 d3                	mov    ebx,edx
c001372c:	0f b6 c6             	movzx  eax,dh
c001372f:	c1 eb 10             	shr    ebx,0x10
c0013732:	48                   	dec    eax
c0013733:	66 81 eb 6c 07       	sub    bx,0x76c
c0013738:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001373c:	0f b6 f5             	movzx  esi,ch
c001373f:	89 cf                	mov    edi,ecx
c0013741:	6b f6 3c             	imul   esi,esi,0x3c
c0013744:	c1 ef 10             	shr    edi,0x10
c0013747:	0f b6 c9             	movzx  ecx,cl
c001374a:	89 f8                	mov    eax,edi
c001374c:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013752:	0f b6 f8             	movzx  edi,al
c0013755:	0f b6 d2             	movzx  edx,dl
c0013758:	01 fe                	add    esi,edi
c001375a:	01 f1                	add    ecx,esi
c001375c:	0f b7 f3             	movzx  esi,bx
c001375f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013763:	c1 f9 1f             	sar    ecx,0x1f
c0013766:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c001376b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001376f:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013774:	8b 0c 8d 40 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6bc0]
c001377b:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c001377f:	76 29                	jbe    c00137aa <datetimeToSeconds(datetime_t)+0x8f>
c0013781:	f6 c3 03             	test   bl,0x3
c0013784:	75 24                	jne    c00137aa <datetimeToSeconds(datetime_t)+0x8f>
c0013786:	31 d2                	xor    edx,edx
c0013788:	bf 64 00 00 00       	mov    edi,0x64
c001378d:	89 d8                	mov    eax,ebx
c001378f:	66 f7 f7             	div    di
c0013792:	66 85 d2             	test   dx,dx
c0013795:	75 12                	jne    c00137a9 <datetimeToSeconds(datetime_t)+0x8e>
c0013797:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c001379d:	bf 90 01 00 00       	mov    edi,0x190
c00137a2:	99                   	cdq    
c00137a3:	f7 ff                	idiv   edi
c00137a5:	85 d2                	test   edx,edx
c00137a7:	75 01                	jne    c00137aa <datetimeToSeconds(datetime_t)+0x8f>
c00137a9:	41                   	inc    ecx
c00137aa:	66 83 fb 46          	cmp    bx,0x46
c00137ae:	76 45                	jbe    c00137f5 <datetimeToSeconds(datetime_t)+0xda>
c00137b0:	bb 46 00 00 00       	mov    ebx,0x46
c00137b5:	bf 64 00 00 00       	mov    edi,0x64
c00137ba:	bd 90 01 00 00       	mov    ebp,0x190
c00137bf:	b8 6d 01 00 00       	mov    eax,0x16d
c00137c4:	f6 c3 03             	test   bl,0x3
c00137c7:	75 23                	jne    c00137ec <datetimeToSeconds(datetime_t)+0xd1>
c00137c9:	89 d8                	mov    eax,ebx
c00137cb:	99                   	cdq    
c00137cc:	f7 ff                	idiv   edi
c00137ce:	b8 6e 01 00 00       	mov    eax,0x16e
c00137d3:	85 d2                	test   edx,edx
c00137d5:	75 15                	jne    c00137ec <datetimeToSeconds(datetime_t)+0xd1>
c00137d7:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c00137dd:	99                   	cdq    
c00137de:	f7 fd                	idiv   ebp
c00137e0:	83 fa 01             	cmp    edx,0x1
c00137e3:	19 c0                	sbb    eax,eax
c00137e5:	f7 d0                	not    eax
c00137e7:	05 6e 01 00 00       	add    eax,0x16e
c00137ec:	01 c1                	add    ecx,eax
c00137ee:	43                   	inc    ebx
c00137ef:	39 f3                	cmp    ebx,esi
c00137f1:	7c cc                	jl     c00137bf <datetimeToSeconds(datetime_t)+0xa4>
c00137f3:	eb 35                	jmp    c001382a <datetimeToSeconds(datetime_t)+0x10f>
c00137f5:	74 33                	je     c001382a <datetimeToSeconds(datetime_t)+0x10f>
c00137f7:	b8 45 00 00 00       	mov    eax,0x45
c00137fc:	89 c2                	mov    edx,eax
c00137fe:	83 e2 03             	and    edx,0x3
c0013801:	39 f0                	cmp    eax,esi
c0013803:	7e 0f                	jle    c0013814 <datetimeToSeconds(datetime_t)+0xf9>
c0013805:	83 fa 01             	cmp    edx,0x1
c0013808:	19 d2                	sbb    edx,edx
c001380a:	48                   	dec    eax
c001380b:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013812:	eb e8                	jmp    c00137fc <datetimeToSeconds(datetime_t)+0xe1>
c0013814:	b8 6d 01 00 00       	mov    eax,0x16d
c0013819:	85 d2                	test   edx,edx
c001381b:	75 0b                	jne    c0013828 <datetimeToSeconds(datetime_t)+0x10d>
c001381d:	66 83 fb 01          	cmp    bx,0x1
c0013821:	19 c0                	sbb    eax,eax
c0013823:	05 6e 01 00 00       	add    eax,0x16e
c0013828:	29 c1                	sub    ecx,eax
c001382a:	b8 80 51 01 00       	mov    eax,0x15180
c001382f:	f7 e9                	imul   ecx
c0013831:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013835:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013839:	83 c4 14             	add    esp,0x14
c001383c:	5b                   	pop    ebx
c001383d:	5e                   	pop    esi
c001383e:	5f                   	pop    edi
c001383f:	5d                   	pop    ebp
c0013840:	c3                   	ret    
c0013841:	90                   	nop

c0013842 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013842:	57                   	push   edi
c0013843:	56                   	push   esi
c0013844:	53                   	push   ebx
c0013845:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013849:	8b 06                	mov    eax,DWORD PTR [esi]
c001384b:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c001384e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013852:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013856:	e8 c0 fe ff ff       	call   c001371b <datetimeToSeconds(datetime_t)>
c001385b:	59                   	pop    ecx
c001385c:	0f b6 0d d0 ca 02 c0 	movzx  ecx,BYTE PTR ds:0xc002cad0
c0013863:	5b                   	pop    ebx
c0013864:	03 0d d4 ca 02 c0    	add    ecx,DWORD PTR ds:0xc002cad4
c001386a:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013870:	89 cb                	mov    ebx,ecx
c0013872:	c1 fb 1f             	sar    ebx,0x1f
c0013875:	29 c8                	sub    eax,ecx
c0013877:	19 da                	sbb    edx,ebx
c0013879:	31 c9                	xor    ecx,ecx
c001387b:	80 3d d1 ca 02 c0 00 	cmp    BYTE PTR ds:0xc002cad1,0x0
c0013882:	74 05                	je     c0013889 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013884:	b9 08 07 00 00       	mov    ecx,0x708
c0013889:	31 db                	xor    ebx,ebx
c001388b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001388f:	29 c8                	sub    eax,ecx
c0013891:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013895:	19 da                	sbb    edx,ebx
c0013897:	89 f8                	mov    eax,edi
c0013899:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001389d:	5b                   	pop    ebx
c001389e:	5e                   	pop    esi
c001389f:	5f                   	pop    edi
c00138a0:	ff e0                	jmp    eax

c00138a2 <secondsToDatetime(unsigned long long)>:
c00138a2:	55                   	push   ebp
c00138a3:	57                   	push   edi
c00138a4:	56                   	push   esi
c00138a5:	53                   	push   ebx
c00138a6:	83 ec 1c             	sub    esp,0x1c
c00138a9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00138ad:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00138b1:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00138b5:	6a 00                	push   0x0
c00138b7:	68 80 51 01 00       	push   0x15180
c00138bc:	55                   	push   ebp
c00138bd:	57                   	push   edi
c00138be:	e8 d9 1a 01 00       	call   c002539c <__udivdi3>
c00138c3:	83 c4 10             	add    esp,0x10
c00138c6:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c00138cc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00138d0:	6a 00                	push   0x0
c00138d2:	68 80 51 01 00       	push   0x15180
c00138d7:	55                   	push   ebp
c00138d8:	57                   	push   edi
c00138d9:	bf 10 0e 00 00       	mov    edi,0xe10
c00138de:	e8 b9 1b 01 00       	call   c002549c <__umoddi3>
c00138e3:	83 c4 10             	add    esp,0x10
c00138e6:	99                   	cdq    
c00138e7:	f7 ff                	idiv   edi
c00138e9:	bf 3c 00 00 00       	mov    edi,0x3c
c00138ee:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00138f1:	89 d0                	mov    eax,edx
c00138f3:	99                   	cdq    
c00138f4:	f7 ff                	idiv   edi
c00138f6:	85 db                	test   ebx,ebx
c00138f8:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c00138fb:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00138fe:	79 11                	jns    c0013911 <secondsToDatetime(unsigned long long)+0x6f>
c0013900:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013904:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c001390a:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001390f:	eb 07                	jmp    c0013918 <secondsToDatetime(unsigned long long)+0x76>
c0013911:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013916:	89 d8                	mov    eax,ebx
c0013918:	bf b4 05 00 00       	mov    edi,0x5b4
c001391d:	99                   	cdq    
c001391e:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013923:	f7 f9                	idiv   ecx
c0013925:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c001392a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001392e:	31 d2                	xor    edx,edx
c0013930:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013938:	01 c3                	add    ebx,eax
c001393a:	89 d8                	mov    eax,ebx
c001393c:	f7 f1                	div    ecx
c001393e:	31 d2                	xor    edx,edx
c0013940:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013943:	89 d8                	mov    eax,ebx
c0013945:	f7 f7                	div    edi
c0013947:	31 d2                	xor    edx,edx
c0013949:	29 c1                	sub    ecx,eax
c001394b:	89 d8                	mov    eax,ebx
c001394d:	f7 f5                	div    ebp
c001394f:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013954:	29 c1                	sub    ecx,eax
c0013956:	31 d2                	xor    edx,edx
c0013958:	89 c8                	mov    eax,ecx
c001395a:	f7 f5                	div    ebp
c001395c:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013961:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013965:	31 d2                	xor    edx,edx
c0013967:	89 c8                	mov    eax,ecx
c0013969:	f7 f5                	div    ebp
c001396b:	31 d2                	xor    edx,edx
c001396d:	01 c3                	add    ebx,eax
c001396f:	89 c8                	mov    eax,ecx
c0013971:	f7 f7                	div    edi
c0013973:	bf 99 00 00 00       	mov    edi,0x99
c0013978:	29 c3                	sub    ebx,eax
c001397a:	31 d2                	xor    edx,edx
c001397c:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013984:	29 c3                	sub    ebx,eax
c0013986:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013989:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c001398c:	bb 05 00 00 00       	mov    ebx,0x5
c0013991:	83 c1 02             	add    ecx,0x2
c0013994:	89 c8                	mov    eax,ecx
c0013996:	f7 f7                	div    edi
c0013998:	31 d2                	xor    edx,edx
c001399a:	89 c7                	mov    edi,eax
c001399c:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c00139a2:	83 c0 02             	add    eax,0x2
c00139a5:	f7 f3                	div    ebx
c00139a7:	89 eb                	mov    ebx,ebp
c00139a9:	29 c3                	sub    ebx,eax
c00139ab:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c00139b1:	88 1e                	mov    BYTE PTR [esi],bl
c00139b3:	19 c0                	sbb    eax,eax
c00139b5:	31 d2                	xor    edx,edx
c00139b7:	83 e0 0c             	and    eax,0xc
c00139ba:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c00139be:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c00139c6:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00139ca:	83 f9 01             	cmp    ecx,0x1
c00139cd:	0f 96 c2             	setbe  dl
c00139d0:	41                   	inc    ecx
c00139d1:	01 d0                	add    eax,edx
c00139d3:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00139d6:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c00139da:	83 c4 1c             	add    esp,0x1c
c00139dd:	89 f0                	mov    eax,esi
c00139df:	5b                   	pop    ebx
c00139e0:	5e                   	pop    esi
c00139e1:	5f                   	pop    edi
c00139e2:	5d                   	pop    ebp
c00139e3:	c2 04 00             	ret    0x4

c00139e6 <Clock::timeInDatetimeLocal()>:
c00139e6:	53                   	push   ebx
c00139e7:	83 ec 14             	sub    esp,0x14
c00139ea:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00139ee:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00139f2:	e8 83 fc ff ff       	call   c001367a <Clock::timeInSecondsLocal()>
c00139f7:	83 c4 0c             	add    esp,0xc
c00139fa:	52                   	push   edx
c00139fb:	50                   	push   eax
c00139fc:	53                   	push   ebx
c00139fd:	e8 a0 fe ff ff       	call   c00138a2 <secondsToDatetime(unsigned long long)>
c0013a02:	89 d8                	mov    eax,ebx
c0013a04:	83 c4 14             	add    esp,0x14
c0013a07:	5b                   	pop    ebx
c0013a08:	c2 04 00             	ret    0x4
c0013a0b:	90                   	nop

c0013a0c <Device::hibernate()>:
c0013a0c:	c3                   	ret    
c0013a0d:	90                   	nop

c0013a0e <Device::wake()>:
c0013a0e:	c3                   	ret    
c0013a0f:	90                   	nop

c0013a10 <Device::detect()>:
c0013a10:	c3                   	ret    
c0013a11:	90                   	nop

c0013a12 <Device::disableLegacy()>:
c0013a12:	c3                   	ret    
c0013a13:	90                   	nop

c0013a14 <Device::powerSaving(PowerSavingLevel)>:
c0013a14:	c3                   	ret    
c0013a15:	90                   	nop

c0013a16 <DriverlessDevice::close(int, int, void*)>:
c0013a16:	31 c0                	xor    eax,eax
c0013a18:	c3                   	ret    
c0013a19:	90                   	nop

c0013a1a <DriverlessDevice::detect()>:
c0013a1a:	c3                   	ret    
c0013a1b:	90                   	nop

c0013a1c <DriverlessDevice::open(int, int, void*)>:
c0013a1c:	83 ec 18             	sub    esp,0x18
c0013a1f:	68 70 94 02 c0       	push   0xc0029470
c0013a24:	e8 60 5e 00 00       	call   c0019889 <Krnl::panic(char const*)>
c0013a29:	83 c8 ff             	or     eax,0xffffffff
c0013a2c:	83 c4 1c             	add    esp,0x1c
c0013a2f:	c3                   	ret    

c0013a30 <Device::~Device()>:
c0013a30:	ba 98 94 02 c0       	mov    edx,0xc0029498
c0013a35:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013a39:	89 10                	mov    DWORD PTR [eax],edx
c0013a3b:	90                   	nop
c0013a3c:	c3                   	ret    
c0013a3d:	90                   	nop

c0013a3e <Device::~Device()>:
c0013a3e:	83 ec 0c             	sub    esp,0xc
c0013a41:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013a45:	e8 e6 ff ff ff       	call   c0013a30 <Device::~Device()>
c0013a4a:	83 c4 04             	add    esp,0x4
c0013a4d:	83 ec 08             	sub    esp,0x8
c0013a50:	68 58 01 00 00       	push   0x158
c0013a55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a59:	e8 31 ec ff ff       	call   c001268f <operator delete(void*, unsigned long)>
c0013a5e:	83 c4 10             	add    esp,0x10
c0013a61:	83 c4 0c             	add    esp,0xc
c0013a64:	c3                   	ret    
c0013a65:	90                   	nop

c0013a66 <Device::findAndLoadDriver()>:
c0013a66:	c3                   	ret    
c0013a67:	90                   	nop

c0013a68 <Device::preOpenPCI(PCIDeviceInfo)>:
c0013a68:	57                   	push   edi
c0013a69:	b9 09 00 00 00       	mov    ecx,0x9
c0013a6e:	56                   	push   esi
c0013a6f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013a73:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013a77:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013a81:	81 c7 18 01 00 00    	add    edi,0x118
c0013a87:	fc                   	cld    
c0013a88:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013a8a:	5e                   	pop    esi
c0013a8b:	5f                   	pop    edi
c0013a8c:	c3                   	ret    
c0013a8d:	90                   	nop

c0013a8e <Device::preOpenACPI(void*, char*, char*)>:
c0013a8e:	56                   	push   esi
c0013a8f:	53                   	push   ebx
c0013a90:	83 ec 08             	sub    esp,0x8
c0013a93:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013a97:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013a9b:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0013aa5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013aa9:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0013aaf:	6a 1e                	push   0x1e
c0013ab1:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0013ab7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013abb:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0013ac1:	50                   	push   eax
c0013ac2:	e8 8e cb fe ff       	call   c0000655 <memcpy>
c0013ac7:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0013acb:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0013acf:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0013ad7:	83 c4 14             	add    esp,0x14
c0013ada:	5b                   	pop    ebx
c0013adb:	5e                   	pop    esi
c0013adc:	e9 74 cb fe ff       	jmp    c0000655 <memcpy>
c0013ae1:	90                   	nop

c0013ae2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013ae2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013ae6:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013aeb:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013af2:	75 0b                	jne    c0013aff <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013af4:	8b 00                	mov    eax,DWORD PTR [eax]
c0013af6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013afa:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013afd:	eb 1e                	jmp    c0013b1d <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013aff:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c0013b04:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013b0a:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013b10:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013b12:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013b16:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013b1a:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013b1d:	ff e0                	jmp    eax
c0013b1f:	90                   	nop

c0013b20 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013b20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013b24:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013b29:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013b30:	75 0b                	jne    c0013b3d <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013b32:	8b 00                	mov    eax,DWORD PTR [eax]
c0013b34:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013b38:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013b3b:	eb 1e                	jmp    c0013b5b <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013b3d:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c0013b42:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013b48:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013b4e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013b50:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013b54:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013b58:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013b5b:	ff e0                	jmp    eax
c0013b5d:	90                   	nop

c0013b5e <Device::addChild(Device*)>:
c0013b5e:	53                   	push   ebx
c0013b5f:	83 ec 08             	sub    esp,0x8
c0013b62:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b66:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013b6a:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013b70:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013b76:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013b78:	85 d2                	test   edx,edx
c0013b7a:	74 04                	je     c0013b80 <Device::addChild(Device*)+0x22>
c0013b7c:	89 d3                	mov    ebx,edx
c0013b7e:	eb f6                	jmp    c0013b76 <Device::addChild(Device*)+0x18>
c0013b80:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013b83:	83 ec 0c             	sub    esp,0xc
c0013b86:	6a 08                	push   0x8
c0013b88:	e8 47 b9 ff ff       	call   c000f4d4 <malloc>
c0013b8d:	89 03                	mov    DWORD PTR [ebx],eax
c0013b8f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013b95:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013b9c:	83 c4 18             	add    esp,0x18
c0013b9f:	5b                   	pop    ebx
c0013ba0:	c3                   	ret    
c0013ba1:	90                   	nop

c0013ba2 <Device::removeAllChildren()>:
c0013ba2:	56                   	push   esi
c0013ba3:	53                   	push   ebx
c0013ba4:	52                   	push   edx
c0013ba5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013ba9:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013baf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013bb2:	74 17                	je     c0013bcb <Device::removeAllChildren()+0x29>
c0013bb4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013bb7:	85 c0                	test   eax,eax
c0013bb9:	74 0c                	je     c0013bc7 <Device::removeAllChildren()+0x25>
c0013bbb:	83 ec 0c             	sub    esp,0xc
c0013bbe:	8b 10                	mov    edx,DWORD PTR [eax]
c0013bc0:	50                   	push   eax
c0013bc1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013bc4:	83 c4 10             	add    esp,0x10
c0013bc7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013bc9:	eb e4                	jmp    c0013baf <Device::removeAllChildren()+0xd>
c0013bcb:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013bd1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013bd7:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013bdd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013be4:	58                   	pop    eax
c0013be5:	5b                   	pop    ebx
c0013be6:	5e                   	pop    esi
c0013be7:	c3                   	ret    

c0013be8 <Device::hibernateAll()>:
c0013be8:	53                   	push   ebx
c0013be9:	83 ec 14             	sub    esp,0x14
c0013bec:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013bf0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013bf2:	53                   	push   ebx
c0013bf3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013bf6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013bfc:	83 c4 10             	add    esp,0x10
c0013bff:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c02:	74 0f                	je     c0013c13 <Device::hibernateAll()+0x2b>
c0013c04:	83 ec 0c             	sub    esp,0xc
c0013c07:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c0a:	e8 d9 ff ff ff       	call   c0013be8 <Device::hibernateAll()>
c0013c0f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c11:	eb e9                	jmp    c0013bfc <Device::hibernateAll()+0x14>
c0013c13:	83 c4 08             	add    esp,0x8
c0013c16:	5b                   	pop    ebx
c0013c17:	c3                   	ret    

c0013c18 <Device::wakeAll()>:
c0013c18:	53                   	push   ebx
c0013c19:	83 ec 14             	sub    esp,0x14
c0013c1c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013c20:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c22:	53                   	push   ebx
c0013c23:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013c26:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c2c:	83 c4 10             	add    esp,0x10
c0013c2f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c32:	74 0f                	je     c0013c43 <Device::wakeAll()+0x2b>
c0013c34:	83 ec 0c             	sub    esp,0xc
c0013c37:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c3a:	e8 d9 ff ff ff       	call   c0013c18 <Device::wakeAll()>
c0013c3f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c41:	eb e9                	jmp    c0013c2c <Device::wakeAll()+0x14>
c0013c43:	83 c4 08             	add    esp,0x8
c0013c46:	5b                   	pop    ebx
c0013c47:	c3                   	ret    

c0013c48 <Device::detectAll()>:
c0013c48:	53                   	push   ebx
c0013c49:	83 ec 14             	sub    esp,0x14
c0013c4c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013c50:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c52:	53                   	push   ebx
c0013c53:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013c56:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c5c:	83 c4 10             	add    esp,0x10
c0013c5f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c62:	74 0f                	je     c0013c73 <Device::detectAll()+0x2b>
c0013c64:	83 ec 0c             	sub    esp,0xc
c0013c67:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c6a:	e8 d9 ff ff ff       	call   c0013c48 <Device::detectAll()>
c0013c6f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c71:	eb e9                	jmp    c0013c5c <Device::detectAll()+0x14>
c0013c73:	83 c4 08             	add    esp,0x8
c0013c76:	5b                   	pop    ebx
c0013c77:	c3                   	ret    

c0013c78 <Device::disableLegacyAll()>:
c0013c78:	53                   	push   ebx
c0013c79:	83 ec 14             	sub    esp,0x14
c0013c7c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013c80:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c82:	53                   	push   ebx
c0013c83:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013c86:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c8c:	83 c4 10             	add    esp,0x10
c0013c8f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c92:	74 0f                	je     c0013ca3 <Device::disableLegacyAll()+0x2b>
c0013c94:	83 ec 0c             	sub    esp,0xc
c0013c97:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c9a:	e8 d9 ff ff ff       	call   c0013c78 <Device::disableLegacyAll()>
c0013c9f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ca1:	eb e9                	jmp    c0013c8c <Device::disableLegacyAll()+0x14>
c0013ca3:	83 c4 08             	add    esp,0x8
c0013ca6:	5b                   	pop    ebx
c0013ca7:	c3                   	ret    

c0013ca8 <Device::loadDriversForAll()>:
c0013ca8:	53                   	push   ebx
c0013ca9:	83 ec 08             	sub    esp,0x8
c0013cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cb0:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013cb6:	8b 18                	mov    ebx,DWORD PTR [eax]
c0013cb8:	85 db                	test   ebx,ebx
c0013cba:	74 12                	je     c0013cce <Device::loadDriversForAll()+0x26>
c0013cbc:	83 ec 0c             	sub    esp,0xc
c0013cbf:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0013cc2:	e8 e1 ff ff ff       	call   c0013ca8 <Device::loadDriversForAll()>
c0013cc7:	83 c4 10             	add    esp,0x10
c0013cca:	89 d8                	mov    eax,ebx
c0013ccc:	eb e8                	jmp    c0013cb6 <Device::loadDriversForAll()+0xe>
c0013cce:	83 c4 08             	add    esp,0x8
c0013cd1:	5b                   	pop    ebx
c0013cd2:	c3                   	ret    
c0013cd3:	90                   	nop

c0013cd4 <Device::closeAll()>:
c0013cd4:	53                   	push   ebx
c0013cd5:	83 ec 08             	sub    esp,0x8
c0013cd8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013cdc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013cde:	6a 00                	push   0x0
c0013ce0:	6a 00                	push   0x0
c0013ce2:	6a 00                	push   0x0
c0013ce4:	53                   	push   ebx
c0013ce5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013ce8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013cee:	83 c4 10             	add    esp,0x10
c0013cf1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013cf4:	74 0f                	je     c0013d05 <Device::closeAll()+0x31>
c0013cf6:	83 ec 0c             	sub    esp,0xc
c0013cf9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013cfc:	e8 d3 ff ff ff       	call   c0013cd4 <Device::closeAll()>
c0013d01:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d03:	eb e9                	jmp    c0013cee <Device::closeAll()+0x1a>
c0013d05:	83 c4 08             	add    esp,0x8
c0013d08:	5b                   	pop    ebx
c0013d09:	c3                   	ret    

c0013d0a <Device::powerSavingAll(PowerSavingLevel)>:
c0013d0a:	56                   	push   esi
c0013d0b:	53                   	push   ebx
c0013d0c:	83 ec 0c             	sub    esp,0xc
c0013d0f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013d13:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013d17:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d19:	56                   	push   esi
c0013d1a:	53                   	push   ebx
c0013d1b:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013d1e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013d24:	83 c4 10             	add    esp,0x10
c0013d27:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d2a:	74 0f                	je     c0013d3b <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013d2c:	52                   	push   edx
c0013d2d:	52                   	push   edx
c0013d2e:	56                   	push   esi
c0013d2f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013d32:	e8 d3 ff ff ff       	call   c0013d0a <Device::powerSavingAll(PowerSavingLevel)>
c0013d37:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d39:	eb e9                	jmp    c0013d24 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013d3b:	58                   	pop    eax
c0013d3c:	5b                   	pop    ebx
c0013d3d:	5e                   	pop    esi
c0013d3e:	c3                   	ret    
c0013d3f:	90                   	nop

c0013d40 <Device::setName(char const*)>:
c0013d40:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013d48:	e9 dd c9 fe ff       	jmp    c000072a <strcpy>
c0013d4d:	90                   	nop

c0013d4e <Device::Device(char const*)>:
c0013d4e:	83 ec 1c             	sub    esp,0x1c
c0013d51:	ba 98 94 02 c0       	mov    edx,0xc0029498
c0013d56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d5a:	89 10                	mov    DWORD PTR [eax],edx
c0013d5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d60:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013d6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d6e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013d78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d7c:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013d86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d8a:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013d94:	83 ec 08             	sub    esp,0x8
c0013d97:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013d9b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013d9f:	e8 9c ff ff ff       	call   c0013d40 <Device::setName(char const*)>
c0013da4:	83 c4 10             	add    esp,0x10
c0013da7:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013daf:	83 ec 0c             	sub    esp,0xc
c0013db2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013db6:	e8 19 b7 ff ff       	call   c000f4d4 <malloc>
c0013dbb:	83 c4 10             	add    esp,0x10
c0013dbe:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013dc4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013dcb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013dcf:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013dd5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013dd9:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013ddf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013de5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013de9:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013def:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013df6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013dfa:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013e01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e05:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013e0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e10:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013e1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e1e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013e28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e2c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013e36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e3a:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013e44:	90                   	nop
c0013e45:	83 c4 1c             	add    esp,0x1c
c0013e48:	c3                   	ret    
c0013e49:	90                   	nop

c0013e4a <Device::getName()>:
c0013e4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013e4e:	05 d0 00 00 00       	add    eax,0xd0
c0013e53:	c3                   	ret    

c0013e54 <DriverlessDevice::DriverlessDevice(char const*)>:
c0013e54:	83 ec 0c             	sub    esp,0xc
c0013e57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e5b:	83 ec 08             	sub    esp,0x8
c0013e5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e62:	50                   	push   eax
c0013e63:	e8 e6 fe ff ff       	call   c0013d4e <Device::Device(char const*)>
c0013e68:	83 c4 10             	add    esp,0x10
c0013e6b:	ba c4 94 02 c0       	mov    edx,0xc00294c4
c0013e70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e74:	89 10                	mov    DWORD PTR [eax],edx
c0013e76:	90                   	nop
c0013e77:	83 c4 0c             	add    esp,0xc
c0013e7a:	c3                   	ret    
c0013e7b:	90                   	nop

c0013e7c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013e7c:	57                   	push   edi
c0013e7d:	56                   	push   esi
c0013e7e:	53                   	push   ebx
c0013e7f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013e83:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013e87:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013e8b:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0013e91:	75 0c                	jne    c0013e9f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0013e93:	52                   	push   edx
c0013e94:	52                   	push   edx
c0013e95:	53                   	push   ebx
c0013e96:	56                   	push   esi
c0013e97:	e8 3e 34 01 00       	call   c00272da <LinkedList<Device>::addElement(Device*)>
c0013e9c:	83 c4 10             	add    esp,0x10
c0013e9f:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ea5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ea8:	74 12                	je     c0013ebc <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0013eaa:	50                   	push   eax
c0013eab:	57                   	push   edi
c0013eac:	56                   	push   esi
c0013ead:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013eb0:	e8 c7 ff ff ff       	call   c0013e7c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013eb5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013eb7:	83 c4 10             	add    esp,0x10
c0013eba:	eb e9                	jmp    c0013ea5 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0013ebc:	5b                   	pop    ebx
c0013ebd:	5e                   	pop    esi
c0013ebe:	5f                   	pop    edi
c0013ebf:	c3                   	ret    

c0013ec0 <getDevicesOfType(DeviceType)>:
c0013ec0:	53                   	push   ebx
c0013ec1:	83 ec 14             	sub    esp,0x14
c0013ec4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013ec8:	53                   	push   ebx
c0013ec9:	e8 e8 34 01 00       	call   c00273b6 <LinkedList<Device>::LinkedList()>
c0013ece:	83 c4 0c             	add    esp,0xc
c0013ed1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ed5:	53                   	push   ebx
c0013ed6:	ff 35 48 c9 02 c0    	push   DWORD PTR ds:0xc002c948
c0013edc:	e8 9b ff ff ff       	call   c0013e7c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013ee1:	89 d8                	mov    eax,ebx
c0013ee3:	83 c4 18             	add    esp,0x18
c0013ee6:	5b                   	pop    ebx
c0013ee7:	c2 04 00             	ret    0x4

c0013eea <HardDiskController::HardDiskController(char const*)>:
c0013eea:	83 ec 0c             	sub    esp,0xc
c0013eed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ef1:	83 ec 08             	sub    esp,0x8
c0013ef4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ef8:	50                   	push   eax
c0013ef9:	e8 50 fe ff ff       	call   c0013d4e <Device::Device(char const*)>
c0013efe:	83 c4 10             	add    esp,0x10
c0013f01:	ba f0 94 02 c0       	mov    edx,0xc00294f0
c0013f06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f0a:	89 10                	mov    DWORD PTR [eax],edx
c0013f0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f10:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0013f1a:	90                   	nop
c0013f1b:	83 c4 0c             	add    esp,0xc
c0013f1e:	c3                   	ret    
c0013f1f:	90                   	nop

c0013f20 <HardDiskController::~HardDiskController()>:
c0013f20:	83 ec 0c             	sub    esp,0xc
c0013f23:	ba f0 94 02 c0       	mov    edx,0xc00294f0
c0013f28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f2c:	89 10                	mov    DWORD PTR [eax],edx
c0013f2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f32:	83 ec 0c             	sub    esp,0xc
c0013f35:	50                   	push   eax
c0013f36:	e8 f5 fa ff ff       	call   c0013a30 <Device::~Device()>
c0013f3b:	83 c4 10             	add    esp,0x10
c0013f3e:	90                   	nop
c0013f3f:	83 c4 0c             	add    esp,0xc
c0013f42:	c3                   	ret    
c0013f43:	90                   	nop

c0013f44 <HardDiskController::~HardDiskController()>:
c0013f44:	83 ec 0c             	sub    esp,0xc
c0013f47:	83 ec 0c             	sub    esp,0xc
c0013f4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f4e:	e8 cd ff ff ff       	call   c0013f20 <HardDiskController::~HardDiskController()>
c0013f53:	83 c4 10             	add    esp,0x10
c0013f56:	83 ec 08             	sub    esp,0x8
c0013f59:	68 58 01 00 00       	push   0x158
c0013f5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f62:	e8 28 e7 ff ff       	call   c001268f <operator delete(void*, unsigned long)>
c0013f67:	83 c4 10             	add    esp,0x10
c0013f6a:	83 c4 0c             	add    esp,0xc
c0013f6d:	c3                   	ret    

c0013f6e <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0013f6e:	83 ec 0c             	sub    esp,0xc
c0013f71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f75:	83 ec 08             	sub    esp,0x8
c0013f78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f7c:	50                   	push   eax
c0013f7d:	e8 cc fd ff ff       	call   c0013d4e <Device::Device(char const*)>
c0013f82:	83 c4 10             	add    esp,0x10
c0013f85:	ba 1c 95 02 c0       	mov    edx,0xc002951c
c0013f8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f8e:	89 10                	mov    DWORD PTR [eax],edx
c0013f90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f94:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0013f9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f9f:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0013fa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013faa:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0013fb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fb8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013fbc:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0013fc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fc6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013fd0:	90                   	nop
c0013fd1:	83 c4 0c             	add    esp,0xc
c0013fd4:	c3                   	ret    
c0013fd5:	90                   	nop

c0013fd6 <PhysicalDisk::startCache()>:
c0013fd6:	56                   	push   esi
c0013fd7:	53                   	push   ebx
c0013fd8:	83 ec 10             	sub    esp,0x10
c0013fdb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013fdf:	6a 30                	push   0x30
c0013fe1:	e8 ee b4 ff ff       	call   c000f4d4 <malloc>
c0013fe6:	89 c6                	mov    esi,eax
c0013fe8:	58                   	pop    eax
c0013fe9:	5a                   	pop    edx
c0013fea:	53                   	push   ebx
c0013feb:	56                   	push   esi
c0013fec:	e8 dd 25 00 00       	call   c00165ce <VCache::VCache(PhysicalDisk*)>
c0013ff1:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0013ff7:	83 c4 14             	add    esp,0x14
c0013ffa:	5b                   	pop    ebx
c0013ffb:	5e                   	pop    esi
c0013ffc:	c3                   	ret    
c0013ffd:	90                   	nop

c0013ffe <PhysicalDisk::~PhysicalDisk()>:
c0013ffe:	83 ec 0c             	sub    esp,0xc
c0014001:	ba 1c 95 02 c0       	mov    edx,0xc002951c
c0014006:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001400a:	89 10                	mov    DWORD PTR [eax],edx
c001400c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014010:	83 ec 0c             	sub    esp,0xc
c0014013:	50                   	push   eax
c0014014:	e8 17 fa ff ff       	call   c0013a30 <Device::~Device()>
c0014019:	83 c4 10             	add    esp,0x10
c001401c:	90                   	nop
c001401d:	83 c4 0c             	add    esp,0xc
c0014020:	c3                   	ret    
c0014021:	90                   	nop

c0014022 <PhysicalDisk::~PhysicalDisk()>:
c0014022:	83 ec 0c             	sub    esp,0xc
c0014025:	83 ec 0c             	sub    esp,0xc
c0014028:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001402c:	e8 cd ff ff ff       	call   c0013ffe <PhysicalDisk::~PhysicalDisk()>
c0014031:	83 c4 10             	add    esp,0x10
c0014034:	83 ec 08             	sub    esp,0x8
c0014037:	68 6c 01 00 00       	push   0x16c
c001403c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014040:	e8 4a e6 ff ff       	call   c001268f <operator delete(void*, unsigned long)>
c0014045:	83 c4 10             	add    esp,0x10
c0014048:	83 c4 0c             	add    esp,0xc
c001404b:	c3                   	ret    

c001404c <FPU::FPU(char const*)>:
c001404c:	83 ec 0c             	sub    esp,0xc
c001404f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014053:	83 ec 08             	sub    esp,0x8
c0014056:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001405a:	50                   	push   eax
c001405b:	e8 ee fc ff ff       	call   c0013d4e <Device::Device(char const*)>
c0014060:	83 c4 10             	add    esp,0x10
c0014063:	ba 5c 95 02 c0       	mov    edx,0xc002955c
c0014068:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001406c:	89 10                	mov    DWORD PTR [eax],edx
c001406e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014072:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c001407c:	90                   	nop
c001407d:	83 c4 0c             	add    esp,0xc
c0014080:	c3                   	ret    
c0014081:	90                   	nop

c0014082 <FPU::~FPU()>:
c0014082:	83 ec 0c             	sub    esp,0xc
c0014085:	ba 5c 95 02 c0       	mov    edx,0xc002955c
c001408a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001408e:	89 10                	mov    DWORD PTR [eax],edx
c0014090:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014094:	83 ec 0c             	sub    esp,0xc
c0014097:	50                   	push   eax
c0014098:	e8 93 f9 ff ff       	call   c0013a30 <Device::~Device()>
c001409d:	83 c4 10             	add    esp,0x10
c00140a0:	90                   	nop
c00140a1:	83 c4 0c             	add    esp,0xc
c00140a4:	c3                   	ret    
c00140a5:	90                   	nop

c00140a6 <FPU::~FPU()>:
c00140a6:	83 ec 0c             	sub    esp,0xc
c00140a9:	83 ec 0c             	sub    esp,0xc
c00140ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140b0:	e8 cd ff ff ff       	call   c0014082 <FPU::~FPU()>
c00140b5:	83 c4 10             	add    esp,0x10
c00140b8:	83 ec 08             	sub    esp,0x8
c00140bb:	68 58 01 00 00       	push   0x158
c00140c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140c4:	e8 c6 e5 ff ff       	call   c001268f <operator delete(void*, unsigned long)>
c00140c9:	83 c4 10             	add    esp,0x10
c00140cc:	83 c4 0c             	add    esp,0xc
c00140cf:	c3                   	ret    

c00140d0 <setupFPU()>:
c00140d0:	53                   	push   ebx
c00140d1:	83 ec 08             	sub    esp,0x8
c00140d4:	8b 15 48 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c948
c00140da:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c00140e1:	74 19                	je     c00140fc <setupFPU()+0x2c>
c00140e3:	83 ec 0c             	sub    esp,0xc
c00140e6:	68 58 01 00 00       	push   0x158
c00140eb:	e8 e4 b3 ff ff       	call   c000f4d4 <malloc>
c00140f0:	89 c3                	mov    ebx,eax
c00140f2:	89 04 24             	mov    DWORD PTR [esp],eax
c00140f5:	e8 30 fe 00 00       	call   c0023f2a <AVX::AVX()>
c00140fa:	eb 5b                	jmp    c0014157 <setupFPU()+0x87>
c00140fc:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0014102:	84 c0                	test   al,al
c0014104:	79 19                	jns    c001411f <setupFPU()+0x4f>
c0014106:	83 ec 0c             	sub    esp,0xc
c0014109:	68 58 01 00 00       	push   0x158
c001410e:	e8 c1 b3 ff ff       	call   c000f4d4 <malloc>
c0014113:	89 c3                	mov    ebx,eax
c0014115:	89 04 24             	mov    DWORD PTR [esp],eax
c0014118:	e8 33 ff 00 00       	call   c0024050 <SSE::SSE()>
c001411d:	eb 38                	jmp    c0014157 <setupFPU()+0x87>
c001411f:	a8 20                	test   al,0x20
c0014121:	74 19                	je     c001413c <setupFPU()+0x6c>
c0014123:	83 ec 0c             	sub    esp,0xc
c0014126:	68 58 01 00 00       	push   0x158
c001412b:	e8 a4 b3 ff ff       	call   c000f4d4 <malloc>
c0014130:	89 c3                	mov    ebx,eax
c0014132:	89 04 24             	mov    DWORD PTR [esp],eax
c0014135:	e8 80 fe 00 00       	call   c0023fba <MMX::MMX()>
c001413a:	eb 1b                	jmp    c0014157 <setupFPU()+0x87>
c001413c:	a8 10                	test   al,0x10
c001413e:	74 1c                	je     c001415c <setupFPU()+0x8c>
c0014140:	83 ec 0c             	sub    esp,0xc
c0014143:	68 58 01 00 00       	push   0x158
c0014148:	e8 87 b3 ff ff       	call   c000f4d4 <malloc>
c001414d:	89 c3                	mov    ebx,eax
c001414f:	89 04 24             	mov    DWORD PTR [esp],eax
c0014152:	e8 87 ff 00 00       	call   c00240de <x87::x87()>
c0014157:	83 c4 10             	add    esp,0x10
c001415a:	eb 24                	jmp    c0014180 <setupFPU()+0xb0>
c001415c:	83 e0 ef             	and    eax,0xffffffef
c001415f:	83 ec 0c             	sub    esp,0xc
c0014162:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014168:	68 48 95 02 c0       	push   0xc0029548
c001416d:	e8 fd e5 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c0014172:	0f 20 c0             	mov    eax,cr0
c0014175:	83 c8 04             	or     eax,0x4
c0014178:	0f 22 c0             	mov    cr0,eax
c001417b:	31 db                	xor    ebx,ebx
c001417d:	83 c4 10             	add    esp,0x10
c0014180:	89 d8                	mov    eax,ebx
c0014182:	83 c4 08             	add    esp,0x8
c0014185:	5b                   	pop    ebx
c0014186:	c3                   	ret    
c0014187:	90                   	nop

c0014188 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0014188:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001418c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014190:	c1 e0 04             	shl    eax,0x4
c0014193:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014197:	8d 50 10             	lea    edx,[eax+0x10]
c001419a:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c00141a0:	74 08                	je     c00141aa <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c00141a2:	83 c0 04             	add    eax,0x4
c00141a5:	39 d0                	cmp    eax,edx
c00141a7:	75 f1                	jne    c001419a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c00141a9:	c3                   	ret    
c00141aa:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00141b4:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00141be:	eb e2                	jmp    c00141a2 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c00141c0 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c00141c0:	57                   	push   edi
c00141c1:	31 c0                	xor    eax,eax
c00141c3:	56                   	push   esi
c00141c4:	53                   	push   ebx
c00141c5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00141c9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00141cd:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00141d1:	89 da                	mov    edx,ebx
c00141d3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00141d7:	c1 e2 04             	shl    edx,0x4
c00141da:	01 ca                	add    edx,ecx
c00141dc:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00141e4:	74 16                	je     c00141fc <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c00141e6:	40                   	inc    eax
c00141e7:	83 f8 04             	cmp    eax,0x4
c00141ea:	75 f0                	jne    c00141dc <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c00141ec:	c7 44 24 10 8c 95 02 c0 	mov    DWORD PTR [esp+0x10],0xc002958c
c00141f4:	5b                   	pop    ebx
c00141f5:	5e                   	pop    esi
c00141f6:	5f                   	pop    edi
c00141f7:	e9 8d 56 00 00       	jmp    c0019889 <Krnl::panic(char const*)>
c00141fc:	8d 04 98             	lea    eax,[eax+ebx*4]
c00141ff:	8d 04 81             	lea    eax,[ecx+eax*4]
c0014202:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014208:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c001420e:	5b                   	pop    ebx
c001420f:	5e                   	pop    esi
c0014210:	5f                   	pop    edi
c0014211:	c3                   	ret    

c0014212 <doubleFault(regs*, void*)>:
c0014212:	55                   	push   ebp
c0014213:	89 e5                	mov    ebp,esp
c0014215:	83 ec 08             	sub    esp,0x8
c0014218:	83 ec 0c             	sub    esp,0xc
c001421b:	68 c7 95 02 c0       	push   0xc00295c7
c0014220:	e8 64 56 00 00       	call   c0019889 <Krnl::panic(char const*)>
c0014225:	83 c4 10             	add    esp,0x10
c0014228:	90                   	nop
c0014229:	c9                   	leave  
c001422a:	c3                   	ret    
c001422b:	90                   	nop

c001422c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001422c:	56                   	push   esi
c001422d:	53                   	push   ebx
c001422e:	50                   	push   eax
c001422f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014233:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014237:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001423c:	75 35                	jne    c0014273 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c001423e:	8d 43 20             	lea    eax,[ebx+0x20]
c0014241:	31 d2                	xor    edx,edx
c0014243:	89 c1                	mov    ecx,eax
c0014245:	c1 e1 04             	shl    ecx,0x4
c0014248:	01 f1                	add    ecx,esi
c001424a:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014252:	74 3e                	je     c0014292 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014254:	42                   	inc    edx
c0014255:	83 fa 04             	cmp    edx,0x4
c0014258:	75 f0                	jne    c001424a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c001425a:	83 ec 0c             	sub    esp,0xc
c001425d:	68 0c 96 02 c0       	push   0xc002960c
c0014262:	e8 22 56 00 00       	call   c0019889 <Krnl::panic(char const*)>
c0014267:	83 c4 10             	add    esp,0x10
c001426a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001426f:	5a                   	pop    edx
c0014270:	5b                   	pop    ebx
c0014271:	5e                   	pop    esi
c0014272:	c3                   	ret    
c0014273:	83 ec 0c             	sub    esp,0xc
c0014276:	56                   	push   esi
c0014277:	e8 ce fb ff ff       	call   c0013e4a <Device::getName()>
c001427c:	83 c4 10             	add    esp,0x10
c001427f:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014282:	75 ba                	jne    c001423e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014284:	83 fb 0f             	cmp    ebx,0xf
c0014287:	7f 29                	jg     c00142b2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014289:	0f b6 9b a0 bb 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd4460]
c0014290:	eb ac                	jmp    c001423e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014292:	8d 04 82             	lea    eax,[edx+eax*4]
c0014295:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014299:	8d 04 86             	lea    eax,[esi+eax*4]
c001429c:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00142a2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00142a6:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c00142ac:	89 d8                	mov    eax,ebx
c00142ae:	5a                   	pop    edx
c00142af:	5b                   	pop    ebx
c00142b0:	5e                   	pop    esi
c00142b1:	c3                   	ret    
c00142b2:	83 ec 0c             	sub    esp,0xc
c00142b5:	68 d4 95 02 c0       	push   0xc00295d4
c00142ba:	e8 ca 55 00 00       	call   c0019889 <Krnl::panic(char const*)>
c00142bf:	83 c4 10             	add    esp,0x10
c00142c2:	e9 77 ff ff ff       	jmp    c001423e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00142c7:	90                   	nop

c00142c8 <InterruptController::clearAllHandlers(int, bool)>:
c00142c8:	56                   	push   esi
c00142c9:	53                   	push   ebx
c00142ca:	52                   	push   edx
c00142cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00142cf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00142d3:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00142d8:	75 61                	jne    c001433b <InterruptController::clearAllHandlers(int, bool)+0x73>
c00142da:	8d 46 20             	lea    eax,[esi+0x20]
c00142dd:	c1 e6 04             	shl    esi,0x4
c00142e0:	c1 e0 04             	shl    eax,0x4
c00142e3:	01 de                	add    esi,ebx
c00142e5:	01 d8                	add    eax,ebx
c00142e7:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c00142f1:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c00142fb:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014305:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c001430f:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014319:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014323:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c001432d:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014337:	58                   	pop    eax
c0014338:	5b                   	pop    ebx
c0014339:	5e                   	pop    esi
c001433a:	c3                   	ret    
c001433b:	83 ec 0c             	sub    esp,0xc
c001433e:	53                   	push   ebx
c001433f:	e8 06 fb ff ff       	call   c0013e4a <Device::getName()>
c0014344:	83 c4 10             	add    esp,0x10
c0014347:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001434a:	75 8e                	jne    c00142da <InterruptController::clearAllHandlers(int, bool)+0x12>
c001434c:	83 fe 0f             	cmp    esi,0xf
c001434f:	7f 09                	jg     c001435a <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014351:	0f b6 b6 a0 bb 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd4460]
c0014358:	eb 80                	jmp    c00142da <InterruptController::clearAllHandlers(int, bool)+0x12>
c001435a:	83 ec 0c             	sub    esp,0xc
c001435d:	68 48 96 02 c0       	push   0xc0029648
c0014362:	e8 22 55 00 00       	call   c0019889 <Krnl::panic(char const*)>
c0014367:	83 c4 10             	add    esp,0x10
c001436a:	e9 6b ff ff ff       	jmp    c00142da <InterruptController::clearAllHandlers(int, bool)+0x12>
c001436f:	90                   	nop

c0014370 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014370:	56                   	push   esi
c0014371:	53                   	push   ebx
c0014372:	52                   	push   edx
c0014373:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014377:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001437b:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014380:	75 3a                	jne    c00143bc <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014382:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014386:	8d 50 20             	lea    edx,[eax+0x20]
c0014389:	c1 e2 04             	shl    edx,0x4
c001438c:	8d 04 16             	lea    eax,[esi+edx*1]
c001438f:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014393:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014399:	74 0b                	je     c00143a6 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c001439b:	83 c0 04             	add    eax,0x4
c001439e:	39 d0                	cmp    eax,edx
c00143a0:	75 f1                	jne    c0014393 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c00143a2:	58                   	pop    eax
c00143a3:	5b                   	pop    ebx
c00143a4:	5e                   	pop    esi
c00143a5:	c3                   	ret    
c00143a6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00143b0:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00143ba:	eb df                	jmp    c001439b <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c00143bc:	83 ec 0c             	sub    esp,0xc
c00143bf:	56                   	push   esi
c00143c0:	e8 85 fa ff ff       	call   c0013e4a <Device::getName()>
c00143c5:	83 c4 10             	add    esp,0x10
c00143c8:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00143cb:	75 b5                	jne    c0014382 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00143cd:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00143d2:	7f 11                	jg     c00143e5 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c00143d4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00143d8:	0f b6 80 a0 bb 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd4460]
c00143df:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00143e3:	eb 9d                	jmp    c0014382 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00143e5:	83 ec 0c             	sub    esp,0xc
c00143e8:	68 48 96 02 c0       	push   0xc0029648
c00143ed:	e8 97 54 00 00       	call   c0019889 <Krnl::panic(char const*)>
c00143f2:	83 c4 10             	add    esp,0x10
c00143f5:	eb 8b                	jmp    c0014382 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c00143f7 <nmiHandler(regs*, void*)>:
c00143f7:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c00143fc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014400:	e9 1b a8 ff ff       	jmp    c000ec20 <Computer::handleNMI()>

c0014405 <int_handler>:
c0014405:	55                   	push   ebp
c0014406:	57                   	push   edi
c0014407:	56                   	push   esi
c0014408:	53                   	push   ebx
c0014409:	83 ec 0c             	sub    esp,0xc
c001440c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014410:	80 3d 80 d4 02 c0 00 	cmp    BYTE PTR ds:0xc002d480,0x0
c0014417:	74 0b                	je     c0014424 <int_handler+0x1f>
c0014419:	fa                   	cli    
c001441a:	f4                   	hlt    
c001441b:	80 3d 80 d4 02 c0 00 	cmp    BYTE PTR ds:0xc002d480,0x0
c0014422:	75 f5                	jne    c0014419 <int_handler+0x14>
c0014424:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c0014429:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c001442c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014432:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014438:	8d 43 e0             	lea    eax,[ebx-0x20]
c001443b:	83 f8 17             	cmp    eax,0x17
c001443e:	77 13                	ja     c0014453 <int_handler+0x4e>
c0014440:	83 ec 08             	sub    esp,0x8
c0014443:	8b 17                	mov    edx,DWORD PTR [edi]
c0014445:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014448:	0f b6 c0             	movzx  eax,al
c001444b:	50                   	push   eax
c001444c:	57                   	push   edi
c001444d:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014450:	83 c4 10             	add    esp,0x10
c0014453:	83 c3 15             	add    ebx,0x15
c0014456:	c1 e3 04             	shl    ebx,0x4
c0014459:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c001445d:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014464:	31 db                	xor    ebx,ebx
c0014466:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c001446a:	85 c0                	test   eax,eax
c001446c:	74 13                	je     c0014481 <int_handler+0x7c>
c001446e:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014471:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014475:	74 1c                	je     c0014493 <int_handler+0x8e>
c0014477:	83 ec 08             	sub    esp,0x8
c001447a:	52                   	push   edx
c001447b:	56                   	push   esi
c001447c:	ff d0                	call   eax
c001447e:	83 c4 10             	add    esp,0x10
c0014481:	43                   	inc    ebx
c0014482:	83 fb 04             	cmp    ebx,0x4
c0014485:	75 df                	jne    c0014466 <int_handler+0x61>
c0014487:	83 c4 0c             	add    esp,0xc
c001448a:	31 c0                	xor    eax,eax
c001448c:	5b                   	pop    ebx
c001448d:	31 d2                	xor    edx,edx
c001448f:	5e                   	pop    esi
c0014490:	5f                   	pop    edi
c0014491:	5d                   	pop    ebp
c0014492:	c3                   	ret    
c0014493:	83 ec 08             	sub    esp,0x8
c0014496:	52                   	push   edx
c0014497:	56                   	push   esi
c0014498:	ff d0                	call   eax
c001449a:	83 c4 10             	add    esp,0x10
c001449d:	83 c4 0c             	add    esp,0xc
c00144a0:	5b                   	pop    ebx
c00144a1:	5e                   	pop    esi
c00144a2:	5f                   	pop    edi
c00144a3:	5d                   	pop    ebp
c00144a4:	c3                   	ret    
c00144a5:	90                   	nop

c00144a6 <InterruptController::InterruptController(char const*)>:
c00144a6:	83 ec 1c             	sub    esp,0x1c
c00144a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144ad:	83 ec 08             	sub    esp,0x8
c00144b0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00144b4:	50                   	push   eax
c00144b5:	e8 94 f8 ff ff       	call   c0013d4e <Device::Device(char const*)>
c00144ba:	83 c4 10             	add    esp,0x10
c00144bd:	ba 7c 98 02 c0       	mov    edx,0xc002987c
c00144c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144c6:	89 10                	mov    DWORD PTR [eax],edx
c00144c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144cc:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c00144d6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00144de:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00144e6:	7f 5e                	jg     c0014546 <InterruptController::InterruptController(char const*)+0xa0>
c00144e8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00144f0:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00144f5:	7f 49                	jg     c0014540 <InterruptController::InterruptController(char const*)+0x9a>
c00144f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144fb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00144ff:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014506:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001450a:	01 ca                	add    edx,ecx
c001450c:	83 c2 54             	add    edx,0x54
c001450f:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014517:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001451b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001451f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014526:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001452a:	01 ca                	add    edx,ecx
c001452c:	81 c2 54 04 00 00    	add    edx,0x454
c0014532:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001453a:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001453e:	eb b0                	jmp    c00144f0 <InterruptController::InterruptController(char const*)+0x4a>
c0014540:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014544:	eb 98                	jmp    c00144de <InterruptController::InterruptController(char const*)+0x38>
c0014546:	90                   	nop
c0014547:	83 c4 1c             	add    esp,0x1c
c001454a:	c3                   	ret    
c001454b:	90                   	nop

c001454c <InterruptController::~InterruptController()>:
c001454c:	83 ec 0c             	sub    esp,0xc
c001454f:	ba 7c 98 02 c0       	mov    edx,0xc002987c
c0014554:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014558:	89 10                	mov    DWORD PTR [eax],edx
c001455a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001455e:	83 ec 0c             	sub    esp,0xc
c0014561:	50                   	push   eax
c0014562:	e8 c9 f4 ff ff       	call   c0013a30 <Device::~Device()>
c0014567:	83 c4 10             	add    esp,0x10
c001456a:	90                   	nop
c001456b:	83 c4 0c             	add    esp,0xc
c001456e:	c3                   	ret    
c001456f:	90                   	nop

c0014570 <InterruptController::~InterruptController()>:
c0014570:	83 ec 0c             	sub    esp,0xc
c0014573:	83 ec 0c             	sub    esp,0xc
c0014576:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001457a:	e8 cd ff ff ff       	call   c001454c <InterruptController::~InterruptController()>
c001457f:	83 c4 10             	add    esp,0x10
c0014582:	83 ec 08             	sub    esp,0x8
c0014585:	68 58 21 00 00       	push   0x2158
c001458a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001458e:	e8 fc e0 ff ff       	call   c001268f <operator delete(void*, unsigned long)>
c0014593:	83 c4 10             	add    esp,0x10
c0014596:	83 c4 0c             	add    esp,0xc
c0014599:	c3                   	ret    

c001459a <displayDebugInfo(regs*)>:
c001459a:	55                   	push   ebp
c001459b:	57                   	push   edi
c001459c:	56                   	push   esi
c001459d:	53                   	push   ebx
c001459e:	83 ec 24             	sub    esp,0x24
c00145a1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00145a5:	0f 20 c2             	mov    edx,cr0
c00145a8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00145ac:	0f 20 d7             	mov    edi,cr2
c00145af:	0f 20 de             	mov    esi,cr3
c00145b2:	0f 20 e5             	mov    ebp,cr4
c00145b5:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00145b8:	68 82 96 02 c0       	push   0xc0029682
c00145bd:	e8 ad e1 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c00145c2:	58                   	pop    eax
c00145c3:	5a                   	pop    edx
c00145c4:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00145c7:	68 8d 96 02 c0       	push   0xc002968d
c00145cc:	e8 9e e1 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c00145d1:	59                   	pop    ecx
c00145d2:	58                   	pop    eax
c00145d3:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00145d6:	68 98 96 02 c0       	push   0xc0029698
c00145db:	e8 8f e1 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c00145e0:	58                   	pop    eax
c00145e1:	5a                   	pop    edx
c00145e2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00145e5:	68 a3 96 02 c0       	push   0xc00296a3
c00145ea:	e8 80 e1 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c00145ef:	59                   	pop    ecx
c00145f0:	58                   	pop    eax
c00145f1:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00145f4:	68 ae 96 02 c0       	push   0xc00296ae
c00145f9:	e8 71 e1 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c00145fe:	58                   	pop    eax
c00145ff:	5a                   	pop    edx
c0014600:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014603:	68 b9 96 02 c0       	push   0xc00296b9
c0014608:	e8 62 e1 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001460d:	59                   	pop    ecx
c001460e:	58                   	pop    eax
c001460f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014612:	68 c4 96 02 c0       	push   0xc00296c4
c0014617:	e8 53 e1 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001461c:	58                   	pop    eax
c001461d:	5a                   	pop    edx
c001461e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014621:	68 cf 96 02 c0       	push   0xc00296cf
c0014626:	e8 44 e1 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001462b:	59                   	pop    ecx
c001462c:	58                   	pop    eax
c001462d:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014630:	68 da 96 02 c0       	push   0xc00296da
c0014635:	e8 35 e1 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001463a:	58                   	pop    eax
c001463b:	5a                   	pop    edx
c001463c:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001463f:	68 e9 96 02 c0       	push   0xc00296e9
c0014644:	e8 26 e1 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c0014649:	59                   	pop    ecx
c001464a:	58                   	pop    eax
c001464b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001464e:	68 f4 96 02 c0       	push   0xc00296f4
c0014653:	e8 17 e1 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c0014658:	58                   	pop    eax
c0014659:	5a                   	pop    edx
c001465a:	57                   	push   edi
c001465b:	68 ff 96 02 c0       	push   0xc00296ff
c0014660:	e8 0a e1 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c0014665:	59                   	pop    ecx
c0014666:	58                   	pop    eax
c0014667:	56                   	push   esi
c0014668:	68 0a 97 02 c0       	push   0xc002970a
c001466d:	e8 fd e0 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c0014672:	58                   	pop    eax
c0014673:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0014678:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001467e:	e8 ae c2 ff ff       	call   c0010931 <setActiveTerminal(VgaText*)>
c0014683:	58                   	pop    eax
c0014684:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014687:	5a                   	pop    edx
c0014688:	c1 e0 05             	shl    eax,0x5
c001468b:	05 00 b9 02 c0       	add    eax,0xc002b900
c0014690:	50                   	push   eax
c0014691:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0014696:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001469c:	e8 af c6 ff ff       	call   c0010d50 <VgaText::puts(char const*)>
c00146a1:	59                   	pop    ecx
c00146a2:	58                   	pop    eax
c00146a3:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c00146a8:	68 15 97 02 c0       	push   0xc0029715
c00146ad:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146b3:	e8 98 c6 ff ff       	call   c0010d50 <VgaText::puts(char const*)>
c00146b8:	58                   	pop    eax
c00146b9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00146be:	5a                   	pop    edx
c00146bf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00146c2:	83 c0 0c             	add    eax,0xc
c00146c5:	50                   	push   eax
c00146c6:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c00146cb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146d1:	e8 7a c6 ff ff       	call   c0010d50 <VgaText::puts(char const*)>
c00146d6:	59                   	pop    ecx
c00146d7:	58                   	pop    eax
c00146d8:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c00146dd:	68 1e 97 02 c0       	push   0xc002971e
c00146e2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146e8:	e8 63 c6 ff ff       	call   c0010d50 <VgaText::puts(char const*)>
c00146ed:	58                   	pop    eax
c00146ee:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c00146f3:	5a                   	pop    edx
c00146f4:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00146f7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146fd:	e8 74 c6 ff ff       	call   c0010d76 <VgaText::putx(unsigned int)>
c0014702:	59                   	pop    ecx
c0014703:	58                   	pop    eax
c0014704:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0014709:	68 26 97 02 c0       	push   0xc0029726
c001470e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014714:	e8 37 c6 ff ff       	call   c0010d50 <VgaText::puts(char const*)>
c0014719:	58                   	pop    eax
c001471a:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c001471f:	5a                   	pop    edx
c0014720:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014723:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014729:	e8 48 c6 ff ff       	call   c0010d76 <VgaText::putx(unsigned int)>
c001472e:	59                   	pop    ecx
c001472f:	58                   	pop    eax
c0014730:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0014735:	68 2e 97 02 c0       	push   0xc002972e
c001473a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014740:	e8 0b c6 ff ff       	call   c0010d50 <VgaText::puts(char const*)>
c0014745:	58                   	pop    eax
c0014746:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c001474b:	5a                   	pop    edx
c001474c:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c001474f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014755:	e8 1c c6 ff ff       	call   c0010d76 <VgaText::putx(unsigned int)>
c001475a:	59                   	pop    ecx
c001475b:	58                   	pop    eax
c001475c:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0014761:	68 36 97 02 c0       	push   0xc0029736
c0014766:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001476c:	e8 df c5 ff ff       	call   c0010d50 <VgaText::puts(char const*)>
c0014771:	58                   	pop    eax
c0014772:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0014777:	5a                   	pop    edx
c0014778:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c001477b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014781:	e8 f0 c5 ff ff       	call   c0010d76 <VgaText::putx(unsigned int)>
c0014786:	59                   	pop    ecx
c0014787:	58                   	pop    eax
c0014788:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c001478d:	68 3e 97 02 c0       	push   0xc002973e
c0014792:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014798:	e8 b3 c5 ff ff       	call   c0010d50 <VgaText::puts(char const*)>
c001479d:	58                   	pop    eax
c001479e:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c00147a3:	5a                   	pop    edx
c00147a4:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00147a7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147ad:	e8 c4 c5 ff ff       	call   c0010d76 <VgaText::putx(unsigned int)>
c00147b2:	59                   	pop    ecx
c00147b3:	58                   	pop    eax
c00147b4:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c00147b9:	68 46 97 02 c0       	push   0xc0029746
c00147be:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147c4:	e8 87 c5 ff ff       	call   c0010d50 <VgaText::puts(char const*)>
c00147c9:	58                   	pop    eax
c00147ca:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c00147cf:	5a                   	pop    edx
c00147d0:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c00147d3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147d9:	e8 98 c5 ff ff       	call   c0010d76 <VgaText::putx(unsigned int)>
c00147de:	59                   	pop    ecx
c00147df:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c00147e4:	5b                   	pop    ebx
c00147e5:	68 4e 97 02 c0       	push   0xc002974e
c00147ea:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147f0:	e8 5b c5 ff ff       	call   c0010d50 <VgaText::puts(char const*)>
c00147f5:	58                   	pop    eax
c00147f6:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c00147fb:	5a                   	pop    edx
c00147fc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014800:	52                   	push   edx
c0014801:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014807:	e8 6a c5 ff ff       	call   c0010d76 <VgaText::putx(unsigned int)>
c001480c:	59                   	pop    ecx
c001480d:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0014812:	5b                   	pop    ebx
c0014813:	68 57 97 02 c0       	push   0xc0029757
c0014818:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001481e:	e8 2d c5 ff ff       	call   c0010d50 <VgaText::puts(char const*)>
c0014823:	58                   	pop    eax
c0014824:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0014829:	5a                   	pop    edx
c001482a:	57                   	push   edi
c001482b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014831:	e8 40 c5 ff ff       	call   c0010d76 <VgaText::putx(unsigned int)>
c0014836:	59                   	pop    ecx
c0014837:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c001483c:	5b                   	pop    ebx
c001483d:	68 5f 97 02 c0       	push   0xc002975f
c0014842:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014848:	e8 03 c5 ff ff       	call   c0010d50 <VgaText::puts(char const*)>
c001484d:	5f                   	pop    edi
c001484e:	58                   	pop    eax
c001484f:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0014854:	56                   	push   esi
c0014855:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001485b:	e8 16 c5 ff ff       	call   c0010d76 <VgaText::putx(unsigned int)>
c0014860:	58                   	pop    eax
c0014861:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0014866:	5a                   	pop    edx
c0014867:	68 67 97 02 c0       	push   0xc0029767
c001486c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014872:	e8 d9 c4 ff ff       	call   c0010d50 <VgaText::puts(char const*)>
c0014877:	59                   	pop    ecx
c0014878:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c001487d:	5b                   	pop    ebx
c001487e:	55                   	push   ebp
c001487f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014885:	e8 ec c4 ff ff       	call   c0010d76 <VgaText::putx(unsigned int)>
c001488a:	5e                   	pop    esi
c001488b:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0014890:	5f                   	pop    edi
c0014891:	68 6f 97 02 c0       	push   0xc002976f
c0014896:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001489c:	e8 af c4 ff ff       	call   c0010d50 <VgaText::puts(char const*)>
c00148a1:	0f 21 c0             	mov    eax,db0
c00148a4:	5d                   	pop    ebp
c00148a5:	5a                   	pop    edx
c00148a6:	50                   	push   eax
c00148a7:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c00148ac:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148b2:	e8 bf c4 ff ff       	call   c0010d76 <VgaText::putx(unsigned int)>
c00148b7:	59                   	pop    ecx
c00148b8:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c00148bd:	5b                   	pop    ebx
c00148be:	68 78 97 02 c0       	push   0xc0029778
c00148c3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148c9:	e8 82 c4 ff ff       	call   c0010d50 <VgaText::puts(char const*)>
c00148ce:	0f 21 c8             	mov    eax,db1
c00148d1:	5e                   	pop    esi
c00148d2:	5f                   	pop    edi
c00148d3:	50                   	push   eax
c00148d4:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c00148d9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148df:	e8 92 c4 ff ff       	call   c0010d76 <VgaText::putx(unsigned int)>
c00148e4:	5d                   	pop    ebp
c00148e5:	58                   	pop    eax
c00148e6:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c00148eb:	68 80 97 02 c0       	push   0xc0029780
c00148f0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148f6:	e8 55 c4 ff ff       	call   c0010d50 <VgaText::puts(char const*)>
c00148fb:	0f 21 d0             	mov    eax,db2
c00148fe:	5a                   	pop    edx
c00148ff:	59                   	pop    ecx
c0014900:	50                   	push   eax
c0014901:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0014906:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001490c:	e8 65 c4 ff ff       	call   c0010d76 <VgaText::putx(unsigned int)>
c0014911:	5b                   	pop    ebx
c0014912:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0014917:	5e                   	pop    esi
c0014918:	68 88 97 02 c0       	push   0xc0029788
c001491d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014923:	e8 28 c4 ff ff       	call   c0010d50 <VgaText::puts(char const*)>
c0014928:	0f 21 d8             	mov    eax,db3
c001492b:	5f                   	pop    edi
c001492c:	5d                   	pop    ebp
c001492d:	50                   	push   eax
c001492e:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0014933:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014939:	e8 38 c4 ff ff       	call   c0010d76 <VgaText::putx(unsigned int)>
c001493e:	58                   	pop    eax
c001493f:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0014944:	5a                   	pop    edx
c0014945:	68 90 97 02 c0       	push   0xc0029790
c001494a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014950:	e8 fb c3 ff ff       	call   c0010d50 <VgaText::puts(char const*)>
c0014955:	0f 21 f0             	mov    eax,db6
c0014958:	59                   	pop    ecx
c0014959:	5b                   	pop    ebx
c001495a:	50                   	push   eax
c001495b:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0014960:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014966:	e8 0b c4 ff ff       	call   c0010d76 <VgaText::putx(unsigned int)>
c001496b:	5e                   	pop    esi
c001496c:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0014971:	5f                   	pop    edi
c0014972:	68 98 97 02 c0       	push   0xc0029798
c0014977:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001497d:	e8 ce c3 ff ff       	call   c0010d50 <VgaText::puts(char const*)>
c0014982:	0f 21 f8             	mov    eax,db7
c0014985:	5d                   	pop    ebp
c0014986:	5a                   	pop    edx
c0014987:	50                   	push   eax
c0014988:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c001498d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014993:	e8 de c3 ff ff       	call   c0010d76 <VgaText::putx(unsigned int)>
c0014998:	fa                   	cli    
c0014999:	f4                   	hlt    
c001499a:	83 c4 10             	add    esp,0x10
c001499d:	eb fe                	jmp    c001499d <displayDebugInfo(regs*)+0x403>

c001499f <x87EmulHandler(regs*, void*)>:
c001499f:	53                   	push   ebx
c00149a0:	83 ec 14             	sub    esp,0x14
c00149a3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00149a7:	53                   	push   ebx
c00149a8:	e8 ff 9f 00 00       	call   c001e9ac <Vm::x87Handler(regs*)>
c00149ad:	83 c4 10             	add    esp,0x10
c00149b0:	84 c0                	test   al,al
c00149b2:	74 05                	je     c00149b9 <x87EmulHandler(regs*, void*)+0x1a>
c00149b4:	83 c4 08             	add    esp,0x8
c00149b7:	5b                   	pop    ebx
c00149b8:	c3                   	ret    
c00149b9:	83 ec 0c             	sub    esp,0xc
c00149bc:	68 a0 97 02 c0       	push   0xc00297a0
c00149c1:	e8 a9 dd ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c00149c6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00149c9:	e8 cc fb ff ff       	call   c001459a <displayDebugInfo(regs*)>

c00149ce <gpFault(regs*, void*)>:
c00149ce:	53                   	push   ebx
c00149cf:	83 ec 14             	sub    esp,0x14
c00149d2:	c7 05 f0 ca 02 c0 29 dd 01 c0 	mov    DWORD PTR ds:0xc002caf0,0xc001dd29
c00149dc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00149e0:	53                   	push   ebx
c00149e1:	e8 43 93 00 00       	call   c001dd29 <Vm::faultHandler(regs*)>
c00149e6:	83 c4 10             	add    esp,0x10
c00149e9:	84 c0                	test   al,al
c00149eb:	74 05                	je     c00149f2 <gpFault(regs*, void*)+0x24>
c00149ed:	83 c4 08             	add    esp,0x8
c00149f0:	5b                   	pop    ebx
c00149f1:	c3                   	ret    
c00149f2:	83 ec 0c             	sub    esp,0xc
c00149f5:	68 b6 97 02 c0       	push   0xc00297b6
c00149fa:	e8 70 dd ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c00149ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014a02:	e8 93 fb ff ff       	call   c001459a <displayDebugInfo(regs*)>

c0014a07 <pgFault(regs*, void*)>:
c0014a07:	83 ec 18             	sub    esp,0x18
c0014a0a:	68 d1 97 02 c0       	push   0xc00297d1
c0014a0f:	e8 5b dd ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c0014a14:	58                   	pop    eax
c0014a15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014a19:	e8 7c fb ff ff       	call   c001459a <displayDebugInfo(regs*)>

c0014a1e <otherISRHandler(regs*, void*)>:
c0014a1e:	53                   	push   ebx
c0014a1f:	83 ec 0c             	sub    esp,0xc
c0014a22:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014a26:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014a29:	50                   	push   eax
c0014a2a:	50                   	push   eax
c0014a2b:	68 de 97 02 c0       	push   0xc00297de
c0014a30:	e8 3a dd ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c0014a35:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014a38:	e8 5d fb ff ff       	call   c001459a <displayDebugInfo(regs*)>

c0014a3d <opcodeFault(regs*, void*)>:
c0014a3d:	55                   	push   ebp
c0014a3e:	89 e5                	mov    ebp,esp
c0014a40:	56                   	push   esi
c0014a41:	53                   	push   ebx
c0014a42:	83 ec 40             	sub    esp,0x40
c0014a45:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c0014a4a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014a50:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014a56:	84 c0                	test   al,al
c0014a58:	74 24                	je     c0014a7e <opcodeFault(regs*, void*)+0x41>
c0014a5a:	83 ec 0c             	sub    esp,0xc
c0014a5d:	68 fc 97 02 c0       	push   0xc00297fc
c0014a62:	e8 08 dd ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c0014a67:	83 c4 10             	add    esp,0x10
c0014a6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a6d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a70:	8d 50 19             	lea    edx,[eax+0x19]
c0014a73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a76:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a79:	e9 77 05 00 00       	jmp    c0014ff5 <opcodeFault(regs*, void*)+0x5b8>
c0014a7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a81:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a84:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014a87:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014a8b:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014a8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a92:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a95:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014a98:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a9b:	8a 00                	mov    al,BYTE PTR [eax]
c0014a9d:	3c f0                	cmp    al,0xf0
c0014a9f:	75 17                	jne    c0014ab8 <opcodeFault(regs*, void*)+0x7b>
c0014aa1:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014aa4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014aa7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014aaa:	8d 50 01             	lea    edx,[eax+0x1]
c0014aad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ab0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ab3:	e9 da 00 00 00       	jmp    c0014b92 <opcodeFault(regs*, void*)+0x155>
c0014ab8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014abb:	8a 00                	mov    al,BYTE PTR [eax]
c0014abd:	3c f2                	cmp    al,0xf2
c0014abf:	74 09                	je     c0014aca <opcodeFault(regs*, void*)+0x8d>
c0014ac1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ac4:	8a 00                	mov    al,BYTE PTR [eax]
c0014ac6:	3c f3                	cmp    al,0xf3
c0014ac8:	75 1b                	jne    c0014ae5 <opcodeFault(regs*, void*)+0xa8>
c0014aca:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014ace:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014ad1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ad4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ad7:	8d 50 01             	lea    edx,[eax+0x1]
c0014ada:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014add:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ae0:	e9 ad 00 00 00       	jmp    c0014b92 <opcodeFault(regs*, void*)+0x155>
c0014ae5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ae8:	8a 00                	mov    al,BYTE PTR [eax]
c0014aea:	3c 66                	cmp    al,0x66
c0014aec:	75 1f                	jne    c0014b0d <opcodeFault(regs*, void*)+0xd0>
c0014aee:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014af2:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014af6:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014af9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014afc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014aff:	8d 50 01             	lea    edx,[eax+0x1]
c0014b02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b05:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b08:	e9 85 00 00 00       	jmp    c0014b92 <opcodeFault(regs*, void*)+0x155>
c0014b0d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b10:	8a 00                	mov    al,BYTE PTR [eax]
c0014b12:	3c 67                	cmp    al,0x67
c0014b14:	75 18                	jne    c0014b2e <opcodeFault(regs*, void*)+0xf1>
c0014b16:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014b1a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014b1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b20:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b23:	8d 50 01             	lea    edx,[eax+0x1]
c0014b26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b29:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b2c:	eb 64                	jmp    c0014b92 <opcodeFault(regs*, void*)+0x155>
c0014b2e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b31:	8a 00                	mov    al,BYTE PTR [eax]
c0014b33:	3c 2e                	cmp    al,0x2e
c0014b35:	74 09                	je     c0014b40 <opcodeFault(regs*, void*)+0x103>
c0014b37:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b3a:	8a 00                	mov    al,BYTE PTR [eax]
c0014b3c:	3c 3e                	cmp    al,0x3e
c0014b3e:	75 18                	jne    c0014b58 <opcodeFault(regs*, void*)+0x11b>
c0014b40:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014b44:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014b47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b4a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b4d:	8d 50 01             	lea    edx,[eax+0x1]
c0014b50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b53:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b56:	eb 3a                	jmp    c0014b92 <opcodeFault(regs*, void*)+0x155>
c0014b58:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b5b:	8a 00                	mov    al,BYTE PTR [eax]
c0014b5d:	3c 36                	cmp    al,0x36
c0014b5f:	74 1b                	je     c0014b7c <opcodeFault(regs*, void*)+0x13f>
c0014b61:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b64:	8a 00                	mov    al,BYTE PTR [eax]
c0014b66:	3c 26                	cmp    al,0x26
c0014b68:	74 12                	je     c0014b7c <opcodeFault(regs*, void*)+0x13f>
c0014b6a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b6d:	8a 00                	mov    al,BYTE PTR [eax]
c0014b6f:	3c 64                	cmp    al,0x64
c0014b71:	74 09                	je     c0014b7c <opcodeFault(regs*, void*)+0x13f>
c0014b73:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b76:	8a 00                	mov    al,BYTE PTR [eax]
c0014b78:	3c 65                	cmp    al,0x65
c0014b7a:	75 16                	jne    c0014b92 <opcodeFault(regs*, void*)+0x155>
c0014b7c:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014b80:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014b83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b86:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b89:	8d 50 01             	lea    edx,[eax+0x1]
c0014b8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b8f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b92:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b95:	8a 00                	mov    al,BYTE PTR [eax]
c0014b97:	3c 0f                	cmp    al,0xf
c0014b99:	0f 85 ad 00 00 00    	jne    c0014c4c <opcodeFault(regs*, void*)+0x20f>
c0014b9f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ba2:	40                   	inc    eax
c0014ba3:	8a 00                	mov    al,BYTE PTR [eax]
c0014ba5:	3c c2                	cmp    al,0xc2
c0014ba7:	74 0e                	je     c0014bb7 <opcodeFault(regs*, void*)+0x17a>
c0014ba9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bac:	40                   	inc    eax
c0014bad:	8a 00                	mov    al,BYTE PTR [eax]
c0014baf:	3c c3                	cmp    al,0xc3
c0014bb1:	0f 85 95 00 00 00    	jne    c0014c4c <opcodeFault(regs*, void*)+0x20f>
c0014bb7:	83 ec 0c             	sub    esp,0xc
c0014bba:	68 1f 98 02 c0       	push   0xc002981f
c0014bbf:	e8 ab db ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c0014bc4:	83 c4 10             	add    esp,0x10
c0014bc7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bca:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014bcd:	8d 50 01             	lea    edx,[eax+0x1]
c0014bd0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bd3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014bd6:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014bd9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bdc:	8a 00                	mov    al,BYTE PTR [eax]
c0014bde:	8d 50 fe             	lea    edx,[eax-0x2]
c0014be1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014be4:	88 10                	mov    BYTE PTR [eax],dl
c0014be6:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014be9:	50                   	push   eax
c0014bea:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014bed:	50                   	push   eax
c0014bee:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014bf1:	50                   	push   eax
c0014bf2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014bf5:	e8 c0 44 00 00       	call   c00190ba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014bfa:	83 c4 10             	add    esp,0x10
c0014bfd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c00:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c03:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014c06:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014c09:	01 d0                	add    eax,edx
c0014c0b:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014c0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c11:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c14:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014c17:	48                   	dec    eax
c0014c18:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014c1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c1e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014c21:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c27:	83 ec 04             	sub    esp,0x4
c0014c2a:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014c2d:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014c30:	50                   	push   eax
c0014c31:	e8 33 b5 fe ff       	call   c0000169 <voodooXADD>
c0014c36:	83 c4 10             	add    esp,0x10
c0014c39:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014c3c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014c3f:	01 c2                	add    edx,eax
c0014c41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c44:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c47:	e9 a9 03 00 00       	jmp    c0014ff5 <opcodeFault(regs*, void*)+0x5b8>
c0014c4c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c4f:	8a 00                	mov    al,BYTE PTR [eax]
c0014c51:	3c 0f                	cmp    al,0xf
c0014c53:	0f 85 8b 01 00 00    	jne    c0014de4 <opcodeFault(regs*, void*)+0x3a7>
c0014c59:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c5c:	40                   	inc    eax
c0014c5d:	8a 00                	mov    al,BYTE PTR [eax]
c0014c5f:	3c c7                	cmp    al,0xc7
c0014c61:	0f 86 7d 01 00 00    	jbe    c0014de4 <opcodeFault(regs*, void*)+0x3a7>
c0014c67:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c6a:	40                   	inc    eax
c0014c6b:	8a 00                	mov    al,BYTE PTR [eax]
c0014c6d:	3c cf                	cmp    al,0xcf
c0014c6f:	0f 87 6f 01 00 00    	ja     c0014de4 <opcodeFault(regs*, void*)+0x3a7>
c0014c75:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c78:	40                   	inc    eax
c0014c79:	8a 00                	mov    al,BYTE PTR [eax]
c0014c7b:	83 c0 38             	add    eax,0x38
c0014c7e:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014c81:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014c85:	75 0b                	jne    c0014c92 <opcodeFault(regs*, void*)+0x255>
c0014c87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c8a:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014c8d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c90:	eb 75                	jmp    c0014d07 <opcodeFault(regs*, void*)+0x2ca>
c0014c92:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014c96:	75 0b                	jne    c0014ca3 <opcodeFault(regs*, void*)+0x266>
c0014c98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c9b:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014c9e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014ca1:	eb 64                	jmp    c0014d07 <opcodeFault(regs*, void*)+0x2ca>
c0014ca3:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014ca7:	75 0b                	jne    c0014cb4 <opcodeFault(regs*, void*)+0x277>
c0014ca9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cac:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014caf:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014cb2:	eb 53                	jmp    c0014d07 <opcodeFault(regs*, void*)+0x2ca>
c0014cb4:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014cb8:	75 0b                	jne    c0014cc5 <opcodeFault(regs*, void*)+0x288>
c0014cba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cbd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014cc0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014cc3:	eb 42                	jmp    c0014d07 <opcodeFault(regs*, void*)+0x2ca>
c0014cc5:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014cc9:	75 0b                	jne    c0014cd6 <opcodeFault(regs*, void*)+0x299>
c0014ccb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cce:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014cd1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014cd4:	eb 31                	jmp    c0014d07 <opcodeFault(regs*, void*)+0x2ca>
c0014cd6:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014cda:	75 0b                	jne    c0014ce7 <opcodeFault(regs*, void*)+0x2aa>
c0014cdc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cdf:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014ce2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014ce5:	eb 20                	jmp    c0014d07 <opcodeFault(regs*, void*)+0x2ca>
c0014ce7:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014ceb:	75 0b                	jne    c0014cf8 <opcodeFault(regs*, void*)+0x2bb>
c0014ced:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cf0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014cf3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014cf6:	eb 0f                	jmp    c0014d07 <opcodeFault(regs*, void*)+0x2ca>
c0014cf8:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014cfc:	75 09                	jne    c0014d07 <opcodeFault(regs*, void*)+0x2ca>
c0014cfe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d01:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014d04:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d07:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014d0b:	74 10                	je     c0014d1d <opcodeFault(regs*, void*)+0x2e0>
c0014d0d:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014d14:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014d1b:	eb 2d                	jmp    c0014d4a <opcodeFault(regs*, void*)+0x30d>
c0014d1d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014d20:	c1 e0 18             	shl    eax,0x18
c0014d23:	89 c2                	mov    edx,eax
c0014d25:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014d28:	c1 e0 08             	shl    eax,0x8
c0014d2b:	25 00 00 ff 00       	and    eax,0xff0000
c0014d30:	09 c2                	or     edx,eax
c0014d32:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014d35:	c1 e8 08             	shr    eax,0x8
c0014d38:	25 00 ff 00 00       	and    eax,0xff00
c0014d3d:	09 c2                	or     edx,eax
c0014d3f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014d42:	c1 e8 18             	shr    eax,0x18
c0014d45:	09 d0                	or     eax,edx
c0014d47:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d4a:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014d4e:	75 0b                	jne    c0014d5b <opcodeFault(regs*, void*)+0x31e>
c0014d50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d53:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014d56:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014d59:	eb 75                	jmp    c0014dd0 <opcodeFault(regs*, void*)+0x393>
c0014d5b:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014d5f:	75 0b                	jne    c0014d6c <opcodeFault(regs*, void*)+0x32f>
c0014d61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d64:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014d67:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014d6a:	eb 64                	jmp    c0014dd0 <opcodeFault(regs*, void*)+0x393>
c0014d6c:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014d70:	75 0b                	jne    c0014d7d <opcodeFault(regs*, void*)+0x340>
c0014d72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d75:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014d78:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014d7b:	eb 53                	jmp    c0014dd0 <opcodeFault(regs*, void*)+0x393>
c0014d7d:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014d81:	75 0b                	jne    c0014d8e <opcodeFault(regs*, void*)+0x351>
c0014d83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d86:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014d89:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0014d8c:	eb 42                	jmp    c0014dd0 <opcodeFault(regs*, void*)+0x393>
c0014d8e:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014d92:	75 0b                	jne    c0014d9f <opcodeFault(regs*, void*)+0x362>
c0014d94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d97:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014d9a:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0014d9d:	eb 31                	jmp    c0014dd0 <opcodeFault(regs*, void*)+0x393>
c0014d9f:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014da3:	75 0b                	jne    c0014db0 <opcodeFault(regs*, void*)+0x373>
c0014da5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014da8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014dab:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014dae:	eb 20                	jmp    c0014dd0 <opcodeFault(regs*, void*)+0x393>
c0014db0:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014db4:	75 0b                	jne    c0014dc1 <opcodeFault(regs*, void*)+0x384>
c0014db6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014db9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014dbc:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0014dbf:	eb 0f                	jmp    c0014dd0 <opcodeFault(regs*, void*)+0x393>
c0014dc1:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014dc5:	75 09                	jne    c0014dd0 <opcodeFault(regs*, void*)+0x393>
c0014dc7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dca:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014dcd:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0014dd0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dd3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014dd6:	8d 50 02             	lea    edx,[eax+0x2]
c0014dd9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ddc:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ddf:	e9 11 02 00 00       	jmp    c0014ff5 <opcodeFault(regs*, void*)+0x5b8>
c0014de4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014de7:	8a 00                	mov    al,BYTE PTR [eax]
c0014de9:	3c 0f                	cmp    al,0xf
c0014deb:	0f 85 76 01 00 00    	jne    c0014f67 <opcodeFault(regs*, void*)+0x52a>
c0014df1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014df4:	40                   	inc    eax
c0014df5:	8a 00                	mov    al,BYTE PTR [eax]
c0014df7:	3c c7                	cmp    al,0xc7
c0014df9:	0f 85 68 01 00 00    	jne    c0014f67 <opcodeFault(regs*, void*)+0x52a>
c0014dff:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014e02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e05:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e08:	8d 50 01             	lea    edx,[eax+0x1]
c0014e0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e0e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e11:	8d 45 ba             	lea    eax,[ebp-0x46]
c0014e14:	50                   	push   eax
c0014e15:	8d 45 bb             	lea    eax,[ebp-0x45]
c0014e18:	50                   	push   eax
c0014e19:	8d 45 bc             	lea    eax,[ebp-0x44]
c0014e1c:	50                   	push   eax
c0014e1d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014e20:	e8 95 42 00 00       	call   c00190ba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014e25:	83 c4 10             	add    esp,0x10
c0014e28:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0014e2b:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0014e2e:	83 f0 01             	xor    eax,0x1
c0014e31:	84 c0                	test   al,al
c0014e33:	0f 84 2e 01 00 00    	je     c0014f67 <opcodeFault(regs*, void*)+0x52a>
c0014e39:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0014e3c:	3c 01                	cmp    al,0x1
c0014e3e:	0f 85 23 01 00 00    	jne    c0014f67 <opcodeFault(regs*, void*)+0x52a>
c0014e44:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0014e47:	83 f0 01             	xor    eax,0x1
c0014e4a:	84 c0                	test   al,al
c0014e4c:	0f 84 15 01 00 00    	je     c0014f67 <opcodeFault(regs*, void*)+0x52a>
c0014e52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e55:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014e58:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014e5b:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0014e62:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014e65:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014e68:	89 c2                	mov    edx,eax
c0014e6a:	b8 00 00 00 00       	mov    eax,0x0
c0014e6f:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014e72:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014e75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e78:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014e7b:	ba 00 00 00 00       	mov    edx,0x0
c0014e80:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0014e83:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0014e86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e89:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014e8c:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014e8f:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0014e96:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014e99:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014e9c:	89 c2                	mov    edx,eax
c0014e9e:	b8 00 00 00 00       	mov    eax,0x0
c0014ea3:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014ea6:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0014ea9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eac:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014eaf:	ba 00 00 00 00       	mov    edx,0x0
c0014eb4:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0014eb7:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0014eba:	e8 59 7e 00 00       	call   c001cd18 <lockScheduler()>
c0014ebf:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014ec2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014ec5:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ec7:	89 c1                	mov    ecx,eax
c0014ec9:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0014ecc:	89 cb                	mov    ebx,ecx
c0014ece:	89 d0                	mov    eax,edx
c0014ed0:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0014ed3:	89 c6                	mov    esi,eax
c0014ed5:	89 f0                	mov    eax,esi
c0014ed7:	09 d8                	or     eax,ebx
c0014ed9:	85 c0                	test   eax,eax
c0014edb:	75 21                	jne    c0014efe <opcodeFault(regs*, void*)+0x4c1>
c0014edd:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0014ee0:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014ee3:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014ee6:	89 01                	mov    DWORD PTR [ecx],eax
c0014ee8:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0014eeb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eee:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014ef1:	83 c8 40             	or     eax,0x40
c0014ef4:	89 c2                	mov    edx,eax
c0014ef6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ef9:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014efc:	eb 3e                	jmp    c0014f3c <opcodeFault(regs*, void*)+0x4ff>
c0014efe:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014f01:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014f04:	8b 00                	mov    eax,DWORD PTR [eax]
c0014f06:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014f09:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014f0c:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0014f0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f12:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014f15:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014f18:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014f1b:	89 d0                	mov    eax,edx
c0014f1d:	31 d2                	xor    edx,edx
c0014f1f:	89 c3                	mov    ebx,eax
c0014f21:	89 d6                	mov    esi,edx
c0014f23:	89 da                	mov    edx,ebx
c0014f25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f28:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014f2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f2e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014f31:	83 e0 bf             	and    eax,0xffffffbf
c0014f34:	89 c2                	mov    edx,eax
c0014f36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f39:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014f3c:	e8 d9 7d 00 00       	call   c001cd1a <unlockScheduler()>
c0014f41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f44:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f47:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0014f4a:	01 c2                	add    edx,eax
c0014f4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f4f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f52:	83 ec 0c             	sub    esp,0xc
c0014f55:	68 2e 98 02 c0       	push   0xc002982e
c0014f5a:	e8 10 d8 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c0014f5f:	83 c4 10             	add    esp,0x10
c0014f62:	e9 8e 00 00 00       	jmp    c0014ff5 <opcodeFault(regs*, void*)+0x5b8>
c0014f67:	83 ec 0c             	sub    esp,0xc
c0014f6a:	68 41 98 02 c0       	push   0xc0029841
c0014f6f:	e8 fb d7 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c0014f74:	83 c4 10             	add    esp,0x10
c0014f77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f7a:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014f7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f80:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014f83:	c1 e0 04             	shl    eax,0x4
c0014f86:	01 d0                	add    eax,edx
c0014f88:	83 c0 03             	add    eax,0x3
c0014f8b:	8a 00                	mov    al,BYTE PTR [eax]
c0014f8d:	0f b6 d8             	movzx  ebx,al
c0014f90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f93:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014f96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f99:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014f9c:	c1 e0 04             	shl    eax,0x4
c0014f9f:	01 d0                	add    eax,edx
c0014fa1:	83 c0 02             	add    eax,0x2
c0014fa4:	8a 00                	mov    al,BYTE PTR [eax]
c0014fa6:	0f b6 c8             	movzx  ecx,al
c0014fa9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fac:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014faf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fb2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014fb5:	c1 e0 04             	shl    eax,0x4
c0014fb8:	01 d0                	add    eax,edx
c0014fba:	40                   	inc    eax
c0014fbb:	8a 00                	mov    al,BYTE PTR [eax]
c0014fbd:	0f b6 d0             	movzx  edx,al
c0014fc0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fc3:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0014fc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fc9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014fcc:	c1 e0 04             	shl    eax,0x4
c0014fcf:	01 f0                	add    eax,esi
c0014fd1:	8a 00                	mov    al,BYTE PTR [eax]
c0014fd3:	0f b6 c0             	movzx  eax,al
c0014fd6:	83 ec 0c             	sub    esp,0xc
c0014fd9:	53                   	push   ebx
c0014fda:	51                   	push   ecx
c0014fdb:	52                   	push   edx
c0014fdc:	50                   	push   eax
c0014fdd:	68 54 98 02 c0       	push   0xc0029854
c0014fe2:	e8 88 d7 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c0014fe7:	83 c4 20             	add    esp,0x20
c0014fea:	83 ec 0c             	sub    esp,0xc
c0014fed:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014ff0:	e8 a5 f5 ff ff       	call   c001459a <displayDebugInfo(regs*)>
c0014ff5:	8d 65 f8             	lea    esp,[ebp-0x8]
c0014ff8:	5b                   	pop    ebx
c0014ff9:	5e                   	pop    esi
c0014ffa:	5d                   	pop    ebp
c0014ffb:	c3                   	ret    

c0014ffc <displayProgramFault(char const*)>:
c0014ffc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015001:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015004:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001500a:	85 c0                	test   eax,eax
c001500c:	74 15                	je     c0015023 <displayProgramFault(char const*)+0x27>
c001500e:	83 ec 0c             	sub    esp,0xc
c0015011:	6a 04                	push   0x4
c0015013:	6a 0f                	push   0xf
c0015015:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015019:	50                   	push   eax
c001501a:	e8 f3 b9 ff ff       	call   c0010a12 <VgaText::puts(char const*, VgaColour, VgaColour)>
c001501f:	83 c4 1c             	add    esp,0x1c
c0015022:	c3                   	ret    
c0015023:	c3                   	ret    

c0015024 <setupInterruptController()>:
c0015024:	55                   	push   ebp
c0015025:	89 e5                	mov    ebp,esp
c0015027:	53                   	push   ebx
c0015028:	83 ec 24             	sub    esp,0x24
c001502b:	b8 00 00 00 00       	mov    eax,0x0
c0015030:	85 c0                	test   eax,eax
c0015032:	0f 95 c0             	setne  al
c0015035:	84 c0                	test   al,al
c0015037:	74 5b                	je     c0015094 <setupInterruptController()+0x70>
c0015039:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0015040:	83 ec 0c             	sub    esp,0xc
c0015043:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0015046:	e8 89 a4 ff ff       	call   c000f4d4 <malloc>
c001504b:	83 c4 10             	add    esp,0x10
c001504e:	89 c3                	mov    ebx,eax
c0015050:	83 ec 0c             	sub    esp,0xc
c0015053:	53                   	push   ebx
c0015054:	e8 c3 f2 00 00       	call   c002431c <APIC::APIC()>
c0015059:	83 c4 10             	add    esp,0x10
c001505c:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c001505f:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0015062:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015065:	8b 00                	mov    eax,DWORD PTR [eax]
c0015067:	83 c0 08             	add    eax,0x8
c001506a:	8b 00                	mov    eax,DWORD PTR [eax]
c001506c:	6a 00                	push   0x0
c001506e:	6a 00                	push   0x0
c0015070:	6a 00                	push   0x0
c0015072:	52                   	push   edx
c0015073:	ff d0                	call   eax
c0015075:	83 c4 10             	add    esp,0x10
c0015078:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c001507d:	83 ec 08             	sub    esp,0x8
c0015080:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015083:	50                   	push   eax
c0015084:	e8 d5 ea ff ff       	call   c0013b5e <Device::addChild(Device*)>
c0015089:	83 c4 10             	add    esp,0x10
c001508c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001508f:	e9 52 03 00 00       	jmp    c00153e6 <setupInterruptController()+0x3c2>
c0015094:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c0015099:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001509f:	83 e0 01             	and    eax,0x1
c00150a2:	84 c0                	test   al,al
c00150a4:	0f 95 c0             	setne  al
c00150a7:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00150aa:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c00150b1:	83 ec 0c             	sub    esp,0xc
c00150b4:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00150b7:	e8 18 a4 ff ff       	call   c000f4d4 <malloc>
c00150bc:	83 c4 10             	add    esp,0x10
c00150bf:	89 c3                	mov    ebx,eax
c00150c1:	83 ec 0c             	sub    esp,0xc
c00150c4:	53                   	push   ebx
c00150c5:	e8 aa f7 00 00       	call   c0024874 <PIC::PIC()>
c00150ca:	83 c4 10             	add    esp,0x10
c00150cd:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00150d0:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00150d3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00150d8:	83 c0 08             	add    eax,0x8
c00150db:	8b 00                	mov    eax,DWORD PTR [eax]
c00150dd:	6a 00                	push   0x0
c00150df:	6a 00                	push   0x0
c00150e1:	6a 00                	push   0x0
c00150e3:	52                   	push   edx
c00150e4:	ff d0                	call   eax
c00150e6:	83 c4 10             	add    esp,0x10
c00150e9:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c00150ed:	74 73                	je     c0015162 <setupInterruptController()+0x13e>
c00150ef:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00150f2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00150f7:	83 c0 0c             	add    eax,0xc
c00150fa:	8b 00                	mov    eax,DWORD PTR [eax]
c00150fc:	6a 00                	push   0x0
c00150fe:	6a 00                	push   0x0
c0015100:	6a 00                	push   0x0
c0015102:	52                   	push   edx
c0015103:	ff d0                	call   eax
c0015105:	83 c4 10             	add    esp,0x10
c0015108:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001510c:	74 15                	je     c0015123 <setupInterruptController()+0xff>
c001510e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015111:	8b 00                	mov    eax,DWORD PTR [eax]
c0015113:	83 c0 04             	add    eax,0x4
c0015116:	8b 00                	mov    eax,DWORD PTR [eax]
c0015118:	83 ec 0c             	sub    esp,0xc
c001511b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001511e:	ff d0                	call   eax
c0015120:	83 c4 10             	add    esp,0x10
c0015123:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c001512a:	83 ec 0c             	sub    esp,0xc
c001512d:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015130:	e8 9f a3 ff ff       	call   c000f4d4 <malloc>
c0015135:	83 c4 10             	add    esp,0x10
c0015138:	89 c3                	mov    ebx,eax
c001513a:	83 ec 0c             	sub    esp,0xc
c001513d:	53                   	push   ebx
c001513e:	e8 d9 f1 00 00       	call   c002431c <APIC::APIC()>
c0015143:	83 c4 10             	add    esp,0x10
c0015146:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015149:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001514c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001514f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015151:	83 c0 08             	add    eax,0x8
c0015154:	8b 00                	mov    eax,DWORD PTR [eax]
c0015156:	6a 00                	push   0x0
c0015158:	6a 00                	push   0x0
c001515a:	6a 00                	push   0x0
c001515c:	52                   	push   edx
c001515d:	ff d0                	call   eax
c001515f:	83 c4 10             	add    esp,0x10
c0015162:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c0015167:	83 ec 08             	sub    esp,0x8
c001516a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001516d:	50                   	push   eax
c001516e:	e8 eb e9 ff ff       	call   c0013b5e <Device::addChild(Device*)>
c0015173:	83 c4 10             	add    esp,0x10
c0015176:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015179:	8b 00                	mov    eax,DWORD PTR [eax]
c001517b:	83 c0 24             	add    eax,0x24
c001517e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015180:	6a 00                	push   0x0
c0015182:	68 1e 4a 01 c0       	push   0xc0014a1e
c0015187:	6a 00                	push   0x0
c0015189:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001518c:	ff d0                	call   eax
c001518e:	83 c4 10             	add    esp,0x10
c0015191:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015194:	8b 00                	mov    eax,DWORD PTR [eax]
c0015196:	83 c0 24             	add    eax,0x24
c0015199:	8b 00                	mov    eax,DWORD PTR [eax]
c001519b:	6a 00                	push   0x0
c001519d:	68 1e 4a 01 c0       	push   0xc0014a1e
c00151a2:	6a 01                	push   0x1
c00151a4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151a7:	ff d0                	call   eax
c00151a9:	83 c4 10             	add    esp,0x10
c00151ac:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151af:	8b 00                	mov    eax,DWORD PTR [eax]
c00151b1:	83 c0 24             	add    eax,0x24
c00151b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00151b6:	6a 00                	push   0x0
c00151b8:	68 f7 43 01 c0       	push   0xc00143f7
c00151bd:	6a 02                	push   0x2
c00151bf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151c2:	ff d0                	call   eax
c00151c4:	83 c4 10             	add    esp,0x10
c00151c7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00151cc:	83 c0 24             	add    eax,0x24
c00151cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00151d1:	6a 00                	push   0x0
c00151d3:	68 1e 4a 01 c0       	push   0xc0014a1e
c00151d8:	6a 03                	push   0x3
c00151da:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151dd:	ff d0                	call   eax
c00151df:	83 c4 10             	add    esp,0x10
c00151e2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00151e7:	83 c0 24             	add    eax,0x24
c00151ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00151ec:	6a 00                	push   0x0
c00151ee:	68 1e 4a 01 c0       	push   0xc0014a1e
c00151f3:	6a 04                	push   0x4
c00151f5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151f8:	ff d0                	call   eax
c00151fa:	83 c4 10             	add    esp,0x10
c00151fd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015200:	8b 00                	mov    eax,DWORD PTR [eax]
c0015202:	83 c0 24             	add    eax,0x24
c0015205:	8b 00                	mov    eax,DWORD PTR [eax]
c0015207:	6a 00                	push   0x0
c0015209:	68 1e 4a 01 c0       	push   0xc0014a1e
c001520e:	6a 05                	push   0x5
c0015210:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015213:	ff d0                	call   eax
c0015215:	83 c4 10             	add    esp,0x10
c0015218:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001521b:	8b 00                	mov    eax,DWORD PTR [eax]
c001521d:	83 c0 24             	add    eax,0x24
c0015220:	8b 00                	mov    eax,DWORD PTR [eax]
c0015222:	6a 00                	push   0x0
c0015224:	68 3d 4a 01 c0       	push   0xc0014a3d
c0015229:	6a 06                	push   0x6
c001522b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001522e:	ff d0                	call   eax
c0015230:	83 c4 10             	add    esp,0x10
c0015233:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015236:	8b 00                	mov    eax,DWORD PTR [eax]
c0015238:	83 c0 24             	add    eax,0x24
c001523b:	8b 00                	mov    eax,DWORD PTR [eax]
c001523d:	6a 00                	push   0x0
c001523f:	68 9f 49 01 c0       	push   0xc001499f
c0015244:	6a 07                	push   0x7
c0015246:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015249:	ff d0                	call   eax
c001524b:	83 c4 10             	add    esp,0x10
c001524e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015251:	8b 00                	mov    eax,DWORD PTR [eax]
c0015253:	83 c0 24             	add    eax,0x24
c0015256:	8b 00                	mov    eax,DWORD PTR [eax]
c0015258:	6a 00                	push   0x0
c001525a:	68 12 42 01 c0       	push   0xc0014212
c001525f:	6a 08                	push   0x8
c0015261:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015264:	ff d0                	call   eax
c0015266:	83 c4 10             	add    esp,0x10
c0015269:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001526c:	8b 00                	mov    eax,DWORD PTR [eax]
c001526e:	83 c0 24             	add    eax,0x24
c0015271:	8b 00                	mov    eax,DWORD PTR [eax]
c0015273:	6a 00                	push   0x0
c0015275:	68 1e 4a 01 c0       	push   0xc0014a1e
c001527a:	6a 09                	push   0x9
c001527c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001527f:	ff d0                	call   eax
c0015281:	83 c4 10             	add    esp,0x10
c0015284:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015287:	8b 00                	mov    eax,DWORD PTR [eax]
c0015289:	83 c0 24             	add    eax,0x24
c001528c:	8b 00                	mov    eax,DWORD PTR [eax]
c001528e:	6a 00                	push   0x0
c0015290:	68 1e 4a 01 c0       	push   0xc0014a1e
c0015295:	6a 0a                	push   0xa
c0015297:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001529a:	ff d0                	call   eax
c001529c:	83 c4 10             	add    esp,0x10
c001529f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00152a4:	83 c0 24             	add    eax,0x24
c00152a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00152a9:	6a 00                	push   0x0
c00152ab:	68 1e 4a 01 c0       	push   0xc0014a1e
c00152b0:	6a 0b                	push   0xb
c00152b2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152b5:	ff d0                	call   eax
c00152b7:	83 c4 10             	add    esp,0x10
c00152ba:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00152bf:	83 c0 24             	add    eax,0x24
c00152c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00152c4:	6a 00                	push   0x0
c00152c6:	68 1e 4a 01 c0       	push   0xc0014a1e
c00152cb:	6a 0c                	push   0xc
c00152cd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152d0:	ff d0                	call   eax
c00152d2:	83 c4 10             	add    esp,0x10
c00152d5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00152da:	83 c0 24             	add    eax,0x24
c00152dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00152df:	6a 00                	push   0x0
c00152e1:	68 ce 49 01 c0       	push   0xc00149ce
c00152e6:	6a 0d                	push   0xd
c00152e8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152eb:	ff d0                	call   eax
c00152ed:	83 c4 10             	add    esp,0x10
c00152f0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00152f5:	83 c0 24             	add    eax,0x24
c00152f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00152fa:	6a 00                	push   0x0
c00152fc:	68 07 4a 01 c0       	push   0xc0014a07
c0015301:	6a 0e                	push   0xe
c0015303:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015306:	ff d0                	call   eax
c0015308:	83 c4 10             	add    esp,0x10
c001530b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001530e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015310:	83 c0 24             	add    eax,0x24
c0015313:	8b 00                	mov    eax,DWORD PTR [eax]
c0015315:	6a 00                	push   0x0
c0015317:	68 1e 4a 01 c0       	push   0xc0014a1e
c001531c:	6a 0f                	push   0xf
c001531e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015321:	ff d0                	call   eax
c0015323:	83 c4 10             	add    esp,0x10
c0015326:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015329:	8b 00                	mov    eax,DWORD PTR [eax]
c001532b:	83 c0 24             	add    eax,0x24
c001532e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015330:	6a 00                	push   0x0
c0015332:	68 1e 4a 01 c0       	push   0xc0014a1e
c0015337:	6a 10                	push   0x10
c0015339:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001533c:	ff d0                	call   eax
c001533e:	83 c4 10             	add    esp,0x10
c0015341:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015344:	8b 00                	mov    eax,DWORD PTR [eax]
c0015346:	83 c0 24             	add    eax,0x24
c0015349:	8b 00                	mov    eax,DWORD PTR [eax]
c001534b:	6a 00                	push   0x0
c001534d:	68 1e 4a 01 c0       	push   0xc0014a1e
c0015352:	6a 11                	push   0x11
c0015354:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015357:	ff d0                	call   eax
c0015359:	83 c4 10             	add    esp,0x10
c001535c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001535f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015361:	83 c0 24             	add    eax,0x24
c0015364:	8b 00                	mov    eax,DWORD PTR [eax]
c0015366:	6a 00                	push   0x0
c0015368:	68 1e 4a 01 c0       	push   0xc0014a1e
c001536d:	6a 12                	push   0x12
c001536f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015372:	ff d0                	call   eax
c0015374:	83 c4 10             	add    esp,0x10
c0015377:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001537a:	8b 00                	mov    eax,DWORD PTR [eax]
c001537c:	83 c0 24             	add    eax,0x24
c001537f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015381:	6a 00                	push   0x0
c0015383:	68 1e 4a 01 c0       	push   0xc0014a1e
c0015388:	6a 13                	push   0x13
c001538a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001538d:	ff d0                	call   eax
c001538f:	83 c4 10             	add    esp,0x10
c0015392:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015395:	8b 00                	mov    eax,DWORD PTR [eax]
c0015397:	83 c0 24             	add    eax,0x24
c001539a:	8b 00                	mov    eax,DWORD PTR [eax]
c001539c:	6a 00                	push   0x0
c001539e:	68 1e 4a 01 c0       	push   0xc0014a1e
c00153a3:	6a 14                	push   0x14
c00153a5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153a8:	ff d0                	call   eax
c00153aa:	83 c4 10             	add    esp,0x10
c00153ad:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00153b2:	83 c0 24             	add    eax,0x24
c00153b5:	8b 00                	mov    eax,DWORD PTR [eax]
c00153b7:	6a 00                	push   0x0
c00153b9:	68 1e 4a 01 c0       	push   0xc0014a1e
c00153be:	6a 1e                	push   0x1e
c00153c0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153c3:	ff d0                	call   eax
c00153c5:	83 c4 10             	add    esp,0x10
c00153c8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00153cd:	83 c0 24             	add    eax,0x24
c00153d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00153d2:	6a 00                	push   0x0
c00153d4:	68 ad b6 01 c0       	push   0xc001b6ad
c00153d9:	6a 60                	push   0x60
c00153db:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153de:	ff d0                	call   eax
c00153e0:	83 c4 10             	add    esp,0x10
c00153e3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153e6:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00153e9:	c9                   	leave  
c00153ea:	c3                   	ret    
c00153eb:	90                   	nop

c00153ec <InterruptController::convertLegacyIRQNumber(int)>:
c00153ec:	55                   	push   ebp
c00153ed:	89 e5                	mov    ebp,esp
c00153ef:	83 ec 08             	sub    esp,0x8
c00153f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153f5:	83 ec 0c             	sub    esp,0xc
c00153f8:	50                   	push   eax
c00153f9:	e8 4c ea ff ff       	call   c0013e4a <Device::getName()>
c00153fe:	83 c4 10             	add    esp,0x10
c0015401:	8a 00                	mov    al,BYTE PTR [eax]
c0015403:	3c 41                	cmp    al,0x41
c0015405:	0f 94 c0             	sete   al
c0015408:	84 c0                	test   al,al
c001540a:	74 28                	je     c0015434 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c001540c:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015410:	7f 12                	jg     c0015424 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015412:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015415:	05 a0 bb 02 c0       	add    eax,0xc002bba0
c001541a:	8a 00                	mov    al,BYTE PTR [eax]
c001541c:	0f b6 c0             	movzx  eax,al
c001541f:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015422:	eb 10                	jmp    c0015434 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015424:	83 ec 0c             	sub    esp,0xc
c0015427:	68 d4 95 02 c0       	push   0xc00295d4
c001542c:	e8 58 44 00 00       	call   c0019889 <Krnl::panic(char const*)>
c0015431:	83 c4 10             	add    esp,0x10
c0015434:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015437:	c9                   	leave  
c0015438:	c3                   	ret    
c0015439:	90                   	nop

c001543a <startGUI(void*)>:
c001543a:	55                   	push   ebp
c001543b:	89 e5                	mov    ebp,esp
c001543d:	53                   	push   ebx
c001543e:	83 ec 04             	sub    esp,0x4
c0015441:	e8 d4 78 00 00       	call   c001cd1a <unlockScheduler()>
c0015446:	8b 1d 48 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c948
c001544c:	83 ec 08             	sub    esp,0x8
c001544f:	6a 01                	push   0x1
c0015451:	68 bc 98 02 c0       	push   0xc00298bc
c0015456:	e8 49 72 00 00       	call   c001c6a4 <Thr::loadDLL(char const*, bool)>
c001545b:	83 c4 10             	add    esp,0x10
c001545e:	83 ec 08             	sub    esp,0x8
c0015461:	53                   	push   ebx
c0015462:	50                   	push   eax
c0015463:	e8 4b 74 00 00       	call   c001c8b3 <Thr::executeDLL(unsigned long, void*)>
c0015468:	83 c4 10             	add    esp,0x10
c001546b:	8b 1d 48 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c948
c0015471:	83 ec 08             	sub    esp,0x8
c0015474:	6a 01                	push   0x1
c0015476:	68 d6 98 02 c0       	push   0xc00298d6
c001547b:	e8 24 72 00 00       	call   c001c6a4 <Thr::loadDLL(char const*, bool)>
c0015480:	83 c4 10             	add    esp,0x10
c0015483:	83 ec 08             	sub    esp,0x8
c0015486:	53                   	push   ebx
c0015487:	50                   	push   eax
c0015488:	e8 26 74 00 00       	call   c001c8b3 <Thr::executeDLL(unsigned long, void*)>
c001548d:	83 c4 10             	add    esp,0x10
c0015490:	90                   	nop
c0015491:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015494:	c9                   	leave  
c0015495:	c3                   	ret    

c0015496 <startGUIVESA(void*)>:
c0015496:	55                   	push   ebp
c0015497:	89 e5                	mov    ebp,esp
c0015499:	53                   	push   ebx
c001549a:	83 ec 04             	sub    esp,0x4
c001549d:	e8 78 78 00 00       	call   c001cd1a <unlockScheduler()>
c00154a2:	8b 1d 48 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c948
c00154a8:	83 ec 08             	sub    esp,0x8
c00154ab:	6a 01                	push   0x1
c00154ad:	68 f0 98 02 c0       	push   0xc00298f0
c00154b2:	e8 ed 71 00 00       	call   c001c6a4 <Thr::loadDLL(char const*, bool)>
c00154b7:	83 c4 10             	add    esp,0x10
c00154ba:	83 ec 08             	sub    esp,0x8
c00154bd:	53                   	push   ebx
c00154be:	50                   	push   eax
c00154bf:	e8 ef 73 00 00       	call   c001c8b3 <Thr::executeDLL(unsigned long, void*)>
c00154c4:	83 c4 10             	add    esp,0x10
c00154c7:	8b 1d 48 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c948
c00154cd:	83 ec 08             	sub    esp,0x8
c00154d0:	6a 01                	push   0x1
c00154d2:	68 d6 98 02 c0       	push   0xc00298d6
c00154d7:	e8 c8 71 00 00       	call   c001c6a4 <Thr::loadDLL(char const*, bool)>
c00154dc:	83 c4 10             	add    esp,0x10
c00154df:	83 ec 08             	sub    esp,0x8
c00154e2:	53                   	push   ebx
c00154e3:	50                   	push   eax
c00154e4:	e8 ca 73 00 00       	call   c001c8b3 <Thr::executeDLL(unsigned long, void*)>
c00154e9:	83 c4 10             	add    esp,0x10
c00154ec:	90                   	nop
c00154ed:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00154f0:	c9                   	leave  
c00154f1:	c3                   	ret    

c00154f2 <sendKeyToTerminal(unsigned char)>:
c00154f2:	55                   	push   ebp
c00154f3:	89 e5                	mov    ebp,esp
c00154f5:	83 ec 28             	sub    esp,0x28
c00154f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154fb:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00154fe:	a1 24 ca 02 c0       	mov    eax,ds:0xc002ca24
c0015503:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015507:	83 ec 08             	sub    esp,0x8
c001550a:	52                   	push   edx
c001550b:	50                   	push   eax
c001550c:	e8 3d ba ff ff       	call   c0010f4e <VgaText::receiveKey(unsigned char)>
c0015511:	83 c4 10             	add    esp,0x10
c0015514:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015518:	75 41                	jne    c001555b <sendKeyToTerminal(unsigned char)+0x69>
c001551a:	e8 20 78 00 00       	call   c001cd3f <lockStuff()>
c001551f:	a1 00 cb 02 c0       	mov    eax,ds:0xc002cb00
c0015524:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015527:	c7 05 00 cb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cb00,0x0
c0015531:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015535:	74 1f                	je     c0015556 <sendKeyToTerminal(unsigned char)+0x64>
c0015537:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001553a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001553d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015540:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015543:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015546:	83 ec 0c             	sub    esp,0xc
c0015549:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001554c:	e8 df 7d 00 00       	call   c001d330 <unblockTask(ThreadControlBlock*)>
c0015551:	83 c4 10             	add    esp,0x10
c0015554:	eb db                	jmp    c0015531 <sendKeyToTerminal(unsigned char)+0x3f>
c0015556:	e8 7e 7b 00 00       	call   c001d0d9 <unlockStuff()>
c001555b:	90                   	nop
c001555c:	c9                   	leave  
c001555d:	c3                   	ret    

c001555e <sendKeyboardToken(KeyboardToken)>:
c001555e:	55                   	push   ebp
c001555f:	89 e5                	mov    ebp,esp
c0015561:	83 ec 18             	sub    esp,0x18
c0015564:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015567:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001556a:	0f b7 c0             	movzx  eax,ax
c001556d:	83 f2 01             	xor    edx,0x1
c0015570:	88 90 20 cb 02 c0    	mov    BYTE PTR [eax-0x3ffd34e0],dl
c0015576:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015579:	66 3d 03 02          	cmp    ax,0x203
c001557d:	75 07                	jne    c0015586 <sendKeyboardToken(KeyboardToken)+0x28>
c001557f:	a0 20 cc 02 c0       	mov    al,ds:0xc002cc20
c0015584:	84 c0                	test   al,al
c0015586:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001558a:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c001558d:	a0 28 cf 02 c0       	mov    al,ds:0xc002cf28
c0015592:	38 c2                	cmp    dl,al
c0015594:	74 1c                	je     c00155b2 <sendKeyboardToken(KeyboardToken)+0x54>
c0015596:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015599:	a2 28 cf 02 c0       	mov    ds:0xc002cf28,al
c001559e:	a0 28 cf 02 c0       	mov    al,ds:0xc002cf28
c00155a3:	0f b6 c0             	movzx  eax,al
c00155a6:	83 ec 0c             	sub    esp,0xc
c00155a9:	50                   	push   eax
c00155aa:	e8 ff ab ff ff       	call   c00101ae <setTerminalScrollLock(bool)>
c00155af:	83 c4 10             	add    esp,0x10
c00155b2:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c00155b5:	84 c0                	test   al,al
c00155b7:	0f 84 ae 00 00 00    	je     c001566b <sendKeyboardToken(KeyboardToken)+0x10d>
c00155bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155c0:	66 3d 10 03          	cmp    ax,0x310
c00155c4:	75 06                	jne    c00155cc <sendKeyboardToken(KeyboardToken)+0x6e>
c00155c6:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c00155cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155cf:	66 3d 11 03          	cmp    ax,0x311
c00155d3:	75 06                	jne    c00155db <sendKeyboardToken(KeyboardToken)+0x7d>
c00155d5:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c00155db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155de:	66 3d 12 03          	cmp    ax,0x312
c00155e2:	75 06                	jne    c00155ea <sendKeyboardToken(KeyboardToken)+0x8c>
c00155e4:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c00155ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155ed:	66 3d 13 03          	cmp    ax,0x313
c00155f1:	75 06                	jne    c00155f9 <sendKeyboardToken(KeyboardToken)+0x9b>
c00155f3:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c00155f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155fc:	66 3d 14 03          	cmp    ax,0x314
c0015600:	75 06                	jne    c0015608 <sendKeyboardToken(KeyboardToken)+0xaa>
c0015602:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015608:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001560b:	66 3d 15 03          	cmp    ax,0x315
c001560f:	75 06                	jne    c0015617 <sendKeyboardToken(KeyboardToken)+0xb9>
c0015611:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015617:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001561a:	66 3d 16 03          	cmp    ax,0x316
c001561e:	75 06                	jne    c0015626 <sendKeyboardToken(KeyboardToken)+0xc8>
c0015620:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015626:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015629:	66 3d 17 03          	cmp    ax,0x317
c001562d:	75 06                	jne    c0015635 <sendKeyboardToken(KeyboardToken)+0xd7>
c001562f:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015635:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015638:	66 3d 18 03          	cmp    ax,0x318
c001563c:	75 06                	jne    c0015644 <sendKeyboardToken(KeyboardToken)+0xe6>
c001563e:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015644:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015647:	66 3d 19 03          	cmp    ax,0x319
c001564b:	75 06                	jne    c0015653 <sendKeyboardToken(KeyboardToken)+0xf5>
c001564d:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015653:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015656:	66 3d 1a 03          	cmp    ax,0x31a
c001565a:	0f 85 c9 00 00 00    	jne    c0015729 <sendKeyboardToken(KeyboardToken)+0x1cb>
c0015660:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015666:	e9 be 00 00 00       	jmp    c0015729 <sendKeyboardToken(KeyboardToken)+0x1cb>
c001566b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001566e:	66 3d 10 03          	cmp    ax,0x310
c0015672:	75 0a                	jne    c001567e <sendKeyboardToken(KeyboardToken)+0x120>
c0015674:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c001567a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001567e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015681:	66 3d 11 03          	cmp    ax,0x311
c0015685:	75 0a                	jne    c0015691 <sendKeyboardToken(KeyboardToken)+0x133>
c0015687:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c001568d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015691:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015694:	66 3d 12 03          	cmp    ax,0x312
c0015698:	75 0a                	jne    c00156a4 <sendKeyboardToken(KeyboardToken)+0x146>
c001569a:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c00156a0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00156a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156a7:	66 3d 13 03          	cmp    ax,0x313
c00156ab:	75 0a                	jne    c00156b7 <sendKeyboardToken(KeyboardToken)+0x159>
c00156ad:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c00156b3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00156b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156ba:	66 3d 14 03          	cmp    ax,0x314
c00156be:	75 0a                	jne    c00156ca <sendKeyboardToken(KeyboardToken)+0x16c>
c00156c0:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c00156c6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00156ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156cd:	66 3d 15 03          	cmp    ax,0x315
c00156d1:	75 0a                	jne    c00156dd <sendKeyboardToken(KeyboardToken)+0x17f>
c00156d3:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00156d9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00156dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156e0:	66 3d 16 03          	cmp    ax,0x316
c00156e4:	75 0a                	jne    c00156f0 <sendKeyboardToken(KeyboardToken)+0x192>
c00156e6:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c00156ec:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00156f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156f3:	66 3d 17 03          	cmp    ax,0x317
c00156f7:	75 0a                	jne    c0015703 <sendKeyboardToken(KeyboardToken)+0x1a5>
c00156f9:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00156ff:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015703:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015706:	66 3d 18 03          	cmp    ax,0x318
c001570a:	75 0a                	jne    c0015716 <sendKeyboardToken(KeyboardToken)+0x1b8>
c001570c:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015712:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015716:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015719:	66 3d 19 03          	cmp    ax,0x319
c001571d:	75 0a                	jne    c0015729 <sendKeyboardToken(KeyboardToken)+0x1cb>
c001571f:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015725:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015729:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001572c:	66 3d 00 02          	cmp    ax,0x200
c0015730:	75 2c                	jne    c001575e <sendKeyboardToken(KeyboardToken)+0x200>
c0015732:	a0 20 cf 02 c0       	mov    al,ds:0xc002cf20
c0015737:	83 f0 01             	xor    eax,0x1
c001573a:	84 c0                	test   al,al
c001573c:	74 20                	je     c001575e <sendKeyboardToken(KeyboardToken)+0x200>
c001573e:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0015743:	6a 01                	push   0x1
c0015745:	6a 00                	push   0x0
c0015747:	68 3a 54 01 c0       	push   0xc001543a
c001574c:	50                   	push   eax
c001574d:	e8 f8 76 00 00       	call   c001ce4a <Process::createThread(void (*)(void*), void*, int)>
c0015752:	83 c4 10             	add    esp,0x10
c0015755:	c6 05 20 cf 02 c0 01 	mov    BYTE PTR ds:0xc002cf20,0x1
c001575c:	eb 33                	jmp    c0015791 <sendKeyboardToken(KeyboardToken)+0x233>
c001575e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015761:	66 3d 01 02          	cmp    ax,0x201
c0015765:	75 2a                	jne    c0015791 <sendKeyboardToken(KeyboardToken)+0x233>
c0015767:	a0 20 cf 02 c0       	mov    al,ds:0xc002cf20
c001576c:	83 f0 01             	xor    eax,0x1
c001576f:	84 c0                	test   al,al
c0015771:	74 1e                	je     c0015791 <sendKeyboardToken(KeyboardToken)+0x233>
c0015773:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0015778:	6a 01                	push   0x1
c001577a:	6a 00                	push   0x0
c001577c:	68 96 54 01 c0       	push   0xc0015496
c0015781:	50                   	push   eax
c0015782:	e8 c3 76 00 00       	call   c001ce4a <Process::createThread(void (*)(void*), void*, int)>
c0015787:	83 c4 10             	add    esp,0x10
c001578a:	c6 05 20 cf 02 c0 01 	mov    BYTE PTR ds:0xc002cf20,0x1
c0015791:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015794:	66 3d 1d 03          	cmp    ax,0x31d
c0015798:	75 06                	jne    c00157a0 <sendKeyboardToken(KeyboardToken)+0x242>
c001579a:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c00157a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157a3:	66 3d 1c 03          	cmp    ax,0x31c
c00157a7:	75 06                	jne    c00157af <sendKeyboardToken(KeyboardToken)+0x251>
c00157a9:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c00157af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157b2:	66 3d 1b 03          	cmp    ax,0x31b
c00157b6:	75 06                	jne    c00157be <sendKeyboardToken(KeyboardToken)+0x260>
c00157b8:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c00157be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157c1:	66 3d 1e 03          	cmp    ax,0x31e
c00157c5:	75 06                	jne    c00157cd <sendKeyboardToken(KeyboardToken)+0x26f>
c00157c7:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c00157cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157d0:	66 3d 1f 03          	cmp    ax,0x31f
c00157d4:	75 06                	jne    c00157dc <sendKeyboardToken(KeyboardToken)+0x27e>
c00157d6:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00157dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157df:	66 3d 1a 03          	cmp    ax,0x31a
c00157e3:	75 06                	jne    c00157eb <sendKeyboardToken(KeyboardToken)+0x28d>
c00157e5:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00157eb:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c00157ef:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00157f2:	83 f0 01             	xor    eax,0x1
c00157f5:	84 c0                	test   al,al
c00157f7:	74 77                	je     c0015870 <sendKeyboardToken(KeyboardToken)+0x312>
c00157f9:	a0 21 cc 02 c0       	mov    al,ds:0xc002cc21
c00157fe:	84 c0                	test   al,al
c0015800:	74 41                	je     c0015843 <sendKeyboardToken(KeyboardToken)+0x2e5>
c0015802:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015806:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c001580a:	74 2b                	je     c0015837 <sendKeyboardToken(KeyboardToken)+0x2d9>
c001580c:	8b 15 24 cf 02 c0    	mov    edx,DWORD PTR ds:0xc002cf24
c0015812:	89 d0                	mov    eax,edx
c0015814:	c1 e0 02             	shl    eax,0x2
c0015817:	01 d0                	add    eax,edx
c0015819:	01 c0                	add    eax,eax
c001581b:	a3 24 cf 02 c0       	mov    ds:0xc002cf24,eax
c0015820:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015823:	0f b7 c0             	movzx  eax,ax
c0015826:	8d 50 d0             	lea    edx,[eax-0x30]
c0015829:	a1 24 cf 02 c0       	mov    eax,ds:0xc002cf24
c001582e:	01 d0                	add    eax,edx
c0015830:	a3 24 cf 02 c0       	mov    ds:0xc002cf24,eax
c0015835:	eb 6d                	jmp    c00158a4 <sendKeyboardToken(KeyboardToken)+0x346>
c0015837:	c7 05 24 cf 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cf24,0x0
c0015841:	eb 61                	jmp    c00158a4 <sendKeyboardToken(KeyboardToken)+0x346>
c0015843:	a1 24 cf 02 c0       	mov    eax,ds:0xc002cf24
c0015848:	85 c0                	test   eax,eax
c001584a:	74 18                	je     c0015864 <sendKeyboardToken(KeyboardToken)+0x306>
c001584c:	a1 24 cf 02 c0       	mov    eax,ds:0xc002cf24
c0015851:	0f b6 c0             	movzx  eax,al
c0015854:	83 ec 0c             	sub    esp,0xc
c0015857:	50                   	push   eax
c0015858:	e8 95 fc ff ff       	call   c00154f2 <sendKeyToTerminal(unsigned char)>
c001585d:	83 c4 10             	add    esp,0x10
c0015860:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015864:	c7 05 24 cf 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cf24,0x0
c001586e:	eb 34                	jmp    c00158a4 <sendKeyboardToken(KeyboardToken)+0x346>
c0015870:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015873:	66 3d 01 01          	cmp    ax,0x101
c0015877:	75 2b                	jne    c00158a4 <sendKeyboardToken(KeyboardToken)+0x346>
c0015879:	a1 24 cf 02 c0       	mov    eax,ds:0xc002cf24
c001587e:	85 c0                	test   eax,eax
c0015880:	74 18                	je     c001589a <sendKeyboardToken(KeyboardToken)+0x33c>
c0015882:	a1 24 cf 02 c0       	mov    eax,ds:0xc002cf24
c0015887:	0f b6 c0             	movzx  eax,al
c001588a:	83 ec 0c             	sub    esp,0xc
c001588d:	50                   	push   eax
c001588e:	e8 5f fc ff ff       	call   c00154f2 <sendKeyToTerminal(unsigned char)>
c0015893:	83 c4 10             	add    esp,0x10
c0015896:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001589a:	c7 05 24 cf 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cf24,0x0
c00158a4:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00158a7:	83 f0 01             	xor    eax,0x1
c00158aa:	84 c0                	test   al,al
c00158ac:	74 4c                	je     c00158fa <sendKeyboardToken(KeyboardToken)+0x39c>
c00158ae:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00158b1:	83 f0 01             	xor    eax,0x1
c00158b4:	84 c0                	test   al,al
c00158b6:	74 42                	je     c00158fa <sendKeyboardToken(KeyboardToken)+0x39c>
c00158b8:	a0 20 cc 02 c0       	mov    al,ds:0xc002cc20
c00158bd:	83 f0 01             	xor    eax,0x1
c00158c0:	84 c0                	test   al,al
c00158c2:	74 36                	je     c00158fa <sendKeyboardToken(KeyboardToken)+0x39c>
c00158c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158c7:	66 83 f8 1f          	cmp    ax,0x1f
c00158cb:	76 09                	jbe    c00158d6 <sendKeyboardToken(KeyboardToken)+0x378>
c00158cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158d0:	66 83 f8 7e          	cmp    ax,0x7e
c00158d4:	76 12                	jbe    c00158e8 <sendKeyboardToken(KeyboardToken)+0x38a>
c00158d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158d9:	66 83 f8 0a          	cmp    ax,0xa
c00158dd:	74 09                	je     c00158e8 <sendKeyboardToken(KeyboardToken)+0x38a>
c00158df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158e2:	66 83 f8 08          	cmp    ax,0x8
c00158e6:	75 12                	jne    c00158fa <sendKeyboardToken(KeyboardToken)+0x39c>
c00158e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158eb:	0f b6 c0             	movzx  eax,al
c00158ee:	83 ec 0c             	sub    esp,0xc
c00158f1:	50                   	push   eax
c00158f2:	e8 fb fb ff ff       	call   c00154f2 <sendKeyToTerminal(unsigned char)>
c00158f7:	83 c4 10             	add    esp,0x10
c00158fa:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00158fd:	83 f0 01             	xor    eax,0x1
c0015900:	84 c0                	test   al,al
c0015902:	74 4f                	je     c0015953 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015904:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015907:	83 f0 01             	xor    eax,0x1
c001590a:	84 c0                	test   al,al
c001590c:	74 45                	je     c0015953 <sendKeyboardToken(KeyboardToken)+0x3f5>
c001590e:	a0 20 cc 02 c0       	mov    al,ds:0xc002cc20
c0015913:	84 c0                	test   al,al
c0015915:	74 3c                	je     c0015953 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015917:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001591a:	66 83 f8 3f          	cmp    ax,0x3f
c001591e:	76 33                	jbe    c0015953 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015920:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015923:	66 83 f8 7f          	cmp    ax,0x7f
c0015927:	77 2a                	ja     c0015953 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015929:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001592c:	88 c2                	mov    dl,al
c001592e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015931:	66 83 f8 5f          	cmp    ax,0x5f
c0015935:	76 04                	jbe    c001593b <sendKeyboardToken(KeyboardToken)+0x3dd>
c0015937:	b0 20                	mov    al,0x20
c0015939:	eb 02                	jmp    c001593d <sendKeyboardToken(KeyboardToken)+0x3df>
c001593b:	b0 00                	mov    al,0x0
c001593d:	29 c2                	sub    edx,eax
c001593f:	88 d0                	mov    al,dl
c0015941:	83 e8 40             	sub    eax,0x40
c0015944:	0f b6 c0             	movzx  eax,al
c0015947:	83 ec 0c             	sub    esp,0xc
c001594a:	50                   	push   eax
c001594b:	e8 a2 fb ff ff       	call   c00154f2 <sendKeyToTerminal(unsigned char)>
c0015950:	83 c4 10             	add    esp,0x10
c0015953:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015956:	66 3d 00 03          	cmp    ax,0x300
c001595a:	75 0f                	jne    c001596b <sendKeyboardToken(KeyboardToken)+0x40d>
c001595c:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001595f:	83 f0 01             	xor    eax,0x1
c0015962:	84 c0                	test   al,al
c0015964:	74 05                	je     c001596b <sendKeyboardToken(KeyboardToken)+0x40d>
c0015966:	e8 78 b0 ff ff       	call   c00109e3 <doTerminalCycle()>
c001596b:	90                   	nop
c001596c:	c9                   	leave  
c001596d:	c3                   	ret    

c001596e <clearInternalKeybuffer(VgaText*)>:
c001596e:	55                   	push   ebp
c001596f:	89 e5                	mov    ebp,esp
c0015971:	83 ec 08             	sub    esp,0x8
c0015974:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015977:	05 34 11 00 00       	add    eax,0x1134
c001597c:	83 ec 0c             	sub    esp,0xc
c001597f:	50                   	push   eax
c0015980:	e8 23 ad fe ff       	call   c00006a8 <strlen>
c0015985:	83 c4 10             	add    esp,0x10
c0015988:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001598b:	81 c2 34 11 00 00    	add    edx,0x1134
c0015991:	83 ec 04             	sub    esp,0x4
c0015994:	50                   	push   eax
c0015995:	6a 00                	push   0x0
c0015997:	52                   	push   edx
c0015998:	e8 ee ac fe ff       	call   c000068b <memset>
c001599d:	83 c4 10             	add    esp,0x10
c00159a0:	90                   	nop
c00159a1:	c9                   	leave  
c00159a2:	c3                   	ret    

c00159a3 <readKeyboard(VgaText*, char*, unsigned long)>:
c00159a3:	55                   	push   ebp
c00159a4:	89 e5                	mov    ebp,esp
c00159a6:	83 ec 18             	sub    esp,0x18
c00159a9:	fb                   	sti    
c00159aa:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c00159b1:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00159b5:	0f 84 8a 00 00 00    	je     c0015a45 <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c00159bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159be:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c00159c4:	84 c0                	test   al,al
c00159c6:	75 11                	jne    c00159d9 <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c00159c8:	e8 4b 73 00 00       	call   c001cd18 <lockScheduler()>
c00159cd:	e8 82 76 00 00       	call   c001d054 <schedule()>
c00159d2:	e8 43 73 00 00       	call   c001cd1a <unlockScheduler()>
c00159d7:	eb e2                	jmp    c00159bb <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c00159d9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00159dc:	8d 50 01             	lea    edx,[eax+0x1]
c00159df:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00159e2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00159e5:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c00159eb:	88 10                	mov    BYTE PTR [eax],dl
c00159ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159f0:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c00159f6:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c00159f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159fc:	05 34 11 00 00       	add    eax,0x1134
c0015a01:	83 ec 0c             	sub    esp,0xc
c0015a04:	50                   	push   eax
c0015a05:	e8 9e ac fe ff       	call   c00006a8 <strlen>
c0015a0a:	83 c4 10             	add    esp,0x10
c0015a0d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015a10:	81 c2 34 11 00 00    	add    edx,0x1134
c0015a16:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015a19:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015a1c:	81 c2 34 11 00 00    	add    edx,0x1134
c0015a22:	83 ec 04             	sub    esp,0x4
c0015a25:	50                   	push   eax
c0015a26:	51                   	push   ecx
c0015a27:	52                   	push   edx
c0015a28:	e8 f0 ab fe ff       	call   c000061d <memmove>
c0015a2d:	83 c4 10             	add    esp,0x10
c0015a30:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015a33:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015a36:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015a3a:	0f 85 71 ff ff ff    	jne    c00159b1 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0015a40:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a43:	eb 03                	jmp    c0015a48 <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c0015a45:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a48:	c9                   	leave  
c0015a49:	c3                   	ret    

c0015a4a <Keyboard::Keyboard(char const*)>:
c0015a4a:	83 ec 0c             	sub    esp,0xc
c0015a4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a51:	83 ec 08             	sub    esp,0x8
c0015a54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015a58:	50                   	push   eax
c0015a59:	e8 f0 e2 ff ff       	call   c0013d4e <Device::Device(char const*)>
c0015a5e:	83 c4 10             	add    esp,0x10
c0015a61:	ba 14 99 02 c0       	mov    edx,0xc0029914
c0015a66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a6a:	89 10                	mov    DWORD PTR [eax],edx
c0015a6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a70:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015a7a:	c6 05 04 cb 02 c0 01 	mov    BYTE PTR ds:0xc002cb04,0x1
c0015a81:	90                   	nop
c0015a82:	83 c4 0c             	add    esp,0xc
c0015a85:	c3                   	ret    

c0015a86 <Keyboard::~Keyboard()>:
c0015a86:	83 ec 0c             	sub    esp,0xc
c0015a89:	ba 14 99 02 c0       	mov    edx,0xc0029914
c0015a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a92:	89 10                	mov    DWORD PTR [eax],edx
c0015a94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a98:	83 ec 0c             	sub    esp,0xc
c0015a9b:	50                   	push   eax
c0015a9c:	e8 8f df ff ff       	call   c0013a30 <Device::~Device()>
c0015aa1:	83 c4 10             	add    esp,0x10
c0015aa4:	90                   	nop
c0015aa5:	83 c4 0c             	add    esp,0xc
c0015aa8:	c3                   	ret    
c0015aa9:	90                   	nop

c0015aaa <Keyboard::~Keyboard()>:
c0015aaa:	83 ec 0c             	sub    esp,0xc
c0015aad:	83 ec 0c             	sub    esp,0xc
c0015ab0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015ab4:	e8 cd ff ff ff       	call   c0015a86 <Keyboard::~Keyboard()>
c0015ab9:	83 c4 10             	add    esp,0x10
c0015abc:	83 ec 08             	sub    esp,0x8
c0015abf:	68 5c 01 00 00       	push   0x15c
c0015ac4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015ac8:	e8 c2 cb ff ff       	call   c001268f <operator delete(void*, unsigned long)>
c0015acd:	83 c4 10             	add    esp,0x10
c0015ad0:	83 c4 0c             	add    esp,0xc
c0015ad3:	c3                   	ret    

c0015ad4 <LogicalDisk::close(int, int, void*)>:
c0015ad4:	83 c8 ff             	or     eax,0xffffffff
c0015ad7:	c3                   	ret    

c0015ad8 <LogicalDisk::~LogicalDisk()>:
c0015ad8:	83 ec 0c             	sub    esp,0xc
c0015adb:	ba c4 99 02 c0       	mov    edx,0xc00299c4
c0015ae0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ae4:	89 10                	mov    DWORD PTR [eax],edx
c0015ae6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015aea:	83 ec 0c             	sub    esp,0xc
c0015aed:	50                   	push   eax
c0015aee:	e8 3d df ff ff       	call   c0013a30 <Device::~Device()>
c0015af3:	83 c4 10             	add    esp,0x10
c0015af6:	90                   	nop
c0015af7:	83 c4 0c             	add    esp,0xc
c0015afa:	c3                   	ret    
c0015afb:	90                   	nop

c0015afc <LogicalDisk::~LogicalDisk()>:
c0015afc:	83 ec 0c             	sub    esp,0xc
c0015aff:	83 ec 0c             	sub    esp,0xc
c0015b02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b06:	e8 cd ff ff ff       	call   c0015ad8 <LogicalDisk::~LogicalDisk()>
c0015b0b:	83 c4 10             	add    esp,0x10
c0015b0e:	83 ec 08             	sub    esp,0x8
c0015b11:	68 74 01 00 00       	push   0x174
c0015b16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b1a:	e8 70 cb ff ff       	call   c001268f <operator delete(void*, unsigned long)>
c0015b1f:	83 c4 10             	add    esp,0x10
c0015b22:	83 c4 0c             	add    esp,0xc
c0015b25:	c3                   	ret    

c0015b26 <LogicalDisk::open(int, int, void*)>:
c0015b26:	83 ec 18             	sub    esp,0x18
c0015b29:	68 40 99 02 c0       	push   0xc0029940
c0015b2e:	e8 56 3d 00 00       	call   c0019889 <Krnl::panic(char const*)>
c0015b33:	83 c8 ff             	or     eax,0xffffffff
c0015b36:	83 c4 1c             	add    esp,0x1c
c0015b39:	c3                   	ret    

c0015b3a <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015b3a:	53                   	push   ebx
c0015b3b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015b3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015b43:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015b47:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0015b4d:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0015b53:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0015b59:	77 10                	ja     c0015b6b <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0015b5b:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0015b61:	89 d3                	mov    ebx,edx
c0015b63:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0015b69:	72 05                	jb     c0015b70 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015b6b:	83 c8 ff             	or     eax,0xffffffff
c0015b6e:	89 c2                	mov    edx,eax
c0015b70:	5b                   	pop    ebx
c0015b71:	c3                   	ret    

c0015b72 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0015b72:	56                   	push   esi
c0015b73:	83 c8 ff             	or     eax,0xffffffff
c0015b76:	53                   	push   ebx
c0015b77:	89 c2                	mov    edx,eax
c0015b79:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015b7d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015b81:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015b85:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015b8b:	77 27                	ja     c0015bb4 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015b8d:	89 d8                	mov    eax,ebx
c0015b8f:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015b95:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015b9b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015ba0:	89 c2                	mov    edx,eax
c0015ba2:	73 10                	jae    c0015bb4 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015ba4:	89 c8                	mov    eax,ecx
c0015ba6:	89 da                	mov    edx,ebx
c0015ba8:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015bae:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015bb4:	5b                   	pop    ebx
c0015bb5:	5e                   	pop    esi
c0015bb6:	c3                   	ret    
c0015bb7:	90                   	nop

c0015bb8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015bb8:	83 ec 1c             	sub    esp,0x1c
c0015bbb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015bbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015bc3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015bc7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015bcb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015bcf:	89 04 24             	mov    DWORD PTR [esp],eax
c0015bd2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015bd6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015bda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bde:	83 ec 08             	sub    esp,0x8
c0015be1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015be5:	50                   	push   eax
c0015be6:	e8 63 e1 ff ff       	call   c0013d4e <Device::Device(char const*)>
c0015beb:	83 c4 10             	add    esp,0x10
c0015bee:	ba c4 99 02 c0       	mov    edx,0xc00299c4
c0015bf3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bf7:	89 10                	mov    DWORD PTR [eax],edx
c0015bf9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bfd:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015c04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c08:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015c0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c13:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0015c1d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015c21:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015c25:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015c29:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0015c2f:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0015c35:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015c39:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015c3c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015c40:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0015c46:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0015c4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c50:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015c54:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0015c5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c5e:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015c68:	90                   	nop
c0015c69:	83 c4 1c             	add    esp,0x1c
c0015c6c:	c3                   	ret    
c0015c6d:	90                   	nop

c0015c6e <LogicalDisk::assignDriveLetter()>:
c0015c6e:	55                   	push   ebp
c0015c6f:	57                   	push   edi
c0015c70:	56                   	push   esi
c0015c71:	53                   	push   ebx
c0015c72:	83 ec 14             	sub    esp,0x14
c0015c75:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015c79:	8b 3d 40 cf 02 c0    	mov    edi,DWORD PTR ds:0xc002cf40
c0015c7f:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0015c85:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0015c89:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0015c8f:	8b 3d 44 cf 02 c0    	mov    edi,DWORD PTR ds:0xc002cf44
c0015c95:	3c 01                	cmp    al,0x1
c0015c97:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0015c9b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0015c9f:	19 c0                	sbb    eax,eax
c0015ca1:	83 e0 02             	and    eax,0x2
c0015ca4:	83 c0 41             	add    eax,0x41
c0015ca7:	0f be e8             	movsx  ebp,al
c0015caa:	3c 43                	cmp    al,0x43
c0015cac:	75 10                	jne    c0015cbe <LogicalDisk::assignDriveLetter()+0x50>
c0015cae:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0015cb5:	75 5d                	jne    c0015d14 <LogicalDisk::assignDriveLetter()+0xa6>
c0015cb7:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015cbc:	75 56                	jne    c0015d14 <LogicalDisk::assignDriveLetter()+0xa6>
c0015cbe:	8d 75 bf             	lea    esi,[ebp-0x41]
c0015cc1:	ba 01 00 00 00       	mov    edx,0x1
c0015cc6:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015cca:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0015cce:	d3 e2                	shl    edx,cl
c0015cd0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015cd4:	89 d7                	mov    edi,edx
c0015cd6:	89 d6                	mov    esi,edx
c0015cd8:	c1 ff 1f             	sar    edi,0x1f
c0015cdb:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0015cdf:	21 f9                	and    ecx,edi
c0015ce1:	09 d1                	or     ecx,edx
c0015ce3:	75 2f                	jne    c0015d14 <LogicalDisk::assignDriveLetter()+0xa6>
c0015ce5:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015ce9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015ced:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0015cf3:	09 f2                	or     edx,esi
c0015cf5:	89 15 40 cf 02 c0    	mov    DWORD PTR ds:0xc002cf40,edx
c0015cfb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015cff:	09 fa                	or     edx,edi
c0015d01:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0015d05:	89 15 44 cf 02 c0    	mov    DWORD PTR ds:0xc002cf44,edx
c0015d0b:	89 1c bd 60 cf 02 c0 	mov    DWORD PTR [edi*4-0x3ffd30a0],ebx
c0015d12:	eb 08                	jmp    c0015d1c <LogicalDisk::assignDriveLetter()+0xae>
c0015d14:	45                   	inc    ebp
c0015d15:	40                   	inc    eax
c0015d16:	3c 5b                	cmp    al,0x5b
c0015d18:	75 90                	jne    c0015caa <LogicalDisk::assignDriveLetter()+0x3c>
c0015d1a:	31 c0                	xor    eax,eax
c0015d1c:	83 c4 14             	add    esp,0x14
c0015d1f:	5b                   	pop    ebx
c0015d20:	5e                   	pop    esi
c0015d21:	5f                   	pop    edi
c0015d22:	5d                   	pop    ebp
c0015d23:	c3                   	ret    

c0015d24 <LogicalDisk::mount()>:
c0015d24:	56                   	push   esi
c0015d25:	53                   	push   ebx
c0015d26:	51                   	push   ecx
c0015d27:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015d2b:	8b 1d c8 ca 02 c0    	mov    ebx,DWORD PTR ds:0xc002cac8
c0015d31:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0015d3b:	85 db                	test   ebx,ebx
c0015d3d:	74 50                	je     c0015d8f <LogicalDisk::mount()+0x6b>
c0015d3f:	e8 bf 6f 00 00       	call   c001cd03 <getIRQNestingLevel()>
c0015d44:	52                   	push   edx
c0015d45:	52                   	push   edx
c0015d46:	50                   	push   eax
c0015d47:	68 64 99 02 c0       	push   0xc0029964
c0015d4c:	e8 1e ca ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c0015d51:	83 c4 0c             	add    esp,0xc
c0015d54:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0015d5b:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015d5d:	83 e8 41             	sub    eax,0x41
c0015d60:	50                   	push   eax
c0015d61:	56                   	push   esi
c0015d62:	53                   	push   ebx
c0015d63:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015d66:	83 c4 10             	add    esp,0x10
c0015d69:	84 c0                	test   al,al
c0015d6b:	74 08                	je     c0015d75 <LogicalDisk::mount()+0x51>
c0015d6d:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0015d73:	eb 1c                	jmp    c0015d91 <LogicalDisk::mount()+0x6d>
c0015d75:	e8 89 6f 00 00       	call   c001cd03 <getIRQNestingLevel()>
c0015d7a:	51                   	push   ecx
c0015d7b:	51                   	push   ecx
c0015d7c:	50                   	push   eax
c0015d7d:	68 7f 99 02 c0       	push   0xc002997f
c0015d82:	e8 e8 c9 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c0015d87:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015d8a:	83 c4 10             	add    esp,0x10
c0015d8d:	eb ac                	jmp    c0015d3b <LogicalDisk::mount()+0x17>
c0015d8f:	31 c0                	xor    eax,eax
c0015d91:	5a                   	pop    edx
c0015d92:	5b                   	pop    ebx
c0015d93:	5e                   	pop    esi
c0015d94:	c3                   	ret    
c0015d95:	90                   	nop

c0015d96 <LogicalDisk::unmount()>:
c0015d96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d9a:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015da4:	c3                   	ret    
c0015da5:	90                   	nop

c0015da6 <LogicalDisk::unassignDriveLetter()>:
c0015da6:	57                   	push   edi
c0015da7:	56                   	push   esi
c0015da8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015dac:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0015db3:	84 c9                	test   cl,cl
c0015db5:	75 0f                	jne    c0015dc6 <LogicalDisk::unassignDriveLetter()+0x20>
c0015db7:	c7 44 24 0c 9a 99 02 c0 	mov    DWORD PTR [esp+0xc],0xc002999a
c0015dbf:	5e                   	pop    esi
c0015dc0:	5f                   	pop    edi
c0015dc1:	e9 c3 3a 00 00       	jmp    c0019889 <Krnl::panic(char const*)>
c0015dc6:	83 e9 41             	sub    ecx,0x41
c0015dc9:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0015dd0:	b8 01 00 00 00       	mov    eax,0x1
c0015dd5:	c7 04 8d 60 cf 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd30a0],0x0
c0015de0:	d3 e0                	shl    eax,cl
c0015de2:	89 c7                	mov    edi,eax
c0015de4:	f7 d0                	not    eax
c0015de6:	c1 ff 1f             	sar    edi,0x1f
c0015de9:	21 05 40 cf 02 c0    	and    DWORD PTR ds:0xc002cf40,eax
c0015def:	89 fe                	mov    esi,edi
c0015df1:	f7 d6                	not    esi
c0015df3:	21 35 44 cf 02 c0    	and    DWORD PTR ds:0xc002cf44,esi
c0015df9:	5e                   	pop    esi
c0015dfa:	5f                   	pop    edi
c0015dfb:	c3                   	ret    

c0015dfc <LogicalDisk::read(unsigned long long, int, void*)>:
c0015dfc:	57                   	push   edi
c0015dfd:	56                   	push   esi
c0015dfe:	53                   	push   ebx
c0015dff:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015e03:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015e07:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015e0b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015e0f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015e15:	77 41                	ja     c0015e58 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0015e17:	99                   	cdq    
c0015e18:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015e1e:	01 c8                	add    eax,ecx
c0015e20:	11 da                	adc    edx,ebx
c0015e22:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015e28:	19 d7                	sbb    edi,edx
c0015e2a:	72 33                	jb     c0015e5f <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0015e2c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015e32:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015e38:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015e3c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015e40:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015e46:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015e4c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015e50:	5b                   	pop    ebx
c0015e51:	5e                   	pop    esi
c0015e52:	5f                   	pop    edi
c0015e53:	e9 f8 09 00 00       	jmp    c0016850 <VCache::read(unsigned long long, int, void*)>
c0015e58:	b8 05 00 00 00       	mov    eax,0x5
c0015e5d:	eb 05                	jmp    c0015e64 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0015e5f:	b8 07 00 00 00       	mov    eax,0x7
c0015e64:	5b                   	pop    ebx
c0015e65:	5e                   	pop    esi
c0015e66:	5f                   	pop    edi
c0015e67:	c3                   	ret    

c0015e68 <LogicalDisk::write(unsigned long long, int, void*)>:
c0015e68:	57                   	push   edi
c0015e69:	56                   	push   esi
c0015e6a:	53                   	push   ebx
c0015e6b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015e6f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015e73:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015e77:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015e7b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015e81:	77 41                	ja     c0015ec4 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0015e83:	99                   	cdq    
c0015e84:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015e8a:	01 c8                	add    eax,ecx
c0015e8c:	11 da                	adc    edx,ebx
c0015e8e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015e94:	19 d7                	sbb    edi,edx
c0015e96:	72 33                	jb     c0015ecb <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0015e98:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015e9e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015ea4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015ea8:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015eac:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015eb2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015eb8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015ebc:	5b                   	pop    ebx
c0015ebd:	5e                   	pop    esi
c0015ebe:	5f                   	pop    edi
c0015ebf:	e9 a8 08 00 00       	jmp    c001676c <VCache::write(unsigned long long, int, void*)>
c0015ec4:	b8 05 00 00 00       	mov    eax,0x5
c0015ec9:	eb 05                	jmp    c0015ed0 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0015ecb:	b8 07 00 00 00       	mov    eax,0x7
c0015ed0:	5b                   	pop    ebx
c0015ed1:	5e                   	pop    esi
c0015ed2:	5f                   	pop    edi
c0015ed3:	c3                   	ret    

c0015ed4 <Mouse::Mouse(char const*)>:
c0015ed4:	83 ec 0c             	sub    esp,0xc
c0015ed7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015edb:	83 ec 08             	sub    esp,0x8
c0015ede:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015ee2:	50                   	push   eax
c0015ee3:	e8 66 de ff ff       	call   c0013d4e <Device::Device(char const*)>
c0015ee8:	83 c4 10             	add    esp,0x10
c0015eeb:	ba f0 99 02 c0       	mov    edx,0xc00299f0
c0015ef0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ef4:	89 10                	mov    DWORD PTR [eax],edx
c0015ef6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015efa:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0015f04:	90                   	nop
c0015f05:	83 c4 0c             	add    esp,0xc
c0015f08:	c3                   	ret    
c0015f09:	90                   	nop

c0015f0a <Mouse::~Mouse()>:
c0015f0a:	83 ec 0c             	sub    esp,0xc
c0015f0d:	ba f0 99 02 c0       	mov    edx,0xc00299f0
c0015f12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f16:	89 10                	mov    DWORD PTR [eax],edx
c0015f18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f1c:	83 ec 0c             	sub    esp,0xc
c0015f1f:	50                   	push   eax
c0015f20:	e8 0b db ff ff       	call   c0013a30 <Device::~Device()>
c0015f25:	83 c4 10             	add    esp,0x10
c0015f28:	90                   	nop
c0015f29:	83 c4 0c             	add    esp,0xc
c0015f2c:	c3                   	ret    
c0015f2d:	90                   	nop

c0015f2e <Mouse::~Mouse()>:
c0015f2e:	83 ec 0c             	sub    esp,0xc
c0015f31:	83 ec 0c             	sub    esp,0xc
c0015f34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f38:	e8 cd ff ff ff       	call   c0015f0a <Mouse::~Mouse()>
c0015f3d:	83 c4 10             	add    esp,0x10
c0015f40:	83 ec 08             	sub    esp,0x8
c0015f43:	68 58 01 00 00       	push   0x158
c0015f48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f4c:	e8 3e c7 ff ff       	call   c001268f <operator delete(void*, unsigned long)>
c0015f51:	83 c4 10             	add    esp,0x10
c0015f54:	83 c4 0c             	add    esp,0xc
c0015f57:	c3                   	ret    

c0015f58 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015f58:	55                   	push   ebp
c0015f59:	57                   	push   edi
c0015f5a:	56                   	push   esi
c0015f5b:	53                   	push   ebx
c0015f5c:	81 ec 28 01 00 00    	sub    esp,0x128
c0015f62:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0015f69:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0015f70:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0015f77:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0015f7e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015f82:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0015f86:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0015f8d:	e8 b8 de ff ff       	call   c0013e4a <Device::getName()>
c0015f92:	5a                   	pop    edx
c0015f93:	59                   	pop    ecx
c0015f94:	50                   	push   eax
c0015f95:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0015f99:	55                   	push   ebp
c0015f9a:	e8 8b a7 fe ff       	call   c000072a <strcpy>
c0015f9f:	5b                   	pop    ebx
c0015fa0:	58                   	pop    eax
c0015fa1:	68 14 9a 02 c0       	push   0xc0029a14
c0015fa6:	55                   	push   ebp
c0015fa7:	e8 35 a8 fe ff       	call   c00007e1 <strcat>
c0015fac:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0015fb3:	e8 1c 95 ff ff       	call   c000f4d4 <malloc>
c0015fb8:	83 c4 0c             	add    esp,0xc
c0015fbb:	89 c3                	mov    ebx,eax
c0015fbd:	57                   	push   edi
c0015fbe:	56                   	push   esi
c0015fbf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015fc3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015fc7:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0015fce:	55                   	push   ebp
c0015fcf:	50                   	push   eax
c0015fd0:	e8 e3 fb ff ff       	call   c0015bb8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0015fd5:	83 c4 14             	add    esp,0x14
c0015fd8:	53                   	push   ebx
c0015fd9:	e8 90 fc ff ff       	call   c0015c6e <LogicalDisk::assignDriveLetter()>
c0015fde:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015fe1:	e8 3e fd ff ff       	call   c0015d24 <LogicalDisk::mount()>
c0015fe6:	58                   	pop    eax
c0015fe7:	5a                   	pop    edx
c0015fe8:	53                   	push   ebx
c0015fe9:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0015ff0:	e8 69 db ff ff       	call   c0013b5e <Device::addChild(Device*)>
c0015ff5:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015ffb:	5b                   	pop    ebx
c0015ffc:	5e                   	pop    esi
c0015ffd:	5f                   	pop    edi
c0015ffe:	5d                   	pop    ebp
c0015fff:	c3                   	ret    

c0016000 <createPartitionsForDisk(PhysicalDisk*)>:
c0016000:	55                   	push   ebp
c0016001:	57                   	push   edi
c0016002:	56                   	push   esi
c0016003:	53                   	push   ebx
c0016004:	81 ec 5c 02 00 00    	sub    esp,0x25c
c001600a:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0016011:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016017:	3d 00 02 00 00       	cmp    eax,0x200
c001601c:	74 27                	je     c0016045 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c001601e:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016024:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c001602a:	83 ec 10             	sub    esp,0x10
c001602d:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016031:	99                   	cdq    
c0016032:	c1 e6 0a             	shl    esi,0xa
c0016035:	52                   	push   edx
c0016036:	89 fd                	mov    ebp,edi
c0016038:	50                   	push   eax
c0016039:	55                   	push   ebp
c001603a:	56                   	push   esi
c001603b:	e8 5c f3 00 00       	call   c002539c <__udivdi3>
c0016040:	e9 b1 00 00 00       	jmp    c00160f6 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016045:	83 ec 0c             	sub    esp,0xc
c0016048:	8b 03                	mov    eax,DWORD PTR [ebx]
c001604a:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c001604e:	56                   	push   esi
c001604f:	6a 01                	push   0x1
c0016051:	6a 00                	push   0x0
c0016053:	6a 00                	push   0x0
c0016055:	53                   	push   ebx
c0016056:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016059:	83 c4 20             	add    esp,0x20
c001605c:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016064:	75 0a                	jne    c0016070 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016066:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c001606e:	74 2c                	je     c001609c <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016070:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016076:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001607c:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016082:	83 ec 10             	sub    esp,0x10
c0016085:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016089:	89 f7                	mov    edi,esi
c001608b:	c1 e0 0a             	shl    eax,0xa
c001608e:	c1 ff 1f             	sar    edi,0x1f
c0016091:	57                   	push   edi
c0016092:	56                   	push   esi
c0016093:	52                   	push   edx
c0016094:	50                   	push   eax
c0016095:	e8 02 f3 00 00       	call   c002539c <__udivdi3>
c001609a:	eb 5a                	jmp    c00160f6 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001609c:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c00160a3:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c00160aa:	83 e1 7f             	and    ecx,0x7f
c00160ad:	83 e0 7f             	and    eax,0x7f
c00160b0:	01 c1                	add    ecx,eax
c00160b2:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c00160b9:	83 e0 7f             	and    eax,0x7f
c00160bc:	01 c1                	add    ecx,eax
c00160be:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c00160c5:	83 e0 7f             	and    eax,0x7f
c00160c8:	00 c1                	add    cl,al
c00160ca:	74 41                	je     c001610d <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c00160cc:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00160d2:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00160d8:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00160de:	83 ec 10             	sub    esp,0x10
c00160e1:	0f a4 c2 0a          	shld   edx,eax,0xa
c00160e5:	89 f7                	mov    edi,esi
c00160e7:	c1 e0 0a             	shl    eax,0xa
c00160ea:	c1 ff 1f             	sar    edi,0x1f
c00160ed:	57                   	push   edi
c00160ee:	56                   	push   esi
c00160ef:	52                   	push   edx
c00160f0:	50                   	push   eax
c00160f1:	e8 a6 f2 00 00       	call   c002539c <__udivdi3>
c00160f6:	83 c4 14             	add    esp,0x14
c00160f9:	52                   	push   edx
c00160fa:	50                   	push   eax
c00160fb:	6a 00                	push   0x0
c00160fd:	6a 00                	push   0x0
c00160ff:	53                   	push   ebx
c0016100:	e8 53 fe ff ff       	call   c0015f58 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016105:	83 c4 20             	add    esp,0x20
c0016108:	e9 79 01 00 00       	jmp    c0016286 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c001610d:	89 f0                	mov    eax,esi
c001610f:	31 f6                	xor    esi,esi
c0016111:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016118:	75 02                	jne    c001611c <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c001611a:	89 f1                	mov    ecx,esi
c001611c:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016123:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c001612a:	c1 e2 08             	shl    edx,0x8
c001612d:	c1 e7 10             	shl    edi,0x10
c0016130:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016138:	09 fa                	or     edx,edi
c001613a:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016142:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016149:	83 c0 10             	add    eax,0x10
c001614c:	09 fa                	or     edx,edi
c001614e:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016155:	c1 e7 18             	shl    edi,0x18
c0016158:	09 fa                	or     edx,edi
c001615a:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016161:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016165:	c1 e7 10             	shl    edi,0x10
c0016168:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c001616f:	c1 e2 08             	shl    edx,0x8
c0016172:	09 fa                	or     edx,edi
c0016174:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c001617b:	09 fa                	or     edx,edi
c001617d:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016184:	c1 e7 18             	shl    edi,0x18
c0016187:	09 fa                	or     edx,edi
c0016189:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c001618d:	46                   	inc    esi
c001618e:	83 fe 04             	cmp    esi,0x4
c0016191:	0f 85 7a ff ff ff    	jne    c0016111 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016197:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001619b:	83 f0 01             	xor    eax,0x1
c001619e:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00161a2:	75 57                	jne    c00161fb <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00161a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00161a8:	83 f0 01             	xor    eax,0x1
c00161ab:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00161af:	75 4a                	jne    c00161fb <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00161b1:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00161b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00161bd:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00161c5:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00161cb:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00161d1:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00161d7:	0f a4 c2 0a          	shld   edx,eax,0xa
c00161db:	89 f7                	mov    edi,esi
c00161dd:	c1 e0 0a             	shl    eax,0xa
c00161e0:	c1 ff 1f             	sar    edi,0x1f
c00161e3:	57                   	push   edi
c00161e4:	56                   	push   esi
c00161e5:	52                   	push   edx
c00161e6:	50                   	push   eax
c00161e7:	e8 b0 f1 00 00       	call   c002539c <__udivdi3>
c00161ec:	83 c4 10             	add    esp,0x10
c00161ef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00161f3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00161f7:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00161fb:	84 c9                	test   cl,cl
c00161fd:	74 53                	je     c0016252 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c00161ff:	0f b6 c9             	movzx  ecx,cl
c0016202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016206:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001620a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001620e:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016212:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016216:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001621a:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c001621e:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016222:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016226:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001622a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001622e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016232:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016236:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c001623a:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c001623e:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016242:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016246:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001624a:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c001624e:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016252:	31 ed                	xor    ebp,ebp
c0016254:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016258:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001625c:	89 f8                	mov    eax,edi
c001625e:	09 f0                	or     eax,esi
c0016260:	74 1e                	je     c0016280 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016262:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016266:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001626a:	89 d1                	mov    ecx,edx
c001626c:	09 c1                	or     ecx,eax
c001626e:	74 10                	je     c0016280 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016270:	83 ec 0c             	sub    esp,0xc
c0016273:	57                   	push   edi
c0016274:	56                   	push   esi
c0016275:	52                   	push   edx
c0016276:	50                   	push   eax
c0016277:	53                   	push   ebx
c0016278:	e8 db fc ff ff       	call   c0015f58 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001627d:	83 c4 20             	add    esp,0x20
c0016280:	45                   	inc    ebp
c0016281:	83 fd 04             	cmp    ebp,0x4
c0016284:	75 ce                	jne    c0016254 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016286:	81 c4 5c 02 00 00    	add    esp,0x25c
c001628c:	5b                   	pop    ebx
c001628d:	5e                   	pop    esi
c001628e:	5f                   	pop    edi
c001628f:	5d                   	pop    ebp
c0016290:	c3                   	ret    
c0016291:	90                   	nop

c0016292 <Serial::Serial(char const*)>:
c0016292:	83 ec 0c             	sub    esp,0xc
c0016295:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016299:	83 ec 08             	sub    esp,0x8
c001629c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00162a0:	50                   	push   eax
c00162a1:	e8 a8 da ff ff       	call   c0013d4e <Device::Device(char const*)>
c00162a6:	83 c4 10             	add    esp,0x10
c00162a9:	ba 28 9a 02 c0       	mov    edx,0xc0029a28
c00162ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162b2:	89 10                	mov    DWORD PTR [eax],edx
c00162b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162b8:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c00162c2:	90                   	nop
c00162c3:	83 c4 0c             	add    esp,0xc
c00162c6:	c3                   	ret    
c00162c7:	90                   	nop

c00162c8 <Serial::~Serial()>:
c00162c8:	83 ec 0c             	sub    esp,0xc
c00162cb:	ba 28 9a 02 c0       	mov    edx,0xc0029a28
c00162d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162d4:	89 10                	mov    DWORD PTR [eax],edx
c00162d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162da:	83 ec 0c             	sub    esp,0xc
c00162dd:	50                   	push   eax
c00162de:	e8 4d d7 ff ff       	call   c0013a30 <Device::~Device()>
c00162e3:	83 c4 10             	add    esp,0x10
c00162e6:	90                   	nop
c00162e7:	83 c4 0c             	add    esp,0xc
c00162ea:	c3                   	ret    
c00162eb:	90                   	nop

c00162ec <Serial::~Serial()>:
c00162ec:	83 ec 0c             	sub    esp,0xc
c00162ef:	83 ec 0c             	sub    esp,0xc
c00162f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00162f6:	e8 cd ff ff ff       	call   c00162c8 <Serial::~Serial()>
c00162fb:	83 c4 10             	add    esp,0x10
c00162fe:	83 ec 08             	sub    esp,0x8
c0016301:	68 58 01 00 00       	push   0x158
c0016306:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001630a:	e8 80 c3 ff ff       	call   c001268f <operator delete(void*, unsigned long)>
c001630f:	83 c4 10             	add    esp,0x10
c0016312:	83 c4 0c             	add    esp,0xc
c0016315:	c3                   	ret    

c0016316 <Timer::Timer(char const*)>:
c0016316:	83 ec 0c             	sub    esp,0xc
c0016319:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001631d:	83 ec 08             	sub    esp,0x8
c0016320:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016324:	50                   	push   eax
c0016325:	e8 24 da ff ff       	call   c0013d4e <Device::Device(char const*)>
c001632a:	83 c4 10             	add    esp,0x10
c001632d:	ba 6c 9a 02 c0       	mov    edx,0xc0029a6c
c0016332:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016336:	89 10                	mov    DWORD PTR [eax],edx
c0016338:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001633c:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016346:	90                   	nop
c0016347:	83 c4 0c             	add    esp,0xc
c001634a:	c3                   	ret    
c001634b:	90                   	nop

c001634c <Timer::~Timer()>:
c001634c:	83 ec 0c             	sub    esp,0xc
c001634f:	ba 6c 9a 02 c0       	mov    edx,0xc0029a6c
c0016354:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016358:	89 10                	mov    DWORD PTR [eax],edx
c001635a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001635e:	83 ec 0c             	sub    esp,0xc
c0016361:	50                   	push   eax
c0016362:	e8 c9 d6 ff ff       	call   c0013a30 <Device::~Device()>
c0016367:	83 c4 10             	add    esp,0x10
c001636a:	90                   	nop
c001636b:	83 c4 0c             	add    esp,0xc
c001636e:	c3                   	ret    
c001636f:	90                   	nop

c0016370 <Timer::~Timer()>:
c0016370:	83 ec 0c             	sub    esp,0xc
c0016373:	83 ec 0c             	sub    esp,0xc
c0016376:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001637a:	e8 cd ff ff ff       	call   c001634c <Timer::~Timer()>
c001637f:	83 c4 10             	add    esp,0x10
c0016382:	83 ec 08             	sub    esp,0x8
c0016385:	68 5c 01 00 00       	push   0x15c
c001638a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001638e:	e8 fc c2 ff ff       	call   c001268f <operator delete(void*, unsigned long)>
c0016393:	83 c4 10             	add    esp,0x10
c0016396:	83 c4 0c             	add    esp,0xc
c0016399:	c3                   	ret    

c001639a <Timer::read()>:
c001639a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001639e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00163a4:	c3                   	ret    

c00163a5 <timerHandler(unsigned long long)>:
c00163a5:	55                   	push   ebp
c00163a6:	57                   	push   edi
c00163a7:	56                   	push   esi
c00163a8:	53                   	push   ebx
c00163a9:	83 ec 0c             	sub    esp,0xc
c00163ac:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00163b0:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00163b4:	01 35 d0 cf 02 c0    	add    DWORD PTR ds:0xc002cfd0,esi
c00163ba:	11 3d d4 cf 02 c0    	adc    DWORD PTR ds:0xc002cfd4,edi
c00163c0:	80 3d 4d c9 02 c0 00 	cmp    BYTE PTR ds:0xc002c94d,0x0
c00163c7:	0f 84 07 01 00 00    	je     c00164d4 <timerHandler(unsigned long long)+0x12f>
c00163cd:	e8 6d 69 00 00       	call   c001cd3f <lockStuff()>
c00163d2:	83 ec 0c             	sub    esp,0xc
c00163d5:	68 7c de 02 c0       	push   0xc002de7c
c00163da:	e8 2f 10 01 00       	call   c002740e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00163df:	c7 04 24 7c de 02 c0 	mov    DWORD PTR [esp],0xc002de7c
c00163e6:	89 c3                	mov    ebx,eax
c00163e8:	e8 29 10 01 00       	call   c0027416 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00163ed:	83 c4 10             	add    esp,0x10
c00163f0:	84 c0                	test   al,al
c00163f2:	74 60                	je     c0016454 <timerHandler(unsigned long long)+0xaf>
c00163f4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00163fa:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c00163fd:	85 c0                	test   eax,eax
c00163ff:	0f 85 91 00 00 00    	jne    c0016496 <timerHandler(unsigned long long)+0xf1>
c0016405:	e9 be 00 00 00       	jmp    c00164c8 <timerHandler(unsigned long long)+0x123>
c001640a:	83 ec 0c             	sub    esp,0xc
c001640d:	55                   	push   ebp
c001640e:	e8 1d 6f 00 00       	call   c001d330 <unblockTask(ThreadControlBlock*)>
c0016413:	83 c4 10             	add    esp,0x10
c0016416:	39 eb                	cmp    ebx,ebp
c0016418:	75 12                	jne    c001642c <timerHandler(unsigned long long)+0x87>
c001641a:	83 ec 0c             	sub    esp,0xc
c001641d:	68 7c de 02 c0       	push   0xc002de7c
c0016422:	e8 e7 0f 01 00       	call   c002740e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016427:	89 c3                	mov    ebx,eax
c0016429:	83 c4 10             	add    esp,0x10
c001642c:	83 ec 0c             	sub    esp,0xc
c001642f:	68 7c de 02 c0       	push   0xc002de7c
c0016434:	e8 dd 0f 01 00       	call   c0027416 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016439:	83 c4 10             	add    esp,0x10
c001643c:	84 c0                	test   al,al
c001643e:	75 b4                	jne    c00163f4 <timerHandler(unsigned long long)+0x4f>
c0016440:	83 ec 0c             	sub    esp,0xc
c0016443:	68 7c de 02 c0       	push   0xc002de7c
c0016448:	e8 c1 0f 01 00       	call   c002740e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001644d:	83 c4 10             	add    esp,0x10
c0016450:	39 d8                	cmp    eax,ebx
c0016452:	74 a0                	je     c00163f4 <timerHandler(unsigned long long)+0x4f>
c0016454:	83 ec 0c             	sub    esp,0xc
c0016457:	68 7c de 02 c0       	push   0xc002de7c
c001645c:	e8 ad 0f 01 00       	call   c002740e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016461:	c7 04 24 7c de 02 c0 	mov    DWORD PTR [esp],0xc002de7c
c0016468:	89 c5                	mov    ebp,eax
c001646a:	e8 c3 0f 01 00       	call   c0027432 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001646f:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016472:	83 c4 10             	add    esp,0x10
c0016475:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016478:	39 15 d0 cf 02 c0    	cmp    DWORD PTR ds:0xc002cfd0,edx
c001647e:	a1 d4 cf 02 c0       	mov    eax,ds:0xc002cfd4
c0016483:	19 c8                	sbb    eax,ecx
c0016485:	73 83                	jae    c001640a <timerHandler(unsigned long long)+0x65>
c0016487:	50                   	push   eax
c0016488:	50                   	push   eax
c0016489:	55                   	push   ebp
c001648a:	68 7c de 02 c0       	push   0xc002de7c
c001648f:	e8 4c 10 01 00       	call   c00274e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016494:	eb 93                	jmp    c0016429 <timerHandler(unsigned long long)+0x84>
c0016496:	80 3d 4c c9 02 c0 00 	cmp    BYTE PTR ds:0xc002c94c,0x0
c001649d:	74 29                	je     c00164c8 <timerHandler(unsigned long long)+0x123>
c001649f:	39 c6                	cmp    esi,eax
c00164a1:	bb 00 00 00 00       	mov    ebx,0x0
c00164a6:	19 df                	sbb    edi,ebx
c00164a8:	72 19                	jb     c00164c3 <timerHandler(unsigned long long)+0x11e>
c00164aa:	e8 69 68 00 00       	call   c001cd18 <lockScheduler()>
c00164af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164b4:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c00164b7:	e8 98 6b 00 00       	call   c001d054 <schedule()>
c00164bc:	e8 59 68 00 00       	call   c001cd1a <unlockScheduler()>
c00164c1:	eb 05                	jmp    c00164c8 <timerHandler(unsigned long long)+0x123>
c00164c3:	29 f0                	sub    eax,esi
c00164c5:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c00164c8:	83 c4 0c             	add    esp,0xc
c00164cb:	5b                   	pop    ebx
c00164cc:	5e                   	pop    esi
c00164cd:	5f                   	pop    edi
c00164ce:	5d                   	pop    ebp
c00164cf:	e9 05 6c 00 00       	jmp    c001d0d9 <unlockStuff()>
c00164d4:	83 c4 0c             	add    esp,0xc
c00164d7:	5b                   	pop    ebx
c00164d8:	5e                   	pop    esi
c00164d9:	5f                   	pop    edi
c00164da:	5d                   	pop    ebp
c00164db:	c3                   	ret    

c00164dc <setupTimer(int)>:
c00164dc:	57                   	push   edi
c00164dd:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c00164e2:	56                   	push   esi
c00164e3:	53                   	push   ebx
c00164e4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00164e8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00164ee:	83 ec 0c             	sub    esp,0xc
c00164f1:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00164f7:	e8 4e d9 ff ff       	call   c0013e4a <Device::getName()>
c00164fc:	83 c4 10             	add    esp,0x10
c00164ff:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016502:	0f 85 8d 00 00 00    	jne    c0016595 <setupTimer(int)+0xb9>
c0016508:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c001650d:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016514:	74 7f                	je     c0016595 <setupTimer(int)+0xb9>
c0016516:	83 ec 0c             	sub    esp,0xc
c0016519:	68 5c 01 00 00       	push   0x15c
c001651e:	e8 b1 8f ff ff       	call   c000f4d4 <malloc>
c0016523:	89 04 24             	mov    DWORD PTR [esp],eax
c0016526:	89 c3                	mov    ebx,eax
c0016528:	e8 51 ea 00 00       	call   c0024f7e <PIT::PIT()>
c001652d:	59                   	pop    ecx
c001652e:	5f                   	pop    edi
c001652f:	53                   	push   ebx
c0016530:	ff 35 48 c9 02 c0    	push   DWORD PTR ds:0xc002c948
c0016536:	e8 23 d6 ff ff       	call   c0013b5e <Device::addChild(Device*)>
c001653b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001653d:	6a 00                	push   0x0
c001653f:	6a 00                	push   0x0
c0016541:	56                   	push   esi
c0016542:	53                   	push   ebx
c0016543:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016546:	83 c4 14             	add    esp,0x14
c0016549:	68 60 01 00 00       	push   0x160
c001654e:	e8 81 8f ff ff       	call   c000f4d4 <malloc>
c0016553:	89 04 24             	mov    DWORD PTR [esp],eax
c0016556:	89 c7                	mov    edi,eax
c0016558:	e8 d1 e8 00 00       	call   c0024e2e <APICTimer::APICTimer()>
c001655d:	6a 00                	push   0x0
c001655f:	6a 00                	push   0x0
c0016561:	56                   	push   esi
c0016562:	57                   	push   edi
c0016563:	e8 c8 e7 00 00       	call   c0024d30 <APICTimer::open(int, int, void*)>
c0016568:	83 c4 20             	add    esp,0x20
c001656b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001656d:	6a 00                	push   0x0
c001656f:	6a 00                	push   0x0
c0016571:	6a 00                	push   0x0
c0016573:	53                   	push   ebx
c0016574:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016577:	58                   	pop    eax
c0016578:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c001657d:	5a                   	pop    edx
c001657e:	57                   	push   edi
c001657f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016585:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c001658b:	e8 ce d5 ff ff       	call   c0013b5e <Device::addChild(Device*)>
c0016590:	83 c4 10             	add    esp,0x10
c0016593:	eb 33                	jmp    c00165c8 <setupTimer(int)+0xec>
c0016595:	83 ec 0c             	sub    esp,0xc
c0016598:	68 5c 01 00 00       	push   0x15c
c001659d:	e8 32 8f ff ff       	call   c000f4d4 <malloc>
c00165a2:	89 04 24             	mov    DWORD PTR [esp],eax
c00165a5:	89 c3                	mov    ebx,eax
c00165a7:	e8 d2 e9 00 00       	call   c0024f7e <PIT::PIT()>
c00165ac:	58                   	pop    eax
c00165ad:	5a                   	pop    edx
c00165ae:	53                   	push   ebx
c00165af:	ff 35 48 c9 02 c0    	push   DWORD PTR ds:0xc002c948
c00165b5:	e8 a4 d5 ff ff       	call   c0013b5e <Device::addChild(Device*)>
c00165ba:	8b 03                	mov    eax,DWORD PTR [ebx]
c00165bc:	6a 00                	push   0x0
c00165be:	6a 00                	push   0x0
c00165c0:	56                   	push   esi
c00165c1:	53                   	push   ebx
c00165c2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00165c5:	83 c4 20             	add    esp,0x20
c00165c8:	89 d8                	mov    eax,ebx
c00165ca:	5b                   	pop    ebx
c00165cb:	5e                   	pop    esi
c00165cc:	5f                   	pop    edi
c00165cd:	c3                   	ret    

c00165ce <VCache::VCache(PhysicalDisk*)>:
c00165ce:	53                   	push   ebx
c00165cf:	83 ec 18             	sub    esp,0x18
c00165d2:	ba 9c 9a 02 c0       	mov    edx,0xc0029a9c
c00165d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165db:	89 10                	mov    DWORD PTR [eax],edx
c00165dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165e1:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c00165e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165ec:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c00165f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165f7:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c00165fe:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016605:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016609:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016610:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016617:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001661b:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016622:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016626:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001662a:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016632:	83 ec 0c             	sub    esp,0xc
c0016635:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016639:	e8 96 8e ff ff       	call   c000f4d4 <malloc>
c001663e:	83 c4 10             	add    esp,0x10
c0016641:	89 c3                	mov    ebx,eax
c0016643:	83 ec 0c             	sub    esp,0xc
c0016646:	53                   	push   ebx
c0016647:	e8 ec 67 00 00       	call   c001ce38 <Mutex::Mutex()>
c001664c:	83 c4 10             	add    esp,0x10
c001664f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016653:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016656:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001665a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001665e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016661:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016665:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c001666c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016670:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016676:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001667a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001667d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016681:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016687:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001668d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016691:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016694:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016697:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001669b:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001669f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00166a3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00166a9:	c1 e0 06             	shl    eax,0x6
c00166ac:	83 ec 0c             	sub    esp,0xc
c00166af:	50                   	push   eax
c00166b0:	e8 1f 8e ff ff       	call   c000f4d4 <malloc>
c00166b5:	83 c4 10             	add    esp,0x10
c00166b8:	89 c2                	mov    edx,eax
c00166ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166be:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00166c1:	90                   	nop
c00166c2:	83 c4 18             	add    esp,0x18
c00166c5:	5b                   	pop    ebx
c00166c6:	c3                   	ret    
c00166c7:	90                   	nop

c00166c8 <VCache::writeWriteBuffer()>:
c00166c8:	53                   	push   ebx
c00166c9:	83 ec 14             	sub    esp,0x14
c00166cc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00166d0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00166d3:	8b 10                	mov    edx,DWORD PTR [eax]
c00166d5:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00166d8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00166db:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00166de:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00166e1:	50                   	push   eax
c00166e2:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00166e5:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00166ec:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00166f3:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c00166f7:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c00166fe:	83 c4 28             	add    esp,0x28
c0016701:	5b                   	pop    ebx
c0016702:	c3                   	ret    
c0016703:	90                   	nop

c0016704 <VCache::~VCache()>:
c0016704:	83 ec 0c             	sub    esp,0xc
c0016707:	ba 9c 9a 02 c0       	mov    edx,0xc0029a9c
c001670c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016710:	89 10                	mov    DWORD PTR [eax],edx
c0016712:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016716:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016719:	84 c0                	test   al,al
c001671b:	74 0f                	je     c001672c <VCache::~VCache()+0x28>
c001671d:	83 ec 0c             	sub    esp,0xc
c0016720:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016724:	e8 9f ff ff ff       	call   c00166c8 <VCache::writeWriteBuffer()>
c0016729:	83 c4 10             	add    esp,0x10
c001672c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016730:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016733:	83 ec 0c             	sub    esp,0xc
c0016736:	50                   	push   eax
c0016737:	e8 a8 8d ff ff       	call   c000f4e4 <free>
c001673c:	83 c4 10             	add    esp,0x10
c001673f:	90                   	nop
c0016740:	83 c4 0c             	add    esp,0xc
c0016743:	c3                   	ret    

c0016744 <VCache::~VCache()>:
c0016744:	83 ec 0c             	sub    esp,0xc
c0016747:	83 ec 0c             	sub    esp,0xc
c001674a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001674e:	e8 b1 ff ff ff       	call   c0016704 <VCache::~VCache()>
c0016753:	83 c4 10             	add    esp,0x10
c0016756:	83 ec 08             	sub    esp,0x8
c0016759:	6a 30                	push   0x30
c001675b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001675f:	e8 2b bf ff ff       	call   c001268f <operator delete(void*, unsigned long)>
c0016764:	83 c4 10             	add    esp,0x10
c0016767:	83 c4 0c             	add    esp,0xc
c001676a:	c3                   	ret    
c001676b:	90                   	nop

c001676c <VCache::write(unsigned long long, int, void*)>:
c001676c:	55                   	push   ebp
c001676d:	57                   	push   edi
c001676e:	56                   	push   esi
c001676f:	53                   	push   ebx
c0016770:	83 ec 28             	sub    esp,0x28
c0016773:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016777:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001677b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001677f:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016783:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016786:	e8 0f 6b 00 00       	call   c001d29a <Semaphore::acquire()>
c001678b:	83 c4 10             	add    esp,0x10
c001678e:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016792:	74 66                	je     c00167fa <VCache::write(unsigned long long, int, void*)+0x8e>
c0016794:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016797:	99                   	cdq    
c0016798:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001679c:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c001679f:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00167a2:	89 c1                	mov    ecx,eax
c00167a4:	89 d0                	mov    eax,edx
c00167a6:	31 f1                	xor    ecx,esi
c00167a8:	31 f8                	xor    eax,edi
c00167aa:	89 ca                	mov    edx,ecx
c00167ac:	09 c2                	or     edx,eax
c00167ae:	75 3e                	jne    c00167ee <VCache::write(unsigned long long, int, void*)+0x82>
c00167b0:	83 fd 01             	cmp    ebp,0x1
c00167b3:	75 39                	jne    c00167ee <VCache::write(unsigned long long, int, void*)+0x82>
c00167b5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00167b8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00167be:	51                   	push   ecx
c00167bf:	50                   	push   eax
c00167c0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00167c4:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00167c8:	0f af c8             	imul   ecx,eax
c00167cb:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c00167ce:	51                   	push   ecx
c00167cf:	e8 81 9e fe ff       	call   c0000655 <memcpy>
c00167d4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00167d7:	83 c4 10             	add    esp,0x10
c00167da:	40                   	inc    eax
c00167db:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00167de:	83 f8 40             	cmp    eax,0x40
c00167e1:	75 57                	jne    c001683a <VCache::write(unsigned long long, int, void*)+0xce>
c00167e3:	83 ec 0c             	sub    esp,0xc
c00167e6:	53                   	push   ebx
c00167e7:	e8 dc fe ff ff       	call   c00166c8 <VCache::writeWriteBuffer()>
c00167ec:	eb 34                	jmp    c0016822 <VCache::write(unsigned long long, int, void*)+0xb6>
c00167ee:	83 ec 0c             	sub    esp,0xc
c00167f1:	53                   	push   ebx
c00167f2:	e8 d1 fe ff ff       	call   c00166c8 <VCache::writeWriteBuffer()>
c00167f7:	83 c4 10             	add    esp,0x10
c00167fa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00167fd:	83 fd 3f             	cmp    ebp,0x3f
c0016800:	7f 25                	jg     c0016827 <VCache::write(unsigned long long, int, void*)+0xbb>
c0016802:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0016805:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016808:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c001680b:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c001680f:	52                   	push   edx
c0016810:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0016816:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001681a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001681d:	e8 33 9e fe ff       	call   c0000655 <memcpy>
c0016822:	83 c4 10             	add    esp,0x10
c0016825:	eb 13                	jmp    c001683a <VCache::write(unsigned long long, int, void*)+0xce>
c0016827:	83 ec 0c             	sub    esp,0xc
c001682a:	8b 10                	mov    edx,DWORD PTR [eax]
c001682c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016830:	55                   	push   ebp
c0016831:	57                   	push   edi
c0016832:	56                   	push   esi
c0016833:	50                   	push   eax
c0016834:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016837:	83 c4 20             	add    esp,0x20
c001683a:	83 ec 0c             	sub    esp,0xc
c001683d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016840:	e8 03 70 00 00       	call   c001d848 <Semaphore::release()>
c0016845:	83 c4 2c             	add    esp,0x2c
c0016848:	31 c0                	xor    eax,eax
c001684a:	5b                   	pop    ebx
c001684b:	5e                   	pop    esi
c001684c:	5f                   	pop    edi
c001684d:	5d                   	pop    ebp
c001684e:	c3                   	ret    
c001684f:	90                   	nop

c0016850 <VCache::read(unsigned long long, int, void*)>:
c0016850:	57                   	push   edi
c0016851:	56                   	push   esi
c0016852:	53                   	push   ebx
c0016853:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016857:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001685b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001685f:	83 ec 0c             	sub    esp,0xc
c0016862:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016865:	e8 30 6a 00 00       	call   c001d29a <Semaphore::acquire()>
c001686a:	83 c4 10             	add    esp,0x10
c001686d:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016871:	74 0c                	je     c001687f <VCache::read(unsigned long long, int, void*)+0x2f>
c0016873:	83 ec 0c             	sub    esp,0xc
c0016876:	53                   	push   ebx
c0016877:	e8 4c fe ff ff       	call   c00166c8 <VCache::writeWriteBuffer()>
c001687c:	83 c4 10             	add    esp,0x10
c001687f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016882:	83 ec 0c             	sub    esp,0xc
c0016885:	8b 10                	mov    edx,DWORD PTR [eax]
c0016887:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001688b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001688f:	57                   	push   edi
c0016890:	56                   	push   esi
c0016891:	50                   	push   eax
c0016892:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016895:	83 c4 14             	add    esp,0x14
c0016898:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001689b:	e8 a8 6f 00 00       	call   c001d848 <Semaphore::release()>
c00168a0:	83 c4 10             	add    esp,0x10
c00168a3:	31 c0                	xor    eax,eax
c00168a5:	5b                   	pop    ebx
c00168a6:	5e                   	pop    esi
c00168a7:	5f                   	pop    edi
c00168a8:	c3                   	ret    
c00168a9:	90                   	nop

c00168aa <Video::putrect(int, int, int, int, unsigned int)>:
c00168aa:	55                   	push   ebp
c00168ab:	57                   	push   edi
c00168ac:	56                   	push   esi
c00168ad:	53                   	push   ebx
c00168ae:	83 ec 1c             	sub    esp,0x1c
c00168b1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00168b5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00168b9:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00168bd:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00168c1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00168c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00168c9:	01 df                	add    edi,ebx
c00168cb:	39 fb                	cmp    ebx,edi
c00168cd:	7d 1f                	jge    c00168ee <Video::putrect(int, int, int, int, unsigned int)+0x44>
c00168cf:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00168d3:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00168d7:	7d 12                	jge    c00168eb <Video::putrect(int, int, int, int, unsigned int)+0x41>
c00168d9:	8b 16                	mov    edx,DWORD PTR [esi]
c00168db:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00168df:	53                   	push   ebx
c00168e0:	55                   	push   ebp
c00168e1:	45                   	inc    ebp
c00168e2:	56                   	push   esi
c00168e3:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00168e6:	83 c4 10             	add    esp,0x10
c00168e9:	eb e8                	jmp    c00168d3 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c00168eb:	43                   	inc    ebx
c00168ec:	eb dd                	jmp    c00168cb <Video::putrect(int, int, int, int, unsigned int)+0x21>
c00168ee:	83 c4 1c             	add    esp,0x1c
c00168f1:	5b                   	pop    ebx
c00168f2:	5e                   	pop    esi
c00168f3:	5f                   	pop    edi
c00168f4:	5d                   	pop    ebp
c00168f5:	c3                   	ret    

c00168f6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c00168f6:	55                   	push   ebp
c00168f7:	57                   	push   edi
c00168f8:	31 ff                	xor    edi,edi
c00168fa:	56                   	push   esi
c00168fb:	53                   	push   ebx
c00168fc:	83 ec 1c             	sub    esp,0x1c
c00168ff:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016903:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016907:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c001690e:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0016913:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016917:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c001691b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001691f:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0016922:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016926:	01 f9                	add    ecx,edi
c0016928:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c001692c:	7d 2f                	jge    c001695d <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c001692e:	31 f6                	xor    esi,esi
c0016930:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016934:	01 f2                	add    edx,esi
c0016936:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c001693a:	7d 1a                	jge    c0016956 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c001693c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001693f:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0016942:	46                   	inc    esi
c0016943:	51                   	push   ecx
c0016944:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016948:	52                   	push   edx
c0016949:	55                   	push   ebp
c001694a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001694d:	83 c4 10             	add    esp,0x10
c0016950:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016954:	eb da                	jmp    c0016930 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0016956:	47                   	inc    edi
c0016957:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001695b:	eb c5                	jmp    c0016922 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c001695d:	83 c4 1c             	add    esp,0x1c
c0016960:	5b                   	pop    ebx
c0016961:	5e                   	pop    esi
c0016962:	5f                   	pop    edi
c0016963:	5d                   	pop    ebp
c0016964:	c3                   	ret    
c0016965:	90                   	nop

c0016966 <Video::blit(unsigned int*, int, int, int, int)>:
c0016966:	55                   	push   ebp
c0016967:	57                   	push   edi
c0016968:	56                   	push   esi
c0016969:	53                   	push   ebx
c001696a:	83 ec 1c             	sub    esp,0x1c
c001696d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016971:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016975:	85 c0                	test   eax,eax
c0016977:	79 02                	jns    c001697b <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0016979:	31 c0                	xor    eax,eax
c001697b:	c1 e0 02             	shl    eax,0x2
c001697e:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016982:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016986:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001698a:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c001698e:	39 d8                	cmp    eax,ebx
c0016990:	7e 49                	jle    c00169db <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016992:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016998:	7c 41                	jl     c00169db <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001699a:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001699e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00169a2:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00169a6:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c00169aa:	39 f9                	cmp    ecx,edi
c00169ac:	7e 22                	jle    c00169d0 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00169ae:	83 c5 04             	add    ebp,0x4
c00169b1:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00169b7:	7c 14                	jl     c00169cd <Video::blit(unsigned int*, int, int, int, int)+0x67>
c00169b9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00169bb:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c00169be:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00169c2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00169c6:	56                   	push   esi
c00169c7:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c00169ca:	83 c4 10             	add    esp,0x10
c00169cd:	47                   	inc    edi
c00169ce:	eb d2                	jmp    c00169a2 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c00169d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00169d4:	43                   	inc    ebx
c00169d5:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00169d9:	eb ab                	jmp    c0016986 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c00169db:	83 c4 1c             	add    esp,0x1c
c00169de:	5b                   	pop    ebx
c00169df:	5e                   	pop    esi
c00169e0:	5f                   	pop    edi
c00169e1:	5d                   	pop    ebp
c00169e2:	c3                   	ret    
c00169e3:	90                   	nop

c00169e4 <Video::clearScreen(unsigned int)>:
c00169e4:	57                   	push   edi
c00169e5:	56                   	push   esi
c00169e6:	53                   	push   ebx
c00169e7:	31 db                	xor    ebx,ebx
c00169e9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00169ed:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00169f3:	7e 1f                	jle    c0016a14 <Video::clearScreen(unsigned int)+0x30>
c00169f5:	31 ff                	xor    edi,edi
c00169f7:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00169fd:	7e 12                	jle    c0016a11 <Video::clearScreen(unsigned int)+0x2d>
c00169ff:	8b 06                	mov    eax,DWORD PTR [esi]
c0016a01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016a05:	53                   	push   ebx
c0016a06:	57                   	push   edi
c0016a07:	47                   	inc    edi
c0016a08:	56                   	push   esi
c0016a09:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016a0c:	83 c4 10             	add    esp,0x10
c0016a0f:	eb e6                	jmp    c00169f7 <Video::clearScreen(unsigned int)+0x13>
c0016a11:	43                   	inc    ebx
c0016a12:	eb d9                	jmp    c00169ed <Video::clearScreen(unsigned int)+0x9>
c0016a14:	5b                   	pop    ebx
c0016a15:	5e                   	pop    esi
c0016a16:	5f                   	pop    edi
c0016a17:	c3                   	ret    

c0016a18 <Video::putpixel(int, int, unsigned int)>:
c0016a18:	c7 44 24 04 a4 9a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0029aa4
c0016a20:	e9 64 2e 00 00       	jmp    c0019889 <Krnl::panic(char const*)>
c0016a25:	90                   	nop

c0016a26 <Video::Video(char const*)>:
c0016a26:	83 ec 0c             	sub    esp,0xc
c0016a29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a2d:	83 ec 08             	sub    esp,0x8
c0016a30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a34:	50                   	push   eax
c0016a35:	e8 14 d3 ff ff       	call   c0013d4e <Device::Device(char const*)>
c0016a3a:	83 c4 10             	add    esp,0x10
c0016a3d:	ba 28 9b 02 c0       	mov    edx,0xc0029b28
c0016a42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a46:	89 10                	mov    DWORD PTR [eax],edx
c0016a48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a4c:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0016a56:	90                   	nop
c0016a57:	83 c4 0c             	add    esp,0xc
c0016a5a:	c3                   	ret    
c0016a5b:	90                   	nop

c0016a5c <Video::~Video()>:
c0016a5c:	83 ec 0c             	sub    esp,0xc
c0016a5f:	ba 28 9b 02 c0       	mov    edx,0xc0029b28
c0016a64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a68:	89 10                	mov    DWORD PTR [eax],edx
c0016a6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a6e:	83 ec 0c             	sub    esp,0xc
c0016a71:	50                   	push   eax
c0016a72:	e8 b9 cf ff ff       	call   c0013a30 <Device::~Device()>
c0016a77:	83 c4 10             	add    esp,0x10
c0016a7a:	90                   	nop
c0016a7b:	83 c4 0c             	add    esp,0xc
c0016a7e:	c3                   	ret    
c0016a7f:	90                   	nop

c0016a80 <Video::~Video()>:
c0016a80:	83 ec 0c             	sub    esp,0xc
c0016a83:	83 ec 0c             	sub    esp,0xc
c0016a86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a8a:	e8 cd ff ff ff       	call   c0016a5c <Video::~Video()>
c0016a8f:	83 c4 10             	add    esp,0x10
c0016a92:	83 ec 08             	sub    esp,0x8
c0016a95:	68 64 01 00 00       	push   0x164
c0016a9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a9e:	e8 ec bb ff ff       	call   c001268f <operator delete(void*, unsigned long)>
c0016aa3:	83 c4 10             	add    esp,0x10
c0016aa6:	83 c4 0c             	add    esp,0xc
c0016aa9:	c3                   	ret    

c0016aaa <Video::isMonochrome()>:
c0016aaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016aae:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0016ab4:	c3                   	ret    
c0016ab5:	90                   	nop

c0016ab6 <Video::getWidth()>:
c0016ab6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016aba:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016ac0:	c3                   	ret    
c0016ac1:	90                   	nop

c0016ac2 <Video::getHeight()>:
c0016ac2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016ac6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016acc:	c3                   	ret    
c0016acd:	90                   	nop

c0016ace <Video::drawCursor(int, int, unsigned char*, int)>:
c0016ace:	55                   	push   ebp
c0016acf:	57                   	push   edi
c0016ad0:	56                   	push   esi
c0016ad1:	53                   	push   ebx
c0016ad2:	83 ec 2c             	sub    esp,0x2c
c0016ad5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016ad9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016add:	83 f8 01             	cmp    eax,0x1
c0016ae0:	19 c9                	sbb    ecx,ecx
c0016ae2:	31 db                	xor    ebx,ebx
c0016ae4:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0016ae8:	89 cd                	mov    ebp,ecx
c0016aea:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0016af2:	f7 d5                	not    ebp
c0016af4:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0016afa:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0016afe:	01 d8                	add    eax,ebx
c0016b00:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016b04:	56                   	push   esi
c0016b05:	e8 b8 ff ff ff       	call   c0016ac2 <Video::getHeight()>
c0016b0a:	59                   	pop    ecx
c0016b0b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016b0f:	7e 70                	jle    c0016b81 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0016b11:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016b15:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016b19:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0016b1c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016b20:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016b24:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0016b2b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016b2f:	89 f8                	mov    eax,edi
c0016b31:	83 c0 20             	add    eax,0x20
c0016b34:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016b38:	56                   	push   esi
c0016b39:	e8 78 ff ff ff       	call   c0016ab6 <Video::getWidth()>
c0016b3e:	5a                   	pop    edx
c0016b3f:	39 c7                	cmp    edi,eax
c0016b41:	7d 34                	jge    c0016b77 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0016b43:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0016b48:	74 05                	je     c0016b4f <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0016b4a:	8b 06                	mov    eax,DWORD PTR [esi]
c0016b4c:	55                   	push   ebp
c0016b4d:	eb 0d                	jmp    c0016b5c <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0016b4f:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0016b54:	74 12                	je     c0016b68 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0016b56:	8b 06                	mov    eax,DWORD PTR [esi]
c0016b58:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016b5c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016b60:	57                   	push   edi
c0016b61:	56                   	push   esi
c0016b62:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016b65:	83 c4 10             	add    esp,0x10
c0016b68:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0016b6c:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0016b70:	47                   	inc    edi
c0016b71:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016b75:	75 c1                	jne    c0016b38 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0016b77:	43                   	inc    ebx
c0016b78:	83 fb 20             	cmp    ebx,0x20
c0016b7b:	0f 85 79 ff ff ff    	jne    c0016afa <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0016b81:	83 c4 2c             	add    esp,0x2c
c0016b84:	5b                   	pop    ebx
c0016b85:	5e                   	pop    esi
c0016b86:	5f                   	pop    edi
c0016b87:	5d                   	pop    ebp
c0016b88:	c3                   	ret    
c0016b89:	90                   	nop

c0016b8a <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0016b8a:	55                   	push   ebp
c0016b8b:	57                   	push   edi
c0016b8c:	56                   	push   esi
c0016b8d:	53                   	push   ebx
c0016b8e:	83 ec 28             	sub    esp,0x28
c0016b91:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016b95:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0016b99:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c0016b9d:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0016ba1:	c1 e7 08             	shl    edi,0x8
c0016ba4:	01 c7                	add    edi,eax
c0016ba6:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0016baa:	c1 e0 08             	shl    eax,0x8
c0016bad:	01 d0                	add    eax,edx
c0016baf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016bb3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016bb7:	0f af c7             	imul   eax,edi
c0016bba:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0016bc1:	50                   	push   eax
c0016bc2:	e8 0d 89 ff ff       	call   c000f4d4 <malloc>
c0016bc7:	83 c4 10             	add    esp,0x10
c0016bca:	89 c5                	mov    ebp,eax
c0016bcc:	85 c0                	test   eax,eax
c0016bce:	75 15                	jne    c0016be5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c0016bd0:	83 ec 0c             	sub    esp,0xc
c0016bd3:	68 c5 9a 02 c0       	push   0xc0029ac5
c0016bd8:	e8 92 bb ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c0016bdd:	83 c4 10             	add    esp,0x10
c0016be0:	e9 1c 01 00 00       	jmp    c0016d01 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0016be5:	be 12 00 00 00       	mov    esi,0x12
c0016bea:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0016bee:	74 11                	je     c0016c01 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c0016bf0:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c0016bf4:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c0016bf8:	c1 fe 03             	sar    esi,0x3
c0016bfb:	0f af f0             	imul   esi,eax
c0016bfe:	83 c6 12             	add    esi,0x12
c0016c01:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0016c05:	74 04                	je     c0016c0b <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c0016c07:	85 ff                	test   edi,edi
c0016c09:	75 12                	jne    c0016c1d <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c0016c0b:	83 ec 0c             	sub    esp,0xc
c0016c0e:	68 dc 9a 02 c0       	push   0xc0029adc
c0016c13:	e8 57 bb ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c0016c18:	e9 ce 00 00 00       	jmp    c0016ceb <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c0016c1d:	52                   	push   edx
c0016c1e:	52                   	push   edx
c0016c1f:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c0016c23:	50                   	push   eax
c0016c24:	68 f1 9a 02 c0       	push   0xc0029af1
c0016c29:	e8 41 bb ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c0016c2e:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c0016c32:	83 c4 10             	add    esp,0x10
c0016c35:	80 fa 02             	cmp    dl,0x2
c0016c38:	0f 85 98 00 00 00    	jne    c0016cd6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c0016c3e:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0016c43:	75 10                	jne    c0016c55 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0016c45:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0016c49:	75 0a                	jne    c0016c55 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0016c4b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0016c4e:	83 e8 18             	sub    eax,0x18
c0016c51:	a8 f7                	test   al,0xf7
c0016c53:	74 0a                	je     c0016c5f <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c0016c55:	83 ec 0c             	sub    esp,0xc
c0016c58:	68 fe 9a 02 c0       	push   0xc0029afe
c0016c5d:	eb 7f                	jmp    c0016cde <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c0016c5f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016c67:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016c6f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016c73:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016c7b:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0016c7f:	75 0c                	jne    c0016c8d <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c0016c81:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c0016c86:	c1 e0 18             	shl    eax,0x18
c0016c89:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016c8d:	41                   	inc    ecx
c0016c8e:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c0016c93:	c1 e2 10             	shl    edx,0x10
c0016c96:	89 d0                	mov    eax,edx
c0016c98:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c0016c9d:	c1 e2 08             	shl    edx,0x8
c0016ca0:	09 c2                	or     edx,eax
c0016ca2:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c0016ca6:	09 c2                	or     edx,eax
c0016ca8:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c0016cac:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c0016cb0:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0016cb4:	c1 f8 03             	sar    eax,0x3
c0016cb7:	01 c6                	add    esi,eax
c0016cb9:	89 c8                	mov    eax,ecx
c0016cbb:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0016cbf:	39 c7                	cmp    edi,eax
c0016cc1:	7f b0                	jg     c0016c73 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0016cc3:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016cc7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016ccb:	39 14 24             	cmp    DWORD PTR [esp],edx
c0016cce:	7e 22                	jle    c0016cf2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c0016cd0:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0016cd4:	eb 99                	jmp    c0016c6f <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c0016cd6:	50                   	push   eax
c0016cd7:	50                   	push   eax
c0016cd8:	52                   	push   edx
c0016cd9:	68 0c 9b 02 c0       	push   0xc0029b0c
c0016cde:	e8 8c ba ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c0016ce3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016ce6:	e8 f9 87 ff ff       	call   c000f4e4 <free>
c0016ceb:	83 c4 10             	add    esp,0x10
c0016cee:	31 ed                	xor    ebp,ebp
c0016cf0:	eb 0f                	jmp    c0016d01 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0016cf2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016cf6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0016cf9:	89 38                	mov    DWORD PTR [eax],edi
c0016cfb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016cff:	89 08                	mov    DWORD PTR [eax],ecx
c0016d01:	83 c4 1c             	add    esp,0x1c
c0016d04:	89 e8                	mov    eax,ebp
c0016d06:	5b                   	pop    ebx
c0016d07:	5e                   	pop    esi
c0016d08:	5f                   	pop    edi
c0016d09:	5d                   	pop    ebp
c0016d0a:	c3                   	ret    
c0016d0b:	90                   	nop

c0016d0c <Video::putTGA(int, int, unsigned char*, int)>:
c0016d0c:	55                   	push   ebp
c0016d0d:	57                   	push   edi
c0016d0e:	56                   	push   esi
c0016d0f:	53                   	push   ebx
c0016d10:	83 ec 28             	sub    esp,0x28
c0016d13:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0016d17:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016d1b:	50                   	push   eax
c0016d1c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016d20:	50                   	push   eax
c0016d21:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016d25:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016d29:	56                   	push   esi
c0016d2a:	e8 5b fe ff ff       	call   c0016b8a <Video::tgaParse(unsigned char*, int, int*, int*)>
c0016d2f:	83 c4 20             	add    esp,0x20
c0016d32:	85 c0                	test   eax,eax
c0016d34:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016d38:	74 35                	je     c0016d6f <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0016d3a:	89 c7                	mov    edi,eax
c0016d3c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016d40:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0016d44:	39 d8                	cmp    eax,ebx
c0016d46:	7e 27                	jle    c0016d6f <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0016d48:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016d4c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016d50:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0016d54:	39 e8                	cmp    eax,ebp
c0016d56:	7e 14                	jle    c0016d6c <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0016d58:	8b 06                	mov    eax,DWORD PTR [esi]
c0016d5a:	83 c7 04             	add    edi,0x4
c0016d5d:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0016d60:	53                   	push   ebx
c0016d61:	55                   	push   ebp
c0016d62:	45                   	inc    ebp
c0016d63:	56                   	push   esi
c0016d64:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016d67:	83 c4 10             	add    esp,0x10
c0016d6a:	eb e0                	jmp    c0016d4c <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0016d6c:	43                   	inc    ebx
c0016d6d:	eb cd                	jmp    c0016d3c <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0016d6f:	83 c4 1c             	add    esp,0x1c
c0016d72:	5b                   	pop    ebx
c0016d73:	5e                   	pop    esi
c0016d74:	5f                   	pop    edi
c0016d75:	5d                   	pop    ebp
c0016d76:	c3                   	ret    
c0016d77:	90                   	nop

c0016d78 <ACPI::close(int, int, void*)>:
c0016d78:	83 ec 1c             	sub    esp,0x1c
c0016d7b:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0016d83:	74 0a                	je     c0016d8f <ACPI::close(int, int, void*)+0x17>
c0016d85:	b8 00 00 00 00       	mov    eax,0x0
c0016d8a:	e9 9a 00 00 00       	jmp    c0016e29 <ACPI::close(int, int, void*)+0xb1>
c0016d8f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016d94:	75 37                	jne    c0016dcd <ACPI::close(int, int, void*)+0x55>
c0016d96:	83 ec 0c             	sub    esp,0xc
c0016d99:	68 68 9b 02 c0       	push   0xc0029b68
c0016d9e:	e8 cc b9 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c0016da3:	83 c4 10             	add    esp,0x10
c0016da6:	a1 e8 cf 02 c0       	mov    eax,ds:0xc002cfe8
c0016dab:	85 c0                	test   eax,eax
c0016dad:	74 07                	je     c0016db6 <ACPI::close(int, int, void*)+0x3e>
c0016daf:	a1 e8 cf 02 c0       	mov    eax,ds:0xc002cfe8
c0016db4:	ff d0                	call   eax
c0016db6:	83 ec 0c             	sub    esp,0xc
c0016db9:	68 3c 9c 02 c0       	push   0xc0029c3c
c0016dbe:	e8 c6 2a 00 00       	call   c0019889 <Krnl::panic(char const*)>
c0016dc3:	83 c4 10             	add    esp,0x10
c0016dc6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016dcb:	eb 5c                	jmp    c0016e29 <ACPI::close(int, int, void*)+0xb1>
c0016dcd:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0016dd2:	75 50                	jne    c0016e24 <ACPI::close(int, int, void*)+0xac>
c0016dd4:	a1 e4 cf 02 c0       	mov    eax,ds:0xc002cfe4
c0016dd9:	85 c0                	test   eax,eax
c0016ddb:	74 07                	je     c0016de4 <ACPI::close(int, int, void*)+0x6c>
c0016ddd:	a1 e4 cf 02 c0       	mov    eax,ds:0xc002cfe4
c0016de2:	ff d0                	call   eax
c0016de4:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0016de9:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016dee:	83 e0 02             	and    eax,0x2
c0016df1:	74 1c                	je     c0016e0f <ACPI::close(int, int, void*)+0x97>
c0016df3:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0016dfa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016dfe:	89 c2                	mov    edx,eax
c0016e00:	ec                   	in     al,dx
c0016e01:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0016e05:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0016e09:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016e0d:	eb da                	jmp    c0016de9 <ACPI::close(int, int, void*)+0x71>
c0016e0f:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0016e16:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0016e1b:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0016e1f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016e23:	ee                   	out    dx,al
c0016e24:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016e29:	83 c4 1c             	add    esp,0x1c
c0016e2c:	c3                   	ret    

c0016e2d <findRSDP()>:
c0016e2d:	83 ec 1c             	sub    esp,0x1c
c0016e30:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c0016e35:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016e3b:	83 e0 04             	and    eax,0x4
c0016e3e:	84 c0                	test   al,al
c0016e40:	75 07                	jne    c0016e49 <findRSDP()+0x1c>
c0016e42:	b8 00 00 00 00       	mov    eax,0x0
c0016e47:	eb 6a                	jmp    c0016eb3 <findRSDP()+0x86>
c0016e49:	a1 90 c9 02 c0       	mov    eax,ds:0xc002c990
c0016e4e:	3d ff 07 00 00       	cmp    eax,0x7ff
c0016e53:	7f 1b                	jg     c0016e70 <findRSDP()+0x43>
c0016e55:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c0016e5a:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016e60:	83 e2 fb             	and    edx,0xfffffffb
c0016e63:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016e69:	b8 00 00 00 00       	mov    eax,0x0
c0016e6e:	eb 43                	jmp    c0016eb3 <findRSDP()+0x86>
c0016e70:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0016e78:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0016e80:	77 2c                	ja     c0016eae <findRSDP()+0x81>
c0016e82:	83 ec 04             	sub    esp,0x4
c0016e85:	6a 08                	push   0x8
c0016e87:	68 75 9b 02 c0       	push   0xc0029b75
c0016e8c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016e90:	e8 5d 97 fe ff       	call   c00005f2 <memcmp>
c0016e95:	83 c4 10             	add    esp,0x10
c0016e98:	85 c0                	test   eax,eax
c0016e9a:	0f 94 c0             	sete   al
c0016e9d:	84 c0                	test   al,al
c0016e9f:	74 06                	je     c0016ea7 <findRSDP()+0x7a>
c0016ea1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016ea5:	eb 0c                	jmp    c0016eb3 <findRSDP()+0x86>
c0016ea7:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0016eac:	eb ca                	jmp    c0016e78 <findRSDP()+0x4b>
c0016eae:	b8 00 00 00 00       	mov    eax,0x0
c0016eb3:	83 c4 1c             	add    esp,0x1c
c0016eb6:	c3                   	ret    

c0016eb7 <loadACPITables(unsigned char*)>:
c0016eb7:	56                   	push   esi
c0016eb8:	53                   	push   ebx
c0016eb9:	83 ec 44             	sub    esp,0x44
c0016ebc:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c0016ec1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016ec7:	83 e0 04             	and    eax,0x4
c0016eca:	84 c0                	test   al,al
c0016ecc:	0f 84 05 02 00 00    	je     c00170d7 <loadACPITables(unsigned char*)+0x220>
c0016ed2:	a0 00 d2 02 c0       	mov    al,ds:0xc002d200
c0016ed7:	84 c0                	test   al,al
c0016ed9:	74 75                	je     c0016f50 <loadACPITables(unsigned char*)+0x99>
c0016edb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016edf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016ee3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016ee7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016eea:	83 e8 24             	sub    eax,0x24
c0016eed:	c1 e8 03             	shr    eax,0x3
c0016ef0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0016ef4:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0016efc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016f00:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0016f04:	0f 8d b2 00 00 00    	jge    c0016fbc <loadACPITables(unsigned char*)+0x105>
c0016f0a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016f0e:	83 c0 24             	add    eax,0x24
c0016f11:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016f15:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016f19:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0016f1d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016f21:	c1 e0 03             	shl    eax,0x3
c0016f24:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0016f28:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016f2c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0016f2f:	8b 00                	mov    eax,DWORD PTR [eax]
c0016f31:	89 c1                	mov    ecx,eax
c0016f33:	a1 ec cf 02 c0       	mov    eax,ds:0xc002cfec
c0016f38:	8d 50 01             	lea    edx,[eax+0x1]
c0016f3b:	89 15 ec cf 02 c0    	mov    DWORD PTR ds:0xc002cfec,edx
c0016f41:	89 ca                	mov    edx,ecx
c0016f43:	89 14 c5 04 d0 02 c0 	mov    DWORD PTR [eax*8-0x3ffd2ffc],edx
c0016f4a:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0016f4e:	eb ac                	jmp    c0016efc <loadACPITables(unsigned char*)+0x45>
c0016f50:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016f54:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016f58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016f5f:	83 e8 24             	sub    eax,0x24
c0016f62:	c1 e8 02             	shr    eax,0x2
c0016f65:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016f69:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0016f71:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016f75:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0016f79:	7d 41                	jge    c0016fbc <loadACPITables(unsigned char*)+0x105>
c0016f7b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016f7f:	83 c0 24             	add    eax,0x24
c0016f82:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016f86:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016f8a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016f8e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016f92:	c1 e0 02             	shl    eax,0x2
c0016f95:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0016f99:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016f9d:	8b 08                	mov    ecx,DWORD PTR [eax]
c0016f9f:	a1 ec cf 02 c0       	mov    eax,ds:0xc002cfec
c0016fa4:	8d 50 01             	lea    edx,[eax+0x1]
c0016fa7:	89 15 ec cf 02 c0    	mov    DWORD PTR ds:0xc002cfec,edx
c0016fad:	89 ca                	mov    edx,ecx
c0016faf:	89 14 c5 04 d0 02 c0 	mov    DWORD PTR [eax*8-0x3ffd2ffc],edx
c0016fb6:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0016fba:	eb b5                	jmp    c0016f71 <loadACPITables(unsigned char*)+0xba>
c0016fbc:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0016fc4:	a1 ec cf 02 c0       	mov    eax,ds:0xc002cfec
c0016fc9:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0016fcd:	0f 8d 05 01 00 00    	jge    c00170d8 <loadACPITables(unsigned char*)+0x221>
c0016fd3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016fd7:	8b 04 c5 04 d0 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd2ffc]
c0016fde:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016fe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016fe6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016fea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016fee:	25 ff 0f 00 00       	and    eax,0xfff
c0016ff3:	89 c6                	mov    esi,eax
c0016ff5:	e8 15 a9 ff ff       	call   c001190f <Virt::getAKernelVAS()>
c0016ffa:	89 c3                	mov    ebx,eax
c0016ffc:	83 ec 0c             	sub    esp,0xc
c0016fff:	6a 01                	push   0x1
c0017001:	e8 79 a7 ff ff       	call   c001177f <Virt::allocateKernelVirtualPages(int)>
c0017006:	83 c4 10             	add    esp,0x10
c0017009:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001700d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017013:	83 ec 0c             	sub    esp,0xc
c0017016:	6a 01                	push   0x1
c0017018:	6a 01                	push   0x1
c001701a:	50                   	push   eax
c001701b:	52                   	push   edx
c001701c:	53                   	push   ebx
c001701d:	e8 1c b1 ff ff       	call   c001213e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017022:	83 c4 20             	add    esp,0x20
c0017025:	09 f0                	or     eax,esi
c0017027:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001702b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001702f:	c1 e0 03             	shl    eax,0x3
c0017032:	05 00 d0 02 c0       	add    eax,0xc002d000
c0017037:	83 ec 04             	sub    esp,0x4
c001703a:	6a 04                	push   0x4
c001703c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017040:	50                   	push   eax
c0017041:	e8 0f 96 fe ff       	call   c0000655 <memcpy>
c0017046:	83 c4 10             	add    esp,0x10
c0017049:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001704d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017050:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017054:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017058:	05 00 10 00 00       	add    eax,0x1000
c001705d:	c1 e8 0c             	shr    eax,0xc
c0017060:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017064:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017068:	89 04 24             	mov    DWORD PTR [esp],eax
c001706b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001706f:	25 ff 0f 00 00       	and    eax,0xfff
c0017074:	89 c6                	mov    esi,eax
c0017076:	e8 94 a8 ff ff       	call   c001190f <Virt::getAKernelVAS()>
c001707b:	89 c3                	mov    ebx,eax
c001707d:	83 ec 0c             	sub    esp,0xc
c0017080:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017084:	e8 f6 a6 ff ff       	call   c001177f <Virt::allocateKernelVirtualPages(int)>
c0017089:	83 c4 10             	add    esp,0x10
c001708c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017090:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017096:	83 ec 0c             	sub    esp,0xc
c0017099:	6a 01                	push   0x1
c001709b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001709f:	50                   	push   eax
c00170a0:	52                   	push   edx
c00170a1:	53                   	push   ebx
c00170a2:	e8 97 b0 ff ff       	call   c001213e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00170a7:	83 c4 20             	add    esp,0x20
c00170aa:	09 f0                	or     eax,esi
c00170ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00170b0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00170b3:	83 ec 0c             	sub    esp,0xc
c00170b6:	50                   	push   eax
c00170b7:	e8 27 aa ff ff       	call   c0011ae3 <Virt::freeKernelVirtualPages(unsigned long)>
c00170bc:	83 c4 10             	add    esp,0x10
c00170bf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00170c3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00170c7:	89 14 c5 04 d0 02 c0 	mov    DWORD PTR [eax*8-0x3ffd2ffc],edx
c00170ce:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c00170d2:	e9 ed fe ff ff       	jmp    c0016fc4 <loadACPITables(unsigned char*)+0x10d>
c00170d7:	90                   	nop
c00170d8:	83 c4 44             	add    esp,0x44
c00170db:	5b                   	pop    ebx
c00170dc:	5e                   	pop    esi
c00170dd:	c3                   	ret    

c00170de <findRSDT(unsigned char*)>:
c00170de:	56                   	push   esi
c00170df:	53                   	push   ebx
c00170e0:	83 ec 44             	sub    esp,0x44
c00170e3:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c00170e8:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00170ee:	83 e0 04             	and    eax,0x4
c00170f1:	84 c0                	test   al,al
c00170f3:	75 0a                	jne    c00170ff <findRSDT(unsigned char*)+0x21>
c00170f5:	b8 00 00 00 00       	mov    eax,0x0
c00170fa:	e9 f7 00 00 00       	jmp    c00171f6 <findRSDT(unsigned char*)+0x118>
c00170ff:	83 ec 04             	sub    esp,0x4
c0017102:	6a 24                	push   0x24
c0017104:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0017108:	8d 44 24 18          	lea    eax,[esp+0x18]
c001710c:	50                   	push   eax
c001710d:	e8 43 95 fe ff       	call   c0000655 <memcpy>
c0017112:	83 c4 10             	add    esp,0x10
c0017115:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017119:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c001711d:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017125:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017129:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001712d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017131:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017135:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017139:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001713d:	25 ff 0f 00 00       	and    eax,0xfff
c0017142:	89 c6                	mov    esi,eax
c0017144:	e8 c6 a7 ff ff       	call   c001190f <Virt::getAKernelVAS()>
c0017149:	89 c3                	mov    ebx,eax
c001714b:	83 ec 0c             	sub    esp,0xc
c001714e:	6a 02                	push   0x2
c0017150:	e8 2a a6 ff ff       	call   c001177f <Virt::allocateKernelVirtualPages(int)>
c0017155:	83 c4 10             	add    esp,0x10
c0017158:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001715c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017162:	83 ec 0c             	sub    esp,0xc
c0017165:	6a 01                	push   0x1
c0017167:	6a 02                	push   0x2
c0017169:	50                   	push   eax
c001716a:	52                   	push   edx
c001716b:	53                   	push   ebx
c001716c:	e8 cd af ff ff       	call   c001213e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017171:	83 c4 20             	add    esp,0x20
c0017174:	09 f0                	or     eax,esi
c0017176:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001717a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001717e:	25 ff 0f 00 00       	and    eax,0xfff
c0017183:	89 c6                	mov    esi,eax
c0017185:	e8 85 a7 ff ff       	call   c001190f <Virt::getAKernelVAS()>
c001718a:	89 c3                	mov    ebx,eax
c001718c:	83 ec 0c             	sub    esp,0xc
c001718f:	6a 02                	push   0x2
c0017191:	e8 e9 a5 ff ff       	call   c001177f <Virt::allocateKernelVirtualPages(int)>
c0017196:	83 c4 10             	add    esp,0x10
c0017199:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001719d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00171a3:	83 ec 0c             	sub    esp,0xc
c00171a6:	6a 01                	push   0x1
c00171a8:	6a 02                	push   0x2
c00171aa:	50                   	push   eax
c00171ab:	52                   	push   edx
c00171ac:	53                   	push   ebx
c00171ad:	e8 8c af ff ff       	call   c001213e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00171b2:	83 c4 20             	add    esp,0x20
c00171b5:	09 f0                	or     eax,esi
c00171b7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00171bb:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c00171c0:	75 11                	jne    c00171d3 <findRSDT(unsigned char*)+0xf5>
c00171c2:	c6 05 00 d2 02 c0 00 	mov    BYTE PTR ds:0xc002d200,0x0
c00171c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00171cd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00171d1:	eb 1f                	jmp    c00171f2 <findRSDT(unsigned char*)+0x114>
c00171d3:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c00171d8:	75 11                	jne    c00171eb <findRSDT(unsigned char*)+0x10d>
c00171da:	c6 05 00 d2 02 c0 01 	mov    BYTE PTR ds:0xc002d200,0x1
c00171e1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00171e5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00171e9:	eb 07                	jmp    c00171f2 <findRSDT(unsigned char*)+0x114>
c00171eb:	b8 00 00 00 00       	mov    eax,0x0
c00171f0:	eb 04                	jmp    c00171f6 <findRSDT(unsigned char*)+0x118>
c00171f2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00171f6:	83 c4 44             	add    esp,0x44
c00171f9:	5b                   	pop    ebx
c00171fa:	5e                   	pop    esi
c00171fb:	c3                   	ret    

c00171fc <findDataTable(unsigned char*, char*)>:
c00171fc:	83 ec 1c             	sub    esp,0x1c
c00171ff:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c0017204:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001720a:	83 e0 04             	and    eax,0x4
c001720d:	84 c0                	test   al,al
c001720f:	75 07                	jne    c0017218 <findDataTable(unsigned char*, char*)+0x1c>
c0017211:	b8 00 00 00 00       	mov    eax,0x0
c0017216:	eb 7c                	jmp    c0017294 <findDataTable(unsigned char*, char*)+0x98>
c0017218:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017220:	a1 ec cf 02 c0       	mov    eax,ds:0xc002cfec
c0017225:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017229:	7d 3a                	jge    c0017265 <findDataTable(unsigned char*, char*)+0x69>
c001722b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001722f:	c1 e0 03             	shl    eax,0x3
c0017232:	05 00 d0 02 c0       	add    eax,0xc002d000
c0017237:	83 ec 04             	sub    esp,0x4
c001723a:	6a 04                	push   0x4
c001723c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017240:	50                   	push   eax
c0017241:	e8 ac 93 fe ff       	call   c00005f2 <memcmp>
c0017246:	83 c4 10             	add    esp,0x10
c0017249:	85 c0                	test   eax,eax
c001724b:	0f 94 c0             	sete   al
c001724e:	84 c0                	test   al,al
c0017250:	74 0d                	je     c001725f <findDataTable(unsigned char*, char*)+0x63>
c0017252:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017256:	8b 04 c5 04 d0 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd2ffc]
c001725d:	eb 35                	jmp    c0017294 <findDataTable(unsigned char*, char*)+0x98>
c001725f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017263:	eb bb                	jmp    c0017220 <findDataTable(unsigned char*, char*)+0x24>
c0017265:	a0 00 d2 02 c0       	mov    al,ds:0xc002d200
c001726a:	84 c0                	test   al,al
c001726c:	74 07                	je     c0017275 <findDataTable(unsigned char*, char*)+0x79>
c001726e:	b8 58 00 00 00       	mov    eax,0x58
c0017273:	eb 05                	jmp    c001727a <findDataTable(unsigned char*, char*)+0x7e>
c0017275:	b8 52 00 00 00       	mov    eax,0x52
c001727a:	83 ec 04             	sub    esp,0x4
c001727d:	50                   	push   eax
c001727e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017282:	68 60 9c 02 c0       	push   0xc0029c60
c0017287:	e8 e3 b4 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001728c:	83 c4 10             	add    esp,0x10
c001728f:	b8 00 00 00 00       	mov    eax,0x0
c0017294:	83 c4 1c             	add    esp,0x1c
c0017297:	c3                   	ret    

c0017298 <scanMADT()>:
c0017298:	53                   	push   ebx
c0017299:	83 ec 38             	sub    esp,0x38
c001729c:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c00172a1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00172a7:	83 e0 04             	and    eax,0x4
c00172aa:	84 c0                	test   al,al
c00172ac:	0f 84 63 04 00 00    	je     c0017715 <scanMADT()+0x47d>
c00172b2:	e8 76 fb ff ff       	call   c0016e2d <findRSDP()>
c00172b7:	a3 0c d2 02 c0       	mov    ds:0xc002d20c,eax
c00172bc:	a1 0c d2 02 c0       	mov    eax,ds:0xc002d20c
c00172c1:	85 c0                	test   eax,eax
c00172c3:	75 19                	jne    c00172de <scanMADT()+0x46>
c00172c5:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c00172ca:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00172d0:	83 e2 fb             	and    edx,0xfffffffb
c00172d3:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00172d9:	e9 3b 04 00 00       	jmp    c0017719 <scanMADT()+0x481>
c00172de:	a1 0c d2 02 c0       	mov    eax,ds:0xc002d20c
c00172e3:	83 ec 0c             	sub    esp,0xc
c00172e6:	50                   	push   eax
c00172e7:	e8 f2 fd ff ff       	call   c00170de <findRSDT(unsigned char*)>
c00172ec:	83 c4 10             	add    esp,0x10
c00172ef:	a3 08 d2 02 c0       	mov    ds:0xc002d208,eax
c00172f4:	a1 08 d2 02 c0       	mov    eax,ds:0xc002d208
c00172f9:	85 c0                	test   eax,eax
c00172fb:	75 19                	jne    c0017316 <scanMADT()+0x7e>
c00172fd:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c0017302:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017308:	83 e2 fb             	and    edx,0xfffffffb
c001730b:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017311:	e9 03 04 00 00       	jmp    c0017719 <scanMADT()+0x481>
c0017316:	a1 08 d2 02 c0       	mov    eax,ds:0xc002d208
c001731b:	83 ec 0c             	sub    esp,0xc
c001731e:	50                   	push   eax
c001731f:	e8 93 fb ff ff       	call   c0016eb7 <loadACPITables(unsigned char*)>
c0017324:	83 c4 10             	add    esp,0x10
c0017327:	a1 08 d2 02 c0       	mov    eax,ds:0xc002d208
c001732c:	83 ec 08             	sub    esp,0x8
c001732f:	68 7e 9b 02 c0       	push   0xc0029b7e
c0017334:	50                   	push   eax
c0017335:	e8 c2 fe ff ff       	call   c00171fc <findDataTable(unsigned char*, char*)>
c001733a:	83 c4 10             	add    esp,0x10
c001733d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017341:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017346:	75 19                	jne    c0017361 <scanMADT()+0xc9>
c0017348:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c001734d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017353:	83 e2 fe             	and    edx,0xfffffffe
c0017356:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001735c:	e9 b8 03 00 00       	jmp    c0017719 <scanMADT()+0x481>
c0017361:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017369:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001736d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017370:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017374:	0f 87 9f 03 00 00    	ja     c0017719 <scanMADT()+0x481>
c001737a:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017382:	0f 87 91 03 00 00    	ja     c0017719 <scanMADT()+0x481>
c0017388:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001738c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017390:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017394:	8d 50 01             	lea    edx,[eax+0x1]
c0017397:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001739b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001739f:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00173a3:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c00173a7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00173ab:	8d 50 01             	lea    edx,[eax+0x1]
c00173ae:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00173b2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00173b6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00173ba:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c00173be:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c00173c3:	0f 86 4f 03 00 00    	jbe    c0017718 <scanMADT()+0x480>
c00173c9:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c00173ce:	75 57                	jne    c0017427 <scanMADT()+0x18f>
c00173d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00173d4:	8d 50 01             	lea    edx,[eax+0x1]
c00173d7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00173db:	8a 15 00 d4 02 c0    	mov    dl,BYTE PTR ds:0xc002d400
c00173e1:	0f b6 d2             	movzx  edx,dl
c00173e4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00173e8:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00173ec:	88 82 40 d4 02 c0    	mov    BYTE PTR [edx-0x3ffd2bc0],al
c00173f2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00173f6:	8d 50 01             	lea    edx,[eax+0x1]
c00173f9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00173fd:	8a 15 00 d4 02 c0    	mov    dl,BYTE PTR ds:0xc002d400
c0017403:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017406:	88 0d 00 d4 02 c0    	mov    BYTE PTR ds:0xc002d400,cl
c001740c:	0f b6 d2             	movzx  edx,dl
c001740f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017413:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017417:	88 82 20 d4 02 c0    	mov    BYTE PTR [edx-0x3ffd2be0],al
c001741d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017422:	e9 da 02 00 00       	jmp    c0017701 <scanMADT()+0x469>
c0017427:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c001742c:	0f 85 14 01 00 00    	jne    c0017546 <scanMADT()+0x2ae>
c0017432:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017436:	8d 50 01             	lea    edx,[eax+0x1]
c0017439:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001743d:	8a 15 c0 d2 02 c0    	mov    dl,BYTE PTR ds:0xc002d2c0
c0017443:	0f b6 d2             	movzx  edx,dl
c0017446:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001744a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001744e:	88 82 e0 d2 02 c0    	mov    BYTE PTR [edx-0x3ffd2d20],al
c0017454:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017458:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001745c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017460:	01 d0                	add    eax,edx
c0017462:	83 c0 2c             	add    eax,0x2c
c0017465:	8a 00                	mov    al,BYTE PTR [eax]
c0017467:	0f b6 d0             	movzx  edx,al
c001746a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001746e:	8d 48 01             	lea    ecx,[eax+0x1]
c0017471:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017475:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017479:	0f b6 c0             	movzx  eax,al
c001747c:	c1 e0 08             	shl    eax,0x8
c001747f:	89 d1                	mov    ecx,edx
c0017481:	09 c1                	or     ecx,eax
c0017483:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017487:	8d 50 02             	lea    edx,[eax+0x2]
c001748a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001748e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017492:	0f b6 c0             	movzx  eax,al
c0017495:	c1 e0 10             	shl    eax,0x10
c0017498:	09 c1                	or     ecx,eax
c001749a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001749e:	8d 50 03             	lea    edx,[eax+0x3]
c00174a1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00174a5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00174a9:	0f b6 c0             	movzx  eax,al
c00174ac:	c1 e0 18             	shl    eax,0x18
c00174af:	09 c1                	or     ecx,eax
c00174b1:	89 ca                	mov    edx,ecx
c00174b3:	a0 c0 d2 02 c0       	mov    al,ds:0xc002d2c0
c00174b8:	0f b6 c0             	movzx  eax,al
c00174bb:	89 14 85 00 d3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2d00],edx
c00174c2:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00174c7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00174cb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00174cf:	01 d0                	add    eax,edx
c00174d1:	83 c0 2c             	add    eax,0x2c
c00174d4:	8a 00                	mov    al,BYTE PTR [eax]
c00174d6:	0f b6 d0             	movzx  edx,al
c00174d9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00174dd:	8d 48 01             	lea    ecx,[eax+0x1]
c00174e0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00174e4:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00174e8:	0f b6 c0             	movzx  eax,al
c00174eb:	c1 e0 08             	shl    eax,0x8
c00174ee:	89 d1                	mov    ecx,edx
c00174f0:	09 c1                	or     ecx,eax
c00174f2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00174f6:	8d 50 02             	lea    edx,[eax+0x2]
c00174f9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00174fd:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017501:	0f b6 c0             	movzx  eax,al
c0017504:	c1 e0 10             	shl    eax,0x10
c0017507:	09 c1                	or     ecx,eax
c0017509:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001750d:	8d 50 03             	lea    edx,[eax+0x3]
c0017510:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017514:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017518:	0f b6 c0             	movzx  eax,al
c001751b:	c1 e0 18             	shl    eax,0x18
c001751e:	09 c1                	or     ecx,eax
c0017520:	89 ca                	mov    edx,ecx
c0017522:	a0 c0 d2 02 c0       	mov    al,ds:0xc002d2c0
c0017527:	0f b6 c0             	movzx  eax,al
c001752a:	89 14 85 80 d3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2c80],edx
c0017531:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017536:	a0 c0 d2 02 c0       	mov    al,ds:0xc002d2c0
c001753b:	40                   	inc    eax
c001753c:	a2 c0 d2 02 c0       	mov    ds:0xc002d2c0,al
c0017541:	e9 bb 01 00 00       	jmp    c0017701 <scanMADT()+0x469>
c0017546:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c001754b:	0f 85 e9 00 00 00    	jne    c001763a <scanMADT()+0x3a2>
c0017551:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017555:	8d 50 01             	lea    edx,[eax+0x1]
c0017558:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001755c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017560:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017564:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017568:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001756c:	8d 50 01             	lea    edx,[eax+0x1]
c001756f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017573:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017577:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001757b:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001757f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017583:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017587:	01 d0                	add    eax,edx
c0017589:	83 c0 2c             	add    eax,0x2c
c001758c:	8a 00                	mov    al,BYTE PTR [eax]
c001758e:	0f b6 d0             	movzx  edx,al
c0017591:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017595:	8d 48 01             	lea    ecx,[eax+0x1]
c0017598:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001759c:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00175a0:	0f b6 c0             	movzx  eax,al
c00175a3:	c1 e0 08             	shl    eax,0x8
c00175a6:	89 d1                	mov    ecx,edx
c00175a8:	09 c1                	or     ecx,eax
c00175aa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00175ae:	8d 50 02             	lea    edx,[eax+0x2]
c00175b1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00175b5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00175b9:	0f b6 c0             	movzx  eax,al
c00175bc:	c1 e0 10             	shl    eax,0x10
c00175bf:	09 c1                	or     ecx,eax
c00175c1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00175c5:	8d 50 03             	lea    edx,[eax+0x3]
c00175c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00175cc:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00175d0:	0f b6 c0             	movzx  eax,al
c00175d3:	c1 e0 18             	shl    eax,0x18
c00175d6:	09 c8                	or     eax,ecx
c00175d8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00175dc:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00175e1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00175e5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00175e9:	01 d0                	add    eax,edx
c00175eb:	83 c0 2c             	add    eax,0x2c
c00175ee:	8a 00                	mov    al,BYTE PTR [eax]
c00175f0:	0f b6 c0             	movzx  eax,al
c00175f3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00175f7:	8d 4a 01             	lea    ecx,[edx+0x1]
c00175fa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00175fe:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0017602:	0f b6 d2             	movzx  edx,dl
c0017605:	c1 e2 08             	shl    edx,0x8
c0017608:	09 d0                	or     eax,edx
c001760a:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001760f:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017614:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017619:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001761d:	88 90 a0 bb 02 c0    	mov    BYTE PTR [eax-0x3ffd4460],dl
c0017623:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0017628:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001762d:	66 89 84 12 a0 d2 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd2d60],ax
c0017635:	e9 c7 00 00 00       	jmp    c0017701 <scanMADT()+0x469>
c001763a:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c001763f:	0f 85 b0 00 00 00    	jne    c00176f5 <scanMADT()+0x45d>
c0017645:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017649:	8d 50 01             	lea    edx,[eax+0x1]
c001764c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017650:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017654:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017658:	0f b6 c0             	movzx  eax,al
c001765b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001765f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017663:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017667:	01 d0                	add    eax,edx
c0017669:	83 c0 2c             	add    eax,0x2c
c001766c:	8a 00                	mov    al,BYTE PTR [eax]
c001766e:	0f b6 d0             	movzx  edx,al
c0017671:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017675:	8d 48 01             	lea    ecx,[eax+0x1]
c0017678:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001767c:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017680:	0f b6 c0             	movzx  eax,al
c0017683:	c1 e0 08             	shl    eax,0x8
c0017686:	09 d0                	or     eax,edx
c0017688:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001768c:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017691:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017695:	8d 50 01             	lea    edx,[eax+0x1]
c0017698:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001769c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00176a0:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00176a4:	0f b6 c0             	movzx  eax,al
c00176a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00176ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00176af:	c1 e0 08             	shl    eax,0x8
c00176b2:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00176b6:	89 c1                	mov    ecx,eax
c00176b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00176bc:	c1 e0 18             	shl    eax,0x18
c00176bf:	89 c3                	mov    ebx,eax
c00176c1:	a1 10 d2 02 c0       	mov    eax,ds:0xc002d210
c00176c6:	8d 50 01             	lea    edx,[eax+0x1]
c00176c9:	89 15 10 d2 02 c0    	mov    DWORD PTR ds:0xc002d210,edx
c00176cf:	09 d9                	or     ecx,ebx
c00176d1:	89 ca                	mov    edx,ecx
c00176d3:	89 14 85 20 d2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2de0],edx
c00176da:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00176de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00176e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00176e6:	68 90 9c 02 c0       	push   0xc0029c90
c00176eb:	e8 7f b0 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c00176f0:	83 c4 10             	add    esp,0x10
c00176f3:	eb 0c                	jmp    c0017701 <scanMADT()+0x469>
c00176f5:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c00176fa:	75 05                	jne    c0017701 <scanMADT()+0x469>
c00176fc:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0017701:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0017706:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001770a:	01 d0                	add    eax,edx
c001770c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017710:	e9 54 fc ff ff       	jmp    c0017369 <scanMADT()+0xd1>
c0017715:	90                   	nop
c0017716:	eb 01                	jmp    c0017719 <scanMADT()+0x481>
c0017718:	90                   	nop
c0017719:	83 c4 38             	add    esp,0x38
c001771c:	5b                   	pop    ebx
c001771d:	c3                   	ret    

c001771e <ACPI::ACPI()>:
c001771e:	83 ec 0c             	sub    esp,0xc
c0017721:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017725:	83 ec 08             	sub    esp,0x8
c0017728:	68 83 9b 02 c0       	push   0xc0029b83
c001772d:	50                   	push   eax
c001772e:	e8 1b c6 ff ff       	call   c0013d4e <Device::Device(char const*)>
c0017733:	83 c4 10             	add    esp,0x10
c0017736:	ba 68 9d 02 c0       	mov    edx,0xc0029d68
c001773b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001773f:	89 10                	mov    DWORD PTR [eax],edx
c0017741:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017745:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001774c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017750:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c001775a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001775e:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c0017768:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001776c:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c0017773:	e8 20 fb ff ff       	call   c0017298 <scanMADT()>
c0017778:	90                   	nop
c0017779:	83 c4 0c             	add    esp,0xc
c001777c:	c3                   	ret    
c001777d:	90                   	nop

c001777e <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c001777e:	83 ec 2c             	sub    esp,0x2c
c0017781:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017785:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017789:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001778d:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017791:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017796:	88 d0                	mov    al,dl
c0017798:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001779c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00177a1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00177a9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00177ad:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00177b3:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00177b7:	0f 8d 97 00 00 00    	jge    c0017854 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c00177bd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00177c1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00177c5:	83 c2 2a             	add    edx,0x2a
c00177c8:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c00177cc:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c00177d1:	75 78                	jne    c001784b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00177d3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00177d7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00177db:	83 c2 2a             	add    edx,0x2a
c00177de:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c00177e2:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c00177e6:	75 63                	jne    c001784b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00177e8:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00177ed:	74 3a                	je     c0017829 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c00177ef:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00177f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00177f7:	83 c2 2a             	add    edx,0x2a
c00177fa:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c00177fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017802:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017805:	39 c2                	cmp    edx,eax
c0017807:	74 10                	je     c0017819 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0017809:	83 ec 0c             	sub    esp,0xc
c001780c:	68 cc 9c 02 c0       	push   0xc0029ccc
c0017811:	e8 73 20 00 00       	call   c0019889 <Krnl::panic(char const*)>
c0017816:	83 c4 10             	add    esp,0x10
c0017819:	83 ec 0c             	sub    esp,0xc
c001781c:	68 88 9b 02 c0       	push   0xc0029b88
c0017821:	e8 63 20 00 00       	call   c0019889 <Krnl::panic(char const*)>
c0017826:	83 c4 10             	add    esp,0x10
c0017829:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001782d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017831:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017835:	83 c2 2a             	add    edx,0x2a
c0017838:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c001783c:	8b 02                	mov    eax,DWORD PTR [edx]
c001783e:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0017841:	89 01                	mov    DWORD PTR [ecx],eax
c0017843:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017846:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001784b:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001784f:	e9 55 ff ff ff       	jmp    c00177a9 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0017854:	90                   	nop
c0017855:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017859:	83 c4 2c             	add    esp,0x2c
c001785c:	c2 04 00             	ret    0x4
c001785f:	90                   	nop

c0017860 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017860:	56                   	push   esi
c0017861:	53                   	push   ebx
c0017862:	83 ec 14             	sub    esp,0x14
c0017865:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017869:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001786d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017871:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017876:	88 c8                	mov    al,cl
c0017878:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001787c:	88 d0                	mov    al,dl
c001787e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017882:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017886:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c001788c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017890:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c0017896:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c001789b:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00178a0:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00178a5:	83 ec 04             	sub    esp,0x4
c00178a8:	56                   	push   esi
c00178a9:	53                   	push   ebx
c00178aa:	51                   	push   ecx
c00178ab:	52                   	push   edx
c00178ac:	50                   	push   eax
c00178ad:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00178b1:	68 fc 9c 02 c0       	push   0xc0029cfc
c00178b6:	e8 b4 ae ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c00178bb:	83 c4 20             	add    esp,0x20
c00178be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178c2:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c00178c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178cc:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00178cf:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c00178d3:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c00178d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178db:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00178e1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00178e5:	8d 48 2a             	lea    ecx,[eax+0x2a]
c00178e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00178ec:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c00178f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178f5:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c00178fb:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00178ff:	8d 48 01             	lea    ecx,[eax+0x1]
c0017902:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017906:	83 c2 2a             	add    edx,0x2a
c0017909:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c001790d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017911:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0017917:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001791b:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001791e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017922:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017926:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001792a:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0017930:	8d 50 01             	lea    edx,[eax+0x1]
c0017933:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017937:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c001793d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017941:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0017947:	3d 00 08 00 00       	cmp    eax,0x800
c001794c:	75 10                	jne    c001795e <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xfe>
c001794e:	83 ec 0c             	sub    esp,0xc
c0017951:	68 97 9b 02 c0       	push   0xc0029b97
c0017956:	e8 2e 1f 00 00       	call   c0019889 <Krnl::panic(char const*)>
c001795b:	83 c4 10             	add    esp,0x10
c001795e:	90                   	nop
c001795f:	83 c4 14             	add    esp,0x14
c0017962:	5b                   	pop    ebx
c0017963:	5e                   	pop    esi
c0017964:	c3                   	ret    
c0017965:	90                   	nop

c0017966 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017966:	b8 00 00 00 00       	mov    eax,0x0
c001796b:	c3                   	ret    

c001796c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001796c:	83 ec 1c             	sub    esp,0x1c
c001796f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017973:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0017976:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001797a:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c001797f:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017984:	83 ec 08             	sub    esp,0x8
c0017987:	52                   	push   edx
c0017988:	50                   	push   eax
c0017989:	e8 5e 71 ff ff       	call   c000eaec <Computer::readCMOS(unsigned char)>
c001798e:	83 c4 10             	add    esp,0x10
c0017991:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0017995:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c001799a:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001799f:	83 ec 04             	sub    esp,0x4
c00179a2:	6a 01                	push   0x1
c00179a4:	52                   	push   edx
c00179a5:	50                   	push   eax
c00179a6:	e8 57 72 ff ff       	call   c000ec02 <Computer::writeCMOS(unsigned char, unsigned char)>
c00179ab:	83 c4 10             	add    esp,0x10
c00179ae:	90                   	nop
c00179af:	83 c4 1c             	add    esp,0x1c
c00179b2:	c3                   	ret    
c00179b3:	90                   	nop

c00179b4 <ACPI::open(int, int, void*)>:
c00179b4:	53                   	push   ebx
c00179b5:	83 ec 28             	sub    esp,0x28
c00179b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00179bc:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c00179c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00179c7:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c00179cd:	84 c0                	test   al,al
c00179cf:	74 67                	je     c0017a38 <ACPI::open(int, int, void*)+0x84>
c00179d1:	c7 44 24 10 58 01 00 00 	mov    DWORD PTR [esp+0x10],0x158
c00179d9:	83 ec 0c             	sub    esp,0xc
c00179dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00179e0:	e8 ef 7a ff ff       	call   c000f4d4 <malloc>
c00179e5:	83 c4 10             	add    esp,0x10
c00179e8:	89 c3                	mov    ebx,eax
c00179ea:	83 ec 0c             	sub    esp,0xc
c00179ed:	53                   	push   ebx
c00179ee:	e8 47 9e 00 00       	call   c002183a <PCI::PCI()>
c00179f3:	83 c4 10             	add    esp,0x10
c00179f6:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c00179fa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00179fe:	83 ec 08             	sub    esp,0x8
c0017a01:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017a05:	50                   	push   eax
c0017a06:	e8 53 c1 ff ff       	call   c0013b5e <Device::addChild(Device*)>
c0017a0b:	83 c4 10             	add    esp,0x10
c0017a0e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017a12:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a14:	83 c0 08             	add    eax,0x8
c0017a17:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a19:	6a 00                	push   0x0
c0017a1b:	6a 00                	push   0x0
c0017a1d:	6a 00                	push   0x0
c0017a1f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017a23:	ff d0                	call   eax
c0017a25:	83 c4 10             	add    esp,0x10
c0017a28:	83 ec 0c             	sub    esp,0xc
c0017a2b:	68 b4 9b 02 c0       	push   0xc0029bb4
c0017a30:	e8 3a ad ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c0017a35:	83 c4 10             	add    esp,0x10
c0017a38:	83 ec 0c             	sub    esp,0xc
c0017a3b:	68 bf 9b 02 c0       	push   0xc0029bbf
c0017a40:	e8 9f 41 00 00       	call   c001bbe4 <Thr::loadKernelSymbolTable(char const*)>
c0017a45:	83 c4 10             	add    esp,0x10
c0017a48:	8b 1d 48 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c948
c0017a4e:	83 ec 08             	sub    esp,0x8
c0017a51:	6a 01                	push   0x1
c0017a53:	68 dd 9b 02 c0       	push   0xc0029bdd
c0017a58:	e8 47 4c 00 00       	call   c001c6a4 <Thr::loadDLL(char const*, bool)>
c0017a5d:	83 c4 10             	add    esp,0x10
c0017a60:	83 ec 08             	sub    esp,0x8
c0017a63:	53                   	push   ebx
c0017a64:	50                   	push   eax
c0017a65:	e8 49 4e 00 00       	call   c001c8b3 <Thr::executeDLL(unsigned long, void*)>
c0017a6a:	83 c4 10             	add    esp,0x10
c0017a6d:	8b 1d 48 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c948
c0017a73:	83 ec 08             	sub    esp,0x8
c0017a76:	6a 01                	push   0x1
c0017a78:	68 fa 9b 02 c0       	push   0xc0029bfa
c0017a7d:	e8 22 4c 00 00       	call   c001c6a4 <Thr::loadDLL(char const*, bool)>
c0017a82:	83 c4 10             	add    esp,0x10
c0017a85:	83 ec 08             	sub    esp,0x8
c0017a88:	53                   	push   ebx
c0017a89:	50                   	push   eax
c0017a8a:	e8 24 4e 00 00       	call   c001c8b3 <Thr::executeDLL(unsigned long, void*)>
c0017a8f:	83 c4 10             	add    esp,0x10
c0017a92:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c0017a97:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017a9d:	83 e0 04             	and    eax,0x4
c0017aa0:	84 c0                	test   al,al
c0017aa2:	0f 84 d6 00 00 00    	je     c0017b7e <ACPI::open(int, int, void*)+0x1ca>
c0017aa8:	c7 44 24 0c 14 01 00 00 	mov    DWORD PTR [esp+0xc],0x114
c0017ab0:	83 ec 0c             	sub    esp,0xc
c0017ab3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017ab7:	e8 18 7a ff ff       	call   c000f4d4 <malloc>
c0017abc:	83 c4 10             	add    esp,0x10
c0017abf:	89 c3                	mov    ebx,eax
c0017ac1:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0017ac6:	83 ec 04             	sub    esp,0x4
c0017ac9:	50                   	push   eax
c0017aca:	68 17 9c 02 c0       	push   0xc0029c17
c0017acf:	53                   	push   ebx
c0017ad0:	e8 c9 b1 ff ff       	call   c0012c9e <File::File(char const*, Process*)>
c0017ad5:	83 c4 10             	add    esp,0x10
c0017ad8:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0017adc:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017ae1:	74 17                	je     c0017afa <ACPI::open(int, int, void*)+0x146>
c0017ae3:	83 ec 0c             	sub    esp,0xc
c0017ae6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017aea:	e8 81 b4 ff ff       	call   c0012f70 <File::exists()>
c0017aef:	83 c4 10             	add    esp,0x10
c0017af2:	84 c0                	test   al,al
c0017af4:	74 04                	je     c0017afa <ACPI::open(int, int, void*)+0x146>
c0017af6:	b0 01                	mov    al,0x1
c0017af8:	eb 02                	jmp    c0017afc <ACPI::open(int, int, void*)+0x148>
c0017afa:	b0 00                	mov    al,0x0
c0017afc:	84 c0                	test   al,al
c0017afe:	74 25                	je     c0017b25 <ACPI::open(int, int, void*)+0x171>
c0017b00:	8b 1d 48 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c948
c0017b06:	83 ec 08             	sub    esp,0x8
c0017b09:	6a 01                	push   0x1
c0017b0b:	68 17 9c 02 c0       	push   0xc0029c17
c0017b10:	e8 8f 4b 00 00       	call   c001c6a4 <Thr::loadDLL(char const*, bool)>
c0017b15:	83 c4 10             	add    esp,0x10
c0017b18:	83 ec 08             	sub    esp,0x8
c0017b1b:	53                   	push   ebx
c0017b1c:	50                   	push   eax
c0017b1d:	e8 91 4d 00 00       	call   c001c8b3 <Thr::executeDLL(unsigned long, void*)>
c0017b22:	83 c4 10             	add    esp,0x10
c0017b25:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017b2a:	74 1e                	je     c0017b4a <ACPI::open(int, int, void*)+0x196>
c0017b2c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017b31:	74 17                	je     c0017b4a <ACPI::open(int, int, void*)+0x196>
c0017b33:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017b37:	8b 00                	mov    eax,DWORD PTR [eax]
c0017b39:	83 c0 08             	add    eax,0x8
c0017b3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0017b3e:	83 ec 0c             	sub    esp,0xc
c0017b41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017b45:	ff d0                	call   eax
c0017b47:	83 c4 10             	add    esp,0x10
c0017b4a:	a1 08 d2 02 c0       	mov    eax,ds:0xc002d208
c0017b4f:	83 ec 08             	sub    esp,0x8
c0017b52:	68 34 9c 02 c0       	push   0xc0029c34
c0017b57:	50                   	push   eax
c0017b58:	e8 9f f6 ff ff       	call   c00171fc <findDataTable(unsigned char*, char*)>
c0017b5d:	83 c4 10             	add    esp,0x10
c0017b60:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017b64:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0017b69:	74 13                	je     c0017b7e <ACPI::open(int, int, void*)+0x1ca>
c0017b6b:	83 ec 08             	sub    esp,0x8
c0017b6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017b72:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017b76:	e8 f1 fd ff ff       	call   c001796c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0017b7b:	83 c4 10             	add    esp,0x10
c0017b7e:	b8 00 00 00 00       	mov    eax,0x0
c0017b83:	83 c4 28             	add    esp,0x28
c0017b86:	5b                   	pop    ebx
c0017b87:	c3                   	ret    

c0017b88 <ACPI::sleep()>:
c0017b88:	83 ec 0c             	sub    esp,0xc
c0017b8b:	a1 e0 cf 02 c0       	mov    eax,ds:0xc002cfe0
c0017b90:	85 c0                	test   eax,eax
c0017b92:	74 07                	je     c0017b9b <ACPI::sleep()+0x13>
c0017b94:	a1 e0 cf 02 c0       	mov    eax,ds:0xc002cfe0
c0017b99:	ff d0                	call   eax
c0017b9b:	90                   	nop
c0017b9c:	83 c4 0c             	add    esp,0xc
c0017b9f:	c3                   	ret    

c0017ba0 <CPU::close(int, int, void*)>:
c0017ba0:	31 c0                	xor    eax,eax
c0017ba2:	c3                   	ret    
c0017ba3:	90                   	nop

c0017ba4 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0017ba4:	55                   	push   ebp
c0017ba5:	57                   	push   edi
c0017ba6:	56                   	push   esi
c0017ba7:	53                   	push   ebx
c0017ba8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017bac:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017bb0:	89 ce                	mov    esi,ecx
c0017bb2:	89 d5                	mov    ebp,edx
c0017bb4:	80 f9 04             	cmp    cl,0x4
c0017bb7:	75 28                	jne    c0017be1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0017bb9:	8d 42 f9             	lea    eax,[edx-0x7]
c0017bbc:	3c 03                	cmp    al,0x3
c0017bbe:	0f 86 63 01 00 00    	jbe    c0017d27 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0017bc4:	80 fa 03             	cmp    dl,0x3
c0017bc7:	0f 84 5a 01 00 00    	je     c0017d27 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0017bcd:	8d 7a f2             	lea    edi,[edx-0xe]
c0017bd0:	b8 70 bd 02 c0       	mov    eax,0xc002bd70
c0017bd5:	89 fb                	mov    ebx,edi
c0017bd7:	80 fb 01             	cmp    bl,0x1
c0017bda:	77 4e                	ja     c0017c2a <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0017bdc:	e9 52 01 00 00       	jmp    c0017d33 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017be1:	80 f9 05             	cmp    cl,0x5
c0017be4:	75 4d                	jne    c0017c33 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0017be6:	b8 80 bd 02 c0       	mov    eax,0xc002bd80
c0017beb:	80 fa 03             	cmp    dl,0x3
c0017bee:	0f 86 3f 01 00 00    	jbe    c0017d33 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017bf4:	8d 7a fa             	lea    edi,[edx-0x6]
c0017bf7:	b8 90 bd 02 c0       	mov    eax,0xc002bd90
c0017bfc:	89 fb                	mov    ebx,edi
c0017bfe:	80 fb 01             	cmp    bl,0x1
c0017c01:	0f 86 2c 01 00 00    	jbe    c0017d33 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c07:	b8 a0 bd 02 c0       	mov    eax,0xc002bda0
c0017c0c:	80 fa 08             	cmp    dl,0x8
c0017c0f:	0f 84 1e 01 00 00    	je     c0017d33 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c15:	89 d7                	mov    edi,edx
c0017c17:	b8 b0 bd 02 c0       	mov    eax,0xc002bdb0
c0017c1c:	83 e7 fb             	and    edi,0xfffffffb
c0017c1f:	89 fb                	mov    ebx,edi
c0017c21:	80 fb 09             	cmp    bl,0x9
c0017c24:	0f 84 09 01 00 00    	je     c0017d33 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c2a:	31 c0                	xor    eax,eax
c0017c2c:	89 eb                	mov    ebx,ebp
c0017c2e:	0f b6 fb             	movzx  edi,bl
c0017c31:	eb 30                	jmp    c0017c63 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0017c33:	31 c0                	xor    eax,eax
c0017c35:	80 f9 06             	cmp    cl,0x6
c0017c38:	75 f2                	jne    c0017c2c <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017c3a:	80 fa 0a             	cmp    dl,0xa
c0017c3d:	77 ed                	ja     c0017c2c <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017c3f:	bf de 05 00 00       	mov    edi,0x5de
c0017c44:	0f a3 d7             	bt     edi,edx
c0017c47:	73 e3                	jae    c0017c2c <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017c49:	b8 c0 bd 02 c0       	mov    eax,0xc002bdc0
c0017c4e:	e9 e0 00 00 00       	jmp    c0017d33 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c53:	39 c7                	cmp    edi,eax
c0017c55:	0f 84 d3 00 00 00    	je     c0017d2e <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0017c5b:	40                   	inc    eax
c0017c5c:	3d d0 00 00 00       	cmp    eax,0xd0
c0017c61:	74 09                	je     c0017c6c <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0017c63:	89 f3                	mov    ebx,esi
c0017c65:	80 fb 0f             	cmp    bl,0xf
c0017c68:	75 f1                	jne    c0017c5b <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0017c6a:	eb e7                	jmp    c0017c53 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0017c6c:	80 f9 10             	cmp    cl,0x10
c0017c6f:	75 14                	jne    c0017c85 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0017c71:	8d 42 fc             	lea    eax,[edx-0x4]
c0017c74:	83 e0 fb             	and    eax,0xfffffffb
c0017c77:	3c 02                	cmp    al,0x2
c0017c79:	76 34                	jbe    c0017caf <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0017c7b:	b8 7e a0 02 c0       	mov    eax,0xc002a07e
c0017c80:	80 fa 02             	cmp    dl,0x2
c0017c83:	eb 24                	jmp    c0017ca9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0017c85:	80 f9 11             	cmp    cl,0x11
c0017c88:	75 13                	jne    c0017c9d <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0017c8a:	b8 7e a0 02 c0       	mov    eax,0xc002a07e
c0017c8f:	80 fa 03             	cmp    dl,0x3
c0017c92:	0f 85 9b 00 00 00    	jne    c0017d33 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c98:	e9 91 00 00 00       	jmp    c0017d2e <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0017c9d:	80 f9 12             	cmp    cl,0x12
c0017ca0:	75 14                	jne    c0017cb6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0017ca2:	b8 7e a0 02 c0       	mov    eax,0xc002a07e
c0017ca7:	fe ca                	dec    dl
c0017ca9:	0f 85 84 00 00 00    	jne    c0017d33 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017caf:	b8 e0 bd 02 c0       	mov    eax,0xc002bde0
c0017cb4:	eb 7d                	jmp    c0017d33 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017cb6:	80 f9 14             	cmp    cl,0x14
c0017cb9:	75 12                	jne    c0017ccd <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0017cbb:	4a                   	dec    edx
c0017cbc:	b8 7e a0 02 c0       	mov    eax,0xc002a07e
c0017cc1:	80 fa 01             	cmp    dl,0x1
c0017cc4:	77 6d                	ja     c0017d33 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017cc6:	b8 f0 bd 02 c0       	mov    eax,0xc002bdf0
c0017ccb:	eb 66                	jmp    c0017d33 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017ccd:	80 f9 15             	cmp    cl,0x15
c0017cd0:	75 31                	jne    c0017d03 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0017cd2:	b8 00 be 02 c0       	mov    eax,0xc002be00
c0017cd7:	80 fa 01             	cmp    dl,0x1
c0017cda:	74 57                	je     c0017d33 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017cdc:	b8 7e a0 02 c0       	mov    eax,0xc002a07e
c0017ce1:	80 fa 13             	cmp    dl,0x13
c0017ce4:	76 0c                	jbe    c0017cf2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0017ce6:	80 fa 30             	cmp    dl,0x30
c0017ce9:	75 48                	jne    c0017d33 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017ceb:	b8 20 be 02 c0       	mov    eax,0xc002be20
c0017cf0:	eb 41                	jmp    c0017d33 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017cf2:	b9 04 00 09 00       	mov    ecx,0x90004
c0017cf7:	0f a3 d1             	bt     ecx,edx
c0017cfa:	73 37                	jae    c0017d33 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017cfc:	b8 10 be 02 c0       	mov    eax,0xc002be10
c0017d01:	eb 30                	jmp    c0017d33 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d03:	b8 7e a0 02 c0       	mov    eax,0xc002a07e
c0017d08:	80 f9 16             	cmp    cl,0x16
c0017d0b:	75 26                	jne    c0017d33 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d0d:	b8 30 be 02 c0       	mov    eax,0xc002be30
c0017d12:	84 d2                	test   dl,dl
c0017d14:	74 1d                	je     c0017d33 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d16:	b8 7e a0 02 c0       	mov    eax,0xc002a07e
c0017d1b:	80 fa 30             	cmp    dl,0x30
c0017d1e:	75 13                	jne    c0017d33 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d20:	b8 40 be 02 c0       	mov    eax,0xc002be40
c0017d25:	eb 0c                	jmp    c0017d33 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d27:	b8 60 bd 02 c0       	mov    eax,0xc002bd60
c0017d2c:	eb 05                	jmp    c0017d33 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d2e:	b8 d0 bd 02 c0       	mov    eax,0xc002bdd0
c0017d33:	5b                   	pop    ebx
c0017d34:	5e                   	pop    esi
c0017d35:	5f                   	pop    edi
c0017d36:	5d                   	pop    ebp
c0017d37:	c3                   	ret    

c0017d38 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0017d38:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017d3c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017d40:	80 f9 04             	cmp    cl,0x4
c0017d43:	75 6b                	jne    c0017db0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0017d45:	b8 c0 bb 02 c0       	mov    eax,0xc002bbc0
c0017d4a:	80 fa 01             	cmp    dl,0x1
c0017d4d:	0f 86 92 02 00 00    	jbe    c0017fe5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d53:	b8 d0 bb 02 c0       	mov    eax,0xc002bbd0
c0017d58:	80 fa 02             	cmp    dl,0x2
c0017d5b:	0f 84 84 02 00 00    	je     c0017fe5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d61:	b8 e0 bb 02 c0       	mov    eax,0xc002bbe0
c0017d66:	80 fa 03             	cmp    dl,0x3
c0017d69:	0f 84 76 02 00 00    	je     c0017fe5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d6f:	b8 f0 bb 02 c0       	mov    eax,0xc002bbf0
c0017d74:	80 fa 04             	cmp    dl,0x4
c0017d77:	0f 84 68 02 00 00    	je     c0017fe5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d7d:	b8 00 bc 02 c0       	mov    eax,0xc002bc00
c0017d82:	80 fa 05             	cmp    dl,0x5
c0017d85:	0f 84 5a 02 00 00    	je     c0017fe5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d8b:	b8 e0 bb 02 c0       	mov    eax,0xc002bbe0
c0017d90:	80 fa 07             	cmp    dl,0x7
c0017d93:	0f 84 4c 02 00 00    	je     c0017fe5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d99:	83 ea 08             	sub    edx,0x8
c0017d9c:	b8 7e a0 02 c0       	mov    eax,0xc002a07e
c0017da1:	80 fa 01             	cmp    dl,0x1
c0017da4:	0f 87 3b 02 00 00    	ja     c0017fe5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017daa:	b8 10 bc 02 c0       	mov    eax,0xc002bc10
c0017daf:	c3                   	ret    
c0017db0:	80 f9 05             	cmp    cl,0x5
c0017db3:	75 45                	jne    c0017dfa <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0017db5:	8d 4a ff             	lea    ecx,[edx-0x1]
c0017db8:	b8 20 bc 02 c0       	mov    eax,0xc002bc20
c0017dbd:	80 f9 02             	cmp    cl,0x2
c0017dc0:	0f 86 1f 02 00 00    	jbe    c0017fe5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017dc6:	80 fa 04             	cmp    dl,0x4
c0017dc9:	0f 84 f3 01 00 00    	je     c0017fc2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0017dcf:	80 fa 07             	cmp    dl,0x7
c0017dd2:	0f 84 0d 02 00 00    	je     c0017fe5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017dd8:	b8 30 bc 02 c0       	mov    eax,0xc002bc30
c0017ddd:	80 fa 08             	cmp    dl,0x8
c0017de0:	0f 84 ff 01 00 00    	je     c0017fe5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017de6:	b8 7e a0 02 c0       	mov    eax,0xc002a07e
c0017deb:	80 fa 09             	cmp    dl,0x9
c0017dee:	0f 85 f1 01 00 00    	jne    c0017fe5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017df4:	b8 40 bc 02 c0       	mov    eax,0xc002bc40
c0017df9:	c3                   	ret    
c0017dfa:	80 f9 06             	cmp    cl,0x6
c0017dfd:	0f 85 85 01 00 00    	jne    c0017f88 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0017e03:	b8 50 bc 02 c0       	mov    eax,0xc002bc50
c0017e08:	80 fa 01             	cmp    dl,0x1
c0017e0b:	0f 84 d4 01 00 00    	je     c0017fe5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e11:	8d 42 fb             	lea    eax,[edx-0x5]
c0017e14:	3c 01                	cmp    al,0x1
c0017e16:	0f 86 ac 01 00 00    	jbe    c0017fc8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0017e1c:	80 fa 03             	cmp    dl,0x3
c0017e1f:	0f 84 a3 01 00 00    	je     c0017fc8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0017e25:	8d 4a f9             	lea    ecx,[edx-0x7]
c0017e28:	b8 70 bc 02 c0       	mov    eax,0xc002bc70
c0017e2d:	80 f9 01             	cmp    cl,0x1
c0017e30:	0f 86 af 01 00 00    	jbe    c0017fe5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e36:	80 fa 09             	cmp    dl,0x9
c0017e39:	0f 84 8f 01 00 00    	je     c0017fce <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0017e3f:	8d 4a f6             	lea    ecx,[edx-0xa]
c0017e42:	80 f9 01             	cmp    cl,0x1
c0017e45:	0f 86 9a 01 00 00    	jbe    c0017fe5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e4b:	b8 80 bc 02 c0       	mov    eax,0xc002bc80
c0017e50:	80 fa 0d             	cmp    dl,0xd
c0017e53:	0f 84 8c 01 00 00    	je     c0017fe5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e59:	b8 90 bc 02 c0       	mov    eax,0xc002bc90
c0017e5e:	80 fa 0e             	cmp    dl,0xe
c0017e61:	0f 84 7e 01 00 00    	je     c0017fe5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e67:	b8 a0 bc 02 c0       	mov    eax,0xc002bca0
c0017e6c:	80 fa 0f             	cmp    dl,0xf
c0017e6f:	0f 84 70 01 00 00    	je     c0017fe5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e75:	b8 80 bc 02 c0       	mov    eax,0xc002bc80
c0017e7a:	80 fa 15             	cmp    dl,0x15
c0017e7d:	0f 84 62 01 00 00    	je     c0017fe5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e83:	8d 4a ea             	lea    ecx,[edx-0x16]
c0017e86:	b8 a0 bc 02 c0       	mov    eax,0xc002bca0
c0017e8b:	80 f9 01             	cmp    cl,0x1
c0017e8e:	0f 86 51 01 00 00    	jbe    c0017fe5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e94:	80 fa 1a             	cmp    dl,0x1a
c0017e97:	0f 84 37 01 00 00    	je     c0017fd4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0017e9d:	80 fa 1c             	cmp    dl,0x1c
c0017ea0:	0f 84 34 01 00 00    	je     c0017fda <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0017ea6:	80 fa 1d             	cmp    dl,0x1d
c0017ea9:	0f 84 36 01 00 00    	je     c0017fe5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017eaf:	b8 d0 bc 02 c0       	mov    eax,0xc002bcd0
c0017eb4:	80 fa 25             	cmp    dl,0x25
c0017eb7:	0f 84 28 01 00 00    	je     c0017fe5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ebd:	8d 4a da             	lea    ecx,[edx-0x26]
c0017ec0:	b8 c0 bc 02 c0       	mov    eax,0xc002bcc0
c0017ec5:	80 f9 01             	cmp    cl,0x1
c0017ec8:	0f 86 17 01 00 00    	jbe    c0017fe5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ece:	b8 e0 bc 02 c0       	mov    eax,0xc002bce0
c0017ed3:	80 fa 2a             	cmp    dl,0x2a
c0017ed6:	0f 84 09 01 00 00    	je     c0017fe5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017edc:	b8 d0 bc 02 c0       	mov    eax,0xc002bcd0
c0017ee1:	80 fa 2c             	cmp    dl,0x2c
c0017ee4:	0f 84 fb 00 00 00    	je     c0017fe5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017eea:	b8 e0 bc 02 c0       	mov    eax,0xc002bce0
c0017eef:	80 fa 2d             	cmp    dl,0x2d
c0017ef2:	0f 84 ed 00 00 00    	je     c0017fe5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ef8:	b8 b0 bc 02 c0       	mov    eax,0xc002bcb0
c0017efd:	80 fa 2e             	cmp    dl,0x2e
c0017f00:	0f 84 df 00 00 00    	je     c0017fe5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f06:	b8 d0 bc 02 c0       	mov    eax,0xc002bcd0
c0017f0b:	80 fa 2f             	cmp    dl,0x2f
c0017f0e:	0f 84 d1 00 00 00    	je     c0017fe5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f14:	8d 4a cb             	lea    ecx,[edx-0x35]
c0017f17:	b8 c0 bc 02 c0       	mov    eax,0xc002bcc0
c0017f1c:	80 f9 01             	cmp    cl,0x1
c0017f1f:	0f 86 c0 00 00 00    	jbe    c0017fe5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f25:	b8 f0 bc 02 c0       	mov    eax,0xc002bcf0
c0017f2a:	80 fa 37             	cmp    dl,0x37
c0017f2d:	0f 84 b2 00 00 00    	je     c0017fe5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f33:	b8 00 bd 02 c0       	mov    eax,0xc002bd00
c0017f38:	80 fa 3a             	cmp    dl,0x3a
c0017f3b:	0f 84 a4 00 00 00    	je     c0017fe5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f41:	b8 10 bd 02 c0       	mov    eax,0xc002bd10
c0017f46:	80 fa 3c             	cmp    dl,0x3c
c0017f49:	0f 84 96 00 00 00    	je     c0017fe5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f4f:	b8 20 bd 02 c0       	mov    eax,0xc002bd20
c0017f54:	80 fa 3d             	cmp    dl,0x3d
c0017f57:	0f 84 88 00 00 00    	je     c0017fe5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f5d:	b8 00 bd 02 c0       	mov    eax,0xc002bd00
c0017f62:	80 fa 3e             	cmp    dl,0x3e
c0017f65:	74 7e                	je     c0017fe5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f67:	8d 42 bb             	lea    eax,[edx-0x45]
c0017f6a:	3c 01                	cmp    al,0x1
c0017f6c:	76 72                	jbe    c0017fe0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0017f6e:	80 fa 3f             	cmp    dl,0x3f
c0017f71:	74 6d                	je     c0017fe0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0017f73:	80 fa 4a             	cmp    dl,0x4a
c0017f76:	74 0a                	je     c0017f82 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0017f78:	b8 7e a0 02 c0       	mov    eax,0xc002a07e
c0017f7d:	80 fa 4d             	cmp    dl,0x4d
c0017f80:	75 63                	jne    c0017fe5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f82:	b8 f0 bc 02 c0       	mov    eax,0xc002bcf0
c0017f87:	c3                   	ret    
c0017f88:	b8 7e a0 02 c0       	mov    eax,0xc002a07e
c0017f8d:	80 f9 0b             	cmp    cl,0xb
c0017f90:	75 0a                	jne    c0017f9c <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0017f92:	fe ca                	dec    dl
c0017f94:	75 4f                	jne    c0017fe5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f96:	b8 30 bd 02 c0       	mov    eax,0xc002bd30
c0017f9b:	c3                   	ret    
c0017f9c:	80 f9 0f             	cmp    cl,0xf
c0017f9f:	75 44                	jne    c0017fe5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017fa1:	b8 40 bd 02 c0       	mov    eax,0xc002bd40
c0017fa6:	80 fa 02             	cmp    dl,0x2
c0017fa9:	76 3a                	jbe    c0017fe5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017fab:	8d 42 fd             	lea    eax,[edx-0x3]
c0017fae:	3c 01                	cmp    al,0x1
c0017fb0:	76 0a                	jbe    c0017fbc <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0017fb2:	b8 7e a0 02 c0       	mov    eax,0xc002a07e
c0017fb7:	80 fa 06             	cmp    dl,0x6
c0017fba:	75 29                	jne    c0017fe5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017fbc:	b8 50 bd 02 c0       	mov    eax,0xc002bd50
c0017fc1:	c3                   	ret    
c0017fc2:	b8 30 bc 02 c0       	mov    eax,0xc002bc30
c0017fc7:	c3                   	ret    
c0017fc8:	b8 60 bc 02 c0       	mov    eax,0xc002bc60
c0017fcd:	c3                   	ret    
c0017fce:	b8 80 bc 02 c0       	mov    eax,0xc002bc80
c0017fd3:	c3                   	ret    
c0017fd4:	b8 b0 bc 02 c0       	mov    eax,0xc002bcb0
c0017fd9:	c3                   	ret    
c0017fda:	b8 c0 bc 02 c0       	mov    eax,0xc002bcc0
c0017fdf:	c3                   	ret    
c0017fe0:	b8 10 bd 02 c0       	mov    eax,0xc002bd10
c0017fe5:	c3                   	ret    

c0017fe6 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0017fe6:	60                   	pusha  
c0017fe7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017feb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017fef:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017ff3:	9c                   	pushf  
c0017ff4:	fa                   	cli    
c0017ff5:	0f 09                	wbinvd 
c0017ff7:	0f 30                	wrmsr  
c0017ff9:	9d                   	popf   
c0017ffa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017ffe:	89 02                	mov    DWORD PTR [edx],eax
c0018000:	61                   	popa   
c0018001:	c3                   	ret    

c0018002 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018002:	60                   	pusha  
c0018003:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018007:	9c                   	pushf  
c0018008:	fa                   	cli    
c0018009:	0f 09                	wbinvd 
c001800b:	31 c0                	xor    eax,eax
c001800d:	31 d2                	xor    edx,edx
c001800f:	0f 32                	rdmsr  
c0018011:	9d                   	popf   
c0018012:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018016:	89 02                	mov    DWORD PTR [edx],eax
c0018018:	61                   	popa   
c0018019:	c3                   	ret    

c001801a <CPU::AMD_K6_writeback(int, int, int)>:
c001801a:	56                   	push   esi
c001801b:	53                   	push   ebx
c001801c:	83 ec 10             	sub    esp,0x10
c001801f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018023:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018028:	75 5d                	jne    c0018087 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001802a:	83 f8 08             	cmp    eax,0x8
c001802d:	75 09                	jne    c0018038 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c001802f:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018034:	7e 13                	jle    c0018049 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018036:	eb 30                	jmp    c0018068 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018038:	83 f8 06             	cmp    eax,0x6
c001803b:	7c 4a                	jl     c0018087 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001803d:	83 f8 07             	cmp    eax,0x7
c0018040:	7e 07                	jle    c0018049 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018042:	83 f8 09             	cmp    eax,0x9
c0018045:	74 21                	je     c0018068 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018047:	eb 3e                	jmp    c0018087 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018049:	89 e6                	mov    esi,esp
c001804b:	8b 1d 84 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c984
c0018051:	56                   	push   esi
c0018052:	c1 eb 15             	shr    ebx,0x15
c0018055:	68 82 00 00 c0       	push   0xc0000082
c001805a:	83 e3 7e             	and    ebx,0x7e
c001805d:	e8 a0 ff ff ff       	call   c0018002 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018062:	56                   	push   esi
c0018063:	6a 00                	push   0x0
c0018065:	53                   	push   ebx
c0018066:	eb 12                	jmp    c001807a <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018068:	89 e3                	mov    ebx,esp
c001806a:	53                   	push   ebx
c001806b:	68 82 00 00 c0       	push   0xc0000082
c0018070:	e8 8d ff ff ff       	call   c0018002 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018075:	53                   	push   ebx
c0018076:	6a 00                	push   0x0
c0018078:	6a 00                	push   0x0
c001807a:	68 82 00 00 c0       	push   0xc0000082
c001807f:	e8 62 ff ff ff       	call   c0017fe6 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018084:	83 c4 18             	add    esp,0x18
c0018087:	83 c4 10             	add    esp,0x10
c001808a:	5b                   	pop    ebx
c001808b:	5e                   	pop    esi
c001808c:	c3                   	ret    
c001808d:	90                   	nop

c001808e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c001808e:	55                   	push   ebp
c001808f:	57                   	push   edi
c0018090:	56                   	push   esi
c0018091:	53                   	push   ebx
c0018092:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018096:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001809a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001809e:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00180a2:	39 05 60 be 02 c0    	cmp    DWORD PTR ds:0xc002be60,eax
c00180a8:	75 23                	jne    c00180cd <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00180aa:	a1 6c d4 02 c0       	mov    eax,ds:0xc002d46c
c00180af:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00180b3:	89 06                	mov    DWORD PTR [esi],eax
c00180b5:	a1 68 d4 02 c0       	mov    eax,ds:0xc002d468
c00180ba:	89 07                	mov    DWORD PTR [edi],eax
c00180bc:	a1 64 d4 02 c0       	mov    eax,ds:0xc002d464
c00180c1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00180c4:	a1 60 d4 02 c0       	mov    eax,ds:0xc002d460
c00180c9:	89 02                	mov    DWORD PTR [edx],eax
c00180cb:	eb 3f                	jmp    c001810c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00180cd:	31 c9                	xor    ecx,ecx
c00180cf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00180d3:	0f a2                	cpuid  
c00180d5:	89 06                	mov    DWORD PTR [esi],eax
c00180d7:	89 1f                	mov    DWORD PTR [edi],ebx
c00180d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00180dd:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00180e0:	89 10                	mov    DWORD PTR [eax],edx
c00180e2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00180e6:	a3 60 be 02 c0       	mov    ds:0xc002be60,eax
c00180eb:	8b 06                	mov    eax,DWORD PTR [esi]
c00180ed:	a3 6c d4 02 c0       	mov    ds:0xc002d46c,eax
c00180f2:	8b 07                	mov    eax,DWORD PTR [edi]
c00180f4:	a3 68 d4 02 c0       	mov    ds:0xc002d468,eax
c00180f9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00180fc:	a3 64 d4 02 c0       	mov    ds:0xc002d464,eax
c0018101:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018105:	8b 00                	mov    eax,DWORD PTR [eax]
c0018107:	a3 60 d4 02 c0       	mov    ds:0xc002d460,eax
c001810c:	5b                   	pop    ebx
c001810d:	5e                   	pop    esi
c001810e:	5f                   	pop    edi
c001810f:	5d                   	pop    ebp
c0018110:	c3                   	ret    
c0018111:	90                   	nop

c0018112 <CPU::cpuidCheckEDX(unsigned int)>:
c0018112:	83 ec 10             	sub    esp,0x10
c0018115:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018119:	50                   	push   eax
c001811a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001811e:	50                   	push   eax
c001811f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018123:	50                   	push   eax
c0018124:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018128:	50                   	push   eax
c0018129:	6a 01                	push   0x1
c001812b:	e8 5e ff ff ff       	call   c001808e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018130:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018134:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018138:	0f 95 c0             	setne  al
c001813b:	83 c4 24             	add    esp,0x24
c001813e:	c3                   	ret    
c001813f:	90                   	nop

c0018140 <CPU::cpuidCheckECX(unsigned int)>:
c0018140:	83 ec 10             	sub    esp,0x10
c0018143:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018147:	50                   	push   eax
c0018148:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001814c:	50                   	push   eax
c001814d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018151:	50                   	push   eax
c0018152:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018156:	50                   	push   eax
c0018157:	6a 01                	push   0x1
c0018159:	e8 30 ff ff ff       	call   c001808e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001815e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018162:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018166:	0f 95 c0             	setne  al
c0018169:	83 c4 24             	add    esp,0x24
c001816c:	c3                   	ret    
c001816d:	90                   	nop

c001816e <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c001816e:	83 ec 10             	sub    esp,0x10
c0018171:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018175:	50                   	push   eax
c0018176:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001817a:	50                   	push   eax
c001817b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001817f:	50                   	push   eax
c0018180:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018184:	50                   	push   eax
c0018185:	6a 07                	push   0x7
c0018187:	e8 02 ff ff ff       	call   c001808e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001818c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018190:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018194:	0f 95 c0             	setne  al
c0018197:	83 c4 24             	add    esp,0x24
c001819a:	c3                   	ret    
c001819b:	90                   	nop

c001819c <CPU::cpuidCheckExtendedECX(unsigned int)>:
c001819c:	83 ec 10             	sub    esp,0x10
c001819f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00181a3:	50                   	push   eax
c00181a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00181a8:	50                   	push   eax
c00181a9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00181ad:	50                   	push   eax
c00181ae:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00181b2:	50                   	push   eax
c00181b3:	6a 07                	push   0x7
c00181b5:	e8 d4 fe ff ff       	call   c001808e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00181ba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00181be:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00181c2:	0f 95 c0             	setne  al
c00181c5:	83 c4 24             	add    esp,0x24
c00181c8:	c3                   	ret    
c00181c9:	90                   	nop

c00181ca <CPU::CPU()>:
c00181ca:	83 ec 0c             	sub    esp,0xc
c00181cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181d1:	83 ec 08             	sub    esp,0x8
c00181d4:	68 7e a0 02 c0       	push   0xc002a07e
c00181d9:	50                   	push   eax
c00181da:	e8 6f bb ff ff       	call   c0013d4e <Device::Device(char const*)>
c00181df:	83 c4 10             	add    esp,0x10
c00181e2:	ba 58 a1 02 c0       	mov    edx,0xc002a158
c00181e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181eb:	89 10                	mov    DWORD PTR [eax],edx
c00181ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181f1:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00181fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181ff:	05 78 01 00 00       	add    eax,0x178
c0018204:	83 ec 0c             	sub    esp,0xc
c0018207:	50                   	push   eax
c0018208:	e8 df 6a ff ff       	call   c000ecec <GDT::GDT()>
c001820d:	83 c4 10             	add    esp,0x10
c0018210:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018214:	05 7c 09 00 00       	add    eax,0x97c
c0018219:	83 ec 0c             	sub    esp,0xc
c001821c:	50                   	push   eax
c001821d:	e8 2c 6d ff ff       	call   c000ef4e <IDT::IDT()>
c0018222:	83 c4 10             	add    esp,0x10
c0018225:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018229:	05 7c 11 00 00       	add    eax,0x117c
c001822e:	83 ec 0c             	sub    esp,0xc
c0018231:	50                   	push   eax
c0018232:	e8 79 8e ff ff       	call   c00110b0 <TSS::TSS()>
c0018237:	83 c4 10             	add    esp,0x10
c001823a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001823e:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018245:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018249:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018253:	90                   	nop
c0018254:	83 c4 0c             	add    esp,0xc
c0018257:	c3                   	ret    

c0018258 <CPU::displayFeatures()>:
c0018258:	53                   	push   ebx
c0018259:	83 ec 10             	sub    esp,0x10
c001825c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018260:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018266:	68 8c 9d 02 c0       	push   0xc0029d8c
c001826b:	e8 ff a4 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c0018270:	59                   	pop    ecx
c0018271:	58                   	pop    eax
c0018272:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018278:	50                   	push   eax
c0018279:	68 9d 9d 02 c0       	push   0xc0029d9d
c001827e:	e8 ec a4 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c0018283:	58                   	pop    eax
c0018284:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001828a:	5a                   	pop    edx
c001828b:	c1 e8 0e             	shr    eax,0xe
c001828e:	0f b6 c0             	movzx  eax,al
c0018291:	50                   	push   eax
c0018292:	68 ae 9d 02 c0       	push   0xc0029dae
c0018297:	e8 d3 a4 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001829c:	59                   	pop    ecx
c001829d:	58                   	pop    eax
c001829e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00182a4:	66 c1 e8 06          	shr    ax,0x6
c00182a8:	0f b6 c0             	movzx  eax,al
c00182ab:	50                   	push   eax
c00182ac:	68 bf 9d 02 c0       	push   0xc0029dbf
c00182b1:	e8 b9 a4 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c00182b6:	c7 04 24 5b a2 02 c0 	mov    DWORD PTR [esp],0xc002a25b
c00182bd:	e8 ad a4 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c00182c2:	83 c4 10             	add    esp,0x10
c00182c5:	b8 5c 89 02 c0       	mov    eax,0xc002895c
c00182ca:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c00182d1:	74 05                	je     c00182d8 <CPU::displayFeatures()+0x80>
c00182d3:	b8 58 89 02 c0       	mov    eax,0xc0028958
c00182d8:	52                   	push   edx
c00182d9:	52                   	push   edx
c00182da:	50                   	push   eax
c00182db:	68 d0 9d 02 c0       	push   0xc0029dd0
c00182e0:	e8 8a a4 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c00182e5:	83 c4 10             	add    esp,0x10
c00182e8:	b8 58 89 02 c0       	mov    eax,0xc0028958
c00182ed:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c00182f4:	78 05                	js     c00182fb <CPU::displayFeatures()+0xa3>
c00182f6:	b8 5c 89 02 c0       	mov    eax,0xc002895c
c00182fb:	51                   	push   ecx
c00182fc:	51                   	push   ecx
c00182fd:	50                   	push   eax
c00182fe:	68 e7 9d 02 c0       	push   0xc0029de7
c0018303:	e8 67 a4 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c0018308:	83 c4 10             	add    esp,0x10
c001830b:	b8 58 89 02 c0       	mov    eax,0xc0028958
c0018310:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018317:	75 05                	jne    c001831e <CPU::displayFeatures()+0xc6>
c0018319:	b8 5c 89 02 c0       	mov    eax,0xc002895c
c001831e:	52                   	push   edx
c001831f:	52                   	push   edx
c0018320:	50                   	push   eax
c0018321:	68 fe 9d 02 c0       	push   0xc0029dfe
c0018326:	e8 44 a4 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001832b:	83 c4 10             	add    esp,0x10
c001832e:	b8 58 89 02 c0       	mov    eax,0xc0028958
c0018333:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c001833a:	75 05                	jne    c0018341 <CPU::displayFeatures()+0xe9>
c001833c:	b8 5c 89 02 c0       	mov    eax,0xc002895c
c0018341:	51                   	push   ecx
c0018342:	51                   	push   ecx
c0018343:	50                   	push   eax
c0018344:	68 15 9e 02 c0       	push   0xc0029e15
c0018349:	e8 21 a4 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001834e:	83 c4 10             	add    esp,0x10
c0018351:	b8 58 89 02 c0       	mov    eax,0xc0028958
c0018356:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c001835d:	75 05                	jne    c0018364 <CPU::displayFeatures()+0x10c>
c001835f:	b8 5c 89 02 c0       	mov    eax,0xc002895c
c0018364:	52                   	push   edx
c0018365:	52                   	push   edx
c0018366:	50                   	push   eax
c0018367:	68 2c 9e 02 c0       	push   0xc0029e2c
c001836c:	e8 fe a3 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c0018371:	83 c4 10             	add    esp,0x10
c0018374:	b8 58 89 02 c0       	mov    eax,0xc0028958
c0018379:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018380:	75 05                	jne    c0018387 <CPU::displayFeatures()+0x12f>
c0018382:	b8 5c 89 02 c0       	mov    eax,0xc002895c
c0018387:	51                   	push   ecx
c0018388:	51                   	push   ecx
c0018389:	50                   	push   eax
c001838a:	68 43 9e 02 c0       	push   0xc0029e43
c001838f:	e8 db a3 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c0018394:	83 c4 10             	add    esp,0x10
c0018397:	b8 58 89 02 c0       	mov    eax,0xc0028958
c001839c:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c00183a3:	75 05                	jne    c00183aa <CPU::displayFeatures()+0x152>
c00183a5:	b8 5c 89 02 c0       	mov    eax,0xc002895c
c00183aa:	52                   	push   edx
c00183ab:	52                   	push   edx
c00183ac:	50                   	push   eax
c00183ad:	68 5a 9e 02 c0       	push   0xc0029e5a
c00183b2:	e8 b8 a3 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c00183b7:	83 c4 10             	add    esp,0x10
c00183ba:	b8 58 89 02 c0       	mov    eax,0xc0028958
c00183bf:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c00183c6:	75 05                	jne    c00183cd <CPU::displayFeatures()+0x175>
c00183c8:	b8 5c 89 02 c0       	mov    eax,0xc002895c
c00183cd:	51                   	push   ecx
c00183ce:	51                   	push   ecx
c00183cf:	50                   	push   eax
c00183d0:	68 71 9e 02 c0       	push   0xc0029e71
c00183d5:	e8 95 a3 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c00183da:	83 c4 10             	add    esp,0x10
c00183dd:	b8 58 89 02 c0       	mov    eax,0xc0028958
c00183e2:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c00183e9:	75 05                	jne    c00183f0 <CPU::displayFeatures()+0x198>
c00183eb:	b8 5c 89 02 c0       	mov    eax,0xc002895c
c00183f0:	52                   	push   edx
c00183f1:	52                   	push   edx
c00183f2:	50                   	push   eax
c00183f3:	68 88 9e 02 c0       	push   0xc0029e88
c00183f8:	e8 72 a3 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c00183fd:	83 c4 10             	add    esp,0x10
c0018400:	b8 58 89 02 c0       	mov    eax,0xc0028958
c0018405:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c001840c:	75 05                	jne    c0018413 <CPU::displayFeatures()+0x1bb>
c001840e:	b8 5c 89 02 c0       	mov    eax,0xc002895c
c0018413:	51                   	push   ecx
c0018414:	51                   	push   ecx
c0018415:	50                   	push   eax
c0018416:	68 9f 9e 02 c0       	push   0xc0029e9f
c001841b:	e8 4f a3 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c0018420:	83 c4 10             	add    esp,0x10
c0018423:	b8 58 89 02 c0       	mov    eax,0xc0028958
c0018428:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c001842f:	75 05                	jne    c0018436 <CPU::displayFeatures()+0x1de>
c0018431:	b8 5c 89 02 c0       	mov    eax,0xc002895c
c0018436:	52                   	push   edx
c0018437:	52                   	push   edx
c0018438:	50                   	push   eax
c0018439:	68 b6 9e 02 c0       	push   0xc0029eb6
c001843e:	e8 2c a3 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c0018443:	83 c4 10             	add    esp,0x10
c0018446:	b8 58 89 02 c0       	mov    eax,0xc0028958
c001844b:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0018452:	75 05                	jne    c0018459 <CPU::displayFeatures()+0x201>
c0018454:	b8 5c 89 02 c0       	mov    eax,0xc002895c
c0018459:	51                   	push   ecx
c001845a:	51                   	push   ecx
c001845b:	50                   	push   eax
c001845c:	68 cd 9e 02 c0       	push   0xc0029ecd
c0018461:	e8 09 a3 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c0018466:	83 c4 10             	add    esp,0x10
c0018469:	b8 58 89 02 c0       	mov    eax,0xc0028958
c001846e:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0018475:	75 05                	jne    c001847c <CPU::displayFeatures()+0x224>
c0018477:	b8 5c 89 02 c0       	mov    eax,0xc002895c
c001847c:	52                   	push   edx
c001847d:	52                   	push   edx
c001847e:	50                   	push   eax
c001847f:	68 e4 9e 02 c0       	push   0xc0029ee4
c0018484:	e8 e6 a2 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c0018489:	83 c4 10             	add    esp,0x10
c001848c:	b8 58 89 02 c0       	mov    eax,0xc0028958
c0018491:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0018498:	78 05                	js     c001849f <CPU::displayFeatures()+0x247>
c001849a:	b8 5c 89 02 c0       	mov    eax,0xc002895c
c001849f:	51                   	push   ecx
c00184a0:	51                   	push   ecx
c00184a1:	50                   	push   eax
c00184a2:	68 fb 9e 02 c0       	push   0xc0029efb
c00184a7:	e8 c3 a2 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c00184ac:	83 c4 10             	add    esp,0x10
c00184af:	b8 58 89 02 c0       	mov    eax,0xc0028958
c00184b4:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c00184bb:	75 05                	jne    c00184c2 <CPU::displayFeatures()+0x26a>
c00184bd:	b8 5c 89 02 c0       	mov    eax,0xc002895c
c00184c2:	52                   	push   edx
c00184c3:	52                   	push   edx
c00184c4:	50                   	push   eax
c00184c5:	68 12 9f 02 c0       	push   0xc0029f12
c00184ca:	e8 a0 a2 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c00184cf:	83 c4 18             	add    esp,0x18
c00184d2:	5b                   	pop    ebx
c00184d3:	c3                   	ret    

c00184d4 <CPU::detectFeatures()>:
c00184d4:	55                   	push   ebp
c00184d5:	57                   	push   edi
c00184d6:	56                   	push   esi
c00184d7:	53                   	push   ebx
c00184d8:	83 ec 50             	sub    esp,0x50
c00184db:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00184df:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c00184e9:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c00184f0:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c00184f6:	6a 0d                	push   0xd
c00184f8:	6a 00                	push   0x0
c00184fa:	57                   	push   edi
c00184fb:	e8 8b 81 fe ff       	call   c000068b <memset>
c0018500:	83 c4 10             	add    esp,0x10
c0018503:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c0018508:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c001850f:	0f 84 20 09 00 00    	je     c0018e35 <CPU::detectFeatures()+0x961>
c0018515:	83 ec 0c             	sub    esp,0xc
c0018518:	6a 10                	push   0x10
c001851a:	e8 f3 fb ff ff       	call   c0018112 <CPU::cpuidCheckEDX(unsigned int)>
c001851f:	83 e0 01             	and    eax,0x1
c0018522:	8d 14 00             	lea    edx,[eax+eax*1]
c0018525:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001852b:	83 e0 fd             	and    eax,0xfffffffd
c001852e:	09 d0                	or     eax,edx
c0018530:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018536:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c001853d:	e8 d0 fb ff ff       	call   c0018112 <CPU::cpuidCheckEDX(unsigned int)>
c0018542:	83 e0 01             	and    eax,0x1
c0018545:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001854c:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018552:	83 e0 fb             	and    eax,0xfffffffb
c0018555:	09 d0                	or     eax,edx
c0018557:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001855d:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018564:	e8 a9 fb ff ff       	call   c0018112 <CPU::cpuidCheckEDX(unsigned int)>
c0018569:	83 e0 01             	and    eax,0x1
c001856c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018573:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018579:	83 e0 f7             	and    eax,0xfffffff7
c001857c:	09 d0                	or     eax,edx
c001857e:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018584:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c001858b:	e8 82 fb ff ff       	call   c0018112 <CPU::cpuidCheckEDX(unsigned int)>
c0018590:	83 e0 01             	and    eax,0x1
c0018593:	c1 e0 04             	shl    eax,0x4
c0018596:	88 c2                	mov    dl,al
c0018598:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001859e:	83 e0 ef             	and    eax,0xffffffef
c00185a1:	09 d0                	or     eax,edx
c00185a3:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00185a9:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00185b0:	e8 5d fb ff ff       	call   c0018112 <CPU::cpuidCheckEDX(unsigned int)>
c00185b5:	83 e0 01             	and    eax,0x1
c00185b8:	c1 e0 05             	shl    eax,0x5
c00185bb:	88 c2                	mov    dl,al
c00185bd:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00185c3:	83 e0 df             	and    eax,0xffffffdf
c00185c6:	09 d0                	or     eax,edx
c00185c8:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00185ce:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00185d5:	e8 38 fb ff ff       	call   c0018112 <CPU::cpuidCheckEDX(unsigned int)>
c00185da:	83 e0 01             	and    eax,0x1
c00185dd:	8d 14 00             	lea    edx,[eax+eax*1]
c00185e0:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00185e6:	83 e0 fd             	and    eax,0xfffffffd
c00185e9:	09 d0                	or     eax,edx
c00185eb:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00185f1:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c00185f8:	e8 15 fb ff ff       	call   c0018112 <CPU::cpuidCheckEDX(unsigned int)>
c00185fd:	83 e0 01             	and    eax,0x1
c0018600:	c1 e0 06             	shl    eax,0x6
c0018603:	88 c2                	mov    dl,al
c0018605:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001860b:	83 e0 bf             	and    eax,0xffffffbf
c001860e:	09 d0                	or     eax,edx
c0018610:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018616:	58                   	pop    eax
c0018617:	8d 74 24 28          	lea    esi,[esp+0x28]
c001861b:	56                   	push   esi
c001861c:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018620:	55                   	push   ebp
c0018621:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018625:	50                   	push   eax
c0018626:	8d 54 24 28          	lea    edx,[esp+0x28]
c001862a:	52                   	push   edx
c001862b:	6a 00                	push   0x0
c001862d:	e8 5c fa ff ff       	call   c001808e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018632:	83 c4 1c             	add    esp,0x1c
c0018635:	6a 04                	push   0x4
c0018637:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001863b:	50                   	push   eax
c001863c:	57                   	push   edi
c001863d:	e8 13 80 fe ff       	call   c0000655 <memcpy>
c0018642:	83 c4 0c             	add    esp,0xc
c0018645:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c001864b:	6a 04                	push   0x4
c001864d:	56                   	push   esi
c001864e:	50                   	push   eax
c001864f:	e8 01 80 fe ff       	call   c0000655 <memcpy>
c0018654:	83 c4 0c             	add    esp,0xc
c0018657:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c001865d:	6a 04                	push   0x4
c001865f:	55                   	push   ebp
c0018660:	50                   	push   eax
c0018661:	e8 ef 7f fe ff       	call   c0000655 <memcpy>
c0018666:	58                   	pop    eax
c0018667:	5a                   	pop    edx
c0018668:	68 29 9f 02 c0       	push   0xc0029f29
c001866d:	57                   	push   edi
c001866e:	e8 08 81 fe ff       	call   c000077b <strcmp>
c0018673:	83 c4 10             	add    esp,0x10
c0018676:	85 c0                	test   eax,eax
c0018678:	75 0f                	jne    c0018689 <CPU::detectFeatures()+0x1b5>
c001867a:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0018684:	e9 22 02 00 00       	jmp    c00188ab <CPU::detectFeatures()+0x3d7>
c0018689:	50                   	push   eax
c001868a:	50                   	push   eax
c001868b:	68 36 9f 02 c0       	push   0xc0029f36
c0018690:	57                   	push   edi
c0018691:	e8 e5 80 fe ff       	call   c000077b <strcmp>
c0018696:	83 c4 10             	add    esp,0x10
c0018699:	85 c0                	test   eax,eax
c001869b:	74 dd                	je     c001867a <CPU::detectFeatures()+0x1a6>
c001869d:	51                   	push   ecx
c001869e:	51                   	push   ecx
c001869f:	68 43 9f 02 c0       	push   0xc0029f43
c00186a4:	57                   	push   edi
c00186a5:	e8 d1 80 fe ff       	call   c000077b <strcmp>
c00186aa:	83 c4 10             	add    esp,0x10
c00186ad:	85 c0                	test   eax,eax
c00186af:	74 2a                	je     c00186db <CPU::detectFeatures()+0x207>
c00186b1:	52                   	push   edx
c00186b2:	52                   	push   edx
c00186b3:	68 50 9f 02 c0       	push   0xc0029f50
c00186b8:	57                   	push   edi
c00186b9:	e8 bd 80 fe ff       	call   c000077b <strcmp>
c00186be:	83 c4 10             	add    esp,0x10
c00186c1:	85 c0                	test   eax,eax
c00186c3:	74 16                	je     c00186db <CPU::detectFeatures()+0x207>
c00186c5:	50                   	push   eax
c00186c6:	50                   	push   eax
c00186c7:	68 5d 9f 02 c0       	push   0xc0029f5d
c00186cc:	57                   	push   edi
c00186cd:	e8 a9 80 fe ff       	call   c000077b <strcmp>
c00186d2:	83 c4 10             	add    esp,0x10
c00186d5:	85 c0                	test   eax,eax
c00186d7:	74 48                	je     c0018721 <CPU::detectFeatures()+0x24d>
c00186d9:	eb 0f                	jmp    c00186ea <CPU::detectFeatures()+0x216>
c00186db:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c00186e5:	e9 c1 01 00 00       	jmp    c00188ab <CPU::detectFeatures()+0x3d7>
c00186ea:	50                   	push   eax
c00186eb:	50                   	push   eax
c00186ec:	68 6a 9f 02 c0       	push   0xc0029f6a
c00186f1:	57                   	push   edi
c00186f2:	e8 84 80 fe ff       	call   c000077b <strcmp>
c00186f7:	83 c4 10             	add    esp,0x10
c00186fa:	85 c0                	test   eax,eax
c00186fc:	74 23                	je     c0018721 <CPU::detectFeatures()+0x24d>
c00186fe:	50                   	push   eax
c00186ff:	50                   	push   eax
c0018700:	68 77 9f 02 c0       	push   0xc0029f77
c0018705:	57                   	push   edi
c0018706:	e8 70 80 fe ff       	call   c000077b <strcmp>
c001870b:	83 c4 10             	add    esp,0x10
c001870e:	85 c0                	test   eax,eax
c0018710:	75 1e                	jne    c0018730 <CPU::detectFeatures()+0x25c>
c0018712:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001871c:	e9 8a 01 00 00       	jmp    c00188ab <CPU::detectFeatures()+0x3d7>
c0018721:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001872b:	e9 7b 01 00 00       	jmp    c00188ab <CPU::detectFeatures()+0x3d7>
c0018730:	50                   	push   eax
c0018731:	50                   	push   eax
c0018732:	68 84 9f 02 c0       	push   0xc0029f84
c0018737:	57                   	push   edi
c0018738:	e8 3e 80 fe ff       	call   c000077b <strcmp>
c001873d:	83 c4 10             	add    esp,0x10
c0018740:	85 c0                	test   eax,eax
c0018742:	75 0f                	jne    c0018753 <CPU::detectFeatures()+0x27f>
c0018744:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c001874e:	e9 58 01 00 00       	jmp    c00188ab <CPU::detectFeatures()+0x3d7>
c0018753:	50                   	push   eax
c0018754:	50                   	push   eax
c0018755:	68 43 9f 02 c0       	push   0xc0029f43
c001875a:	57                   	push   edi
c001875b:	e8 1b 80 fe ff       	call   c000077b <strcmp>
c0018760:	83 c4 10             	add    esp,0x10
c0018763:	85 c0                	test   eax,eax
c0018765:	75 0f                	jne    c0018776 <CPU::detectFeatures()+0x2a2>
c0018767:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0018771:	e9 35 01 00 00       	jmp    c00188ab <CPU::detectFeatures()+0x3d7>
c0018776:	50                   	push   eax
c0018777:	50                   	push   eax
c0018778:	68 91 9f 02 c0       	push   0xc0029f91
c001877d:	57                   	push   edi
c001877e:	e8 f8 7f fe ff       	call   c000077b <strcmp>
c0018783:	83 c4 10             	add    esp,0x10
c0018786:	85 c0                	test   eax,eax
c0018788:	75 0f                	jne    c0018799 <CPU::detectFeatures()+0x2c5>
c001878a:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0018794:	e9 12 01 00 00       	jmp    c00188ab <CPU::detectFeatures()+0x3d7>
c0018799:	51                   	push   ecx
c001879a:	51                   	push   ecx
c001879b:	68 9e 9f 02 c0       	push   0xc0029f9e
c00187a0:	57                   	push   edi
c00187a1:	e8 d5 7f fe ff       	call   c000077b <strcmp>
c00187a6:	83 c4 10             	add    esp,0x10
c00187a9:	85 c0                	test   eax,eax
c00187ab:	75 0f                	jne    c00187bc <CPU::detectFeatures()+0x2e8>
c00187ad:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00187b7:	e9 ef 00 00 00       	jmp    c00188ab <CPU::detectFeatures()+0x3d7>
c00187bc:	52                   	push   edx
c00187bd:	52                   	push   edx
c00187be:	68 ab 9f 02 c0       	push   0xc0029fab
c00187c3:	57                   	push   edi
c00187c4:	e8 b2 7f fe ff       	call   c000077b <strcmp>
c00187c9:	83 c4 10             	add    esp,0x10
c00187cc:	85 c0                	test   eax,eax
c00187ce:	75 0f                	jne    c00187df <CPU::detectFeatures()+0x30b>
c00187d0:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00187da:	e9 cc 00 00 00       	jmp    c00188ab <CPU::detectFeatures()+0x3d7>
c00187df:	50                   	push   eax
c00187e0:	50                   	push   eax
c00187e1:	68 b8 9f 02 c0       	push   0xc0029fb8
c00187e6:	57                   	push   edi
c00187e7:	e8 8f 7f fe ff       	call   c000077b <strcmp>
c00187ec:	83 c4 10             	add    esp,0x10
c00187ef:	85 c0                	test   eax,eax
c00187f1:	75 0f                	jne    c0018802 <CPU::detectFeatures()+0x32e>
c00187f3:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c00187fd:	e9 a9 00 00 00       	jmp    c00188ab <CPU::detectFeatures()+0x3d7>
c0018802:	50                   	push   eax
c0018803:	50                   	push   eax
c0018804:	68 c5 9f 02 c0       	push   0xc0029fc5
c0018809:	57                   	push   edi
c001880a:	e8 6c 7f fe ff       	call   c000077b <strcmp>
c001880f:	83 c4 10             	add    esp,0x10
c0018812:	85 c0                	test   eax,eax
c0018814:	75 0f                	jne    c0018825 <CPU::detectFeatures()+0x351>
c0018816:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0018820:	e9 86 00 00 00       	jmp    c00188ab <CPU::detectFeatures()+0x3d7>
c0018825:	50                   	push   eax
c0018826:	50                   	push   eax
c0018827:	68 d2 9f 02 c0       	push   0xc0029fd2
c001882c:	57                   	push   edi
c001882d:	e8 49 7f fe ff       	call   c000077b <strcmp>
c0018832:	83 c4 10             	add    esp,0x10
c0018835:	85 c0                	test   eax,eax
c0018837:	75 0c                	jne    c0018845 <CPU::detectFeatures()+0x371>
c0018839:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0018843:	eb 66                	jmp    c00188ab <CPU::detectFeatures()+0x3d7>
c0018845:	50                   	push   eax
c0018846:	50                   	push   eax
c0018847:	68 df 9f 02 c0       	push   0xc0029fdf
c001884c:	57                   	push   edi
c001884d:	e8 29 7f fe ff       	call   c000077b <strcmp>
c0018852:	83 c4 10             	add    esp,0x10
c0018855:	85 c0                	test   eax,eax
c0018857:	75 0c                	jne    c0018865 <CPU::detectFeatures()+0x391>
c0018859:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0018863:	eb 46                	jmp    c00188ab <CPU::detectFeatures()+0x3d7>
c0018865:	50                   	push   eax
c0018866:	50                   	push   eax
c0018867:	68 ec 9f 02 c0       	push   0xc0029fec
c001886c:	57                   	push   edi
c001886d:	e8 09 7f fe ff       	call   c000077b <strcmp>
c0018872:	83 c4 10             	add    esp,0x10
c0018875:	85 c0                	test   eax,eax
c0018877:	74 e0                	je     c0018859 <CPU::detectFeatures()+0x385>
c0018879:	50                   	push   eax
c001887a:	50                   	push   eax
c001887b:	68 f9 9f 02 c0       	push   0xc0029ff9
c0018880:	57                   	push   edi
c0018881:	e8 f5 7e fe ff       	call   c000077b <strcmp>
c0018886:	83 c4 10             	add    esp,0x10
c0018889:	85 c0                	test   eax,eax
c001888b:	74 cc                	je     c0018859 <CPU::detectFeatures()+0x385>
c001888d:	51                   	push   ecx
c001888e:	51                   	push   ecx
c001888f:	68 06 a0 02 c0       	push   0xc002a006
c0018894:	57                   	push   edi
c0018895:	e8 e1 7e fe ff       	call   c000077b <strcmp>
c001889a:	83 c4 10             	add    esp,0x10
c001889d:	85 c0                	test   eax,eax
c001889f:	74 b8                	je     c0018859 <CPU::detectFeatures()+0x385>
c00188a1:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00188ab:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00188b0:	0f 86 be 00 00 00    	jbe    c0018974 <CPU::detectFeatures()+0x4a0>
c00188b6:	83 ec 0c             	sub    esp,0xc
c00188b9:	68 80 00 00 00       	push   0x80
c00188be:	e8 ab f8 ff ff       	call   c001816e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00188c3:	83 e0 01             	and    eax,0x1
c00188c6:	c1 e0 06             	shl    eax,0x6
c00188c9:	88 c2                	mov    dl,al
c00188cb:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00188d1:	83 e0 bf             	and    eax,0xffffffbf
c00188d4:	09 d0                	or     eax,edx
c00188d6:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00188dc:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00188e3:	e8 86 f8 ff ff       	call   c001816e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00188e8:	83 e0 01             	and    eax,0x1
c00188eb:	c1 e0 04             	shl    eax,0x4
c00188ee:	88 c2                	mov    dl,al
c00188f0:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00188f6:	83 e0 ef             	and    eax,0xffffffef
c00188f9:	09 d0                	or     eax,edx
c00188fb:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018901:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0018908:	e8 61 f8 ff ff       	call   c001816e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001890d:	c1 e0 07             	shl    eax,0x7
c0018910:	88 c2                	mov    dl,al
c0018912:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018918:	83 e0 7f             	and    eax,0x7f
c001891b:	09 d0                	or     eax,edx
c001891d:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018923:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001892a:	e8 6d f8 ff ff       	call   c001819c <CPU::cpuidCheckExtendedECX(unsigned int)>
c001892f:	83 e0 01             	and    eax,0x1
c0018932:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018939:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001893f:	83 e0 f7             	and    eax,0xfffffff7
c0018942:	09 d0                	or     eax,edx
c0018944:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001894a:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0018951:	e8 46 f8 ff ff       	call   c001819c <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018956:	83 c4 10             	add    esp,0x10
c0018959:	83 e0 01             	and    eax,0x1
c001895c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018963:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018969:	83 e0 fb             	and    eax,0xfffffffb
c001896c:	09 d0                	or     eax,edx
c001896e:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018974:	83 ec 0c             	sub    esp,0xc
c0018977:	56                   	push   esi
c0018978:	55                   	push   ebp
c0018979:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001897d:	57                   	push   edi
c001897e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018982:	50                   	push   eax
c0018983:	6a 01                	push   0x1
c0018985:	e8 04 f7 ff ff       	call   c001808e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001898a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001898e:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018994:	88 ca                	mov    dl,cl
c0018996:	83 e0 f0             	and    eax,0xfffffff0
c0018999:	83 e2 0f             	and    edx,0xf
c001899c:	09 d0                	or     eax,edx
c001899e:	88 ca                	mov    dl,cl
c00189a0:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00189a6:	c0 ea 04             	shr    dl,0x4
c00189a9:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00189ad:	0f b6 c2             	movzx  eax,dl
c00189b0:	83 c4 20             	add    esp,0x20
c00189b3:	c1 e0 06             	shl    eax,0x6
c00189b6:	89 c5                	mov    ebp,eax
c00189b8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00189be:	66 25 3f c0          	and    ax,0xc03f
c00189c2:	09 e8                	or     eax,ebp
c00189c4:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00189cb:	89 c8                	mov    eax,ecx
c00189cd:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c00189d3:	c1 e8 08             	shr    eax,0x8
c00189d6:	83 e2 3f             	and    edx,0x3f
c00189d9:	83 e0 0f             	and    eax,0xf
c00189dc:	89 c5                	mov    ebp,eax
c00189de:	c1 e5 06             	shl    ebp,0x6
c00189e1:	09 d5                	or     ebp,edx
c00189e3:	89 ea                	mov    edx,ebp
c00189e5:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00189eb:	88 c2                	mov    dl,al
c00189ed:	c0 ea 02             	shr    dl,0x2
c00189f0:	89 d5                	mov    ebp,edx
c00189f2:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c00189f8:	83 e2 c0             	and    edx,0xffffffc0
c00189fb:	09 d5                	or     ebp,edx
c00189fd:	89 ea                	mov    edx,ebp
c00189ff:	89 cd                	mov    ebp,ecx
c0018a01:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0018a07:	c1 ed 0c             	shr    ebp,0xc
c0018a0a:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0018a10:	83 e5 03             	and    ebp,0x3
c0018a13:	83 e2 cf             	and    edx,0xffffffcf
c0018a16:	c1 e5 04             	shl    ebp,0x4
c0018a19:	09 d5                	or     ebp,edx
c0018a1b:	3c 06                	cmp    al,0x6
c0018a1d:	89 ea                	mov    edx,ebp
c0018a1f:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0018a25:	74 04                	je     c0018a2b <CPU::detectFeatures()+0x557>
c0018a27:	3c 0f                	cmp    al,0xf
c0018a29:	75 5c                	jne    c0018a87 <CPU::detectFeatures()+0x5b3>
c0018a2b:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018a2f:	89 cd                	mov    ebp,ecx
c0018a31:	c1 ed 10             	shr    ebp,0x10
c0018a34:	c1 e5 04             	shl    ebp,0x4
c0018a37:	09 ea                	or     edx,ebp
c0018a39:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0018a3f:	0f b6 d2             	movzx  edx,dl
c0018a42:	66 81 e5 3f c0       	and    bp,0xc03f
c0018a47:	c1 e2 06             	shl    edx,0x6
c0018a4a:	09 ea                	or     edx,ebp
c0018a4c:	3c 0f                	cmp    al,0xf
c0018a4e:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0018a55:	75 30                	jne    c0018a87 <CPU::detectFeatures()+0x5b3>
c0018a57:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0018a5d:	c1 e9 14             	shr    ecx,0x14
c0018a60:	83 e0 3f             	and    eax,0x3f
c0018a63:	83 c1 0f             	add    ecx,0xf
c0018a66:	88 ca                	mov    dl,cl
c0018a68:	c0 e9 02             	shr    cl,0x2
c0018a6b:	c1 e2 06             	shl    edx,0x6
c0018a6e:	09 d0                	or     eax,edx
c0018a70:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0018a76:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0018a7c:	83 e0 c0             	and    eax,0xffffffc0
c0018a7f:	09 c1                	or     ecx,eax
c0018a81:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0018a87:	83 ec 0c             	sub    esp,0xc
c0018a8a:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018a91:	56                   	push   esi
c0018a92:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018a96:	50                   	push   eax
c0018a97:	57                   	push   edi
c0018a98:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018a9c:	55                   	push   ebp
c0018a9d:	68 00 00 00 80       	push   0x80000000
c0018aa2:	e8 e7 f5 ff ff       	call   c001808e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018aa7:	83 c4 20             	add    esp,0x20
c0018aaa:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0018ab2:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018ab6:	76 1e                	jbe    c0018ad6 <CPU::detectFeatures()+0x602>
c0018ab8:	83 ec 0c             	sub    esp,0xc
c0018abb:	56                   	push   esi
c0018abc:	50                   	push   eax
c0018abd:	57                   	push   edi
c0018abe:	55                   	push   ebp
c0018abf:	68 01 00 00 80       	push   0x80000001
c0018ac4:	e8 c5 f5 ff ff       	call   c001808e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018ac9:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0018ad3:	83 c4 20             	add    esp,0x20
c0018ad6:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0018adc:	83 f8 01             	cmp    eax,0x1
c0018adf:	75 6f                	jne    c0018b50 <CPU::detectFeatures()+0x67c>
c0018ae1:	51                   	push   ecx
c0018ae2:	51                   	push   ecx
c0018ae3:	68 12 a0 02 c0       	push   0xc002a012
c0018ae8:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018aec:	56                   	push   esi
c0018aed:	e8 38 7c fe ff       	call   c000072a <strcpy>
c0018af2:	5f                   	pop    edi
c0018af3:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018af9:	5d                   	pop    ebp
c0018afa:	66 c1 e8 06          	shr    ax,0x6
c0018afe:	0f b6 c0             	movzx  eax,al
c0018b01:	50                   	push   eax
c0018b02:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018b08:	c1 e8 0e             	shr    eax,0xe
c0018b0b:	0f b6 c0             	movzx  eax,al
c0018b0e:	50                   	push   eax
c0018b0f:	e8 24 f2 ff ff       	call   c0017d38 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0018b14:	5a                   	pop    edx
c0018b15:	59                   	pop    ecx
c0018b16:	50                   	push   eax
c0018b17:	56                   	push   esi
c0018b18:	e8 c4 7c fe ff       	call   c00007e1 <strcat>
c0018b1d:	5f                   	pop    edi
c0018b1e:	5d                   	pop    ebp
c0018b1f:	56                   	push   esi
c0018b20:	53                   	push   ebx
c0018b21:	e8 1a b2 ff ff       	call   c0013d40 <Device::setName(char const*)>
c0018b26:	58                   	pop    eax
c0018b27:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018b2d:	5a                   	pop    edx
c0018b2e:	68 19 a0 02 c0       	push   0xc002a019
c0018b33:	50                   	push   eax
c0018b34:	e8 42 7c fe ff       	call   c000077b <strcmp>
c0018b39:	83 c4 10             	add    esp,0x10
c0018b3c:	85 c0                	test   eax,eax
c0018b3e:	0f 85 71 03 00 00    	jne    c0018eb5 <CPU::detectFeatures()+0x9e1>
c0018b44:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0018b4b:	e9 65 03 00 00       	jmp    c0018eb5 <CPU::detectFeatures()+0x9e1>
c0018b50:	83 f8 02             	cmp    eax,0x2
c0018b53:	0f 85 b5 00 00 00    	jne    c0018c0e <CPU::detectFeatures()+0x73a>
c0018b59:	57                   	push   edi
c0018b5a:	57                   	push   edi
c0018b5b:	68 2b a0 02 c0       	push   0xc002a02b
c0018b60:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018b64:	56                   	push   esi
c0018b65:	e8 c0 7b fe ff       	call   c000072a <strcpy>
c0018b6a:	5d                   	pop    ebp
c0018b6b:	58                   	pop    eax
c0018b6c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018b72:	66 c1 e8 06          	shr    ax,0x6
c0018b76:	0f b6 c0             	movzx  eax,al
c0018b79:	50                   	push   eax
c0018b7a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018b80:	c1 e8 0e             	shr    eax,0xe
c0018b83:	0f b6 c0             	movzx  eax,al
c0018b86:	50                   	push   eax
c0018b87:	e8 18 f0 ff ff       	call   c0017ba4 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0018b8c:	5a                   	pop    edx
c0018b8d:	59                   	pop    ecx
c0018b8e:	50                   	push   eax
c0018b8f:	56                   	push   esi
c0018b90:	e8 4c 7c fe ff       	call   c00007e1 <strcat>
c0018b95:	5f                   	pop    edi
c0018b96:	5d                   	pop    ebp
c0018b97:	56                   	push   esi
c0018b98:	53                   	push   ebx
c0018b99:	e8 a2 b1 ff ff       	call   c0013d40 <Device::setName(char const*)>
c0018b9e:	58                   	pop    eax
c0018b9f:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018ba5:	5a                   	pop    edx
c0018ba6:	68 30 a0 02 c0       	push   0xc002a030
c0018bab:	50                   	push   eax
c0018bac:	e8 ca 7b fe ff       	call   c000077b <strcmp>
c0018bb1:	83 c4 10             	add    esp,0x10
c0018bb4:	85 c0                	test   eax,eax
c0018bb6:	75 20                	jne    c0018bd8 <CPU::detectFeatures()+0x704>
c0018bb8:	8b 15 48 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c948
c0018bbe:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0018bc4:	a8 01                	test   al,0x1
c0018bc6:	74 10                	je     c0018bd8 <CPU::detectFeatures()+0x704>
c0018bc8:	83 e0 fe             	and    eax,0xfffffffe
c0018bcb:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0018bd1:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0018bd8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018bde:	c1 e8 0e             	shr    eax,0xe
c0018be1:	3c 05                	cmp    al,0x5
c0018be3:	0f 85 cc 02 00 00    	jne    c0018eb5 <CPU::detectFeatures()+0x9e1>
c0018be9:	56                   	push   esi
c0018bea:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018bf0:	83 e0 0f             	and    eax,0xf
c0018bf3:	50                   	push   eax
c0018bf4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018bfa:	66 c1 e8 06          	shr    ax,0x6
c0018bfe:	0f b6 c0             	movzx  eax,al
c0018c01:	50                   	push   eax
c0018c02:	6a 05                	push   0x5
c0018c04:	e8 11 f4 ff ff       	call   c001801a <CPU::AMD_K6_writeback(int, int, int)>
c0018c09:	e9 1f 02 00 00       	jmp    c0018e2d <CPU::detectFeatures()+0x959>
c0018c0e:	8d 50 fd             	lea    edx,[eax-0x3]
c0018c11:	83 fa 01             	cmp    edx,0x1
c0018c14:	76 09                	jbe    c0018c1f <CPU::detectFeatures()+0x74b>
c0018c16:	83 f8 06             	cmp    eax,0x6
c0018c19:	0f 85 91 01 00 00    	jne    c0018db0 <CPU::detectFeatures()+0x8dc>
c0018c1f:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018c25:	c1 ea 0e             	shr    edx,0xe
c0018c28:	80 fa 05             	cmp    dl,0x5
c0018c2b:	75 7b                	jne    c0018ca8 <CPU::detectFeatures()+0x7d4>
c0018c2d:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018c33:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018c38:	66 81 fa 00 01       	cmp    dx,0x100
c0018c3d:	75 0c                	jne    c0018c4b <CPU::detectFeatures()+0x777>
c0018c3f:	51                   	push   ecx
c0018c40:	51                   	push   ecx
c0018c41:	68 37 a0 02 c0       	push   0xc002a037
c0018c46:	e9 dc 01 00 00       	jmp    c0018e27 <CPU::detectFeatures()+0x953>
c0018c4b:	66 81 fa 00 02       	cmp    dx,0x200
c0018c50:	75 0c                	jne    c0018c5e <CPU::detectFeatures()+0x78a>
c0018c52:	52                   	push   edx
c0018c53:	52                   	push   edx
c0018c54:	68 4a a0 02 c0       	push   0xc002a04a
c0018c59:	e9 c9 01 00 00       	jmp    c0018e27 <CPU::detectFeatures()+0x953>
c0018c5e:	66 81 fa 40 02       	cmp    dx,0x240
c0018c63:	75 0c                	jne    c0018c71 <CPU::detectFeatures()+0x79d>
c0018c65:	50                   	push   eax
c0018c66:	50                   	push   eax
c0018c67:	68 5c a0 02 c0       	push   0xc002a05c
c0018c6c:	e9 b6 01 00 00       	jmp    c0018e27 <CPU::detectFeatures()+0x953>
c0018c71:	83 f8 06             	cmp    eax,0x6
c0018c74:	75 0c                	jne    c0018c82 <CPU::detectFeatures()+0x7ae>
c0018c76:	50                   	push   eax
c0018c77:	50                   	push   eax
c0018c78:	68 6e a0 02 c0       	push   0xc002a06e
c0018c7d:	e9 a5 01 00 00       	jmp    c0018e27 <CPU::detectFeatures()+0x953>
c0018c82:	83 f8 04             	cmp    eax,0x4
c0018c85:	75 0c                	jne    c0018c93 <CPU::detectFeatures()+0x7bf>
c0018c87:	50                   	push   eax
c0018c88:	50                   	push   eax
c0018c89:	68 7a a0 02 c0       	push   0xc002a07a
c0018c8e:	e9 94 01 00 00       	jmp    c0018e27 <CPU::detectFeatures()+0x953>
c0018c93:	83 f8 03             	cmp    eax,0x3
c0018c96:	0f 85 19 02 00 00    	jne    c0018eb5 <CPU::detectFeatures()+0x9e1>
c0018c9c:	50                   	push   eax
c0018c9d:	50                   	push   eax
c0018c9e:	68 82 a0 02 c0       	push   0xc002a082
c0018ca3:	e9 7f 01 00 00       	jmp    c0018e27 <CPU::detectFeatures()+0x953>
c0018ca8:	80 fa 06             	cmp    dl,0x6
c0018cab:	0f 85 db 00 00 00    	jne    c0018d8c <CPU::detectFeatures()+0x8b8>
c0018cb1:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018cb7:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018cbc:	66 81 fa 80 01       	cmp    dx,0x180
c0018cc1:	75 0c                	jne    c0018ccf <CPU::detectFeatures()+0x7fb>
c0018cc3:	50                   	push   eax
c0018cc4:	50                   	push   eax
c0018cc5:	68 8d a0 02 c0       	push   0xc002a08d
c0018cca:	e9 58 01 00 00       	jmp    c0018e27 <CPU::detectFeatures()+0x953>
c0018ccf:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0018cd5:	66 f7 c1 80 ff       	test   cx,0xff80
c0018cda:	75 0c                	jne    c0018ce8 <CPU::detectFeatures()+0x814>
c0018cdc:	50                   	push   eax
c0018cdd:	50                   	push   eax
c0018cde:	68 9d a0 02 c0       	push   0xc002a09d
c0018ce3:	e9 3f 01 00 00       	jmp    c0018e27 <CPU::detectFeatures()+0x953>
c0018ce8:	66 81 fa 40 02       	cmp    dx,0x240
c0018ced:	75 0c                	jne    c0018cfb <CPU::detectFeatures()+0x827>
c0018cef:	55                   	push   ebp
c0018cf0:	55                   	push   ebp
c0018cf1:	68 a4 a0 02 c0       	push   0xc002a0a4
c0018cf6:	e9 2c 01 00 00       	jmp    c0018e27 <CPU::detectFeatures()+0x953>
c0018cfb:	66 81 fa 80 02       	cmp    dx,0x280
c0018d00:	75 0c                	jne    c0018d0e <CPU::detectFeatures()+0x83a>
c0018d02:	57                   	push   edi
c0018d03:	57                   	push   edi
c0018d04:	68 ad a0 02 c0       	push   0xc002a0ad
c0018d09:	e9 19 01 00 00       	jmp    c0018e27 <CPU::detectFeatures()+0x953>
c0018d0e:	66 81 fa 40 03       	cmp    dx,0x340
c0018d13:	74 ed                	je     c0018d02 <CPU::detectFeatures()+0x82e>
c0018d15:	66 81 fa c0 03       	cmp    dx,0x3c0
c0018d1a:	75 0c                	jne    c0018d28 <CPU::detectFeatures()+0x854>
c0018d1c:	56                   	push   esi
c0018d1d:	56                   	push   esi
c0018d1e:	68 b4 a0 02 c0       	push   0xc002a0b4
c0018d23:	e9 ff 00 00 00       	jmp    c0018e27 <CPU::detectFeatures()+0x953>
c0018d28:	83 f8 06             	cmp    eax,0x6
c0018d2b:	0f 84 45 ff ff ff    	je     c0018c76 <CPU::detectFeatures()+0x7a2>
c0018d31:	83 f8 04             	cmp    eax,0x4
c0018d34:	0f 84 4d ff ff ff    	je     c0018c87 <CPU::detectFeatures()+0x7b3>
c0018d3a:	83 f8 03             	cmp    eax,0x3
c0018d3d:	0f 85 72 01 00 00    	jne    c0018eb5 <CPU::detectFeatures()+0x9e1>
c0018d43:	51                   	push   ecx
c0018d44:	51                   	push   ecx
c0018d45:	68 bd a0 02 c0       	push   0xc002a0bd
c0018d4a:	53                   	push   ebx
c0018d4b:	e8 f0 af ff ff       	call   c0013d40 <Device::setName(char const*)>
c0018d50:	b1 c1                	mov    cl,0xc1
c0018d52:	88 c8                	mov    al,cl
c0018d54:	e6 22                	out    0x22,al
c0018d56:	e4 23                	in     al,0x23
c0018d58:	88 c2                	mov    dl,al
c0018d5a:	88 c8                	mov    al,cl
c0018d5c:	e6 22                	out    0x22,al
c0018d5e:	88 d0                	mov    al,dl
c0018d60:	83 c8 10             	or     eax,0x10
c0018d63:	e6 23                	out    0x23,al
c0018d65:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0018d6c:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0018d6f:	89 d0                	mov    eax,edx
c0018d71:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0018d77:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0018d7b:	40                   	inc    eax
c0018d7c:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0018d82:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0018d87:	e9 a1 00 00 00       	jmp    c0018e2d <CPU::detectFeatures()+0x959>
c0018d8c:	83 f8 06             	cmp    eax,0x6
c0018d8f:	0f 84 e1 fe ff ff    	je     c0018c76 <CPU::detectFeatures()+0x7a2>
c0018d95:	83 f8 04             	cmp    eax,0x4
c0018d98:	0f 84 e9 fe ff ff    	je     c0018c87 <CPU::detectFeatures()+0x7b3>
c0018d9e:	83 f8 03             	cmp    eax,0x3
c0018da1:	0f 85 0e 01 00 00    	jne    c0018eb5 <CPU::detectFeatures()+0x9e1>
c0018da7:	52                   	push   edx
c0018da8:	52                   	push   edx
c0018da9:	68 c8 a0 02 c0       	push   0xc002a0c8
c0018dae:	eb 77                	jmp    c0018e27 <CPU::detectFeatures()+0x953>
c0018db0:	83 f8 07             	cmp    eax,0x7
c0018db3:	75 09                	jne    c0018dbe <CPU::detectFeatures()+0x8ea>
c0018db5:	50                   	push   eax
c0018db6:	50                   	push   eax
c0018db7:	68 d2 a0 02 c0       	push   0xc002a0d2
c0018dbc:	eb 69                	jmp    c0018e27 <CPU::detectFeatures()+0x953>
c0018dbe:	83 f8 0a             	cmp    eax,0xa
c0018dc1:	75 09                	jne    c0018dcc <CPU::detectFeatures()+0x8f8>
c0018dc3:	50                   	push   eax
c0018dc4:	50                   	push   eax
c0018dc5:	68 dd a0 02 c0       	push   0xc002a0dd
c0018dca:	eb 5b                	jmp    c0018e27 <CPU::detectFeatures()+0x953>
c0018dcc:	83 f8 0b             	cmp    eax,0xb
c0018dcf:	75 09                	jne    c0018dda <CPU::detectFeatures()+0x906>
c0018dd1:	50                   	push   eax
c0018dd2:	50                   	push   eax
c0018dd3:	68 e5 a0 02 c0       	push   0xc002a0e5
c0018dd8:	eb 4d                	jmp    c0018e27 <CPU::detectFeatures()+0x953>
c0018dda:	83 f8 08             	cmp    eax,0x8
c0018ddd:	75 09                	jne    c0018de8 <CPU::detectFeatures()+0x914>
c0018ddf:	50                   	push   eax
c0018de0:	50                   	push   eax
c0018de1:	68 ee a0 02 c0       	push   0xc002a0ee
c0018de6:	eb 3f                	jmp    c0018e27 <CPU::detectFeatures()+0x953>
c0018de8:	83 f8 09             	cmp    eax,0x9
c0018deb:	75 09                	jne    c0018df6 <CPU::detectFeatures()+0x922>
c0018ded:	50                   	push   eax
c0018dee:	50                   	push   eax
c0018def:	68 f6 a0 02 c0       	push   0xc002a0f6
c0018df4:	eb 31                	jmp    c0018e27 <CPU::detectFeatures()+0x953>
c0018df6:	83 f8 05             	cmp    eax,0x5
c0018df9:	75 09                	jne    c0018e04 <CPU::detectFeatures()+0x930>
c0018dfb:	50                   	push   eax
c0018dfc:	50                   	push   eax
c0018dfd:	68 fe a0 02 c0       	push   0xc002a0fe
c0018e02:	eb 23                	jmp    c0018e27 <CPU::detectFeatures()+0x953>
c0018e04:	83 f8 0c             	cmp    eax,0xc
c0018e07:	75 09                	jne    c0018e12 <CPU::detectFeatures()+0x93e>
c0018e09:	55                   	push   ebp
c0018e0a:	55                   	push   ebp
c0018e0b:	68 0c a1 02 c0       	push   0xc002a10c
c0018e10:	eb 15                	jmp    c0018e27 <CPU::detectFeatures()+0x953>
c0018e12:	83 f8 0d             	cmp    eax,0xd
c0018e15:	75 09                	jne    c0018e20 <CPU::detectFeatures()+0x94c>
c0018e17:	57                   	push   edi
c0018e18:	57                   	push   edi
c0018e19:	68 17 a1 02 c0       	push   0xc002a117
c0018e1e:	eb 07                	jmp    c0018e27 <CPU::detectFeatures()+0x953>
c0018e20:	56                   	push   esi
c0018e21:	56                   	push   esi
c0018e22:	68 2b a1 02 c0       	push   0xc002a12b
c0018e27:	53                   	push   ebx
c0018e28:	e8 13 af ff ff       	call   c0013d40 <Device::setName(char const*)>
c0018e2d:	83 c4 10             	add    esp,0x10
c0018e30:	e9 80 00 00 00       	jmp    c0018eb5 <CPU::detectFeatures()+0x9e1>
c0018e35:	51                   	push   ecx
c0018e36:	51                   	push   ecx
c0018e37:	68 77 9f 02 c0       	push   0xc0029f77
c0018e3c:	57                   	push   edi
c0018e3d:	e8 e8 78 fe ff       	call   c000072a <strcpy>
c0018e42:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018e4c:	e8 12 74 fe ff       	call   c0000263 <is486>
c0018e51:	83 c4 10             	add    esp,0x10
c0018e54:	85 c0                	test   eax,eax
c0018e56:	74 2b                	je     c0018e83 <CPU::detectFeatures()+0x9af>
c0018e58:	52                   	push   edx
c0018e59:	52                   	push   edx
c0018e5a:	68 37 a1 02 c0       	push   0xc002a137
c0018e5f:	53                   	push   ebx
c0018e60:	e8 db ae ff ff       	call   c0013d40 <Device::setName(char const*)>
c0018e65:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018e6c:	0f 20 c0             	mov    eax,cr0
c0018e6f:	83 e0 14             	and    eax,0x14
c0018e72:	83 c4 10             	add    esp,0x10
c0018e75:	83 f8 04             	cmp    eax,0x4
c0018e78:	75 1f                	jne    c0018e99 <CPU::detectFeatures()+0x9c5>
c0018e7a:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0018e81:	eb 32                	jmp    c0018eb5 <CPU::detectFeatures()+0x9e1>
c0018e83:	50                   	push   eax
c0018e84:	50                   	push   eax
c0018e85:	68 42 a1 02 c0       	push   0xc002a142
c0018e8a:	53                   	push   ebx
c0018e8b:	e8 b0 ae ff ff       	call   c0013d40 <Device::setName(char const*)>
c0018e90:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0018e97:	eb d3                	jmp    c0018e6c <CPU::detectFeatures()+0x998>
c0018e99:	e8 a0 73 fe ff       	call   c000023e <hasLegacyFPU>
c0018e9e:	83 e0 01             	and    eax,0x1
c0018ea1:	8d 14 00             	lea    edx,[eax+eax*1]
c0018ea4:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018eaa:	83 e0 fd             	and    eax,0xfffffffd
c0018ead:	09 d0                	or     eax,edx
c0018eaf:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018eb5:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0018ebc:	83 c4 4c             	add    esp,0x4c
c0018ebf:	5b                   	pop    ebx
c0018ec0:	5e                   	pop    esi
c0018ec1:	5f                   	pop    edi
c0018ec2:	5d                   	pop    ebp
c0018ec3:	c3                   	ret    

c0018ec4 <CPU::setupSMEP()>:
c0018ec4:	0f 20 e0             	mov    eax,cr4
c0018ec7:	0d 00 00 10 00       	or     eax,0x100000
c0018ecc:	0f 22 e0             	mov    cr4,eax
c0018ecf:	c3                   	ret    

c0018ed0 <CPU::setupUMIP()>:
c0018ed0:	0f 20 e0             	mov    eax,cr4
c0018ed3:	80 cc 08             	or     ah,0x8
c0018ed6:	0f 22 e0             	mov    cr4,eax
c0018ed9:	c3                   	ret    

c0018eda <CPU::setupTSC()>:
c0018eda:	0f 20 e0             	mov    eax,cr4
c0018edd:	83 c8 04             	or     eax,0x4
c0018ee0:	0f 22 e0             	mov    cr4,eax
c0018ee3:	c3                   	ret    

c0018ee4 <CPU::setupLargePages()>:
c0018ee4:	0f 20 e0             	mov    eax,cr4
c0018ee7:	83 c8 10             	or     eax,0x10
c0018eea:	0f 22 e0             	mov    cr4,eax
c0018eed:	c3                   	ret    

c0018eee <CPU::setupPAT()>:
c0018eee:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c0018ef3:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0018efa:	74 2c                	je     c0018f28 <CPU::setupPAT()+0x3a>
c0018efc:	53                   	push   ebx
c0018efd:	83 ec 10             	sub    esp,0x10
c0018f00:	68 77 02 00 00       	push   0x277
c0018f05:	50                   	push   eax
c0018f06:	e8 71 5b ff ff       	call   c000ea7c <Computer::rdmsr(unsigned int)>
c0018f0b:	83 e2 f8             	and    edx,0xfffffff8
c0018f0e:	83 ca 01             	or     edx,0x1
c0018f11:	52                   	push   edx
c0018f12:	50                   	push   eax
c0018f13:	68 77 02 00 00       	push   0x277
c0018f18:	ff 35 48 c9 02 c0    	push   DWORD PTR ds:0xc002c948
c0018f1e:	e8 85 5b ff ff       	call   c000eaa8 <Computer::wrmsr(unsigned int, unsigned long long)>
c0018f23:	83 c4 28             	add    esp,0x28
c0018f26:	5b                   	pop    ebx
c0018f27:	c3                   	ret    
c0018f28:	c3                   	ret    
c0018f29:	90                   	nop

c0018f2a <CPU::setupMTRR()>:
c0018f2a:	c3                   	ret    
c0018f2b:	90                   	nop

c0018f2c <CPU::setupGlobalPages()>:
c0018f2c:	0f 20 e0             	mov    eax,cr4
c0018f2f:	0c 80                	or     al,0x80
c0018f31:	0f 22 e0             	mov    cr4,eax
c0018f34:	c3                   	ret    
c0018f35:	90                   	nop

c0018f36 <CPU::allowUsermodeDataAccess()>:
c0018f36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018f3a:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0018f41:	74 03                	je     c0018f46 <CPU::allowUsermodeDataAccess()+0x10>
c0018f43:	0f 01 cb             	stac   
c0018f46:	c3                   	ret    
c0018f47:	90                   	nop

c0018f48 <CPU::prohibitUsermodeDataAccess()>:
c0018f48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018f4c:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0018f53:	74 03                	je     c0018f58 <CPU::prohibitUsermodeDataAccess()+0x10>
c0018f55:	0f 01 ca             	clac   
c0018f58:	c3                   	ret    
c0018f59:	90                   	nop

c0018f5a <CPU::setupSMAP()>:
c0018f5a:	0f 20 e0             	mov    eax,cr4
c0018f5d:	0d 00 00 20 00       	or     eax,0x200000
c0018f62:	0f 22 e0             	mov    cr4,eax
c0018f65:	eb e1                	jmp    c0018f48 <CPU::prohibitUsermodeDataAccess()>
c0018f67:	90                   	nop

c0018f68 <CPU::setupFeatures()>:
c0018f68:	83 ec 0c             	sub    esp,0xc
c0018f6b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018f6f:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0018f76:	74 07                	je     c0018f7f <CPU::setupFeatures()+0x17>
c0018f78:	52                   	push   edx
c0018f79:	e8 46 ff ff ff       	call   c0018ec4 <CPU::setupSMEP()>
c0018f7e:	58                   	pop    eax
c0018f7f:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0018f86:	74 07                	je     c0018f8f <CPU::setupFeatures()+0x27>
c0018f88:	52                   	push   edx
c0018f89:	e8 cc ff ff ff       	call   c0018f5a <CPU::setupSMAP()>
c0018f8e:	58                   	pop    eax
c0018f8f:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0018f96:	74 07                	je     c0018f9f <CPU::setupFeatures()+0x37>
c0018f98:	52                   	push   edx
c0018f99:	e8 32 ff ff ff       	call   c0018ed0 <CPU::setupUMIP()>
c0018f9e:	58                   	pop    eax
c0018f9f:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0018fa6:	74 07                	je     c0018faf <CPU::setupFeatures()+0x47>
c0018fa8:	52                   	push   edx
c0018fa9:	e8 2c ff ff ff       	call   c0018eda <CPU::setupTSC()>
c0018fae:	58                   	pop    eax
c0018faf:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0018fb6:	74 07                	je     c0018fbf <CPU::setupFeatures()+0x57>
c0018fb8:	52                   	push   edx
c0018fb9:	e8 26 ff ff ff       	call   c0018ee4 <CPU::setupLargePages()>
c0018fbe:	59                   	pop    ecx
c0018fbf:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0018fc6:	74 07                	je     c0018fcf <CPU::setupFeatures()+0x67>
c0018fc8:	52                   	push   edx
c0018fc9:	e8 5e ff ff ff       	call   c0018f2c <CPU::setupGlobalPages()>
c0018fce:	58                   	pop    eax
c0018fcf:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0018fd6:	74 0c                	je     c0018fe4 <CPU::setupFeatures()+0x7c>
c0018fd8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0018fdc:	83 c4 0c             	add    esp,0xc
c0018fdf:	e9 0a ff ff ff       	jmp    c0018eee <CPU::setupPAT()>
c0018fe4:	83 c4 0c             	add    esp,0xc
c0018fe7:	c3                   	ret    

c0018fe8 <CPU::open(int, int, void*)>:
c0018fe8:	57                   	push   edi
c0018fe9:	56                   	push   esi
c0018fea:	53                   	push   ebx
c0018feb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018fef:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018ff3:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0018ff9:	83 ec 0c             	sub    esp,0xc
c0018ffc:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019002:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019008:	50                   	push   eax
c0019009:	e8 5a 5d ff ff       	call   c000ed68 <GDT::setup()>
c001900e:	83 c4 0c             	add    esp,0xc
c0019011:	6a 00                	push   0x0
c0019013:	68 ef be ad de       	push   0xdeadbeef
c0019018:	57                   	push   edi
c0019019:	e8 d2 80 ff ff       	call   c00110f0 <TSS::setup(unsigned long, unsigned long)>
c001901e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019021:	e8 aa 80 ff ff       	call   c00110d0 <TSS::flush()>
c0019026:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c001902c:	89 04 24             	mov    DWORD PTR [esp],eax
c001902f:	e8 90 5f ff ff       	call   c000efc4 <IDT::setup()>
c0019034:	b8 00 04 00 00       	mov    eax,0x400
c0019039:	0f 23 f8             	mov    db7,eax
c001903c:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019046:	e8 f2 6a ff ff       	call   c000fb3d <Phys::allocatePage()>
c001904b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019051:	89 30                	mov    DWORD PTR [eax],esi
c0019053:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019059:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001905c:	58                   	pop    eax
c001905d:	5a                   	pop    edx
c001905e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019064:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019068:	e8 b5 90 ff ff       	call   c0012122 <VAS::setCPUSpecific(unsigned long)>
c001906d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019070:	e8 5f f4 ff ff       	call   c00184d4 <CPU::detectFeatures()>
c0019075:	e8 aa bf ff ff       	call   c0015024 <setupInterruptController()>
c001907a:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019080:	a1 60 c9 02 c0       	mov    eax,ds:0xc002c960
c0019085:	83 e0 10             	and    eax,0x10
c0019088:	83 f8 01             	cmp    eax,0x1
c001908b:	19 c0                	sbb    eax,eax
c001908d:	83 e0 46             	and    eax,0x46
c0019090:	83 c0 1e             	add    eax,0x1e
c0019093:	89 04 24             	mov    DWORD PTR [esp],eax
c0019096:	e8 41 d4 ff ff       	call   c00164dc <setupTimer(int)>
c001909b:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c00190a1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00190a4:	e8 bf fe ff ff       	call   c0018f68 <CPU::setupFeatures()>
c00190a9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00190ac:	e8 a7 f1 ff ff       	call   c0018258 <CPU::displayFeatures()>
c00190b1:	83 c4 10             	add    esp,0x10
c00190b4:	31 c0                	xor    eax,eax
c00190b6:	5b                   	pop    ebx
c00190b7:	5e                   	pop    esi
c00190b8:	5f                   	pop    edi
c00190b9:	c3                   	ret    

c00190ba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c00190ba:	57                   	push   edi
c00190bb:	56                   	push   esi
c00190bc:	53                   	push   ebx
c00190bd:	51                   	push   ecx
c00190be:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00190c2:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c00190c5:	0f 02 c0             	lar    eax,ax
c00190c8:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c00190cb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00190cf:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c00190d2:	88 ca                	mov    dl,cl
c00190d4:	c0 ea 06             	shr    dl,0x6
c00190d7:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c00190db:	89 ca                	mov    edx,ecx
c00190dd:	66 c1 ea 03          	shr    dx,0x3
c00190e1:	83 e2 07             	and    edx,0x7
c00190e4:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c00190e9:	88 17                	mov    BYTE PTR [edi],dl
c00190eb:	0f 84 a6 01 00 00    	je     c0019297 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c00190f1:	83 e1 07             	and    ecx,0x7
c00190f4:	80 f9 04             	cmp    cl,0x4
c00190f7:	0f 84 98 00 00 00    	je     c0019195 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c00190fd:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019102:	0f 95 c0             	setne  al
c0019105:	80 f9 05             	cmp    cl,0x5
c0019108:	0f 95 c2             	setne  dl
c001910b:	08 c2                	or     dl,al
c001910d:	74 79                	je     c0019188 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c001910f:	84 c9                	test   cl,cl
c0019111:	75 05                	jne    c0019118 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019113:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019116:	eb 3c                	jmp    c0019154 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019118:	80 f9 01             	cmp    cl,0x1
c001911b:	75 05                	jne    c0019122 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c001911d:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019120:	eb 32                	jmp    c0019154 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019122:	80 f9 02             	cmp    cl,0x2
c0019125:	75 05                	jne    c001912c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019127:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001912a:	eb 28                	jmp    c0019154 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001912c:	31 c0                	xor    eax,eax
c001912e:	80 f9 03             	cmp    cl,0x3
c0019131:	75 05                	jne    c0019138 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019133:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019136:	eb 1c                	jmp    c0019154 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019138:	80 f9 05             	cmp    cl,0x5
c001913b:	75 05                	jne    c0019142 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c001913d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019140:	eb 12                	jmp    c0019154 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019142:	80 f9 06             	cmp    cl,0x6
c0019145:	75 05                	jne    c001914c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019147:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001914a:	eb 08                	jmp    c0019154 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001914c:	80 f9 07             	cmp    cl,0x7
c001914f:	75 03                	jne    c0019154 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019151:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019154:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019159:	75 10                	jne    c001916b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c001915b:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c001915f:	b9 03 00 00 00       	mov    ecx,0x3
c0019164:	01 d0                	add    eax,edx
c0019166:	e9 37 01 00 00       	jmp    c00192a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001916b:	b9 02 00 00 00       	mov    ecx,0x2
c0019170:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019175:	0f 85 27 01 00 00    	jne    c00192a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001917b:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c001917e:	b9 06 00 00 00       	mov    ecx,0x6
c0019183:	e9 1a 01 00 00       	jmp    c00192a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019188:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c001918b:	b9 06 00 00 00       	mov    ecx,0x6
c0019190:	e9 0f 01 00 00       	jmp    c00192a4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019195:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019198:	88 ca                	mov    dl,cl
c001919a:	c0 ea 06             	shr    dl,0x6
c001919d:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c00191a1:	89 ca                	mov    edx,ecx
c00191a3:	66 c1 ea 03          	shr    dx,0x3
c00191a7:	83 e2 07             	and    edx,0x7
c00191aa:	80 e1 07             	and    cl,0x7
c00191ad:	75 05                	jne    c00191b4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c00191af:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c00191b2:	eb 4c                	jmp    c0019200 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00191b4:	80 f9 01             	cmp    cl,0x1
c00191b7:	75 05                	jne    c00191be <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c00191b9:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c00191bc:	eb 42                	jmp    c0019200 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00191be:	80 f9 02             	cmp    cl,0x2
c00191c1:	75 05                	jne    c00191c8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c00191c3:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00191c6:	eb 38                	jmp    c0019200 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00191c8:	80 f9 03             	cmp    cl,0x3
c00191cb:	75 05                	jne    c00191d2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c00191cd:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c00191d0:	eb 2e                	jmp    c0019200 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00191d2:	80 f9 04             	cmp    cl,0x4
c00191d5:	75 12                	jne    c00191e9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c00191d7:	f6 c4 60             	test   ah,0x60
c00191da:	75 08                	jne    c00191e4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c00191dc:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00191df:	8d 78 14             	lea    edi,[eax+0x14]
c00191e2:	eb 1c                	jmp    c0019200 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00191e4:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c00191e7:	eb 17                	jmp    c0019200 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00191e9:	80 f9 05             	cmp    cl,0x5
c00191ec:	75 05                	jne    c00191f3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c00191ee:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00191f1:	eb 0d                	jmp    c0019200 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00191f3:	80 f9 06             	cmp    cl,0x6
c00191f6:	75 05                	jne    c00191fd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c00191f8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00191fb:	eb 03                	jmp    c0019200 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00191fd:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019200:	84 d2                	test   dl,dl
c0019202:	75 05                	jne    c0019209 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019204:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019207:	eb 3c                	jmp    c0019245 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019209:	80 fa 01             	cmp    dl,0x1
c001920c:	75 05                	jne    c0019213 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c001920e:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019211:	eb 32                	jmp    c0019245 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019213:	80 fa 02             	cmp    dl,0x2
c0019216:	75 05                	jne    c001921d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019218:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001921b:	eb 28                	jmp    c0019245 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001921d:	80 fa 03             	cmp    dl,0x3
c0019220:	75 05                	jne    c0019227 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019222:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019225:	eb 1e                	jmp    c0019245 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019227:	31 c0                	xor    eax,eax
c0019229:	80 fa 04             	cmp    dl,0x4
c001922c:	74 17                	je     c0019245 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001922e:	80 fa 05             	cmp    dl,0x5
c0019231:	75 05                	jne    c0019238 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019233:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019236:	eb 0d                	jmp    c0019245 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019238:	80 fa 06             	cmp    dl,0x6
c001923b:	75 05                	jne    c0019242 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c001923d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019240:	eb 03                	jmp    c0019245 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019242:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019245:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001924a:	0f 94 c2             	sete   dl
c001924d:	80 f9 05             	cmp    cl,0x5
c0019250:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019254:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019259:	d3 e0                	shl    eax,cl
c001925b:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c001925f:	74 0a                	je     c001926b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019261:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019264:	b9 07 00 00 00       	mov    ecx,0x7
c0019269:	eb 37                	jmp    c00192a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001926b:	01 f8                	add    eax,edi
c001926d:	b9 03 00 00 00       	mov    ecx,0x3
c0019272:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019277:	74 2b                	je     c00192a4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019279:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001927e:	75 0d                	jne    c001928d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019280:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019284:	01 c8                	add    eax,ecx
c0019286:	b9 04 00 00 00       	mov    ecx,0x4
c001928b:	eb 17                	jmp    c00192a4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001928d:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019290:	b9 07 00 00 00       	mov    ecx,0x7
c0019295:	eb 0d                	jmp    c00192a4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019297:	b9 02 00 00 00       	mov    ecx,0x2
c001929c:	b2 01                	mov    dl,0x1
c001929e:	31 c0                	xor    eax,eax
c00192a0:	eb 02                	jmp    c00192a4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00192a2:	31 d2                	xor    edx,edx
c00192a4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00192a8:	89 0b                	mov    DWORD PTR [ebx],ecx
c00192aa:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00192ae:	88 11                	mov    BYTE PTR [ecx],dl
c00192b0:	5a                   	pop    edx
c00192b1:	5b                   	pop    ebx
c00192b2:	5e                   	pop    esi
c00192b3:	5f                   	pop    edi
c00192b4:	c3                   	ret    
c00192b5:	90                   	nop

c00192b6 <EnvVarContainer::getEnv(char const*)>:
c00192b6:	57                   	push   edi
c00192b7:	56                   	push   esi
c00192b8:	53                   	push   ebx
c00192b9:	31 db                	xor    ebx,ebx
c00192bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00192bf:	39 1e                	cmp    DWORD PTR [esi],ebx
c00192c1:	7e 2b                	jle    c00192ee <EnvVarContainer::getEnv(char const*)+0x38>
c00192c3:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c00192ca:	50                   	push   eax
c00192cb:	50                   	push   eax
c00192cc:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00192cf:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c00192d2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00192d6:	e8 a0 74 fe ff       	call   c000077b <strcmp>
c00192db:	83 c4 10             	add    esp,0x10
c00192de:	85 c0                	test   eax,eax
c00192e0:	75 09                	jne    c00192eb <EnvVarContainer::getEnv(char const*)+0x35>
c00192e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00192e5:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c00192e9:	eb 05                	jmp    c00192f0 <EnvVarContainer::getEnv(char const*)+0x3a>
c00192eb:	43                   	inc    ebx
c00192ec:	eb d1                	jmp    c00192bf <EnvVarContainer::getEnv(char const*)+0x9>
c00192ee:	31 c0                	xor    eax,eax
c00192f0:	5b                   	pop    ebx
c00192f1:	5e                   	pop    esi
c00192f2:	5f                   	pop    edi
c00192f3:	c3                   	ret    

c00192f4 <EnvVarContainer::setEnv(char const*, char const*)>:
c00192f4:	57                   	push   edi
c00192f5:	56                   	push   esi
c00192f6:	53                   	push   ebx
c00192f7:	83 ec 1c             	sub    esp,0x1c
c00192fa:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00192fe:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019302:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019306:	57                   	push   edi
c0019307:	e8 9c 73 fe ff       	call   c00006a8 <strlen>
c001930c:	40                   	inc    eax
c001930d:	89 04 24             	mov    DWORD PTR [esp],eax
c0019310:	e8 bf 61 ff ff       	call   c000f4d4 <malloc>
c0019315:	89 34 24             	mov    DWORD PTR [esp],esi
c0019318:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001931c:	e8 87 73 fe ff       	call   c00006a8 <strlen>
c0019321:	40                   	inc    eax
c0019322:	89 04 24             	mov    DWORD PTR [esp],eax
c0019325:	e8 aa 61 ff ff       	call   c000f4d4 <malloc>
c001932a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001932d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019331:	e8 72 73 fe ff       	call   c00006a8 <strlen>
c0019336:	83 c4 0c             	add    esp,0xc
c0019339:	40                   	inc    eax
c001933a:	50                   	push   eax
c001933b:	6a 00                	push   0x0
c001933d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019341:	e8 45 73 fe ff       	call   c000068b <memset>
c0019346:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019349:	e8 5a 73 fe ff       	call   c00006a8 <strlen>
c001934e:	83 c4 0c             	add    esp,0xc
c0019351:	40                   	inc    eax
c0019352:	50                   	push   eax
c0019353:	57                   	push   edi
c0019354:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019358:	e8 f8 72 fe ff       	call   c0000655 <memcpy>
c001935d:	89 34 24             	mov    DWORD PTR [esp],esi
c0019360:	e8 43 73 fe ff       	call   c00006a8 <strlen>
c0019365:	83 c4 0c             	add    esp,0xc
c0019368:	40                   	inc    eax
c0019369:	50                   	push   eax
c001936a:	6a 00                	push   0x0
c001936c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019370:	e8 16 73 fe ff       	call   c000068b <memset>
c0019375:	89 34 24             	mov    DWORD PTR [esp],esi
c0019378:	e8 2b 73 fe ff       	call   c00006a8 <strlen>
c001937d:	83 c4 0c             	add    esp,0xc
c0019380:	40                   	inc    eax
c0019381:	50                   	push   eax
c0019382:	56                   	push   esi
c0019383:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019387:	e8 c9 72 fe ff       	call   c0000655 <memcpy>
c001938c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001938e:	40                   	inc    eax
c001938f:	89 03                	mov    DWORD PTR [ebx],eax
c0019391:	c1 e0 03             	shl    eax,0x3
c0019394:	5a                   	pop    edx
c0019395:	59                   	pop    ecx
c0019396:	50                   	push   eax
c0019397:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001939a:	e8 21 61 ff ff       	call   c000f4c0 <realloc>
c001939f:	83 c4 0c             	add    esp,0xc
c00193a2:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00193a5:	6a 08                	push   0x8
c00193a7:	8d 54 24 10          	lea    edx,[esp+0x10]
c00193ab:	52                   	push   edx
c00193ac:	8b 13                	mov    edx,DWORD PTR [ebx]
c00193ae:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c00193b2:	50                   	push   eax
c00193b3:	e8 9d 72 fe ff       	call   c0000655 <memcpy>
c00193b8:	83 c4 20             	add    esp,0x20
c00193bb:	5b                   	pop    ebx
c00193bc:	5e                   	pop    esi
c00193bd:	5f                   	pop    edi
c00193be:	c3                   	ret    
c00193bf:	90                   	nop

c00193c0 <EnvVarContainer::deleteEnv(char const*)>:
c00193c0:	c3                   	ret    
c00193c1:	90                   	nop

c00193c2 <EnvVarContainer::loadFrom(char const*, char const*)>:
c00193c2:	55                   	push   ebp
c00193c3:	57                   	push   edi
c00193c4:	56                   	push   esi
c00193c5:	53                   	push   ebx
c00193c6:	81 ec 38 01 00 00    	sub    esp,0x138
c00193cc:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c00193d3:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c00193da:	68 14 01 00 00       	push   0x114
c00193df:	e8 f0 60 ff ff       	call   c000f4d4 <malloc>
c00193e4:	83 c4 0c             	add    esp,0xc
c00193e7:	89 c7                	mov    edi,eax
c00193e9:	ff 76 08             	push   DWORD PTR [esi+0x8]
c00193ec:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00193f3:	50                   	push   eax
c00193f4:	e8 a5 98 ff ff       	call   c0012c9e <File::File(char const*, Process*)>
c00193f9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00193fc:	e8 6f 9b ff ff       	call   c0012f70 <File::exists()>
c0019401:	83 c4 10             	add    esp,0x10
c0019404:	84 c0                	test   al,al
c0019406:	75 31                	jne    c0019439 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0019408:	51                   	push   ecx
c0019409:	51                   	push   ecx
c001940a:	6a 12                	push   0x12
c001940c:	57                   	push   edi
c001940d:	e8 f0 98 ff ff       	call   c0012d02 <File::open(FileOpenMode)>
c0019412:	8b 07                	mov    eax,DWORD PTR [edi]
c0019414:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0019417:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001941a:	e8 89 72 fe ff       	call   c00006a8 <strlen>
c001941f:	5a                   	pop    edx
c0019420:	31 d2                	xor    edx,edx
c0019422:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019426:	51                   	push   ecx
c0019427:	55                   	push   ebp
c0019428:	52                   	push   edx
c0019429:	50                   	push   eax
c001942a:	57                   	push   edi
c001942b:	ff d3                	call   ebx
c001942d:	83 c4 14             	add    esp,0x14
c0019430:	57                   	push   edi
c0019431:	e8 2a 99 ff ff       	call   c0012d60 <File::close()>
c0019436:	83 c4 10             	add    esp,0x10
c0019439:	31 db                	xor    ebx,ebx
c001943b:	50                   	push   eax
c001943c:	31 ed                	xor    ebp,ebp
c001943e:	68 00 01 00 00       	push   0x100
c0019443:	6a 00                	push   0x0
c0019445:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019449:	50                   	push   eax
c001944a:	e8 3c 72 fe ff       	call   c000068b <memset>
c001944f:	58                   	pop    eax
c0019450:	5a                   	pop    edx
c0019451:	6a 01                	push   0x1
c0019453:	57                   	push   edi
c0019454:	e8 a9 98 ff ff       	call   c0012d02 <File::open(FileOpenMode)>
c0019459:	83 c4 10             	add    esp,0x10
c001945c:	83 ec 0c             	sub    esp,0xc
c001945f:	8b 07                	mov    eax,DWORD PTR [edi]
c0019461:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019465:	51                   	push   ecx
c0019466:	8d 54 24 23          	lea    edx,[esp+0x23]
c001946a:	52                   	push   edx
c001946b:	6a 00                	push   0x0
c001946d:	6a 01                	push   0x1
c001946f:	57                   	push   edi
c0019470:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019473:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0019477:	83 c4 20             	add    esp,0x20
c001947a:	3c 0d                	cmp    al,0xd
c001947c:	0f 84 12 01 00 00    	je     c0019594 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c0019482:	85 db                	test   ebx,ebx
c0019484:	0f 84 fd 00 00 00    	je     c0019587 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001948a:	3c 0a                	cmp    al,0xa
c001948c:	74 13                	je     c00194a1 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001948e:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019493:	74 0c                	je     c00194a1 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c0019495:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c001949b:	0f 8e e6 00 00 00    	jle    c0019587 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c00194a1:	83 ec 0c             	sub    esp,0xc
c00194a4:	8d 53 01             	lea    edx,[ebx+0x1]
c00194a7:	29 dd                	sub    ebp,ebx
c00194a9:	52                   	push   edx
c00194aa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00194ae:	e8 21 60 ff ff       	call   c000f4d4 <malloc>
c00194b3:	8d 4d 04             	lea    ecx,[ebp+0x4]
c00194b6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00194ba:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00194bd:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00194c1:	e8 0e 60 ff ff       	call   c000f4d4 <malloc>
c00194c6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00194ca:	83 c4 0c             	add    esp,0xc
c00194cd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00194d1:	52                   	push   edx
c00194d2:	6a 00                	push   0x0
c00194d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00194d8:	e8 ae 71 fe ff       	call   c000068b <memset>
c00194dd:	83 c4 0c             	add    esp,0xc
c00194e0:	53                   	push   ebx
c00194e1:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00194e5:	55                   	push   ebp
c00194e6:	01 eb                	add    ebx,ebp
c00194e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00194ec:	e8 64 71 fe ff       	call   c0000655 <memcpy>
c00194f1:	83 c4 0c             	add    esp,0xc
c00194f4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00194f8:	51                   	push   ecx
c00194f9:	6a 00                	push   0x0
c00194fb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00194ff:	e8 87 71 fe ff       	call   c000068b <memset>
c0019504:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019507:	e8 9c 71 fe ff       	call   c00006a8 <strlen>
c001950c:	83 c4 0c             	add    esp,0xc
c001950f:	50                   	push   eax
c0019510:	53                   	push   ebx
c0019511:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019515:	e8 3b 71 fe ff       	call   c0000655 <memcpy>
c001951a:	5b                   	pop    ebx
c001951b:	58                   	pop    eax
c001951c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019520:	68 7c a1 02 c0       	push   0xc002a17c
c0019525:	e8 45 92 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001952a:	8b 06                	mov    eax,DWORD PTR [esi]
c001952c:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001952f:	40                   	inc    eax
c0019530:	83 c4 10             	add    esp,0x10
c0019533:	89 06                	mov    DWORD PTR [esi],eax
c0019535:	85 d2                	test   edx,edx
c0019537:	75 0c                	jne    c0019545 <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c0019539:	83 ec 0c             	sub    esp,0xc
c001953c:	6a 08                	push   0x8
c001953e:	e8 91 5f ff ff       	call   c000f4d4 <malloc>
c0019543:	eb 0c                	jmp    c0019551 <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c0019545:	c1 e0 03             	shl    eax,0x3
c0019548:	51                   	push   ecx
c0019549:	51                   	push   ecx
c001954a:	50                   	push   eax
c001954b:	52                   	push   edx
c001954c:	e8 6f 5f ff ff       	call   c000f4c0 <realloc>
c0019551:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0019554:	83 c4 10             	add    esp,0x10
c0019557:	31 db                	xor    ebx,ebx
c0019559:	52                   	push   edx
c001955a:	6a 08                	push   0x8
c001955c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019560:	50                   	push   eax
c0019561:	8b 16                	mov    edx,DWORD PTR [esi]
c0019563:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019566:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001956a:	50                   	push   eax
c001956b:	e8 e5 70 fe ff       	call   c0000655 <memcpy>
c0019570:	83 c4 0c             	add    esp,0xc
c0019573:	68 00 01 00 00       	push   0x100
c0019578:	6a 00                	push   0x0
c001957a:	55                   	push   ebp
c001957b:	31 ed                	xor    ebp,ebp
c001957d:	e8 09 71 fe ff       	call   c000068b <memset>
c0019582:	83 c4 10             	add    esp,0x10
c0019585:	eb 0d                	jmp    c0019594 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c0019587:	3c 3d                	cmp    al,0x3d
c0019589:	74 07                	je     c0019592 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c001958b:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c001958f:	45                   	inc    ebp
c0019590:	eb 02                	jmp    c0019594 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c0019592:	89 eb                	mov    ebx,ebp
c0019594:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019599:	0f 85 bd fe ff ff    	jne    c001945c <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c001959f:	50                   	push   eax
c00195a0:	50                   	push   eax
c00195a1:	ff 36                	push   DWORD PTR [esi]
c00195a3:	68 8a a1 02 c0       	push   0xc002a18a
c00195a8:	e8 c2 91 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c00195ad:	81 c4 3c 01 00 00    	add    esp,0x13c
c00195b3:	5b                   	pop    ebx
c00195b4:	5e                   	pop    esi
c00195b5:	5f                   	pop    edi
c00195b6:	5d                   	pop    ebp
c00195b7:	c3                   	ret    

c00195b8 <EnvVarContainer::__loadSystem()>:
c00195b8:	83 ec 10             	sub    esp,0x10
c00195bb:	68 80 be 02 c0       	push   0xc002be80
c00195c0:	68 b5 a1 02 c0       	push   0xc002a1b5
c00195c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00195c9:	e8 f4 fd ff ff       	call   c00193c2 <EnvVarContainer::loadFrom(char const*, char const*)>
c00195ce:	83 c4 1c             	add    esp,0x1c
c00195d1:	c3                   	ret    

c00195d2 <EnvVarContainer::__loadUser()>:
c00195d2:	c3                   	ret    
c00195d3:	90                   	nop

c00195d4 <EnvVarContainer::EnvVarContainer(Process*)>:
c00195d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00195d8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00195de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00195e2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00195e6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00195e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00195ed:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00195f4:	90                   	nop
c00195f5:	c3                   	ret    

c00195f6 <EnvVarContainer::~EnvVarContainer()>:
c00195f6:	83 ec 0c             	sub    esp,0xc
c00195f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00195fd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019600:	85 c0                	test   eax,eax
c0019602:	74 1d                	je     c0019621 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019604:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019608:	8b 00                	mov    eax,DWORD PTR [eax]
c001960a:	85 c0                	test   eax,eax
c001960c:	74 13                	je     c0019621 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001960e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019612:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019615:	83 ec 0c             	sub    esp,0xc
c0019618:	50                   	push   eax
c0019619:	e8 c6 5e ff ff       	call   c000f4e4 <free>
c001961e:	83 c4 10             	add    esp,0x10
c0019621:	90                   	nop
c0019622:	83 c4 0c             	add    esp,0xc
c0019625:	c3                   	ret    

c0019626 <Krnl::getEnv(Process*, char const*)>:
c0019626:	53                   	push   ebx
c0019627:	83 ec 08             	sub    esp,0x8
c001962a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001962e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019632:	39 05 94 de 02 c0    	cmp    DWORD PTR ds:0xc002de94,eax
c0019638:	74 04                	je     c001963e <Krnl::getEnv(Process*, char const*)+0x18>
c001963a:	85 c0                	test   eax,eax
c001963c:	75 0b                	jne    c0019649 <Krnl::getEnv(Process*, char const*)+0x23>
c001963e:	a1 70 d4 02 c0       	mov    eax,ds:0xc002d470
c0019643:	85 c0                	test   eax,eax
c0019645:	75 19                	jne    c0019660 <Krnl::getEnv(Process*, char const*)+0x3a>
c0019647:	eb 27                	jmp    c0019670 <Krnl::getEnv(Process*, char const*)+0x4a>
c0019649:	52                   	push   edx
c001964a:	52                   	push   edx
c001964b:	53                   	push   ebx
c001964c:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c0019652:	e8 5f fc ff ff       	call   c00192b6 <EnvVarContainer::getEnv(char const*)>
c0019657:	83 c4 10             	add    esp,0x10
c001965a:	85 c0                	test   eax,eax
c001965c:	75 28                	jne    c0019686 <Krnl::getEnv(Process*, char const*)+0x60>
c001965e:	eb de                	jmp    c001963e <Krnl::getEnv(Process*, char const*)+0x18>
c0019660:	52                   	push   edx
c0019661:	52                   	push   edx
c0019662:	53                   	push   ebx
c0019663:	50                   	push   eax
c0019664:	e8 4d fc ff ff       	call   c00192b6 <EnvVarContainer::getEnv(char const*)>
c0019669:	83 c4 10             	add    esp,0x10
c001966c:	85 c0                	test   eax,eax
c001966e:	75 16                	jne    c0019686 <Krnl::getEnv(Process*, char const*)+0x60>
c0019670:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0019674:	a1 74 d4 02 c0       	mov    eax,ds:0xc002d474
c0019679:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001967d:	83 c4 08             	add    esp,0x8
c0019680:	5b                   	pop    ebx
c0019681:	e9 30 fc ff ff       	jmp    c00192b6 <EnvVarContainer::getEnv(char const*)>
c0019686:	83 c4 08             	add    esp,0x8
c0019689:	5b                   	pop    ebx
c001968a:	c3                   	ret    

c001968b <Krnl::setEnvSystem(char const*, char const*)>:
c001968b:	83 ec 10             	sub    esp,0x10
c001968e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019692:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019696:	ff 35 74 d4 02 c0    	push   DWORD PTR ds:0xc002d474
c001969c:	e8 53 fc ff ff       	call   c00192f4 <EnvVarContainer::setEnv(char const*, char const*)>
c00196a1:	83 c4 1c             	add    esp,0x1c
c00196a4:	c3                   	ret    

c00196a5 <Krnl::setEnvUser(char const*, char const*)>:
c00196a5:	a1 70 d4 02 c0       	mov    eax,ds:0xc002d470
c00196aa:	85 c0                	test   eax,eax
c00196ac:	74 15                	je     c00196c3 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c00196ae:	83 ec 10             	sub    esp,0x10
c00196b1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00196b5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00196b9:	50                   	push   eax
c00196ba:	e8 35 fc ff ff       	call   c00192f4 <EnvVarContainer::setEnv(char const*, char const*)>
c00196bf:	83 c4 1c             	add    esp,0x1c
c00196c2:	c3                   	ret    
c00196c3:	c3                   	ret    

c00196c4 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c00196c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00196c8:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c00196ce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00196d2:	e9 1d fc ff ff       	jmp    c00192f4 <EnvVarContainer::setEnv(char const*, char const*)>

c00196d7 <Krnl::deleteEnvSystem(char const*)>:
c00196d7:	c3                   	ret    

c00196d8 <Krnl::deleteEnvUser(char const*)>:
c00196d8:	c3                   	ret    

c00196d9 <Krnl::deleteEnvProcess(Process*, char const*)>:
c00196d9:	c3                   	ret    

c00196da <Krnl::newProcessEnv(Process*)>:
c00196da:	83 ec 28             	sub    esp,0x28
c00196dd:	6a 0c                	push   0xc
c00196df:	e8 f0 5d ff ff       	call   c000f4d4 <malloc>
c00196e4:	5a                   	pop    edx
c00196e5:	59                   	pop    ecx
c00196e6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00196ea:	50                   	push   eax
c00196eb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00196ef:	e8 e0 fe ff ff       	call   c00195d4 <EnvVarContainer::EnvVarContainer(Process*)>
c00196f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00196f8:	83 c4 2c             	add    esp,0x2c
c00196fb:	c3                   	ret    

c00196fc <Krnl::copyProcessEnv(Process*, Process*)>:
c00196fc:	56                   	push   esi
c00196fd:	53                   	push   ebx
c00196fe:	83 ec 10             	sub    esp,0x10
c0019701:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019705:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c001970b:	6a 0c                	push   0xc
c001970d:	e8 c2 5d ff ff       	call   c000f4d4 <malloc>
c0019712:	89 c3                	mov    ebx,eax
c0019714:	58                   	pop    eax
c0019715:	5a                   	pop    edx
c0019716:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001971a:	53                   	push   ebx
c001971b:	e8 b4 fe ff ff       	call   c00195d4 <EnvVarContainer::EnvVarContainer(Process*)>
c0019720:	8b 06                	mov    eax,DWORD PTR [esi]
c0019722:	89 03                	mov    DWORD PTR [ebx],eax
c0019724:	c1 e0 03             	shl    eax,0x3
c0019727:	89 04 24             	mov    DWORD PTR [esp],eax
c001972a:	e8 a5 5d ff ff       	call   c000f4d4 <malloc>
c001972f:	83 c4 0c             	add    esp,0xc
c0019732:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019735:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0019737:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c001973e:	52                   	push   edx
c001973f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0019742:	50                   	push   eax
c0019743:	e8 0d 6f fe ff       	call   c0000655 <memcpy>
c0019748:	89 d8                	mov    eax,ebx
c001974a:	83 c4 14             	add    esp,0x14
c001974d:	5b                   	pop    ebx
c001974e:	5e                   	pop    esi
c001974f:	c3                   	ret    

c0019750 <Krnl::loadSystemEnv()>:
c0019750:	53                   	push   ebx
c0019751:	83 ec 14             	sub    esp,0x14
c0019754:	6a 0c                	push   0xc
c0019756:	e8 79 5d ff ff       	call   c000f4d4 <malloc>
c001975b:	89 c3                	mov    ebx,eax
c001975d:	58                   	pop    eax
c001975e:	5a                   	pop    edx
c001975f:	ff 35 94 de 02 c0    	push   DWORD PTR ds:0xc002de94
c0019765:	53                   	push   ebx
c0019766:	e8 69 fe ff ff       	call   c00195d4 <EnvVarContainer::EnvVarContainer(Process*)>
c001976b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001976e:	89 1d 74 d4 02 c0    	mov    DWORD PTR ds:0xc002d474,ebx
c0019774:	e8 3f fe ff ff       	call   c00195b8 <EnvVarContainer::__loadSystem()>
c0019779:	83 c4 18             	add    esp,0x18
c001977c:	5b                   	pop    ebx
c001977d:	c3                   	ret    

c001977e <Krnl::loadUserEnv()>:
c001977e:	53                   	push   ebx
c001977f:	83 ec 14             	sub    esp,0x14
c0019782:	6a 0c                	push   0xc
c0019784:	e8 4b 5d ff ff       	call   c000f4d4 <malloc>
c0019789:	89 c3                	mov    ebx,eax
c001978b:	58                   	pop    eax
c001978c:	5a                   	pop    edx
c001978d:	ff 35 94 de 02 c0    	push   DWORD PTR ds:0xc002de94
c0019793:	53                   	push   ebx
c0019794:	e8 3b fe ff ff       	call   c00195d4 <EnvVarContainer::EnvVarContainer(Process*)>
c0019799:	89 1d 70 d4 02 c0    	mov    DWORD PTR ds:0xc002d470,ebx
c001979f:	83 c4 18             	add    esp,0x18
c00197a2:	5b                   	pop    ebx
c00197a3:	c3                   	ret    

c00197a4 <Krnl::flushEnv()>:
c00197a4:	c3                   	ret    

c00197a5 <Krnl::getProcessTotalEnvCount(Process*)>:
c00197a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00197a9:	8b 15 70 d4 02 c0    	mov    edx,DWORD PTR ds:0xc002d470
c00197af:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c00197b5:	a1 74 d4 02 c0       	mov    eax,ds:0xc002d474
c00197ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00197bc:	03 01                	add    eax,DWORD PTR [ecx]
c00197be:	85 d2                	test   edx,edx
c00197c0:	74 02                	je     c00197c4 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c00197c2:	03 02                	add    eax,DWORD PTR [edx]
c00197c4:	c3                   	ret    

c00197c5 <Krnl::getProcessEnvPair(Process*, int)>:
c00197c5:	57                   	push   edi
c00197c6:	8b 0d 70 d4 02 c0    	mov    ecx,DWORD PTR ds:0xc002d470
c00197cc:	56                   	push   esi
c00197cd:	85 c9                	test   ecx,ecx
c00197cf:	53                   	push   ebx
c00197d0:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00197d4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00197d8:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c00197de:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00197e2:	8b 02                	mov    eax,DWORD PTR [edx]
c00197e4:	75 47                	jne    c001982d <Krnl::getProcessEnvPair(Process*, int)+0x68>
c00197e6:	39 c3                	cmp    ebx,eax
c00197e8:	7c 47                	jl     c0019831 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c00197ea:	8b 15 74 d4 02 c0    	mov    edx,DWORD PTR ds:0xc002d474
c00197f0:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00197f2:	01 c1                	add    ecx,eax
c00197f4:	39 d9                	cmp    ecx,ebx
c00197f6:	7e 6c                	jle    c0019864 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c00197f8:	51                   	push   ecx
c00197f9:	89 d9                	mov    ecx,ebx
c00197fb:	29 c1                	sub    ecx,eax
c00197fd:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0019800:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c0019804:	53                   	push   ebx
c0019805:	68 d7 a1 02 c0       	push   0xc002a1d7
c001980a:	e8 60 8f ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001980f:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c0019815:	2b 18                	sub    ebx,DWORD PTR [eax]
c0019817:	a1 74 d4 02 c0       	mov    eax,ds:0xc002d474
c001981c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001981f:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c0019823:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0019826:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0019829:	89 06                	mov    DWORD PTR [esi],eax
c001982b:	eb 51                	jmp    c001987e <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001982d:	39 c3                	cmp    ebx,eax
c001982f:	7d 05                	jge    c0019836 <Krnl::getProcessEnvPair(Process*, int)+0x71>
c0019831:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0019834:	eb 20                	jmp    c0019856 <Krnl::getProcessEnvPair(Process*, int)+0x91>
c0019836:	8b 39                	mov    edi,DWORD PTR [ecx]
c0019838:	8d 14 07             	lea    edx,[edi+eax*1]
c001983b:	39 da                	cmp    edx,ebx
c001983d:	7e 04                	jle    c0019843 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001983f:	29 c3                	sub    ebx,eax
c0019841:	eb 10                	jmp    c0019853 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c0019843:	8b 0d 74 d4 02 c0    	mov    ecx,DWORD PTR ds:0xc002d474
c0019849:	03 11                	add    edx,DWORD PTR [ecx]
c001984b:	39 da                	cmp    edx,ebx
c001984d:	7e 15                	jle    c0019864 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001984f:	29 c3                	sub    ebx,eax
c0019851:	29 fb                	sub    ebx,edi
c0019853:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0019856:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001985a:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001985d:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0019860:	89 06                	mov    DWORD PTR [esi],eax
c0019862:	eb 1d                	jmp    c0019881 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c0019864:	83 ec 0c             	sub    esp,0xc
c0019867:	68 eb a1 02 c0       	push   0xc002a1eb
c001986c:	e8 18 00 00 00       	call   c0019889 <Krnl::panic(char const*)>
c0019871:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0019877:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001987e:	83 c4 10             	add    esp,0x10
c0019881:	89 f0                	mov    eax,esi
c0019883:	5b                   	pop    ebx
c0019884:	5e                   	pop    esi
c0019885:	5f                   	pop    edi
c0019886:	c2 04 00             	ret    0x4

c0019889 <Krnl::panic(char const*)>:
c0019889:	55                   	push   ebp
c001988a:	89 e5                	mov    ebp,esp
c001988c:	53                   	push   ebx
c001988d:	50                   	push   eax
c001988e:	a1 7c d4 02 c0       	mov    eax,ds:0xc002d47c
c0019893:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0019896:	85 c0                	test   eax,eax
c0019898:	74 02                	je     c001989c <Krnl::panic(char const*)+0x13>
c001989a:	ff d0                	call   eax
c001989c:	fa                   	cli    
c001989d:	c6 05 80 d4 02 c0 01 	mov    BYTE PTR ds:0xc002d480,0x1
c00198a4:	83 ec 08             	sub    esp,0x8
c00198a7:	c6 05 84 b8 02 c0 00 	mov    BYTE PTR ds:0xc002b884,0x0
c00198ae:	53                   	push   ebx
c00198af:	68 05 a2 02 c0       	push   0xc002a205
c00198b4:	e8 b6 8e ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c00198b9:	58                   	pop    eax
c00198ba:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c00198bf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00198c5:	e8 67 70 ff ff       	call   c0010931 <setActiveTerminal(VgaText*)>
c00198ca:	83 c4 0c             	add    esp,0xc
c00198cd:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c00198d2:	6a 01                	push   0x1
c00198d4:	6a 0f                	push   0xf
c00198d6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00198dc:	e8 81 6a ff ff       	call   c0010362 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00198e1:	5a                   	pop    edx
c00198e2:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c00198e7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00198ed:	e8 e0 72 ff ff       	call   c0010bd2 <VgaText::clearScreen()>
c00198f2:	59                   	pop    ecx
c00198f3:	58                   	pop    eax
c00198f4:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c00198f9:	68 1e a2 02 c0       	push   0xc002a21e
c00198fe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019904:	e8 47 74 ff ff       	call   c0010d50 <VgaText::puts(char const*)>
c0019909:	58                   	pop    eax
c001990a:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c001990f:	5a                   	pop    edx
c0019910:	68 c4 a2 02 c0       	push   0xc002a2c4
c0019915:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001991b:	e8 30 74 ff ff       	call   c0010d50 <VgaText::puts(char const*)>
c0019920:	59                   	pop    ecx
c0019921:	58                   	pop    eax
c0019922:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0019927:	68 3a a2 02 c0       	push   0xc002a23a
c001992c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019932:	e8 19 74 ff ff       	call   c0010d50 <VgaText::puts(char const*)>
c0019937:	58                   	pop    eax
c0019938:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c001993d:	5a                   	pop    edx
c001993e:	53                   	push   ebx
c001993f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019945:	e8 06 74 ff ff       	call   c0010d50 <VgaText::puts(char const*)>
c001994a:	59                   	pop    ecx
c001994b:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0019950:	5b                   	pop    ebx
c0019951:	68 5a a2 02 c0       	push   0xc002a25a
c0019956:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001995c:	e8 ef 73 ff ff       	call   c0010d50 <VgaText::puts(char const*)>
c0019961:	58                   	pop    eax
c0019962:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0019967:	5a                   	pop    edx
c0019968:	68 00 a3 02 c0       	push   0xc002a300
c001996d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019973:	e8 d8 73 ff ff       	call   c0010d50 <VgaText::puts(char const*)>
c0019978:	59                   	pop    ecx
c0019979:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c001997e:	5b                   	pop    ebx
c001997f:	68 3a a2 02 c0       	push   0xc002a23a
c0019984:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001998a:	e8 c1 73 ff ff       	call   c0010d50 <VgaText::puts(char const*)>
c001998f:	58                   	pop    eax
c0019990:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019995:	5a                   	pop    edx
c0019996:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019999:	83 c0 0c             	add    eax,0xc
c001999c:	50                   	push   eax
c001999d:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c00199a2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00199a8:	e8 a3 73 ff ff       	call   c0010d50 <VgaText::puts(char const*)>
c00199ad:	59                   	pop    ecx
c00199ae:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c00199b3:	5b                   	pop    ebx
c00199b4:	68 59 a2 02 c0       	push   0xc002a259
c00199b9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00199bf:	e8 8c 73 ff ff       	call   c0010d50 <VgaText::puts(char const*)>
c00199c4:	58                   	pop    eax
c00199c5:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c00199ca:	5a                   	pop    edx
c00199cb:	68 2c a3 02 c0       	push   0xc002a32c
c00199d0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00199d6:	e8 75 73 ff ff       	call   c0010d50 <VgaText::puts(char const*)>
c00199db:	59                   	pop    ecx
c00199dc:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c00199e1:	5b                   	pop    ebx
c00199e2:	68 6c a3 02 c0       	push   0xc002a36c
c00199e7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00199ed:	e8 5e 73 ff ff       	call   c0010d50 <VgaText::puts(char const*)>
c00199f2:	58                   	pop    eax
c00199f3:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c00199f8:	5a                   	pop    edx
c00199f9:	68 45 a2 02 c0       	push   0xc002a245
c00199fe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a04:	e8 47 73 ff ff       	call   c0010d50 <VgaText::puts(char const*)>
c0019a09:	59                   	pop    ecx
c0019a0a:	5b                   	pop    ebx
c0019a0b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019a0e:	68 5d a2 02 c0       	push   0xc002a25d
c0019a13:	e8 57 8d ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c0019a18:	58                   	pop    eax
c0019a19:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019a1c:	5a                   	pop    edx
c0019a1d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019a20:	68 66 a2 02 c0       	push   0xc002a266
c0019a25:	e8 45 8d ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c0019a2a:	59                   	pop    ecx
c0019a2b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019a2e:	5b                   	pop    ebx
c0019a2f:	8b 00                	mov    eax,DWORD PTR [eax]
c0019a31:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019a34:	68 6f a2 02 c0       	push   0xc002a26f
c0019a39:	e8 31 8d ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c0019a3e:	58                   	pop    eax
c0019a3f:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0019a44:	5a                   	pop    edx
c0019a45:	68 b0 a3 02 c0       	push   0xc002a3b0
c0019a4a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a50:	e8 fb 72 ff ff       	call   c0010d50 <VgaText::puts(char const*)>
c0019a55:	59                   	pop    ecx
c0019a56:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0019a5b:	5b                   	pop    ebx
c0019a5c:	68 78 a2 02 c0       	push   0xc002a278
c0019a61:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a67:	e8 e4 72 ff ff       	call   c0010d50 <VgaText::puts(char const*)>
c0019a6c:	0f 20 c0             	mov    eax,cr0
c0019a6f:	5a                   	pop    edx
c0019a70:	59                   	pop    ecx
c0019a71:	50                   	push   eax
c0019a72:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0019a77:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a7d:	e8 f4 72 ff ff       	call   c0010d76 <VgaText::putx(unsigned int)>
c0019a82:	5b                   	pop    ebx
c0019a83:	58                   	pop    eax
c0019a84:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0019a89:	68 82 a2 02 c0       	push   0xc002a282
c0019a8e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a94:	e8 b7 72 ff ff       	call   c0010d50 <VgaText::puts(char const*)>
c0019a99:	0f 20 d0             	mov    eax,cr2
c0019a9c:	5a                   	pop    edx
c0019a9d:	59                   	pop    ecx
c0019a9e:	50                   	push   eax
c0019a9f:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0019aa4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019aaa:	e8 c7 72 ff ff       	call   c0010d76 <VgaText::putx(unsigned int)>
c0019aaf:	5b                   	pop    ebx
c0019ab0:	58                   	pop    eax
c0019ab1:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0019ab6:	68 8c a2 02 c0       	push   0xc002a28c
c0019abb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ac1:	e8 8a 72 ff ff       	call   c0010d50 <VgaText::puts(char const*)>
c0019ac6:	0f 20 d8             	mov    eax,cr3
c0019ac9:	5a                   	pop    edx
c0019aca:	59                   	pop    ecx
c0019acb:	50                   	push   eax
c0019acc:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0019ad1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ad7:	e8 9a 72 ff ff       	call   c0010d76 <VgaText::putx(unsigned int)>
c0019adc:	5b                   	pop    ebx
c0019add:	58                   	pop    eax
c0019ade:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0019ae3:	68 9f a2 02 c0       	push   0xc002a29f
c0019ae8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019aee:	e8 5d 72 ff ff       	call   c0010d50 <VgaText::puts(char const*)>
c0019af3:	0f 20 e0             	mov    eax,cr4
c0019af6:	5a                   	pop    edx
c0019af7:	59                   	pop    ecx
c0019af8:	50                   	push   eax
c0019af9:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0019afe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019b04:	e8 6d 72 ff ff       	call   c0010d76 <VgaText::putx(unsigned int)>
c0019b09:	5b                   	pop    ebx
c0019b0a:	58                   	pop    eax
c0019b0b:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0019b10:	68 a9 a2 02 c0       	push   0xc002a2a9
c0019b15:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019b1b:	e8 30 72 ff ff       	call   c0010d50 <VgaText::puts(char const*)>
c0019b20:	5a                   	pop    edx
c0019b21:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0019b26:	59                   	pop    ecx
c0019b27:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019b2d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019b30:	50                   	push   eax
c0019b31:	e8 40 72 ff ff       	call   c0010d76 <VgaText::putx(unsigned int)>
c0019b36:	5b                   	pop    ebx
c0019b37:	58                   	pop    eax
c0019b38:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0019b3d:	68 c0 a2 02 c0       	push   0xc002a2c0
c0019b42:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019b48:	e8 03 72 ff ff       	call   c0010d50 <VgaText::puts(char const*)>
c0019b4d:	5a                   	pop    edx
c0019b4e:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0019b53:	59                   	pop    ecx
c0019b54:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019b5a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019b5d:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0019b60:	50                   	push   eax
c0019b61:	e8 10 72 ff ff       	call   c0010d76 <VgaText::putx(unsigned int)>
c0019b66:	5b                   	pop    ebx
c0019b67:	58                   	pop    eax
c0019b68:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0019b6d:	68 c0 a2 02 c0       	push   0xc002a2c0
c0019b72:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019b78:	e8 d3 71 ff ff       	call   c0010d50 <VgaText::puts(char const*)>
c0019b7d:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c0019b82:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019b85:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019b8b:	8b 12                	mov    edx,DWORD PTR [edx]
c0019b8d:	59                   	pop    ecx
c0019b8e:	5b                   	pop    ebx
c0019b8f:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0019b92:	50                   	push   eax
c0019b93:	e8 de 71 ff ff       	call   c0010d76 <VgaText::putx(unsigned int)>
c0019b98:	83 c4 10             	add    esp,0x10
c0019b9b:	b2 fe                	mov    dl,0xfe
c0019b9d:	e4 60                	in     al,0x60
c0019b9f:	3c 1c                	cmp    al,0x1c
c0019ba1:	74 04                	je     c0019ba7 <Krnl::panic(char const*)+0x31e>
c0019ba3:	3c 5a                	cmp    al,0x5a
c0019ba5:	75 f6                	jne    c0019b9d <Krnl::panic(char const*)+0x314>
c0019ba7:	e4 64                	in     al,0x64
c0019ba9:	a8 02                	test   al,0x2
c0019bab:	75 fa                	jne    c0019ba7 <Krnl::panic(char const*)+0x31e>
c0019bad:	88 d0                	mov    al,dl
c0019baf:	e6 64                	out    0x64,al
c0019bb1:	fa                   	cli    
c0019bb2:	f4                   	hlt    
c0019bb3:	eb e8                	jmp    c0019b9d <Krnl::panic(char const*)+0x314>

c0019bb5 <Net::switchEndian16(unsigned short)>:
c0019bb5:	83 ec 04             	sub    esp,0x4
c0019bb8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019bbc:	66 89 04 24          	mov    WORD PTR [esp],ax
c0019bc0:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0019bc4:	c1 f8 08             	sar    eax,0x8
c0019bc7:	89 c2                	mov    edx,eax
c0019bc9:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0019bcd:	c1 e0 08             	shl    eax,0x8
c0019bd0:	09 d0                	or     eax,edx
c0019bd2:	83 c4 04             	add    esp,0x4
c0019bd5:	c3                   	ret    

c0019bd6 <Net::switchEndian32(unsigned int)>:
c0019bd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bda:	c1 e8 18             	shr    eax,0x18
c0019bdd:	89 c2                	mov    edx,eax
c0019bdf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019be3:	c1 e0 08             	shl    eax,0x8
c0019be6:	25 00 00 ff 00       	and    eax,0xff0000
c0019beb:	09 c2                	or     edx,eax
c0019bed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bf1:	c1 e8 08             	shr    eax,0x8
c0019bf4:	25 00 ff 00 00       	and    eax,0xff00
c0019bf9:	09 c2                	or     edx,eax
c0019bfb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bff:	c1 e0 18             	shl    eax,0x18
c0019c02:	09 d0                	or     eax,edx
c0019c04:	c3                   	ret    

c0019c05 <Net::crc32Calc(unsigned char*, int)>:
c0019c05:	83 ec 10             	sub    esp,0x10
c0019c08:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019c0d:	75 07                	jne    c0019c16 <Net::crc32Calc(unsigned char*, int)+0x11>
c0019c0f:	b8 00 00 00 00       	mov    eax,0x0
c0019c14:	eb 7c                	jmp    c0019c92 <Net::crc32Calc(unsigned char*, int)+0x8d>
c0019c16:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0019c1b:	7f 07                	jg     c0019c24 <Net::crc32Calc(unsigned char*, int)+0x1f>
c0019c1d:	b8 00 00 00 00       	mov    eax,0x0
c0019c22:	eb 6e                	jmp    c0019c92 <Net::crc32Calc(unsigned char*, int)+0x8d>
c0019c24:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0019c2c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019c34:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c38:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0019c3c:	7d 4e                	jge    c0019c8c <Net::crc32Calc(unsigned char*, int)+0x87>
c0019c3e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019c42:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019c46:	01 d0                	add    eax,edx
c0019c48:	8a 00                	mov    al,BYTE PTR [eax]
c0019c4a:	0f b6 c0             	movzx  eax,al
c0019c4d:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0019c51:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019c59:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0019c5e:	7f 26                	jg     c0019c86 <Net::crc32Calc(unsigned char*, int)+0x81>
c0019c60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c64:	83 e0 01             	and    eax,0x1
c0019c67:	74 0d                	je     c0019c76 <Net::crc32Calc(unsigned char*, int)+0x71>
c0019c69:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c6d:	d1 e8                	shr    eax,1
c0019c6f:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0019c74:	eb 06                	jmp    c0019c7c <Net::crc32Calc(unsigned char*, int)+0x77>
c0019c76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c7a:	d1 e8                	shr    eax,1
c0019c7c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019c80:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0019c84:	eb d3                	jmp    c0019c59 <Net::crc32Calc(unsigned char*, int)+0x54>
c0019c86:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0019c8a:	eb a8                	jmp    c0019c34 <Net::crc32Calc(unsigned char*, int)+0x2f>
c0019c8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c90:	f7 d0                	not    eax
c0019c92:	83 c4 10             	add    esp,0x10
c0019c95:	c3                   	ret    

c0019c96 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c0019c96:	83 ec 1c             	sub    esp,0x1c
c0019c99:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019c9d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019ca1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019ca9:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c0019cae:	7f 14                	jg     c0019cc4 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c0019cb0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019cb4:	8d 50 01             	lea    edx,[eax+0x1]
c0019cb7:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019cbb:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c0019cbe:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0019cc2:	eb e5                	jmp    c0019ca9 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c0019cc4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019cc8:	8d 50 01             	lea    edx,[eax+0x1]
c0019ccb:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019ccf:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c0019cd2:	83 ec 04             	sub    esp,0x4
c0019cd5:	6a 06                	push   0x6
c0019cd7:	8d 44 24 36          	lea    eax,[esp+0x36]
c0019cdb:	50                   	push   eax
c0019cdc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0019ce0:	e8 70 69 fe ff       	call   c0000655 <memcpy>
c0019ce5:	83 c4 10             	add    esp,0x10
c0019ce8:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c0019ced:	83 ec 04             	sub    esp,0x4
c0019cf0:	6a 06                	push   0x6
c0019cf2:	8d 44 24 30          	lea    eax,[esp+0x30]
c0019cf6:	50                   	push   eax
c0019cf7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0019cfb:	e8 55 69 fe ff       	call   c0000655 <memcpy>
c0019d00:	83 c4 10             	add    esp,0x10
c0019d03:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c0019d08:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019d0c:	0f b7 c0             	movzx  eax,ax
c0019d0f:	c1 f8 08             	sar    eax,0x8
c0019d12:	89 c1                	mov    ecx,eax
c0019d14:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019d18:	8d 50 01             	lea    edx,[eax+0x1]
c0019d1b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019d1f:	88 ca                	mov    dl,cl
c0019d21:	88 10                	mov    BYTE PTR [eax],dl
c0019d23:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0019d27:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019d2b:	8d 48 01             	lea    ecx,[eax+0x1]
c0019d2e:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0019d32:	88 10                	mov    BYTE PTR [eax],dl
c0019d34:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0019d38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019d3c:	83 ec 04             	sub    esp,0x4
c0019d3f:	52                   	push   edx
c0019d40:	50                   	push   eax
c0019d41:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0019d45:	e8 0b 69 fe ff       	call   c0000655 <memcpy>
c0019d4a:	83 c4 10             	add    esp,0x10
c0019d4d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019d51:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0019d55:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019d59:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0019d5d:	83 ec 08             	sub    esp,0x8
c0019d60:	50                   	push   eax
c0019d61:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019d65:	e8 9b fe ff ff       	call   c0019c05 <Net::crc32Calc(unsigned char*, int)>
c0019d6a:	83 c4 10             	add    esp,0x10
c0019d6d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019d71:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d75:	c1 e8 18             	shr    eax,0x18
c0019d78:	89 c1                	mov    ecx,eax
c0019d7a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019d7e:	8d 50 01             	lea    edx,[eax+0x1]
c0019d81:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019d85:	88 ca                	mov    dl,cl
c0019d87:	88 10                	mov    BYTE PTR [eax],dl
c0019d89:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d8d:	c1 e8 10             	shr    eax,0x10
c0019d90:	89 c1                	mov    ecx,eax
c0019d92:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019d96:	8d 50 01             	lea    edx,[eax+0x1]
c0019d99:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019d9d:	88 ca                	mov    dl,cl
c0019d9f:	88 10                	mov    BYTE PTR [eax],dl
c0019da1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019da5:	c1 e8 08             	shr    eax,0x8
c0019da8:	89 c1                	mov    ecx,eax
c0019daa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019dae:	8d 50 01             	lea    edx,[eax+0x1]
c0019db1:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019db5:	88 ca                	mov    dl,cl
c0019db7:	88 10                	mov    BYTE PTR [eax],dl
c0019db9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019dbd:	8d 50 01             	lea    edx,[eax+0x1]
c0019dc0:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019dc4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019dc8:	88 10                	mov    BYTE PTR [eax],dl
c0019dca:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019dce:	83 c4 1c             	add    esp,0x1c
c0019dd1:	c3                   	ret    

c0019dd2 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c0019dd2:	83 ec 2c             	sub    esp,0x2c
c0019dd5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019dd9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019ddd:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c0019de2:	83 ec 04             	sub    esp,0x4
c0019de5:	6a 06                	push   0x6
c0019de7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019deb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019def:	83 c0 0e             	add    eax,0xe
c0019df2:	50                   	push   eax
c0019df3:	e8 5d 68 fe ff       	call   c0000655 <memcpy>
c0019df8:	83 c4 10             	add    esp,0x10
c0019dfb:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c0019e00:	83 ec 04             	sub    esp,0x4
c0019e03:	6a 06                	push   0x6
c0019e05:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019e09:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019e0d:	83 c0 08             	add    eax,0x8
c0019e10:	50                   	push   eax
c0019e11:	e8 3f 68 fe ff       	call   c0000655 <memcpy>
c0019e16:	83 c4 10             	add    esp,0x10
c0019e19:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c0019e1e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019e22:	8d 50 01             	lea    edx,[eax+0x1]
c0019e25:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019e29:	8a 00                	mov    al,BYTE PTR [eax]
c0019e2b:	0f b6 c0             	movzx  eax,al
c0019e2e:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0019e33:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019e37:	8d 50 01             	lea    edx,[eax+0x1]
c0019e3a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019e3e:	8a 00                	mov    al,BYTE PTR [eax]
c0019e40:	0f b6 c0             	movzx  eax,al
c0019e43:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c0019e48:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c0019e4d:	c1 e0 08             	shl    eax,0x8
c0019e50:	89 c2                	mov    edx,eax
c0019e52:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019e56:	09 d0                	or     eax,edx
c0019e58:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019e5c:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c0019e60:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c0019e65:	75 3a                	jne    c0019ea1 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c0019e67:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019e6b:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019e6e:	66 3d dc 05          	cmp    ax,0x5dc
c0019e72:	77 10                	ja     c0019e84 <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c0019e74:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019e78:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019e7b:	0f b7 c0             	movzx  eax,ax
c0019e7e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0019e82:	eb 1d                	jmp    c0019ea1 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c0019e84:	83 ec 0c             	sub    esp,0xc
c0019e87:	68 d8 a3 02 c0       	push   0xc002a3d8
c0019e8c:	e8 de 88 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c0019e91:	83 c4 10             	add    esp,0x10
c0019e94:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019e98:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c0019e9c:	e9 c0 00 00 00       	jmp    c0019f61 <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c0019ea1:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0019ea5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019ea9:	8b 00                	mov    eax,DWORD PTR [eax]
c0019eab:	83 ec 04             	sub    esp,0x4
c0019eae:	52                   	push   edx
c0019eaf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019eb3:	50                   	push   eax
c0019eb4:	e8 9c 67 fe ff       	call   c0000655 <memcpy>
c0019eb9:	83 c4 10             	add    esp,0x10
c0019ebc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019ec0:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0019ec4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019ec8:	8d 50 01             	lea    edx,[eax+0x1]
c0019ecb:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019ecf:	8a 00                	mov    al,BYTE PTR [eax]
c0019ed1:	0f b6 c0             	movzx  eax,al
c0019ed4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019ed8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019edc:	8d 50 01             	lea    edx,[eax+0x1]
c0019edf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019ee3:	8a 00                	mov    al,BYTE PTR [eax]
c0019ee5:	0f b6 c0             	movzx  eax,al
c0019ee8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019eec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019ef0:	8d 50 01             	lea    edx,[eax+0x1]
c0019ef3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019ef7:	8a 00                	mov    al,BYTE PTR [eax]
c0019ef9:	0f b6 c0             	movzx  eax,al
c0019efc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019f00:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019f04:	8d 50 01             	lea    edx,[eax+0x1]
c0019f07:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019f0b:	8a 00                	mov    al,BYTE PTR [eax]
c0019f0d:	0f b6 c0             	movzx  eax,al
c0019f10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019f14:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019f18:	c1 e0 18             	shl    eax,0x18
c0019f1b:	89 c2                	mov    edx,eax
c0019f1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f21:	c1 e0 10             	shl    eax,0x10
c0019f24:	09 c2                	or     edx,eax
c0019f26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019f2a:	c1 e0 08             	shl    eax,0x8
c0019f2d:	09 d0                	or     eax,edx
c0019f2f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0019f33:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019f37:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019f3b:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0019f3f:	83 e8 04             	sub    eax,0x4
c0019f42:	83 ec 08             	sub    esp,0x8
c0019f45:	50                   	push   eax
c0019f46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019f4a:	e8 b6 fc ff ff       	call   c0019c05 <Net::crc32Calc(unsigned char*, int)>
c0019f4f:	83 c4 10             	add    esp,0x10
c0019f52:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0019f56:	0f 94 c2             	sete   dl
c0019f59:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019f5d:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c0019f60:	90                   	nop
c0019f61:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019f65:	83 c4 2c             	add    esp,0x2c
c0019f68:	c2 04 00             	ret    0x4

c0019f6b <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0019f6b:	55                   	push   ebp
c0019f6c:	57                   	push   edi
c0019f6d:	56                   	push   esi
c0019f6e:	53                   	push   ebx
c0019f6f:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019f75:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0019f7c:	8a 1e                	mov    bl,BYTE PTR [esi]
c0019f7e:	8d 6e 01             	lea    ebp,[esi+0x1]
c0019f81:	80 fb 40             	cmp    bl,0x40
c0019f84:	75 1b                	jne    c0019fa1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0019f86:	8a 16                	mov    dl,BYTE PTR [esi]
c0019f88:	84 d2                	test   dl,dl
c0019f8a:	0f 84 f1 00 00 00    	je     c001a081 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0019f90:	8d 46 01             	lea    eax,[esi+0x1]
c0019f93:	80 fa 3a             	cmp    dl,0x3a
c0019f96:	74 04                	je     c0019f9c <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0019f98:	89 c6                	mov    esi,eax
c0019f9a:	eb ea                	jmp    c0019f86 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0019f9c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0019f9f:	89 c6                	mov    esi,eax
c0019fa1:	50                   	push   eax
c0019fa2:	6a 40                	push   0x40
c0019fa4:	6a 00                	push   0x0
c0019fa6:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019faa:	50                   	push   eax
c0019fab:	e8 db 66 fe ff       	call   c000068b <memset>
c0019fb0:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0019fb7:	31 c0                	xor    eax,eax
c0019fb9:	83 c4 10             	add    esp,0x10
c0019fbc:	8a 0f                	mov    cl,BYTE PTR [edi]
c0019fbe:	84 c9                	test   cl,cl
c0019fc0:	0f 84 bb 00 00 00    	je     c001a081 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0019fc6:	3d c7 00 00 00       	cmp    eax,0xc7
c0019fcb:	0f 8f b0 00 00 00    	jg     c001a081 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0019fd1:	80 f9 0a             	cmp    cl,0xa
c0019fd4:	0f 85 98 00 00 00    	jne    c001a072 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0019fda:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0019fdf:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0019fe3:	a8 df                	test   al,0xdf
c0019fe5:	0f 94 c1             	sete   cl
c0019fe8:	3c 23                	cmp    al,0x23
c0019fea:	0f 94 c2             	sete   dl
c0019fed:	08 d1                	or     cl,dl
c0019fef:	75 4a                	jne    c001a03b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0019ff1:	8d 50 f7             	lea    edx,[eax-0x9]
c0019ff4:	80 fa 01             	cmp    dl,0x1
c0019ff7:	76 42                	jbe    c001a03b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0019ff9:	3c 5b                	cmp    al,0x5b
c0019ffb:	75 42                	jne    c001a03f <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0019ffd:	80 fb 40             	cmp    bl,0x40
c001a000:	75 39                	jne    c001a03b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a002:	83 ec 0c             	sub    esp,0xc
c001a005:	8d 54 24 65          	lea    edx,[esp+0x65]
c001a009:	52                   	push   edx
c001a00a:	e8 99 66 fe ff       	call   c00006a8 <strlen>
c001a00f:	83 c4 10             	add    esp,0x10
c001a012:	83 f8 3f             	cmp    eax,0x3f
c001a015:	77 6a                	ja     c001a081 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a017:	50                   	push   eax
c001a018:	50                   	push   eax
c001a019:	8d 54 24 61          	lea    edx,[esp+0x61]
c001a01d:	52                   	push   edx
c001a01e:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a022:	52                   	push   edx
c001a023:	e8 02 67 fe ff       	call   c000072a <strcpy>
c001a028:	58                   	pop    eax
c001a029:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a02d:	52                   	push   edx
c001a02e:	e8 75 66 fe ff       	call   c00006a8 <strlen>
c001a033:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001a038:	83 c4 10             	add    esp,0x10
c001a03b:	31 d2                	xor    edx,edx
c001a03d:	eb 3a                	jmp    c001a079 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001a03f:	80 fb 40             	cmp    bl,0x40
c001a042:	74 06                	je     c001a04a <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001a044:	8d 44 24 58          	lea    eax,[esp+0x58]
c001a048:	eb 20                	jmp    c001a06a <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001a04a:	50                   	push   eax
c001a04b:	50                   	push   eax
c001a04c:	55                   	push   ebp
c001a04d:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a051:	50                   	push   eax
c001a052:	e8 24 67 fe ff       	call   c000077b <strcmp>
c001a057:	83 c4 10             	add    esp,0x10
c001a05a:	85 c0                	test   eax,eax
c001a05c:	75 dd                	jne    c001a03b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a05e:	eb e4                	jmp    c001a044 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001a060:	8d 50 01             	lea    edx,[eax+0x1]
c001a063:	80 f9 3d             	cmp    cl,0x3d
c001a066:	74 1d                	je     c001a085 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001a068:	89 d0                	mov    eax,edx
c001a06a:	8a 08                	mov    cl,BYTE PTR [eax]
c001a06c:	84 c9                	test   cl,cl
c001a06e:	75 f0                	jne    c001a060 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001a070:	eb 0f                	jmp    c001a081 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a072:	8d 50 01             	lea    edx,[eax+0x1]
c001a075:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001a079:	47                   	inc    edi
c001a07a:	89 d0                	mov    eax,edx
c001a07c:	e9 3b ff ff ff       	jmp    c0019fbc <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001a081:	31 c0                	xor    eax,eax
c001a083:	eb 33                	jmp    c001a0b8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001a085:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a089:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001a08c:	50                   	push   eax
c001a08d:	50                   	push   eax
c001a08e:	8d 44 24 60          	lea    eax,[esp+0x60]
c001a092:	50                   	push   eax
c001a093:	56                   	push   esi
c001a094:	e8 e2 66 fe ff       	call   c000077b <strcmp>
c001a099:	83 c4 10             	add    esp,0x10
c001a09c:	85 c0                	test   eax,eax
c001a09e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a0a2:	75 97                	jne    c001a03b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a0a4:	51                   	push   ecx
c001a0a5:	51                   	push   ecx
c001a0a6:	52                   	push   edx
c001a0a7:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001a0ae:	e8 77 66 fe ff       	call   c000072a <strcpy>
c001a0b3:	83 c4 10             	add    esp,0x10
c001a0b6:	b0 01                	mov    al,0x1
c001a0b8:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a0be:	5b                   	pop    ebx
c001a0bf:	5e                   	pop    esi
c001a0c0:	5f                   	pop    edi
c001a0c1:	5d                   	pop    ebp
c001a0c2:	c3                   	ret    

c001a0c3 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001a0c3:	57                   	push   edi
c001a0c4:	56                   	push   esi
c001a0c5:	53                   	push   ebx
c001a0c6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a0cc:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001a0d3:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a0da:	53                   	push   ebx
c001a0db:	e8 c8 65 fe ff       	call   c00006a8 <strlen>
c001a0e0:	89 34 24             	mov    DWORD PTR [esp],esi
c001a0e3:	89 c7                	mov    edi,eax
c001a0e5:	e8 be 65 fe ff       	call   c00006a8 <strlen>
c001a0ea:	83 c4 10             	add    esp,0x10
c001a0ed:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001a0f1:	3d ff 00 00 00       	cmp    eax,0xff
c001a0f6:	0f 87 d3 00 00 00    	ja     c001a1cf <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a0fc:	57                   	push   edi
c001a0fd:	57                   	push   edi
c001a0fe:	56                   	push   esi
c001a0ff:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001a103:	56                   	push   esi
c001a104:	e8 21 66 fe ff       	call   c000072a <strcpy>
c001a109:	58                   	pop    eax
c001a10a:	5a                   	pop    edx
c001a10b:	68 86 a7 02 c0       	push   0xc002a786
c001a110:	56                   	push   esi
c001a111:	e8 cb 66 fe ff       	call   c00007e1 <strcat>
c001a116:	59                   	pop    ecx
c001a117:	5f                   	pop    edi
c001a118:	53                   	push   ebx
c001a119:	56                   	push   esi
c001a11a:	e8 c2 66 fe ff       	call   c00007e1 <strcat>
c001a11f:	58                   	pop    eax
c001a120:	5a                   	pop    edx
c001a121:	68 24 a4 02 c0       	push   0xc002a424
c001a126:	56                   	push   esi
c001a127:	e8 b5 66 fe ff       	call   c00007e1 <strcat>
c001a12c:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001a133:	e8 9c 53 ff ff       	call   c000f4d4 <malloc>
c001a138:	83 c4 0c             	add    esp,0xc
c001a13b:	89 c3                	mov    ebx,eax
c001a13d:	ff 35 94 de 02 c0    	push   DWORD PTR ds:0xc002de94
c001a143:	56                   	push   esi
c001a144:	50                   	push   eax
c001a145:	e8 54 8b ff ff       	call   c0012c9e <File::File(char const*, Process*)>
c001a14a:	83 c4 10             	add    esp,0x10
c001a14d:	85 db                	test   ebx,ebx
c001a14f:	74 7e                	je     c001a1cf <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a151:	51                   	push   ecx
c001a152:	51                   	push   ecx
c001a153:	6a 01                	push   0x1
c001a155:	53                   	push   ebx
c001a156:	e8 a7 8b ff ff       	call   c0012d02 <File::open(FileOpenMode)>
c001a15b:	83 c4 10             	add    esp,0x10
c001a15e:	85 c0                	test   eax,eax
c001a160:	74 08                	je     c001a16a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001a162:	83 ec 0c             	sub    esp,0xc
c001a165:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a167:	53                   	push   ebx
c001a168:	eb 5f                	jmp    c001a1c9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001a16a:	52                   	push   edx
c001a16b:	8d 44 24 17          	lea    eax,[esp+0x17]
c001a16f:	50                   	push   eax
c001a170:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a174:	50                   	push   eax
c001a175:	53                   	push   ebx
c001a176:	e8 33 8e ff ff       	call   c0012fae <File::stat(unsigned long long*, bool*)>
c001a17b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a17f:	83 c4 10             	add    esp,0x10
c001a182:	89 c1                	mov    ecx,eax
c001a184:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001a188:	74 31                	je     c001a1bb <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a18a:	83 ec 0c             	sub    esp,0xc
c001a18d:	50                   	push   eax
c001a18e:	e8 41 53 ff ff       	call   c000f4d4 <malloc>
c001a193:	89 c6                	mov    esi,eax
c001a195:	58                   	pop    eax
c001a196:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a198:	8d 54 24 20          	lea    edx,[esp+0x20]
c001a19c:	52                   	push   edx
c001a19d:	56                   	push   esi
c001a19e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a1a2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a1a6:	53                   	push   ebx
c001a1a7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a1aa:	83 c4 20             	add    esp,0x20
c001a1ad:	85 c0                	test   eax,eax
c001a1af:	75 0a                	jne    c001a1bb <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a1b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a1b5:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001a1b9:	74 18                	je     c001a1d3 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001a1bb:	83 ec 0c             	sub    esp,0xc
c001a1be:	53                   	push   ebx
c001a1bf:	e8 9c 8b ff ff       	call   c0012d60 <File::close()>
c001a1c4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a1c6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a1c9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a1cc:	83 c4 10             	add    esp,0x10
c001a1cf:	31 c0                	xor    eax,eax
c001a1d1:	eb 3b                	jmp    c001a20e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001a1d3:	83 ec 0c             	sub    esp,0xc
c001a1d6:	53                   	push   ebx
c001a1d7:	e8 84 8b ff ff       	call   c0012d60 <File::close()>
c001a1dc:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a1de:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a1e1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a1e4:	83 c4 0c             	add    esp,0xc
c001a1e7:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a1ee:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a1f5:	56                   	push   esi
c001a1f6:	e8 70 fd ff ff       	call   c0019f6b <Reg::findLineFromLoadedData(char*, char*, char*)>
c001a1fb:	89 34 24             	mov    DWORD PTR [esp],esi
c001a1fe:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001a202:	e8 dd 52 ff ff       	call   c000f4e4 <free>
c001a207:	83 c4 10             	add    esp,0x10
c001a20a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a20e:	81 c4 20 01 00 00    	add    esp,0x120
c001a214:	5b                   	pop    ebx
c001a215:	5e                   	pop    esi
c001a216:	5f                   	pop    edi
c001a217:	c3                   	ret    

c001a218 <Reg::getLine(char*, char*, char*)>:
c001a218:	57                   	push   edi
c001a219:	56                   	push   esi
c001a21a:	53                   	push   ebx
c001a21b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a21f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a223:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001a227:	57                   	push   edi
c001a228:	56                   	push   esi
c001a229:	53                   	push   ebx
c001a22a:	68 29 a4 02 c0       	push   0xc002a429
c001a22f:	e8 8f fe ff ff       	call   c001a0c3 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001a234:	83 c4 10             	add    esp,0x10
c001a237:	84 c0                	test   al,al
c001a239:	75 10                	jne    c001a24b <Reg::getLine(char*, char*, char*)+0x33>
c001a23b:	57                   	push   edi
c001a23c:	56                   	push   esi
c001a23d:	53                   	push   ebx
c001a23e:	68 4e a4 02 c0       	push   0xc002a44e
c001a243:	e8 7b fe ff ff       	call   c001a0c3 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001a248:	83 c4 10             	add    esp,0x10
c001a24b:	5b                   	pop    ebx
c001a24c:	5e                   	pop    esi
c001a24d:	5f                   	pop    edi
c001a24e:	c3                   	ret    

c001a24f <Reg::readInt(char*, char*, int*)>:
c001a24f:	55                   	push   ebp
c001a250:	57                   	push   edi
c001a251:	56                   	push   esi
c001a252:	53                   	push   ebx
c001a253:	81 ec f0 00 00 00    	sub    esp,0xf0
c001a259:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001a25d:	57                   	push   edi
c001a25e:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001a265:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001a26c:	e8 a7 ff ff ff       	call   c001a218 <Reg::getLine(char*, char*, char*)>
c001a271:	83 c4 10             	add    esp,0x10
c001a274:	84 c0                	test   al,al
c001a276:	0f 84 b3 00 00 00    	je     c001a32f <Reg::readInt(char*, char*, int*)+0xe0>
c001a27c:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001a280:	80 fa 2b             	cmp    dl,0x2b
c001a283:	74 0c                	je     c001a291 <Reg::readInt(char*, char*, int*)+0x42>
c001a285:	80 fa 2d             	cmp    dl,0x2d
c001a288:	75 0e                	jne    c001a298 <Reg::readInt(char*, char*, int*)+0x49>
c001a28a:	ba 01 00 00 00       	mov    edx,0x1
c001a28f:	eb 0b                	jmp    c001a29c <Reg::readInt(char*, char*, int*)+0x4d>
c001a291:	ba 01 00 00 00       	mov    edx,0x1
c001a296:	eb 02                	jmp    c001a29a <Reg::readInt(char*, char*, int*)+0x4b>
c001a298:	31 d2                	xor    edx,edx
c001a29a:	31 c0                	xor    eax,eax
c001a29c:	be 0a 00 00 00       	mov    esi,0xa
c001a2a1:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001a2a6:	75 20                	jne    c001a2c8 <Reg::readInt(char*, char*, int*)+0x79>
c001a2a8:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001a2ac:	80 f9 78             	cmp    cl,0x78
c001a2af:	75 0a                	jne    c001a2bb <Reg::readInt(char*, char*, int*)+0x6c>
c001a2b1:	83 c2 02             	add    edx,0x2
c001a2b4:	be 10 00 00 00       	mov    esi,0x10
c001a2b9:	eb 0d                	jmp    c001a2c8 <Reg::readInt(char*, char*, int*)+0x79>
c001a2bb:	80 f9 62             	cmp    cl,0x62
c001a2be:	75 08                	jne    c001a2c8 <Reg::readInt(char*, char*, int*)+0x79>
c001a2c0:	83 c2 02             	add    edx,0x2
c001a2c3:	be 02 00 00 00       	mov    esi,0x2
c001a2c8:	01 d7                	add    edi,edx
c001a2ca:	31 d2                	xor    edx,edx
c001a2cc:	8a 1f                	mov    bl,BYTE PTR [edi]
c001a2ce:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001a2d2:	80 fb 0d             	cmp    bl,0xd
c001a2d5:	0f 94 c3             	sete   bl
c001a2d8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a2dd:	0f 94 c1             	sete   cl
c001a2e0:	08 cb                	or     bl,cl
c001a2e2:	75 3a                	jne    c001a31e <Reg::readInt(char*, char*, int*)+0xcf>
c001a2e4:	0f af d6             	imul   edx,esi
c001a2e7:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001a2ec:	83 fe 10             	cmp    esi,0x10
c001a2ef:	75 26                	jne    c001a317 <Reg::readInt(char*, char*, int*)+0xc8>
c001a2f1:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001a2f5:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001a2f8:	89 e9                	mov    ecx,ebp
c001a2fa:	80 f9 05             	cmp    cl,0x5
c001a2fd:	77 06                	ja     c001a305 <Reg::readInt(char*, char*, int*)+0xb6>
c001a2ff:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001a303:	eb 16                	jmp    c001a31b <Reg::readInt(char*, char*, int*)+0xcc>
c001a305:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001a309:	83 e9 61             	sub    ecx,0x61
c001a30c:	80 f9 05             	cmp    cl,0x5
c001a30f:	77 06                	ja     c001a317 <Reg::readInt(char*, char*, int*)+0xc8>
c001a311:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001a315:	eb 04                	jmp    c001a31b <Reg::readInt(char*, char*, int*)+0xcc>
c001a317:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001a31b:	47                   	inc    edi
c001a31c:	eb ae                	jmp    c001a2cc <Reg::readInt(char*, char*, int*)+0x7d>
c001a31e:	84 c0                	test   al,al
c001a320:	74 02                	je     c001a324 <Reg::readInt(char*, char*, int*)+0xd5>
c001a322:	f7 da                	neg    edx
c001a324:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001a32b:	89 10                	mov    DWORD PTR [eax],edx
c001a32d:	88 d8                	mov    al,bl
c001a32f:	81 c4 ec 00 00 00    	add    esp,0xec
c001a335:	5b                   	pop    ebx
c001a336:	5e                   	pop    esi
c001a337:	5f                   	pop    edi
c001a338:	5d                   	pop    ebp
c001a339:	c3                   	ret    

c001a33a <Reg::readString(char*, char*, char*, int)>:
c001a33a:	57                   	push   edi
c001a33b:	56                   	push   esi
c001a33c:	53                   	push   ebx
c001a33d:	81 ec d4 00 00 00    	sub    esp,0xd4
c001a343:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001a34a:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001a34e:	57                   	push   edi
c001a34f:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001a356:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001a35d:	e8 b6 fe ff ff       	call   c001a218 <Reg::getLine(char*, char*, char*)>
c001a362:	83 c4 10             	add    esp,0x10
c001a365:	89 c6                	mov    esi,eax
c001a367:	84 c0                	test   al,al
c001a369:	74 44                	je     c001a3af <Reg::readString(char*, char*, char*, int)+0x75>
c001a36b:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001a372:	31 c0                	xor    eax,eax
c001a374:	4a                   	dec    edx
c001a375:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001a378:	84 c9                	test   cl,cl
c001a37a:	74 0f                	je     c001a38b <Reg::readString(char*, char*, char*, int)+0x51>
c001a37c:	39 c2                	cmp    edx,eax
c001a37e:	7e 0b                	jle    c001a38b <Reg::readString(char*, char*, char*, int)+0x51>
c001a380:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001a383:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001a388:	40                   	inc    eax
c001a389:	eb ea                	jmp    c001a375 <Reg::readString(char*, char*, char*, int)+0x3b>
c001a38b:	83 ec 0c             	sub    esp,0xc
c001a38e:	53                   	push   ebx
c001a38f:	e8 14 63 fe ff       	call   c00006a8 <strlen>
c001a394:	83 c4 10             	add    esp,0x10
c001a397:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001a39c:	75 11                	jne    c001a3af <Reg::readString(char*, char*, char*, int)+0x75>
c001a39e:	83 ec 0c             	sub    esp,0xc
c001a3a1:	53                   	push   ebx
c001a3a2:	e8 01 63 fe ff       	call   c00006a8 <strlen>
c001a3a7:	83 c4 10             	add    esp,0x10
c001a3aa:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001a3af:	81 c4 d0 00 00 00    	add    esp,0xd0
c001a3b5:	89 f0                	mov    eax,esi
c001a3b7:	5b                   	pop    ebx
c001a3b8:	5e                   	pop    esi
c001a3b9:	5f                   	pop    edi
c001a3ba:	c3                   	ret    

c001a3bb <Reg::readBool(char*, char*, bool*)>:
c001a3bb:	83 ec 20             	sub    esp,0x20
c001a3be:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a3c2:	50                   	push   eax
c001a3c3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a3c7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a3cb:	e8 7f fe ff ff       	call   c001a24f <Reg::readInt(char*, char*, int*)>
c001a3d0:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a3d5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a3d9:	0f 95 02             	setne  BYTE PTR [edx]
c001a3dc:	83 c4 2c             	add    esp,0x2c
c001a3df:	c3                   	ret    

c001a3e0 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001a3e0:	53                   	push   ebx
c001a3e1:	83 ec 1c             	sub    esp,0x1c
c001a3e4:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001a3e8:	8d 44 24 13          	lea    eax,[esp+0x13]
c001a3ec:	50                   	push   eax
c001a3ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a3f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a3f5:	e8 c1 ff ff ff       	call   c001a3bb <Reg::readBool(char*, char*, bool*)>
c001a3fa:	83 c4 10             	add    esp,0x10
c001a3fd:	84 c0                	test   al,al
c001a3ff:	74 04                	je     c001a405 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001a401:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001a405:	88 d8                	mov    al,bl
c001a407:	83 c4 18             	add    esp,0x18
c001a40a:	5b                   	pop    ebx
c001a40b:	c3                   	ret    

c001a40c <Reg::readIntWithDefault(char*, char*, int)>:
c001a40c:	53                   	push   ebx
c001a40d:	83 ec 1c             	sub    esp,0x1c
c001a410:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a414:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a418:	50                   	push   eax
c001a419:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a41d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a421:	e8 29 fe ff ff       	call   c001a24f <Reg::readInt(char*, char*, int*)>
c001a426:	83 c4 10             	add    esp,0x10
c001a429:	84 c0                	test   al,al
c001a42b:	74 04                	je     c001a431 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001a42d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001a431:	89 d8                	mov    eax,ebx
c001a433:	83 c4 18             	add    esp,0x18
c001a436:	5b                   	pop    ebx
c001a437:	c3                   	ret    

c001a438 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001a438:	57                   	push   edi
c001a439:	56                   	push   esi
c001a43a:	53                   	push   ebx
c001a43b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a43f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001a443:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001a447:	56                   	push   esi
c001a448:	53                   	push   ebx
c001a449:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a44d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a451:	e8 e4 fe ff ff       	call   c001a33a <Reg::readString(char*, char*, char*, int)>
c001a456:	83 c4 10             	add    esp,0x10
c001a459:	84 c0                	test   al,al
c001a45b:	75 1b                	jne    c001a478 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001a45d:	50                   	push   eax
c001a45e:	56                   	push   esi
c001a45f:	4e                   	dec    esi
c001a460:	6a 00                	push   0x0
c001a462:	53                   	push   ebx
c001a463:	e8 23 62 fe ff       	call   c000068b <memset>
c001a468:	83 c4 0c             	add    esp,0xc
c001a46b:	56                   	push   esi
c001a46c:	57                   	push   edi
c001a46d:	53                   	push   ebx
c001a46e:	89 fb                	mov    ebx,edi
c001a470:	e8 e0 61 fe ff       	call   c0000655 <memcpy>
c001a475:	83 c4 10             	add    esp,0x10
c001a478:	89 d8                	mov    eax,ebx
c001a47a:	5b                   	pop    ebx
c001a47b:	5e                   	pop    esi
c001a47c:	5f                   	pop    edi
c001a47d:	c3                   	ret    

c001a47e <Sys::exit(regs*)>:
c001a47e:	83 ec 18             	sub    esp,0x18
c001a481:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a485:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001a488:	e8 ce 32 00 00       	call   c001d75b <terminateTask(int)>
c001a48d:	83 c8 ff             	or     eax,0xffffffff
c001a490:	83 c4 1c             	add    esp,0x1c
c001a493:	89 c2                	mov    edx,eax
c001a495:	c3                   	ret    

c001a496 <Sys::getCwd(regs*)>:
c001a496:	83 ec 10             	sub    esp,0x10
c001a499:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a49d:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001a4a0:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001a4a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a4a8:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a4ab:	e8 5f 8b ff ff       	call   c001300f <getcwd(Process*, char*, int)>
c001a4b0:	83 c4 1c             	add    esp,0x1c
c001a4b3:	99                   	cdq    
c001a4b4:	c3                   	ret    

c001a4b5 <Sys::getPID(regs*)>:
c001a4b5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a4ba:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a4bd:	8b 00                	mov    eax,DWORD PTR [eax]
c001a4bf:	99                   	cdq    
c001a4c0:	c3                   	ret    

c001a4c1 <Sys::loadDLL(regs*)>:
c001a4c1:	56                   	push   esi
c001a4c2:	53                   	push   ebx
c001a4c3:	31 d2                	xor    edx,edx
c001a4c5:	51                   	push   ecx
c001a4c6:	b8 01 00 00 00       	mov    eax,0x1
c001a4cb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a4cf:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001a4d3:	0f 84 8c 00 00 00    	je     c001a565 <Sys::loadDLL(regs*)+0xa4>
c001a4d9:	83 ec 0c             	sub    esp,0xc
c001a4dc:	68 14 01 00 00       	push   0x114
c001a4e1:	e8 ee 4f ff ff       	call   c000f4d4 <malloc>
c001a4e6:	83 c4 0c             	add    esp,0xc
c001a4e9:	89 c3                	mov    ebx,eax
c001a4eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a4f0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a4f3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001a4f6:	53                   	push   ebx
c001a4f7:	e8 a2 87 ff ff       	call   c0012c9e <File::File(char const*, Process*)>
c001a4fc:	83 c4 10             	add    esp,0x10
c001a4ff:	31 d2                	xor    edx,edx
c001a501:	b8 02 00 00 00       	mov    eax,0x2
c001a506:	85 db                	test   ebx,ebx
c001a508:	74 5b                	je     c001a565 <Sys::loadDLL(regs*)+0xa4>
c001a50a:	83 ec 0c             	sub    esp,0xc
c001a50d:	53                   	push   ebx
c001a50e:	e8 5d 8a ff ff       	call   c0012f70 <File::exists()>
c001a513:	83 c4 10             	add    esp,0x10
c001a516:	84 c0                	test   al,al
c001a518:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a51a:	75 11                	jne    c001a52d <Sys::loadDLL(regs*)+0x6c>
c001a51c:	83 ec 0c             	sub    esp,0xc
c001a51f:	53                   	push   ebx
c001a520:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a523:	83 c4 10             	add    esp,0x10
c001a526:	b8 03 00 00 00       	mov    eax,0x3
c001a52b:	eb 36                	jmp    c001a563 <Sys::loadDLL(regs*)+0xa2>
c001a52d:	83 ec 0c             	sub    esp,0xc
c001a530:	53                   	push   ebx
c001a531:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a534:	58                   	pop    eax
c001a535:	5a                   	pop    edx
c001a536:	6a 00                	push   0x0
c001a538:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001a53b:	e8 64 21 00 00       	call   c001c6a4 <Thr::loadDLL(char const*, bool)>
c001a540:	83 c4 10             	add    esp,0x10
c001a543:	89 c1                	mov    ecx,eax
c001a545:	31 d2                	xor    edx,edx
c001a547:	b8 04 00 00 00       	mov    eax,0x4
c001a54c:	85 c9                	test   ecx,ecx
c001a54e:	74 15                	je     c001a565 <Sys::loadDLL(regs*)+0xa4>
c001a550:	53                   	push   ebx
c001a551:	53                   	push   ebx
c001a552:	ff 35 48 c9 02 c0    	push   DWORD PTR ds:0xc002c948
c001a558:	51                   	push   ecx
c001a559:	e8 55 23 00 00       	call   c001c8b3 <Thr::executeDLL(unsigned long, void*)>
c001a55e:	83 c4 10             	add    esp,0x10
c001a561:	31 c0                	xor    eax,eax
c001a563:	31 d2                	xor    edx,edx
c001a565:	59                   	pop    ecx
c001a566:	5b                   	pop    ebx
c001a567:	5e                   	pop    esi
c001a568:	c3                   	ret    

c001a569 <Sys::read(regs*)>:
c001a569:	57                   	push   edi
c001a56a:	56                   	push   esi
c001a56b:	53                   	push   ebx
c001a56c:	83 ec 10             	sub    esp,0x10
c001a56f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a573:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a576:	83 f8 02             	cmp    eax,0x2
c001a579:	77 10                	ja     c001a58b <Sys::read(regs*)+0x22>
c001a57b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a580:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a583:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001a589:	eb 0e                	jmp    c001a599 <Sys::read(regs*)+0x30>
c001a58b:	83 ec 0c             	sub    esp,0xc
c001a58e:	50                   	push   eax
c001a58f:	e8 95 70 ff ff       	call   c0011629 <getFromFileDescriptor(int)>
c001a594:	83 c4 10             	add    esp,0x10
c001a597:	89 c1                	mov    ecx,eax
c001a599:	83 c8 ff             	or     eax,0xffffffff
c001a59c:	85 c9                	test   ecx,ecx
c001a59e:	89 c2                	mov    edx,eax
c001a5a0:	74 28                	je     c001a5ca <Sys::read(regs*)+0x61>
c001a5a2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a5aa:	31 ff                	xor    edi,edi
c001a5ac:	83 ec 0c             	sub    esp,0xc
c001a5af:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a5b1:	8d 54 24 18          	lea    edx,[esp+0x18]
c001a5b5:	52                   	push   edx
c001a5b6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a5b9:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001a5bc:	57                   	push   edi
c001a5bd:	56                   	push   esi
c001a5be:	51                   	push   ecx
c001a5bf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a5c2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a5c6:	83 c4 20             	add    esp,0x20
c001a5c9:	99                   	cdq    
c001a5ca:	83 c4 10             	add    esp,0x10
c001a5cd:	5b                   	pop    ebx
c001a5ce:	5e                   	pop    esi
c001a5cf:	5f                   	pop    edi
c001a5d0:	c3                   	ret    

c001a5d1 <Sys::sbrk(regs*)>:
c001a5d1:	56                   	push   esi
c001a5d2:	53                   	push   ebx
c001a5d3:	50                   	push   eax
c001a5d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a5d9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a5dd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a5e0:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001a5e3:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001a5e9:	85 db                	test   ebx,ebx
c001a5eb:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001a5ee:	74 02                	je     c001a5f2 <Sys::sbrk(regs*)+0x21>
c001a5f0:	79 06                	jns    c001a5f8 <Sys::sbrk(regs*)+0x27>
c001a5f2:	89 f0                	mov    eax,esi
c001a5f4:	31 d2                	xor    edx,edx
c001a5f6:	eb 2a                	jmp    c001a622 <Sys::sbrk(regs*)+0x51>
c001a5f8:	83 c8 ff             	or     eax,0xffffffff
c001a5fb:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001a601:	89 c2                	mov    edx,eax
c001a603:	77 1d                	ja     c001a622 <Sys::sbrk(regs*)+0x51>
c001a605:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001a60b:	50                   	push   eax
c001a60c:	c1 ea 0c             	shr    edx,0xc
c001a60f:	68 07 04 00 00       	push   0x407
c001a614:	52                   	push   edx
c001a615:	51                   	push   ecx
c001a616:	e8 2f 79 ff ff       	call   c0011f4a <VAS::allocatePages(int, int)>
c001a61b:	89 f0                	mov    eax,esi
c001a61d:	31 d2                	xor    edx,edx
c001a61f:	83 c4 10             	add    esp,0x10
c001a622:	59                   	pop    ecx
c001a623:	5b                   	pop    ebx
c001a624:	5e                   	pop    esi
c001a625:	c3                   	ret    

c001a626 <Sys::setCwd(regs*)>:
c001a626:	83 ec 14             	sub    esp,0x14
c001a629:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a62d:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001a630:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a635:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a638:	e8 fc 89 ff ff       	call   c0013039 <setcwd(Process*, char*)>
c001a63d:	83 c4 1c             	add    esp,0x1c
c001a640:	99                   	cdq    
c001a641:	c3                   	ret    

c001a642 <Sys::write(regs*)>:
c001a642:	57                   	push   edi
c001a643:	56                   	push   esi
c001a644:	53                   	push   ebx
c001a645:	83 ec 10             	sub    esp,0x10
c001a648:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a64c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a64f:	83 f8 02             	cmp    eax,0x2
c001a652:	77 10                	ja     c001a664 <Sys::write(regs*)+0x22>
c001a654:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a659:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a65c:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001a662:	eb 0e                	jmp    c001a672 <Sys::write(regs*)+0x30>
c001a664:	83 ec 0c             	sub    esp,0xc
c001a667:	50                   	push   eax
c001a668:	e8 bc 6f ff ff       	call   c0011629 <getFromFileDescriptor(int)>
c001a66d:	83 c4 10             	add    esp,0x10
c001a670:	89 c1                	mov    ecx,eax
c001a672:	83 c8 ff             	or     eax,0xffffffff
c001a675:	85 c9                	test   ecx,ecx
c001a677:	89 c2                	mov    edx,eax
c001a679:	74 28                	je     c001a6a3 <Sys::write(regs*)+0x61>
c001a67b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a683:	31 ff                	xor    edi,edi
c001a685:	83 ec 0c             	sub    esp,0xc
c001a688:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a68a:	8d 54 24 18          	lea    edx,[esp+0x18]
c001a68e:	52                   	push   edx
c001a68f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a692:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001a695:	57                   	push   edi
c001a696:	56                   	push   esi
c001a697:	51                   	push   ecx
c001a698:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001a69b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a69f:	83 c4 20             	add    esp,0x20
c001a6a2:	99                   	cdq    
c001a6a3:	83 c4 10             	add    esp,0x10
c001a6a6:	5b                   	pop    ebx
c001a6a7:	5e                   	pop    esi
c001a6a8:	5f                   	pop    edi
c001a6a9:	c3                   	ret    

c001a6aa <Sys::yield(regs*)>:
c001a6aa:	57                   	push   edi
c001a6ab:	56                   	push   esi
c001a6ac:	53                   	push   ebx
c001a6ad:	e8 66 26 00 00       	call   c001cd18 <lockScheduler()>
c001a6b2:	e8 9d 29 00 00       	call   c001d054 <schedule()>
c001a6b7:	e8 5e 26 00 00       	call   c001cd1a <unlockScheduler()>
c001a6bc:	8b 35 d0 cf 02 c0    	mov    esi,DWORD PTR ds:0xc002cfd0
c001a6c2:	8b 3d d4 cf 02 c0    	mov    edi,DWORD PTR ds:0xc002cfd4
c001a6c8:	89 f0                	mov    eax,esi
c001a6ca:	89 fb                	mov    ebx,edi
c001a6cc:	89 f1                	mov    ecx,esi
c001a6ce:	c1 e0 07             	shl    eax,0x7
c001a6d1:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001a6d5:	25 80 30 0f 00       	and    eax,0xf3080
c001a6da:	c1 eb 17             	shr    ebx,0x17
c001a6dd:	31 c8                	xor    eax,ecx
c001a6df:	89 da                	mov    edx,ebx
c001a6e1:	5b                   	pop    ebx
c001a6e2:	5e                   	pop    esi
c001a6e3:	5f                   	pop    edi
c001a6e4:	c3                   	ret    

c001a6e5 <sysCallSeekDir(regs*)>:
c001a6e5:	31 c0                	xor    eax,eax
c001a6e7:	31 d2                	xor    edx,edx
c001a6e9:	c3                   	ret    

c001a6ea <sysCallTellDir(regs*)>:
c001a6ea:	31 c0                	xor    eax,eax
c001a6ec:	31 d2                	xor    edx,edx
c001a6ee:	c3                   	ret    

c001a6ef <sysCallVerify(regs*)>:
c001a6ef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a6f3:	31 d2                	xor    edx,edx
c001a6f5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001a6f8:	c3                   	ret    

c001a6f9 <sysCallGetArgc(regs*)>:
c001a6f9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a6fe:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a701:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001a707:	99                   	cdq    
c001a708:	c3                   	ret    

c001a709 <sysFormatDisk(regs*)>:
c001a709:	56                   	push   esi
c001a70a:	53                   	push   ebx
c001a70b:	53                   	push   ebx
c001a70c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a710:	8b 1d c8 ca 02 c0    	mov    ebx,DWORD PTR ds:0xc002cac8
c001a716:	eb 25                	jmp    c001a73d <sysFormatDisk(regs*)+0x34>
c001a718:	83 ec 0c             	sub    esp,0xc
c001a71b:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001a71e:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a720:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001a723:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001a726:	50                   	push   eax
c001a727:	ff 34 85 60 cf 02 c0 	push   DWORD PTR [eax*4-0x3ffd30a0]
c001a72e:	53                   	push   ebx
c001a72f:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001a732:	83 c4 20             	add    esp,0x20
c001a735:	83 f8 08             	cmp    eax,0x8
c001a738:	75 12                	jne    c001a74c <sysFormatDisk(regs*)+0x43>
c001a73a:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001a73d:	85 db                	test   ebx,ebx
c001a73f:	75 d7                	jne    c001a718 <sysFormatDisk(regs*)+0xf>
c001a741:	59                   	pop    ecx
c001a742:	b8 03 00 00 00       	mov    eax,0x3
c001a747:	31 d2                	xor    edx,edx
c001a749:	5b                   	pop    ebx
c001a74a:	5e                   	pop    esi
c001a74b:	c3                   	ret    
c001a74c:	85 c0                	test   eax,eax
c001a74e:	74 1b                	je     c001a76b <sysFormatDisk(regs*)+0x62>
c001a750:	83 f8 09             	cmp    eax,0x9
c001a753:	74 0b                	je     c001a760 <sysFormatDisk(regs*)+0x57>
c001a755:	59                   	pop    ecx
c001a756:	b8 02 00 00 00       	mov    eax,0x2
c001a75b:	31 d2                	xor    edx,edx
c001a75d:	5b                   	pop    ebx
c001a75e:	5e                   	pop    esi
c001a75f:	c3                   	ret    
c001a760:	59                   	pop    ecx
c001a761:	b8 01 00 00 00       	mov    eax,0x1
c001a766:	31 d2                	xor    edx,edx
c001a768:	5b                   	pop    ebx
c001a769:	5e                   	pop    esi
c001a76a:	c3                   	ret    
c001a76b:	59                   	pop    ecx
c001a76c:	31 c0                	xor    eax,eax
c001a76e:	31 d2                	xor    edx,edx
c001a770:	5b                   	pop    ebx
c001a771:	5e                   	pop    esi
c001a772:	c3                   	ret    

c001a773 <sysSetDiskVolumeLabel(regs*)>:
c001a773:	56                   	push   esi
c001a774:	53                   	push   ebx
c001a775:	53                   	push   ebx
c001a776:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a77a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001a77d:	83 f8 19             	cmp    eax,0x19
c001a780:	77 29                	ja     c001a7ab <sysSetDiskVolumeLabel(regs*)+0x38>
c001a782:	8b 0c 85 60 cf 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd30a0]
c001a789:	85 c9                	test   ecx,ecx
c001a78b:	74 1e                	je     c001a7ab <sysSetDiskVolumeLabel(regs*)+0x38>
c001a78d:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001a790:	85 d2                	test   edx,edx
c001a792:	74 17                	je     c001a7ab <sysSetDiskVolumeLabel(regs*)+0x38>
c001a794:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001a79a:	8b 33                	mov    esi,DWORD PTR [ebx]
c001a79c:	52                   	push   edx
c001a79d:	50                   	push   eax
c001a79e:	51                   	push   ecx
c001a79f:	53                   	push   ebx
c001a7a0:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001a7a3:	83 c4 10             	add    esp,0x10
c001a7a6:	99                   	cdq    
c001a7a7:	59                   	pop    ecx
c001a7a8:	5b                   	pop    ebx
c001a7a9:	5e                   	pop    esi
c001a7aa:	c3                   	ret    
c001a7ab:	59                   	pop    ecx
c001a7ac:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001a7b1:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a7b6:	5b                   	pop    ebx
c001a7b7:	5e                   	pop    esi
c001a7b8:	c3                   	ret    

c001a7b9 <sysGetDiskVolumeLabel(regs*)>:
c001a7b9:	57                   	push   edi
c001a7ba:	56                   	push   esi
c001a7bb:	53                   	push   ebx
c001a7bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a7c0:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001a7c3:	83 fa 19             	cmp    edx,0x19
c001a7c6:	77 34                	ja     c001a7fc <sysGetDiskVolumeLabel(regs*)+0x43>
c001a7c8:	8b 0c 95 60 cf 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd30a0]
c001a7cf:	85 c9                	test   ecx,ecx
c001a7d1:	74 29                	je     c001a7fc <sysGetDiskVolumeLabel(regs*)+0x43>
c001a7d3:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001a7d6:	85 db                	test   ebx,ebx
c001a7d8:	74 22                	je     c001a7fc <sysGetDiskVolumeLabel(regs*)+0x43>
c001a7da:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001a7dd:	85 c0                	test   eax,eax
c001a7df:	74 1b                	je     c001a7fc <sysGetDiskVolumeLabel(regs*)+0x43>
c001a7e1:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001a7e7:	83 ec 0c             	sub    esp,0xc
c001a7ea:	8b 3e                	mov    edi,DWORD PTR [esi]
c001a7ec:	50                   	push   eax
c001a7ed:	53                   	push   ebx
c001a7ee:	52                   	push   edx
c001a7ef:	51                   	push   ecx
c001a7f0:	56                   	push   esi
c001a7f1:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001a7f4:	83 c4 20             	add    esp,0x20
c001a7f7:	99                   	cdq    
c001a7f8:	5b                   	pop    ebx
c001a7f9:	5e                   	pop    esi
c001a7fa:	5f                   	pop    edi
c001a7fb:	c3                   	ret    
c001a7fc:	5b                   	pop    ebx
c001a7fd:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001a802:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a807:	5e                   	pop    esi
c001a808:	5f                   	pop    edi
c001a809:	c3                   	ret    

c001a80a <sysShutdown(regs*)>:
c001a80a:	83 ec 0c             	sub    esp,0xc
c001a80d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a811:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001a814:	85 c0                	test   eax,eax
c001a816:	74 18                	je     c001a830 <sysShutdown(regs*)+0x26>
c001a818:	83 f8 01             	cmp    eax,0x1
c001a81b:	74 38                	je     c001a855 <sysShutdown(regs*)+0x4b>
c001a81d:	83 f8 02             	cmp    eax,0x2
c001a820:	74 24                	je     c001a846 <sysShutdown(regs*)+0x3c>
c001a822:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a827:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a82c:	83 c4 0c             	add    esp,0xc
c001a82f:	c3                   	ret    
c001a830:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c001a835:	8b 10                	mov    edx,DWORD PTR [eax]
c001a837:	6a 00                	push   0x0
c001a839:	6a 00                	push   0x0
c001a83b:	6a 00                	push   0x0
c001a83d:	50                   	push   eax
c001a83e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001a841:	83 c4 10             	add    esp,0x10
c001a844:	eb dc                	jmp    c001a822 <sysShutdown(regs*)+0x18>
c001a846:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c001a84b:	8b 10                	mov    edx,DWORD PTR [eax]
c001a84d:	6a 00                	push   0x0
c001a84f:	6a 00                	push   0x0
c001a851:	6a 01                	push   0x1
c001a853:	eb e8                	jmp    c001a83d <sysShutdown(regs*)+0x33>
c001a855:	a1 e0 cf 02 c0       	mov    eax,ds:0xc002cfe0
c001a85a:	85 c0                	test   eax,eax
c001a85c:	74 02                	je     c001a860 <sysShutdown(regs*)+0x56>
c001a85e:	ff d0                	call   eax
c001a860:	31 c0                	xor    eax,eax
c001a862:	31 d2                	xor    edx,edx
c001a864:	83 c4 0c             	add    esp,0xc
c001a867:	c3                   	ret    

c001a868 <sysCallRealpath(regs*)>:
c001a868:	83 ec 0c             	sub    esp,0xc
c001a86b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a86f:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001a872:	85 d2                	test   edx,edx
c001a874:	74 07                	je     c001a87d <sysCallRealpath(regs*)+0x15>
c001a876:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001a879:	85 c0                	test   eax,eax
c001a87b:	75 0b                	jne    c001a888 <sysCallRealpath(regs*)+0x20>
c001a87d:	b8 01 00 00 00       	mov    eax,0x1
c001a882:	31 d2                	xor    edx,edx
c001a884:	83 c4 0c             	add    esp,0xc
c001a887:	c3                   	ret    
c001a888:	51                   	push   ecx
c001a889:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001a88f:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001a892:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001a898:	51                   	push   ecx
c001a899:	52                   	push   edx
c001a89a:	50                   	push   eax
c001a89b:	e8 54 82 ff ff       	call   c0012af4 <standardiseFiles(char*, char const*, char const*)>
c001a8a0:	83 c4 10             	add    esp,0x10
c001a8a3:	31 c0                	xor    eax,eax
c001a8a5:	31 d2                	xor    edx,edx
c001a8a7:	83 c4 0c             	add    esp,0xc
c001a8aa:	c3                   	ret    

c001a8ab <sysCallReadDir(regs*)>:
c001a8ab:	53                   	push   ebx
c001a8ac:	83 ec 18             	sub    esp,0x18
c001a8af:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a8b3:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001a8b6:	83 f8 02             	cmp    eax,0x2
c001a8b9:	76 53                	jbe    c001a90e <sysCallReadDir(regs*)+0x63>
c001a8bb:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001a8be:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001a8c4:	77 4f                	ja     c001a915 <sysCallReadDir(regs*)+0x6a>
c001a8c6:	83 ec 0c             	sub    esp,0xc
c001a8c9:	50                   	push   eax
c001a8ca:	e8 5a 6d ff ff       	call   c0011629 <getFromFileDescriptor(int)>
c001a8cf:	83 c4 10             	add    esp,0x10
c001a8d2:	85 c0                	test   eax,eax
c001a8d4:	74 50                	je     c001a926 <sysCallReadDir(regs*)+0x7b>
c001a8d6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a8de:	83 ec 0c             	sub    esp,0xc
c001a8e1:	8b 10                	mov    edx,DWORD PTR [eax]
c001a8e3:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001a8e7:	51                   	push   ecx
c001a8e8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a8eb:	6a 00                	push   0x0
c001a8ed:	68 10 01 00 00       	push   0x110
c001a8f2:	50                   	push   eax
c001a8f3:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001a8f6:	83 c4 20             	add    esp,0x20
c001a8f9:	85 c0                	test   eax,eax
c001a8fb:	74 38                	je     c001a935 <sysCallReadDir(regs*)+0x8a>
c001a8fd:	83 f8 07             	cmp    eax,0x7
c001a900:	74 0c                	je     c001a90e <sysCallReadDir(regs*)+0x63>
c001a902:	b8 02 00 00 00       	mov    eax,0x2
c001a907:	31 d2                	xor    edx,edx
c001a909:	83 c4 18             	add    esp,0x18
c001a90c:	5b                   	pop    ebx
c001a90d:	c3                   	ret    
c001a90e:	b8 01 00 00 00       	mov    eax,0x1
c001a913:	eb f2                	jmp    c001a907 <sysCallReadDir(regs*)+0x5c>
c001a915:	83 ec 08             	sub    esp,0x8
c001a918:	52                   	push   edx
c001a919:	68 6c a4 02 c0       	push   0xc002a46c
c001a91e:	e8 4c 7e ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001a923:	83 c4 10             	add    esp,0x10
c001a926:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a92b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a930:	83 c4 18             	add    esp,0x18
c001a933:	5b                   	pop    ebx
c001a934:	c3                   	ret    
c001a935:	31 c0                	xor    eax,eax
c001a937:	eb ce                	jmp    c001a907 <sysCallReadDir(regs*)+0x5c>

c001a939 <sysCallIsATTY(regs*)>:
c001a939:	83 ec 0c             	sub    esp,0xc
c001a93c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a940:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001a943:	83 f8 02             	cmp    eax,0x2
c001a946:	76 07                	jbe    c001a94f <sysCallIsATTY(regs*)+0x16>
c001a948:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001a94d:	75 26                	jne    c001a975 <sysCallIsATTY(regs*)+0x3c>
c001a94f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a954:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a957:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a95d:	85 c0                	test   eax,eax
c001a95f:	74 24                	je     c001a985 <sysCallIsATTY(regs*)+0x4c>
c001a961:	83 ec 0c             	sub    esp,0xc
c001a964:	8b 10                	mov    edx,DWORD PTR [eax]
c001a966:	50                   	push   eax
c001a967:	ff 12                	call   DWORD PTR [edx]
c001a969:	31 d2                	xor    edx,edx
c001a96b:	0f b6 c0             	movzx  eax,al
c001a96e:	83 c4 10             	add    esp,0x10
c001a971:	83 c4 0c             	add    esp,0xc
c001a974:	c3                   	ret    
c001a975:	83 ec 0c             	sub    esp,0xc
c001a978:	50                   	push   eax
c001a979:	e8 ab 6c ff ff       	call   c0011629 <getFromFileDescriptor(int)>
c001a97e:	83 c4 10             	add    esp,0x10
c001a981:	85 c0                	test   eax,eax
c001a983:	75 dc                	jne    c001a961 <sysCallIsATTY(regs*)+0x28>
c001a985:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a98a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a98f:	83 c4 0c             	add    esp,0xc
c001a992:	c3                   	ret    

c001a993 <sysCallSeek(regs*)>:
c001a993:	53                   	push   ebx
c001a994:	83 ec 08             	sub    esp,0x8
c001a997:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a99b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a99e:	83 f8 02             	cmp    eax,0x2
c001a9a1:	76 4a                	jbe    c001a9ed <sysCallSeek(regs*)+0x5a>
c001a9a3:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001a9a8:	77 32                	ja     c001a9dc <sysCallSeek(regs*)+0x49>
c001a9aa:	83 ec 0c             	sub    esp,0xc
c001a9ad:	50                   	push   eax
c001a9ae:	e8 76 6c ff ff       	call   c0011629 <getFromFileDescriptor(int)>
c001a9b3:	83 c4 0c             	add    esp,0xc
c001a9b6:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001a9b9:	31 db                	xor    ebx,ebx
c001a9bb:	53                   	push   ebx
c001a9bc:	51                   	push   ecx
c001a9bd:	50                   	push   eax
c001a9be:	e8 fd 83 ff ff       	call   c0012dc0 <File::seek(unsigned long long)>
c001a9c3:	83 c4 10             	add    esp,0x10
c001a9c6:	85 c0                	test   eax,eax
c001a9c8:	0f 95 c0             	setne  al
c001a9cb:	31 d2                	xor    edx,edx
c001a9cd:	0f b6 c0             	movzx  eax,al
c001a9d0:	f7 d8                	neg    eax
c001a9d2:	83 d2 00             	adc    edx,0x0
c001a9d5:	83 c4 08             	add    esp,0x8
c001a9d8:	f7 da                	neg    edx
c001a9da:	5b                   	pop    ebx
c001a9db:	c3                   	ret    
c001a9dc:	83 ec 08             	sub    esp,0x8
c001a9df:	50                   	push   eax
c001a9e0:	68 db a4 02 c0       	push   0xc002a4db
c001a9e5:	e8 85 7d ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001a9ea:	83 c4 10             	add    esp,0x10
c001a9ed:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a9f2:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a9f7:	83 c4 08             	add    esp,0x8
c001a9fa:	5b                   	pop    ebx
c001a9fb:	c3                   	ret    

c001a9fc <sysCallTell(regs*)>:
c001a9fc:	53                   	push   ebx
c001a9fd:	83 ec 08             	sub    esp,0x8
c001aa00:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aa04:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001aa07:	83 f8 02             	cmp    eax,0x2
c001aa0a:	76 5e                	jbe    c001aa6a <sysCallTell(regs*)+0x6e>
c001aa0c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001aa11:	77 2d                	ja     c001aa40 <sysCallTell(regs*)+0x44>
c001aa13:	83 ec 0c             	sub    esp,0xc
c001aa16:	50                   	push   eax
c001aa17:	e8 0d 6c ff ff       	call   c0011629 <getFromFileDescriptor(int)>
c001aa1c:	5a                   	pop    edx
c001aa1d:	59                   	pop    ecx
c001aa1e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001aa21:	50                   	push   eax
c001aa22:	e8 ef 83 ff ff       	call   c0012e16 <File::tell(unsigned long long*)>
c001aa27:	83 c4 10             	add    esp,0x10
c001aa2a:	85 c0                	test   eax,eax
c001aa2c:	0f 95 c0             	setne  al
c001aa2f:	31 d2                	xor    edx,edx
c001aa31:	0f b6 c0             	movzx  eax,al
c001aa34:	f7 d8                	neg    eax
c001aa36:	83 d2 00             	adc    edx,0x0
c001aa39:	83 c4 08             	add    esp,0x8
c001aa3c:	f7 da                	neg    edx
c001aa3e:	5b                   	pop    ebx
c001aa3f:	c3                   	ret    
c001aa40:	83 ec 08             	sub    esp,0x8
c001aa43:	50                   	push   eax
c001aa44:	68 f5 a4 02 c0       	push   0xc002a4f5
c001aa49:	e8 21 7d ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001aa4e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001aa51:	83 c4 10             	add    esp,0x10
c001aa54:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001aa5a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001aa61:	31 d2                	xor    edx,edx
c001aa63:	31 c0                	xor    eax,eax
c001aa65:	83 c4 08             	add    esp,0x8
c001aa68:	5b                   	pop    ebx
c001aa69:	c3                   	ret    
c001aa6a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001aa6f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001aa74:	83 c4 08             	add    esp,0x8
c001aa77:	5b                   	pop    ebx
c001aa78:	c3                   	ret    

c001aa79 <sysCallSize(regs*)>:
c001aa79:	53                   	push   ebx
c001aa7a:	83 ec 18             	sub    esp,0x18
c001aa7d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001aa81:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001aa84:	83 f8 02             	cmp    eax,0x2
c001aa87:	76 64                	jbe    c001aaed <sysCallSize(regs*)+0x74>
c001aa89:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001aa8e:	77 33                	ja     c001aac3 <sysCallSize(regs*)+0x4a>
c001aa90:	83 ec 0c             	sub    esp,0xc
c001aa93:	50                   	push   eax
c001aa94:	e8 90 6b ff ff       	call   c0011629 <getFromFileDescriptor(int)>
c001aa99:	83 c4 0c             	add    esp,0xc
c001aa9c:	8d 54 24 13          	lea    edx,[esp+0x13]
c001aaa0:	52                   	push   edx
c001aaa1:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001aaa4:	50                   	push   eax
c001aaa5:	e8 04 85 ff ff       	call   c0012fae <File::stat(unsigned long long*, bool*)>
c001aaaa:	83 c4 10             	add    esp,0x10
c001aaad:	85 c0                	test   eax,eax
c001aaaf:	0f 95 c0             	setne  al
c001aab2:	31 d2                	xor    edx,edx
c001aab4:	0f b6 c0             	movzx  eax,al
c001aab7:	f7 d8                	neg    eax
c001aab9:	83 d2 00             	adc    edx,0x0
c001aabc:	83 c4 18             	add    esp,0x18
c001aabf:	f7 da                	neg    edx
c001aac1:	5b                   	pop    ebx
c001aac2:	c3                   	ret    
c001aac3:	83 ec 08             	sub    esp,0x8
c001aac6:	50                   	push   eax
c001aac7:	68 0f a5 02 c0       	push   0xc002a50f
c001aacc:	e8 9e 7c ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001aad1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001aad4:	83 c4 10             	add    esp,0x10
c001aad7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001aadd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001aae4:	31 d2                	xor    edx,edx
c001aae6:	31 c0                	xor    eax,eax
c001aae8:	83 c4 18             	add    esp,0x18
c001aaeb:	5b                   	pop    ebx
c001aaec:	c3                   	ret    
c001aaed:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001aaf2:	ba ff ff ff ff       	mov    edx,0xffffffff
c001aaf7:	83 c4 18             	add    esp,0x18
c001aafa:	5b                   	pop    ebx
c001aafb:	c3                   	ret    

c001aafc <sysCallSizeFromFilename(regs*)>:
c001aafc:	57                   	push   edi
c001aafd:	56                   	push   esi
c001aafe:	53                   	push   ebx
c001aaff:	83 ec 20             	sub    esp,0x20
c001ab02:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ab06:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001ab09:	83 fb 02             	cmp    ebx,0x2
c001ab0c:	0f 86 99 00 00 00    	jbe    c001abab <sysCallSizeFromFilename(regs*)+0xaf>
c001ab12:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001ab18:	77 65                	ja     c001ab7f <sysCallSizeFromFilename(regs*)+0x83>
c001ab1a:	83 ec 0c             	sub    esp,0xc
c001ab1d:	68 14 01 00 00       	push   0x114
c001ab22:	e8 ad 49 ff ff       	call   c000f4d4 <malloc>
c001ab27:	83 c4 0c             	add    esp,0xc
c001ab2a:	89 c6                	mov    esi,eax
c001ab2c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ab31:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ab34:	53                   	push   ebx
c001ab35:	56                   	push   esi
c001ab36:	e8 63 81 ff ff       	call   c0012c9e <File::File(char const*, Process*)>
c001ab3b:	83 c4 0c             	add    esp,0xc
c001ab3e:	8d 44 24 23          	lea    eax,[esp+0x23]
c001ab42:	50                   	push   eax
c001ab43:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001ab46:	56                   	push   esi
c001ab47:	e8 62 84 ff ff       	call   c0012fae <File::stat(unsigned long long*, bool*)>
c001ab4c:	83 c4 10             	add    esp,0x10
c001ab4f:	85 f6                	test   esi,esi
c001ab51:	74 14                	je     c001ab67 <sysCallSizeFromFilename(regs*)+0x6b>
c001ab53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ab57:	8b 16                	mov    edx,DWORD PTR [esi]
c001ab59:	83 ec 0c             	sub    esp,0xc
c001ab5c:	56                   	push   esi
c001ab5d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001ab60:	83 c4 10             	add    esp,0x10
c001ab63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ab67:	85 c0                	test   eax,eax
c001ab69:	0f 95 c0             	setne  al
c001ab6c:	31 d2                	xor    edx,edx
c001ab6e:	0f b6 c0             	movzx  eax,al
c001ab71:	f7 d8                	neg    eax
c001ab73:	83 d2 00             	adc    edx,0x0
c001ab76:	83 c4 20             	add    esp,0x20
c001ab79:	f7 da                	neg    edx
c001ab7b:	5b                   	pop    ebx
c001ab7c:	5e                   	pop    esi
c001ab7d:	5f                   	pop    edi
c001ab7e:	c3                   	ret    
c001ab7f:	83 ec 08             	sub    esp,0x8
c001ab82:	53                   	push   ebx
c001ab83:	68 0f a5 02 c0       	push   0xc002a50f
c001ab88:	e8 e2 7b ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001ab8d:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001ab90:	83 c4 10             	add    esp,0x10
c001ab93:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ab99:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001aba0:	31 d2                	xor    edx,edx
c001aba2:	83 c4 20             	add    esp,0x20
c001aba5:	31 c0                	xor    eax,eax
c001aba7:	5b                   	pop    ebx
c001aba8:	5e                   	pop    esi
c001aba9:	5f                   	pop    edi
c001abaa:	c3                   	ret    
c001abab:	83 c4 20             	add    esp,0x20
c001abae:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001abb3:	5b                   	pop    ebx
c001abb4:	ba ff ff ff ff       	mov    edx,0xffffffff
c001abb9:	5e                   	pop    esi
c001abba:	5f                   	pop    edi
c001abbb:	c3                   	ret    

c001abbc <sysCallClose(regs*)>:
c001abbc:	53                   	push   ebx
c001abbd:	83 ec 08             	sub    esp,0x8
c001abc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abc4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001abc7:	83 f8 02             	cmp    eax,0x2
c001abca:	76 50                	jbe    c001ac1c <sysCallClose(regs*)+0x60>
c001abcc:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001abd1:	74 58                	je     c001ac2b <sysCallClose(regs*)+0x6f>
c001abd3:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001abd8:	74 60                	je     c001ac3a <sysCallClose(regs*)+0x7e>
c001abda:	77 2f                	ja     c001ac0b <sysCallClose(regs*)+0x4f>
c001abdc:	83 ec 0c             	sub    esp,0xc
c001abdf:	50                   	push   eax
c001abe0:	e8 44 6a ff ff       	call   c0011629 <getFromFileDescriptor(int)>
c001abe5:	89 c3                	mov    ebx,eax
c001abe7:	89 04 24             	mov    DWORD PTR [esp],eax
c001abea:	e8 71 81 ff ff       	call   c0012d60 <File::close()>
c001abef:	83 c4 10             	add    esp,0x10
c001abf2:	85 db                	test   ebx,ebx
c001abf4:	74 0c                	je     c001ac02 <sysCallClose(regs*)+0x46>
c001abf6:	83 ec 0c             	sub    esp,0xc
c001abf9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001abfb:	53                   	push   ebx
c001abfc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001abff:	83 c4 10             	add    esp,0x10
c001ac02:	31 c0                	xor    eax,eax
c001ac04:	31 d2                	xor    edx,edx
c001ac06:	83 c4 08             	add    esp,0x8
c001ac09:	5b                   	pop    ebx
c001ac0a:	c3                   	ret    
c001ac0b:	83 ec 08             	sub    esp,0x8
c001ac0e:	50                   	push   eax
c001ac0f:	68 90 a4 02 c0       	push   0xc002a490
c001ac14:	e8 56 7b ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001ac19:	83 c4 10             	add    esp,0x10
c001ac1c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ac21:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ac26:	83 c4 08             	add    esp,0x8
c001ac29:	5b                   	pop    ebx
c001ac2a:	c3                   	ret    
c001ac2b:	83 ec 0c             	sub    esp,0xc
c001ac2e:	68 2a a5 02 c0       	push   0xc002a52a
c001ac33:	e8 37 7b ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001ac38:	eb c5                	jmp    c001abff <sysCallClose(regs*)+0x43>
c001ac3a:	83 ec 0c             	sub    esp,0xc
c001ac3d:	68 38 a5 02 c0       	push   0xc002a538
c001ac42:	eb ef                	jmp    c001ac33 <sysCallClose(regs*)+0x77>

c001ac44 <sysCallOpenDir(regs*)>:
c001ac44:	56                   	push   esi
c001ac45:	53                   	push   ebx
c001ac46:	53                   	push   ebx
c001ac47:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ac4b:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001ac4e:	85 f6                	test   esi,esi
c001ac50:	74 59                	je     c001acab <sysCallOpenDir(regs*)+0x67>
c001ac52:	83 ec 0c             	sub    esp,0xc
c001ac55:	68 14 01 00 00       	push   0x114
c001ac5a:	e8 75 48 ff ff       	call   c000f4d4 <malloc>
c001ac5f:	83 c4 0c             	add    esp,0xc
c001ac62:	89 c6                	mov    esi,eax
c001ac64:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ac69:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ac6c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ac6f:	56                   	push   esi
c001ac70:	e8 ff 84 ff ff       	call   c0013174 <Directory::Directory(char const*, Process*)>
c001ac75:	83 c4 10             	add    esp,0x10
c001ac78:	85 f6                	test   esi,esi
c001ac7a:	74 2f                	je     c001acab <sysCallOpenDir(regs*)+0x67>
c001ac7c:	83 ec 0c             	sub    esp,0xc
c001ac7f:	56                   	push   esi
c001ac80:	e8 53 85 ff ff       	call   c00131d8 <Directory::open()>
c001ac85:	83 c4 10             	add    esp,0x10
c001ac88:	85 c0                	test   eax,eax
c001ac8a:	75 1f                	jne    c001acab <sysCallOpenDir(regs*)+0x67>
c001ac8c:	83 ec 0c             	sub    esp,0xc
c001ac8f:	56                   	push   esi
c001ac90:	e8 9f 66 ff ff       	call   c0011334 <UnixFile::getFileDescriptor()>
c001ac95:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001ac98:	83 c4 10             	add    esp,0x10
c001ac9b:	89 02                	mov    DWORD PTR [edx],eax
c001ac9d:	c1 f8 1f             	sar    eax,0x1f
c001aca0:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001aca3:	31 c0                	xor    eax,eax
c001aca5:	59                   	pop    ecx
c001aca6:	31 d2                	xor    edx,edx
c001aca8:	5b                   	pop    ebx
c001aca9:	5e                   	pop    esi
c001acaa:	c3                   	ret    
c001acab:	59                   	pop    ecx
c001acac:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001acb1:	ba ff ff ff ff       	mov    edx,0xffffffff
c001acb6:	5b                   	pop    ebx
c001acb7:	5e                   	pop    esi
c001acb8:	c3                   	ret    

c001acb9 <sysCallCloseDir(regs*)>:
c001acb9:	53                   	push   ebx
c001acba:	83 ec 08             	sub    esp,0x8
c001acbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acc1:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001acc4:	83 f8 02             	cmp    eax,0x2
c001acc7:	76 47                	jbe    c001ad10 <sysCallCloseDir(regs*)+0x57>
c001acc9:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001acce:	77 2f                	ja     c001acff <sysCallCloseDir(regs*)+0x46>
c001acd0:	83 ec 0c             	sub    esp,0xc
c001acd3:	50                   	push   eax
c001acd4:	e8 50 69 ff ff       	call   c0011629 <getFromFileDescriptor(int)>
c001acd9:	89 c3                	mov    ebx,eax
c001acdb:	89 04 24             	mov    DWORD PTR [esp],eax
c001acde:	e8 51 85 ff ff       	call   c0013234 <Directory::close()>
c001ace3:	83 c4 10             	add    esp,0x10
c001ace6:	85 db                	test   ebx,ebx
c001ace8:	74 0c                	je     c001acf6 <sysCallCloseDir(regs*)+0x3d>
c001acea:	83 ec 0c             	sub    esp,0xc
c001aced:	8b 03                	mov    eax,DWORD PTR [ebx]
c001acef:	53                   	push   ebx
c001acf0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001acf3:	83 c4 10             	add    esp,0x10
c001acf6:	31 c0                	xor    eax,eax
c001acf8:	31 d2                	xor    edx,edx
c001acfa:	83 c4 08             	add    esp,0x8
c001acfd:	5b                   	pop    ebx
c001acfe:	c3                   	ret    
c001acff:	83 ec 08             	sub    esp,0x8
c001ad02:	50                   	push   eax
c001ad03:	68 b8 a4 02 c0       	push   0xc002a4b8
c001ad08:	e8 62 7a ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001ad0d:	83 c4 10             	add    esp,0x10
c001ad10:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ad15:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ad1a:	83 c4 08             	add    esp,0x8
c001ad1d:	5b                   	pop    ebx
c001ad1e:	c3                   	ret    

c001ad1f <sysCallMakeDir(regs*)>:
c001ad1f:	56                   	push   esi
c001ad20:	53                   	push   ebx
c001ad21:	83 ec 10             	sub    esp,0x10
c001ad24:	68 14 01 00 00       	push   0x114
c001ad29:	e8 a6 47 ff ff       	call   c000f4d4 <malloc>
c001ad2e:	83 c4 0c             	add    esp,0xc
c001ad31:	89 c3                	mov    ebx,eax
c001ad33:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ad38:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ad3b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ad3f:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001ad42:	53                   	push   ebx
c001ad43:	e8 2c 84 ff ff       	call   c0013174 <Directory::Directory(char const*, Process*)>
c001ad48:	83 c4 10             	add    esp,0x10
c001ad4b:	85 db                	test   ebx,ebx
c001ad4d:	74 32                	je     c001ad81 <sysCallMakeDir(regs*)+0x62>
c001ad4f:	83 ec 0c             	sub    esp,0xc
c001ad52:	53                   	push   ebx
c001ad53:	e8 60 86 ff ff       	call   c00133b8 <Directory::create()>
c001ad58:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ad5b:	89 c6                	mov    esi,eax
c001ad5d:	e8 d2 84 ff ff       	call   c0013234 <Directory::close()>
c001ad62:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ad64:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ad67:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ad6a:	83 c4 10             	add    esp,0x10
c001ad6d:	31 c0                	xor    eax,eax
c001ad6f:	59                   	pop    ecx
c001ad70:	85 f6                	test   esi,esi
c001ad72:	5b                   	pop    ebx
c001ad73:	0f 95 c0             	setne  al
c001ad76:	5e                   	pop    esi
c001ad77:	31 d2                	xor    edx,edx
c001ad79:	f7 d8                	neg    eax
c001ad7b:	83 d2 00             	adc    edx,0x0
c001ad7e:	f7 da                	neg    edx
c001ad80:	c3                   	ret    
c001ad81:	59                   	pop    ecx
c001ad82:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ad87:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ad8c:	5b                   	pop    ebx
c001ad8d:	5e                   	pop    esi
c001ad8e:	c3                   	ret    

c001ad8f <sysCallWait(regs*)>:
c001ad8f:	83 ec 10             	sub    esp,0x10
c001ad92:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ad96:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001ad99:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001ad9c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001ad9f:	e8 2b 24 00 00       	call   c001d1cf <waitTask(int, int*, int)>
c001ada4:	83 c4 1c             	add    esp,0x1c
c001ada7:	99                   	cdq    
c001ada8:	c3                   	ret    

c001ada9 <sysCallNotImpl(regs*)>:
c001ada9:	83 ec 18             	sub    esp,0x18
c001adac:	68 46 a5 02 c0       	push   0xc002a546
c001adb1:	e8 d3 ea ff ff       	call   c0019889 <Krnl::panic(char const*)>
c001adb6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001adbb:	ba ff ff ff ff       	mov    edx,0xffffffff
c001adc0:	83 c4 1c             	add    esp,0x1c
c001adc3:	c3                   	ret    

c001adc4 <sysPanic(regs*)>:
c001adc4:	83 ec 18             	sub    esp,0x18
c001adc7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001adcb:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001adce:	e8 b6 ea ff ff       	call   c0019889 <Krnl::panic(char const*)>
c001add3:	c7 04 24 60 a5 02 c0 	mov    DWORD PTR [esp],0xc002a560
c001adda:	e8 aa ea ff ff       	call   c0019889 <Krnl::panic(char const*)>
c001addf:	b8 01 00 00 00       	mov    eax,0x1
c001ade4:	31 d2                	xor    edx,edx
c001ade6:	83 c4 1c             	add    esp,0x1c
c001ade9:	c3                   	ret    

c001adea <sysCallRmdir(regs*)>:
c001adea:	56                   	push   esi
c001adeb:	53                   	push   ebx
c001adec:	83 ec 20             	sub    esp,0x20
c001adef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001adf3:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001adf6:	68 14 01 00 00       	push   0x114
c001adfb:	e8 d4 46 ff ff       	call   c000f4d4 <malloc>
c001ae00:	83 c4 0c             	add    esp,0xc
c001ae03:	89 c3                	mov    ebx,eax
c001ae05:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ae0a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ae0d:	56                   	push   esi
c001ae0e:	53                   	push   ebx
c001ae0f:	e8 8a 7e ff ff       	call   c0012c9e <File::File(char const*, Process*)>
c001ae14:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ae17:	e8 5e 80 ff ff       	call   c0012e7a <File::unlink()>
c001ae1c:	83 c4 10             	add    esp,0x10
c001ae1f:	85 db                	test   ebx,ebx
c001ae21:	74 14                	je     c001ae37 <sysCallRmdir(regs*)+0x4d>
c001ae23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ae27:	8b 13                	mov    edx,DWORD PTR [ebx]
c001ae29:	83 ec 0c             	sub    esp,0xc
c001ae2c:	53                   	push   ebx
c001ae2d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001ae30:	83 c4 10             	add    esp,0x10
c001ae33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae37:	85 c0                	test   eax,eax
c001ae39:	0f 95 c0             	setne  al
c001ae3c:	31 d2                	xor    edx,edx
c001ae3e:	0f b6 c0             	movzx  eax,al
c001ae41:	f7 d8                	neg    eax
c001ae43:	83 d2 00             	adc    edx,0x0
c001ae46:	83 c4 14             	add    esp,0x14
c001ae49:	f7 da                	neg    edx
c001ae4b:	5b                   	pop    ebx
c001ae4c:	5e                   	pop    esi
c001ae4d:	c3                   	ret    

c001ae4e <sysCallUnlink(regs*)>:
c001ae4e:	56                   	push   esi
c001ae4f:	53                   	push   ebx
c001ae50:	83 ec 20             	sub    esp,0x20
c001ae53:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ae57:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001ae5a:	68 14 01 00 00       	push   0x114
c001ae5f:	e8 70 46 ff ff       	call   c000f4d4 <malloc>
c001ae64:	83 c4 0c             	add    esp,0xc
c001ae67:	89 c3                	mov    ebx,eax
c001ae69:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ae6e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ae71:	56                   	push   esi
c001ae72:	53                   	push   ebx
c001ae73:	e8 26 7e ff ff       	call   c0012c9e <File::File(char const*, Process*)>
c001ae78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ae7b:	e8 fa 7f ff ff       	call   c0012e7a <File::unlink()>
c001ae80:	83 c4 10             	add    esp,0x10
c001ae83:	85 db                	test   ebx,ebx
c001ae85:	74 14                	je     c001ae9b <sysCallUnlink(regs*)+0x4d>
c001ae87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ae8b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001ae8d:	83 ec 0c             	sub    esp,0xc
c001ae90:	53                   	push   ebx
c001ae91:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001ae94:	83 c4 10             	add    esp,0x10
c001ae97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae9b:	85 c0                	test   eax,eax
c001ae9d:	0f 95 c0             	setne  al
c001aea0:	31 d2                	xor    edx,edx
c001aea2:	0f b6 c0             	movzx  eax,al
c001aea5:	f7 d8                	neg    eax
c001aea7:	83 d2 00             	adc    edx,0x0
c001aeaa:	83 c4 14             	add    esp,0x14
c001aead:	f7 da                	neg    edx
c001aeaf:	5b                   	pop    ebx
c001aeb0:	5e                   	pop    esi
c001aeb1:	c3                   	ret    

c001aeb2 <sysCallGetArgv(regs*)>:
c001aeb2:	83 ec 0c             	sub    esp,0xc
c001aeb5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001aeb9:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001aebc:	85 c0                	test   eax,eax
c001aebe:	78 2b                	js     c001aeeb <sysCallGetArgv(regs*)+0x39>
c001aec0:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001aec6:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001aec9:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001aecf:	7d 1a                	jge    c001aeeb <sysCallGetArgv(regs*)+0x39>
c001aed1:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001aed8:	85 c0                	test   eax,eax
c001aeda:	74 17                	je     c001aef3 <sysCallGetArgv(regs*)+0x41>
c001aedc:	83 ec 08             	sub    esp,0x8
c001aedf:	50                   	push   eax
c001aee0:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001aee3:	e8 42 58 fe ff       	call   c000072a <strcpy>
c001aee8:	83 c4 10             	add    esp,0x10
c001aeeb:	31 c0                	xor    eax,eax
c001aeed:	31 d2                	xor    edx,edx
c001aeef:	83 c4 0c             	add    esp,0xc
c001aef2:	c3                   	ret    
c001aef3:	b8 01 00 00 00       	mov    eax,0x1
c001aef8:	31 d2                	xor    edx,edx
c001aefa:	83 c4 0c             	add    esp,0xc
c001aefd:	c3                   	ret    

c001aefe <sysCallTTYName(regs*)>:
c001aefe:	56                   	push   esi
c001aeff:	53                   	push   ebx
c001af00:	53                   	push   ebx
c001af01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001af05:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001af08:	85 c0                	test   eax,eax
c001af0a:	74 5f                	je     c001af6b <sysCallTTYName(regs*)+0x6d>
c001af0c:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001af0f:	83 f8 02             	cmp    eax,0x2
c001af12:	77 3e                	ja     c001af52 <sysCallTTYName(regs*)+0x54>
c001af14:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001af19:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001af1c:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001af22:	85 db                	test   ebx,ebx
c001af24:	74 45                	je     c001af6b <sysCallTTYName(regs*)+0x6d>
c001af26:	83 ec 0c             	sub    esp,0xc
c001af29:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af2b:	53                   	push   ebx
c001af2c:	ff 10                	call   DWORD PTR [eax]
c001af2e:	83 c4 10             	add    esp,0x10
c001af31:	84 c0                	test   al,al
c001af33:	74 41                	je     c001af76 <sysCallTTYName(regs*)+0x78>
c001af35:	83 ec 08             	sub    esp,0x8
c001af38:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001af3e:	53                   	push   ebx
c001af3f:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001af42:	e8 e3 57 fe ff       	call   c000072a <strcpy>
c001af47:	83 c4 10             	add    esp,0x10
c001af4a:	31 c0                	xor    eax,eax
c001af4c:	59                   	pop    ecx
c001af4d:	31 d2                	xor    edx,edx
c001af4f:	5b                   	pop    ebx
c001af50:	5e                   	pop    esi
c001af51:	c3                   	ret    
c001af52:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001af57:	74 bb                	je     c001af14 <sysCallTTYName(regs*)+0x16>
c001af59:	83 ec 0c             	sub    esp,0xc
c001af5c:	50                   	push   eax
c001af5d:	e8 c7 66 ff ff       	call   c0011629 <getFromFileDescriptor(int)>
c001af62:	83 c4 10             	add    esp,0x10
c001af65:	89 c3                	mov    ebx,eax
c001af67:	85 db                	test   ebx,ebx
c001af69:	75 bb                	jne    c001af26 <sysCallTTYName(regs*)+0x28>
c001af6b:	59                   	pop    ecx
c001af6c:	b8 01 00 00 00       	mov    eax,0x1
c001af71:	31 d2                	xor    edx,edx
c001af73:	5b                   	pop    ebx
c001af74:	5e                   	pop    esi
c001af75:	c3                   	ret    
c001af76:	59                   	pop    ecx
c001af77:	b8 02 00 00 00       	mov    eax,0x2
c001af7c:	31 d2                	xor    edx,edx
c001af7e:	5b                   	pop    ebx
c001af7f:	5e                   	pop    esi
c001af80:	c3                   	ret    

c001af81 <sysCallUSleep(regs*)>:
c001af81:	83 ec 14             	sub    esp,0x14
c001af84:	b8 e8 03 00 00       	mov    eax,0x3e8
c001af89:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001af8d:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001af94:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001af97:	01 ca                	add    edx,ecx
c001af99:	52                   	push   edx
c001af9a:	50                   	push   eax
c001af9b:	e8 c8 22 00 00       	call   c001d268 <nanoSleep(unsigned long long)>
c001afa0:	31 c0                	xor    eax,eax
c001afa2:	31 d2                	xor    edx,edx
c001afa4:	83 c4 1c             	add    esp,0x1c
c001afa7:	c3                   	ret    

c001afa8 <sysCallSpawn(regs*)>:
c001afa8:	56                   	push   esi
c001afa9:	53                   	push   ebx
c001afaa:	53                   	push   ebx
c001afab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001afaf:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001afb2:	85 f6                	test   esi,esi
c001afb4:	75 08                	jne    c001afbe <sysCallSpawn(regs*)+0x16>
c001afb6:	59                   	pop    ecx
c001afb7:	31 c0                	xor    eax,eax
c001afb9:	31 d2                	xor    edx,edx
c001afbb:	5b                   	pop    ebx
c001afbc:	5e                   	pop    esi
c001afbd:	c3                   	ret    
c001afbe:	83 ec 0c             	sub    esp,0xc
c001afc1:	68 3f 07 00 00       	push   0x73f
c001afc6:	e8 09 45 ff ff       	call   c000f4d4 <malloc>
c001afcb:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001afce:	89 c6                	mov    esi,eax
c001afd0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001afd5:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001afd8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001afdb:	56                   	push   esi
c001afdc:	e8 87 19 00 00       	call   c001c968 <Process::Process(char const*, Process*, char**)>
c001afe1:	83 c4 20             	add    esp,0x20
c001afe4:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001afeb:	75 c9                	jne    c001afb6 <sysCallSpawn(regs*)+0xe>
c001afed:	83 ec 0c             	sub    esp,0xc
c001aff0:	56                   	push   esi
c001aff1:	e8 38 1f 00 00       	call   c001cf2e <Process::createUserThread()>
c001aff6:	8b 06                	mov    eax,DWORD PTR [esi]
c001aff8:	83 c4 10             	add    esp,0x10
c001affb:	99                   	cdq    
c001affc:	59                   	pop    ecx
c001affd:	5b                   	pop    ebx
c001affe:	5e                   	pop    esi
c001afff:	c3                   	ret    

c001b000 <sysCallGetEnv(regs*)>:
c001b000:	57                   	push   edi
c001b001:	56                   	push   esi
c001b002:	53                   	push   ebx
c001b003:	83 ec 1c             	sub    esp,0x1c
c001b006:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b00a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b00f:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001b012:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001b015:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b018:	e8 88 e7 ff ff       	call   c00197a5 <Krnl::getProcessTotalEnvCount(Process*)>
c001b01d:	83 c4 10             	add    esp,0x10
c001b020:	39 c7                	cmp    edi,eax
c001b022:	7c 14                	jl     c001b038 <sysCallGetEnv(regs*)+0x38>
c001b024:	85 f6                	test   esi,esi
c001b026:	75 0b                	jne    c001b033 <sysCallGetEnv(regs*)+0x33>
c001b028:	83 c4 10             	add    esp,0x10
c001b02b:	31 c0                	xor    eax,eax
c001b02d:	5b                   	pop    ebx
c001b02e:	31 d2                	xor    edx,edx
c001b030:	5e                   	pop    esi
c001b031:	5f                   	pop    edi
c001b032:	c3                   	ret    
c001b033:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b036:	eb f0                	jmp    c001b028 <sysCallGetEnv(regs*)+0x28>
c001b038:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b03c:	52                   	push   edx
c001b03d:	57                   	push   edi
c001b03e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b044:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001b047:	50                   	push   eax
c001b048:	e8 78 e7 ff ff       	call   c00197c5 <Krnl::getProcessEnvPair(Process*, int)>
c001b04d:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b050:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b054:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b058:	83 c4 0c             	add    esp,0xc
c001b05b:	85 c9                	test   ecx,ecx
c001b05d:	75 23                	jne    c001b082 <sysCallGetEnv(regs*)+0x82>
c001b05f:	83 ec 0c             	sub    esp,0xc
c001b062:	50                   	push   eax
c001b063:	e8 40 56 fe ff       	call   c00006a8 <strlen>
c001b068:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b06b:	89 c3                	mov    ebx,eax
c001b06d:	e8 36 56 fe ff       	call   c00006a8 <strlen>
c001b072:	83 c4 10             	add    esp,0x10
c001b075:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001b079:	83 c4 10             	add    esp,0x10
c001b07c:	31 d2                	xor    edx,edx
c001b07e:	5b                   	pop    ebx
c001b07f:	5e                   	pop    esi
c001b080:	5f                   	pop    edi
c001b081:	c3                   	ret    
c001b082:	83 ec 08             	sub    esp,0x8
c001b085:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b088:	50                   	push   eax
c001b089:	56                   	push   esi
c001b08a:	e8 9b 56 fe ff       	call   c000072a <strcpy>
c001b08f:	58                   	pop    eax
c001b090:	5a                   	pop    edx
c001b091:	68 6f a5 02 c0       	push   0xc002a56f
c001b096:	56                   	push   esi
c001b097:	e8 45 57 fe ff       	call   c00007e1 <strcat>
c001b09c:	59                   	pop    ecx
c001b09d:	5b                   	pop    ebx
c001b09e:	57                   	push   edi
c001b09f:	56                   	push   esi
c001b0a0:	e8 3c 57 fe ff       	call   c00007e1 <strcat>
c001b0a5:	83 c4 10             	add    esp,0x10
c001b0a8:	e9 7b ff ff ff       	jmp    c001b028 <sysCallGetEnv(regs*)+0x28>

c001b0ad <sysAppSettings(regs*)>:
c001b0ad:	53                   	push   ebx
c001b0ae:	83 ec 08             	sub    esp,0x8
c001b0b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0b5:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b0b8:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001b0be:	25 e0 1f 00 00       	and    eax,0x1fe0
c001b0c3:	66 3d c0 09          	cmp    ax,0x9c0
c001b0c7:	75 2f                	jne    c001b0f8 <sysAppSettings(regs*)+0x4b>
c001b0c9:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001b0cf:	83 e0 1f             	and    eax,0x1f
c001b0d2:	3c 01                	cmp    al,0x1
c001b0d4:	74 2e                	je     c001b104 <sysAppSettings(regs*)+0x57>
c001b0d6:	3c 07                	cmp    al,0x7
c001b0d8:	0f 84 bd 00 00 00    	je     c001b19b <sysAppSettings(regs*)+0xee>
c001b0de:	84 c0                	test   al,al
c001b0e0:	0f 84 dc 00 00 00    	je     c001b1c2 <sysAppSettings(regs*)+0x115>
c001b0e6:	3c 08                	cmp    al,0x8
c001b0e8:	74 6d                	je     c001b157 <sysAppSettings(regs*)+0xaa>
c001b0ea:	0f b6 c0             	movzx  eax,al
c001b0ed:	83 c4 08             	add    esp,0x8
c001b0f0:	05 e8 03 00 00       	add    eax,0x3e8
c001b0f5:	5b                   	pop    ebx
c001b0f6:	99                   	cdq    
c001b0f7:	c3                   	ret    
c001b0f8:	b8 01 00 00 00       	mov    eax,0x1
c001b0fd:	31 d2                	xor    edx,edx
c001b0ff:	83 c4 08             	add    esp,0x8
c001b102:	5b                   	pop    ebx
c001b103:	c3                   	ret    
c001b104:	51                   	push   ecx
c001b105:	68 00 01 00 00       	push   0x100
c001b10a:	6a 00                	push   0x0
c001b10c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b111:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b114:	83 c0 0c             	add    eax,0xc
c001b117:	50                   	push   eax
c001b118:	e8 6e 55 fe ff       	call   c000068b <memset>
c001b11d:	83 c4 0c             	add    esp,0xc
c001b120:	68 ff 00 00 00       	push   0xff
c001b125:	53                   	push   ebx
c001b126:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b12b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b12e:	83 c0 0c             	add    eax,0xc
c001b131:	50                   	push   eax
c001b132:	e8 1e 55 fe ff       	call   c0000655 <memcpy>
c001b137:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b13c:	5b                   	pop    ebx
c001b13d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b140:	5a                   	pop    edx
c001b141:	8d 50 0c             	lea    edx,[eax+0xc]
c001b144:	52                   	push   edx
c001b145:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b14b:	e8 54 56 ff ff       	call   c00107a4 <VgaText::setTitle(char*)>
c001b150:	83 c4 10             	add    esp,0x10
c001b153:	31 c0                	xor    eax,eax
c001b155:	eb a6                	jmp    c001b0fd <sysAppSettings(regs*)+0x50>
c001b157:	83 ec 08             	sub    esp,0x8
c001b15a:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001b160:	83 e0 0f             	and    eax,0xf
c001b163:	50                   	push   eax
c001b164:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b169:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b16c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b172:	e8 1d 56 ff ff       	call   c0010794 <VgaText::setTitleColour(VgaColour)>
c001b177:	58                   	pop    eax
c001b178:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001b17e:	5a                   	pop    edx
c001b17f:	c1 e8 04             	shr    eax,0x4
c001b182:	83 e0 0f             	and    eax,0xf
c001b185:	50                   	push   eax
c001b186:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b18b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b18e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b194:	e8 eb 55 ff ff       	call   c0010784 <VgaText::setTitleTextColour(VgaColour)>
c001b199:	eb b5                	jmp    c001b150 <sysAppSettings(regs*)+0xa3>
c001b19b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b1a0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b1a3:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001b1a9:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001b1af:	c0 e8 06             	shr    al,0x6
c001b1b2:	83 e0 01             	and    eax,0x1
c001b1b5:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001b1bb:	31 c0                	xor    eax,eax
c001b1bd:	e9 3b ff ff ff       	jmp    c001b0fd <sysAppSettings(regs*)+0x50>
c001b1c2:	b8 02 00 00 00       	mov    eax,0x2
c001b1c7:	e9 31 ff ff ff       	jmp    c001b0fd <sysAppSettings(regs*)+0x50>

c001b1cc <sysSetFatAttrib(regs*)>:
c001b1cc:	57                   	push   edi
c001b1cd:	56                   	push   esi
c001b1ce:	53                   	push   ebx
c001b1cf:	83 ec 1c             	sub    esp,0x1c
c001b1d2:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001b1d6:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001b1d9:	68 14 01 00 00       	push   0x114
c001b1de:	e8 f1 42 ff ff       	call   c000f4d4 <malloc>
c001b1e3:	83 c4 0c             	add    esp,0xc
c001b1e6:	89 c3                	mov    ebx,eax
c001b1e8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b1ed:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b1f0:	57                   	push   edi
c001b1f1:	53                   	push   ebx
c001b1f2:	e8 a7 7a ff ff       	call   c0012c9e <File::File(char const*, Process*)>
c001b1f7:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001b1fa:	83 c4 0c             	add    esp,0xc
c001b1fd:	0f b6 d4             	movzx  edx,ah
c001b200:	0f b6 c0             	movzx  eax,al
c001b203:	52                   	push   edx
c001b204:	50                   	push   eax
c001b205:	53                   	push   ebx
c001b206:	e8 09 7d ff ff       	call   c0012f14 <File::chfatattr(unsigned char, unsigned char)>
c001b20b:	83 c4 10             	add    esp,0x10
c001b20e:	85 db                	test   ebx,ebx
c001b210:	74 14                	je     c001b226 <sysSetFatAttrib(regs*)+0x5a>
c001b212:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b216:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b218:	83 ec 0c             	sub    esp,0xc
c001b21b:	53                   	push   ebx
c001b21c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b21f:	83 c4 10             	add    esp,0x10
c001b222:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b226:	85 c0                	test   eax,eax
c001b228:	0f 95 c0             	setne  al
c001b22b:	31 d2                	xor    edx,edx
c001b22d:	0f b6 c0             	movzx  eax,al
c001b230:	f7 d8                	neg    eax
c001b232:	83 d2 00             	adc    edx,0x0
c001b235:	83 c4 10             	add    esp,0x10
c001b238:	f7 da                	neg    edx
c001b23a:	5b                   	pop    ebx
c001b23b:	5e                   	pop    esi
c001b23c:	5f                   	pop    edi
c001b23d:	c3                   	ret    

c001b23e <sysPipe(regs*)>:
c001b23e:	57                   	push   edi
c001b23f:	56                   	push   esi
c001b240:	53                   	push   ebx
c001b241:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b245:	83 ec 0c             	sub    esp,0xc
c001b248:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001b24b:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001b24e:	6a 20                	push   0x20
c001b250:	e8 7f 42 ff ff       	call   c000f4d4 <malloc>
c001b255:	89 c3                	mov    ebx,eax
c001b257:	58                   	pop    eax
c001b258:	5a                   	pop    edx
c001b259:	68 00 50 00 00       	push   0x5000
c001b25e:	53                   	push   ebx
c001b25f:	e8 70 4e ff ff       	call   c00100d4 <Pipe::Pipe(int)>
c001b264:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b267:	e8 c8 60 ff ff       	call   c0011334 <UnixFile::getFileDescriptor()>
c001b26c:	89 07                	mov    DWORD PTR [edi],eax
c001b26e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b271:	e8 be 60 ff ff       	call   c0011334 <UnixFile::getFileDescriptor()>
c001b276:	83 c4 10             	add    esp,0x10
c001b279:	89 06                	mov    DWORD PTR [esi],eax
c001b27b:	31 d2                	xor    edx,edx
c001b27d:	5b                   	pop    ebx
c001b27e:	31 c0                	xor    eax,eax
c001b280:	5e                   	pop    esi
c001b281:	5f                   	pop    edi
c001b282:	c3                   	ret    

c001b283 <sysGetUnixTime(regs*)>:
c001b283:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c001b288:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b28e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b292:	e9 e3 83 ff ff       	jmp    c001367a <Clock::timeInSecondsLocal()>

c001b297 <string_ends_with(char const*, char const*)>:
c001b297:	57                   	push   edi
c001b298:	56                   	push   esi
c001b299:	53                   	push   ebx
c001b29a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b29e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b2a2:	83 ec 0c             	sub    esp,0xc
c001b2a5:	53                   	push   ebx
c001b2a6:	e8 fd 53 fe ff       	call   c00006a8 <strlen>
c001b2ab:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b2ae:	89 c6                	mov    esi,eax
c001b2b0:	e8 f3 53 fe ff       	call   c00006a8 <strlen>
c001b2b5:	83 c4 10             	add    esp,0x10
c001b2b8:	39 c6                	cmp    esi,eax
c001b2ba:	7d 06                	jge    c001b2c2 <string_ends_with(char const*, char const*)+0x2b>
c001b2bc:	5b                   	pop    ebx
c001b2bd:	31 c0                	xor    eax,eax
c001b2bf:	5e                   	pop    esi
c001b2c0:	5f                   	pop    edi
c001b2c1:	c3                   	ret    
c001b2c2:	83 ec 08             	sub    esp,0x8
c001b2c5:	29 c6                	sub    esi,eax
c001b2c7:	57                   	push   edi
c001b2c8:	01 f3                	add    ebx,esi
c001b2ca:	53                   	push   ebx
c001b2cb:	e8 ab 54 fe ff       	call   c000077b <strcmp>
c001b2d0:	83 c4 10             	add    esp,0x10
c001b2d3:	85 c0                	test   eax,eax
c001b2d5:	5b                   	pop    ebx
c001b2d6:	0f 94 c0             	sete   al
c001b2d9:	5e                   	pop    esi
c001b2da:	0f b6 c0             	movzx  eax,al
c001b2dd:	5f                   	pop    edi
c001b2de:	c3                   	ret    

c001b2df <sysCallOpen(regs*)>:
c001b2df:	56                   	push   esi
c001b2e0:	53                   	push   ebx
c001b2e1:	81 ec 04 01 00 00    	sub    esp,0x104
c001b2e7:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001b2ee:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001b2f1:	85 c9                	test   ecx,ecx
c001b2f3:	0f 84 b3 00 00 00    	je     c001b3ac <sysCallOpen(regs*)+0xcd>
c001b2f9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001b2fc:	85 c0                	test   eax,eax
c001b2fe:	0f 84 a8 00 00 00    	je     c001b3ac <sysCallOpen(regs*)+0xcd>
c001b304:	52                   	push   edx
c001b305:	68 71 a5 02 c0       	push   0xc002a571
c001b30a:	50                   	push   eax
c001b30b:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001b30f:	56                   	push   esi
c001b310:	e8 df 77 ff ff       	call   c0012af4 <standardiseFiles(char*, char const*, char const*)>
c001b315:	89 34 24             	mov    DWORD PTR [esp],esi
c001b318:	e8 8b 53 fe ff       	call   c00006a8 <strlen>
c001b31d:	83 c4 10             	add    esp,0x10
c001b320:	48                   	dec    eax
c001b321:	74 1d                	je     c001b340 <sysCallOpen(regs*)+0x61>
c001b323:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001b326:	eb 0f                	jmp    c001b337 <sysCallOpen(regs*)+0x58>
c001b328:	80 fa 3a             	cmp    dl,0x3a
c001b32b:	74 0f                	je     c001b33c <sysCallOpen(regs*)+0x5d>
c001b32d:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001b331:	48                   	dec    eax
c001b332:	74 0c                	je     c001b340 <sysCallOpen(regs*)+0x61>
c001b334:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001b337:	80 fa 2e             	cmp    dl,0x2e
c001b33a:	75 ec                	jne    c001b328 <sysCallOpen(regs*)+0x49>
c001b33c:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001b340:	83 ec 08             	sub    esp,0x8
c001b343:	68 75 a5 02 c0       	push   0xc002a575
c001b348:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b34b:	e8 47 ff ff ff       	call   c001b297 <string_ends_with(char const*, char const*)>
c001b350:	83 c4 10             	add    esp,0x10
c001b353:	85 c0                	test   eax,eax
c001b355:	75 17                	jne    c001b36e <sysCallOpen(regs*)+0x8f>
c001b357:	83 ec 08             	sub    esp,0x8
c001b35a:	68 96 a5 02 c0       	push   0xc002a596
c001b35f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b362:	e8 30 ff ff ff       	call   c001b297 <string_ends_with(char const*, char const*)>
c001b367:	83 c4 10             	add    esp,0x10
c001b36a:	85 c0                	test   eax,eax
c001b36c:	74 51                	je     c001b3bf <sysCallOpen(regs*)+0xe0>
c001b36e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b371:	83 ec 08             	sub    esp,0x8
c001b374:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001b37a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b381:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b384:	ff 30                	push   DWORD PTR [eax]
c001b386:	68 7a a5 02 c0       	push   0xc002a57a
c001b38b:	e8 df 73 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001b390:	c7 04 24 89 a5 02 c0 	mov    DWORD PTR [esp],0xc002a589
c001b397:	e8 d3 73 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001b39c:	83 c4 10             	add    esp,0x10
c001b39f:	81 c4 04 01 00 00    	add    esp,0x104
c001b3a5:	31 c0                	xor    eax,eax
c001b3a7:	31 d2                	xor    edx,edx
c001b3a9:	5b                   	pop    ebx
c001b3aa:	5e                   	pop    esi
c001b3ab:	c3                   	ret    
c001b3ac:	81 c4 04 01 00 00    	add    esp,0x104
c001b3b2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b3b7:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b3bc:	5b                   	pop    ebx
c001b3bd:	5e                   	pop    esi
c001b3be:	c3                   	ret    
c001b3bf:	83 ec 08             	sub    esp,0x8
c001b3c2:	68 76 a5 02 c0       	push   0xc002a576
c001b3c7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b3ca:	e8 ac 53 fe ff       	call   c000077b <strcmp>
c001b3cf:	83 c4 10             	add    esp,0x10
c001b3d2:	85 c0                	test   eax,eax
c001b3d4:	74 98                	je     c001b36e <sysCallOpen(regs*)+0x8f>
c001b3d6:	83 ec 08             	sub    esp,0x8
c001b3d9:	68 75 a5 02 c0       	push   0xc002a575
c001b3de:	56                   	push   esi
c001b3df:	e8 b3 fe ff ff       	call   c001b297 <string_ends_with(char const*, char const*)>
c001b3e4:	83 c4 10             	add    esp,0x10
c001b3e7:	85 c0                	test   eax,eax
c001b3e9:	75 83                	jne    c001b36e <sysCallOpen(regs*)+0x8f>
c001b3eb:	83 ec 08             	sub    esp,0x8
c001b3ee:	68 9b a5 02 c0       	push   0xc002a59b
c001b3f3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b3f6:	e8 9c fe ff ff       	call   c001b297 <string_ends_with(char const*, char const*)>
c001b3fb:	83 c4 10             	add    esp,0x10
c001b3fe:	85 c0                	test   eax,eax
c001b400:	0f 85 d9 00 00 00    	jne    c001b4df <sysCallOpen(regs*)+0x200>
c001b406:	83 ec 08             	sub    esp,0x8
c001b409:	68 a0 a5 02 c0       	push   0xc002a5a0
c001b40e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b411:	e8 81 fe ff ff       	call   c001b297 <string_ends_with(char const*, char const*)>
c001b416:	83 c4 10             	add    esp,0x10
c001b419:	85 c0                	test   eax,eax
c001b41b:	0f 85 be 00 00 00    	jne    c001b4df <sysCallOpen(regs*)+0x200>
c001b421:	83 ec 08             	sub    esp,0x8
c001b424:	68 9c a5 02 c0       	push   0xc002a59c
c001b429:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b42c:	e8 4a 53 fe ff       	call   c000077b <strcmp>
c001b431:	83 c4 10             	add    esp,0x10
c001b434:	85 c0                	test   eax,eax
c001b436:	0f 84 a3 00 00 00    	je     c001b4df <sysCallOpen(regs*)+0x200>
c001b43c:	83 ec 08             	sub    esp,0x8
c001b43f:	68 9b a5 02 c0       	push   0xc002a59b
c001b444:	56                   	push   esi
c001b445:	e8 4d fe ff ff       	call   c001b297 <string_ends_with(char const*, char const*)>
c001b44a:	83 c4 10             	add    esp,0x10
c001b44d:	85 c0                	test   eax,eax
c001b44f:	0f 85 8a 00 00 00    	jne    c001b4df <sysCallOpen(regs*)+0x200>
c001b455:	83 ec 0c             	sub    esp,0xc
c001b458:	68 14 01 00 00       	push   0x114
c001b45d:	e8 72 40 ff ff       	call   c000f4d4 <malloc>
c001b462:	83 c4 0c             	add    esp,0xc
c001b465:	89 c6                	mov    esi,eax
c001b467:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b46c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b46f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b472:	56                   	push   esi
c001b473:	e8 26 78 ff ff       	call   c0012c9e <File::File(char const*, Process*)>
c001b478:	83 c4 10             	add    esp,0x10
c001b47b:	85 f6                	test   esi,esi
c001b47d:	0f 84 29 ff ff ff    	je     c001b3ac <sysCallOpen(regs*)+0xcd>
c001b483:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001b486:	0f b6 c2             	movzx  eax,dl
c001b489:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001b48c:	89 d0                	mov    eax,edx
c001b48e:	83 e0 01             	and    eax,0x1
c001b491:	f6 c2 02             	test   dl,0x2
c001b494:	74 03                	je     c001b499 <sysCallOpen(regs*)+0x1ba>
c001b496:	83 c8 02             	or     eax,0x2
c001b499:	f6 c2 04             	test   dl,0x4
c001b49c:	74 03                	je     c001b4a1 <sysCallOpen(regs*)+0x1c2>
c001b49e:	83 c8 04             	or     eax,0x4
c001b4a1:	f6 c2 08             	test   dl,0x8
c001b4a4:	74 03                	je     c001b4a9 <sysCallOpen(regs*)+0x1ca>
c001b4a6:	83 c8 0a             	or     eax,0xa
c001b4a9:	83 e2 10             	and    edx,0x10
c001b4ac:	74 03                	je     c001b4b1 <sysCallOpen(regs*)+0x1d2>
c001b4ae:	83 c8 12             	or     eax,0x12
c001b4b1:	83 ec 08             	sub    esp,0x8
c001b4b4:	50                   	push   eax
c001b4b5:	56                   	push   esi
c001b4b6:	e8 47 78 ff ff       	call   c0012d02 <File::open(FileOpenMode)>
c001b4bb:	83 c4 10             	add    esp,0x10
c001b4be:	85 c0                	test   eax,eax
c001b4c0:	0f 85 e6 fe ff ff    	jne    c001b3ac <sysCallOpen(regs*)+0xcd>
c001b4c6:	83 ec 0c             	sub    esp,0xc
c001b4c9:	56                   	push   esi
c001b4ca:	e8 65 5e ff ff       	call   c0011334 <UnixFile::getFileDescriptor()>
c001b4cf:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b4d2:	89 02                	mov    DWORD PTR [edx],eax
c001b4d4:	c1 f8 1f             	sar    eax,0x1f
c001b4d7:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b4da:	e9 bd fe ff ff       	jmp    c001b39c <sysCallOpen(regs*)+0xbd>
c001b4df:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b4e2:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001b4e8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b4ef:	e9 ab fe ff ff       	jmp    c001b39f <sysCallOpen(regs*)+0xc0>

c001b4f4 <setupSystemCalls()>:
c001b4f4:	c7 05 a0 d4 02 c0 aa a6 01 c0 	mov    DWORD PTR ds:0xc002d4a0,0xc001a6aa
c001b4fe:	c7 05 a4 d4 02 c0 7e a4 01 c0 	mov    DWORD PTR ds:0xc002d4a4,0xc001a47e
c001b508:	c7 05 a8 d4 02 c0 d1 a5 01 c0 	mov    DWORD PTR ds:0xc002d4a8,0xc001a5d1
c001b512:	c7 05 ac d4 02 c0 42 a6 01 c0 	mov    DWORD PTR ds:0xc002d4ac,0xc001a642
c001b51c:	c7 05 b0 d4 02 c0 69 a5 01 c0 	mov    DWORD PTR ds:0xc002d4b0,0xc001a569
c001b526:	c7 05 b4 d4 02 c0 b5 a4 01 c0 	mov    DWORD PTR ds:0xc002d4b4,0xc001a4b5
c001b530:	c7 05 b8 d4 02 c0 96 a4 01 c0 	mov    DWORD PTR ds:0xc002d4b8,0xc001a496
c001b53a:	c7 05 bc d4 02 c0 26 a6 01 c0 	mov    DWORD PTR ds:0xc002d4bc,0xc001a626
c001b544:	c7 05 c4 d4 02 c0 bc ab 01 c0 	mov    DWORD PTR ds:0xc002d4c4,0xc001abbc
c001b54e:	c7 05 c0 d4 02 c0 df b2 01 c0 	mov    DWORD PTR ds:0xc002d4c0,0xc001b2df
c001b558:	c7 05 c8 d4 02 c0 44 ac 01 c0 	mov    DWORD PTR ds:0xc002d4c8,0xc001ac44
c001b562:	c7 05 cc d4 02 c0 ab a8 01 c0 	mov    DWORD PTR ds:0xc002d4cc,0xc001a8ab
c001b56c:	c7 05 d0 d4 02 c0 e5 a6 01 c0 	mov    DWORD PTR ds:0xc002d4d0,0xc001a6e5
c001b576:	c7 05 d4 d4 02 c0 ea a6 01 c0 	mov    DWORD PTR ds:0xc002d4d4,0xc001a6ea
c001b580:	c7 05 d8 d4 02 c0 1f ad 01 c0 	mov    DWORD PTR ds:0xc002d4d8,0xc001ad1f
c001b58a:	c7 05 dc d4 02 c0 b9 ac 01 c0 	mov    DWORD PTR ds:0xc002d4dc,0xc001acb9
c001b594:	c7 05 e0 d4 02 c0 93 a9 01 c0 	mov    DWORD PTR ds:0xc002d4e0,0xc001a993
c001b59e:	c7 05 e4 d4 02 c0 fc a9 01 c0 	mov    DWORD PTR ds:0xc002d4e4,0xc001a9fc
c001b5a8:	c7 05 e8 d4 02 c0 79 aa 01 c0 	mov    DWORD PTR ds:0xc002d4e8,0xc001aa79
c001b5b2:	c7 05 ec d4 02 c0 ef a6 01 c0 	mov    DWORD PTR ds:0xc002d4ec,0xc001a6ef
c001b5bc:	c7 05 f0 d4 02 c0 8f ad 01 c0 	mov    DWORD PTR ds:0xc002d4f0,0xc001ad8f
c001b5c6:	c7 05 f4 d4 02 c0 a9 ad 01 c0 	mov    DWORD PTR ds:0xc002d4f4,0xc001ada9
c001b5d0:	c7 05 f8 d4 02 c0 a9 ad 01 c0 	mov    DWORD PTR ds:0xc002d4f8,0xc001ada9
c001b5da:	c7 05 fc d4 02 c0 ea ad 01 c0 	mov    DWORD PTR ds:0xc002d4fc,0xc001adea
c001b5e4:	c7 05 00 d5 02 c0 4e ae 01 c0 	mov    DWORD PTR ds:0xc002d500,0xc001ae4e
c001b5ee:	c7 05 04 d5 02 c0 f9 a6 01 c0 	mov    DWORD PTR ds:0xc002d504,0xc001a6f9
c001b5f8:	c7 05 08 d5 02 c0 b2 ae 01 c0 	mov    DWORD PTR ds:0xc002d508,0xc001aeb2
c001b602:	c7 05 0c d5 02 c0 68 a8 01 c0 	mov    DWORD PTR ds:0xc002d50c,0xc001a868
c001b60c:	c7 05 10 d5 02 c0 fe ae 01 c0 	mov    DWORD PTR ds:0xc002d510,0xc001aefe
c001b616:	c7 05 14 d5 02 c0 39 a9 01 c0 	mov    DWORD PTR ds:0xc002d514,0xc001a939
c001b620:	c7 05 18 d5 02 c0 81 af 01 c0 	mov    DWORD PTR ds:0xc002d518,0xc001af81
c001b62a:	c7 05 1c d5 02 c0 fc aa 01 c0 	mov    DWORD PTR ds:0xc002d51c,0xc001aafc
c001b634:	c7 05 20 d5 02 c0 a8 af 01 c0 	mov    DWORD PTR ds:0xc002d520,0xc001afa8
c001b63e:	c7 05 24 d5 02 c0 00 b0 01 c0 	mov    DWORD PTR ds:0xc002d524,0xc001b000
c001b648:	c7 05 28 d5 02 c0 ad b0 01 c0 	mov    DWORD PTR ds:0xc002d528,0xc001b0ad
c001b652:	c7 05 2c d5 02 c0 09 a7 01 c0 	mov    DWORD PTR ds:0xc002d52c,0xc001a709
c001b65c:	c7 05 30 d5 02 c0 73 a7 01 c0 	mov    DWORD PTR ds:0xc002d530,0xc001a773
c001b666:	c7 05 34 d5 02 c0 b9 a7 01 c0 	mov    DWORD PTR ds:0xc002d534,0xc001a7b9
c001b670:	c7 05 38 d5 02 c0 cc b1 01 c0 	mov    DWORD PTR ds:0xc002d538,0xc001b1cc
c001b67a:	c7 05 3c d5 02 c0 c4 ad 01 c0 	mov    DWORD PTR ds:0xc002d53c,0xc001adc4
c001b684:	c7 05 40 d5 02 c0 0a a8 01 c0 	mov    DWORD PTR ds:0xc002d540,0xc001a80a
c001b68e:	c7 05 44 d5 02 c0 3e b2 01 c0 	mov    DWORD PTR ds:0xc002d544,0xc001b23e
c001b698:	c7 05 48 d5 02 c0 83 b2 01 c0 	mov    DWORD PTR ds:0xc002d548,0xc001b283
c001b6a2:	c7 05 4c d5 02 c0 c1 a4 01 c0 	mov    DWORD PTR ds:0xc002d54c,0xc001a4c1
c001b6ac:	c3                   	ret    

c001b6ad <systemCall(regs*, void*)>:
c001b6ad:	53                   	push   ebx
c001b6ae:	83 ec 08             	sub    esp,0x8
c001b6b1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b6b5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001b6b8:	83 f8 7f             	cmp    eax,0x7f
c001b6bb:	77 16                	ja     c001b6d3 <systemCall(regs*, void*)+0x26>
c001b6bd:	8b 14 85 a0 d4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2b60]
c001b6c4:	85 d2                	test   edx,edx
c001b6c6:	74 0b                	je     c001b6d3 <systemCall(regs*, void*)+0x26>
c001b6c8:	83 ec 0c             	sub    esp,0xc
c001b6cb:	53                   	push   ebx
c001b6cc:	ff d2                	call   edx
c001b6ce:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001b6d1:	eb 0d                	jmp    c001b6e0 <systemCall(regs*, void*)+0x33>
c001b6d3:	52                   	push   edx
c001b6d4:	52                   	push   edx
c001b6d5:	50                   	push   eax
c001b6d6:	68 a5 a5 02 c0       	push   0xc002a5a5
c001b6db:	e8 8f 70 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001b6e0:	83 c4 10             	add    esp,0x10
c001b6e3:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b6e8:	31 d2                	xor    edx,edx
c001b6ea:	83 c4 08             	add    esp,0x8
c001b6ed:	5b                   	pop    ebx
c001b6ee:	c3                   	ret    

c001b6ef <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001b6ef:	55                   	push   ebp
c001b6f0:	89 e5                	mov    ebp,esp
c001b6f2:	57                   	push   edi
c001b6f3:	56                   	push   esi
c001b6f4:	53                   	push   ebx
c001b6f5:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001b6fb:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001b6fe:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c001b701:	85 c0                	test   eax,eax
c001b703:	0f 95 c1             	setne  cl
c001b706:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001b70a:	0f 94 c2             	sete   dl
c001b70d:	84 d1                	test   cl,dl
c001b70f:	74 26                	je     c001b737 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001b711:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c001b718:	74 1d                	je     c001b737 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001b71a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001b71d:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c001b723:	89 d6                	mov    esi,edx
c001b725:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001b72b:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c001b731:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001b734:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c001b737:	83 ec 0c             	sub    esp,0xc
c001b73a:	05 ff 0f 00 00       	add    eax,0xfff
c001b73f:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001b742:	6a 01                	push   0x1
c001b744:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c001b74a:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c001b750:	e8 2a 60 ff ff       	call   c001177f <Virt::allocateKernelVirtualPages(int)>
c001b755:	83 c4 10             	add    esp,0x10
c001b758:	89 c6                	mov    esi,eax
c001b75a:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c001b760:	0f 86 21 01 00 00    	jbe    c001b887 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c001b766:	c1 eb 0c             	shr    ebx,0xc
c001b769:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c001b773:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c001b779:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001b77c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b77f:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c001b785:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c001b788:	29 d8                	sub    eax,ebx
c001b78a:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c001b790:	0f 83 f4 00 00 00    	jae    c001b88a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c001b796:	83 ec 0c             	sub    esp,0xc
c001b799:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c001b79f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001b7a2:	3d 00 10 00 00       	cmp    eax,0x1000
c001b7a7:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001b7a9:	52                   	push   edx
c001b7aa:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c001b7b0:	52                   	push   edx
c001b7b1:	76 05                	jbe    c001b7b8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c001b7b3:	b8 00 10 00 00       	mov    eax,0x1000
c001b7b8:	31 d2                	xor    edx,edx
c001b7ba:	52                   	push   edx
c001b7bb:	50                   	push   eax
c001b7bc:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001b7bf:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b7c2:	83 c4 20             	add    esp,0x20
c001b7c5:	85 c0                	test   eax,eax
c001b7c7:	74 1f                	je     c001b7e8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c001b7c9:	51                   	push   ecx
c001b7ca:	51                   	push   ecx
c001b7cb:	50                   	push   eax
c001b7cc:	68 b9 a5 02 c0       	push   0xc002a5b9
c001b7d1:	e8 99 6f ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001b7d6:	89 34 24             	mov    DWORD PTR [esp],esi
c001b7d9:	e8 05 63 ff ff       	call   c0011ae3 <Virt::freeKernelVirtualPages(unsigned long)>
c001b7de:	83 c4 10             	add    esp,0x10
c001b7e1:	31 c0                	xor    eax,eax
c001b7e3:	e9 7c 01 00 00       	jmp    c001b964 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c001b7e8:	e8 2b 15 00 00       	call   c001cd18 <lockScheduler()>
c001b7ed:	e8 4b 43 ff ff       	call   c000fb3d <Phys::allocatePage()>
c001b7f2:	6a 07                	push   0x7
c001b7f4:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c001b7fa:	56                   	push   esi
c001b7fb:	50                   	push   eax
c001b7fc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b802:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001b805:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001b80b:	e8 3a 66 ff ff       	call   c0011e4a <VAS::mapPage(unsigned long, unsigned long, int)>
c001b810:	83 c4 0c             	add    esp,0xc
c001b813:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001b819:	6a 00                	push   0x0
c001b81b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b821:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001b824:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001b82a:	e8 85 64 ff ff       	call   c0011cb4 <VAS::mapOtherVASIn(bool, VAS*)>
c001b82f:	58                   	pop    eax
c001b830:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c001b836:	5a                   	pop    edx
c001b837:	68 07 04 00 00       	push   0x407
c001b83c:	53                   	push   ebx
c001b83d:	81 c3 00 10 00 00    	add    ebx,0x1000
c001b843:	50                   	push   eax
c001b844:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001b84a:	6a 00                	push   0x0
c001b84c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b851:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b854:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001b85a:	e8 a5 69 ff ff       	call   c0012204 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001b85f:	83 c4 1c             	add    esp,0x1c
c001b862:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c001b868:	68 00 10 00 00       	push   0x1000
c001b86d:	50                   	push   eax
c001b86e:	56                   	push   esi
c001b86f:	e8 e1 4d fe ff       	call   c0000655 <memcpy>
c001b874:	e8 a1 14 00 00       	call   c001cd1a <unlockScheduler()>
c001b879:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c001b87f:	83 c4 10             	add    esp,0x10
c001b882:	e9 f5 fe ff ff       	jmp    c001b77c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c001b887:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001b88a:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c001b894:	0f 86 bc 00 00 00    	jbe    c001b956 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c001b89a:	e8 79 14 00 00       	call   c001cd18 <lockScheduler()>
c001b89f:	51                   	push   ecx
c001b8a0:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001b8a6:	6a 00                	push   0x0
c001b8a8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8ad:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8b0:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001b8b6:	e8 f9 63 ff ff       	call   c0011cb4 <VAS::mapOtherVASIn(bool, VAS*)>
c001b8bb:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c001b8c1:	83 c4 10             	add    esp,0x10
c001b8c4:	c1 e8 0c             	shr    eax,0xc
c001b8c7:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c001b8d1:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c001b8d7:	e8 61 42 ff ff       	call   c000fb3d <Phys::allocatePage()>
c001b8dc:	6a 07                	push   0x7
c001b8de:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c001b8e4:	56                   	push   esi
c001b8e5:	50                   	push   eax
c001b8e6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b8ec:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b8ef:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c001b8f5:	e8 50 65 ff ff       	call   c0011e4a <VAS::mapPage(unsigned long, unsigned long, int)>
c001b8fa:	58                   	pop    eax
c001b8fb:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c001b901:	5a                   	pop    edx
c001b902:	68 07 04 00 00       	push   0x407
c001b907:	53                   	push   ebx
c001b908:	81 c3 00 10 00 00    	add    ebx,0x1000
c001b90e:	50                   	push   eax
c001b90f:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001b915:	6a 00                	push   0x0
c001b917:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b91c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b91f:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001b925:	e8 da 68 ff ff       	call   c0012204 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001b92a:	83 c4 1c             	add    esp,0x1c
c001b92d:	68 00 10 00 00       	push   0x1000
c001b932:	6a 00                	push   0x0
c001b934:	56                   	push   esi
c001b935:	e8 51 4d fe ff       	call   c000068b <memset>
c001b93a:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c001b940:	83 c4 10             	add    esp,0x10
c001b943:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c001b949:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c001b94f:	77 86                	ja     c001b8d7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c001b951:	e8 c4 13 00 00       	call   c001cd1a <unlockScheduler()>
c001b956:	83 ec 0c             	sub    esp,0xc
c001b959:	56                   	push   esi
c001b95a:	e8 84 61 ff ff       	call   c0011ae3 <Virt::freeKernelVirtualPages(unsigned long)>
c001b95f:	83 c4 10             	add    esp,0x10
c001b962:	b0 01                	mov    al,0x1
c001b964:	8d 65 f4             	lea    esp,[ebp-0xc]
c001b967:	5b                   	pop    ebx
c001b968:	5e                   	pop    esi
c001b969:	5f                   	pop    edi
c001b96a:	5d                   	pop    ebp
c001b96b:	c3                   	ret    

c001b96c <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001b96c:	55                   	push   ebp
c001b96d:	57                   	push   edi
c001b96e:	56                   	push   esi
c001b96f:	53                   	push   ebx
c001b970:	83 ec 48             	sub    esp,0x48
c001b973:	68 14 01 00 00       	push   0x114
c001b978:	e8 57 3b ff ff       	call   c000f4d4 <malloc>
c001b97d:	83 c4 0c             	add    esp,0xc
c001b980:	89 c6                	mov    esi,eax
c001b982:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001b986:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001b98a:	50                   	push   eax
c001b98b:	e8 0e 73 ff ff       	call   c0012c9e <File::File(char const*, Process*)>
c001b990:	58                   	pop    eax
c001b991:	5a                   	pop    edx
c001b992:	6a 01                	push   0x1
c001b994:	56                   	push   esi
c001b995:	e8 68 73 ff ff       	call   c0012d02 <File::open(FileOpenMode)>
c001b99a:	83 c4 10             	add    esp,0x10
c001b99d:	85 c0                	test   eax,eax
c001b99f:	0f 85 47 01 00 00    	jne    c001baec <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001b9a5:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001b9ad:	83 ec 0c             	sub    esp,0xc
c001b9b0:	6a 34                	push   0x34
c001b9b2:	e8 1d 3b ff ff       	call   c000f4d4 <malloc>
c001b9b7:	89 c3                	mov    ebx,eax
c001b9b9:	58                   	pop    eax
c001b9ba:	8b 06                	mov    eax,DWORD PTR [esi]
c001b9bc:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001b9c0:	57                   	push   edi
c001b9c1:	53                   	push   ebx
c001b9c2:	6a 00                	push   0x0
c001b9c4:	6a 34                	push   0x34
c001b9c6:	56                   	push   esi
c001b9c7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b9ca:	83 c4 20             	add    esp,0x20
c001b9cd:	85 c0                	test   eax,eax
c001b9cf:	0f 85 17 01 00 00    	jne    c001baec <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001b9d5:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001b9db:	0f 85 0b 01 00 00    	jne    c001baec <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001b9e1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b9e4:	85 c0                	test   eax,eax
c001b9e6:	0f 84 00 01 00 00    	je     c001baec <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001b9ec:	31 d2                	xor    edx,edx
c001b9ee:	55                   	push   ebp
c001b9ef:	52                   	push   edx
c001b9f0:	50                   	push   eax
c001b9f1:	56                   	push   esi
c001b9f2:	e8 c9 73 ff ff       	call   c0012dc0 <File::seek(unsigned long long)>
c001b9f7:	83 c4 10             	add    esp,0x10
c001b9fa:	85 c0                	test   eax,eax
c001b9fc:	0f 85 ea 00 00 00    	jne    c001baec <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ba02:	83 ec 0c             	sub    esp,0xc
c001ba05:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001ba08:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001ba0c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001ba10:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001ba14:	0f af c2             	imul   eax,edx
c001ba17:	50                   	push   eax
c001ba18:	e8 b7 3a ff ff       	call   c000f4d4 <malloc>
c001ba1d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001ba1f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ba23:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ba26:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ba2a:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001ba2e:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001ba32:	0f af c2             	imul   eax,edx
c001ba35:	99                   	cdq    
c001ba36:	52                   	push   edx
c001ba37:	50                   	push   eax
c001ba38:	56                   	push   esi
c001ba39:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ba3c:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001ba3f:	83 c4 20             	add    esp,0x20
c001ba42:	85 c0                	test   eax,eax
c001ba44:	0f 84 a2 00 00 00    	je     c001baec <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ba4a:	31 d2                	xor    edx,edx
c001ba4c:	51                   	push   ecx
c001ba4d:	52                   	push   edx
c001ba4e:	50                   	push   eax
c001ba4f:	56                   	push   esi
c001ba50:	e8 6b 73 ff ff       	call   c0012dc0 <File::seek(unsigned long long)>
c001ba55:	83 c4 10             	add    esp,0x10
c001ba58:	85 c0                	test   eax,eax
c001ba5a:	0f 85 8c 00 00 00    	jne    c001baec <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ba60:	83 ec 0c             	sub    esp,0xc
c001ba63:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001ba67:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001ba6b:	31 ed                	xor    ebp,ebp
c001ba6d:	0f af c2             	imul   eax,edx
c001ba70:	50                   	push   eax
c001ba71:	e8 5e 3a ff ff       	call   c000f4d4 <malloc>
c001ba76:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001ba78:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ba7c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ba7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ba83:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001ba87:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001ba8b:	0f af c2             	imul   eax,edx
c001ba8e:	99                   	cdq    
c001ba8f:	52                   	push   edx
c001ba90:	50                   	push   eax
c001ba91:	56                   	push   esi
c001ba92:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ba95:	83 c4 20             	add    esp,0x20
c001ba98:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001baa0:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001baa4:	0f 86 80 00 00 00    	jbe    c001bb2a <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001baaa:	0f b7 fd             	movzx  edi,bp
c001baad:	c1 e7 05             	shl    edi,0x5
c001bab0:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001bab4:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001bab7:	75 6b                	jne    c001bb24 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001bab9:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001babc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bac0:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001bac3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bac7:	52                   	push   edx
c001bac8:	31 d2                	xor    edx,edx
c001baca:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001bacd:	52                   	push   edx
c001bace:	50                   	push   eax
c001bacf:	56                   	push   esi
c001bad0:	e8 eb 72 ff ff       	call   c0012dc0 <File::seek(unsigned long long)>
c001bad5:	83 c4 10             	add    esp,0x10
c001bad8:	85 c0                	test   eax,eax
c001bada:	74 17                	je     c001baf3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001badc:	83 ec 0c             	sub    esp,0xc
c001badf:	68 e4 a5 02 c0       	push   0xc002a5e4
c001bae4:	e8 86 6c ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001bae9:	83 c4 10             	add    esp,0x10
c001baec:	31 c0                	xor    eax,eax
c001baee:	e9 87 00 00 00       	jmp    c001bb7a <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001baf3:	83 ec 0c             	sub    esp,0xc
c001baf6:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001baf9:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001bafc:	50                   	push   eax
c001bafd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001bb01:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bb05:	56                   	push   esi
c001bb06:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001bb0a:	e8 e0 fb ff ff       	call   c001b6ef <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001bb0f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001bb13:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001bb17:	83 c4 20             	add    esp,0x20
c001bb1a:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001bb1e:	73 04                	jae    c001bb24 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001bb20:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bb24:	45                   	inc    ebp
c001bb25:	e9 76 ff ff ff       	jmp    c001baa0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001bb2a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001bb2e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bb32:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bb36:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001bb3c:	83 ec 0c             	sub    esp,0xc
c001bb3f:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001bb45:	25 00 f0 ff ff       	and    eax,0xfffff000
c001bb4a:	05 00 10 00 00       	add    eax,0x1000
c001bb4f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bb52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bb56:	e8 89 39 ff ff       	call   c000f4e4 <free>
c001bb5b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bb5e:	e8 81 39 ff ff       	call   c000f4e4 <free>
c001bb63:	58                   	pop    eax
c001bb64:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bb68:	e8 77 39 ff ff       	call   c000f4e4 <free>
c001bb6d:	89 34 24             	mov    DWORD PTR [esp],esi
c001bb70:	e8 eb 71 ff ff       	call   c0012d60 <File::close()>
c001bb75:	83 c4 10             	add    esp,0x10
c001bb78:	b0 01                	mov    al,0x1
c001bb7a:	83 c4 3c             	add    esp,0x3c
c001bb7d:	5b                   	pop    ebx
c001bb7e:	5e                   	pop    esi
c001bb7f:	5f                   	pop    edi
c001bb80:	5d                   	pop    ebp
c001bb81:	c3                   	ret    

c001bb82 <Thr::runtimeReferenceHelper()>:
c001bb82:	83 ec 18             	sub    esp,0x18
c001bb85:	68 ec a5 02 c0       	push   0xc002a5ec
c001bb8a:	e8 e0 6b ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001bb8f:	fa                   	cli    
c001bb90:	83 c4 10             	add    esp,0x10
c001bb93:	eb fe                	jmp    c001bb93 <Thr::runtimeReferenceHelper()+0x11>

c001bb95 <Thr::getAddressOfKernelSymbol(char const*)>:
c001bb95:	57                   	push   edi
c001bb96:	56                   	push   esi
c001bb97:	53                   	push   ebx
c001bb98:	31 db                	xor    ebx,ebx
c001bb9a:	39 1d 40 de 02 c0    	cmp    DWORD PTR ds:0xc002de40,ebx
c001bba0:	7e 3c                	jle    c001bbde <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001bba2:	8b 34 9d c0 dd 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd2240]
c001bba9:	31 ff                	xor    edi,edi
c001bbab:	39 3c 9d c0 dc 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd2340],edi
c001bbb2:	7e 27                	jle    c001bbdb <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001bbb4:	50                   	push   eax
c001bbb5:	50                   	push   eax
c001bbb6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bbba:	8b 06                	mov    eax,DWORD PTR [esi]
c001bbbc:	03 04 9d 40 dd 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd22c0]
c001bbc3:	50                   	push   eax
c001bbc4:	e8 b2 4b fe ff       	call   c000077b <strcmp>
c001bbc9:	83 c4 10             	add    esp,0x10
c001bbcc:	85 c0                	test   eax,eax
c001bbce:	75 05                	jne    c001bbd5 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001bbd0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001bbd3:	eb 0b                	jmp    c001bbe0 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001bbd5:	83 c6 10             	add    esi,0x10
c001bbd8:	47                   	inc    edi
c001bbd9:	eb d0                	jmp    c001bbab <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001bbdb:	43                   	inc    ebx
c001bbdc:	eb bc                	jmp    c001bb9a <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001bbde:	31 c0                	xor    eax,eax
c001bbe0:	5b                   	pop    ebx
c001bbe1:	5e                   	pop    esi
c001bbe2:	5f                   	pop    edi
c001bbe3:	c3                   	ret    

c001bbe4 <Thr::loadKernelSymbolTable(char const*)>:
c001bbe4:	55                   	push   ebp
c001bbe5:	57                   	push   edi
c001bbe6:	56                   	push   esi
c001bbe7:	53                   	push   ebx
c001bbe8:	83 ec 68             	sub    esp,0x68
c001bbeb:	8b 35 94 de 02 c0    	mov    esi,DWORD PTR ds:0xc002de94
c001bbf1:	68 14 01 00 00       	push   0x114
c001bbf6:	e8 d9 38 ff ff       	call   c000f4d4 <malloc>
c001bbfb:	83 c4 0c             	add    esp,0xc
c001bbfe:	89 c3                	mov    ebx,eax
c001bc00:	56                   	push   esi
c001bc01:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001bc05:	50                   	push   eax
c001bc06:	e8 93 70 ff ff       	call   c0012c9e <File::File(char const*, Process*)>
c001bc0b:	5e                   	pop    esi
c001bc0c:	5f                   	pop    edi
c001bc0d:	6a 01                	push   0x1
c001bc0f:	53                   	push   ebx
c001bc10:	e8 ed 70 ff ff       	call   c0012d02 <File::open(FileOpenMode)>
c001bc15:	83 c4 10             	add    esp,0x10
c001bc18:	31 d2                	xor    edx,edx
c001bc1a:	85 c0                	test   eax,eax
c001bc1c:	0f 85 74 02 00 00    	jne    c001be96 <Thr::loadKernelSymbolTable(char const*)+0x2b2>
c001bc22:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001bc2a:	83 ec 0c             	sub    esp,0xc
c001bc2d:	6a 34                	push   0x34
c001bc2f:	e8 a0 38 ff ff       	call   c000f4d4 <malloc>
c001bc34:	59                   	pop    ecx
c001bc35:	89 c7                	mov    edi,eax
c001bc37:	8d 74 24 34          	lea    esi,[esp+0x34]
c001bc3b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bc3d:	56                   	push   esi
c001bc3e:	57                   	push   edi
c001bc3f:	6a 00                	push   0x0
c001bc41:	6a 34                	push   0x34
c001bc43:	53                   	push   ebx
c001bc44:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001bc47:	83 c4 20             	add    esp,0x20
c001bc4a:	85 c0                	test   eax,eax
c001bc4c:	74 17                	je     c001bc65 <Thr::loadKernelSymbolTable(char const*)+0x81>
c001bc4e:	83 ec 0c             	sub    esp,0xc
c001bc51:	68 0e a6 02 c0       	push   0xc002a60e
c001bc56:	e8 2e dc ff ff       	call   c0019889 <Krnl::panic(char const*)>
c001bc5b:	83 c4 10             	add    esp,0x10
c001bc5e:	31 d2                	xor    edx,edx
c001bc60:	e9 31 02 00 00       	jmp    c001be96 <Thr::loadKernelSymbolTable(char const*)+0x2b2>
c001bc65:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001bc6b:	75 e1                	jne    c001bc4e <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001bc6d:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001bc70:	85 c0                	test   eax,eax
c001bc72:	74 da                	je     c001bc4e <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001bc74:	52                   	push   edx
c001bc75:	31 d2                	xor    edx,edx
c001bc77:	52                   	push   edx
c001bc78:	50                   	push   eax
c001bc79:	53                   	push   ebx
c001bc7a:	e8 41 71 ff ff       	call   c0012dc0 <File::seek(unsigned long long)>
c001bc7f:	83 c4 10             	add    esp,0x10
c001bc82:	85 c0                	test   eax,eax
c001bc84:	75 c8                	jne    c001bc4e <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001bc86:	83 ec 0c             	sub    esp,0xc
c001bc89:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001bc8d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001bc91:	31 ed                	xor    ebp,ebp
c001bc93:	0f af c2             	imul   eax,edx
c001bc96:	50                   	push   eax
c001bc97:	e8 38 38 ff ff       	call   c000f4d4 <malloc>
c001bc9c:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001bc9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bca2:	89 34 24             	mov    DWORD PTR [esp],esi
c001bca5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bca9:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001bcad:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001bcb1:	0f af c2             	imul   eax,edx
c001bcb4:	99                   	cdq    
c001bcb5:	52                   	push   edx
c001bcb6:	50                   	push   eax
c001bcb7:	53                   	push   ebx
c001bcb8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bcbb:	83 c4 20             	add    esp,0x20
c001bcbe:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001bcc6:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001bcce:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001bcd6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bcde:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001bce2:	0f 86 aa 00 00 00    	jbe    c001bd92 <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c001bce8:	0f b7 f5             	movzx  esi,bp
c001bceb:	6b f6 28             	imul   esi,esi,0x28
c001bcee:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001bcf2:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001bcf5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bcf9:	50                   	push   eax
c001bcfa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001bcfe:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001bd02:	8b 16                	mov    edx,DWORD PTR [esi]
c001bd04:	6b c0 28             	imul   eax,eax,0x28
c001bd07:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001bd0b:	89 d0                	mov    eax,edx
c001bd0d:	31 d2                	xor    edx,edx
c001bd0f:	52                   	push   edx
c001bd10:	50                   	push   eax
c001bd11:	53                   	push   ebx
c001bd12:	e8 a9 70 ff ff       	call   c0012dc0 <File::seek(unsigned long long)>
c001bd17:	83 c4 0c             	add    esp,0xc
c001bd1a:	6a 20                	push   0x20
c001bd1c:	6a 00                	push   0x0
c001bd1e:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001bd22:	52                   	push   edx
c001bd23:	e8 63 49 fe ff       	call   c000068b <memset>
c001bd28:	58                   	pop    eax
c001bd29:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bd2b:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001bd2f:	51                   	push   ecx
c001bd30:	8d 54 24 40          	lea    edx,[esp+0x40]
c001bd34:	52                   	push   edx
c001bd35:	6a 00                	push   0x0
c001bd37:	6a 1f                	push   0x1f
c001bd39:	53                   	push   ebx
c001bd3a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001bd3d:	83 c4 18             	add    esp,0x18
c001bd40:	68 25 a6 02 c0       	push   0xc002a625
c001bd45:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001bd49:	52                   	push   edx
c001bd4a:	e8 2c 4a fe ff       	call   c000077b <strcmp>
c001bd4f:	83 c4 10             	add    esp,0x10
c001bd52:	85 c0                	test   eax,eax
c001bd54:	75 0f                	jne    c001bd65 <Thr::loadKernelSymbolTable(char const*)+0x181>
c001bd56:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001bd59:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bd5d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bd61:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bd65:	50                   	push   eax
c001bd66:	50                   	push   eax
c001bd67:	68 2d a6 02 c0       	push   0xc002a62d
c001bd6c:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001bd70:	50                   	push   eax
c001bd71:	e8 05 4a fe ff       	call   c000077b <strcmp>
c001bd76:	83 c4 10             	add    esp,0x10
c001bd79:	85 c0                	test   eax,eax
c001bd7b:	75 0f                	jne    c001bd8c <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c001bd7d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001bd80:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bd84:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bd88:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001bd8c:	45                   	inc    ebp
c001bd8d:	e9 4c ff ff ff       	jmp    c001bcde <Thr::loadKernelSymbolTable(char const*)+0xfa>
c001bd92:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001bd97:	75 10                	jne    c001bda9 <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c001bd99:	83 ec 0c             	sub    esp,0xc
c001bd9c:	68 35 a6 02 c0       	push   0xc002a635
c001bda1:	e8 e3 da ff ff       	call   c0019889 <Krnl::panic(char const*)>
c001bda6:	83 c4 10             	add    esp,0x10
c001bda9:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001bdae:	75 10                	jne    c001bdc0 <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c001bdb0:	83 ec 0c             	sub    esp,0xc
c001bdb3:	68 35 a6 02 c0       	push   0xc002a635
c001bdb8:	e8 cc da ff ff       	call   c0019889 <Krnl::panic(char const*)>
c001bdbd:	83 c4 10             	add    esp,0x10
c001bdc0:	31 d2                	xor    edx,edx
c001bdc2:	50                   	push   eax
c001bdc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdc7:	52                   	push   edx
c001bdc8:	50                   	push   eax
c001bdc9:	53                   	push   ebx
c001bdca:	e8 f1 6f ff ff       	call   c0012dc0 <File::seek(unsigned long long)>
c001bdcf:	5a                   	pop    edx
c001bdd0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001bdd4:	e8 fb 36 ff ff       	call   c000f4d4 <malloc>
c001bdd9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bddd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bde1:	31 c9                	xor    ecx,ecx
c001bde3:	5e                   	pop    esi
c001bde4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bde6:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001bdea:	55                   	push   ebp
c001bdeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bdef:	51                   	push   ecx
c001bdf0:	52                   	push   edx
c001bdf1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001bdf5:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001bdf9:	53                   	push   ebx
c001bdfa:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001bdfd:	83 c4 14             	add    esp,0x14
c001be00:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001be04:	e8 cb 36 ff ff       	call   c000f4d4 <malloc>
c001be09:	89 c6                	mov    esi,eax
c001be0b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001be0d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001be10:	56                   	push   esi
c001be11:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001be15:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001be19:	51                   	push   ecx
c001be1a:	52                   	push   edx
c001be1b:	53                   	push   ebx
c001be1c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001be1f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001be23:	8b 15 40 de 02 c0    	mov    edx,DWORD PTR ds:0xc002de40
c001be29:	83 c4 1c             	add    esp,0x1c
c001be2c:	c1 e8 04             	shr    eax,0x4
c001be2f:	89 04 95 c0 dc 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2340],eax
c001be36:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001be3a:	31 d2                	xor    edx,edx
c001be3c:	52                   	push   edx
c001be3d:	50                   	push   eax
c001be3e:	53                   	push   ebx
c001be3f:	e8 7c 6f ff ff       	call   c0012dc0 <File::seek(unsigned long long)>
c001be44:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001be46:	31 d2                	xor    edx,edx
c001be48:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001be4b:	56                   	push   esi
c001be4c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001be50:	52                   	push   edx
c001be51:	50                   	push   eax
c001be52:	53                   	push   ebx
c001be53:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001be56:	83 c4 14             	add    esp,0x14
c001be59:	53                   	push   ebx
c001be5a:	e8 01 6f ff ff       	call   c0012d60 <File::close()>
c001be5f:	5d                   	pop    ebp
c001be60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001be64:	e8 7b 36 ff ff       	call   c000f4e4 <free>
c001be69:	89 3c 24             	mov    DWORD PTR [esp],edi
c001be6c:	e8 73 36 ff ff       	call   c000f4e4 <free>
c001be71:	a1 40 de 02 c0       	mov    eax,ds:0xc002de40
c001be76:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001be7a:	8d 50 01             	lea    edx,[eax+0x1]
c001be7d:	89 0c 85 c0 dd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2240],ecx
c001be84:	89 15 40 de 02 c0    	mov    DWORD PTR ds:0xc002de40,edx
c001be8a:	89 34 85 40 dd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd22c0],esi
c001be91:	83 c4 10             	add    esp,0x10
c001be94:	b2 01                	mov    dl,0x1
c001be96:	83 c4 5c             	add    esp,0x5c
c001be99:	88 d0                	mov    al,dl
c001be9b:	5b                   	pop    ebx
c001be9c:	5e                   	pop    esi
c001be9d:	5f                   	pop    edi
c001be9e:	5d                   	pop    ebp
c001be9f:	c3                   	ret    

c001bea0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001bea0:	55                   	push   ebp
c001bea1:	57                   	push   edi
c001bea2:	56                   	push   esi
c001bea3:	53                   	push   ebx
c001bea4:	81 ec 68 03 00 00    	sub    esp,0x368
c001beaa:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001beb1:	8b 1d 94 de 02 c0    	mov    ebx,DWORD PTR ds:0xc002de94
c001beb7:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001bebb:	68 14 01 00 00       	push   0x114
c001bec0:	e8 0f 36 ff ff       	call   c000f4d4 <malloc>
c001bec5:	83 c4 0c             	add    esp,0xc
c001bec8:	89 c5                	mov    ebp,eax
c001beca:	53                   	push   ebx
c001becb:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001bed2:	50                   	push   eax
c001bed3:	e8 c6 6d ff ff       	call   c0012c9e <File::File(char const*, Process*)>
c001bed8:	58                   	pop    eax
c001bed9:	5a                   	pop    edx
c001beda:	6a 01                	push   0x1
c001bedc:	55                   	push   ebp
c001bedd:	e8 20 6e ff ff       	call   c0012d02 <File::open(FileOpenMode)>
c001bee2:	83 c4 10             	add    esp,0x10
c001bee5:	85 c0                	test   eax,eax
c001bee7:	0f 85 f2 06 00 00    	jne    c001c5df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001beed:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001bef5:	83 ec 0c             	sub    esp,0xc
c001bef8:	6a 34                	push   0x34
c001befa:	e8 d5 35 ff ff       	call   c000f4d4 <malloc>
c001beff:	89 c7                	mov    edi,eax
c001bf01:	58                   	pop    eax
c001bf02:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001bf05:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001bf09:	53                   	push   ebx
c001bf0a:	57                   	push   edi
c001bf0b:	6a 00                	push   0x0
c001bf0d:	6a 34                	push   0x34
c001bf0f:	55                   	push   ebp
c001bf10:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001bf13:	83 c4 20             	add    esp,0x20
c001bf16:	85 c0                	test   eax,eax
c001bf18:	0f 85 c1 06 00 00    	jne    c001c5df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001bf1e:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001bf24:	0f 85 b5 06 00 00    	jne    c001c5df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001bf2a:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001bf2d:	85 c0                	test   eax,eax
c001bf2f:	0f 84 aa 06 00 00    	je     c001c5df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001bf35:	31 d2                	xor    edx,edx
c001bf37:	56                   	push   esi
c001bf38:	52                   	push   edx
c001bf39:	50                   	push   eax
c001bf3a:	55                   	push   ebp
c001bf3b:	e8 80 6e ff ff       	call   c0012dc0 <File::seek(unsigned long long)>
c001bf40:	83 c4 10             	add    esp,0x10
c001bf43:	85 c0                	test   eax,eax
c001bf45:	0f 85 94 06 00 00    	jne    c001c5df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001bf4b:	83 ec 0c             	sub    esp,0xc
c001bf4e:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001bf51:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001bf55:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001bf59:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001bf5d:	0f af c2             	imul   eax,edx
c001bf60:	50                   	push   eax
c001bf61:	e8 6e 35 ff ff       	call   c000f4d4 <malloc>
c001bf66:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001bf69:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bf6d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bf70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bf74:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001bf78:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001bf7c:	0f af c2             	imul   eax,edx
c001bf7f:	99                   	cdq    
c001bf80:	52                   	push   edx
c001bf81:	50                   	push   eax
c001bf82:	55                   	push   ebp
c001bf83:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bf86:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001bf89:	83 c4 20             	add    esp,0x20
c001bf8c:	85 c0                	test   eax,eax
c001bf8e:	0f 84 4b 06 00 00    	je     c001c5df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001bf94:	31 d2                	xor    edx,edx
c001bf96:	51                   	push   ecx
c001bf97:	52                   	push   edx
c001bf98:	50                   	push   eax
c001bf99:	55                   	push   ebp
c001bf9a:	e8 21 6e ff ff       	call   c0012dc0 <File::seek(unsigned long long)>
c001bf9f:	83 c4 10             	add    esp,0x10
c001bfa2:	85 c0                	test   eax,eax
c001bfa4:	0f 85 35 06 00 00    	jne    c001c5df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001bfaa:	83 ec 0c             	sub    esp,0xc
c001bfad:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001bfb1:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001bfb5:	31 f6                	xor    esi,esi
c001bfb7:	0f af c2             	imul   eax,edx
c001bfba:	50                   	push   eax
c001bfbb:	e8 14 35 ff ff       	call   c000f4d4 <malloc>
c001bfc0:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001bfc3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001bfc7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bfca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bfce:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001bfd2:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001bfd6:	0f af c2             	imul   eax,edx
c001bfd9:	99                   	cdq    
c001bfda:	52                   	push   edx
c001bfdb:	50                   	push   eax
c001bfdc:	55                   	push   ebp
c001bfdd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bfe0:	83 c4 20             	add    esp,0x20
c001bfe3:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001bfe7:	0f 86 8a 00 00 00    	jbe    c001c077 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001bfed:	0f b7 de             	movzx  ebx,si
c001bff0:	c1 e3 05             	shl    ebx,0x5
c001bff3:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c001bff7:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001bffa:	75 75                	jne    c001c071 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001bffc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001bfff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c003:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001c006:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c00a:	52                   	push   edx
c001c00b:	31 d2                	xor    edx,edx
c001c00d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001c010:	52                   	push   edx
c001c011:	50                   	push   eax
c001c012:	55                   	push   ebp
c001c013:	e8 a8 6d ff ff       	call   c0012dc0 <File::seek(unsigned long long)>
c001c018:	83 c4 10             	add    esp,0x10
c001c01b:	85 c0                	test   eax,eax
c001c01d:	0f 85 bc 05 00 00    	jne    c001c5df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001c023:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001c02a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c02d:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001c031:	31 d2                	xor    edx,edx
c001c033:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001c037:	83 ec 0c             	sub    esp,0xc
c001c03a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c03e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c045:	50                   	push   eax
c001c046:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c04a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c04e:	52                   	push   edx
c001c04f:	50                   	push   eax
c001c050:	55                   	push   ebp
c001c051:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c054:	83 c4 1c             	add    esp,0x1c
c001c057:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c05a:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001c05d:	50                   	push   eax
c001c05e:	6a 00                	push   0x0
c001c060:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c064:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001c068:	50                   	push   eax
c001c069:	e8 1d 46 fe ff       	call   c000068b <memset>
c001c06e:	83 c4 10             	add    esp,0x10
c001c071:	46                   	inc    esi
c001c072:	e9 6c ff ff ff       	jmp    c001bfe3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001c077:	31 db                	xor    ebx,ebx
c001c079:	50                   	push   eax
c001c07a:	68 00 01 00 00       	push   0x100
c001c07f:	6a 00                	push   0x0
c001c081:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001c085:	50                   	push   eax
c001c086:	e8 00 46 fe ff       	call   c000068b <memset>
c001c08b:	83 c4 0c             	add    esp,0xc
c001c08e:	68 00 01 00 00       	push   0x100
c001c093:	6a 00                	push   0x0
c001c095:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001c09c:	50                   	push   eax
c001c09d:	e8 e9 45 fe ff       	call   c000068b <memset>
c001c0a2:	83 c4 10             	add    esp,0x10
c001c0a5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c0ad:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c0b5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001c0bd:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c0c5:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001c0cd:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001c0d1:	0f 86 30 01 00 00    	jbe    c001c207 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001c0d7:	0f b7 f3             	movzx  esi,bx
c001c0da:	6b f6 28             	imul   esi,esi,0x28
c001c0dd:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c001c0e1:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c0e4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c0e8:	50                   	push   eax
c001c0e9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c0ed:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001c0f1:	8b 06                	mov    eax,DWORD PTR [esi]
c001c0f3:	6b d2 28             	imul   edx,edx,0x28
c001c0f6:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001c0fa:	31 d2                	xor    edx,edx
c001c0fc:	52                   	push   edx
c001c0fd:	50                   	push   eax
c001c0fe:	55                   	push   ebp
c001c0ff:	e8 bc 6c ff ff       	call   c0012dc0 <File::seek(unsigned long long)>
c001c104:	83 c4 0c             	add    esp,0xc
c001c107:	6a 20                	push   0x20
c001c109:	6a 00                	push   0x0
c001c10b:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001c112:	51                   	push   ecx
c001c113:	e8 73 45 fe ff       	call   c000068b <memset>
c001c118:	58                   	pop    eax
c001c119:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c11c:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c120:	52                   	push   edx
c001c121:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001c128:	51                   	push   ecx
c001c129:	6a 00                	push   0x0
c001c12b:	6a 1f                	push   0x1f
c001c12d:	55                   	push   ebp
c001c12e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c131:	83 c4 1c             	add    esp,0x1c
c001c134:	6a 09                	push   0x9
c001c136:	68 4f a6 02 c0       	push   0xc002a64f
c001c13b:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001c142:	51                   	push   ecx
c001c143:	e8 aa 44 fe ff       	call   c00005f2 <memcmp>
c001c148:	83 c4 10             	add    esp,0x10
c001c14b:	85 c0                	test   eax,eax
c001c14d:	75 21                	jne    c001c170 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001c14f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c153:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001c157:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c15b:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001c15f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c162:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001c169:	89 c8                	mov    eax,ecx
c001c16b:	40                   	inc    eax
c001c16c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c170:	50                   	push   eax
c001c171:	6a 09                	push   0x9
c001c173:	68 59 a6 02 c0       	push   0xc002a659
c001c178:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c17f:	50                   	push   eax
c001c180:	e8 6d 44 fe ff       	call   c00005f2 <memcmp>
c001c185:	83 c4 10             	add    esp,0x10
c001c188:	85 c0                	test   eax,eax
c001c18a:	75 21                	jne    c001c1ad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001c18c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c190:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001c194:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c198:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001c19c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c19f:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001c1a6:	89 c8                	mov    eax,ecx
c001c1a8:	40                   	inc    eax
c001c1a9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c1ad:	50                   	push   eax
c001c1ae:	50                   	push   eax
c001c1af:	68 25 a6 02 c0       	push   0xc002a625
c001c1b4:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c1bb:	50                   	push   eax
c001c1bc:	e8 ba 45 fe ff       	call   c000077b <strcmp>
c001c1c1:	83 c4 10             	add    esp,0x10
c001c1c4:	85 c0                	test   eax,eax
c001c1c6:	75 0f                	jne    c001c1d7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001c1c8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c1cb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c1cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c1d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c1d7:	50                   	push   eax
c001c1d8:	50                   	push   eax
c001c1d9:	68 2d a6 02 c0       	push   0xc002a62d
c001c1de:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c1e5:	50                   	push   eax
c001c1e6:	e8 90 45 fe ff       	call   c000077b <strcmp>
c001c1eb:	83 c4 10             	add    esp,0x10
c001c1ee:	85 c0                	test   eax,eax
c001c1f0:	75 0f                	jne    c001c201 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001c1f2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c1f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c1f9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c1fd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c201:	43                   	inc    ebx
c001c202:	e9 c6 fe ff ff       	jmp    c001c0cd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001c207:	31 d2                	xor    edx,edx
c001c209:	50                   	push   eax
c001c20a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c20e:	52                   	push   edx
c001c20f:	50                   	push   eax
c001c210:	55                   	push   ebp
c001c211:	e8 aa 6b ff ff       	call   c0012dc0 <File::seek(unsigned long long)>
c001c216:	5a                   	pop    edx
c001c217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c21b:	e8 b4 32 ff ff       	call   c000f4d4 <malloc>
c001c220:	31 d2                	xor    edx,edx
c001c222:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001c226:	59                   	pop    ecx
c001c227:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c22a:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001c22e:	53                   	push   ebx
c001c22f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001c233:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c237:	52                   	push   edx
c001c238:	50                   	push   eax
c001c239:	55                   	push   ebp
c001c23a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c23d:	83 c4 14             	add    esp,0x14
c001c240:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c244:	e8 8b 32 ff ff       	call   c000f4d4 <malloc>
c001c249:	31 d2                	xor    edx,edx
c001c24b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c24f:	83 c4 0c             	add    esp,0xc
c001c252:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c256:	52                   	push   edx
c001c257:	50                   	push   eax
c001c258:	55                   	push   ebp
c001c259:	e8 62 6b ff ff       	call   c0012dc0 <File::seek(unsigned long long)>
c001c25e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c261:	31 d2                	xor    edx,edx
c001c263:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c266:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c26a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c26e:	52                   	push   edx
c001c26f:	50                   	push   eax
c001c270:	55                   	push   ebp
c001c271:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c274:	83 c4 20             	add    esp,0x20
c001c277:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001c27f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c283:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c001c287:	0f 84 56 03 00 00    	je     c001c5e3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x743>
c001c28d:	8b 84 94 50 01 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x150]
c001c294:	31 d2                	xor    edx,edx
c001c296:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c29a:	c1 e8 03             	shr    eax,0x3
c001c29d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001c2a1:	50                   	push   eax
c001c2a2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c2a6:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001c2aa:	52                   	push   edx
c001c2ab:	50                   	push   eax
c001c2ac:	55                   	push   ebp
c001c2ad:	e8 0e 6b ff ff       	call   c0012dc0 <File::seek(unsigned long long)>
c001c2b2:	58                   	pop    eax
c001c2b3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c2b7:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001c2be:	e8 11 32 ff ff       	call   c000f4d4 <malloc>
c001c2c3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c2c6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001c2ca:	31 d2                	xor    edx,edx
c001c2cc:	58                   	pop    eax
c001c2cd:	8d 44 24 58          	lea    eax,[esp+0x58]
c001c2d1:	50                   	push   eax
c001c2d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c2d6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c2da:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001c2e1:	52                   	push   edx
c001c2e2:	50                   	push   eax
c001c2e3:	55                   	push   ebp
c001c2e4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c2e7:	83 c4 20             	add    esp,0x20
c001c2ea:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001c2f2:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001c2f6:	39 4c 24 28          	cmp    DWORD PTR [esp+0x28],ecx
c001c2fa:	0f 8d c7 02 00 00    	jge    c001c5c7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x727>
c001c300:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c304:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c308:	31 db                	xor    ebx,ebx
c001c30a:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c001c30d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001c311:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c315:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c001c319:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c31d:	c1 e8 08             	shr    eax,0x8
c001c320:	89 c6                	mov    esi,eax
c001c322:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001c326:	c1 e6 04             	shl    esi,0x4
c001c329:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c001c32d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001c330:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c334:	85 c0                	test   eax,eax
c001c336:	0f 85 17 01 00 00    	jne    c001c453 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001c33c:	83 ec 0c             	sub    esp,0xc
c001c33f:	b3 01                	mov    bl,0x1
c001c341:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c345:	03 06                	add    eax,DWORD PTR [esi]
c001c347:	50                   	push   eax
c001c348:	e8 48 f8 ff ff       	call   c001bb95 <Thr::getAddressOfKernelSymbol(char const*)>
c001c34d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c351:	83 c4 10             	add    esp,0x10
c001c354:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001c359:	0f 85 f4 00 00 00    	jne    c001c453 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001c35f:	50                   	push   eax
c001c360:	50                   	push   eax
c001c361:	68 63 a6 02 c0       	push   0xc002a663
c001c366:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c36a:	03 06                	add    eax,DWORD PTR [esi]
c001c36c:	50                   	push   eax
c001c36d:	e8 09 44 fe ff       	call   c000077b <strcmp>
c001c372:	83 c4 10             	add    esp,0x10
c001c375:	85 c0                	test   eax,eax
c001c377:	75 0a                	jne    c001c383 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x4e3>
c001c379:	b8 9c 53 02 c0       	mov    eax,0xc002539c
c001c37e:	e9 ca 00 00 00       	jmp    c001c44d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c001c383:	50                   	push   eax
c001c384:	50                   	push   eax
c001c385:	68 6d a6 02 c0       	push   0xc002a66d
c001c38a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c38e:	03 06                	add    eax,DWORD PTR [esi]
c001c390:	50                   	push   eax
c001c391:	e8 e5 43 fe ff       	call   c000077b <strcmp>
c001c396:	83 c4 10             	add    esp,0x10
c001c399:	85 c0                	test   eax,eax
c001c39b:	75 0a                	jne    c001c3a7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x507>
c001c39d:	b8 d0 50 02 c0       	mov    eax,0xc00250d0
c001c3a2:	e9 a6 00 00 00       	jmp    c001c44d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c001c3a7:	53                   	push   ebx
c001c3a8:	53                   	push   ebx
c001c3a9:	68 76 a6 02 c0       	push   0xc002a676
c001c3ae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c3b2:	03 06                	add    eax,DWORD PTR [esi]
c001c3b4:	50                   	push   eax
c001c3b5:	e8 c1 43 fe ff       	call   c000077b <strcmp>
c001c3ba:	83 c4 10             	add    esp,0x10
c001c3bd:	85 c0                	test   eax,eax
c001c3bf:	75 0a                	jne    c001c3cb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x52b>
c001c3c1:	b8 9c 54 02 c0       	mov    eax,0xc002549c
c001c3c6:	e9 82 00 00 00       	jmp    c001c44d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c001c3cb:	51                   	push   ecx
c001c3cc:	51                   	push   ecx
c001c3cd:	68 80 a6 02 c0       	push   0xc002a680
c001c3d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c3d6:	03 06                	add    eax,DWORD PTR [esi]
c001c3d8:	50                   	push   eax
c001c3d9:	e8 9d 43 fe ff       	call   c000077b <strcmp>
c001c3de:	83 c4 10             	add    esp,0x10
c001c3e1:	85 c0                	test   eax,eax
c001c3e3:	74 63                	je     c001c448 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a8>
c001c3e5:	50                   	push   eax
c001c3e6:	50                   	push   eax
c001c3e7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c3eb:	03 06                	add    eax,DWORD PTR [esi]
c001c3ed:	50                   	push   eax
c001c3ee:	68 89 a6 02 c0       	push   0xc002a689
c001c3f3:	e8 77 63 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001c3f8:	58                   	pop    eax
c001c3f9:	5a                   	pop    edx
c001c3fa:	68 a3 a6 02 c0       	push   0xc002a6a3
c001c3ff:	8d 9c 24 5c 02 00 00 	lea    ebx,[esp+0x25c]
c001c406:	53                   	push   ebx
c001c407:	e8 1e 43 fe ff       	call   c000072a <strcpy>
c001c40c:	59                   	pop    ecx
c001c40d:	58                   	pop    eax
c001c40e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c412:	03 06                	add    eax,DWORD PTR [esi]
c001c414:	50                   	push   eax
c001c415:	53                   	push   ebx
c001c416:	e8 c6 43 fe ff       	call   c00007e1 <strcat>
c001c41b:	58                   	pop    eax
c001c41c:	5a                   	pop    edx
c001c41d:	68 39 a7 02 c0       	push   0xc002a739
c001c422:	53                   	push   ebx
c001c423:	e8 b9 43 fe ff       	call   c00007e1 <strcat>
c001c428:	83 c4 10             	add    esp,0x10
c001c42b:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001c430:	0f 84 4b 01 00 00    	je     c001c581 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001c436:	83 ec 0c             	sub    esp,0xc
c001c439:	53                   	push   ebx
c001c43a:	e8 4a d4 ff ff       	call   c0019889 <Krnl::panic(char const*)>
c001c43f:	83 c4 10             	add    esp,0x10
c001c442:	8a 5c 24 27          	mov    bl,BYTE PTR [esp+0x27]
c001c446:	eb 0b                	jmp    c001c453 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001c448:	b8 1c 52 02 c0       	mov    eax,0xc002521c
c001c44d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c451:	b3 01                	mov    bl,0x1
c001c453:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c001c458:	0f 85 80 00 00 00    	jne    c001c4de <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x63e>
c001c45e:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001c465:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c469:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001c46d:	01 ce                	add    esi,ecx
c001c46f:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001c477:	8b 06                	mov    eax,DWORD PTR [esi]
c001c479:	0f 94 c2             	sete   dl
c001c47c:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001c484:	0f 94 44 24 18       	sete   BYTE PTR [esp+0x18]
c001c489:	0b 54 24 18          	or     edx,DWORD PTR [esp+0x18]
c001c48d:	84 db                	test   bl,bl
c001c48f:	74 31                	je     c001c4c2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x622>
c001c491:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001c495:	01 c3                	add    ebx,eax
c001c497:	84 d2                	test   dl,dl
c001c499:	75 0a                	jne    c001c4a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x605>
c001c49b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c49f:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001c4a3:	76 32                	jbe    c001c4d7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001c4a5:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001c4aa:	0f 84 d1 00 00 00    	je     c001c581 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001c4b0:	83 ec 0c             	sub    esp,0xc
c001c4b3:	68 ba a6 02 c0       	push   0xc002a6ba
c001c4b8:	e8 cc d3 ff ff       	call   c0019889 <Krnl::panic(char const*)>
c001c4bd:	83 c4 10             	add    esp,0x10
c001c4c0:	eb 15                	jmp    c001c4d7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001c4c2:	8d 1c 08             	lea    ebx,[eax+ecx*1]
c001c4c5:	84 d2                	test   dl,dl
c001c4c7:	75 0e                	jne    c001c4d7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001c4c9:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c4cd:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001c4d1:	77 04                	ja     c001c4d7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001c4d3:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001c4d7:	89 1e                	mov    DWORD PTR [esi],ebx
c001c4d9:	e9 e0 00 00 00       	jmp    c001c5be <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c001c4de:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c001c4e3:	75 6e                	jne    c001c553 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b3>
c001c4e5:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001c4ec:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c001c4f0:	03 74 24 30          	add    esi,DWORD PTR [esp+0x30]
c001c4f4:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001c4fc:	74 17                	je     c001c515 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c001c4fe:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001c506:	74 0d                	je     c001c515 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c001c508:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c50c:	83 e8 04             	sub    eax,0x4
c001c50f:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001c513:	76 17                	jbe    c001c52c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x68c>
c001c515:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001c51a:	74 65                	je     c001c581 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001c51c:	83 ec 0c             	sub    esp,0xc
c001c51f:	68 d6 a6 02 c0       	push   0xc002a6d6
c001c524:	e8 60 d3 ff ff       	call   c0019889 <Krnl::panic(char const*)>
c001c529:	83 c4 10             	add    esp,0x10
c001c52c:	8b 16                	mov    edx,DWORD PTR [esi]
c001c52e:	84 db                	test   bl,bl
c001c530:	74 13                	je     c001c545 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a5>
c001c532:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c536:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c001c53d:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001c541:	01 d0                	add    eax,edx
c001c543:	eb 06                	jmp    c001c54b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ab>
c001c545:	89 d0                	mov    eax,edx
c001c547:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001c54b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001c54f:	89 06                	mov    DWORD PTR [esi],eax
c001c551:	eb 6b                	jmp    c001c5be <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c001c553:	50                   	push   eax
c001c554:	50                   	push   eax
c001c555:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001c55a:	50                   	push   eax
c001c55b:	68 f2 a6 02 c0       	push   0xc002a6f2
c001c560:	e8 0a 62 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001c565:	83 c4 10             	add    esp,0x10
c001c568:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001c56d:	74 12                	je     c001c581 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001c56f:	83 ec 0c             	sub    esp,0xc
c001c572:	68 fd a6 02 c0       	push   0xc002a6fd
c001c577:	e8 0d d3 ff ff       	call   c0019889 <Krnl::panic(char const*)>
c001c57c:	83 c4 10             	add    esp,0x10
c001c57f:	eb 3d                	jmp    c001c5be <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c001c581:	83 ec 0c             	sub    esp,0xc
c001c584:	55                   	push   ebp
c001c585:	e8 d6 67 ff ff       	call   c0012d60 <File::close()>
c001c58a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c58d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c590:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c593:	59                   	pop    ecx
c001c594:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c598:	e8 47 2f ff ff       	call   c000f4e4 <free>
c001c59d:	5b                   	pop    ebx
c001c59e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c5a2:	e8 3d 2f ff ff       	call   c000f4e4 <free>
c001c5a7:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c5aa:	e8 35 2f ff ff       	call   c000f4e4 <free>
c001c5af:	5e                   	pop    esi
c001c5b0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001c5b4:	e8 2b 2f ff ff       	call   c000f4e4 <free>
c001c5b9:	83 c4 10             	add    esp,0x10
c001c5bc:	eb 21                	jmp    c001c5df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001c5be:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c001c5c2:	e9 2b fd ff ff       	jmp    c001c2f2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001c5c7:	83 ec 0c             	sub    esp,0xc
c001c5ca:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c5ce:	e8 11 2f ff ff       	call   c000f4e4 <free>
c001c5d3:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c001c5d7:	83 c4 10             	add    esp,0x10
c001c5da:	e9 a0 fc ff ff       	jmp    c001c27f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001c5df:	31 c0                	xor    eax,eax
c001c5e1:	eb 33                	jmp    c001c616 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x776>
c001c5e3:	83 ec 0c             	sub    esp,0xc
c001c5e6:	55                   	push   ebp
c001c5e7:	e8 74 67 ff ff       	call   c0012d60 <File::close()>
c001c5ec:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c5ef:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c5f2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c5f5:	58                   	pop    eax
c001c5f6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c5fa:	e8 e5 2e ff ff       	call   c000f4e4 <free>
c001c5ff:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c602:	e8 dd 2e ff ff       	call   c000f4e4 <free>
c001c607:	5a                   	pop    edx
c001c608:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001c60c:	e8 d3 2e ff ff       	call   c000f4e4 <free>
c001c611:	83 c4 10             	add    esp,0x10
c001c614:	b0 01                	mov    al,0x1
c001c616:	81 c4 5c 03 00 00    	add    esp,0x35c
c001c61c:	5b                   	pop    ebx
c001c61d:	5e                   	pop    esi
c001c61e:	5f                   	pop    edi
c001c61f:	5d                   	pop    ebp
c001c620:	c3                   	ret    

c001c621 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001c621:	56                   	push   esi
c001c622:	31 d2                	xor    edx,edx
c001c624:	53                   	push   ebx
c001c625:	8b 1d a0 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d6a0
c001c62b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c62f:	39 d3                	cmp    ebx,edx
c001c631:	7e 1b                	jle    c001c64e <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001c633:	8b 04 95 c0 d8 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2740]
c001c63a:	39 c8                	cmp    eax,ecx
c001c63c:	77 0d                	ja     c001c64b <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001c63e:	8b 34 95 c0 d6 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd2940]
c001c645:	01 c6                	add    esi,eax
c001c647:	39 ce                	cmp    esi,ecx
c001c649:	77 05                	ja     c001c650 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001c64b:	42                   	inc    edx
c001c64c:	eb e1                	jmp    c001c62f <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001c64e:	31 c0                	xor    eax,eax
c001c650:	5b                   	pop    ebx
c001c651:	5e                   	pop    esi
c001c652:	c3                   	ret    

c001c653 <Thr::getDriverNameFromAddress(unsigned long)>:
c001c653:	53                   	push   ebx
c001c654:	31 c0                	xor    eax,eax
c001c656:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c65a:	8b 1d a0 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d6a0
c001c660:	39 c3                	cmp    ebx,eax
c001c662:	7e 22                	jle    c001c686 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001c664:	8b 14 85 c0 d8 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2740]
c001c66b:	39 ca                	cmp    edx,ecx
c001c66d:	77 14                	ja     c001c683 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001c66f:	03 14 85 c0 d6 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd2940]
c001c676:	39 ca                	cmp    edx,ecx
c001c678:	76 09                	jbe    c001c683 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001c67a:	8b 04 85 c0 da 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2540]
c001c681:	eb 05                	jmp    c001c688 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001c683:	40                   	inc    eax
c001c684:	eb da                	jmp    c001c660 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001c686:	31 c0                	xor    eax,eax
c001c688:	5b                   	pop    ebx
c001c689:	c3                   	ret    

c001c68a <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001c68a:	53                   	push   ebx
c001c68b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001c68f:	53                   	push   ebx
c001c690:	e8 8c ff ff ff       	call   c001c621 <Thr::getDriverBaseFromAddress(unsigned long)>
c001c695:	5a                   	pop    edx
c001c696:	31 d2                	xor    edx,edx
c001c698:	85 c0                	test   eax,eax
c001c69a:	74 04                	je     c001c6a0 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001c69c:	89 da                	mov    edx,ebx
c001c69e:	29 c2                	sub    edx,eax
c001c6a0:	89 d0                	mov    eax,edx
c001c6a2:	5b                   	pop    ebx
c001c6a3:	c3                   	ret    

c001c6a4 <Thr::loadDLL(char const*, bool)>:
c001c6a4:	55                   	push   ebp
c001c6a5:	57                   	push   edi
c001c6a6:	56                   	push   esi
c001c6a7:	53                   	push   ebx
c001c6a8:	81 ec 34 01 00 00    	sub    esp,0x134
c001c6ae:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001c6b5:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001c6bc:	56                   	push   esi
c001c6bd:	68 15 a7 02 c0       	push   0xc002a715
c001c6c2:	e8 a8 60 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001c6c7:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001c6ce:	e8 01 2e ff ff       	call   c000f4d4 <malloc>
c001c6d3:	83 c4 0c             	add    esp,0xc
c001c6d6:	89 c3                	mov    ebx,eax
c001c6d8:	ff 35 94 de 02 c0    	push   DWORD PTR ds:0xc002de94
c001c6de:	56                   	push   esi
c001c6df:	50                   	push   eax
c001c6e0:	e8 b9 65 ff ff       	call   c0012c9e <File::File(char const*, Process*)>
c001c6e5:	83 c4 10             	add    esp,0x10
c001c6e8:	85 db                	test   ebx,ebx
c001c6ea:	75 3c                	jne    c001c728 <Thr::loadDLL(char const*, bool)+0x84>
c001c6ec:	89 e8                	mov    eax,ebp
c001c6ee:	84 c0                	test   al,al
c001c6f0:	0f 84 b0 01 00 00    	je     c001c8a6 <Thr::loadDLL(char const*, bool)+0x202>
c001c6f6:	50                   	push   eax
c001c6f7:	50                   	push   eax
c001c6f8:	68 26 a7 02 c0       	push   0xc002a726
c001c6fd:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001c701:	57                   	push   edi
c001c702:	e8 23 40 fe ff       	call   c000072a <strcpy>
c001c707:	58                   	pop    eax
c001c708:	5a                   	pop    edx
c001c709:	56                   	push   esi
c001c70a:	57                   	push   edi
c001c70b:	e8 d1 40 fe ff       	call   c00007e1 <strcat>
c001c710:	59                   	pop    ecx
c001c711:	58                   	pop    eax
c001c712:	68 39 a7 02 c0       	push   0xc002a739
c001c717:	57                   	push   edi
c001c718:	e8 c4 40 fe ff       	call   c00007e1 <strcat>
c001c71d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c720:	e8 64 d1 ff ff       	call   c0019889 <Krnl::panic(char const*)>
c001c725:	83 c4 10             	add    esp,0x10
c001c728:	50                   	push   eax
c001c729:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001c72d:	50                   	push   eax
c001c72e:	8d 44 24 20          	lea    eax,[esp+0x20]
c001c732:	50                   	push   eax
c001c733:	53                   	push   ebx
c001c734:	e8 75 68 ff ff       	call   c0012fae <File::stat(unsigned long long*, bool*)>
c001c739:	83 c4 10             	add    esp,0x10
c001c73c:	85 db                	test   ebx,ebx
c001c73e:	74 0c                	je     c001c74c <Thr::loadDLL(char const*, bool)+0xa8>
c001c740:	83 ec 0c             	sub    esp,0xc
c001c743:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c745:	53                   	push   ebx
c001c746:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c749:	83 c4 10             	add    esp,0x10
c001c74c:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001c751:	75 0a                	jne    c001c75d <Thr::loadDLL(char const*, bool)+0xb9>
c001c753:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c757:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001c75b:	75 3c                	jne    c001c799 <Thr::loadDLL(char const*, bool)+0xf5>
c001c75d:	89 e8                	mov    eax,ebp
c001c75f:	84 c0                	test   al,al
c001c761:	0f 84 3d 01 00 00    	je     c001c8a4 <Thr::loadDLL(char const*, bool)+0x200>
c001c767:	50                   	push   eax
c001c768:	50                   	push   eax
c001c769:	68 26 a7 02 c0       	push   0xc002a726
c001c76e:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001c772:	53                   	push   ebx
c001c773:	e8 b2 3f fe ff       	call   c000072a <strcpy>
c001c778:	58                   	pop    eax
c001c779:	5a                   	pop    edx
c001c77a:	56                   	push   esi
c001c77b:	53                   	push   ebx
c001c77c:	e8 60 40 fe ff       	call   c00007e1 <strcat>
c001c781:	59                   	pop    ecx
c001c782:	5f                   	pop    edi
c001c783:	68 39 a7 02 c0       	push   0xc002a739
c001c788:	53                   	push   ebx
c001c789:	e8 53 40 fe ff       	call   c00007e1 <strcat>
c001c78e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c791:	e8 f3 d0 ff ff       	call   c0019889 <Krnl::panic(char const*)>
c001c796:	83 c4 10             	add    esp,0x10
c001c799:	e8 71 51 ff ff       	call   c001190f <Virt::getAKernelVAS()>
c001c79e:	51                   	push   ecx
c001c79f:	6a 03                	push   0x3
c001c7a1:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001c7a5:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001c7a9:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001c7af:	83 d3 00             	adc    ebx,0x0
c001c7b2:	89 ca                	mov    edx,ecx
c001c7b4:	89 d1                	mov    ecx,edx
c001c7b6:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001c7ba:	51                   	push   ecx
c001c7bb:	50                   	push   eax
c001c7bc:	e8 89 57 ff ff       	call   c0011f4a <VAS::allocatePages(int, int)>
c001c7c1:	89 34 24             	mov    DWORD PTR [esp],esi
c001c7c4:	89 c3                	mov    ebx,eax
c001c7c6:	e8 dd 3e fe ff       	call   c00006a8 <strlen>
c001c7cb:	8b 3d a0 d6 02 c0    	mov    edi,DWORD PTR ds:0xc002d6a0
c001c7d1:	40                   	inc    eax
c001c7d2:	89 04 24             	mov    DWORD PTR [esp],eax
c001c7d5:	e8 fa 2c ff ff       	call   c000f4d4 <malloc>
c001c7da:	89 04 bd c0 da 02 c0 	mov    DWORD PTR [edi*4-0x3ffd2540],eax
c001c7e1:	5f                   	pop    edi
c001c7e2:	58                   	pop    eax
c001c7e3:	a1 a0 d6 02 c0       	mov    eax,ds:0xc002d6a0
c001c7e8:	56                   	push   esi
c001c7e9:	ff 34 85 c0 da 02 c0 	push   DWORD PTR [eax*4-0x3ffd2540]
c001c7f0:	e8 35 3f fe ff       	call   c000072a <strcpy>
c001c7f5:	a1 a0 d6 02 c0       	mov    eax,ds:0xc002d6a0
c001c7fa:	8d 50 01             	lea    edx,[eax+0x1]
c001c7fd:	89 1c 85 c0 d8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2740],ebx
c001c804:	89 15 a0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6a0,edx
c001c80a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c80e:	83 c4 0c             	add    esp,0xc
c001c811:	89 14 85 c0 d6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2940],edx
c001c818:	6a 01                	push   0x1
c001c81a:	53                   	push   ebx
c001c81b:	56                   	push   esi
c001c81c:	e8 7f f6 ff ff       	call   c001bea0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001c821:	83 c4 10             	add    esp,0x10
c001c824:	89 c7                	mov    edi,eax
c001c826:	fe c8                	dec    al
c001c828:	74 16                	je     c001c840 <Thr::loadDLL(char const*, bool)+0x19c>
c001c82a:	89 e8                	mov    eax,ebp
c001c82c:	84 c0                	test   al,al
c001c82e:	74 10                	je     c001c840 <Thr::loadDLL(char const*, bool)+0x19c>
c001c830:	83 ec 0c             	sub    esp,0xc
c001c833:	68 3b a7 02 c0       	push   0xc002a73b
c001c838:	e8 4c d0 ff ff       	call   c0019889 <Krnl::panic(char const*)>
c001c83d:	83 c4 10             	add    esp,0x10
c001c840:	31 f6                	xor    esi,esi
c001c842:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c846:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c84a:	05 ff 0f 00 00       	add    eax,0xfff
c001c84f:	83 d2 00             	adc    edx,0x0
c001c852:	0f ac d0 0c          	shrd   eax,edx,0xc
c001c856:	c1 ea 0c             	shr    edx,0xc
c001c859:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c85d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c861:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001c865:	ba 00 00 00 00       	mov    edx,0x0
c001c86a:	89 d0                	mov    eax,edx
c001c86c:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001c870:	73 2c                	jae    c001c89e <Thr::loadDLL(char const*, bool)+0x1fa>
c001c872:	e8 98 50 ff ff       	call   c001190f <Virt::getAKernelVAS()>
c001c877:	89 f5                	mov    ebp,esi
c001c879:	c1 e5 0c             	shl    ebp,0xc
c001c87c:	52                   	push   edx
c001c87d:	01 dd                	add    ebp,ebx
c001c87f:	52                   	push   edx
c001c880:	55                   	push   ebp
c001c881:	50                   	push   eax
c001c882:	e8 3d 52 ff ff       	call   c0011ac4 <VAS::getPageTableEntry(unsigned long)>
c001c887:	83 c4 10             	add    esp,0x10
c001c88a:	f6 00 60             	test   BYTE PTR [eax],0x60
c001c88d:	75 0c                	jne    c001c89b <Thr::loadDLL(char const*, bool)+0x1f7>
c001c88f:	83 ec 0c             	sub    esp,0xc
c001c892:	55                   	push   ebp
c001c893:	e8 1b 32 ff ff       	call   c000fab3 <Phys::freePage(unsigned long)>
c001c898:	83 c4 10             	add    esp,0x10
c001c89b:	46                   	inc    esi
c001c89c:	eb a4                	jmp    c001c842 <Thr::loadDLL(char const*, bool)+0x19e>
c001c89e:	89 f8                	mov    eax,edi
c001c8a0:	84 c0                	test   al,al
c001c8a2:	75 02                	jne    c001c8a6 <Thr::loadDLL(char const*, bool)+0x202>
c001c8a4:	31 db                	xor    ebx,ebx
c001c8a6:	81 c4 2c 01 00 00    	add    esp,0x12c
c001c8ac:	89 d8                	mov    eax,ebx
c001c8ae:	5b                   	pop    ebx
c001c8af:	5e                   	pop    esi
c001c8b0:	5f                   	pop    edi
c001c8b1:	5d                   	pop    ebp
c001c8b2:	c3                   	ret    

c001c8b3 <Thr::executeDLL(unsigned long, void*)>:
c001c8b3:	56                   	push   esi
c001c8b4:	53                   	push   ebx
c001c8b5:	51                   	push   ecx
c001c8b6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c8ba:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001c8be:	85 db                	test   ebx,ebx
c001c8c0:	75 10                	jne    c001c8d2 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001c8c2:	83 ec 0c             	sub    esp,0xc
c001c8c5:	68 5a a7 02 c0       	push   0xc002a75a
c001c8ca:	e8 ba cf ff ff       	call   c0019889 <Krnl::panic(char const*)>
c001c8cf:	83 c4 10             	add    esp,0x10
c001c8d2:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001c8d6:	89 d8                	mov    eax,ebx
c001c8d8:	5a                   	pop    edx
c001c8d9:	5b                   	pop    ebx
c001c8da:	5e                   	pop    esi
c001c8db:	ff e0                	jmp    eax
c001c8dd:	90                   	nop

c001c8de <changeTSS>:
c001c8de:	83 ec 14             	sub    esp,0x14
c001c8e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c8e6:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001c8e9:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001c8ee:	c1 e2 15             	shl    edx,0x15
c001c8f1:	29 d0                	sub    eax,edx
c001c8f3:	50                   	push   eax
c001c8f4:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c001c8f9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c8ff:	05 7c 11 00 00       	add    eax,0x117c
c001c904:	50                   	push   eax
c001c905:	e8 b4 47 ff ff       	call   c00110be <TSS::setESP(unsigned long)>
c001c90a:	83 c4 1c             	add    esp,0x1c
c001c90d:	c3                   	ret    

c001c90e <Process::addArgs(char**)>:
c001c90e:	57                   	push   edi
c001c90f:	56                   	push   esi
c001c910:	53                   	push   ebx
c001c911:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c915:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c919:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001c923:	85 ff                	test   edi,edi
c001c925:	74 3d                	je     c001c964 <Process::addArgs(char**)+0x56>
c001c927:	8b 07                	mov    eax,DWORD PTR [edi]
c001c929:	85 c0                	test   eax,eax
c001c92b:	74 37                	je     c001c964 <Process::addArgs(char**)+0x56>
c001c92d:	31 db                	xor    ebx,ebx
c001c92f:	83 ec 0c             	sub    esp,0xc
c001c932:	50                   	push   eax
c001c933:	e8 70 3d fe ff       	call   c00006a8 <strlen>
c001c938:	40                   	inc    eax
c001c939:	89 04 24             	mov    DWORD PTR [esp],eax
c001c93c:	e8 93 2b ff ff       	call   c000f4d4 <malloc>
c001c941:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001c948:	5a                   	pop    edx
c001c949:	59                   	pop    ecx
c001c94a:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001c94d:	43                   	inc    ebx
c001c94e:	50                   	push   eax
c001c94f:	e8 d6 3d fe ff       	call   c000072a <strcpy>
c001c954:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001c95a:	83 c4 10             	add    esp,0x10
c001c95d:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001c960:	85 c0                	test   eax,eax
c001c962:	75 cb                	jne    c001c92f <Process::addArgs(char**)+0x21>
c001c964:	5b                   	pop    ebx
c001c965:	5e                   	pop    esi
c001c966:	5f                   	pop    edi
c001c967:	c3                   	ret    

c001c968 <Process::Process(char const*, Process*, char**)>:
c001c968:	56                   	push   esi
c001c969:	53                   	push   ebx
c001c96a:	83 ec 14             	sub    esp,0x14
c001c96d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c971:	05 0c 02 00 00       	add    eax,0x20c
c001c976:	bb 07 00 00 00       	mov    ebx,0x7
c001c97b:	89 c6                	mov    esi,eax
c001c97d:	85 db                	test   ebx,ebx
c001c97f:	78 12                	js     c001c993 <Process::Process(char const*, Process*, char**)+0x2b>
c001c981:	83 ec 0c             	sub    esp,0xc
c001c984:	56                   	push   esi
c001c985:	e8 c8 ac 00 00       	call   c0027652 <ThreadControlBlock::ThreadControlBlock()>
c001c98a:	83 c4 10             	add    esp,0x10
c001c98d:	83 c6 63             	add    esi,0x63
c001c990:	4b                   	dec    ebx
c001c991:	eb ea                	jmp    c001c97d <Process::Process(char const*, Process*, char**)+0x15>
c001c993:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c997:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001c99e:	83 ec 0c             	sub    esp,0xc
c001c9a1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c9a5:	e8 30 cd ff ff       	call   c00196da <Krnl::newProcessEnv(Process*)>
c001c9aa:	83 c4 10             	add    esp,0x10
c001c9ad:	89 c2                	mov    edx,eax
c001c9af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c9b3:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001c9b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c9bd:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001c9c6:	a1 d0 be 02 c0       	mov    eax,ds:0xc002bed0
c001c9cb:	8d 50 01             	lea    edx,[eax+0x1]
c001c9ce:	89 15 d0 be 02 c0    	mov    DWORD PTR ds:0xc002bed0,edx
c001c9d4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c9d8:	89 02                	mov    DWORD PTR [edx],eax
c001c9da:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c001c9e2:	83 ec 0c             	sub    esp,0xc
c001c9e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c9e9:	e8 e6 2a ff ff       	call   c000f4d4 <malloc>
c001c9ee:	83 c4 10             	add    esp,0x10
c001c9f1:	89 c3                	mov    ebx,eax
c001c9f3:	83 ec 08             	sub    esp,0x8
c001c9f6:	6a 00                	push   0x0
c001c9f8:	53                   	push   ebx
c001c9f9:	e8 f4 58 ff ff       	call   c00122f2 <VAS::VAS(bool)>
c001c9fe:	83 c4 10             	add    esp,0x10
c001ca01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca05:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001ca0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca0f:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001ca19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca1d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ca21:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001ca27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca2b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001ca31:	85 c0                	test   eax,eax
c001ca33:	74 42                	je     c001ca77 <Process::Process(char const*, Process*, char**)+0x10f>
c001ca35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca39:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001ca3f:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001ca45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca49:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001ca4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca53:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001ca59:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001ca5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca63:	05 0c 01 00 00       	add    eax,0x10c
c001ca68:	83 ec 08             	sub    esp,0x8
c001ca6b:	52                   	push   edx
c001ca6c:	50                   	push   eax
c001ca6d:	e8 b8 3c fe ff       	call   c000072a <strcpy>
c001ca72:	83 c4 10             	add    esp,0x10
c001ca75:	eb 63                	jmp    c001cada <Process::Process(char const*, Process*, char**)+0x172>
c001ca77:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001ca7f:	83 ec 0c             	sub    esp,0xc
c001ca82:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ca86:	e8 49 2a ff ff       	call   c000f4d4 <malloc>
c001ca8b:	83 c4 10             	add    esp,0x10
c001ca8e:	89 c3                	mov    ebx,eax
c001ca90:	83 ec 08             	sub    esp,0x8
c001ca93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ca97:	53                   	push   ebx
c001ca98:	e8 1f 43 ff ff       	call   c0010dbc <VgaText::VgaText(char const*)>
c001ca9d:	83 c4 10             	add    esp,0x10
c001caa0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001caa4:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001caaa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001caae:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001cab4:	83 ec 0c             	sub    esp,0xc
c001cab7:	50                   	push   eax
c001cab8:	e8 f2 36 ff ff       	call   c00101af <addToTerminalCycle(VgaText*)>
c001cabd:	83 c4 10             	add    esp,0x10
c001cac0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cac4:	05 0c 01 00 00       	add    eax,0x10c
c001cac9:	83 ec 08             	sub    esp,0x8
c001cacc:	68 84 a7 02 c0       	push   0xc002a784
c001cad1:	50                   	push   eax
c001cad2:	e8 53 3c fe ff       	call   c000072a <strcpy>
c001cad7:	83 c4 10             	add    esp,0x10
c001cada:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cade:	83 c0 0c             	add    eax,0xc
c001cae1:	83 ec 08             	sub    esp,0x8
c001cae4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cae8:	50                   	push   eax
c001cae9:	e8 3c 3c fe ff       	call   c000072a <strcpy>
c001caee:	83 c4 10             	add    esp,0x10
c001caf1:	83 ec 08             	sub    esp,0x8
c001caf4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001caf8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cafc:	e8 0d fe ff ff       	call   c001c90e <Process::addArgs(char**)>
c001cb01:	83 c4 10             	add    esp,0x10
c001cb04:	83 ec 08             	sub    esp,0x8
c001cb07:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cb0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cb0f:	e8 58 ee ff ff       	call   c001b96c <Thr::loadProgramIntoMemory(Process*, char const*)>
c001cb14:	83 c4 10             	add    esp,0x10
c001cb17:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001cb1b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001cb1f:	83 f0 01             	xor    eax,0x1
c001cb22:	88 c2                	mov    dl,al
c001cb24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb28:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001cb2e:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001cb33:	83 ec 08             	sub    esp,0x8
c001cb36:	50                   	push   eax
c001cb37:	68 80 a8 02 c0       	push   0xc002a880
c001cb3c:	e8 2e 5c ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001cb41:	83 c4 10             	add    esp,0x10
c001cb44:	90                   	nop
c001cb45:	83 c4 14             	add    esp,0x14
c001cb48:	5b                   	pop    ebx
c001cb49:	5e                   	pop    esi
c001cb4a:	c3                   	ret    
c001cb4b:	90                   	nop

c001cb4c <Process::Process(bool, char const*, Process*, char**)>:
c001cb4c:	56                   	push   esi
c001cb4d:	53                   	push   ebx
c001cb4e:	83 ec 24             	sub    esp,0x24
c001cb51:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cb55:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001cb59:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cb5d:	05 0c 02 00 00       	add    eax,0x20c
c001cb62:	bb 07 00 00 00       	mov    ebx,0x7
c001cb67:	89 c6                	mov    esi,eax
c001cb69:	85 db                	test   ebx,ebx
c001cb6b:	78 12                	js     c001cb7f <Process::Process(bool, char const*, Process*, char**)+0x33>
c001cb6d:	83 ec 0c             	sub    esp,0xc
c001cb70:	56                   	push   esi
c001cb71:	e8 dc aa 00 00       	call   c0027652 <ThreadControlBlock::ThreadControlBlock()>
c001cb76:	83 c4 10             	add    esp,0x10
c001cb79:	83 c6 63             	add    esi,0x63
c001cb7c:	4b                   	dec    ebx
c001cb7d:	eb ea                	jmp    c001cb69 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001cb7f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cb83:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001cb8a:	83 ec 0c             	sub    esp,0xc
c001cb8d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cb91:	e8 44 cb ff ff       	call   c00196da <Krnl::newProcessEnv(Process*)>
c001cb96:	83 c4 10             	add    esp,0x10
c001cb99:	89 c2                	mov    edx,eax
c001cb9b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cb9f:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001cba5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cba9:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001cbb2:	a1 d0 be 02 c0       	mov    eax,ds:0xc002bed0
c001cbb7:	8d 50 01             	lea    edx,[eax+0x1]
c001cbba:	89 15 d0 be 02 c0    	mov    DWORD PTR ds:0xc002bed0,edx
c001cbc0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cbc4:	89 02                	mov    DWORD PTR [edx],eax
c001cbc6:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c001cbce:	83 ec 0c             	sub    esp,0xc
c001cbd1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001cbd5:	e8 fa 28 ff ff       	call   c000f4d4 <malloc>
c001cbda:	83 c4 10             	add    esp,0x10
c001cbdd:	89 c3                	mov    ebx,eax
c001cbdf:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001cbe4:	83 ec 08             	sub    esp,0x8
c001cbe7:	50                   	push   eax
c001cbe8:	53                   	push   ebx
c001cbe9:	e8 04 57 ff ff       	call   c00122f2 <VAS::VAS(bool)>
c001cbee:	83 c4 10             	add    esp,0x10
c001cbf1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cbf5:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001cbfb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cbff:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001cc09:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cc0d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001cc11:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001cc17:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cc1b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001cc21:	85 c0                	test   eax,eax
c001cc23:	74 42                	je     c001cc67 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001cc25:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cc29:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001cc2f:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001cc35:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cc39:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001cc3f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cc43:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001cc49:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001cc4f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cc53:	05 0c 01 00 00       	add    eax,0x10c
c001cc58:	83 ec 08             	sub    esp,0x8
c001cc5b:	52                   	push   edx
c001cc5c:	50                   	push   eax
c001cc5d:	e8 c8 3a fe ff       	call   c000072a <strcpy>
c001cc62:	83 c4 10             	add    esp,0x10
c001cc65:	eb 63                	jmp    c001ccca <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001cc67:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001cc6f:	83 ec 0c             	sub    esp,0xc
c001cc72:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cc76:	e8 59 28 ff ff       	call   c000f4d4 <malloc>
c001cc7b:	83 c4 10             	add    esp,0x10
c001cc7e:	89 c3                	mov    ebx,eax
c001cc80:	83 ec 08             	sub    esp,0x8
c001cc83:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001cc87:	53                   	push   ebx
c001cc88:	e8 2f 41 ff ff       	call   c0010dbc <VgaText::VgaText(char const*)>
c001cc8d:	83 c4 10             	add    esp,0x10
c001cc90:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cc94:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001cc9a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cc9e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001cca4:	83 ec 0c             	sub    esp,0xc
c001cca7:	50                   	push   eax
c001cca8:	e8 02 35 ff ff       	call   c00101af <addToTerminalCycle(VgaText*)>
c001ccad:	83 c4 10             	add    esp,0x10
c001ccb0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ccb4:	05 0c 01 00 00       	add    eax,0x10c
c001ccb9:	83 ec 08             	sub    esp,0x8
c001ccbc:	68 84 a7 02 c0       	push   0xc002a784
c001ccc1:	50                   	push   eax
c001ccc2:	e8 63 3a fe ff       	call   c000072a <strcpy>
c001ccc7:	83 c4 10             	add    esp,0x10
c001ccca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ccce:	83 c0 0c             	add    eax,0xc
c001ccd1:	83 ec 08             	sub    esp,0x8
c001ccd4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001ccd8:	50                   	push   eax
c001ccd9:	e8 4c 3a fe ff       	call   c000072a <strcpy>
c001ccde:	83 c4 10             	add    esp,0x10
c001cce1:	83 ec 08             	sub    esp,0x8
c001cce4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001cce8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ccec:	e8 1d fc ff ff       	call   c001c90e <Process::addArgs(char**)>
c001ccf1:	83 c4 10             	add    esp,0x10
c001ccf4:	90                   	nop
c001ccf5:	83 c4 24             	add    esp,0x24
c001ccf8:	5b                   	pop    ebx
c001ccf9:	5e                   	pop    esi
c001ccfa:	c3                   	ret    

c001ccfb <disableIRQs()>:
c001ccfb:	fa                   	cli    
c001ccfc:	ff 05 6c de 02 c0    	inc    DWORD PTR ds:0xc002de6c
c001cd02:	c3                   	ret    

c001cd03 <getIRQNestingLevel()>:
c001cd03:	a1 6c de 02 c0       	mov    eax,ds:0xc002de6c
c001cd08:	c3                   	ret    

c001cd09 <enableIRQs()>:
c001cd09:	a1 6c de 02 c0       	mov    eax,ds:0xc002de6c
c001cd0e:	48                   	dec    eax
c001cd0f:	a3 6c de 02 c0       	mov    ds:0xc002de6c,eax
c001cd14:	75 01                	jne    c001cd17 <enableIRQs()+0xe>
c001cd16:	fb                   	sti    
c001cd17:	c3                   	ret    

c001cd18 <lockScheduler()>:
c001cd18:	eb e1                	jmp    c001ccfb <disableIRQs()>

c001cd1a <unlockScheduler()>:
c001cd1a:	eb ed                	jmp    c001cd09 <enableIRQs()>

c001cd1c <userModeEntryPoint(void*)>:
c001cd1c:	83 ec 0c             	sub    esp,0xc
c001cd1f:	e8 f6 ff ff ff       	call   c001cd1a <unlockScheduler()>
c001cd24:	fb                   	sti    
c001cd25:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cd2a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cd2d:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001cd33:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cd37:	83 c4 0c             	add    esp,0xc
c001cd3a:	e9 a0 35 fe ff       	jmp    c00002df <goToUsermode>

c001cd3f <lockStuff()>:
c001cd3f:	e8 b7 ff ff ff       	call   c001ccfb <disableIRQs()>
c001cd44:	ff 05 68 de 02 c0    	inc    DWORD PTR ds:0xc002de68
c001cd4a:	c3                   	ret    

c001cd4b <taskStartupFunction>:
c001cd4b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cd50:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001cd53:	c3                   	ret    

c001cd54 <updateTimeUsed()>:
c001cd54:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c001cd59:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001cd5f:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001cd66:	74 50                	je     c001cdb8 <updateTimeUsed()+0x64>
c001cd68:	57                   	push   edi
c001cd69:	56                   	push   esi
c001cd6a:	53                   	push   ebx
c001cd6b:	0f 31                	rdtsc  
c001cd6d:	89 c1                	mov    ecx,eax
c001cd6f:	a3 a8 de 02 c0       	mov    ds:0xc002dea8,eax
c001cd74:	2b 0d 98 de 02 c0    	sub    ecx,DWORD PTR ds:0xc002de98
c001cd7a:	89 d3                	mov    ebx,edx
c001cd7c:	89 0d a0 de 02 c0    	mov    DWORD PTR ds:0xc002dea0,ecx
c001cd82:	1b 1d 9c de 02 c0    	sbb    ebx,DWORD PTR ds:0xc002de9c
c001cd88:	a3 98 de 02 c0       	mov    ds:0xc002de98,eax
c001cd8d:	89 1d a4 de 02 c0    	mov    DWORD PTR ds:0xc002dea4,ebx
c001cd93:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cd98:	89 15 ac de 02 c0    	mov    DWORD PTR ds:0xc002deac,edx
c001cd9e:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001cda1:	89 15 9c de 02 c0    	mov    DWORD PTR ds:0xc002de9c,edx
c001cda7:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001cdaa:	01 f1                	add    ecx,esi
c001cdac:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001cdaf:	11 fb                	adc    ebx,edi
c001cdb1:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001cdb4:	5b                   	pop    ebx
c001cdb5:	5e                   	pop    esi
c001cdb6:	5f                   	pop    edi
c001cdb7:	c3                   	ret    
c001cdb8:	c3                   	ret    

c001cdb9 <switchToThread(ThreadControlBlock*)>:
c001cdb9:	53                   	push   ebx
c001cdba:	83 ec 08             	sub    esp,0x8
c001cdbd:	a1 68 de 02 c0       	mov    eax,ds:0xc002de68
c001cdc2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cdc6:	85 c0                	test   eax,eax
c001cdc8:	75 30                	jne    c001cdfa <switchToThread(ThreadControlBlock*)+0x41>
c001cdca:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001cdcd:	3c ff                	cmp    al,0xff
c001cdcf:	74 25                	je     c001cdf6 <switchToThread(ThreadControlBlock*)+0x3d>
c001cdd1:	0f b6 d0             	movzx  edx,al
c001cdd4:	b8 84 03 00 00       	mov    eax,0x384
c001cdd9:	29 d0                	sub    eax,edx
c001cddb:	c1 e0 10             	shl    eax,0x10
c001cdde:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001cde1:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001cde4:	e8 6b ff ff ff       	call   c001cd54 <updateTimeUsed()>
c001cde9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001cded:	83 c4 08             	add    esp,0x8
c001cdf0:	5b                   	pop    ebx
c001cdf1:	e9 21 35 fe ff       	jmp    c0000317 <switchToThreadASM>
c001cdf6:	31 c0                	xor    eax,eax
c001cdf8:	eb e7                	jmp    c001cde1 <switchToThread(ThreadControlBlock*)+0x28>
c001cdfa:	c7 05 64 de 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002de64,0x1
c001ce04:	83 c4 08             	add    esp,0x8
c001ce07:	5b                   	pop    ebx
c001ce08:	c3                   	ret    
c001ce09:	90                   	nop

c001ce0a <Semaphore::Semaphore(int)>:
c001ce0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce0e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ce12:	89 10                	mov    DWORD PTR [eax],edx
c001ce14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce18:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001ce1f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce23:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ce2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce2e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ce35:	90                   	nop
c001ce36:	c3                   	ret    
c001ce37:	90                   	nop

c001ce38 <Mutex::Mutex()>:
c001ce38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce3c:	6a 01                	push   0x1
c001ce3e:	50                   	push   eax
c001ce3f:	e8 c6 ff ff ff       	call   c001ce0a <Semaphore::Semaphore(int)>
c001ce44:	83 c4 08             	add    esp,0x8
c001ce47:	90                   	nop
c001ce48:	c3                   	ret    
c001ce49:	90                   	nop

c001ce4a <Process::createThread(void (*)(void*), void*, int)>:
c001ce4a:	55                   	push   ebp
c001ce4b:	31 c9                	xor    ecx,ecx
c001ce4d:	57                   	push   edi
c001ce4e:	56                   	push   esi
c001ce4f:	53                   	push   ebx
c001ce50:	83 ec 1c             	sub    esp,0x1c
c001ce53:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ce57:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001ce5e:	89 f2                	mov    edx,esi
c001ce60:	0f b7 c2             	movzx  eax,dx
c001ce63:	83 e2 01             	and    edx,0x1
c001ce66:	74 14                	je     c001ce7c <Process::createThread(void (*)(void*), void*, int)+0x32>
c001ce68:	d1 f8                	sar    eax,1
c001ce6a:	41                   	inc    ecx
c001ce6b:	89 c2                	mov    edx,eax
c001ce6d:	83 f9 10             	cmp    ecx,0x10
c001ce70:	75 ee                	jne    c001ce60 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001ce72:	83 c4 1c             	add    esp,0x1c
c001ce75:	31 c0                	xor    eax,eax
c001ce77:	5b                   	pop    ebx
c001ce78:	5e                   	pop    esi
c001ce79:	5f                   	pop    edi
c001ce7a:	5d                   	pop    ebp
c001ce7b:	c3                   	ret    
c001ce7c:	83 ec 08             	sub    esp,0x8
c001ce7f:	b8 01 00 00 00       	mov    eax,0x1
c001ce84:	d3 e0                	shl    eax,cl
c001ce86:	09 c6                	or     esi,eax
c001ce88:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001ce8e:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001ce95:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001ce98:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001ce9b:	01 ce                	add    esi,ecx
c001ce9d:	89 f0                	mov    eax,esi
c001ce9f:	c1 e0 05             	shl    eax,0x5
c001cea2:	01 c6                	add    esi,eax
c001cea4:	8d 04 33             	lea    eax,[ebx+esi*1]
c001cea7:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001cead:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001ceb3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001ceb7:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001cebd:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001cec3:	89 ca                	mov    edx,ecx
c001cec5:	f7 da                	neg    edx
c001cec7:	c1 e2 15             	shl    edx,0x15
c001ceca:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001ced0:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001ced6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001ceda:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001cee4:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001ceea:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001ceee:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001cef4:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001cefe:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001cf08:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001cf0f:	50                   	push   eax
c001cf10:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cf14:	68 88 de 02 c0       	push   0xc002de88
c001cf19:	e8 c2 a5 00 00       	call   c00274e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001cf1e:	83 c4 10             	add    esp,0x10
c001cf21:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cf25:	83 c4 1c             	add    esp,0x1c
c001cf28:	5b                   	pop    ebx
c001cf29:	5e                   	pop    esi
c001cf2a:	5f                   	pop    edi
c001cf2b:	5d                   	pop    ebp
c001cf2c:	c3                   	ret    
c001cf2d:	90                   	nop

c001cf2e <Process::createUserThread()>:
c001cf2e:	83 ec 0c             	sub    esp,0xc
c001cf31:	68 80 00 00 00       	push   0x80
c001cf36:	6a 00                	push   0x0
c001cf38:	68 1c cd 01 c0       	push   0xc001cd1c
c001cf3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf41:	e8 04 ff ff ff       	call   c001ce4a <Process::createThread(void (*)(void*), void*, int)>
c001cf46:	83 c4 1c             	add    esp,0x1c
c001cf49:	c3                   	ret    

c001cf4a <setupMultitasking(void (*)())>:
c001cf4a:	56                   	push   esi
c001cf4b:	53                   	push   ebx
c001cf4c:	53                   	push   ebx
c001cf4d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cf51:	eb 10                	jmp    c001cf63 <setupMultitasking(void (*)())+0x19>
c001cf53:	83 ec 0c             	sub    esp,0xc
c001cf56:	68 88 de 02 c0       	push   0xc002de88
c001cf5b:	e8 d2 a4 00 00       	call   c0027432 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001cf60:	83 c4 10             	add    esp,0x10
c001cf63:	83 ec 0c             	sub    esp,0xc
c001cf66:	68 88 de 02 c0       	push   0xc002de88
c001cf6b:	e8 a6 a4 00 00       	call   c0027416 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001cf70:	83 c4 10             	add    esp,0x10
c001cf73:	84 c0                	test   al,al
c001cf75:	74 dc                	je     c001cf53 <setupMultitasking(void (*)())+0x9>
c001cf77:	83 ec 0c             	sub    esp,0xc
c001cf7a:	68 3f 07 00 00       	push   0x73f
c001cf7f:	e8 50 25 ff ff       	call   c000f4d4 <malloc>
c001cf84:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001cf8b:	89 c3                	mov    ebx,eax
c001cf8d:	6a 00                	push   0x0
c001cf8f:	68 88 a7 02 c0       	push   0xc002a788
c001cf94:	6a 01                	push   0x1
c001cf96:	50                   	push   eax
c001cf97:	e8 b0 fb ff ff       	call   c001cb4c <Process::Process(bool, char const*, Process*, char**)>
c001cf9c:	83 c4 18             	add    esp,0x18
c001cf9f:	89 1d 94 de 02 c0    	mov    DWORD PTR ds:0xc002de94,ebx
c001cfa5:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001cfab:	68 a8 a8 02 c0       	push   0xc002a8a8
c001cfb0:	e8 ba 57 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001cfb5:	58                   	pop    eax
c001cfb6:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001cfbc:	e8 70 39 ff ff       	call   c0010931 <setActiveTerminal(VgaText*)>
c001cfc1:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001cfc9:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001cfcf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001cfd2:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001cfdc:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001cfe2:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001cfe8:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001cff2:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001cffc:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001d006:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001d00c:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001d012:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001d01c:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001d022:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001d02c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001d032:	5a                   	pop    edx
c001d033:	59                   	pop    ecx
c001d034:	68 84 a7 02 c0       	push   0xc002a784
c001d039:	50                   	push   eax
c001d03a:	e8 eb 36 fe ff       	call   c000072a <strcpy>
c001d03f:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001d046:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d04a:	83 c4 14             	add    esp,0x14
c001d04d:	5b                   	pop    ebx
c001d04e:	5e                   	pop    esi
c001d04f:	e9 b5 32 fe ff       	jmp    c0000309 <switchToThreadASMFirstTime>

c001d054 <schedule()>:
c001d054:	a1 68 de 02 c0       	mov    eax,ds:0xc002de68
c001d059:	85 c0                	test   eax,eax
c001d05b:	74 0b                	je     c001d068 <schedule()+0x14>
c001d05d:	c7 05 64 de 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002de64,0x1
c001d067:	c3                   	ret    
c001d068:	53                   	push   ebx
c001d069:	83 ec 14             	sub    esp,0x14
c001d06c:	68 88 de 02 c0       	push   0xc002de88
c001d071:	e8 a0 a3 00 00       	call   c0027416 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d076:	83 c4 10             	add    esp,0x10
c001d079:	84 c0                	test   al,al
c001d07b:	75 38                	jne    c001d0b5 <schedule()+0x61>
c001d07d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d082:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d085:	4a                   	dec    edx
c001d086:	74 32                	je     c001d0ba <schedule()+0x66>
c001d088:	83 ec 0c             	sub    esp,0xc
c001d08b:	68 88 de 02 c0       	push   0xc002de88
c001d090:	e8 79 a3 00 00       	call   c002740e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d095:	c7 04 24 88 de 02 c0 	mov    DWORD PTR [esp],0xc002de88
c001d09c:	89 c3                	mov    ebx,eax
c001d09e:	e8 8f a3 00 00       	call   c0027432 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d0a3:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001d0aa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d0ad:	e8 07 fd ff ff       	call   c001cdb9 <switchToThread(ThreadControlBlock*)>
c001d0b2:	83 c4 10             	add    esp,0x10
c001d0b5:	83 c4 08             	add    esp,0x8
c001d0b8:	5b                   	pop    ebx
c001d0b9:	c3                   	ret    
c001d0ba:	83 ec 08             	sub    esp,0x8
c001d0bd:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001d0c4:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001d0ca:	68 88 de 02 c0       	push   0xc002de88
c001d0cf:	e8 0c a4 00 00       	call   c00274e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d0d4:	83 c4 10             	add    esp,0x10
c001d0d7:	eb af                	jmp    c001d088 <schedule()+0x34>

c001d0d9 <unlockStuff()>:
c001d0d9:	a1 68 de 02 c0       	mov    eax,ds:0xc002de68
c001d0de:	48                   	dec    eax
c001d0df:	a3 68 de 02 c0       	mov    ds:0xc002de68,eax
c001d0e4:	75 09                	jne    c001d0ef <unlockStuff()+0x16>
c001d0e6:	a1 64 de 02 c0       	mov    eax,ds:0xc002de64
c001d0eb:	85 c0                	test   eax,eax
c001d0ed:	75 05                	jne    c001d0f4 <unlockStuff()+0x1b>
c001d0ef:	e9 15 fc ff ff       	jmp    c001cd09 <enableIRQs()>
c001d0f4:	83 ec 0c             	sub    esp,0xc
c001d0f7:	c7 05 64 de 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002de64,0x0
c001d101:	e8 4e ff ff ff       	call   c001d054 <schedule()>
c001d106:	83 c4 0c             	add    esp,0xc
c001d109:	e9 fb fb ff ff       	jmp    c001cd09 <enableIRQs()>

c001d10e <Semaphore::tryAcquire()>:
c001d10e:	83 ec 0c             	sub    esp,0xc
c001d111:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d115:	e8 25 fc ff ff       	call   c001cd3f <lockStuff()>
c001d11a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001d11d:	3b 10                	cmp    edx,DWORD PTR [eax]
c001d11f:	7c 0b                	jl     c001d12c <Semaphore::tryAcquire()+0x1e>
c001d121:	e8 b3 ff ff ff       	call   c001d0d9 <unlockStuff()>
c001d126:	31 c0                	xor    eax,eax
c001d128:	83 c4 0c             	add    esp,0xc
c001d12b:	c3                   	ret    
c001d12c:	42                   	inc    edx
c001d12d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d130:	e8 a4 ff ff ff       	call   c001d0d9 <unlockStuff()>
c001d135:	b0 01                	mov    al,0x1
c001d137:	83 c4 0c             	add    esp,0xc
c001d13a:	c3                   	ret    
c001d13b:	90                   	nop

c001d13c <Semaphore::assertLocked(char const*)>:
c001d13c:	83 ec 0c             	sub    esp,0xc
c001d13f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d143:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d147:	e8 f3 fb ff ff       	call   c001cd3f <lockStuff()>
c001d14c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d14e:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001d151:	7c 05                	jl     c001d158 <Semaphore::assertLocked(char const*)+0x1c>
c001d153:	83 c4 0c             	add    esp,0xc
c001d156:	eb 81                	jmp    c001d0d9 <unlockStuff()>
c001d158:	83 ec 0c             	sub    esp,0xc
c001d15b:	52                   	push   edx
c001d15c:	e8 28 c7 ff ff       	call   c0019889 <Krnl::panic(char const*)>
c001d161:	83 c4 10             	add    esp,0x10
c001d164:	83 c4 0c             	add    esp,0xc
c001d167:	e9 6d ff ff ff       	jmp    c001d0d9 <unlockStuff()>

c001d16c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001d16c:	83 ec 0c             	sub    esp,0xc
c001d16f:	e8 8f fb ff ff       	call   c001cd03 <getIRQNestingLevel()>
c001d174:	83 ec 08             	sub    esp,0x8
c001d177:	50                   	push   eax
c001d178:	68 dc a8 02 c0       	push   0xc002a8dc
c001d17d:	e8 ed 55 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001d182:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d186:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d18b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d18e:	e8 c1 fe ff ff       	call   c001d054 <schedule()>
c001d193:	e8 82 fb ff ff       	call   c001cd1a <unlockScheduler()>
c001d198:	e8 66 fb ff ff       	call   c001cd03 <getIRQNestingLevel()>
c001d19d:	5a                   	pop    edx
c001d19e:	59                   	pop    ecx
c001d19f:	50                   	push   eax
c001d1a0:	68 10 a9 02 c0       	push   0xc002a910
c001d1a5:	e8 c5 55 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001d1aa:	83 c4 1c             	add    esp,0x1c
c001d1ad:	c3                   	ret    

c001d1ae <blockTask(TaskState)>:
c001d1ae:	83 ec 0c             	sub    esp,0xc
c001d1b1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d1b5:	e8 5e fb ff ff       	call   c001cd18 <lockScheduler()>
c001d1ba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d1bf:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d1c2:	e8 8d fe ff ff       	call   c001d054 <schedule()>
c001d1c7:	83 c4 0c             	add    esp,0xc
c001d1ca:	e9 4b fb ff ff       	jmp    c001cd1a <unlockScheduler()>

c001d1cf <waitTask(int, int*, int)>:
c001d1cf:	83 ec 18             	sub    esp,0x18
c001d1d2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d1d7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d1db:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001d1de:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d1e2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d1e7:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001d1ea:	6a 07                	push   0x7
c001d1ec:	e8 bd ff ff ff       	call   c001d1ae <blockTask(TaskState)>
c001d1f1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d1f6:	83 c4 10             	add    esp,0x10
c001d1f9:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001d1fc:	85 d2                	test   edx,edx
c001d1fe:	74 0a                	je     c001d20a <waitTask(int, int*, int)+0x3b>
c001d200:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001d203:	89 02                	mov    DWORD PTR [edx],eax
c001d205:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d20a:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001d20d:	83 c4 0c             	add    esp,0xc
c001d210:	c3                   	ret    

c001d211 <nanoSleepUntil(unsigned long long)>:
c001d211:	83 ec 0c             	sub    esp,0xc
c001d214:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d218:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d21c:	3b 05 d0 cf 02 c0    	cmp    eax,DWORD PTR ds:0xc002cfd0
c001d222:	89 d1                	mov    ecx,edx
c001d224:	1b 0d d4 cf 02 c0    	sbb    ecx,DWORD PTR ds:0xc002cfd4
c001d22a:	73 04                	jae    c001d230 <nanoSleepUntil(unsigned long long)+0x1f>
c001d22c:	83 c4 0c             	add    esp,0xc
c001d22f:	c3                   	ret    
c001d230:	e8 0a fb ff ff       	call   c001cd3f <lockStuff()>
c001d235:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001d23b:	83 ec 08             	sub    esp,0x8
c001d23e:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001d241:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001d244:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001d24a:	68 7c de 02 c0       	push   0xc002de7c
c001d24f:	e8 8c a2 00 00       	call   c00274e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d254:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001d25b:	e8 4e ff ff ff       	call   c001d1ae <blockTask(TaskState)>
c001d260:	83 c4 1c             	add    esp,0x1c
c001d263:	e9 71 fe ff ff       	jmp    c001d0d9 <unlockStuff()>

c001d268 <nanoSleep(unsigned long long)>:
c001d268:	a1 d0 cf 02 c0       	mov    eax,ds:0xc002cfd0
c001d26d:	8b 15 d4 cf 02 c0    	mov    edx,DWORD PTR ds:0xc002cfd4
c001d273:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001d277:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001d27b:	eb 94                	jmp    c001d211 <nanoSleepUntil(unsigned long long)>

c001d27d <sleep(unsigned long long)>:
c001d27d:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001d285:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001d28a:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001d28e:	01 ca                	add    edx,ecx
c001d290:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d294:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001d298:	eb ce                	jmp    c001d268 <nanoSleep(unsigned long long)>

c001d29a <Semaphore::acquire()>:
c001d29a:	83 ec 0c             	sub    esp,0xc
c001d29d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2a1:	e8 99 fa ff ff       	call   c001cd3f <lockStuff()>
c001d2a6:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001d2a9:	3b 10                	cmp    edx,DWORD PTR [eax]
c001d2ab:	7d 0c                	jge    c001d2b9 <Semaphore::acquire()+0x1f>
c001d2ad:	42                   	inc    edx
c001d2ae:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d2b1:	83 c4 0c             	add    esp,0xc
c001d2b4:	e9 20 fe ff ff       	jmp    c001d0d9 <unlockStuff()>
c001d2b9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d2bf:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001d2c6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001d2c9:	85 d2                	test   edx,edx
c001d2cb:	74 2a                	je     c001d2f7 <Semaphore::acquire()+0x5d>
c001d2cd:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001d2d0:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001d2d6:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001d2d9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d2df:	83 ec 0c             	sub    esp,0xc
c001d2e2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d2e5:	6a 05                	push   0x5
c001d2e7:	e8 c2 fe ff ff       	call   c001d1ae <blockTask(TaskState)>
c001d2ec:	83 c4 10             	add    esp,0x10
c001d2ef:	83 c4 0c             	add    esp,0xc
c001d2f2:	e9 e2 fd ff ff       	jmp    c001d0d9 <unlockStuff()>
c001d2f7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d2fd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001d300:	eb d7                	jmp    c001d2d9 <Semaphore::acquire()+0x3f>

c001d302 <taskReturned>:
c001d302:	83 ec 18             	sub    esp,0x18
c001d305:	68 44 a9 02 c0       	push   0xc002a944
c001d30a:	e8 7a c5 ff ff       	call   c0019889 <Krnl::panic(char const*)>
c001d30f:	83 c4 10             	add    esp,0x10
c001d312:	83 ec 0c             	sub    esp,0xc
c001d315:	6a 02                	push   0x2
c001d317:	e8 92 fe ff ff       	call   c001d1ae <blockTask(TaskState)>
c001d31c:	e8 f7 f9 ff ff       	call   c001cd18 <lockScheduler()>
c001d321:	e8 2e fd ff ff       	call   c001d054 <schedule()>
c001d326:	e8 ef f9 ff ff       	call   c001cd1a <unlockScheduler()>
c001d32b:	83 c4 10             	add    esp,0x10
c001d32e:	eb e2                	jmp    c001d312 <taskReturned+0x10>

c001d330 <unblockTask(ThreadControlBlock*)>:
c001d330:	53                   	push   ebx
c001d331:	83 ec 08             	sub    esp,0x8
c001d334:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d338:	e8 db f9 ff ff       	call   c001cd18 <lockScheduler()>
c001d33d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001d340:	85 c0                	test   eax,eax
c001d342:	74 5c                	je     c001d3a0 <unblockTask(ThreadControlBlock*)+0x70>
c001d344:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001d347:	48                   	dec    eax
c001d348:	74 31                	je     c001d37b <unblockTask(ThreadControlBlock*)+0x4b>
c001d34a:	83 ec 0c             	sub    esp,0xc
c001d34d:	68 88 de 02 c0       	push   0xc002de88
c001d352:	e8 b7 a0 00 00       	call   c002740e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d357:	83 c4 10             	add    esp,0x10
c001d35a:	85 c0                	test   eax,eax
c001d35c:	75 17                	jne    c001d375 <unblockTask(ThreadControlBlock*)+0x45>
c001d35e:	eb 65                	jmp    c001d3c5 <unblockTask(ThreadControlBlock*)+0x95>
c001d360:	83 ec 08             	sub    esp,0x8
c001d363:	50                   	push   eax
c001d364:	68 88 de 02 c0       	push   0xc002de88
c001d369:	e8 7a a3 00 00       	call   c00276e8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001d36e:	83 c4 10             	add    esp,0x10
c001d371:	85 c0                	test   eax,eax
c001d373:	74 50                	je     c001d3c5 <unblockTask(ThreadControlBlock*)+0x95>
c001d375:	39 c3                	cmp    ebx,eax
c001d377:	75 e7                	jne    c001d360 <unblockTask(ThreadControlBlock*)+0x30>
c001d379:	eb 1c                	jmp    c001d397 <unblockTask(ThreadControlBlock*)+0x67>
c001d37b:	83 ec 0c             	sub    esp,0xc
c001d37e:	68 34 aa 02 c0       	push   0xc002aa34
c001d383:	e8 e7 53 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001d388:	c7 04 24 c0 a9 02 c0 	mov    DWORD PTR [esp],0xc002a9c0
c001d38f:	e8 db 53 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001d394:	83 c4 10             	add    esp,0x10
c001d397:	83 c4 08             	add    esp,0x8
c001d39a:	5b                   	pop    ebx
c001d39b:	e9 7a f9 ff ff       	jmp    c001cd1a <unlockScheduler()>
c001d3a0:	83 ec 0c             	sub    esp,0xc
c001d3a3:	68 78 a9 02 c0       	push   0xc002a978
c001d3a8:	e8 c2 53 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001d3ad:	c7 04 24 c0 a9 02 c0 	mov    DWORD PTR [esp],0xc002a9c0
c001d3b4:	e8 b6 53 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001d3b9:	83 c4 10             	add    esp,0x10
c001d3bc:	83 c4 08             	add    esp,0x8
c001d3bf:	5b                   	pop    ebx
c001d3c0:	e9 55 f9 ff ff       	jmp    c001cd1a <unlockScheduler()>
c001d3c5:	83 ec 08             	sub    esp,0x8
c001d3c8:	53                   	push   ebx
c001d3c9:	68 88 de 02 c0       	push   0xc002de88
c001d3ce:	e8 0d a1 00 00       	call   c00274e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d3d3:	83 c4 10             	add    esp,0x10
c001d3d6:	83 c4 08             	add    esp,0x8
c001d3d9:	5b                   	pop    ebx
c001d3da:	e9 3b f9 ff ff       	jmp    c001cd1a <unlockScheduler()>

c001d3df <cleanupTerminatedTask(ThreadControlBlock*)>:
c001d3df:	55                   	push   ebp
c001d3e0:	57                   	push   edi
c001d3e1:	56                   	push   esi
c001d3e2:	53                   	push   ebx
c001d3e3:	83 ec 1c             	sub    esp,0x1c
c001d3e6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d3ea:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d3ed:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001d3f3:	85 ff                	test   edi,edi
c001d3f5:	7e 20                	jle    c001d417 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001d3f7:	31 f6                	xor    esi,esi
c001d3f9:	83 ec 0c             	sub    esp,0xc
c001d3fc:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001d403:	46                   	inc    esi
c001d404:	e8 db 20 ff ff       	call   c000f4e4 <free>
c001d409:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d40c:	83 c4 10             	add    esp,0x10
c001d40f:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001d415:	7f e2                	jg     c001d3f9 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001d417:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d421:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001d426:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001d429:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001d42c:	d3 c0                	rol    eax,cl
c001d42e:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001d435:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d438:	89 f7                	mov    edi,esi
c001d43a:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001d442:	0f 85 74 01 00 00    	jne    c001d5bc <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001d448:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001d44e:	85 ed                	test   ebp,ebp
c001d450:	74 1b                	je     c001d46d <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001d452:	83 ec 0c             	sub    esp,0xc
c001d455:	55                   	push   ebp
c001d456:	e8 9b c1 ff ff       	call   c00195f6 <EnvVarContainer::~EnvVarContainer()>
c001d45b:	59                   	pop    ecx
c001d45c:	5e                   	pop    esi
c001d45d:	6a 0c                	push   0xc
c001d45f:	55                   	push   ebp
c001d460:	e8 2a 52 ff ff       	call   c001268f <operator delete(void*, unsigned long)>
c001d465:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d468:	83 c4 10             	add    esp,0x10
c001d46b:	89 f7                	mov    edi,esi
c001d46d:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001d473:	85 c0                	test   eax,eax
c001d475:	0f 84 aa 00 00 00    	je     c001d525 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001d47b:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001d47e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001d482:	31 c9                	xor    ecx,ecx
c001d484:	eb 10                	jmp    c001d496 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001d486:	41                   	inc    ecx
c001d487:	83 f9 10             	cmp    ecx,0x10
c001d48a:	0f 84 95 00 00 00    	je     c001d525 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001d490:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001d496:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001d49d:	d3 fa                	sar    edx,cl
c001d49f:	83 e2 01             	and    edx,0x1
c001d4a2:	74 e2                	je     c001d486 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001d4a4:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001d4a7:	01 ca                	add    edx,ecx
c001d4a9:	89 d5                	mov    ebp,edx
c001d4ab:	c1 e5 05             	shl    ebp,0x5
c001d4ae:	01 ea                	add    edx,ebp
c001d4b0:	01 d0                	add    eax,edx
c001d4b2:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001d4b8:	83 fd 07             	cmp    ebp,0x7
c001d4bb:	75 c9                	jne    c001d486 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001d4bd:	05 40 02 00 00       	add    eax,0x240
c001d4c2:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001d4c5:	83 fd ff             	cmp    ebp,0xffffffff
c001d4c8:	0f 8c 08 01 00 00    	jl     c001d5d6 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001d4ce:	0f 84 b9 01 00 00    	je     c001d68d <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001d4d4:	85 ed                	test   ebp,ebp
c001d4d6:	0f 84 a0 01 00 00    	je     c001d67c <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001d4dc:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001d4de:	75 a6                	jne    c001d486 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001d4e0:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001d4e6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d4ea:	01 d0                	add    eax,edx
c001d4ec:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001d4f0:	83 ec 0c             	sub    esp,0xc
c001d4f3:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001d4f9:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d4fc:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d502:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001d509:	50                   	push   eax
c001d50a:	e8 21 fe ff ff       	call   c001d330 <unblockTask(ThreadControlBlock*)>
c001d50f:	83 c4 10             	add    esp,0x10
c001d512:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d515:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d519:	89 f7                	mov    edi,esi
c001d51b:	41                   	inc    ecx
c001d51c:	83 f9 10             	cmp    ecx,0x10
c001d51f:	0f 85 6b ff ff ff    	jne    c001d490 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001d525:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001d52b:	85 c0                	test   eax,eax
c001d52d:	74 5d                	je     c001d58c <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001d52f:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001d535:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001d53b:	74 4f                	je     c001d58c <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001d53d:	83 ec 0c             	sub    esp,0xc
c001d540:	68 88 de 02 c0       	push   0xc002de88
c001d545:	e8 c4 9e 00 00       	call   c002740e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d54a:	c7 04 24 88 de 02 c0 	mov    DWORD PTR [esp],0xc002de88
c001d551:	89 c7                	mov    edi,eax
c001d553:	e8 be 9e 00 00       	call   c0027416 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d558:	83 c4 10             	add    esp,0x10
c001d55b:	84 c0                	test   al,al
c001d55d:	0f 84 e4 00 00 00    	je     c001d647 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001d563:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d566:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d56c:	85 d2                	test   edx,edx
c001d56e:	74 0f                	je     c001d57f <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001d570:	83 ec 0c             	sub    esp,0xc
c001d573:	8b 02                	mov    eax,DWORD PTR [edx]
c001d575:	52                   	push   edx
c001d576:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d579:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d57c:	83 c4 10             	add    esp,0x10
c001d57f:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001d589:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001d58c:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001d592:	85 db                	test   ebx,ebx
c001d594:	74 16                	je     c001d5ac <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001d596:	83 ec 0c             	sub    esp,0xc
c001d599:	53                   	push   ebx
c001d59a:	e8 3f 47 ff ff       	call   c0011cde <VAS::~VAS()>
c001d59f:	58                   	pop    eax
c001d5a0:	5a                   	pop    edx
c001d5a1:	6a 10                	push   0x10
c001d5a3:	53                   	push   ebx
c001d5a4:	e8 e6 50 ff ff       	call   c001268f <operator delete(void*, unsigned long)>
c001d5a9:	83 c4 10             	add    esp,0x10
c001d5ac:	83 ec 0c             	sub    esp,0xc
c001d5af:	68 8f a7 02 c0       	push   0xc002a78f
c001d5b4:	e8 b6 51 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001d5b9:	83 c4 10             	add    esp,0x10
c001d5bc:	83 ec 08             	sub    esp,0x8
c001d5bf:	68 3f 07 00 00       	push   0x73f
c001d5c4:	68 9d a7 02 c0       	push   0xc002a79d
c001d5c9:	e8 a1 51 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001d5ce:	83 c4 2c             	add    esp,0x2c
c001d5d1:	5b                   	pop    ebx
c001d5d2:	5e                   	pop    esi
c001d5d3:	5f                   	pop    edi
c001d5d4:	5d                   	pop    ebp
c001d5d5:	c3                   	ret    
c001d5d6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d5da:	83 ec 0c             	sub    esp,0xc
c001d5dd:	68 78 aa 02 c0       	push   0xc002aa78
c001d5e2:	e8 a2 c2 ff ff       	call   c0019889 <Krnl::panic(char const*)>
c001d5e7:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d5ea:	83 c4 10             	add    esp,0x10
c001d5ed:	89 f7                	mov    edi,esi
c001d5ef:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d5f3:	e9 8e fe ff ff       	jmp    c001d486 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001d5f8:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d5fe:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001d604:	75 1c                	jne    c001d622 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001d606:	83 ec 0c             	sub    esp,0xc
c001d609:	68 e0 aa 02 c0       	push   0xc002aae0
c001d60e:	e8 5c 51 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001d613:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001d61a:	e8 8f fb ff ff       	call   c001d1ae <blockTask(TaskState)>
c001d61f:	83 c4 10             	add    esp,0x10
c001d622:	83 ec 08             	sub    esp,0x8
c001d625:	56                   	push   esi
c001d626:	68 88 de 02 c0       	push   0xc002de88
c001d62b:	e8 b0 9e 00 00       	call   c00274e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d630:	c7 04 24 88 de 02 c0 	mov    DWORD PTR [esp],0xc002de88
c001d637:	e8 d2 9d 00 00       	call   c002740e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d63c:	83 c4 10             	add    esp,0x10
c001d63f:	39 f8                	cmp    eax,edi
c001d641:	0f 84 1c ff ff ff    	je     c001d563 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001d647:	83 ec 0c             	sub    esp,0xc
c001d64a:	68 88 de 02 c0       	push   0xc002de88
c001d64f:	e8 ba 9d 00 00       	call   c002740e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d654:	c7 04 24 88 de 02 c0 	mov    DWORD PTR [esp],0xc002de88
c001d65b:	89 c6                	mov    esi,eax
c001d65d:	e8 d0 9d 00 00       	call   c0027432 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d662:	83 c4 10             	add    esp,0x10
c001d665:	39 f3                	cmp    ebx,esi
c001d667:	74 b9                	je     c001d622 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001d669:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001d66c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d66f:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001d675:	75 ab                	jne    c001d622 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001d677:	e9 7c ff ff ff       	jmp    c001d5f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001d67c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d680:	83 ec 0c             	sub    esp,0xc
c001d683:	68 ac aa 02 c0       	push   0xc002aaac
c001d688:	e9 55 ff ff ff       	jmp    c001d5e2 <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001d68d:	8b 36                	mov    esi,DWORD PTR [esi]
c001d68f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d693:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001d696:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d699:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001d69f:	01 d7                	add    edi,edx
c001d6a1:	89 f8                	mov    eax,edi
c001d6a3:	e9 44 fe ff ff       	jmp    c001d4ec <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001d6a8 <cleanerTaskFunction(void*)>:
c001d6a8:	53                   	push   ebx
c001d6a9:	83 ec 08             	sub    esp,0x8
c001d6ac:	e8 69 f6 ff ff       	call   c001cd1a <unlockScheduler()>
c001d6b1:	e8 62 f6 ff ff       	call   c001cd18 <lockScheduler()>
c001d6b6:	80 3d 4c de 02 c0 00 	cmp    BYTE PTR ds:0xc002de4c,0x0
c001d6bd:	0f 85 8e 00 00 00    	jne    c001d751 <cleanerTaskFunction(void*)+0xa9>
c001d6c3:	83 ec 0c             	sub    esp,0xc
c001d6c6:	6a 02                	push   0x2
c001d6c8:	e8 9f fa ff ff       	call   c001d16c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001d6cd:	83 c4 10             	add    esp,0x10
c001d6d0:	c6 05 4c de 02 c0 00 	mov    BYTE PTR ds:0xc002de4c,0x0
c001d6d7:	e8 63 f6 ff ff       	call   c001cd3f <lockStuff()>
c001d6dc:	e8 37 f6 ff ff       	call   c001cd18 <lockScheduler()>
c001d6e1:	83 ec 0c             	sub    esp,0xc
c001d6e4:	68 70 de 02 c0       	push   0xc002de70
c001d6e9:	e8 28 9d 00 00       	call   c0027416 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d6ee:	83 c4 10             	add    esp,0x10
c001d6f1:	84 c0                	test   al,al
c001d6f3:	75 40                	jne    c001d735 <cleanerTaskFunction(void*)+0x8d>
c001d6f5:	83 ec 0c             	sub    esp,0xc
c001d6f8:	68 70 de 02 c0       	push   0xc002de70
c001d6fd:	e8 0c 9d 00 00       	call   c002740e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d702:	c7 04 24 70 de 02 c0 	mov    DWORD PTR [esp],0xc002de70
c001d709:	89 c3                	mov    ebx,eax
c001d70b:	e8 22 9d 00 00       	call   c0027432 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d710:	c7 04 24 b3 a7 02 c0 	mov    DWORD PTR [esp],0xc002a7b3
c001d717:	e8 53 50 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001d71c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d71f:	e8 bb fc ff ff       	call   c001d3df <cleanupTerminatedTask(ThreadControlBlock*)>
c001d724:	c7 04 24 cc a7 02 c0 	mov    DWORD PTR [esp],0xc002a7cc
c001d72b:	e8 3f 50 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001d730:	83 c4 10             	add    esp,0x10
c001d733:	eb ac                	jmp    c001d6e1 <cleanerTaskFunction(void*)+0x39>
c001d735:	e8 e0 f5 ff ff       	call   c001cd1a <unlockScheduler()>
c001d73a:	e8 9a f9 ff ff       	call   c001d0d9 <unlockStuff()>
c001d73f:	e8 d4 f5 ff ff       	call   c001cd18 <lockScheduler()>
c001d744:	80 3d 4c de 02 c0 00 	cmp    BYTE PTR ds:0xc002de4c,0x0
c001d74b:	0f 84 72 ff ff ff    	je     c001d6c3 <cleanerTaskFunction(void*)+0x1b>
c001d751:	e8 c4 f5 ff ff       	call   c001cd1a <unlockScheduler()>
c001d756:	e9 75 ff ff ff       	jmp    c001d6d0 <cleanerTaskFunction(void*)+0x28>

c001d75b <terminateTask(int)>:
c001d75b:	83 ec 14             	sub    esp,0x14
c001d75e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d763:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d766:	83 c0 0c             	add    eax,0xc
c001d769:	50                   	push   eax
c001d76a:	68 08 ab 02 c0       	push   0xc002ab08
c001d76f:	e8 fb 4f ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001d774:	e8 c6 f5 ff ff       	call   c001cd3f <lockStuff()>
c001d779:	e8 9a f5 ff ff       	call   c001cd18 <lockScheduler()>
c001d77e:	c7 04 24 df a7 02 c0 	mov    DWORD PTR [esp],0xc002a7df
c001d785:	e8 e5 4f ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001d78a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d78e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d793:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001d796:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d79b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001d79e:	5a                   	pop    edx
c001d79f:	59                   	pop    ecx
c001d7a0:	50                   	push   eax
c001d7a1:	68 70 de 02 c0       	push   0xc002de70
c001d7a6:	e8 35 9d 00 00       	call   c00274e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d7ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d7b0:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001d7b7:	c7 04 24 f9 a7 02 c0 	mov    DWORD PTR [esp],0xc002a7f9
c001d7be:	e8 ac 4f ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001d7c3:	83 c4 10             	add    esp,0x10
c001d7c6:	a1 48 de 02 c0       	mov    eax,ds:0xc002de48
c001d7cb:	85 c0                	test   eax,eax
c001d7cd:	74 5a                	je     c001d829 <terminateTask(int)+0xce>
c001d7cf:	83 ec 0c             	sub    esp,0xc
c001d7d2:	68 13 a8 02 c0       	push   0xc002a813
c001d7d7:	e8 93 4f ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001d7dc:	58                   	pop    eax
c001d7dd:	c6 05 4c de 02 c0 01 	mov    BYTE PTR ds:0xc002de4c,0x1
c001d7e4:	ff 35 48 de 02 c0    	push   DWORD PTR ds:0xc002de48
c001d7ea:	e8 41 fb ff ff       	call   c001d330 <unblockTask(ThreadControlBlock*)>
c001d7ef:	c7 04 24 2d a8 02 c0 	mov    DWORD PTR [esp],0xc002a82d
c001d7f6:	e8 74 4f ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001d7fb:	83 c4 10             	add    esp,0x10
c001d7fe:	e8 17 f5 ff ff       	call   c001cd1a <unlockScheduler()>
c001d803:	e8 d1 f8 ff ff       	call   c001d0d9 <unlockStuff()>
c001d808:	83 ec 0c             	sub    esp,0xc
c001d80b:	68 65 a8 02 c0       	push   0xc002a865
c001d810:	e8 5a 4f ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001d815:	83 c4 10             	add    esp,0x10
c001d818:	e8 fb f4 ff ff       	call   c001cd18 <lockScheduler()>
c001d81d:	e8 32 f8 ff ff       	call   c001d054 <schedule()>
c001d822:	e8 f3 f4 ff ff       	call   c001cd1a <unlockScheduler()>
c001d827:	eb ef                	jmp    c001d818 <terminateTask(int)+0xbd>
c001d829:	83 ec 0c             	sub    esp,0xc
c001d82c:	68 47 a8 02 c0       	push   0xc002a847
c001d831:	e8 39 4f ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001d836:	83 c4 10             	add    esp,0x10
c001d839:	eb c3                	jmp    c001d7fe <terminateTask(int)+0xa3>

c001d83b <Thr::terminateFromIRQ(int)>:
c001d83b:	83 ec 18             	sub    esp,0x18
c001d83e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d842:	e8 14 ff ff ff       	call   c001d75b <terminateTask(int)>
c001d847:	90                   	nop

c001d848 <Semaphore::release()>:
c001d848:	83 ec 0c             	sub    esp,0xc
c001d84b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d84f:	e8 eb f4 ff ff       	call   c001cd3f <lockStuff()>
c001d854:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001d857:	85 d2                	test   edx,edx
c001d859:	74 1a                	je     c001d875 <Semaphore::release()+0x2d>
c001d85b:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001d85e:	83 ec 0c             	sub    esp,0xc
c001d861:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001d864:	52                   	push   edx
c001d865:	e8 c6 fa ff ff       	call   c001d330 <unblockTask(ThreadControlBlock*)>
c001d86a:	83 c4 10             	add    esp,0x10
c001d86d:	83 c4 0c             	add    esp,0xc
c001d870:	e9 64 f8 ff ff       	jmp    c001d0d9 <unlockStuff()>
c001d875:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001d878:	83 c4 0c             	add    esp,0xc
c001d87b:	e9 59 f8 ff ff       	jmp    c001d0d9 <unlockStuff()>

c001d880 <__static_initialization_and_destruction_0(int, int)>:
c001d880:	83 ec 0c             	sub    esp,0xc
c001d883:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001d888:	0f 85 88 00 00 00    	jne    c001d916 <__static_initialization_and_destruction_0(int, int)+0x96>
c001d88e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001d896:	75 7e                	jne    c001d916 <__static_initialization_and_destruction_0(int, int)+0x96>
c001d898:	83 ec 0c             	sub    esp,0xc
c001d89b:	68 88 de 02 c0       	push   0xc002de88
c001d8a0:	e8 eb 9d 00 00       	call   c0027690 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001d8a5:	83 c4 10             	add    esp,0x10
c001d8a8:	83 ec 04             	sub    esp,0x4
c001d8ab:	68 68 b8 02 c0       	push   0xc002b868
c001d8b0:	68 88 de 02 c0       	push   0xc002de88
c001d8b5:	68 50 76 02 c0       	push   0xc0027650
c001d8ba:	e8 4a 4d ff ff       	call   c0012609 <__cxa_atexit>
c001d8bf:	83 c4 10             	add    esp,0x10
c001d8c2:	83 ec 0c             	sub    esp,0xc
c001d8c5:	68 7c de 02 c0       	push   0xc002de7c
c001d8ca:	e8 c1 9d 00 00       	call   c0027690 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001d8cf:	83 c4 10             	add    esp,0x10
c001d8d2:	83 ec 04             	sub    esp,0x4
c001d8d5:	68 68 b8 02 c0       	push   0xc002b868
c001d8da:	68 7c de 02 c0       	push   0xc002de7c
c001d8df:	68 50 76 02 c0       	push   0xc0027650
c001d8e4:	e8 20 4d ff ff       	call   c0012609 <__cxa_atexit>
c001d8e9:	83 c4 10             	add    esp,0x10
c001d8ec:	83 ec 0c             	sub    esp,0xc
c001d8ef:	68 70 de 02 c0       	push   0xc002de70
c001d8f4:	e8 97 9d 00 00       	call   c0027690 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001d8f9:	83 c4 10             	add    esp,0x10
c001d8fc:	83 ec 04             	sub    esp,0x4
c001d8ff:	68 68 b8 02 c0       	push   0xc002b868
c001d904:	68 70 de 02 c0       	push   0xc002de70
c001d909:	68 50 76 02 c0       	push   0xc0027650
c001d90e:	e8 f6 4c ff ff       	call   c0012609 <__cxa_atexit>
c001d913:	83 c4 10             	add    esp,0x10
c001d916:	90                   	nop
c001d917:	83 c4 0c             	add    esp,0xc
c001d91a:	c3                   	ret    

c001d91b <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001d91b:	83 ec 0c             	sub    esp,0xc
c001d91e:	83 ec 08             	sub    esp,0x8
c001d921:	68 ff ff 00 00       	push   0xffff
c001d926:	6a 01                	push   0x1
c001d928:	e8 53 ff ff ff       	call   c001d880 <__static_initialization_and_destruction_0(int, int)>
c001d92d:	83 c4 10             	add    esp,0x10
c001d930:	83 c4 0c             	add    esp,0xc
c001d933:	c3                   	ret    

c001d934 <Vm::inbv(unsigned short)>:
c001d934:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d938:	66 81 fa fe fe       	cmp    dx,0xfefe
c001d93d:	75 06                	jne    c001d945 <Vm::inbv(unsigned short)+0x11>
c001d93f:	a0 cc de 02 c0       	mov    al,ds:0xc002decc
c001d944:	c3                   	ret    
c001d945:	ec                   	in     al,dx
c001d946:	c3                   	ret    

c001d947 <Vm::outbv(unsigned short, unsigned char)>:
c001d947:	53                   	push   ebx
c001d948:	83 ec 08             	sub    esp,0x8
c001d94b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d94f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d953:	66 81 fa fe fe       	cmp    dx,0xfefe
c001d958:	75 38                	jne    c001d992 <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001d95a:	0f b6 c3             	movzx  eax,bl
c001d95d:	51                   	push   ecx
c001d95e:	51                   	push   ecx
c001d95f:	50                   	push   eax
c001d960:	68 27 ab 02 c0       	push   0xc002ab27
c001d965:	e8 05 4e ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001d96a:	8b 15 cc de 02 c0    	mov    edx,DWORD PTR ds:0xc002decc
c001d970:	83 c4 10             	add    esp,0x10
c001d973:	8d 42 01             	lea    eax,[edx+0x1]
c001d976:	88 9a e0 de 02 c0    	mov    BYTE PTR [edx-0x3ffd2120],bl
c001d97c:	a3 cc de 02 c0       	mov    ds:0xc002decc,eax
c001d981:	83 f8 20             	cmp    eax,0x20
c001d984:	75 0f                	jne    c001d995 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001d986:	c7 05 cc de 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002decc,0x1f
c001d990:	eb 03                	jmp    c001d995 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001d992:	88 d8                	mov    al,bl
c001d994:	ee                   	out    dx,al
c001d995:	83 c4 08             	add    esp,0x8
c001d998:	5b                   	pop    ebx
c001d999:	c3                   	ret    

c001d99a <Vm::realToLinear(unsigned short, unsigned short)>:
c001d99a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001d99f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001d9a4:	c1 e0 04             	shl    eax,0x4
c001d9a7:	01 d0                	add    eax,edx
c001d9a9:	c3                   	ret    

c001d9aa <Vm::getSegment(unsigned int)>:
c001d9aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d9ae:	c1 e8 10             	shr    eax,0x10
c001d9b1:	c3                   	ret    

c001d9b2 <Vm::getOffset(unsigned int)>:
c001d9b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d9b6:	c3                   	ret    

c001d9b7 <Vm::mainloop2()>:
c001d9b7:	83 ec 0c             	sub    esp,0xc
c001d9ba:	e8 59 f3 ff ff       	call   c001cd18 <lockScheduler()>
c001d9bf:	83 ec 0c             	sub    esp,0xc
c001d9c2:	c6 05 c5 de 02 c0 01 	mov    BYTE PTR ds:0xc002dec5,0x1
c001d9c9:	6a 02                	push   0x2
c001d9cb:	e8 9c f7 ff ff       	call   c001d16c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001d9d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d9d5:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001d9d9:	52                   	push   edx
c001d9da:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001d9de:	52                   	push   edx
c001d9df:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001d9e3:	52                   	push   edx
c001d9e4:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001d9e8:	50                   	push   eax
c001d9e9:	e8 c1 28 fe ff       	call   c00002af <goToVM86>
c001d9ee:	83 c4 2c             	add    esp,0x2c
c001d9f1:	c3                   	ret    

c001d9f2 <Vm::mainVm8086Loop(void*)>:
c001d9f2:	83 ec 0c             	sub    esp,0xc
c001d9f5:	e8 20 f3 ff ff       	call   c001cd1a <unlockScheduler()>
c001d9fa:	83 c4 0c             	add    esp,0xc
c001d9fd:	eb b8                	jmp    c001d9b7 <Vm::mainloop2()>

c001d9ff <Vm::mainloop3(unsigned long)>:
c001d9ff:	53                   	push   ebx
c001da00:	83 ec 08             	sub    esp,0x8
c001da03:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001da07:	e8 0c f3 ff ff       	call   c001cd18 <lockScheduler()>
c001da0c:	83 ec 0c             	sub    esp,0xc
c001da0f:	89 1d c0 de 02 c0    	mov    DWORD PTR ds:0xc002dec0,ebx
c001da15:	6a 02                	push   0x2
c001da17:	c6 05 c4 de 02 c0 01 	mov    BYTE PTR ds:0xc002dec4,0x1
c001da1e:	e8 49 f7 ff ff       	call   c001d16c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001da23:	83 c4 18             	add    esp,0x18
c001da26:	5b                   	pop    ebx
c001da27:	eb 8e                	jmp    c001d9b7 <Vm::mainloop2()>

c001da29 <Vm::initialise8086()>:
c001da29:	83 ec 0c             	sub    esp,0xc
c001da2c:	68 80 00 00 00       	push   0x80
c001da31:	6a 00                	push   0x0
c001da33:	68 f2 d9 01 c0       	push   0xc001d9f2
c001da38:	ff 35 94 de 02 c0    	push   DWORD PTR ds:0xc002de94
c001da3e:	e8 07 f4 ff ff       	call   c001ce4a <Process::createThread(void (*)(void*), void*, int)>
c001da43:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001da4a:	a3 c8 de 02 c0       	mov    ds:0xc002dec8,eax
c001da4f:	68 00 01 00 00       	push   0x100
c001da54:	a1 94 de 02 c0       	mov    eax,ds:0xc002de94
c001da59:	6a 00                	push   0x0
c001da5b:	6a 00                	push   0x0
c001da5d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001da63:	e8 d6 46 ff ff       	call   c001213e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001da68:	83 c4 2c             	add    esp,0x2c
c001da6b:	c3                   	ret    

c001da6c <Vm::finish8086()>:
c001da6c:	53                   	push   ebx
c001da6d:	83 ec 08             	sub    esp,0x8
c001da70:	e8 a3 f2 ff ff       	call   c001cd18 <lockScheduler()>
c001da75:	80 3d c4 de 02 c0 00 	cmp    BYTE PTR ds:0xc002dec4,0x0
c001da7c:	75 0c                	jne    c001da8a <Vm::finish8086()+0x1e>
c001da7e:	e8 d1 f5 ff ff       	call   c001d054 <schedule()>
c001da83:	e8 92 f2 ff ff       	call   c001cd1a <unlockScheduler()>
c001da88:	eb e6                	jmp    c001da70 <Vm::finish8086()+0x4>
c001da8a:	83 ec 0c             	sub    esp,0xc
c001da8d:	8b 1d c0 de 02 c0    	mov    ebx,DWORD PTR ds:0xc002dec0
c001da93:	ff 35 c8 de 02 c0    	push   DWORD PTR ds:0xc002dec8
c001da99:	c6 05 c4 de 02 c0 00 	mov    BYTE PTR ds:0xc002dec4,0x0
c001daa0:	e8 8b f8 ff ff       	call   c001d330 <unblockTask(ThreadControlBlock*)>
c001daa5:	e8 70 f2 ff ff       	call   c001cd1a <unlockScheduler()>
c001daaa:	89 d8                	mov    eax,ebx
c001daac:	83 c4 18             	add    esp,0x18
c001daaf:	5b                   	pop    ebx
c001dab0:	c3                   	ret    

c001dab1 <Vm::getOutput8086(unsigned char*)>:
c001dab1:	83 ec 10             	sub    esp,0x10
c001dab4:	ff 35 cc de 02 c0    	push   DWORD PTR ds:0xc002decc
c001daba:	68 e0 de 02 c0       	push   0xc002dee0
c001dabf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dac3:	e8 8d 2b fe ff       	call   c0000655 <memcpy>
c001dac8:	a1 cc de 02 c0       	mov    eax,ds:0xc002decc
c001dacd:	c7 05 cc de 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002decc,0x0
c001dad7:	83 c4 1c             	add    esp,0x1c
c001dada:	c3                   	ret    

c001dadb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001dadb:	55                   	push   ebp
c001dadc:	57                   	push   edi
c001dadd:	56                   	push   esi
c001dade:	53                   	push   ebx
c001dadf:	83 ec 2c             	sub    esp,0x2c
c001dae2:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001dae6:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001daea:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001daee:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001daf2:	e8 21 f2 ff ff       	call   c001cd18 <lockScheduler()>
c001daf7:	a0 c5 de 02 c0       	mov    al,ds:0xc002dec5
c001dafc:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001db00:	84 c0                	test   al,al
c001db02:	75 0c                	jne    c001db10 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001db04:	e8 4b f5 ff ff       	call   c001d054 <schedule()>
c001db09:	e8 0c f2 ff ff       	call   c001cd1a <unlockScheduler()>
c001db0e:	eb e2                	jmp    c001daf2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001db10:	a1 c8 de 02 c0       	mov    eax,ds:0xc002dec8
c001db15:	c7 05 cc de 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002decc,0x0
c001db1f:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001db23:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001db27:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001db2b:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001db2f:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001db33:	50                   	push   eax
c001db34:	6a 20                	push   0x20
c001db36:	6a 00                	push   0x0
c001db38:	68 e0 de 02 c0       	push   0xc002dee0
c001db3d:	e8 49 2b fe ff       	call   c000068b <memset>
c001db42:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001db49:	e8 86 19 ff ff       	call   c000f4d4 <malloc>
c001db4e:	83 c4 0c             	add    esp,0xc
c001db51:	89 c7                	mov    edi,eax
c001db53:	ff 35 94 de 02 c0    	push   DWORD PTR ds:0xc002de94
c001db59:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001db5d:	50                   	push   eax
c001db5e:	e8 3b 51 ff ff       	call   c0012c9e <File::File(char const*, Process*)>
c001db63:	83 c4 10             	add    esp,0x10
c001db66:	85 ff                	test   edi,edi
c001db68:	75 0a                	jne    c001db74 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001db6a:	83 ec 0c             	sub    esp,0xc
c001db6d:	68 43 ab 02 c0       	push   0xc002ab43
c001db72:	eb 27                	jmp    c001db9b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001db74:	50                   	push   eax
c001db75:	8d 44 24 17          	lea    eax,[esp+0x17]
c001db79:	50                   	push   eax
c001db7a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001db7e:	50                   	push   eax
c001db7f:	57                   	push   edi
c001db80:	e8 29 54 ff ff       	call   c0012fae <File::stat(unsigned long long*, bool*)>
c001db85:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001db8a:	83 c4 10             	add    esp,0x10
c001db8d:	89 e8                	mov    eax,ebp
c001db8f:	84 c0                	test   al,al
c001db91:	74 19                	je     c001dbac <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001db93:	83 ec 0c             	sub    esp,0xc
c001db96:	68 57 ab 02 c0       	push   0xc002ab57
c001db9b:	e8 e9 bc ff ff       	call   c0019889 <Krnl::panic(char const*)>
c001dba0:	31 ed                	xor    ebp,ebp
c001dba2:	e8 73 f1 ff ff       	call   c001cd1a <unlockScheduler()>
c001dba7:	83 c4 10             	add    esp,0x10
c001dbaa:	eb 75                	jmp    c001dc21 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001dbac:	50                   	push   eax
c001dbad:	50                   	push   eax
c001dbae:	6a 01                	push   0x1
c001dbb0:	57                   	push   edi
c001dbb1:	e8 4c 51 ff ff       	call   c0012d02 <File::open(FileOpenMode)>
c001dbb6:	83 c4 10             	add    esp,0x10
c001dbb9:	85 c0                	test   eax,eax
c001dbbb:	74 17                	je     c001dbd4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001dbbd:	83 ec 0c             	sub    esp,0xc
c001dbc0:	68 70 ab 02 c0       	push   0xc002ab70
c001dbc5:	e8 bf bc ff ff       	call   c0019889 <Krnl::panic(char const*)>
c001dbca:	e8 4b f1 ff ff       	call   c001cd1a <unlockScheduler()>
c001dbcf:	83 c4 10             	add    esp,0x10
c001dbd2:	eb 4d                	jmp    c001dc21 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001dbd4:	0f b7 f6             	movzx  esi,si
c001dbd7:	50                   	push   eax
c001dbd8:	0f b7 db             	movzx  ebx,bx
c001dbdb:	50                   	push   eax
c001dbdc:	56                   	push   esi
c001dbdd:	53                   	push   ebx
c001dbde:	e8 b7 fd ff ff       	call   c001d99a <Vm::realToLinear(unsigned short, unsigned short)>
c001dbe3:	5a                   	pop    edx
c001dbe4:	8b 17                	mov    edx,DWORD PTR [edi]
c001dbe6:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001dbea:	51                   	push   ecx
c001dbeb:	50                   	push   eax
c001dbec:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001dbf0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001dbf4:	57                   	push   edi
c001dbf5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001dbf8:	83 c4 14             	add    esp,0x14
c001dbfb:	57                   	push   edi
c001dbfc:	e8 5f 51 ff ff       	call   c0012d60 <File::close()>
c001dc01:	c6 05 c5 de 02 c0 00 	mov    BYTE PTR ds:0xc002dec5,0x0
c001dc08:	e8 0d f1 ff ff       	call   c001cd1a <unlockScheduler()>
c001dc0d:	59                   	pop    ecx
c001dc0e:	ff 35 c8 de 02 c0    	push   DWORD PTR ds:0xc002dec8
c001dc14:	e8 17 f7 ff ff       	call   c001d330 <unblockTask(ThreadControlBlock*)>
c001dc19:	83 c4 10             	add    esp,0x10
c001dc1c:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001dc21:	83 c4 2c             	add    esp,0x2c
c001dc24:	89 e8                	mov    eax,ebp
c001dc26:	5b                   	pop    ebx
c001dc27:	5e                   	pop    esi
c001dc28:	5f                   	pop    edi
c001dc29:	5d                   	pop    ebp
c001dc2a:	c3                   	ret    

c001dc2b <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001dc2b:	57                   	push   edi
c001dc2c:	56                   	push   esi
c001dc2d:	53                   	push   ebx
c001dc2e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dc32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc36:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001dc3a:	83 e8 06             	sub    eax,0x6
c001dc3d:	0f b7 c0             	movzx  eax,ax
c001dc40:	50                   	push   eax
c001dc41:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001dc46:	50                   	push   eax
c001dc47:	e8 4e fd ff ff       	call   c001d99a <Vm::realToLinear(unsigned short, unsigned short)>
c001dc4c:	5a                   	pop    edx
c001dc4d:	5e                   	pop    esi
c001dc4e:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001dc51:	8d 56 fa             	lea    edx,[esi-0x6]
c001dc54:	81 e2 ff ff 00 00    	and    edx,0xffff
c001dc5a:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001dc5d:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001dc60:	83 c2 02             	add    edx,0x2
c001dc63:	66 89 10             	mov    WORD PTR [eax],dx
c001dc66:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001dc69:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001dc6d:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001dc70:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001dc74:	89 d6                	mov    esi,edx
c001dc76:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001dc7c:	66 81 e6 ff fd       	and    si,0xfdff
c001dc81:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001dc85:	74 07                	je     c001dc8e <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001dc87:	89 d6                	mov    esi,edx
c001dc89:	66 81 ce 00 02       	or     si,0x200
c001dc8e:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001dc92:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dc97:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001dc9b:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001dca3:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001dca6:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001dcae:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001dcb1:	5b                   	pop    ebx
c001dcb2:	5e                   	pop    esi
c001dcb3:	5f                   	pop    edi
c001dcb4:	c3                   	ret    

c001dcb5 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001dcb5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001dcba:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001dcbf:	c1 e0 04             	shl    eax,0x4
c001dcc2:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001dcc5:	c3                   	ret    

c001dcc6 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001dcc6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001dccb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001dcd0:	c1 e0 04             	shl    eax,0x4
c001dcd3:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001dcd7:	c3                   	ret    

c001dcd8 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001dcd8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001dcdd:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001dce2:	c1 e0 04             	shl    eax,0x4
c001dce5:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001dce8:	c3                   	ret    

c001dce9 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001dce9:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001dcee:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001dcf3:	c1 e0 04             	shl    eax,0x4
c001dcf6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dcfa:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001dcfd:	c3                   	ret    

c001dcfe <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001dcfe:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001dd03:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001dd08:	c1 e0 04             	shl    eax,0x4
c001dd0b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dd0f:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001dd13:	c3                   	ret    

c001dd14 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001dd14:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001dd19:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001dd1e:	c1 e0 04             	shl    eax,0x4
c001dd21:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dd25:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001dd28:	c3                   	ret    

c001dd29 <Vm::faultHandler(regs*)>:
c001dd29:	55                   	push   ebp
c001dd2a:	57                   	push   edi
c001dd2b:	56                   	push   esi
c001dd2c:	53                   	push   ebx
c001dd2d:	83 ec 1c             	sub    esp,0x1c
c001dd30:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001dd34:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001dd37:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001dd3a:	0f b7 c1             	movzx  eax,cx
c001dd3d:	50                   	push   eax
c001dd3e:	0f b7 c3             	movzx  eax,bx
c001dd41:	c1 e3 04             	shl    ebx,0x4
c001dd44:	50                   	push   eax
c001dd45:	e8 50 fc ff ff       	call   c001d99a <Vm::realToLinear(unsigned short, unsigned short)>
c001dd4a:	5a                   	pop    edx
c001dd4b:	89 c5                	mov    ebp,eax
c001dd4d:	5e                   	pop    esi
c001dd4e:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001dd52:	50                   	push   eax
c001dd53:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001dd57:	50                   	push   eax
c001dd58:	e8 3d fc ff ff       	call   c001d99a <Vm::realToLinear(unsigned short, unsigned short)>
c001dd5d:	01 cb                	add    ebx,ecx
c001dd5f:	89 c6                	mov    esi,eax
c001dd61:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001dd65:	50                   	push   eax
c001dd66:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001dd6a:	50                   	push   eax
c001dd6b:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001dd6f:	50                   	push   eax
c001dd70:	55                   	push   ebp
c001dd71:	53                   	push   ebx
c001dd72:	b3 06                	mov    bl,0x6
c001dd74:	68 89 ab 02 c0       	push   0xc002ab89
c001dd79:	e8 f1 49 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001dd7e:	83 c4 20             	add    esp,0x20
c001dd81:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001dd86:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001dd8b:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001dd8f:	3c 9d                	cmp    al,0x9d
c001dd91:	0f 84 d7 02 00 00    	je     c001e06e <Vm::faultHandler(regs*)+0x345>
c001dd97:	0f 87 a3 00 00 00    	ja     c001de40 <Vm::faultHandler(regs*)+0x117>
c001dd9d:	3c 66                	cmp    al,0x66
c001dd9f:	0f 84 15 02 00 00    	je     c001dfba <Vm::faultHandler(regs*)+0x291>
c001dda5:	77 5f                	ja     c001de06 <Vm::faultHandler(regs*)+0xdd>
c001dda7:	3c 36                	cmp    al,0x36
c001dda9:	0f 84 f1 01 00 00    	je     c001dfa0 <Vm::faultHandler(regs*)+0x277>
c001ddaf:	77 28                	ja     c001ddd9 <Vm::faultHandler(regs*)+0xb0>
c001ddb1:	3c 26                	cmp    al,0x26
c001ddb3:	0f 84 99 01 00 00    	je     c001df52 <Vm::faultHandler(regs*)+0x229>
c001ddb9:	3c 2e                	cmp    al,0x2e
c001ddbb:	0f 85 3b 07 00 00    	jne    c001e4fc <Vm::faultHandler(regs*)+0x7d3>
c001ddc1:	83 ec 0c             	sub    esp,0xc
c001ddc4:	31 db                	xor    ebx,ebx
c001ddc6:	68 9e ab 02 c0       	push   0xc002ab9e
c001ddcb:	e8 9f 49 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001ddd0:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ddd3:	83 c4 10             	add    esp,0x10
c001ddd6:	45                   	inc    ebp
c001ddd7:	eb b2                	jmp    c001dd8b <Vm::faultHandler(regs*)+0x62>
c001ddd9:	3c 64                	cmp    al,0x64
c001dddb:	0f 84 8b 01 00 00    	je     c001df6c <Vm::faultHandler(regs*)+0x243>
c001dde1:	0f 87 9f 01 00 00    	ja     c001df86 <Vm::faultHandler(regs*)+0x25d>
c001dde7:	3c 3e                	cmp    al,0x3e
c001dde9:	0f 85 0d 07 00 00    	jne    c001e4fc <Vm::faultHandler(regs*)+0x7d3>
c001ddef:	83 ec 0c             	sub    esp,0xc
c001ddf2:	b3 01                	mov    bl,0x1
c001ddf4:	68 a2 ab 02 c0       	push   0xc002aba2
c001ddf9:	e8 71 49 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001ddfe:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001de01:	83 c4 10             	add    esp,0x10
c001de04:	eb d0                	jmp    c001ddd6 <Vm::faultHandler(regs*)+0xad>
c001de06:	3c 6d                	cmp    al,0x6d
c001de08:	0f 84 af 03 00 00    	je     c001e1bd <Vm::faultHandler(regs*)+0x494>
c001de0e:	77 15                	ja     c001de25 <Vm::faultHandler(regs*)+0xfc>
c001de10:	3c 67                	cmp    al,0x67
c001de12:	0f 84 bf 01 00 00    	je     c001dfd7 <Vm::faultHandler(regs*)+0x2ae>
c001de18:	3c 6c                	cmp    al,0x6c
c001de1a:	0f 84 3f 03 00 00    	je     c001e15f <Vm::faultHandler(regs*)+0x436>
c001de20:	e9 d7 06 00 00       	jmp    c001e4fc <Vm::faultHandler(regs*)+0x7d3>
c001de25:	3c 6f                	cmp    al,0x6f
c001de27:	0f 84 a4 04 00 00    	je     c001e2d1 <Vm::faultHandler(regs*)+0x5a8>
c001de2d:	0f 82 11 04 00 00    	jb     c001e244 <Vm::faultHandler(regs*)+0x51b>
c001de33:	3c 9c                	cmp    al,0x9c
c001de35:	0f 84 ba 01 00 00    	je     c001dff5 <Vm::faultHandler(regs*)+0x2cc>
c001de3b:	e9 bc 06 00 00       	jmp    c001e4fc <Vm::faultHandler(regs*)+0x7d3>
c001de40:	3c ec                	cmp    al,0xec
c001de42:	0f 84 24 06 00 00    	je     c001e46c <Vm::faultHandler(regs*)+0x743>
c001de48:	0f 87 93 00 00 00    	ja     c001dee1 <Vm::faultHandler(regs*)+0x1b8>
c001de4e:	3c e4                	cmp    al,0xe4
c001de50:	0f 84 5c 05 00 00    	je     c001e3b2 <Vm::faultHandler(regs*)+0x689>
c001de56:	77 6a                	ja     c001dec2 <Vm::faultHandler(regs*)+0x199>
c001de58:	3c cd                	cmp    al,0xcd
c001de5a:	0f 84 7e 02 00 00    	je     c001e0de <Vm::faultHandler(regs*)+0x3b5>
c001de60:	3c cf                	cmp    al,0xcf
c001de62:	0f 85 94 06 00 00    	jne    c001e4fc <Vm::faultHandler(regs*)+0x7d3>
c001de68:	83 ec 0c             	sub    esp,0xc
c001de6b:	68 e6 ab 02 c0       	push   0xc002abe6
c001de70:	e8 fa 48 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001de75:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001de78:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001de7b:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001de7f:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001de82:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001de86:	0d 00 02 02 00       	or     eax,0x20200
c001de8b:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001de8e:	56                   	push   esi
c001de8f:	53                   	push   ebx
c001de90:	52                   	push   edx
c001de91:	68 ec ab 02 c0       	push   0xc002abec
c001de96:	e8 d4 48 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001de9b:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001de9f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001dea5:	66 c1 e8 09          	shr    ax,0x9
c001dea9:	83 e0 01             	and    eax,0x1
c001deac:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001deaf:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001deb2:	83 c0 06             	add    eax,0x6
c001deb5:	25 ff ff 00 00       	and    eax,0xffff
c001deba:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001debd:	e9 95 02 00 00       	jmp    c001e157 <Vm::faultHandler(regs*)+0x42e>
c001dec2:	3c e6                	cmp    al,0xe6
c001dec4:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001dec8:	0f 84 4e 05 00 00    	je     c001e41c <Vm::faultHandler(regs*)+0x6f3>
c001dece:	0f 82 0a 05 00 00    	jb     c001e3de <Vm::faultHandler(regs*)+0x6b5>
c001ded4:	3c e7                	cmp    al,0xe7
c001ded6:	0f 84 69 05 00 00    	je     c001e445 <Vm::faultHandler(regs*)+0x71c>
c001dedc:	e9 1b 06 00 00       	jmp    c001e4fc <Vm::faultHandler(regs*)+0x7d3>
c001dee1:	3c ef                	cmp    al,0xef
c001dee3:	0f 84 e6 05 00 00    	je     c001e4cf <Vm::faultHandler(regs*)+0x7a6>
c001dee9:	77 37                	ja     c001df22 <Vm::faultHandler(regs*)+0x1f9>
c001deeb:	3c ed                	cmp    al,0xed
c001deed:	0f 84 a3 05 00 00    	je     c001e496 <Vm::faultHandler(regs*)+0x76d>
c001def3:	3c ee                	cmp    al,0xee
c001def5:	0f 85 01 06 00 00    	jne    c001e4fc <Vm::faultHandler(regs*)+0x7d3>
c001defb:	52                   	push   edx
c001defc:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001deff:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001df02:	68 87 ac 02 c0       	push   0xc002ac87
c001df07:	e8 63 48 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001df0c:	59                   	pop    ecx
c001df0d:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001df11:	5b                   	pop    ebx
c001df12:	50                   	push   eax
c001df13:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001df17:	50                   	push   eax
c001df18:	e8 2a fa ff ff       	call   c001d947 <Vm::outbv(unsigned short, unsigned char)>
c001df1d:	e9 a5 05 00 00       	jmp    c001e4c7 <Vm::faultHandler(regs*)+0x79e>
c001df22:	3c fa                	cmp    al,0xfa
c001df24:	0f 84 f7 01 00 00    	je     c001e121 <Vm::faultHandler(regs*)+0x3f8>
c001df2a:	3c fb                	cmp    al,0xfb
c001df2c:	0f 84 0a 02 00 00    	je     c001e13c <Vm::faultHandler(regs*)+0x413>
c001df32:	3c f3                	cmp    al,0xf3
c001df34:	0f 85 c2 05 00 00    	jne    c001e4fc <Vm::faultHandler(regs*)+0x7d3>
c001df3a:	83 ec 0c             	sub    esp,0xc
c001df3d:	68 bf ab 02 c0       	push   0xc002abbf
c001df42:	e8 28 48 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001df47:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001df4a:	83 c4 10             	add    esp,0x10
c001df4d:	e9 84 fe ff ff       	jmp    c001ddd6 <Vm::faultHandler(regs*)+0xad>
c001df52:	83 ec 0c             	sub    esp,0xc
c001df55:	b3 02                	mov    bl,0x2
c001df57:	68 9a ab 02 c0       	push   0xc002ab9a
c001df5c:	e8 0e 48 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001df61:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001df64:	83 c4 10             	add    esp,0x10
c001df67:	e9 6a fe ff ff       	jmp    c001ddd6 <Vm::faultHandler(regs*)+0xad>
c001df6c:	83 ec 0c             	sub    esp,0xc
c001df6f:	b3 03                	mov    bl,0x3
c001df71:	68 a6 ab 02 c0       	push   0xc002aba6
c001df76:	e8 f4 47 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001df7b:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001df7e:	83 c4 10             	add    esp,0x10
c001df81:	e9 50 fe ff ff       	jmp    c001ddd6 <Vm::faultHandler(regs*)+0xad>
c001df86:	83 ec 0c             	sub    esp,0xc
c001df89:	b3 04                	mov    bl,0x4
c001df8b:	68 aa ab 02 c0       	push   0xc002abaa
c001df90:	e8 da 47 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001df95:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001df98:	83 c4 10             	add    esp,0x10
c001df9b:	e9 36 fe ff ff       	jmp    c001ddd6 <Vm::faultHandler(regs*)+0xad>
c001dfa0:	83 ec 0c             	sub    esp,0xc
c001dfa3:	b3 05                	mov    bl,0x5
c001dfa5:	68 ae ab 02 c0       	push   0xc002abae
c001dfaa:	e8 c0 47 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001dfaf:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001dfb2:	83 c4 10             	add    esp,0x10
c001dfb5:	e9 1c fe ff ff       	jmp    c001ddd6 <Vm::faultHandler(regs*)+0xad>
c001dfba:	83 ec 0c             	sub    esp,0xc
c001dfbd:	68 b2 ab 02 c0       	push   0xc002abb2
c001dfc2:	e8 a8 47 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001dfc7:	83 c4 10             	add    esp,0x10
c001dfca:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001dfcd:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001dfd2:	e9 ff fd ff ff       	jmp    c001ddd6 <Vm::faultHandler(regs*)+0xad>
c001dfd7:	50                   	push   eax
c001dfd8:	50                   	push   eax
c001dfd9:	6a 01                	push   0x1
c001dfdb:	68 b7 ab 02 c0       	push   0xc002abb7
c001dfe0:	e8 8a 47 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001dfe5:	83 c4 10             	add    esp,0x10
c001dfe8:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001dfeb:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001dff0:	e9 e1 fd ff ff       	jmp    c001ddd6 <Vm::faultHandler(regs*)+0xad>
c001dff5:	83 ec 0c             	sub    esp,0xc
c001dff8:	68 c5 ab 02 c0       	push   0xc002abc5
c001dffd:	e8 6d 47 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001e002:	83 c4 10             	add    esp,0x10
c001e005:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001e008:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e00d:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001e010:	74 2f                	je     c001e041 <Vm::faultHandler(regs*)+0x318>
c001e012:	83 ea 04             	sub    edx,0x4
c001e015:	25 ff 0d 00 00       	and    eax,0xdff
c001e01a:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e020:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001e023:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001e026:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e02c:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001e030:	0f 84 bf 04 00 00    	je     c001e4f5 <Vm::faultHandler(regs*)+0x7cc>
c001e036:	80 cc 02             	or     ah,0x2
c001e039:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001e03c:	e9 b4 04 00 00       	jmp    c001e4f5 <Vm::faultHandler(regs*)+0x7cc>
c001e041:	83 ea 02             	sub    edx,0x2
c001e044:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e04a:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001e04d:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001e051:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e057:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001e05b:	74 05                	je     c001e062 <Vm::faultHandler(regs*)+0x339>
c001e05d:	80 cc 02             	or     ah,0x2
c001e060:	eb 03                	jmp    c001e065 <Vm::faultHandler(regs*)+0x33c>
c001e062:	80 e4 fd             	and    ah,0xfd
c001e065:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001e069:	e9 87 04 00 00       	jmp    c001e4f5 <Vm::faultHandler(regs*)+0x7cc>
c001e06e:	83 ec 0c             	sub    esp,0xc
c001e071:	68 cc ab 02 c0       	push   0xc002abcc
c001e076:	e8 f4 46 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001e07b:	83 c4 10             	add    esp,0x10
c001e07e:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e083:	74 28                	je     c001e0ad <Vm::faultHandler(regs*)+0x384>
c001e085:	8b 06                	mov    eax,DWORD PTR [esi]
c001e087:	25 ff 0d 00 00       	and    eax,0xdff
c001e08c:	0d 00 02 02 00       	or     eax,0x20200
c001e091:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001e094:	8b 06                	mov    eax,DWORD PTR [esi]
c001e096:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e09c:	c1 e8 09             	shr    eax,0x9
c001e09f:	83 e0 01             	and    eax,0x1
c001e0a2:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e0a5:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001e0a8:	83 c0 04             	add    eax,0x4
c001e0ab:	eb 24                	jmp    c001e0d1 <Vm::faultHandler(regs*)+0x3a8>
c001e0ad:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001e0b0:	0d 00 02 02 00       	or     eax,0x20200
c001e0b5:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001e0b8:	66 8b 06             	mov    ax,WORD PTR [esi]
c001e0bb:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e0c1:	66 c1 e8 09          	shr    ax,0x9
c001e0c5:	83 e0 01             	and    eax,0x1
c001e0c8:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e0cb:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001e0ce:	83 c0 02             	add    eax,0x2
c001e0d1:	25 ff ff 00 00       	and    eax,0xffff
c001e0d6:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001e0d9:	e9 17 04 00 00       	jmp    c001e4f5 <Vm::faultHandler(regs*)+0x7cc>
c001e0de:	53                   	push   ebx
c001e0df:	53                   	push   ebx
c001e0e0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e0e4:	50                   	push   eax
c001e0e5:	68 d2 ab 02 c0       	push   0xc002abd2
c001e0ea:	e8 80 46 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001e0ef:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e0f3:	83 c4 10             	add    esp,0x10
c001e0f6:	3c ee                	cmp    al,0xee
c001e0f8:	75 10                	jne    c001e10a <Vm::faultHandler(regs*)+0x3e1>
c001e0fa:	83 ec 0c             	sub    esp,0xc
c001e0fd:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e100:	e8 fa f8 ff ff       	call   c001d9ff <Vm::mainloop3(unsigned long)>
c001e105:	e9 c0 03 00 00       	jmp    c001e4ca <Vm::faultHandler(regs*)+0x7a1>
c001e10a:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001e10e:	83 ec 0c             	sub    esp,0xc
c001e111:	53                   	push   ebx
c001e112:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001e116:	53                   	push   ebx
c001e117:	55                   	push   ebp
c001e118:	50                   	push   eax
c001e119:	57                   	push   edi
c001e11a:	e8 0c fb ff ff       	call   c001dc2b <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001e11f:	eb 36                	jmp    c001e157 <Vm::faultHandler(regs*)+0x42e>
c001e121:	83 ec 0c             	sub    esp,0xc
c001e124:	68 dc ab 02 c0       	push   0xc002abdc
c001e129:	e8 41 46 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001e12e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e133:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e137:	e9 8b 03 00 00       	jmp    c001e4c7 <Vm::faultHandler(regs*)+0x79e>
c001e13c:	83 ec 0c             	sub    esp,0xc
c001e13f:	68 e1 ab 02 c0       	push   0xc002abe1
c001e144:	e8 26 46 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001e149:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e14e:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001e152:	e9 70 03 00 00       	jmp    c001e4c7 <Vm::faultHandler(regs*)+0x79e>
c001e157:	83 c4 20             	add    esp,0x20
c001e15a:	e9 99 03 00 00       	jmp    c001e4f8 <Vm::faultHandler(regs*)+0x7cf>
c001e15f:	83 ec 0c             	sub    esp,0xc
c001e162:	68 1f ac 02 c0       	push   0xc002ac1f
c001e167:	e8 03 46 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001e16c:	83 c4 10             	add    esp,0x10
c001e16f:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001e172:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e177:	74 0d                	je     c001e186 <Vm::faultHandler(regs*)+0x45d>
c001e179:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001e180:	0f 87 9e 01 00 00    	ja     c001e324 <Vm::faultHandler(regs*)+0x5fb>
c001e186:	83 ec 0c             	sub    esp,0xc
c001e189:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e18d:	0f b7 db             	movzx  ebx,bx
c001e190:	50                   	push   eax
c001e191:	e8 9e f7 ff ff       	call   c001d934 <Vm::inbv(unsigned short)>
c001e196:	83 c4 0c             	add    esp,0xc
c001e199:	0f b6 c0             	movzx  eax,al
c001e19c:	50                   	push   eax
c001e19d:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001e1a1:	50                   	push   eax
c001e1a2:	53                   	push   ebx
c001e1a3:	e8 41 fb ff ff       	call   c001dce9 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001e1a8:	83 c4 10             	add    esp,0x10
c001e1ab:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001e1ae:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e1b2:	74 03                	je     c001e1b7 <Vm::faultHandler(regs*)+0x48e>
c001e1b4:	48                   	dec    eax
c001e1b5:	eb 01                	jmp    c001e1b8 <Vm::faultHandler(regs*)+0x48f>
c001e1b7:	40                   	inc    eax
c001e1b8:	0f b7 c0             	movzx  eax,ax
c001e1bb:	eb 7f                	jmp    c001e23c <Vm::faultHandler(regs*)+0x513>
c001e1bd:	83 ec 0c             	sub    esp,0xc
c001e1c0:	68 51 ac 02 c0       	push   0xc002ac51
c001e1c5:	e8 a5 45 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001e1ca:	83 c4 10             	add    esp,0x10
c001e1cd:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001e1d0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e1d5:	74 0d                	je     c001e1e4 <Vm::faultHandler(regs*)+0x4bb>
c001e1d7:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001e1de:	0f 87 40 01 00 00    	ja     c001e324 <Vm::faultHandler(regs*)+0x5fb>
c001e1e4:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001e1e7:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001e1eb:	0f b7 db             	movzx  ebx,bx
c001e1ee:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e1f3:	74 20                	je     c001e215 <Vm::faultHandler(regs*)+0x4ec>
c001e1f5:	ed                   	in     eax,dx
c001e1f6:	51                   	push   ecx
c001e1f7:	50                   	push   eax
c001e1f8:	56                   	push   esi
c001e1f9:	53                   	push   ebx
c001e1fa:	e8 15 fb ff ff       	call   c001dd14 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001e1ff:	83 c4 10             	add    esp,0x10
c001e202:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001e205:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e209:	74 05                	je     c001e210 <Vm::faultHandler(regs*)+0x4e7>
c001e20b:	83 e8 04             	sub    eax,0x4
c001e20e:	eb 27                	jmp    c001e237 <Vm::faultHandler(regs*)+0x50e>
c001e210:	83 c0 04             	add    eax,0x4
c001e213:	eb 22                	jmp    c001e237 <Vm::faultHandler(regs*)+0x50e>
c001e215:	66 ed                	in     ax,dx
c001e217:	0f b7 c0             	movzx  eax,ax
c001e21a:	52                   	push   edx
c001e21b:	50                   	push   eax
c001e21c:	56                   	push   esi
c001e21d:	53                   	push   ebx
c001e21e:	e8 db fa ff ff       	call   c001dcfe <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001e223:	83 c4 10             	add    esp,0x10
c001e226:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001e229:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e22d:	74 05                	je     c001e234 <Vm::faultHandler(regs*)+0x50b>
c001e22f:	83 e8 02             	sub    eax,0x2
c001e232:	eb 03                	jmp    c001e237 <Vm::faultHandler(regs*)+0x50e>
c001e234:	83 c0 02             	add    eax,0x2
c001e237:	25 ff ff 00 00       	and    eax,0xffff
c001e23c:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001e23f:	e9 b1 02 00 00       	jmp    c001e4f5 <Vm::faultHandler(regs*)+0x7cc>
c001e244:	83 ec 0c             	sub    esp,0xc
c001e247:	4b                   	dec    ebx
c001e248:	68 57 ac 02 c0       	push   0xc002ac57
c001e24d:	e8 1d 45 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001e252:	83 c4 10             	add    esp,0x10
c001e255:	80 fb 05             	cmp    bl,0x5
c001e258:	77 0a                	ja     c001e264 <Vm::faultHandler(regs*)+0x53b>
c001e25a:	0f b6 db             	movzx  ebx,bl
c001e25d:	ff 24 9d c8 ac 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd5338]
c001e264:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001e268:	eb 1b                	jmp    c001e285 <Vm::faultHandler(regs*)+0x55c>
c001e26a:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001e26e:	eb 15                	jmp    c001e285 <Vm::faultHandler(regs*)+0x55c>
c001e270:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001e274:	eb 0f                	jmp    c001e285 <Vm::faultHandler(regs*)+0x55c>
c001e276:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001e27a:	eb 09                	jmp    c001e285 <Vm::faultHandler(regs*)+0x55c>
c001e27c:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001e27f:	eb 04                	jmp    c001e285 <Vm::faultHandler(regs*)+0x55c>
c001e281:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001e285:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e28a:	74 0d                	je     c001e299 <Vm::faultHandler(regs*)+0x570>
c001e28c:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001e293:	0f 87 8b 00 00 00    	ja     c001e324 <Vm::faultHandler(regs*)+0x5fb>
c001e299:	53                   	push   ebx
c001e29a:	53                   	push   ebx
c001e29b:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001e29f:	52                   	push   edx
c001e2a0:	50                   	push   eax
c001e2a1:	e8 0f fa ff ff       	call   c001dcb5 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001e2a6:	5e                   	pop    esi
c001e2a7:	0f b6 c0             	movzx  eax,al
c001e2aa:	5d                   	pop    ebp
c001e2ab:	50                   	push   eax
c001e2ac:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e2b0:	50                   	push   eax
c001e2b1:	e8 91 f6 ff ff       	call   c001d947 <Vm::outbv(unsigned short, unsigned char)>
c001e2b6:	83 c4 10             	add    esp,0x10
c001e2b9:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001e2bc:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e2c0:	74 03                	je     c001e2c5 <Vm::faultHandler(regs*)+0x59c>
c001e2c2:	48                   	dec    eax
c001e2c3:	eb 01                	jmp    c001e2c6 <Vm::faultHandler(regs*)+0x59d>
c001e2c5:	40                   	inc    eax
c001e2c6:	0f b7 c0             	movzx  eax,ax
c001e2c9:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001e2cc:	e9 24 02 00 00       	jmp    c001e4f5 <Vm::faultHandler(regs*)+0x7cc>
c001e2d1:	83 ec 0c             	sub    esp,0xc
c001e2d4:	4b                   	dec    ebx
c001e2d5:	68 57 ac 02 c0       	push   0xc002ac57
c001e2da:	e8 90 44 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001e2df:	83 c4 10             	add    esp,0x10
c001e2e2:	80 fb 05             	cmp    bl,0x5
c001e2e5:	77 0a                	ja     c001e2f1 <Vm::faultHandler(regs*)+0x5c8>
c001e2e7:	0f b6 db             	movzx  ebx,bl
c001e2ea:	ff 24 9d e0 ac 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd5320]
c001e2f1:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001e2f5:	eb 1b                	jmp    c001e312 <Vm::faultHandler(regs*)+0x5e9>
c001e2f7:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001e2fb:	eb 15                	jmp    c001e312 <Vm::faultHandler(regs*)+0x5e9>
c001e2fd:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001e301:	eb 0f                	jmp    c001e312 <Vm::faultHandler(regs*)+0x5e9>
c001e303:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001e307:	eb 09                	jmp    c001e312 <Vm::faultHandler(regs*)+0x5e9>
c001e309:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001e30c:	eb 04                	jmp    c001e312 <Vm::faultHandler(regs*)+0x5e9>
c001e30e:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001e312:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001e315:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e31a:	74 39                	je     c001e355 <Vm::faultHandler(regs*)+0x62c>
c001e31c:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001e322:	76 31                	jbe    c001e355 <Vm::faultHandler(regs*)+0x62c>
c001e324:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001e328:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001e32c:	51                   	push   ecx
c001e32d:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001e331:	51                   	push   ecx
c001e332:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001e336:	51                   	push   ecx
c001e337:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001e33b:	51                   	push   ecx
c001e33c:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e340:	52                   	push   edx
c001e341:	50                   	push   eax
c001e342:	50                   	push   eax
c001e343:	68 24 ac 02 c0       	push   0xc002ac24
c001e348:	e8 22 44 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001e34d:	83 c4 20             	add    esp,0x20
c001e350:	e9 fb 01 00 00       	jmp    c001e550 <Vm::faultHandler(regs*)+0x827>
c001e355:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001e358:	0f b7 d3             	movzx  edx,bx
c001e35b:	81 e6 00 04 00 00    	and    esi,0x400
c001e361:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001e364:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e369:	74 1d                	je     c001e388 <Vm::faultHandler(regs*)+0x65f>
c001e36b:	51                   	push   ecx
c001e36c:	51                   	push   ecx
c001e36d:	52                   	push   edx
c001e36e:	50                   	push   eax
c001e36f:	e8 64 f9 ff ff       	call   c001dcd8 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001e374:	83 c4 10             	add    esp,0x10
c001e377:	89 ea                	mov    edx,ebp
c001e379:	ef                   	out    dx,eax
c001e37a:	85 f6                	test   esi,esi
c001e37c:	74 05                	je     c001e383 <Vm::faultHandler(regs*)+0x65a>
c001e37e:	83 eb 04             	sub    ebx,0x4
c001e381:	eb 21                	jmp    c001e3a4 <Vm::faultHandler(regs*)+0x67b>
c001e383:	83 c3 04             	add    ebx,0x4
c001e386:	eb 1c                	jmp    c001e3a4 <Vm::faultHandler(regs*)+0x67b>
c001e388:	51                   	push   ecx
c001e389:	51                   	push   ecx
c001e38a:	52                   	push   edx
c001e38b:	50                   	push   eax
c001e38c:	e8 35 f9 ff ff       	call   c001dcc6 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001e391:	83 c4 10             	add    esp,0x10
c001e394:	89 ea                	mov    edx,ebp
c001e396:	66 ef                	out    dx,ax
c001e398:	85 f6                	test   esi,esi
c001e39a:	74 05                	je     c001e3a1 <Vm::faultHandler(regs*)+0x678>
c001e39c:	83 eb 02             	sub    ebx,0x2
c001e39f:	eb 03                	jmp    c001e3a4 <Vm::faultHandler(regs*)+0x67b>
c001e3a1:	83 c3 02             	add    ebx,0x2
c001e3a4:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001e3aa:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001e3ad:	e9 43 01 00 00       	jmp    c001e4f5 <Vm::faultHandler(regs*)+0x7cc>
c001e3b2:	53                   	push   ebx
c001e3b3:	53                   	push   ebx
c001e3b4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e3b8:	50                   	push   eax
c001e3b9:	68 5d ac 02 c0       	push   0xc002ac5d
c001e3be:	e8 ac 43 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001e3c3:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001e3ca:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e3ce:	89 04 24             	mov    DWORD PTR [esp],eax
c001e3d1:	e8 5e f5 ff ff       	call   c001d934 <Vm::inbv(unsigned short)>
c001e3d6:	0f b6 c0             	movzx  eax,al
c001e3d9:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001e3dc:	eb 5e                	jmp    c001e43c <Vm::faultHandler(regs*)+0x713>
c001e3de:	51                   	push   ecx
c001e3df:	51                   	push   ecx
c001e3e0:	53                   	push   ebx
c001e3e1:	68 63 ac 02 c0       	push   0xc002ac63
c001e3e6:	e8 84 43 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001e3eb:	83 c4 10             	add    esp,0x10
c001e3ee:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e3f3:	74 07                	je     c001e3fc <Vm::faultHandler(regs*)+0x6d3>
c001e3f5:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e3f9:	ed                   	in     eax,dx
c001e3fa:	eb 14                	jmp    c001e410 <Vm::faultHandler(regs*)+0x6e7>
c001e3fc:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001e3ff:	66 31 db             	xor    bx,bx
c001e402:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001e405:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e409:	66 ed                	in     ax,dx
c001e40b:	0f b7 c0             	movzx  eax,ax
c001e40e:	09 d8                	or     eax,ebx
c001e410:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001e413:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001e417:	e9 dc 00 00 00       	jmp    c001e4f8 <Vm::faultHandler(regs*)+0x7cf>
c001e41c:	50                   	push   eax
c001e41d:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e420:	53                   	push   ebx
c001e421:	68 69 ac 02 c0       	push   0xc002ac69
c001e426:	e8 44 43 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001e42b:	58                   	pop    eax
c001e42c:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001e430:	5a                   	pop    edx
c001e431:	50                   	push   eax
c001e432:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e436:	50                   	push   eax
c001e437:	e8 0b f5 ff ff       	call   c001d947 <Vm::outbv(unsigned short, unsigned char)>
c001e43c:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001e440:	e9 85 00 00 00       	jmp    c001e4ca <Vm::faultHandler(regs*)+0x7a1>
c001e445:	50                   	push   eax
c001e446:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e449:	53                   	push   ebx
c001e44a:	68 72 ac 02 c0       	push   0xc002ac72
c001e44f:	e8 1b 43 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001e454:	83 c4 10             	add    esp,0x10
c001e457:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e45b:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e460:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001e463:	74 03                	je     c001e468 <Vm::faultHandler(regs*)+0x73f>
c001e465:	ef                   	out    dx,eax
c001e466:	eb ab                	jmp    c001e413 <Vm::faultHandler(regs*)+0x6ea>
c001e468:	66 ef                	out    dx,ax
c001e46a:	eb a7                	jmp    c001e413 <Vm::faultHandler(regs*)+0x6ea>
c001e46c:	55                   	push   ebp
c001e46d:	55                   	push   ebp
c001e46e:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001e471:	68 7b ac 02 c0       	push   0xc002ac7b
c001e476:	e8 f4 42 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001e47b:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001e482:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e486:	89 04 24             	mov    DWORD PTR [esp],eax
c001e489:	e8 a6 f4 ff ff       	call   c001d934 <Vm::inbv(unsigned short)>
c001e48e:	0f b6 c0             	movzx  eax,al
c001e491:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001e494:	eb 31                	jmp    c001e4c7 <Vm::faultHandler(regs*)+0x79e>
c001e496:	56                   	push   esi
c001e497:	56                   	push   esi
c001e498:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001e49b:	68 81 ac 02 c0       	push   0xc002ac81
c001e4a0:	e8 ca 42 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001e4a5:	83 c4 10             	add    esp,0x10
c001e4a8:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001e4ab:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e4b0:	74 03                	je     c001e4b5 <Vm::faultHandler(regs*)+0x78c>
c001e4b2:	ed                   	in     eax,dx
c001e4b3:	eb 0d                	jmp    c001e4c2 <Vm::faultHandler(regs*)+0x799>
c001e4b5:	66 ed                	in     ax,dx
c001e4b7:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001e4ba:	0f b7 c0             	movzx  eax,ax
c001e4bd:	66 31 d2             	xor    dx,dx
c001e4c0:	09 d0                	or     eax,edx
c001e4c2:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001e4c5:	eb 2e                	jmp    c001e4f5 <Vm::faultHandler(regs*)+0x7cc>
c001e4c7:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e4ca:	83 c4 10             	add    esp,0x10
c001e4cd:	eb 29                	jmp    c001e4f8 <Vm::faultHandler(regs*)+0x7cf>
c001e4cf:	50                   	push   eax
c001e4d0:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e4d3:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001e4d6:	68 90 ac 02 c0       	push   0xc002ac90
c001e4db:	e8 8f 42 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001e4e0:	83 c4 10             	add    esp,0x10
c001e4e3:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001e4e6:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e4eb:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001e4ee:	74 03                	je     c001e4f3 <Vm::faultHandler(regs*)+0x7ca>
c001e4f0:	ef                   	out    dx,eax
c001e4f1:	eb 02                	jmp    c001e4f5 <Vm::faultHandler(regs*)+0x7cc>
c001e4f3:	66 ef                	out    dx,ax
c001e4f5:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e4f8:	b0 01                	mov    al,0x1
c001e4fa:	eb 56                	jmp    c001e552 <Vm::faultHandler(regs*)+0x829>
c001e4fc:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001e500:	51                   	push   ecx
c001e501:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001e505:	51                   	push   ecx
c001e506:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001e50a:	51                   	push   ecx
c001e50b:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001e50f:	51                   	push   ecx
c001e510:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e514:	52                   	push   edx
c001e515:	50                   	push   eax
c001e516:	50                   	push   eax
c001e517:	68 99 ac 02 c0       	push   0xc002ac99
c001e51c:	e8 4e 42 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001e521:	83 c4 20             	add    esp,0x20
c001e524:	83 ec 0c             	sub    esp,0xc
c001e527:	6a 60                	push   0x60
c001e529:	e8 06 f4 ff ff       	call   c001d934 <Vm::inbv(unsigned short)>
c001e52e:	83 c4 10             	add    esp,0x10
c001e531:	3c 1c                	cmp    al,0x1c
c001e533:	74 04                	je     c001e539 <Vm::faultHandler(regs*)+0x810>
c001e535:	3c 5a                	cmp    al,0x5a
c001e537:	75 eb                	jne    c001e524 <Vm::faultHandler(regs*)+0x7fb>
c001e539:	3c 1c                	cmp    al,0x1c
c001e53b:	74 04                	je     c001e541 <Vm::faultHandler(regs*)+0x818>
c001e53d:	3c 5a                	cmp    al,0x5a
c001e53f:	75 0f                	jne    c001e550 <Vm::faultHandler(regs*)+0x827>
c001e541:	83 ec 0c             	sub    esp,0xc
c001e544:	6a 60                	push   0x60
c001e546:	e8 e9 f3 ff ff       	call   c001d934 <Vm::inbv(unsigned short)>
c001e54b:	83 c4 10             	add    esp,0x10
c001e54e:	eb e9                	jmp    c001e539 <Vm::faultHandler(regs*)+0x810>
c001e550:	31 c0                	xor    eax,eax
c001e552:	83 c4 1c             	add    esp,0x1c
c001e555:	5b                   	pop    ebx
c001e556:	5e                   	pop    esi
c001e557:	5f                   	pop    edi
c001e558:	5d                   	pop    ebp
c001e559:	c3                   	ret    

c001e55a <Vm::fpuInternalTo32(unsigned long long)>:
c001e55a:	57                   	push   edi
c001e55b:	56                   	push   esi
c001e55c:	53                   	push   ebx
c001e55d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e561:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e565:	89 d6                	mov    esi,edx
c001e567:	89 d7                	mov    edi,edx
c001e569:	89 c1                	mov    ecx,eax
c001e56b:	c1 ef 14             	shr    edi,0x14
c001e56e:	89 d3                	mov    ebx,edx
c001e570:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001e576:	31 d2                	xor    edx,edx
c001e578:	89 f8                	mov    eax,edi
c001e57a:	81 e6 00 00 00 80    	and    esi,0x80000000
c001e580:	bf ff 00 00 00       	mov    edi,0xff
c001e585:	05 80 fc ff ff       	add    eax,0xfffffc80
c001e58a:	83 d2 ff             	adc    edx,0xffffffff
c001e58d:	39 c7                	cmp    edi,eax
c001e58f:	bf 00 00 00 00       	mov    edi,0x0
c001e594:	19 d7                	sbb    edi,edx
c001e596:	72 15                	jb     c001e5ad <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001e598:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001e59c:	c1 e0 17             	shl    eax,0x17
c001e59f:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001e5a5:	09 f1                	or     ecx,esi
c001e5a7:	09 c1                	or     ecx,eax
c001e5a9:	89 cf                	mov    edi,ecx
c001e5ab:	eb 02                	jmp    c001e5af <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001e5ad:	31 ff                	xor    edi,edi
c001e5af:	89 f8                	mov    eax,edi
c001e5b1:	5b                   	pop    ebx
c001e5b2:	5e                   	pop    esi
c001e5b3:	5f                   	pop    edi
c001e5b4:	c3                   	ret    

c001e5b5 <Vm::fpuInternalTo64(unsigned long long)>:
c001e5b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e5b9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e5bd:	c3                   	ret    

c001e5be <Vm::fpu32ToInternal(unsigned int)>:
c001e5be:	57                   	push   edi
c001e5bf:	31 ff                	xor    edi,edi
c001e5c1:	56                   	push   esi
c001e5c2:	53                   	push   ebx
c001e5c3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e5c7:	89 cb                	mov    ebx,ecx
c001e5c9:	89 ce                	mov    esi,ecx
c001e5cb:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001e5d1:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001e5d7:	c1 e9 17             	shr    ecx,0x17
c001e5da:	89 f0                	mov    eax,esi
c001e5dc:	0f b6 d1             	movzx  edx,cl
c001e5df:	81 c2 80 03 00 00    	add    edx,0x380
c001e5e5:	89 d1                	mov    ecx,edx
c001e5e7:	89 fa                	mov    edx,edi
c001e5e9:	c1 e1 14             	shl    ecx,0x14
c001e5ec:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001e5f0:	c1 e0 1d             	shl    eax,0x1d
c001e5f3:	89 d7                	mov    edi,edx
c001e5f5:	89 c6                	mov    esi,eax
c001e5f7:	89 ca                	mov    edx,ecx
c001e5f9:	89 f0                	mov    eax,esi
c001e5fb:	09 fa                	or     edx,edi
c001e5fd:	09 da                	or     edx,ebx
c001e5ff:	5b                   	pop    ebx
c001e600:	5e                   	pop    esi
c001e601:	5f                   	pop    edi
c001e602:	c3                   	ret    

c001e603 <Vm::fpu64ToInternal(unsigned long long)>:
c001e603:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e607:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e60b:	c3                   	ret    

c001e60c <Vm::fpuFloatToLong(unsigned long long)>:
c001e60c:	57                   	push   edi
c001e60d:	31 c0                	xor    eax,eax
c001e60f:	56                   	push   esi
c001e610:	31 d2                	xor    edx,edx
c001e612:	53                   	push   ebx
c001e613:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e617:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e61b:	89 d9                	mov    ecx,ebx
c001e61d:	c1 e9 14             	shr    ecx,0x14
c001e620:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001e626:	89 cf                	mov    edi,ecx
c001e628:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001e62e:	78 33                	js     c001e663 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001e630:	89 d9                	mov    ecx,ebx
c001e632:	89 f0                	mov    eax,esi
c001e634:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001e63a:	81 c9 00 00 10 00    	or     ecx,0x100000
c001e640:	89 ca                	mov    edx,ecx
c001e642:	b9 34 00 00 00       	mov    ecx,0x34
c001e647:	29 f9                	sub    ecx,edi
c001e649:	0f ad d0             	shrd   eax,edx,cl
c001e64c:	d3 fa                	sar    edx,cl
c001e64e:	f6 c1 20             	test   cl,0x20
c001e651:	74 05                	je     c001e658 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001e653:	89 d0                	mov    eax,edx
c001e655:	c1 fa 1f             	sar    edx,0x1f
c001e658:	85 db                	test   ebx,ebx
c001e65a:	79 07                	jns    c001e663 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001e65c:	f7 d8                	neg    eax
c001e65e:	83 d2 00             	adc    edx,0x0
c001e661:	f7 da                	neg    edx
c001e663:	5b                   	pop    ebx
c001e664:	5e                   	pop    esi
c001e665:	5f                   	pop    edi
c001e666:	c3                   	ret    

c001e667 <Vm::fpuULongToFloat(unsigned long long)>:
c001e667:	57                   	push   edi
c001e668:	31 c9                	xor    ecx,ecx
c001e66a:	56                   	push   esi
c001e66b:	53                   	push   ebx
c001e66c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e670:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001e674:	0f ba e7 14          	bt     edi,0x14
c001e678:	72 07                	jb     c001e681 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001e67a:	01 f6                	add    esi,esi
c001e67c:	11 ff                	adc    edi,edi
c001e67e:	41                   	inc    ecx
c001e67f:	eb f3                	jmp    c001e674 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001e681:	89 fa                	mov    edx,edi
c001e683:	89 f0                	mov    eax,esi
c001e685:	bb 33 04 00 00       	mov    ebx,0x433
c001e68a:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001e690:	29 cb                	sub    ebx,ecx
c001e692:	89 d9                	mov    ecx,ebx
c001e694:	5b                   	pop    ebx
c001e695:	c1 e1 14             	shl    ecx,0x14
c001e698:	5e                   	pop    esi
c001e699:	09 ca                	or     edx,ecx
c001e69b:	5f                   	pop    edi
c001e69c:	c3                   	ret    

c001e69d <Vm::fpuLongToFloat(long long)>:
c001e69d:	56                   	push   esi
c001e69e:	31 c0                	xor    eax,eax
c001e6a0:	53                   	push   ebx
c001e6a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e6a5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e6a9:	39 c8                	cmp    eax,ecx
c001e6ab:	19 d8                	sbb    eax,ebx
c001e6ad:	7d 04                	jge    c001e6b3 <Vm::fpuLongToFloat(long long)+0x16>
c001e6af:	31 f6                	xor    esi,esi
c001e6b1:	eb 0c                	jmp    c001e6bf <Vm::fpuLongToFloat(long long)+0x22>
c001e6b3:	f7 d9                	neg    ecx
c001e6b5:	be 01 00 00 00       	mov    esi,0x1
c001e6ba:	83 d3 00             	adc    ebx,0x0
c001e6bd:	f7 db                	neg    ebx
c001e6bf:	31 c0                	xor    eax,eax
c001e6c1:	0f ba e3 14          	bt     ebx,0x14
c001e6c5:	72 07                	jb     c001e6ce <Vm::fpuLongToFloat(long long)+0x31>
c001e6c7:	01 c9                	add    ecx,ecx
c001e6c9:	11 db                	adc    ebx,ebx
c001e6cb:	40                   	inc    eax
c001e6cc:	eb f3                	jmp    c001e6c1 <Vm::fpuLongToFloat(long long)+0x24>
c001e6ce:	ba 33 04 00 00       	mov    edx,0x433
c001e6d3:	29 c2                	sub    edx,eax
c001e6d5:	89 c8                	mov    eax,ecx
c001e6d7:	c1 e2 14             	shl    edx,0x14
c001e6da:	89 d9                	mov    ecx,ebx
c001e6dc:	89 f3                	mov    ebx,esi
c001e6de:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001e6e4:	09 ca                	or     edx,ecx
c001e6e6:	84 db                	test   bl,bl
c001e6e8:	74 06                	je     c001e6f0 <Vm::fpuLongToFloat(long long)+0x53>
c001e6ea:	81 ca 00 00 00 80    	or     edx,0x80000000
c001e6f0:	5b                   	pop    ebx
c001e6f1:	5e                   	pop    esi
c001e6f2:	c3                   	ret    

c001e6f3 <Vm::fpuGet0()>:
c001e6f3:	31 c0                	xor    eax,eax
c001e6f5:	31 d2                	xor    edx,edx
c001e6f7:	c3                   	ret    

c001e6f8 <Vm::fpuGet1()>:
c001e6f8:	b8 01 00 00 00       	mov    eax,0x1
c001e6fd:	31 d2                	xor    edx,edx
c001e6ff:	c3                   	ret    

c001e700 <Vm::fpuGetPi()>:
c001e700:	b8 03 00 00 00       	mov    eax,0x3
c001e705:	31 d2                	xor    edx,edx
c001e707:	c3                   	ret    

c001e708 <Vm::fpuGetLog2E()>:
c001e708:	83 ec 18             	sub    esp,0x18
c001e70b:	68 f8 ac 02 c0       	push   0xc002acf8
c001e710:	e8 74 b1 ff ff       	call   c0019889 <Krnl::panic(char const*)>
c001e715:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001e71a:	31 d2                	xor    edx,edx
c001e71c:	83 c4 1c             	add    esp,0x1c
c001e71f:	c3                   	ret    

c001e720 <Vm::fpuGetLogE2()>:
c001e720:	83 ec 18             	sub    esp,0x18
c001e723:	68 04 ad 02 c0       	push   0xc002ad04
c001e728:	e8 5c b1 ff ff       	call   c0019889 <Krnl::panic(char const*)>
c001e72d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001e732:	31 d2                	xor    edx,edx
c001e734:	83 c4 1c             	add    esp,0x1c
c001e737:	c3                   	ret    

c001e738 <Vm::fpuGetLog210()>:
c001e738:	83 ec 18             	sub    esp,0x18
c001e73b:	68 10 ad 02 c0       	push   0xc002ad10
c001e740:	e8 44 b1 ff ff       	call   c0019889 <Krnl::panic(char const*)>
c001e745:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001e74a:	31 d2                	xor    edx,edx
c001e74c:	83 c4 1c             	add    esp,0x1c
c001e74f:	c3                   	ret    

c001e750 <Vm::fpuGetLog102()>:
c001e750:	83 ec 18             	sub    esp,0x18
c001e753:	68 1d ad 02 c0       	push   0xc002ad1d
c001e758:	e8 2c b1 ff ff       	call   c0019889 <Krnl::panic(char const*)>
c001e75d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001e762:	31 d2                	xor    edx,edx
c001e764:	83 c4 1c             	add    esp,0x1c
c001e767:	c3                   	ret    

c001e768 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001e768:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e76c:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001e770:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e774:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001e778:	0f 92 c0             	setb   al
c001e77b:	c3                   	ret    

c001e77c <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001e77c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e780:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e784:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001e788:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001e78c:	09 c2                	or     edx,eax
c001e78e:	0f 94 c0             	sete   al
c001e791:	c3                   	ret    

c001e792 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001e792:	57                   	push   edi
c001e793:	56                   	push   esi
c001e794:	53                   	push   ebx
c001e795:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e799:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e79d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001e7a1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001e7a5:	57                   	push   edi
c001e7a6:	56                   	push   esi
c001e7a7:	53                   	push   ebx
c001e7a8:	51                   	push   ecx
c001e7a9:	e8 ce ff ff ff       	call   c001e77c <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001e7ae:	83 c4 10             	add    esp,0x10
c001e7b1:	88 c2                	mov    dl,al
c001e7b3:	31 c0                	xor    eax,eax
c001e7b5:	84 d2                	test   dl,dl
c001e7b7:	75 0c                	jne    c001e7c5 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001e7b9:	57                   	push   edi
c001e7ba:	56                   	push   esi
c001e7bb:	53                   	push   ebx
c001e7bc:	51                   	push   ecx
c001e7bd:	e8 a6 ff ff ff       	call   c001e768 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001e7c2:	83 c4 10             	add    esp,0x10
c001e7c5:	83 e0 01             	and    eax,0x1
c001e7c8:	5b                   	pop    ebx
c001e7c9:	88 c1                	mov    cl,al
c001e7cb:	83 e2 01             	and    edx,0x1
c001e7ce:	a0 01 df 02 c0       	mov    al,ds:0xc002df01
c001e7d3:	c1 e2 06             	shl    edx,0x6
c001e7d6:	83 e0 ba             	and    eax,0xffffffba
c001e7d9:	5e                   	pop    esi
c001e7da:	09 c8                	or     eax,ecx
c001e7dc:	5f                   	pop    edi
c001e7dd:	09 d0                	or     eax,edx
c001e7df:	a2 01 df 02 c0       	mov    ds:0xc002df01,al
c001e7e4:	c3                   	ret    

c001e7e5 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001e7e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e7e9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e7ed:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001e7f1:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001e7f5:	c3                   	ret    

c001e7f6 <Vm::fpuAbs(unsigned long long)>:
c001e7f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e7fa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e7fe:	c3                   	ret    

c001e7ff <Vm::fpuChs(unsigned long long)>:
c001e7ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e803:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e807:	f7 d8                	neg    eax
c001e809:	83 d2 00             	adc    edx,0x0
c001e80c:	f7 da                	neg    edx
c001e80e:	c3                   	ret    

c001e80f <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001e80f:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001e813:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001e818:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001e81c:	eb c7                	jmp    c001e7e5 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001e81e <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001e81e:	53                   	push   ebx
c001e81f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e823:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e827:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e82b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e82f:	0f af ca             	imul   ecx,edx
c001e832:	0f af d8             	imul   ebx,eax
c001e835:	f7 e2                	mul    edx
c001e837:	01 d9                	add    ecx,ebx
c001e839:	5b                   	pop    ebx
c001e83a:	01 ca                	add    edx,ecx
c001e83c:	c3                   	ret    

c001e83d <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001e83d:	83 ec 0c             	sub    esp,0xc
c001e840:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e844:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e848:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e84c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e850:	e8 47 6b 00 00       	call   c002539c <__udivdi3>
c001e855:	83 c4 1c             	add    esp,0x1c
c001e858:	c3                   	ret    

c001e859 <Vm::fpuSquare(unsigned long long)>:
c001e859:	50                   	push   eax
c001e85a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e85e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e862:	52                   	push   edx
c001e863:	50                   	push   eax
c001e864:	52                   	push   edx
c001e865:	50                   	push   eax
c001e866:	e8 b3 ff ff ff       	call   c001e81e <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001e86b:	83 c4 14             	add    esp,0x14
c001e86e:	c3                   	ret    

c001e86f <Vm::fpuGetReg(int)>:
c001e86f:	83 ec 0c             	sub    esp,0xc
c001e872:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001e877:	76 10                	jbe    c001e889 <Vm::fpuGetReg(int)+0x1a>
c001e879:	83 ec 0c             	sub    esp,0xc
c001e87c:	68 2a ad 02 c0       	push   0xc002ad2a
c001e881:	e8 03 b0 ff ff       	call   c0019889 <Krnl::panic(char const*)>
c001e886:	83 c4 10             	add    esp,0x10
c001e889:	a0 01 df 02 c0       	mov    al,ds:0xc002df01
c001e88e:	b9 08 00 00 00       	mov    ecx,0x8
c001e893:	c0 e8 03             	shr    al,0x3
c001e896:	83 e0 07             	and    eax,0x7
c001e899:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e89d:	99                   	cdq    
c001e89e:	f7 f9                	idiv   ecx
c001e8a0:	8b 04 d5 04 df 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd20fc]
c001e8a7:	8b 14 d5 08 df 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd20f8]
c001e8ae:	83 c4 0c             	add    esp,0xc
c001e8b1:	c3                   	ret    

c001e8b2 <Vm::fpuSetReg(int, unsigned long long)>:
c001e8b2:	57                   	push   edi
c001e8b3:	56                   	push   esi
c001e8b4:	52                   	push   edx
c001e8b5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001e8b9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001e8bd:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001e8c2:	76 10                	jbe    c001e8d4 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001e8c4:	83 ec 0c             	sub    esp,0xc
c001e8c7:	68 3d ad 02 c0       	push   0xc002ad3d
c001e8cc:	e8 b8 af ff ff       	call   c0019889 <Krnl::panic(char const*)>
c001e8d1:	83 c4 10             	add    esp,0x10
c001e8d4:	a0 01 df 02 c0       	mov    al,ds:0xc002df01
c001e8d9:	b9 08 00 00 00       	mov    ecx,0x8
c001e8de:	c0 e8 03             	shr    al,0x3
c001e8e1:	83 e0 07             	and    eax,0x7
c001e8e4:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e8e8:	99                   	cdq    
c001e8e9:	f7 f9                	idiv   ecx
c001e8eb:	89 34 d5 04 df 02 c0 	mov    DWORD PTR [edx*8-0x3ffd20fc],esi
c001e8f2:	89 3c d5 08 df 02 c0 	mov    DWORD PTR [edx*8-0x3ffd20f8],edi
c001e8f9:	58                   	pop    eax
c001e8fa:	5e                   	pop    esi
c001e8fb:	5f                   	pop    edi
c001e8fc:	c3                   	ret    

c001e8fd <Vm::fpuPush(unsigned long long)>:
c001e8fd:	a0 01 df 02 c0       	mov    al,ds:0xc002df01
c001e902:	c0 e8 03             	shr    al,0x3
c001e905:	83 e0 07             	and    eax,0x7
c001e908:	83 c0 07             	add    eax,0x7
c001e90b:	88 c2                	mov    dl,al
c001e90d:	83 e0 07             	and    eax,0x7
c001e910:	83 e2 07             	and    edx,0x7
c001e913:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001e91a:	8a 15 01 df 02 c0    	mov    dl,BYTE PTR ds:0xc002df01
c001e920:	83 e2 c7             	and    edx,0xffffffc7
c001e923:	09 ca                	or     edx,ecx
c001e925:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e929:	88 15 01 df 02 c0    	mov    BYTE PTR ds:0xc002df01,dl
c001e92f:	89 0c c5 08 df 02 c0 	mov    DWORD PTR [eax*8-0x3ffd20f8],ecx
c001e936:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e93a:	89 14 c5 04 df 02 c0 	mov    DWORD PTR [eax*8-0x3ffd20fc],edx
c001e941:	a1 44 df 02 c0       	mov    eax,ds:0xc002df44
c001e946:	83 f8 08             	cmp    eax,0x8
c001e949:	75 08                	jne    c001e953 <Vm::fpuPush(unsigned long long)+0x56>
c001e94b:	80 0d 00 df 02 c0 40 	or     BYTE PTR ds:0xc002df00,0x40
c001e952:	c3                   	ret    
c001e953:	40                   	inc    eax
c001e954:	a3 44 df 02 c0       	mov    ds:0xc002df44,eax
c001e959:	c3                   	ret    

c001e95a <Vm::fpuPop()>:
c001e95a:	8a 0d 01 df 02 c0    	mov    cl,BYTE PTR ds:0xc002df01
c001e960:	53                   	push   ebx
c001e961:	c0 e9 03             	shr    cl,0x3
c001e964:	8a 1d 01 df 02 c0    	mov    bl,BYTE PTR ds:0xc002df01
c001e96a:	83 e1 07             	and    ecx,0x7
c001e96d:	83 e3 c7             	and    ebx,0xffffffc7
c001e970:	8b 04 cd 04 df 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd20fc]
c001e977:	8b 14 cd 08 df 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd20f8]
c001e97e:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001e985:	83 e1 38             	and    ecx,0x38
c001e988:	09 d9                	or     ecx,ebx
c001e98a:	88 0d 01 df 02 c0    	mov    BYTE PTR ds:0xc002df01,cl
c001e990:	8b 0d 44 df 02 c0    	mov    ecx,DWORD PTR ds:0xc002df44
c001e996:	85 c9                	test   ecx,ecx
c001e998:	74 09                	je     c001e9a3 <Vm::fpuPop()+0x49>
c001e99a:	49                   	dec    ecx
c001e99b:	89 0d 44 df 02 c0    	mov    DWORD PTR ds:0xc002df44,ecx
c001e9a1:	eb 07                	jmp    c001e9aa <Vm::fpuPop()+0x50>
c001e9a3:	80 0d 00 df 02 c0 40 	or     BYTE PTR ds:0xc002df00,0x40
c001e9aa:	5b                   	pop    ebx
c001e9ab:	c3                   	ret    

c001e9ac <Vm::x87Handler(regs*)>:
c001e9ac:	55                   	push   ebp
c001e9ad:	57                   	push   edi
c001e9ae:	56                   	push   esi
c001e9af:	53                   	push   ebx
c001e9b0:	83 ec 1c             	sub    esp,0x1c
c001e9b3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e9b7:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001e9bc:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001e9bf:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001e9c7:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001e9cb:	50                   	push   eax
c001e9cc:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001e9d0:	50                   	push   eax
c001e9d1:	8d 44 24 14          	lea    eax,[esp+0x14]
c001e9d5:	50                   	push   eax
c001e9d6:	53                   	push   ebx
c001e9d7:	e8 de a6 ff ff       	call   c00190ba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001e9dc:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001e9df:	83 c4 10             	add    esp,0x10
c001e9e2:	89 c6                	mov    esi,eax
c001e9e4:	80 fa d9             	cmp    dl,0xd9
c001e9e7:	0f 85 52 01 00 00    	jne    c001eb3f <Vm::x87Handler(regs*)+0x193>
c001e9ed:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e9f1:	8d 50 20             	lea    edx,[eax+0x20]
c001e9f4:	80 fa 0e             	cmp    dl,0xe
c001e9f7:	0f 87 86 00 00 00    	ja     c001ea83 <Vm::x87Handler(regs*)+0xd7>
c001e9fd:	0f b6 d2             	movzx  edx,dl
c001ea00:	ff 24 95 50 ad 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd52b0]
c001ea07:	e8 e7 fc ff ff       	call   c001e6f3 <Vm::fpuGet0()>
c001ea0c:	eb 05                	jmp    c001ea13 <Vm::x87Handler(regs*)+0x67>
c001ea0e:	e8 e5 fc ff ff       	call   c001e6f8 <Vm::fpuGet1()>
c001ea13:	57                   	push   edi
c001ea14:	57                   	push   edi
c001ea15:	52                   	push   edx
c001ea16:	50                   	push   eax
c001ea17:	e8 e1 fe ff ff       	call   c001e8fd <Vm::fpuPush(unsigned long long)>
c001ea1c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ea20:	83 c4 10             	add    esp,0x10
c001ea23:	b0 01                	mov    al,0x1
c001ea25:	e9 e3 09 00 00       	jmp    c001f40d <Vm::x87Handler(regs*)+0xa61>
c001ea2a:	83 ec 0c             	sub    esp,0xc
c001ea2d:	6a 00                	push   0x0
c001ea2f:	e8 3b fe ff ff       	call   c001e86f <Vm::fpuGetReg(int)>
c001ea34:	59                   	pop    ecx
c001ea35:	5e                   	pop    esi
c001ea36:	52                   	push   edx
c001ea37:	50                   	push   eax
c001ea38:	e8 c2 fd ff ff       	call   c001e7ff <Vm::fpuChs(unsigned long long)>
c001ea3d:	eb 13                	jmp    c001ea52 <Vm::x87Handler(regs*)+0xa6>
c001ea3f:	83 ec 0c             	sub    esp,0xc
c001ea42:	6a 00                	push   0x0
c001ea44:	e8 26 fe ff ff       	call   c001e86f <Vm::fpuGetReg(int)>
c001ea49:	5f                   	pop    edi
c001ea4a:	5d                   	pop    ebp
c001ea4b:	52                   	push   edx
c001ea4c:	50                   	push   eax
c001ea4d:	e8 a4 fd ff ff       	call   c001e7f6 <Vm::fpuAbs(unsigned long long)>
c001ea52:	83 c4 0c             	add    esp,0xc
c001ea55:	52                   	push   edx
c001ea56:	50                   	push   eax
c001ea57:	6a 00                	push   0x0
c001ea59:	e8 54 fe ff ff       	call   c001e8b2 <Vm::fpuSetReg(int, unsigned long long)>
c001ea5e:	eb bc                	jmp    c001ea1c <Vm::x87Handler(regs*)+0x70>
c001ea60:	e8 d3 fc ff ff       	call   c001e738 <Vm::fpuGetLog210()>
c001ea65:	eb ac                	jmp    c001ea13 <Vm::x87Handler(regs*)+0x67>
c001ea67:	e8 9c fc ff ff       	call   c001e708 <Vm::fpuGetLog2E()>
c001ea6c:	eb a5                	jmp    c001ea13 <Vm::x87Handler(regs*)+0x67>
c001ea6e:	e8 8d fc ff ff       	call   c001e700 <Vm::fpuGetPi()>
c001ea73:	eb 9e                	jmp    c001ea13 <Vm::x87Handler(regs*)+0x67>
c001ea75:	e8 d6 fc ff ff       	call   c001e750 <Vm::fpuGetLog102()>
c001ea7a:	eb 97                	jmp    c001ea13 <Vm::x87Handler(regs*)+0x67>
c001ea7c:	e8 9f fc ff ff       	call   c001e720 <Vm::fpuGetLogE2()>
c001ea81:	eb 90                	jmp    c001ea13 <Vm::x87Handler(regs*)+0x67>
c001ea83:	8d 50 40             	lea    edx,[eax+0x40]
c001ea86:	80 fa 07             	cmp    dl,0x7
c001ea89:	77 15                	ja     c001eaa0 <Vm::x87Handler(regs*)+0xf4>
c001ea8b:	83 ec 0c             	sub    esp,0xc
c001ea8e:	2d c0 00 00 00       	sub    eax,0xc0
c001ea93:	50                   	push   eax
c001ea94:	e8 d6 fd ff ff       	call   c001e86f <Vm::fpuGetReg(int)>
c001ea99:	59                   	pop    ecx
c001ea9a:	5e                   	pop    esi
c001ea9b:	e9 75 ff ff ff       	jmp    c001ea15 <Vm::x87Handler(regs*)+0x69>
c001eaa0:	8d 50 38             	lea    edx,[eax+0x38]
c001eaa3:	80 fa 07             	cmp    dl,0x7
c001eaa6:	77 3c                	ja     c001eae4 <Vm::x87Handler(regs*)+0x138>
c001eaa8:	83 ec 0c             	sub    esp,0xc
c001eaab:	2d c8 00 00 00       	sub    eax,0xc8
c001eab0:	50                   	push   eax
c001eab1:	e8 b9 fd ff ff       	call   c001e86f <Vm::fpuGetReg(int)>
c001eab6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001eabd:	89 c6                	mov    esi,eax
c001eabf:	89 d7                	mov    edi,edx
c001eac1:	e8 a9 fd ff ff       	call   c001e86f <Vm::fpuGetReg(int)>
c001eac6:	83 c4 0c             	add    esp,0xc
c001eac9:	52                   	push   edx
c001eaca:	50                   	push   eax
c001eacb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001eacf:	2d c8 00 00 00       	sub    eax,0xc8
c001ead4:	50                   	push   eax
c001ead5:	e8 d8 fd ff ff       	call   c001e8b2 <Vm::fpuSetReg(int, unsigned long long)>
c001eada:	83 c4 0c             	add    esp,0xc
c001eadd:	57                   	push   edi
c001eade:	56                   	push   esi
c001eadf:	e9 73 ff ff ff       	jmp    c001ea57 <Vm::x87Handler(regs*)+0xab>
c001eae4:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001eae8:	84 d2                	test   dl,dl
c001eaea:	75 0f                	jne    c001eafb <Vm::x87Handler(regs*)+0x14f>
c001eaec:	83 ec 0c             	sub    esp,0xc
c001eaef:	ff 36                	push   DWORD PTR [esi]
c001eaf1:	e8 c8 fa ff ff       	call   c001e5be <Vm::fpu32ToInternal(unsigned int)>
c001eaf6:	e9 bf 00 00 00       	jmp    c001ebba <Vm::x87Handler(regs*)+0x20e>
c001eafb:	80 fa 03             	cmp    dl,0x3
c001eafe:	75 13                	jne    c001eb13 <Vm::x87Handler(regs*)+0x167>
c001eb00:	e8 55 fe ff ff       	call   c001e95a <Vm::fpuPop()>
c001eb05:	55                   	push   ebp
c001eb06:	55                   	push   ebp
c001eb07:	52                   	push   edx
c001eb08:	50                   	push   eax
c001eb09:	e8 4c fa ff ff       	call   c001e55a <Vm::fpuInternalTo32(unsigned long long)>
c001eb0e:	e9 88 00 00 00       	jmp    c001eb9b <Vm::x87Handler(regs*)+0x1ef>
c001eb13:	80 fa 05             	cmp    dl,0x5
c001eb16:	75 0e                	jne    c001eb26 <Vm::x87Handler(regs*)+0x17a>
c001eb18:	66 8b 06             	mov    ax,WORD PTR [esi]
c001eb1b:	66 a3 02 df 02 c0    	mov    ds:0xc002df02,ax
c001eb21:	e9 df 00 00 00       	jmp    c001ec05 <Vm::x87Handler(regs*)+0x259>
c001eb26:	31 c0                	xor    eax,eax
c001eb28:	80 fa 07             	cmp    dl,0x7
c001eb2b:	0f 85 dc 08 00 00    	jne    c001f40d <Vm::x87Handler(regs*)+0xa61>
c001eb31:	66 a1 02 df 02 c0    	mov    ax,ds:0xc002df02
c001eb37:	66 89 06             	mov    WORD PTR [esi],ax
c001eb3a:	e9 c6 00 00 00       	jmp    c001ec05 <Vm::x87Handler(regs*)+0x259>
c001eb3f:	80 fa d8             	cmp    dl,0xd8
c001eb42:	0f 84 c9 00 00 00    	je     c001ec11 <Vm::x87Handler(regs*)+0x265>
c001eb48:	80 fa dc             	cmp    dl,0xdc
c001eb4b:	0f 84 0d 02 00 00    	je     c001ed5e <Vm::x87Handler(regs*)+0x3b2>
c001eb51:	80 fa de             	cmp    dl,0xde
c001eb54:	0f 84 cd 02 00 00    	je     c001ee27 <Vm::x87Handler(regs*)+0x47b>
c001eb5a:	80 fa dd             	cmp    dl,0xdd
c001eb5d:	0f 84 5f 04 00 00    	je     c001efc2 <Vm::x87Handler(regs*)+0x616>
c001eb63:	80 fa da             	cmp    dl,0xda
c001eb66:	0f 84 24 05 00 00    	je     c001f090 <Vm::x87Handler(regs*)+0x6e4>
c001eb6c:	80 fa df             	cmp    dl,0xdf
c001eb6f:	0f 84 68 05 00 00    	je     c001f0dd <Vm::x87Handler(regs*)+0x731>
c001eb75:	31 c0                	xor    eax,eax
c001eb77:	80 fa db             	cmp    dl,0xdb
c001eb7a:	0f 85 8d 08 00 00    	jne    c001f40d <Vm::x87Handler(regs*)+0xa61>
c001eb80:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001eb84:	80 fa 03             	cmp    dl,0x3
c001eb87:	0f 85 70 06 00 00    	jne    c001f1fd <Vm::x87Handler(regs*)+0x851>
c001eb8d:	e8 c8 fd ff ff       	call   c001e95a <Vm::fpuPop()>
c001eb92:	55                   	push   ebp
c001eb93:	55                   	push   ebp
c001eb94:	52                   	push   edx
c001eb95:	50                   	push   eax
c001eb96:	e8 71 fa ff ff       	call   c001e60c <Vm::fpuFloatToLong(unsigned long long)>
c001eb9b:	83 c4 10             	add    esp,0x10
c001eb9e:	89 06                	mov    DWORD PTR [esi],eax
c001eba0:	eb 63                	jmp    c001ec05 <Vm::x87Handler(regs*)+0x259>
c001eba2:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001eba6:	84 d2                	test   dl,dl
c001eba8:	0f 85 e6 05 00 00    	jne    c001f194 <Vm::x87Handler(regs*)+0x7e8>
c001ebae:	57                   	push   edi
c001ebaf:	57                   	push   edi
c001ebb0:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ebb3:	ff 36                	push   DWORD PTR [esi]
c001ebb5:	e8 49 fa ff ff       	call   c001e603 <Vm::fpu64ToInternal(unsigned long long)>
c001ebba:	5e                   	pop    esi
c001ebbb:	5f                   	pop    edi
c001ebbc:	52                   	push   edx
c001ebbd:	50                   	push   eax
c001ebbe:	e8 3a fd ff ff       	call   c001e8fd <Vm::fpuPush(unsigned long long)>
c001ebc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ebc7:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001ebca:	e9 51 fe ff ff       	jmp    c001ea20 <Vm::x87Handler(regs*)+0x74>
c001ebcf:	80 fa 03             	cmp    dl,0x3
c001ebd2:	0f 85 d7 06 00 00    	jne    c001f2af <Vm::x87Handler(regs*)+0x903>
c001ebd8:	57                   	push   edi
c001ebd9:	57                   	push   edi
c001ebda:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ebdd:	ff 36                	push   DWORD PTR [esi]
c001ebdf:	e8 1f fa ff ff       	call   c001e603 <Vm::fpu64ToInternal(unsigned long long)>
c001ebe4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ebeb:	89 c6                	mov    esi,eax
c001ebed:	89 d7                	mov    edi,edx
c001ebef:	e8 7b fc ff ff       	call   c001e86f <Vm::fpuGetReg(int)>
c001ebf4:	57                   	push   edi
c001ebf5:	56                   	push   esi
c001ebf6:	52                   	push   edx
c001ebf7:	50                   	push   eax
c001ebf8:	e8 95 fb ff ff       	call   c001e792 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001ebfd:	83 c4 20             	add    esp,0x20
c001ec00:	e8 55 fd ff ff       	call   c001e95a <Vm::fpuPop()>
c001ec05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ec09:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001ec0c:	e9 12 fe ff ff       	jmp    c001ea23 <Vm::x87Handler(regs*)+0x77>
c001ec11:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ec15:	8d 50 40             	lea    edx,[eax+0x40]
c001ec18:	80 fa 07             	cmp    dl,0x7
c001ec1b:	77 29                	ja     c001ec46 <Vm::x87Handler(regs*)+0x29a>
c001ec1d:	83 ec 0c             	sub    esp,0xc
c001ec20:	2d c0 00 00 00       	sub    eax,0xc0
c001ec25:	50                   	push   eax
c001ec26:	e8 44 fc ff ff       	call   c001e86f <Vm::fpuGetReg(int)>
c001ec2b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ec32:	89 c6                	mov    esi,eax
c001ec34:	89 d7                	mov    edi,edx
c001ec36:	e8 34 fc ff ff       	call   c001e86f <Vm::fpuGetReg(int)>
c001ec3b:	57                   	push   edi
c001ec3c:	56                   	push   esi
c001ec3d:	52                   	push   edx
c001ec3e:	50                   	push   eax
c001ec3f:	e8 a1 fb ff ff       	call   c001e7e5 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ec44:	eb 2f                	jmp    c001ec75 <Vm::x87Handler(regs*)+0x2c9>
c001ec46:	8d 50 38             	lea    edx,[eax+0x38]
c001ec49:	80 fa 07             	cmp    dl,0x7
c001ec4c:	77 2f                	ja     c001ec7d <Vm::x87Handler(regs*)+0x2d1>
c001ec4e:	83 ec 0c             	sub    esp,0xc
c001ec51:	2d c8 00 00 00       	sub    eax,0xc8
c001ec56:	50                   	push   eax
c001ec57:	e8 13 fc ff ff       	call   c001e86f <Vm::fpuGetReg(int)>
c001ec5c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ec63:	89 c6                	mov    esi,eax
c001ec65:	89 d7                	mov    edi,edx
c001ec67:	e8 03 fc ff ff       	call   c001e86f <Vm::fpuGetReg(int)>
c001ec6c:	57                   	push   edi
c001ec6d:	56                   	push   esi
c001ec6e:	52                   	push   edx
c001ec6f:	50                   	push   eax
c001ec70:	e8 a9 fb ff ff       	call   c001e81e <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ec75:	83 c4 1c             	add    esp,0x1c
c001ec78:	e9 d8 fd ff ff       	jmp    c001ea55 <Vm::x87Handler(regs*)+0xa9>
c001ec7d:	8d 50 30             	lea    edx,[eax+0x30]
c001ec80:	80 fa 07             	cmp    dl,0x7
c001ec83:	77 0d                	ja     c001ec92 <Vm::x87Handler(regs*)+0x2e6>
c001ec85:	83 ec 0c             	sub    esp,0xc
c001ec88:	2d d0 00 00 00       	sub    eax,0xd0
c001ec8d:	e9 99 03 00 00       	jmp    c001f02b <Vm::x87Handler(regs*)+0x67f>
c001ec92:	8d 50 28             	lea    edx,[eax+0x28]
c001ec95:	80 fa 07             	cmp    dl,0x7
c001ec98:	77 0d                	ja     c001eca7 <Vm::x87Handler(regs*)+0x2fb>
c001ec9a:	83 ec 0c             	sub    esp,0xc
c001ec9d:	2d d8 00 00 00       	sub    eax,0xd8
c001eca2:	e9 c0 03 00 00       	jmp    c001f067 <Vm::x87Handler(regs*)+0x6bb>
c001eca7:	8d 50 20             	lea    edx,[eax+0x20]
c001ecaa:	80 fa 07             	cmp    dl,0x7
c001ecad:	77 1b                	ja     c001ecca <Vm::x87Handler(regs*)+0x31e>
c001ecaf:	83 ec 0c             	sub    esp,0xc
c001ecb2:	2d e0 00 00 00       	sub    eax,0xe0
c001ecb7:	50                   	push   eax
c001ecb8:	e8 b2 fb ff ff       	call   c001e86f <Vm::fpuGetReg(int)>
c001ecbd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ecc4:	89 c6                	mov    esi,eax
c001ecc6:	89 d7                	mov    edi,edx
c001ecc8:	eb 22                	jmp    c001ecec <Vm::x87Handler(regs*)+0x340>
c001ecca:	8d 50 18             	lea    edx,[eax+0x18]
c001eccd:	80 fa 07             	cmp    dl,0x7
c001ecd0:	77 2d                	ja     c001ecff <Vm::x87Handler(regs*)+0x353>
c001ecd2:	83 ec 0c             	sub    esp,0xc
c001ecd5:	6a 00                	push   0x0
c001ecd7:	e8 93 fb ff ff       	call   c001e86f <Vm::fpuGetReg(int)>
c001ecdc:	89 c6                	mov    esi,eax
c001ecde:	89 d7                	mov    edi,edx
c001ece0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ece4:	2d e8 00 00 00       	sub    eax,0xe8
c001ece9:	89 04 24             	mov    DWORD PTR [esp],eax
c001ecec:	e8 7e fb ff ff       	call   c001e86f <Vm::fpuGetReg(int)>
c001ecf1:	57                   	push   edi
c001ecf2:	56                   	push   esi
c001ecf3:	52                   	push   edx
c001ecf4:	50                   	push   eax
c001ecf5:	e8 15 fb ff ff       	call   c001e80f <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ecfa:	e9 76 ff ff ff       	jmp    c001ec75 <Vm::x87Handler(regs*)+0x2c9>
c001ecff:	8d 50 10             	lea    edx,[eax+0x10]
c001ed02:	80 fa 07             	cmp    dl,0x7
c001ed05:	77 1b                	ja     c001ed22 <Vm::x87Handler(regs*)+0x376>
c001ed07:	83 ec 0c             	sub    esp,0xc
c001ed0a:	2d f0 00 00 00       	sub    eax,0xf0
c001ed0f:	50                   	push   eax
c001ed10:	e8 5a fb ff ff       	call   c001e86f <Vm::fpuGetReg(int)>
c001ed15:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ed1c:	89 c6                	mov    esi,eax
c001ed1e:	89 d7                	mov    edi,edx
c001ed20:	eb 22                	jmp    c001ed44 <Vm::x87Handler(regs*)+0x398>
c001ed22:	3c f7                	cmp    al,0xf7
c001ed24:	0f 86 d1 03 00 00    	jbe    c001f0fb <Vm::x87Handler(regs*)+0x74f>
c001ed2a:	83 ec 0c             	sub    esp,0xc
c001ed2d:	6a 00                	push   0x0
c001ed2f:	e8 3b fb ff ff       	call   c001e86f <Vm::fpuGetReg(int)>
c001ed34:	89 c6                	mov    esi,eax
c001ed36:	89 d7                	mov    edi,edx
c001ed38:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ed3c:	2d f8 00 00 00       	sub    eax,0xf8
c001ed41:	89 04 24             	mov    DWORD PTR [esp],eax
c001ed44:	e8 26 fb ff ff       	call   c001e86f <Vm::fpuGetReg(int)>
c001ed49:	57                   	push   edi
c001ed4a:	56                   	push   esi
c001ed4b:	52                   	push   edx
c001ed4c:	50                   	push   eax
c001ed4d:	e8 eb fa ff ff       	call   c001e83d <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ed52:	83 c4 1c             	add    esp,0x1c
c001ed55:	52                   	push   edx
c001ed56:	50                   	push   eax
c001ed57:	6a 00                	push   0x0
c001ed59:	e9 51 02 00 00       	jmp    c001efaf <Vm::x87Handler(regs*)+0x603>
c001ed5e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ed62:	8d 50 40             	lea    edx,[eax+0x40]
c001ed65:	80 fa 07             	cmp    dl,0x7
c001ed68:	77 37                	ja     c001eda1 <Vm::x87Handler(regs*)+0x3f5>
c001ed6a:	83 ec 0c             	sub    esp,0xc
c001ed6d:	2d c0 00 00 00       	sub    eax,0xc0
c001ed72:	50                   	push   eax
c001ed73:	e8 f7 fa ff ff       	call   c001e86f <Vm::fpuGetReg(int)>
c001ed78:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ed7f:	89 c6                	mov    esi,eax
c001ed81:	89 d7                	mov    edi,edx
c001ed83:	e8 e7 fa ff ff       	call   c001e86f <Vm::fpuGetReg(int)>
c001ed88:	57                   	push   edi
c001ed89:	56                   	push   esi
c001ed8a:	52                   	push   edx
c001ed8b:	50                   	push   eax
c001ed8c:	e8 54 fa ff ff       	call   c001e7e5 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ed91:	83 c4 1c             	add    esp,0x1c
c001ed94:	52                   	push   edx
c001ed95:	50                   	push   eax
c001ed96:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ed9a:	2d c0 00 00 00       	sub    eax,0xc0
c001ed9f:	eb 3d                	jmp    c001edde <Vm::x87Handler(regs*)+0x432>
c001eda1:	8d 50 38             	lea    edx,[eax+0x38]
c001eda4:	80 fa 07             	cmp    dl,0x7
c001eda7:	77 3b                	ja     c001ede4 <Vm::x87Handler(regs*)+0x438>
c001eda9:	83 ec 0c             	sub    esp,0xc
c001edac:	2d c8 00 00 00       	sub    eax,0xc8
c001edb1:	50                   	push   eax
c001edb2:	e8 b8 fa ff ff       	call   c001e86f <Vm::fpuGetReg(int)>
c001edb7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001edbe:	89 c6                	mov    esi,eax
c001edc0:	89 d7                	mov    edi,edx
c001edc2:	e8 a8 fa ff ff       	call   c001e86f <Vm::fpuGetReg(int)>
c001edc7:	57                   	push   edi
c001edc8:	56                   	push   esi
c001edc9:	52                   	push   edx
c001edca:	50                   	push   eax
c001edcb:	e8 4e fa ff ff       	call   c001e81e <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001edd0:	83 c4 1c             	add    esp,0x1c
c001edd3:	52                   	push   edx
c001edd4:	50                   	push   eax
c001edd5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001edd9:	2d c8 00 00 00       	sub    eax,0xc8
c001edde:	50                   	push   eax
c001eddf:	e9 75 fc ff ff       	jmp    c001ea59 <Vm::x87Handler(regs*)+0xad>
c001ede4:	83 c0 18             	add    eax,0x18
c001ede7:	3c 07                	cmp    al,0x7
c001ede9:	0f 87 3b 04 00 00    	ja     c001f22a <Vm::x87Handler(regs*)+0x87e>
c001edef:	83 ec 0c             	sub    esp,0xc
c001edf2:	6a 00                	push   0x0
c001edf4:	e8 76 fa ff ff       	call   c001e86f <Vm::fpuGetReg(int)>
c001edf9:	89 c6                	mov    esi,eax
c001edfb:	89 d7                	mov    edi,edx
c001edfd:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ee01:	2d e8 00 00 00       	sub    eax,0xe8
c001ee06:	89 04 24             	mov    DWORD PTR [esp],eax
c001ee09:	e8 61 fa ff ff       	call   c001e86f <Vm::fpuGetReg(int)>
c001ee0e:	57                   	push   edi
c001ee0f:	56                   	push   esi
c001ee10:	52                   	push   edx
c001ee11:	50                   	push   eax
c001ee12:	e8 f8 f9 ff ff       	call   c001e80f <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ee17:	83 c4 1c             	add    esp,0x1c
c001ee1a:	52                   	push   edx
c001ee1b:	50                   	push   eax
c001ee1c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ee20:	2d e8 00 00 00       	sub    eax,0xe8
c001ee25:	eb b7                	jmp    c001edde <Vm::x87Handler(regs*)+0x432>
c001ee27:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ee2b:	8d 50 40             	lea    edx,[eax+0x40]
c001ee2e:	80 fa 07             	cmp    dl,0x7
c001ee31:	77 3a                	ja     c001ee6d <Vm::x87Handler(regs*)+0x4c1>
c001ee33:	83 ec 0c             	sub    esp,0xc
c001ee36:	2d c0 00 00 00       	sub    eax,0xc0
c001ee3b:	50                   	push   eax
c001ee3c:	e8 2e fa ff ff       	call   c001e86f <Vm::fpuGetReg(int)>
c001ee41:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ee48:	89 c6                	mov    esi,eax
c001ee4a:	89 d7                	mov    edi,edx
c001ee4c:	e8 1e fa ff ff       	call   c001e86f <Vm::fpuGetReg(int)>
c001ee51:	57                   	push   edi
c001ee52:	56                   	push   esi
c001ee53:	52                   	push   edx
c001ee54:	50                   	push   eax
c001ee55:	e8 8b f9 ff ff       	call   c001e7e5 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ee5a:	83 c4 1c             	add    esp,0x1c
c001ee5d:	52                   	push   edx
c001ee5e:	50                   	push   eax
c001ee5f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ee63:	2d c0 00 00 00       	sub    eax,0xc0
c001ee68:	e9 9e 01 00 00       	jmp    c001f00b <Vm::x87Handler(regs*)+0x65f>
c001ee6d:	8d 50 20             	lea    edx,[eax+0x20]
c001ee70:	80 fa 07             	cmp    dl,0x7
c001ee73:	77 3a                	ja     c001eeaf <Vm::x87Handler(regs*)+0x503>
c001ee75:	83 ec 0c             	sub    esp,0xc
c001ee78:	2d e0 00 00 00       	sub    eax,0xe0
c001ee7d:	50                   	push   eax
c001ee7e:	e8 ec f9 ff ff       	call   c001e86f <Vm::fpuGetReg(int)>
c001ee83:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ee8a:	89 c6                	mov    esi,eax
c001ee8c:	89 d7                	mov    edi,edx
c001ee8e:	e8 dc f9 ff ff       	call   c001e86f <Vm::fpuGetReg(int)>
c001ee93:	57                   	push   edi
c001ee94:	56                   	push   esi
c001ee95:	52                   	push   edx
c001ee96:	50                   	push   eax
c001ee97:	e8 73 f9 ff ff       	call   c001e80f <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ee9c:	83 c4 1c             	add    esp,0x1c
c001ee9f:	52                   	push   edx
c001eea0:	50                   	push   eax
c001eea1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001eea5:	2d e0 00 00 00       	sub    eax,0xe0
c001eeaa:	e9 5c 01 00 00       	jmp    c001f00b <Vm::x87Handler(regs*)+0x65f>
c001eeaf:	8d 50 18             	lea    edx,[eax+0x18]
c001eeb2:	80 fa 07             	cmp    dl,0x7
c001eeb5:	77 3b                	ja     c001eef2 <Vm::x87Handler(regs*)+0x546>
c001eeb7:	83 ec 0c             	sub    esp,0xc
c001eeba:	6a 00                	push   0x0
c001eebc:	e8 ae f9 ff ff       	call   c001e86f <Vm::fpuGetReg(int)>
c001eec1:	89 c6                	mov    esi,eax
c001eec3:	89 d7                	mov    edi,edx
c001eec5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001eec9:	2d e8 00 00 00       	sub    eax,0xe8
c001eece:	89 04 24             	mov    DWORD PTR [esp],eax
c001eed1:	e8 99 f9 ff ff       	call   c001e86f <Vm::fpuGetReg(int)>
c001eed6:	57                   	push   edi
c001eed7:	56                   	push   esi
c001eed8:	52                   	push   edx
c001eed9:	50                   	push   eax
c001eeda:	e8 30 f9 ff ff       	call   c001e80f <Vm::fpuSub(unsigned long long, unsigned long long)>
c001eedf:	83 c4 1c             	add    esp,0x1c
c001eee2:	52                   	push   edx
c001eee3:	50                   	push   eax
c001eee4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001eee8:	2d e8 00 00 00       	sub    eax,0xe8
c001eeed:	e9 19 01 00 00       	jmp    c001f00b <Vm::x87Handler(regs*)+0x65f>
c001eef2:	8d 50 38             	lea    edx,[eax+0x38]
c001eef5:	80 fa 07             	cmp    dl,0x7
c001eef8:	77 37                	ja     c001ef31 <Vm::x87Handler(regs*)+0x585>
c001eefa:	83 ec 0c             	sub    esp,0xc
c001eefd:	2d c8 00 00 00       	sub    eax,0xc8
c001ef02:	50                   	push   eax
c001ef03:	e8 67 f9 ff ff       	call   c001e86f <Vm::fpuGetReg(int)>
c001ef08:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ef0f:	89 c6                	mov    esi,eax
c001ef11:	89 d7                	mov    edi,edx
c001ef13:	e8 57 f9 ff ff       	call   c001e86f <Vm::fpuGetReg(int)>
c001ef18:	57                   	push   edi
c001ef19:	56                   	push   esi
c001ef1a:	52                   	push   edx
c001ef1b:	50                   	push   eax
c001ef1c:	e8 fd f8 ff ff       	call   c001e81e <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ef21:	83 c4 1c             	add    esp,0x1c
c001ef24:	52                   	push   edx
c001ef25:	50                   	push   eax
c001ef26:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ef2a:	2d c8 00 00 00       	sub    eax,0xc8
c001ef2f:	eb 7d                	jmp    c001efae <Vm::x87Handler(regs*)+0x602>
c001ef31:	3c f7                	cmp    al,0xf7
c001ef33:	76 38                	jbe    c001ef6d <Vm::x87Handler(regs*)+0x5c1>
c001ef35:	83 ec 0c             	sub    esp,0xc
c001ef38:	6a 00                	push   0x0
c001ef3a:	e8 30 f9 ff ff       	call   c001e86f <Vm::fpuGetReg(int)>
c001ef3f:	89 c6                	mov    esi,eax
c001ef41:	89 d7                	mov    edi,edx
c001ef43:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ef47:	2d f8 00 00 00       	sub    eax,0xf8
c001ef4c:	89 04 24             	mov    DWORD PTR [esp],eax
c001ef4f:	e8 1b f9 ff ff       	call   c001e86f <Vm::fpuGetReg(int)>
c001ef54:	57                   	push   edi
c001ef55:	56                   	push   esi
c001ef56:	52                   	push   edx
c001ef57:	50                   	push   eax
c001ef58:	e8 e0 f8 ff ff       	call   c001e83d <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ef5d:	83 c4 1c             	add    esp,0x1c
c001ef60:	52                   	push   edx
c001ef61:	50                   	push   eax
c001ef62:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ef66:	2d f8 00 00 00       	sub    eax,0xf8
c001ef6b:	eb 41                	jmp    c001efae <Vm::x87Handler(regs*)+0x602>
c001ef6d:	8d 50 10             	lea    edx,[eax+0x10]
c001ef70:	80 fa 07             	cmp    dl,0x7
c001ef73:	0f 87 5a 01 00 00    	ja     c001f0d3 <Vm::x87Handler(regs*)+0x727>
c001ef79:	83 ec 0c             	sub    esp,0xc
c001ef7c:	2d f0 00 00 00       	sub    eax,0xf0
c001ef81:	50                   	push   eax
c001ef82:	e8 e8 f8 ff ff       	call   c001e86f <Vm::fpuGetReg(int)>
c001ef87:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ef8e:	89 c6                	mov    esi,eax
c001ef90:	89 d7                	mov    edi,edx
c001ef92:	e8 d8 f8 ff ff       	call   c001e86f <Vm::fpuGetReg(int)>
c001ef97:	57                   	push   edi
c001ef98:	56                   	push   esi
c001ef99:	52                   	push   edx
c001ef9a:	50                   	push   eax
c001ef9b:	e8 9d f8 ff ff       	call   c001e83d <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001efa0:	83 c4 1c             	add    esp,0x1c
c001efa3:	52                   	push   edx
c001efa4:	50                   	push   eax
c001efa5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001efa9:	2d f0 00 00 00       	sub    eax,0xf0
c001efae:	50                   	push   eax
c001efaf:	e8 fe f8 ff ff       	call   c001e8b2 <Vm::fpuSetReg(int, unsigned long long)>
c001efb4:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001efb8:	e8 9d f9 ff ff       	call   c001e95a <Vm::fpuPop()>
c001efbd:	e9 5e fa ff ff       	jmp    c001ea20 <Vm::x87Handler(regs*)+0x74>
c001efc2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001efc6:	8d 50 30             	lea    edx,[eax+0x30]
c001efc9:	80 fa 07             	cmp    dl,0x7
c001efcc:	77 1d                	ja     c001efeb <Vm::x87Handler(regs*)+0x63f>
c001efce:	83 ec 0c             	sub    esp,0xc
c001efd1:	6a 00                	push   0x0
c001efd3:	e8 97 f8 ff ff       	call   c001e86f <Vm::fpuGetReg(int)>
c001efd8:	83 c4 0c             	add    esp,0xc
c001efdb:	52                   	push   edx
c001efdc:	50                   	push   eax
c001efdd:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001efe1:	2d d0 00 00 00       	sub    eax,0xd0
c001efe6:	e9 f3 fd ff ff       	jmp    c001edde <Vm::x87Handler(regs*)+0x432>
c001efeb:	8d 50 28             	lea    edx,[eax+0x28]
c001efee:	80 fa 07             	cmp    dl,0x7
c001eff1:	77 28                	ja     c001f01b <Vm::x87Handler(regs*)+0x66f>
c001eff3:	83 ec 0c             	sub    esp,0xc
c001eff6:	6a 00                	push   0x0
c001eff8:	e8 72 f8 ff ff       	call   c001e86f <Vm::fpuGetReg(int)>
c001effd:	83 c4 0c             	add    esp,0xc
c001f000:	52                   	push   edx
c001f001:	50                   	push   eax
c001f002:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f006:	2d d8 00 00 00       	sub    eax,0xd8
c001f00b:	50                   	push   eax
c001f00c:	e8 a1 f8 ff ff       	call   c001e8b2 <Vm::fpuSetReg(int, unsigned long long)>
c001f011:	e8 44 f9 ff ff       	call   c001e95a <Vm::fpuPop()>
c001f016:	e9 01 fa ff ff       	jmp    c001ea1c <Vm::x87Handler(regs*)+0x70>
c001f01b:	8d 50 20             	lea    edx,[eax+0x20]
c001f01e:	80 fa 07             	cmp    dl,0x7
c001f021:	77 30                	ja     c001f053 <Vm::x87Handler(regs*)+0x6a7>
c001f023:	83 ec 0c             	sub    esp,0xc
c001f026:	2d e0 00 00 00       	sub    eax,0xe0
c001f02b:	50                   	push   eax
c001f02c:	e8 3e f8 ff ff       	call   c001e86f <Vm::fpuGetReg(int)>
c001f031:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f038:	89 c6                	mov    esi,eax
c001f03a:	89 d7                	mov    edi,edx
c001f03c:	e8 2e f8 ff ff       	call   c001e86f <Vm::fpuGetReg(int)>
c001f041:	57                   	push   edi
c001f042:	56                   	push   esi
c001f043:	52                   	push   edx
c001f044:	50                   	push   eax
c001f045:	e8 48 f7 ff ff       	call   c001e792 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f04a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f04e:	e9 54 02 00 00       	jmp    c001f2a7 <Vm::x87Handler(regs*)+0x8fb>
c001f053:	8d 50 18             	lea    edx,[eax+0x18]
c001f056:	80 fa 07             	cmp    dl,0x7
c001f059:	0f 87 43 fb ff ff    	ja     c001eba2 <Vm::x87Handler(regs*)+0x1f6>
c001f05f:	83 ec 0c             	sub    esp,0xc
c001f062:	2d e8 00 00 00       	sub    eax,0xe8
c001f067:	50                   	push   eax
c001f068:	e8 02 f8 ff ff       	call   c001e86f <Vm::fpuGetReg(int)>
c001f06d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f074:	89 c6                	mov    esi,eax
c001f076:	89 d7                	mov    edi,edx
c001f078:	e8 f2 f7 ff ff       	call   c001e86f <Vm::fpuGetReg(int)>
c001f07d:	57                   	push   edi
c001f07e:	56                   	push   esi
c001f07f:	52                   	push   edx
c001f080:	50                   	push   eax
c001f081:	e8 0c f7 ff ff       	call   c001e792 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f086:	83 c4 20             	add    esp,0x20
c001f089:	e8 cc f8 ff ff       	call   c001e95a <Vm::fpuPop()>
c001f08e:	eb 62                	jmp    c001f0f2 <Vm::x87Handler(regs*)+0x746>
c001f090:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001f094:	0f 85 0f 01 00 00    	jne    c001f1a9 <Vm::x87Handler(regs*)+0x7fd>
c001f09a:	83 ec 0c             	sub    esp,0xc
c001f09d:	6a 01                	push   0x1
c001f09f:	e8 cb f7 ff ff       	call   c001e86f <Vm::fpuGetReg(int)>
c001f0a4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f0ab:	89 c6                	mov    esi,eax
c001f0ad:	89 d7                	mov    edi,edx
c001f0af:	e8 bb f7 ff ff       	call   c001e86f <Vm::fpuGetReg(int)>
c001f0b4:	57                   	push   edi
c001f0b5:	56                   	push   esi
c001f0b6:	52                   	push   edx
c001f0b7:	50                   	push   eax
c001f0b8:	e8 d5 f6 ff ff       	call   c001e792 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f0bd:	83 c4 20             	add    esp,0x20
c001f0c0:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f0c4:	e8 91 f8 ff ff       	call   c001e95a <Vm::fpuPop()>
c001f0c9:	e8 8c f8 ff ff       	call   c001e95a <Vm::fpuPop()>
c001f0ce:	e9 50 f9 ff ff       	jmp    c001ea23 <Vm::x87Handler(regs*)+0x77>
c001f0d3:	3c d9                	cmp    al,0xd9
c001f0d5:	0f 85 b5 02 00 00    	jne    c001f390 <Vm::x87Handler(regs*)+0x9e4>
c001f0db:	eb bd                	jmp    c001f09a <Vm::x87Handler(regs*)+0x6ee>
c001f0dd:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001f0e1:	0f 85 ea 02 00 00    	jne    c001f3d1 <Vm::x87Handler(regs*)+0xa25>
c001f0e7:	0f b7 05 00 df 02 c0 	movzx  eax,WORD PTR ds:0xc002df00
c001f0ee:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001f0f2:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f0f6:	e9 28 f9 ff ff       	jmp    c001ea23 <Vm::x87Handler(regs*)+0x77>
c001f0fb:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f0ff:	84 d2                	test   dl,dl
c001f101:	75 0f                	jne    c001f112 <Vm::x87Handler(regs*)+0x766>
c001f103:	83 ec 0c             	sub    esp,0xc
c001f106:	ff 36                	push   DWORD PTR [esi]
c001f108:	e8 b1 f4 ff ff       	call   c001e5be <Vm::fpu32ToInternal(unsigned int)>
c001f10d:	e9 2c 01 00 00       	jmp    c001f23e <Vm::x87Handler(regs*)+0x892>
c001f112:	80 fa 01             	cmp    dl,0x1
c001f115:	75 0f                	jne    c001f126 <Vm::x87Handler(regs*)+0x77a>
c001f117:	83 ec 0c             	sub    esp,0xc
c001f11a:	ff 36                	push   DWORD PTR [esi]
c001f11c:	e8 9d f4 ff ff       	call   c001e5be <Vm::fpu32ToInternal(unsigned int)>
c001f121:	e9 81 02 00 00       	jmp    c001f3a7 <Vm::x87Handler(regs*)+0x9fb>
c001f126:	80 fa 04             	cmp    dl,0x4
c001f129:	75 0f                	jne    c001f13a <Vm::x87Handler(regs*)+0x78e>
c001f12b:	83 ec 0c             	sub    esp,0xc
c001f12e:	ff 36                	push   DWORD PTR [esi]
c001f130:	e8 89 f4 ff ff       	call   c001e5be <Vm::fpu32ToInternal(unsigned int)>
c001f135:	e9 86 01 00 00       	jmp    c001f2c0 <Vm::x87Handler(regs*)+0x914>
c001f13a:	80 fa 05             	cmp    dl,0x5
c001f13d:	75 1b                	jne    c001f15a <Vm::x87Handler(regs*)+0x7ae>
c001f13f:	83 ec 0c             	sub    esp,0xc
c001f142:	6a 00                	push   0x0
c001f144:	e8 26 f7 ff ff       	call   c001e86f <Vm::fpuGetReg(int)>
c001f149:	89 c7                	mov    edi,eax
c001f14b:	89 d5                	mov    ebp,edx
c001f14d:	58                   	pop    eax
c001f14e:	ff 36                	push   DWORD PTR [esi]
c001f150:	e8 69 f4 ff ff       	call   c001e5be <Vm::fpu32ToInternal(unsigned int)>
c001f155:	e9 a3 01 00 00       	jmp    c001f2fd <Vm::x87Handler(regs*)+0x951>
c001f15a:	80 fa 06             	cmp    dl,0x6
c001f15d:	75 0f                	jne    c001f16e <Vm::x87Handler(regs*)+0x7c2>
c001f15f:	83 ec 0c             	sub    esp,0xc
c001f162:	ff 36                	push   DWORD PTR [esi]
c001f164:	e8 55 f4 ff ff       	call   c001e5be <Vm::fpu32ToInternal(unsigned int)>
c001f169:	e9 ae 01 00 00       	jmp    c001f31c <Vm::x87Handler(regs*)+0x970>
c001f16e:	31 c0                	xor    eax,eax
c001f170:	80 fa 07             	cmp    dl,0x7
c001f173:	0f 85 94 02 00 00    	jne    c001f40d <Vm::x87Handler(regs*)+0xa61>
c001f179:	83 ec 0c             	sub    esp,0xc
c001f17c:	6a 00                	push   0x0
c001f17e:	e8 ec f6 ff ff       	call   c001e86f <Vm::fpuGetReg(int)>
c001f183:	89 c7                	mov    edi,eax
c001f185:	89 d5                	mov    ebp,edx
c001f187:	58                   	pop    eax
c001f188:	ff 36                	push   DWORD PTR [esi]
c001f18a:	e8 2f f4 ff ff       	call   c001e5be <Vm::fpu32ToInternal(unsigned int)>
c001f18f:	e9 cb 01 00 00       	jmp    c001f35f <Vm::x87Handler(regs*)+0x9b3>
c001f194:	80 fa 03             	cmp    dl,0x3
c001f197:	0f 85 d3 01 00 00    	jne    c001f370 <Vm::x87Handler(regs*)+0x9c4>
c001f19d:	e8 b8 f7 ff ff       	call   c001e95a <Vm::fpuPop()>
c001f1a2:	51                   	push   ecx
c001f1a3:	51                   	push   ecx
c001f1a4:	e9 de 01 00 00       	jmp    c001f387 <Vm::x87Handler(regs*)+0x9db>
c001f1a9:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f1ad:	80 fa 01             	cmp    dl,0x1
c001f1b0:	75 09                	jne    c001f1bb <Vm::x87Handler(regs*)+0x80f>
c001f1b2:	57                   	push   edi
c001f1b3:	57                   	push   edi
c001f1b4:	8b 06                	mov    eax,DWORD PTR [esi]
c001f1b6:	e9 e3 01 00 00       	jmp    c001f39e <Vm::x87Handler(regs*)+0x9f2>
c001f1bb:	80 fa 04             	cmp    dl,0x4
c001f1be:	75 12                	jne    c001f1d2 <Vm::x87Handler(regs*)+0x826>
c001f1c0:	31 d2                	xor    edx,edx
c001f1c2:	51                   	push   ecx
c001f1c3:	51                   	push   ecx
c001f1c4:	8b 06                	mov    eax,DWORD PTR [esi]
c001f1c6:	52                   	push   edx
c001f1c7:	50                   	push   eax
c001f1c8:	e8 d0 f4 ff ff       	call   c001e69d <Vm::fpuLongToFloat(long long)>
c001f1cd:	e9 ee 00 00 00       	jmp    c001f2c0 <Vm::x87Handler(regs*)+0x914>
c001f1d2:	31 c0                	xor    eax,eax
c001f1d4:	80 fa 07             	cmp    dl,0x7
c001f1d7:	0f 85 30 02 00 00    	jne    c001f40d <Vm::x87Handler(regs*)+0xa61>
c001f1dd:	83 ec 0c             	sub    esp,0xc
c001f1e0:	6a 00                	push   0x0
c001f1e2:	e8 88 f6 ff ff       	call   c001e86f <Vm::fpuGetReg(int)>
c001f1e7:	89 c7                	mov    edi,eax
c001f1e9:	89 d5                	mov    ebp,edx
c001f1eb:	58                   	pop    eax
c001f1ec:	8b 06                	mov    eax,DWORD PTR [esi]
c001f1ee:	5a                   	pop    edx
c001f1ef:	31 d2                	xor    edx,edx
c001f1f1:	52                   	push   edx
c001f1f2:	50                   	push   eax
c001f1f3:	e8 a5 f4 ff ff       	call   c001e69d <Vm::fpuLongToFloat(long long)>
c001f1f8:	e9 62 01 00 00       	jmp    c001f35f <Vm::x87Handler(regs*)+0x9b3>
c001f1fd:	84 d2                	test   dl,dl
c001f1ff:	75 0d                	jne    c001f20e <Vm::x87Handler(regs*)+0x862>
c001f201:	31 d2                	xor    edx,edx
c001f203:	55                   	push   ebp
c001f204:	55                   	push   ebp
c001f205:	8b 06                	mov    eax,DWORD PTR [esi]
c001f207:	52                   	push   edx
c001f208:	50                   	push   eax
c001f209:	e9 d3 01 00 00       	jmp    c001f3e1 <Vm::x87Handler(regs*)+0xa35>
c001f20e:	31 c0                	xor    eax,eax
c001f210:	80 fa 02             	cmp    dl,0x2
c001f213:	0f 85 f4 01 00 00    	jne    c001f40d <Vm::x87Handler(regs*)+0xa61>
c001f219:	83 ec 0c             	sub    esp,0xc
c001f21c:	6a 00                	push   0x0
c001f21e:	e8 4c f6 ff ff       	call   c001e86f <Vm::fpuGetReg(int)>
c001f223:	59                   	pop    ecx
c001f224:	5f                   	pop    edi
c001f225:	e9 6a f9 ff ff       	jmp    c001eb94 <Vm::x87Handler(regs*)+0x1e8>
c001f22a:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f22e:	84 d2                	test   dl,dl
c001f230:	75 2a                	jne    c001f25c <Vm::x87Handler(regs*)+0x8b0>
c001f232:	50                   	push   eax
c001f233:	50                   	push   eax
c001f234:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f237:	ff 36                	push   DWORD PTR [esi]
c001f239:	e8 c5 f3 ff ff       	call   c001e603 <Vm::fpu64ToInternal(unsigned long long)>
c001f23e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f245:	89 c6                	mov    esi,eax
c001f247:	89 d7                	mov    edi,edx
c001f249:	e8 21 f6 ff ff       	call   c001e86f <Vm::fpuGetReg(int)>
c001f24e:	57                   	push   edi
c001f24f:	56                   	push   esi
c001f250:	52                   	push   edx
c001f251:	50                   	push   eax
c001f252:	e8 8e f5 ff ff       	call   c001e7e5 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f257:	e9 64 01 00 00       	jmp    c001f3c0 <Vm::x87Handler(regs*)+0xa14>
c001f25c:	80 fa 01             	cmp    dl,0x1
c001f25f:	75 11                	jne    c001f272 <Vm::x87Handler(regs*)+0x8c6>
c001f261:	50                   	push   eax
c001f262:	50                   	push   eax
c001f263:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f266:	ff 36                	push   DWORD PTR [esi]
c001f268:	e8 96 f3 ff ff       	call   c001e603 <Vm::fpu64ToInternal(unsigned long long)>
c001f26d:	e9 35 01 00 00       	jmp    c001f3a7 <Vm::x87Handler(regs*)+0x9fb>
c001f272:	80 fa 02             	cmp    dl,0x2
c001f275:	0f 85 54 f9 ff ff    	jne    c001ebcf <Vm::x87Handler(regs*)+0x223>
c001f27b:	55                   	push   ebp
c001f27c:	55                   	push   ebp
c001f27d:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f280:	ff 36                	push   DWORD PTR [esi]
c001f282:	e8 7c f3 ff ff       	call   c001e603 <Vm::fpu64ToInternal(unsigned long long)>
c001f287:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f28e:	89 c6                	mov    esi,eax
c001f290:	89 d7                	mov    edi,edx
c001f292:	e8 d8 f5 ff ff       	call   c001e86f <Vm::fpuGetReg(int)>
c001f297:	57                   	push   edi
c001f298:	56                   	push   esi
c001f299:	52                   	push   edx
c001f29a:	50                   	push   eax
c001f29b:	e8 f2 f4 ff ff       	call   c001e792 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f2a0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001f2a4:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f2a7:	83 c4 20             	add    esp,0x20
c001f2aa:	e9 74 f7 ff ff       	jmp    c001ea23 <Vm::x87Handler(regs*)+0x77>
c001f2af:	80 fa 04             	cmp    dl,0x4
c001f2b2:	75 2a                	jne    c001f2de <Vm::x87Handler(regs*)+0x932>
c001f2b4:	51                   	push   ecx
c001f2b5:	51                   	push   ecx
c001f2b6:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f2b9:	ff 36                	push   DWORD PTR [esi]
c001f2bb:	e8 43 f3 ff ff       	call   c001e603 <Vm::fpu64ToInternal(unsigned long long)>
c001f2c0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f2c7:	89 c6                	mov    esi,eax
c001f2c9:	89 d7                	mov    edi,edx
c001f2cb:	e8 9f f5 ff ff       	call   c001e86f <Vm::fpuGetReg(int)>
c001f2d0:	57                   	push   edi
c001f2d1:	56                   	push   esi
c001f2d2:	52                   	push   edx
c001f2d3:	50                   	push   eax
c001f2d4:	e8 36 f5 ff ff       	call   c001e80f <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f2d9:	e9 e2 00 00 00       	jmp    c001f3c0 <Vm::x87Handler(regs*)+0xa14>
c001f2de:	80 fa 05             	cmp    dl,0x5
c001f2e1:	75 28                	jne    c001f30b <Vm::x87Handler(regs*)+0x95f>
c001f2e3:	83 ec 0c             	sub    esp,0xc
c001f2e6:	6a 00                	push   0x0
c001f2e8:	e8 82 f5 ff ff       	call   c001e86f <Vm::fpuGetReg(int)>
c001f2ed:	89 c7                	mov    edi,eax
c001f2ef:	89 d5                	mov    ebp,edx
c001f2f1:	58                   	pop    eax
c001f2f2:	5a                   	pop    edx
c001f2f3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f2f6:	ff 36                	push   DWORD PTR [esi]
c001f2f8:	e8 06 f3 ff ff       	call   c001e603 <Vm::fpu64ToInternal(unsigned long long)>
c001f2fd:	83 c4 10             	add    esp,0x10
c001f300:	55                   	push   ebp
c001f301:	57                   	push   edi
c001f302:	52                   	push   edx
c001f303:	50                   	push   eax
c001f304:	e8 06 f5 ff ff       	call   c001e80f <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f309:	eb 60                	jmp    c001f36b <Vm::x87Handler(regs*)+0x9bf>
c001f30b:	80 fa 06             	cmp    dl,0x6
c001f30e:	75 2a                	jne    c001f33a <Vm::x87Handler(regs*)+0x98e>
c001f310:	51                   	push   ecx
c001f311:	51                   	push   ecx
c001f312:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f315:	ff 36                	push   DWORD PTR [esi]
c001f317:	e8 e7 f2 ff ff       	call   c001e603 <Vm::fpu64ToInternal(unsigned long long)>
c001f31c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f323:	89 c6                	mov    esi,eax
c001f325:	89 d7                	mov    edi,edx
c001f327:	e8 43 f5 ff ff       	call   c001e86f <Vm::fpuGetReg(int)>
c001f32c:	57                   	push   edi
c001f32d:	56                   	push   esi
c001f32e:	52                   	push   edx
c001f32f:	50                   	push   eax
c001f330:	e8 08 f5 ff ff       	call   c001e83d <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f335:	e9 86 00 00 00       	jmp    c001f3c0 <Vm::x87Handler(regs*)+0xa14>
c001f33a:	31 c0                	xor    eax,eax
c001f33c:	80 fa 07             	cmp    dl,0x7
c001f33f:	0f 85 c8 00 00 00    	jne    c001f40d <Vm::x87Handler(regs*)+0xa61>
c001f345:	83 ec 0c             	sub    esp,0xc
c001f348:	6a 00                	push   0x0
c001f34a:	e8 20 f5 ff ff       	call   c001e86f <Vm::fpuGetReg(int)>
c001f34f:	89 c7                	mov    edi,eax
c001f351:	89 d5                	mov    ebp,edx
c001f353:	58                   	pop    eax
c001f354:	5a                   	pop    edx
c001f355:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f358:	ff 36                	push   DWORD PTR [esi]
c001f35a:	e8 a4 f2 ff ff       	call   c001e603 <Vm::fpu64ToInternal(unsigned long long)>
c001f35f:	83 c4 10             	add    esp,0x10
c001f362:	55                   	push   ebp
c001f363:	57                   	push   edi
c001f364:	52                   	push   edx
c001f365:	50                   	push   eax
c001f366:	e8 d2 f4 ff ff       	call   c001e83d <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f36b:	83 c4 0c             	add    esp,0xc
c001f36e:	eb 53                	jmp    c001f3c3 <Vm::x87Handler(regs*)+0xa17>
c001f370:	31 c0                	xor    eax,eax
c001f372:	80 fa 02             	cmp    dl,0x2
c001f375:	0f 85 92 00 00 00    	jne    c001f40d <Vm::x87Handler(regs*)+0xa61>
c001f37b:	83 ec 0c             	sub    esp,0xc
c001f37e:	6a 00                	push   0x0
c001f380:	e8 ea f4 ff ff       	call   c001e86f <Vm::fpuGetReg(int)>
c001f385:	59                   	pop    ecx
c001f386:	5f                   	pop    edi
c001f387:	52                   	push   edx
c001f388:	50                   	push   eax
c001f389:	e8 27 f2 ff ff       	call   c001e5b5 <Vm::fpuInternalTo64(unsigned long long)>
c001f38e:	eb 70                	jmp    c001f400 <Vm::x87Handler(regs*)+0xa54>
c001f390:	31 c0                	xor    eax,eax
c001f392:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001f397:	75 74                	jne    c001f40d <Vm::x87Handler(regs*)+0xa61>
c001f399:	50                   	push   eax
c001f39a:	50                   	push   eax
c001f39b:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f39e:	31 d2                	xor    edx,edx
c001f3a0:	52                   	push   edx
c001f3a1:	50                   	push   eax
c001f3a2:	e8 f6 f2 ff ff       	call   c001e69d <Vm::fpuLongToFloat(long long)>
c001f3a7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f3ae:	89 c6                	mov    esi,eax
c001f3b0:	89 d7                	mov    edi,edx
c001f3b2:	e8 b8 f4 ff ff       	call   c001e86f <Vm::fpuGetReg(int)>
c001f3b7:	57                   	push   edi
c001f3b8:	56                   	push   esi
c001f3b9:	52                   	push   edx
c001f3ba:	50                   	push   eax
c001f3bb:	e8 5e f4 ff ff       	call   c001e81e <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f3c0:	83 c4 1c             	add    esp,0x1c
c001f3c3:	52                   	push   edx
c001f3c4:	50                   	push   eax
c001f3c5:	6a 00                	push   0x0
c001f3c7:	e8 e6 f4 ff ff       	call   c001e8b2 <Vm::fpuSetReg(int, unsigned long long)>
c001f3cc:	e9 f2 f7 ff ff       	jmp    c001ebc3 <Vm::x87Handler(regs*)+0x217>
c001f3d1:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f3d5:	80 fa 05             	cmp    dl,0x5
c001f3d8:	75 11                	jne    c001f3eb <Vm::x87Handler(regs*)+0xa3f>
c001f3da:	55                   	push   ebp
c001f3db:	55                   	push   ebp
c001f3dc:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f3df:	ff 36                	push   DWORD PTR [esi]
c001f3e1:	e8 81 f2 ff ff       	call   c001e667 <Vm::fpuULongToFloat(unsigned long long)>
c001f3e6:	e9 cf f7 ff ff       	jmp    c001ebba <Vm::x87Handler(regs*)+0x20e>
c001f3eb:	31 c0                	xor    eax,eax
c001f3ed:	80 fa 07             	cmp    dl,0x7
c001f3f0:	75 1b                	jne    c001f40d <Vm::x87Handler(regs*)+0xa61>
c001f3f2:	e8 63 f5 ff ff       	call   c001e95a <Vm::fpuPop()>
c001f3f7:	51                   	push   ecx
c001f3f8:	51                   	push   ecx
c001f3f9:	52                   	push   edx
c001f3fa:	50                   	push   eax
c001f3fb:	e8 0c f2 ff ff       	call   c001e60c <Vm::fpuFloatToLong(unsigned long long)>
c001f400:	83 c4 10             	add    esp,0x10
c001f403:	89 06                	mov    DWORD PTR [esi],eax
c001f405:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001f408:	e9 f8 f7 ff ff       	jmp    c001ec05 <Vm::x87Handler(regs*)+0x259>
c001f40d:	83 c4 1c             	add    esp,0x1c
c001f410:	5b                   	pop    ebx
c001f411:	5e                   	pop    esi
c001f412:	5f                   	pop    edi
c001f413:	5d                   	pop    ebp
c001f414:	c3                   	ret    

c001f415 <__static_initialization_and_destruction_0(int, int)>:
c001f415:	83 ec 0c             	sub    esp,0xc
c001f418:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001f41d:	75 1a                	jne    c001f439 <__static_initialization_and_destruction_0(int, int)+0x24>
c001f41f:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001f427:	75 10                	jne    c001f439 <__static_initialization_and_destruction_0(int, int)+0x24>
c001f429:	83 ec 0c             	sub    esp,0xc
c001f42c:	68 00 df 02 c0       	push   0xc002df00
c001f431:	e8 ba 82 00 00       	call   c00276f0 <Vm::_FPUState::_FPUState()>
c001f436:	83 c4 10             	add    esp,0x10
c001f439:	90                   	nop
c001f43a:	83 c4 0c             	add    esp,0xc
c001f43d:	c3                   	ret    

c001f43e <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001f43e:	83 ec 0c             	sub    esp,0xc
c001f441:	83 ec 08             	sub    esp,0x8
c001f444:	68 ff ff 00 00       	push   0xffff
c001f449:	6a 01                	push   0x1
c001f44b:	e8 c5 ff ff ff       	call   c001f415 <__static_initialization_and_destruction_0(int, int)>
c001f450:	83 c4 10             	add    esp,0x10
c001f453:	83 c4 0c             	add    esp,0xc
c001f456:	c3                   	ret    
c001f457:	90                   	nop

c001f458 <FAT::getName()>:
c001f458:	b8 8c ad 02 c0       	mov    eax,0xc002ad8c
c001f45d:	c3                   	ret    

c001f45e <FAT::tell(void*, unsigned long long*)>:
c001f45e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001f463:	75 06                	jne    c001f46b <FAT::tell(void*, unsigned long long*)+0xd>
c001f465:	b8 04 00 00 00       	mov    eax,0x4
c001f46a:	c3                   	ret    
c001f46b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f470:	75 06                	jne    c001f478 <FAT::tell(void*, unsigned long long*)+0x1a>
c001f472:	b8 04 00 00 00       	mov    eax,0x4
c001f477:	c3                   	ret    
c001f478:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f47c:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001f47f:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001f482:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f486:	89 01                	mov    DWORD PTR [ecx],eax
c001f488:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001f48b:	b8 00 00 00 00       	mov    eax,0x0
c001f490:	c3                   	ret    
c001f491:	90                   	nop

c001f492 <FAT::stat(void*, unsigned long long*)>:
c001f492:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001f497:	75 06                	jne    c001f49f <FAT::stat(void*, unsigned long long*)+0xd>
c001f499:	b8 04 00 00 00       	mov    eax,0x4
c001f49e:	c3                   	ret    
c001f49f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f4a4:	75 06                	jne    c001f4ac <FAT::stat(void*, unsigned long long*)+0x1a>
c001f4a6:	b8 04 00 00 00       	mov    eax,0x4
c001f4ab:	c3                   	ret    
c001f4ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f4b0:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001f4b3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001f4b6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f4ba:	89 01                	mov    DWORD PTR [ecx],eax
c001f4bc:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001f4bf:	b8 00 00 00 00       	mov    eax,0x0
c001f4c4:	c3                   	ret    
c001f4c5:	90                   	nop

c001f4c6 <FAT::~FAT()>:
c001f4c6:	83 ec 0c             	sub    esp,0xc
c001f4c9:	ba 10 ae 02 c0       	mov    edx,0xc002ae10
c001f4ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4d2:	89 10                	mov    DWORD PTR [eax],edx
c001f4d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4d8:	83 ec 0c             	sub    esp,0xc
c001f4db:	50                   	push   eax
c001f4dc:	e8 b7 35 ff ff       	call   c0012a98 <Filesystem::~Filesystem()>
c001f4e1:	83 c4 10             	add    esp,0x10
c001f4e4:	90                   	nop
c001f4e5:	83 c4 0c             	add    esp,0xc
c001f4e8:	c3                   	ret    
c001f4e9:	90                   	nop

c001f4ea <FAT::~FAT()>:
c001f4ea:	83 ec 0c             	sub    esp,0xc
c001f4ed:	83 ec 0c             	sub    esp,0xc
c001f4f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f4f4:	e8 cd ff ff ff       	call   c001f4c6 <FAT::~FAT()>
c001f4f9:	83 c4 10             	add    esp,0x10
c001f4fc:	83 ec 08             	sub    esp,0x8
c001f4ff:	6a 08                	push   0x8
c001f501:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f505:	e8 85 31 ff ff       	call   c001268f <operator delete(void*, unsigned long)>
c001f50a:	83 c4 10             	add    esp,0x10
c001f50d:	83 c4 0c             	add    esp,0xc
c001f510:	c3                   	ret    
c001f511:	90                   	nop

c001f512 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001f512:	83 ec 1c             	sub    esp,0x1c
c001f515:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001f51c:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001f521:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f525:	8b 04 85 80 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2080]
c001f52c:	83 f8 ff             	cmp    eax,0xffffffff
c001f52f:	75 34                	jne    c001f565 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001f531:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001f535:	88 c2                	mov    dl,al
c001f537:	a1 60 df 02 c0       	mov    eax,ds:0xc002df60
c001f53c:	01 d0                	add    eax,edx
c001f53e:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001f542:	8b 15 60 df 02 c0    	mov    edx,DWORD PTR ds:0xc002df60
c001f548:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f54c:	89 14 85 80 df 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2080],edx
c001f553:	a1 60 df 02 c0       	mov    eax,ds:0xc002df60
c001f558:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001f55c:	89 14 85 00 e0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2000],edx
c001f563:	eb 17                	jmp    c001f57c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001f565:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001f569:	88 c2                	mov    dl,al
c001f56b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f56f:	8b 04 85 80 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2080]
c001f576:	01 d0                	add    eax,edx
c001f578:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001f57c:	83 ec 04             	sub    esp,0x4
c001f57f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001f583:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001f587:	8d 44 24 15          	lea    eax,[esp+0x15]
c001f58b:	50                   	push   eax
c001f58c:	e8 57 75 fe ff       	call   c0006ae8 <f_getlabel>
c001f591:	83 c4 10             	add    esp,0x10
c001f594:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f598:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f59d:	75 07                	jne    c001f5a6 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001f59f:	b8 00 00 00 00       	mov    eax,0x0
c001f5a4:	eb 05                	jmp    c001f5ab <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001f5a6:	b8 01 00 00 00       	mov    eax,0x1
c001f5ab:	83 c4 1c             	add    esp,0x1c
c001f5ae:	c3                   	ret    
c001f5af:	90                   	nop

c001f5b0 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001f5b0:	57                   	push   edi
c001f5b1:	83 ec 58             	sub    esp,0x58
c001f5b4:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001f5bc:	8d 54 24 10          	lea    edx,[esp+0x10]
c001f5c0:	b9 0f 00 00 00       	mov    ecx,0xf
c001f5c5:	b8 00 00 00 00       	mov    eax,0x0
c001f5ca:	fc                   	cld    
c001f5cb:	89 d7                	mov    edi,edx
c001f5cd:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f5cf:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001f5d3:	8b 04 85 80 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2080]
c001f5da:	83 f8 ff             	cmp    eax,0xffffffff
c001f5dd:	75 34                	jne    c001f613 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001f5df:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001f5e3:	88 c2                	mov    dl,al
c001f5e5:	a1 60 df 02 c0       	mov    eax,ds:0xc002df60
c001f5ea:	01 d0                	add    eax,edx
c001f5ec:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001f5f0:	8b 15 60 df 02 c0    	mov    edx,DWORD PTR ds:0xc002df60
c001f5f6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001f5fa:	89 14 85 80 df 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2080],edx
c001f601:	a1 60 df 02 c0       	mov    eax,ds:0xc002df60
c001f606:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001f60a:	89 14 85 00 e0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2000],edx
c001f611:	eb 17                	jmp    c001f62a <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001f613:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001f617:	88 c2                	mov    dl,al
c001f619:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001f61d:	8b 04 85 80 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2080]
c001f624:	01 d0                	add    eax,edx
c001f626:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001f62a:	83 ec 08             	sub    esp,0x8
c001f62d:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001f631:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f635:	50                   	push   eax
c001f636:	e8 a6 11 fe ff       	call   c00007e1 <strcat>
c001f63b:	83 c4 10             	add    esp,0x10
c001f63e:	83 ec 0c             	sub    esp,0xc
c001f641:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f645:	50                   	push   eax
c001f646:	e8 8b 76 fe ff       	call   c0006cd6 <f_setlabel>
c001f64b:	83 c4 10             	add    esp,0x10
c001f64e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001f652:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001f657:	75 07                	jne    c001f660 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001f659:	b8 00 00 00 00       	mov    eax,0x0
c001f65e:	eb 05                	jmp    c001f665 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c001f660:	b8 01 00 00 00       	mov    eax,0x1
c001f665:	83 c4 58             	add    esp,0x58
c001f668:	5f                   	pop    edi
c001f669:	c3                   	ret    

c001f66a <FAT::format(LogicalDisk*, int, char const*, int)>:
c001f66a:	83 ec 2c             	sub    esp,0x2c
c001f66d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001f675:	83 ec 08             	sub    esp,0x8
c001f678:	68 b0 ad 02 c0       	push   0xc002adb0
c001f67d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f681:	e8 f5 10 fe ff       	call   c000077b <strcmp>
c001f686:	83 c4 10             	add    esp,0x10
c001f689:	85 c0                	test   eax,eax
c001f68b:	0f 94 c0             	sete   al
c001f68e:	84 c0                	test   al,al
c001f690:	74 0d                	je     c001f69f <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c001f692:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001f69a:	e9 a6 00 00 00       	jmp    c001f745 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001f69f:	83 ec 08             	sub    esp,0x8
c001f6a2:	68 a2 ad 02 c0       	push   0xc002ada2
c001f6a7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f6ab:	e8 cb 10 fe ff       	call   c000077b <strcmp>
c001f6b0:	83 c4 10             	add    esp,0x10
c001f6b3:	85 c0                	test   eax,eax
c001f6b5:	0f 94 c0             	sete   al
c001f6b8:	84 c0                	test   al,al
c001f6ba:	74 0a                	je     c001f6c6 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001f6bc:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001f6c4:	eb 7f                	jmp    c001f745 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001f6c6:	83 ec 08             	sub    esp,0x8
c001f6c9:	68 a8 ad 02 c0       	push   0xc002ada8
c001f6ce:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f6d2:	e8 a4 10 fe ff       	call   c000077b <strcmp>
c001f6d7:	83 c4 10             	add    esp,0x10
c001f6da:	85 c0                	test   eax,eax
c001f6dc:	0f 94 c0             	sete   al
c001f6df:	84 c0                	test   al,al
c001f6e1:	74 0a                	je     c001f6ed <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c001f6e3:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001f6eb:	eb 58                	jmp    c001f745 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001f6ed:	83 ec 08             	sub    esp,0x8
c001f6f0:	68 0c 7e 02 c0       	push   0xc0027e0c
c001f6f5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f6f9:	e8 7d 10 fe ff       	call   c000077b <strcmp>
c001f6fe:	83 c4 10             	add    esp,0x10
c001f701:	85 c0                	test   eax,eax
c001f703:	0f 94 c0             	sete   al
c001f706:	84 c0                	test   al,al
c001f708:	74 0a                	je     c001f714 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c001f70a:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001f712:	eb 31                	jmp    c001f745 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001f714:	83 ec 08             	sub    esp,0x8
c001f717:	68 ae ad 02 c0       	push   0xc002adae
c001f71c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f720:	e8 56 10 fe ff       	call   c000077b <strcmp>
c001f725:	83 c4 10             	add    esp,0x10
c001f728:	85 c0                	test   eax,eax
c001f72a:	0f 94 c0             	sete   al
c001f72d:	84 c0                	test   al,al
c001f72f:	74 0a                	je     c001f73b <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c001f731:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001f739:	eb 0a                	jmp    c001f745 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001f73b:	b8 08 00 00 00       	mov    eax,0x8
c001f740:	e9 04 01 00 00       	jmp    c001f849 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001f745:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001f74c:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001f751:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f755:	8b 04 85 80 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2080]
c001f75c:	83 f8 ff             	cmp    eax,0xffffffff
c001f75f:	75 34                	jne    c001f795 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c001f761:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001f765:	88 c2                	mov    dl,al
c001f767:	a1 60 df 02 c0       	mov    eax,ds:0xc002df60
c001f76c:	01 d0                	add    eax,edx
c001f76e:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001f772:	8b 15 60 df 02 c0    	mov    edx,DWORD PTR ds:0xc002df60
c001f778:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f77c:	89 14 85 80 df 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2080],edx
c001f783:	a1 60 df 02 c0       	mov    eax,ds:0xc002df60
c001f788:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001f78c:	89 14 85 00 e0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2000],edx
c001f793:	eb 17                	jmp    c001f7ac <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c001f795:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001f799:	88 c2                	mov    dl,al
c001f79b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f79f:	8b 04 85 80 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2080]
c001f7a6:	01 d0                	add    eax,edx
c001f7a8:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001f7ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f7b0:	88 04 24             	mov    BYTE PTR [esp],al
c001f7b3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001f7b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f7bb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001f7c3:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001f7c8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f7d0:	83 ec 0c             	sub    esp,0xc
c001f7d3:	68 00 20 00 00       	push   0x2000
c001f7d8:	e8 f7 fc fe ff       	call   c000f4d4 <malloc>
c001f7dd:	83 c4 10             	add    esp,0x10
c001f7e0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f7e4:	68 00 20 00 00       	push   0x2000
c001f7e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f7ed:	8d 44 24 08          	lea    eax,[esp+0x8]
c001f7f1:	50                   	push   eax
c001f7f2:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001f7f6:	50                   	push   eax
c001f7f7:	e8 25 79 fe ff       	call   c0007121 <f_mkfs>
c001f7fc:	83 c4 10             	add    esp,0x10
c001f7ff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001f803:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f808:	75 07                	jne    c001f811 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c001f80a:	b8 00 00 00 00       	mov    eax,0x0
c001f80f:	eb 38                	jmp    c001f849 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001f811:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001f816:	75 17                	jne    c001f82f <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c001f818:	83 ec 0c             	sub    esp,0xc
c001f81b:	68 e0 ad 02 c0       	push   0xc002ade0
c001f820:	e8 4a 2f ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001f825:	83 c4 10             	add    esp,0x10
c001f828:	b8 09 00 00 00       	mov    eax,0x9
c001f82d:	eb 1a                	jmp    c001f849 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001f82f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f833:	83 ec 08             	sub    esp,0x8
c001f836:	50                   	push   eax
c001f837:	68 b4 ad 02 c0       	push   0xc002adb4
c001f83c:	e8 2e 2f ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c001f841:	83 c4 10             	add    esp,0x10
c001f844:	b8 01 00 00 00       	mov    eax,0x1
c001f849:	83 c4 2c             	add    esp,0x2c
c001f84c:	c3                   	ret    
c001f84d:	90                   	nop

c001f84e <FAT::tryMount(LogicalDisk*, int)>:
c001f84e:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001f854:	a1 60 df 02 c0       	mov    eax,ds:0xc002df60
c001f859:	83 f8 14             	cmp    eax,0x14
c001f85c:	75 17                	jne    c001f875 <FAT::tryMount(LogicalDisk*, int)+0x27>
c001f85e:	83 ec 0c             	sub    esp,0xc
c001f861:	68 c6 ad 02 c0       	push   0xc002adc6
c001f866:	e8 1e a0 ff ff       	call   c0019889 <Krnl::panic(char const*)>
c001f86b:	83 c4 10             	add    esp,0x10
c001f86e:	b0 00                	mov    al,0x0
c001f870:	e9 d7 01 00 00       	jmp    c001fa4c <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001f875:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001f87c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001f882:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001f888:	3d 00 02 00 00       	cmp    eax,0x200
c001f88d:	74 07                	je     c001f896 <FAT::tryMount(LogicalDisk*, int)+0x48>
c001f88f:	b0 00                	mov    al,0x0
c001f891:	e9 b6 01 00 00       	jmp    c001fa4c <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001f896:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001f89e:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001f8a5:	8b 04 85 80 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2080]
c001f8ac:	83 f8 ff             	cmp    eax,0xffffffff
c001f8af:	74 07                	je     c001f8b8 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c001f8b1:	b0 01                	mov    al,0x1
c001f8b3:	e9 94 01 00 00       	jmp    c001fa4c <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001f8b8:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001f8c2:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001f8ca:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001f8d1:	88 c2                	mov    dl,al
c001f8d3:	a1 60 df 02 c0       	mov    eax,ds:0xc002df60
c001f8d8:	01 d0                	add    eax,edx
c001f8da:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001f8e1:	8b 15 60 df 02 c0    	mov    edx,DWORD PTR ds:0xc002df60
c001f8e7:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001f8ee:	89 14 85 80 df 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2080],edx
c001f8f5:	a1 60 df 02 c0       	mov    eax,ds:0xc002df60
c001f8fa:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001f901:	89 14 85 00 e0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2000],edx
c001f908:	83 ec 0c             	sub    esp,0xc
c001f90b:	68 54 02 00 00       	push   0x254
c001f910:	e8 bf fb fe ff       	call   c000f4d4 <malloc>
c001f915:	83 c4 10             	add    esp,0x10
c001f918:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001f91f:	83 ec 04             	sub    esp,0x4
c001f922:	6a 00                	push   0x0
c001f924:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001f92b:	50                   	push   eax
c001f92c:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001f933:	e8 a7 53 fe ff       	call   c0004cdf <f_mount>
c001f938:	83 c4 10             	add    esp,0x10
c001f93b:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001f942:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001f94a:	74 19                	je     c001f965 <FAT::tryMount(LogicalDisk*, int)+0x117>
c001f94c:	83 ec 0c             	sub    esp,0xc
c001f94f:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001f956:	e8 99 fb fe ff       	call   c000f4f4 <rfree>
c001f95b:	83 c4 10             	add    esp,0x10
c001f95e:	b0 00                	mov    al,0x0
c001f960:	e9 e7 00 00 00       	jmp    c001fa4c <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001f965:	83 ec 04             	sub    esp,0x4
c001f968:	68 00 01 00 00       	push   0x100
c001f96d:	6a 00                	push   0x0
c001f96f:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001f976:	50                   	push   eax
c001f977:	e8 0f 0d fe ff       	call   c000068b <memset>
c001f97c:	83 c4 10             	add    esp,0x10
c001f97f:	83 ec 08             	sub    esp,0x8
c001f982:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001f989:	50                   	push   eax
c001f98a:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001f991:	50                   	push   eax
c001f992:	e8 4a 0e fe ff       	call   c00007e1 <strcat>
c001f997:	83 c4 10             	add    esp,0x10
c001f99a:	83 ec 08             	sub    esp,0x8
c001f99d:	68 d4 ad 02 c0       	push   0xc002add4
c001f9a2:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001f9a9:	50                   	push   eax
c001f9aa:	e8 32 0e fe ff       	call   c00007e1 <strcat>
c001f9af:	83 c4 10             	add    esp,0x10
c001f9b2:	83 ec 04             	sub    esp,0x4
c001f9b5:	6a 01                	push   0x1
c001f9b7:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001f9be:	50                   	push   eax
c001f9bf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f9c3:	50                   	push   eax
c001f9c4:	e8 78 53 fe ff       	call   c0004d41 <f_open>
c001f9c9:	83 c4 10             	add    esp,0x10
c001f9cc:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001f9d3:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001f9da:	85 c0                	test   eax,eax
c001f9dc:	74 0a                	je     c001f9e8 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c001f9de:	78 2d                	js     c001fa0d <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001f9e0:	83 e8 04             	sub    eax,0x4
c001f9e3:	83 f8 01             	cmp    eax,0x1
c001f9e6:	77 25                	ja     c001fa0d <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001f9e8:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001f9f0:	83 ec 0c             	sub    esp,0xc
c001f9f3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f9f7:	50                   	push   eax
c001f9f8:	e8 96 5e fe ff       	call   c0005893 <f_close>
c001f9fd:	83 c4 10             	add    esp,0x10
c001fa00:	90                   	nop
c001fa01:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001fa09:	74 3a                	je     c001fa45 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c001fa0b:	eb 2d                	jmp    c001fa3a <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c001fa0d:	83 ec 0c             	sub    esp,0xc
c001fa10:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001fa17:	e8 d8 fa fe ff       	call   c000f4f4 <rfree>
c001fa1c:	83 c4 10             	add    esp,0x10
c001fa1f:	83 ec 04             	sub    esp,0x4
c001fa22:	6a 00                	push   0x0
c001fa24:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001fa2b:	50                   	push   eax
c001fa2c:	6a 00                	push   0x0
c001fa2e:	e8 ac 52 fe ff       	call   c0004cdf <f_mount>
c001fa33:	83 c4 10             	add    esp,0x10
c001fa36:	b0 00                	mov    al,0x0
c001fa38:	eb 12                	jmp    c001fa4c <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001fa3a:	a1 60 df 02 c0       	mov    eax,ds:0xc002df60
c001fa3f:	40                   	inc    eax
c001fa40:	a3 60 df 02 c0       	mov    ds:0xc002df60,eax
c001fa45:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001fa4c:	81 c4 6c 03 00 00    	add    esp,0x36c
c001fa52:	c3                   	ret    
c001fa53:	90                   	nop

c001fa54 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001fa54:	81 ec 3c 02 00 00    	sub    esp,0x23c
c001fa5a:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c001fa62:	74 0a                	je     c001fa6e <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c001fa64:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c001fa6c:	75 0a                	jne    c001fa78 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c001fa6e:	b8 04 00 00 00       	mov    eax,0x4
c001fa73:	e9 db 00 00 00       	jmp    c001fb53 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001fa78:	83 ec 08             	sub    esp,0x8
c001fa7b:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001fa82:	50                   	push   eax
c001fa83:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c001fa8a:	e8 0e 64 fe ff       	call   c0005e9d <f_readdir>
c001fa8f:	83 c4 10             	add    esp,0x10
c001fa92:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c001fa99:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001fa9f:	83 ec 0c             	sub    esp,0xc
c001faa2:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001faa9:	83 c0 1a             	add    eax,0x1a
c001faac:	50                   	push   eax
c001faad:	e8 f6 0b fe ff       	call   c00006a8 <strlen>
c001fab2:	83 c4 10             	add    esp,0x10
c001fab5:	ba 00 00 00 00       	mov    edx,0x0
c001faba:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001fabe:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001fac2:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c001fac9:	0f b6 c0             	movzx  eax,al
c001facc:	83 e0 10             	and    eax,0x10
c001facf:	74 07                	je     c001fad8 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c001fad1:	b8 02 00 00 00       	mov    eax,0x2
c001fad6:	eb 05                	jmp    c001fadd <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c001fad8:	b8 01 00 00 00       	mov    eax,0x1
c001fadd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fae1:	83 ec 08             	sub    esp,0x8
c001fae4:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001faeb:	83 c0 1a             	add    eax,0x1a
c001faee:	50                   	push   eax
c001faef:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001faf3:	83 c0 10             	add    eax,0x10
c001faf6:	50                   	push   eax
c001faf7:	e8 2e 0c fe ff       	call   c000072a <strcpy>
c001fafc:	83 c4 10             	add    esp,0x10
c001faff:	83 ec 04             	sub    esp,0x4
c001fb02:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c001fb09:	8d 44 24 08          	lea    eax,[esp+0x8]
c001fb0d:	50                   	push   eax
c001fb0e:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c001fb15:	e8 3b 0b fe ff       	call   c0000655 <memcpy>
c001fb1a:	83 c4 10             	add    esp,0x10
c001fb1d:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c001fb24:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001fb2a:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c001fb31:	84 c0                	test   al,al
c001fb33:	75 07                	jne    c001fb3c <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c001fb35:	b8 07 00 00 00       	mov    eax,0x7
c001fb3a:	eb 17                	jmp    c001fb53 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001fb3c:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c001fb43:	85 c0                	test   eax,eax
c001fb45:	75 07                	jne    c001fb4e <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c001fb47:	b8 00 00 00 00       	mov    eax,0x0
c001fb4c:	eb 05                	jmp    c001fb53 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001fb4e:	b8 01 00 00 00       	mov    eax,0x1
c001fb53:	81 c4 3c 02 00 00    	add    esp,0x23c
c001fb59:	c3                   	ret    

c001fb5a <FAT::read(void*, unsigned long, void*, int*)>:
c001fb5a:	83 ec 1c             	sub    esp,0x1c
c001fb5d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001fb62:	74 07                	je     c001fb6b <FAT::read(void*, unsigned long, void*, int*)+0x11>
c001fb64:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001fb69:	75 07                	jne    c001fb72 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c001fb6b:	b8 04 00 00 00       	mov    eax,0x4
c001fb70:	eb 3d                	jmp    c001fbaf <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001fb72:	8d 44 24 08          	lea    eax,[esp+0x8]
c001fb76:	50                   	push   eax
c001fb77:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001fb7b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001fb7f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fb83:	e8 f5 55 fe ff       	call   c000517d <f_read>
c001fb88:	83 c4 10             	add    esp,0x10
c001fb8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fb8f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fb93:	89 c2                	mov    edx,eax
c001fb95:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001fb99:	89 10                	mov    DWORD PTR [eax],edx
c001fb9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fb9f:	85 c0                	test   eax,eax
c001fba1:	75 07                	jne    c001fbaa <FAT::read(void*, unsigned long, void*, int*)+0x50>
c001fba3:	b8 00 00 00 00       	mov    eax,0x0
c001fba8:	eb 05                	jmp    c001fbaf <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001fbaa:	b8 01 00 00 00       	mov    eax,0x1
c001fbaf:	83 c4 1c             	add    esp,0x1c
c001fbb2:	c3                   	ret    
c001fbb3:	90                   	nop

c001fbb4 <FAT::write(void*, unsigned long, void*, int*)>:
c001fbb4:	83 ec 1c             	sub    esp,0x1c
c001fbb7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001fbbc:	74 07                	je     c001fbc5 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c001fbbe:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001fbc3:	75 07                	jne    c001fbcc <FAT::write(void*, unsigned long, void*, int*)+0x18>
c001fbc5:	b8 04 00 00 00       	mov    eax,0x4
c001fbca:	eb 3d                	jmp    c001fc09 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001fbcc:	8d 44 24 08          	lea    eax,[esp+0x8]
c001fbd0:	50                   	push   eax
c001fbd1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001fbd5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001fbd9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fbdd:	e8 1b 58 fe ff       	call   c00053fd <f_write>
c001fbe2:	83 c4 10             	add    esp,0x10
c001fbe5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fbe9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fbed:	89 c2                	mov    edx,eax
c001fbef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001fbf3:	89 10                	mov    DWORD PTR [eax],edx
c001fbf5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fbf9:	85 c0                	test   eax,eax
c001fbfb:	75 07                	jne    c001fc04 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c001fbfd:	b8 00 00 00 00       	mov    eax,0x0
c001fc02:	eb 05                	jmp    c001fc09 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001fc04:	b8 01 00 00 00       	mov    eax,0x1
c001fc09:	83 c4 1c             	add    esp,0x1c
c001fc0c:	c3                   	ret    
c001fc0d:	90                   	nop

c001fc0e <FAT::close(void*)>:
c001fc0e:	83 ec 1c             	sub    esp,0x1c
c001fc11:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001fc16:	75 07                	jne    c001fc1f <FAT::close(void*)+0x11>
c001fc18:	b8 04 00 00 00       	mov    eax,0x4
c001fc1d:	eb 36                	jmp    c001fc55 <FAT::close(void*)+0x47>
c001fc1f:	83 ec 0c             	sub    esp,0xc
c001fc22:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fc26:	e8 68 5c fe ff       	call   c0005893 <f_close>
c001fc2b:	83 c4 10             	add    esp,0x10
c001fc2e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fc32:	83 ec 0c             	sub    esp,0xc
c001fc35:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fc39:	e8 a6 f8 fe ff       	call   c000f4e4 <free>
c001fc3e:	83 c4 10             	add    esp,0x10
c001fc41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fc45:	85 c0                	test   eax,eax
c001fc47:	75 07                	jne    c001fc50 <FAT::close(void*)+0x42>
c001fc49:	b8 00 00 00 00       	mov    eax,0x0
c001fc4e:	eb 05                	jmp    c001fc55 <FAT::close(void*)+0x47>
c001fc50:	b8 01 00 00 00       	mov    eax,0x1
c001fc55:	83 c4 1c             	add    esp,0x1c
c001fc58:	c3                   	ret    
c001fc59:	90                   	nop

c001fc5a <FAT::closeDir(void*)>:
c001fc5a:	83 ec 1c             	sub    esp,0x1c
c001fc5d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001fc62:	75 07                	jne    c001fc6b <FAT::closeDir(void*)+0x11>
c001fc64:	b8 04 00 00 00       	mov    eax,0x4
c001fc69:	eb 36                	jmp    c001fca1 <FAT::closeDir(void*)+0x47>
c001fc6b:	83 ec 0c             	sub    esp,0xc
c001fc6e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fc72:	e8 04 62 fe ff       	call   c0005e7b <f_closedir>
c001fc77:	83 c4 10             	add    esp,0x10
c001fc7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fc7e:	83 ec 0c             	sub    esp,0xc
c001fc81:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fc85:	e8 5a f8 fe ff       	call   c000f4e4 <free>
c001fc8a:	83 c4 10             	add    esp,0x10
c001fc8d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fc91:	85 c0                	test   eax,eax
c001fc93:	75 07                	jne    c001fc9c <FAT::closeDir(void*)+0x42>
c001fc95:	b8 00 00 00 00       	mov    eax,0x0
c001fc9a:	eb 05                	jmp    c001fca1 <FAT::closeDir(void*)+0x47>
c001fc9c:	b8 01 00 00 00       	mov    eax,0x1
c001fca1:	83 c4 1c             	add    esp,0x1c
c001fca4:	c3                   	ret    
c001fca5:	90                   	nop

c001fca6 <FAT::seek(void*, unsigned long long)>:
c001fca6:	83 ec 2c             	sub    esp,0x2c
c001fca9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fcad:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fcb1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001fcb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fcb9:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001fcbe:	75 07                	jne    c001fcc7 <FAT::seek(void*, unsigned long long)+0x21>
c001fcc0:	b8 04 00 00 00       	mov    eax,0x4
c001fcc5:	eb 2f                	jmp    c001fcf6 <FAT::seek(void*, unsigned long long)+0x50>
c001fcc7:	83 ec 04             	sub    esp,0x4
c001fcca:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001fcce:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001fcd2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001fcd6:	e8 e7 5b fe ff       	call   c00058c2 <f_lseek>
c001fcdb:	83 c4 10             	add    esp,0x10
c001fcde:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001fce2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fce6:	85 c0                	test   eax,eax
c001fce8:	75 07                	jne    c001fcf1 <FAT::seek(void*, unsigned long long)+0x4b>
c001fcea:	b8 00 00 00 00       	mov    eax,0x0
c001fcef:	eb 05                	jmp    c001fcf6 <FAT::seek(void*, unsigned long long)+0x50>
c001fcf1:	b8 01 00 00 00       	mov    eax,0x1
c001fcf6:	83 c4 2c             	add    esp,0x2c
c001fcf9:	c3                   	ret    

c001fcfa <fatWrapperReadDisk>:
c001fcfa:	83 ec 1c             	sub    esp,0x1c
c001fcfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fd01:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001fd05:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fd09:	89 04 24             	mov    DWORD PTR [esp],eax
c001fd0c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001fd10:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001fd14:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001fd19:	8b 04 85 60 cf 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd30a0]
c001fd20:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001fd24:	83 ec 0c             	sub    esp,0xc
c001fd27:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fd2b:	52                   	push   edx
c001fd2c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fd30:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fd34:	50                   	push   eax
c001fd35:	e8 c2 60 ff ff       	call   c0015dfc <LogicalDisk::read(unsigned long long, int, void*)>
c001fd3a:	83 c4 20             	add    esp,0x20
c001fd3d:	83 c4 1c             	add    esp,0x1c
c001fd40:	c3                   	ret    

c001fd41 <fatWrapperWriteDisk>:
c001fd41:	83 ec 1c             	sub    esp,0x1c
c001fd44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fd48:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001fd4c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fd50:	89 04 24             	mov    DWORD PTR [esp],eax
c001fd53:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001fd57:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001fd5b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001fd60:	8b 04 85 60 cf 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd30a0]
c001fd67:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001fd6b:	83 ec 0c             	sub    esp,0xc
c001fd6e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fd72:	52                   	push   edx
c001fd73:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fd77:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fd7b:	50                   	push   eax
c001fd7c:	e8 e7 60 ff ff       	call   c0015e68 <LogicalDisk::write(unsigned long long, int, void*)>
c001fd81:	83 c4 20             	add    esp,0x20
c001fd84:	83 c4 1c             	add    esp,0x1c
c001fd87:	c3                   	ret    

c001fd88 <fatWrapperIoctl>:
c001fd88:	53                   	push   ebx
c001fd89:	83 ec 28             	sub    esp,0x28
c001fd8c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001fd90:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001fd94:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001fd98:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001fd9c:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001fda1:	75 31                	jne    c001fdd4 <fatWrapperIoctl+0x4c>
c001fda3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fda7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001fdab:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001fdb0:	8b 04 85 60 cf 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd30a0]
c001fdb7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001fdbd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001fdc3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fdc7:	66 89 02             	mov    WORD PTR [edx],ax
c001fdca:	b8 00 00 00 00       	mov    eax,0x0
c001fdcf:	e9 b2 00 00 00       	jmp    c001fe86 <fatWrapperIoctl+0xfe>
c001fdd4:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001fdd9:	75 6a                	jne    c001fe45 <fatWrapperIoctl+0xbd>
c001fddb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fddf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001fde3:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001fde8:	8b 04 85 60 cf 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd30a0]
c001fdef:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001fdf5:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001fdfb:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001fe01:	89 c8                	mov    eax,ecx
c001fe03:	89 da                	mov    edx,ebx
c001fe05:	0f a4 c2 0a          	shld   edx,eax,0xa
c001fe09:	c1 e0 0a             	shl    eax,0xa
c001fe0c:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001fe11:	8b 0c 8d 60 cf 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd30a0]
c001fe18:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001fe1e:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001fe24:	89 cb                	mov    ebx,ecx
c001fe26:	c1 fb 1f             	sar    ebx,0x1f
c001fe29:	53                   	push   ebx
c001fe2a:	51                   	push   ecx
c001fe2b:	52                   	push   edx
c001fe2c:	50                   	push   eax
c001fe2d:	e8 6a 55 00 00       	call   c002539c <__udivdi3>
c001fe32:	83 c4 10             	add    esp,0x10
c001fe35:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001fe39:	89 01                	mov    DWORD PTR [ecx],eax
c001fe3b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001fe3e:	b8 00 00 00 00       	mov    eax,0x0
c001fe43:	eb 41                	jmp    c001fe86 <fatWrapperIoctl+0xfe>
c001fe45:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001fe4a:	75 07                	jne    c001fe53 <fatWrapperIoctl+0xcb>
c001fe4c:	b8 00 00 00 00       	mov    eax,0x0
c001fe51:	eb 33                	jmp    c001fe86 <fatWrapperIoctl+0xfe>
c001fe53:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001fe58:	75 19                	jne    c001fe73 <fatWrapperIoctl+0xeb>
c001fe5a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fe5e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001fe62:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fe66:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001fe6c:	b8 00 00 00 00       	mov    eax,0x0
c001fe71:	eb 13                	jmp    c001fe86 <fatWrapperIoctl+0xfe>
c001fe73:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001fe78:	75 07                	jne    c001fe81 <fatWrapperIoctl+0xf9>
c001fe7a:	b8 00 00 00 00       	mov    eax,0x0
c001fe7f:	eb 05                	jmp    c001fe86 <fatWrapperIoctl+0xfe>
c001fe81:	b8 04 00 00 00       	mov    eax,0x4
c001fe86:	83 c4 28             	add    esp,0x28
c001fe89:	5b                   	pop    ebx
c001fe8a:	c3                   	ret    
c001fe8b:	90                   	nop

c001fe8c <FAT::FAT()>:
c001fe8c:	83 ec 1c             	sub    esp,0x1c
c001fe8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fe93:	83 ec 0c             	sub    esp,0xc
c001fe96:	50                   	push   eax
c001fe97:	e8 d8 2b ff ff       	call   c0012a74 <Filesystem::Filesystem()>
c001fe9c:	83 c4 10             	add    esp,0x10
c001fe9f:	ba 10 ae 02 c0       	mov    edx,0xc002ae10
c001fea4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fea8:	89 10                	mov    DWORD PTR [eax],edx
c001feaa:	c7 05 60 df 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002df60,0x0
c001feb4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001febc:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001fec1:	7f 15                	jg     c001fed8 <FAT::FAT()+0x4c>
c001fec3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fec7:	c7 04 85 80 df 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd2080],0xffffffff
c001fed2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001fed6:	eb e4                	jmp    c001febc <FAT::FAT()+0x30>
c001fed8:	90                   	nop
c001fed9:	83 c4 1c             	add    esp,0x1c
c001fedc:	c3                   	ret    
c001fedd:	90                   	nop

c001fede <FAT::fixFilepath(char*)>:
c001fede:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fee2:	8a 00                	mov    al,BYTE PTR [eax]
c001fee4:	3c 40                	cmp    al,0x40
c001fee6:	7e 2c                	jle    c001ff14 <FAT::fixFilepath(char*)+0x36>
c001fee8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001feec:	8a 00                	mov    al,BYTE PTR [eax]
c001feee:	83 e8 41             	sub    eax,0x41
c001fef1:	88 c2                	mov    dl,al
c001fef3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fef7:	88 10                	mov    BYTE PTR [eax],dl
c001fef9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fefd:	8a 00                	mov    al,BYTE PTR [eax]
c001feff:	0f be c0             	movsx  eax,al
c001ff02:	8b 04 85 80 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2080]
c001ff09:	83 c0 30             	add    eax,0x30
c001ff0c:	88 c2                	mov    dl,al
c001ff0e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ff12:	88 10                	mov    BYTE PTR [eax],dl
c001ff14:	90                   	nop
c001ff15:	c3                   	ret    

c001ff16 <FAT::open(char const*, void**, FileOpenMode)>:
c001ff16:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ff1c:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ff24:	74 0a                	je     c001ff30 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c001ff26:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001ff2e:	75 0a                	jne    c001ff3a <FAT::open(char const*, void**, FileOpenMode)+0x24>
c001ff30:	b8 04 00 00 00       	mov    eax,0x4
c001ff35:	e9 fd 00 00 00       	jmp    c0020037 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001ff3a:	83 ec 08             	sub    esp,0x8
c001ff3d:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ff44:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ff48:	50                   	push   eax
c001ff49:	e8 dc 07 fe ff       	call   c000072a <strcpy>
c001ff4e:	83 c4 10             	add    esp,0x10
c001ff51:	83 ec 08             	sub    esp,0x8
c001ff54:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ff58:	50                   	push   eax
c001ff59:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ff60:	e8 79 ff ff ff       	call   c001fede <FAT::fixFilepath(char*)>
c001ff65:	83 c4 10             	add    esp,0x10
c001ff68:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001ff70:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001ff77:	83 e0 01             	and    eax,0x1
c001ff7a:	74 08                	je     c001ff84 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c001ff7c:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001ff84:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001ff8b:	83 e0 04             	and    eax,0x4
c001ff8e:	74 10                	je     c001ffa0 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c001ff90:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001ff98:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001ffa0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001ffa7:	83 e0 02             	and    eax,0x2
c001ffaa:	74 08                	je     c001ffb4 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c001ffac:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001ffb4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001ffbb:	83 e0 08             	and    eax,0x8
c001ffbe:	74 08                	je     c001ffc8 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c001ffc0:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001ffc8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001ffcf:	83 e0 10             	and    eax,0x10
c001ffd2:	74 08                	je     c001ffdc <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c001ffd4:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001ffdc:	83 ec 0c             	sub    esp,0xc
c001ffdf:	68 50 02 00 00       	push   0x250
c001ffe4:	e8 eb f4 fe ff       	call   c000f4d4 <malloc>
c001ffe9:	83 c4 10             	add    esp,0x10
c001ffec:	89 c2                	mov    edx,eax
c001ffee:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001fff5:	89 10                	mov    DWORD PTR [eax],edx
c001fff7:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001ffff:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020006:	8b 00                	mov    eax,DWORD PTR [eax]
c0020008:	83 ec 04             	sub    esp,0x4
c002000b:	52                   	push   edx
c002000c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020010:	52                   	push   edx
c0020011:	50                   	push   eax
c0020012:	e8 2a 4d fe ff       	call   c0004d41 <f_open>
c0020017:	83 c4 10             	add    esp,0x10
c002001a:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0020021:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0020029:	74 07                	je     c0020032 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c002002b:	b8 01 00 00 00       	mov    eax,0x1
c0020030:	eb 05                	jmp    c0020037 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020032:	b8 00 00 00 00       	mov    eax,0x0
c0020037:	81 c4 1c 01 00 00    	add    esp,0x11c
c002003d:	c3                   	ret    

c002003e <FAT::openDir(char const*, void**)>:
c002003e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020044:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002004c:	74 0a                	je     c0020058 <FAT::openDir(char const*, void**)+0x1a>
c002004e:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020056:	75 07                	jne    c002005f <FAT::openDir(char const*, void**)+0x21>
c0020058:	b8 04 00 00 00       	mov    eax,0x4
c002005d:	eb 7d                	jmp    c00200dc <FAT::openDir(char const*, void**)+0x9e>
c002005f:	83 ec 08             	sub    esp,0x8
c0020062:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020069:	8d 44 24 18          	lea    eax,[esp+0x18]
c002006d:	50                   	push   eax
c002006e:	e8 b7 06 fe ff       	call   c000072a <strcpy>
c0020073:	83 c4 10             	add    esp,0x10
c0020076:	83 ec 08             	sub    esp,0x8
c0020079:	8d 44 24 14          	lea    eax,[esp+0x14]
c002007d:	50                   	push   eax
c002007e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020085:	e8 54 fe ff ff       	call   c001fede <FAT::fixFilepath(char*)>
c002008a:	83 c4 10             	add    esp,0x10
c002008d:	83 ec 0c             	sub    esp,0xc
c0020090:	6a 4c                	push   0x4c
c0020092:	e8 3d f4 fe ff       	call   c000f4d4 <malloc>
c0020097:	83 c4 10             	add    esp,0x10
c002009a:	89 c2                	mov    edx,eax
c002009c:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00200a3:	89 10                	mov    DWORD PTR [eax],edx
c00200a5:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00200ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00200ae:	83 ec 08             	sub    esp,0x8
c00200b1:	8d 54 24 14          	lea    edx,[esp+0x14]
c00200b5:	52                   	push   edx
c00200b6:	50                   	push   eax
c00200b7:	e8 bd 5c fe ff       	call   c0005d79 <f_opendir>
c00200bc:	83 c4 10             	add    esp,0x10
c00200bf:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00200c6:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00200ce:	74 07                	je     c00200d7 <FAT::openDir(char const*, void**)+0x99>
c00200d0:	b8 01 00 00 00       	mov    eax,0x1
c00200d5:	eb 05                	jmp    c00200dc <FAT::openDir(char const*, void**)+0x9e>
c00200d7:	b8 00 00 00 00       	mov    eax,0x0
c00200dc:	81 c4 1c 01 00 00    	add    esp,0x11c
c00200e2:	c3                   	ret    
c00200e3:	90                   	nop

c00200e4 <FAT::stat(char const*, unsigned long long*, bool*)>:
c00200e4:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00200ea:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00200f2:	75 0a                	jne    c00200fe <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c00200f4:	b8 04 00 00 00       	mov    eax,0x4
c00200f9:	e9 c9 00 00 00       	jmp    c00201c7 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00200fe:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0020106:	75 0a                	jne    c0020112 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0020108:	b8 04 00 00 00       	mov    eax,0x4
c002010d:	e9 b5 00 00 00       	jmp    c00201c7 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020112:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c002011a:	75 0a                	jne    c0020126 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c002011c:	b8 04 00 00 00       	mov    eax,0x4
c0020121:	e9 a1 00 00 00       	jmp    c00201c7 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020126:	83 ec 08             	sub    esp,0x8
c0020129:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020130:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020137:	50                   	push   eax
c0020138:	e8 ed 05 fe ff       	call   c000072a <strcpy>
c002013d:	83 c4 10             	add    esp,0x10
c0020140:	83 ec 08             	sub    esp,0x8
c0020143:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c002014a:	50                   	push   eax
c002014b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020152:	e8 87 fd ff ff       	call   c001fede <FAT::fixFilepath(char*)>
c0020157:	83 c4 10             	add    esp,0x10
c002015a:	83 ec 08             	sub    esp,0x8
c002015d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020161:	50                   	push   eax
c0020162:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020169:	50                   	push   eax
c002016a:	e8 c9 5d fe ff       	call   c0005f38 <f_stat>
c002016f:	83 c4 10             	add    esp,0x10
c0020172:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020179:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020180:	85 c0                	test   eax,eax
c0020182:	74 07                	je     c002018b <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0020184:	83 f8 04             	cmp    eax,0x4
c0020187:	74 32                	je     c00201bb <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0020189:	eb 37                	jmp    c00201c2 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c002018b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002018f:	0f b6 c0             	movzx  eax,al
c0020192:	83 e0 10             	and    eax,0x10
c0020195:	0f 95 c2             	setne  dl
c0020198:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c002019f:	88 10                	mov    BYTE PTR [eax],dl
c00201a1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00201a4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00201a8:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c00201af:	89 01                	mov    DWORD PTR [ecx],eax
c00201b1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00201b4:	b8 00 00 00 00       	mov    eax,0x0
c00201b9:	eb 0c                	jmp    c00201c7 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00201bb:	b8 02 00 00 00       	mov    eax,0x2
c00201c0:	eb 05                	jmp    c00201c7 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00201c2:	b8 01 00 00 00       	mov    eax,0x1
c00201c7:	81 c4 2c 02 00 00    	add    esp,0x22c
c00201cd:	c3                   	ret    

c00201ce <FAT::unlink(char const*)>:
c00201ce:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00201d4:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00201dc:	75 07                	jne    c00201e5 <FAT::unlink(char const*)+0x17>
c00201de:	b8 04 00 00 00       	mov    eax,0x4
c00201e3:	eb 5c                	jmp    c0020241 <FAT::unlink(char const*)+0x73>
c00201e5:	83 ec 08             	sub    esp,0x8
c00201e8:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00201ef:	8d 44 24 18          	lea    eax,[esp+0x18]
c00201f3:	50                   	push   eax
c00201f4:	e8 31 05 fe ff       	call   c000072a <strcpy>
c00201f9:	83 c4 10             	add    esp,0x10
c00201fc:	83 ec 08             	sub    esp,0x8
c00201ff:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020203:	50                   	push   eax
c0020204:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002020b:	e8 ce fc ff ff       	call   c001fede <FAT::fixFilepath(char*)>
c0020210:	83 c4 10             	add    esp,0x10
c0020213:	83 ec 0c             	sub    esp,0xc
c0020216:	8d 44 24 18          	lea    eax,[esp+0x18]
c002021a:	50                   	push   eax
c002021b:	e8 6a 60 fe ff       	call   c000628a <f_unlink>
c0020220:	83 c4 10             	add    esp,0x10
c0020223:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002022a:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020231:	85 c0                	test   eax,eax
c0020233:	75 07                	jne    c002023c <FAT::unlink(char const*)+0x6e>
c0020235:	b8 00 00 00 00       	mov    eax,0x0
c002023a:	eb 05                	jmp    c0020241 <FAT::unlink(char const*)+0x73>
c002023c:	b8 01 00 00 00       	mov    eax,0x1
c0020241:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020247:	c3                   	ret    

c0020248 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0020248:	81 ec 2c 01 00 00    	sub    esp,0x12c
c002024e:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0020255:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c002025c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020260:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020264:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c002026c:	75 0a                	jne    c0020278 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c002026e:	b8 04 00 00 00       	mov    eax,0x4
c0020273:	e9 1c 01 00 00       	jmp    c0020394 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020278:	83 ec 08             	sub    esp,0x8
c002027b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020282:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020286:	50                   	push   eax
c0020287:	e8 9e 04 fe ff       	call   c000072a <strcpy>
c002028c:	83 c4 10             	add    esp,0x10
c002028f:	83 ec 08             	sub    esp,0x8
c0020292:	8d 44 24 20          	lea    eax,[esp+0x20]
c0020296:	50                   	push   eax
c0020297:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c002029e:	e8 3b fc ff ff       	call   c001fede <FAT::fixFilepath(char*)>
c00202a3:	83 c4 10             	add    esp,0x10
c00202a6:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00202ae:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c00202b6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00202bb:	83 e0 01             	and    eax,0x1
c00202be:	74 08                	je     c00202c8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c00202c0:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c00202c8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00202cd:	83 e0 02             	and    eax,0x2
c00202d0:	74 08                	je     c00202da <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c00202d2:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c00202da:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00202df:	83 e0 04             	and    eax,0x4
c00202e2:	74 08                	je     c00202ec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c00202e4:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c00202ec:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00202f1:	83 e0 08             	and    eax,0x8
c00202f4:	74 08                	je     c00202fe <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c00202f6:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c00202fe:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020303:	83 e0 01             	and    eax,0x1
c0020306:	74 08                	je     c0020310 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0020308:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0020310:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020315:	83 e0 02             	and    eax,0x2
c0020318:	74 08                	je     c0020322 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c002031a:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0020322:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020327:	83 e0 04             	and    eax,0x4
c002032a:	74 08                	je     c0020334 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c002032c:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0020334:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020339:	83 e0 08             	and    eax,0x8
c002033c:	74 08                	je     c0020346 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c002033e:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0020346:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c002034d:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0020354:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c002035c:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0020364:	83 ec 04             	sub    esp,0x4
c0020367:	52                   	push   edx
c0020368:	50                   	push   eax
c0020369:	8d 44 24 24          	lea    eax,[esp+0x24]
c002036d:	50                   	push   eax
c002036e:	e8 b9 65 fe ff       	call   c000692c <f_chmod>
c0020373:	83 c4 10             	add    esp,0x10
c0020376:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c002037d:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0020384:	85 c0                	test   eax,eax
c0020386:	75 07                	jne    c002038f <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0020388:	b8 00 00 00 00       	mov    eax,0x0
c002038d:	eb 05                	jmp    c0020394 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c002038f:	b8 01 00 00 00       	mov    eax,0x1
c0020394:	81 c4 2c 01 00 00    	add    esp,0x12c
c002039a:	c3                   	ret    
c002039b:	90                   	nop

c002039c <FAT::rename(char const*, char const*)>:
c002039c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00203a2:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00203aa:	74 0a                	je     c00203b6 <FAT::rename(char const*, char const*)+0x1a>
c00203ac:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00203b4:	75 0a                	jne    c00203c0 <FAT::rename(char const*, char const*)+0x24>
c00203b6:	b8 04 00 00 00       	mov    eax,0x4
c00203bb:	e9 98 00 00 00       	jmp    c0020458 <FAT::rename(char const*, char const*)+0xbc>
c00203c0:	83 ec 08             	sub    esp,0x8
c00203c3:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00203ca:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00203d1:	50                   	push   eax
c00203d2:	e8 53 03 fe ff       	call   c000072a <strcpy>
c00203d7:	83 c4 10             	add    esp,0x10
c00203da:	83 ec 08             	sub    esp,0x8
c00203dd:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00203e4:	50                   	push   eax
c00203e5:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00203ec:	e8 ed fa ff ff       	call   c001fede <FAT::fixFilepath(char*)>
c00203f1:	83 c4 10             	add    esp,0x10
c00203f4:	83 ec 08             	sub    esp,0x8
c00203f7:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00203fe:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020402:	50                   	push   eax
c0020403:	e8 22 03 fe ff       	call   c000072a <strcpy>
c0020408:	83 c4 10             	add    esp,0x10
c002040b:	83 ec 08             	sub    esp,0x8
c002040e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020412:	50                   	push   eax
c0020413:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002041a:	e8 bf fa ff ff       	call   c001fede <FAT::fixFilepath(char*)>
c002041f:	83 c4 10             	add    esp,0x10
c0020422:	83 ec 08             	sub    esp,0x8
c0020425:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020429:	50                   	push   eax
c002042a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020431:	50                   	push   eax
c0020432:	e8 02 62 fe ff       	call   c0006639 <f_rename>
c0020437:	83 c4 10             	add    esp,0x10
c002043a:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0020441:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0020448:	85 c0                	test   eax,eax
c002044a:	75 07                	jne    c0020453 <FAT::rename(char const*, char const*)+0xb7>
c002044c:	b8 00 00 00 00       	mov    eax,0x0
c0020451:	eb 05                	jmp    c0020458 <FAT::rename(char const*, char const*)+0xbc>
c0020453:	b8 01 00 00 00       	mov    eax,0x1
c0020458:	81 c4 1c 02 00 00    	add    esp,0x21c
c002045e:	c3                   	ret    
c002045f:	90                   	nop

c0020460 <FAT::mkdir(char const*)>:
c0020460:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020466:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002046e:	75 07                	jne    c0020477 <FAT::mkdir(char const*)+0x17>
c0020470:	b8 04 00 00 00       	mov    eax,0x4
c0020475:	eb 5c                	jmp    c00204d3 <FAT::mkdir(char const*)+0x73>
c0020477:	83 ec 08             	sub    esp,0x8
c002047a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020481:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020485:	50                   	push   eax
c0020486:	e8 9f 02 fe ff       	call   c000072a <strcpy>
c002048b:	83 c4 10             	add    esp,0x10
c002048e:	83 ec 08             	sub    esp,0x8
c0020491:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020495:	50                   	push   eax
c0020496:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002049d:	e8 3c fa ff ff       	call   c001fede <FAT::fixFilepath(char*)>
c00204a2:	83 c4 10             	add    esp,0x10
c00204a5:	83 ec 0c             	sub    esp,0xc
c00204a8:	8d 44 24 18          	lea    eax,[esp+0x18]
c00204ac:	50                   	push   eax
c00204ad:	e8 5b 5f fe ff       	call   c000640d <f_mkdir>
c00204b2:	83 c4 10             	add    esp,0x10
c00204b5:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00204bc:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00204c3:	85 c0                	test   eax,eax
c00204c5:	75 07                	jne    c00204ce <FAT::mkdir(char const*)+0x6e>
c00204c7:	b8 00 00 00 00       	mov    eax,0x0
c00204cc:	eb 05                	jmp    c00204d3 <FAT::mkdir(char const*)+0x73>
c00204ce:	b8 01 00 00 00       	mov    eax,0x1
c00204d3:	81 c4 1c 01 00 00    	add    esp,0x11c
c00204d9:	c3                   	ret    

c00204da <FAT::exists(char const*)>:
c00204da:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00204e0:	83 ec 08             	sub    esp,0x8
c00204e3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00204ea:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00204ee:	50                   	push   eax
c00204ef:	e8 36 02 fe ff       	call   c000072a <strcpy>
c00204f4:	83 c4 10             	add    esp,0x10
c00204f7:	83 ec 08             	sub    esp,0x8
c00204fa:	8d 44 24 08          	lea    eax,[esp+0x8]
c00204fe:	50                   	push   eax
c00204ff:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020506:	e8 d3 f9 ff ff       	call   c001fede <FAT::fixFilepath(char*)>
c002050b:	83 c4 10             	add    esp,0x10
c002050e:	83 ec 08             	sub    esp,0x8
c0020511:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0020518:	50                   	push   eax
c0020519:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002051d:	50                   	push   eax
c002051e:	e8 15 5a fe ff       	call   c0005f38 <f_stat>
c0020523:	83 c4 10             	add    esp,0x10
c0020526:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c002052d:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020534:	85 c0                	test   eax,eax
c0020536:	75 04                	jne    c002053c <FAT::exists(char const*)+0x62>
c0020538:	b0 01                	mov    al,0x1
c002053a:	eb 02                	jmp    c002053e <FAT::exists(char const*)+0x64>
c002053c:	b0 00                	mov    al,0x0
c002053e:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020544:	c3                   	ret    
c0020545:	90                   	nop

c0020546 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0020546:	b8 08 00 00 00       	mov    eax,0x8
c002054b:	c3                   	ret    

c002054c <ISO9660::seek(void*, unsigned long long)>:
c002054c:	53                   	push   ebx
c002054d:	b8 04 00 00 00       	mov    eax,0x4
c0020552:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020556:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002055a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002055e:	85 d2                	test   edx,edx
c0020560:	74 17                	je     c0020579 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0020562:	89 c8                	mov    eax,ecx
c0020564:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0020567:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c002056a:	b8 01 00 00 00       	mov    eax,0x1
c002056f:	73 08                	jae    c0020579 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0020571:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0020574:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0020577:	31 c0                	xor    eax,eax
c0020579:	5b                   	pop    ebx
c002057a:	c3                   	ret    
c002057b:	90                   	nop

c002057c <ISO9660::tell(void*, unsigned long long*)>:
c002057c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020580:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020584:	85 d2                	test   edx,edx
c0020586:	74 12                	je     c002059a <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0020588:	85 c0                	test   eax,eax
c002058a:	74 0e                	je     c002059a <ISO9660::tell(void*, unsigned long long*)+0x1e>
c002058c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002058f:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0020592:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0020595:	89 10                	mov    DWORD PTR [eax],edx
c0020597:	31 c0                	xor    eax,eax
c0020599:	c3                   	ret    
c002059a:	b8 04 00 00 00       	mov    eax,0x4
c002059f:	c3                   	ret    

c00205a0 <ISO9660::getName()>:
c00205a0:	b8 6c ae 02 c0       	mov    eax,0xc002ae6c
c00205a5:	c3                   	ret    

c00205a6 <ISO9660::stat(void*, unsigned long long*)>:
c00205a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00205aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00205ae:	85 d2                	test   edx,edx
c00205b0:	74 12                	je     c00205c4 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00205b2:	85 c0                	test   eax,eax
c00205b4:	74 0e                	je     c00205c4 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00205b6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00205b9:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00205bc:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00205bf:	89 10                	mov    DWORD PTR [eax],edx
c00205c1:	31 c0                	xor    eax,eax
c00205c3:	c3                   	ret    
c00205c4:	b8 04 00 00 00       	mov    eax,0x4
c00205c9:	c3                   	ret    

c00205ca <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00205ca:	b8 01 00 00 00       	mov    eax,0x1
c00205cf:	c3                   	ret    

c00205d0 <ISO9660::unlink(char const*)>:
c00205d0:	b8 01 00 00 00       	mov    eax,0x1
c00205d5:	c3                   	ret    

c00205d6 <ISO9660::write(void*, unsigned long, void*, int*)>:
c00205d6:	b8 01 00 00 00       	mov    eax,0x1
c00205db:	c3                   	ret    

c00205dc <ISO9660::rename(char const*, char const*)>:
c00205dc:	b8 01 00 00 00       	mov    eax,0x1
c00205e1:	c3                   	ret    

c00205e2 <ISO9660::mkdir(char const*)>:
c00205e2:	b8 01 00 00 00       	mov    eax,0x1
c00205e7:	c3                   	ret    

c00205e8 <ISO9660::close(void*)>:
c00205e8:	83 ec 0c             	sub    esp,0xc
c00205eb:	b8 04 00 00 00       	mov    eax,0x4
c00205f0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00205f4:	85 d2                	test   edx,edx
c00205f6:	74 0e                	je     c0020606 <ISO9660::close(void*)+0x1e>
c00205f8:	83 ec 0c             	sub    esp,0xc
c00205fb:	52                   	push   edx
c00205fc:	e8 e3 ee fe ff       	call   c000f4e4 <free>
c0020601:	83 c4 10             	add    esp,0x10
c0020604:	31 c0                	xor    eax,eax
c0020606:	83 c4 0c             	add    esp,0xc
c0020609:	c3                   	ret    

c002060a <ISO9660::closeDir(void*)>:
c002060a:	83 ec 0c             	sub    esp,0xc
c002060d:	b8 04 00 00 00       	mov    eax,0x4
c0020612:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020616:	85 d2                	test   edx,edx
c0020618:	74 0e                	je     c0020628 <ISO9660::closeDir(void*)+0x1e>
c002061a:	83 ec 0c             	sub    esp,0xc
c002061d:	52                   	push   edx
c002061e:	e8 c1 ee fe ff       	call   c000f4e4 <free>
c0020623:	83 c4 10             	add    esp,0x10
c0020626:	31 c0                	xor    eax,eax
c0020628:	83 c4 0c             	add    esp,0xc
c002062b:	c3                   	ret    

c002062c <ISO9660::~ISO9660()>:
c002062c:	83 ec 0c             	sub    esp,0xc
c002062f:	ba c0 ae 02 c0       	mov    edx,0xc002aec0
c0020634:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020638:	89 10                	mov    DWORD PTR [eax],edx
c002063a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002063e:	83 ec 0c             	sub    esp,0xc
c0020641:	50                   	push   eax
c0020642:	e8 51 24 ff ff       	call   c0012a98 <Filesystem::~Filesystem()>
c0020647:	83 c4 10             	add    esp,0x10
c002064a:	90                   	nop
c002064b:	83 c4 0c             	add    esp,0xc
c002064e:	c3                   	ret    
c002064f:	90                   	nop

c0020650 <ISO9660::~ISO9660()>:
c0020650:	83 ec 0c             	sub    esp,0xc
c0020653:	83 ec 0c             	sub    esp,0xc
c0020656:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002065a:	e8 cd ff ff ff       	call   c002062c <ISO9660::~ISO9660()>
c002065f:	83 c4 10             	add    esp,0x10
c0020662:	83 ec 08             	sub    esp,0x8
c0020665:	6a 08                	push   0x8
c0020667:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002066b:	e8 1f 20 ff ff       	call   c001268f <operator delete(void*, unsigned long)>
c0020670:	83 c4 10             	add    esp,0x10
c0020673:	83 c4 0c             	add    esp,0xc
c0020676:	c3                   	ret    

c0020677 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0020677:	55                   	push   ebp
c0020678:	31 c9                	xor    ecx,ecx
c002067a:	57                   	push   edi
c002067b:	56                   	push   esi
c002067c:	53                   	push   ebx
c002067d:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0020681:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0020685:	89 eb                	mov    ebx,ebp
c0020687:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c002068b:	39 ce                	cmp    esi,ecx
c002068d:	7e 17                	jle    c00206a6 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c002068f:	31 d2                	xor    edx,edx
c0020691:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0020695:	7d 13                	jge    c00206aa <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0020697:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002069b:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c002069e:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c00206a1:	75 0d                	jne    c00206b0 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c00206a3:	42                   	inc    edx
c00206a4:	eb eb                	jmp    c0020691 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c00206a6:	31 c0                	xor    eax,eax
c00206a8:	eb 0a                	jmp    c00206b4 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00206aa:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00206ae:	eb 04                	jmp    c00206b4 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00206b0:	41                   	inc    ecx
c00206b1:	43                   	inc    ebx
c00206b2:	eb d7                	jmp    c002068b <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c00206b4:	5b                   	pop    ebx
c00206b5:	5e                   	pop    esi
c00206b6:	5f                   	pop    edi
c00206b7:	5d                   	pop    ebp
c00206b8:	c3                   	ret    

c00206b9 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c00206b9:	56                   	push   esi
c00206ba:	53                   	push   ebx
c00206bb:	52                   	push   edx
c00206bc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00206c0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00206c4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00206c8:	39 0d 60 e0 02 c0    	cmp    DWORD PTR ds:0xc002e060,ecx
c00206ce:	75 08                	jne    c00206d8 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c00206d0:	38 05 d4 be 02 c0    	cmp    BYTE PTR ds:0xc002bed4,al
c00206d6:	74 2b                	je     c0020703 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c00206d8:	83 ec 0c             	sub    esp,0xc
c00206db:	a2 d4 be 02 c0       	mov    ds:0xc002bed4,al
c00206e0:	68 80 e0 02 c0       	push   0xc002e080
c00206e5:	0f be c0             	movsx  eax,al
c00206e8:	6a 01                	push   0x1
c00206ea:	89 0d 60 e0 02 c0    	mov    DWORD PTR ds:0xc002e060,ecx
c00206f0:	31 db                	xor    ebx,ebx
c00206f2:	53                   	push   ebx
c00206f3:	51                   	push   ecx
c00206f4:	ff 34 85 5c ce 02 c0 	push   DWORD PTR [eax*4-0x3ffd31a4]
c00206fb:	e8 fc 56 ff ff       	call   c0015dfc <LogicalDisk::read(unsigned long long, int, void*)>
c0020700:	83 c4 20             	add    esp,0x20
c0020703:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c002070b:	c7 44 24 14 80 e0 02 c0 	mov    DWORD PTR [esp+0x14],0xc002e080
c0020713:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0020717:	58                   	pop    eax
c0020718:	5b                   	pop    ebx
c0020719:	5e                   	pop    esi
c002071a:	e9 36 ff fd ff       	jmp    c0000655 <memcpy>
c002071f:	90                   	nop

c0020720 <ISO9660::tryMount(LogicalDisk*, int)>:
c0020720:	81 ec 10 08 00 00    	sub    esp,0x810
c0020726:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c002072d:	83 c0 41             	add    eax,0x41
c0020730:	0f be c0             	movsx  eax,al
c0020733:	50                   	push   eax
c0020734:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020738:	50                   	push   eax
c0020739:	6a 10                	push   0x10
c002073b:	e8 79 ff ff ff       	call   c00206b9 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020740:	83 c4 10             	add    esp,0x10
c0020743:	31 c0                	xor    eax,eax
c0020745:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c002074a:	75 1d                	jne    c0020769 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002074c:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0020751:	75 16                	jne    c0020769 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0020753:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0020758:	75 0f                	jne    c0020769 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002075a:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c002075f:	75 08                	jne    c0020769 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0020761:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0020766:	0f 94 c0             	sete   al
c0020769:	81 c4 0c 08 00 00    	add    esp,0x80c
c002076f:	c3                   	ret    

c0020770 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0020770:	55                   	push   ebp
c0020771:	57                   	push   edi
c0020772:	56                   	push   esi
c0020773:	53                   	push   ebx
c0020774:	81 ec 34 08 00 00    	sub    esp,0x834
c002077a:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c0020781:	55                   	push   ebp
c0020782:	68 87 ae 02 c0       	push   0xc002ae87
c0020787:	e8 e3 1f ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c002078c:	83 c4 10             	add    esp,0x10
c002078f:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c0020797:	0f 84 06 02 00 00    	je     c00209a3 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c002079d:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c00207a5:	0f 84 f8 01 00 00    	je     c00209a3 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c00207ab:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c00207b2:	b8 01 00 00 00       	mov    eax,0x1
c00207b7:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c00207bb:	0f 85 e7 01 00 00    	jne    c00209a8 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c00207c1:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c00207c4:	31 d2                	xor    edx,edx
c00207c6:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c00207c9:	89 e9                	mov    ecx,ebp
c00207cb:	89 d3                	mov    ebx,edx
c00207cd:	01 f1                	add    ecx,esi
c00207cf:	11 fb                	adc    ebx,edi
c00207d1:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00207d5:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00207d9:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c00207e0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00207e3:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c00207e6:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00207ea:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00207ee:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00207f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00207f6:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c00207fa:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00207fe:	72 19                	jb     c0020819 <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c0020800:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0020804:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020808:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002080c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c002080f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020813:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020817:	eb 13                	jmp    c002082c <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c0020819:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002081d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020821:	29 f0                	sub    eax,esi
c0020823:	19 fa                	sbb    edx,edi
c0020825:	89 04 24             	mov    DWORD PTR [esp],eax
c0020828:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002082c:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c0020833:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0020836:	8b 00                	mov    eax,DWORD PTR [eax]
c0020838:	53                   	push   ebx
c0020839:	0f a4 c2 0b          	shld   edx,eax,0xb
c002083d:	c1 e0 0b             	shl    eax,0xb
c0020840:	01 c6                	add    esi,eax
c0020842:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0020849:	11 d7                	adc    edi,edx
c002084b:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c002084f:	89 fa                	mov    edx,edi
c0020851:	50                   	push   eax
c0020852:	8d 44 24 28          	lea    eax,[esp+0x28]
c0020856:	50                   	push   eax
c0020857:	89 f0                	mov    eax,esi
c0020859:	0f ac d0 0b          	shrd   eax,edx,0xb
c002085d:	50                   	push   eax
c002085e:	e8 56 fe ff ff       	call   c00206b9 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020863:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c002086a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002086e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0020871:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0020875:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002087b:	83 c4 10             	add    esp,0x10
c002087e:	b8 00 08 00 00       	mov    eax,0x800
c0020883:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0020887:	29 d0                	sub    eax,edx
c0020889:	39 c1                	cmp    ecx,eax
c002088b:	83 db 00             	sbb    ebx,0x0
c002088e:	7d 19                	jge    c00208a9 <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c0020890:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0020895:	75 16                	jne    c00208ad <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c0020897:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c002089e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00208a4:	e9 f6 00 00 00       	jmp    c002099f <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c00208a9:	89 c5                	mov    ebp,eax
c00208ab:	eb 03                	jmp    c00208b0 <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c00208ad:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00208b0:	51                   	push   ecx
c00208b1:	55                   	push   ebp
c00208b2:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c00208b6:	50                   	push   eax
c00208b7:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c00208be:	e8 92 fd fd ff       	call   c0000655 <memcpy>
c00208c3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00208c7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00208cb:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c00208d2:	01 e8                	add    eax,ebp
c00208d4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00208d8:	89 e8                	mov    eax,ebp
c00208da:	99                   	cdq    
c00208db:	01 ee                	add    esi,ebp
c00208dd:	11 d7                	adc    edi,edx
c00208df:	29 e9                	sub    ecx,ebp
c00208e1:	19 d3                	sbb    ebx,edx
c00208e3:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00208e7:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00208eb:	83 c4 10             	add    esp,0x10
c00208ee:	b8 ff 07 00 00       	mov    eax,0x7ff
c00208f3:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00208f6:	b8 00 00 00 00       	mov    eax,0x0
c00208fb:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00208ff:	7d 3f                	jge    c0020940 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c0020901:	52                   	push   edx
c0020902:	89 fa                	mov    edx,edi
c0020904:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c002090b:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c002090f:	50                   	push   eax
c0020910:	89 f0                	mov    eax,esi
c0020912:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020916:	0f ac d0 0b          	shrd   eax,edx,0xb
c002091a:	50                   	push   eax
c002091b:	e8 99 fd ff ff       	call   c00206b9 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020920:	81 c6 00 08 00 00    	add    esi,0x800
c0020926:	83 d7 00             	adc    edi,0x0
c0020929:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0020931:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0020939:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c002093e:	eb ab                	jmp    c00208eb <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c0020940:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020944:	0b 04 24             	or     eax,DWORD PTR [esp]
c0020947:	74 34                	je     c002097d <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c0020949:	89 fa                	mov    edx,edi
c002094b:	50                   	push   eax
c002094c:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0020953:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c0020957:	50                   	push   eax
c0020958:	89 f0                	mov    eax,esi
c002095a:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c002095e:	0f ac d0 0b          	shrd   eax,edx,0xb
c0020962:	55                   	push   ebp
c0020963:	50                   	push   eax
c0020964:	e8 50 fd ff ff       	call   c00206b9 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020969:	83 c4 0c             	add    esp,0xc
c002096c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0020970:	55                   	push   ebp
c0020971:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020975:	e8 db fc fd ff       	call   c0000655 <memcpy>
c002097a:	83 c4 10             	add    esp,0x10
c002097d:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0020984:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0020988:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002098c:	89 38                	mov    DWORD PTR [eax],edi
c002098e:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c0020995:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020999:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c002099c:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c002099f:	31 c0                	xor    eax,eax
c00209a1:	eb 05                	jmp    c00209a8 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c00209a3:	b8 04 00 00 00       	mov    eax,0x4
c00209a8:	81 c4 2c 08 00 00    	add    esp,0x82c
c00209ae:	5b                   	pop    ebx
c00209af:	5e                   	pop    esi
c00209b0:	5f                   	pop    edi
c00209b1:	5d                   	pop    ebp
c00209b2:	c3                   	ret    
c00209b3:	90                   	nop

c00209b4 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c00209b4:	55                   	push   ebp
c00209b5:	57                   	push   edi
c00209b6:	56                   	push   esi
c00209b7:	53                   	push   ebx
c00209b8:	81 ec 5c 09 00 00    	sub    esp,0x95c
c00209be:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c00209c5:	85 f6                	test   esi,esi
c00209c7:	0f 84 64 02 00 00    	je     c0020c31 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c00209cd:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c00209d5:	0f 84 56 02 00 00    	je     c0020c31 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c00209db:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00209de:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c00209e1:	75 0a                	jne    c00209ed <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c00209e3:	b8 07 00 00 00       	mov    eax,0x7
c00209e8:	e9 49 02 00 00       	jmp    c0020c36 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c00209ed:	50                   	push   eax
c00209ee:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c00209f2:	50                   	push   eax
c00209f3:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c00209fa:	53                   	push   ebx
c00209fb:	8b 06                	mov    eax,DWORD PTR [esi]
c00209fd:	c1 e0 0b             	shl    eax,0xb
c0020a00:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0020a03:	c1 e8 0b             	shr    eax,0xb
c0020a06:	50                   	push   eax
c0020a07:	e8 ad fc ff ff       	call   c00206b9 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020a0c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0020a0f:	83 c4 10             	add    esp,0x10
c0020a12:	89 c1                	mov    ecx,eax
c0020a14:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0020a17:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0020a1d:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0020a20:	84 db                	test   bl,bl
c0020a22:	0f 85 90 00 00 00    	jne    c0020ab8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0020a28:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0020a2e:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0020a34:	29 c7                	sub    edi,eax
c0020a36:	89 fb                	mov    ebx,edi
c0020a38:	c1 fb 1f             	sar    ebx,0x1f
c0020a3b:	01 f8                	add    eax,edi
c0020a3d:	11 da                	adc    edx,ebx
c0020a3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020a43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020a47:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0020a4a:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c0020a4d:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0020a50:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0020a53:	89 04 24             	mov    DWORD PTR [esp],eax
c0020a56:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0020a5a:	89 d8                	mov    eax,ebx
c0020a5c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0020a5f:	ba 00 00 00 00       	mov    edx,0x0
c0020a64:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0020a68:	b8 00 00 00 00       	mov    eax,0x0
c0020a6d:	73 0b                	jae    c0020a7a <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0020a6f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020a72:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020a76:	29 f8                	sub    eax,edi
c0020a78:	19 da                	sbb    edx,ebx
c0020a7a:	89 d3                	mov    ebx,edx
c0020a7c:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0020a7f:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0020a82:	09 c3                	or     ebx,eax
c0020a84:	0f 84 59 ff ff ff    	je     c00209e3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0020a8a:	55                   	push   ebp
c0020a8b:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0020a8f:	50                   	push   eax
c0020a90:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0020a97:	53                   	push   ebx
c0020a98:	8b 06                	mov    eax,DWORD PTR [esi]
c0020a9a:	c1 e0 0b             	shl    eax,0xb
c0020a9d:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0020aa1:	c1 e8 0b             	shr    eax,0xb
c0020aa4:	50                   	push   eax
c0020aa5:	e8 0f fc ff ff       	call   c00206b9 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020aaa:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0020aad:	83 c4 10             	add    esp,0x10
c0020ab0:	25 ff 07 00 00       	and    eax,0x7ff
c0020ab5:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0020ab8:	57                   	push   edi
c0020ab9:	6a 28                	push   0x28
c0020abb:	6a 00                	push   0x0
c0020abd:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020ac1:	50                   	push   eax
c0020ac2:	e8 c4 fb fd ff       	call   c000068b <memset>
c0020ac7:	31 d2                	xor    edx,edx
c0020ac9:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0020acc:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0020ad2:	89 f8                	mov    eax,edi
c0020ad4:	83 c0 21             	add    eax,0x21
c0020ad7:	83 d2 00             	adc    edx,0x0
c0020ada:	89 c7                	mov    edi,eax
c0020adc:	89 d5                	mov    ebp,edx
c0020ade:	83 c4 10             	add    esp,0x10
c0020ae1:	31 c9                	xor    ecx,ecx
c0020ae3:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0020aea:	83 f9 28             	cmp    ecx,0x28
c0020aed:	88 04 24             	mov    BYTE PTR [esp],al
c0020af0:	0f 94 c2             	sete   dl
c0020af3:	88 d0                	mov    al,dl
c0020af5:	ba ff 07 00 00       	mov    edx,0x7ff
c0020afa:	39 fa                	cmp    edx,edi
c0020afc:	ba 00 00 00 00       	mov    edx,0x0
c0020b01:	19 ea                	sbb    edx,ebp
c0020b03:	0f 92 c2             	setb   dl
c0020b06:	09 c2                	or     edx,eax
c0020b08:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0020b0c:	0f 94 c0             	sete   al
c0020b0f:	08 d0                	or     al,dl
c0020b11:	75 16                	jne    c0020b29 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0020b13:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0020b17:	74 10                	je     c0020b29 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0020b19:	8a 04 24             	mov    al,BYTE PTR [esp]
c0020b1c:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0020b20:	41                   	inc    ecx
c0020b21:	83 c7 01             	add    edi,0x1
c0020b24:	83 d5 00             	adc    ebp,0x0
c0020b27:	eb ba                	jmp    c0020ae3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0020b29:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0020b30:	83 ec 0c             	sub    esp,0xc
c0020b33:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0020b37:	57                   	push   edi
c0020b38:	e8 6b fb fd ff       	call   c00006a8 <strlen>
c0020b3d:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0020b45:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0020b49:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0020b50:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0020b53:	5a                   	pop    edx
c0020b54:	25 ff 07 00 00       	and    eax,0x7ff
c0020b59:	01 c8                	add    eax,ecx
c0020b5b:	59                   	pop    ecx
c0020b5c:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0020b62:	83 e0 02             	and    eax,0x2
c0020b65:	3c 01                	cmp    al,0x1
c0020b67:	19 c0                	sbb    eax,eax
c0020b69:	83 c0 02             	add    eax,0x2
c0020b6c:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0020b70:	57                   	push   edi
c0020b71:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0020b75:	50                   	push   eax
c0020b76:	e8 af fb fd ff       	call   c000072a <strcpy>
c0020b7b:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0020b7f:	83 c4 10             	add    esp,0x10
c0020b82:	84 c0                	test   al,al
c0020b84:	75 21                	jne    c0020ba7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0020b86:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0020b8e:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0020b96:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0020b9e:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0020ba5:	eb 28                	jmp    c0020bcf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0020ba7:	fe c8                	dec    al
c0020ba9:	75 24                	jne    c0020bcf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0020bab:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0020bb3:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0020bbb:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0020bc3:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0020bca:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0020bcf:	0f b6 fb             	movzx  edi,bl
c0020bd2:	31 db                	xor    ebx,ebx
c0020bd4:	50                   	push   eax
c0020bd5:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0020bdc:	8d 44 24 48          	lea    eax,[esp+0x48]
c0020be0:	50                   	push   eax
c0020be1:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0020be8:	e8 68 fa fd ff       	call   c0000655 <memcpy>
c0020bed:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0020bf4:	89 f9                	mov    ecx,edi
c0020bf6:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020bfc:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0020bff:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0020c02:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0020c05:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0020c08:	83 c4 10             	add    esp,0x10
c0020c0b:	39 c7                	cmp    edi,eax
c0020c0d:	89 df                	mov    edi,ebx
c0020c0f:	19 d7                	sbb    edi,edx
c0020c11:	72 10                	jb     c0020c23 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0020c13:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0020c1a:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0020c21:	eb 0a                	jmp    c0020c2d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0020c23:	29 c8                	sub    eax,ecx
c0020c25:	19 da                	sbb    edx,ebx
c0020c27:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0020c2a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0020c2d:	31 c0                	xor    eax,eax
c0020c2f:	eb 05                	jmp    c0020c36 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0020c31:	b8 04 00 00 00       	mov    eax,0x4
c0020c36:	81 c4 5c 09 00 00    	add    esp,0x95c
c0020c3c:	5b                   	pop    ebx
c0020c3d:	5e                   	pop    esi
c0020c3e:	5f                   	pop    edi
c0020c3f:	5d                   	pop    ebp
c0020c40:	c3                   	ret    

c0020c41 <readRoot(unsigned int*, unsigned int*, char)>:
c0020c41:	81 ec 40 08 00 00    	sub    esp,0x840
c0020c47:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0020c4f:	50                   	push   eax
c0020c50:	8d 44 24 38          	lea    eax,[esp+0x38]
c0020c54:	50                   	push   eax
c0020c55:	6a 10                	push   0x10
c0020c57:	e8 5d fa ff ff       	call   c00206b9 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020c5c:	83 c4 0c             	add    esp,0xc
c0020c5f:	6a 22                	push   0x22
c0020c61:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0020c68:	50                   	push   eax
c0020c69:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0020c6d:	50                   	push   eax
c0020c6e:	e8 e2 f9 fd ff       	call   c0000655 <memcpy>
c0020c73:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0020c7a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0020c7e:	89 10                	mov    DWORD PTR [eax],edx
c0020c80:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0020c87:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020c8b:	89 10                	mov    DWORD PTR [eax],edx
c0020c8d:	b0 01                	mov    al,0x1
c0020c8f:	81 c4 4c 08 00 00    	add    esp,0x84c
c0020c95:	c3                   	ret    

c0020c96 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0020c96:	55                   	push   ebp
c0020c97:	57                   	push   edi
c0020c98:	56                   	push   esi
c0020c99:	53                   	push   ebx
c0020c9a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020ca0:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0020ca7:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0020cae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020cb2:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0020cb6:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0020cba:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020cbe:	75 03                	jne    c0020cc3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0020cc0:	83 c3 02             	add    ebx,0x2
c0020cc3:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0020cc6:	75 03                	jne    c0020ccb <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0020cc8:	43                   	inc    ebx
c0020cc9:	eb f8                	jmp    c0020cc3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0020ccb:	51                   	push   ecx
c0020ccc:	68 00 01 00 00       	push   0x100
c0020cd1:	6a 00                	push   0x0
c0020cd3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020cd7:	50                   	push   eax
c0020cd8:	e8 ae f9 fd ff       	call   c000068b <memset>
c0020cdd:	83 c4 10             	add    esp,0x10
c0020ce0:	31 d2                	xor    edx,edx
c0020ce2:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0020ce5:	84 c0                	test   al,al
c0020ce7:	74 21                	je     c0020d0a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0020ce9:	3c 2f                	cmp    al,0x2f
c0020ceb:	75 0b                	jne    c0020cf8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0020ced:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0020cf1:	bd 01 00 00 00       	mov    ebp,0x1
c0020cf6:	eb 14                	jmp    c0020d0c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0020cf8:	8d 48 9f             	lea    ecx,[eax-0x61]
c0020cfb:	80 f9 19             	cmp    cl,0x19
c0020cfe:	77 03                	ja     c0020d03 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0020d00:	83 e8 20             	sub    eax,0x20
c0020d03:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0020d07:	42                   	inc    edx
c0020d08:	eb d8                	jmp    c0020ce2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0020d0a:	31 ed                	xor    ebp,ebp
c0020d0c:	83 ec 0c             	sub    esp,0xc
c0020d0f:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0020d16:	e8 b9 e7 fe ff       	call   c000f4d4 <malloc>
c0020d1b:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0020d22:	89 c6                	mov    esi,eax
c0020d24:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0020d2a:	c1 ef 0b             	shr    edi,0xb
c0020d2d:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0020d34:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0020d38:	83 c4 10             	add    esp,0x10
c0020d3b:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0020d40:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020d44:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0020d4b:	74 28                	je     c0020d75 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0020d4d:	52                   	push   edx
c0020d4e:	57                   	push   edi
c0020d4f:	50                   	push   eax
c0020d50:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020d54:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0020d5b:	e8 59 f9 ff ff       	call   c00206b9 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020d60:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020d64:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0020d6b:	05 00 08 00 00       	add    eax,0x800
c0020d70:	83 c4 10             	add    esp,0x10
c0020d73:	eb cb                	jmp    c0020d40 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0020d75:	83 ec 0c             	sub    esp,0xc
c0020d78:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0020d7c:	57                   	push   edi
c0020d7d:	e8 26 f9 fd ff       	call   c00006a8 <strlen>
c0020d82:	50                   	push   eax
c0020d83:	57                   	push   edi
c0020d84:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0020d8b:	56                   	push   esi
c0020d8c:	e8 e6 f8 ff ff       	call   c0020677 <__memmem(unsigned char*, int, unsigned char*, int)>
c0020d91:	83 c4 20             	add    esp,0x20
c0020d94:	85 c0                	test   eax,eax
c0020d96:	75 13                	jne    c0020dab <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0020d98:	83 ec 0c             	sub    esp,0xc
c0020d9b:	56                   	push   esi
c0020d9c:	e8 43 e7 fe ff       	call   c000f4e4 <free>
c0020da1:	83 c4 10             	add    esp,0x10
c0020da4:	31 c0                	xor    eax,eax
c0020da6:	e9 b3 00 00 00       	jmp    c0020e5e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0020dab:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0020daf:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0020db3:	c1 e7 08             	shl    edi,0x8
c0020db6:	c1 e2 10             	shl    edx,0x10
c0020db9:	09 d7                	or     edi,edx
c0020dbb:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0020dbf:	09 d7                	or     edi,edx
c0020dc1:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0020dc5:	c1 e2 18             	shl    edx,0x18
c0020dc8:	09 d7                	or     edi,edx
c0020dca:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0020dce:	89 d1                	mov    ecx,edx
c0020dd0:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0020dd4:	c1 e1 08             	shl    ecx,0x8
c0020dd7:	c1 e2 10             	shl    edx,0x10
c0020dda:	09 ca                	or     edx,ecx
c0020ddc:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0020de0:	09 ca                	or     edx,ecx
c0020de2:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0020de6:	c1 e1 18             	shl    ecx,0x18
c0020de9:	09 ca                	or     edx,ecx
c0020deb:	89 e9                	mov    ecx,ebp
c0020ded:	84 c9                	test   cl,cl
c0020def:	74 3c                	je     c0020e2d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0020df1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020df5:	83 ec 0c             	sub    esp,0xc
c0020df8:	56                   	push   esi
c0020df9:	e8 e6 e6 fe ff       	call   c000f4e4 <free>
c0020dfe:	83 c4 0c             	add    esp,0xc
c0020e01:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0020e08:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0020e0d:	50                   	push   eax
c0020e0e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0020e15:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0020e1c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020e20:	52                   	push   edx
c0020e21:	57                   	push   edi
c0020e22:	53                   	push   ebx
c0020e23:	e8 6e fe ff ff       	call   c0020c96 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0020e28:	83 c4 20             	add    esp,0x20
c0020e2b:	eb 31                	jmp    c0020e5e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0020e2d:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0020e30:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0020e37:	d0 e8                	shr    al,1
c0020e39:	89 3b                	mov    DWORD PTR [ebx],edi
c0020e3b:	83 e0 01             	and    eax,0x1
c0020e3e:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0020e45:	83 ec 0c             	sub    esp,0xc
c0020e48:	89 13                	mov    DWORD PTR [ebx],edx
c0020e4a:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0020e51:	89 03                	mov    DWORD PTR [ebx],eax
c0020e53:	56                   	push   esi
c0020e54:	e8 8b e6 fe ff       	call   c000f4e4 <free>
c0020e59:	83 c4 10             	add    esp,0x10
c0020e5c:	b0 01                	mov    al,0x1
c0020e5e:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020e64:	5b                   	pop    ebx
c0020e65:	5e                   	pop    esi
c0020e66:	5f                   	pop    edi
c0020e67:	5d                   	pop    ebp
c0020e68:	c3                   	ret    

c0020e69 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0020e69:	55                   	push   ebp
c0020e6a:	57                   	push   edi
c0020e6b:	56                   	push   esi
c0020e6c:	53                   	push   ebx
c0020e6d:	83 ec 20             	sub    esp,0x20
c0020e70:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0020e74:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0020e78:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0020e7c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020e84:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0020e8c:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0020e91:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0020e97:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0020e9d:	57                   	push   edi
c0020e9e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020ea2:	50                   	push   eax
c0020ea3:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020ea7:	50                   	push   eax
c0020ea8:	e8 94 fd ff ff       	call   c0020c41 <readRoot(unsigned int*, unsigned int*, char)>
c0020ead:	5a                   	pop    edx
c0020eae:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020eb2:	e8 f1 f7 fd ff       	call   c00006a8 <strlen>
c0020eb7:	83 c4 10             	add    esp,0x10
c0020eba:	83 f8 03             	cmp    eax,0x3
c0020ebd:	77 17                	ja     c0020ed6 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0020ebf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020ec3:	89 03                	mov    DWORD PTR [ebx],eax
c0020ec5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020ec9:	89 06                	mov    DWORD PTR [esi],eax
c0020ecb:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0020ed2:	b0 01                	mov    al,0x1
c0020ed4:	eb 19                	jmp    c0020eef <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0020ed6:	50                   	push   eax
c0020ed7:	55                   	push   ebp
c0020ed8:	57                   	push   edi
c0020ed9:	56                   	push   esi
c0020eda:	53                   	push   ebx
c0020edb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0020edf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0020ee3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0020ee7:	e8 aa fd ff ff       	call   c0020c96 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0020eec:	83 c4 20             	add    esp,0x20
c0020eef:	83 c4 1c             	add    esp,0x1c
c0020ef2:	5b                   	pop    ebx
c0020ef3:	5e                   	pop    esi
c0020ef4:	5f                   	pop    edi
c0020ef5:	5d                   	pop    ebp
c0020ef6:	c3                   	ret    
c0020ef7:	90                   	nop

c0020ef8 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0020ef8:	57                   	push   edi
c0020ef9:	56                   	push   esi
c0020efa:	53                   	push   ebx
c0020efb:	83 ec 10             	sub    esp,0x10
c0020efe:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0020f02:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0020f06:	85 ff                	test   edi,edi
c0020f08:	74 7b                	je     c0020f85 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c0020f0a:	85 f6                	test   esi,esi
c0020f0c:	74 77                	je     c0020f85 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c0020f0e:	83 ec 0c             	sub    esp,0xc
c0020f11:	6a 1c                	push   0x1c
c0020f13:	e8 bc e5 fe ff       	call   c000f4d4 <malloc>
c0020f18:	89 07                	mov    DWORD PTR [edi],eax
c0020f1a:	89 c3                	mov    ebx,eax
c0020f1c:	58                   	pop    eax
c0020f1d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020f21:	50                   	push   eax
c0020f22:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0020f25:	50                   	push   eax
c0020f26:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020f2a:	50                   	push   eax
c0020f2b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020f2f:	50                   	push   eax
c0020f30:	56                   	push   esi
c0020f31:	e8 33 ff ff ff       	call   c0020e69 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0020f36:	83 c4 20             	add    esp,0x20
c0020f39:	84 c0                	test   al,al
c0020f3b:	74 07                	je     c0020f44 <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c0020f3d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020f42:	74 0b                	je     c0020f4f <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c0020f44:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0020f48:	b8 01 00 00 00       	mov    eax,0x1
c0020f4d:	eb 3b                	jmp    c0020f8a <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c0020f4f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020f53:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0020f57:	89 03                	mov    DWORD PTR [ebx],eax
c0020f59:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0020f60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f64:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0020f6b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0020f72:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0020f75:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0020f7c:	8a 06                	mov    al,BYTE PTR [esi]
c0020f7e:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0020f81:	31 c0                	xor    eax,eax
c0020f83:	eb 05                	jmp    c0020f8a <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c0020f85:	b8 04 00 00 00       	mov    eax,0x4
c0020f8a:	83 c4 10             	add    esp,0x10
c0020f8d:	5b                   	pop    ebx
c0020f8e:	5e                   	pop    esi
c0020f8f:	5f                   	pop    edi
c0020f90:	c3                   	ret    
c0020f91:	90                   	nop

c0020f92 <ISO9660::exists(char const*)>:
c0020f92:	83 ec 28             	sub    esp,0x28
c0020f95:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020f99:	8d 54 24 18          	lea    edx,[esp+0x18]
c0020f9d:	52                   	push   edx
c0020f9e:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0020fa1:	52                   	push   edx
c0020fa2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0020fa6:	52                   	push   edx
c0020fa7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0020fab:	52                   	push   edx
c0020fac:	50                   	push   eax
c0020fad:	e8 b7 fe ff ff       	call   c0020e69 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0020fb2:	83 c4 3c             	add    esp,0x3c
c0020fb5:	c3                   	ret    

c0020fb6 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0020fb6:	56                   	push   esi
c0020fb7:	53                   	push   ebx
c0020fb8:	83 ec 14             	sub    esp,0x14
c0020fbb:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0020fbf:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0020fc3:	85 db                	test   ebx,ebx
c0020fc5:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0020fc9:	0f 94 c2             	sete   dl
c0020fcc:	85 f6                	test   esi,esi
c0020fce:	0f 94 c0             	sete   al
c0020fd1:	08 c2                	or     dl,al
c0020fd3:	75 68                	jne    c002103d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0020fd5:	85 c9                	test   ecx,ecx
c0020fd7:	74 64                	je     c002103d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0020fd9:	83 ec 0c             	sub    esp,0xc
c0020fdc:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0020fdf:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020fe3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0020fe9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0020ff0:	50                   	push   eax
c0020ff1:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0020ff4:	50                   	push   eax
c0020ff5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020ff9:	50                   	push   eax
c0020ffa:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020ffe:	50                   	push   eax
c0020fff:	51                   	push   ecx
c0021000:	e8 64 fe ff ff       	call   c0020e69 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021005:	83 c4 20             	add    esp,0x20
c0021008:	ba 01 00 00 00       	mov    edx,0x1
c002100d:	84 c0                	test   al,al
c002100f:	74 31                	je     c0021042 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021011:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021015:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002101c:	89 03                	mov    DWORD PTR [ebx],eax
c002101e:	ba 00 00 00 00       	mov    edx,0x0
c0021023:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021027:	85 c0                	test   eax,eax
c0021029:	0f 95 06             	setne  BYTE PTR [esi]
c002102c:	74 14                	je     c0021042 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002102e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021034:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002103b:	eb 05                	jmp    c0021042 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002103d:	ba 04 00 00 00       	mov    edx,0x4
c0021042:	83 c4 14             	add    esp,0x14
c0021045:	89 d0                	mov    eax,edx
c0021047:	5b                   	pop    ebx
c0021048:	5e                   	pop    esi
c0021049:	c3                   	ret    

c002104a <ISO9660::openDir(char const*, void**)>:
c002104a:	57                   	push   edi
c002104b:	56                   	push   esi
c002104c:	53                   	push   ebx
c002104d:	83 ec 10             	sub    esp,0x10
c0021050:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021054:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021058:	85 ff                	test   edi,edi
c002105a:	0f 84 95 00 00 00    	je     c00210f5 <ISO9660::openDir(char const*, void**)+0xab>
c0021060:	85 f6                	test   esi,esi
c0021062:	0f 84 8d 00 00 00    	je     c00210f5 <ISO9660::openDir(char const*, void**)+0xab>
c0021068:	83 ec 0c             	sub    esp,0xc
c002106b:	6a 1c                	push   0x1c
c002106d:	e8 62 e4 fe ff       	call   c000f4d4 <malloc>
c0021072:	89 07                	mov    DWORD PTR [edi],eax
c0021074:	89 c3                	mov    ebx,eax
c0021076:	59                   	pop    ecx
c0021077:	8d 44 24 18          	lea    eax,[esp+0x18]
c002107b:	50                   	push   eax
c002107c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c002107f:	50                   	push   eax
c0021080:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021084:	50                   	push   eax
c0021085:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021089:	50                   	push   eax
c002108a:	56                   	push   esi
c002108b:	e8 d9 fd ff ff       	call   c0020e69 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021090:	83 c4 20             	add    esp,0x20
c0021093:	84 c0                	test   al,al
c0021095:	74 07                	je     c002109e <ISO9660::openDir(char const*, void**)+0x54>
c0021097:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002109c:	75 21                	jne    c00210bf <ISO9660::openDir(char const*, void**)+0x75>
c002109e:	0f b6 c0             	movzx  eax,al
c00210a1:	52                   	push   edx
c00210a2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00210a6:	50                   	push   eax
c00210a7:	68 9a ae 02 c0       	push   0xc002ae9a
c00210ac:	e8 be 16 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c00210b1:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00210b5:	83 c4 10             	add    esp,0x10
c00210b8:	b8 01 00 00 00       	mov    eax,0x1
c00210bd:	eb 3b                	jmp    c00210fa <ISO9660::openDir(char const*, void**)+0xb0>
c00210bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00210c3:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00210c7:	89 03                	mov    DWORD PTR [ebx],eax
c00210c9:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00210d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00210d4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00210db:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00210e2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00210e5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00210ec:	8a 06                	mov    al,BYTE PTR [esi]
c00210ee:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00210f1:	31 c0                	xor    eax,eax
c00210f3:	eb 05                	jmp    c00210fa <ISO9660::openDir(char const*, void**)+0xb0>
c00210f5:	b8 04 00 00 00       	mov    eax,0x4
c00210fa:	83 c4 10             	add    esp,0x10
c00210fd:	5b                   	pop    ebx
c00210fe:	5e                   	pop    esi
c00210ff:	5f                   	pop    edi
c0021100:	c3                   	ret    
c0021101:	90                   	nop

c0021102 <ISO9660::ISO9660()>:
c0021102:	83 ec 0c             	sub    esp,0xc
c0021105:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021109:	83 ec 0c             	sub    esp,0xc
c002110c:	50                   	push   eax
c002110d:	e8 62 19 ff ff       	call   c0012a74 <Filesystem::Filesystem()>
c0021112:	83 c4 10             	add    esp,0x10
c0021115:	ba c0 ae 02 c0       	mov    edx,0xc002aec0
c002111a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002111e:	89 10                	mov    DWORD PTR [eax],edx
c0021120:	90                   	nop
c0021121:	83 c4 0c             	add    esp,0xc
c0021124:	c3                   	ret    
c0021125:	90                   	nop

c0021126 <SoundChannel::~SoundChannel()>:
c0021126:	83 ec 0c             	sub    esp,0xc
c0021129:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002112d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0021130:	83 ec 0c             	sub    esp,0xc
c0021133:	50                   	push   eax
c0021134:	e8 ab e3 fe ff       	call   c000f4e4 <free>
c0021139:	83 c4 10             	add    esp,0x10
c002113c:	90                   	nop
c002113d:	83 c4 0c             	add    esp,0xc
c0021140:	c3                   	ret    
c0021141:	90                   	nop

c0021142 <SoundChannel::setSpeed(float)>:
c0021142:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021146:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002114a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c002114d:	c3                   	ret    

c002114e <SoundChannel::getSpeed()>:
c002114e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021152:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0021155:	c3                   	ret    

c0021156 <SoundChannel::setVolume(int)>:
c0021156:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002115a:	83 f8 64             	cmp    eax,0x64
c002115d:	7e 05                	jle    c0021164 <SoundChannel::setVolume(int)+0xe>
c002115f:	b8 64 00 00 00       	mov    eax,0x64
c0021164:	85 c0                	test   eax,eax
c0021166:	79 02                	jns    c002116a <SoundChannel::setVolume(int)+0x14>
c0021168:	31 c0                	xor    eax,eax
c002116a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002116e:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0021171:	c3                   	ret    

c0021172 <SoundChannel::getVolume()>:
c0021172:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021176:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0021179:	c3                   	ret    

c002117a <SoundChannel::pause()>:
c002117a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002117e:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c0021182:	c3                   	ret    
c0021183:	90                   	nop

c0021184 <SoundChannel::SoundChannel(int, int, int, int)>:
c0021184:	83 ec 1c             	sub    esp,0x1c
c0021187:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002118b:	e8 ea ff ff ff       	call   c002117a <SoundChannel::pause()>
c0021190:	83 c4 04             	add    esp,0x4
c0021193:	6a 50                	push   0x50
c0021195:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0021199:	e8 b8 ff ff ff       	call   c0021156 <SoundChannel::setVolume(int)>
c002119e:	83 c4 08             	add    esp,0x8
c00211a1:	a1 38 af 02 c0       	mov    eax,ds:0xc002af38
c00211a6:	50                   	push   eax
c00211a7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00211ab:	e8 92 ff ff ff       	call   c0021142 <SoundChannel::setSpeed(float)>
c00211b0:	83 c4 08             	add    esp,0x8
c00211b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00211b7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00211bb:	89 10                	mov    DWORD PTR [eax],edx
c00211bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00211c1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00211c5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00211c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00211cc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00211d0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00211d3:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c00211d8:	75 23                	jne    c00211fd <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c00211da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00211de:	8b 10                	mov    edx,DWORD PTR [eax]
c00211e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00211e4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00211e7:	0f af c2             	imul   eax,edx
c00211ea:	85 c0                	test   eax,eax
c00211ec:	79 03                	jns    c00211f1 <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c00211ee:	83 c0 03             	add    eax,0x3
c00211f1:	c1 f8 02             	sar    eax,0x2
c00211f4:	05 a0 0f 00 00       	add    eax,0xfa0
c00211f9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00211fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021201:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021205:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0021208:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002120c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0021213:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021217:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c002121e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021222:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021225:	c1 e0 02             	shl    eax,0x2
c0021228:	83 ec 0c             	sub    esp,0xc
c002122b:	50                   	push   eax
c002122c:	e8 a3 e2 fe ff       	call   c000f4d4 <malloc>
c0021231:	83 c4 10             	add    esp,0x10
c0021234:	89 c2                	mov    edx,eax
c0021236:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002123a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c002123d:	83 ec 04             	sub    esp,0x4
c0021240:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021244:	50                   	push   eax
c0021245:	6a 01                	push   0x1
c0021247:	6a 04                	push   0x4
c0021249:	e8 01 77 fe ff       	call   c000894f <src_new>
c002124e:	83 c4 10             	add    esp,0x10
c0021251:	89 c2                	mov    edx,eax
c0021253:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021257:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c002125a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002125e:	85 c0                	test   eax,eax
c0021260:	74 10                	je     c0021272 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c0021262:	83 ec 0c             	sub    esp,0xc
c0021265:	68 1c af 02 c0       	push   0xc002af1c
c002126a:	e8 1a 86 ff ff       	call   c0019889 <Krnl::panic(char const*)>
c002126f:	83 c4 10             	add    esp,0x10
c0021272:	a0 80 ec 02 c0       	mov    al,ds:0xc002ec80
c0021277:	83 f0 01             	xor    eax,0x1
c002127a:	84 c0                	test   al,al
c002127c:	74 57                	je     c00212d5 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c002127e:	a1 3c af 02 c0       	mov    eax,ds:0xc002af3c
c0021283:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021287:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002128f:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0021297:	7f 35                	jg     c00212ce <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c0021299:	83 ec 0c             	sub    esp,0xc
c002129c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00212a0:	e8 22 4a 00 00       	call   c0025cc7 <__floatsisf>
c00212a5:	83 c4 10             	add    esp,0x10
c00212a8:	8b 15 3c af 02 c0    	mov    edx,DWORD PTR ds:0xc002af3c
c00212ae:	83 ec 08             	sub    esp,0x8
c00212b1:	52                   	push   edx
c00212b2:	50                   	push   eax
c00212b3:	e8 21 46 00 00       	call   c00258d9 <__mulsf3>
c00212b8:	83 c4 10             	add    esp,0x10
c00212bb:	89 c2                	mov    edx,eax
c00212bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00212c1:	89 14 85 80 e8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1780],edx
c00212c8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00212cc:	eb c1                	jmp    c002128f <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c00212ce:	c6 05 80 ec 02 c0 01 	mov    BYTE PTR ds:0xc002ec80,0x1
c00212d5:	90                   	nop
c00212d6:	83 c4 1c             	add    esp,0x1c
c00212d9:	c3                   	ret    

c00212da <SoundChannel::play()>:
c00212da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00212de:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c00212e2:	c3                   	ret    
c00212e3:	90                   	nop

c00212e4 <SoundChannel::paused()>:
c00212e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00212e8:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c00212eb:	c3                   	ret    

c00212ec <SoundChannel::getSampleRate()>:
c00212ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00212f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00212f2:	c3                   	ret    
c00212f3:	90                   	nop

c00212f4 <SoundChannel::getBits()>:
c00212f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00212f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00212fb:	c3                   	ret    

c00212fc <SoundChannel::getBufferUsed()>:
c00212fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021300:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0021303:	c3                   	ret    

c0021304 <SoundChannel::getBufferSize()>:
c0021304:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021308:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c002130b:	c3                   	ret    

c002130c <SoundChannel::unbuffer(float*, int, int)>:
c002130c:	56                   	push   esi
c002130d:	53                   	push   ebx
c002130e:	83 ec 40             	sub    esp,0x40
c0021311:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0021315:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0021318:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002131c:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c002131f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0021323:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0021327:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002132b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002132f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021333:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0021337:	e8 8b 49 00 00       	call   c0025cc7 <__floatsisf>
c002133c:	5a                   	pop    edx
c002133d:	89 c6                	mov    esi,eax
c002133f:	ff 33                	push   DWORD PTR [ebx]
c0021341:	e8 81 49 00 00       	call   c0025cc7 <__floatsisf>
c0021346:	59                   	pop    ecx
c0021347:	5a                   	pop    edx
c0021348:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c002134b:	50                   	push   eax
c002134c:	e8 88 45 00 00       	call   c00258d9 <__mulsf3>
c0021351:	59                   	pop    ecx
c0021352:	5a                   	pop    edx
c0021353:	50                   	push   eax
c0021354:	56                   	push   esi
c0021355:	e8 42 47 00 00       	call   c0025a9c <__divsf3>
c002135a:	89 04 24             	mov    DWORD PTR [esp],eax
c002135d:	e8 35 5c 00 00       	call   c0026f97 <__extendsfdf2>
c0021362:	59                   	pop    ecx
c0021363:	5e                   	pop    esi
c0021364:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021368:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c002136c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0021374:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021378:	50                   	push   eax
c0021379:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c002137c:	e8 c3 71 fe ff       	call   c0008544 <src_process>
c0021381:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021385:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0021388:	83 c4 0c             	add    esp,0xc
c002138b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c002138e:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0021391:	29 d0                	sub    eax,edx
c0021393:	c1 e0 02             	shl    eax,0x2
c0021396:	50                   	push   eax
c0021397:	8d 04 91             	lea    eax,[ecx+edx*4]
c002139a:	50                   	push   eax
c002139b:	51                   	push   ecx
c002139c:	e8 7c f2 fd ff       	call   c000061d <memmove>
c00213a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00213a5:	83 c4 44             	add    esp,0x44
c00213a8:	5b                   	pop    ebx
c00213a9:	5e                   	pop    esi
c00213aa:	c3                   	ret    
c00213ab:	90                   	nop

c00213ac <SoundChannel::buffer8(unsigned char*, int)>:
c00213ac:	55                   	push   ebp
c00213ad:	57                   	push   edi
c00213ae:	56                   	push   esi
c00213af:	53                   	push   ebx
c00213b0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00213b4:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00213b8:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00213bb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00213bf:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00213c2:	74 7a                	je     c002143e <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00213c4:	85 ff                	test   edi,edi
c00213c6:	7e 76                	jle    c002143e <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00213c8:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c00213cc:	8d 70 01             	lea    esi,[eax+0x1]
c00213cf:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c00213d2:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00213d5:	8b 1c 9d 80 e8 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd1780]
c00213dc:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c00213df:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00213e2:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00213e5:	74 5e                	je     c0021445 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c00213e7:	83 ff 01             	cmp    edi,0x1
c00213ea:	74 4b                	je     c0021437 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c00213ec:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c00213f0:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c00213f3:	8d 70 01             	lea    esi,[eax+0x1]
c00213f6:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00213f9:	8b 1c 9d 80 e8 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd1780]
c0021400:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021403:	b8 02 00 00 00       	mov    eax,0x2
c0021408:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c002140b:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c002140e:	75 23                	jne    c0021433 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0021410:	eb 27                	jmp    c0021439 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021412:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0021417:	8d 71 01             	lea    esi,[ecx+0x1]
c002141a:	40                   	inc    eax
c002141b:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002141e:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0021421:	8b 1c 9d 80 e8 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd1780]
c0021428:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c002142b:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c002142e:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021431:	74 06                	je     c0021439 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021433:	39 c7                	cmp    edi,eax
c0021435:	75 db                	jne    c0021412 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0021437:	89 f8                	mov    eax,edi
c0021439:	5b                   	pop    ebx
c002143a:	5e                   	pop    esi
c002143b:	5f                   	pop    edi
c002143c:	5d                   	pop    ebp
c002143d:	c3                   	ret    
c002143e:	5b                   	pop    ebx
c002143f:	31 c0                	xor    eax,eax
c0021441:	5e                   	pop    esi
c0021442:	5f                   	pop    edi
c0021443:	5d                   	pop    ebp
c0021444:	c3                   	ret    
c0021445:	b8 01 00 00 00       	mov    eax,0x1
c002144a:	eb ed                	jmp    c0021439 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c002144c <SoundDevice::SoundDevice(char const*)>:
c002144c:	83 ec 1c             	sub    esp,0x1c
c002144f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021453:	83 ec 08             	sub    esp,0x8
c0021456:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002145a:	50                   	push   eax
c002145b:	e8 ee 28 ff ff       	call   c0013d4e <Device::Device(char const*)>
c0021460:	83 c4 10             	add    esp,0x10
c0021463:	ba 48 af 02 c0       	mov    edx,0xc002af48
c0021468:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002146c:	89 10                	mov    DWORD PTR [eax],edx
c002146e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021472:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c002147c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021480:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c002148a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021492:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021497:	7f 19                	jg     c00214b2 <SoundDevice::SoundDevice(char const*)+0x66>
c0021499:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002149d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00214a1:	83 c2 54             	add    edx,0x54
c00214a4:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c00214ac:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00214b0:	eb e0                	jmp    c0021492 <SoundDevice::SoundDevice(char const*)+0x46>
c00214b2:	90                   	nop
c00214b3:	83 c4 1c             	add    esp,0x1c
c00214b6:	c3                   	ret    
c00214b7:	90                   	nop

c00214b8 <SoundDevice::~SoundDevice()>:
c00214b8:	53                   	push   ebx
c00214b9:	83 ec 18             	sub    esp,0x18
c00214bc:	ba 48 af 02 c0       	mov    edx,0xc002af48
c00214c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00214c5:	89 10                	mov    DWORD PTR [eax],edx
c00214c7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00214cf:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00214d4:	7f 46                	jg     c002151c <SoundDevice::~SoundDevice()+0x64>
c00214d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00214da:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00214de:	83 c2 54             	add    edx,0x54
c00214e1:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c00214e5:	85 c0                	test   eax,eax
c00214e7:	74 2d                	je     c0021516 <SoundDevice::~SoundDevice()+0x5e>
c00214e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00214ed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00214f1:	83 c2 54             	add    edx,0x54
c00214f4:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c00214f8:	85 db                	test   ebx,ebx
c00214fa:	74 1a                	je     c0021516 <SoundDevice::~SoundDevice()+0x5e>
c00214fc:	83 ec 0c             	sub    esp,0xc
c00214ff:	53                   	push   ebx
c0021500:	e8 21 fc ff ff       	call   c0021126 <SoundChannel::~SoundChannel()>
c0021505:	83 c4 10             	add    esp,0x10
c0021508:	83 ec 08             	sub    esp,0x8
c002150b:	6a 2c                	push   0x2c
c002150d:	53                   	push   ebx
c002150e:	e8 7c 11 ff ff       	call   c001268f <operator delete(void*, unsigned long)>
c0021513:	83 c4 10             	add    esp,0x10
c0021516:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002151a:	eb b3                	jmp    c00214cf <SoundDevice::~SoundDevice()+0x17>
c002151c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021520:	83 ec 0c             	sub    esp,0xc
c0021523:	50                   	push   eax
c0021524:	e8 07 25 ff ff       	call   c0013a30 <Device::~Device()>
c0021529:	83 c4 10             	add    esp,0x10
c002152c:	90                   	nop
c002152d:	83 c4 18             	add    esp,0x18
c0021530:	5b                   	pop    ebx
c0021531:	c3                   	ret    

c0021532 <SoundDevice::~SoundDevice()>:
c0021532:	83 ec 0c             	sub    esp,0xc
c0021535:	83 ec 0c             	sub    esp,0xc
c0021538:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002153c:	e8 77 ff ff ff       	call   c00214b8 <SoundDevice::~SoundDevice()>
c0021541:	83 c4 10             	add    esp,0x10
c0021544:	83 ec 08             	sub    esp,0x8
c0021547:	68 e4 01 00 00       	push   0x1e4
c002154c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021550:	e8 3a 11 ff ff       	call   c001268f <operator delete(void*, unsigned long)>
c0021555:	83 c4 10             	add    esp,0x10
c0021558:	83 c4 0c             	add    esp,0xc
c002155b:	c3                   	ret    

c002155c <SoundDevice::getFreeChannelNum()>:
c002155c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021560:	31 c0                	xor    eax,eax
c0021562:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c002156a:	74 09                	je     c0021575 <SoundDevice::getFreeChannelNum()+0x19>
c002156c:	40                   	inc    eax
c002156d:	83 f8 20             	cmp    eax,0x20
c0021570:	75 f0                	jne    c0021562 <SoundDevice::getFreeChannelNum()+0x6>
c0021572:	83 c8 ff             	or     eax,0xffffffff
c0021575:	c3                   	ret    

c0021576 <SoundDevice::addChannel(SoundChannel*)>:
c0021576:	56                   	push   esi
c0021577:	53                   	push   ebx
c0021578:	51                   	push   ecx
c0021579:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002157d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0021581:	53                   	push   ebx
c0021582:	e8 d5 ff ff ff       	call   c002155c <SoundDevice::getFreeChannelNum()>
c0021587:	5a                   	pop    edx
c0021588:	83 f8 ff             	cmp    eax,0xffffffff
c002158b:	74 51                	je     c00215de <SoundDevice::addChannel(SoundChannel*)+0x68>
c002158d:	85 f6                	test   esi,esi
c002158f:	74 4d                	je     c00215de <SoundDevice::addChannel(SoundChannel*)+0x68>
c0021591:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0021598:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c002159f:	75 30                	jne    c00215d1 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c00215a1:	83 ec 0c             	sub    esp,0xc
c00215a4:	56                   	push   esi
c00215a5:	e8 42 fd ff ff       	call   c00212ec <SoundChannel::getSampleRate()>
c00215aa:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c00215b0:	89 34 24             	mov    DWORD PTR [esp],esi
c00215b3:	e8 3c fd ff ff       	call   c00212f4 <SoundChannel::getBits()>
c00215b8:	83 c4 0c             	add    esp,0xc
c00215bb:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c00215c1:	8b 13                	mov    edx,DWORD PTR [ebx]
c00215c3:	50                   	push   eax
c00215c4:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c00215ca:	53                   	push   ebx
c00215cb:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00215ce:	83 c4 10             	add    esp,0x10
c00215d1:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c00215d7:	b8 01 00 00 00       	mov    eax,0x1
c00215dc:	eb 03                	jmp    c00215e1 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c00215de:	83 c8 ff             	or     eax,0xffffffff
c00215e1:	5a                   	pop    edx
c00215e2:	5b                   	pop    ebx
c00215e3:	5e                   	pop    esi
c00215e4:	c3                   	ret    
c00215e5:	90                   	nop

c00215e6 <SoundDevice::removeChannel(int)>:
c00215e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00215ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00215ee:	83 fa 1f             	cmp    edx,0x1f
c00215f1:	77 23                	ja     c0021616 <SoundDevice::removeChannel(int)+0x30>
c00215f3:	8d 14 90             	lea    edx,[eax+edx*4]
c00215f6:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c00215fd:	74 17                	je     c0021616 <SoundDevice::removeChannel(int)+0x30>
c00215ff:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0021609:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c002160f:	75 05                	jne    c0021616 <SoundDevice::removeChannel(int)+0x30>
c0021611:	8b 00                	mov    eax,DWORD PTR [eax]
c0021613:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c0021616:	c3                   	ret    
c0021617:	90                   	nop

c0021618 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0021618:	57                   	push   edi
c0021619:	56                   	push   esi
c002161a:	53                   	push   ebx
c002161b:	31 db                	xor    ebx,ebx
c002161d:	83 ec 10             	sub    esp,0x10
c0021620:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0021624:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0021628:	0f 8d cb 00 00 00    	jge    c00216f9 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c002162e:	83 ec 0c             	sub    esp,0xc
c0021631:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021635:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0021638:	e8 5a 59 00 00       	call   c0026f97 <__extendsfdf2>
c002163d:	83 c4 10             	add    esp,0x10
c0021640:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021644:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021648:	68 00 00 f0 3f       	push   0x3ff00000
c002164d:	6a 00                	push   0x0
c002164f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021653:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021657:	e8 c7 48 00 00       	call   c0025f23 <__adddf3>
c002165c:	83 c4 10             	add    esp,0x10
c002165f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021663:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021667:	68 00 00 e0 3f       	push   0x3fe00000
c002166c:	6a 00                	push   0x0
c002166e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021672:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021676:	e8 25 4f 00 00       	call   c00265a0 <__muldf3>
c002167b:	83 c4 10             	add    esp,0x10
c002167e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021682:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021686:	68 00 00 60 40       	push   0x40600000
c002168b:	6a 00                	push   0x0
c002168d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021691:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021695:	e8 06 4f 00 00       	call   c00265a0 <__muldf3>
c002169a:	59                   	pop    ecx
c002169b:	5f                   	pop    edi
c002169c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00216a0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00216a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00216a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00216ac:	e8 c2 57 00 00       	call   c0026e73 <__truncdfsf2>
c00216b1:	5a                   	pop    edx
c00216b2:	89 c7                	mov    edi,eax
c00216b4:	59                   	pop    ecx
c00216b5:	68 00 00 fe 42       	push   0x42fe0000
c00216ba:	50                   	push   eax
c00216bb:	e8 5d 48 00 00       	call   c0025f1d <__gesf2>
c00216c0:	83 c4 10             	add    esp,0x10
c00216c3:	85 c0                	test   eax,eax
c00216c5:	78 06                	js     c00216cd <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c00216c7:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c00216cb:	eb 26                	jmp    c00216f3 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00216cd:	50                   	push   eax
c00216ce:	50                   	push   eax
c00216cf:	6a 00                	push   0x0
c00216d1:	57                   	push   edi
c00216d2:	e8 4a 48 00 00       	call   c0025f21 <__lesf2>
c00216d7:	83 c4 10             	add    esp,0x10
c00216da:	85 c0                	test   eax,eax
c00216dc:	7f 06                	jg     c00216e4 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c00216de:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c00216e2:	eb 0f                	jmp    c00216f3 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00216e4:	83 ec 0c             	sub    esp,0xc
c00216e7:	57                   	push   edi
c00216e8:	e8 3f 59 00 00       	call   c002702c <lrintf>
c00216ed:	83 c4 10             	add    esp,0x10
c00216f0:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c00216f3:	43                   	inc    ebx
c00216f4:	e9 2b ff ff ff       	jmp    c0021624 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c00216f9:	83 c4 10             	add    esp,0x10
c00216fc:	5b                   	pop    ebx
c00216fd:	5e                   	pop    esi
c00216fe:	5f                   	pop    edi
c00216ff:	c3                   	ret    

c0021700 <SoundDevice::getAudio(int, float*, float*)>:
c0021700:	55                   	push   ebp
c0021701:	57                   	push   edi
c0021702:	56                   	push   esi
c0021703:	53                   	push   ebx
c0021704:	31 db                	xor    ebx,ebx
c0021706:	83 ec 20             	sub    esp,0x20
c0021709:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002170d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0021711:	c1 e0 02             	shl    eax,0x2
c0021714:	50                   	push   eax
c0021715:	6a 00                	push   0x0
c0021717:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002171b:	e8 6b ef fd ff       	call   c000068b <memset>
c0021720:	83 c4 10             	add    esp,0x10
c0021723:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0021727:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c002172e:	85 c0                	test   eax,eax
c0021730:	0f 84 d7 00 00 00    	je     c002180d <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0021736:	83 ec 0c             	sub    esp,0xc
c0021739:	50                   	push   eax
c002173a:	e8 a5 fb ff ff       	call   c00212e4 <SoundChannel::paused()>
c002173f:	83 c4 10             	add    esp,0x10
c0021742:	84 c0                	test   al,al
c0021744:	0f 85 c3 00 00 00    	jne    c002180d <SoundDevice::getAudio(int, float*, float*)+0x10d>
c002174a:	83 ec 0c             	sub    esp,0xc
c002174d:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0021754:	e8 19 fa ff ff       	call   c0021172 <SoundChannel::getVolume()>
c0021759:	83 c4 10             	add    esp,0x10
c002175c:	85 c0                	test   eax,eax
c002175e:	0f 84 a9 00 00 00    	je     c002180d <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0021764:	83 ec 0c             	sub    esp,0xc
c0021767:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c002176e:	e8 ff f9 ff ff       	call   c0021172 <SoundChannel::getVolume()>
c0021773:	83 ec 0c             	sub    esp,0xc
c0021776:	50                   	push   eax
c0021777:	e8 4b 45 00 00       	call   c0025cc7 <__floatsisf>
c002177c:	59                   	pop    ecx
c002177d:	5d                   	pop    ebp
c002177e:	31 ed                	xor    ebp,ebp
c0021780:	68 00 00 c8 42       	push   0x42c80000
c0021785:	50                   	push   eax
c0021786:	e8 11 43 00 00       	call   c0025a9c <__divsf3>
c002178b:	83 c4 10             	add    esp,0x10
c002178e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021792:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0021796:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c002179c:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00217a0:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00217a7:	e8 60 fb ff ff       	call   c002130c <SoundChannel::unbuffer(float*, int, int)>
c00217ac:	83 c4 20             	add    esp,0x20
c00217af:	89 c1                	mov    ecx,eax
c00217b1:	39 cd                	cmp    ebp,ecx
c00217b3:	7d 52                	jge    c0021807 <SoundDevice::getAudio(int, float*, float*)+0x107>
c00217b5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00217b9:	50                   	push   eax
c00217ba:	50                   	push   eax
c00217bb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00217bf:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c00217c2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00217c6:	e8 0e 41 00 00       	call   c00258d9 <__mulsf3>
c00217cb:	5a                   	pop    edx
c00217cc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00217d0:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c00217d6:	e8 ec 44 00 00       	call   c0025cc7 <__floatsisf>
c00217db:	59                   	pop    ecx
c00217dc:	5a                   	pop    edx
c00217dd:	50                   	push   eax
c00217de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00217e2:	e8 b5 42 00 00       	call   c0025a9c <__divsf3>
c00217e7:	59                   	pop    ecx
c00217e8:	5a                   	pop    edx
c00217e9:	50                   	push   eax
c00217ea:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00217ee:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c00217f1:	e8 c0 3d 00 00       	call   c00255b6 <__addsf3>
c00217f6:	83 c4 10             	add    esp,0x10
c00217f9:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00217fd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0021801:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c0021804:	45                   	inc    ebp
c0021805:	eb aa                	jmp    c00217b1 <SoundDevice::getAudio(int, float*, float*)+0xb1>
c0021807:	39 cf                	cmp    edi,ecx
c0021809:	7e 02                	jle    c002180d <SoundDevice::getAudio(int, float*, float*)+0x10d>
c002180b:	89 cf                	mov    edi,ecx
c002180d:	43                   	inc    ebx
c002180e:	83 fb 20             	cmp    ebx,0x20
c0021811:	0f 85 10 ff ff ff    	jne    c0021727 <SoundDevice::getAudio(int, float*, float*)+0x27>
c0021817:	83 c4 1c             	add    esp,0x1c
c002181a:	89 f8                	mov    eax,edi
c002181c:	5b                   	pop    ebx
c002181d:	5e                   	pop    esi
c002181e:	5f                   	pop    edi
c002181f:	5d                   	pop    ebp
c0021820:	c3                   	ret    
c0021821:	90                   	nop

c0021822 <PCI::open(int, int, void*)>:
c0021822:	83 ec 18             	sub    esp,0x18
c0021825:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021829:	8b 10                	mov    edx,DWORD PTR [eax]
c002182b:	50                   	push   eax
c002182c:	ff 52 18             	call   DWORD PTR [edx+0x18]
c002182f:	31 c0                	xor    eax,eax
c0021831:	83 c4 1c             	add    esp,0x1c
c0021834:	c3                   	ret    
c0021835:	90                   	nop

c0021836 <PCI::close(int, int, void*)>:
c0021836:	31 c0                	xor    eax,eax
c0021838:	c3                   	ret    
c0021839:	90                   	nop

c002183a <PCI::PCI()>:
c002183a:	83 ec 0c             	sub    esp,0xc
c002183d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021841:	83 ec 08             	sub    esp,0x8
c0021844:	68 78 af 02 c0       	push   0xc002af78
c0021849:	50                   	push   eax
c002184a:	e8 bb 1b ff ff       	call   c001340a <Bus::Bus(char const*)>
c002184f:	83 c4 10             	add    esp,0x10
c0021852:	ba e4 af 02 c0       	mov    edx,0xc002afe4
c0021857:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002185b:	89 10                	mov    DWORD PTR [eax],edx
c002185d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021861:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021867:	0f b6 d0             	movzx  edx,al
c002186a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002186e:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0021875:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021879:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002187f:	0f b6 d0             	movzx  edx,al
c0021882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021886:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c002188b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002188f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021895:	8d 50 01             	lea    edx,[eax+0x1]
c0021898:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002189c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00218a2:	0f b6 d0             	movzx  edx,al
c00218a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218a9:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00218ad:	83 c9 c0             	or     ecx,0xffffffc0
c00218b0:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00218b4:	90                   	nop
c00218b5:	83 c4 0c             	add    esp,0xc
c00218b8:	c3                   	ret    
c00218b9:	90                   	nop

c00218ba <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00218ba:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00218be:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00218c3:	89 ca                	mov    edx,ecx
c00218c5:	c1 e0 10             	shl    eax,0x10
c00218c8:	81 e2 fc 00 00 00    	and    edx,0xfc
c00218ce:	09 d0                	or     eax,edx
c00218d0:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00218d5:	c1 e2 08             	shl    edx,0x8
c00218d8:	09 d0                	or     eax,edx
c00218da:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c00218df:	c1 e2 0b             	shl    edx,0xb
c00218e2:	09 d0                	or     eax,edx
c00218e4:	ba f8 0c 00 00       	mov    edx,0xcf8
c00218e9:	0d 00 00 00 80       	or     eax,0x80000000
c00218ee:	ef                   	out    dx,eax
c00218ef:	ba fc 0c 00 00       	mov    edx,0xcfc
c00218f4:	ed                   	in     eax,dx
c00218f5:	83 e1 02             	and    ecx,0x2
c00218f8:	0f b6 c9             	movzx  ecx,cl
c00218fb:	c1 e1 03             	shl    ecx,0x3
c00218fe:	d3 e8                	shr    eax,cl
c0021900:	c3                   	ret    
c0021901:	90                   	nop

c0021902 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0021902:	6a 00                	push   0x0
c0021904:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021909:	50                   	push   eax
c002190a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002190f:	50                   	push   eax
c0021910:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021915:	50                   	push   eax
c0021916:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002191a:	e8 9b ff ff ff       	call   c00218ba <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002191f:	83 c4 14             	add    esp,0x14
c0021922:	c3                   	ret    
c0021923:	90                   	nop

c0021924 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0021924:	6a 0e                	push   0xe
c0021926:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002192b:	50                   	push   eax
c002192c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021931:	50                   	push   eax
c0021932:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021937:	50                   	push   eax
c0021938:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002193c:	e8 79 ff ff ff       	call   c00218ba <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021941:	83 c4 14             	add    esp,0x14
c0021944:	0f b6 c0             	movzx  eax,al
c0021947:	c3                   	ret    

c0021948 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0021948:	55                   	push   ebp
c0021949:	57                   	push   edi
c002194a:	56                   	push   esi
c002194b:	53                   	push   ebx
c002194c:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c0021951:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c0021956:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c002195b:	6a 0a                	push   0xa
c002195d:	56                   	push   esi
c002195e:	55                   	push   ebp
c002195f:	57                   	push   edi
c0021960:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0021964:	e8 51 ff ff ff       	call   c00218ba <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021969:	6a 0a                	push   0xa
c002196b:	89 c3                	mov    ebx,eax
c002196d:	56                   	push   esi
c002196e:	0f b6 db             	movzx  ebx,bl
c0021971:	55                   	push   ebp
c0021972:	57                   	push   edi
c0021973:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0021977:	e8 3e ff ff ff       	call   c00218ba <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002197c:	83 c4 28             	add    esp,0x28
c002197f:	25 00 ff 00 00       	and    eax,0xff00
c0021984:	09 d8                	or     eax,ebx
c0021986:	5b                   	pop    ebx
c0021987:	5e                   	pop    esi
c0021988:	5f                   	pop    edi
c0021989:	5d                   	pop    ebp
c002198a:	c3                   	ret    
c002198b:	90                   	nop

c002198c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c002198c:	6a 08                	push   0x8
c002198e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021993:	50                   	push   eax
c0021994:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021999:	50                   	push   eax
c002199a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002199f:	50                   	push   eax
c00219a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00219a4:	e8 11 ff ff ff       	call   c00218ba <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00219a9:	83 c4 14             	add    esp,0x14
c00219ac:	0f b6 c4             	movzx  eax,ah
c00219af:	c3                   	ret    

c00219b0 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c00219b0:	6a 08                	push   0x8
c00219b2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00219b7:	50                   	push   eax
c00219b8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00219bd:	50                   	push   eax
c00219be:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00219c3:	50                   	push   eax
c00219c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00219c8:	e8 ed fe ff ff       	call   c00218ba <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00219cd:	83 c4 14             	add    esp,0x14
c00219d0:	c3                   	ret    
c00219d1:	90                   	nop

c00219d2 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c00219d2:	6a 3c                	push   0x3c
c00219d4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00219d9:	50                   	push   eax
c00219da:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00219df:	50                   	push   eax
c00219e0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00219e5:	50                   	push   eax
c00219e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00219ea:	e8 cb fe ff ff       	call   c00218ba <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00219ef:	83 c4 14             	add    esp,0x14
c00219f2:	c3                   	ret    
c00219f3:	90                   	nop

c00219f4 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c00219f4:	6a 18                	push   0x18
c00219f6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00219fb:	50                   	push   eax
c00219fc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021a01:	50                   	push   eax
c0021a02:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021a07:	50                   	push   eax
c0021a08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021a0c:	e8 a9 fe ff ff       	call   c00218ba <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021a11:	83 c4 14             	add    esp,0x14
c0021a14:	0f b6 c4             	movzx  eax,ah
c0021a17:	c3                   	ret    

c0021a18 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0021a18:	55                   	push   ebp
c0021a19:	57                   	push   edi
c0021a1a:	56                   	push   esi
c0021a1b:	53                   	push   ebx
c0021a1c:	50                   	push   eax
c0021a1d:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0021a21:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0021a26:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0021a2b:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0021a30:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0021a37:	8d 43 12             	lea    eax,[ebx+0x12]
c0021a3a:	83 c3 10             	add    ebx,0x10
c0021a3d:	0f b6 c0             	movzx  eax,al
c0021a40:	0f b6 db             	movzx  ebx,bl
c0021a43:	50                   	push   eax
c0021a44:	51                   	push   ecx
c0021a45:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021a49:	57                   	push   edi
c0021a4a:	55                   	push   ebp
c0021a4b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0021a4f:	e8 66 fe ff ff       	call   c00218ba <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021a54:	53                   	push   ebx
c0021a55:	89 c6                	mov    esi,eax
c0021a57:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0021a5b:	c1 e6 10             	shl    esi,0x10
c0021a5e:	51                   	push   ecx
c0021a5f:	57                   	push   edi
c0021a60:	55                   	push   ebp
c0021a61:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021a65:	e8 50 fe ff ff       	call   c00218ba <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021a6a:	83 c4 2c             	add    esp,0x2c
c0021a6d:	0f b7 c0             	movzx  eax,ax
c0021a70:	5b                   	pop    ebx
c0021a71:	09 f0                	or     eax,esi
c0021a73:	5e                   	pop    esi
c0021a74:	5f                   	pop    edi
c0021a75:	5d                   	pop    ebp
c0021a76:	c3                   	ret    
c0021a77:	90                   	nop

c0021a78 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0021a78:	53                   	push   ebx
c0021a79:	ba f8 0c 00 00       	mov    edx,0xcf8
c0021a7e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0021a83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021a87:	c1 e1 10             	shl    ecx,0x10
c0021a8a:	25 fc 00 00 00       	and    eax,0xfc
c0021a8f:	09 c1                	or     ecx,eax
c0021a91:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021a96:	c1 e0 08             	shl    eax,0x8
c0021a99:	09 c1                	or     ecx,eax
c0021a9b:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0021aa0:	c1 e0 0b             	shl    eax,0xb
c0021aa3:	09 c1                	or     ecx,eax
c0021aa5:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0021aab:	89 c8                	mov    eax,ecx
c0021aad:	ef                   	out    dx,eax
c0021aae:	ba fc 0c 00 00       	mov    edx,0xcfc
c0021ab3:	ed                   	in     eax,dx
c0021ab4:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0021ab9:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0021abe:	74 0a                	je     c0021aca <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0021ac0:	0f b7 d8             	movzx  ebx,ax
c0021ac3:	89 d0                	mov    eax,edx
c0021ac5:	c1 e0 10             	shl    eax,0x10
c0021ac8:	eb 05                	jmp    c0021acf <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0021aca:	66 31 c0             	xor    ax,ax
c0021acd:	89 d3                	mov    ebx,edx
c0021acf:	09 c3                	or     ebx,eax
c0021ad1:	ba f8 0c 00 00       	mov    edx,0xcf8
c0021ad6:	89 c8                	mov    eax,ecx
c0021ad8:	ef                   	out    dx,eax
c0021ad9:	ba fc 0c 00 00       	mov    edx,0xcfc
c0021ade:	89 d8                	mov    eax,ebx
c0021ae0:	ef                   	out    dx,eax
c0021ae1:	5b                   	pop    ebx
c0021ae2:	c3                   	ret    
c0021ae3:	90                   	nop

c0021ae4 <PCI::checkBus(unsigned char)>:
c0021ae4:	56                   	push   esi
c0021ae5:	53                   	push   ebx
c0021ae6:	31 db                	xor    ebx,ebx
c0021ae8:	51                   	push   ecx
c0021ae9:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0021aee:	52                   	push   edx
c0021aef:	53                   	push   ebx
c0021af0:	43                   	inc    ebx
c0021af1:	56                   	push   esi
c0021af2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021af6:	e8 2b 03 00 00       	call   c0021e26 <PCI::checkDevice(unsigned char, unsigned char)>
c0021afb:	83 c4 10             	add    esp,0x10
c0021afe:	83 fb 20             	cmp    ebx,0x20
c0021b01:	75 eb                	jne    c0021aee <PCI::checkBus(unsigned char)+0xa>
c0021b03:	58                   	pop    eax
c0021b04:	5b                   	pop    ebx
c0021b05:	5e                   	pop    esi
c0021b06:	c3                   	ret    
c0021b07:	90                   	nop

c0021b08 <PCI::foundDevice(PCIDeviceInfo)>:
c0021b08:	55                   	push   ebp
c0021b09:	57                   	push   edi
c0021b0a:	56                   	push   esi
c0021b0b:	53                   	push   ebx
c0021b0c:	83 ec 1c             	sub    esp,0x1c
c0021b0f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0021b13:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0021b19:	0f 84 52 01 00 00    	je     c0021c71 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0021b1f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0021b23:	66 81 f9 06 04       	cmp    cx,0x406
c0021b28:	75 2c                	jne    c0021b56 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0021b2a:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0021b2f:	50                   	push   eax
c0021b30:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0021b35:	50                   	push   eax
c0021b36:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0021b3b:	50                   	push   eax
c0021b3c:	56                   	push   esi
c0021b3d:	e8 b2 fe ff ff       	call   c00219f4 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0021b42:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0021b46:	0f b6 c0             	movzx  eax,al
c0021b49:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0021b4d:	83 c4 2c             	add    esp,0x2c
c0021b50:	5b                   	pop    ebx
c0021b51:	5e                   	pop    esi
c0021b52:	5f                   	pop    edi
c0021b53:	5d                   	pop    ebp
c0021b54:	eb 8e                	jmp    c0021ae4 <PCI::checkBus(unsigned char)>
c0021b56:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021b5a:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0021b60:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021b64:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0021b68:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0021b6c:	88 d3                	mov    bl,dl
c0021b6e:	85 c0                	test   eax,eax
c0021b70:	74 33                	je     c0021ba5 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0021b72:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0021b75:	85 d2                	test   edx,edx
c0021b77:	74 28                	je     c0021ba1 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0021b79:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0021b7f:	31 ef                	xor    edi,ebp
c0021b81:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0021b87:	75 18                	jne    c0021ba1 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0021b89:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021b8d:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0021b93:	75 0c                	jne    c0021ba1 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0021b95:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0021b9b:	0f 84 d0 00 00 00    	je     c0021c71 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0021ba1:	8b 00                	mov    eax,DWORD PTR [eax]
c0021ba3:	eb c9                	jmp    c0021b6e <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0021ba5:	66 81 f9 01 06       	cmp    cx,0x601
c0021baa:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0021bae:	75 19                	jne    c0021bc9 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0021bb0:	83 ec 0c             	sub    esp,0xc
c0021bb3:	68 64 01 00 00       	push   0x164
c0021bb8:	e8 17 d9 fe ff       	call   c000f4d4 <malloc>
c0021bbd:	89 c5                	mov    ebp,eax
c0021bbf:	89 04 24             	mov    DWORD PTR [esp],eax
c0021bc2:	e8 95 0f 00 00       	call   c0022b5c <SATABus::SATABus()>
c0021bc7:	eb 1e                	jmp    c0021be7 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0021bc9:	66 81 f9 01 01       	cmp    cx,0x101
c0021bce:	75 60                	jne    c0021c30 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0021bd0:	83 ec 0c             	sub    esp,0xc
c0021bd3:	68 70 02 00 00       	push   0x270
c0021bd8:	e8 f7 d8 fe ff       	call   c000f4d4 <malloc>
c0021bdd:	89 c5                	mov    ebp,eax
c0021bdf:	89 04 24             	mov    DWORD PTR [esp],eax
c0021be2:	e8 03 03 00 00       	call   c0021eea <IDE::IDE()>
c0021be7:	58                   	pop    eax
c0021be8:	5a                   	pop    edx
c0021be9:	55                   	push   ebp
c0021bea:	56                   	push   esi
c0021beb:	e8 6e 1f ff ff       	call   c0013b5e <Device::addChild(Device*)>
c0021bf0:	83 ec 1c             	sub    esp,0x1c
c0021bf3:	b9 09 00 00 00       	mov    ecx,0x9
c0021bf8:	fc                   	cld    
c0021bf9:	89 e7                	mov    edi,esp
c0021bfb:	89 de                	mov    esi,ebx
c0021bfd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0021bff:	55                   	push   ebp
c0021c00:	e8 63 1e ff ff       	call   c0013a68 <Device::preOpenPCI(PCIDeviceInfo)>
c0021c05:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021c08:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0021c0c:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0021c14:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0021c1c:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0021c24:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021c27:	83 c4 4c             	add    esp,0x4c
c0021c2a:	5b                   	pop    ebx
c0021c2b:	5e                   	pop    esi
c0021c2c:	5f                   	pop    edi
c0021c2d:	5d                   	pop    ebp
c0021c2e:	ff e0                	jmp    eax
c0021c30:	83 ec 0c             	sub    esp,0xc
c0021c33:	68 58 01 00 00       	push   0x158
c0021c38:	e8 97 d8 fe ff       	call   c000f4d4 <malloc>
c0021c3d:	89 c5                	mov    ebp,eax
c0021c3f:	58                   	pop    eax
c0021c40:	5a                   	pop    edx
c0021c41:	68 80 af 02 c0       	push   0xc002af80
c0021c46:	55                   	push   ebp
c0021c47:	e8 08 22 ff ff       	call   c0013e54 <DriverlessDevice::DriverlessDevice(char const*)>
c0021c4c:	59                   	pop    ecx
c0021c4d:	5f                   	pop    edi
c0021c4e:	55                   	push   ebp
c0021c4f:	56                   	push   esi
c0021c50:	e8 09 1f ff ff       	call   c0013b5e <Device::addChild(Device*)>
c0021c55:	b9 09 00 00 00       	mov    ecx,0x9
c0021c5a:	fc                   	cld    
c0021c5b:	89 df                	mov    edi,ebx
c0021c5d:	89 de                	mov    esi,ebx
c0021c5f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0021c61:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0021c65:	83 c4 2c             	add    esp,0x2c
c0021c68:	5b                   	pop    ebx
c0021c69:	5e                   	pop    esi
c0021c6a:	5f                   	pop    edi
c0021c6b:	5d                   	pop    ebp
c0021c6c:	e9 f7 1d ff ff       	jmp    c0013a68 <Device::preOpenPCI(PCIDeviceInfo)>
c0021c71:	83 c4 1c             	add    esp,0x1c
c0021c74:	5b                   	pop    ebx
c0021c75:	5e                   	pop    esi
c0021c76:	5f                   	pop    edi
c0021c77:	5d                   	pop    ebp
c0021c78:	c3                   	ret    
c0021c79:	90                   	nop

c0021c7a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0021c7a:	55                   	push   ebp
c0021c7b:	57                   	push   edi
c0021c7c:	56                   	push   esi
c0021c7d:	53                   	push   ebx
c0021c7e:	83 ec 5c             	sub    esp,0x5c
c0021c81:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0021c85:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0021c89:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0021c8d:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0021c92:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021c96:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0021c9a:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0021c9f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021ca3:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0021ca8:	6a 0c                	push   0xc
c0021caa:	55                   	push   ebp
c0021cab:	53                   	push   ebx
c0021cac:	57                   	push   edi
c0021cad:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0021cb4:	e8 01 fc ff ff       	call   c00218ba <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021cb9:	55                   	push   ebp
c0021cba:	53                   	push   ebx
c0021cbb:	57                   	push   edi
c0021cbc:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0021cc3:	e8 80 fc ff ff       	call   c0021948 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0021cc8:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0021ccd:	83 c4 24             	add    esp,0x24
c0021cd0:	55                   	push   ebp
c0021cd1:	53                   	push   ebx
c0021cd2:	57                   	push   edi
c0021cd3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0021cd7:	e8 f6 fc ff ff       	call   c00219d2 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0021cdc:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0021ce0:	6a 3c                	push   0x3c
c0021ce2:	55                   	push   ebp
c0021ce3:	53                   	push   ebx
c0021ce4:	57                   	push   edi
c0021ce5:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0021cec:	e8 c9 fb ff ff       	call   c00218ba <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021cf1:	0f b6 c4             	movzx  eax,ah
c0021cf4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021cf8:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0021cfc:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0021d00:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c0021d05:	83 c4 24             	add    esp,0x24
c0021d08:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0021d0e:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c0021d15:	74 6c                	je     c0021d83 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0021d17:	31 f6                	xor    esi,esi
c0021d19:	8b 15 48 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c948
c0021d1f:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0021d25:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c0021d2b:	7e 56                	jle    c0021d83 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0021d2d:	8d 14 f2             	lea    edx,[edx+esi*8]
c0021d30:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0021d37:	39 cb                	cmp    ebx,ecx
c0021d39:	75 45                	jne    c0021d80 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0021d3b:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0021d42:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0021d46:	75 38                	jne    c0021d80 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0021d48:	83 ec 0c             	sub    esp,0xc
c0021d4b:	68 9a af 02 c0       	push   0xc002af9a
c0021d50:	e8 1a 0a ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c0021d55:	8b 15 48 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c948
c0021d5b:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0021d61:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0021d69:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0021d6d:	52                   	push   edx
c0021d6e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021d72:	53                   	push   ebx
c0021d73:	68 bf af 02 c0       	push   0xc002afbf
c0021d78:	e8 f2 09 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c0021d7d:	83 c4 20             	add    esp,0x20
c0021d80:	46                   	inc    esi
c0021d81:	eb 96                	jmp    c0021d19 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0021d83:	31 d2                	xor    edx,edx
c0021d85:	83 ec 0c             	sub    esp,0xc
c0021d88:	55                   	push   ebp
c0021d89:	53                   	push   ebx
c0021d8a:	57                   	push   edi
c0021d8b:	52                   	push   edx
c0021d8c:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0021d90:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0021d97:	e8 7c fc ff ff       	call   c0021a18 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021d9c:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0021da0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021da4:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0021da8:	42                   	inc    edx
c0021da9:	83 c4 20             	add    esp,0x20
c0021dac:	83 fa 06             	cmp    edx,0x6
c0021daf:	75 d4                	jne    c0021d85 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0021db1:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0021db5:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0021db9:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0021dbd:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0021dc1:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0021dc5:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0021dc9:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0021dce:	86 e0                	xchg   al,ah
c0021dd0:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0021dd5:	55                   	push   ebp
c0021dd6:	53                   	push   ebx
c0021dd7:	57                   	push   edi
c0021dd8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0021ddc:	e8 ab fb ff ff       	call   c002198c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0021de1:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0021de5:	55                   	push   ebp
c0021de6:	53                   	push   ebx
c0021de7:	57                   	push   edi
c0021de8:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0021def:	e8 0e fb ff ff       	call   c0021902 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0021df4:	83 ec 0c             	sub    esp,0xc
c0021df7:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0021dfc:	b9 09 00 00 00       	mov    ecx,0x9
c0021e01:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0021e05:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0021e09:	fc                   	cld    
c0021e0a:	89 e7                	mov    edi,esp
c0021e0c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0021e0e:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0021e15:	e8 ee fc ff ff       	call   c0021b08 <PCI::foundDevice(PCIDeviceInfo)>
c0021e1a:	81 c4 8c 00 00 00    	add    esp,0x8c
c0021e20:	5b                   	pop    ebx
c0021e21:	5e                   	pop    esi
c0021e22:	5f                   	pop    edi
c0021e23:	5d                   	pop    ebp
c0021e24:	c3                   	ret    
c0021e25:	90                   	nop

c0021e26 <PCI::checkDevice(unsigned char, unsigned char)>:
c0021e26:	55                   	push   ebp
c0021e27:	57                   	push   edi
c0021e28:	56                   	push   esi
c0021e29:	53                   	push   ebx
c0021e2a:	83 ec 0c             	sub    esp,0xc
c0021e2d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0021e31:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0021e36:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0021e3b:	6a 00                	push   0x0
c0021e3d:	56                   	push   esi
c0021e3e:	57                   	push   edi
c0021e3f:	55                   	push   ebp
c0021e40:	e8 bd fa ff ff       	call   c0021902 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0021e45:	6a 00                	push   0x0
c0021e47:	56                   	push   esi
c0021e48:	57                   	push   edi
c0021e49:	55                   	push   ebp
c0021e4a:	e8 2b fe ff ff       	call   c0021c7a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0021e4f:	83 c4 20             	add    esp,0x20
c0021e52:	6a 00                	push   0x0
c0021e54:	56                   	push   esi
c0021e55:	57                   	push   edi
c0021e56:	55                   	push   ebp
c0021e57:	e8 c8 fa ff ff       	call   c0021924 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0021e5c:	83 c4 10             	add    esp,0x10
c0021e5f:	84 c0                	test   al,al
c0021e61:	79 27                	jns    c0021e8a <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0021e63:	bb 01 00 00 00       	mov    ebx,0x1
c0021e68:	53                   	push   ebx
c0021e69:	56                   	push   esi
c0021e6a:	57                   	push   edi
c0021e6b:	55                   	push   ebp
c0021e6c:	e8 91 fa ff ff       	call   c0021902 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0021e71:	83 c4 10             	add    esp,0x10
c0021e74:	66 40                	inc    ax
c0021e76:	74 0c                	je     c0021e84 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0021e78:	53                   	push   ebx
c0021e79:	56                   	push   esi
c0021e7a:	57                   	push   edi
c0021e7b:	55                   	push   ebp
c0021e7c:	e8 f9 fd ff ff       	call   c0021c7a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0021e81:	83 c4 10             	add    esp,0x10
c0021e84:	43                   	inc    ebx
c0021e85:	83 fb 08             	cmp    ebx,0x8
c0021e88:	75 de                	jne    c0021e68 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0021e8a:	83 c4 0c             	add    esp,0xc
c0021e8d:	5b                   	pop    ebx
c0021e8e:	5e                   	pop    esi
c0021e8f:	5f                   	pop    edi
c0021e90:	5d                   	pop    ebp
c0021e91:	c3                   	ret    

c0021e92 <PCI::detect()>:
c0021e92:	56                   	push   esi
c0021e93:	53                   	push   ebx
c0021e94:	53                   	push   ebx
c0021e95:	31 db                	xor    ebx,ebx
c0021e97:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0021e9b:	6a 00                	push   0x0
c0021e9d:	6a 00                	push   0x0
c0021e9f:	6a 00                	push   0x0
c0021ea1:	56                   	push   esi
c0021ea2:	e8 7d fa ff ff       	call   c0021924 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0021ea7:	83 c4 10             	add    esp,0x10
c0021eaa:	a8 80                	test   al,0x80
c0021eac:	75 21                	jne    c0021ecf <PCI::detect()+0x3d>
c0021eae:	51                   	push   ecx
c0021eaf:	51                   	push   ecx
c0021eb0:	6a 00                	push   0x0
c0021eb2:	56                   	push   esi
c0021eb3:	e8 2c fc ff ff       	call   c0021ae4 <PCI::checkBus(unsigned char)>
c0021eb8:	83 c4 10             	add    esp,0x10
c0021ebb:	eb 24                	jmp    c0021ee1 <PCI::detect()+0x4f>
c0021ebd:	52                   	push   edx
c0021ebe:	52                   	push   edx
c0021ebf:	53                   	push   ebx
c0021ec0:	43                   	inc    ebx
c0021ec1:	56                   	push   esi
c0021ec2:	e8 1d fc ff ff       	call   c0021ae4 <PCI::checkBus(unsigned char)>
c0021ec7:	83 c4 10             	add    esp,0x10
c0021eca:	83 fb 08             	cmp    ebx,0x8
c0021ecd:	74 12                	je     c0021ee1 <PCI::detect()+0x4f>
c0021ecf:	53                   	push   ebx
c0021ed0:	6a 00                	push   0x0
c0021ed2:	6a 00                	push   0x0
c0021ed4:	56                   	push   esi
c0021ed5:	e8 28 fa ff ff       	call   c0021902 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0021eda:	83 c4 10             	add    esp,0x10
c0021edd:	66 40                	inc    ax
c0021edf:	74 dc                	je     c0021ebd <PCI::detect()+0x2b>
c0021ee1:	58                   	pop    eax
c0021ee2:	5b                   	pop    ebx
c0021ee3:	5e                   	pop    esi
c0021ee4:	c3                   	ret    
c0021ee5:	90                   	nop

c0021ee6 <IDE::close(int, int, void*)>:
c0021ee6:	83 c8 ff             	or     eax,0xffffffff
c0021ee9:	c3                   	ret    

c0021eea <IDE::IDE()>:
c0021eea:	83 ec 0c             	sub    esp,0xc
c0021eed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ef1:	83 ec 08             	sub    esp,0x8
c0021ef4:	68 08 b0 02 c0       	push   0xc002b008
c0021ef9:	50                   	push   eax
c0021efa:	e8 eb 1f ff ff       	call   c0013eea <HardDiskController::HardDiskController(char const*)>
c0021eff:	83 c4 10             	add    esp,0x10
c0021f02:	ba 48 b2 02 c0       	mov    edx,0xc002b248
c0021f07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f0b:	89 10                	mov    DWORD PTR [eax],edx
c0021f0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f11:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0021f18:	90                   	nop
c0021f19:	83 c4 0c             	add    esp,0xc
c0021f1c:	c3                   	ret    
c0021f1d:	90                   	nop

c0021f1e <IDE::prepareInterrupt(unsigned char)>:
c0021f1e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021f23:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021f27:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0021f2f:	c3                   	ret    

c0021f30 <selectDrive(unsigned char, unsigned char)>:
c0021f30:	c3                   	ret    
c0021f31:	90                   	nop

c0021f32 <IDE::getBase(unsigned char)>:
c0021f32:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0021f37:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021f3b:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0021f43:	c3                   	ret    

c0021f44 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0021f44:	55                   	push   ebp
c0021f45:	57                   	push   edi
c0021f46:	56                   	push   esi
c0021f47:	53                   	push   ebx
c0021f48:	83 ec 1c             	sub    esp,0x1c
c0021f4b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021f4f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0021f53:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0021f56:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0021f5a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0021f5e:	80 f9 03             	cmp    cl,0x3
c0021f61:	77 51                	ja     c0021fb4 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0021f63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021f67:	0f b6 f2             	movzx  esi,dl
c0021f6a:	0f b6 db             	movzx  ebx,bl
c0021f6d:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0021f70:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0021f74:	83 ca 80             	or     edx,0xffffff80
c0021f77:	0f b6 d2             	movzx  edx,dl
c0021f7a:	52                   	push   edx
c0021f7b:	6a 0c                	push   0xc
c0021f7d:	56                   	push   esi
c0021f7e:	57                   	push   edi
c0021f7f:	e8 c0 ff ff ff       	call   c0021f44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021f84:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0021f89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021f8d:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0021f91:	ee                   	out    dx,al
c0021f92:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0021f97:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0021f9b:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0021f9f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0021fa3:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0021fab:	83 c4 2c             	add    esp,0x2c
c0021fae:	5b                   	pop    ebx
c0021faf:	5e                   	pop    esi
c0021fb0:	5f                   	pop    edi
c0021fb1:	5d                   	pop    ebp
c0021fb2:	eb 90                	jmp    c0021f44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021fb4:	80 fb 07             	cmp    bl,0x7
c0021fb7:	77 12                	ja     c0021fcb <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0021fb9:	0f b6 d2             	movzx  edx,dl
c0021fbc:	0f b6 db             	movzx  ebx,bl
c0021fbf:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0021fc7:	89 da                	mov    edx,ebx
c0021fc9:	eb 2f                	jmp    c0021ffa <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0021fcb:	80 fb 0d             	cmp    bl,0xd
c0021fce:	77 13                	ja     c0021fe3 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0021fd0:	0f b6 d2             	movzx  edx,dl
c0021fd3:	0f b6 db             	movzx  ebx,bl
c0021fd6:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0021fdd:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0021fe1:	eb 17                	jmp    c0021ffa <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0021fe3:	80 fb 15             	cmp    bl,0x15
c0021fe6:	77 13                	ja     c0021ffb <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0021fe8:	0f b6 d2             	movzx  edx,dl
c0021feb:	0f b6 db             	movzx  ebx,bl
c0021fee:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0021ff6:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0021ffa:	ee                   	out    dx,al
c0021ffb:	83 c4 1c             	add    esp,0x1c
c0021ffe:	5b                   	pop    ebx
c0021fff:	5e                   	pop    esi
c0022000:	5f                   	pop    edi
c0022001:	5d                   	pop    ebp
c0022002:	c3                   	ret    
c0022003:	90                   	nop

c0022004 <IDE::read(unsigned char, unsigned char)>:
c0022004:	55                   	push   ebp
c0022005:	57                   	push   edi
c0022006:	56                   	push   esi
c0022007:	53                   	push   ebx
c0022008:	83 ec 1c             	sub    esp,0x1c
c002200b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002200f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022013:	8d 43 f8             	lea    eax,[ebx-0x8]
c0022016:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002201a:	3c 03                	cmp    al,0x3
c002201c:	77 43                	ja     c0022061 <IDE::read(unsigned char, unsigned char)+0x5d>
c002201e:	0f b6 f2             	movzx  esi,dl
c0022021:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022024:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0022028:	83 c8 80             	or     eax,0xffffff80
c002202b:	0f b6 c0             	movzx  eax,al
c002202e:	50                   	push   eax
c002202f:	6a 0c                	push   0xc
c0022031:	56                   	push   esi
c0022032:	57                   	push   edi
c0022033:	e8 0c ff ff ff       	call   c0021f44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022038:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c002203d:	0f b6 c3             	movzx  eax,bl
c0022040:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0022044:	ec                   	in     al,dx
c0022045:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0022049:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c002204e:	52                   	push   edx
c002204f:	6a 0c                	push   0xc
c0022051:	56                   	push   esi
c0022052:	57                   	push   edi
c0022053:	e8 ec fe ff ff       	call   c0021f44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022058:	83 c4 20             	add    esp,0x20
c002205b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002205f:	eb 49                	jmp    c00220aa <IDE::read(unsigned char, unsigned char)+0xa6>
c0022061:	80 fb 07             	cmp    bl,0x7
c0022064:	77 12                	ja     c0022078 <IDE::read(unsigned char, unsigned char)+0x74>
c0022066:	0f b6 d2             	movzx  edx,dl
c0022069:	0f b6 c3             	movzx  eax,bl
c002206c:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0022074:	89 c2                	mov    edx,eax
c0022076:	eb 31                	jmp    c00220a9 <IDE::read(unsigned char, unsigned char)+0xa5>
c0022078:	80 fb 0d             	cmp    bl,0xd
c002207b:	77 13                	ja     c0022090 <IDE::read(unsigned char, unsigned char)+0x8c>
c002207d:	0f b6 d2             	movzx  edx,dl
c0022080:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0022087:	0f b6 d3             	movzx  edx,bl
c002208a:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002208e:	eb 19                	jmp    c00220a9 <IDE::read(unsigned char, unsigned char)+0xa5>
c0022090:	31 c0                	xor    eax,eax
c0022092:	80 fb 15             	cmp    bl,0x15
c0022095:	77 13                	ja     c00220aa <IDE::read(unsigned char, unsigned char)+0xa6>
c0022097:	0f b6 d2             	movzx  edx,dl
c002209a:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c00220a2:	0f b6 d3             	movzx  edx,bl
c00220a5:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c00220a9:	ec                   	in     al,dx
c00220aa:	83 c4 1c             	add    esp,0x1c
c00220ad:	5b                   	pop    ebx
c00220ae:	5e                   	pop    esi
c00220af:	5f                   	pop    edi
c00220b0:	5d                   	pop    ebp
c00220b1:	c3                   	ret    

c00220b2 <IDE::waitInterrupt(unsigned char)>:
c00220b2:	55                   	push   ebp
c00220b3:	57                   	push   edi
c00220b4:	56                   	push   esi
c00220b5:	53                   	push   ebx
c00220b6:	31 db                	xor    ebx,ebx
c00220b8:	83 ec 0c             	sub    esp,0xc
c00220bb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00220bf:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c00220c4:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c00220cc:	89 e8                	mov    eax,ebp
c00220ce:	84 c0                	test   al,al
c00220d0:	75 34                	jne    c0022106 <IDE::waitInterrupt(unsigned char)+0x54>
c00220d2:	52                   	push   edx
c00220d3:	6a 0c                	push   0xc
c00220d5:	56                   	push   esi
c00220d6:	57                   	push   edi
c00220d7:	e8 28 ff ff ff       	call   c0022004 <IDE::read(unsigned char, unsigned char)>
c00220dc:	83 c4 10             	add    esp,0x10
c00220df:	a8 01                	test   al,0x1
c00220e1:	75 2b                	jne    c002210e <IDE::waitInterrupt(unsigned char)+0x5c>
c00220e3:	f6 c3 04             	test   bl,0x4
c00220e6:	75 16                	jne    c00220fe <IDE::waitInterrupt(unsigned char)+0x4c>
c00220e8:	83 fb 32             	cmp    ebx,0x32
c00220eb:	7e 11                	jle    c00220fe <IDE::waitInterrupt(unsigned char)+0x4c>
c00220ed:	50                   	push   eax
c00220ee:	50                   	push   eax
c00220ef:	6a 00                	push   0x0
c00220f1:	68 80 96 98 00       	push   0x989680
c00220f6:	e8 6d b1 ff ff       	call   c001d268 <nanoSleep(unsigned long long)>
c00220fb:	83 c4 10             	add    esp,0x10
c00220fe:	83 fb 3c             	cmp    ebx,0x3c
c0022101:	74 0b                	je     c002210e <IDE::waitInterrupt(unsigned char)+0x5c>
c0022103:	43                   	inc    ebx
c0022104:	eb be                	jmp    c00220c4 <IDE::waitInterrupt(unsigned char)+0x12>
c0022106:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c002210e:	83 c4 0c             	add    esp,0xc
c0022111:	89 e8                	mov    eax,ebp
c0022113:	5b                   	pop    ebx
c0022114:	5e                   	pop    esi
c0022115:	5f                   	pop    edi
c0022116:	5d                   	pop    ebp
c0022117:	c3                   	ret    

c0022118 <ideChannel0IRQHandler(regs*, void*)>:
c0022118:	83 ec 10             	sub    esp,0x10
c002211b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002211f:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0022126:	6a 07                	push   0x7
c0022128:	6a 00                	push   0x0
c002212a:	50                   	push   eax
c002212b:	e8 d4 fe ff ff       	call   c0022004 <IDE::read(unsigned char, unsigned char)>
c0022130:	83 c4 1c             	add    esp,0x1c
c0022133:	c3                   	ret    

c0022134 <ideChannel1IRQHandler(regs*, void*)>:
c0022134:	83 ec 10             	sub    esp,0x10
c0022137:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002213b:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0022142:	6a 07                	push   0x7
c0022144:	6a 01                	push   0x1
c0022146:	50                   	push   eax
c0022147:	e8 b8 fe ff ff       	call   c0022004 <IDE::read(unsigned char, unsigned char)>
c002214c:	83 c4 1c             	add    esp,0x1c
c002214f:	c3                   	ret    

c0022150 <IDE::enableIRQs(unsigned char, bool)>:
c0022150:	57                   	push   edi
c0022151:	56                   	push   esi
c0022152:	be 04 00 00 00       	mov    esi,0x4
c0022157:	53                   	push   ebx
c0022158:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c002215d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022161:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0022166:	0f 94 c0             	sete   al
c0022169:	d1 e0                	shl    eax,1
c002216b:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0022172:	0f b6 c0             	movzx  eax,al
c0022175:	50                   	push   eax
c0022176:	6a 0c                	push   0xc
c0022178:	57                   	push   edi
c0022179:	53                   	push   ebx
c002217a:	e8 c5 fd ff ff       	call   c0021f44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002217f:	83 c4 10             	add    esp,0x10
c0022182:	50                   	push   eax
c0022183:	6a 0c                	push   0xc
c0022185:	57                   	push   edi
c0022186:	53                   	push   ebx
c0022187:	e8 78 fe ff ff       	call   c0022004 <IDE::read(unsigned char, unsigned char)>
c002218c:	83 c4 10             	add    esp,0x10
c002218f:	4e                   	dec    esi
c0022190:	75 f0                	jne    c0022182 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0022192:	5b                   	pop    ebx
c0022193:	5e                   	pop    esi
c0022194:	5f                   	pop    edi
c0022195:	c3                   	ret    

c0022196 <IDE::open(int, int, void*)>:
c0022196:	55                   	push   ebp
c0022197:	57                   	push   edi
c0022198:	56                   	push   esi
c0022199:	53                   	push   ebx
c002219a:	83 ec 1c             	sub    esp,0x1c
c002219d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00221a1:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c00221aa:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c00221b3:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c00221ba:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c00221c1:	0f 85 b0 02 00 00    	jne    c0022477 <IDE::open(int, int, void*)+0x2e1>
c00221c7:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c00221cd:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00221d1:	83 e0 7f             	and    eax,0x7f
c00221d4:	3c 05                	cmp    al,0x5
c00221d6:	74 04                	je     c00221dc <IDE::open(int, int, void*)+0x46>
c00221d8:	3c 0f                	cmp    al,0xf
c00221da:	75 32                	jne    c002220e <IDE::open(int, int, void*)+0x78>
c00221dc:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c00221e2:	83 e0 fc             	and    eax,0xfffffffc
c00221e5:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00221ec:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c00221f2:	83 e0 fc             	and    eax,0xfffffffc
c00221f5:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00221fc:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0022202:	83 e0 fc             	and    eax,0xfffffffc
c0022205:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002220c:	eb 14                	jmp    c0022222 <IDE::open(int, int, void*)+0x8c>
c002220e:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0022218:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0022222:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0022229:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0022230:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022234:	89 c6                	mov    esi,eax
c0022236:	bf f8 0c 00 00       	mov    edi,0xcf8
c002223b:	c1 e6 10             	shl    esi,0x10
c002223e:	89 e8                	mov    eax,ebp
c0022240:	89 fa                	mov    edx,edi
c0022242:	c1 e0 0b             	shl    eax,0xb
c0022245:	09 f0                	or     eax,esi
c0022247:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c002224e:	c1 e6 08             	shl    esi,0x8
c0022251:	09 c6                	or     esi,eax
c0022253:	89 f0                	mov    eax,esi
c0022255:	0d 08 00 00 80       	or     eax,0x80000008
c002225a:	ef                   	out    dx,eax
c002225b:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0022260:	89 ca                	mov    edx,ecx
c0022262:	ed                   	in     eax,dx
c0022263:	c1 e8 10             	shr    eax,0x10
c0022266:	3d ff ff 00 00       	cmp    eax,0xffff
c002226b:	0f 84 f5 00 00 00    	je     c0022366 <IDE::open(int, int, void*)+0x1d0>
c0022271:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0022277:	89 fa                	mov    edx,edi
c0022279:	89 f0                	mov    eax,esi
c002227b:	ef                   	out    dx,eax
c002227c:	b0 fe                	mov    al,0xfe
c002227e:	89 ca                	mov    edx,ecx
c0022280:	ee                   	out    dx,al
c0022281:	89 f0                	mov    eax,esi
c0022283:	89 fa                	mov    edx,edi
c0022285:	ef                   	out    dx,eax
c0022286:	89 ca                	mov    edx,ecx
c0022288:	ed                   	in     eax,dx
c0022289:	3c fe                	cmp    al,0xfe
c002228b:	0f 85 a9 00 00 00    	jne    c002233a <IDE::open(int, int, void*)+0x1a4>
c0022291:	8b 15 48 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c948
c0022297:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c002229e:	74 33                	je     c00222d3 <IDE::open(int, int, void*)+0x13d>
c00222a0:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c00222a6:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c00222aa:	40                   	inc    eax
c00222ab:	83 ec 0c             	sub    esp,0xc
c00222ae:	0f b6 c0             	movzx  eax,al
c00222b1:	50                   	push   eax
c00222b2:	55                   	push   ebp
c00222b3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00222b7:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c00222bd:	51                   	push   ecx
c00222be:	e8 bb 54 ff ff       	call   c001777e <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c00222c3:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c00222c8:	83 c4 1c             	add    esp,0x1c
c00222cb:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00222d1:	eb 0a                	jmp    c00222dd <IDE::open(int, int, void*)+0x147>
c00222d3:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c00222dd:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c00222e4:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c00222eb:	c1 e1 10             	shl    ecx,0x10
c00222ee:	c1 e0 08             	shl    eax,0x8
c00222f1:	bf f8 0c 00 00       	mov    edi,0xcf8
c00222f6:	09 c1                	or     ecx,eax
c00222f8:	89 fa                	mov    edx,edi
c00222fa:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0022301:	c1 e0 0b             	shl    eax,0xb
c0022304:	09 c1                	or     ecx,eax
c0022306:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c002230c:	89 c8                	mov    eax,ecx
c002230e:	ef                   	out    dx,eax
c002230f:	be fc 0c 00 00       	mov    esi,0xcfc
c0022314:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c002231a:	89 f2                	mov    edx,esi
c002231c:	ee                   	out    dx,al
c002231d:	89 c8                	mov    eax,ecx
c002231f:	89 fa                	mov    edx,edi
c0022321:	ef                   	out    dx,eax
c0022322:	89 f2                	mov    edx,esi
c0022324:	ed                   	in     eax,dx
c0022325:	0f b6 c0             	movzx  eax,al
c0022328:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c002232e:	74 46                	je     c0022376 <IDE::open(int, int, void*)+0x1e0>
c0022330:	83 ec 0c             	sub    esp,0xc
c0022333:	68 20 b0 02 c0       	push   0xc002b020
c0022338:	eb 34                	jmp    c002236e <IDE::open(int, int, void*)+0x1d8>
c002233a:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0022343:	75 17                	jne    c002235c <IDE::open(int, int, void*)+0x1c6>
c0022345:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c002234a:	74 07                	je     c0022353 <IDE::open(int, int, void*)+0x1bd>
c002234c:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0022351:	75 09                	jne    c002235c <IDE::open(int, int, void*)+0x1c6>
c0022353:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002235a:	eb 1a                	jmp    c0022376 <IDE::open(int, int, void*)+0x1e0>
c002235c:	83 ec 0c             	sub    esp,0xc
c002235f:	68 28 b0 02 c0       	push   0xc002b028
c0022364:	eb 08                	jmp    c002236e <IDE::open(int, int, void*)+0x1d8>
c0022366:	83 ec 0c             	sub    esp,0xc
c0022369:	68 59 b0 02 c0       	push   0xc002b059
c002236e:	e8 16 75 ff ff       	call   c0019889 <Krnl::panic(char const*)>
c0022373:	83 c4 10             	add    esp,0x10
c0022376:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c002237d:	79 1a                	jns    c0022399 <IDE::open(int, int, void*)+0x203>
c002237f:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0022385:	83 e0 fc             	and    eax,0xfffffffc
c0022388:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c002238f:	83 c0 08             	add    eax,0x8
c0022392:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0022399:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c002239f:	89 c2                	mov    edx,eax
c00223a1:	83 e2 0f             	and    edx,0xf
c00223a4:	66 83 fa 08          	cmp    dx,0x8
c00223a8:	75 0a                	jne    c00223b4 <IDE::open(int, int, void*)+0x21e>
c00223aa:	83 e8 02             	sub    eax,0x2
c00223ad:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00223b4:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c00223ba:	89 c2                	mov    edx,eax
c00223bc:	83 e2 0f             	and    edx,0xf
c00223bf:	66 83 fa 08          	cmp    dx,0x8
c00223c3:	75 0a                	jne    c00223cf <IDE::open(int, int, void*)+0x239>
c00223c5:	83 e8 02             	sub    eax,0x2
c00223c8:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00223cf:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00223d6:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c00223dd:	89 d0                	mov    eax,edx
c00223df:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00223e2:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00223e6:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c00223ea:	8d 4a 01             	lea    ecx,[edx+0x1]
c00223ed:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00223f2:	0f b6 c9             	movzx  ecx,cl
c00223f5:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c00223fc:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00223ff:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0022403:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0022407:	8d 50 02             	lea    edx,[eax+0x2]
c002240a:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c002240f:	0f b6 d2             	movzx  edx,dl
c0022412:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0022418:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002241b:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002241f:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0022423:	8d 48 03             	lea    ecx,[eax+0x3]
c0022426:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002242b:	0f b6 c9             	movzx  ecx,cl
c002242e:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0022434:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0022437:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002243b:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c002243f:	8d 50 04             	lea    edx,[eax+0x4]
c0022442:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0022448:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c002244d:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0022454:	66 85 f6             	test   si,si
c0022457:	74 3e                	je     c0022497 <IDE::open(int, int, void*)+0x301>
c0022459:	0f b6 d2             	movzx  edx,dl
c002245c:	83 c0 05             	add    eax,0x5
c002245f:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0022462:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0022466:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c002246a:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0022470:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0022475:	eb 20                	jmp    c0022497 <IDE::open(int, int, void*)+0x301>
c0022477:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0022481:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c002248b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0022492:	e9 02 ff ff ff       	jmp    c0022399 <IDE::open(int, int, void*)+0x203>
c0022497:	52                   	push   edx
c0022498:	52                   	push   edx
c0022499:	6a 00                	push   0x0
c002249b:	53                   	push   ebx
c002249c:	e8 7d fa ff ff       	call   c0021f1e <IDE::prepareInterrupt(unsigned char)>
c00224a1:	59                   	pop    ecx
c00224a2:	5e                   	pop    esi
c00224a3:	6a 01                	push   0x1
c00224a5:	53                   	push   ebx
c00224a6:	e8 73 fa ff ff       	call   c0021f1e <IDE::prepareInterrupt(unsigned char)>
c00224ab:	83 c4 0c             	add    esp,0xc
c00224ae:	6a 00                	push   0x0
c00224b0:	6a 00                	push   0x0
c00224b2:	53                   	push   ebx
c00224b3:	e8 98 fc ff ff       	call   c0022150 <IDE::enableIRQs(unsigned char, bool)>
c00224b8:	83 c4 0c             	add    esp,0xc
c00224bb:	6a 00                	push   0x0
c00224bd:	6a 01                	push   0x1
c00224bf:	53                   	push   ebx
c00224c0:	e8 8b fc ff ff       	call   c0022150 <IDE::enableIRQs(unsigned char, bool)>
c00224c5:	83 c4 10             	add    esp,0x10
c00224c8:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00224cf:	74 40                	je     c0022511 <IDE::open(int, int, void*)+0x37b>
c00224d1:	83 ec 0c             	sub    esp,0xc
c00224d4:	68 83 b0 02 c0       	push   0xc002b083
c00224d9:	e8 91 02 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c00224de:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00224e1:	6a 01                	push   0x1
c00224e3:	68 18 21 02 c0       	push   0xc0022118
c00224e8:	6a 0e                	push   0xe
c00224ea:	53                   	push   ebx
c00224eb:	e8 f2 15 ff ff       	call   c0013ae2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00224f0:	83 c4 14             	add    esp,0x14
c00224f3:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00224f9:	53                   	push   ebx
c00224fa:	6a 01                	push   0x1
c00224fc:	68 34 21 02 c0       	push   0xc0022134
c0022501:	6a 0f                	push   0xf
c0022503:	53                   	push   ebx
c0022504:	e8 d9 15 ff ff       	call   c0013ae2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022509:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c002250f:	eb 4a                	jmp    c002255b <IDE::open(int, int, void*)+0x3c5>
c0022511:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c002251b:	50                   	push   eax
c002251c:	6a 0f                	push   0xf
c002251e:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0022524:	68 9f b0 02 c0       	push   0xc002b09f
c0022529:	e8 41 02 ff ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c002252e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022531:	6a 00                	push   0x0
c0022533:	68 18 21 02 c0       	push   0xc0022118
c0022538:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c002253e:	53                   	push   ebx
c002253f:	e8 9e 15 ff ff       	call   c0013ae2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022544:	83 c4 14             	add    esp,0x14
c0022547:	53                   	push   ebx
c0022548:	6a 00                	push   0x0
c002254a:	68 34 21 02 c0       	push   0xc0022134
c002254f:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0022555:	53                   	push   ebx
c0022556:	e8 87 15 ff ff       	call   c0013ae2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002255b:	8b 03                	mov    eax,DWORD PTR [ebx]
c002255d:	83 c4 20             	add    esp,0x20
c0022560:	83 ec 0c             	sub    esp,0xc
c0022563:	53                   	push   ebx
c0022564:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0022567:	83 c4 0c             	add    esp,0xc
c002256a:	6a 07                	push   0x7
c002256c:	6a 00                	push   0x0
c002256e:	53                   	push   ebx
c002256f:	e8 90 fa ff ff       	call   c0022004 <IDE::read(unsigned char, unsigned char)>
c0022574:	83 c4 0c             	add    esp,0xc
c0022577:	6a 07                	push   0x7
c0022579:	6a 01                	push   0x1
c002257b:	53                   	push   ebx
c002257c:	e8 83 fa ff ff       	call   c0022004 <IDE::read(unsigned char, unsigned char)>
c0022581:	83 c4 0c             	add    esp,0xc
c0022584:	6a 01                	push   0x1
c0022586:	6a 00                	push   0x0
c0022588:	53                   	push   ebx
c0022589:	e8 c2 fb ff ff       	call   c0022150 <IDE::enableIRQs(unsigned char, bool)>
c002258e:	83 c4 0c             	add    esp,0xc
c0022591:	6a 01                	push   0x1
c0022593:	6a 01                	push   0x1
c0022595:	53                   	push   ebx
c0022596:	e8 b5 fb ff ff       	call   c0022150 <IDE::enableIRQs(unsigned char, bool)>
c002259b:	83 c4 2c             	add    esp,0x2c
c002259e:	31 c0                	xor    eax,eax
c00225a0:	5b                   	pop    ebx
c00225a1:	5e                   	pop    esi
c00225a2:	5f                   	pop    edi
c00225a3:	5d                   	pop    ebp
c00225a4:	c3                   	ret    
c00225a5:	90                   	nop

c00225a6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c00225a6:	55                   	push   ebp
c00225a7:	57                   	push   edi
c00225a8:	56                   	push   esi
c00225a9:	53                   	push   ebx
c00225aa:	83 ec 1c             	sub    esp,0x1c
c00225ad:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00225b1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00225b5:	8d 50 f8             	lea    edx,[eax-0x8]
c00225b8:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00225bc:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00225c0:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00225c4:	80 fa 03             	cmp    dl,0x3
c00225c7:	77 5d                	ja     c0022626 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c00225c9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00225cd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00225d1:	0f b6 db             	movzx  ebx,bl
c00225d4:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c00225d7:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c00225db:	83 ca 80             	or     edx,0xffffff80
c00225de:	0f b6 d2             	movzx  edx,dl
c00225e1:	52                   	push   edx
c00225e2:	6a 0c                	push   0xc
c00225e4:	53                   	push   ebx
c00225e5:	56                   	push   esi
c00225e6:	e8 59 f9 ff ff       	call   c0021f44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00225eb:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c00225f0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00225f4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00225f8:	0f b6 c0             	movzx  eax,al
c00225fb:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c00225ff:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0022601:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0022606:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c002260a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002260e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0022612:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002261a:	83 c4 2c             	add    esp,0x2c
c002261d:	5b                   	pop    ebx
c002261e:	5e                   	pop    esi
c002261f:	5f                   	pop    edi
c0022620:	5d                   	pop    ebp
c0022621:	e9 1e f9 ff ff       	jmp    c0021f44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022626:	3c 07                	cmp    al,0x7
c0022628:	77 10                	ja     c002263a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c002262a:	0f b6 db             	movzx  ebx,bl
c002262d:	0f b6 d0             	movzx  edx,al
c0022630:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0022638:	eb 2d                	jmp    c0022667 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c002263a:	3c 0d                	cmp    al,0xd
c002263c:	77 13                	ja     c0022651 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c002263e:	0f b6 db             	movzx  ebx,bl
c0022641:	0f b6 c0             	movzx  eax,al
c0022644:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c002264b:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c002264f:	eb 16                	jmp    c0022667 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0022651:	3c 15                	cmp    al,0x15
c0022653:	77 14                	ja     c0022669 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0022655:	0f b6 db             	movzx  ebx,bl
c0022658:	0f b6 c0             	movzx  eax,al
c002265b:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0022663:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0022667:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0022669:	83 c4 1c             	add    esp,0x1c
c002266c:	5b                   	pop    ebx
c002266d:	5e                   	pop    esi
c002266e:	5f                   	pop    edi
c002266f:	5d                   	pop    ebp
c0022670:	c3                   	ret    
c0022671:	90                   	nop

c0022672 <IDE::detect()>:
c0022672:	55                   	push   ebp
c0022673:	57                   	push   edi
c0022674:	56                   	push   esi
c0022675:	53                   	push   ebx
c0022676:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002267c:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0022683:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c002268a:	0f 85 be 02 00 00    	jne    c002294e <IDE::detect()+0x2dc>
c0022690:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0022697:	31 f6                	xor    esi,esi
c0022699:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00226a1:	31 ed                	xor    ebp,ebp
c00226a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00226a7:	c1 e0 06             	shl    eax,0x6
c00226aa:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c00226b2:	89 e8                	mov    eax,ebp
c00226b4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00226b8:	c1 e0 04             	shl    eax,0x4
c00226bb:	83 c8 a0             	or     eax,0xffffffa0
c00226be:	0f b6 c0             	movzx  eax,al
c00226c1:	50                   	push   eax
c00226c2:	6a 06                	push   0x6
c00226c4:	56                   	push   esi
c00226c5:	53                   	push   ebx
c00226c6:	e8 79 f8 ff ff       	call   c0021f44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00226cb:	83 c4 0c             	add    esp,0xc
c00226ce:	6a 0c                	push   0xc
c00226d0:	56                   	push   esi
c00226d1:	53                   	push   ebx
c00226d2:	e8 2d f9 ff ff       	call   c0022004 <IDE::read(unsigned char, unsigned char)>
c00226d7:	83 c4 0c             	add    esp,0xc
c00226da:	6a 0c                	push   0xc
c00226dc:	56                   	push   esi
c00226dd:	53                   	push   ebx
c00226de:	e8 21 f9 ff ff       	call   c0022004 <IDE::read(unsigned char, unsigned char)>
c00226e3:	83 c4 0c             	add    esp,0xc
c00226e6:	6a 0c                	push   0xc
c00226e8:	56                   	push   esi
c00226e9:	53                   	push   ebx
c00226ea:	e8 15 f9 ff ff       	call   c0022004 <IDE::read(unsigned char, unsigned char)>
c00226ef:	83 c4 0c             	add    esp,0xc
c00226f2:	6a 0c                	push   0xc
c00226f4:	56                   	push   esi
c00226f5:	53                   	push   ebx
c00226f6:	e8 09 f9 ff ff       	call   c0022004 <IDE::read(unsigned char, unsigned char)>
c00226fb:	68 ec 00 00 00       	push   0xec
c0022700:	6a 07                	push   0x7
c0022702:	56                   	push   esi
c0022703:	53                   	push   ebx
c0022704:	e8 3b f8 ff ff       	call   c0021f44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022709:	83 c4 1c             	add    esp,0x1c
c002270c:	6a 0c                	push   0xc
c002270e:	56                   	push   esi
c002270f:	53                   	push   ebx
c0022710:	e8 ef f8 ff ff       	call   c0022004 <IDE::read(unsigned char, unsigned char)>
c0022715:	83 c4 0c             	add    esp,0xc
c0022718:	6a 0c                	push   0xc
c002271a:	56                   	push   esi
c002271b:	53                   	push   ebx
c002271c:	e8 e3 f8 ff ff       	call   c0022004 <IDE::read(unsigned char, unsigned char)>
c0022721:	83 c4 0c             	add    esp,0xc
c0022724:	6a 0c                	push   0xc
c0022726:	56                   	push   esi
c0022727:	53                   	push   ebx
c0022728:	e8 d7 f8 ff ff       	call   c0022004 <IDE::read(unsigned char, unsigned char)>
c002272d:	83 c4 0c             	add    esp,0xc
c0022730:	6a 0c                	push   0xc
c0022732:	56                   	push   esi
c0022733:	53                   	push   ebx
c0022734:	e8 cb f8 ff ff       	call   c0022004 <IDE::read(unsigned char, unsigned char)>
c0022739:	83 c4 0c             	add    esp,0xc
c002273c:	6a 0c                	push   0xc
c002273e:	56                   	push   esi
c002273f:	53                   	push   ebx
c0022740:	e8 bf f8 ff ff       	call   c0022004 <IDE::read(unsigned char, unsigned char)>
c0022745:	83 c4 10             	add    esp,0x10
c0022748:	84 c0                	test   al,al
c002274a:	0f 84 8b 01 00 00    	je     c00228db <IDE::detect()+0x269>
c0022750:	31 ff                	xor    edi,edi
c0022752:	50                   	push   eax
c0022753:	6a 0c                	push   0xc
c0022755:	56                   	push   esi
c0022756:	53                   	push   ebx
c0022757:	e8 a8 f8 ff ff       	call   c0022004 <IDE::read(unsigned char, unsigned char)>
c002275c:	83 c4 10             	add    esp,0x10
c002275f:	a8 01                	test   al,0x1
c0022761:	0f 85 8e 01 00 00    	jne    c00228f5 <IDE::detect()+0x283>
c0022767:	84 c0                	test   al,al
c0022769:	78 04                	js     c002276f <IDE::detect()+0xfd>
c002276b:	a8 08                	test   al,0x8
c002276d:	75 27                	jne    c0022796 <IDE::detect()+0x124>
c002276f:	47                   	inc    edi
c0022770:	81 ff 17 01 00 00    	cmp    edi,0x117
c0022776:	7e da                	jle    c0022752 <IDE::detect()+0xe0>
c0022778:	50                   	push   eax
c0022779:	50                   	push   eax
c002277a:	6a 00                	push   0x0
c002277c:	68 40 4b 4c 00       	push   0x4c4b40
c0022781:	e8 e2 aa ff ff       	call   c001d268 <nanoSleep(unsigned long long)>
c0022786:	83 c4 10             	add    esp,0x10
c0022789:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c002278f:	75 c1                	jne    c0022752 <IDE::detect()+0xe0>
c0022791:	e9 5f 01 00 00       	jmp    c00228f5 <IDE::detect()+0x283>
c0022796:	31 c9                	xor    ecx,ecx
c0022798:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c002279c:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00227a0:	83 ec 0c             	sub    esp,0xc
c00227a3:	68 80 00 00 00       	push   0x80
c00227a8:	57                   	push   edi
c00227a9:	6a 00                	push   0x0
c00227ab:	56                   	push   esi
c00227ac:	53                   	push   ebx
c00227ad:	e8 f4 fd ff ff       	call   c00225a6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c00227b2:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c00227b7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00227bb:	89 d1                	mov    ecx,edx
c00227bd:	c1 e0 06             	shl    eax,0x6
c00227c0:	01 d8                	add    eax,ebx
c00227c2:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c00227c9:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c00227d0:	89 f2                	mov    edx,esi
c00227d2:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c00227d8:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00227dc:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c00227e2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00227e6:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c00227ed:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c00227f5:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c00227fc:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0022804:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c002280a:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0022811:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0022817:	8d 54 24 58          	lea    edx,[esp+0x58]
c002281b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002281f:	83 c4 20             	add    esp,0x20
c0022822:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0022825:	83 c0 02             	add    eax,0x2
c0022828:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c002282e:	83 c7 02             	add    edi,0x2
c0022831:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0022834:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c002283a:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c002283e:	75 e2                	jne    c0022822 <IDE::detect()+0x1b0>
c0022840:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022844:	c1 e0 06             	shl    eax,0x6
c0022847:	01 d8                	add    eax,ebx
c0022849:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c002284f:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0022856:	66 c1 ea 09          	shr    dx,0x9
c002285a:	83 e2 01             	and    edx,0x1
c002285d:	84 c9                	test   cl,cl
c002285f:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0022865:	75 2f                	jne    c0022896 <IDE::detect()+0x224>
c0022867:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c002286d:	85 c0                	test   eax,eax
c002286f:	74 66                	je     c00228d7 <IDE::detect()+0x265>
c0022871:	50                   	push   eax
c0022872:	55                   	push   ebp
c0022873:	56                   	push   esi
c0022874:	68 bb b0 02 c0       	push   0xc002b0bb
c0022879:	e8 f1 fe fe ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c002287e:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0022885:	e8 4a cc fe ff       	call   c000f4d4 <malloc>
c002288a:	89 c7                	mov    edi,eax
c002288c:	89 04 24             	mov    DWORD PTR [esp],eax
c002288f:	e8 62 06 00 00       	call   c0022ef6 <ATA::ATA()>
c0022894:	eb 28                	jmp    c00228be <IDE::detect()+0x24c>
c0022896:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c002289c:	55                   	push   ebp
c002289d:	56                   	push   esi
c002289e:	68 ea b0 02 c0       	push   0xc002b0ea
c00228a3:	e8 c7 fe fe ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c00228a8:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c00228af:	e8 20 cc fe ff       	call   c000f4d4 <malloc>
c00228b4:	89 c7                	mov    edi,eax
c00228b6:	89 04 24             	mov    DWORD PTR [esp],eax
c00228b9:	e8 68 0c 00 00       	call   c0023526 <ATAPI::ATAPI()>
c00228be:	5a                   	pop    edx
c00228bf:	59                   	pop    ecx
c00228c0:	57                   	push   edi
c00228c1:	53                   	push   ebx
c00228c2:	e8 97 12 ff ff       	call   c0013b5e <Device::addChild(Device*)>
c00228c7:	8b 07                	mov    eax,DWORD PTR [edi]
c00228c9:	53                   	push   ebx
c00228ca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00228ce:	6a 00                	push   0x0
c00228d0:	57                   	push   edi
c00228d1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00228d4:	83 c4 20             	add    esp,0x20
c00228d7:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00228db:	4d                   	dec    ebp
c00228dc:	74 0a                	je     c00228e8 <IDE::detect()+0x276>
c00228de:	bd 01 00 00 00       	mov    ebp,0x1
c00228e3:	e9 bb fd ff ff       	jmp    c00226a3 <IDE::detect()+0x31>
c00228e8:	4e                   	dec    esi
c00228e9:	74 63                	je     c002294e <IDE::detect()+0x2dc>
c00228eb:	be 01 00 00 00       	mov    esi,0x1
c00228f0:	e9 ac fd ff ff       	jmp    c00226a1 <IDE::detect()+0x2f>
c00228f5:	50                   	push   eax
c00228f6:	6a 04                	push   0x4
c00228f8:	56                   	push   esi
c00228f9:	53                   	push   ebx
c00228fa:	e8 05 f7 ff ff       	call   c0022004 <IDE::read(unsigned char, unsigned char)>
c00228ff:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0022903:	83 c4 0c             	add    esp,0xc
c0022906:	6a 05                	push   0x5
c0022908:	56                   	push   esi
c0022909:	53                   	push   ebx
c002290a:	e8 f5 f6 ff ff       	call   c0022004 <IDE::read(unsigned char, unsigned char)>
c002290f:	83 c4 10             	add    esp,0x10
c0022912:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0022916:	80 fa 14             	cmp    dl,0x14
c0022919:	75 04                	jne    c002291f <IDE::detect()+0x2ad>
c002291b:	3c eb                	cmp    al,0xeb
c002291d:	eb 07                	jmp    c0022926 <IDE::detect()+0x2b4>
c002291f:	3c 96                	cmp    al,0x96
c0022921:	75 b8                	jne    c00228db <IDE::detect()+0x269>
c0022923:	80 fa 69             	cmp    dl,0x69
c0022926:	75 b3                	jne    c00228db <IDE::detect()+0x269>
c0022928:	68 a1 00 00 00       	push   0xa1
c002292d:	6a 07                	push   0x7
c002292f:	56                   	push   esi
c0022930:	53                   	push   ebx
c0022931:	e8 0e f6 ff ff       	call   c0021f44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022936:	5f                   	pop    edi
c0022937:	58                   	pop    eax
c0022938:	6a 00                	push   0x0
c002293a:	68 40 42 0f 00       	push   0xf4240
c002293f:	e8 24 a9 ff ff       	call   c001d268 <nanoSleep(unsigned long long)>
c0022944:	83 c4 10             	add    esp,0x10
c0022947:	b1 01                	mov    cl,0x1
c0022949:	e9 4a fe ff ff       	jmp    c0022798 <IDE::detect()+0x126>
c002294e:	81 c4 1c 02 00 00    	add    esp,0x21c
c0022954:	5b                   	pop    ebx
c0022955:	5e                   	pop    esi
c0022956:	5f                   	pop    edi
c0022957:	5d                   	pop    ebp
c0022958:	c3                   	ret    
c0022959:	90                   	nop

c002295a <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c002295a:	55                   	push   ebp
c002295b:	57                   	push   edi
c002295c:	56                   	push   esi
c002295d:	53                   	push   ebx
c002295e:	83 ec 1c             	sub    esp,0x1c
c0022961:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022965:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022969:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002296d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0022971:	88 c3                	mov    bl,al
c0022973:	84 c0                	test   al,al
c0022975:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022979:	0f 84 67 01 00 00    	je     c0022ae6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c002297f:	83 ec 0c             	sub    esp,0xc
c0022982:	68 1b b1 02 c0       	push   0xc002b11b
c0022987:	e8 e3 fd fe ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c002298c:	83 c4 10             	add    esp,0x10
c002298f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022993:	3c 01                	cmp    al,0x1
c0022995:	75 17                	jne    c00229ae <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0022997:	83 ec 0c             	sub    esp,0xc
c002299a:	b3 13                	mov    bl,0x13
c002299c:	68 27 b1 02 c0       	push   0xc002b127
c00229a1:	e8 c9 fd fe ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c00229a6:	83 c4 10             	add    esp,0x10
c00229a9:	e9 25 01 00 00       	jmp    c0022ad3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00229ae:	3c 02                	cmp    al,0x2
c00229b0:	0f 85 ef 00 00 00    	jne    c0022aa5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c00229b6:	d1 e6                	shl    esi,1
c00229b8:	09 ee                	or     esi,ebp
c00229ba:	52                   	push   edx
c00229bb:	89 f0                	mov    eax,esi
c00229bd:	6a 01                	push   0x1
c00229bf:	0f b6 f0             	movzx  esi,al
c00229c2:	c1 e6 06             	shl    esi,0x6
c00229c5:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c00229cd:	50                   	push   eax
c00229ce:	57                   	push   edi
c00229cf:	e8 30 f6 ff ff       	call   c0022004 <IDE::read(unsigned char, unsigned char)>
c00229d4:	83 c4 10             	add    esp,0x10
c00229d7:	89 c6                	mov    esi,eax
c00229d9:	a8 01                	test   al,0x1
c00229db:	74 12                	je     c00229ef <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c00229dd:	83 ec 0c             	sub    esp,0xc
c00229e0:	b3 07                	mov    bl,0x7
c00229e2:	68 3c b1 02 c0       	push   0xc002b13c
c00229e7:	e8 83 fd fe ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c00229ec:	83 c4 10             	add    esp,0x10
c00229ef:	f7 c6 02 00 00 00    	test   esi,0x2
c00229f5:	74 12                	je     c0022a09 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c00229f7:	83 ec 0c             	sub    esp,0xc
c00229fa:	b3 03                	mov    bl,0x3
c00229fc:	68 5a b1 02 c0       	push   0xc002b15a
c0022a01:	e8 69 fd fe ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c0022a06:	83 c4 10             	add    esp,0x10
c0022a09:	f7 c6 04 00 00 00    	test   esi,0x4
c0022a0f:	74 12                	je     c0022a23 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0022a11:	83 ec 0c             	sub    esp,0xc
c0022a14:	b3 14                	mov    bl,0x14
c0022a16:	68 7a b1 02 c0       	push   0xc002b17a
c0022a1b:	e8 4f fd fe ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c0022a20:	83 c4 10             	add    esp,0x10
c0022a23:	f7 c6 08 00 00 00    	test   esi,0x8
c0022a29:	74 12                	je     c0022a3d <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0022a2b:	83 ec 0c             	sub    esp,0xc
c0022a2e:	b3 03                	mov    bl,0x3
c0022a30:	68 5a b1 02 c0       	push   0xc002b15a
c0022a35:	e8 35 fd fe ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c0022a3a:	83 c4 10             	add    esp,0x10
c0022a3d:	f7 c6 10 00 00 00    	test   esi,0x10
c0022a43:	74 12                	je     c0022a57 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0022a45:	83 ec 0c             	sub    esp,0xc
c0022a48:	b3 15                	mov    bl,0x15
c0022a4a:	68 92 b1 02 c0       	push   0xc002b192
c0022a4f:	e8 1b fd fe ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c0022a54:	83 c4 10             	add    esp,0x10
c0022a57:	f7 c6 20 00 00 00    	test   esi,0x20
c0022a5d:	74 12                	je     c0022a71 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0022a5f:	83 ec 0c             	sub    esp,0xc
c0022a62:	b3 03                	mov    bl,0x3
c0022a64:	68 5a b1 02 c0       	push   0xc002b15a
c0022a69:	e8 01 fd fe ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c0022a6e:	83 c4 10             	add    esp,0x10
c0022a71:	f7 c6 40 00 00 00    	test   esi,0x40
c0022a77:	74 12                	je     c0022a8b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0022a79:	83 ec 0c             	sub    esp,0xc
c0022a7c:	b3 16                	mov    bl,0x16
c0022a7e:	68 ac b1 02 c0       	push   0xc002b1ac
c0022a83:	e8 e7 fc fe ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c0022a88:	83 c4 10             	add    esp,0x10
c0022a8b:	89 f0                	mov    eax,esi
c0022a8d:	84 c0                	test   al,al
c0022a8f:	79 42                	jns    c0022ad3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022a91:	83 ec 0c             	sub    esp,0xc
c0022a94:	b3 0d                	mov    bl,0xd
c0022a96:	68 cd b1 02 c0       	push   0xc002b1cd
c0022a9b:	e8 cf fc fe ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c0022aa0:	83 c4 10             	add    esp,0x10
c0022aa3:	eb 2e                	jmp    c0022ad3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022aa5:	3c 03                	cmp    al,0x3
c0022aa7:	75 14                	jne    c0022abd <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0022aa9:	83 ec 0c             	sub    esp,0xc
c0022aac:	b3 17                	mov    bl,0x17
c0022aae:	68 e1 b1 02 c0       	push   0xc002b1e1
c0022ab3:	e8 b7 fc fe ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c0022ab8:	83 c4 10             	add    esp,0x10
c0022abb:	eb 16                	jmp    c0022ad3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022abd:	3c 04                	cmp    al,0x4
c0022abf:	75 12                	jne    c0022ad3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022ac1:	83 ec 0c             	sub    esp,0xc
c0022ac4:	b3 08                	mov    bl,0x8
c0022ac6:	68 f7 b1 02 c0       	push   0xc002b1f7
c0022acb:	e8 9f fc fe ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c0022ad0:	83 c4 10             	add    esp,0x10
c0022ad3:	50                   	push   eax
c0022ad4:	50                   	push   eax
c0022ad5:	0f b6 c3             	movzx  eax,bl
c0022ad8:	50                   	push   eax
c0022ad9:	68 0f b2 02 c0       	push   0xc002b20f
c0022ade:	e8 8c fc fe ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c0022ae3:	83 c4 10             	add    esp,0x10
c0022ae6:	83 c4 1c             	add    esp,0x1c
c0022ae9:	88 d8                	mov    al,bl
c0022aeb:	5b                   	pop    ebx
c0022aec:	5e                   	pop    esi
c0022aed:	5f                   	pop    edi
c0022aee:	5d                   	pop    ebp
c0022aef:	c3                   	ret    

c0022af0 <IDE::polling(unsigned char, unsigned int)>:
c0022af0:	57                   	push   edi
c0022af1:	56                   	push   esi
c0022af2:	53                   	push   ebx
c0022af3:	bb 04 00 00 00       	mov    ebx,0x4
c0022af8:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0022afc:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022b01:	52                   	push   edx
c0022b02:	6a 0c                	push   0xc
c0022b04:	56                   	push   esi
c0022b05:	57                   	push   edi
c0022b06:	e8 f9 f4 ff ff       	call   c0022004 <IDE::read(unsigned char, unsigned char)>
c0022b0b:	83 c4 10             	add    esp,0x10
c0022b0e:	4b                   	dec    ebx
c0022b0f:	75 f0                	jne    c0022b01 <IDE::polling(unsigned char, unsigned int)+0x11>
c0022b11:	bb a0 86 01 00       	mov    ebx,0x186a0
c0022b16:	50                   	push   eax
c0022b17:	6a 0c                	push   0xc
c0022b19:	56                   	push   esi
c0022b1a:	57                   	push   edi
c0022b1b:	e8 e4 f4 ff ff       	call   c0022004 <IDE::read(unsigned char, unsigned char)>
c0022b20:	83 c4 10             	add    esp,0x10
c0022b23:	a8 01                	test   al,0x1
c0022b25:	74 12                	je     c0022b39 <IDE::polling(unsigned char, unsigned int)+0x49>
c0022b27:	83 ec 0c             	sub    esp,0xc
c0022b2a:	68 29 b2 02 c0       	push   0xc002b229
c0022b2f:	e8 3b fc fe ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c0022b34:	83 c4 10             	add    esp,0x10
c0022b37:	eb 17                	jmp    c0022b50 <IDE::polling(unsigned char, unsigned int)+0x60>
c0022b39:	a8 20                	test   al,0x20
c0022b3b:	75 0f                	jne    c0022b4c <IDE::polling(unsigned char, unsigned int)+0x5c>
c0022b3d:	4b                   	dec    ebx
c0022b3e:	74 10                	je     c0022b50 <IDE::polling(unsigned char, unsigned int)+0x60>
c0022b40:	84 c0                	test   al,al
c0022b42:	78 d2                	js     c0022b16 <IDE::polling(unsigned char, unsigned int)+0x26>
c0022b44:	a8 08                	test   al,0x8
c0022b46:	74 ce                	je     c0022b16 <IDE::polling(unsigned char, unsigned int)+0x26>
c0022b48:	31 c0                	xor    eax,eax
c0022b4a:	eb 06                	jmp    c0022b52 <IDE::polling(unsigned char, unsigned int)+0x62>
c0022b4c:	b0 01                	mov    al,0x1
c0022b4e:	eb 02                	jmp    c0022b52 <IDE::polling(unsigned char, unsigned int)+0x62>
c0022b50:	b0 02                	mov    al,0x2
c0022b52:	5b                   	pop    ebx
c0022b53:	5e                   	pop    esi
c0022b54:	5f                   	pop    edi
c0022b55:	c3                   	ret    

c0022b56 <SATABus::close(int, int, void*)>:
c0022b56:	31 c0                	xor    eax,eax
c0022b58:	c3                   	ret    
c0022b59:	90                   	nop

c0022b5a <SATABus::detect()>:
c0022b5a:	c3                   	ret    
c0022b5b:	90                   	nop

c0022b5c <SATABus::SATABus()>:
c0022b5c:	83 ec 0c             	sub    esp,0xc
c0022b5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b63:	83 ec 08             	sub    esp,0x8
c0022b66:	68 6c b2 02 c0       	push   0xc002b26c
c0022b6b:	50                   	push   eax
c0022b6c:	e8 79 13 ff ff       	call   c0013eea <HardDiskController::HardDiskController(char const*)>
c0022b71:	83 c4 10             	add    esp,0x10
c0022b74:	ba 28 b3 02 c0       	mov    edx,0xc002b328
c0022b79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b7d:	89 10                	mov    DWORD PTR [eax],edx
c0022b7f:	83 ec 0c             	sub    esp,0xc
c0022b82:	6a 50                	push   0x50
c0022b84:	e8 7c d0 fe ff       	call   c000fc05 <Phys::allocateContiguousPages(int)>
c0022b89:	83 c4 10             	add    esp,0x10
c0022b8c:	89 c2                	mov    edx,eax
c0022b8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b92:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0022b98:	83 ec 0c             	sub    esp,0xc
c0022b9b:	6a 50                	push   0x50
c0022b9d:	e8 dd eb fe ff       	call   c001177f <Virt::allocateKernelVirtualPages(int)>
c0022ba2:	83 c4 10             	add    esp,0x10
c0022ba5:	89 c2                	mov    edx,eax
c0022ba7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bab:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022bb1:	e8 59 ed fe ff       	call   c001190f <Virt::getAKernelVAS()>
c0022bb6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022bba:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0022bc0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022bc4:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0022bca:	83 ec 0c             	sub    esp,0xc
c0022bcd:	6a 03                	push   0x3
c0022bcf:	6a 50                	push   0x50
c0022bd1:	51                   	push   ecx
c0022bd2:	52                   	push   edx
c0022bd3:	50                   	push   eax
c0022bd4:	e8 65 f5 fe ff       	call   c001213e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0022bd9:	83 c4 20             	add    esp,0x20
c0022bdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022be0:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0022be6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bea:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0022bf0:	83 ec 04             	sub    esp,0x4
c0022bf3:	52                   	push   edx
c0022bf4:	50                   	push   eax
c0022bf5:	68 90 b2 02 c0       	push   0xc002b290
c0022bfa:	e8 70 fb fe ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c0022bff:	83 c4 10             	add    esp,0x10
c0022c02:	90                   	nop
c0022c03:	83 c4 0c             	add    esp,0xc
c0022c06:	c3                   	ret    
c0022c07:	90                   	nop

c0022c08 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0022c08:	83 ec 0c             	sub    esp,0xc
c0022c0b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022c0f:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0022c12:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0022c15:	09 c2                	or     edx,eax
c0022c17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c1b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0022c21:	8b 08                	mov    ecx,DWORD PTR [eax]
c0022c23:	31 c0                	xor    eax,eax
c0022c25:	c1 e9 08             	shr    ecx,0x8
c0022c28:	83 e1 0f             	and    ecx,0xf
c0022c2b:	39 c8                	cmp    eax,ecx
c0022c2d:	74 0a                	je     c0022c39 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0022c2f:	f6 c2 01             	test   dl,0x1
c0022c32:	74 18                	je     c0022c4c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0022c34:	d1 ea                	shr    edx,1
c0022c36:	40                   	inc    eax
c0022c37:	eb f2                	jmp    c0022c2b <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0022c39:	83 ec 0c             	sub    esp,0xc
c0022c3c:	68 b4 b2 02 c0       	push   0xc002b2b4
c0022c41:	e8 43 6c ff ff       	call   c0019889 <Krnl::panic(char const*)>
c0022c46:	83 c4 10             	add    esp,0x10
c0022c49:	83 c8 ff             	or     eax,0xffffffff
c0022c4c:	83 c4 0c             	add    esp,0xc
c0022c4f:	c3                   	ret    

c0022c50 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0022c50:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022c54:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0022c57:	89 c2                	mov    edx,eax
c0022c59:	c1 ea 08             	shr    edx,0x8
c0022c5c:	83 e2 0f             	and    edx,0xf
c0022c5f:	fe ca                	dec    dl
c0022c61:	75 31                	jne    c0022c94 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0022c63:	83 e0 0f             	and    eax,0xf
c0022c66:	3c 03                	cmp    al,0x3
c0022c68:	75 2a                	jne    c0022c94 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0022c6a:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0022c6d:	b8 02 00 00 00       	mov    eax,0x2
c0022c72:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0022c78:	74 1c                	je     c0022c96 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0022c7a:	b8 04 00 00 00       	mov    eax,0x4
c0022c7f:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0022c85:	74 0f                	je     c0022c96 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0022c87:	31 c0                	xor    eax,eax
c0022c89:	83 fa 03             	cmp    edx,0x3
c0022c8c:	0f 94 c0             	sete   al
c0022c8f:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0022c93:	c3                   	ret    
c0022c94:	31 c0                	xor    eax,eax
c0022c96:	c3                   	ret    
c0022c97:	90                   	nop

c0022c98 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0022c98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022c9c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022c9f:	0f ba e2 0f          	bt     edx,0xf
c0022ca3:	72 f7                	jb     c0022c9c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0022ca5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022ca8:	83 ca 10             	or     edx,0x10
c0022cab:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0022cae:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022cb1:	83 ca 01             	or     edx,0x1
c0022cb4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0022cb7:	c3                   	ret    

c0022cb8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0022cb8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022cbc:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022cbf:	83 e2 fe             	and    edx,0xfffffffe
c0022cc2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0022cc5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022cc8:	83 e2 ef             	and    edx,0xffffffef
c0022ccb:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0022cce:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022cd1:	0f ba e2 0e          	bt     edx,0xe
c0022cd5:	72 f7                	jb     c0022cce <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0022cd7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022cda:	0f ba e2 0f          	bt     edx,0xf
c0022cde:	72 ee                	jb     c0022cce <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0022ce0:	c3                   	ret    
c0022ce1:	90                   	nop

c0022ce2 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0022ce2:	55                   	push   ebp
c0022ce3:	57                   	push   edi
c0022ce4:	56                   	push   esi
c0022ce5:	53                   	push   ebx
c0022ce6:	83 ec 1c             	sub    esp,0x1c
c0022ce9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022ced:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022cf1:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0022cf5:	53                   	push   ebx
c0022cf6:	89 fd                	mov    ebp,edi
c0022cf8:	56                   	push   esi
c0022cf9:	c1 e5 0a             	shl    ebp,0xa
c0022cfc:	e8 b7 ff ff ff       	call   c0022cb8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0022d01:	83 ec 0c             	sub    esp,0xc
c0022d04:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0022d0a:	01 e8                	add    eax,ebp
c0022d0c:	89 03                	mov    DWORD PTR [ebx],eax
c0022d0e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022d10:	68 00 04 00 00       	push   0x400
c0022d15:	6a 00                	push   0x0
c0022d17:	50                   	push   eax
c0022d18:	e8 6e d9 fd ff       	call   c000068b <memset>
c0022d1d:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0022d23:	89 fa                	mov    edx,edi
c0022d25:	01 e8                	add    eax,ebp
c0022d27:	c1 e7 0d             	shl    edi,0xd
c0022d2a:	89 03                	mov    DWORD PTR [ebx],eax
c0022d2c:	c1 e2 08             	shl    edx,0x8
c0022d2f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022d36:	81 c2 00 80 00 00    	add    edx,0x8000
c0022d3c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0022d40:	89 d0                	mov    eax,edx
c0022d42:	83 c4 1c             	add    esp,0x1c
c0022d45:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0022d4b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022d4e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0022d51:	68 00 01 00 00       	push   0x100
c0022d56:	6a 00                	push   0x0
c0022d58:	50                   	push   eax
c0022d59:	e8 2d d9 fd ff       	call   c000068b <memset>
c0022d5e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0022d62:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0022d68:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0022d6e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022d72:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0022d75:	83 c4 10             	add    esp,0x10
c0022d78:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022d7f:	31 ff                	xor    edi,edi
c0022d81:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0022d87:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0022d8d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022d91:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0022d97:	83 c5 20             	add    ebp,0x20
c0022d9a:	01 f8                	add    eax,edi
c0022d9c:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0022d9f:	52                   	push   edx
c0022da0:	68 00 01 00 00       	push   0x100
c0022da5:	6a 00                	push   0x0
c0022da7:	50                   	push   eax
c0022da8:	e8 de d8 fd ff       	call   c000068b <memset>
c0022dad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022db1:	83 c4 10             	add    esp,0x10
c0022db4:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0022dba:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0022dc1:	01 f8                	add    eax,edi
c0022dc3:	81 c7 00 01 00 00    	add    edi,0x100
c0022dc9:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0022dcc:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0022dd2:	75 b3                	jne    c0022d87 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0022dd4:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0022dd8:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0022ddc:	83 c4 1c             	add    esp,0x1c
c0022ddf:	5b                   	pop    ebx
c0022de0:	5e                   	pop    esi
c0022de1:	5f                   	pop    edi
c0022de2:	5d                   	pop    ebp
c0022de3:	e9 b0 fe ff ff       	jmp    c0022c98 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0022de8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0022de8:	55                   	push   ebp
c0022de9:	57                   	push   edi
c0022dea:	56                   	push   esi
c0022deb:	53                   	push   ebx
c0022dec:	31 db                	xor    ebx,ebx
c0022dee:	83 ec 0c             	sub    esp,0xc
c0022df1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0022df5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0022df9:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0022dfc:	f7 c7 01 00 00 00    	test   edi,0x1
c0022e02:	0f 84 94 00 00 00    	je     c0022e9c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb4>
c0022e08:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022e0c:	89 d8                	mov    eax,ebx
c0022e0e:	c1 e0 07             	shl    eax,0x7
c0022e11:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0022e18:	55                   	push   ebp
c0022e19:	56                   	push   esi
c0022e1a:	e8 31 fe ff ff       	call   c0022c50 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0022e1f:	59                   	pop    ecx
c0022e20:	83 f8 01             	cmp    eax,0x1
c0022e23:	5a                   	pop    edx
c0022e24:	75 47                	jne    c0022e6d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x85>
c0022e26:	51                   	push   ecx
c0022e27:	51                   	push   ecx
c0022e28:	53                   	push   ebx
c0022e29:	68 d9 b2 02 c0       	push   0xc002b2d9
c0022e2e:	e8 3c f9 fe ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c0022e33:	83 c4 0c             	add    esp,0xc
c0022e36:	53                   	push   ebx
c0022e37:	55                   	push   ebp
c0022e38:	56                   	push   esi
c0022e39:	e8 a4 fe ff ff       	call   c0022ce2 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0022e3e:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0022e45:	e8 8a c6 fe ff       	call   c000f4d4 <malloc>
c0022e4a:	89 04 24             	mov    DWORD PTR [esp],eax
c0022e4d:	89 c5                	mov    ebp,eax
c0022e4f:	e8 de 0c 00 00       	call   c0023b32 <SATA::SATA()>
c0022e54:	58                   	pop    eax
c0022e55:	5a                   	pop    edx
c0022e56:	55                   	push   ebp
c0022e57:	56                   	push   esi
c0022e58:	e8 01 0d ff ff       	call   c0013b5e <Device::addChild(Device*)>
c0022e5d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022e60:	56                   	push   esi
c0022e61:	6a 00                	push   0x0
c0022e63:	53                   	push   ebx
c0022e64:	55                   	push   ebp
c0022e65:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0022e68:	83 c4 20             	add    esp,0x20
c0022e6b:	eb 2f                	jmp    c0022e9c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb4>
c0022e6d:	83 f8 04             	cmp    eax,0x4
c0022e70:	75 1a                	jne    c0022e8c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa4>
c0022e72:	52                   	push   edx
c0022e73:	52                   	push   edx
c0022e74:	53                   	push   ebx
c0022e75:	68 f0 b2 02 c0       	push   0xc002b2f0
c0022e7a:	e8 f0 f8 fe ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c0022e7f:	83 c4 0c             	add    esp,0xc
c0022e82:	53                   	push   ebx
c0022e83:	55                   	push   ebp
c0022e84:	56                   	push   esi
c0022e85:	e8 58 fe ff ff       	call   c0022ce2 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0022e8a:	eb 0d                	jmp    c0022e99 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb1>
c0022e8c:	50                   	push   eax
c0022e8d:	50                   	push   eax
c0022e8e:	53                   	push   ebx
c0022e8f:	68 09 b3 02 c0       	push   0xc002b309
c0022e94:	e8 d6 f8 fe ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c0022e99:	83 c4 10             	add    esp,0x10
c0022e9c:	d1 ef                	shr    edi,1
c0022e9e:	43                   	inc    ebx
c0022e9f:	83 fb 20             	cmp    ebx,0x20
c0022ea2:	0f 85 54 ff ff ff    	jne    c0022dfc <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0022ea8:	83 c4 0c             	add    esp,0xc
c0022eab:	5b                   	pop    ebx
c0022eac:	5e                   	pop    esi
c0022ead:	5f                   	pop    edi
c0022eae:	5d                   	pop    ebp
c0022eaf:	c3                   	ret    

c0022eb0 <SATABus::open(int, int, void*)>:
c0022eb0:	83 ec 14             	sub    esp,0x14
c0022eb3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022eb7:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0022ebd:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0022ec3:	52                   	push   edx
c0022ec4:	50                   	push   eax
c0022ec5:	e8 1e ff ff ff       	call   c0022de8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0022eca:	31 c0                	xor    eax,eax
c0022ecc:	83 c4 1c             	add    esp,0x1c
c0022ecf:	c3                   	ret    

c0022ed0 <ATA::close(int, int, void*)>:
c0022ed0:	83 ec 0c             	sub    esp,0xc
c0022ed3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ed7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0022edd:	85 c0                	test   eax,eax
c0022edf:	74 0c                	je     c0022eed <ATA::close(int, int, void*)+0x1d>
c0022ee1:	83 ec 0c             	sub    esp,0xc
c0022ee4:	8b 10                	mov    edx,DWORD PTR [eax]
c0022ee6:	50                   	push   eax
c0022ee7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0022eea:	83 c4 10             	add    esp,0x10
c0022eed:	31 c0                	xor    eax,eax
c0022eef:	83 c4 0c             	add    esp,0xc
c0022ef2:	c3                   	ret    
c0022ef3:	90                   	nop

c0022ef4 <ATA::powerSaving(PowerSavingLevel)>:
c0022ef4:	c3                   	ret    
c0022ef5:	90                   	nop

c0022ef6 <ATA::ATA()>:
c0022ef6:	83 ec 0c             	sub    esp,0xc
c0022ef9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022efd:	83 ec 04             	sub    esp,0x4
c0022f00:	68 00 02 00 00       	push   0x200
c0022f05:	68 1c b4 02 c0       	push   0xc002b41c
c0022f0a:	50                   	push   eax
c0022f0b:	e8 5e 10 ff ff       	call   c0013f6e <PhysicalDisk::PhysicalDisk(char const*, int)>
c0022f10:	83 c4 10             	add    esp,0x10
c0022f13:	ba 68 b3 02 c0       	mov    edx,0xc002b368
c0022f18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f1c:	89 10                	mov    DWORD PTR [eax],edx
c0022f1e:	90                   	nop
c0022f1f:	83 c4 0c             	add    esp,0xc
c0022f22:	c3                   	ret    
c0022f23:	90                   	nop

c0022f24 <ATA::flush(bool)>:
c0022f24:	53                   	push   ebx
c0022f25:	83 ec 08             	sub    esp,0x8
c0022f28:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0022f2d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022f31:	19 c0                	sbb    eax,eax
c0022f33:	83 e0 fd             	and    eax,0xfffffffd
c0022f36:	05 ea 00 00 00       	add    eax,0xea
c0022f3b:	50                   	push   eax
c0022f3c:	6a 07                	push   0x7
c0022f3e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022f45:	50                   	push   eax
c0022f46:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022f4c:	e8 f3 ef ff ff       	call   c0021f44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022f51:	83 c4 0c             	add    esp,0xc
c0022f54:	6a 00                	push   0x0
c0022f56:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022f5d:	50                   	push   eax
c0022f5e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022f64:	e8 87 fb ff ff       	call   c0022af0 <IDE::polling(unsigned char, unsigned int)>
c0022f69:	83 c4 18             	add    esp,0x18
c0022f6c:	5b                   	pop    ebx
c0022f6d:	c3                   	ret    

c0022f6e <ATA::readyForCommand()>:
c0022f6e:	56                   	push   esi
c0022f6f:	53                   	push   ebx
c0022f70:	31 db                	xor    ebx,ebx
c0022f72:	50                   	push   eax
c0022f73:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022f77:	50                   	push   eax
c0022f78:	6a 0c                	push   0xc
c0022f7a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0022f81:	50                   	push   eax
c0022f82:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0022f88:	e8 77 f0 ff ff       	call   c0022004 <IDE::read(unsigned char, unsigned char)>
c0022f8d:	83 c4 10             	add    esp,0x10
c0022f90:	a8 88                	test   al,0x88
c0022f92:	74 23                	je     c0022fb7 <ATA::readyForCommand()+0x49>
c0022f94:	43                   	inc    ebx
c0022f95:	83 fb 63             	cmp    ebx,0x63
c0022f98:	7e dd                	jle    c0022f77 <ATA::readyForCommand()+0x9>
c0022f9a:	51                   	push   ecx
c0022f9b:	51                   	push   ecx
c0022f9c:	6a 00                	push   0x0
c0022f9e:	68 40 42 0f 00       	push   0xf4240
c0022fa3:	e8 c0 a2 ff ff       	call   c001d268 <nanoSleep(unsigned long long)>
c0022fa8:	83 c4 10             	add    esp,0x10
c0022fab:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0022fb1:	75 c4                	jne    c0022f77 <ATA::readyForCommand()+0x9>
c0022fb3:	31 c0                	xor    eax,eax
c0022fb5:	eb 02                	jmp    c0022fb9 <ATA::readyForCommand()+0x4b>
c0022fb7:	b0 01                	mov    al,0x1
c0022fb9:	5a                   	pop    edx
c0022fba:	5b                   	pop    ebx
c0022fbb:	5e                   	pop    esi
c0022fbc:	c3                   	ret    
c0022fbd:	90                   	nop

c0022fbe <ATA::access(unsigned long long, int, void*, bool)>:
c0022fbe:	55                   	push   ebp
c0022fbf:	57                   	push   edi
c0022fc0:	56                   	push   esi
c0022fc1:	53                   	push   ebx
c0022fc2:	83 ec 2c             	sub    esp,0x2c
c0022fc5:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0022fc9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0022fcd:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0022fd1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022fd5:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0022fd9:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0022fdd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0022fe1:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0022fe7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022feb:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0022ff1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022ff5:	c1 e0 06             	shl    eax,0x6
c0022ff8:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0023000:	74 5d                	je     c002305f <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0023002:	89 fa                	mov    edx,edi
c0023004:	89 f0                	mov    eax,esi
c0023006:	0f ac d0 1c          	shrd   eax,edx,0x1c
c002300a:	c1 ea 1c             	shr    edx,0x1c
c002300d:	89 d1                	mov    ecx,edx
c002300f:	09 c1                	or     ecx,eax
c0023011:	74 25                	je     c0023038 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0023013:	31 ed                	xor    ebp,ebp
c0023015:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c002301c:	89 fa                	mov    edx,edi
c002301e:	89 f0                	mov    eax,esi
c0023020:	0f ad d0             	shrd   eax,edx,cl
c0023023:	d3 ea                	shr    edx,cl
c0023025:	f6 c1 20             	test   cl,0x20
c0023028:	74 02                	je     c002302c <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c002302a:	89 d0                	mov    eax,edx
c002302c:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0023030:	45                   	inc    ebp
c0023031:	83 fd 06             	cmp    ebp,0x6
c0023034:	75 df                	jne    c0023015 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0023036:	eb 76                	jmp    c00230ae <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0023038:	89 f0                	mov    eax,esi
c002303a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c002303f:	89 fa                	mov    edx,edi
c0023041:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023048:	0f ac d0 10          	shrd   eax,edx,0x10
c002304c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023051:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0023055:	c1 ee 18             	shr    esi,0x18
c0023058:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c002305d:	eb 56                	jmp    c00230b5 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c002305f:	6a 00                	push   0x0
c0023061:	6a 3f                	push   0x3f
c0023063:	57                   	push   edi
c0023064:	56                   	push   esi
c0023065:	e8 32 24 00 00       	call   c002549c <__umoddi3>
c002306a:	83 c4 10             	add    esp,0x10
c002306d:	40                   	inc    eax
c002306e:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0023072:	6a 00                	push   0x0
c0023074:	68 f0 03 00 00       	push   0x3f0
c0023079:	57                   	push   edi
c002307a:	56                   	push   esi
c002307b:	e8 1c 23 00 00       	call   c002539c <__udivdi3>
c0023080:	83 c4 10             	add    esp,0x10
c0023083:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0023088:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002308f:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023094:	6a 00                	push   0x0
c0023096:	6a 3f                	push   0x3f
c0023098:	57                   	push   edi
c0023099:	56                   	push   esi
c002309a:	e8 fd 22 00 00       	call   c002539c <__udivdi3>
c002309f:	83 c4 10             	add    esp,0x10
c00230a2:	89 c6                	mov    esi,eax
c00230a4:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c00230a9:	83 e6 0f             	and    esi,0xf
c00230ac:	eb 07                	jmp    c00230b5 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00230ae:	31 f6                	xor    esi,esi
c00230b0:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c00230b5:	bf 01 00 00 00       	mov    edi,0x1
c00230ba:	50                   	push   eax
c00230bb:	6a 00                	push   0x0
c00230bd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00230c4:	50                   	push   eax
c00230c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00230c9:	e8 82 f0 ff ff       	call   c0022150 <IDE::enableIRQs(unsigned char, bool)>
c00230ce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00230d1:	e8 98 fe ff ff       	call   c0022f6e <ATA::readyForCommand()>
c00230d6:	83 c4 10             	add    esp,0x10
c00230d9:	84 c0                	test   al,al
c00230db:	0f 84 50 02 00 00    	je     c0023331 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c00230e1:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00230e7:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00230ed:	c1 e0 04             	shl    eax,0x4
c00230f0:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c00230f7:	09 c6                	or     esi,eax
c00230f9:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c00230fe:	75 05                	jne    c0023105 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0023100:	83 ce a0             	or     esi,0xffffffa0
c0023103:	eb 03                	jmp    c0023108 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0023105:	83 ce e0             	or     esi,0xffffffe0
c0023108:	89 f0                	mov    eax,esi
c002310a:	0f b6 f0             	movzx  esi,al
c002310d:	56                   	push   esi
c002310e:	6a 06                	push   0x6
c0023110:	51                   	push   ecx
c0023111:	52                   	push   edx
c0023112:	e8 2d ee ff ff       	call   c0021f44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023117:	83 c4 10             	add    esp,0x10
c002311a:	6a 00                	push   0x0
c002311c:	6a 01                	push   0x1
c002311e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023125:	50                   	push   eax
c0023126:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002312c:	e8 13 ee ff ff       	call   c0021f44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023131:	83 c4 10             	add    esp,0x10
c0023134:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0023139:	75 6e                	jne    c00231a9 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c002313b:	6a 00                	push   0x0
c002313d:	6a 08                	push   0x8
c002313f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023146:	50                   	push   eax
c0023147:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002314d:	e8 f2 ed ff ff       	call   c0021f44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023152:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0023157:	50                   	push   eax
c0023158:	6a 09                	push   0x9
c002315a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023161:	50                   	push   eax
c0023162:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023168:	e8 d7 ed ff ff       	call   c0021f44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002316d:	83 c4 20             	add    esp,0x20
c0023170:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0023175:	50                   	push   eax
c0023176:	6a 0a                	push   0xa
c0023178:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002317f:	50                   	push   eax
c0023180:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023186:	e8 b9 ed ff ff       	call   c0021f44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002318b:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0023190:	50                   	push   eax
c0023191:	6a 0b                	push   0xb
c0023193:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002319a:	50                   	push   eax
c002319b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00231a1:	e8 9e ed ff ff       	call   c0021f44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00231a6:	83 c4 20             	add    esp,0x20
c00231a9:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c00231ae:	50                   	push   eax
c00231af:	6a 02                	push   0x2
c00231b1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00231b8:	50                   	push   eax
c00231b9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00231bf:	e8 80 ed ff ff       	call   c0021f44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00231c4:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c00231c9:	50                   	push   eax
c00231ca:	6a 03                	push   0x3
c00231cc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00231d3:	50                   	push   eax
c00231d4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00231da:	e8 65 ed ff ff       	call   c0021f44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00231df:	83 c4 20             	add    esp,0x20
c00231e2:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00231e7:	50                   	push   eax
c00231e8:	6a 04                	push   0x4
c00231ea:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00231f1:	50                   	push   eax
c00231f2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00231f8:	e8 47 ed ff ff       	call   c0021f44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00231fd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023202:	50                   	push   eax
c0023203:	6a 05                	push   0x5
c0023205:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002320c:	50                   	push   eax
c002320d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023213:	e8 2c ed ff ff       	call   c0021f44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023218:	83 c4 20             	add    esp,0x20
c002321b:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0023220:	0f 94 c0             	sete   al
c0023223:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0023228:	74 09                	je     c0023233 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c002322a:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0023231:	eb 07                	jmp    c002323a <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0023233:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c002323a:	0f b6 c0             	movzx  eax,al
c002323d:	50                   	push   eax
c002323e:	6a 07                	push   0x7
c0023240:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023247:	50                   	push   eax
c0023248:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002324e:	e8 f1 ec ff ff       	call   c0021f44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023253:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0023257:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c002325b:	83 c4 10             	add    esp,0x10
c002325e:	85 f6                	test   esi,esi
c0023260:	0f 84 ac 00 00 00    	je     c0023312 <ATA::access(unsigned long long, int, void*, bool)+0x354>
c0023266:	50                   	push   eax
c0023267:	6a 01                	push   0x1
c0023269:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023270:	50                   	push   eax
c0023271:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023277:	e8 74 f8 ff ff       	call   c0022af0 <IDE::polling(unsigned char, unsigned int)>
c002327c:	83 c4 10             	add    esp,0x10
c002327f:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0023285:	84 c0                	test   al,al
c0023287:	74 20                	je     c00232a9 <ATA::access(unsigned long long, int, void*, bool)+0x2eb>
c0023289:	0f b6 f8             	movzx  edi,al
c002328c:	0f b6 d2             	movzx  edx,dl
c002328f:	57                   	push   edi
c0023290:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0023297:	50                   	push   eax
c0023298:	52                   	push   edx
c0023299:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002329f:	e8 b6 f6 ff ff       	call   c002295a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00232a4:	e9 85 00 00 00       	jmp    c002332e <ATA::access(unsigned long long, int, void*, bool)+0x370>
c00232a9:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00232ae:	74 41                	je     c00232f1 <ATA::access(unsigned long long, int, void*, bool)+0x333>
c00232b0:	31 c9                	xor    ecx,ecx
c00232b2:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c00232b6:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00232ba:	50                   	push   eax
c00232bb:	50                   	push   eax
c00232bc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00232c3:	50                   	push   eax
c00232c4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00232ca:	e8 63 ec ff ff       	call   c0021f32 <IDE::getBase(unsigned char)>
c00232cf:	89 c2                	mov    edx,eax
c00232d1:	89 e8                	mov    eax,ebp
c00232d3:	66 ef                	out    dx,ax
c00232d5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00232d9:	83 c4 10             	add    esp,0x10
c00232dc:	41                   	inc    ecx
c00232dd:	81 f9 00 01 00 00    	cmp    ecx,0x100
c00232e3:	75 cd                	jne    c00232b2 <ATA::access(unsigned long long, int, void*, bool)+0x2f4>
c00232e5:	4e                   	dec    esi
c00232e6:	81 c7 00 02 00 00    	add    edi,0x200
c00232ec:	e9 6d ff ff ff       	jmp    c002325e <ATA::access(unsigned long long, int, void*, bool)+0x2a0>
c00232f1:	0f b6 d2             	movzx  edx,dl
c00232f4:	51                   	push   ecx
c00232f5:	51                   	push   ecx
c00232f6:	52                   	push   edx
c00232f7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00232fd:	e8 30 ec ff ff       	call   c0021f32 <IDE::getBase(unsigned char)>
c0023302:	b9 00 01 00 00       	mov    ecx,0x100
c0023307:	89 c2                	mov    edx,eax
c0023309:	fc                   	cld    
c002330a:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c002330d:	83 c4 10             	add    esp,0x10
c0023310:	eb d3                	jmp    c00232e5 <ATA::access(unsigned long long, int, void*, bool)+0x327>
c0023312:	31 ff                	xor    edi,edi
c0023314:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0023319:	74 16                	je     c0023331 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c002331b:	50                   	push   eax
c002331c:	50                   	push   eax
c002331d:	31 c0                	xor    eax,eax
c002331f:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0023324:	0f 94 c0             	sete   al
c0023327:	50                   	push   eax
c0023328:	53                   	push   ebx
c0023329:	e8 f6 fb ff ff       	call   c0022f24 <ATA::flush(bool)>
c002332e:	83 c4 10             	add    esp,0x10
c0023331:	83 c4 2c             	add    esp,0x2c
c0023334:	89 f8                	mov    eax,edi
c0023336:	5b                   	pop    ebx
c0023337:	5e                   	pop    esi
c0023338:	5f                   	pop    edi
c0023339:	5d                   	pop    ebp
c002333a:	c3                   	ret    
c002333b:	90                   	nop

c002333c <ATA::read(unsigned long long, int, void*)>:
c002333c:	57                   	push   edi
c002333d:	b8 04 00 00 00       	mov    eax,0x4
c0023342:	56                   	push   esi
c0023343:	53                   	push   ebx
c0023344:	83 ec 10             	sub    esp,0x10
c0023347:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002334b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002334f:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0023352:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0023356:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002335a:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0023360:	77 3b                	ja     c002339d <ATA::read(unsigned long long, int, void*)+0x61>
c0023362:	b8 06 00 00 00       	mov    eax,0x6
c0023367:	85 d2                	test   edx,edx
c0023369:	74 32                	je     c002339d <ATA::read(unsigned long long, int, void*)+0x61>
c002336b:	50                   	push   eax
c002336c:	50                   	push   eax
c002336d:	6a 00                	push   0x0
c002336f:	52                   	push   edx
c0023370:	53                   	push   ebx
c0023371:	57                   	push   edi
c0023372:	56                   	push   esi
c0023373:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023377:	e8 42 fc ff ff       	call   c0022fbe <ATA::access(unsigned long long, int, void*, bool)>
c002337c:	83 c4 20             	add    esp,0x20
c002337f:	85 c0                	test   eax,eax
c0023381:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023385:	75 11                	jne    c0023398 <ATA::read(unsigned long long, int, void*)+0x5c>
c0023387:	01 1d 88 ec 02 c0    	add    DWORD PTR ds:0xc002ec88,ebx
c002338d:	e8 42 d2 fe ff       	call   c00105d4 <VgaText::updateDiskUsage()>
c0023392:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023396:	eb 05                	jmp    c002339d <ATA::read(unsigned long long, int, void*)+0x61>
c0023398:	b8 01 00 00 00       	mov    eax,0x1
c002339d:	83 c4 10             	add    esp,0x10
c00233a0:	5b                   	pop    ebx
c00233a1:	5e                   	pop    esi
c00233a2:	5f                   	pop    edi
c00233a3:	c3                   	ret    

c00233a4 <ATA::write(unsigned long long, int, void*)>:
c00233a4:	57                   	push   edi
c00233a5:	b8 04 00 00 00       	mov    eax,0x4
c00233aa:	56                   	push   esi
c00233ab:	53                   	push   ebx
c00233ac:	83 ec 10             	sub    esp,0x10
c00233af:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00233b3:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00233b7:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00233ba:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00233be:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00233c2:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00233c8:	77 3b                	ja     c0023405 <ATA::write(unsigned long long, int, void*)+0x61>
c00233ca:	b8 06 00 00 00       	mov    eax,0x6
c00233cf:	85 d2                	test   edx,edx
c00233d1:	74 32                	je     c0023405 <ATA::write(unsigned long long, int, void*)+0x61>
c00233d3:	50                   	push   eax
c00233d4:	50                   	push   eax
c00233d5:	6a 01                	push   0x1
c00233d7:	52                   	push   edx
c00233d8:	53                   	push   ebx
c00233d9:	57                   	push   edi
c00233da:	56                   	push   esi
c00233db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00233df:	e8 da fb ff ff       	call   c0022fbe <ATA::access(unsigned long long, int, void*, bool)>
c00233e4:	83 c4 20             	add    esp,0x20
c00233e7:	85 c0                	test   eax,eax
c00233e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00233ed:	75 11                	jne    c0023400 <ATA::write(unsigned long long, int, void*)+0x5c>
c00233ef:	01 1d 84 ec 02 c0    	add    DWORD PTR ds:0xc002ec84,ebx
c00233f5:	e8 da d1 fe ff       	call   c00105d4 <VgaText::updateDiskUsage()>
c00233fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00233fe:	eb 05                	jmp    c0023405 <ATA::write(unsigned long long, int, void*)+0x61>
c0023400:	b8 01 00 00 00       	mov    eax,0x1
c0023405:	83 c4 10             	add    esp,0x10
c0023408:	5b                   	pop    ebx
c0023409:	5e                   	pop    esi
c002340a:	5f                   	pop    edi
c002340b:	c3                   	ret    

c002340c <ATA::detectCHS()>:
c002340c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023410:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0023416:	c1 e0 06             	shl    eax,0x6
c0023419:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c002341f:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0023429:	c7 44 24 04 4c b3 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b34c
c0023431:	e9 53 64 ff ff       	jmp    c0019889 <Krnl::panic(char const*)>

c0023436 <ATA::open(int, int, void*)>:
c0023436:	53                   	push   ebx
c0023437:	83 ec 08             	sub    esp,0x8
c002343a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002343e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023442:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023446:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002344c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0023452:	c1 e0 06             	shl    eax,0x6
c0023455:	01 d0                	add    eax,edx
c0023457:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c002345e:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0023464:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c002346b:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0023475:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c002347b:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0023482:	75 0c                	jne    c0023490 <ATA::open(int, int, void*)+0x5a>
c0023484:	83 ec 0c             	sub    esp,0xc
c0023487:	53                   	push   ebx
c0023488:	e8 7f ff ff ff       	call   c002340c <ATA::detectCHS()>
c002348d:	83 c4 10             	add    esp,0x10
c0023490:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0023496:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002349c:	c1 e0 06             	shl    eax,0x6
c002349f:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c00234a6:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00234b0:	d1 e8                	shr    eax,1
c00234b2:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c00234b8:	6a 04                	push   0x4
c00234ba:	6a 0c                	push   0xc
c00234bc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00234c3:	50                   	push   eax
c00234c4:	52                   	push   edx
c00234c5:	e8 7a ea ff ff       	call   c0021f44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00234ca:	90                   	nop
c00234cb:	90                   	nop
c00234cc:	6a 00                	push   0x0
c00234ce:	6a 0c                	push   0xc
c00234d0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00234d7:	50                   	push   eax
c00234d8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00234de:	e8 61 ea ff ff       	call   c0021f44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00234e3:	83 c4 14             	add    esp,0x14
c00234e6:	53                   	push   ebx
c00234e7:	e8 ea 0a ff ff       	call   c0013fd6 <PhysicalDisk::startCache()>
c00234ec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00234ef:	e8 0c 2b ff ff       	call   c0016000 <createPartitionsForDisk(PhysicalDisk*)>
c00234f4:	31 c0                	xor    eax,eax
c00234f6:	83 c4 18             	add    esp,0x18
c00234f9:	5b                   	pop    ebx
c00234fa:	c3                   	ret    
c00234fb:	90                   	nop

c00234fc <ATAPI::write(unsigned long long, int, void*)>:
c00234fc:	b8 03 00 00 00       	mov    eax,0x3
c0023501:	c3                   	ret    

c0023502 <ATAPI::close(int, int, void*)>:
c0023502:	83 ec 0c             	sub    esp,0xc
c0023505:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023509:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002350f:	85 c0                	test   eax,eax
c0023511:	74 0c                	je     c002351f <ATAPI::close(int, int, void*)+0x1d>
c0023513:	83 ec 0c             	sub    esp,0xc
c0023516:	8b 10                	mov    edx,DWORD PTR [eax]
c0023518:	50                   	push   eax
c0023519:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002351c:	83 c4 10             	add    esp,0x10
c002351f:	31 c0                	xor    eax,eax
c0023521:	83 c4 0c             	add    esp,0xc
c0023524:	c3                   	ret    
c0023525:	90                   	nop

c0023526 <ATAPI::ATAPI()>:
c0023526:	83 ec 0c             	sub    esp,0xc
c0023529:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002352d:	83 ec 04             	sub    esp,0x4
c0023530:	68 00 08 00 00       	push   0x800
c0023535:	68 94 b3 02 c0       	push   0xc002b394
c002353a:	50                   	push   eax
c002353b:	e8 2e 0a ff ff       	call   c0013f6e <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023540:	83 c4 10             	add    esp,0x10
c0023543:	ba d4 b3 02 c0       	mov    edx,0xc002b3d4
c0023548:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002354c:	89 10                	mov    DWORD PTR [eax],edx
c002354e:	90                   	nop
c002354f:	83 c4 0c             	add    esp,0xc
c0023552:	c3                   	ret    
c0023553:	90                   	nop

c0023554 <ATAPI::readyForCommand()>:
c0023554:	56                   	push   esi
c0023555:	53                   	push   ebx
c0023556:	31 db                	xor    ebx,ebx
c0023558:	50                   	push   eax
c0023559:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002355d:	50                   	push   eax
c002355e:	6a 0c                	push   0xc
c0023560:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0023567:	50                   	push   eax
c0023568:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002356e:	e8 91 ea ff ff       	call   c0022004 <IDE::read(unsigned char, unsigned char)>
c0023573:	83 c4 10             	add    esp,0x10
c0023576:	a8 88                	test   al,0x88
c0023578:	74 23                	je     c002359d <ATAPI::readyForCommand()+0x49>
c002357a:	43                   	inc    ebx
c002357b:	83 fb 63             	cmp    ebx,0x63
c002357e:	7e dd                	jle    c002355d <ATAPI::readyForCommand()+0x9>
c0023580:	51                   	push   ecx
c0023581:	51                   	push   ecx
c0023582:	6a 00                	push   0x0
c0023584:	68 40 42 0f 00       	push   0xf4240
c0023589:	e8 da 9c ff ff       	call   c001d268 <nanoSleep(unsigned long long)>
c002358e:	83 c4 10             	add    esp,0x10
c0023591:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0023597:	75 c4                	jne    c002355d <ATAPI::readyForCommand()+0x9>
c0023599:	31 c0                	xor    eax,eax
c002359b:	eb 02                	jmp    c002359f <ATAPI::readyForCommand()+0x4b>
c002359d:	b0 01                	mov    al,0x1
c002359f:	5a                   	pop    edx
c00235a0:	5b                   	pop    ebx
c00235a1:	5e                   	pop    esi
c00235a2:	c3                   	ret    
c00235a3:	90                   	nop

c00235a4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c00235a4:	55                   	push   ebp
c00235a5:	57                   	push   edi
c00235a6:	56                   	push   esi
c00235a7:	53                   	push   ebx
c00235a8:	83 ec 20             	sub    esp,0x20
c00235ab:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00235af:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00235b3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00235b7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00235bb:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00235bf:	6a 01                	push   0x1
c00235c1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00235c8:	50                   	push   eax
c00235c9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00235cf:	e8 7c eb ff ff       	call   c0022150 <IDE::enableIRQs(unsigned char, bool)>
c00235d4:	5e                   	pop    esi
c00235d5:	58                   	pop    eax
c00235d6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00235dd:	50                   	push   eax
c00235de:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00235e4:	e8 35 e9 ff ff       	call   c0021f1e <IDE::prepareInterrupt(unsigned char)>
c00235e9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00235ec:	e8 63 ff ff ff       	call   c0023554 <ATAPI::readyForCommand()>
c00235f1:	83 c4 10             	add    esp,0x10
c00235f4:	84 c0                	test   al,al
c00235f6:	75 0a                	jne    c0023602 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c00235f8:	bb 01 00 00 00       	mov    ebx,0x1
c00235fd:	e9 57 02 00 00       	jmp    c0023859 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0023602:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0023608:	c1 e0 04             	shl    eax,0x4
c002360b:	0f b6 c0             	movzx  eax,al
c002360e:	50                   	push   eax
c002360f:	6a 06                	push   0x6
c0023611:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023618:	50                   	push   eax
c0023619:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002361f:	e8 20 e9 ff ff       	call   c0021f44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023624:	6a 00                	push   0x0
c0023626:	6a 01                	push   0x1
c0023628:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002362f:	50                   	push   eax
c0023630:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023636:	e8 09 e9 ff ff       	call   c0021f44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002363b:	83 c4 20             	add    esp,0x20
c002363e:	0f b6 c3             	movzx  eax,bl
c0023641:	0f b6 df             	movzx  ebx,bh
c0023644:	50                   	push   eax
c0023645:	6a 04                	push   0x4
c0023647:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002364e:	50                   	push   eax
c002364f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023655:	e8 ea e8 ff ff       	call   c0021f44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002365a:	53                   	push   ebx
c002365b:	6a 05                	push   0x5
c002365d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023664:	50                   	push   eax
c0023665:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002366b:	e8 d4 e8 ff ff       	call   c0021f44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023670:	83 c4 20             	add    esp,0x20
c0023673:	68 a0 00 00 00       	push   0xa0
c0023678:	6a 07                	push   0x7
c002367a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023681:	50                   	push   eax
c0023682:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023688:	e8 b7 e8 ff ff       	call   c0021f44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002368d:	83 c4 0c             	add    esp,0xc
c0023690:	6a 01                	push   0x1
c0023692:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023699:	50                   	push   eax
c002369a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00236a0:	e8 4b f4 ff ff       	call   c0022af0 <IDE::polling(unsigned char, unsigned int)>
c00236a5:	83 c4 10             	add    esp,0x10
c00236a8:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c00236ae:	84 c0                	test   al,al
c00236b0:	74 23                	je     c00236d5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c00236b2:	0f b6 d8             	movzx  ebx,al
c00236b5:	0f b6 d2             	movzx  edx,dl
c00236b8:	53                   	push   ebx
c00236b9:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c00236c0:	50                   	push   eax
c00236c1:	52                   	push   edx
c00236c2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00236c8:	e8 8d f2 ff ff       	call   c002295a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00236cd:	83 c4 10             	add    esp,0x10
c00236d0:	e9 84 01 00 00       	jmp    c0023859 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00236d5:	0f b6 d2             	movzx  edx,dl
c00236d8:	53                   	push   ebx
c00236d9:	53                   	push   ebx
c00236da:	52                   	push   edx
c00236db:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00236e1:	e8 4c e8 ff ff       	call   c0021f32 <IDE::getBase(unsigned char)>
c00236e6:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00236ea:	b9 06 00 00 00       	mov    ecx,0x6
c00236ef:	89 c2                	mov    edx,eax
c00236f1:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c00236f4:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00236f8:	83 c4 10             	add    esp,0x10
c00236fb:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0023701:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0023708:	85 db                	test   ebx,ebx
c002370a:	0f 84 ec 00 00 00    	je     c00237fc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0023710:	51                   	push   ecx
c0023711:	51                   	push   ecx
c0023712:	52                   	push   edx
c0023713:	50                   	push   eax
c0023714:	e8 99 e9 ff ff       	call   c00220b2 <IDE::waitInterrupt(unsigned char)>
c0023719:	83 c4 10             	add    esp,0x10
c002371c:	84 c0                	test   al,al
c002371e:	0f 84 d4 fe ff ff    	je     c00235f8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0023724:	56                   	push   esi
c0023725:	56                   	push   esi
c0023726:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002372d:	50                   	push   eax
c002372e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023734:	e8 e5 e7 ff ff       	call   c0021f1e <IDE::prepareInterrupt(unsigned char)>
c0023739:	83 c4 0c             	add    esp,0xc
c002373c:	6a 04                	push   0x4
c002373e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023745:	50                   	push   eax
c0023746:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002374c:	e8 b3 e8 ff ff       	call   c0022004 <IDE::read(unsigned char, unsigned char)>
c0023751:	83 c4 0c             	add    esp,0xc
c0023754:	89 c6                	mov    esi,eax
c0023756:	6a 05                	push   0x5
c0023758:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002375f:	50                   	push   eax
c0023760:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023766:	e8 99 e8 ff ff       	call   c0022004 <IDE::read(unsigned char, unsigned char)>
c002376b:	89 f1                	mov    ecx,esi
c002376d:	0f b6 c0             	movzx  eax,al
c0023770:	0f b6 f1             	movzx  esi,cl
c0023773:	c1 e0 08             	shl    eax,0x8
c0023776:	09 c6                	or     esi,eax
c0023778:	d1 fe                	sar    esi,1
c002377a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c002377e:	83 c4 10             	add    esp,0x10
c0023781:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0023786:	74 41                	je     c00237c9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0023788:	31 c9                	xor    ecx,ecx
c002378a:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0023790:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0023797:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c002379b:	75 0a                	jne    c00237a7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c002379d:	01 c9                	add    ecx,ecx
c002379f:	01 cd                	add    ebp,ecx
c00237a1:	4b                   	dec    ebx
c00237a2:	e9 54 ff ff ff       	jmp    c00236fb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c00237a7:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c00237ac:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00237b0:	51                   	push   ecx
c00237b1:	51                   	push   ecx
c00237b2:	52                   	push   edx
c00237b3:	50                   	push   eax
c00237b4:	e8 79 e7 ff ff       	call   c0021f32 <IDE::getBase(unsigned char)>
c00237b9:	89 c2                	mov    edx,eax
c00237bb:	89 f0                	mov    eax,esi
c00237bd:	66 ef                	out    dx,ax
c00237bf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00237c3:	83 c4 10             	add    esp,0x10
c00237c6:	41                   	inc    ecx
c00237c7:	eb c1                	jmp    c002378a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c00237c9:	31 f6                	xor    esi,esi
c00237cb:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00237d1:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00237d8:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c00237dc:	75 06                	jne    c00237e4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c00237de:	01 f6                	add    esi,esi
c00237e0:	01 f5                	add    ebp,esi
c00237e2:	eb bd                	jmp    c00237a1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c00237e4:	51                   	push   ecx
c00237e5:	51                   	push   ecx
c00237e6:	52                   	push   edx
c00237e7:	50                   	push   eax
c00237e8:	e8 45 e7 ff ff       	call   c0021f32 <IDE::getBase(unsigned char)>
c00237ed:	89 c2                	mov    edx,eax
c00237ef:	66 ed                	in     ax,dx
c00237f1:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c00237f6:	83 c4 10             	add    esp,0x10
c00237f9:	46                   	inc    esi
c00237fa:	eb cf                	jmp    c00237cb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c00237fc:	51                   	push   ecx
c00237fd:	51                   	push   ecx
c00237fe:	52                   	push   edx
c00237ff:	50                   	push   eax
c0023800:	e8 ad e8 ff ff       	call   c00220b2 <IDE::waitInterrupt(unsigned char)>
c0023805:	83 c4 10             	add    esp,0x10
c0023808:	84 c0                	test   al,al
c002380a:	0f 84 e8 fd ff ff    	je     c00235f8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0023810:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023815:	52                   	push   edx
c0023816:	52                   	push   edx
c0023817:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002381e:	50                   	push   eax
c002381f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023825:	e8 f4 e6 ff ff       	call   c0021f1e <IDE::prepareInterrupt(unsigned char)>
c002382a:	83 c4 10             	add    esp,0x10
c002382d:	50                   	push   eax
c002382e:	50                   	push   eax
c002382f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023836:	50                   	push   eax
c0023837:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002383d:	e8 f0 e6 ff ff       	call   c0021f32 <IDE::getBase(unsigned char)>
c0023842:	8d 50 07             	lea    edx,[eax+0x7]
c0023845:	ec                   	in     al,dx
c0023846:	83 c4 10             	add    esp,0x10
c0023849:	a8 88                	test   al,0x88
c002384b:	74 0a                	je     c0023857 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c002384d:	4b                   	dec    ebx
c002384e:	75 dd                	jne    c002382d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0023850:	bb 02 00 00 00       	mov    ebx,0x2
c0023855:	eb 02                	jmp    c0023859 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0023857:	31 db                	xor    ebx,ebx
c0023859:	83 c4 1c             	add    esp,0x1c
c002385c:	89 d8                	mov    eax,ebx
c002385e:	5b                   	pop    ebx
c002385f:	5e                   	pop    esi
c0023860:	5f                   	pop    edi
c0023861:	5d                   	pop    ebp
c0023862:	c3                   	ret    
c0023863:	90                   	nop

c0023864 <ATAPI::diskRemoved()>:
c0023864:	83 ec 18             	sub    esp,0x18
c0023867:	68 9f b3 02 c0       	push   0xc002b39f
c002386c:	e8 fe ee fe ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c0023871:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0023875:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c002387c:	83 c4 1c             	add    esp,0x1c
c002387f:	c3                   	ret    

c0023880 <ATAPI::eject()>:
c0023880:	57                   	push   edi
c0023881:	b9 03 00 00 00       	mov    ecx,0x3
c0023886:	53                   	push   ebx
c0023887:	83 ec 14             	sub    esp,0x14
c002388a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002388e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0023892:	fc                   	cld    
c0023893:	31 c0                	xor    eax,eax
c0023895:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0023897:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002389c:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00238a1:	50                   	push   eax
c00238a2:	50                   	push   eax
c00238a3:	6a 00                	push   0x0
c00238a5:	6a 00                	push   0x0
c00238a7:	6a 00                	push   0x0
c00238a9:	6a 02                	push   0x2
c00238ab:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00238af:	50                   	push   eax
c00238b0:	53                   	push   ebx
c00238b1:	e8 ee fc ff ff       	call   c00235a4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00238b6:	83 c4 14             	add    esp,0x14
c00238b9:	53                   	push   ebx
c00238ba:	e8 a5 ff ff ff       	call   c0023864 <ATAPI::diskRemoved()>
c00238bf:	83 c4 24             	add    esp,0x24
c00238c2:	5b                   	pop    ebx
c00238c3:	5f                   	pop    edi
c00238c4:	c3                   	ret    
c00238c5:	90                   	nop

c00238c6 <ATAPI::diskInserted()>:
c00238c6:	53                   	push   ebx
c00238c7:	83 ec 14             	sub    esp,0x14
c00238ca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00238ce:	68 b5 b3 02 c0       	push   0xc002b3b5
c00238d3:	e8 97 ee fe ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c00238d8:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c00238df:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00238e2:	e8 ef 06 ff ff       	call   c0013fd6 <PhysicalDisk::startCache()>
c00238e7:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00238eb:	83 c4 18             	add    esp,0x18
c00238ee:	5b                   	pop    ebx
c00238ef:	e9 0c 27 ff ff       	jmp    c0016000 <createPartitionsForDisk(PhysicalDisk*)>

c00238f4 <ATAPI::detectMedia()>:
c00238f4:	56                   	push   esi
c00238f5:	53                   	push   ebx
c00238f6:	83 ec 28             	sub    esp,0x28
c00238f9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00238fd:	6a 0c                	push   0xc
c00238ff:	6a 00                	push   0x0
c0023901:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0023905:	56                   	push   esi
c0023906:	e8 80 cd fd ff       	call   c000068b <memset>
c002390b:	58                   	pop    eax
c002390c:	5a                   	pop    edx
c002390d:	6a 00                	push   0x0
c002390f:	6a 00                	push   0x0
c0023911:	6a 00                	push   0x0
c0023913:	6a 00                	push   0x0
c0023915:	56                   	push   esi
c0023916:	53                   	push   ebx
c0023917:	e8 88 fc ff ff       	call   c00235a4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002391c:	83 c4 1c             	add    esp,0x1c
c002391f:	6a 0c                	push   0xc
c0023921:	6a 00                	push   0x0
c0023923:	56                   	push   esi
c0023924:	e8 62 cd fd ff       	call   c000068b <memset>
c0023929:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002392e:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0023933:	59                   	pop    ecx
c0023934:	58                   	pop    eax
c0023935:	6a 01                	push   0x1
c0023937:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c002393b:	50                   	push   eax
c002393c:	6a 00                	push   0x0
c002393e:	6a 12                	push   0x12
c0023940:	56                   	push   esi
c0023941:	53                   	push   ebx
c0023942:	e8 5d fc ff ff       	call   c00235a4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0023947:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002394b:	83 c4 20             	add    esp,0x20
c002394e:	83 e0 7f             	and    eax,0x7f
c0023951:	3c 70                	cmp    al,0x70
c0023953:	74 15                	je     c002396a <ATAPI::detectMedia()+0x76>
c0023955:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002395c:	75 0c                	jne    c002396a <ATAPI::detectMedia()+0x76>
c002395e:	83 ec 0c             	sub    esp,0xc
c0023961:	53                   	push   ebx
c0023962:	e8 5f ff ff ff       	call   c00238c6 <ATAPI::diskInserted()>
c0023967:	83 c4 10             	add    esp,0x10
c002396a:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002396e:	83 e0 0f             	and    eax,0xf
c0023971:	3c 02                	cmp    al,0x2
c0023973:	75 1b                	jne    c0023990 <ATAPI::detectMedia()+0x9c>
c0023975:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002397a:	75 2d                	jne    c00239a9 <ATAPI::detectMedia()+0xb5>
c002397c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0023983:	74 24                	je     c00239a9 <ATAPI::detectMedia()+0xb5>
c0023985:	83 ec 0c             	sub    esp,0xc
c0023988:	53                   	push   ebx
c0023989:	e8 d6 fe ff ff       	call   c0023864 <ATAPI::diskRemoved()>
c002398e:	eb 16                	jmp    c00239a6 <ATAPI::detectMedia()+0xb2>
c0023990:	84 c0                	test   al,al
c0023992:	75 15                	jne    c00239a9 <ATAPI::detectMedia()+0xb5>
c0023994:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002399b:	75 0c                	jne    c00239a9 <ATAPI::detectMedia()+0xb5>
c002399d:	83 ec 0c             	sub    esp,0xc
c00239a0:	53                   	push   ebx
c00239a1:	e8 20 ff ff ff       	call   c00238c6 <ATAPI::diskInserted()>
c00239a6:	83 c4 10             	add    esp,0x10
c00239a9:	83 c4 24             	add    esp,0x24
c00239ac:	5b                   	pop    ebx
c00239ad:	5e                   	pop    esi
c00239ae:	c3                   	ret    
c00239af:	90                   	nop

c00239b0 <ATAPI::open(int, int, void*)>:
c00239b0:	53                   	push   ebx
c00239b1:	83 ec 08             	sub    esp,0x8
c00239b4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00239b8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00239bc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00239c0:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00239c6:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00239cc:	c1 e0 06             	shl    eax,0x6
c00239cf:	01 d0                	add    eax,edx
c00239d1:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c00239d8:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c00239de:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c00239e5:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00239ef:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00239f5:	6a 04                	push   0x4
c00239f7:	6a 0c                	push   0xc
c00239f9:	51                   	push   ecx
c00239fa:	52                   	push   edx
c00239fb:	e8 44 e5 ff ff       	call   c0021f44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a00:	90                   	nop
c0023a01:	90                   	nop
c0023a02:	6a 00                	push   0x0
c0023a04:	6a 0c                	push   0xc
c0023a06:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023a0d:	50                   	push   eax
c0023a0e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023a14:	e8 2b e5 ff ff       	call   c0021f44 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a19:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0023a20:	83 c4 14             	add    esp,0x14
c0023a23:	53                   	push   ebx
c0023a24:	e8 cb fe ff ff       	call   c00238f4 <ATAPI::detectMedia()>
c0023a29:	31 c0                	xor    eax,eax
c0023a2b:	83 c4 18             	add    esp,0x18
c0023a2e:	5b                   	pop    ebx
c0023a2f:	c3                   	ret    

c0023a30 <ATAPI::read(unsigned long long, int, void*)>:
c0023a30:	55                   	push   ebp
c0023a31:	57                   	push   edi
c0023a32:	56                   	push   esi
c0023a33:	53                   	push   ebx
c0023a34:	83 ec 1c             	sub    esp,0x1c
c0023a37:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023a3b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023a3f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0023a43:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0023a4a:	74 41                	je     c0023a8d <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0023a4c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0023a50:	b9 03 00 00 00       	mov    ecx,0x3
c0023a55:	fc                   	cld    
c0023a56:	31 c0                	xor    eax,eax
c0023a58:	86 fb                	xchg   bl,bh
c0023a5a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0023a5c:	c1 c3 10             	rol    ebx,0x10
c0023a5f:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0023a64:	89 e8                	mov    eax,ebp
c0023a66:	86 fb                	xchg   bl,bh
c0023a68:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0023a6c:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0023a70:	50                   	push   eax
c0023a71:	50                   	push   eax
c0023a72:	55                   	push   ebp
c0023a73:	c1 e5 0b             	shl    ebp,0xb
c0023a76:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0023a7a:	6a 00                	push   0x0
c0023a7c:	55                   	push   ebp
c0023a7d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0023a81:	50                   	push   eax
c0023a82:	56                   	push   esi
c0023a83:	e8 1c fb ff ff       	call   c00235a4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0023a88:	83 c4 20             	add    esp,0x20
c0023a8b:	eb 1a                	jmp    c0023aa7 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0023a8d:	83 ec 0c             	sub    esp,0xc
c0023a90:	56                   	push   esi
c0023a91:	e8 5e fe ff ff       	call   c00238f4 <ATAPI::detectMedia()>
c0023a96:	83 c4 10             	add    esp,0x10
c0023a99:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0023aa0:	75 aa                	jne    c0023a4c <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0023aa2:	b8 02 00 00 00       	mov    eax,0x2
c0023aa7:	83 c4 1c             	add    esp,0x1c
c0023aaa:	5b                   	pop    ebx
c0023aab:	5e                   	pop    esi
c0023aac:	5f                   	pop    edi
c0023aad:	5d                   	pop    ebp
c0023aae:	c3                   	ret    
c0023aaf:	90                   	nop

c0023ab0 <SATA::close(int, int, void*)>:
c0023ab0:	83 ec 0c             	sub    esp,0xc
c0023ab3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ab7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023abd:	85 c0                	test   eax,eax
c0023abf:	74 0c                	je     c0023acd <SATA::close(int, int, void*)+0x1d>
c0023ac1:	83 ec 0c             	sub    esp,0xc
c0023ac4:	8b 10                	mov    edx,DWORD PTR [eax]
c0023ac6:	50                   	push   eax
c0023ac7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023aca:	83 c4 10             	add    esp,0x10
c0023acd:	31 c0                	xor    eax,eax
c0023acf:	83 c4 0c             	add    esp,0xc
c0023ad2:	c3                   	ret    
c0023ad3:	90                   	nop

c0023ad4 <SATA::powerSaving(PowerSavingLevel)>:
c0023ad4:	c3                   	ret    
c0023ad5:	90                   	nop

c0023ad6 <SATA::open(int, int, void*)>:
c0023ad6:	53                   	push   ebx
c0023ad7:	83 ec 14             	sub    esp,0x14
c0023ada:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0023ade:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0023ae2:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0023aec:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0023af2:	c7 83 60 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x160],0x0
c0023afc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0023b00:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0023b0a:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0023b10:	68 00 b4 02 c0       	push   0xc002b400
c0023b15:	e8 55 ec fe ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c0023b1a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023b1d:	e8 b4 04 ff ff       	call   c0013fd6 <PhysicalDisk::startCache()>
c0023b22:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023b25:	e8 d6 24 ff ff       	call   c0016000 <createPartitionsForDisk(PhysicalDisk*)>
c0023b2a:	31 c0                	xor    eax,eax
c0023b2c:	83 c4 18             	add    esp,0x18
c0023b2f:	5b                   	pop    ebx
c0023b30:	c3                   	ret    
c0023b31:	90                   	nop

c0023b32 <SATA::SATA()>:
c0023b32:	83 ec 0c             	sub    esp,0xc
c0023b35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b39:	83 ec 04             	sub    esp,0x4
c0023b3c:	68 00 02 00 00       	push   0x200
c0023b41:	68 1b b4 02 c0       	push   0xc002b41b
c0023b46:	50                   	push   eax
c0023b47:	e8 22 04 ff ff       	call   c0013f6e <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023b4c:	83 c4 10             	add    esp,0x10
c0023b4f:	ba f8 b4 02 c0       	mov    edx,0xc002b4f8
c0023b54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b58:	89 10                	mov    DWORD PTR [eax],edx
c0023b5a:	90                   	nop
c0023b5b:	83 c4 0c             	add    esp,0xc
c0023b5e:	c3                   	ret    
c0023b5f:	90                   	nop

c0023b60 <SATA::access(unsigned long long, int, void*, bool)>:
c0023b60:	55                   	push   ebp
c0023b61:	57                   	push   edi
c0023b62:	56                   	push   esi
c0023b63:	53                   	push   ebx
c0023b64:	81 ec 2c 04 00 00    	sub    esp,0x42c
c0023b6a:	8b 84 24 48 04 00 00 	mov    eax,DWORD PTR [esp+0x448]
c0023b71:	8b bc 24 4c 04 00 00 	mov    edi,DWORD PTR [esp+0x44c]
c0023b78:	8b 9c 24 40 04 00 00 	mov    ebx,DWORD PTR [esp+0x440]
c0023b7f:	8b b4 24 44 04 00 00 	mov    esi,DWORD PTR [esp+0x444]
c0023b86:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023b8a:	83 ff 08             	cmp    edi,0x8
c0023b8d:	7e 10                	jle    c0023b9f <SATA::access(unsigned long long, int, void*, bool)+0x3f>
c0023b8f:	83 ec 0c             	sub    esp,0xc
c0023b92:	68 2b b4 02 c0       	push   0xc002b42b
c0023b97:	e8 ed 5c ff ff       	call   c0019889 <Krnl::panic(char const*)>
c0023b9c:	83 c4 10             	add    esp,0x10
c0023b9f:	51                   	push   ecx
c0023ba0:	68 00 02 00 00       	push   0x200
c0023ba5:	68 ee 00 00 00       	push   0xee
c0023baa:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0023bae:	55                   	push   ebp
c0023baf:	e8 d7 ca fd ff       	call   c000068b <memset>
c0023bb4:	83 c4 0c             	add    esp,0xc
c0023bb7:	68 00 02 00 00       	push   0x200
c0023bbc:	68 ee 00 00 00       	push   0xee
c0023bc1:	8d 84 24 2c 02 00 00 	lea    eax,[esp+0x22c]
c0023bc8:	50                   	push   eax
c0023bc9:	e8 bd ca fd ff       	call   c000068b <memset>
c0023bce:	55                   	push   ebp
c0023bcf:	57                   	push   edi
c0023bd0:	56                   	push   esi
c0023bd1:	68 5d b4 02 c0       	push   0xc002b45d
c0023bd6:	e8 94 eb fe ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c0023bdb:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0023be1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023be7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0023beb:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0023bf1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0023bf5:	c1 e0 07             	shl    eax,0x7
c0023bf8:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
c0023bfc:	83 c4 18             	add    esp,0x18
c0023bff:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0023c09:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023c0d:	8d 50 02             	lea    edx,[eax+0x2]
c0023c10:	c1 e2 07             	shl    edx,0x7
c0023c13:	03 54 24 14          	add    edx,DWORD PTR [esp+0x14]
c0023c17:	52                   	push   edx
c0023c18:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0023c1c:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0023c22:	e8 e1 ef ff ff       	call   c0022c08 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0023c27:	89 c1                	mov    ecx,eax
c0023c29:	58                   	pop    eax
c0023c2a:	5a                   	pop    edx
c0023c2b:	51                   	push   ecx
c0023c2c:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0023c30:	68 92 b4 02 c0       	push   0xc002b492
c0023c35:	e8 35 eb fe ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c0023c3a:	83 c4 10             	add    esp,0x10
c0023c3d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0023c41:	83 f9 ff             	cmp    ecx,0xffffffff
c0023c44:	0f 84 9a 01 00 00    	je     c0023de4 <SATA::access(unsigned long long, int, void*, bool)+0x284>
c0023c4a:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0023c50:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023c54:	8b 12                	mov    edx,DWORD PTR [edx]
c0023c56:	2b 90 5c 01 00 00    	sub    edx,DWORD PTR [eax+0x15c]
c0023c5c:	03 90 58 01 00 00    	add    edx,DWORD PTR [eax+0x158]
c0023c62:	89 c8                	mov    eax,ecx
c0023c64:	c1 e0 05             	shl    eax,0x5
c0023c67:	01 c2                	add    edx,eax
c0023c69:	8a 02                	mov    al,BYTE PTR [edx]
c0023c6b:	83 e0 a0             	and    eax,0xffffffa0
c0023c6e:	83 c8 05             	or     eax,0x5
c0023c71:	88 02                	mov    BYTE PTR [edx],al
c0023c73:	8d 47 ff             	lea    eax,[edi-0x1]
c0023c76:	c1 f8 04             	sar    eax,0x4
c0023c79:	40                   	inc    eax
c0023c7a:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0023c7e:	0f b7 c0             	movzx  eax,ax
c0023c81:	8b 9b 70 01 00 00    	mov    ebx,DWORD PTR [ebx+0x170]
c0023c87:	83 c0 08             	add    eax,0x8
c0023c8a:	8b 8b 58 01 00 00    	mov    ecx,DWORD PTR [ebx+0x158]
c0023c90:	c1 e0 04             	shl    eax,0x4
c0023c93:	2b 8b 5c 01 00 00    	sub    ecx,DWORD PTR [ebx+0x15c]
c0023c99:	8b 5a 08             	mov    ebx,DWORD PTR [edx+0x8]
c0023c9c:	01 cb                	add    ebx,ecx
c0023c9e:	52                   	push   edx
c0023c9f:	50                   	push   eax
c0023ca0:	6a 00                	push   0x0
c0023ca2:	53                   	push   ebx
c0023ca3:	e8 e3 c9 fd ff       	call   c000068b <memset>
c0023ca8:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0023cae:	83 c4 10             	add    esp,0x10
c0023cb1:	89 ab 80 00 00 00    	mov    DWORD PTR [ebx+0x80],ebp
c0023cb7:	25 00 00 c0 7f       	and    eax,0x7fc00000
c0023cbc:	8d ac 24 20 02 00 00 	lea    ebp,[esp+0x220]
c0023cc3:	0d ff 01 00 80       	or     eax,0x800001ff
c0023cc8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0023ccc:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0023cd2:	b8 01 00 00 00       	mov    eax,0x1
c0023cd7:	89 c2                	mov    edx,eax
c0023cd9:	c1 e2 04             	shl    edx,0x4
c0023cdc:	89 ac 13 80 00 00 00 	mov    DWORD PTR [ebx+edx*1+0x80],ebp
c0023ce3:	8d 50 08             	lea    edx,[eax+0x8]
c0023ce6:	40                   	inc    eax
c0023ce7:	c1 e2 04             	shl    edx,0x4
c0023cea:	81 64 13 0c 00 00 c0 7f 	and    DWORD PTR [ebx+edx*1+0xc],0x7fc00000
c0023cf2:	83 f8 10             	cmp    eax,0x10
c0023cf5:	75 e0                	jne    c0023cd7 <SATA::access(unsigned long long, int, void*, bool)+0x177>
c0023cf7:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0023cfa:	c6 43 02 25          	mov    BYTE PTR [ebx+0x2],0x25
c0023cfe:	66 25 00 7f          	and    ax,0x7f00
c0023d02:	66 89 73 04          	mov    WORD PTR [ebx+0x4],si
c0023d06:	66 0d 27 80          	or     ax,0x8027
c0023d0a:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0023d0e:	66 89 03             	mov    WORD PTR [ebx],ax
c0023d11:	66 89 7b 0c          	mov    WORD PTR [ebx+0xc],di
c0023d15:	89 f0                	mov    eax,esi
c0023d17:	31 d2                	xor    edx,edx
c0023d19:	c1 e8 10             	shr    eax,0x10
c0023d1c:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0023d1f:	89 f0                	mov    eax,esi
c0023d21:	c1 e8 18             	shr    eax,0x18
c0023d24:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0023d27:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0023d2b:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0023d2e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023d32:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0023d35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d39:	c1 e0 07             	shl    eax,0x7
c0023d3c:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0023d40:	8b 98 20 01 00 00    	mov    ebx,DWORD PTR [eax+0x120]
c0023d46:	80 e3 88             	and    bl,0x88
c0023d49:	74 0b                	je     c0023d56 <SATA::access(unsigned long long, int, void*, bool)+0x1f6>
c0023d4b:	81 fa 40 42 0f 00    	cmp    edx,0xf4240
c0023d51:	74 0b                	je     c0023d5e <SATA::access(unsigned long long, int, void*, bool)+0x1fe>
c0023d53:	42                   	inc    edx
c0023d54:	eb ea                	jmp    c0023d40 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c0023d56:	81 fa 40 42 0f 00    	cmp    edx,0xf4240
c0023d5c:	75 0a                	jne    c0023d68 <SATA::access(unsigned long long, int, void*, bool)+0x208>
c0023d5e:	83 ec 0c             	sub    esp,0xc
c0023d61:	68 9b b4 02 c0       	push   0xc002b49b
c0023d66:	eb 60                	jmp    c0023dc8 <SATA::access(unsigned long long, int, void*, bool)+0x268>
c0023d68:	be 01 00 00 00       	mov    esi,0x1
c0023d6d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023d71:	d3 e6                	shl    esi,cl
c0023d73:	c1 e3 07             	shl    ebx,0x7
c0023d76:	89 b0 38 01 00 00    	mov    DWORD PTR [eax+0x138],esi
c0023d7c:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0023d80:	83 ec 0c             	sub    esp,0xc
c0023d83:	68 a9 b4 02 c0       	push   0xc002b4a9
c0023d88:	e8 e2 e9 fe ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c0023d8d:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c0023d93:	83 c4 10             	add    esp,0x10
c0023d96:	85 c6                	test   esi,eax
c0023d98:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c0023d9e:	74 1a                	je     c0023dba <SATA::access(unsigned long long, int, void*, bool)+0x25a>
c0023da0:	0f ba e0 1e          	bt     eax,0x1e
c0023da4:	73 da                	jae    c0023d80 <SATA::access(unsigned long long, int, void*, bool)+0x220>
c0023da6:	83 ec 0c             	sub    esp,0xc
c0023da9:	68 b6 b4 02 c0       	push   0xc002b4b6
c0023dae:	e8 d6 5a ff ff       	call   c0019889 <Krnl::panic(char const*)>
c0023db3:	83 c4 10             	add    esp,0x10
c0023db6:	31 c0                	xor    eax,eax
c0023db8:	eb 2f                	jmp    c0023de9 <SATA::access(unsigned long long, int, void*, bool)+0x289>
c0023dba:	0f ba e0 1e          	bt     eax,0x1e
c0023dbe:	73 12                	jae    c0023dd2 <SATA::access(unsigned long long, int, void*, bool)+0x272>
c0023dc0:	83 ec 0c             	sub    esp,0xc
c0023dc3:	68 b6 b4 02 c0       	push   0xc002b4b6
c0023dc8:	e8 bc 5a ff ff       	call   c0019889 <Krnl::panic(char const*)>
c0023dcd:	83 c4 10             	add    esp,0x10
c0023dd0:	eb 12                	jmp    c0023de4 <SATA::access(unsigned long long, int, void*, bool)+0x284>
c0023dd2:	83 ec 0c             	sub    esp,0xc
c0023dd5:	68 c7 b4 02 c0       	push   0xc002b4c7
c0023dda:	e8 aa 5a ff ff       	call   c0019889 <Krnl::panic(char const*)>
c0023ddf:	83 c4 10             	add    esp,0x10
c0023de2:	eb fe                	jmp    c0023de2 <SATA::access(unsigned long long, int, void*, bool)+0x282>
c0023de4:	b8 01 00 00 00       	mov    eax,0x1
c0023de9:	81 c4 2c 04 00 00    	add    esp,0x42c
c0023def:	5b                   	pop    ebx
c0023df0:	5e                   	pop    esi
c0023df1:	5f                   	pop    edi
c0023df2:	5d                   	pop    ebp
c0023df3:	c3                   	ret    

c0023df4 <SATA::read(unsigned long long, int, void*)>:
c0023df4:	57                   	push   edi
c0023df5:	b8 04 00 00 00       	mov    eax,0x4
c0023dfa:	56                   	push   esi
c0023dfb:	53                   	push   ebx
c0023dfc:	83 ec 10             	sub    esp,0x10
c0023dff:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0023e03:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0023e07:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0023e0a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0023e0e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023e12:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0023e18:	77 3b                	ja     c0023e55 <SATA::read(unsigned long long, int, void*)+0x61>
c0023e1a:	b8 06 00 00 00       	mov    eax,0x6
c0023e1f:	85 d2                	test   edx,edx
c0023e21:	74 32                	je     c0023e55 <SATA::read(unsigned long long, int, void*)+0x61>
c0023e23:	50                   	push   eax
c0023e24:	50                   	push   eax
c0023e25:	6a 00                	push   0x0
c0023e27:	52                   	push   edx
c0023e28:	53                   	push   ebx
c0023e29:	57                   	push   edi
c0023e2a:	56                   	push   esi
c0023e2b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023e2f:	e8 2c fd ff ff       	call   c0023b60 <SATA::access(unsigned long long, int, void*, bool)>
c0023e34:	83 c4 20             	add    esp,0x20
c0023e37:	85 c0                	test   eax,eax
c0023e39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023e3d:	75 11                	jne    c0023e50 <SATA::read(unsigned long long, int, void*)+0x5c>
c0023e3f:	01 1d 88 ec 02 c0    	add    DWORD PTR ds:0xc002ec88,ebx
c0023e45:	e8 8a c7 fe ff       	call   c00105d4 <VgaText::updateDiskUsage()>
c0023e4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023e4e:	eb 05                	jmp    c0023e55 <SATA::read(unsigned long long, int, void*)+0x61>
c0023e50:	b8 01 00 00 00       	mov    eax,0x1
c0023e55:	83 c4 10             	add    esp,0x10
c0023e58:	5b                   	pop    ebx
c0023e59:	5e                   	pop    esi
c0023e5a:	5f                   	pop    edi
c0023e5b:	c3                   	ret    

c0023e5c <SATA::write(unsigned long long, int, void*)>:
c0023e5c:	57                   	push   edi
c0023e5d:	b8 04 00 00 00       	mov    eax,0x4
c0023e62:	56                   	push   esi
c0023e63:	53                   	push   ebx
c0023e64:	83 ec 10             	sub    esp,0x10
c0023e67:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0023e6b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0023e6f:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0023e72:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0023e76:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023e7a:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0023e80:	77 3b                	ja     c0023ebd <SATA::write(unsigned long long, int, void*)+0x61>
c0023e82:	b8 06 00 00 00       	mov    eax,0x6
c0023e87:	85 d2                	test   edx,edx
c0023e89:	74 32                	je     c0023ebd <SATA::write(unsigned long long, int, void*)+0x61>
c0023e8b:	50                   	push   eax
c0023e8c:	50                   	push   eax
c0023e8d:	6a 01                	push   0x1
c0023e8f:	52                   	push   edx
c0023e90:	53                   	push   ebx
c0023e91:	57                   	push   edi
c0023e92:	56                   	push   esi
c0023e93:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023e97:	e8 c4 fc ff ff       	call   c0023b60 <SATA::access(unsigned long long, int, void*, bool)>
c0023e9c:	83 c4 20             	add    esp,0x20
c0023e9f:	85 c0                	test   eax,eax
c0023ea1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023ea5:	75 11                	jne    c0023eb8 <SATA::write(unsigned long long, int, void*)+0x5c>
c0023ea7:	01 1d 84 ec 02 c0    	add    DWORD PTR ds:0xc002ec84,ebx
c0023ead:	e8 22 c7 fe ff       	call   c00105d4 <VgaText::updateDiskUsage()>
c0023eb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023eb6:	eb 05                	jmp    c0023ebd <SATA::write(unsigned long long, int, void*)+0x61>
c0023eb8:	b8 01 00 00 00       	mov    eax,0x1
c0023ebd:	83 c4 10             	add    esp,0x10
c0023ec0:	5b                   	pop    ebx
c0023ec1:	5e                   	pop    esi
c0023ec2:	5f                   	pop    edi
c0023ec3:	c3                   	ret    

c0023ec4 <AVX::open(int, int, void*)>:
c0023ec4:	83 ec 0c             	sub    esp,0xc
c0023ec7:	e8 3c 11 00 00       	call   c0025008 <avxInit>
c0023ecc:	b8 00 00 00 00       	mov    eax,0x0
c0023ed1:	83 c4 0c             	add    esp,0xc
c0023ed4:	c3                   	ret    
c0023ed5:	90                   	nop

c0023ed6 <AVX::close(int, int, void*)>:
c0023ed6:	83 ec 0c             	sub    esp,0xc
c0023ed9:	e8 2b 11 00 00       	call   c0025009 <avxClose>
c0023ede:	b8 00 00 00 00       	mov    eax,0x0
c0023ee3:	83 c4 0c             	add    esp,0xc
c0023ee6:	c3                   	ret    
c0023ee7:	90                   	nop

c0023ee8 <AVX::available()>:
c0023ee8:	83 ec 0c             	sub    esp,0xc
c0023eeb:	e8 10 11 00 00       	call   c0025000 <avxDetect>
c0023ef0:	85 c0                	test   eax,eax
c0023ef2:	0f 95 c0             	setne  al
c0023ef5:	83 c4 0c             	add    esp,0xc
c0023ef8:	c3                   	ret    
c0023ef9:	90                   	nop

c0023efa <AVX::save(void*)>:
c0023efa:	83 ec 0c             	sub    esp,0xc
c0023efd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023f01:	83 ec 0c             	sub    esp,0xc
c0023f04:	50                   	push   eax
c0023f05:	e8 fc 10 00 00       	call   c0025006 <avxSave>
c0023f0a:	83 c4 10             	add    esp,0x10
c0023f0d:	90                   	nop
c0023f0e:	83 c4 0c             	add    esp,0xc
c0023f11:	c3                   	ret    

c0023f12 <AVX::load(void*)>:
c0023f12:	83 ec 0c             	sub    esp,0xc
c0023f15:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023f19:	83 ec 0c             	sub    esp,0xc
c0023f1c:	50                   	push   eax
c0023f1d:	e8 e5 10 00 00       	call   c0025007 <avxLoad>
c0023f22:	83 c4 10             	add    esp,0x10
c0023f25:	90                   	nop
c0023f26:	83 c4 0c             	add    esp,0xc
c0023f29:	c3                   	ret    

c0023f2a <AVX::AVX()>:
c0023f2a:	83 ec 0c             	sub    esp,0xc
c0023f2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f31:	83 ec 08             	sub    esp,0x8
c0023f34:	68 24 b5 02 c0       	push   0xc002b524
c0023f39:	50                   	push   eax
c0023f3a:	e8 0d 01 ff ff       	call   c001404c <FPU::FPU(char const*)>
c0023f3f:	83 c4 10             	add    esp,0x10
c0023f42:	ba 34 b5 02 c0       	mov    edx,0xc002b534
c0023f47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f4b:	89 10                	mov    DWORD PTR [eax],edx
c0023f4d:	90                   	nop
c0023f4e:	83 c4 0c             	add    esp,0xc
c0023f51:	c3                   	ret    

c0023f52 <MMX::available()>:
c0023f52:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c0023f57:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0023f5d:	83 e0 20             	and    eax,0x20
c0023f60:	84 c0                	test   al,al
c0023f62:	0f 95 c0             	setne  al
c0023f65:	c3                   	ret    

c0023f66 <MMX::open(int, int, void*)>:
c0023f66:	83 ec 0c             	sub    esp,0xc
c0023f69:	e8 1e 11 00 00       	call   c002508c <x87Init>
c0023f6e:	b8 00 00 00 00       	mov    eax,0x0
c0023f73:	83 c4 0c             	add    esp,0xc
c0023f76:	c3                   	ret    
c0023f77:	90                   	nop

c0023f78 <MMX::close(int, int, void*)>:
c0023f78:	83 ec 0c             	sub    esp,0xc
c0023f7b:	e8 26 11 00 00       	call   c00250a6 <x87Close>
c0023f80:	b8 00 00 00 00       	mov    eax,0x0
c0023f85:	83 c4 0c             	add    esp,0xc
c0023f88:	c3                   	ret    
c0023f89:	90                   	nop

c0023f8a <MMX::save(void*)>:
c0023f8a:	83 ec 0c             	sub    esp,0xc
c0023f8d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023f91:	83 ec 0c             	sub    esp,0xc
c0023f94:	50                   	push   eax
c0023f95:	e8 e7 10 00 00       	call   c0025081 <x87Save>
c0023f9a:	83 c4 10             	add    esp,0x10
c0023f9d:	90                   	nop
c0023f9e:	83 c4 0c             	add    esp,0xc
c0023fa1:	c3                   	ret    

c0023fa2 <MMX::load(void*)>:
c0023fa2:	83 ec 0c             	sub    esp,0xc
c0023fa5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023fa9:	83 ec 0c             	sub    esp,0xc
c0023fac:	50                   	push   eax
c0023fad:	e8 d5 10 00 00       	call   c0025087 <x87Load>
c0023fb2:	83 c4 10             	add    esp,0x10
c0023fb5:	90                   	nop
c0023fb6:	83 c4 0c             	add    esp,0xc
c0023fb9:	c3                   	ret    

c0023fba <MMX::MMX()>:
c0023fba:	83 ec 0c             	sub    esp,0xc
c0023fbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023fc1:	83 ec 08             	sub    esp,0x8
c0023fc4:	68 64 b5 02 c0       	push   0xc002b564
c0023fc9:	50                   	push   eax
c0023fca:	e8 7d 00 ff ff       	call   c001404c <FPU::FPU(char const*)>
c0023fcf:	83 c4 10             	add    esp,0x10
c0023fd2:	ba 74 b5 02 c0       	mov    edx,0xc002b574
c0023fd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023fdb:	89 10                	mov    DWORD PTR [eax],edx
c0023fdd:	90                   	nop
c0023fde:	83 c4 0c             	add    esp,0xc
c0023fe1:	c3                   	ret    

c0023fe2 <SSE::open(int, int, void*)>:
c0023fe2:	83 ec 0c             	sub    esp,0xc
c0023fe5:	e8 5a 10 00 00       	call   c0025044 <sseInit>
c0023fea:	b8 00 00 00 00       	mov    eax,0x0
c0023fef:	83 c4 0c             	add    esp,0xc
c0023ff2:	c3                   	ret    
c0023ff3:	90                   	nop

c0023ff4 <SSE::close(int, int, void*)>:
c0023ff4:	83 ec 0c             	sub    esp,0xc
c0023ff7:	e8 58 10 00 00       	call   c0025054 <sseClose>
c0023ffc:	b8 00 00 00 00       	mov    eax,0x0
c0024001:	83 c4 0c             	add    esp,0xc
c0024004:	c3                   	ret    
c0024005:	90                   	nop

c0024006 <SSE::available()>:
c0024006:	83 ec 1c             	sub    esp,0x1c
c0024009:	e8 12 10 00 00       	call   c0025020 <absolutelyNoChanceInHell>
c002400e:	85 c0                	test   eax,eax
c0024010:	0f 95 c0             	setne  al
c0024013:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024017:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002401b:	83 c4 1c             	add    esp,0x1c
c002401e:	c3                   	ret    
c002401f:	90                   	nop

c0024020 <SSE::save(void*)>:
c0024020:	83 ec 0c             	sub    esp,0xc
c0024023:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024027:	83 ec 0c             	sub    esp,0xc
c002402a:	50                   	push   eax
c002402b:	e8 08 10 00 00       	call   c0025038 <sseSave>
c0024030:	83 c4 10             	add    esp,0x10
c0024033:	90                   	nop
c0024034:	83 c4 0c             	add    esp,0xc
c0024037:	c3                   	ret    

c0024038 <SSE::load(void*)>:
c0024038:	83 ec 0c             	sub    esp,0xc
c002403b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002403f:	83 ec 0c             	sub    esp,0xc
c0024042:	50                   	push   eax
c0024043:	e8 f6 0f 00 00       	call   c002503e <sseLoad>
c0024048:	83 c4 10             	add    esp,0x10
c002404b:	90                   	nop
c002404c:	83 c4 0c             	add    esp,0xc
c002404f:	c3                   	ret    

c0024050 <SSE::SSE()>:
c0024050:	83 ec 0c             	sub    esp,0xc
c0024053:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024057:	83 ec 08             	sub    esp,0x8
c002405a:	68 a4 b5 02 c0       	push   0xc002b5a4
c002405f:	50                   	push   eax
c0024060:	e8 e7 ff fe ff       	call   c001404c <FPU::FPU(char const*)>
c0024065:	83 c4 10             	add    esp,0x10
c0024068:	ba b4 b5 02 c0       	mov    edx,0xc002b5b4
c002406d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024071:	89 10                	mov    DWORD PTR [eax],edx
c0024073:	90                   	nop
c0024074:	83 c4 0c             	add    esp,0xc
c0024077:	c3                   	ret    

c0024078 <x87::open(int, int, void*)>:
c0024078:	83 ec 0c             	sub    esp,0xc
c002407b:	e8 0c 10 00 00       	call   c002508c <x87Init>
c0024080:	b8 00 00 00 00       	mov    eax,0x0
c0024085:	83 c4 0c             	add    esp,0xc
c0024088:	c3                   	ret    
c0024089:	90                   	nop

c002408a <x87::close(int, int, void*)>:
c002408a:	83 ec 0c             	sub    esp,0xc
c002408d:	e8 14 10 00 00       	call   c00250a6 <x87Close>
c0024092:	b8 00 00 00 00       	mov    eax,0x0
c0024097:	83 c4 0c             	add    esp,0xc
c002409a:	c3                   	ret    
c002409b:	90                   	nop

c002409c <x87::available()>:
c002409c:	83 ec 0c             	sub    esp,0xc
c002409f:	e8 c2 0f 00 00       	call   c0025066 <x87Detect>
c00240a4:	85 c0                	test   eax,eax
c00240a6:	0f 95 c0             	setne  al
c00240a9:	83 c4 0c             	add    esp,0xc
c00240ac:	c3                   	ret    
c00240ad:	90                   	nop

c00240ae <x87::save(void*)>:
c00240ae:	83 ec 0c             	sub    esp,0xc
c00240b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00240b5:	83 ec 0c             	sub    esp,0xc
c00240b8:	50                   	push   eax
c00240b9:	e8 c3 0f 00 00       	call   c0025081 <x87Save>
c00240be:	83 c4 10             	add    esp,0x10
c00240c1:	90                   	nop
c00240c2:	83 c4 0c             	add    esp,0xc
c00240c5:	c3                   	ret    

c00240c6 <x87::load(void*)>:
c00240c6:	83 ec 0c             	sub    esp,0xc
c00240c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00240cd:	83 ec 0c             	sub    esp,0xc
c00240d0:	50                   	push   eax
c00240d1:	e8 b1 0f 00 00       	call   c0025087 <x87Load>
c00240d6:	83 c4 10             	add    esp,0x10
c00240d9:	90                   	nop
c00240da:	83 c4 0c             	add    esp,0xc
c00240dd:	c3                   	ret    

c00240de <x87::x87()>:
c00240de:	83 ec 0c             	sub    esp,0xc
c00240e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00240e5:	83 ec 08             	sub    esp,0x8
c00240e8:	68 e4 b5 02 c0       	push   0xc002b5e4
c00240ed:	50                   	push   eax
c00240ee:	e8 59 ff fe ff       	call   c001404c <FPU::FPU(char const*)>
c00240f3:	83 c4 10             	add    esp,0x10
c00240f6:	ba f4 b5 02 c0       	mov    edx,0xc002b5f4
c00240fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00240ff:	89 10                	mov    DWORD PTR [eax],edx
c0024101:	90                   	nop
c0024102:	83 c4 0c             	add    esp,0xc
c0024105:	c3                   	ret    

c0024106 <APIC::disable()>:
c0024106:	90                   	nop
c0024107:	c3                   	ret    

c0024108 <APIC::close(int, int, void*)>:
c0024108:	55                   	push   ebp
c0024109:	89 e5                	mov    ebp,esp
c002410b:	83 ec 08             	sub    esp,0x8
c002410e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024111:	8b 00                	mov    eax,DWORD PTR [eax]
c0024113:	83 c0 3c             	add    eax,0x3c
c0024116:	8b 00                	mov    eax,DWORD PTR [eax]
c0024118:	83 ec 0c             	sub    esp,0xc
c002411b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002411e:	ff d0                	call   eax
c0024120:	83 c4 10             	add    esp,0x10
c0024123:	b8 00 00 00 00       	mov    eax,0x0
c0024128:	c9                   	leave  
c0024129:	c3                   	ret    

c002412a <IOAPIC::close(int, int, void*)>:
c002412a:	b8 00 00 00 00       	mov    eax,0x0
c002412f:	c3                   	ret    

c0024130 <APIC::io_wait()>:
c0024130:	eb 00                	jmp    c0024132 <APIC::io_wait()+0x2>
c0024132:	eb 00                	jmp    c0024134 <APIC::io_wait()+0x4>
c0024134:	90                   	nop
c0024135:	c3                   	ret    

c0024136 <APIC::getBase()>:
c0024136:	55                   	push   ebp
c0024137:	89 e5                	mov    ebp,esp
c0024139:	83 ec 18             	sub    esp,0x18
c002413c:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c0024141:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0024147:	83 e0 08             	and    eax,0x8
c002414a:	84 c0                	test   al,al
c002414c:	75 07                	jne    c0024155 <APIC::getBase()+0x1f>
c002414e:	b8 00 00 00 00       	mov    eax,0x0
c0024153:	eb 21                	jmp    c0024176 <APIC::getBase()+0x40>
c0024155:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c002415a:	83 ec 08             	sub    esp,0x8
c002415d:	6a 1b                	push   0x1b
c002415f:	50                   	push   eax
c0024160:	e8 17 a9 fe ff       	call   c000ea7c <Computer::rdmsr(unsigned int)>
c0024165:	83 c4 10             	add    esp,0x10
c0024168:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002416b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002416e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0024171:	25 00 f0 ff ff       	and    eax,0xfffff000
c0024176:	c9                   	leave  
c0024177:	c3                   	ret    

c0024178 <APIC::eoi(unsigned char)>:
c0024178:	55                   	push   ebp
c0024179:	89 e5                	mov    ebp,esp
c002417b:	83 ec 28             	sub    esp,0x28
c002417e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024181:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0024184:	83 ec 0c             	sub    esp,0xc
c0024187:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002418a:	e8 a7 ff ff ff       	call   c0024136 <APIC::getBase()>
c002418f:	83 c4 10             	add    esp,0x10
c0024192:	05 b0 00 00 00       	add    eax,0xb0
c0024197:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002419a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002419d:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00241a3:	90                   	nop
c00241a4:	c9                   	leave  
c00241a5:	c3                   	ret    

c00241a6 <APIC::open(int, int, void*)>:
c00241a6:	55                   	push   ebp
c00241a7:	89 e5                	mov    ebp,esp
c00241a9:	57                   	push   edi
c00241aa:	56                   	push   esi
c00241ab:	53                   	push   ebx
c00241ac:	83 ec 2c             	sub    esp,0x2c
c00241af:	83 ec 0c             	sub    esp,0xc
c00241b2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00241b5:	e8 7c ff ff ff       	call   c0024136 <APIC::getBase()>
c00241ba:	83 c4 10             	add    esp,0x10
c00241bd:	89 c2                	mov    edx,eax
c00241bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00241c2:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00241c8:	0f b6 f8             	movzx  edi,al
c00241cb:	89 d0                	mov    eax,edx
c00241cd:	ba 00 00 00 00       	mov    edx,0x0
c00241d2:	89 c1                	mov    ecx,eax
c00241d4:	80 e5 ff             	and    ch,0xff
c00241d7:	89 cb                	mov    ebx,ecx
c00241d9:	0f b6 f2             	movzx  esi,dl
c00241dc:	89 d8                	mov    eax,ebx
c00241de:	89 f2                	mov    edx,esi
c00241e0:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00241e3:	8d 5f 08             	lea    ebx,[edi+0x8]
c00241e6:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00241ea:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00241ee:	83 e0 00             	and    eax,0x0
c00241f1:	09 d0                	or     eax,edx
c00241f3:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00241f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00241fa:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0024200:	8d 50 01             	lea    edx,[eax+0x1]
c0024203:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0024206:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002420c:	0f b6 d0             	movzx  edx,al
c002420f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024212:	83 c2 08             	add    edx,0x8
c0024215:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0024219:	0f b6 c9             	movzx  ecx,cl
c002421c:	81 c9 00 00 01 00    	or     ecx,0x10000
c0024222:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0024226:	83 ec 0c             	sub    esp,0xc
c0024229:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002422c:	e8 05 ff ff ff       	call   c0024136 <APIC::getBase()>
c0024231:	83 c4 10             	add    esp,0x10
c0024234:	05 f0 00 00 00       	add    eax,0xf0
c0024239:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002423c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002423f:	8b 00                	mov    eax,DWORD PTR [eax]
c0024241:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0024244:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c002424b:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0024252:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0024255:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0024258:	89 10                	mov    DWORD PTR [eax],edx
c002425a:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0024261:	a1 10 d2 02 c0       	mov    eax,ds:0xc002d210
c0024266:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0024269:	7d 7c                	jge    c00242e7 <APIC::open(int, int, void*)+0x141>
c002426b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002426e:	8b 04 85 20 d2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2de0]
c0024275:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0024278:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002427b:	8b 04 85 20 d2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2de0]
c0024282:	c1 e8 08             	shr    eax,0x8
c0024285:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0024289:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002428c:	8b 04 85 20 d2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2de0]
c0024293:	c1 e8 18             	shr    eax,0x18
c0024296:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0024299:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c002429d:	75 40                	jne    c00242df <APIC::open(int, int, void*)+0x139>
c002429f:	83 ec 0c             	sub    esp,0xc
c00242a2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00242a5:	e8 8c fe ff ff       	call   c0024136 <APIC::getBase()>
c00242aa:	83 c4 10             	add    esp,0x10
c00242ad:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c00242b1:	75 07                	jne    c00242ba <APIC::open(int, int, void*)+0x114>
c00242b3:	ba 60 03 00 00       	mov    edx,0x360
c00242b8:	eb 05                	jmp    c00242bf <APIC::open(int, int, void*)+0x119>
c00242ba:	ba 50 03 00 00       	mov    edx,0x350
c00242bf:	01 d0                	add    eax,edx
c00242c1:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00242c4:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00242c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00242c9:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00242cc:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c00242d3:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c00242d7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00242da:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00242dd:	89 10                	mov    DWORD PTR [eax],edx
c00242df:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c00242e2:	e9 7a ff ff ff       	jmp    c0024261 <APIC::open(int, int, void*)+0xbb>
c00242e7:	b8 00 00 00 00       	mov    eax,0x0
c00242ec:	8d 65 f4             	lea    esp,[ebp-0xc]
c00242ef:	5b                   	pop    ebx
c00242f0:	5e                   	pop    esi
c00242f1:	5f                   	pop    edi
c00242f2:	5d                   	pop    ebp
c00242f3:	c3                   	ret    

c00242f4 <IOAPIC::IOAPIC()>:
c00242f4:	83 ec 0c             	sub    esp,0xc
c00242f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00242fb:	83 ec 08             	sub    esp,0x8
c00242fe:	68 24 b6 02 c0       	push   0xc002b624
c0024303:	50                   	push   eax
c0024304:	e8 45 fa fe ff       	call   c0013d4e <Device::Device(char const*)>
c0024309:	83 c4 10             	add    esp,0x10
c002430c:	ba 4c b7 02 c0       	mov    edx,0xc002b74c
c0024311:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024315:	89 10                	mov    DWORD PTR [eax],edx
c0024317:	90                   	nop
c0024318:	83 c4 0c             	add    esp,0xc
c002431b:	c3                   	ret    

c002431c <APIC::APIC()>:
c002431c:	53                   	push   ebx
c002431d:	83 ec 18             	sub    esp,0x18
c0024320:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024324:	83 ec 08             	sub    esp,0x8
c0024327:	68 2c b6 02 c0       	push   0xc002b62c
c002432c:	50                   	push   eax
c002432d:	e8 74 01 ff ff       	call   c00144a6 <InterruptController::InterruptController(char const*)>
c0024332:	83 c4 10             	add    esp,0x10
c0024335:	ba 04 b7 02 c0       	mov    edx,0xc002b704
c002433a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002433e:	89 10                	mov    DWORD PTR [eax],edx
c0024340:	a0 e0 ec 02 c0       	mov    al,ds:0xc002ece0
c0024345:	83 f0 01             	xor    eax,0x1
c0024348:	84 c0                	test   al,al
c002434a:	0f 84 a1 00 00 00    	je     c00243f1 <APIC::APIC()+0xd5>
c0024350:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0024355:	a0 c0 d2 02 c0       	mov    al,ds:0xc002d2c0
c002435a:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c002435e:	0f 83 86 00 00 00    	jae    c00243ea <APIC::APIC()+0xce>
c0024364:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c002436c:	83 ec 0c             	sub    esp,0xc
c002436f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0024373:	e8 5c b1 fe ff       	call   c000f4d4 <malloc>
c0024378:	83 c4 10             	add    esp,0x10
c002437b:	89 c3                	mov    ebx,eax
c002437d:	83 ec 0c             	sub    esp,0xc
c0024380:	53                   	push   ebx
c0024381:	e8 6e ff ff ff       	call   c00242f4 <IOAPIC::IOAPIC()>
c0024386:	83 c4 10             	add    esp,0x10
c0024389:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c002438d:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0024392:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0024396:	89 14 85 c0 ec 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1340],edx
c002439d:	a1 a0 ec 02 c0       	mov    eax,ds:0xc002eca0
c00243a2:	40                   	inc    eax
c00243a3:	a3 a0 ec 02 c0       	mov    ds:0xc002eca0,eax
c00243a8:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c00243ad:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00243b3:	83 ec 08             	sub    esp,0x8
c00243b6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00243ba:	50                   	push   eax
c00243bb:	e8 9e f7 fe ff       	call   c0013b5e <Device::addChild(Device*)>
c00243c0:	83 c4 10             	add    esp,0x10
c00243c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00243c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00243c9:	83 c0 08             	add    eax,0x8
c00243cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00243ce:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00243d3:	6a 00                	push   0x0
c00243d5:	6a 00                	push   0x0
c00243d7:	52                   	push   edx
c00243d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00243dc:	ff d0                	call   eax
c00243de:	83 c4 10             	add    esp,0x10
c00243e1:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c00243e5:	e9 6b ff ff ff       	jmp    c0024355 <APIC::APIC()+0x39>
c00243ea:	c6 05 e0 ec 02 c0 01 	mov    BYTE PTR ds:0xc002ece0,0x1
c00243f1:	90                   	nop
c00243f2:	83 c4 18             	add    esp,0x18
c00243f5:	5b                   	pop    ebx
c00243f6:	c3                   	ret    
c00243f7:	90                   	nop

c00243f8 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c00243f8:	55                   	push   ebp
c00243f9:	89 e5                	mov    ebp,esp
c00243fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00243fe:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024404:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0024407:	72 1d                	jb     c0024426 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0024409:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002440c:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0024412:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024415:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c002441b:	01 d0                	add    eax,edx
c002441d:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0024420:	73 04                	jae    c0024426 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0024422:	b0 01                	mov    al,0x1
c0024424:	eb 02                	jmp    c0024428 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0024426:	b0 00                	mov    al,0x0
c0024428:	5d                   	pop    ebp
c0024429:	c3                   	ret    

c002442a <IOAPIC::read(int)>:
c002442a:	55                   	push   ebp
c002442b:	89 e5                	mov    ebp,esp
c002442d:	83 ec 10             	sub    esp,0x10
c0024430:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024433:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0024439:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002443c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002443f:	0f b6 d0             	movzx  edx,al
c0024442:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0024445:	89 10                	mov    DWORD PTR [eax],edx
c0024447:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002444a:	83 c0 10             	add    eax,0x10
c002444d:	8b 00                	mov    eax,DWORD PTR [eax]
c002444f:	c9                   	leave  
c0024450:	c3                   	ret    
c0024451:	90                   	nop

c0024452 <IOAPIC::open(int, int, void*)>:
c0024452:	55                   	push   ebp
c0024453:	89 e5                	mov    ebp,esp
c0024455:	57                   	push   edi
c0024456:	56                   	push   esi
c0024457:	53                   	push   ebx
c0024458:	83 ec 0c             	sub    esp,0xc
c002445b:	83 ec 0c             	sub    esp,0xc
c002445e:	68 57 b6 02 c0       	push   0xc002b657
c0024463:	e8 07 e3 fe ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c0024468:	83 c4 10             	add    esp,0x10
c002446b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002446e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024471:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0024477:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002447a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024480:	8b 14 85 00 d3 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2d00]
c0024487:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002448a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0024490:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024493:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024499:	8b 14 85 80 d3 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2c80]
c00244a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00244a3:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00244a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00244ac:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00244b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00244b5:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00244bb:	0f b6 f8             	movzx  edi,al
c00244be:	89 d0                	mov    eax,edx
c00244c0:	ba 00 00 00 00       	mov    edx,0x0
c00244c5:	89 c1                	mov    ecx,eax
c00244c7:	80 e5 ff             	and    ch,0xff
c00244ca:	89 cb                	mov    ebx,ecx
c00244cc:	0f b6 f2             	movzx  esi,dl
c00244cf:	89 d8                	mov    eax,ebx
c00244d1:	89 f2                	mov    edx,esi
c00244d3:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00244d6:	8d 5f 08             	lea    ebx,[edi+0x8]
c00244d9:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00244dd:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00244e1:	83 e0 00             	and    eax,0x0
c00244e4:	09 d0                	or     eax,edx
c00244e6:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00244ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00244ed:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00244f3:	8d 50 01             	lea    edx,[eax+0x1]
c00244f6:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00244f9:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00244ff:	0f b6 d0             	movzx  edx,al
c0024502:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024505:	83 c2 08             	add    edx,0x8
c0024508:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002450c:	0f b6 c9             	movzx  ecx,cl
c002450f:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0024515:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0024519:	83 ec 08             	sub    esp,0x8
c002451c:	6a 01                	push   0x1
c002451e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024521:	e8 04 ff ff ff       	call   c002442a <IOAPIC::read(int)>
c0024526:	83 c4 10             	add    esp,0x10
c0024529:	c1 f8 10             	sar    eax,0x10
c002452c:	0f b6 c0             	movzx  eax,al
c002452f:	8d 50 01             	lea    edx,[eax+0x1]
c0024532:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024535:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c002453b:	b8 00 00 00 00       	mov    eax,0x0
c0024540:	8d 65 f4             	lea    esp,[ebp-0xc]
c0024543:	5b                   	pop    ebx
c0024544:	5e                   	pop    esi
c0024545:	5f                   	pop    edi
c0024546:	5d                   	pop    ebp
c0024547:	c3                   	ret    

c0024548 <IOAPIC::write(int, int)>:
c0024548:	55                   	push   ebp
c0024549:	89 e5                	mov    ebp,esp
c002454b:	83 ec 10             	sub    esp,0x10
c002454e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024551:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0024557:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002455a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002455d:	0f b6 d0             	movzx  edx,al
c0024560:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0024563:	89 10                	mov    DWORD PTR [eax],edx
c0024565:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0024568:	8d 50 10             	lea    edx,[eax+0x10]
c002456b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002456e:	89 02                	mov    DWORD PTR [edx],eax
c0024570:	90                   	nop
c0024571:	c9                   	leave  
c0024572:	c3                   	ret    
c0024573:	90                   	nop

c0024574 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0024574:	55                   	push   ebp
c0024575:	89 e5                	mov    ebp,esp
c0024577:	53                   	push   ebx
c0024578:	83 ec 2c             	sub    esp,0x2c
c002457b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002457e:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0024581:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0024584:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0024587:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002458a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002458d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0024590:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0024593:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0024596:	88 d8                	mov    al,bl
c0024598:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c002459b:	88 c8                	mov    al,cl
c002459d:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00245a0:	88 d0                	mov    al,dl
c00245a2:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c00245a5:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00245a9:	83 c0 08             	add    eax,0x8
c00245ac:	01 c0                	add    eax,eax
c00245ae:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00245b1:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00245b5:	83 c0 08             	add    eax,0x8
c00245b8:	01 c0                	add    eax,eax
c00245ba:	40                   	inc    eax
c00245bb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00245be:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00245c1:	50                   	push   eax
c00245c2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00245c5:	e8 60 fe ff ff       	call   c002442a <IOAPIC::read(int)>
c00245ca:	83 c4 08             	add    esp,0x8
c00245cd:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00245d0:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c00245d7:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00245da:	c1 e0 18             	shl    eax,0x18
c00245dd:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c00245e0:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00245e3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00245e6:	52                   	push   edx
c00245e7:	50                   	push   eax
c00245e8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00245eb:	e8 58 ff ff ff       	call   c0024548 <IOAPIC::write(int, int)>
c00245f0:	83 c4 0c             	add    esp,0xc
c00245f3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00245f6:	50                   	push   eax
c00245f7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00245fa:	e8 2b fe ff ff       	call   c002442a <IOAPIC::read(int)>
c00245ff:	83 c4 08             	add    esp,0x8
c0024602:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0024605:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c002460c:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0024613:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c002461a:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c002461e:	74 09                	je     c0024629 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0024620:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0024627:	eb 07                	jmp    c0024630 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0024629:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0024630:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0024634:	74 09                	je     c002463f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0024636:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c002463d:	eb 07                	jmp    c0024646 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c002463f:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0024646:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c002464d:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0024651:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0024654:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0024657:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002465a:	52                   	push   edx
c002465b:	50                   	push   eax
c002465c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002465f:	e8 e4 fe ff ff       	call   c0024548 <IOAPIC::write(int, int)>
c0024664:	83 c4 0c             	add    esp,0xc
c0024667:	90                   	nop
c0024668:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c002466b:	c9                   	leave  
c002466c:	c3                   	ret    
c002466d:	90                   	nop

c002466e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c002466e:	55                   	push   ebp
c002466f:	89 e5                	mov    ebp,esp
c0024671:	57                   	push   edi
c0024672:	56                   	push   esi
c0024673:	53                   	push   ebx
c0024674:	83 ec 2c             	sub    esp,0x2c
c0024677:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002467a:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002467d:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0024681:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0024685:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0024689:	74 5a                	je     c00246e5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002468b:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c002468f:	7f 44                	jg     c00246d5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0024691:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024694:	05 a0 bb 02 c0       	add    eax,0xc002bba0
c0024699:	8a 00                	mov    al,BYTE PTR [eax]
c002469b:	0f b6 c0             	movzx  eax,al
c002469e:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00246a1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00246a4:	66 8b 84 00 a0 d2 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd2d60]
c00246ac:	0f b7 c0             	movzx  eax,ax
c00246af:	83 e0 02             	and    eax,0x2
c00246b2:	85 c0                	test   eax,eax
c00246b4:	74 04                	je     c00246ba <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c00246b6:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c00246ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00246bd:	66 8b 84 00 a0 d2 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd2d60]
c00246c5:	0f b7 c0             	movzx  eax,ax
c00246c8:	83 e0 08             	and    eax,0x8
c00246cb:	85 c0                	test   eax,eax
c00246cd:	74 16                	je     c00246e5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00246cf:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00246d3:	eb 10                	jmp    c00246e5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00246d5:	83 ec 0c             	sub    esp,0xc
c00246d8:	68 68 b6 02 c0       	push   0xc002b668
c00246dd:	e8 a7 51 ff ff       	call   c0019889 <Krnl::panic(char const*)>
c00246e2:	83 c4 10             	add    esp,0x10
c00246e5:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c00246e9:	a1 a0 ec 02 c0       	mov    eax,ds:0xc002eca0
c00246ee:	83 ec 08             	sub    esp,0x8
c00246f1:	50                   	push   eax
c00246f2:	68 a0 b6 02 c0       	push   0xc002b6a0
c00246f7:	e8 73 e0 fe ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c00246fc:	83 c4 10             	add    esp,0x10
c00246ff:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0024706:	a1 a0 ec 02 c0       	mov    eax,ds:0xc002eca0
c002470b:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c002470e:	7d 67                	jge    c0024777 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0024710:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0024713:	8b 04 85 c0 ec 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1340]
c002471a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002471d:	83 ec 08             	sub    esp,0x8
c0024720:	52                   	push   edx
c0024721:	50                   	push   eax
c0024722:	e8 d1 fc ff ff       	call   c00243f8 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0024727:	83 c4 10             	add    esp,0x10
c002472a:	84 c0                	test   al,al
c002472c:	74 44                	je     c0024772 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c002472e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0024731:	8b 1c 85 c0 ec 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd1340]
c0024738:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c002473c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002473f:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0024743:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024746:	83 c0 20             	add    eax,0x20
c0024749:	0f b6 f0             	movzx  esi,al
c002474c:	b8 00 00 00 00       	mov    eax,0x0
c0024751:	99                   	cdq    
c0024752:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0024755:	0f b6 c9             	movzx  ecx,cl
c0024758:	83 ec 04             	sub    esp,0x4
c002475b:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c002475e:	57                   	push   edi
c002475f:	56                   	push   esi
c0024760:	52                   	push   edx
c0024761:	50                   	push   eax
c0024762:	51                   	push   ecx
c0024763:	53                   	push   ebx
c0024764:	e8 0b fe ff ff       	call   c0024574 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0024769:	83 c4 20             	add    esp,0x20
c002476c:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0024770:	eb 05                	jmp    c0024777 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0024772:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0024775:	eb 8f                	jmp    c0024706 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0024777:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c002477a:	83 f0 01             	xor    eax,0x1
c002477d:	84 c0                	test   al,al
c002477f:	74 10                	je     c0024791 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0024781:	83 ec 0c             	sub    esp,0xc
c0024784:	68 b7 b6 02 c0       	push   0xc002b6b7
c0024789:	e8 fb 50 ff ff       	call   c0019889 <Krnl::panic(char const*)>
c002478e:	83 c4 10             	add    esp,0x10
c0024791:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0024795:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c002479c:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c00247a0:	7f 65                	jg     c0024807 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c00247a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00247a5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00247a8:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00247af:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00247b2:	01 ca                	add    edx,ecx
c00247b4:	83 c2 54             	add    edx,0x54
c00247b7:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c00247bb:	85 c0                	test   eax,eax
c00247bd:	75 43                	jne    c0024802 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c00247bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00247c2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00247c5:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00247cc:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00247cf:	01 ca                	add    edx,ecx
c00247d1:	8d 4a 54             	lea    ecx,[edx+0x54]
c00247d4:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00247d7:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00247db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00247de:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00247e1:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00247e8:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00247eb:	01 ca                	add    edx,ecx
c00247ed:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c00247f3:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00247f6:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00247fa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00247fd:	83 e8 20             	sub    eax,0x20
c0024800:	eb 1a                	jmp    c002481c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0024802:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0024805:	eb 95                	jmp    c002479c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0024807:	83 ec 0c             	sub    esp,0xc
c002480a:	68 c4 b6 02 c0       	push   0xc002b6c4
c002480f:	e8 75 50 ff ff       	call   c0019889 <Krnl::panic(char const*)>
c0024814:	83 c4 10             	add    esp,0x10
c0024817:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002481c:	8d 65 f4             	lea    esp,[ebp-0xc]
c002481f:	5b                   	pop    ebx
c0024820:	5e                   	pop    esi
c0024821:	5f                   	pop    edi
c0024822:	5d                   	pop    ebp
c0024823:	c3                   	ret    

c0024824 <PIC::disable()>:
c0024824:	55                   	push   ebp
c0024825:	89 e5                	mov    ebp,esp
c0024827:	83 ec 10             	sub    esp,0x10
c002482a:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0024830:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0024834:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0024837:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c002483b:	ee                   	out    dx,al
c002483c:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0024842:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0024846:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0024849:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c002484d:	ee                   	out    dx,al
c002484e:	90                   	nop
c002484f:	c9                   	leave  
c0024850:	c3                   	ret    
c0024851:	90                   	nop

c0024852 <PIC::close(int, int, void*)>:
c0024852:	55                   	push   ebp
c0024853:	89 e5                	mov    ebp,esp
c0024855:	83 ec 08             	sub    esp,0x8
c0024858:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002485b:	8b 00                	mov    eax,DWORD PTR [eax]
c002485d:	83 c0 3c             	add    eax,0x3c
c0024860:	8b 00                	mov    eax,DWORD PTR [eax]
c0024862:	83 ec 0c             	sub    esp,0xc
c0024865:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024868:	ff d0                	call   eax
c002486a:	83 c4 10             	add    esp,0x10
c002486d:	b8 00 00 00 00       	mov    eax,0x0
c0024872:	c9                   	leave  
c0024873:	c3                   	ret    

c0024874 <PIC::PIC()>:
c0024874:	83 ec 0c             	sub    esp,0xc
c0024877:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002487b:	83 ec 08             	sub    esp,0x8
c002487e:	68 70 b7 02 c0       	push   0xc002b770
c0024883:	50                   	push   eax
c0024884:	e8 1d fc fe ff       	call   c00144a6 <InterruptController::InterruptController(char const*)>
c0024889:	83 c4 10             	add    esp,0x10
c002488c:	ba 9c b7 02 c0       	mov    edx,0xc002b79c
c0024891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024895:	89 10                	mov    DWORD PTR [eax],edx
c0024897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002489b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00248a1:	0f b6 d0             	movzx  edx,al
c00248a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248a8:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c00248af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248b3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00248b9:	0f b6 d0             	movzx  edx,al
c00248bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248c0:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00248c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248c9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00248cf:	8d 50 01             	lea    edx,[eax+0x1]
c00248d2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00248d6:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00248dc:	0f b6 d0             	movzx  edx,al
c00248df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248e3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00248e7:	83 e1 3f             	and    ecx,0x3f
c00248ea:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00248ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248f2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00248f8:	0f b6 d0             	movzx  edx,al
c00248fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248ff:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0024906:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002490a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024910:	0f b6 d0             	movzx  edx,al
c0024913:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024917:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c002491c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024920:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024926:	8d 50 01             	lea    edx,[eax+0x1]
c0024929:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002492d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0024933:	0f b6 d0             	movzx  edx,al
c0024936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002493a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002493e:	83 e1 3f             	and    ecx,0x3f
c0024941:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0024945:	90                   	nop
c0024946:	83 c4 0c             	add    esp,0xc
c0024949:	c3                   	ret    

c002494a <PIC::ioWait()>:
c002494a:	eb 00                	jmp    c002494c <PIC::ioWait()+0x2>
c002494c:	eb 00                	jmp    c002494e <PIC::ioWait()+0x4>
c002494e:	90                   	nop
c002494f:	c3                   	ret    

c0024950 <PIC::getIRQReg(int)>:
c0024950:	55                   	push   ebp
c0024951:	89 e5                	mov    ebp,esp
c0024953:	83 ec 10             	sub    esp,0x10
c0024956:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024959:	0f b6 c0             	movzx  eax,al
c002495c:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0024962:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0024965:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0024968:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002496c:	ee                   	out    dx,al
c002496d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024970:	0f b6 c0             	movzx  eax,al
c0024973:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0024979:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c002497c:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002497f:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0024983:	ee                   	out    dx,al
c0024984:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c002498a:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c002498e:	89 c2                	mov    edx,eax
c0024990:	ec                   	in     al,dx
c0024991:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0024994:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0024997:	0f b6 c0             	movzx  eax,al
c002499a:	c1 e0 08             	shl    eax,0x8
c002499d:	89 c1                	mov    ecx,eax
c002499f:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c00249a5:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c00249a9:	89 c2                	mov    edx,eax
c00249ab:	ec                   	in     al,dx
c00249ac:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c00249af:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00249b2:	0f b6 c0             	movzx  eax,al
c00249b5:	09 c8                	or     eax,ecx
c00249b7:	c9                   	leave  
c00249b8:	c3                   	ret    
c00249b9:	90                   	nop

c00249ba <PIC::eoi(unsigned char)>:
c00249ba:	55                   	push   ebp
c00249bb:	89 e5                	mov    ebp,esp
c00249bd:	83 ec 14             	sub    esp,0x14
c00249c0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00249c3:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c00249c6:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00249ca:	75 1e                	jne    c00249ea <PIC::eoi(unsigned char)+0x30>
c00249cc:	6a 0b                	push   0xb
c00249ce:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00249d1:	e8 7a ff ff ff       	call   c0024950 <PIC::getIRQReg(int)>
c00249d6:	83 c4 08             	add    esp,0x8
c00249d9:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00249dd:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c00249e1:	25 80 00 00 00       	and    eax,0x80
c00249e6:	85 c0                	test   eax,eax
c00249e8:	74 5f                	je     c0024a49 <PIC::eoi(unsigned char)+0x8f>
c00249ea:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c00249ee:	75 2d                	jne    c0024a1d <PIC::eoi(unsigned char)+0x63>
c00249f0:	6a 0b                	push   0xb
c00249f2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00249f5:	e8 56 ff ff ff       	call   c0024950 <PIC::getIRQReg(int)>
c00249fa:	83 c4 08             	add    esp,0x8
c00249fd:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0024a01:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0024a04:	66 85 c0             	test   ax,ax
c0024a07:	78 14                	js     c0024a1d <PIC::eoi(unsigned char)+0x63>
c0024a09:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0024a0f:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0024a13:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0024a16:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0024a1a:	ee                   	out    dx,al
c0024a1b:	eb 2d                	jmp    c0024a4a <PIC::eoi(unsigned char)+0x90>
c0024a1d:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0024a21:	76 12                	jbe    c0024a35 <PIC::eoi(unsigned char)+0x7b>
c0024a23:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0024a29:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0024a2d:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0024a30:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0024a34:	ee                   	out    dx,al
c0024a35:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0024a3b:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0024a3f:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0024a42:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0024a46:	ee                   	out    dx,al
c0024a47:	eb 01                	jmp    c0024a4a <PIC::eoi(unsigned char)+0x90>
c0024a49:	90                   	nop
c0024a4a:	c9                   	leave  
c0024a4b:	c3                   	ret    

c0024a4c <PIC::remap()>:
c0024a4c:	55                   	push   ebp
c0024a4d:	89 e5                	mov    ebp,esp
c0024a4f:	83 ec 48             	sub    esp,0x48
c0024a52:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0024a59:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0024a60:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0024a66:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0024a69:	89 c2                	mov    edx,eax
c0024a6b:	ec                   	in     al,dx
c0024a6c:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0024a6f:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0024a72:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0024a75:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0024a7b:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0024a7e:	89 c2                	mov    edx,eax
c0024a80:	ec                   	in     al,dx
c0024a81:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0024a84:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0024a87:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0024a8a:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0024a90:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0024a94:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0024a97:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0024a9a:	ee                   	out    dx,al
c0024a9b:	83 ec 0c             	sub    esp,0xc
c0024a9e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024aa1:	e8 a4 fe ff ff       	call   c002494a <PIC::ioWait()>
c0024aa6:	83 c4 10             	add    esp,0x10
c0024aa9:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0024aaf:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0024ab3:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0024ab6:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0024ab9:	ee                   	out    dx,al
c0024aba:	83 ec 0c             	sub    esp,0xc
c0024abd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024ac0:	e8 85 fe ff ff       	call   c002494a <PIC::ioWait()>
c0024ac5:	83 c4 10             	add    esp,0x10
c0024ac8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0024acb:	0f b6 c0             	movzx  eax,al
c0024ace:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0024ad4:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0024ad7:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0024ada:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0024add:	ee                   	out    dx,al
c0024ade:	83 ec 0c             	sub    esp,0xc
c0024ae1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024ae4:	e8 61 fe ff ff       	call   c002494a <PIC::ioWait()>
c0024ae9:	83 c4 10             	add    esp,0x10
c0024aec:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0024aef:	0f b6 c0             	movzx  eax,al
c0024af2:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0024af8:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0024afb:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0024afe:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0024b01:	ee                   	out    dx,al
c0024b02:	83 ec 0c             	sub    esp,0xc
c0024b05:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024b08:	e8 3d fe ff ff       	call   c002494a <PIC::ioWait()>
c0024b0d:	83 c4 10             	add    esp,0x10
c0024b10:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0024b16:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0024b1a:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0024b1d:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0024b20:	ee                   	out    dx,al
c0024b21:	83 ec 0c             	sub    esp,0xc
c0024b24:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024b27:	e8 1e fe ff ff       	call   c002494a <PIC::ioWait()>
c0024b2c:	83 c4 10             	add    esp,0x10
c0024b2f:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0024b35:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0024b39:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0024b3c:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0024b3f:	ee                   	out    dx,al
c0024b40:	83 ec 0c             	sub    esp,0xc
c0024b43:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024b46:	e8 ff fd ff ff       	call   c002494a <PIC::ioWait()>
c0024b4b:	83 c4 10             	add    esp,0x10
c0024b4e:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0024b54:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0024b58:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0024b5b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0024b5e:	ee                   	out    dx,al
c0024b5f:	83 ec 0c             	sub    esp,0xc
c0024b62:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024b65:	e8 e0 fd ff ff       	call   c002494a <PIC::ioWait()>
c0024b6a:	83 c4 10             	add    esp,0x10
c0024b6d:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0024b73:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0024b77:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0024b7a:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0024b7d:	ee                   	out    dx,al
c0024b7e:	83 ec 0c             	sub    esp,0xc
c0024b81:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024b84:	e8 c1 fd ff ff       	call   c002494a <PIC::ioWait()>
c0024b89:	83 c4 10             	add    esp,0x10
c0024b8c:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0024b90:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0024b96:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0024b99:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0024b9c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0024b9f:	ee                   	out    dx,al
c0024ba0:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0024ba4:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0024baa:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0024bad:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0024bb0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0024bb3:	ee                   	out    dx,al
c0024bb4:	90                   	nop
c0024bb5:	c9                   	leave  
c0024bb6:	c3                   	ret    
c0024bb7:	90                   	nop

c0024bb8 <PIC::open(int, int, void*)>:
c0024bb8:	55                   	push   ebp
c0024bb9:	89 e5                	mov    ebp,esp
c0024bbb:	83 ec 18             	sub    esp,0x18
c0024bbe:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0024bc4:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0024bc8:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0024bcb:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0024bcf:	ee                   	out    dx,al
c0024bd0:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0024bd6:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0024bda:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0024bdd:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0024be1:	ee                   	out    dx,al
c0024be2:	83 ec 0c             	sub    esp,0xc
c0024be5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024be8:	e8 5f fe ff ff       	call   c0024a4c <PIC::remap()>
c0024bed:	83 c4 10             	add    esp,0x10
c0024bf0:	b8 00 00 00 00       	mov    eax,0x0
c0024bf5:	c9                   	leave  
c0024bf6:	c3                   	ret    
c0024bf7:	90                   	nop

c0024bf8 <APICTimer::close(int, int, void*)>:
c0024bf8:	b8 00 00 00 00       	mov    eax,0x0
c0024bfd:	c3                   	ret    

c0024bfe <apicTimerHandler(regs*, void*)>:
c0024bfe:	83 ec 0c             	sub    esp,0xc
c0024c01:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024c05:	8b 00                	mov    eax,DWORD PTR [eax]
c0024c07:	99                   	cdq    
c0024c08:	52                   	push   edx
c0024c09:	50                   	push   eax
c0024c0a:	6a 00                	push   0x0
c0024c0c:	68 00 ca 9a 3b       	push   0x3b9aca00
c0024c11:	e8 86 07 00 00       	call   c002539c <__udivdi3>
c0024c16:	83 c4 10             	add    esp,0x10
c0024c19:	83 ec 08             	sub    esp,0x8
c0024c1c:	52                   	push   edx
c0024c1d:	50                   	push   eax
c0024c1e:	e8 82 17 ff ff       	call   c00163a5 <timerHandler(unsigned long long)>
c0024c23:	83 c4 10             	add    esp,0x10
c0024c26:	90                   	nop
c0024c27:	83 c4 0c             	add    esp,0xc
c0024c2a:	c3                   	ret    
c0024c2b:	90                   	nop

c0024c2c <APICTimer::write(int)>:
c0024c2c:	53                   	push   ebx
c0024c2d:	83 ec 28             	sub    esp,0x28
c0024c30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024c34:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0024c38:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0024c3e:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c0024c43:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024c49:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0024c4f:	83 ec 0c             	sub    esp,0xc
c0024c52:	50                   	push   eax
c0024c53:	e8 de f4 ff ff       	call   c0024136 <APIC::getBase()>
c0024c58:	83 c4 10             	add    esp,0x10
c0024c5b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024c5f:	a1 d0 cf 02 c0       	mov    eax,ds:0xc002cfd0
c0024c64:	8b 15 d4 cf 02 c0    	mov    edx,DWORD PTR ds:0xc002cfd4
c0024c6a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024c6e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0024c72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024c76:	05 e0 03 00 00       	add    eax,0x3e0
c0024c7b:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0024c81:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024c85:	05 80 03 00 00       	add    eax,0x380
c0024c8a:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0024c90:	fb                   	sti    
c0024c91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c95:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0024c99:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0024c9e:	83 d2 00             	adc    edx,0x0
c0024ca1:	89 c1                	mov    ecx,eax
c0024ca3:	89 d3                	mov    ebx,edx
c0024ca5:	a1 d0 cf 02 c0       	mov    eax,ds:0xc002cfd0
c0024caa:	8b 15 d4 cf 02 c0    	mov    edx,DWORD PTR ds:0xc002cfd4
c0024cb0:	39 c8                	cmp    eax,ecx
c0024cb2:	89 d0                	mov    eax,edx
c0024cb4:	19 d8                	sbb    eax,ebx
c0024cb6:	73 02                	jae    c0024cba <APICTimer::write(int)+0x8e>
c0024cb8:	eb d7                	jmp    c0024c91 <APICTimer::write(int)+0x65>
c0024cba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024cbe:	05 20 03 00 00       	add    eax,0x320
c0024cc3:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0024cc9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024ccd:	05 90 03 00 00       	add    eax,0x390
c0024cd2:	8b 00                	mov    eax,DWORD PTR [eax]
c0024cd4:	f7 d0                	not    eax
c0024cd6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024cda:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024cde:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024ce2:	ba 00 00 00 00       	mov    edx,0x0
c0024ce7:	f7 f3                	div    ebx
c0024ce9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024ced:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024cf1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0024cf7:	0d 00 00 02 00       	or     eax,0x20000
c0024cfc:	89 c2                	mov    edx,eax
c0024cfe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024d02:	05 20 03 00 00       	add    eax,0x320
c0024d07:	89 10                	mov    DWORD PTR [eax],edx
c0024d09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024d0d:	05 e0 03 00 00       	add    eax,0x3e0
c0024d12:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0024d18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024d1c:	05 80 03 00 00       	add    eax,0x380
c0024d21:	89 c2                	mov    edx,eax
c0024d23:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024d27:	89 02                	mov    DWORD PTR [edx],eax
c0024d29:	90                   	nop
c0024d2a:	83 c4 28             	add    esp,0x28
c0024d2d:	5b                   	pop    ebx
c0024d2e:	c3                   	ret    
c0024d2f:	90                   	nop

c0024d30 <APICTimer::open(int, int, void*)>:
c0024d30:	57                   	push   edi
c0024d31:	56                   	push   esi
c0024d32:	53                   	push   ebx
c0024d33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d37:	8b 00                	mov    eax,DWORD PTR [eax]
c0024d39:	83 c0 24             	add    eax,0x24
c0024d3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0024d3e:	83 ec 08             	sub    esp,0x8
c0024d41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024d45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024d49:	ff d0                	call   eax
c0024d4b:	83 c4 10             	add    esp,0x10
c0024d4e:	a1 48 c9 02 c0       	mov    eax,ds:0xc002c948
c0024d53:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024d59:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0024d5f:	83 ec 0c             	sub    esp,0xc
c0024d62:	50                   	push   eax
c0024d63:	e8 ce f3 ff ff       	call   c0024136 <APIC::getBase()>
c0024d68:	83 c4 10             	add    esp,0x10
c0024d6b:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0024d71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d75:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0024d7b:	0f b6 f8             	movzx  edi,al
c0024d7e:	89 d0                	mov    eax,edx
c0024d80:	ba 00 00 00 00       	mov    edx,0x0
c0024d85:	89 c1                	mov    ecx,eax
c0024d87:	80 e5 ff             	and    ch,0xff
c0024d8a:	89 cb                	mov    ebx,ecx
c0024d8c:	0f b6 f2             	movzx  esi,dl
c0024d8f:	89 d8                	mov    eax,ebx
c0024d91:	89 f2                	mov    edx,esi
c0024d93:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024d97:	8d 5f 08             	lea    ebx,[edi+0x8]
c0024d9a:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0024d9e:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0024da2:	83 e0 00             	and    eax,0x0
c0024da5:	09 d0                	or     eax,edx
c0024da7:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0024dab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024daf:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0024db5:	8d 50 01             	lea    edx,[eax+0x1]
c0024db8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024dbc:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0024dc2:	0f b6 d0             	movzx  edx,al
c0024dc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024dc9:	83 c2 08             	add    edx,0x8
c0024dcc:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0024dd0:	0f b6 c9             	movzx  ecx,cl
c0024dd3:	81 c9 00 00 01 00    	or     ecx,0x10000
c0024dd9:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0024ddd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024de1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0024de5:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0024deb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024def:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024df3:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0024df9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024dfd:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0024e03:	83 ec 0c             	sub    esp,0xc
c0024e06:	51                   	push   ecx
c0024e07:	6a 01                	push   0x1
c0024e09:	68 fe 4b 02 c0       	push   0xc0024bfe
c0024e0e:	52                   	push   edx
c0024e0f:	50                   	push   eax
c0024e10:	e8 cd ec fe ff       	call   c0013ae2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0024e15:	83 c4 20             	add    esp,0x20
c0024e18:	89 c2                	mov    edx,eax
c0024e1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e1e:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0024e24:	b8 00 00 00 00       	mov    eax,0x0
c0024e29:	5b                   	pop    ebx
c0024e2a:	5e                   	pop    esi
c0024e2b:	5f                   	pop    edi
c0024e2c:	c3                   	ret    
c0024e2d:	90                   	nop

c0024e2e <APICTimer::APICTimer()>:
c0024e2e:	83 ec 0c             	sub    esp,0xc
c0024e31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e35:	83 ec 08             	sub    esp,0x8
c0024e38:	68 dc b7 02 c0       	push   0xc002b7dc
c0024e3d:	50                   	push   eax
c0024e3e:	e8 d3 14 ff ff       	call   c0016316 <Timer::Timer(char const*)>
c0024e43:	83 c4 10             	add    esp,0x10
c0024e46:	ba f0 b7 02 c0       	mov    edx,0xc002b7f0
c0024e4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e4f:	89 10                	mov    DWORD PTR [eax],edx
c0024e51:	90                   	nop
c0024e52:	83 c4 0c             	add    esp,0xc
c0024e55:	c3                   	ret    

c0024e56 <PIT::write(int)>:
c0024e56:	83 ec 10             	sub    esp,0x10
c0024e59:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024e5d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0024e61:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0024e67:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024e6b:	a3 e4 ec 02 c0       	mov    ds:0xc002ece4,eax
c0024e70:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0024e75:	99                   	cdq    
c0024e76:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0024e7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024e7e:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0024e85:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0024e8a:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0024e8e:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0024e93:	ee                   	out    dx,al
c0024e94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024e98:	0f b6 c0             	movzx  eax,al
c0024e9b:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0024ea2:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0024ea6:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0024eaa:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0024eaf:	ee                   	out    dx,al
c0024eb0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024eb4:	c1 f8 08             	sar    eax,0x8
c0024eb7:	0f b6 c0             	movzx  eax,al
c0024eba:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0024ec1:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0024ec5:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0024ec9:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0024ece:	ee                   	out    dx,al
c0024ecf:	90                   	nop
c0024ed0:	83 c4 10             	add    esp,0x10
c0024ed3:	c3                   	ret    

c0024ed4 <pitHandler(regs*, void*)>:
c0024ed4:	83 ec 0c             	sub    esp,0xc
c0024ed7:	a1 e4 ec 02 c0       	mov    eax,ds:0xc002ece4
c0024edc:	99                   	cdq    
c0024edd:	52                   	push   edx
c0024ede:	50                   	push   eax
c0024edf:	6a 00                	push   0x0
c0024ee1:	68 00 ca 9a 3b       	push   0x3b9aca00
c0024ee6:	e8 b1 04 00 00       	call   c002539c <__udivdi3>
c0024eeb:	83 c4 10             	add    esp,0x10
c0024eee:	83 ec 08             	sub    esp,0x8
c0024ef1:	52                   	push   edx
c0024ef2:	50                   	push   eax
c0024ef3:	e8 ad 14 ff ff       	call   c00163a5 <timerHandler(unsigned long long)>
c0024ef8:	83 c4 10             	add    esp,0x10
c0024efb:	90                   	nop
c0024efc:	83 c4 0c             	add    esp,0xc
c0024eff:	c3                   	ret    

c0024f00 <PIT::open(int, int, void*)>:
c0024f00:	83 ec 0c             	sub    esp,0xc
c0024f03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f07:	8b 00                	mov    eax,DWORD PTR [eax]
c0024f09:	83 c0 24             	add    eax,0x24
c0024f0c:	8b 00                	mov    eax,DWORD PTR [eax]
c0024f0e:	83 ec 08             	sub    esp,0x8
c0024f11:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024f15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024f19:	ff d0                	call   eax
c0024f1b:	83 c4 10             	add    esp,0x10
c0024f1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f22:	83 ec 0c             	sub    esp,0xc
c0024f25:	6a 00                	push   0x0
c0024f27:	6a 01                	push   0x1
c0024f29:	68 d4 4e 02 c0       	push   0xc0024ed4
c0024f2e:	6a 00                	push   0x0
c0024f30:	50                   	push   eax
c0024f31:	e8 ac eb fe ff       	call   c0013ae2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0024f36:	83 c4 20             	add    esp,0x20
c0024f39:	89 c2                	mov    edx,eax
c0024f3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f3f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0024f45:	b8 00 00 00 00       	mov    eax,0x0
c0024f4a:	83 c4 0c             	add    esp,0xc
c0024f4d:	c3                   	ret    

c0024f4e <PIT::close(int, int, void*)>:
c0024f4e:	83 ec 0c             	sub    esp,0xc
c0024f51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f55:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0024f5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f63:	6a 01                	push   0x1
c0024f65:	68 d4 4e 02 c0       	push   0xc0024ed4
c0024f6a:	6a 00                	push   0x0
c0024f6c:	50                   	push   eax
c0024f6d:	e8 ae eb fe ff       	call   c0013b20 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0024f72:	83 c4 10             	add    esp,0x10
c0024f75:	b8 00 00 00 00       	mov    eax,0x0
c0024f7a:	83 c4 0c             	add    esp,0xc
c0024f7d:	c3                   	ret    

c0024f7e <PIT::PIT()>:
c0024f7e:	83 ec 0c             	sub    esp,0xc
c0024f81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f85:	83 ec 08             	sub    esp,0x8
c0024f88:	68 18 b8 02 c0       	push   0xc002b818
c0024f8d:	50                   	push   eax
c0024f8e:	e8 83 13 ff ff       	call   c0016316 <Timer::Timer(char const*)>
c0024f93:	83 c4 10             	add    esp,0x10
c0024f96:	ba 40 b8 02 c0       	mov    edx,0xc002b840
c0024f9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f9f:	89 10                	mov    DWORD PTR [eax],edx
c0024fa1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fa5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024fab:	0f b6 d0             	movzx  edx,al
c0024fae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fb2:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0024fb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fbd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024fc3:	0f b6 d0             	movzx  edx,al
c0024fc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fca:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0024fcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fd3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024fd9:	8d 50 01             	lea    edx,[eax+0x1]
c0024fdc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024fe0:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0024fe6:	0f b6 d0             	movzx  edx,al
c0024fe9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fed:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0024ff1:	83 e1 3f             	and    ecx,0x3f
c0024ff4:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0024ff8:	90                   	nop
c0024ff9:	83 c4 0c             	add    esp,0xc
c0024ffc:	c3                   	ret    
c0024ffd:	66 90                	xchg   ax,ax
c0024fff:	90                   	nop

c0025000 <avxDetect>:
c0025000:	b8 00 00 00 00       	mov    eax,0x0
c0025005:	c3                   	ret    

c0025006 <avxSave>:
c0025006:	c3                   	ret    

c0025007 <avxLoad>:
c0025007:	c3                   	ret    

c0025008 <avxInit>:
c0025008:	c3                   	ret    

c0025009 <avxClose>:
c0025009:	c3                   	ret    

c002500a <wouldSheSayYes>:
c002500a:	c3                   	ret    
c002500b:	49                   	dec    ecx
c002500c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0025010:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0025014:	75 20                	jne    c0025036 <sseDetect.noSSE+0x1>
c0025016:	4e                   	dec    esi
c0025017:	79 61                	jns    c002507a <x87Detect+0x14>
c0025019:	68 2e 2e 2e 00       	push   0x2e2e2e
c002501e:	66 90                	xchg   ax,ax

c0025020 <absolutelyNoChanceInHell>:
c0025020:	b8 01 00 00 00       	mov    eax,0x1
c0025025:	0f a2                	cpuid  
c0025027:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002502d:	74 06                	je     c0025035 <sseDetect.noSSE>
c002502f:	b8 01 00 00 00       	mov    eax,0x1
c0025034:	c3                   	ret    

c0025035 <sseDetect.noSSE>:
c0025035:	31 c0                	xor    eax,eax
c0025037:	c3                   	ret    

c0025038 <sseSave>:
c0025038:	0f ae 44 24 08       	fxsave [esp+0x8]
c002503d:	c3                   	ret    

c002503e <sseLoad>:
c002503e:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0025043:	c3                   	ret    

c0025044 <sseInit>:
c0025044:	e8 43 00 00 00       	call   c002508c <x87Init>
c0025049:	0f 20 e0             	mov    eax,cr4
c002504c:	66 0d 00 06          	or     ax,0x600
c0025050:	0f 22 e0             	mov    cr4,eax
c0025053:	c3                   	ret    

c0025054 <sseClose>:
c0025054:	c3                   	ret    
c0025055:	66 90                	xchg   ax,ax
c0025057:	66 90                	xchg   ax,ax
c0025059:	66 90                	xchg   ax,ax
c002505b:	66 90                	xchg   ax,ax
c002505d:	66 90                	xchg   ax,ax
c002505f:	90                   	nop

c0025060 <value_37F>:
c0025060:	7f 03                	jg     c0025065 <value_37A+0x1>

c0025062 <value_37E>:
c0025062:	7e 03                	jle    c0025067 <x87Detect+0x1>

c0025064 <value_37A>:
c0025064:	7a 03                	jp     c0025069 <x87Detect+0x3>

c0025066 <x87Detect>:
c0025066:	b8 01 00 00 00       	mov    eax,0x1
c002506b:	0f a2                	cpuid  
c002506d:	f7 c2 01 00 00 00    	test   edx,0x1
c0025073:	74 06                	je     c002507b <x87Detect.nox87>
c0025075:	b8 01 00 00 00       	mov    eax,0x1
c002507a:	c3                   	ret    

c002507b <x87Detect.nox87>:
c002507b:	b8 00 00 00 00       	mov    eax,0x0
c0025080:	c3                   	ret    

c0025081 <x87Save>:
c0025081:	9b dd 74 24 08       	fsave  [esp+0x8]
c0025086:	c3                   	ret    

c0025087 <x87Load>:
c0025087:	dd 64 24 08          	frstor [esp+0x8]
c002508b:	c3                   	ret    

c002508c <x87Init>:
c002508c:	9b db e3             	finit  
c002508f:	0f 20 c0             	mov    eax,cr0
c0025092:	66 25 fb ff          	and    ax,0xfffb
c0025096:	66 0d 22 00          	or     ax,0x22
c002509a:	0f 22 c0             	mov    cr0,eax
c002509d:	0f 06                	clts   
c002509f:	d9 2d 64 50 02 c0    	fldcw  WORD PTR ds:0xc0025064
c00250a5:	c3                   	ret    

c00250a6 <x87Close>:
c00250a6:	c3                   	ret    
c00250a7:	90                   	nop

c00250a8 <__do_global_ctors_aux>:
c00250a8:	a1 9c 7b 02 c0       	mov    eax,ds:0xc0027b9c
c00250ad:	83 f8 ff             	cmp    eax,0xffffffff
c00250b0:	74 1a                	je     c00250cc <__do_global_ctors_aux+0x24>
c00250b2:	55                   	push   ebp
c00250b3:	89 e5                	mov    ebp,esp
c00250b5:	53                   	push   ebx
c00250b6:	52                   	push   edx
c00250b7:	bb 9c 7b 02 c0       	mov    ebx,0xc0027b9c
c00250bc:	ff d0                	call   eax
c00250be:	83 eb 04             	sub    ebx,0x4
c00250c1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00250c3:	83 f8 ff             	cmp    eax,0xffffffff
c00250c6:	75 f4                	jne    c00250bc <__do_global_ctors_aux+0x14>
c00250c8:	58                   	pop    eax
c00250c9:	5b                   	pop    ebx
c00250ca:	5d                   	pop    ebp
c00250cb:	c3                   	ret    
c00250cc:	c3                   	ret    
c00250cd:	66 90                	xchg   ax,ax
c00250cf:	90                   	nop

c00250d0 <__divdi3>:
c00250d0:	55                   	push   ebp
c00250d1:	57                   	push   edi
c00250d2:	56                   	push   esi
c00250d3:	53                   	push   ebx
c00250d4:	83 ec 1c             	sub    esp,0x1c
c00250d7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00250db:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00250df:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00250e2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00250e6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00250ea:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00250ee:	85 db                	test   ebx,ebx
c00250f0:	0f 88 8e 00 00 00    	js     c0025184 <__divdi3+0xb4>
c00250f6:	89 dd                	mov    ebp,ebx
c00250f8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0025100:	89 d3                	mov    ebx,edx
c0025102:	85 d2                	test   edx,edx
c0025104:	79 0d                	jns    c0025113 <__divdi3+0x43>
c0025106:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002510a:	f7 d8                	neg    eax
c002510c:	83 d2 00             	adc    edx,0x0
c002510f:	f7 da                	neg    edx
c0025111:	89 d3                	mov    ebx,edx
c0025113:	89 c7                	mov    edi,eax
c0025115:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0025118:	85 db                	test   ebx,ebx
c002511a:	75 48                	jne    c0025164 <__divdi3+0x94>
c002511c:	39 ef                	cmp    edi,ebp
c002511e:	76 24                	jbe    c0025144 <__divdi3+0x74>
c0025120:	89 ea                	mov    edx,ebp
c0025122:	f7 f7                	div    edi
c0025124:	89 c1                	mov    ecx,eax
c0025126:	31 f6                	xor    esi,esi
c0025128:	89 c8                	mov    eax,ecx
c002512a:	89 f2                	mov    edx,esi
c002512c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0025130:	85 c9                	test   ecx,ecx
c0025132:	74 07                	je     c002513b <__divdi3+0x6b>
c0025134:	f7 d8                	neg    eax
c0025136:	83 d2 00             	adc    edx,0x0
c0025139:	f7 da                	neg    edx
c002513b:	83 c4 1c             	add    esp,0x1c
c002513e:	5b                   	pop    ebx
c002513f:	5e                   	pop    esi
c0025140:	5f                   	pop    edi
c0025141:	5d                   	pop    ebp
c0025142:	c3                   	ret    
c0025143:	90                   	nop
c0025144:	85 ff                	test   edi,edi
c0025146:	75 0b                	jne    c0025153 <__divdi3+0x83>
c0025148:	b8 01 00 00 00       	mov    eax,0x1
c002514d:	31 d2                	xor    edx,edx
c002514f:	f7 f3                	div    ebx
c0025151:	89 c7                	mov    edi,eax
c0025153:	31 d2                	xor    edx,edx
c0025155:	89 e8                	mov    eax,ebp
c0025157:	f7 f7                	div    edi
c0025159:	89 c6                	mov    esi,eax
c002515b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002515e:	f7 f7                	div    edi
c0025160:	89 c1                	mov    ecx,eax
c0025162:	eb c4                	jmp    c0025128 <__divdi3+0x58>
c0025164:	39 eb                	cmp    ebx,ebp
c0025166:	77 3c                	ja     c00251a4 <__divdi3+0xd4>
c0025168:	0f bd f3             	bsr    esi,ebx
c002516b:	83 f6 1f             	xor    esi,0x1f
c002516e:	75 40                	jne    c00251b0 <__divdi3+0xe0>
c0025170:	39 eb                	cmp    ebx,ebp
c0025172:	72 09                	jb     c002517d <__divdi3+0xad>
c0025174:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0025177:	0f 87 97 00 00 00    	ja     c0025214 <__divdi3+0x144>
c002517d:	b9 01 00 00 00       	mov    ecx,0x1
c0025182:	eb a4                	jmp    c0025128 <__divdi3+0x58>
c0025184:	f7 d9                	neg    ecx
c0025186:	83 d3 00             	adc    ebx,0x0
c0025189:	f7 db                	neg    ebx
c002518b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002518e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0025192:	89 dd                	mov    ebp,ebx
c0025194:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c002519c:	e9 5f ff ff ff       	jmp    c0025100 <__divdi3+0x30>
c00251a1:	8d 76 00             	lea    esi,[esi+0x0]
c00251a4:	31 f6                	xor    esi,esi
c00251a6:	31 c9                	xor    ecx,ecx
c00251a8:	e9 7b ff ff ff       	jmp    c0025128 <__divdi3+0x58>
c00251ad:	8d 76 00             	lea    esi,[esi+0x0]
c00251b0:	b8 20 00 00 00       	mov    eax,0x20
c00251b5:	29 f0                	sub    eax,esi
c00251b7:	89 f1                	mov    ecx,esi
c00251b9:	d3 e3                	shl    ebx,cl
c00251bb:	89 fa                	mov    edx,edi
c00251bd:	88 c1                	mov    cl,al
c00251bf:	d3 ea                	shr    edx,cl
c00251c1:	09 da                	or     edx,ebx
c00251c3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00251c7:	89 f1                	mov    ecx,esi
c00251c9:	d3 e7                	shl    edi,cl
c00251cb:	89 eb                	mov    ebx,ebp
c00251cd:	88 c1                	mov    cl,al
c00251cf:	d3 eb                	shr    ebx,cl
c00251d1:	89 f1                	mov    ecx,esi
c00251d3:	d3 e5                	shl    ebp,cl
c00251d5:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00251d8:	88 c1                	mov    cl,al
c00251da:	d3 ea                	shr    edx,cl
c00251dc:	09 d5                	or     ebp,edx
c00251de:	89 e8                	mov    eax,ebp
c00251e0:	89 da                	mov    edx,ebx
c00251e2:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00251e6:	89 d3                	mov    ebx,edx
c00251e8:	89 c5                	mov    ebp,eax
c00251ea:	f7 e7                	mul    edi
c00251ec:	39 d3                	cmp    ebx,edx
c00251ee:	72 18                	jb     c0025208 <__divdi3+0x138>
c00251f0:	74 0a                	je     c00251fc <__divdi3+0x12c>
c00251f2:	89 e9                	mov    ecx,ebp
c00251f4:	31 f6                	xor    esi,esi
c00251f6:	e9 2d ff ff ff       	jmp    c0025128 <__divdi3+0x58>
c00251fb:	90                   	nop
c00251fc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00251ff:	89 f1                	mov    ecx,esi
c0025201:	d3 e7                	shl    edi,cl
c0025203:	39 c7                	cmp    edi,eax
c0025205:	73 eb                	jae    c00251f2 <__divdi3+0x122>
c0025207:	90                   	nop
c0025208:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002520b:	31 f6                	xor    esi,esi
c002520d:	e9 16 ff ff ff       	jmp    c0025128 <__divdi3+0x58>
c0025212:	66 90                	xchg   ax,ax
c0025214:	31 c9                	xor    ecx,ecx
c0025216:	e9 0d ff ff ff       	jmp    c0025128 <__divdi3+0x58>
c002521b:	90                   	nop

c002521c <__moddi3>:
c002521c:	55                   	push   ebp
c002521d:	57                   	push   edi
c002521e:	56                   	push   esi
c002521f:	53                   	push   ebx
c0025220:	83 ec 2c             	sub    esp,0x2c
c0025223:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0025227:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002522b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002522f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0025233:	85 db                	test   ebx,ebx
c0025235:	0f 88 85 00 00 00    	js     c00252c0 <__moddi3+0xa4>
c002523b:	89 de                	mov    esi,ebx
c002523d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0025245:	89 d7                	mov    edi,edx
c0025247:	85 d2                	test   edx,edx
c0025249:	79 09                	jns    c0025254 <__moddi3+0x38>
c002524b:	f7 d8                	neg    eax
c002524d:	83 d2 00             	adc    edx,0x0
c0025250:	f7 da                	neg    edx
c0025252:	89 d7                	mov    edi,edx
c0025254:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025258:	89 cd                	mov    ebp,ecx
c002525a:	85 ff                	test   edi,edi
c002525c:	75 52                	jne    c00252b0 <__moddi3+0x94>
c002525e:	89 c3                	mov    ebx,eax
c0025260:	39 f0                	cmp    eax,esi
c0025262:	76 24                	jbe    c0025288 <__moddi3+0x6c>
c0025264:	89 c8                	mov    eax,ecx
c0025266:	89 f2                	mov    edx,esi
c0025268:	f7 f3                	div    ebx
c002526a:	89 d6                	mov    esi,edx
c002526c:	89 f0                	mov    eax,esi
c002526e:	31 d2                	xor    edx,edx
c0025270:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025274:	85 c9                	test   ecx,ecx
c0025276:	74 07                	je     c002527f <__moddi3+0x63>
c0025278:	f7 d8                	neg    eax
c002527a:	83 d2 00             	adc    edx,0x0
c002527d:	f7 da                	neg    edx
c002527f:	83 c4 2c             	add    esp,0x2c
c0025282:	5b                   	pop    ebx
c0025283:	5e                   	pop    esi
c0025284:	5f                   	pop    edi
c0025285:	5d                   	pop    ebp
c0025286:	c3                   	ret    
c0025287:	90                   	nop
c0025288:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002528c:	85 db                	test   ebx,ebx
c002528e:	75 0d                	jne    c002529d <__moddi3+0x81>
c0025290:	b8 01 00 00 00       	mov    eax,0x1
c0025295:	31 d2                	xor    edx,edx
c0025297:	f7 f7                	div    edi
c0025299:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002529d:	89 f0                	mov    eax,esi
c002529f:	31 d2                	xor    edx,edx
c00252a1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00252a5:	f7 f7                	div    edi
c00252a7:	89 e8                	mov    eax,ebp
c00252a9:	f7 f7                	div    edi
c00252ab:	89 d6                	mov    esi,edx
c00252ad:	eb bd                	jmp    c002526c <__moddi3+0x50>
c00252af:	90                   	nop
c00252b0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00252b4:	39 f7                	cmp    edi,esi
c00252b6:	76 20                	jbe    c00252d8 <__moddi3+0xbc>
c00252b8:	89 c8                	mov    eax,ecx
c00252ba:	89 f2                	mov    edx,esi
c00252bc:	eb b2                	jmp    c0025270 <__moddi3+0x54>
c00252be:	66 90                	xchg   ax,ax
c00252c0:	f7 d9                	neg    ecx
c00252c2:	83 d3 00             	adc    ebx,0x0
c00252c5:	f7 db                	neg    ebx
c00252c7:	89 de                	mov    esi,ebx
c00252c9:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00252d1:	e9 6f ff ff ff       	jmp    c0025245 <__moddi3+0x29>
c00252d6:	66 90                	xchg   ax,ax
c00252d8:	0f bd c7             	bsr    eax,edi
c00252db:	83 f0 1f             	xor    eax,0x1f
c00252de:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00252e2:	75 24                	jne    c0025308 <__moddi3+0xec>
c00252e4:	39 f7                	cmp    edi,esi
c00252e6:	72 06                	jb     c00252ee <__moddi3+0xd2>
c00252e8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00252ec:	77 0c                	ja     c00252fa <__moddi3+0xde>
c00252ee:	89 e9                	mov    ecx,ebp
c00252f0:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00252f4:	19 fe                	sbb    esi,edi
c00252f6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00252fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00252fe:	89 f2                	mov    edx,esi
c0025300:	e9 6b ff ff ff       	jmp    c0025270 <__moddi3+0x54>
c0025305:	8d 76 00             	lea    esi,[esi+0x0]
c0025308:	b8 20 00 00 00       	mov    eax,0x20
c002530d:	89 c2                	mov    edx,eax
c002530f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0025313:	29 da                	sub    edx,ebx
c0025315:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0025319:	88 d9                	mov    cl,bl
c002531b:	d3 e7                	shl    edi,cl
c002531d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025321:	88 d1                	mov    cl,dl
c0025323:	d3 e8                	shr    eax,cl
c0025325:	09 c7                	or     edi,eax
c0025327:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002532b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002532f:	89 d8                	mov    eax,ebx
c0025331:	88 d9                	mov    cl,bl
c0025333:	d3 e7                	shl    edi,cl
c0025335:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0025339:	89 f3                	mov    ebx,esi
c002533b:	88 d1                	mov    cl,dl
c002533d:	d3 eb                	shr    ebx,cl
c002533f:	89 c7                	mov    edi,eax
c0025341:	88 c1                	mov    cl,al
c0025343:	d3 e6                	shl    esi,cl
c0025345:	89 e8                	mov    eax,ebp
c0025347:	88 d1                	mov    cl,dl
c0025349:	d3 e8                	shr    eax,cl
c002534b:	09 f0                	or     eax,esi
c002534d:	89 f9                	mov    ecx,edi
c002534f:	d3 e5                	shl    ebp,cl
c0025351:	89 da                	mov    edx,ebx
c0025353:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0025357:	89 d3                	mov    ebx,edx
c0025359:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002535d:	89 c6                	mov    esi,eax
c002535f:	89 d1                	mov    ecx,edx
c0025361:	39 d3                	cmp    ebx,edx
c0025363:	72 27                	jb     c002538c <__moddi3+0x170>
c0025365:	74 21                	je     c0025388 <__moddi3+0x16c>
c0025367:	29 f5                	sub    ebp,esi
c0025369:	19 cb                	sbb    ebx,ecx
c002536b:	89 de                	mov    esi,ebx
c002536d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0025371:	d3 e6                	shl    esi,cl
c0025373:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0025377:	89 f9                	mov    ecx,edi
c0025379:	d3 ed                	shr    ebp,cl
c002537b:	09 ee                	or     esi,ebp
c002537d:	89 f0                	mov    eax,esi
c002537f:	d3 eb                	shr    ebx,cl
c0025381:	89 da                	mov    edx,ebx
c0025383:	e9 e8 fe ff ff       	jmp    c0025270 <__moddi3+0x54>
c0025388:	39 c5                	cmp    ebp,eax
c002538a:	73 db                	jae    c0025367 <__moddi3+0x14b>
c002538c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0025390:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0025394:	89 d1                	mov    ecx,edx
c0025396:	89 c6                	mov    esi,eax
c0025398:	eb cd                	jmp    c0025367 <__moddi3+0x14b>
c002539a:	66 90                	xchg   ax,ax

c002539c <__udivdi3>:
c002539c:	55                   	push   ebp
c002539d:	57                   	push   edi
c002539e:	56                   	push   esi
c002539f:	53                   	push   ebx
c00253a0:	83 ec 1c             	sub    esp,0x1c
c00253a3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00253a7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00253ab:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00253af:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00253b3:	85 d2                	test   edx,edx
c00253b5:	75 41                	jne    c00253f8 <__udivdi3+0x5c>
c00253b7:	39 f7                	cmp    edi,esi
c00253b9:	76 15                	jbe    c00253d0 <__udivdi3+0x34>
c00253bb:	89 e8                	mov    eax,ebp
c00253bd:	89 f2                	mov    edx,esi
c00253bf:	f7 f7                	div    edi
c00253c1:	31 db                	xor    ebx,ebx
c00253c3:	89 da                	mov    edx,ebx
c00253c5:	83 c4 1c             	add    esp,0x1c
c00253c8:	5b                   	pop    ebx
c00253c9:	5e                   	pop    esi
c00253ca:	5f                   	pop    edi
c00253cb:	5d                   	pop    ebp
c00253cc:	c3                   	ret    
c00253cd:	8d 76 00             	lea    esi,[esi+0x0]
c00253d0:	89 f9                	mov    ecx,edi
c00253d2:	85 ff                	test   edi,edi
c00253d4:	75 0b                	jne    c00253e1 <__udivdi3+0x45>
c00253d6:	b8 01 00 00 00       	mov    eax,0x1
c00253db:	31 d2                	xor    edx,edx
c00253dd:	f7 f7                	div    edi
c00253df:	89 c1                	mov    ecx,eax
c00253e1:	31 d2                	xor    edx,edx
c00253e3:	89 f0                	mov    eax,esi
c00253e5:	f7 f1                	div    ecx
c00253e7:	89 c3                	mov    ebx,eax
c00253e9:	89 e8                	mov    eax,ebp
c00253eb:	f7 f1                	div    ecx
c00253ed:	89 da                	mov    edx,ebx
c00253ef:	83 c4 1c             	add    esp,0x1c
c00253f2:	5b                   	pop    ebx
c00253f3:	5e                   	pop    esi
c00253f4:	5f                   	pop    edi
c00253f5:	5d                   	pop    ebp
c00253f6:	c3                   	ret    
c00253f7:	90                   	nop
c00253f8:	39 f2                	cmp    edx,esi
c00253fa:	77 1c                	ja     c0025418 <__udivdi3+0x7c>
c00253fc:	0f bd da             	bsr    ebx,edx
c00253ff:	83 f3 1f             	xor    ebx,0x1f
c0025402:	75 24                	jne    c0025428 <__udivdi3+0x8c>
c0025404:	39 f2                	cmp    edx,esi
c0025406:	72 08                	jb     c0025410 <__udivdi3+0x74>
c0025408:	39 ef                	cmp    edi,ebp
c002540a:	0f 87 84 00 00 00    	ja     c0025494 <__udivdi3+0xf8>
c0025410:	b8 01 00 00 00       	mov    eax,0x1
c0025415:	eb ac                	jmp    c00253c3 <__udivdi3+0x27>
c0025417:	90                   	nop
c0025418:	31 db                	xor    ebx,ebx
c002541a:	31 c0                	xor    eax,eax
c002541c:	89 da                	mov    edx,ebx
c002541e:	83 c4 1c             	add    esp,0x1c
c0025421:	5b                   	pop    ebx
c0025422:	5e                   	pop    esi
c0025423:	5f                   	pop    edi
c0025424:	5d                   	pop    ebp
c0025425:	c3                   	ret    
c0025426:	66 90                	xchg   ax,ax
c0025428:	b8 20 00 00 00       	mov    eax,0x20
c002542d:	29 d8                	sub    eax,ebx
c002542f:	88 d9                	mov    cl,bl
c0025431:	d3 e2                	shl    edx,cl
c0025433:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0025437:	89 fa                	mov    edx,edi
c0025439:	88 c1                	mov    cl,al
c002543b:	d3 ea                	shr    edx,cl
c002543d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0025441:	09 d1                	or     ecx,edx
c0025443:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0025447:	88 d9                	mov    cl,bl
c0025449:	d3 e7                	shl    edi,cl
c002544b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002544f:	89 f7                	mov    edi,esi
c0025451:	88 c1                	mov    cl,al
c0025453:	d3 ef                	shr    edi,cl
c0025455:	88 d9                	mov    cl,bl
c0025457:	d3 e6                	shl    esi,cl
c0025459:	89 ea                	mov    edx,ebp
c002545b:	88 c1                	mov    cl,al
c002545d:	d3 ea                	shr    edx,cl
c002545f:	09 d6                	or     esi,edx
c0025461:	89 f0                	mov    eax,esi
c0025463:	89 fa                	mov    edx,edi
c0025465:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0025469:	89 d7                	mov    edi,edx
c002546b:	89 c6                	mov    esi,eax
c002546d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0025471:	39 d7                	cmp    edi,edx
c0025473:	72 13                	jb     c0025488 <__udivdi3+0xec>
c0025475:	74 09                	je     c0025480 <__udivdi3+0xe4>
c0025477:	89 f0                	mov    eax,esi
c0025479:	31 db                	xor    ebx,ebx
c002547b:	e9 43 ff ff ff       	jmp    c00253c3 <__udivdi3+0x27>
c0025480:	88 d9                	mov    cl,bl
c0025482:	d3 e5                	shl    ebp,cl
c0025484:	39 c5                	cmp    ebp,eax
c0025486:	73 ef                	jae    c0025477 <__udivdi3+0xdb>
c0025488:	8d 46 ff             	lea    eax,[esi-0x1]
c002548b:	31 db                	xor    ebx,ebx
c002548d:	e9 31 ff ff ff       	jmp    c00253c3 <__udivdi3+0x27>
c0025492:	66 90                	xchg   ax,ax
c0025494:	31 c0                	xor    eax,eax
c0025496:	e9 28 ff ff ff       	jmp    c00253c3 <__udivdi3+0x27>
c002549b:	90                   	nop

c002549c <__umoddi3>:
c002549c:	55                   	push   ebp
c002549d:	57                   	push   edi
c002549e:	56                   	push   esi
c002549f:	53                   	push   ebx
c00254a0:	83 ec 1c             	sub    esp,0x1c
c00254a3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00254a7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00254ab:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00254af:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00254b3:	89 da                	mov    edx,ebx
c00254b5:	85 c0                	test   eax,eax
c00254b7:	75 37                	jne    c00254f0 <__umoddi3+0x54>
c00254b9:	39 df                	cmp    edi,ebx
c00254bb:	76 13                	jbe    c00254d0 <__umoddi3+0x34>
c00254bd:	89 f0                	mov    eax,esi
c00254bf:	f7 f7                	div    edi
c00254c1:	89 d0                	mov    eax,edx
c00254c3:	31 d2                	xor    edx,edx
c00254c5:	83 c4 1c             	add    esp,0x1c
c00254c8:	5b                   	pop    ebx
c00254c9:	5e                   	pop    esi
c00254ca:	5f                   	pop    edi
c00254cb:	5d                   	pop    ebp
c00254cc:	c3                   	ret    
c00254cd:	8d 76 00             	lea    esi,[esi+0x0]
c00254d0:	89 fd                	mov    ebp,edi
c00254d2:	85 ff                	test   edi,edi
c00254d4:	75 0b                	jne    c00254e1 <__umoddi3+0x45>
c00254d6:	b8 01 00 00 00       	mov    eax,0x1
c00254db:	31 d2                	xor    edx,edx
c00254dd:	f7 f7                	div    edi
c00254df:	89 c5                	mov    ebp,eax
c00254e1:	89 d8                	mov    eax,ebx
c00254e3:	31 d2                	xor    edx,edx
c00254e5:	f7 f5                	div    ebp
c00254e7:	89 f0                	mov    eax,esi
c00254e9:	f7 f5                	div    ebp
c00254eb:	89 d0                	mov    eax,edx
c00254ed:	eb d4                	jmp    c00254c3 <__umoddi3+0x27>
c00254ef:	90                   	nop
c00254f0:	89 f1                	mov    ecx,esi
c00254f2:	39 d8                	cmp    eax,ebx
c00254f4:	76 0a                	jbe    c0025500 <__umoddi3+0x64>
c00254f6:	89 f0                	mov    eax,esi
c00254f8:	83 c4 1c             	add    esp,0x1c
c00254fb:	5b                   	pop    ebx
c00254fc:	5e                   	pop    esi
c00254fd:	5f                   	pop    edi
c00254fe:	5d                   	pop    ebp
c00254ff:	c3                   	ret    
c0025500:	0f bd e8             	bsr    ebp,eax
c0025503:	83 f5 1f             	xor    ebp,0x1f
c0025506:	75 1c                	jne    c0025524 <__umoddi3+0x88>
c0025508:	39 d8                	cmp    eax,ebx
c002550a:	72 04                	jb     c0025510 <__umoddi3+0x74>
c002550c:	39 f7                	cmp    edi,esi
c002550e:	77 08                	ja     c0025518 <__umoddi3+0x7c>
c0025510:	89 da                	mov    edx,ebx
c0025512:	29 fe                	sub    esi,edi
c0025514:	19 c2                	sbb    edx,eax
c0025516:	89 f1                	mov    ecx,esi
c0025518:	89 c8                	mov    eax,ecx
c002551a:	83 c4 1c             	add    esp,0x1c
c002551d:	5b                   	pop    ebx
c002551e:	5e                   	pop    esi
c002551f:	5f                   	pop    edi
c0025520:	5d                   	pop    ebp
c0025521:	c3                   	ret    
c0025522:	66 90                	xchg   ax,ax
c0025524:	ba 20 00 00 00       	mov    edx,0x20
c0025529:	29 ea                	sub    edx,ebp
c002552b:	89 e9                	mov    ecx,ebp
c002552d:	d3 e0                	shl    eax,cl
c002552f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025533:	89 f8                	mov    eax,edi
c0025535:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0025539:	88 d1                	mov    cl,dl
c002553b:	d3 e8                	shr    eax,cl
c002553d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0025541:	09 c1                	or     ecx,eax
c0025543:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0025547:	89 e9                	mov    ecx,ebp
c0025549:	d3 e7                	shl    edi,cl
c002554b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002554f:	89 d8                	mov    eax,ebx
c0025551:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0025555:	88 d1                	mov    cl,dl
c0025557:	d3 e8                	shr    eax,cl
c0025559:	89 c7                	mov    edi,eax
c002555b:	89 e9                	mov    ecx,ebp
c002555d:	d3 e3                	shl    ebx,cl
c002555f:	89 f0                	mov    eax,esi
c0025561:	88 d1                	mov    cl,dl
c0025563:	d3 e8                	shr    eax,cl
c0025565:	09 d8                	or     eax,ebx
c0025567:	89 e9                	mov    ecx,ebp
c0025569:	d3 e6                	shl    esi,cl
c002556b:	89 f3                	mov    ebx,esi
c002556d:	89 fa                	mov    edx,edi
c002556f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0025573:	89 d1                	mov    ecx,edx
c0025575:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0025579:	89 c6                	mov    esi,eax
c002557b:	89 d7                	mov    edi,edx
c002557d:	39 d1                	cmp    ecx,edx
c002557f:	72 27                	jb     c00255a8 <__umoddi3+0x10c>
c0025581:	74 21                	je     c00255a4 <__umoddi3+0x108>
c0025583:	89 ca                	mov    edx,ecx
c0025585:	29 f3                	sub    ebx,esi
c0025587:	19 fa                	sbb    edx,edi
c0025589:	89 d0                	mov    eax,edx
c002558b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c002558f:	d3 e0                	shl    eax,cl
c0025591:	89 e9                	mov    ecx,ebp
c0025593:	d3 eb                	shr    ebx,cl
c0025595:	09 d8                	or     eax,ebx
c0025597:	d3 ea                	shr    edx,cl
c0025599:	83 c4 1c             	add    esp,0x1c
c002559c:	5b                   	pop    ebx
c002559d:	5e                   	pop    esi
c002559e:	5f                   	pop    edi
c002559f:	5d                   	pop    ebp
c00255a0:	c3                   	ret    
c00255a1:	8d 76 00             	lea    esi,[esi+0x0]
c00255a4:	39 c3                	cmp    ebx,eax
c00255a6:	73 db                	jae    c0025583 <__umoddi3+0xe7>
c00255a8:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00255ac:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c00255b0:	89 d7                	mov    edi,edx
c00255b2:	89 c6                	mov    esi,eax
c00255b4:	eb cd                	jmp    c0025583 <__umoddi3+0xe7>

c00255b6 <__addsf3>:
c00255b6:	55                   	push   ebp
c00255b7:	89 e5                	mov    ebp,esp
c00255b9:	57                   	push   edi
c00255ba:	56                   	push   esi
c00255bb:	53                   	push   ebx
c00255bc:	83 ec 08             	sub    esp,0x8
c00255bf:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00255c2:	89 fa                	mov    edx,edi
c00255c4:	89 f8                	mov    eax,edi
c00255c6:	c1 f8 17             	sar    eax,0x17
c00255c9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00255cc:	c1 e2 08             	shl    edx,0x8
c00255cf:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00255d5:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00255d8:	89 de                	mov    esi,ebx
c00255da:	c1 fe 17             	sar    esi,0x17
c00255dd:	c1 e3 08             	shl    ebx,0x8
c00255e0:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00255e6:	31 f0                	xor    eax,esi
c00255e8:	0f 88 3b 01 00 00    	js     c0025729 <__addsf3+0x173>
c00255ee:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00255f1:	29 f1                	sub    ecx,esi
c00255f3:	85 c9                	test   ecx,ecx
c00255f5:	7e 54                	jle    c002564b <__addsf3+0x95>
c00255f7:	89 f0                	mov    eax,esi
c00255f9:	84 c0                	test   al,al
c00255fb:	75 10                	jne    c002560d <__addsf3+0x57>
c00255fd:	85 db                	test   ebx,ebx
c00255ff:	0f 84 aa 02 00 00    	je     c00258af <__addsf3+0x2f9>
c0025605:	49                   	dec    ecx
c0025606:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0025609:	74 38                	je     c0025643 <__addsf3+0x8d>
c002560b:	eb 13                	jmp    c0025620 <__addsf3+0x6a>
c002560d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025610:	f7 d0                	not    eax
c0025612:	84 c0                	test   al,al
c0025614:	0f 84 95 02 00 00    	je     c00258af <__addsf3+0x2f9>
c002561a:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0025620:	83 f9 1f             	cmp    ecx,0x1f
c0025623:	0f 8f 86 02 00 00    	jg     c00258af <__addsf3+0x2f9>
c0025629:	89 de                	mov    esi,ebx
c002562b:	d3 ee                	shr    esi,cl
c002562d:	b8 20 00 00 00       	mov    eax,0x20
c0025632:	29 c8                	sub    eax,ecx
c0025634:	89 c1                	mov    ecx,eax
c0025636:	d3 e3                	shl    ebx,cl
c0025638:	31 c0                	xor    eax,eax
c002563a:	85 db                	test   ebx,ebx
c002563c:	0f 95 c0             	setne  al
c002563f:	09 f0                	or     eax,esi
c0025641:	01 d0                	add    eax,edx
c0025643:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0025646:	e9 b6 00 00 00       	jmp    c0025701 <__addsf3+0x14b>
c002564b:	74 5c                	je     c00256a9 <__addsf3+0xf3>
c002564d:	89 f1                	mov    ecx,esi
c002564f:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0025652:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0025655:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0025659:	75 14                	jne    c002566f <__addsf3+0xb9>
c002565b:	85 d2                	test   edx,edx
c002565d:	0f 84 4c 02 00 00    	je     c00258af <__addsf3+0x2f9>
c0025663:	49                   	dec    ecx
c0025664:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0025667:	0f 84 94 00 00 00    	je     c0025701 <__addsf3+0x14b>
c002566d:	eb 12                	jmp    c0025681 <__addsf3+0xcb>
c002566f:	89 f0                	mov    eax,esi
c0025671:	f7 d0                	not    eax
c0025673:	84 c0                	test   al,al
c0025675:	0f 84 34 02 00 00    	je     c00258af <__addsf3+0x2f9>
c002567b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0025681:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0025684:	83 f9 1f             	cmp    ecx,0x1f
c0025687:	0f 8f 22 02 00 00    	jg     c00258af <__addsf3+0x2f9>
c002568d:	89 d7                	mov    edi,edx
c002568f:	d3 ef                	shr    edi,cl
c0025691:	b8 20 00 00 00       	mov    eax,0x20
c0025696:	29 c8                	sub    eax,ecx
c0025698:	89 c1                	mov    ecx,eax
c002569a:	d3 e2                	shl    edx,cl
c002569c:	31 c0                	xor    eax,eax
c002569e:	85 d2                	test   edx,edx
c00256a0:	0f 95 c0             	setne  al
c00256a3:	09 f8                	or     eax,edi
c00256a5:	01 d8                	add    eax,ebx
c00256a7:	eb 58                	jmp    c0025701 <__addsf3+0x14b>
c00256a9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00256ac:	8d 70 01             	lea    esi,[eax+0x1]
c00256af:	f7 c6 fe 00 00 00    	test   esi,0xfe
c00256b5:	75 32                	jne    c00256e9 <__addsf3+0x133>
c00256b7:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00256bb:	75 1f                	jne    c00256dc <__addsf3+0x126>
c00256bd:	85 d2                	test   edx,edx
c00256bf:	0f 84 e0 01 00 00    	je     c00258a5 <__addsf3+0x2ef>
c00256c5:	85 db                	test   ebx,ebx
c00256c7:	0f 84 e2 01 00 00    	je     c00258af <__addsf3+0x2f9>
c00256cd:	89 d0                	mov    eax,edx
c00256cf:	01 d8                	add    eax,ebx
c00256d1:	0f 89 a9 01 00 00    	jns    c0025880 <__addsf3+0x2ca>
c00256d7:	e9 9d 01 00 00       	jmp    c0025879 <__addsf3+0x2c3>
c00256dc:	85 d2                	test   edx,edx
c00256de:	0f 85 cb 01 00 00    	jne    c00258af <__addsf3+0x2f9>
c00256e4:	e9 bc 01 00 00       	jmp    c00258a5 <__addsf3+0x2ef>
c00256e9:	31 c0                	xor    eax,eax
c00256eb:	89 f1                	mov    ecx,esi
c00256ed:	f7 d1                	not    ecx
c00256ef:	84 c9                	test   cl,cl
c00256f1:	0f 84 90 01 00 00    	je     c0025887 <__addsf3+0x2d1>
c00256f7:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00256fa:	d1 e8                	shr    eax,1
c00256fc:	e9 86 01 00 00       	jmp    c0025887 <__addsf3+0x2d1>
c0025701:	85 c0                	test   eax,eax
c0025703:	0f 89 7e 01 00 00    	jns    c0025887 <__addsf3+0x2d1>
c0025709:	46                   	inc    esi
c002570a:	89 f2                	mov    edx,esi
c002570c:	f7 d2                	not    edx
c002570e:	84 d2                	test   dl,dl
c0025710:	0f 84 6f 01 00 00    	je     c0025885 <__addsf3+0x2cf>
c0025716:	89 c2                	mov    edx,eax
c0025718:	83 e2 01             	and    edx,0x1
c002571b:	d1 e8                	shr    eax,1
c002571d:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0025722:	09 d0                	or     eax,edx
c0025724:	e9 5e 01 00 00       	jmp    c0025887 <__addsf3+0x2d1>
c0025729:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c002572d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025730:	89 f0                	mov    eax,esi
c0025732:	0f b6 c0             	movzx  eax,al
c0025735:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0025738:	29 c1                	sub    ecx,eax
c002573a:	85 c9                	test   ecx,ecx
c002573c:	7e 55                	jle    c0025793 <__addsf3+0x1dd>
c002573e:	85 c0                	test   eax,eax
c0025740:	75 11                	jne    c0025753 <__addsf3+0x19d>
c0025742:	85 db                	test   ebx,ebx
c0025744:	0f 84 65 01 00 00    	je     c00258af <__addsf3+0x2f9>
c002574a:	49                   	dec    ecx
c002574b:	75 19                	jne    c0025766 <__addsf3+0x1b0>
c002574d:	89 d0                	mov    eax,edx
c002574f:	29 d8                	sub    eax,ebx
c0025751:	eb 38                	jmp    c002578b <__addsf3+0x1d5>
c0025753:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025756:	f7 d0                	not    eax
c0025758:	84 c0                	test   al,al
c002575a:	0f 84 4f 01 00 00    	je     c00258af <__addsf3+0x2f9>
c0025760:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0025766:	83 f9 1f             	cmp    ecx,0x1f
c0025769:	0f 8f 40 01 00 00    	jg     c00258af <__addsf3+0x2f9>
c002576f:	89 de                	mov    esi,ebx
c0025771:	d3 ee                	shr    esi,cl
c0025773:	b8 20 00 00 00       	mov    eax,0x20
c0025778:	29 c8                	sub    eax,ecx
c002577a:	89 c1                	mov    ecx,eax
c002577c:	d3 e3                	shl    ebx,cl
c002577e:	31 c0                	xor    eax,eax
c0025780:	85 db                	test   ebx,ebx
c0025782:	0f 95 c0             	setne  al
c0025785:	09 f0                	or     eax,esi
c0025787:	29 c2                	sub    edx,eax
c0025789:	89 d0                	mov    eax,edx
c002578b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002578e:	e9 af 00 00 00       	jmp    c0025842 <__addsf3+0x28c>
c0025793:	74 5c                	je     c00257f1 <__addsf3+0x23b>
c0025795:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0025798:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002579b:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c002579f:	75 14                	jne    c00257b5 <__addsf3+0x1ff>
c00257a1:	85 d2                	test   edx,edx
c00257a3:	0f 84 06 01 00 00    	je     c00258af <__addsf3+0x2f9>
c00257a9:	48                   	dec    eax
c00257aa:	75 1b                	jne    c00257c7 <__addsf3+0x211>
c00257ac:	89 d8                	mov    eax,ebx
c00257ae:	29 d0                	sub    eax,edx
c00257b0:	e9 8d 00 00 00       	jmp    c0025842 <__addsf3+0x28c>
c00257b5:	89 f1                	mov    ecx,esi
c00257b7:	f7 d1                	not    ecx
c00257b9:	84 c9                	test   cl,cl
c00257bb:	0f 84 ee 00 00 00    	je     c00258af <__addsf3+0x2f9>
c00257c1:	81 ca 00 00 00 80    	or     edx,0x80000000
c00257c7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00257ca:	83 f8 1f             	cmp    eax,0x1f
c00257cd:	0f 8f dc 00 00 00    	jg     c00258af <__addsf3+0x2f9>
c00257d3:	89 d7                	mov    edi,edx
c00257d5:	88 c1                	mov    cl,al
c00257d7:	d3 ef                	shr    edi,cl
c00257d9:	b9 20 00 00 00       	mov    ecx,0x20
c00257de:	29 c1                	sub    ecx,eax
c00257e0:	d3 e2                	shl    edx,cl
c00257e2:	31 c0                	xor    eax,eax
c00257e4:	85 d2                	test   edx,edx
c00257e6:	0f 95 c0             	setne  al
c00257e9:	09 f8                	or     eax,edi
c00257eb:	29 c3                	sub    ebx,eax
c00257ed:	89 d8                	mov    eax,ebx
c00257ef:	eb 51                	jmp    c0025842 <__addsf3+0x28c>
c00257f1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00257f4:	40                   	inc    eax
c00257f5:	a8 fe                	test   al,0xfe
c00257f7:	75 3d                	jne    c0025836 <__addsf3+0x280>
c00257f9:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c00257fd:	0f 85 a7 00 00 00    	jne    c00258aa <__addsf3+0x2f4>
c0025803:	85 d2                	test   edx,edx
c0025805:	75 12                	jne    c0025819 <__addsf3+0x263>
c0025807:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002580a:	85 db                	test   ebx,ebx
c002580c:	0f 85 9d 00 00 00    	jne    c00258af <__addsf3+0x2f9>
c0025812:	31 ff                	xor    edi,edi
c0025814:	e9 96 00 00 00       	jmp    c00258af <__addsf3+0x2f9>
c0025819:	85 db                	test   ebx,ebx
c002581b:	0f 84 8e 00 00 00    	je     c00258af <__addsf3+0x2f9>
c0025821:	89 d0                	mov    eax,edx
c0025823:	29 d8                	sub    eax,ebx
c0025825:	79 06                	jns    c002582d <__addsf3+0x277>
c0025827:	89 d8                	mov    eax,ebx
c0025829:	29 d0                	sub    eax,edx
c002582b:	eb 5a                	jmp    c0025887 <__addsf3+0x2d1>
c002582d:	bf 00 00 00 00       	mov    edi,0x0
c0025832:	74 7b                	je     c00258af <__addsf3+0x2f9>
c0025834:	eb 4a                	jmp    c0025880 <__addsf3+0x2ca>
c0025836:	89 d0                	mov    eax,edx
c0025838:	29 d8                	sub    eax,ebx
c002583a:	79 12                	jns    c002584e <__addsf3+0x298>
c002583c:	89 d8                	mov    eax,ebx
c002583e:	29 d0                	sub    eax,edx
c0025840:	eb 09                	jmp    c002584b <__addsf3+0x295>
c0025842:	85 c0                	test   eax,eax
c0025844:	79 41                	jns    c0025887 <__addsf3+0x2d1>
c0025846:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002584b:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c002584e:	31 f6                	xor    esi,esi
c0025850:	85 c0                	test   eax,eax
c0025852:	74 33                	je     c0025887 <__addsf3+0x2d1>
c0025854:	0f bd c8             	bsr    ecx,eax
c0025857:	83 f1 1f             	xor    ecx,0x1f
c002585a:	d3 e0                	shl    eax,cl
c002585c:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0025860:	39 ca                	cmp    edx,ecx
c0025862:	7f 10                	jg     c0025874 <__addsf3+0x2be>
c0025864:	29 d1                	sub    ecx,edx
c0025866:	41                   	inc    ecx
c0025867:	d3 e8                	shr    eax,cl
c0025869:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002586c:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0025872:	eb 13                	jmp    c0025887 <__addsf3+0x2d1>
c0025874:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0025877:	29 ce                	sub    esi,ecx
c0025879:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002587e:	eb 07                	jmp    c0025887 <__addsf3+0x2d1>
c0025880:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0025883:	eb 02                	jmp    c0025887 <__addsf3+0x2d1>
c0025885:	31 c0                	xor    eax,eax
c0025887:	89 c2                	mov    edx,eax
c0025889:	c1 ea 08             	shr    edx,0x8
c002588c:	a8 7f                	test   al,0x7f
c002588e:	0f 95 c1             	setne  cl
c0025891:	09 d1                	or     ecx,edx
c0025893:	83 e1 01             	and    ecx,0x1
c0025896:	c1 e8 07             	shr    eax,0x7
c0025899:	21 c8                	and    eax,ecx
c002589b:	c1 e6 17             	shl    esi,0x17
c002589e:	09 d6                	or     esi,edx
c00258a0:	8d 3c 30             	lea    edi,[eax+esi*1]
c00258a3:	eb 0a                	jmp    c00258af <__addsf3+0x2f9>
c00258a5:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00258a8:	eb 05                	jmp    c00258af <__addsf3+0x2f9>
c00258aa:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c00258af:	89 f8                	mov    eax,edi
c00258b1:	5a                   	pop    edx
c00258b2:	59                   	pop    ecx
c00258b3:	5b                   	pop    ebx
c00258b4:	5e                   	pop    esi
c00258b5:	5f                   	pop    edi
c00258b6:	5d                   	pop    ebp
c00258b7:	c3                   	ret    

c00258b8 <__subsf3>:
c00258b8:	55                   	push   ebp
c00258b9:	89 e5                	mov    ebp,esp
c00258bb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00258be:	05 00 00 00 80       	add    eax,0x80000000
c00258c3:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00258c6:	5d                   	pop    ebp
c00258c7:	e9 ea fc ff ff       	jmp    c00255b6 <__addsf3>

c00258cc <__negsf2>:
c00258cc:	55                   	push   ebp
c00258cd:	89 e5                	mov    ebp,esp
c00258cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258d2:	05 00 00 00 80       	add    eax,0x80000000
c00258d7:	5d                   	pop    ebp
c00258d8:	c3                   	ret    

c00258d9 <__mulsf3>:
c00258d9:	55                   	push   ebp
c00258da:	89 e5                	mov    ebp,esp
c00258dc:	57                   	push   edi
c00258dd:	56                   	push   esi
c00258de:	53                   	push   ebx
c00258df:	83 ec 1c             	sub    esp,0x1c
c00258e2:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00258e5:	89 f0                	mov    eax,esi
c00258e7:	89 f1                	mov    ecx,esi
c00258e9:	c1 f9 17             	sar    ecx,0x17
c00258ec:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00258ef:	c1 e0 08             	shl    eax,0x8
c00258f2:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00258f7:	89 c1                	mov    ecx,eax
c00258f9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00258fc:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00258ff:	89 c7                	mov    edi,eax
c0025901:	c1 ff 17             	sar    edi,0x17
c0025904:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025908:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002590b:	89 f8                	mov    eax,edi
c002590d:	0f b6 c0             	movzx  eax,al
c0025910:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0025913:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0025917:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002591a:	42                   	inc    edx
c002591b:	80 e2 fe             	and    dl,0xfe
c002591e:	75 7b                	jne    c002599b <__mulsf3+0xc2>
c0025920:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0025924:	74 54                	je     c002597a <__mulsf3+0xa1>
c0025926:	85 c9                	test   ecx,ecx
c0025928:	0f 85 64 01 00 00    	jne    c0025a92 <__mulsf3+0x1b9>
c002592e:	8d 57 01             	lea    edx,[edi+0x1]
c0025931:	80 e2 fe             	and    dl,0xfe
c0025934:	75 1f                	jne    c0025955 <__mulsf3+0x7c>
c0025936:	85 c0                	test   eax,eax
c0025938:	b8 00 00 00 00       	mov    eax,0x0
c002593d:	74 29                	je     c0025968 <__mulsf3+0x8f>
c002593f:	53                   	push   ebx
c0025940:	53                   	push   ebx
c0025941:	50                   	push   eax
c0025942:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025945:	e8 96 05 00 00       	call   c0025ee0 <__nesf2>
c002594a:	83 c4 10             	add    esp,0x10
c002594d:	85 c0                	test   eax,eax
c002594f:	0f 85 3a 01 00 00    	jne    c0025a8f <__mulsf3+0x1b6>
c0025955:	85 ff                	test   edi,edi
c0025957:	0f 89 35 01 00 00    	jns    c0025a92 <__mulsf3+0x1b9>
c002595d:	81 c6 00 00 00 80    	add    esi,0x80000000
c0025963:	e9 2a 01 00 00       	jmp    c0025a92 <__mulsf3+0x1b9>
c0025968:	51                   	push   ecx
c0025969:	51                   	push   ecx
c002596a:	50                   	push   eax
c002596b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002596e:	e8 6d 05 00 00       	call   c0025ee0 <__nesf2>
c0025973:	83 c4 10             	add    esp,0x10
c0025976:	85 c0                	test   eax,eax
c0025978:	eb 15                	jmp    c002598f <__mulsf3+0xb6>
c002597a:	85 c9                	test   ecx,ecx
c002597c:	74 0b                	je     c0025989 <__mulsf3+0xb0>
c002597e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0025981:	01 c9                	add    ecx,ecx
c0025983:	78 16                	js     c002599b <__mulsf3+0xc2>
c0025985:	89 d3                	mov    ebx,edx
c0025987:	eb f5                	jmp    c002597e <__mulsf3+0xa5>
c0025989:	89 f8                	mov    eax,edi
c002598b:	f7 d0                	not    eax
c002598d:	84 c0                	test   al,al
c002598f:	75 c4                	jne    c0025955 <__mulsf3+0x7c>
c0025991:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0025996:	e9 f7 00 00 00       	jmp    c0025a92 <__mulsf3+0x1b9>
c002599b:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002599e:	c1 e6 08             	shl    esi,0x8
c00259a1:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c00259a7:	8d 57 01             	lea    edx,[edi+0x1]
c00259aa:	80 e2 fe             	and    dl,0xfe
c00259ad:	75 63                	jne    c0025a12 <__mulsf3+0x139>
c00259af:	85 c0                	test   eax,eax
c00259b1:	74 2f                	je     c00259e2 <__mulsf3+0x109>
c00259b3:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00259b7:	0f 89 d2 00 00 00    	jns    c0025a8f <__mulsf3+0x1b6>
c00259bd:	52                   	push   edx
c00259be:	52                   	push   edx
c00259bf:	6a 00                	push   0x0
c00259c1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00259c4:	e8 dc 04 00 00       	call   c0025ea5 <__eqsf2>
c00259c9:	83 c4 10             	add    esp,0x10
c00259cc:	85 c0                	test   eax,eax
c00259ce:	0f 85 bb 00 00 00    	jne    c0025a8f <__mulsf3+0x1b6>
c00259d4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00259d7:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c00259dd:	e9 b0 00 00 00       	jmp    c0025a92 <__mulsf3+0x1b9>
c00259e2:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00259e5:	50                   	push   eax
c00259e6:	50                   	push   eax
c00259e7:	6a 00                	push   0x0
c00259e9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00259ec:	e8 b4 04 00 00       	call   c0025ea5 <__eqsf2>
c00259f1:	83 c4 10             	add    esp,0x10
c00259f4:	85 c0                	test   eax,eax
c00259f6:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00259f9:	75 0c                	jne    c0025a07 <__mulsf3+0x12e>
c00259fb:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00259ff:	0f 89 8a 00 00 00    	jns    c0025a8f <__mulsf3+0x1b6>
c0025a05:	eb cd                	jmp    c00259d4 <__mulsf3+0xfb>
c0025a07:	8d 43 ff             	lea    eax,[ebx-0x1]
c0025a0a:	01 f6                	add    esi,esi
c0025a0c:	78 04                	js     c0025a12 <__mulsf3+0x139>
c0025a0e:	89 c3                	mov    ebx,eax
c0025a10:	eb f5                	jmp    c0025a07 <__mulsf3+0x12e>
c0025a12:	89 c8                	mov    eax,ecx
c0025a14:	0d 00 00 00 80       	or     eax,0x80000000
c0025a19:	81 ce 00 00 00 80    	or     esi,0x80000000
c0025a1f:	f7 e6                	mul    esi
c0025a21:	85 c0                	test   eax,eax
c0025a23:	0f 95 c0             	setne  al
c0025a26:	0f b6 c0             	movzx  eax,al
c0025a29:	09 c2                	or     edx,eax
c0025a2b:	78 03                	js     c0025a30 <__mulsf3+0x157>
c0025a2d:	01 d2                	add    edx,edx
c0025a2f:	4b                   	dec    ebx
c0025a30:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0025a36:	7f 22                	jg     c0025a5a <__mulsf3+0x181>
c0025a38:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0025a3e:	85 db                	test   ebx,ebx
c0025a40:	7f 23                	jg     c0025a65 <__mulsf3+0x18c>
c0025a42:	83 fb e9             	cmp    ebx,0xffffffe9
c0025a45:	7c 1a                	jl     c0025a61 <__mulsf3+0x188>
c0025a47:	81 ca 00 00 00 80    	or     edx,0x80000000
c0025a4d:	b9 01 00 00 00       	mov    ecx,0x1
c0025a52:	29 d9                	sub    ecx,ebx
c0025a54:	d3 ea                	shr    edx,cl
c0025a56:	31 db                	xor    ebx,ebx
c0025a58:	eb 0b                	jmp    c0025a65 <__mulsf3+0x18c>
c0025a5a:	bb ff 00 00 00       	mov    ebx,0xff
c0025a5f:	eb 02                	jmp    c0025a63 <__mulsf3+0x18a>
c0025a61:	31 db                	xor    ebx,ebx
c0025a63:	31 d2                	xor    edx,edx
c0025a65:	89 d0                	mov    eax,edx
c0025a67:	c1 e8 08             	shr    eax,0x8
c0025a6a:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0025a6d:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0025a73:	09 fb                	or     ebx,edi
c0025a75:	c1 e3 17             	shl    ebx,0x17
c0025a78:	09 c3                	or     ebx,eax
c0025a7a:	f6 c2 7f             	test   dl,0x7f
c0025a7d:	0f 95 c1             	setne  cl
c0025a80:	09 c8                	or     eax,ecx
c0025a82:	83 e0 01             	and    eax,0x1
c0025a85:	c1 ea 07             	shr    edx,0x7
c0025a88:	21 c2                	and    edx,eax
c0025a8a:	8d 34 13             	lea    esi,[ebx+edx*1]
c0025a8d:	eb 03                	jmp    c0025a92 <__mulsf3+0x1b9>
c0025a8f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0025a92:	89 f0                	mov    eax,esi
c0025a94:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025a97:	5b                   	pop    ebx
c0025a98:	5e                   	pop    esi
c0025a99:	5f                   	pop    edi
c0025a9a:	5d                   	pop    ebp
c0025a9b:	c3                   	ret    

c0025a9c <__divsf3>:
c0025a9c:	55                   	push   ebp
c0025a9d:	89 e5                	mov    ebp,esp
c0025a9f:	57                   	push   edi
c0025aa0:	56                   	push   esi
c0025aa1:	53                   	push   ebx
c0025aa2:	83 ec 1c             	sub    esp,0x1c
c0025aa5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0025aa8:	89 d8                	mov    eax,ebx
c0025aaa:	89 d9                	mov    ecx,ebx
c0025aac:	c1 f9 17             	sar    ecx,0x17
c0025aaf:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0025ab2:	c1 e0 08             	shl    eax,0x8
c0025ab5:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0025aba:	89 c1                	mov    ecx,eax
c0025abc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025abf:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025ac2:	89 c7                	mov    edi,eax
c0025ac4:	c1 ff 17             	sar    edi,0x17
c0025ac7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025acb:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0025ace:	89 f8                	mov    eax,edi
c0025ad0:	0f b6 c0             	movzx  eax,al
c0025ad3:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0025ad6:	29 c6                	sub    esi,eax
c0025ad8:	83 c6 7f             	add    esi,0x7f
c0025adb:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0025ade:	42                   	inc    edx
c0025adf:	80 e2 fe             	and    dl,0xfe
c0025ae2:	0f 85 9c 00 00 00    	jne    c0025b84 <__divsf3+0xe8>
c0025ae8:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0025aec:	74 33                	je     c0025b21 <__divsf3+0x85>
c0025aee:	85 c9                	test   ecx,ecx
c0025af0:	0f 85 c7 01 00 00    	jne    c0025cbd <__divsf3+0x221>
c0025af6:	8d 57 01             	lea    edx,[edi+0x1]
c0025af9:	80 e2 fe             	and    dl,0xfe
c0025afc:	75 2f                	jne    c0025b2d <__divsf3+0x91>
c0025afe:	85 c0                	test   eax,eax
c0025b00:	74 2b                	je     c0025b2d <__divsf3+0x91>
c0025b02:	51                   	push   ecx
c0025b03:	51                   	push   ecx
c0025b04:	6a 00                	push   0x0
c0025b06:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025b09:	e8 d2 03 00 00       	call   c0025ee0 <__nesf2>
c0025b0e:	83 c4 10             	add    esp,0x10
c0025b11:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0025b14:	85 c0                	test   eax,eax
c0025b16:	0f 85 a1 01 00 00    	jne    c0025cbd <__divsf3+0x221>
c0025b1c:	e9 92 01 00 00       	jmp    c0025cb3 <__divsf3+0x217>
c0025b21:	85 c9                	test   ecx,ecx
c0025b23:	75 1b                	jne    c0025b40 <__divsf3+0xa4>
c0025b25:	8d 57 01             	lea    edx,[edi+0x1]
c0025b28:	80 e2 fe             	and    dl,0xfe
c0025b2b:	74 1e                	je     c0025b4b <__divsf3+0xaf>
c0025b2d:	85 ff                	test   edi,edi
c0025b2f:	0f 89 88 01 00 00    	jns    c0025cbd <__divsf3+0x221>
c0025b35:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0025b3b:	e9 7d 01 00 00       	jmp    c0025cbd <__divsf3+0x221>
c0025b40:	8d 56 ff             	lea    edx,[esi-0x1]
c0025b43:	01 c9                	add    ecx,ecx
c0025b45:	78 3d                	js     c0025b84 <__divsf3+0xe8>
c0025b47:	89 d6                	mov    esi,edx
c0025b49:	eb f5                	jmp    c0025b40 <__divsf3+0xa4>
c0025b4b:	85 c0                	test   eax,eax
c0025b4d:	b8 00 00 00 00       	mov    eax,0x0
c0025b52:	74 18                	je     c0025b6c <__divsf3+0xd0>
c0025b54:	52                   	push   edx
c0025b55:	52                   	push   edx
c0025b56:	50                   	push   eax
c0025b57:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025b5a:	e8 81 03 00 00       	call   c0025ee0 <__nesf2>
c0025b5f:	83 c4 10             	add    esp,0x10
c0025b62:	85 c0                	test   eax,eax
c0025b64:	0f 85 50 01 00 00    	jne    c0025cba <__divsf3+0x21e>
c0025b6a:	eb c1                	jmp    c0025b2d <__divsf3+0x91>
c0025b6c:	56                   	push   esi
c0025b6d:	56                   	push   esi
c0025b6e:	50                   	push   eax
c0025b6f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025b72:	e8 69 03 00 00       	call   c0025ee0 <__nesf2>
c0025b77:	83 c4 10             	add    esp,0x10
c0025b7a:	85 c0                	test   eax,eax
c0025b7c:	0f 84 31 01 00 00    	je     c0025cb3 <__divsf3+0x217>
c0025b82:	eb a9                	jmp    c0025b2d <__divsf3+0x91>
c0025b84:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0025b87:	c1 e3 08             	shl    ebx,0x8
c0025b8a:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0025b90:	8d 57 01             	lea    edx,[edi+0x1]
c0025b93:	80 e2 fe             	and    dl,0xfe
c0025b96:	75 71                	jne    c0025c09 <__divsf3+0x16d>
c0025b98:	85 c0                	test   eax,eax
c0025b9a:	ba 00 00 00 00       	mov    edx,0x0
c0025b9f:	74 2f                	je     c0025bd0 <__divsf3+0x134>
c0025ba1:	51                   	push   ecx
c0025ba2:	51                   	push   ecx
c0025ba3:	52                   	push   edx
c0025ba4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025ba7:	e8 f9 02 00 00       	call   c0025ea5 <__eqsf2>
c0025bac:	83 c4 10             	add    esp,0x10
c0025baf:	85 c0                	test   eax,eax
c0025bb1:	0f 85 03 01 00 00    	jne    c0025cba <__divsf3+0x21e>
c0025bb7:	31 d2                	xor    edx,edx
c0025bb9:	89 d3                	mov    ebx,edx
c0025bbb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025bbe:	31 f8                	xor    eax,edi
c0025bc0:	0f 89 f7 00 00 00    	jns    c0025cbd <__divsf3+0x221>
c0025bc6:	bb 00 00 00 80       	mov    ebx,0x80000000
c0025bcb:	e9 ed 00 00 00       	jmp    c0025cbd <__divsf3+0x221>
c0025bd0:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0025bd3:	50                   	push   eax
c0025bd4:	50                   	push   eax
c0025bd5:	52                   	push   edx
c0025bd6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025bd9:	e8 c7 02 00 00       	call   c0025ea5 <__eqsf2>
c0025bde:	83 c4 10             	add    esp,0x10
c0025be1:	85 c0                	test   eax,eax
c0025be3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0025be6:	75 16                	jne    c0025bfe <__divsf3+0x162>
c0025be8:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0025beb:	31 fb                	xor    ebx,edi
c0025bed:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0025bf3:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0025bf9:	e9 bf 00 00 00       	jmp    c0025cbd <__divsf3+0x221>
c0025bfe:	8d 46 01             	lea    eax,[esi+0x1]
c0025c01:	01 db                	add    ebx,ebx
c0025c03:	78 04                	js     c0025c09 <__divsf3+0x16d>
c0025c05:	89 c6                	mov    esi,eax
c0025c07:	eb f5                	jmp    c0025bfe <__divsf3+0x162>
c0025c09:	89 c8                	mov    eax,ecx
c0025c0b:	0d 00 00 00 80       	or     eax,0x80000000
c0025c10:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0025c16:	31 d2                	xor    edx,edx
c0025c18:	39 d8                	cmp    eax,ebx
c0025c1a:	72 07                	jb     c0025c23 <__divsf3+0x187>
c0025c1c:	29 d8                	sub    eax,ebx
c0025c1e:	ba 01 00 00 00       	mov    edx,0x1
c0025c23:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0025c2a:	01 d2                	add    edx,edx
c0025c2c:	89 c1                	mov    ecx,eax
c0025c2e:	01 c0                	add    eax,eax
c0025c30:	85 c9                	test   ecx,ecx
c0025c32:	78 04                	js     c0025c38 <__divsf3+0x19c>
c0025c34:	39 c3                	cmp    ebx,eax
c0025c36:	77 05                	ja     c0025c3d <__divsf3+0x1a1>
c0025c38:	29 d8                	sub    eax,ebx
c0025c3a:	83 ca 01             	or     edx,0x1
c0025c3d:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0025c40:	75 e8                	jne    c0025c2a <__divsf3+0x18e>
c0025c42:	85 c0                	test   eax,eax
c0025c44:	0f 95 c0             	setne  al
c0025c47:	0f b6 c0             	movzx  eax,al
c0025c4a:	c1 e2 06             	shl    edx,0x6
c0025c4d:	09 c2                	or     edx,eax
c0025c4f:	78 03                	js     c0025c54 <__divsf3+0x1b8>
c0025c51:	01 d2                	add    edx,edx
c0025c53:	4e                   	dec    esi
c0025c54:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0025c5a:	7f 22                	jg     c0025c7e <__divsf3+0x1e2>
c0025c5c:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0025c62:	85 f6                	test   esi,esi
c0025c64:	7f 23                	jg     c0025c89 <__divsf3+0x1ed>
c0025c66:	83 fe e9             	cmp    esi,0xffffffe9
c0025c69:	7c 1a                	jl     c0025c85 <__divsf3+0x1e9>
c0025c6b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0025c71:	b9 01 00 00 00       	mov    ecx,0x1
c0025c76:	29 f1                	sub    ecx,esi
c0025c78:	d3 ea                	shr    edx,cl
c0025c7a:	31 f6                	xor    esi,esi
c0025c7c:	eb 0b                	jmp    c0025c89 <__divsf3+0x1ed>
c0025c7e:	be ff 00 00 00       	mov    esi,0xff
c0025c83:	eb 02                	jmp    c0025c87 <__divsf3+0x1eb>
c0025c85:	31 f6                	xor    esi,esi
c0025c87:	31 d2                	xor    edx,edx
c0025c89:	89 d0                	mov    eax,edx
c0025c8b:	c1 e8 08             	shr    eax,0x8
c0025c8e:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0025c91:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0025c97:	09 fe                	or     esi,edi
c0025c99:	c1 e6 17             	shl    esi,0x17
c0025c9c:	09 c6                	or     esi,eax
c0025c9e:	f6 c2 7f             	test   dl,0x7f
c0025ca1:	0f 95 c1             	setne  cl
c0025ca4:	09 c8                	or     eax,ecx
c0025ca6:	83 e0 01             	and    eax,0x1
c0025ca9:	c1 ea 07             	shr    edx,0x7
c0025cac:	21 c2                	and    edx,eax
c0025cae:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0025cb1:	eb 0a                	jmp    c0025cbd <__divsf3+0x221>
c0025cb3:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0025cb8:	eb 03                	jmp    c0025cbd <__divsf3+0x221>
c0025cba:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0025cbd:	89 d8                	mov    eax,ebx
c0025cbf:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025cc2:	5b                   	pop    ebx
c0025cc3:	5e                   	pop    esi
c0025cc4:	5f                   	pop    edi
c0025cc5:	5d                   	pop    ebp
c0025cc6:	c3                   	ret    

c0025cc7 <__floatsisf>:
c0025cc7:	55                   	push   ebp
c0025cc8:	89 e5                	mov    ebp,esp
c0025cca:	53                   	push   ebx
c0025ccb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0025cce:	85 d2                	test   edx,edx
c0025cd0:	7e 2b                	jle    c0025cfd <__floatsisf+0x36>
c0025cd2:	0f bd ca             	bsr    ecx,edx
c0025cd5:	83 f1 1f             	xor    ecx,0x1f
c0025cd8:	d3 e2                	shl    edx,cl
c0025cda:	89 d0                	mov    eax,edx
c0025cdc:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0025ce1:	89 c3                	mov    ebx,eax
c0025ce3:	c1 eb 08             	shr    ebx,0x8
c0025ce6:	80 e2 7f             	and    dl,0x7f
c0025ce9:	0f 95 c2             	setne  dl
c0025cec:	09 da                	or     edx,ebx
c0025cee:	83 e2 01             	and    edx,0x1
c0025cf1:	c1 e8 07             	shr    eax,0x7
c0025cf4:	21 c2                	and    edx,eax
c0025cf6:	b8 9e 00 00 00       	mov    eax,0x9e
c0025cfb:	eb 32                	jmp    c0025d2f <__floatsisf+0x68>
c0025cfd:	b8 00 00 00 00       	mov    eax,0x0
c0025d02:	74 34                	je     c0025d38 <__floatsisf+0x71>
c0025d04:	f7 da                	neg    edx
c0025d06:	0f bd ca             	bsr    ecx,edx
c0025d09:	83 f1 1f             	xor    ecx,0x1f
c0025d0c:	d3 e2                	shl    edx,cl
c0025d0e:	89 d0                	mov    eax,edx
c0025d10:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0025d15:	89 c3                	mov    ebx,eax
c0025d17:	c1 eb 08             	shr    ebx,0x8
c0025d1a:	80 e2 7f             	and    dl,0x7f
c0025d1d:	0f 95 c2             	setne  dl
c0025d20:	09 da                	or     edx,ebx
c0025d22:	83 e2 01             	and    edx,0x1
c0025d25:	c1 e8 07             	shr    eax,0x7
c0025d28:	21 c2                	and    edx,eax
c0025d2a:	b8 9e 01 00 00       	mov    eax,0x19e
c0025d2f:	29 c8                	sub    eax,ecx
c0025d31:	c1 e0 17             	shl    eax,0x17
c0025d34:	09 d8                	or     eax,ebx
c0025d36:	01 d0                	add    eax,edx
c0025d38:	5b                   	pop    ebx
c0025d39:	5d                   	pop    ebp
c0025d3a:	c3                   	ret    

c0025d3b <__floatunsisf>:
c0025d3b:	55                   	push   ebp
c0025d3c:	89 e5                	mov    ebp,esp
c0025d3e:	53                   	push   ebx
c0025d3f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0025d42:	31 c0                	xor    eax,eax
c0025d44:	85 d2                	test   edx,edx
c0025d46:	74 32                	je     c0025d7a <__floatunsisf+0x3f>
c0025d48:	0f bd ca             	bsr    ecx,edx
c0025d4b:	83 f1 1f             	xor    ecx,0x1f
c0025d4e:	d3 e2                	shl    edx,cl
c0025d50:	89 d0                	mov    eax,edx
c0025d52:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0025d57:	89 c3                	mov    ebx,eax
c0025d59:	c1 eb 08             	shr    ebx,0x8
c0025d5c:	80 e2 7f             	and    dl,0x7f
c0025d5f:	0f 95 c2             	setne  dl
c0025d62:	09 da                	or     edx,ebx
c0025d64:	83 e2 01             	and    edx,0x1
c0025d67:	c1 e8 07             	shr    eax,0x7
c0025d6a:	21 c2                	and    edx,eax
c0025d6c:	b8 9e 00 00 00       	mov    eax,0x9e
c0025d71:	29 c8                	sub    eax,ecx
c0025d73:	c1 e0 17             	shl    eax,0x17
c0025d76:	09 d8                	or     eax,ebx
c0025d78:	01 d0                	add    eax,edx
c0025d7a:	5b                   	pop    ebx
c0025d7b:	5d                   	pop    ebp
c0025d7c:	c3                   	ret    

c0025d7d <__fixsfsi>:
c0025d7d:	55                   	push   ebp
c0025d7e:	89 e5                	mov    ebp,esp
c0025d80:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0025d83:	89 d1                	mov    ecx,edx
c0025d85:	c1 e1 08             	shl    ecx,0x8
c0025d88:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0025d8e:	c1 fa 17             	sar    edx,0x17
c0025d91:	78 1c                	js     c0025daf <__fixsfsi+0x32>
c0025d93:	83 ea 7f             	sub    edx,0x7f
c0025d96:	31 c0                	xor    eax,eax
c0025d98:	83 fa 1e             	cmp    edx,0x1e
c0025d9b:	77 40                	ja     c0025ddd <__fixsfsi+0x60>
c0025d9d:	89 c8                	mov    eax,ecx
c0025d9f:	0d 00 00 00 80       	or     eax,0x80000000
c0025da4:	b9 1f 00 00 00       	mov    ecx,0x1f
c0025da9:	29 d1                	sub    ecx,edx
c0025dab:	d3 e8                	shr    eax,cl
c0025dad:	eb 2e                	jmp    c0025ddd <__fixsfsi+0x60>
c0025daf:	31 c0                	xor    eax,eax
c0025db1:	81 c2 81 00 00 00    	add    edx,0x81
c0025db7:	78 24                	js     c0025ddd <__fixsfsi+0x60>
c0025db9:	83 fa 1e             	cmp    edx,0x1e
c0025dbc:	7e 09                	jle    c0025dc7 <__fixsfsi+0x4a>
c0025dbe:	83 fa 1f             	cmp    edx,0x1f
c0025dc1:	75 18                	jne    c0025ddb <__fixsfsi+0x5e>
c0025dc3:	85 c9                	test   ecx,ecx
c0025dc5:	75 14                	jne    c0025ddb <__fixsfsi+0x5e>
c0025dc7:	89 c8                	mov    eax,ecx
c0025dc9:	0d 00 00 00 80       	or     eax,0x80000000
c0025dce:	b9 1f 00 00 00       	mov    ecx,0x1f
c0025dd3:	29 d1                	sub    ecx,edx
c0025dd5:	d3 e8                	shr    eax,cl
c0025dd7:	f7 d8                	neg    eax
c0025dd9:	eb 02                	jmp    c0025ddd <__fixsfsi+0x60>
c0025ddb:	31 c0                	xor    eax,eax
c0025ddd:	5d                   	pop    ebp
c0025dde:	c3                   	ret    

c0025ddf <__fixunssfsi>:
c0025ddf:	55                   	push   ebp
c0025de0:	89 e5                	mov    ebp,esp
c0025de2:	53                   	push   ebx
c0025de3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0025de6:	89 d3                	mov    ebx,edx
c0025de8:	c1 fb 17             	sar    ebx,0x17
c0025deb:	83 eb 7f             	sub    ebx,0x7f
c0025dee:	31 c0                	xor    eax,eax
c0025df0:	83 fb 1f             	cmp    ebx,0x1f
c0025df3:	77 18                	ja     c0025e0d <__fixunssfsi+0x2e>
c0025df5:	89 d0                	mov    eax,edx
c0025df7:	c1 e0 08             	shl    eax,0x8
c0025dfa:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0025dff:	0d 00 00 00 80       	or     eax,0x80000000
c0025e04:	b9 1f 00 00 00       	mov    ecx,0x1f
c0025e09:	29 d9                	sub    ecx,ebx
c0025e0b:	d3 e8                	shr    eax,cl
c0025e0d:	5b                   	pop    ebx
c0025e0e:	5d                   	pop    ebp
c0025e0f:	c3                   	ret    

c0025e10 <__cmpsf2>:
c0025e10:	55                   	push   ebp
c0025e11:	89 e5                	mov    ebp,esp
c0025e13:	57                   	push   edi
c0025e14:	56                   	push   esi
c0025e15:	53                   	push   ebx
c0025e16:	83 ec 24             	sub    esp,0x24
c0025e19:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025e1c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e1f:	e8 4f 10 00 00       	call   c0026e73 <__truncdfsf2>
c0025e24:	5a                   	pop    edx
c0025e25:	59                   	pop    ecx
c0025e26:	89 c3                	mov    ebx,eax
c0025e28:	c1 e8 17             	shr    eax,0x17
c0025e2b:	0f b6 f0             	movzx  esi,al
c0025e2e:	89 d8                	mov    eax,ebx
c0025e30:	c1 e8 1f             	shr    eax,0x1f
c0025e33:	31 c6                	xor    esi,eax
c0025e35:	c1 e3 08             	shl    ebx,0x8
c0025e38:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0025e3b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0025e3e:	e8 30 10 00 00       	call   c0026e73 <__truncdfsf2>
c0025e43:	83 c4 10             	add    esp,0x10
c0025e46:	89 c1                	mov    ecx,eax
c0025e48:	c1 e9 17             	shr    ecx,0x17
c0025e4b:	0f b6 c9             	movzx  ecx,cl
c0025e4e:	89 c7                	mov    edi,eax
c0025e50:	c1 ef 1f             	shr    edi,0x1f
c0025e53:	89 ca                	mov    edx,ecx
c0025e55:	31 fa                	xor    edx,edi
c0025e57:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0025e5a:	c1 e0 08             	shl    eax,0x8
c0025e5d:	89 c2                	mov    edx,eax
c0025e5f:	89 d8                	mov    eax,ebx
c0025e61:	09 d0                	or     eax,edx
c0025e63:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0025e68:	09 f0                	or     eax,esi
c0025e6a:	75 08                	jne    c0025e74 <__cmpsf2+0x64>
c0025e6c:	31 c0                	xor    eax,eax
c0025e6e:	39 f9                	cmp    ecx,edi
c0025e70:	75 0c                	jne    c0025e7e <__cmpsf2+0x6e>
c0025e72:	eb 29                	jmp    c0025e9d <__cmpsf2+0x8d>
c0025e74:	b8 01 00 00 00       	mov    eax,0x1
c0025e79:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0025e7c:	7f 1f                	jg     c0025e9d <__cmpsf2+0x8d>
c0025e7e:	83 c8 ff             	or     eax,0xffffffff
c0025e81:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0025e84:	7c 17                	jl     c0025e9d <__cmpsf2+0x8d>
c0025e86:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0025e8c:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0025e92:	b8 01 00 00 00       	mov    eax,0x1
c0025e97:	39 d3                	cmp    ebx,edx
c0025e99:	77 02                	ja     c0025e9d <__cmpsf2+0x8d>
c0025e9b:	19 c0                	sbb    eax,eax
c0025e9d:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025ea0:	5b                   	pop    ebx
c0025ea1:	5e                   	pop    esi
c0025ea2:	5f                   	pop    edi
c0025ea3:	5d                   	pop    ebp
c0025ea4:	c3                   	ret    

c0025ea5 <__eqsf2>:
c0025ea5:	55                   	push   ebp
c0025ea6:	89 e5                	mov    ebp,esp
c0025ea8:	83 ec 24             	sub    esp,0x24
c0025eab:	6a 01                	push   0x1
c0025ead:	83 ec 0c             	sub    esp,0xc
c0025eb0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025eb3:	e8 df 10 00 00       	call   c0026f97 <__extendsfdf2>
c0025eb8:	83 c4 10             	add    esp,0x10
c0025ebb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025ebe:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025ec1:	52                   	push   edx
c0025ec2:	50                   	push   eax
c0025ec3:	50                   	push   eax
c0025ec4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ec7:	e8 cb 10 00 00       	call   c0026f97 <__extendsfdf2>
c0025ecc:	59                   	pop    ecx
c0025ecd:	59                   	pop    ecx
c0025ece:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025ed1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025ed4:	52                   	push   edx
c0025ed5:	50                   	push   eax
c0025ed6:	e8 35 ff ff ff       	call   c0025e10 <__cmpsf2>
c0025edb:	83 c4 20             	add    esp,0x20
c0025ede:	c9                   	leave  
c0025edf:	c3                   	ret    

c0025ee0 <__nesf2>:
c0025ee0:	eb c3                	jmp    c0025ea5 <__eqsf2>

c0025ee2 <__gtsf2>:
c0025ee2:	55                   	push   ebp
c0025ee3:	89 e5                	mov    ebp,esp
c0025ee5:	83 ec 24             	sub    esp,0x24
c0025ee8:	6a ff                	push   0xffffffff
c0025eea:	83 ec 0c             	sub    esp,0xc
c0025eed:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025ef0:	e8 a2 10 00 00       	call   c0026f97 <__extendsfdf2>
c0025ef5:	83 c4 10             	add    esp,0x10
c0025ef8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025efb:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025efe:	52                   	push   edx
c0025eff:	50                   	push   eax
c0025f00:	50                   	push   eax
c0025f01:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f04:	e8 8e 10 00 00       	call   c0026f97 <__extendsfdf2>
c0025f09:	59                   	pop    ecx
c0025f0a:	59                   	pop    ecx
c0025f0b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025f0e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025f11:	52                   	push   edx
c0025f12:	50                   	push   eax
c0025f13:	e8 f8 fe ff ff       	call   c0025e10 <__cmpsf2>
c0025f18:	83 c4 20             	add    esp,0x20
c0025f1b:	c9                   	leave  
c0025f1c:	c3                   	ret    

c0025f1d <__gesf2>:
c0025f1d:	eb c3                	jmp    c0025ee2 <__gtsf2>

c0025f1f <__ltsf2>:
c0025f1f:	eb 84                	jmp    c0025ea5 <__eqsf2>

c0025f21 <__lesf2>:
c0025f21:	eb 82                	jmp    c0025ea5 <__eqsf2>

c0025f23 <__adddf3>:
c0025f23:	55                   	push   ebp
c0025f24:	89 e5                	mov    ebp,esp
c0025f26:	57                   	push   edi
c0025f27:	56                   	push   esi
c0025f28:	53                   	push   ebx
c0025f29:	83 ec 24             	sub    esp,0x24
c0025f2c:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0025f2f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025f32:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025f35:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025f38:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025f3b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025f3e:	89 c8                	mov    eax,ecx
c0025f40:	89 ce                	mov    esi,ecx
c0025f42:	c1 fe 14             	sar    esi,0x14
c0025f45:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0025f48:	89 fb                	mov    ebx,edi
c0025f4a:	89 fa                	mov    edx,edi
c0025f4c:	c1 e2 0b             	shl    edx,0xb
c0025f4f:	c1 e0 0b             	shl    eax,0xb
c0025f52:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0025f57:	c1 eb 15             	shr    ebx,0x15
c0025f5a:	09 d8                	or     eax,ebx
c0025f5c:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0025f5f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0025f62:	c1 fe 14             	sar    esi,0x14
c0025f65:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0025f68:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0025f6b:	89 f3                	mov    ebx,esi
c0025f6d:	c1 e3 0b             	shl    ebx,0xb
c0025f70:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0025f73:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0025f76:	c1 e3 0b             	shl    ebx,0xb
c0025f79:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0025f7f:	c1 ee 15             	shr    esi,0x15
c0025f82:	09 f3                	or     ebx,esi
c0025f84:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0025f87:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0025f8a:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0025f8d:	0f 88 5f 02 00 00    	js     c00261f2 <__adddf3+0x2cf>
c0025f93:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0025f96:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0025f99:	85 db                	test   ebx,ebx
c0025f9b:	0f 8e c7 00 00 00    	jle    c0026068 <__adddf3+0x145>
c0025fa1:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0025fa8:	75 1a                	jne    c0025fc4 <__adddf3+0xa1>
c0025faa:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0025fad:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0025fb0:	0f 84 b2 05 00 00    	je     c0026568 <__adddf3+0x645>
c0025fb6:	4b                   	dec    ebx
c0025fb7:	75 23                	jne    c0025fdc <__adddf3+0xb9>
c0025fb9:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0025fbc:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0025fbf:	e9 99 00 00 00       	jmp    c002605d <__adddf3+0x13a>
c0025fc4:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0025fc7:	f7 d6                	not    esi
c0025fc9:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0025fcf:	0f 84 93 05 00 00    	je     c0026568 <__adddf3+0x645>
c0025fd5:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0025fdc:	83 fb 1f             	cmp    ebx,0x1f
c0025fdf:	7e 42                	jle    c0026023 <__adddf3+0x100>
c0025fe1:	83 fb 3f             	cmp    ebx,0x3f
c0025fe4:	0f 8f 7e 05 00 00    	jg     c0026568 <__adddf3+0x645>
c0025fea:	83 e3 1f             	and    ebx,0x1f
c0025fed:	89 d9                	mov    ecx,ebx
c0025fef:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0025ff2:	d3 ef                	shr    edi,cl
c0025ff4:	31 db                	xor    ebx,ebx
c0025ff6:	85 c9                	test   ecx,ecx
c0025ff8:	74 15                	je     c002600f <__adddf3+0xec>
c0025ffa:	be 20 00 00 00       	mov    esi,0x20
c0025fff:	29 ce                	sub    esi,ecx
c0026001:	89 f1                	mov    ecx,esi
c0026003:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026006:	d3 e6                	shl    esi,cl
c0026008:	31 db                	xor    ebx,ebx
c002600a:	85 f6                	test   esi,esi
c002600c:	0f 95 c3             	setne  bl
c002600f:	31 c9                	xor    ecx,ecx
c0026011:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026015:	0f 95 c1             	setne  cl
c0026018:	09 cf                	or     edi,ecx
c002601a:	09 fb                	or     ebx,edi
c002601c:	01 da                	add    edx,ebx
c002601e:	83 d0 00             	adc    eax,0x0
c0026021:	eb 3a                	jmp    c002605d <__adddf3+0x13a>
c0026023:	bf 20 00 00 00       	mov    edi,0x20
c0026028:	29 df                	sub    edi,ebx
c002602a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002602d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026030:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0026033:	d3 e6                	shl    esi,cl
c0026035:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0026038:	88 d9                	mov    cl,bl
c002603a:	d3 ef                	shr    edi,cl
c002603c:	09 fe                	or     esi,edi
c002603e:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0026041:	88 d9                	mov    cl,bl
c0026043:	d3 ef                	shr    edi,cl
c0026045:	89 fb                	mov    ebx,edi
c0026047:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002604a:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002604d:	d3 e7                	shl    edi,cl
c002604f:	85 ff                	test   edi,edi
c0026051:	0f 95 c1             	setne  cl
c0026054:	0f b6 c9             	movzx  ecx,cl
c0026057:	09 ce                	or     esi,ecx
c0026059:	01 f2                	add    edx,esi
c002605b:	11 d8                	adc    eax,ebx
c002605d:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026060:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026063:	e9 52 01 00 00       	jmp    c00261ba <__adddf3+0x297>
c0026068:	0f 84 d5 00 00 00    	je     c0026143 <__adddf3+0x220>
c002606e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026071:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0026074:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0026077:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002607a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0026081:	75 20                	jne    c00260a3 <__adddf3+0x180>
c0026083:	89 d6                	mov    esi,edx
c0026085:	09 c6                	or     esi,eax
c0026087:	0f 84 db 04 00 00    	je     c0026568 <__adddf3+0x645>
c002608d:	4b                   	dec    ebx
c002608e:	75 29                	jne    c00260b9 <__adddf3+0x196>
c0026090:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026093:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026096:	01 d1                	add    ecx,edx
c0026098:	11 c6                	adc    esi,eax
c002609a:	89 f0                	mov    eax,esi
c002609c:	89 ca                	mov    edx,ecx
c002609e:	e9 17 01 00 00       	jmp    c00261ba <__adddf3+0x297>
c00260a3:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00260a6:	f7 d6                	not    esi
c00260a8:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00260ae:	0f 84 b4 04 00 00    	je     c0026568 <__adddf3+0x645>
c00260b4:	0d 00 00 00 80       	or     eax,0x80000000
c00260b9:	83 fb 1f             	cmp    ebx,0x1f
c00260bc:	7e 48                	jle    c0026106 <__adddf3+0x1e3>
c00260be:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00260c1:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00260c4:	83 fb 3f             	cmp    ebx,0x3f
c00260c7:	0f 8f 9b 04 00 00    	jg     c0026568 <__adddf3+0x645>
c00260cd:	83 e3 1f             	and    ebx,0x1f
c00260d0:	89 d9                	mov    ecx,ebx
c00260d2:	89 c7                	mov    edi,eax
c00260d4:	d3 ef                	shr    edi,cl
c00260d6:	31 db                	xor    ebx,ebx
c00260d8:	85 c9                	test   ecx,ecx
c00260da:	74 12                	je     c00260ee <__adddf3+0x1cb>
c00260dc:	be 20 00 00 00       	mov    esi,0x20
c00260e1:	29 ce                	sub    esi,ecx
c00260e3:	89 f1                	mov    ecx,esi
c00260e5:	d3 e0                	shl    eax,cl
c00260e7:	31 db                	xor    ebx,ebx
c00260e9:	85 c0                	test   eax,eax
c00260eb:	0f 95 c3             	setne  bl
c00260ee:	31 c0                	xor    eax,eax
c00260f0:	85 d2                	test   edx,edx
c00260f2:	0f 95 c0             	setne  al
c00260f5:	09 c7                	or     edi,eax
c00260f7:	09 fb                	or     ebx,edi
c00260f9:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00260fc:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00260ff:	01 da                	add    edx,ebx
c0026101:	83 d6 00             	adc    esi,0x0
c0026104:	eb 39                	jmp    c002613f <__adddf3+0x21c>
c0026106:	be 20 00 00 00       	mov    esi,0x20
c002610b:	29 de                	sub    esi,ebx
c002610d:	89 c7                	mov    edi,eax
c002610f:	89 f1                	mov    ecx,esi
c0026111:	d3 e7                	shl    edi,cl
c0026113:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0026116:	89 d7                	mov    edi,edx
c0026118:	88 d9                	mov    cl,bl
c002611a:	d3 ef                	shr    edi,cl
c002611c:	89 f9                	mov    ecx,edi
c002611e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026121:	09 cf                	or     edi,ecx
c0026123:	88 d9                	mov    cl,bl
c0026125:	d3 e8                	shr    eax,cl
c0026127:	89 f1                	mov    ecx,esi
c0026129:	d3 e2                	shl    edx,cl
c002612b:	85 d2                	test   edx,edx
c002612d:	0f 95 c2             	setne  dl
c0026130:	0f b6 d2             	movzx  edx,dl
c0026133:	09 d7                	or     edi,edx
c0026135:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026138:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002613b:	01 fa                	add    edx,edi
c002613d:	11 c6                	adc    esi,eax
c002613f:	89 f0                	mov    eax,esi
c0026141:	eb 77                	jmp    c00261ba <__adddf3+0x297>
c0026143:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0026146:	46                   	inc    esi
c0026147:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c002614a:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0026150:	75 41                	jne    c0026193 <__adddf3+0x270>
c0026152:	89 d3                	mov    ebx,edx
c0026154:	09 c3                	or     ebx,eax
c0026156:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c002615d:	75 27                	jne    c0026186 <__adddf3+0x263>
c002615f:	85 db                	test   ebx,ebx
c0026161:	0f 84 fb 03 00 00    	je     c0026562 <__adddf3+0x63f>
c0026167:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002616a:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c002616d:	0f 84 f5 03 00 00    	je     c0026568 <__adddf3+0x645>
c0026173:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0026176:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0026179:	85 c0                	test   eax,eax
c002617b:	0f 89 91 03 00 00    	jns    c0026512 <__adddf3+0x5ef>
c0026181:	e9 85 03 00 00       	jmp    c002650b <__adddf3+0x5e8>
c0026186:	85 db                	test   ebx,ebx
c0026188:	0f 85 da 03 00 00    	jne    c0026568 <__adddf3+0x645>
c002618e:	e9 cf 03 00 00       	jmp    c0026562 <__adddf3+0x63f>
c0026193:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0026196:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0026199:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002619c:	f7 d1                	not    ecx
c002619e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00261a4:	0f 84 70 03 00 00    	je     c002651a <__adddf3+0x5f7>
c00261aa:	d1 ea                	shr    edx,1
c00261ac:	89 c1                	mov    ecx,eax
c00261ae:	c1 e1 1f             	shl    ecx,0x1f
c00261b1:	09 ca                	or     edx,ecx
c00261b3:	d1 e8                	shr    eax,1
c00261b5:	e9 6f 03 00 00       	jmp    c0026529 <__adddf3+0x606>
c00261ba:	85 c0                	test   eax,eax
c00261bc:	0f 89 67 03 00 00    	jns    c0026529 <__adddf3+0x606>
c00261c2:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c00261c5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00261c8:	f7 d1                	not    ecx
c00261ca:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00261d0:	0f 84 44 03 00 00    	je     c002651a <__adddf3+0x5f7>
c00261d6:	89 d1                	mov    ecx,edx
c00261d8:	d1 e9                	shr    ecx,1
c00261da:	83 e2 01             	and    edx,0x1
c00261dd:	09 ca                	or     edx,ecx
c00261df:	89 c1                	mov    ecx,eax
c00261e1:	c1 e1 1f             	shl    ecx,0x1f
c00261e4:	09 ca                	or     edx,ecx
c00261e6:	d1 e8                	shr    eax,1
c00261e8:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00261ed:	e9 37 03 00 00       	jmp    c0026529 <__adddf3+0x606>
c00261f2:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00261f5:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00261fb:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c00261fe:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026201:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0026207:	29 de                	sub    esi,ebx
c0026209:	85 f6                	test   esi,esi
c002620b:	0f 8e bd 00 00 00    	jle    c00262ce <__adddf3+0x3ab>
c0026211:	85 db                	test   ebx,ebx
c0026213:	75 17                	jne    c002622c <__adddf3+0x309>
c0026215:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026218:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002621b:	0f 84 47 03 00 00    	je     c0026568 <__adddf3+0x645>
c0026221:	4e                   	dec    esi
c0026222:	75 20                	jne    c0026244 <__adddf3+0x321>
c0026224:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0026227:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002622a:	eb 5b                	jmp    c0026287 <__adddf3+0x364>
c002622c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002622f:	f7 d3                	not    ebx
c0026231:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0026237:	0f 84 2b 03 00 00    	je     c0026568 <__adddf3+0x645>
c002623d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0026244:	83 fe 1f             	cmp    esi,0x1f
c0026247:	7e 49                	jle    c0026292 <__adddf3+0x36f>
c0026249:	83 fe 3f             	cmp    esi,0x3f
c002624c:	0f 8f 16 03 00 00    	jg     c0026568 <__adddf3+0x645>
c0026252:	83 e6 1f             	and    esi,0x1f
c0026255:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0026258:	89 f1                	mov    ecx,esi
c002625a:	d3 ef                	shr    edi,cl
c002625c:	31 db                	xor    ebx,ebx
c002625e:	85 f6                	test   esi,esi
c0026260:	74 13                	je     c0026275 <__adddf3+0x352>
c0026262:	b9 20 00 00 00       	mov    ecx,0x20
c0026267:	29 f1                	sub    ecx,esi
c0026269:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002626c:	d3 e6                	shl    esi,cl
c002626e:	31 db                	xor    ebx,ebx
c0026270:	85 f6                	test   esi,esi
c0026272:	0f 95 c3             	setne  bl
c0026275:	31 c9                	xor    ecx,ecx
c0026277:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002627b:	0f 95 c1             	setne  cl
c002627e:	09 cf                	or     edi,ecx
c0026280:	09 fb                	or     ebx,edi
c0026282:	29 da                	sub    edx,ebx
c0026284:	83 d8 00             	sbb    eax,0x0
c0026287:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002628a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002628d:	e9 aa 01 00 00       	jmp    c002643c <__adddf3+0x519>
c0026292:	bf 20 00 00 00       	mov    edi,0x20
c0026297:	29 f7                	sub    edi,esi
c0026299:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002629c:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002629f:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00262a2:	d3 e3                	shl    ebx,cl
c00262a4:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00262a7:	89 f1                	mov    ecx,esi
c00262a9:	d3 ef                	shr    edi,cl
c00262ab:	09 fb                	or     ebx,edi
c00262ad:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00262b0:	89 f1                	mov    ecx,esi
c00262b2:	d3 ef                	shr    edi,cl
c00262b4:	89 fe                	mov    esi,edi
c00262b6:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00262b9:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00262bc:	d3 e7                	shl    edi,cl
c00262be:	85 ff                	test   edi,edi
c00262c0:	0f 95 c1             	setne  cl
c00262c3:	0f b6 c9             	movzx  ecx,cl
c00262c6:	09 cb                	or     ebx,ecx
c00262c8:	29 da                	sub    edx,ebx
c00262ca:	19 f0                	sbb    eax,esi
c00262cc:	eb b9                	jmp    c0026287 <__adddf3+0x364>
c00262ce:	0f 84 cd 00 00 00    	je     c00263a1 <__adddf3+0x47e>
c00262d4:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c00262d7:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00262da:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00262dd:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00262e1:	75 1b                	jne    c00262fe <__adddf3+0x3db>
c00262e3:	89 d6                	mov    esi,edx
c00262e5:	09 c6                	or     esi,eax
c00262e7:	0f 84 7b 02 00 00    	je     c0026568 <__adddf3+0x645>
c00262ed:	4b                   	dec    ebx
c00262ee:	75 24                	jne    c0026314 <__adddf3+0x3f1>
c00262f0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00262f3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00262f6:	29 d1                	sub    ecx,edx
c00262f8:	19 c6                	sbb    esi,eax
c00262fa:	89 ca                	mov    edx,ecx
c00262fc:	eb 61                	jmp    c002635f <__adddf3+0x43c>
c00262fe:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0026301:	f7 d6                	not    esi
c0026303:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0026309:	0f 84 59 02 00 00    	je     c0026568 <__adddf3+0x645>
c002630f:	0d 00 00 00 80       	or     eax,0x80000000
c0026314:	83 fb 1f             	cmp    ebx,0x1f
c0026317:	7e 4d                	jle    c0026366 <__adddf3+0x443>
c0026319:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002631c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002631f:	83 fb 3f             	cmp    ebx,0x3f
c0026322:	0f 8f 40 02 00 00    	jg     c0026568 <__adddf3+0x645>
c0026328:	83 e3 1f             	and    ebx,0x1f
c002632b:	89 d9                	mov    ecx,ebx
c002632d:	89 c7                	mov    edi,eax
c002632f:	d3 ef                	shr    edi,cl
c0026331:	31 db                	xor    ebx,ebx
c0026333:	85 c9                	test   ecx,ecx
c0026335:	74 12                	je     c0026349 <__adddf3+0x426>
c0026337:	be 20 00 00 00       	mov    esi,0x20
c002633c:	29 ce                	sub    esi,ecx
c002633e:	89 f1                	mov    ecx,esi
c0026340:	d3 e0                	shl    eax,cl
c0026342:	31 db                	xor    ebx,ebx
c0026344:	85 c0                	test   eax,eax
c0026346:	0f 95 c3             	setne  bl
c0026349:	31 c0                	xor    eax,eax
c002634b:	85 d2                	test   edx,edx
c002634d:	0f 95 c0             	setne  al
c0026350:	09 c7                	or     edi,eax
c0026352:	09 fb                	or     ebx,edi
c0026354:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026357:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002635a:	29 da                	sub    edx,ebx
c002635c:	83 de 00             	sbb    esi,0x0
c002635f:	89 f0                	mov    eax,esi
c0026361:	e9 d6 00 00 00       	jmp    c002643c <__adddf3+0x519>
c0026366:	be 20 00 00 00       	mov    esi,0x20
c002636b:	29 de                	sub    esi,ebx
c002636d:	89 c7                	mov    edi,eax
c002636f:	89 f1                	mov    ecx,esi
c0026371:	d3 e7                	shl    edi,cl
c0026373:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0026376:	89 d7                	mov    edi,edx
c0026378:	88 d9                	mov    cl,bl
c002637a:	d3 ef                	shr    edi,cl
c002637c:	89 f9                	mov    ecx,edi
c002637e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026381:	09 cf                	or     edi,ecx
c0026383:	88 d9                	mov    cl,bl
c0026385:	d3 e8                	shr    eax,cl
c0026387:	89 f1                	mov    ecx,esi
c0026389:	d3 e2                	shl    edx,cl
c002638b:	85 d2                	test   edx,edx
c002638d:	0f 95 c2             	setne  dl
c0026390:	0f b6 d2             	movzx  edx,dl
c0026393:	09 d7                	or     edi,edx
c0026395:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026398:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002639b:	29 fa                	sub    edx,edi
c002639d:	19 c6                	sbb    esi,eax
c002639f:	eb be                	jmp    c002635f <__adddf3+0x43c>
c00263a1:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00263a4:	8d 5e 01             	lea    ebx,[esi+0x1]
c00263a7:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c00263ad:	75 6a                	jne    c0026419 <__adddf3+0x4f6>
c00263af:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00263b3:	75 58                	jne    c002640d <__adddf3+0x4ea>
c00263b5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00263b8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00263bb:	89 d6                	mov    esi,edx
c00263bd:	09 c6                	or     esi,eax
c00263bf:	75 17                	jne    c00263d8 <__adddf3+0x4b5>
c00263c1:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00263c4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00263c7:	85 db                	test   ebx,ebx
c00263c9:	0f 85 99 01 00 00    	jne    c0026568 <__adddf3+0x645>
c00263cf:	31 ff                	xor    edi,edi
c00263d1:	31 c9                	xor    ecx,ecx
c00263d3:	e9 90 01 00 00       	jmp    c0026568 <__adddf3+0x645>
c00263d8:	85 db                	test   ebx,ebx
c00263da:	0f 84 88 01 00 00    	je     c0026568 <__adddf3+0x645>
c00263e0:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00263e3:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00263e6:	85 c0                	test   eax,eax
c00263e8:	79 10                	jns    c00263fa <__adddf3+0x4d7>
c00263ea:	31 c9                	xor    ecx,ecx
c00263ec:	f7 da                	neg    edx
c00263ee:	0f 95 c1             	setne  cl
c00263f1:	01 c8                	add    eax,ecx
c00263f3:	f7 d8                	neg    eax
c00263f5:	e9 2f 01 00 00       	jmp    c0026529 <__adddf3+0x606>
c00263fa:	31 ff                	xor    edi,edi
c00263fc:	31 c9                	xor    ecx,ecx
c00263fe:	89 c3                	mov    ebx,eax
c0026400:	09 d3                	or     ebx,edx
c0026402:	0f 84 60 01 00 00    	je     c0026568 <__adddf3+0x645>
c0026408:	e9 05 01 00 00       	jmp    c0026512 <__adddf3+0x5ef>
c002640d:	31 ff                	xor    edi,edi
c002640f:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0026414:	e9 4f 01 00 00       	jmp    c0026568 <__adddf3+0x645>
c0026419:	89 c1                	mov    ecx,eax
c002641b:	89 d0                	mov    eax,edx
c002641d:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0026420:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0026423:	89 ca                	mov    edx,ecx
c0026425:	85 c9                	test   ecx,ecx
c0026427:	79 2c                	jns    c0026455 <__adddf3+0x532>
c0026429:	31 c9                	xor    ecx,ecx
c002642b:	f7 d8                	neg    eax
c002642d:	0f 95 c1             	setne  cl
c0026430:	01 ca                	add    edx,ecx
c0026432:	f7 da                	neg    edx
c0026434:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0026437:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002643a:	eb 19                	jmp    c0026455 <__adddf3+0x532>
c002643c:	85 c0                	test   eax,eax
c002643e:	0f 89 e5 00 00 00    	jns    c0026529 <__adddf3+0x606>
c0026444:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026449:	89 c1                	mov    ecx,eax
c002644b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002644e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0026451:	89 d0                	mov    eax,edx
c0026453:	89 ca                	mov    edx,ecx
c0026455:	85 d2                	test   edx,edx
c0026457:	74 59                	je     c00264b2 <__adddf3+0x58f>
c0026459:	0f bd da             	bsr    ebx,edx
c002645c:	83 f3 1f             	xor    ebx,0x1f
c002645f:	88 d9                	mov    cl,bl
c0026461:	d3 e2                	shl    edx,cl
c0026463:	bf 20 00 00 00       	mov    edi,0x20
c0026468:	89 f9                	mov    ecx,edi
c002646a:	29 d9                	sub    ecx,ebx
c002646c:	89 c6                	mov    esi,eax
c002646e:	d3 ee                	shr    esi,cl
c0026470:	09 d6                	or     esi,edx
c0026472:	88 d9                	mov    cl,bl
c0026474:	d3 e0                	shl    eax,cl
c0026476:	89 c2                	mov    edx,eax
c0026478:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002647b:	25 ff 07 00 00       	and    eax,0x7ff
c0026480:	39 d8                	cmp    eax,ebx
c0026482:	7f 22                	jg     c00264a6 <__adddf3+0x583>
c0026484:	29 c3                	sub    ebx,eax
c0026486:	43                   	inc    ebx
c0026487:	88 d9                	mov    cl,bl
c0026489:	d3 ea                	shr    edx,cl
c002648b:	29 df                	sub    edi,ebx
c002648d:	89 f9                	mov    ecx,edi
c002648f:	89 f0                	mov    eax,esi
c0026491:	d3 e0                	shl    eax,cl
c0026493:	09 c2                	or     edx,eax
c0026495:	89 f0                	mov    eax,esi
c0026497:	88 d9                	mov    cl,bl
c0026499:	d3 e8                	shr    eax,cl
c002649b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002649e:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c00264a4:	eb 6f                	jmp    c0026515 <__adddf3+0x5f2>
c00264a6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00264a9:	29 d8                	sub    eax,ebx
c00264ab:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00264ae:	89 f0                	mov    eax,esi
c00264b0:	eb 59                	jmp    c002650b <__adddf3+0x5e8>
c00264b2:	85 c0                	test   eax,eax
c00264b4:	74 6a                	je     c0026520 <__adddf3+0x5fd>
c00264b6:	0f bd c8             	bsr    ecx,eax
c00264b9:	83 f1 1f             	xor    ecx,0x1f
c00264bc:	d3 e0                	shl    eax,cl
c00264be:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00264c1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00264c7:	83 c1 20             	add    ecx,0x20
c00264ca:	39 cb                	cmp    ebx,ecx
c00264cc:	7f 35                	jg     c0026503 <__adddf3+0x5e0>
c00264ce:	29 d9                	sub    ecx,ebx
c00264d0:	8d 71 01             	lea    esi,[ecx+0x1]
c00264d3:	83 fe 1f             	cmp    esi,0x1f
c00264d6:	7e 09                	jle    c00264e1 <__adddf3+0x5be>
c00264d8:	83 e9 1f             	sub    ecx,0x1f
c00264db:	d3 e8                	shr    eax,cl
c00264dd:	89 c3                	mov    ebx,eax
c00264df:	eb 11                	jmp    c00264f2 <__adddf3+0x5cf>
c00264e1:	b9 20 00 00 00       	mov    ecx,0x20
c00264e6:	29 f1                	sub    ecx,esi
c00264e8:	89 c3                	mov    ebx,eax
c00264ea:	d3 e3                	shl    ebx,cl
c00264ec:	89 f1                	mov    ecx,esi
c00264ee:	d3 e8                	shr    eax,cl
c00264f0:	89 c2                	mov    edx,eax
c00264f2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00264f5:	25 00 f8 ff ff       	and    eax,0xfffff800
c00264fa:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00264fd:	89 d0                	mov    eax,edx
c00264ff:	89 da                	mov    edx,ebx
c0026501:	eb 26                	jmp    c0026529 <__adddf3+0x606>
c0026503:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026506:	29 cf                	sub    edi,ecx
c0026508:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002650b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026510:	eb 17                	jmp    c0026529 <__adddf3+0x606>
c0026512:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026515:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026518:	eb 0f                	jmp    c0026529 <__adddf3+0x606>
c002651a:	31 d2                	xor    edx,edx
c002651c:	31 c0                	xor    eax,eax
c002651e:	eb 09                	jmp    c0026529 <__adddf3+0x606>
c0026520:	89 c2                	mov    edx,eax
c0026522:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0026529:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002652c:	c1 e1 14             	shl    ecx,0x14
c002652f:	89 c3                	mov    ebx,eax
c0026531:	c1 eb 0b             	shr    ebx,0xb
c0026534:	09 d9                	or     ecx,ebx
c0026536:	89 d3                	mov    ebx,edx
c0026538:	c1 eb 0b             	shr    ebx,0xb
c002653b:	c1 e0 15             	shl    eax,0x15
c002653e:	09 d8                	or     eax,ebx
c0026540:	89 c7                	mov    edi,eax
c0026542:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0026548:	0f 95 c0             	setne  al
c002654b:	89 c6                	mov    esi,eax
c002654d:	09 f3                	or     ebx,esi
c002654f:	83 e3 01             	and    ebx,0x1
c0026552:	c1 ea 0a             	shr    edx,0xa
c0026555:	21 da                	and    edx,ebx
c0026557:	89 f8                	mov    eax,edi
c0026559:	01 d0                	add    eax,edx
c002655b:	83 d1 00             	adc    ecx,0x0
c002655e:	89 c7                	mov    edi,eax
c0026560:	eb 06                	jmp    c0026568 <__adddf3+0x645>
c0026562:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0026565:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0026568:	89 f8                	mov    eax,edi
c002656a:	89 ca                	mov    edx,ecx
c002656c:	83 c4 24             	add    esp,0x24
c002656f:	5b                   	pop    ebx
c0026570:	5e                   	pop    esi
c0026571:	5f                   	pop    edi
c0026572:	5d                   	pop    ebp
c0026573:	c3                   	ret    

c0026574 <__subdf3>:
c0026574:	55                   	push   ebp
c0026575:	89 e5                	mov    ebp,esp
c0026577:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002657a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002657d:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0026583:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0026586:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0026589:	5d                   	pop    ebp
c002658a:	e9 94 f9 ff ff       	jmp    c0025f23 <__adddf3>

c002658f <__negdf2>:
c002658f:	55                   	push   ebp
c0026590:	89 e5                	mov    ebp,esp
c0026592:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026595:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0026598:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002659e:	5d                   	pop    ebp
c002659f:	c3                   	ret    

c00265a0 <__muldf3>:
c00265a0:	55                   	push   ebp
c00265a1:	89 e5                	mov    ebp,esp
c00265a3:	57                   	push   edi
c00265a4:	56                   	push   esi
c00265a5:	53                   	push   ebx
c00265a6:	83 ec 24             	sub    esp,0x24
c00265a9:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00265ac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00265af:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00265b2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00265b5:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00265b8:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00265bb:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00265be:	89 c8                	mov    eax,ecx
c00265c0:	c1 f8 14             	sar    eax,0x14
c00265c3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00265c6:	89 f8                	mov    eax,edi
c00265c8:	89 fb                	mov    ebx,edi
c00265ca:	c1 e3 0b             	shl    ebx,0xb
c00265cd:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c00265d0:	c1 e1 0b             	shl    ecx,0xb
c00265d3:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00265d9:	c1 e8 15             	shr    eax,0x15
c00265dc:	09 c1                	or     ecx,eax
c00265de:	89 d6                	mov    esi,edx
c00265e0:	89 d0                	mov    eax,edx
c00265e2:	c1 f8 14             	sar    eax,0x14
c00265e5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00265e8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00265eb:	89 c3                	mov    ebx,eax
c00265ed:	c1 e3 0b             	shl    ebx,0xb
c00265f0:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00265f3:	c1 e6 0b             	shl    esi,0xb
c00265f6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c00265fc:	c1 e8 15             	shr    eax,0x15
c00265ff:	09 c6                	or     esi,eax
c0026601:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026604:	25 ff 07 00 00       	and    eax,0x7ff
c0026609:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002660c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002660f:	25 ff 07 00 00       	and    eax,0x7ff
c0026614:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0026617:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002661a:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c002661d:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0026624:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026627:	40                   	inc    eax
c0026628:	a9 fe 07 00 00       	test   eax,0x7fe
c002662d:	0f 85 8d 00 00 00    	jne    c00266c0 <__muldf3+0x120>
c0026633:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026636:	09 c8                	or     eax,ecx
c0026638:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c002663c:	74 44                	je     c0026682 <__muldf3+0xe2>
c002663e:	85 c0                	test   eax,eax
c0026640:	0f 85 31 02 00 00    	jne    c0026877 <__muldf3+0x2d7>
c0026646:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0026649:	40                   	inc    eax
c002664a:	a9 fe 07 00 00       	test   eax,0x7fe
c002664f:	75 13                	jne    c0026664 <__muldf3+0xc4>
c0026651:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026654:	09 f1                	or     ecx,esi
c0026656:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002665a:	74 22                	je     c002667e <__muldf3+0xde>
c002665c:	85 c9                	test   ecx,ecx
c002665e:	0f 85 0d 02 00 00    	jne    c0026871 <__muldf3+0x2d1>
c0026664:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0026668:	0f 89 09 02 00 00    	jns    c0026877 <__muldf3+0x2d7>
c002666e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0026671:	05 00 00 00 80       	add    eax,0x80000000
c0026676:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026679:	e9 f9 01 00 00       	jmp    c0026877 <__muldf3+0x2d7>
c002667e:	85 c9                	test   ecx,ecx
c0026680:	eb 2e                	jmp    c00266b0 <__muldf3+0x110>
c0026682:	85 c0                	test   eax,eax
c0026684:	74 20                	je     c00266a6 <__muldf3+0x106>
c0026686:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0026689:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002668c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002668f:	c1 ef 1f             	shr    edi,0x1f
c0026692:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0026695:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0026698:	8d 43 ff             	lea    eax,[ebx-0x1]
c002669b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002669e:	09 f9                	or     ecx,edi
c00266a0:	78 1e                	js     c00266c0 <__muldf3+0x120>
c00266a2:	89 c3                	mov    ebx,eax
c00266a4:	eb e0                	jmp    c0026686 <__muldf3+0xe6>
c00266a6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00266a9:	f7 d0                	not    eax
c00266ab:	a9 ff 07 00 00       	test   eax,0x7ff
c00266b0:	75 b2                	jne    c0026664 <__muldf3+0xc4>
c00266b2:	31 ff                	xor    edi,edi
c00266b4:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c00266bb:	e9 b7 01 00 00       	jmp    c0026877 <__muldf3+0x2d7>
c00266c0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00266c3:	40                   	inc    eax
c00266c4:	a9 fe 07 00 00       	test   eax,0x7fe
c00266c9:	75 57                	jne    c0026722 <__muldf3+0x182>
c00266cb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00266ce:	09 f0                	or     eax,esi
c00266d0:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00266d4:	74 23                	je     c00266f9 <__muldf3+0x159>
c00266d6:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c00266da:	0f 89 91 01 00 00    	jns    c0026871 <__muldf3+0x2d1>
c00266e0:	85 c0                	test   eax,eax
c00266e2:	0f 85 89 01 00 00    	jne    c0026871 <__muldf3+0x2d1>
c00266e8:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c00266eb:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c00266f1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00266f4:	e9 7e 01 00 00       	jmp    c0026877 <__muldf3+0x2d7>
c00266f9:	85 c0                	test   eax,eax
c00266fb:	75 0c                	jne    c0026709 <__muldf3+0x169>
c00266fd:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0026701:	0f 89 6a 01 00 00    	jns    c0026871 <__muldf3+0x2d1>
c0026707:	eb df                	jmp    c00266e8 <__muldf3+0x148>
c0026709:	01 f6                	add    esi,esi
c002670b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002670e:	c1 ea 1f             	shr    edx,0x1f
c0026711:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0026714:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0026717:	8d 43 ff             	lea    eax,[ebx-0x1]
c002671a:	09 d6                	or     esi,edx
c002671c:	78 04                	js     c0026722 <__muldf3+0x182>
c002671e:	89 c3                	mov    ebx,eax
c0026720:	eb e7                	jmp    c0026709 <__muldf3+0x169>
c0026722:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0026728:	81 ce 00 00 00 80    	or     esi,0x80000000
c002672e:	89 c8                	mov    eax,ecx
c0026730:	f7 e6                	mul    esi
c0026732:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0026735:	89 c7                	mov    edi,eax
c0026737:	89 c8                	mov    eax,ecx
c0026739:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c002673c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c002673f:	89 c1                	mov    ecx,eax
c0026741:	89 f0                	mov    eax,esi
c0026743:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0026746:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0026749:	89 c6                	mov    esi,eax
c002674b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002674e:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0026751:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0026754:	31 c0                	xor    eax,eax
c0026756:	01 f1                	add    ecx,esi
c0026758:	0f 92 c0             	setb   al
c002675b:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c002675e:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0026761:	83 d6 00             	adc    esi,0x0
c0026764:	01 c7                	add    edi,eax
c0026766:	83 d6 00             	adc    esi,0x0
c0026769:	01 ca                	add    edx,ecx
c002676b:	0f 92 c1             	setb   cl
c002676e:	0f b6 c9             	movzx  ecx,cl
c0026771:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0026774:	83 d6 00             	adc    esi,0x0
c0026777:	01 cf                	add    edi,ecx
c0026779:	83 d6 00             	adc    esi,0x0
c002677c:	31 c9                	xor    ecx,ecx
c002677e:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0026781:	0f 95 c1             	setne  cl
c0026784:	09 cf                	or     edi,ecx
c0026786:	85 f6                	test   esi,esi
c0026788:	78 0c                	js     c0026796 <__muldf3+0x1f6>
c002678a:	01 f6                	add    esi,esi
c002678c:	89 f8                	mov    eax,edi
c002678e:	c1 e8 1f             	shr    eax,0x1f
c0026791:	09 c6                	or     esi,eax
c0026793:	01 ff                	add    edi,edi
c0026795:	4b                   	dec    ebx
c0026796:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c002679c:	0f 8f 85 00 00 00    	jg     c0026827 <__muldf3+0x287>
c00267a2:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c00267a8:	85 db                	test   ebx,ebx
c00267aa:	0f 8f 84 00 00 00    	jg     c0026834 <__muldf3+0x294>
c00267b0:	83 fb cc             	cmp    ebx,0xffffffcc
c00267b3:	7c 79                	jl     c002682e <__muldf3+0x28e>
c00267b5:	ba 01 00 00 00       	mov    edx,0x1
c00267ba:	29 da                	sub    edx,ebx
c00267bc:	81 ce 00 00 00 80    	or     esi,0x80000000
c00267c2:	83 fa 1f             	cmp    edx,0x1f
c00267c5:	7e 30                	jle    c00267f7 <__muldf3+0x257>
c00267c7:	83 fa 20             	cmp    edx,0x20
c00267ca:	75 0b                	jne    c00267d7 <__muldf3+0x237>
c00267cc:	31 c0                	xor    eax,eax
c00267ce:	85 ff                	test   edi,edi
c00267d0:	0f 95 c0             	setne  al
c00267d3:	89 c7                	mov    edi,eax
c00267d5:	eb 1a                	jmp    c00267f1 <__muldf3+0x251>
c00267d7:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c00267da:	89 f0                	mov    eax,esi
c00267dc:	d3 e0                	shl    eax,cl
c00267de:	09 f8                	or     eax,edi
c00267e0:	0f 95 c0             	setne  al
c00267e3:	0f b6 c0             	movzx  eax,al
c00267e6:	89 c7                	mov    edi,eax
c00267e8:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c00267ed:	29 d9                	sub    ecx,ebx
c00267ef:	d3 ee                	shr    esi,cl
c00267f1:	09 f7                	or     edi,esi
c00267f3:	31 db                	xor    ebx,ebx
c00267f5:	eb 3b                	jmp    c0026832 <__muldf3+0x292>
c00267f7:	83 c3 1f             	add    ebx,0x1f
c00267fa:	89 f0                	mov    eax,esi
c00267fc:	88 d9                	mov    cl,bl
c00267fe:	d3 e0                	shl    eax,cl
c0026800:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026803:	89 f8                	mov    eax,edi
c0026805:	88 d1                	mov    cl,dl
c0026807:	d3 e8                	shr    eax,cl
c0026809:	89 c1                	mov    ecx,eax
c002680b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002680e:	09 c8                	or     eax,ecx
c0026810:	88 d9                	mov    cl,bl
c0026812:	d3 e7                	shl    edi,cl
c0026814:	31 db                	xor    ebx,ebx
c0026816:	85 ff                	test   edi,edi
c0026818:	0f 95 c3             	setne  bl
c002681b:	89 df                	mov    edi,ebx
c002681d:	09 c7                	or     edi,eax
c002681f:	88 d1                	mov    cl,dl
c0026821:	d3 ee                	shr    esi,cl
c0026823:	31 db                	xor    ebx,ebx
c0026825:	eb 0d                	jmp    c0026834 <__muldf3+0x294>
c0026827:	bb ff 07 00 00       	mov    ebx,0x7ff
c002682c:	eb 02                	jmp    c0026830 <__muldf3+0x290>
c002682e:	31 db                	xor    ebx,ebx
c0026830:	31 ff                	xor    edi,edi
c0026832:	31 f6                	xor    esi,esi
c0026834:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026837:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c002683a:	25 00 f8 ff ff       	and    eax,0xfffff800
c002683f:	09 c3                	or     ebx,eax
c0026841:	c1 e3 14             	shl    ebx,0x14
c0026844:	89 f0                	mov    eax,esi
c0026846:	c1 e8 0b             	shr    eax,0xb
c0026849:	09 c3                	or     ebx,eax
c002684b:	89 f8                	mov    eax,edi
c002684d:	c1 e8 0b             	shr    eax,0xb
c0026850:	c1 e6 15             	shl    esi,0x15
c0026853:	09 c6                	or     esi,eax
c0026855:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c002685b:	0f 95 c1             	setne  cl
c002685e:	09 c8                	or     eax,ecx
c0026860:	83 e0 01             	and    eax,0x1
c0026863:	c1 ef 0a             	shr    edi,0xa
c0026866:	21 c7                	and    edi,eax
c0026868:	01 f7                	add    edi,esi
c002686a:	83 d3 00             	adc    ebx,0x0
c002686d:	89 da                	mov    edx,ebx
c002686f:	eb 03                	jmp    c0026874 <__muldf3+0x2d4>
c0026871:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0026874:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0026877:	89 f8                	mov    eax,edi
c0026879:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002687c:	83 c4 24             	add    esp,0x24
c002687f:	5b                   	pop    ebx
c0026880:	5e                   	pop    esi
c0026881:	5f                   	pop    edi
c0026882:	5d                   	pop    ebp
c0026883:	c3                   	ret    

c0026884 <__divdf3>:
c0026884:	55                   	push   ebp
c0026885:	89 e5                	mov    ebp,esp
c0026887:	57                   	push   edi
c0026888:	56                   	push   esi
c0026889:	53                   	push   ebx
c002688a:	83 ec 2c             	sub    esp,0x2c
c002688d:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026890:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0026893:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0026896:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0026899:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002689c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002689f:	89 ce                	mov    esi,ecx
c00268a1:	89 c8                	mov    eax,ecx
c00268a3:	c1 f8 14             	sar    eax,0x14
c00268a6:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00268a9:	89 f8                	mov    eax,edi
c00268ab:	89 fb                	mov    ebx,edi
c00268ad:	c1 e3 0b             	shl    ebx,0xb
c00268b0:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c00268b3:	c1 e6 0b             	shl    esi,0xb
c00268b6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c00268bc:	c1 e8 15             	shr    eax,0x15
c00268bf:	09 c6                	or     esi,eax
c00268c1:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c00268c4:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00268c7:	89 c2                	mov    edx,eax
c00268c9:	c1 fa 14             	sar    edx,0x14
c00268cc:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00268cf:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c00268d2:	89 de                	mov    esi,ebx
c00268d4:	c1 e6 0b             	shl    esi,0xb
c00268d7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00268da:	c1 e0 0b             	shl    eax,0xb
c00268dd:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00268e2:	c1 eb 15             	shr    ebx,0x15
c00268e5:	09 d8                	or     eax,ebx
c00268e7:	89 c2                	mov    edx,eax
c00268e9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00268ec:	25 ff 07 00 00       	and    eax,0x7ff
c00268f1:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00268f4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00268f7:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00268fd:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0026900:	29 d8                	sub    eax,ebx
c0026902:	05 ff 03 00 00       	add    eax,0x3ff
c0026907:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002690a:	46                   	inc    esi
c002690b:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0026911:	0f 85 a5 00 00 00    	jne    c00269bc <__divdf3+0x138>
c0026917:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c002691a:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c002691d:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0026921:	74 2a                	je     c002694d <__divdf3+0xc9>
c0026923:	85 f6                	test   esi,esi
c0026925:	0f 85 cc 02 00 00    	jne    c0026bf7 <__divdf3+0x373>
c002692b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002692e:	40                   	inc    eax
c002692f:	a9 fe 07 00 00       	test   eax,0x7fe
c0026934:	75 26                	jne    c002695c <__divdf3+0xd8>
c0026936:	85 db                	test   ebx,ebx
c0026938:	74 22                	je     c002695c <__divdf3+0xd8>
c002693a:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c002693d:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0026940:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0026943:	09 d0                	or     eax,edx
c0026945:	0f 85 ac 02 00 00    	jne    c0026bf7 <__divdf3+0x373>
c002694b:	eb 63                	jmp    c00269b0 <__divdf3+0x12c>
c002694d:	85 f6                	test   esi,esi
c002694f:	75 22                	jne    c0026973 <__divdf3+0xef>
c0026951:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026954:	40                   	inc    eax
c0026955:	a9 fe 07 00 00       	test   eax,0x7fe
c002695a:	74 36                	je     c0026992 <__divdf3+0x10e>
c002695c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026960:	0f 89 91 02 00 00    	jns    c0026bf7 <__divdf3+0x373>
c0026966:	89 f8                	mov    eax,edi
c0026968:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002696e:	e9 80 02 00 00       	jmp    c0026bf3 <__divdf3+0x36f>
c0026973:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026976:	01 f6                	add    esi,esi
c0026978:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002697b:	c1 ef 1f             	shr    edi,0x1f
c002697e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026981:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0026984:	8d 48 ff             	lea    ecx,[eax-0x1]
c0026987:	09 f7                	or     edi,esi
c0026989:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c002698c:	78 2e                	js     c00269bc <__divdf3+0x138>
c002698e:	89 c8                	mov    eax,ecx
c0026990:	eb e1                	jmp    c0026973 <__divdf3+0xef>
c0026992:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0026995:	09 d0                	or     eax,edx
c0026997:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c002699b:	74 0f                	je     c00269ac <__divdf3+0x128>
c002699d:	85 c0                	test   eax,eax
c002699f:	74 bb                	je     c002695c <__divdf3+0xd8>
c00269a1:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00269a4:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00269a7:	e9 4b 02 00 00       	jmp    c0026bf7 <__divdf3+0x373>
c00269ac:	85 c0                	test   eax,eax
c00269ae:	75 ac                	jne    c002695c <__divdf3+0xd8>
c00269b0:	31 ff                	xor    edi,edi
c00269b2:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00269b7:	e9 3b 02 00 00       	jmp    c0026bf7 <__divdf3+0x373>
c00269bc:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00269bf:	8d 4f 01             	lea    ecx,[edi+0x1]
c00269c2:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c00269c8:	75 6b                	jne    c0026a35 <__divdf3+0x1b1>
c00269ca:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00269cd:	09 d6                	or     esi,edx
c00269cf:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00269d3:	74 28                	je     c00269fd <__divdf3+0x179>
c00269d5:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00269d8:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00269db:	85 f6                	test   esi,esi
c00269dd:	0f 85 14 02 00 00    	jne    c0026bf7 <__divdf3+0x373>
c00269e3:	31 ff                	xor    edi,edi
c00269e5:	31 c9                	xor    ecx,ecx
c00269e7:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00269ea:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c00269ed:	0f 89 04 02 00 00    	jns    c0026bf7 <__divdf3+0x373>
c00269f3:	b9 00 00 00 80       	mov    ecx,0x80000000
c00269f8:	e9 fa 01 00 00       	jmp    c0026bf7 <__divdf3+0x373>
c00269fd:	85 f6                	test   esi,esi
c00269ff:	75 1b                	jne    c0026a1c <__divdf3+0x198>
c0026a01:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026a04:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0026a07:	25 00 00 00 80       	and    eax,0x80000000
c0026a0c:	31 c9                	xor    ecx,ecx
c0026a0e:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0026a13:	89 cf                	mov    edi,ecx
c0026a15:	89 c1                	mov    ecx,eax
c0026a17:	e9 db 01 00 00       	jmp    c0026bf7 <__divdf3+0x373>
c0026a1c:	01 d2                	add    edx,edx
c0026a1e:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0026a21:	c1 eb 1f             	shr    ebx,0x1f
c0026a24:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026a27:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0026a2a:	8d 48 01             	lea    ecx,[eax+0x1]
c0026a2d:	09 da                	or     edx,ebx
c0026a2f:	78 04                	js     c0026a35 <__divdf3+0x1b1>
c0026a31:	89 c8                	mov    eax,ecx
c0026a33:	eb e7                	jmp    c0026a1c <__divdf3+0x198>
c0026a35:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026a38:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026a3e:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026a44:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0026a47:	39 d6                	cmp    esi,edx
c0026a49:	77 0d                	ja     c0026a58 <__divdf3+0x1d4>
c0026a4b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026a4e:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0026a51:	72 1b                	jb     c0026a6e <__divdf3+0x1ea>
c0026a53:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0026a56:	75 16                	jne    c0026a6e <__divdf3+0x1ea>
c0026a58:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0026a5b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0026a5e:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0026a61:	83 de 00             	sbb    esi,0x0
c0026a64:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0026a67:	ba 01 00 00 00       	mov    edx,0x1
c0026a6c:	eb 02                	jmp    c0026a70 <__divdf3+0x1ec>
c0026a6e:	31 d2                	xor    edx,edx
c0026a70:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0026a77:	31 ff                	xor    edi,edi
c0026a79:	01 ff                	add    edi,edi
c0026a7b:	89 d1                	mov    ecx,edx
c0026a7d:	c1 e9 1f             	shr    ecx,0x1f
c0026a80:	09 cf                	or     edi,ecx
c0026a82:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0026a85:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0026a88:	89 da                	mov    edx,ebx
c0026a8a:	89 f3                	mov    ebx,esi
c0026a8c:	8d 34 36             	lea    esi,[esi+esi*1]
c0026a8f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026a92:	c1 e9 1f             	shr    ecx,0x1f
c0026a95:	09 ce                	or     esi,ecx
c0026a97:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026a9a:	01 c9                	add    ecx,ecx
c0026a9c:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0026a9f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0026aa2:	85 db                	test   ebx,ebx
c0026aa4:	78 29                	js     c0026acf <__divdf3+0x24b>
c0026aa6:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0026aa9:	72 07                	jb     c0026ab2 <__divdf3+0x22e>
c0026aab:	75 3c                	jne    c0026ae9 <__divdf3+0x265>
c0026aad:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0026ab0:	77 37                	ja     c0026ae9 <__divdf3+0x265>
c0026ab2:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0026ab5:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0026ab8:	31 d2                	xor    edx,edx
c0026aba:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0026abd:	0f 97 c2             	seta   dl
c0026ac0:	29 d6                	sub    esi,edx
c0026ac2:	89 d9                	mov    ecx,ebx
c0026ac4:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0026ac7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0026aca:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0026acd:	eb 17                	jmp    c0026ae6 <__divdf3+0x262>
c0026acf:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0026ad2:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026ad5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0026ad8:	0f 97 c1             	seta   cl
c0026adb:	0f b6 c9             	movzx  ecx,cl
c0026ade:	29 ce                	sub    esi,ecx
c0026ae0:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0026ae3:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0026ae6:	83 ca 01             	or     edx,0x1
c0026ae9:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0026aec:	75 8b                	jne    c0026a79 <__divdf3+0x1f5>
c0026aee:	c1 e7 09             	shl    edi,0x9
c0026af1:	89 d1                	mov    ecx,edx
c0026af3:	c1 e9 17             	shr    ecx,0x17
c0026af6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026af9:	09 f3                	or     ebx,esi
c0026afb:	0f 95 c3             	setne  bl
c0026afe:	0f b6 db             	movzx  ebx,bl
c0026b01:	c1 e2 09             	shl    edx,0x9
c0026b04:	09 d3                	or     ebx,edx
c0026b06:	89 ca                	mov    edx,ecx
c0026b08:	09 fa                	or     edx,edi
c0026b0a:	78 0c                	js     c0026b18 <__divdf3+0x294>
c0026b0c:	01 d2                	add    edx,edx
c0026b0e:	89 d9                	mov    ecx,ebx
c0026b10:	c1 e9 1f             	shr    ecx,0x1f
c0026b13:	09 ca                	or     edx,ecx
c0026b15:	01 db                	add    ebx,ebx
c0026b17:	48                   	dec    eax
c0026b18:	3d fe 07 00 00       	cmp    eax,0x7fe
c0026b1d:	0f 8f 83 00 00 00    	jg     c0026ba6 <__divdf3+0x322>
c0026b23:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026b29:	85 c0                	test   eax,eax
c0026b2b:	0f 8f 82 00 00 00    	jg     c0026bb3 <__divdf3+0x32f>
c0026b31:	83 f8 cc             	cmp    eax,0xffffffcc
c0026b34:	7c 77                	jl     c0026bad <__divdf3+0x329>
c0026b36:	be 01 00 00 00       	mov    esi,0x1
c0026b3b:	29 c6                	sub    esi,eax
c0026b3d:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026b43:	83 fe 1f             	cmp    esi,0x1f
c0026b46:	7e 2f                	jle    c0026b77 <__divdf3+0x2f3>
c0026b48:	83 fe 20             	cmp    esi,0x20
c0026b4b:	75 0a                	jne    c0026b57 <__divdf3+0x2d3>
c0026b4d:	85 db                	test   ebx,ebx
c0026b4f:	0f 95 c3             	setne  bl
c0026b52:	0f b6 db             	movzx  ebx,bl
c0026b55:	eb 1a                	jmp    c0026b71 <__divdf3+0x2ed>
c0026b57:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0026b5a:	89 d7                	mov    edi,edx
c0026b5c:	d3 e7                	shl    edi,cl
c0026b5e:	89 f9                	mov    ecx,edi
c0026b60:	09 d9                	or     ecx,ebx
c0026b62:	0f 95 c3             	setne  bl
c0026b65:	0f b6 db             	movzx  ebx,bl
c0026b68:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0026b6d:	29 c1                	sub    ecx,eax
c0026b6f:	d3 ea                	shr    edx,cl
c0026b71:	09 d3                	or     ebx,edx
c0026b73:	31 c0                	xor    eax,eax
c0026b75:	eb 3a                	jmp    c0026bb1 <__divdf3+0x32d>
c0026b77:	83 c0 1f             	add    eax,0x1f
c0026b7a:	89 d7                	mov    edi,edx
c0026b7c:	88 c1                	mov    cl,al
c0026b7e:	d3 e7                	shl    edi,cl
c0026b80:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026b83:	89 df                	mov    edi,ebx
c0026b85:	89 f1                	mov    ecx,esi
c0026b87:	d3 ef                	shr    edi,cl
c0026b89:	89 f9                	mov    ecx,edi
c0026b8b:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0026b8e:	09 cf                	or     edi,ecx
c0026b90:	88 c1                	mov    cl,al
c0026b92:	d3 e3                	shl    ebx,cl
c0026b94:	85 db                	test   ebx,ebx
c0026b96:	0f 95 c3             	setne  bl
c0026b99:	0f b6 db             	movzx  ebx,bl
c0026b9c:	09 fb                	or     ebx,edi
c0026b9e:	89 f1                	mov    ecx,esi
c0026ba0:	d3 ea                	shr    edx,cl
c0026ba2:	31 c0                	xor    eax,eax
c0026ba4:	eb 0d                	jmp    c0026bb3 <__divdf3+0x32f>
c0026ba6:	b8 ff 07 00 00       	mov    eax,0x7ff
c0026bab:	eb 02                	jmp    c0026baf <__divdf3+0x32b>
c0026bad:	31 c0                	xor    eax,eax
c0026baf:	31 db                	xor    ebx,ebx
c0026bb1:	31 d2                	xor    edx,edx
c0026bb3:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0026bb6:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0026bb9:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0026bbf:	09 c8                	or     eax,ecx
c0026bc1:	c1 e0 14             	shl    eax,0x14
c0026bc4:	89 d1                	mov    ecx,edx
c0026bc6:	c1 e9 0b             	shr    ecx,0xb
c0026bc9:	09 c8                	or     eax,ecx
c0026bcb:	89 c6                	mov    esi,eax
c0026bcd:	89 d9                	mov    ecx,ebx
c0026bcf:	c1 e9 0b             	shr    ecx,0xb
c0026bd2:	c1 e2 15             	shl    edx,0x15
c0026bd5:	09 ca                	or     edx,ecx
c0026bd7:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0026bdd:	0f 95 c0             	setne  al
c0026be0:	09 c1                	or     ecx,eax
c0026be2:	83 e1 01             	and    ecx,0x1
c0026be5:	c1 eb 0a             	shr    ebx,0xa
c0026be8:	21 cb                	and    ebx,ecx
c0026bea:	01 d3                	add    ebx,edx
c0026bec:	89 d8                	mov    eax,ebx
c0026bee:	83 d6 00             	adc    esi,0x0
c0026bf1:	89 f2                	mov    edx,esi
c0026bf3:	89 c7                	mov    edi,eax
c0026bf5:	89 d1                	mov    ecx,edx
c0026bf7:	89 f8                	mov    eax,edi
c0026bf9:	89 ca                	mov    edx,ecx
c0026bfb:	83 c4 2c             	add    esp,0x2c
c0026bfe:	5b                   	pop    ebx
c0026bff:	5e                   	pop    esi
c0026c00:	5f                   	pop    edi
c0026c01:	5d                   	pop    ebp
c0026c02:	c3                   	ret    

c0026c03 <__floatsidf>:
c0026c03:	55                   	push   ebp
c0026c04:	89 e5                	mov    ebp,esp
c0026c06:	56                   	push   esi
c0026c07:	53                   	push   ebx
c0026c08:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026c0b:	85 db                	test   ebx,ebx
c0026c0d:	7e 15                	jle    c0026c24 <__floatsidf+0x21>
c0026c0f:	0f bd cb             	bsr    ecx,ebx
c0026c12:	83 f1 1f             	xor    ecx,0x1f
c0026c15:	d3 e3                	shl    ebx,cl
c0026c17:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0026c1d:	b8 1e 04 00 00       	mov    eax,0x41e
c0026c22:	eb 21                	jmp    c0026c45 <__floatsidf+0x42>
c0026c24:	b8 00 00 00 00       	mov    eax,0x0
c0026c29:	ba 00 00 00 00       	mov    edx,0x0
c0026c2e:	74 2a                	je     c0026c5a <__floatsidf+0x57>
c0026c30:	f7 db                	neg    ebx
c0026c32:	0f bd cb             	bsr    ecx,ebx
c0026c35:	83 f1 1f             	xor    ecx,0x1f
c0026c38:	d3 e3                	shl    ebx,cl
c0026c3a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0026c40:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0026c45:	29 c8                	sub    eax,ecx
c0026c47:	c1 e0 14             	shl    eax,0x14
c0026c4a:	89 c1                	mov    ecx,eax
c0026c4c:	89 de                	mov    esi,ebx
c0026c4e:	c1 ee 0b             	shr    esi,0xb
c0026c51:	09 f1                	or     ecx,esi
c0026c53:	89 ca                	mov    edx,ecx
c0026c55:	c1 e3 15             	shl    ebx,0x15
c0026c58:	89 d8                	mov    eax,ebx
c0026c5a:	5b                   	pop    ebx
c0026c5b:	5e                   	pop    esi
c0026c5c:	5d                   	pop    ebp
c0026c5d:	c3                   	ret    

c0026c5e <__floatunsidf>:
c0026c5e:	55                   	push   ebp
c0026c5f:	89 e5                	mov    ebp,esp
c0026c61:	56                   	push   esi
c0026c62:	53                   	push   ebx
c0026c63:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026c66:	85 db                	test   ebx,ebx
c0026c68:	74 2a                	je     c0026c94 <__floatunsidf+0x36>
c0026c6a:	0f bd cb             	bsr    ecx,ebx
c0026c6d:	83 f1 1f             	xor    ecx,0x1f
c0026c70:	d3 e3                	shl    ebx,cl
c0026c72:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0026c78:	b8 1e 04 00 00       	mov    eax,0x41e
c0026c7d:	29 c8                	sub    eax,ecx
c0026c7f:	c1 e0 14             	shl    eax,0x14
c0026c82:	89 c1                	mov    ecx,eax
c0026c84:	89 de                	mov    esi,ebx
c0026c86:	c1 ee 0b             	shr    esi,0xb
c0026c89:	09 f1                	or     ecx,esi
c0026c8b:	89 ca                	mov    edx,ecx
c0026c8d:	c1 e3 15             	shl    ebx,0x15
c0026c90:	89 d8                	mov    eax,ebx
c0026c92:	eb 04                	jmp    c0026c98 <__floatunsidf+0x3a>
c0026c94:	31 c0                	xor    eax,eax
c0026c96:	31 d2                	xor    edx,edx
c0026c98:	5b                   	pop    ebx
c0026c99:	5e                   	pop    esi
c0026c9a:	5d                   	pop    ebp
c0026c9b:	c3                   	ret    

c0026c9c <__fixdfsi>:
c0026c9c:	55                   	push   ebp
c0026c9d:	89 e5                	mov    ebp,esp
c0026c9f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026ca2:	89 d1                	mov    ecx,edx
c0026ca4:	c1 e1 0b             	shl    ecx,0xb
c0026ca7:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0026cad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026cb0:	c1 e8 15             	shr    eax,0x15
c0026cb3:	09 c1                	or     ecx,eax
c0026cb5:	c1 fa 14             	sar    edx,0x14
c0026cb8:	78 1f                	js     c0026cd9 <__fixdfsi+0x3d>
c0026cba:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0026cc0:	31 c0                	xor    eax,eax
c0026cc2:	83 fa 1e             	cmp    edx,0x1e
c0026cc5:	77 40                	ja     c0026d07 <__fixdfsi+0x6b>
c0026cc7:	89 c8                	mov    eax,ecx
c0026cc9:	0d 00 00 00 80       	or     eax,0x80000000
c0026cce:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026cd3:	29 d1                	sub    ecx,edx
c0026cd5:	d3 e8                	shr    eax,cl
c0026cd7:	eb 2e                	jmp    c0026d07 <__fixdfsi+0x6b>
c0026cd9:	31 c0                	xor    eax,eax
c0026cdb:	81 c2 01 04 00 00    	add    edx,0x401
c0026ce1:	78 24                	js     c0026d07 <__fixdfsi+0x6b>
c0026ce3:	83 fa 1e             	cmp    edx,0x1e
c0026ce6:	7e 09                	jle    c0026cf1 <__fixdfsi+0x55>
c0026ce8:	83 fa 1f             	cmp    edx,0x1f
c0026ceb:	75 18                	jne    c0026d05 <__fixdfsi+0x69>
c0026ced:	85 c9                	test   ecx,ecx
c0026cef:	75 14                	jne    c0026d05 <__fixdfsi+0x69>
c0026cf1:	89 c8                	mov    eax,ecx
c0026cf3:	0d 00 00 00 80       	or     eax,0x80000000
c0026cf8:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026cfd:	29 d1                	sub    ecx,edx
c0026cff:	d3 e8                	shr    eax,cl
c0026d01:	f7 d8                	neg    eax
c0026d03:	eb 02                	jmp    c0026d07 <__fixdfsi+0x6b>
c0026d05:	31 c0                	xor    eax,eax
c0026d07:	5d                   	pop    ebp
c0026d08:	c3                   	ret    

c0026d09 <__fixunsdfsi>:
c0026d09:	55                   	push   ebp
c0026d0a:	89 e5                	mov    ebp,esp
c0026d0c:	53                   	push   ebx
c0026d0d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026d10:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026d13:	89 d3                	mov    ebx,edx
c0026d15:	c1 fb 14             	sar    ebx,0x14
c0026d18:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0026d1e:	31 c0                	xor    eax,eax
c0026d20:	83 fb 1f             	cmp    ebx,0x1f
c0026d23:	77 1d                	ja     c0026d42 <__fixunsdfsi+0x39>
c0026d25:	89 d0                	mov    eax,edx
c0026d27:	c1 e0 0b             	shl    eax,0xb
c0026d2a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0026d2f:	c1 e9 15             	shr    ecx,0x15
c0026d32:	09 c8                	or     eax,ecx
c0026d34:	0d 00 00 00 80       	or     eax,0x80000000
c0026d39:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026d3e:	29 d9                	sub    ecx,ebx
c0026d40:	d3 e8                	shr    eax,cl
c0026d42:	5b                   	pop    ebx
c0026d43:	5d                   	pop    ebp
c0026d44:	c3                   	ret    

c0026d45 <__cmpdf2>:
c0026d45:	55                   	push   ebp
c0026d46:	89 e5                	mov    ebp,esp
c0026d48:	57                   	push   edi
c0026d49:	56                   	push   esi
c0026d4a:	53                   	push   ebx
c0026d4b:	83 ec 0c             	sub    esp,0xc
c0026d4e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0026d51:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0026d54:	89 ca                	mov    edx,ecx
c0026d56:	c1 ea 14             	shr    edx,0x14
c0026d59:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0026d5f:	89 cb                	mov    ebx,ecx
c0026d61:	c1 fb 1f             	sar    ebx,0x1f
c0026d64:	31 da                	xor    edx,ebx
c0026d66:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026d69:	89 df                	mov    edi,ebx
c0026d6b:	c1 e7 0b             	shl    edi,0xb
c0026d6e:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026d71:	c1 e1 0b             	shl    ecx,0xb
c0026d74:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0026d7a:	c1 eb 15             	shr    ebx,0x15
c0026d7d:	09 d9                	or     ecx,ebx
c0026d7f:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0026d82:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0026d85:	89 ce                	mov    esi,ecx
c0026d87:	c1 ee 14             	shr    esi,0x14
c0026d8a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0026d90:	89 cb                	mov    ebx,ecx
c0026d92:	c1 fb 1f             	sar    ebx,0x1f
c0026d95:	31 de                	xor    esi,ebx
c0026d97:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0026d9a:	89 df                	mov    edi,ebx
c0026d9c:	c1 e7 0b             	shl    edi,0xb
c0026d9f:	c1 e1 0b             	shl    ecx,0xb
c0026da2:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0026da8:	c1 eb 15             	shr    ebx,0x15
c0026dab:	09 d9                	or     ecx,ebx
c0026dad:	89 d3                	mov    ebx,edx
c0026daf:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0026db5:	43                   	inc    ebx
c0026db6:	83 fb 01             	cmp    ebx,0x1
c0026db9:	77 08                	ja     c0026dc3 <__cmpdf2+0x7e>
c0026dbb:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026dbe:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0026dc1:	75 68                	jne    c0026e2b <__cmpdf2+0xe6>
c0026dc3:	89 f3                	mov    ebx,esi
c0026dc5:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0026dcb:	43                   	inc    ebx
c0026dcc:	83 fb 01             	cmp    ebx,0x1
c0026dcf:	77 06                	ja     c0026dd7 <__cmpdf2+0x92>
c0026dd1:	89 fb                	mov    ebx,edi
c0026dd3:	09 cb                	or     ebx,ecx
c0026dd5:	75 54                	jne    c0026e2b <__cmpdf2+0xe6>
c0026dd7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0026dda:	09 f8                	or     eax,edi
c0026ddc:	09 c8                	or     eax,ecx
c0026dde:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0026de1:	75 12                	jne    c0026df5 <__cmpdf2+0xb0>
c0026de3:	8d 42 01             	lea    eax,[edx+0x1]
c0026de6:	83 f8 01             	cmp    eax,0x1
c0026de9:	77 0a                	ja     c0026df5 <__cmpdf2+0xb0>
c0026deb:	8d 5e 01             	lea    ebx,[esi+0x1]
c0026dee:	31 c0                	xor    eax,eax
c0026df0:	83 fb 01             	cmp    ebx,0x1
c0026df3:	76 36                	jbe    c0026e2b <__cmpdf2+0xe6>
c0026df5:	b8 01 00 00 00       	mov    eax,0x1
c0026dfa:	39 f2                	cmp    edx,esi
c0026dfc:	7f 2d                	jg     c0026e2b <__cmpdf2+0xe6>
c0026dfe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0026e03:	7c 26                	jl     c0026e2b <__cmpdf2+0xe6>
c0026e05:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0026e08:	77 07                	ja     c0026e11 <__cmpdf2+0xcc>
c0026e0a:	72 16                	jb     c0026e22 <__cmpdf2+0xdd>
c0026e0c:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0026e0f:	76 0a                	jbe    c0026e1b <__cmpdf2+0xd6>
c0026e11:	89 d0                	mov    eax,edx
c0026e13:	c1 f8 1f             	sar    eax,0x1f
c0026e16:	83 c8 01             	or     eax,0x1
c0026e19:	eb 10                	jmp    c0026e2b <__cmpdf2+0xe6>
c0026e1b:	b8 00 00 00 00       	mov    eax,0x0
c0026e20:	73 09                	jae    c0026e2b <__cmpdf2+0xe6>
c0026e22:	89 d0                	mov    eax,edx
c0026e24:	c1 f8 1f             	sar    eax,0x1f
c0026e27:	83 e0 02             	and    eax,0x2
c0026e2a:	48                   	dec    eax
c0026e2b:	83 c4 0c             	add    esp,0xc
c0026e2e:	5b                   	pop    ebx
c0026e2f:	5e                   	pop    esi
c0026e30:	5f                   	pop    edi
c0026e31:	5d                   	pop    ebp
c0026e32:	c3                   	ret    

c0026e33 <__eqdf2>:
c0026e33:	55                   	push   ebp
c0026e34:	89 e5                	mov    ebp,esp
c0026e36:	50                   	push   eax
c0026e37:	6a 01                	push   0x1
c0026e39:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0026e3c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0026e3f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026e42:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026e45:	e8 fb fe ff ff       	call   c0026d45 <__cmpdf2>
c0026e4a:	83 c4 18             	add    esp,0x18
c0026e4d:	c9                   	leave  
c0026e4e:	c3                   	ret    

c0026e4f <__nedf2>:
c0026e4f:	eb e2                	jmp    c0026e33 <__eqdf2>

c0026e51 <__gtdf2>:
c0026e51:	55                   	push   ebp
c0026e52:	89 e5                	mov    ebp,esp
c0026e54:	50                   	push   eax
c0026e55:	6a ff                	push   0xffffffff
c0026e57:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0026e5a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0026e5d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026e60:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026e63:	e8 dd fe ff ff       	call   c0026d45 <__cmpdf2>
c0026e68:	83 c4 18             	add    esp,0x18
c0026e6b:	c9                   	leave  
c0026e6c:	c3                   	ret    

c0026e6d <__gedf2>:
c0026e6d:	eb e2                	jmp    c0026e51 <__gtdf2>

c0026e6f <__ltdf2>:
c0026e6f:	eb c2                	jmp    c0026e33 <__eqdf2>

c0026e71 <__ledf2>:
c0026e71:	eb c0                	jmp    c0026e33 <__eqdf2>

c0026e73 <__truncdfsf2>:
c0026e73:	55                   	push   ebp
c0026e74:	89 e5                	mov    ebp,esp
c0026e76:	57                   	push   edi
c0026e77:	56                   	push   esi
c0026e78:	53                   	push   ebx
c0026e79:	83 ec 0c             	sub    esp,0xc
c0026e7c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026e7f:	89 d1                	mov    ecx,edx
c0026e81:	c1 f9 14             	sar    ecx,0x14
c0026e84:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026e87:	89 df                	mov    edi,ebx
c0026e89:	c1 e7 0b             	shl    edi,0xb
c0026e8c:	89 d0                	mov    eax,edx
c0026e8e:	c1 e0 0b             	shl    eax,0xb
c0026e91:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0026e96:	c1 eb 15             	shr    ebx,0x15
c0026e99:	09 d8                	or     eax,ebx
c0026e9b:	89 cb                	mov    ebx,ecx
c0026e9d:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0026ea3:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0026ea9:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0026eaf:	0f 86 9e 00 00 00    	jbe    c0026f53 <__truncdfsf2+0xe0>
c0026eb5:	85 db                	test   ebx,ebx
c0026eb7:	75 0a                	jne    c0026ec3 <__truncdfsf2+0x50>
c0026eb9:	c1 fa 17             	sar    edx,0x17
c0026ebc:	30 d2                	xor    dl,dl
c0026ebe:	e9 84 00 00 00       	jmp    c0026f47 <__truncdfsf2+0xd4>
c0026ec3:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0026ec9:	83 fe 83             	cmp    esi,0xffffff83
c0026ecc:	7d 4b                	jge    c0026f19 <__truncdfsf2+0xa6>
c0026ece:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0026ed3:	29 f1                	sub    ecx,esi
c0026ed5:	83 f9 1f             	cmp    ecx,0x1f
c0026ed8:	7f 6b                	jg     c0026f45 <__truncdfsf2+0xd2>
c0026eda:	0d 00 00 00 80       	or     eax,0x80000000
c0026edf:	89 c3                	mov    ebx,eax
c0026ee1:	d3 eb                	shr    ebx,cl
c0026ee3:	be 01 00 00 00       	mov    esi,0x1
c0026ee8:	d3 e6                	shl    esi,cl
c0026eea:	4e                   	dec    esi
c0026eeb:	21 f0                	and    eax,esi
c0026eed:	09 f8                	or     eax,edi
c0026eef:	0f 95 c0             	setne  al
c0026ef2:	0f b6 c0             	movzx  eax,al
c0026ef5:	09 c3                	or     ebx,eax
c0026ef7:	89 d9                	mov    ecx,ebx
c0026ef9:	c1 e9 08             	shr    ecx,0x8
c0026efc:	f6 c3 7f             	test   bl,0x7f
c0026eff:	0f 95 c0             	setne  al
c0026f02:	09 c8                	or     eax,ecx
c0026f04:	83 e0 01             	and    eax,0x1
c0026f07:	c1 eb 07             	shr    ebx,0x7
c0026f0a:	21 c3                	and    ebx,eax
c0026f0c:	81 e2 00 00 00 80    	and    edx,0x80000000
c0026f12:	09 d1                	or     ecx,edx
c0026f14:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0026f17:	eb 76                	jmp    c0026f8f <__truncdfsf2+0x11c>
c0026f19:	83 c6 80             	add    esi,0xffffff80
c0026f1c:	7e 1d                	jle    c0026f3b <__truncdfsf2+0xc8>
c0026f1e:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0026f24:	75 0b                	jne    c0026f31 <__truncdfsf2+0xbe>
c0026f26:	09 f8                	or     eax,edi
c0026f28:	74 09                	je     c0026f33 <__truncdfsf2+0xc0>
c0026f2a:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0026f2f:	eb 02                	jmp    c0026f33 <__truncdfsf2+0xc0>
c0026f31:	31 c0                	xor    eax,eax
c0026f33:	c1 fa 17             	sar    edx,0x17
c0026f36:	80 ca ff             	or     dl,0xff
c0026f39:	eb 0e                	jmp    c0026f49 <__truncdfsf2+0xd6>
c0026f3b:	c1 fa 1f             	sar    edx,0x1f
c0026f3e:	c1 e2 08             	shl    edx,0x8
c0026f41:	09 ca                	or     edx,ecx
c0026f43:	eb 04                	jmp    c0026f49 <__truncdfsf2+0xd6>
c0026f45:	31 d2                	xor    edx,edx
c0026f47:	31 c0                	xor    eax,eax
c0026f49:	c1 e2 17             	shl    edx,0x17
c0026f4c:	c1 e8 08             	shr    eax,0x8
c0026f4f:	09 d0                	or     eax,edx
c0026f51:	eb 3c                	jmp    c0026f8f <__truncdfsf2+0x11c>
c0026f53:	81 e9 80 03 00 00    	sub    ecx,0x380
c0026f59:	89 ca                	mov    edx,ecx
c0026f5b:	c1 fa 0b             	sar    edx,0xb
c0026f5e:	c1 e2 08             	shl    edx,0x8
c0026f61:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0026f64:	31 db                	xor    ebx,ebx
c0026f66:	85 ff                	test   edi,edi
c0026f68:	0f 95 c3             	setne  bl
c0026f6b:	09 d8                	or     eax,ebx
c0026f6d:	89 c3                	mov    ebx,eax
c0026f6f:	c1 eb 08             	shr    ebx,0x8
c0026f72:	a8 7f                	test   al,0x7f
c0026f74:	0f 95 c2             	setne  dl
c0026f77:	89 d6                	mov    esi,edx
c0026f79:	09 de                	or     esi,ebx
c0026f7b:	83 e6 01             	and    esi,0x1
c0026f7e:	c1 e8 07             	shr    eax,0x7
c0026f81:	21 f0                	and    eax,esi
c0026f83:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0026f86:	09 ca                	or     edx,ecx
c0026f88:	c1 e2 17             	shl    edx,0x17
c0026f8b:	09 da                	or     edx,ebx
c0026f8d:	01 d0                	add    eax,edx
c0026f8f:	83 c4 0c             	add    esp,0xc
c0026f92:	5b                   	pop    ebx
c0026f93:	5e                   	pop    esi
c0026f94:	5f                   	pop    edi
c0026f95:	5d                   	pop    ebp
c0026f96:	c3                   	ret    

c0026f97 <__extendsfdf2>:
c0026f97:	55                   	push   ebp
c0026f98:	89 e5                	mov    ebp,esp
c0026f9a:	57                   	push   edi
c0026f9b:	56                   	push   esi
c0026f9c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026f9f:	89 d1                	mov    ecx,edx
c0026fa1:	c1 f9 17             	sar    ecx,0x17
c0026fa4:	c1 e2 08             	shl    edx,0x8
c0026fa7:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026fad:	89 c8                	mov    eax,ecx
c0026faf:	80 e4 f8             	and    ah,0xf8
c0026fb2:	8d 71 01             	lea    esi,[ecx+0x1]
c0026fb5:	81 e6 fe 00 00 00    	and    esi,0xfe
c0026fbb:	75 27                	jne    c0026fe4 <__extendsfdf2+0x4d>
c0026fbd:	81 e1 ff 00 00 00    	and    ecx,0xff
c0026fc3:	75 18                	jne    c0026fdd <__extendsfdf2+0x46>
c0026fc5:	85 d2                	test   edx,edx
c0026fc7:	74 20                	je     c0026fe9 <__extendsfdf2+0x52>
c0026fc9:	41                   	inc    ecx
c0026fca:	01 d2                	add    edx,edx
c0026fcc:	79 fb                	jns    c0026fc9 <__extendsfdf2+0x32>
c0026fce:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026fd4:	29 c8                	sub    eax,ecx
c0026fd6:	05 81 03 00 00       	add    eax,0x381
c0026fdb:	eb 0c                	jmp    c0026fe9 <__extendsfdf2+0x52>
c0026fdd:	05 00 07 00 00       	add    eax,0x700
c0026fe2:	eb 05                	jmp    c0026fe9 <__extendsfdf2+0x52>
c0026fe4:	05 80 03 00 00       	add    eax,0x380
c0026fe9:	c1 e0 14             	shl    eax,0x14
c0026fec:	89 c1                	mov    ecx,eax
c0026fee:	89 d0                	mov    eax,edx
c0026ff0:	c1 e8 0b             	shr    eax,0xb
c0026ff3:	09 c1                	or     ecx,eax
c0026ff5:	c1 e2 15             	shl    edx,0x15
c0026ff8:	89 d0                	mov    eax,edx
c0026ffa:	89 ca                	mov    edx,ecx
c0026ffc:	5e                   	pop    esi
c0026ffd:	5f                   	pop    edi
c0026ffe:	5d                   	pop    ebp
c0026fff:	c3                   	ret    

c0027000 <fabs>:
c0027000:	83 ec 0c             	sub    esp,0xc
c0027003:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027007:	89 04 24             	mov    DWORD PTR [esp],eax
c002700a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002700e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027013:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0027017:	dd 04 24             	fld    QWORD PTR [esp]
c002701a:	83 c4 0c             	add    esp,0xc
c002701d:	c3                   	ret    
c002701e:	66 90                	xchg   ax,ax

c0027020 <lrint>:
c0027020:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0027024:	83 ec 04             	sub    esp,0x4
c0027027:	db 1c 24             	fistp  DWORD PTR [esp]
c002702a:	58                   	pop    eax
c002702b:	c3                   	ret    

c002702c <lrintf>:
c002702c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0027030:	83 ec 04             	sub    esp,0x4
c0027033:	db 1c 24             	fistp  DWORD PTR [esp]
c0027036:	58                   	pop    eax
c0027037:	c3                   	ret    

Disassembly of section .init:

c0027038 <_init>:
c0027038:	55                   	push   ebp
c0027039:	89 e5                	mov    ebp,esp
c002703b:	e8 d8 90 fd ff       	call   c0000118 <frame_dummy>
c0027040:	e8 63 e0 ff ff       	call   c00250a8 <__do_global_ctors_aux>
c0027045:	5d                   	pop    ebp
c0027046:	c3                   	ret    

Disassembly of section .fini:

c0027047 <_fini>:
c0027047:	55                   	push   ebp
c0027048:	89 e5                	mov    ebp,esp
c002704a:	e8 59 90 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002704f:	5d                   	pop    ebp
c0027050:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0027052 <Computer::~Computer()>:
c0027052:	83 ec 0c             	sub    esp,0xc
c0027055:	ba f0 8a 02 c0       	mov    edx,0xc0028af0
c002705a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002705e:	89 10                	mov    DWORD PTR [eax],edx
c0027060:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027064:	83 ec 0c             	sub    esp,0xc
c0027067:	50                   	push   eax
c0027068:	e8 c3 c9 fe ff       	call   c0013a30 <Device::~Device()>
c002706d:	83 c4 10             	add    esp,0x10
c0027070:	90                   	nop
c0027071:	83 c4 0c             	add    esp,0xc
c0027074:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0027076 <Computer::~Computer()>:
c0027076:	83 ec 0c             	sub    esp,0xc
c0027079:	83 ec 0c             	sub    esp,0xc
c002707c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027080:	e8 cd ff ff ff       	call   c0027052 <Computer::~Computer()>
c0027085:	83 c4 10             	add    esp,0x10
c0027088:	83 ec 08             	sub    esp,0x8
c002708b:	68 ec 01 00 00       	push   0x1ec
c0027090:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027094:	e8 f6 b5 fe ff       	call   c001268f <operator delete(void*, unsigned long)>
c0027099:	83 c4 10             	add    esp,0x10
c002709c:	83 c4 0c             	add    esp,0xc
c002709f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00270a0 <idleCommon()>:
c00270a0:	83 ec 0c             	sub    esp,0xc
c00270a3:	e8 70 5c ff ff       	call   c001cd18 <lockScheduler()>
c00270a8:	e8 a7 5f ff ff       	call   c001d054 <schedule()>
c00270ad:	83 c4 0c             	add    esp,0xc
c00270b0:	e9 65 5c ff ff       	jmp    c001cd1a <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00270b6 <LinkedList<UnixFile>::~LinkedList()>:
c00270b6:	90                   	nop
c00270b7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00270b8 <LinkedList<UnixFile>::LinkedList()>:
c00270b8:	83 ec 0c             	sub    esp,0xc
c00270bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00270bf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00270c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00270c9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00270d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00270d4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00270db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00270df:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00270e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00270e9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00270f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00270f4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00270fb:	83 ec 0c             	sub    esp,0xc
c00270fe:	68 66 8d 02 c0       	push   0xc0028d66
c0027103:	e8 67 b6 fe ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c0027108:	83 c4 10             	add    esp,0x10
c002710b:	90                   	nop
c002710c:	83 c4 0c             	add    esp,0xc
c002710f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0027110 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0027110:	83 ec 0c             	sub    esp,0xc
c0027113:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0027118:	75 10                	jne    c002712a <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c002711a:	83 ec 0c             	sub    esp,0xc
c002711d:	68 80 8d 02 c0       	push   0xc0028d80
c0027122:	e8 62 27 ff ff       	call   c0019889 <Krnl::panic(char const*)>
c0027127:	83 c4 10             	add    esp,0x10
c002712a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002712e:	8b 00                	mov    eax,DWORD PTR [eax]
c0027130:	85 c0                	test   eax,eax
c0027132:	74 34                	je     c0027168 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0027134:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027138:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002713b:	85 c0                	test   eax,eax
c002713d:	74 29                	je     c0027168 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002713f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027143:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027146:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002714a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002714d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027151:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027155:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027158:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002715c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002715f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027166:	eb 65                	jmp    c00271cd <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0027168:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002716c:	8b 00                	mov    eax,DWORD PTR [eax]
c002716e:	85 c0                	test   eax,eax
c0027170:	75 4b                	jne    c00271bd <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0027172:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027176:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027179:	85 c0                	test   eax,eax
c002717b:	75 40                	jne    c00271bd <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002717d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027181:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027185:	89 10                	mov    DWORD PTR [eax],edx
c0027187:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002718b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002718f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027192:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027196:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027199:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00271a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271a4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00271a7:	85 c0                	test   eax,eax
c00271a9:	74 22                	je     c00271cd <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00271ab:	83 ec 0c             	sub    esp,0xc
c00271ae:	68 a2 8d 02 c0       	push   0xc0028da2
c00271b3:	e8 d1 26 ff ff       	call   c0019889 <Krnl::panic(char const*)>
c00271b8:	83 c4 10             	add    esp,0x10
c00271bb:	eb 10                	jmp    c00271cd <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00271bd:	83 ec 0c             	sub    esp,0xc
c00271c0:	68 ac 8d 02 c0       	push   0xc0028dac
c00271c5:	e8 bf 26 ff ff       	call   c0019889 <Krnl::panic(char const*)>
c00271ca:	83 c4 10             	add    esp,0x10
c00271cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271d1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00271d4:	8d 50 01             	lea    edx,[eax+0x1]
c00271d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271db:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00271de:	90                   	nop
c00271df:	83 c4 0c             	add    esp,0xc
c00271e2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00271e4 <LinkedList<UnixFile>::getFirstElement()>:
c00271e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00271e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00271ea:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00271ec <LinkedList<UnixFile>::removeFirst()>:
c00271ec:	83 ec 0c             	sub    esp,0xc
c00271ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00271f5:	85 c0                	test   eax,eax
c00271f7:	75 12                	jne    c002720b <LinkedList<UnixFile>::removeFirst()+0x1f>
c00271f9:	83 ec 0c             	sub    esp,0xc
c00271fc:	68 b8 8d 02 c0       	push   0xc0028db8
c0027201:	e8 83 26 ff ff       	call   c0019889 <Krnl::panic(char const*)>
c0027206:	83 c4 10             	add    esp,0x10
c0027209:	eb 7e                	jmp    c0027289 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002720b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002720f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027212:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027215:	85 c0                	test   eax,eax
c0027217:	74 10                	je     c0027229 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0027219:	83 ec 0c             	sub    esp,0xc
c002721c:	68 03 8e 02 c0       	push   0xc0028e03
c0027221:	e8 63 26 ff ff       	call   c0019889 <Krnl::panic(char const*)>
c0027226:	83 c4 10             	add    esp,0x10
c0027229:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002722d:	8b 00                	mov    eax,DWORD PTR [eax]
c002722f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027232:	85 c0                	test   eax,eax
c0027234:	75 33                	jne    c0027269 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0027236:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002723a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027240:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027244:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002724b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002724f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027252:	83 f8 01             	cmp    eax,0x1
c0027255:	74 21                	je     c0027278 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0027257:	83 ec 0c             	sub    esp,0xc
c002725a:	68 dc 8d 02 c0       	push   0xc0028ddc
c002725f:	e8 25 26 ff ff       	call   c0019889 <Krnl::panic(char const*)>
c0027264:	83 c4 10             	add    esp,0x10
c0027267:	eb 0f                	jmp    c0027278 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0027269:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002726d:	8b 00                	mov    eax,DWORD PTR [eax]
c002726f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0027272:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027276:	89 10                	mov    DWORD PTR [eax],edx
c0027278:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002727c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002727f:	8d 50 ff             	lea    edx,[eax-0x1]
c0027282:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027286:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0027289:	83 c4 0c             	add    esp,0xc
c002728c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002728e <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002728e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027292:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027295:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0027296 <DriverlessDevice::~DriverlessDevice()>:
c0027296:	ba c4 94 02 c0       	mov    edx,0xc00294c4
c002729b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002729f:	89 10                	mov    DWORD PTR [eax],edx
c00272a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00272a5:	50                   	push   eax
c00272a6:	e8 85 c7 fe ff       	call   c0013a30 <Device::~Device()>
c00272ab:	83 c4 04             	add    esp,0x4
c00272ae:	90                   	nop
c00272af:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c00272b0 <DriverlessDevice::~DriverlessDevice()>:
c00272b0:	83 ec 0c             	sub    esp,0xc
c00272b3:	83 ec 0c             	sub    esp,0xc
c00272b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00272ba:	e8 d7 ff ff ff       	call   c0027296 <DriverlessDevice::~DriverlessDevice()>
c00272bf:	83 c4 10             	add    esp,0x10
c00272c2:	83 ec 08             	sub    esp,0x8
c00272c5:	68 58 01 00 00       	push   0x158
c00272ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00272ce:	e8 bc b3 fe ff       	call   c001268f <operator delete(void*, unsigned long)>
c00272d3:	83 c4 10             	add    esp,0x10
c00272d6:	83 c4 0c             	add    esp,0xc
c00272d9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00272da <LinkedList<Device>::addElement(Device*)>:
c00272da:	83 ec 0c             	sub    esp,0xc
c00272dd:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00272e2:	75 10                	jne    c00272f4 <LinkedList<Device>::addElement(Device*)+0x1a>
c00272e4:	83 ec 0c             	sub    esp,0xc
c00272e7:	68 80 8d 02 c0       	push   0xc0028d80
c00272ec:	e8 98 25 ff ff       	call   c0019889 <Krnl::panic(char const*)>
c00272f1:	83 c4 10             	add    esp,0x10
c00272f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00272fa:	85 c0                	test   eax,eax
c00272fc:	74 3a                	je     c0027338 <LinkedList<Device>::addElement(Device*)+0x5e>
c00272fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027302:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027305:	85 c0                	test   eax,eax
c0027307:	74 2f                	je     c0027338 <LinkedList<Device>::addElement(Device*)+0x5e>
c0027309:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002730d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027310:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027314:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002731a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002731e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027322:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027325:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027329:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002732c:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0027336:	eb 68                	jmp    c00273a0 <LinkedList<Device>::addElement(Device*)+0xc6>
c0027338:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002733c:	8b 00                	mov    eax,DWORD PTR [eax]
c002733e:	85 c0                	test   eax,eax
c0027340:	75 4e                	jne    c0027390 <LinkedList<Device>::addElement(Device*)+0xb6>
c0027342:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027346:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027349:	85 c0                	test   eax,eax
c002734b:	75 43                	jne    c0027390 <LinkedList<Device>::addElement(Device*)+0xb6>
c002734d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027351:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027355:	89 10                	mov    DWORD PTR [eax],edx
c0027357:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002735b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002735f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027362:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027366:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027369:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0027373:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027377:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002737a:	85 c0                	test   eax,eax
c002737c:	74 22                	je     c00273a0 <LinkedList<Device>::addElement(Device*)+0xc6>
c002737e:	83 ec 0c             	sub    esp,0xc
c0027381:	68 a2 8d 02 c0       	push   0xc0028da2
c0027386:	e8 fe 24 ff ff       	call   c0019889 <Krnl::panic(char const*)>
c002738b:	83 c4 10             	add    esp,0x10
c002738e:	eb 10                	jmp    c00273a0 <LinkedList<Device>::addElement(Device*)+0xc6>
c0027390:	83 ec 0c             	sub    esp,0xc
c0027393:	68 ac 8d 02 c0       	push   0xc0028dac
c0027398:	e8 ec 24 ff ff       	call   c0019889 <Krnl::panic(char const*)>
c002739d:	83 c4 10             	add    esp,0x10
c00273a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273a4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00273a7:	8d 50 01             	lea    edx,[eax+0x1]
c00273aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273ae:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00273b1:	90                   	nop
c00273b2:	83 c4 0c             	add    esp,0xc
c00273b5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c00273b6 <LinkedList<Device>::LinkedList()>:
c00273b6:	83 ec 0c             	sub    esp,0xc
c00273b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273bd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00273c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273c7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00273ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273d2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00273d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273dd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00273e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273e7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00273ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273f2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00273f9:	83 ec 0c             	sub    esp,0xc
c00273fc:	68 66 8d 02 c0       	push   0xc0028d66
c0027401:	e8 69 b3 fe ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c0027406:	83 c4 10             	add    esp,0x10
c0027409:	90                   	nop
c002740a:	83 c4 0c             	add    esp,0xc
c002740d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002740e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002740e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027412:	8b 00                	mov    eax,DWORD PTR [eax]
c0027414:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0027416 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0027416:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002741a:	8b 00                	mov    eax,DWORD PTR [eax]
c002741c:	85 c0                	test   eax,eax
c002741e:	75 0e                	jne    c002742e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0027420:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027424:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027427:	85 c0                	test   eax,eax
c0027429:	75 03                	jne    c002742e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002742b:	b0 01                	mov    al,0x1
c002742d:	c3                   	ret    
c002742e:	b0 00                	mov    al,0x0
c0027430:	90                   	nop
c0027431:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0027432 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0027432:	83 ec 0c             	sub    esp,0xc
c0027435:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027439:	8b 00                	mov    eax,DWORD PTR [eax]
c002743b:	85 c0                	test   eax,eax
c002743d:	75 15                	jne    c0027454 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c002743f:	83 ec 0c             	sub    esp,0xc
c0027442:	68 b8 8d 02 c0       	push   0xc0028db8
c0027447:	e8 3d 24 ff ff       	call   c0019889 <Krnl::panic(char const*)>
c002744c:	83 c4 10             	add    esp,0x10
c002744f:	e9 88 00 00 00       	jmp    c00274dc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0027454:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027458:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002745b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002745e:	85 c0                	test   eax,eax
c0027460:	0f 95 c0             	setne  al
c0027463:	84 c0                	test   al,al
c0027465:	74 10                	je     c0027477 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0027467:	83 ec 0c             	sub    esp,0xc
c002746a:	68 03 8e 02 c0       	push   0xc0028e03
c002746f:	e8 15 24 ff ff       	call   c0019889 <Krnl::panic(char const*)>
c0027474:	83 c4 10             	add    esp,0x10
c0027477:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002747b:	8b 00                	mov    eax,DWORD PTR [eax]
c002747d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0027480:	85 c0                	test   eax,eax
c0027482:	0f 94 c0             	sete   al
c0027485:	84 c0                	test   al,al
c0027487:	74 33                	je     c00274bc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0027489:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002748d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027493:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027497:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002749e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274a2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00274a5:	83 f8 01             	cmp    eax,0x1
c00274a8:	74 21                	je     c00274cb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00274aa:	83 ec 0c             	sub    esp,0xc
c00274ad:	68 dc 8d 02 c0       	push   0xc0028ddc
c00274b2:	e8 d2 23 ff ff       	call   c0019889 <Krnl::panic(char const*)>
c00274b7:	83 c4 10             	add    esp,0x10
c00274ba:	eb 0f                	jmp    c00274cb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00274bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00274c2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00274c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274c9:	89 10                	mov    DWORD PTR [eax],edx
c00274cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274cf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00274d2:	8d 50 ff             	lea    edx,[eax-0x1]
c00274d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274d9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00274dc:	83 c4 0c             	add    esp,0xc
c00274df:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c00274e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c00274e0:	83 ec 0c             	sub    esp,0xc
c00274e3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00274e8:	75 10                	jne    c00274fa <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c00274ea:	83 ec 0c             	sub    esp,0xc
c00274ed:	68 80 8d 02 c0       	push   0xc0028d80
c00274f2:	e8 92 23 ff ff       	call   c0019889 <Krnl::panic(char const*)>
c00274f7:	83 c4 10             	add    esp,0x10
c00274fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0027500:	85 c0                	test   eax,eax
c0027502:	74 34                	je     c0027538 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0027504:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027508:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002750b:	85 c0                	test   eax,eax
c002750d:	74 29                	je     c0027538 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c002750f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027513:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027516:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002751a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002751d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027521:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027525:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027528:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002752c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002752f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0027536:	eb 65                	jmp    c002759d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0027538:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002753c:	8b 00                	mov    eax,DWORD PTR [eax]
c002753e:	85 c0                	test   eax,eax
c0027540:	75 4b                	jne    c002758d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0027542:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027546:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027549:	85 c0                	test   eax,eax
c002754b:	75 40                	jne    c002758d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c002754d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027551:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027555:	89 10                	mov    DWORD PTR [eax],edx
c0027557:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002755b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002755f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027562:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027566:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027569:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0027570:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027574:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027577:	85 c0                	test   eax,eax
c0027579:	74 22                	je     c002759d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002757b:	83 ec 0c             	sub    esp,0xc
c002757e:	68 a2 8d 02 c0       	push   0xc0028da2
c0027583:	e8 01 23 ff ff       	call   c0019889 <Krnl::panic(char const*)>
c0027588:	83 c4 10             	add    esp,0x10
c002758b:	eb 10                	jmp    c002759d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002758d:	83 ec 0c             	sub    esp,0xc
c0027590:	68 ac 8d 02 c0       	push   0xc0028dac
c0027595:	e8 ef 22 ff ff       	call   c0019889 <Krnl::panic(char const*)>
c002759a:	83 c4 10             	add    esp,0x10
c002759d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275a1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00275a4:	8d 50 01             	lea    edx,[eax+0x1]
c00275a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275ab:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00275ae:	90                   	nop
c00275af:	83 c4 0c             	add    esp,0xc
c00275b2:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c00275b4 <ACPI::~ACPI()>:
c00275b4:	83 ec 0c             	sub    esp,0xc
c00275b7:	ba 68 9d 02 c0       	mov    edx,0xc0029d68
c00275bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275c0:	89 10                	mov    DWORD PTR [eax],edx
c00275c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275c6:	83 ec 0c             	sub    esp,0xc
c00275c9:	50                   	push   eax
c00275ca:	e8 61 c4 fe ff       	call   c0013a30 <Device::~Device()>
c00275cf:	83 c4 10             	add    esp,0x10
c00275d2:	90                   	nop
c00275d3:	83 c4 0c             	add    esp,0xc
c00275d6:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c00275d8 <ACPI::~ACPI()>:
c00275d8:	83 ec 0c             	sub    esp,0xc
c00275db:	83 ec 0c             	sub    esp,0xc
c00275de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00275e2:	e8 cd ff ff ff       	call   c00275b4 <ACPI::~ACPI()>
c00275e7:	83 c4 10             	add    esp,0x10
c00275ea:	83 ec 08             	sub    esp,0x8
c00275ed:	68 68 22 00 00       	push   0x2268
c00275f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00275f6:	e8 94 b0 fe ff       	call   c001268f <operator delete(void*, unsigned long)>
c00275fb:	83 c4 10             	add    esp,0x10
c00275fe:	83 c4 0c             	add    esp,0xc
c0027601:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0027602 <CPU::~CPU()>:
c0027602:	83 ec 0c             	sub    esp,0xc
c0027605:	ba 58 a1 02 c0       	mov    edx,0xc002a158
c002760a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002760e:	89 10                	mov    DWORD PTR [eax],edx
c0027610:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027614:	83 ec 0c             	sub    esp,0xc
c0027617:	50                   	push   eax
c0027618:	e8 13 c4 fe ff       	call   c0013a30 <Device::~Device()>
c002761d:	83 c4 10             	add    esp,0x10
c0027620:	90                   	nop
c0027621:	83 c4 0c             	add    esp,0xc
c0027624:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0027626 <CPU::~CPU()>:
c0027626:	83 ec 0c             	sub    esp,0xc
c0027629:	83 ec 0c             	sub    esp,0xc
c002762c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027630:	e8 cd ff ff ff       	call   c0027602 <CPU::~CPU()>
c0027635:	83 c4 10             	add    esp,0x10
c0027638:	83 ec 08             	sub    esp,0x8
c002763b:	68 98 11 00 00       	push   0x1198
c0027640:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027644:	e8 46 b0 fe ff       	call   c001268f <operator delete(void*, unsigned long)>
c0027649:	83 c4 10             	add    esp,0x10
c002764c:	83 c4 0c             	add    esp,0xc
c002764f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0027650 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0027650:	90                   	nop
c0027651:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0027652 <ThreadControlBlock::ThreadControlBlock()>:
c0027652:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027656:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002765d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027661:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0027668:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002766c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0027673:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027677:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c002767e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027682:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0027686:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002768a:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c002768e:	90                   	nop
c002768f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0027690 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0027690:	83 ec 0c             	sub    esp,0xc
c0027693:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027697:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002769d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276a1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00276a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276ac:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00276b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276b7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00276bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276c1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00276c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276cc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00276d3:	83 ec 0c             	sub    esp,0xc
c00276d6:	68 66 8d 02 c0       	push   0xc0028d66
c00276db:	e8 8f b0 fe ff       	call   c001276f <Dbg::kprintf(char const*, ...)>
c00276e0:	83 c4 10             	add    esp,0x10
c00276e3:	90                   	nop
c00276e4:	83 c4 0c             	add    esp,0xc
c00276e7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c00276e8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c00276e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00276ec:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00276ef:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c00276f0 <Vm::_FPUState::_FPUState()>:
c00276f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00276f4:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c00276fb:	90                   	nop
c00276fc:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c00276fe <PCI::~PCI()>:
c00276fe:	83 ec 0c             	sub    esp,0xc
c0027701:	ba e4 af 02 c0       	mov    edx,0xc002afe4
c0027706:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002770a:	89 10                	mov    DWORD PTR [eax],edx
c002770c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027710:	83 ec 0c             	sub    esp,0xc
c0027713:	50                   	push   eax
c0027714:	e8 27 bd fe ff       	call   c0013440 <Bus::~Bus()>
c0027719:	83 c4 10             	add    esp,0x10
c002771c:	90                   	nop
c002771d:	83 c4 0c             	add    esp,0xc
c0027720:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0027722 <PCI::~PCI()>:
c0027722:	83 ec 0c             	sub    esp,0xc
c0027725:	83 ec 0c             	sub    esp,0xc
c0027728:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002772c:	e8 cd ff ff ff       	call   c00276fe <PCI::~PCI()>
c0027731:	83 c4 10             	add    esp,0x10
c0027734:	83 ec 08             	sub    esp,0x8
c0027737:	68 58 01 00 00       	push   0x158
c002773c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027740:	e8 4a af fe ff       	call   c001268f <operator delete(void*, unsigned long)>
c0027745:	83 c4 10             	add    esp,0x10
c0027748:	83 c4 0c             	add    esp,0xc
c002774b:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c002774c <IDE::~IDE()>:
c002774c:	83 ec 0c             	sub    esp,0xc
c002774f:	ba 48 b2 02 c0       	mov    edx,0xc002b248
c0027754:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027758:	89 10                	mov    DWORD PTR [eax],edx
c002775a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002775e:	83 ec 0c             	sub    esp,0xc
c0027761:	50                   	push   eax
c0027762:	e8 b9 c7 fe ff       	call   c0013f20 <HardDiskController::~HardDiskController()>
c0027767:	83 c4 10             	add    esp,0x10
c002776a:	90                   	nop
c002776b:	83 c4 0c             	add    esp,0xc
c002776e:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0027770 <IDE::~IDE()>:
c0027770:	83 ec 0c             	sub    esp,0xc
c0027773:	83 ec 0c             	sub    esp,0xc
c0027776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002777a:	e8 cd ff ff ff       	call   c002774c <IDE::~IDE()>
c002777f:	83 c4 10             	add    esp,0x10
c0027782:	83 ec 08             	sub    esp,0x8
c0027785:	68 70 02 00 00       	push   0x270
c002778a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002778e:	e8 fc ae fe ff       	call   c001268f <operator delete(void*, unsigned long)>
c0027793:	83 c4 10             	add    esp,0x10
c0027796:	83 c4 0c             	add    esp,0xc
c0027799:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c002779a <SATABus::~SATABus()>:
c002779a:	83 ec 0c             	sub    esp,0xc
c002779d:	ba 28 b3 02 c0       	mov    edx,0xc002b328
c00277a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00277a6:	89 10                	mov    DWORD PTR [eax],edx
c00277a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00277ac:	83 ec 0c             	sub    esp,0xc
c00277af:	50                   	push   eax
c00277b0:	e8 6b c7 fe ff       	call   c0013f20 <HardDiskController::~HardDiskController()>
c00277b5:	83 c4 10             	add    esp,0x10
c00277b8:	90                   	nop
c00277b9:	83 c4 0c             	add    esp,0xc
c00277bc:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c00277be <SATABus::~SATABus()>:
c00277be:	83 ec 0c             	sub    esp,0xc
c00277c1:	83 ec 0c             	sub    esp,0xc
c00277c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00277c8:	e8 cd ff ff ff       	call   c002779a <SATABus::~SATABus()>
c00277cd:	83 c4 10             	add    esp,0x10
c00277d0:	83 ec 08             	sub    esp,0x8
c00277d3:	68 64 01 00 00       	push   0x164
c00277d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00277dc:	e8 ae ae fe ff       	call   c001268f <operator delete(void*, unsigned long)>
c00277e1:	83 c4 10             	add    esp,0x10
c00277e4:	83 c4 0c             	add    esp,0xc
c00277e7:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c00277e8 <ATA::~ATA()>:
c00277e8:	83 ec 0c             	sub    esp,0xc
c00277eb:	ba 68 b3 02 c0       	mov    edx,0xc002b368
c00277f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00277f4:	89 10                	mov    DWORD PTR [eax],edx
c00277f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00277fa:	83 ec 0c             	sub    esp,0xc
c00277fd:	50                   	push   eax
c00277fe:	e8 fb c7 fe ff       	call   c0013ffe <PhysicalDisk::~PhysicalDisk()>
c0027803:	83 c4 10             	add    esp,0x10
c0027806:	90                   	nop
c0027807:	83 c4 0c             	add    esp,0xc
c002780a:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c002780c <ATA::~ATA()>:
c002780c:	83 ec 0c             	sub    esp,0xc
c002780f:	83 ec 0c             	sub    esp,0xc
c0027812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027816:	e8 cd ff ff ff       	call   c00277e8 <ATA::~ATA()>
c002781b:	83 c4 10             	add    esp,0x10
c002781e:	83 ec 08             	sub    esp,0x8
c0027821:	68 7c 01 00 00       	push   0x17c
c0027826:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002782a:	e8 60 ae fe ff       	call   c001268f <operator delete(void*, unsigned long)>
c002782f:	83 c4 10             	add    esp,0x10
c0027832:	83 c4 0c             	add    esp,0xc
c0027835:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0027836 <ATAPI::~ATAPI()>:
c0027836:	83 ec 0c             	sub    esp,0xc
c0027839:	ba d4 b3 02 c0       	mov    edx,0xc002b3d4
c002783e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027842:	89 10                	mov    DWORD PTR [eax],edx
c0027844:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027848:	83 ec 0c             	sub    esp,0xc
c002784b:	50                   	push   eax
c002784c:	e8 ad c7 fe ff       	call   c0013ffe <PhysicalDisk::~PhysicalDisk()>
c0027851:	83 c4 10             	add    esp,0x10
c0027854:	90                   	nop
c0027855:	83 c4 0c             	add    esp,0xc
c0027858:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c002785a <ATAPI::~ATAPI()>:
c002785a:	83 ec 0c             	sub    esp,0xc
c002785d:	83 ec 0c             	sub    esp,0xc
c0027860:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027864:	e8 cd ff ff ff       	call   c0027836 <ATAPI::~ATAPI()>
c0027869:	83 c4 10             	add    esp,0x10
c002786c:	83 ec 08             	sub    esp,0x8
c002786f:	68 80 01 00 00       	push   0x180
c0027874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027878:	e8 12 ae fe ff       	call   c001268f <operator delete(void*, unsigned long)>
c002787d:	83 c4 10             	add    esp,0x10
c0027880:	83 c4 0c             	add    esp,0xc
c0027883:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0027884 <SATA::~SATA()>:
c0027884:	83 ec 0c             	sub    esp,0xc
c0027887:	ba f8 b4 02 c0       	mov    edx,0xc002b4f8
c002788c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027890:	89 10                	mov    DWORD PTR [eax],edx
c0027892:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027896:	83 ec 0c             	sub    esp,0xc
c0027899:	50                   	push   eax
c002789a:	e8 5f c7 fe ff       	call   c0013ffe <PhysicalDisk::~PhysicalDisk()>
c002789f:	83 c4 10             	add    esp,0x10
c00278a2:	90                   	nop
c00278a3:	83 c4 0c             	add    esp,0xc
c00278a6:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c00278a8 <SATA::~SATA()>:
c00278a8:	83 ec 0c             	sub    esp,0xc
c00278ab:	83 ec 0c             	sub    esp,0xc
c00278ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00278b2:	e8 cd ff ff ff       	call   c0027884 <SATA::~SATA()>
c00278b7:	83 c4 10             	add    esp,0x10
c00278ba:	83 ec 08             	sub    esp,0x8
c00278bd:	68 74 01 00 00       	push   0x174
c00278c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00278c6:	e8 c4 ad fe ff       	call   c001268f <operator delete(void*, unsigned long)>
c00278cb:	83 c4 10             	add    esp,0x10
c00278ce:	83 c4 0c             	add    esp,0xc
c00278d1:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c00278d2 <AVX::~AVX()>:
c00278d2:	83 ec 0c             	sub    esp,0xc
c00278d5:	ba 34 b5 02 c0       	mov    edx,0xc002b534
c00278da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00278de:	89 10                	mov    DWORD PTR [eax],edx
c00278e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00278e4:	83 ec 0c             	sub    esp,0xc
c00278e7:	50                   	push   eax
c00278e8:	e8 95 c7 fe ff       	call   c0014082 <FPU::~FPU()>
c00278ed:	83 c4 10             	add    esp,0x10
c00278f0:	90                   	nop
c00278f1:	83 c4 0c             	add    esp,0xc
c00278f4:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c00278f6 <AVX::~AVX()>:
c00278f6:	83 ec 0c             	sub    esp,0xc
c00278f9:	83 ec 0c             	sub    esp,0xc
c00278fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027900:	e8 cd ff ff ff       	call   c00278d2 <AVX::~AVX()>
c0027905:	83 c4 10             	add    esp,0x10
c0027908:	83 ec 08             	sub    esp,0x8
c002790b:	68 58 01 00 00       	push   0x158
c0027910:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027914:	e8 76 ad fe ff       	call   c001268f <operator delete(void*, unsigned long)>
c0027919:	83 c4 10             	add    esp,0x10
c002791c:	83 c4 0c             	add    esp,0xc
c002791f:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0027920 <MMX::~MMX()>:
c0027920:	83 ec 0c             	sub    esp,0xc
c0027923:	ba 74 b5 02 c0       	mov    edx,0xc002b574
c0027928:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002792c:	89 10                	mov    DWORD PTR [eax],edx
c002792e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027932:	83 ec 0c             	sub    esp,0xc
c0027935:	50                   	push   eax
c0027936:	e8 47 c7 fe ff       	call   c0014082 <FPU::~FPU()>
c002793b:	83 c4 10             	add    esp,0x10
c002793e:	90                   	nop
c002793f:	83 c4 0c             	add    esp,0xc
c0027942:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0027944 <MMX::~MMX()>:
c0027944:	83 ec 0c             	sub    esp,0xc
c0027947:	83 ec 0c             	sub    esp,0xc
c002794a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002794e:	e8 cd ff ff ff       	call   c0027920 <MMX::~MMX()>
c0027953:	83 c4 10             	add    esp,0x10
c0027956:	83 ec 08             	sub    esp,0x8
c0027959:	68 58 01 00 00       	push   0x158
c002795e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027962:	e8 28 ad fe ff       	call   c001268f <operator delete(void*, unsigned long)>
c0027967:	83 c4 10             	add    esp,0x10
c002796a:	83 c4 0c             	add    esp,0xc
c002796d:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c002796e <SSE::~SSE()>:
c002796e:	83 ec 0c             	sub    esp,0xc
c0027971:	ba b4 b5 02 c0       	mov    edx,0xc002b5b4
c0027976:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002797a:	89 10                	mov    DWORD PTR [eax],edx
c002797c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027980:	83 ec 0c             	sub    esp,0xc
c0027983:	50                   	push   eax
c0027984:	e8 f9 c6 fe ff       	call   c0014082 <FPU::~FPU()>
c0027989:	83 c4 10             	add    esp,0x10
c002798c:	90                   	nop
c002798d:	83 c4 0c             	add    esp,0xc
c0027990:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0027992 <SSE::~SSE()>:
c0027992:	83 ec 0c             	sub    esp,0xc
c0027995:	83 ec 0c             	sub    esp,0xc
c0027998:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002799c:	e8 cd ff ff ff       	call   c002796e <SSE::~SSE()>
c00279a1:	83 c4 10             	add    esp,0x10
c00279a4:	83 ec 08             	sub    esp,0x8
c00279a7:	68 58 01 00 00       	push   0x158
c00279ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00279b0:	e8 da ac fe ff       	call   c001268f <operator delete(void*, unsigned long)>
c00279b5:	83 c4 10             	add    esp,0x10
c00279b8:	83 c4 0c             	add    esp,0xc
c00279bb:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c00279bc <x87::~x87()>:
c00279bc:	83 ec 0c             	sub    esp,0xc
c00279bf:	ba f4 b5 02 c0       	mov    edx,0xc002b5f4
c00279c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00279c8:	89 10                	mov    DWORD PTR [eax],edx
c00279ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00279ce:	83 ec 0c             	sub    esp,0xc
c00279d1:	50                   	push   eax
c00279d2:	e8 ab c6 fe ff       	call   c0014082 <FPU::~FPU()>
c00279d7:	83 c4 10             	add    esp,0x10
c00279da:	90                   	nop
c00279db:	83 c4 0c             	add    esp,0xc
c00279de:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c00279e0 <x87::~x87()>:
c00279e0:	83 ec 0c             	sub    esp,0xc
c00279e3:	83 ec 0c             	sub    esp,0xc
c00279e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00279ea:	e8 cd ff ff ff       	call   c00279bc <x87::~x87()>
c00279ef:	83 c4 10             	add    esp,0x10
c00279f2:	83 ec 08             	sub    esp,0x8
c00279f5:	68 58 01 00 00       	push   0x158
c00279fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00279fe:	e8 8c ac fe ff       	call   c001268f <operator delete(void*, unsigned long)>
c0027a03:	83 c4 10             	add    esp,0x10
c0027a06:	83 c4 0c             	add    esp,0xc
c0027a09:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0027a0a <IOAPIC::~IOAPIC()>:
c0027a0a:	83 ec 0c             	sub    esp,0xc
c0027a0d:	ba 4c b7 02 c0       	mov    edx,0xc002b74c
c0027a12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a16:	89 10                	mov    DWORD PTR [eax],edx
c0027a18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a1c:	83 ec 0c             	sub    esp,0xc
c0027a1f:	50                   	push   eax
c0027a20:	e8 0b c0 fe ff       	call   c0013a30 <Device::~Device()>
c0027a25:	83 c4 10             	add    esp,0x10
c0027a28:	90                   	nop
c0027a29:	83 c4 0c             	add    esp,0xc
c0027a2c:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0027a2e <IOAPIC::~IOAPIC()>:
c0027a2e:	83 ec 0c             	sub    esp,0xc
c0027a31:	83 ec 0c             	sub    esp,0xc
c0027a34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027a38:	e8 cd ff ff ff       	call   c0027a0a <IOAPIC::~IOAPIC()>
c0027a3d:	83 c4 10             	add    esp,0x10
c0027a40:	83 ec 08             	sub    esp,0x8
c0027a43:	68 68 01 00 00       	push   0x168
c0027a48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027a4c:	e8 3e ac fe ff       	call   c001268f <operator delete(void*, unsigned long)>
c0027a51:	83 c4 10             	add    esp,0x10
c0027a54:	83 c4 0c             	add    esp,0xc
c0027a57:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0027a58 <APIC::~APIC()>:
c0027a58:	83 ec 0c             	sub    esp,0xc
c0027a5b:	ba 04 b7 02 c0       	mov    edx,0xc002b704
c0027a60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a64:	89 10                	mov    DWORD PTR [eax],edx
c0027a66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a6a:	83 ec 0c             	sub    esp,0xc
c0027a6d:	50                   	push   eax
c0027a6e:	e8 d9 ca fe ff       	call   c001454c <InterruptController::~InterruptController()>
c0027a73:	83 c4 10             	add    esp,0x10
c0027a76:	90                   	nop
c0027a77:	83 c4 0c             	add    esp,0xc
c0027a7a:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0027a7c <APIC::~APIC()>:
c0027a7c:	83 ec 0c             	sub    esp,0xc
c0027a7f:	83 ec 0c             	sub    esp,0xc
c0027a82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027a86:	e8 cd ff ff ff       	call   c0027a58 <APIC::~APIC()>
c0027a8b:	83 c4 10             	add    esp,0x10
c0027a8e:	83 ec 08             	sub    esp,0x8
c0027a91:	68 58 21 00 00       	push   0x2158
c0027a96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027a9a:	e8 f0 ab fe ff       	call   c001268f <operator delete(void*, unsigned long)>
c0027a9f:	83 c4 10             	add    esp,0x10
c0027aa2:	83 c4 0c             	add    esp,0xc
c0027aa5:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0027aa6 <PIC::~PIC()>:
c0027aa6:	83 ec 0c             	sub    esp,0xc
c0027aa9:	ba 9c b7 02 c0       	mov    edx,0xc002b79c
c0027aae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ab2:	89 10                	mov    DWORD PTR [eax],edx
c0027ab4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ab8:	83 ec 0c             	sub    esp,0xc
c0027abb:	50                   	push   eax
c0027abc:	e8 8b ca fe ff       	call   c001454c <InterruptController::~InterruptController()>
c0027ac1:	83 c4 10             	add    esp,0x10
c0027ac4:	90                   	nop
c0027ac5:	83 c4 0c             	add    esp,0xc
c0027ac8:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0027aca <PIC::~PIC()>:
c0027aca:	83 ec 0c             	sub    esp,0xc
c0027acd:	83 ec 0c             	sub    esp,0xc
c0027ad0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027ad4:	e8 cd ff ff ff       	call   c0027aa6 <PIC::~PIC()>
c0027ad9:	83 c4 10             	add    esp,0x10
c0027adc:	83 ec 08             	sub    esp,0x8
c0027adf:	68 58 21 00 00       	push   0x2158
c0027ae4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027ae8:	e8 a2 ab fe ff       	call   c001268f <operator delete(void*, unsigned long)>
c0027aed:	83 c4 10             	add    esp,0x10
c0027af0:	83 c4 0c             	add    esp,0xc
c0027af3:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0027af4 <APICTimer::~APICTimer()>:
c0027af4:	83 ec 0c             	sub    esp,0xc
c0027af7:	ba f0 b7 02 c0       	mov    edx,0xc002b7f0
c0027afc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b00:	89 10                	mov    DWORD PTR [eax],edx
c0027b02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b06:	83 ec 0c             	sub    esp,0xc
c0027b09:	50                   	push   eax
c0027b0a:	e8 3d e8 fe ff       	call   c001634c <Timer::~Timer()>
c0027b0f:	83 c4 10             	add    esp,0x10
c0027b12:	90                   	nop
c0027b13:	83 c4 0c             	add    esp,0xc
c0027b16:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0027b18 <APICTimer::~APICTimer()>:
c0027b18:	83 ec 0c             	sub    esp,0xc
c0027b1b:	83 ec 0c             	sub    esp,0xc
c0027b1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027b22:	e8 cd ff ff ff       	call   c0027af4 <APICTimer::~APICTimer()>
c0027b27:	83 c4 10             	add    esp,0x10
c0027b2a:	83 ec 08             	sub    esp,0x8
c0027b2d:	68 60 01 00 00       	push   0x160
c0027b32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027b36:	e8 54 ab fe ff       	call   c001268f <operator delete(void*, unsigned long)>
c0027b3b:	83 c4 10             	add    esp,0x10
c0027b3e:	83 c4 0c             	add    esp,0xc
c0027b41:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0027b42 <PIT::~PIT()>:
c0027b42:	83 ec 0c             	sub    esp,0xc
c0027b45:	ba 40 b8 02 c0       	mov    edx,0xc002b840
c0027b4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b4e:	89 10                	mov    DWORD PTR [eax],edx
c0027b50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b54:	83 ec 0c             	sub    esp,0xc
c0027b57:	50                   	push   eax
c0027b58:	e8 ef e7 fe ff       	call   c001634c <Timer::~Timer()>
c0027b5d:	83 c4 10             	add    esp,0x10
c0027b60:	90                   	nop
c0027b61:	83 c4 0c             	add    esp,0xc
c0027b64:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0027b66 <PIT::~PIT()>:
c0027b66:	83 ec 0c             	sub    esp,0xc
c0027b69:	83 ec 0c             	sub    esp,0xc
c0027b6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027b70:	e8 cd ff ff ff       	call   c0027b42 <PIT::~PIT()>
c0027b75:	83 c4 10             	add    esp,0x10
c0027b78:	83 ec 08             	sub    esp,0x8
c0027b7b:	68 5c 01 00 00       	push   0x15c
c0027b80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027b84:	e8 06 ab fe ff       	call   c001268f <operator delete(void*, unsigned long)>
c0027b89:	83 c4 10             	add    esp,0x10
c0027b8c:	83 c4 0c             	add    esp,0xc
c0027b8f:	c3                   	ret    
